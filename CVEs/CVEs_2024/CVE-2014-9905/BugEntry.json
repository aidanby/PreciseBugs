{"buggy_code": ["2.1.2 (2014-01-XX)\n------------------\n\nNew features\n - it's now possible to set a default reminder for calendar components\n   using SOGoCalendarDefaultReminder\n - select multiple files to attach to a message or drag'n'drop files onto the\n   mail editor; will also now display progress of uploads\n - new popup menu to download all attachments of a mail\n - move & copy messages between different accounts\n - support for the Sieve 'body' extension (mail filter based on the body content)\n\nEnhancements\n - we now automatically convert <img src=data...> into file attachments\n   using CIDs. This prevents Outlook issues.\n - updated French and Finnish translations\n - XMLHttpRequest.js is now loaded conditionaly (< IE9)\n - format time in attendees invitation window according to the user's locale\n - improved IE11 support\n - respect signature placement when forwarding a message\n - respect Sieve server capabilities\n - encode messages in quoted-printable when content is bigger than 72 bytes\n - we now use binary encoding in memcached (#2587)\n - warn user when overbooking a resource by creating an event in its calendar (#2541)\n - converted JavaScript alerts to inline CSS dialogs in appointment editor\n - visually identify users with no freebusy information in autocompletion widget of attendees editor (#2565)\n - respect occurences of recurrent events when deleting selected events (#1950)\n - improved confirmation dialog box when deleting events and tasks\n - moved the DN cache to SOGoCache - avoiding sogod restarts after RDN operations\n\nBug fixes\n - don't load 'background' attribute (#2437)\n - fixed validation of subscribed folders (#2583)\n - fixed display of folder names in messages filter editor (#2569)\n - fixed contextual menu of the current calendar view (#2557)\n - fixed handling of the '=' character in cards/events/tasks (#2505)\n - simplify searches in the address book (#2187)\n - warn user when dnd failed because of a resource conflict (#1613)\n - respect the maximum number of bookings when viewing the freebusy information of a resource (#2560)\n - encode HTML entities when forwarding an HTML message inline in plain text composition mode (#2411)\n\n2.1.1b (2013-12-04)\n-------------------\n\nEnhancements\n - updated CKEditor to version 4.3.0 and added tab module\n\nBug fixes\n - HTML formatting is now retained when forwarding/replying to a mail using the HTML editor\n - put the text part before the HTML part when composing mail to fix a display issue with Thunderbird (#2512)\n\n2.1.1a (2013-11-22)\n-------------------\n\nBug fixes\n - fixed Sieve filters editor (#2504)\n - moved missing translation to UI/Common (#2499)\n - fixed potential crasher in OpenChange\n\n2.1.1 (2013-11-19)\n------------------\n\nNew features\n - creation and modification of mail labels\n\nEnhancements\n - the color picker is no longer a popup window\n\nBug fixes\n - fixed utf8 character handling in special folder names\n   Special folder names can now be set as UTF8 or modified UTF7 in sogo.conf\n - fixed reply-to header not being set for auxiliary IMAP accounts\n - fixed handling of broken/invalid email addresses\n\n2.1.0 (2013-11-07)\n------------------\n\nEnhancements\n - improved order of user rights in calendar module (#1431)\n - increased height of alarm editor when email alarms are enabled\n - added SMTP AUTH support for sogo-ealarms-notify\n - added support for LDAP password change against AD/Samba4\n - added Apache configuration for Apple autoconfiguration (#2248)\n - the init scripts now start 3 sogod processes by default instead of 1\n - SOGo now also sends a plain/text parts when sending HTML mails (#2217)\n - SOGo now listens on 127.0.0.1:20000 by default (instead of *:20000)\n - SOGo new uses the latest WebDAV sync response type (#1275)\n - updated CKEditor to version 4.2.2 and added the tables-related modules (#2410)\n - improved display of vEvents in messages\n\nBug fixes\n - fixed handling of an incomplete attachment filename (#2385)\n - fixed Finnish mail reply/forward templates (#2401)\n - fixed position of red line of current time (#2373)\n - fixed crontab error (#2372)\n - avoid using too many LDAP connections while looping through LDAP results\n - don't encode HTML entities in mail subject of notification (#2402)\n - fixed crash of Samba when sending an invitation (#2398)\n - fixed selection of destination calendar when saving a task or an event (#2353)\n - fixed \"display remote images\" preference for message in a popup (#2417)\n - avoid crash when handling malformed or non-ASCII HTTP credentials (#2358)\n - fixed crash in DAV free-busy lookups when using SQL addressbooks (#2418)\n - disabled verbose logging of SMTP sessions by default\n - fixed high CPU usage when there are no available child processes and added logging when such a condition occurs\n - fixed memory consumption issues when doing dav lookups with huge result set\n - fixed S/MIME verification issues with certain OpenSSL versions\n - worked around an issue with chunked encoding of CAS replies (#2408)\n - fixed OpenChange corruption issue regarding predecessors change list (#2405)\n - avoid unnecessary UTF-7 conversions (#2318)\n - improved RTF parser to fix vCards (#2354)\n - fixed definition of the COMPLETED attribute of vTODO (#2240)\n - fixed DAV:resource-id property when sharing calendars (#2399)\n - fixed reload of multiple external web calendars (#2221)\n - fixed display of PDF files sent from Thunderbird (#2270)\n - fixed TLS support for IMAP (#2386)\n - fixed creation of web calendar when added using sogo-tool (#2007)\n - avoid crash when parsing HTML tags of a message (#2434)\n - fixed handling of LDAP groups with no email address (#1328)\n - fixed encoding of messages with non-ASCII characters (#2459)\n - fixed compilation with clang 3.2 (#2235)\n - truncated long fields of quick records to avoid an SQL error (#2461)\n - fixed IMAP ACLs (#2433)\n - removed inline JavaScript when viewing HTML messages (#2468)\n\n2.0.7 (2013-07-19)\n------------------\n\nNew features\n - print gridlines of calendar in 15-minute intervals\n - allow the events/tasks lists to be collapsable\n \nEnhancements\n - bubble box of events no longer overlaps the current event\n - now pass the x-originating-ip using the IMAP ID extension (#2366)\n - updated BrazilianPortuguese, Czech, Dutch, German, Polish and Russian translations\n\nBug fixes\n - properly handle RFC2231 everywhere\n - fixed minor XSS issues \n - fixed jquery-ui not bluring the active element when clicking on a draggable\n\n2.0.6b (2013-06-27)\n------------------\n\nBug fixes\n - properly escape the foldername to avoid XSS issues\n - fixed loading of MSExchangeFreeBusySOAPResponseMap\n\n2.0.6a (2013-06-25)\n------------------\n\nBug fixes\n - documentation fixes\n - added missing file for CAS single logout\n\n2.0.6 (2013-06-21)\n------------------\n\nEnhancements\n - updated CKEditor to version 4.1.1 (#2333)\n - new failed login attemps rate-limiting options. See the new\n   SOGoMaximumFailedLoginCount, SOGoMaximumFailedLoginInterval and\n   SOGoFailedLoginBlockInterval defaults\n - new message submissions rate-limiting options. See the new\n   SOGoMaximumMessageSubmissionCount, SOGoMaximumRecipientCount,\n   SOGoMaximumSubmissionInterval and SOGoMessageSubmissionBlockInterval defaults \n - now possible to send or not event notifications on a per-event basis\n - now possible to see who created an event/task in a delegated calendar\n - multi-domain support in OpenChange (implemented using a trick)\n\nBug fixes\n - fixed decoding of the charset parameter when using single quotes (#2306)\n - fixed potential crash when sending MDN from Sent folder (#2209)\n - fixed handling of unicode separators (#2309)\n - fixed public access when SOGoTrustProxyAuthentication is used (#2237)\n - fixed access right issues with import feature (#2294)\n - fixed IMAP ACL issue when SOGoForceExternalLoginWithEmail is used (#2313)\n - fixed handling of CAS logoutRequest (#2346)\n - fixed many major OpenChange stability issues\n\n2.0.5a (2013-04-17)\n------------------\n\nBug fixes\n - fixed an issue when parsing user CN with leading or trailing spaces (#2287)\n - fixed a crash that occured when saving contacts or tasks via Outlook\n\n2.0.5 (2013-04-11)\n------------------\n\nNew features\n - new system default SOGoEncryptionKey to be used to encrypt the passwords of\n   remote Web calendars when SOGoTrustProxyAuthentication is enabled\n - activated the menu option \"Mark Folder Read\" in the Webmail (#1473)\n\nEnhancements\n - added logging of the X-Forwarded-For HTTP header (#2229)\n - now use BSON instead of GNUstep's binary format for serializing\n    Outlook related cache files\n - updated Danish, Finnish, Polish and Slovak translations\n - added Arabic translation - thanks to Anass Ahmed\n\nBug fixes\n - don't use the cache for password lookups from login page (#2169)\n - fixed issue with exceptions in repeating events\n - avoid data truncation issue in OpenChange with mysql backend\n   run sql-update-2.0.4b_to_2.0.5-mysql.sh to update existing tables\n - avoid random crashes in OpenChange due to RTF conversion\n - fixed issue when modifying/deleting exceptions of recurring events\n - fixed major cache miss issue leading to slow Outlook resynchronizations\n - fixed major memory corruption issue when Outlook was saving \"messages\"\n - fixed filtering of sql contact entries when using dynamic domains (#2269)\n - sogo.conf can now be used by all tools (#2226)\n - SOPE: fixed handling of sieve capabilities after starttls (#2132)\n - OpenChange: fixed 'stuck email' problem when sending a mail\n - OpenChange NTLMAuthHandler: avoid tightloop when samba isn't available.\n - OpenChange NTLMAuthHandler: avoid crash while parsing cookies\n - OpenChange ocsmanager: a LOT of fixes, see git log\n\n\n2.0.4b (2013-02-04)\n------------------\n\nBug fixes\n - Fixed order of precedence for options (#2166)\n   The following order is enforced - first match wins\n     1. Command line arguments\n     2. .GNUstepDefaults\n     3. /etc/sogo/{debconf,sogo}.conf\n     4. SOGoDefaults.plist\n - fixed handling of LDAP DN containing special characters (#2152, #2207)\n - fixed handling of credential files for older GNUsteps (#2216)\n - fixed display of messages with control characters (#2079, #2177)\n - fixed tooltips in contacts list (#2211)\n - fixed classification menu in component editor (#2223)\n - fixed link to ACL editor for 'any authenticated user' (#2222, #2224)\n - fixed saving preferences when mail module is disabled\n - fixed handling for long credential strings (#2212)\n\n2.0.4a (2013-01-30)\n------------------\n\nEnhancements\n - updated Czech translation\n - birthday is now properly formatted in addressbook module\n\nBug fixes\n - fixed handling of groups with spaces in their UID\n - fixed possible infinite loop in repeatable object\n - fixed until date in component editor\n - fixed saving all-day event in appointment editor\n - fixed handling of decoding contacts UID\n - fixed support of GNUstep 1.20 / Debian Squeeze\n\n2.0.4 (2013-01-25)\n------------------\n\nNew features\n - sogo-tool: new \"dump-defaults\" command to easily create /etc/sogo/sogo.conf\n\nEnhancements\n - The sogo user is now a system user.\n   For new installs, this means that 'su - sogo' won't work anymore.\n   Please use 'sudo -u sogo cmd' instead\n   If used in scripts from cronjobs, 'requiretty' must be disabled in sudoers\n - added basic support for LDAP URL in user sources\n - renamed default SOGoForceIMAPLoginWithEmail to\n   SOGoForceExternalLoginWithEmail and extended it to SMTP authentication\n - updated the timezone files to the 2012j edition and removed RRDATES\n - updated CKEditor to version 4.0.1\n - added Finnish translation - thanks to Kari Salmu\n - updated translations\n - recurrence-id of all-day events is now set as a proper date with no time\n - 'show completed tasks' is now persistent\n - fixed memory usage consumption for remote ICS subscriptions\n\nBug fixes\n - fixed usage of browser's language for the login page\n - fixed partstat of attendee in her/his calendar\n - fixed French templates encoding\n - fixed CardDAV collections for OS X\n - fixed event recurrence editor (until date)\n - fixed column display for subfolders of draft & sent\n - improved IE7 support\n - fixed drag'n'drop of events with Safari\n - fixed first day of the week in datepickers\n - fixed exceptions of recurring all-day events\n\n2.0.3 (2012-12-06)\n------------------\n\nNew features\n - support for SAML2 for single sign-on, with the help of the lasso library\n - added support for the \"AUTHENTICATE\" command and SASL mechanisms\n - added domain default SieveHostFieldName\n - added a search field for tasks\n\nEnhancements\n - search the contacts for the organization attribute\n - in HTML mode, optionally place answer after the quoted text\n - improved memory usage of \"sogo-tool restore\"\n - fixed invitations status in OSX iCal.app/Calendar.app (cleanup RSVP attribute)\n - now uses \"imap4flags\" instead of the deprecated \"imapflags\"\n - added Slovak translation - thanks to Martin Pastor\n - updated translations\n\nBug fixes\n - fixed LDIF import with categories\n - imported events now keep their UID when possible\n - fixed importation of multiple calendars\n - fixed modification date when drag'n'droping events\n - fixed missing 'from' header in Outlook\n - fixed invitations in Outlook\n - fixed JavaScript regexp for Firefox\n - fixed JavaScript syntax for IE7\n - fixed all-day event display in day/week view\n - fixed parsing of alarm\n - fixed Sieve server URL fallback\n - fixed Debian cronjob (spool directory cleanup)\n\n2.0.2a (2012-11-15)\n-------------------\n\nEnhancements\n - improved user rights editor in calendar module\n - disable alarms for newly subsribed calendars\n\nBug fixes\n - fixed typos in Spanish (Spain) translation\n - fixed display of raw source for tasks\n - fixed title display of cards with a photo\n - fixed null address in reply-to header of messages\n - fixed scrolling for calendar/addressbooks lists\n - fixed display of invitations on BlackBerry devices\n - fixed sogo-tool rename-user for MySQL database\n - fixed corrupted attachments in Webmail\n - fixed parsing of URLs that can throw an exception\n - fixed password encoding in user sources\n\n2.0.2 (2012-10-24)\n------------------\n\nNew features\n - added support for SMTP AUTH\n - sogo configuration can now be set in /etc/sogo/sogo.conf\n - added support for GNU TLS\n\nEnhancements\n - speed up of the parsing of IMAP traffic\n - minor speed up of the web interface\n - speed up the scrolling of the message list in the mail module\n - speed up the deletion of a large amounts of entries in the contacts module\n - updated the timezone files to the 2012.g edition\n - openchange backend: miscellaneous speed up of the synchronization\n   operations\n - open file descriptors are now closed when the process starts\n\nBug fixes\n - the parameters included in the url of remote calendars are now taken into\n   account\n - fixed an issue occurring with timezone definitions providing multiple entries\n - openchange backend: miscellaneous crashes during certain Outlook\n   operations, which have appeared in version 2.0.0, have been fixed\n - fixed issues occuring on OpenBSD and potentially other BSD flavours\n\n2.0.1 (2012-10-10)\n-------------------\n\nEnhancements\n - deletion of contacts is now performed in batch, which speeds up the\n   operation for large numbers of items\n - scalability enhancements in the OpenChange backend that enables the first\n   synchronization of mailboxes in a more reasonable time and using less\n   memory\n - the task list is now sortable \n\nBug Fixes\n - improved support of IE 9\n\n2.0.0 (2012-09-27)\n-------------------\nNew Features\n - Microsoft Outlook compatibility layer\n\nEnhancements\n - updated translations\n - calendars list and mini-calendar are now always visible\n - tasks list has moved to a table in a tabs view along the events list\n - rows in tree view are now 4 pixels taller\n - node selection in trees now highlights entire row\n - new inline date picker\n - improved IE8/9 support\n - added support for standard/daylight timezone definition with end date\n - no longer possible to send a message multilpe times\n - mail editor title now reflects the current message subject\n - default language is selected on login page\n - mail notifications now include the calendar name\n\nBug Fixes\n - fixed translation of invitation replies\n - fixed vacation message encoding\n - fixed display of events of no duration\n - fixed error when copying/moving large set of contacts\n - fixed drag'n'drop of all-day events\n\n1.3.18a (2012-09-04)\n-------------------\nBug Fixes\n - fixed display of weekly events with no day mask\n - fixed parsing of mail headers\n - fixed support for OS X 10.8 (Mountain Lion)\n\n1.3.18 (2012-08-28)\n-------------------\nEnhancements\n - updated Catalan, Dutch, German, Hungarian, Russian, Spanish (Argentina), and\n   Spanish (Spain) translations\n - mail filters (Sieve) are no longer conditional to each other (all filters are\n   executed, no matter if a previous condition matches)\n - improved tasks list display\n - RPM packages now treat logrotate file as a config file\n - completed the transition from text/plain message templates to HTML\n - new packages for Debian 7.0 (Wheezy)\n\nBug Fixes\n - fixed passwords that would be prefixed with '{none}' when not using a\n   password algorithm\n - fixed handling of duplicated contacts in contact lists\n - fixed handling of exception dates with timezones in recurrent events\n - fixed validation of the interval in daily recurrent events with a day mask\n   covering multiple days\n - fixed name quoting when sending invitations\n\n1.3.17 (2012-07-26)\n-------------------\nNew Features\n - new contextual menu to view the raw content of events, tasks and contacts\n - send and/or receive email notifications when a calendar is modified (new\n   domain defaults SOGoNotifyOnPersonalModifications and\n   SOGoNotifyOnExternalModifications)\n - added the SOGoSearchMinimumWordLength domain default which controls the\n   minimal length required before triggering server-side search operations for\n   attendee completion, contact searches, etc. The default value is 2, which\n   means search operations are trigged once the 3rd character is typed.\n\nEnhancements\n - updated BrazilianPortuguese, Czech, Dutch, French, German, Italian,\n   Spanish (Argentina), Spanish (Spain) translations\n - all addresses from a contact are displayed in the Web interface (no longer\n   limited to one additional address)\n - improved Sieve script: vacation message is now sent after evaluating the\n   mail filters\n - updated CKEditor to version 3.6.4\n\nBug Fixes\n - fixed a crash when multiple mail headers of the same type were encountered\n - fixed logrotate script for Debian\n - fixed linking of libcurl on Ubuntu 12.04\n - fixed parsing of timezones when importing .ics files\n - fixed resource reservation for recurring events\n - fixed display of text attachments in messages\n - fixed contextual menu on newly created address books\n - fixed missing sender in mail notifications to removed attendees\n - improved invitations handling in iCal\n\n1.3.16 (2012-06-07)\n-------------------\nEnhancements\n - new password schemes for SQL authentication (crypt-md5, ssha (including\n   256/512 variants), cram-md5, smd5, crypt, crypt-md5)\n - new unique names for static resources to avoid browser caching when\n   updating SOGo\n - it's no longer possible to click the \"Upload\" button multiple times\n - allow delivery of mail with no subject, but alert the user\n - updated Dutch, German, French translations\n\nBug Fixes\n - fixed compilation under GNU/kFreeBSD\n - fixed compilation for arm architecture\n - fixed exceptions under 64bit GNUstep 1.24\n - fixed LDAP group expansion\n - fixed exception when reading ACL of a deleted mailbox\n - fixed exception when composing a mail while the database server is down\n - fixed handling of all-day repeating events with exception dates\n - fixed Sieve filter editor when matching all messages\n - fixed creation of URLs (A-tag) in messages\n\n1.3.15 (2012-05-15)\n-------------------\nNew Features\n - sources address books are now exposed in Apple and iOS AddressBook app\n   using the \"directory gateway\" extension of CardDAV\n - sogo-tool: new \"expire-sessions\" command\n - the all-day events container is now resized progressively\n - added handling of \"BYSETPOS\" for \"BYDAY\" sets in monthly recurrence\n   calculator\n - new domain default (SOGoMailCustomFromEnabled) to allow users to change\n   their \"from\" and \"reply-to\" headers \n - access to external calendar subscriptions (.ics) with authentication\n - new domain default (SOGoHideSystemEMail) to hide or not the system\n   email. This is currently limited to CalDAV operations\n\nEnhancements\n - updated Spanish (Argentina), German, Dutch translations\n - updated CKEditor to version 3.6.3\n - automatically add/remove attendees to recurrence exceptions when they are\n   being added to the master event\n - replaced the Scriptaculous Javascript framework by jQuery to improve the\n   drag'n'drop experience\n - updated timezone definition files\n\nBug Fixes\n - fixed wrong date validation in preferences module affecting French users\n - fixed bugs in weekly recurrence calculator\n - when saving a draft, fixed content-transfer-encoding to properly handle\n   8bit data\n - escaped single-quote in HTML view of contacts\n - fixed support of recurrent events with Apple iCal\n - fixed overbooking handling of resources with recurrent events\n - fixed auto-accept of resources when added later to an event\n\n1.3.14 (2012-03-23)\n-------------------\nEnhancements\n - when replying or inline-forwarding a message, we now prefer the HTML part\n   over the text part when composing HTML messages\n - when emptying the trash, we now unsubscribe from folders within the trash\n - added CalDAV autocompletion support for iPad (iOS 5.0.x)\n - improved notifications support for Apple iCal\n - updated Czech translation\n - updated Russian translation\n\nBug Fixes\n - fixed name of backup script in cronjob template\n - fixed crash caused by contacts with multiple mail values\n - fixed signal handlers to avoid possible hanging issues\n - fixed the \"user-preferences\" command of sogo-tool\n\n1.3.13 (2012-03-16)\n-------------------\nNew Features\n - email notifications now includes a new x-sogo-message-type mail header\n - added the \"IMAPHostnameFieldName\" parameter in SQL source to\n   specify a different IMAP hostname for each user (was already possible for\n   LDAP sources)\n - default event & task classification can now be set from the preferences window\n - contacts from LDAP sources can now be modified by privileged owners (see\n   the \"modifiers\" parameter)\n\nEnhancements\n - bundled a shell script to perform and manage backups using sogo-tool\n - increased the delay before starting drag and drop in Mail and Contacts module\n  to improve the user experience with cheap mouses\n - improved contact card layout when it includes a photo\n - updated German translation\n - updated Spanish (Spain) translation\n - updated Spanish (Argentina) translation\n - updated Ukrainian translation\n - updated Hungarian translation\n - updated Dutch translation\n\nBug Fixes\n - fixed escaping issue with PostgreSQL 8.1\n - fixed resizing issue when editing an HTML message\n - fixed Spanish (Argentina) templates for mail reply and forward\n - we no longer show public address books (from SOGoUserSources) on iOS 5.0.1\n - improved support for IE\n\n1.3.12c (2012-02-15)\n-------------------\n\nBug Fixes\n - fixed a possible crash when using a SQL source\n\n1.3.12b (2012-02-14)\n-------------------\n\nBug Fixes\n - we now properly escape strings via the database adapator methods when\n   saving users settings\n - fixed a crash when exporting a vCard without specifying a UID\n - fixed the contextual menu on newly created contacts and lists\n\n1.3.12a (2012-02-13)\n-------------------\n\nBug Fixes\n - the plus sign (+) is now properly escaped in JavaScript (fixes issue when\n   loading the mailboxes list)\n - added missing migration script in Debian/Ubuntu packages\n\n1.3.12 (2012-02-13)\n-------------------\nNew Features\n - show end time in bubble box of events\n - we now check for new mails in folders for which sieve rules are defined to\n   file messages into\n - new parameter DomainFieldName for SQL sources to dynamically determine the \n   domain of the user\n\nEnhancements\n - updated Ukrainian translation\n - updated Russian translation\n - updated Brazilian (Portuguese) translation\n - updated Italian translation\n - updated Spanish (Spain) translation\n - updated German translation\n - updated Catalan translation\n - updated Norwegian (Bokmal) translation\n - now possible to use memcached over a UNIX socket\n - increase size of content columns\n - improved import of .ics files\n - new cronjob template with commented out entries\n - LDAP passwords can now be encrypted with the specified algorithm\n - improved parsing of addresses when composing mail\n\nBug Fixes\n - fixed resizing issue of mail editor\n - alarms for tasks now depend on the start date and instead of the due date\n - increased the content column size in database tables to permit syncs of\n   cards with big photos in them\n - fixed intended behavior of WOSendMail\n - fixed selection issue with Firefox when editing the content of a textarea\n - fixed bug with daily recurrence calculator that would affect conflict detection\n - fixed issue with Apple Address Book 6.1 (1083) (bundled with MacOS X 10.7.3)\n - removed double line breaks in HTML mail and fixed empty tags in general\n\n1.3.11 (2011-12-12)\n-------------------\nNew Features\n - new experimental feature to force popup windows to appear in an iframe -- this mode\n   can be forced by setting the cookie \"SOGoWindowMode\" to \"single\"\n\nEnhancements\n - contacts from the email editor now appear in a pane, like in Thunderbird\n - improved display of contacts in Address Book module\n - \"remember login\" cookie now expires after one month\n - added DanishDenmark translation - thanks to Altibox\n - updated German translation\n - updated SpanishArgentina translation\n - updated SpanishSpain translation\n - updated Russian translation\n\nBug Fixes\n - fixed encoding of headers in sogo-ealarm-notify\n - fixed confirmation dialog box when deleting too many events\n - fixed issue when saving associating a category to an event/task\n - fixed time shift regression in Calendar module\n - activated \"standard conforming strings\" in the PosgreSQL adapter to fixed errors with backslashes\n - fixed a bug when GCSFolderDebugEnabled or GCSFolderManagerDebugEnabled were enabled\n\n1.3.10 (2011-11-30)\n-------------------\nNew Features\n - new migration script for SquirrelMail (address books)\n - users can now set an end date to their vacation message (sysadmin must \n   configure sogo-tool)\n\nEnhancements\n - splitted Norwegian translation into NorwegianBokmal and NorwegianNynorsk\n - splitted Spanish translation into SpanishSpain and SpanishArgentina\n - updated timezone files\n - updated French translation\n\nBug Fixes\n - added missing Icelandic wod files\n - fixed crash when the Sieve authentication failed\n - fixed bug with iOS devices and UIDs containing the @ symbol\n - fixed handling of commas in multi-values fields of versit strings\n - fixed support of UTF-8 characters in LDAP searches\n - added initial fixes for iCal 5 (Mac OS X 10.7)\n - Address Book 6.1 now shows properly the personal address book\n - fixed vcomponent updates for MySQL\n - fixed clang/llvm and libobjc2 build\n\n1.3.9 (2011-10-28)\n-------------------\nNew Features\n - new user defaults SOGoDefaultCalendar to specify which calendar is used when\n   creating an event or a task (selected, personal, first enabled)\n - new user defaults SOGoBusyOffHours to specify if off-hours should be\n   automatically added to the free-busy information\n - new indicator in the link banner when a vacation message (auto-reply) is active\n - new snooze function for events alarms in Web interface\n - new \"Remember login\" checkbox on the login page\n - authentication with SQL sources can now be performed on any database column\n   using the new LoginFieldNames parameter\n\nEnhancements\n - added support for the CalDAV move operation\n - phone numbers in the contacts web module are now links (tel:)\n - revamp of the modules link banner (15-pixel taller)\n - updated CKEditor to version 3.6.2\n - updated unread and flagged icons in Webmail module\n - new dependency on GNUstep 1.23\n\nBug Fixes\n - fixed support for Apple iOS 5\n - fixed handling of untagged IMAP responses\n - fixed handling of commas in email addresses when composing a message\n - fixed creation of clickable links for URLs surrounded by square brackets\n - fixed behaviour of combo box for contacts categories\n - fixed Swedish translation classes\n - fixed bug when setting no ACL on a calendar\n\n1.3.8b (2011-07-26)\n-------------------\nBug Fixes\n - fixed a bug with multi-domain configurations that would cause the first\n   authentication to fail\n\n1.3.8a (2011-07-19)\n-------------------\nNew Features\n - new system setting SOGoEnableDomainBasedUID to enable user identification\n     by domain\n\nBug Fixes\n - fixed a buffer overflow in SOPE (mainly affecting OpenBSD)\n\n1.3.8 (2011-07-14)\n-------------------\nNew Features\n - initial support for threaded-view in the webmail interface\n - sogo-tool: new \"rename-user\" command that automatically updates all the\n   references in the database after modifying a user id\n - sogo-tool: new \"user-preferences {get,set,unset} command to manipulate\n   user's defaults/settings.\n - groups support for IMAP ACLs\n - now possible to define multiple forwarding addresses\n - now possible to define to-the-minute events/tasks\n - the domain can be selected from the login page when using multiple domains\n   (SOGoLoginDomains)\n - sources from one domain can be accessed from another domain when using\n   multiple domains (SOGoDomainsVisibility)\n- added Icelandic translation - thanks to Anna Jonna Armannsdottir\n\nEnhancements\n - improved list selection and contextual menu behavior in all web modules\n - the quota status bar is now updated more frequently in the webmail module\n - automatically create new cards when populating a list of contacts with unknown entries\n - added fade effect when displaying and hiding dialog boxes in Web interface\n - updated CKEditor to version 3.6.1\n - updated Russian translation\n\nBug Fixes\n - submenus in contextual menus splitted in multiple lists are now displayed correctly\n - fixed display of cards/lists icons in public address books\n - no longer accept an empty string when renaming a calendar\n - fixed display of daily events that cover two days\n - fixed time shift issue when editing an event title on iOS\n - fixed bug when using indirect LDAP binds and bindAsCurrentUser\n - fixed bugs when converting an event to an all-day one\n - many small fixes related to CalDAV scheduling\n - many OpenBSD-related fixes\n \n1.3.7 (2011-05-03)\n-------------------\nNew Features\n - IMAP namespaces are now translated and the full name of the\n   mailbox owner is extracted under \"Other Users\" \n - added the \"authenticationFilter\" parameter for SQL-based\n   sources to limit who can authenticate to a local SOGo instance\n - added the \"IMAPLoginFieldName\" parameter in authentication sources to\n   specify a different value for IMAP authentication\n - added support for resources like projectors, conference rooms\n   and more which allows SOGo to avoid double-booking of them\n   and also allows SOGo to automatically accept invitations for them\n\nEnhancements\n - the personal calendar in iCal is now placed at the very top\n - the recipients selection works more like Thunderbird when\n   composing emails\n - improved the documentation regarding groups in LDAP\n - minor improvements to the webmail module\n - minor improvements to the contacts web module\n\nBug Fixes\n - selection problems with Chrome under OS X in the webmail interface\n - crash when some events had no end date\n\n\n1.3.6 (2011-04-08)\n-------------------\nNew Features\n- added Norwegian translation - thanks to Altibox\n\nEnhancements\n- updated Italian translation\n- updated Ukranian translation\n- updated Spanish translation\n- \"check while typing\" is no longer enabled by default in HTML editor\n- show unread messages count in window title in the webmail interface\n- updated CKEditor to version 3.5.2\n- contact lists now have their own icons in the contacts web module\n- added the ability to invite people and to answer invitations from the iOS\n  Calendar\n- alarms are no longer exported to DAV clients for calendars where the alarms\n  are configured to be disabled\n- IMAP connection pooling is disabled by default to avoid flooding the IMAP\n  servers in multi-process environments (NGImap4DisableIMAP4Pooling now set\n  to \"YES\" by default)\n- sogo-tool: the remove-doubles command now makes use of the card complete\n  names\n- sope-appserver: added the ability to configure the minutes timeout per\n  request after which child processes are killed, via\n   WOWatchDogRequestTimeout (default: 10)\n\nBug Fixes\n- restored the automatic expunge of IMAP folders\n- various mutli-domain fixes\n- various timezone fixes\n- fixed various issues occurring with non-ascii strings received from DAV\n  clients\n- sogo-tool: now works in multi-domain environments\n- sogo-tool: now retrieves list of users from the folder info table\n- sogo-tool: the remove-doubles command is now compatible with the\n  synchronization mechanisms\n- sope-mime: fixed some parsing problems occurring with dbmail\n- sope-mime: fixed the fetching of mail body parts when other untagged\n  responses are received\n- sope-appserver: fixed a bug leaving child processes performing the watchdog\n  safety belt cleanup\n\n1.3.5 (2011-01-25)\n-------------------\nNew Features\n- implemented secured sessions\n- added SHA1 password hashing in SQL sources\n- mail aliases columns can be specified for SQL sources through the configuration parameter MailFieldNames\n\nEnhancements\n- updated CKEditor to version 3.4.3\n- removed the Reply-To header in sent messages\n- the event timezone is now considered when computing an event recurrence rule\n- improved printing of a message with multple recipients\n- the new parameter SearchFieldNames allows to specify which LDAP fields to query when filtering contacts\n\nBug Fixes\n- restored current time shown as a red line in calendar module\n- logout button no longer appears when SOGoCASLogoutEnabled is set to NO\n- fixed error when deleting freshly created addressbooks\n- the mail column in SQL sources is not longer ignored\n- fixed wrapping of long lines in messages with non-ASCII characters\n- fixed a bug that would prevent alarms to be triggered when non-repetitive\n\n1.3.4 (2010-11-17)\n-------------------\n- updated CKEditor to version 3.4.2\n- added event details in invitation email\n- fixed a bug that would prevent web calendars from being considered as such\n  under certain circumstances\n- when relevant, the \"X-Forward\" is added to mail headers with the client's\n  originating IP\n- added the ability to add categories to contacts as well as to configure the\n  list of contact categories in the preferences\n- improved performance of live-loading of messages in the webmail interface\n- fixed a bug that would not identify which calendars must be excluded from the\n  freebusy information\n- increased the contrast ratio of input/select/textarea fields\n\n1.3.3 (2010-10-19)\n-------------------\n- added Catalan translation, thanks to Hector Rulot\n- fixed German translation\n- fixed Polish translation\n- fixed Italian translation\n- enhanced default Apache config files\n- improved groups support by caching results\n- fixed base64 decoding issues in SOPE\n- updated the Polish, Italian and Ukrainian translations\n- added the capability of renaming subscribed address books\n- acls are now cached in memcached and added a major performance improvement\n  when listing calendar / contact folders\n- fixed many small issues pertaining to DST switches\n- auto complete of attendees caused an error if entered to fast\n- ctrl + a (select all) was not working properly in the Calendar UI on Firefox\n- calendar sync tag names and other metadata were not released when a calendar\n  was deleted\n- in the Contacts UI, clicking on the \"write\" toolbar button did not cause a\n  message to be displayed when no contact were selected\n- added the ability to rename a subscribed folder in the Contacts UI\n- card and event fields can now contain versit separators (\";\" and \",\")\n- fixed handling of unsigned int fields with the MySQL adaptor\n- improved the speed of certain IMAP operations, in particular for GMail\n  accounts\n- prevent excessing login failures with IMAP accounts\n- fixed spurious creation of header fields due to an bug of auto-completion in\n  the mail composition window\n- fixed a wrong redirect when clicking \"reply\" or \"forward\" while no mail were\n  selected\n- added caching of ACLs locally and in memcached\n\n1.3.2 (2010-09-21)\n-------------------\n- fixed various issues with some types of email address fields\n- added support for Ctrl-A (select all) in all web modules\n- added support for Ctrl-C/Ctrl-V (copy/paste) in the calendar web module\n- now builds properly with gnustep-make >= 2.2 and gnustep-base >= 1.20\n- added return receipts support in the webmail interface\n- added CardDAV support (Apple AddressBook and iPhone)\n- added support for multiple, external IMAP accounts\n- added SSL/TLS support for IMAP accounts (system and external)\n- improved and standardized alerts in all web modules\n- added differentiation of public, private and confidential events\n- added display of unread messages count for all mailboxes\n- added support for email event reminders\n\n1.3.1 (2010-08-19)\n-------------------\n- added migration scripts for Horde (email signatures and address books)\n- added migration script for Oracle Calendar (events, tasks and access rights)\n- added Polish translation\n- added crypt support to SQL sources\n- updated Ukrainian translation\n- added the caldav-auto-schedule capability \n- improved support for IE8\n\n1.3.0 (2010-07-21)\n-------------------\n- added support for the \"tentative\" status in the invitation responses\n- inviting a group of contacts is now possible, where each contact will be\n  extracted when the group is resolved\n- added support for modifying the role of the meeting participants\n- attendees having an \"RSVP\" set to \"FALSE\" or empty will no longer need/be\n  able to respond to invitations\n- added the ability to specify which calendar is taken into account when\n  retrieving a user's freebusy\n- added the ability to publish resources to unauthenticated (anonymous) users,\n  via the \"/SOGo/dav/public\" url\n- we now provide ICS and XML version of a user's personal calendars when\n  accessed from his own \"Calendar\" base collection\n- events are now displayed with the colored stripe representing their\n  category, if one is defined in the preferences\n- fixed display of all-day events in a monthly view where the timezone differs\n  from the current one\n- the event location is now displayed in the calendar view when defined\n  properly\n- added a caching mechanism for freebusy requests, in order to accelerate the\n  display\n- added the ability to specify a time range when requesting a time slot\n  suggestion\n- added live-loading support in the webmail interface with caching support\n- updated CKEditor and improved its integration with the current user\n  language for automatic spell checking support\n- added support for displaying photos from contacts\n- added a Ukrainian translation\n- updated the Czech translation\n\n1.2.2 (2010-05-04)\n-------------------\n- subscribers can now rename folders that do not belong to them in their own environment\n- added support for LDAP password policies\n- added support for custom Sieve filters\n- fixed timezone issues occurring specifically in the southern hemisphere\n- updated ckeditor to version 3.2\n- tabs: enabled the scrolling when overflowing\n- updated Czech translation, thanks to Milos Wimmer\n- updated German translation, tnanks to Alexander Greiner-Baer\n- removed remaining .wo templates, thereby easing the effort for future translations\n- fixed regressions with Courier IMAP and Dovecot\n- added support for BYDAY with multiple values and negative positions\n- added support for BYMONTHDAY with multiple values and negative positions\n- added support for BYMONTH with multiple values\n- added ability to delete events from a keypress\n- added the \"remove\" command to \"sogo-tool\", in order to remove user data and settings\n- added the ability to export address books in LDIF format from the web interface\n- improved the webmail security by banning a few sensitive tags and handling\n  \"object\" elements\n\n1.2.1 (2010-02-19)\n-------------------\n- added CAS authentication support\n- improved display of message size in webmail\n- improved security of login cookie by specifying a path\n- added drag and drop to the web calendar interface\n- calendar: fixed CSS oddities and harmonized appearance of event cells in all\n  supported browsers\n- added many IMAP fixes for Courier and Dovecot\n- many small bug fixes and other small enhancements\n\n1.2.0 (2010-01-25)\n-------------------\n- improved handling of popup windows when closing the parent window\n- major refresh of CSS\n- added handling of preforked processes by SOPE/SOGo (a load balancer is\n  therefore no longer needed)\n- added Swedish translation, thanks to Altrusoft\n- added multi-domain support\n- refactored the handling of user defaults to enable fallback on default\n  values more easily\n- added sensible default configuration values\n- updated ckeditor to version 3.1\n- added support for iCal 4 delegation\n- added support for letting the user choose which calendars should be shared\n  with iCal delegation\n- added the ability for users to subscribe other users to their resources from\n  the ACL dialog\n- added fixes for bugs in GNUstep 1.19.3 (NSURL)\n\n1.1.0 (2009-10-28)\n-------------------\n- added backup/restore tools for all user's data (calendars, address books, preferences, etc.)\n- added Web administrative interface (right now, only for ACLs)\n- added the \"Starred\" column in the webmail module to match Thunderbird's behavior\n- improved the calendar properties dialog to be able to enable/disabled calendars for synchronization\n- the default module can now be set on a per-user basis\n- a context menu is now available for tasks\n- added the capability of creating and managing lists of contacts (same as in Thunderbird)\n- added support for short date format in the calendar views\n- added support for iCal delegation (iCal 3)\n- added preliminary support for iCal 4\n- rewrote dTree.js to include major optimizations\n- added WebAuth support\n- added support for remote ICS subscriptions\n- added support for ICS and vCard/LDIF import\n- added support for event delegation (resend an invitation to someone else)\n- added initial support for checking and displaying S/MIME signed messages\n- added support SQL-based authentication sources and address books\n- added support for Sieve filters (Vacation and Forward)\n\n1.0.4 (2009-08-12)\n-------------------\n- added ability to create and modify event categories in the preferences\n- added contextual menu in web calendar views\n- added \"Reload\" button to refresh the current view in the calendar module\n- fixed freebusy support for Apple iCal\n- added support for the calendar application of the iPhone OS v3\n- added the possibility to disable alarms or tasks from Web calendars\n- added support for printing cards\n- added a default title when creating a new task or event\n- the completion checkbox of read-only tasks is now disabled\n- the event/task summary dialog is now similar to Lightning\n- added the current time as a line in the calendar module\n- added the necessary files to build Debian packages\n- added functional tests for DAV operations and fixed some issues related to\n  permissions\n- added Hungarian translation, thanks to S\u00e1ndor Kuti\n\n1.0.3 (2009-07-14)\n-------------------\n- improved search behavior of users folders (UIxContactsUserFolders)\n- the editor window in the web interface now appears directly when editing an exception occurence of a repeating event (no more dialog window, as in Lightning)\n- implemented the webdav sync spec from Cyrus Daboo, in order to reduce useless payload on databases\n- greatly reduced the number of SQL requests performed in many situations\n- added HTML composition in the web mail module\n- added drag and drop in the addressbook and mail modules\n- improved the attendees modification dialog by implementing slots management and zooming\n- added the capability to display the size of messages in the mail module\n- added the capability of limiting the number of returned events from DAV requests\n- added support for Cyrus Daboo's Webdav sync draft spec in the calendar and addressbook collections\n- added unicode support in the IMAP folder names\n- fixed some issues with the conversion of folder names in modified UTF-7\n- component editor in web interface stores the document URL in the ATTACH property of the component, like in Lightning\n- added Czech translation, thanks to \u0160imon Halam\u00e1sek\n- added Brazilian Portuguese translation, thanks to Alexandre Marcilio\n\n1.0.2 (2009-06-05)\n-------------------\n- basic alarm implementation for the web interface\n- added Welsh translation, thanks to Iona Bailey\n- added Russian translation, thanks to Alex Kabakaev\n- added support for Oracle RAC\n- added \"scope\" parameter to LDAP sources\n- now possible to use SSL (or TLS) for LDAP sources\n- added groups support in attendees and in ACLs\n- added support for user-based IMAP hostname\n- added support for IMAP subscriptions in web interface\n- added compatibility mode meta tag for IE8\n- added support for next/previous slot buttons in attendees window of\n   calendar module\n- user's status for events in the web interface now appears like in Lightning\n  (\"needs-action\" events are surrounded by a dashed line, \"declined\" events\n  are lighter)\n- improvements to the underlying SOGo cache infrastructure\n- improved JavaScript for selection and deselection in HTML tables and lists\n- improved the handling of user permissions in CalDAV and WebDAV queries\n  pertaining to accessing and deleting elements\n- fixed bug with LDAP-based address books and the entries references (ID vs\n  UID)\n- fixed week view alignment problem in IE7\n- fixed LDAP and SQL injection bugs\n- fixed many bugs related to the encoding and decoding of IMAP folder names\n\n1.0.1 (2009-04-07)\n-------------------\n- now possbile to navigate using keyboard keys in the address book and mail\n  modules\n- the favicon can now be specified using the SOGoFaviconRelativeURL preference\n- we now support LDAP encryption for binding and for contact lookups\n- we now support LDAP scopes for various search operations\n- when the status of an attendee changes, the event of an organizer is now\n  updated correctly if it doesn't reside in the personal folder\n- formatting improvements in the email invitation templates\n- Dovecot IMAP fixes and speed enhancements \n- code cleanups to remove most compiler warnings\n- various database fixes (Oracle, connection pools, unavailability, etc.)\n- init scripts improvements\n\n1.0.0 (2009-03-17)\n-------------------\n- when double-clicking in the all-day zone (day & week views), the \"All Day\n  event\" checkbox is now automatically checked\n- replaced the JavaScript FastInit class by the dom:loaded event of Prototype\n  JS\n- also updated Prototype JS to fix issues with IE7\n- improvements to the underlying SOGo cache infrastructure\n- many improvements to DST handling\n- better compatibility with nginx\n- new SOGo login screen\n- added MySQL support\n\n1.0 rc9 (2009-01-30)\n-------------------\n- added quota indicator in web mail module\n- improved drag handles behavior\n- added support for LDAP-based configuration\n- improved init script when killing proccesses\n- improved behavior of recurrent events with attendees\n- improved the ACL editor of the calendar web module\n- fixed handling of timezones in daily and weekly events\n\n1.0 rc8 (2008-08-26)\n-------------------\n- fixed a bug that would prevent deleted event and tasks from being removed\n  from the events and tasks list\n- fixed a bug where the search of contacts would be done in\n  authentication-only LDAP repositories\n- added the ability to transfer an event from one calendar to another\n- fixed a bug where deleting a contact would leave it listed in the contact\n  list until the next refresh\n- fixed a bug where events shared among different attendees would no longer be\n  updated automatically\n- changed the look of the Calendar module to match the look of Lightning 0.9\n- the event details appear when the user clicks on it\n- enable module constraints to be specified as patterns\n- inhibit internal links and css/javascript content from html files embedded\n  as attachments to mails\n- updated all icons to use those from Thunderbird 2 and Lightning 0.9\n- fixed a bug where the cached credentials wouldn't be expired using\n  SOGoLDAPUserManagerCleanupInterval\n- fixed a bug where mail headers wouldn't be decoded correctly\n- the copy/move menu items are correctly updated when IMAP folders are added,\n  removed or renamed\n- fixed a bug where the ctag of a calendar would not take the deleted events\n  into account, and another one where the value would always take the one of the\n  first calendar queries during the process lifetime.\n\n1.0 rc7 (2008-07-29)\n-------------------\n- work around the situation where Courier IMAP would refuse to rename the\n  current mailbox or move it into the trash\n- fixed tab index in mail composition window\n- fixed default privacy selection for new events\n- fixed a bug where concurrent versions of SOGo would create the user's\n  personal folders table twice\n- added address completion in the web mail editor\n- implemented support for CalDAV methods which were missing for supporting\n  iCal 3\n- added support to write to multiple contacts from the Address Book module\n- added support to move and copy one or many contacts to another address book\n  in the Address Book module\n- added icons to folders in Address Book module\n- fixed various bugs occuring with Safari 3.1\n- fixed various bugs occuring with Firefox 3\n- fixed bug where selecting the current day cell would not select the header\n  day cell and vice-versa in the daily and weekly views\n- the events are now computed in the server code again, in order to speedup\n  the drawing of events as well as to fix the bug where events would be\n  shifted back or forth of one day, depending on how their start time would be\n  compared to UTC time\n- implemented the handling of exceptional occurences of recurrent events\n- all the calendar preferences are now taken into account\n- the user defaults variable \"SOGoAuthentificationMethod\" has been renamed to\n  \"SOGoAuthenticationMethod\"\n- fixed a bug where the search of users would be done in addressbook-only LDAP\n  repositories\n\n1.0 rc6 (2008-05-20)\n-------------------\n- retrieving the freebusy DAV object was causing SOGo to crash\n- converted to use the gnustep-make 2 build framework\n- added custom DAV methods for managing user permissions from the SOGo\n  Integrator\n- pressing enter in the contact edition dialog will perform the\n  creation/update operation\n- implemented more of the CalDAV specification for compatibility with\n  Lightning 0.8\n- added Italian translation, thanks to Marco Lertora and Sauro Saltini\n- added initial logic for splitting overlapping events\n- improved restoration of drag handles state\n- improved contextual menu handling of Address Book module\n- fixed time/date control widget of attendees editor\n- fixed various bugs occuring with Safari 3.1\n- monthly events would not be returned properly\n- bi-weekly events would appear every week instead\n- weekly events with specified days of week would not appear on the correct\n  days\n- started supporting Lightning 0.8, improved general implementation of the\n  CalDAV protocol\n- added support for calendar colors, both in the web and DAV interfaces\n- refactored and fixed the implementation of DAV acl, with partial support for\n  CalDAV Scheduling extensions\n- removed the limitation that prevented the user of underscore characters in\n  usernames\n- added Spanish translation, thanks to Ernesto Revilla\n- added Dutch translation, thanks to Wilco Baan Hofman\n- applied a patch from Wilco Baan Hofman to let SOGo works correctly through a\n  Squid proxy\n\n1.0 rc5 (2008-02-08)\n-------------------\n- improved validation in the custom recurrence window\n- improved resiliance when parsing buggy recurrence rules\n- added the ability to authenticate users and to identify their resources with\n  an LDAP field other than the username\n- the monthly view would not switch to the next or previous month if the\n  current day of the new month was already displayed in the current view\n- enabled the instant-messaging entry in the addressbook\n- prevent the user from selecting disabled menu entries\n- added the ability to add/remove and rename calendars in DAV\n- no longer require a default domain name/imap server to work properly\n- the position of the splitters is now remembered across user sessions\n- improved the email notifications when creating and removing a folder\n- fixed the tab handling in IE7\n- improved the appearance of widgets in IE7\n- dramatic improvement in the overall stability of SOGo\n\n1.0 rc4 (2008-01-16)\n-------------------\n- improved the attendees window;\n- added the attendees pulldown menu in the event editor (like in Lightning);\n- added the recurrence window;\n- a message can be composed to multiple recipients from an address book or\n  from an event attendees menu;\n- many bugfixes in the Calendar module;\n\n1.0 rc3 (2007-12-17)\n-------------------\n- mail folders state is now saved;\n- image attachments in emails can now be saved;\n- the status of participants in represented with an icon;\n- added the option to save attached images;\n- fixed problems with mod_ngobjweb (part of SOPE);\n- the current module can no longer be reselected from the module navigation\n  bar;\n- many bugfixes in the Mail and Calendar modules;\n- improved handling of ACLs;\n\n1.0 rc2 (2007-11-27)\n-------------------\n- the user password is no longer transmitted in the url when logging in;\n- SOGo will no longer redirect the browser to the default page when a\n  specific location is submitted before login;\n- it is now possible to specify a sequence of LDAP attributes/values pairs\n  required in a user record to enable or prevent access to the Calendar and/or\n  Mail module;\n- many messages can be moved or copied at the same time;\n- replying to mails in the Sent folder will take the recipients of the\n  original mails into account;\n- complete review of the ACLs wrt to the address books, both in the Web UI and\n  through DAV access;\n- invitation from Google calendar are now correctly parsed;\n- it is now possible to search events by title in the Calendar module;\n- all the writable calendars are now listed in the event edition dialog;\n\n1.0 rc1 (2007-11-19)\n-------------------\n- the user can now configure his folders as drafts, trash or sent folder;\n- added the ability the move and copy message across mail folders;\n- added the ability to label messages;\n- implemented cookie-based identification in the web interface;\n- fixed a bug where a false positive happening whenever a wrong user login was\n  given during an indirect bind;\n- remove the constraint that a username can't begin with a digit;\n- deleting a message no longer expunges its parent folder;\n- implemented support for multiple calendars;\n- it is now possible to rename folders;\n- fixed search in message content;\n- added tooltips for toolbar buttons (English and French);\n- added checkmarks in live search options popup menus;\n- added browser detection with recommanded alternatives;\n- support for resizable columns in tables;\n- improved support for multiple selection in tables and lists;\n- improved IE7 and Safari support: attendees selector, email file attachments;\n- updated PrototypeJS to version 1.6.0;\n- improved address completion and freebusy timeline in attendees selector;\n- changed look of message composition window to Thunderbird 2.0;\n- countless bugfixes;\n\n0.9.0 (2007-08-24)\n-------------------\n- added the ability to choose the default module from the\n  application settings: \"Calendars\", \"Contacts\" or \"Mail\";\n- added the ability to show or hide the password change dialog from the\n  application settings;\n- put a work-around in the LDAP directory code to avoid fetching all the\n  entries whenever a specific one is being requested;\n- added support for limiting LDAP queries with the SOGoLDAPQueryLimit and\n  the SOGoLDAPSizeLimit settings;\n- fixed a bug where folders starting with digits would not be displayed;\n- improved IE7 and Safari support: priority menus, attendees selector,\n  search fields, textarea sizes;\n- added the ability to print messages from the mailer toolbar;\n- added the ability to use and configure SMTP as the email transport instead\n  of sendmail;\n- rewrote the handling of draft objects to comply better with the behaviour of\n  Thunderbird;\n- added a German translation based on Thunderbird;\n\n0.9.0 (2007-07-13)\n-------------------\n- added the ability to specify a super user through the SOGoSuperUsername user\n  default; \n- added the ability to view the message source;\n- don't autocreate folders if we are not their owners;\n- made compatible with PostgreSQL 8.2;\n- the months and years menus of the date selector would no longer appear;\n- fixed a bug which would produce task SQL records which would violate\n  non-null constraints on the quick calendar tables;\n- the tasks due date was wrongly set because of a change in the API;\n- it was impossible to empty the start and the due date in the task editor\n  from the moment they were set;\n- imap folders with non-ascii characters are now correctly accessed;\n- display the quotas of the selected mailbox on servers that support quotas;\n- a bug in the folder acl description was preventing from accessing resources\n  in dav;\n- AuthentificationMethod was renamed to SOGoAuthentificationMethod;\n- SOGoAuthentificationMethod needs to be explicitly set to \"bypass\" to prevent\n  login verification;\n\nLocal variables:\nmode: text\nEnd:\n", "/* UIxAppointmentEditor.m - this file is part of SOGo\n *\n * Copyright (C) 2007-2013 Inverse inc.\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#include <math.h>\n\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSEnumerator.h>\n#import <Foundation/NSTimeZone.h>\n\n#import <NGObjWeb/SoObject.h>\n#import <NGObjWeb/SoPermissions.h>\n#import <NGObjWeb/SoSecurityManager.h>\n#import <NGObjWeb/WORequest.h>\n#import <NGObjWeb/WOResponse.h>\n#import <NGObjWeb/NSException+HTTP.h>\n#import <NGExtensions/NSCalendarDate+misc.h>\n\n#import <NGCards/iCalAlarm.h>\n#import <NGCards/iCalCalendar.h>\n#import <NGCards/iCalEvent.h>\n#import <NGCards/iCalPerson.h>\n#import <NGCards/iCalTrigger.h>\n#import <NGCards/iCalRecurrenceRule.h>\n#import <NGCards/iCalTimeZone.h>\n#import <NGCards/iCalDateTime.h>\n\n#import <SOGo/NSDictionary+Utilities.h>\n#import <SOGo/NSString+Utilities.h>\n#import <SOGo/SOGoContentObject.h>\n#import <SOGo/SOGoDateFormatter.h>\n#import <SOGo/SOGoPermissions.h>\n#import <SOGo/SOGoUser.h>\n#import <SOGo/SOGoUserDefaults.h>\n#import <Appointments/iCalEntityObject+SOGo.h>\n#import <Appointments/iCalPerson+SOGo.h>\n#import <Appointments/SOGoAppointmentFolder.h>\n#import <Appointments/SOGoAppointmentObject.h>\n#import <Appointments/SOGoAppointmentOccurence.h>\n\n#import <Appointments/SOGoComponentOccurence.h>\n\n#import \"UIxComponentEditor.h\"\n#import \"UIxAppointmentEditor.h\"\n\n@implementation UIxAppointmentEditor\n\n- (id) init\n{\n  SOGoUser *user;\n\n  if ((self = [super init]))\n    {\n      aptStartDate = nil;\n      aptEndDate = nil;\n      item = nil;\n      event = nil;\n      isAllDay = NO;\n      isTransparent = NO;\n      sendAppointmentNotifications = YES;\n      componentCalendar = nil;\n\n      user = [[self context] activeUser];\n      ASSIGN (dateFormatter, [user dateFormatterInContext: context]);\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [item release];\n  [[event parent] release];\n  [aptStartDate release];\n  [aptEndDate release];\n  [dateFormatter release];\n  [componentCalendar release];\n  [super dealloc];\n}\n\n/* template values */\n- (iCalEvent *) event\n{\n  if (!event)\n    {\n      event = (iCalEvent *) [[self clientObject] occurence];\n      [[event parent] retain];\n    }\n\n  return event;\n}\n\n- (NSString *) saveURL\n{\n  return [NSString stringWithFormat: @\"%@/saveAsAppointment\",\n                   [[self clientObject] baseURL]];\n}\n\n/* icalendar values */\n- (BOOL) isAllDay\n{\n  NSString *hm;\n\n  hm = [self queryParameterForKey: @\"hm\"];\n\n  return (isAllDay\n          || [hm isEqualToString: @\"allday\"]);\n}\n\n- (void) setIsAllDay: (BOOL) newIsAllDay\n{\n  isAllDay = newIsAllDay;\n}\n\n- (BOOL) isTransparent\n{\n  return isTransparent;\n}\n\n- (void) setIsTransparent: (BOOL) newIsTransparent\n{\n  isTransparent = newIsTransparent;\n}\n\n- (void) setSendAppointmentNotifications: (BOOL) theBOOL\n{\n  sendAppointmentNotifications = theBOOL;\n}\n\n- (BOOL) sendAppointmentNotifications\n{\n  return sendAppointmentNotifications;\n}\n\n\n- (void) setAptStartDate: (NSCalendarDate *) newAptStartDate\n{\n  ASSIGN (aptStartDate, newAptStartDate);\n}\n\n- (NSCalendarDate *) aptStartDate\n{\n  return aptStartDate;\n}\n\n- (void) setAptEndDate: (NSCalendarDate *) newAptEndDate\n{\n  ASSIGN (aptEndDate, newAptEndDate);\n}\n\n- (NSCalendarDate *) aptEndDate\n{\n  return aptEndDate;\n}\n\n- (void) setItem: (NSString *) newItem\n{\n  ASSIGN (item, newItem);\n}\n\n- (NSString *) item\n{\n  return item;\n}\n\n- (SOGoAppointmentFolder *) componentCalendar\n{\n  return componentCalendar;\n}\n\n- (void) setComponentCalendar: (SOGoAppointmentFolder *) _componentCalendar\n{\n  ASSIGN (componentCalendar, _componentCalendar);\n}\n\n/* read-only event */\n- (NSString *) aptStartDateText\n{\n  return [dateFormatter formattedDate: aptStartDate];\n}\n\n- (NSString *) aptStartDateTimeText\n{\n  return [dateFormatter formattedDateAndTime: aptStartDate];\n}\n\n- (NSString *) aptEndDateText\n{\n  return [dateFormatter formattedDate: aptEndDate];\n}\n\n- (NSString *) aptEndDateTimeText\n{\n  return [dateFormatter formattedDateAndTime: aptEndDate];\n}\n\n- (BOOL) startDateIsEqualToEndDate\n{\n  return [aptStartDate isEqualToDate: aptEndDate];\n}\n\n/* actions */\n- (NSCalendarDate *) newStartDate\n{\n  NSCalendarDate *newStartDate, *now;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  int hour, minute;\n  unsigned int uStart, uEnd;\n\n  newStartDate = [self selectedDate];\n  if (![[self queryParameterForKey: @\"hm\"] length])\n    {\n      ud = [[context activeUser] userDefaults];\n      timeZone = [ud timeZone];\n      now = [NSCalendarDate calendarDate];\n      [now setTimeZone: timeZone];\n\n      uStart = [ud dayStartHour];\n      if ([now isDateOnSameDay: newStartDate])\n        {\n          uEnd = [ud dayEndHour];\n          hour = [now hourOfDay];\n          minute = [now minuteOfHour];\n          if (minute % 15)\n            minute += 15 - (minute % 15);\n          if (hour < uStart)\n            newStartDate = [now hour: uStart minute: 0];\n          else if (hour > uEnd)\n            newStartDate = [[now tomorrow] hour: uStart minute: 0];\n          else\n            newStartDate = [now hour: [now hourOfDay] minute: minute];\n        }\n      else\n        newStartDate = [newStartDate hour: uStart minute: 0];\n    }\n\n  return newStartDate;\n}\n\n- (id <WOActionResults>) defaultAction\n{\n  NSCalendarDate *startDate, *endDate;\n  NSString *duration;\n  NSTimeZone *timeZone;\n  unsigned int total, hours, minutes;\n  signed int offset;\n  SOGoObject <SOGoComponentOccurence> *co;\n  SOGoUserDefaults *ud;\n\n  [self event];\n  co = [self clientObject];\n\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n\n  if ([co isNew]\n      && [co isKindOfClass: [SOGoCalendarComponent class]])\n    {\n      startDate = [self newStartDate];\n      duration = [self queryParameterForKey:@\"duration\"];\n      if ([duration length] > 0)\n        {\n          total = [duration intValue];\n          hours = total / 100;\n          minutes = total % 100;\n        }\n      else\n        {\n          hours = 1;\n          minutes = 0;\n        }\n      endDate\n        = [startDate dateByAddingYears: 0 months: 0 days: 0\n                                 hours: hours minutes: minutes seconds: 0];\n      sendAppointmentNotifications = YES;\n    }\n  else\n    {\n      startDate = [event startDate];\n      isAllDay = [event isAllDay];\n      endDate = [event endDate];\n      if (isAllDay)\n        {\n          endDate = [endDate dateByAddingYears: 0 months: 0 days: -1];\n\n          // Convert the dates to the user's timezone\n          offset = [timeZone secondsFromGMTForDate: startDate];\n          startDate = [startDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                           seconds:-offset];\n          endDate = [endDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                       seconds:-offset];\n        }\n      isTransparent = ![event isOpaque]; \n      sendAppointmentNotifications = ([event firstChildWithTag: @\"X-SOGo-Send-Appointment-Notifications\"] ? NO : YES);\n    }\n\n  [startDate setTimeZone: timeZone];\n  ASSIGN (aptStartDate, startDate);\n\n  [endDate setTimeZone: timeZone];\n  ASSIGN (aptEndDate, endDate);\n\n  return self;\n}\n\n- (id <WOActionResults>) newAction\n{\n  NSString *objectId, *method, *uri;\n  id <WOActionResults> result;\n  SOGoAppointmentFolder *co;\n  SoSecurityManager *sm;\n\n  co = [self clientObject];\n  objectId = [co globallyUniqueObjectId];\n  if ([objectId length])\n    {\n      sm = [SoSecurityManager sharedSecurityManager];\n      if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                         onObject: co\n                        inContext: context])\n        method = [NSString stringWithFormat:@\"%@/%@.ics/editAsAppointment\",\n                           [co soURL], objectId] ;\n      else\n        method = [NSString stringWithFormat: @\"%@/Calendar/personal/%@.ics/editAsAppointment\",\n                           [self userFolderPath], objectId];\n      uri = [self completeHrefForMethod: method];\n      result = [self redirectToLocation: uri];\n    }\n  else\n    result = [NSException exceptionWithHTTPStatus: 500 /* Internal Error */\n                          reason: @\"could not create a unique ID\"];\n\n  return result;\n}\n\n- (void) _adjustRecurrentRules\n{\n  iCalRecurrenceRule *rule;\n  NSEnumerator *rules;\n  NSCalendarDate *untilDate;\n  SOGoUserDefaults *ud;\n  NSTimeZone *timeZone;\n  \n  rules = [[event recurrenceRules] objectEnumerator];\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n\n  while ((rule = [rules nextObject]))\n    {\n      untilDate = [rule untilDate];\n      if (untilDate)\n        {\n          // The until date must match the time of the end date\n          NSCalendarDate *date;\n\n          date = [[event endDate] copy];\n          [date setTimeZone: timeZone];\n          [untilDate setTimeZone: timeZone];\n          untilDate = [untilDate dateByAddingYears:0\n                                 months:0\n                                 days:0\n                                 hours:[date hourOfDay]\n                                 minutes:[date minuteOfHour]\n                                 seconds:0];\n          [rule setUntilDate: untilDate];\n          [date release];\n        }\n    }\n}\n\n- (id <WOActionResults>) saveAction\n{\n  SOGoAppointmentFolder *previousCalendar;\n  SOGoAppointmentObject *co;\n  NSString *jsonResponse;\n  SoSecurityManager *sm;\n  NSException *ex;\n\n  co = [self clientObject];\n  if ([co isKindOfClass: [SOGoAppointmentOccurence class]])\n    co = [co container];\n  previousCalendar = [co container];\n  sm = [SoSecurityManager sharedSecurityManager];\n  ex = nil;\n\n  if ([event hasRecurrenceRules])\n    [self _adjustRecurrentRules];\n\n  if ([co isNew])\n    {\n      if (componentCalendar\n          && ![[componentCalendar ocsPath]\n                isEqualToString: [previousCalendar ocsPath]])\n        {\n          // New event in a different calendar -- make sure the user can\n          // write to the selected calendar since the rights were verified\n          // on the calendar specified in the URL, not on the selected\n          // calendar of the popup menu.\n          if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                   onObject: componentCalendar\n                   inContext: context])\n            co = [componentCalendar lookupName: [co nameInContainer]\n                                    inContext: context\n                                    acquire: NO];\n        }\n      \n      // Save the event.\n      ex = [co saveComponent: event];\n    }\n  else\n    {\n      // The event was modified -- save it.\n      ex = [co saveComponent: event];\n\n      if (componentCalendar\n          && ![[componentCalendar ocsPath]\n                isEqualToString: [previousCalendar ocsPath]])\n        {\n          // The event was moved to a different calendar.\n          if (![sm validatePermission: SoPerm_DeleteObjects\n                   onObject: previousCalendar\n                   inContext: context])\n            {\n              if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                       onObject: componentCalendar\n                       inContext: context])\n                ex = [co moveToFolder: componentCalendar];\n            }\n        }\n    }\n\n  if (ex)\n    jsonResponse = [NSDictionary dictionaryWithObjectsAndKeys:\n                                   @\"failure\", @\"status\",\n                                 [ex reason],\n                                 @\"message\",\n                                 nil];\n  else\n    jsonResponse = [NSDictionary dictionaryWithObjectsAndKeys:\n                                   @\"success\", @\"status\", nil];\n  \n  return [self responseWithStatus: 200\n               andString: [jsonResponse jsonRepresentation]];\n}\n\n- (id <WOActionResults>) viewAction\n{\n  WOResponse *result;\n  NSDictionary *data;\n  NSCalendarDate *eventStartDate, *eventEndDate;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  SOGoCalendarComponent *co;\n  NSString *created_by;\n\n  BOOL resetAlarm;\n  unsigned int snoozeAlarm;\n\n  [self event];\n\n  result = [self responseWithStatus: 200];\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n  eventStartDate = [event startDate];\n  eventEndDate = [event endDate];\n  [eventStartDate setTimeZone: timeZone];\n  [eventEndDate setTimeZone: timeZone];\n  co = [self clientObject];\n  \n  if (!componentCalendar)\n    {\n      componentCalendar = [co container];\n      if ([componentCalendar isKindOfClass: [SOGoCalendarComponent class]])\n        componentCalendar = [componentCalendar container];\n      [componentCalendar retain];\n    }\n  \n  if ([event hasAlarms] && ![event hasRecurrenceRules])\n    {\n      iCalAlarm *anAlarm;\n      resetAlarm = [[[context request] formValueForKey: @\"resetAlarm\"] boolValue];\n      snoozeAlarm = [[[context request] formValueForKey: @\"snoozeAlarm\"] intValue];\n      if (resetAlarm)\n        {\n          iCalTrigger *aTrigger;\n          \n          anAlarm = [[event alarms] objectAtIndex: 0];\n          aTrigger = [anAlarm trigger];\n          [aTrigger setValue: 0 ofAttribute: @\"x-webstatus\" to: @\"triggered\"];\n          \n          [co saveComponent: event];\n        }\n      else if (snoozeAlarm)\n        {\n          anAlarm = [[event alarms] objectAtIndex: 0];\n          if ([[anAlarm action] caseInsensitiveCompare: @\"DISPLAY\"] == NSOrderedSame)\n            [co snoozeAlarm: snoozeAlarm];\n        }\n    }\n\n  created_by = [event createdBy];\n\n  data = [NSDictionary dictionaryWithObjectsAndKeys:\n                       [componentCalendar displayName], @\"calendar\",\n                       [event tag], @\"component\",\n                       [dateFormatter formattedDate: eventStartDate], @\"startDate\",\n                       [dateFormatter formattedTime: eventStartDate], @\"startTime\",\n                       [dateFormatter formattedDate: eventEndDate], @\"endDate\",\n                       [dateFormatter formattedTime: eventEndDate], @\"endTime\",\n                     //([event hasRecurrenceRules] ? @\"1\": @\"0\"), @\"isRecurring\",\n                       ([event isAllDay] ? @\"1\": @\"0\"), @\"isAllDay\",\n                       [event summary], @\"summary\",\n                       [event location], @\"location\",\n\t\t       created_by, @\"created_by\",\n                       [event comment], @\"description\",\n                       nil];\n  \n  [result appendContentString: [data jsonRepresentation]];\n\n  return result;\n}\n\n- (BOOL) shouldTakeValuesFromRequest: (WORequest *) request\n                           inContext: (WOContext*) context\n{\n  NSString *actionName;\n\n  actionName = [[request requestHandlerPath] lastPathComponent];\n\n  return ([[self clientObject] conformsToProtocol: @protocol (SOGoComponentOccurence)]\n          && [actionName hasPrefix: @\"save\"]);\n}\n\n- (void) takeValuesFromRequest: (WORequest *) _rq\n                     inContext: (WOContext *) _ctx\n{\n  int nbrDays;\n  iCalDateTime *startDate;\n  iCalTimeZone *tz;\n  NSCalendarDate *allDayStartDate;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  signed int offset;\n  id o;\n  \n  [self event];  \n  [super takeValuesFromRequest: _rq inContext: _ctx];\n\n  if (isAllDay)\n    {\n      nbrDays = ((float) abs ([aptEndDate timeIntervalSinceDate: aptStartDate])\n                 / 86400) + 1;\n      // Convert all-day start date to GMT (floating date)\n      ud = [[context activeUser] userDefaults];\n      timeZone = [ud timeZone];\n      offset = [timeZone secondsFromGMTForDate: aptStartDate];\n      allDayStartDate = [aptStartDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                                seconds:offset];\n      [event setAllDayWithStartDate: allDayStartDate\n                           duration: nbrDays];\n    }\n  else\n    {\n      [event setStartDate: aptStartDate];\n      [event setEndDate: aptEndDate];\n    }\n  \n  if (!isAllDay)\n    {\n      // Make sure there's a vTimeZone associated to the event unless it\n      // is an all-day event.\n      startDate = (iCalDateTime *)[event uniqueChildWithTag: @\"dtstart\"];\n      if (![startDate timeZone])\n        {\n          ud = [[context activeUser] userDefaults];\n          tz = [iCalTimeZone timeZoneForName: [ud timeZoneName]];\n          if ([[event parent] addTimeZone: tz])\n            {\n              [startDate setTimeZone: tz];\n              [(iCalDateTime *)[event uniqueChildWithTag: @\"dtend\"] setTimeZone: tz];\n            }\n        }\n    }\n  else if (![[self clientObject] isNew])\n    {\n      // Remove the vTimeZone when dealing with an all-day event.\n      startDate = (iCalDateTime *)[event uniqueChildWithTag: @\"dtstart\"];\n      tz = [startDate timeZone];\n      if (tz)\n        {\n          [startDate setTimeZone: nil];\n          [(iCalDateTime *)[event uniqueChildWithTag: @\"dtend\"] setTimeZone: nil];\n          [[event parent] removeChild: tz];\n        }\n    }\n\n  [event setTransparency: (isTransparent? @\"TRANSPARENT\" : @\"OPAQUE\")];\n\n  o = [event firstChildWithTag: @\"X-SOGo-Send-Appointment-Notifications\"];\n\n  if (!sendAppointmentNotifications && !o)\n    [event addChild: [CardElement simpleElementWithTag: @\"X-SOGo-Send-Appointment-Notifications\"  value: @\"NO\"]];\n  else if (sendAppointmentNotifications && o)\n    [event removeChild: o];\n  \n}\n\n- (id) _statusChangeAction: (NSString *) newStatus\n{\n  [[self clientObject] changeParticipationStatus: newStatus\n                                    withDelegate: nil];\n\n  return [self responseWith204];\n}\n\n- (id) acceptAction\n{\n  return [self _statusChangeAction: @\"ACCEPTED\"];\n}\n\n- (id) declineAction\n{\n  return [self _statusChangeAction: @\"DECLINED\"];\n}\n\n- (id) needsActionAction\n{\n  return [self _statusChangeAction: @\"NEEDS-ACTION\"];\n}\n\n- (id) tentativeAction\n{\n  return [self _statusChangeAction: @\"TENTATIVE\"];\n}\n\n- (id) delegateAction\n{\n//  BOOL receiveUpdates;\n  NSString *delegatedEmail, *delegatedUid;\n  iCalPerson *delegatedAttendee;\n  SOGoUser *user;\n  WORequest *request;\n  WOResponse *response;\n\n  response = nil;\n  request = [context request];\n  delegatedEmail = [request formValueForKey: @\"to\"];\n  if ([delegatedEmail length])\n    {\n      user = [context activeUser];\n      delegatedAttendee = [iCalPerson new];\n      [delegatedAttendee autorelease];\n      [delegatedAttendee setEmail: delegatedEmail];\n      delegatedUid = [delegatedAttendee uid];\n      if (delegatedUid)\n        {\n          SOGoUser *delegatedUser;\n          delegatedUser = [SOGoUser userWithLogin: delegatedUid];\n          [delegatedAttendee setCn: [delegatedUser cn]];\n        }\n      \n      [delegatedAttendee setRole: @\"REQ-PARTICIPANT\"];\n      [delegatedAttendee setRsvp: @\"TRUE\"];\n      [delegatedAttendee setParticipationStatus: iCalPersonPartStatNeedsAction];\n      [delegatedAttendee setDelegatedFrom:\n               [NSString stringWithFormat: @\"mailto:%@\", [[user allEmails] objectAtIndex: 0]]];\n      \n//      receiveUpdates = [[request formValueForKey: @\"receiveUpdates\"] boolValue];\n//      if (receiveUpdates)\n//      [delegatedAttendee setRole: @\"NON-PARTICIPANT\"];\n\n      response = (WOResponse*)[[self clientObject] changeParticipationStatus: @\"DELEGATED\"\n                                                   withDelegate: delegatedAttendee];\n    }\n  else\n    response = [NSException exceptionWithHTTPStatus: 400\n                                             reason: @\"missing 'to' parameter\"];\n\n  if (!response)\n    response = [self responseWith204];\n\n  return response;\n}\n\n@end\n", "/* UIxCalListingActions.m - this file is part of SOGo\n *\n * Copyright (C) 2006-2011 Inverse inc.\n *\n * Author: Wolfgang Sourdeau <wsourdeau@inverse.ca>\n *         Francis Lachapelle <flachapelle@inverse.ca>\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#import <Foundation/NSArray.h>\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSEnumerator.h>\n#import <Foundation/NSNull.h>\n#import <Foundation/NSString.h>\n#import <Foundation/NSTimeZone.h>\n#import <Foundation/NSValue.h>\n\n#import <NGObjWeb/WOContext.h>\n#import <NGObjWeb/WOContext+SoObjects.h>\n#import <NGObjWeb/WORequest.h>\n#import <NGObjWeb/WOResponse.h>\n\n#import <NGCards/iCalPerson.h>\n#import <NGCards/iCalTimeZone.h>\n#import <NGCards/iCalDateTime.h>\n\n#import <NGExtensions/NGCalendarDateRange.h>\n#import <NGExtensions/NSCalendarDate+misc.h>\n#import <NGExtensions/NSObject+Logs.h>\n\n#import <SOGo/SOGoDateFormatter.h>\n#import <SOGo/SOGoPermissions.h>\n#import <SOGo/SOGoUser.h>\n#import <SOGo/SOGoUserDefaults.h>\n#import <SOGo/SOGoUserFolder.h>\n#import <SOGo/SOGoUserSettings.h>\n#import <SOGo/NSCalendarDate+SOGo.h>\n#import <SOGo/NSArray+Utilities.h>\n#import <SOGo/NSObject+Utilities.h>\n#import <Appointments/SOGoAppointmentFolder.h>\n#import <Appointments/SOGoAppointmentFolders.h>\n#import <Appointments/SOGoAppointmentObject.h>\n#import <Appointments/SOGoWebAppointmentFolder.h>\n#import <Appointments/SOGoFreeBusyObject.h>\n\n#import <UI/Common/WODirectAction+SOGo.h>\n\n#import \"NSArray+Scheduler.h\"\n\n#import \"UIxCalListingActions.h\"\n\nstatic NSArray *eventsFields = nil;\nstatic NSArray *tasksFields = nil;\n\n#define dayLength       86400\n#define quarterLength   900             // number of seconds in 15 minutes\n#define offsetHours (24 * 5)            // number of hours in invitation window\n#define offsetSeconds (offsetHours * 60 * 60)  // number of seconds in\n                                               // invitation window\n/* 1 block = 15 minutes */\n#define offsetBlocks (offsetHours * 4)  // number of 15-minute blocks in invitation window\n#define maxBlocks (offsetBlocks * 2)    // maximum number of blocks to search\n                                        // for a free slot (10 days)\n\n@implementation UIxCalListingActions\n\n+ (void) initialize\n{\n  if (!eventsFields)\n    {\n      eventsFields = [NSArray arrayWithObjects: @\"c_name\", @\"c_folder\",\n\t\t\t      @\"calendarName\",\n\t\t\t      @\"c_status\", @\"c_title\", @\"c_startdate\",\n\t\t\t      @\"c_enddate\", @\"c_location\", @\"c_isallday\",\n\t\t\t      @\"c_classification\", @\"c_category\",\n                              @\"c_partmails\", @\"c_partstates\", @\"c_owner\",\n                              @\"c_iscycle\", @\"c_nextalarm\",\n                              @\"c_recurrence_id\", @\"isException\", @\"editable\",\n                              @\"erasable\", @\"ownerIsOrganizer\", nil];\n      [eventsFields retain];\n    }\n  if (!tasksFields)\n    {\n      tasksFields = [NSArray arrayWithObjects: @\"c_name\", @\"c_folder\",\n                             @\"calendarName\",\n\t\t\t     @\"c_status\", @\"c_title\", @\"c_enddate\",\n\t\t\t     @\"c_classification\", @\"c_location\", @\"c_category\",\n                             @\"editable\", @\"erasable\",\n                             @\"c_priority\", nil];\n      [tasksFields retain];\n    }\n}\n\n- (id) initWithRequest: (WORequest *) newRequest\n{\n  SOGoUser *user;\n\n  if ((self = [super initWithRequest: newRequest]))\n    {\n      componentsData = [NSMutableDictionary new];\n      startDate = nil;\n      endDate = nil;\n      ASSIGN (request, newRequest);\n      user = [[self context] activeUser];\n      ASSIGN (dateFormatter, [user dateFormatterInContext: context]);\n      ASSIGN (userTimeZone, [[user userDefaults] timeZone]);\n      dayBasedView = NO;\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [dateFormatter release];\n  [request release];\n  [componentsData release];\n  [userTimeZone release];\n  [super dealloc];\n}\n\n- (void) _setupDatesWithPopup: (NSString *) popupValue\n\t\t    andUserTZ: (NSTimeZone *) userTZ\n{\n  NSCalendarDate *newDate;\n  NSString *param;\n\n  if ([popupValue isEqualToString: @\"view_today\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [newDate endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_all\"])\n    {\n      startDate = nil;\n      endDate = nil;\n    }\n  else if ([popupValue isEqualToString: @\"view_next7\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 6] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_next14\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 13] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_next31\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 30] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_thismonth\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [[newDate firstDayOfMonth] beginOfDay];\n      endDate = [[newDate lastDayOfMonth] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_future\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = nil;\n    }\n  else if ([popupValue isEqualToString: @\"view_selectedday\"])\n    {\n      param = [request formValueForKey: @\"day\"];\n      if ([param length] > 0)\n\tstartDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t     andShortTimeString: nil\n\t\t\t\t     inTimeZone: userTZ] beginOfDay];\n      else\n\t{\n\t  newDate = [NSCalendarDate calendarDate];\n\t  [newDate setTimeZone: userTZ];\n\t  startDate = [newDate beginOfDay];\n\t}\n      endDate = [startDate endOfDay];\n    }\n}\n\n- (void) _setupContext\n{\n  SOGoUser *user;\n  NSString *param;\n\n  user = [context activeUser];\n  userLogin = [user login];\n\n  title = [request formValueForKey: @\"search\"];\n  param = [request formValueForKey: @\"filterpopup\"];\n  if ([param length])\n    {\n      [self _setupDatesWithPopup: param andUserTZ: userTimeZone];\n    }\n  else\n    {\n      param = [request formValueForKey: @\"sd\"];\n      if ([param length] > 0)\n\tstartDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t     andShortTimeString: nil\n\t\t\t\t     inTimeZone: userTimeZone] beginOfDay];\n      else\n\tstartDate = nil;\n\n      param = [request formValueForKey: @\"ed\"];\n      if ([param length] > 0)\n\tendDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t   andShortTimeString: nil\n\t\t\t\t   inTimeZone: userTimeZone] endOfDay];\n      else\n\tendDate = nil;\n\n      param = [request formValueForKey: @\"view\"];\n      dayBasedView = ![param isEqualToString: @\"monthview\"];\n    }\n}\n\n- (void) _fixComponentTitle: (NSMutableDictionary *) component\n                   withType: (NSString *) type\n{\n  NSString *labelKey;\n\n  labelKey = [NSString stringWithFormat: @\"%@_class%@\",\n\t\t       type, [component objectForKey: @\"c_classification\"]];\n  [component setObject: [self labelForKey: labelKey]\n\t     forKey: @\"c_title\"];\n}\n\n/*\n * Adjust the event start and end dates when there's a time change\n * in the period covering the view for the user's timezone.\n * @param theRecord the attributes of the event.\n */\n- (void) _fixDates: (NSMutableDictionary *) theRecord\n{\n  NSCalendarDate *aDate;\n  NSNumber *aDateValue;\n  NSString *aDateField;\n  int daylightOffset;\n  unsigned int count;\n  static NSString *fields[] = { @\"startDate\", @\"c_startdate\",\n\t\t\t\t@\"endDate\", @\"c_enddate\" };\n  \n  /* WARNING: This condition has been put and removed many times, please leave\n     it. Here is the story...\n     If _fixDates: is conditional to dayBasedView, the recurrences are computed\n     properly but the display time is wrong.\n     If _fixDates: is non-conditional, the reverse occurs.\n     If only this part of _fixDates: is conditional, both are right.\n\n     Regarding all day events, we need to execute this code no matter what the\n     date and the view are, otherwise the event will span on two days.\n     \n     ref bugs:\n     http://www.sogo.nu/bugs/view.php?id=909\n     http://www.sogo.nu/bugs/view.php?id=678\n     ...\n  */\n  \n  //NSLog(@\"***[UIxCalListingActions _fixDates:] %@\", [theRecord objectForKey: @\"c_title\"]);\n  if (dayBasedView || [[theRecord objectForKey: @\"c_isallday\"] boolValue])\n    {\n      for (count = 0; count < 2; count++)\n        {\n          aDateField = fields[count * 2];\n          aDate = [theRecord objectForKey: aDateField];\n\t  daylightOffset = (int) ([userTimeZone secondsFromGMTForDate: aDate]\n\t\t\t\t  - [userTimeZone secondsFromGMTForDate: startDate]);\n\t  //NSLog(@\"***[UIxCalListingActions _fixDates:] %@ = %@ (%i)\", aDateField, aDate, daylightOffset);\n          if (daylightOffset)\n            {\n              aDate = [aDate dateByAddingYears: 0 months: 0 days: 0 hours: 0\n                                       minutes: 0 seconds: daylightOffset];\n              [theRecord setObject: aDate forKey: aDateField];\n              aDateValue = [NSNumber numberWithInt: [aDate timeIntervalSince1970]];\n              [theRecord setObject: aDateValue forKey: fields[count * 2 + 1]];\n            }\n        }\n    }\n}\n\n- (NSArray *) _fetchFields: (NSArray *) fields\n\tforComponentOfType: (NSString *) component\n{\n  NSEnumerator *folders, *currentInfos;\n  SOGoAppointmentFolder *currentFolder;\n  NSMutableDictionary *newInfo;\n  NSMutableArray *infos;\n  NSNull *marker;\n  SOGoAppointmentFolders *clientObject;\n  SOGoUser *ownerUser;\n  NSString *owner, *role, *calendarName;\n  BOOL isErasable, folderIsRemote;\n\n  infos = [NSMutableArray array];\n  marker = [NSNull null];\n  clientObject = [self clientObject];\n\n  folders = [[clientObject subFolders] objectEnumerator];\n  while ((currentFolder = [folders nextObject]))\n    {\n      if ([currentFolder isActive])\n        {\n          folderIsRemote\n            = [currentFolder isKindOfClass: [SOGoWebAppointmentFolder class]];\n          currentInfos\n            = [[currentFolder fetchCoreInfosFrom: startDate\n                                              to: endDate\n                                           title: title\n                                       component: component] objectEnumerator];\n\t  owner = [currentFolder ownerInContext: context];\n\t  ownerUser = [SOGoUser userWithLogin: owner];\n\t  isErasable = ([owner isEqualToString: userLogin]\n\t\t\t|| [[currentFolder aclsForUser: userLogin] containsObject: SOGoRole_ObjectEraser]);\n          while ((newInfo = [currentInfos nextObject]))\n            {\n              if ([fields containsObject: @\"editable\"])\n                {\n                  if (folderIsRemote)\n\t\t    // .ics subscriptions are not editable\n                    [newInfo setObject: [NSNumber numberWithInt: 0]\n                                forKey: @\"editable\"];\n                  else\n                    {\n\t\t      // Identifies whether the active user can edit the event.\n                      role =\n                        [currentFolder roleForComponentsWithAccessClass:\n                                                 [[newInfo objectForKey: @\"c_classification\"] intValue]\n                                                                forUser: userLogin];\n                      if ([role isEqualToString: @\"ComponentModifier\"] \n                          || [role length] == 0)\n                        [newInfo setObject: [NSNumber numberWithInt: 1]\n                                    forKey: @\"editable\"];\n                      else\n                        [newInfo setObject: [NSNumber numberWithInt: 0]\n                                    forKey: @\"editable\"];\n                    }\n                }\n\t      if ([fields containsObject: @\"ownerIsOrganizer\"])\n\t\t{\n\t\t  // Identifies whether the active user is the organizer\n\t\t  // of this event.\n\t\t  NSString *c_orgmail;\n\t\t  c_orgmail = [newInfo objectForKey: @\"c_orgmail\"];\n\n\t\t  if ([c_orgmail isKindOfClass: [NSString class]] && [ownerUser hasEmail: c_orgmail])\n                    [newInfo setObject: [NSNumber numberWithInt: 1]\n                                forKey: @\"ownerIsOrganizer\"];\n                  else\n                    [newInfo setObject: [NSNumber numberWithInt: 0]\n                                forKey: @\"ownerIsOrganizer\"];\n\t\t}\n\t      if (isErasable)\n\t\t[newInfo setObject: [NSNumber numberWithInt: 1]\n\t\t\t    forKey: @\"erasable\"];\n\t      else\n\t\t[newInfo setObject: [NSNumber numberWithInt: 0]\n\t\t\t    forKey: @\"erasable\"];\n\t      [newInfo setObject: [currentFolder nameInContainer]\n                          forKey: @\"c_folder\"];\n              [newInfo setObject: [currentFolder ownerInContext: context]\n                          forKey: @\"c_owner\"];\n              calendarName = [currentFolder displayName];\n              if (calendarName == nil)\n                calendarName = @\"\";\n              [newInfo setObject: calendarName\n                          forKey: @\"calendarName\"];\n              if (![[newInfo objectForKey: @\"c_title\"] length])\n                [self _fixComponentTitle: newInfo withType: component];\n\t      // Possible improvement: only call _fixDates if event is recurrent\n\t      // or the view range span a daylight saving time change\n              [self _fixDates: newInfo];\n              [infos addObject: [newInfo objectsForKeys: fields\n                                         notFoundMarker: marker]];\n            }\n        }\n    }\n\n  return infos;\n}\n\n- (WOResponse *) _responseWithData: (NSArray *) data\n{\n  WOResponse *response;\n\n  response = [self responseWithStatus: 200];\n  [response appendContentString: [data jsonRepresentation]];\n\n  return response;\n}\n\n- (NSString *) _formattedDateForSeconds: (unsigned int) seconds\n\t\t\t      forAllDay: (BOOL) forAllDay\n{\n  NSCalendarDate *date;\n  NSString *formattedDate;\n\n  date = [NSCalendarDate dateWithTimeIntervalSince1970: seconds];\n  // Adjust for daylight saving time? (wrt to startDate)\n  //NSLog(@\"***[UIxCalListingActions _formattedDateForSeconds] user timezone is %@\", userTimeZone);\n  [date setTimeZone: userTimeZone];\n  if (forAllDay)\n    formattedDate = [dateFormatter formattedDate: date];\n  else\n    formattedDate = [dateFormatter formattedDateAndTime: date];\n\n  return formattedDate;    \n}\n\n//\n// We return:\n// \n// [[calendar name (full path), complete Event ID (full path), Fire date (UTC)], ..]\n//\n// Called when each module is loaded or whenever a calendar component is created, modified, deleted\n// or whenever there's a {un}subscribe to a calendar.\n//\n// Workflow :\n//\n// - for ALL subscribed and ACTIVE calendars\n//  - returns alarms that will occur in the next 48 hours or the non-triggered alarms\n//    for non-completed events\n//  - recurring events are currently ignored\n//\n- (WOResponse *) alarmsListAction\n{\n  SOGoAppointmentFolder *currentFolder;\n  SOGoAppointmentFolders *clientObject;\n  NSMutableArray *allAlarms;\n  NSEnumerator *folders;\n  WOResponse *response;\n  unsigned int browserTime, laterTime;\n\n  // We look for alarms in the next 48 hours\n  browserTime = [[[context request] formValueForKey: @\"browserTime\"] intValue];\n  laterTime = browserTime + 60*60*48;\n  clientObject = [self clientObject];\n  allAlarms = [NSMutableArray array];\n\n  folders = [[clientObject subFolders] objectEnumerator];\n  while ((currentFolder = [folders nextObject]))\n    {\n      if ([currentFolder isActive] && [currentFolder showCalendarAlarms])\n\t{\n\t  NSDictionary *entry;\n\t  NSArray *alarms;\n\t  BOOL isCycle;\n\t  int i;\n\n\t  alarms = [currentFolder fetchAlarmInfosFrom: [NSNumber numberWithInt: browserTime]\n\t\t\t\t  to: [NSNumber numberWithInt: laterTime]];\n\t  \n\t  for (i = 0; i < [alarms count]; i++)\n\t    {\n\t      entry = [alarms objectAtIndex: i];\n\t      isCycle = [[entry objectForKey: @\"c_iscycle\"] boolValue];\n\t      \n\t      if (!isCycle)\n\t\t{\n\t\t  [allAlarms addObject: [NSArray arrayWithObjects:\n\t\t\t\t\t\t [currentFolder nameInContainer],\n\t\t\t\t\t\t [entry objectForKey: @\"c_name\"],\n\t\t\t\t\t\t [entry objectForKey: @\"c_nextalarm\"],\n\t\t\t\t\t\t nil]];\n\t\t}\n\t    }\n\t}\n    }\n  \n  \n  response = [self responseWithStatus: 200];\n  [response appendContentString: [allAlarms jsonRepresentation]];\n  \n  return response;\n}\n\n- (void) checkFilterValue\n{\n  NSString *filter;\n  SOGoUserSettings *us;\n\n  filter = [[context request] formValueForKey: @\"filterpopup\"];\n  if ([filter length]\n      && ![filter isEqualToString: @\"view_all\"]\n      && ![filter isEqualToString: @\"view_future\"])\n    {\n      us = [[context activeUser] userSettings];\n      [us setObject: filter forKey: @\"CalendarDefaultFilter\"];\n      [us synchronize];\n    }\n}\n\n- (WOResponse *) eventsListAction\n{\n  NSArray *oldEvent;\n  NSEnumerator *events;\n  NSMutableArray *newEvents, *newEvent;\n  unsigned int interval;\n  BOOL isAllDay;\n  NSString *sort, *ascending;\n\n  [self _setupContext];\n  [self checkFilterValue];\n\n  newEvents = [NSMutableArray array];\n  events = [[self _fetchFields: eventsFields\n\t\t  forComponentOfType: @\"vevent\"] objectEnumerator];\n  while ((oldEvent = [events nextObject]))\n    {\n      newEvent = [NSMutableArray arrayWithArray: oldEvent];\n      isAllDay = [[oldEvent objectAtIndex: eventIsAllDayIndex] boolValue];\n      interval = [[oldEvent objectAtIndex: eventStartDateIndex] intValue];\n      [newEvent addObject: [self _formattedDateForSeconds: interval\n\t\t\t\t\t\tforAllDay: isAllDay]];\n      interval = [[oldEvent objectAtIndex: eventEndDateIndex] intValue];\n      [newEvent addObject: [self _formattedDateForSeconds: interval\n\t\t\t\t\t\tforAllDay: isAllDay]];\n      [newEvents addObject: newEvent];\n    }\n  \n  sort = [[context request] formValueForKey: @\"sort\"];\n  if ([sort isEqualToString: @\"title\"])\n    [newEvents sortUsingSelector: @selector (compareEventsTitleAscending:)];\n  else if ([sort isEqualToString: @\"end\"])\n    [newEvents sortUsingSelector: @selector (compareEventsEndDateAscending:)];\n  else if ([sort isEqualToString: @\"location\"])\n    [newEvents sortUsingSelector: @selector (compareEventsLocationAscending:)];\n  else if ([sort isEqualToString: @\"calendarName\"])\n    [newEvents sortUsingSelector: @selector (compareEventsCalendarNameAscending:)];\n  else\n    [newEvents sortUsingSelector: @selector (compareEventsStartDateAscending:)];\n\n  ascending = [[context request] formValueForKey: @\"asc\"];\n  if (![ascending boolValue])\n    [newEvents reverseArray];\n\n  return [self _responseWithData: newEvents];\n}\n\nstatic inline void\n_feedBlockWithDayBasedData (NSMutableDictionary *block, unsigned int start,\n                            unsigned int end, unsigned int dayStart)\n{\n  unsigned int delta, quarterStart, length, swap;\n  \n  if (start > end)\n    {\n      swap = end;\n      end = start;\n      start = swap;\n    }\n  quarterStart = (start - dayStart) / quarterLength;\n  delta = end - dayStart;\n  if ((delta % quarterLength))\n    delta += quarterLength;\n  length = (delta / quarterLength) - quarterStart;\n  if (!length)\n    length = 1;\n  [block setObject: [NSNumber numberWithUnsignedInt: quarterStart]\n\t forKey: @\"start\"];\n  [block setObject: [NSNumber numberWithUnsignedInt: length]\n\t forKey: @\"length\"];\n}\n\nstatic inline void\n_feedBlockWithMonthBasedData (NSMutableDictionary *block, unsigned int start,\n                              NSTimeZone *userTimeZone,\n                              SOGoDateFormatter *dateFormatter)\n{\n  NSCalendarDate *eventStartDate;\n  NSString *startHour;\n\n  eventStartDate = [NSCalendarDate dateWithTimeIntervalSince1970: start];\n  [eventStartDate setTimeZone: userTimeZone];\n  startHour = [dateFormatter formattedTime: eventStartDate];\n  [block setObject: startHour forKey: @\"starthour\"];\n  [block setObject: [NSNumber numberWithUnsignedInt: start]\n\t forKey: @\"start\"];\n}\n\n- (NSMutableDictionary *) _eventBlockWithStart: (unsigned int) start\n\t\t\t\t\t   end: (unsigned int) end\n\t\t\t\t\tnumber: (NSNumber *) number\n\t\t\t\t\t onDay: (unsigned int) dayStart\n\t\t\t\trecurrenceTime: (unsigned int) recurrenceTime\n\t\t\t\t     userState: (iCalPersonPartStat) userState\n{\n  NSMutableDictionary *block;\n\n  block = [NSMutableDictionary dictionary];\n\n  if (dayBasedView)\n    _feedBlockWithDayBasedData (block, start, end, dayStart);\n  else\n    _feedBlockWithMonthBasedData (block, start, userTimeZone, dateFormatter);\n  [block setObject: number forKey: @\"nbr\"];\n  if (recurrenceTime)\n    [block setObject: [NSNumber numberWithInt: recurrenceTime]\n\t   forKey: @\"recurrenceTime\"];\n  if (userState != iCalPersonPartStatOther)\n    [block setObject: [NSNumber numberWithInt: userState]\n\t   forKey: @\"userState\"];\n\n  return block;\n}\n\nstatic inline iCalPersonPartStat\n_userStateInEvent (NSArray *event)\n{\n  unsigned int count, max;\n  iCalPersonPartStat state;\n  NSString *partList, *stateList;\n  NSArray *participants, *states;\n  SOGoUser *user;\n\n  participants = nil;\n  state = iCalPersonPartStatOther;\n\n  partList = [event objectAtIndex: eventPartMailsIndex];\n  stateList = [event objectAtIndex: eventPartStatesIndex];\n  if ([partList length] && [stateList length])\n    {\n      participants = [partList componentsSeparatedByString: @\"\\n\"];\n      states = [stateList componentsSeparatedByString: @\"\\n\"];\n      count = 0;\n      max = [participants count];\n      while (state == iCalPersonPartStatOther && count < max)\n\t{\n\t  user = [SOGoUser userWithLogin: [event objectAtIndex: eventOwnerIndex]\n\t\t\t   roles: nil];\n\t  if ([user hasEmail: [participants objectAtIndex: count]])\n\t    state = [[states objectAtIndex: count] intValue];\n\t  else\n\t    count++;\n\t}\n    }\n\n  return state;\n}\n\n- (void) _fillBlocks: (NSArray *) blocks\n\t   withEvent: (NSArray *) event\n\t  withNumber: (NSNumber *) number\n{\n  int currentDayStart, startSecs, endsSecs, currentStart, eventStart,\n    eventEnd, computedEventEnd, offset, recurrenceTime, swap;\n  NSMutableArray *currentDay;\n  NSMutableDictionary *eventBlock;\n  iCalPersonPartStat userState;\n\n  eventStart = [[event objectAtIndex: eventStartDateIndex] intValue];\n  if (eventStart < 0)\n    [self errorWithFormat: @\"event '%@' has negative start: %d (skipped)\",\n          [event objectAtIndex: eventNameIndex], eventStart];\n  else\n    {\n      eventEnd = [[event objectAtIndex: eventEndDateIndex] intValue];\n      if (eventEnd < 0)\n        [self errorWithFormat: @\"event '%@' has negative end: %d (skipped)\",\n              [event objectAtIndex: eventNameIndex], eventEnd];\n      else\n        {\n          if (eventEnd < eventStart)\n            {\n              swap = eventStart;\n              eventStart = eventEnd;\n              eventEnd = swap;\n              [self warnWithFormat: @\"event '%@' has end < start: %d < %d\",\n                    [event objectAtIndex: eventNameIndex], eventEnd, eventStart];\n            }\n\n          startSecs = (unsigned int) [startDate timeIntervalSince1970];\n          endsSecs = (unsigned int) [endDate timeIntervalSince1970];\n\n          if ([[event objectAtIndex: eventIsCycleIndex] boolValue])\n            recurrenceTime = [[event objectAtIndex: eventRecurrenceIdIndex] unsignedIntValue];\n          else\n            recurrenceTime = 0;\n\n          currentStart = eventStart;\n          if (currentStart < startSecs)\n            {\n              currentStart = startSecs;\n              offset = 0;\n            }\n          else\n            offset = ((currentStart - startSecs)\n                      / dayLength);\n          if (offset >= [blocks count])\n            [self errorWithFormat: @\"event '%@' has a computed offset that\"\n                  @\" overflows the amount of blocks (skipped)\",\n                  [event objectAtIndex: eventNameIndex]];\n          else\n            {\n              currentDay = [blocks objectAtIndex: offset];\n              currentDayStart = startSecs + dayLength * offset;\n\n              if (eventEnd > endsSecs)\n                eventEnd = endsSecs;\n\n              if (eventEnd < startSecs)\n                // The event doesn't end in the covered period.\n                // This special case occurs with a DST change.\n                return;\n\n              userState = _userStateInEvent (event);\n              while (currentDayStart + dayLength < eventEnd)\n                {\n                  eventBlock = [self _eventBlockWithStart: currentStart\n                                                      end: currentDayStart + dayLength - 1\n                                                   number: number\n                                                    onDay: currentDayStart\n                                           recurrenceTime: recurrenceTime\n                                                userState: userState];\n                  [currentDay addObject: eventBlock];\n                  currentDayStart += dayLength;\n                  currentStart = currentDayStart;\n                  offset++;\n                  currentDay = [blocks objectAtIndex: offset];\n                }\n\n\t      computedEventEnd = eventEnd;\n\n\t      // We add 5 mins to the end date of an event if the end date\n\t      // is equal or smaller than the event's start date.\n\t      if (eventEnd <= currentStart)\n\t\tcomputedEventEnd = currentStart + (5*60);\n\t      \n\t      eventBlock = [self _eventBlockWithStart: currentStart\n\t\t\t\t\t\t  end: computedEventEnd\n\t\t\t\t\t       number: number\n\t\t\t\t\t\tonDay: currentDayStart\n\t\t\t\t       recurrenceTime: recurrenceTime\n\t\t\t\t\t    userState: userState];\n\t      [currentDay addObject: eventBlock];\n\t    }\n        }\n    }\n}\n\n- (void) _prepareEventBlocks: (NSMutableArray **) blocks\n\t\t withAllDays: (NSMutableArray **) allDayBlocks\n{\n  unsigned int count, nbrDays;\n  int seconds;\n\n  seconds = [endDate timeIntervalSinceDate: startDate];\n  if (seconds > 0)\n    {\n      nbrDays = 1 + (unsigned int) (seconds / dayLength);\n      *blocks = [NSMutableArray arrayWithCapacity: nbrDays];\n      *allDayBlocks = [NSMutableArray arrayWithCapacity: nbrDays];\n      for (count = 0; count < nbrDays; count++)\n\t{\n\t  [*blocks addObject: [NSMutableArray array]];\n\t  [*allDayBlocks addObject: [NSMutableArray array]];\n\t}\n    }\n  else\n    {\n      *blocks = nil;\n      *allDayBlocks = nil;\n    }\n}\n\n- (NSArray *) _horizontalBlocks: (NSMutableArray *) day\n{\n  NSMutableArray *quarters[96];\n  NSMutableArray *currentBlock, *blocks;\n  NSDictionary *currentEvent;\n  unsigned int count, max, qCount, qMax, qOffset;\n\n  blocks = [NSMutableArray array];\n\n  bzero (quarters, 96 * sizeof (NSMutableArray *));\n\n  max = [day count];\n  for (count = 0; count < max; count++)\n    {\n      currentEvent = [day objectAtIndex: count];\n      qMax = [[currentEvent objectForKey: @\"length\"] unsignedIntValue];\n      qOffset = [[currentEvent objectForKey: @\"start\"] unsignedIntValue];\n      for (qCount = 0; qCount < qMax; qCount++)\n\t{\n\t  currentBlock = quarters[qCount + qOffset];\n\t  if (!currentBlock)\n\t    {\n\t      currentBlock = [NSMutableArray array];\n\t      quarters[qCount + qOffset] = currentBlock;\n\t      [blocks addObject: currentBlock];\n\t    }\n\t  [currentBlock addObject: currentEvent];\n\t}\n    }\n\n  return blocks;\n}\n\nstatic inline unsigned int\n_computeMaxBlockSiblings (NSArray *block)\n{\n  unsigned int count, max, maxSiblings, siblings;\n  NSNumber *nbrEvents;\n\n  max = [block count];\n  maxSiblings = max;\n  for (count = 0; count < max; count++)\n    {\n      nbrEvents = [[block objectAtIndex: count] objectForKey: @\"siblings\"];\n      if (nbrEvents)\n\t{\n\t  siblings = [nbrEvents unsignedIntValue];\n\t  if (siblings > maxSiblings)\n\t    maxSiblings = siblings;\n\t}\n    }\n\n  return maxSiblings;\n}\n\nstatic inline void\n_propagateBlockSiblings (NSArray *block, NSNumber *maxSiblings)\n{\n  unsigned int count, max;\n  NSMutableDictionary *event;\n  NSNumber *realSiblings;\n\n  max = [block count];\n  realSiblings = [NSNumber numberWithUnsignedInt: max];\n  for (count = 0; count < max; count++)\n    {\n      event = [block objectAtIndex: count];\n      [event setObject: maxSiblings forKey: @\"siblings\"];\n      [event setObject: realSiblings forKey: @\"realSiblings\"];\n    }\n}\n\n/* this requires two vertical passes */\nstatic inline void\n_computeBlocksSiblings (NSArray *blocks)\n{\n  NSArray *currentBlock;\n  unsigned int count, max, maxSiblings;\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      currentBlock = [blocks objectAtIndex: count];\n      maxSiblings = _computeMaxBlockSiblings (currentBlock);\n      _propagateBlockSiblings (currentBlock,\n\t\t\t       [NSNumber numberWithUnsignedInt: maxSiblings]);\n    }\n}\n\nstatic inline void\n_computeBlockPosition (NSArray *block)\n{\n  unsigned int count, max, j, siblings;\n  NSNumber *position;\n  NSMutableDictionary *event;\n  NSMutableDictionary **positions;\n\n  max = [block count];\n  event = [block objectAtIndex: 0];\n  siblings = [[event objectForKey: @\"siblings\"] unsignedIntValue];\n  positions = NSZoneCalloc (NULL, siblings, sizeof (NSMutableDictionary *));\n\n  for (count = 0; count < max; count++)\n    {\n      event = [block objectAtIndex: count];\n      position = [event objectForKey: @\"position\"];\n      if (position)\n\t*(positions + [position unsignedIntValue]) = event;\n      else\n\t{\n\t  j = 0;\n\t  while (j < max && *(positions + j))\n\t    j++;\n\t  *(positions + j) = event;\n\t  [event setObject: [NSNumber numberWithUnsignedInt: j]\n\t\t forKey: @\"position\"];\n\t}\n    }\n\n  NSZoneFree (NULL, positions);\n}\n\n// static inline void\n// _addBlockMultipliers (NSArray *block, NSMutableDictionary **positions)\n// {\n//   unsigned int count, max, limit, multiplier;\n//   NSMutableDictionary *currentEvent, *event;\n\n//   max = [block count];\n//   event = [block objectAtIndex: 0];\n//   limit = [[event objectForKey: @\"siblings\"] unsignedIntValue];\n\n//   if (max < limit)\n//     {\n//       currentEvent = nil;\n//       for (count = 0; count < limit; count++)\n// \t{\n// \t  multiplier = 1;\n// \t  event = positions[count];\n// \t  if ([[event objectForKey: @\"realSiblings\"] unsignedIntValue]\n// \t      < limit)\n// \t    {\n// \t      if (event)\n// \t\t{\n// \t\t  if (currentEvent && multiplier > 1)\n// \t\t    [currentEvent setObject: [NSNumber numberWithUnsignedInt: multiplier]\n// \t\t\t\t  forKey: @\"multiplier\"];\n// \t\t  currentEvent = event;\n// \t\t  multiplier = 1;\n// \t\t}\n// \t      else\n// \t\tmultiplier++;\n// \t    }\n// \t}\n//     }\n// }\n\nstatic inline void\n_computeBlocksPosition (NSArray *blocks)\n{\n  NSArray *block;\n  unsigned int count, max;\n//   NSMutableDictionary **positions;\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      block = [blocks objectAtIndex: count];\n      _computeBlockPosition (block);\n//       _addBlockMultipliers (block, positions);\n//       NSZoneFree (NULL, positions);\n    }\n}\n\n- (void) _addBlocksWidth: (NSMutableArray *) day\n{\n  NSArray *blocks;\n\n  blocks = [self _horizontalBlocks: day];\n  _computeBlocksSiblings (blocks);\n  _computeBlocksSiblings (blocks);\n  _computeBlocksPosition (blocks);\n  /* ... _computeBlocksMultiplier() ... */\n}\n\n- (WOResponse *) eventsBlocksAction\n{\n  int count, max;\n  NSArray *events, *event, *eventsBlocks;\n  NSMutableArray *allDayBlocks, *blocks, *currentDay;\n  NSNumber *eventNbr;\n  BOOL isAllDay;\n\n  [self _setupContext];\n\n  [self _prepareEventBlocks: &blocks withAllDays: &allDayBlocks];\n  events = [self _fetchFields: eventsFields\n\t\t forComponentOfType: @\"vevent\"];\n  eventsBlocks\n    = [NSArray arrayWithObjects: events, allDayBlocks, blocks, nil];\n  max = [events count];\n  for (count = 0; count < max; count++)\n    {\n      event = [events objectAtIndex: count];\n//      NSLog(@\"***[UIxCalListingActions eventsBlocksAction] %i = %@ : %@ / %@ / %@\", count,\n//\t    [event objectAtIndex: eventTitleIndex],\n//\t    [event objectAtIndex: eventStartDateIndex],\n//\t    [event objectAtIndex: eventEndDateIndex],\n//\t    [event objectAtIndex: eventRecurrenceIdIndex]);\n      eventNbr = [NSNumber numberWithUnsignedInt: count];\n      isAllDay = [[event objectAtIndex: eventIsAllDayIndex] boolValue];\n      if (dayBasedView && isAllDay)\n\t[self _fillBlocks: allDayBlocks withEvent: event withNumber: eventNbr];\n      else\n\t[self _fillBlocks: blocks withEvent: event withNumber: eventNbr];\n    }\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      currentDay = [blocks objectAtIndex: count];\n      [currentDay sortUsingSelector: @selector (compareEventByStart:)];\n      [self _addBlocksWidth: currentDay];\n    }\n\n  return [self _responseWithData: eventsBlocks];\n//   timeIntervalSinceDate:\n}\n\n- (NSString *) _getStatusClassForStatusCode: (int) statusCode\n\t\t\t    andEndDateStamp: (unsigned int) endDateStamp\n{\n  NSCalendarDate *taskDate, *now;\n  NSString *statusClass;\n\n  if (statusCode == 1)\n    statusClass = @\"completed\";\n  else\n    {\n      if (endDateStamp)\n        {\n          now = [NSCalendarDate calendarDate];\n          taskDate\n\t    = [NSCalendarDate dateWithTimeIntervalSince1970: endDateStamp];\n          [taskDate setTimeZone: userTimeZone];\n          if ([taskDate earlierDate: now] == taskDate)\n            statusClass = @\"overdue\";\n          else\n            {\n              if ([taskDate isToday])\n                statusClass = @\"duetoday\";\n              else\n                statusClass = @\"duelater\";\n            }\n        }\n      else\n        statusClass = @\"noduedate\";\n    }\n\n  return statusClass;\n}\n\n- (WOResponse *) tasksListAction\n{\n  NSMutableArray *filteredTasks, *filteredTask;\n  NSString *sort, *ascending;\n  NSString *statusFlag;\n  SOGoUserSettings *us;\n  NSEnumerator *tasks;\n  NSArray *task;\n\n  unsigned int endDateStamp;\n  BOOL showCompleted;\n  int statusCode;\n\n  filteredTasks = [NSMutableArray array];\n\n  [self _setupContext];\n\n#warning see TODO in SchedulerUI.js about \"setud\"\n  showCompleted = [[request formValueForKey: @\"show-completed\"] intValue];\n  if ([request formValueForKey: @\"setud\"])\n    {\n      us = [[context activeUser] userSettings];\n      [us setBool: showCompleted forKey: @\"ShowCompletedTasks\"];\n      [us synchronize];\n    }\n\n  tasks = [[self _fetchFields: tasksFields\n\t\t forComponentOfType: @\"vtodo\"] objectEnumerator];\n  while ((task = [tasks nextObject]))\n    {\n      statusCode = [[task objectAtIndex: 3] intValue];\n      if (statusCode != 1 || showCompleted)\n\t{\n\t  filteredTask = [NSMutableArray arrayWithArray: task];\n\t  endDateStamp = [[task objectAtIndex: 5] intValue];\n\t  statusFlag = [self _getStatusClassForStatusCode: statusCode\n\t\t\t     andEndDateStamp: endDateStamp];\n\t  [filteredTask addObject: statusFlag];\n          if (endDateStamp > 0)\n            [filteredTask addObject: [self _formattedDateForSeconds: endDateStamp\n                                                          forAllDay: NO]];\n\t  [filteredTasks addObject: filteredTask];\n\t}\n    }\n  sort = [[context request] formValueForKey: @\"sort\"];\n  if ([sort isEqualToString: @\"title\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksTitleAscending:)];\n  else if ([sort isEqualToString: @\"priority\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksPriorityAscending:)];\n  else if ([sort isEqualToString: @\"end\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksEndAscending:)];\n  else if ([sort isEqualToString: @\"location\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksLocationAscending:)];\n  else if ([sort isEqualToString: @\"category\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksCategoryAscending:)];\n  else if ([sort isEqualToString: @\"calendarname\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksCalendarNameAscending:)];\n  else \n    [filteredTasks sortUsingSelector: @selector (compareTasksAscending:)];\n\n  ascending = [[context request] formValueForKey: @\"asc\"];\n  if (![ascending boolValue])\n    [filteredTasks reverseArray];\n\n  return [self _responseWithData: filteredTasks];\n}\n\n@end\n", "var listFilter = 'view_today';\n\nvar listOfSelection = null;\nvar selectedCalendarCell = null;\n\nvar showCompletedTasks;\n\nvar currentDay = '';\nvar selectedDayNumber = -1;\nvar selectedDayDate = '';\n\nvar cachedDateSelectors = [];\n\nvar contactSelectorAction = 'calendars-contacts';\n\nvar eventsToDelete = [];\nvar calendarsOfEventsToDelete = [];\n\nvar usersRightsWindowHeight = 215;\nvar usersRightsWindowWidth = 502;\n\nvar calendarEvents = null;\n\nvar preventAutoScroll = false;\n\nvar userStates = [ \"needs-action\", \"accepted\", \"declined\", \"tentative\", \"delegated\" ];\n\nvar calendarHeaderAdjusted = false;\n\nvar categoriesStyles = new Hash();\nvar categoriesStyleSheet = null;\n\nvar clipboard = null;\nvar eventsToCopy = [];\n\nfunction newEvent(type, day, hour, duration) {\n    var folder = null;\n    if (UserDefaults['SOGoDefaultCalendar'] == 'personal')\n        folder = $(\"calendarList\").down(\"li\");\n    else if (UserDefaults['SOGoDefaultCalendar'] == 'first') {\n        var list = $(\"calendarList\");\n        var inputs = list.select(\"input\");\n        for (var i = 0; i < inputs.length; i++) {\n            var input = inputs[i];\n            if (input.checked) {\n                folder = input.up();\n                break;\n            }\n        }\n        if (!folder)\n            folder = list.down(\"li\");\n    }\n    else\n        folder = getSelectedFolder();\n    var folderID = folder.readAttribute(\"id\");\n    var urlstr = ApplicationBaseURL + folderID + \"/new\" + type;\n    var params = [];\n    if (!day)\n        day = currentDay;\n    params.push(\"day=\" + day);\n    if (hour)\n        params.push(\"hm=\" + hour);\n    if (duration)\n        params.push(\"duration=\" + duration);\n    if (params.length > 0)\n        urlstr += \"?\" + params.join(\"&\");\n\n    window.open(urlstr, \"\", \"width=490,height=470,resizable=0\");\n\n    return false; /* stop following the link */\n}\n\nfunction newEventFromWidget(sender, type) {\n    var day = $(sender).readAttribute(\"day\");\n    var hour = sender.readAttribute(\"hour\");\n\n    return newEvent(type, day, hour);\n}\n\nfunction minutesToHM(minutes) {\n    var hours = Math.floor(minutes / 60);\n    if (hours < 10)\n        hours = \"0\" + hours;\n    var mins = minutes % 60;\n    if (mins < 10)\n        mins = \"0\" + mins;\n\n    return \"\" + hours + mins;\n}\n\nfunction newEventFromDragging(controller, day, coordinates) {\n    var startHm;\n    if (controller.eventType == \"multiday\")\n        startHm = minutesToHM(coordinates.start * 15);\n    else\n        startHm = \"allday\";\n    var lengthHm = minutesToHM(coordinates.duration * 15);\n    newEvent(\"event\", day, startHm, lengthHm);\n}\n\nfunction updateEventFromDragging(controller, eventCells, eventDelta) {\n    if (eventDelta.dayNumber || eventDelta.start || eventDelta.duration) {\n        var params = (\"days=\" + eventDelta.dayNumber\n                      + \"&start=\" + eventDelta.start * 15\n                      + \"&duration=\" + eventDelta.duration * 15);\n        // log(\"eventCells: \" + eventCells.length);\n        var eventCell = eventCells[0];\n        // log(\"  time: \" + eventCell.recurrenceTime);\n        // log(\"  exception: \" + eventCell.isException);\n\n        if (eventCell.recurrenceTime && !eventCell.isException)\n            _editRecurrenceDialog(eventCell, \"confirmAdjustment\", params);\n        else {\n            var urlstr = (ApplicationBaseURL\n                          + eventCell.calendar + \"/\" + eventCell.cname);\n            if (eventCell.recurrenceTime)\n                urlstr += \"/occurence\" + eventCell.recurrenceTime;\n            urlstr += (\"/adjust?\" + params);\n            // log(\"  urlstr: \" + urlstr);\n            triggerAjaxRequest(urlstr, updateEventFromDraggingCallback);\n        }\n    }\n}\n\nfunction performEventAdjustment(folder, event, recurrence, params) {\n    var urlstr = ApplicationBaseURL + folder + \"/\" + event;\n    if (recurrence)\n        urlstr += \"/\" + recurrence;\n    urlstr += \"/adjust\" + generateQueryString(params);\n    triggerAjaxRequest(urlstr, updateEventFromDraggingCallback);\n}\n\nfunction updateEventFromDraggingCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            refreshEventsAndDisplay();\n        }\n        else {\n            var response = http.responseText.evalJSON(true);\n            showAlertDialog(response['message']);\n        }\n    }\n}\n\nfunction getSelectedFolder() {\n    var folder;\n    var list = $(\"calendarList\");\n    var nodes = list.getSelectedRows();\n    if (nodes.length > 0)\n        folder = nodes[0];\n    else\n        folder = list.down(\"li\"); // personal calendar\n\n    return folder;\n}\n\nfunction onMenuNewEventClick(event) {\n    var target = document.menuTarget;\n    if (/(minutes\\d{2}|dayHeader)/.test(target.className))\n        target = target.parentNode;\n    newEventFromWidget(target, \"event\");\n}\n\nfunction onMenuNewTaskClick(event) {\n    var target = document.menuTarget;\n    if (/(minutes\\d{2}|dayHeader)/.test(target.className))\n        target = target.parentNode;\n    newEventFromWidget(target, \"task\");\n}\n\nfunction _editEventId(id, calendar, recurrence) {\n    var targetname = \"SOGo_edit_\" + id;\n    var urlstr = ApplicationBaseURL + calendar + \"/\" + id;\n    if (recurrence) {\n        urlstr += \"/\" + recurrence;\n        targetname += recurrence;\n    }\n    urlstr += \"/edit\";\n    var win = window.open(urlstr, \"_blank\",\n                          \"width=490,height=470,resizable=0\");\n    if (win)\n        win.focus();\n}\n\nfunction editEvent() {\n    if (listOfSelection) {\n        var nodes = listOfSelection.getSelectedRows();\n\n        if (nodes.length == 0) {\n            showAlertDialog(_(\"Please select an event or a task.\"));\n            return false;\n        }\n\n        for (var i = 0; i < nodes.length; i++)\n            _editEventId(nodes[i].cname,\n                         nodes[i].calendar);\n    } else if (selectedCalendarCell) {\n        if (selectedCalendarCell[0].recurrenceTime && !selectedCalendarCell[0].isException)\n            _editRecurrenceDialog(selectedCalendarCell[0], \"confirmEditing\");\n        else\n            _editEventId(selectedCalendarCell[0].cname,\n                         selectedCalendarCell[0].calendar);\n    } else {\n        showAlertDialog(_(\"Please select an event or a task.\"));\n    }\n\n    return false; /* stop following the link */\n}\n\nfunction _batchDeleteEvents() {\n    // Delete the events of the next calendar\n    var calendar = calendarsOfEventsToDelete.shift();\n    var events = eventsToDelete.shift();\n    var urlstr = (ApplicationBaseURL + calendar\n                  + \"/batchDelete?ids=\" + events.join(','));\n    document.deleteEventAjaxRequest = triggerAjaxRequest(urlstr,\n                                                         deleteEventCallback,\n                                                         { calendar: calendar, events: events });\n}\n\nfunction deleteEvent() {\n    var label = \"\";\n    var events = [];\n    if (listOfSelection) {\n        var nodes = listOfSelection.getSelectedRows();\n        if (nodes.length > 0) {\n            if (listOfSelection.parentNode == $(\"tasksList\"))\n                label = _(\"taskDeleteConfirmation\");\n            else\n                label = _(\"eventDeleteConfirmation\");\n\n            if (nodes.length == 1\n                && nodes[0].recurrenceTime) {\n                if (nodes[0].erasable)\n                    _editRecurrenceDialog(nodes[0], \"confirmDeletion\");\n                else\n                    showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n            }\n            else {\n                var canDelete;\n                var sortedNodes = [];\n                var calendars = [];\n                for (var i = 0; i < nodes.length; i++) {\n                    canDelete = nodes[i].erasable;\n                    if (canDelete) {\n                        var calendar = nodes[i].calendar;\n                        var cname = nodes[i].cname;\n                        if (nodes[i].recurrenceTime) {\n                            cname += '/occurence' + nodes[i].recurrenceTime;\n                        }\n                        if (!sortedNodes[calendar]) {\n                            sortedNodes[calendar] = [];\n                            calendars.push(calendar);\n                        }\n                        if (sortedNodes[calendar].indexOf(cname) < 0) {\n                            // Build list item element for confirmation dialog\n                            var itemElement = new Element('li');\n                            var colorBox = new Element('div', {'class': 'colorBox calendarFolder' + nodes[i].calendar});\n                            var content = '';\n                            if (nodes[i].tagName == 'TR') {\n                                var cell = nodes[i].down('td span');\n                                content = cell.allTextContent(); // extract the first column only\n                            }\n                            else {\n                                content = nodes[i].allTextContent();\n                            }\n                            itemElement.appendChild(colorBox);\n                            itemElement.appendChild(new Element('span').update(content));\n                            if (nodes[i].startDate) {\n                                var startDate = new Date(nodes[i].startDate*1000);\n                                var dateElement = new Element('div', {'class': 'muted'});\n                                var date;\n                                if (typeof nodes[i].hour == 'undefined')\n                                    date = startDate.toLocaleDateString(localeCode);\n                                else\n                                    date = startDate.toLocaleString(localeCode);\n                                dateElement.update(date);\n                                itemElement.appendChild(dateElement);\n                            }\n                            events.push(itemElement);\n                            sortedNodes[calendar].push(cname);\n                        }\n                    }\n                }\n                // Update global arrays\n                for (i = 0; i < calendars.length; i++) {\n                    calendarsOfEventsToDelete.push(calendars[i]);\n                    eventsToDelete.push(sortedNodes[calendars[i]]);\n                }\n                if (i == 0)\n                    showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n            }\n        }\n        else\n            showAlertDialog(_(\"Please select an event or a task.\"));\n    }\n    else if (selectedCalendarCell) {\n        if (selectedCalendarCell.length == 1\n            && selectedCalendarCell[0].recurrenceTime) {\n            if (selectedCalendarCell[0].erasable)\n                _editRecurrenceDialog(selectedCalendarCell[0], \"confirmDeletion\");\n            else\n                showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        }\n        else {\n            var canDelete;\n            var sortedNodes = [];\n            var calendars = [];\n            var cname;\n            for (var i = 0; i < selectedCalendarCell.length; i++) {\n                canDelete = selectedCalendarCell[i].erasable;\n                if (canDelete) {\n                    var calendar = selectedCalendarCell[i].calendar;\n                    var cname = selectedCalendarCell[i].cname;\n                    if (selectedCalendarCell[i].recurrenceTime) {\n                        cname += '/occurence' + selectedCalendarCell[i].recurrenceTime;\n                    }\n                    if (!sortedNodes[calendar]) {\n                        sortedNodes[calendar] = [];\n                        calendars.push(calendar);\n                    }\n                    if (sortedNodes[calendar].indexOf(cname) < 0) {\n                        // Build list item element for confirmation dialog\n                        var itemElement = new Element('li');\n                        var colorBox = new Element('div', {'class': 'colorBox calendarFolder' + selectedCalendarCell[i].calendar});\n                        var content = '';\n                        var event = $(selectedCalendarCell[i]).down(\"DIV.text\");\n                        for (var j = 0; j < event.childNodes.length; j++) {\n                            var node = event.childNodes[j];\n                            if (node.nodeType == Node.TEXT_NODE) {\n                                content += node.nodeValue;\n                            }\n                        }\n                        itemElement.appendChild(colorBox);\n                        itemElement.appendChild(new Element('span').update(content));\n                        if (selectedCalendarCell[i].startDate) {\n                            var startDate = new Date(selectedCalendarCell[i].startDate*1000);\n                            var dateElement = new Element('div', {'class': 'muted'});\n                            var date;\n                            if (selectedCalendarCell[i].readAttribute('hour') == 'allday')\n                                date = startDate.toLocaleDateString(localeCode);\n                            else\n                                date = startDate.toLocaleString(localeCode);\n                            dateElement.update(date);\n                            itemElement.appendChild(dateElement);\n                        }\n                        events.push(itemElement);\n                        sortedNodes[calendar].push(cname);\n                    }\n                }\n            }\n            // Update global arrays\n            for (i = 0; i < calendars.length; i++) {\n                calendarsOfEventsToDelete.push(calendars[i]);\n                eventsToDelete.push(sortedNodes[calendars[i]]);\n            }\n            if (i == 0)\n                showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        }\n    }\n    else\n        showAlertDialog(_(\"Please select an event or a task.\"));\n\n    if (events.length > 0) {\n        // Show confirmation dialog\n        var p = new Element('p');\n        p.appendChild(document.createTextNode(label));\n        var list = new Element('ul');\n        for (i = 0; i < events.length; i++) {\n            list.appendChild(events[i]);\n        }\n        p.appendChild(list);\n        p.appendChild(document.createTextNode(_(\"Would you like to continue?\")));\n        showConfirmDialog(_(\"Warning\"), p, deleteEventFromListConfirm, deleteEventCancel);\n    }\n\n    return false;\n}\n\nfunction deleteEventFromListConfirm() {\n    if (document.deleteEventAjaxRequest) {\n        document.deleteEventAjaxRequest.aborted = true;\n        document.deleteEventAjaxRequest.abort();\n    }\n\n    _batchDeleteEvents();\n    disposeDialog();\n}\n\nfunction deleteEventFromViewConfirm() {\n    if (document.deleteEventAjaxRequest) {\n        document.deleteEventAjaxRequest.aborted = true;\n        document.deleteEventAjaxRequest.abort();\n    }\n\n    selectedCalendarCell = null;\n    _batchDeleteEvents();\n    disposeDialog();\n}\n\nfunction deleteEventCancel(event) {\n    calendarsOfEventsToDelete = [];\n    eventsToDelete = [];\n    disposeDialog();\n}\n\nfunction copyEventToClipboard() {\n    if (listOfSelection) {\n        clipboard = new Array();\n        var nodes = listOfSelection.getSelectedRows();\n        for (var i = 0; i < nodes.length; i++)\n            clipboard.push(nodes[i].calendar + \"/\" + nodes[i].cname);\n    }\n    else if (selectedCalendarCell) {\n        clipboard = new Array();\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            clipboard.push(selectedCalendarCell[i].calendar + \"/\" + selectedCalendarCell[i].cname);\n    }\n    log (\"clipboard : \" + clipboard.join(\", \"));\n}\n\nfunction copyEventFromClipboard() {\n    if (clipboard && clipboard.length > 0) {\n        var folder = getSelectedFolder();\n        var folderID = folder.readAttribute(\"id\").substr(1);\n        eventsToCopy = [];\n        for (var i = 0; i < clipboard.length; i++)\n            eventsToCopy[i] = clipboard[i] + \"/copy?destination=\" + folderID;\n        copyEvents();\n    }\n}\n\nfunction copyEventToPersonalCalendar(event) {\n    var calendar = selectedCalendarCell[0].calendar;\n    var cname = selectedCalendarCell[0].cname;\n    eventsToCopy = [calendar + \"/\" + cname + \"/copy\"];\n    copyEvents();\n}\n\nfunction copyEvents() {\n    var path = eventsToCopy.shift();\n    var urlstr = ApplicationBaseURL + path; log (urlstr);\n    triggerAjaxRequest(urlstr,\n                       copyEventCallback);\n}\n\nfunction copyEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            if (eventsToCopy.length)\n                copyEvents();\n            else\n                refreshEventsAndDisplay();\n        }\n        else if (parseInt(http.status) == 403)\n            showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        else if (parseInt(http.status) == 400)\n            showAlertDialog(_(\"DestinationCalendarError\"));\n        else\n            showAlertDialog(_(\"EventCopyError\"));\n    }\n}\n\nfunction onMenuRawEvent(event) {\n    if (selectedCalendarCell.length != 1) {\n      return;\n    }\n\n    var calendar = selectedCalendarCell[0].calendar;\n    var cname = selectedCalendarCell[0].cname;\n\n    var url = ApplicationBaseURL + calendar + \"/\" + cname + \"/raw\";\n    openGenericWindow(url);\n}\n\nfunction modifyEvent(sender, modification, parameters) {\n    var currentLocation = '' + window.location;\n    var arr = currentLocation.split(\"/\");\n    arr[arr.length-1] = modification;\n\n    document.modifyEventAjaxRequest = triggerAjaxRequest(arr.join(\"/\"),\n                                                         modifyEventCallback,\n                                                         modification,\n                                                         parameters,\n                                                         { \"Content-type\": \"application/x-www-form-urlencoded\" });\n\n    return false;\n}\n\nfunction closeInvitationWindow() {\n    var closeDiv = document.createElement(\"div\");\n    document.body.appendChild(closeDiv);\n    closeDiv.addClassName(\"javascriptPopupBackground\");\n\n    var closePseudoWin = document.createElement(\"div\");\n    document.body.appendChild(closePseudoWin);\n    closePseudoWin.addClassName(\"javascriptMessagePseudoTopWindow\");\n    closePseudoWin.style.top = \"0px;\";\n    closePseudoWin.style.left = \"0px;\";\n    closePseudoWin.style.right = \"0px;\";\n    closePseudoWin.appendChild(document.createTextNode(_(\"closeThisWindowMessage\")));\n\n    var calLink = document.createElement(\"a\");\n    closePseudoWin.appendChild(calLink);\n    calLink.href = ApplicationBaseURL;\n    calLink.appendChild(document.createTextNode(_(\"Calendar\").toLowerCase()));\n}\n\nfunction modifyEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status) || http.status == 200) {\n            var mailInvitation = queryParameters[\"mail-invitation\"];\n            if (mailInvitation && mailInvitation.toLowerCase() == \"yes\")\n                closeInvitationWindow();\n            else {\n                window.opener.setTimeout(\"refreshEventsAndDisplay();\", 100);\n                window.setTimeout(\"window.close();\", 100);\n            }\n        }\n        else if (http.status == 403) {\n            var data = http.responseText;\n            var msg;\n            if (data.indexOf(\"An error occurred during object publishing\") >\n                -1) {\n                msg = data.replace(/^(.*\\n)*.*<p>((.*\\n)*.*)<\\/p>(.*\\n)*.*$/, \"$2\");\n            } else {\n                msg = \"delegate is a participant\";\n            }\n            showAlertDialog(_(msg));\n        }\n        else {\n            showAlertDialog(_(\"eventPartStatModificationError\"));\n        }\n        document.modifyEventAjaxRequest = null;\n    }\n}\n\nfunction _deleteCalendarEventBlocks(calendar, cname, occurenceTime) {\n    // Delete event (or occurence) from the specified calendar\n    var ownerIsOrganizer = false;\n    var events = calendarEvents[calendar];\n    if (events) {\n        var occurences = events[cname];\n        if (occurences) {\n            for (var i = 0; i < occurences.length; i++) {\n                var nodes = occurences[i].blocks;\n                for (var j = 0; j < nodes.length; j++) {\n                    var node = nodes[j];\n                    if (occurenceTime == null\n                        || occurenceTime == node.recurrenceTime) {\n                        ownerIsOrganizer = node.ownerIsOrganizer;\n                        node.parentNode.removeChild(node);\n                    }\n                }\n            }\n            if (ownerIsOrganizer)\n                // Search for the same event in other calendars (using the cache)\n                // only if the delete operation is triggered from the organizer's\n                // calendar.\n                for (var otherCalendar in calendarEvents) {\n                    if (calendar != otherCalendar) {\n                        occurences = calendarEvents[otherCalendar][cname];\n                        if (occurences) {\n                            for (var i = 0; i < occurences.length; i++) {\n                                var occurence = occurences[i];\n                                if (occurenceTime == null || occurenceTime == occurence[15]) {\n                                    var nodes = occurence.blocks;\n                                    for (var j = 0; j < nodes.length; j++) {\n                                        var node = nodes[j];\n                                        if (node.parentNode)\n                                            node.parentNode.removeChild(node);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    resizeCalendarHeaderDIV();\n}\n\nfunction _deleteEventFromTables(calendar, cname, occurenceTime) {\n    var basename = \"-\" + cname;\n    if (occurenceTime) {\n        basename = basename + \"-\" + occurenceTime;\n    }\n    if (calendarEvents[calendar]) {\n        var occurences = calendarEvents[calendar][cname];\n        if (occurences) {\n            var occurence = occurences.first();\n            var ownerIsOrganizer = occurence[19];\n\n            // Delete event from events list\n            var table = $(\"eventsList\");\n            var rows = table.tBodies[0].rows;\n            for (var j = rows.length; j > 0; j--) {\n                var row = $(rows[j - 1]);\n                var id = row.getAttribute(\"id\");\n                var pos = id.indexOf(basename);\n                if (pos > 0) {\n                    var otherCalendar = id.substr(0, pos);\n                    occurences = calendarEvents[otherCalendar][cname];\n                    if (occurences) {\n                        for (var k = 0; k < occurences.length; k++) {\n                            var occurence = occurences[k];\n                            if (calendar == otherCalendar || ownerIsOrganizer) {\n                                // This is the specified event or the same event in another\n                                // calendar. In this case, remove it only if the delete\n                                // operation is triggered from the organizer's calendar.\n                                if (occurenceTime == null || occurenceTime == occurence[15]) {\n                                    row.parentNode.removeChild(row);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Delete task from tasks list\n    var row = $(calendar + basename);\n    if (row) {\n        row.parentNode.removeChild(row);\n    }\n}\n\nfunction _deleteCalendarEventCache(calendar, cname, occurenceTime) {\n    var ownerIsOrganizer = false;\n    if (calendarEvents[calendar]) {\n        var occurences = calendarEvents[calendar][cname];\n        if (occurences)\n            ownerIsOrganizer = occurences[0][19];\n    }\n\n    for (var otherCalendar in calendarEvents) {\n        if (calendarEvents[otherCalendar]) {\n            var occurences = calendarEvents[otherCalendar][cname];\n            if (occurences) {\n                var newOccurences = [];\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    if (calendar == otherCalendar || ownerIsOrganizer) {\n                        // This is the specified event or the same event in another\n                        // calendar. In this case, remove it only if the delete\n                        // operation is triggered from the organizer's calendar.\n                        if (occurenceTime == null) {\n                            delete calendarEvents[otherCalendar][cname];\n                        }\n                        else if (occurenceTime != occurence[15]) {\n                            // || occurenceTime == occurence[15]) {\n                            newOccurences.push(occurence);\n                        }\n                    }\n                }\n                if (occurenceTime)\n                    calendarEvents[otherCalendar][cname] = newOccurences;\n            }\n        }\n    }\n}\n\n/**\n * This is the Ajax callback function for _batchDeleteEvents.\n */\nfunction deleteEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var isTask = false;\n            var calendar = http.callbackData.calendar;\n            var events = http.callbackData.events;\n            for (var i = 0; i < events.length; i++) {\n                var cname = /(.+)\\/occurence([0-9]+)/.exec(events[i]) || [null, events[i]];\n                _deleteCalendarEventBlocks(calendar, cname[1], cname[2]);\n                _deleteEventFromTables(calendar, cname[1], cname[2]);\n                _deleteCalendarEventCache(calendar, cname[1], cname[2]);\n            }\n            if (eventsToDelete.length)\n                _batchDeleteEvents();\n            else\n                document.deleteEventAjaxRequest = null;\n        }\n        else if (parseInt(http.status) == 403)\n            showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        else\n            log (\"deleteEventCallback Ajax error (\" + http.status + \")\");\n    }\n}\n\nfunction getEventById(cname, owner) {\n    var event = null;\n\n    if (calendarEvents) {\n        if (!owner)\n            owner = UserLogin;\n        var userEvents = calendarEvents[owner];\n        if (userEvents)\n            event = userEvents[cname];\n    }\n\n    return event;\n}\n\nfunction _editRecurrenceDialog(eventCell, method, params) {\n    var targetname = \"SOGo_edit_\" + eventCell.cname + eventCell.recurrenceTime;\n    var urlstr = (ApplicationBaseURL + eventCell.calendar + \"/\" + eventCell.cname\n                  + \"/occurence\" + eventCell.recurrenceTime + \"/\" + method);\n    if (params && params.length) {\n        urlstr += \"?\" + params;\n    }\n    var win = window.open(urlstr, \"_blank\",\n                          \"width=490,height=70,resizable=0\");\n    if (win)\n        win.focus();\n}\n\nfunction onViewEvent(event) {\n    if (event.detail == 2) return;\n    var url = ApplicationBaseURL + this.calendar + \"/\" + this.cname;\n\n    if (typeof this.recurrenceTime != \"undefined\")\n        url += \"/occurence\" + this.recurrenceTime;\n    url += \"/view\";\n    if (document.viewEventAjaxRequest) {\n        document.viewEventAjaxRequest.aborted = true;\n        document.viewEventAjaxRequest.abort();\n    }\n    document.viewEventAjaxRequest = triggerAjaxRequest(url, onViewEventCallback, this);\n}\n\nfunction onViewEventCallback(http) {\n    if (http.readyState == 4 && http.status == 200) {\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n            //      $H(data).keys().each(function(key) {\n            //\t  log (key + \" = \" + data[key]);\n            //\t});\n            var cell = http.callbackData;\n            var cellPosition = cell.cumulativeOffset();\n            var cellDimensions = cell.getDimensions();\n            var div = $(\"eventDialog\");\n            var divDimensions = div.getDimensions();\n            var view;\n            var left;\n            var top = cellPosition[1] - 5;\n\n            if (currentView != \"monthview\") {\n                view = $(\"daysView\");\n                var viewPosition = view.cumulativeOffset();\n\n                if (parseInt(data[\"isAllDay\"]) == 0) {\n                    top -= view.scrollTop;\n                    if (viewPosition[1] > top + 2) {\n                        view.stopObserving(\"scroll\", onBodyClickHandler);\n                        view.scrollTop = cell.offsetTop;\n                        top = viewPosition[1];\n                        Event.observe.delay(0.1, view, \"scroll\", onBodyClickHandler);\n                    }\n                }\n            }\n            else {\n                top -= cell.up(\"DIV.day\").scrollTop;\n            }\n\n            left = cellPosition[0] + cellDimensions[\"width\"] + 4;\n            if (left + divDimensions[\"width\"] > window.width()) {\n                left = cellPosition[0] - divDimensions[\"width\"];\n                div.removeClassName(\"left\");\n                div.addClassName(\"right\");\n            }\n            else {\n                div.removeClassName(\"right\");\n                div.addClassName(\"left\");\n            }\n\n            // Put the event's data in the DIV\n            div.down(\"h1\").update(data[\"summary\"].replace(/\\r?\\n/g, \"<BR/>\"));\n\n            var paras = div.getElementsByTagName(\"p\");\n            var para = $(paras[0]);\n            if (parseInt(data[\"isAllDay\"]) == 0) {\n                para.down(\"SPAN\").update(data[\"startTime\"] + \" - \" + data[\"endTime\"]);\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[1]);\n            if (data[\"calendar\"].length) {\n \t\t// Remove owner email from calendar's name\n                para.down(\"SPAN\", 1).update(data[\"calendar\"].escapeHTML());\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[2]);\n            if (data[\"location\"].length) {\n                para.down(\"SPAN\", 1).update(data[\"location\"].escapeHTML());\n                para.show();\n            } else\n                para.hide();\n\n\t    para = $(paras[3]);\n            if (data[\"created_by\"].length) {\n\t\tpara.down(\"SPAN\", 1).update(data[\"created_by\"]);\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[4]);\n            if (data[\"description\"].length) {\n                para.update(data[\"description\"].replace(/\\r?\\n/g, \"<BR/>\"));\n                para.show();\n            } else\n                para.hide();\n\n            div.setStyle({ left: left + \"px\", top: top + \"px\" });\n            div.show();\n        }\n    }\n    else {\n        log(\"onViewEventCallback ajax error (\" + http.status + \"): \" + http.url);\n    }\n}\n\nfunction editDoubleClickedEvent(event) {\n    if (this.isException && this.recurrenceTime)\n        _editEventId(this.cname, this.calendar, \"occurence\" + this.recurrenceTime);\n    else if (this.recurrenceTime)\n        _editRecurrenceDialog(this, \"confirmEditing\");\n    else\n        _editEventId(this.cname, this.calendar);\n\n    Event.stop(event);\n}\n\nfunction performEventEdition(folder, event, recurrence) {\n    _editEventId(event, folder, recurrence);\n}\n\nfunction performEventDeletion(folder, event, recurrence) {\n    if (calendarEvents) {\n        if (recurrence) {\n            // Only one recurrence\n            var occurenceTime = recurrence.substring(9);\n            var nodes = _eventBlocksMatching(folder, event, occurenceTime);\n            var urlstr = ApplicationBaseURL + folder + \"/\" + event  + \"/\" + recurrence + \"/delete\";\n\n            if (nodes)\n                document.deleteEventAjaxRequest = triggerAjaxRequest(urlstr,\n                                                                     performDeleteEventCallback,\n                                                                     { nodes: nodes,\n                                                                       occurence: occurenceTime });\n        }\n        else {\n            // All recurrences\n            if (document.deleteEventAjaxRequest) {\n                document.deleteEventAjaxRequest.aborted = true;\n                document.deleteEventAjaxRequest.abort();\n            }\n            eventsToDelete.push([event]);\n            calendarsOfEventsToDelete.push(folder);\n            _batchDeleteEvents();\n        }\n    }\n}\n\nfunction performDeleteEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var occurenceTime = http.callbackData.occurence;\n            var nodes = http.callbackData.nodes;\n            var cname = nodes[0].cname;\n            var calendar = nodes[0].calendar;\n\n            _deleteCalendarEventBlocks(calendar, cname, occurenceTime);\n            _deleteEventFromTables(calendar, cname, occurenceTime);\n            _deleteCalendarEventCache(calendar, cname, occurenceTime);\n        }\n    }\n}\n\n/* in dateselector */\nfunction onDaySelect(node) {\n    var day = node.getAttribute('day');\n    var needRefresh = (listFilter == 'view_selectedday'\n                       && day != currentDay);\n\n    var td = $(node).getParentWithTagName(\"td\");\n    var table = $(td).getParentWithTagName(\"table\");\n\n    //   log (\"table.selected: \" + table.selected);\n\n    if (document.selectedDate)\n        document.selectedDate.deselect();\n\n    td.selectElement();\n    document.selectedDate = td;\n\n    changeCalendarDisplay( { \"day\": day } );\n    currentDay = day;\n    selectedDayDate = day;\n    if (needRefresh)\n        refreshEvents();\n\n    return false;\n}\n\nfunction onDateSelectorGotoMonth(event) {\n    var day = this.getAttribute(\"date\");\n\n    changeDateSelectorDisplay(day, true);\n\n    Event.stop(event);\n}\n\nfunction onCalendarGotoDay(node) {\n    var day = node.getAttribute(\"date\");\n    var needRefresh = (listFilter == 'view_selectedday' && day != currentDay);\n\n    changeDateSelectorDisplay(day);\n    changeCalendarDisplay( { \"day\": day } );\n    if (needRefresh)\n        refreshEvents();\n\n    return false;\n}\n\nfunction gotoToday() {\n    var todayDate = new Date();\n    selectedDayDate = todayDate.getDayString();\n    changeDateSelectorDisplay('');\n    changeCalendarDisplay();\n\n    return false;\n}\n\nfunction setDateSelectorContent(content) {\n    var div = $(\"dateSelectorView\");\n\n    div.update(content);\n    if (currentDay.length > 0)\n        restoreCurrentDaySelection(div);\n\n    initDateSelectorEvents();\n}\n\nfunction dateSelectorCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        document.dateSelectorAjaxRequest = null;\n        var content = http.responseText;\n        setDateSelectorContent(content);\n        cachedDateSelectors[http.callbackData] = content;\n    }\n    else\n        log (\"dateSelectorCallback Ajax error\");\n}\n\nfunction eventsListCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        var div = $(\"eventsListView\");\n        document.eventsListAjaxRequest = null;\n        var table = $(\"eventsList\");\n        lastClickedRow = -1; // from generic.js\n\n        var rows = table.select(\"TBODY TR\");\n        rows.each(function(e) {\n            e.remove();\n        });\n\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n            for (var i = 0; i < data.length; i++) {\n                var row = createElement(\"tr\");\n                table.tBodies[0].appendChild(row);\n                row.addClassName(\"eventRow\");\n                var calendar = escape(data[i][1]);\n                var rTime = data[i][16];\n                var id = escape(data[i][1] + \"-\" + data[i][0]);\n                if (rTime)\n                    id += \"-\" + escape(rTime);\n                row.setAttribute(\"id\", id);\n                row.cname = escape(data[i][0]);\n                row.calendar = calendar;\n                if (rTime)\n                    row.recurrenceTime = escape(rTime);\n                row.isException = data[i][17];\n                row.editable = data[i][18] || IsSuperUser;\n                row.erasable = data[i][19] || IsSuperUser;\n                row.startDate = data[i][5];\n                var startDate = new Date(data[i][5]*1000);\n                row.day = startDate.getDayString();\n                if (!data[i][8])\n                    row.hour = startDate.getHourString(); // event is not all day\n                row.observe(\"mousedown\", onRowClick);\n                row.observe(\"selectstart\", listRowMouseDownHandler);\n                if (data[i][3] != null)\n                    // Status is defined -- event is readable\n                    row.observe(\"dblclick\", editDoubleClickedEvent);\n\n                var td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                var colorDiv = createElement(\"div\", false, \"colorBox calendarFolder\" + calendar);\n                td.appendChild(colorDiv);\n                colorDiv.update('&nbsp;');\n                var span = createElement(\"span\");\n                td.appendChild(span);\n                span.update(data[i][4]); // title\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][21])); // start date\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][22])); // end date\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                if (data[i][7])\n                    td.appendChild(document.createTextNode(data[i][7])); // location\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][2])); // calendar\n            }\n\n            if (sorting[\"event-header\"] && sorting[\"event-header\"].length > 0) {\n                var sortHeader = $(sorting[\"event-header\"]);\n\n                if (sortHeader) {\n                    var sortImages = $(table.tHead).select(\".sortImage\");\n                    $(sortImages).each(function(item) {\n                            item.remove();\n                        });\n\n                    var sortImage = createElement(\"img\", \"messageSortImage\", \"sortImage\");\n                    sortHeader.insertBefore(sortImage, sortHeader.firstChild);\n                    if (sorting[\"event-ascending\"])\n                        sortImage.src = ResourcesURL + \"/arrow-up.png\";\n                    else\n                        sortImage.src = ResourcesURL + \"/arrow-down.png\";\n                }\n            }\n        }\n    }\n    else\n        log (\"eventsListCallback Ajax error\");\n}\n\nfunction tasksListCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        var div = $(\"tasksListView\");\n        document.tasksListAjaxRequest = null;\n        var table = $(\"tasksList\");\n        lastClickedRow = -1; // from generic.js\n\n        var rows = table.select(\"TBODY TR\");\n        rows.each(function(e) {\n            e.remove();\n        });\n\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n\n            // [0] Task ID\n            // [1] Calendar ID\n            // [2] Calendar name\n            // [3] Status (0, 1 = completed, 2)\n            // [4] Title\n            // [5] Due date (int)\n            // [6] Classification (0 = public, 1, = private, 2 = confidential)\n            // [7] Location\n            // [8] Category\n            // [9] Editable?\n            // [10] Erasable?\n            // [11] Priority (0, 1 = important, 9 = low)\n            // [12] Status CSS class (duelater, completed, etc)\n            // (13) Due date (formatted)\n\n            for (var i = 0; i < data.length; i++) {\n                var row = createElement(\"tr\");\n                table.tBodies[0].appendChild(row);\n\n                row.on(\"dblclick\", editDoubleClickedEvent);\n\n                var calendar = escape(data[i][1]);\n                var cname = escape(data[i][0]);\n                row.setAttribute(\"id\", calendar + \"-\" + cname);\n                //listItem.addClassName(data[i][5]); // Classification\n                row.addClassName(data[i][12]); // status\n                row.calendar = calendar;\n                row.cname = cname;\n                row.erasable = data[i][10] || IsSuperUser;\n                if (parseInt(data[i][11]) == 1) {\n                  row.addClassName(\"important\");\n                }\n                else if (parseInt(data[i][11]) == 9) {\n                  row.addClassName(\"low\");\n                }\n\n                var cell = createElement(\"td\");\n                row.appendChild(cell);\n                var input = createElement(\"input\");\n                input.setAttribute(\"type\", \"checkbox\");\n                cell.appendChild(input);\n                input.setAttribute(\"value\", \"1\");\n                if (parseInt(data[i][9]) == 0) // editable?\n                    input.setAttribute(\"disabled\", true);\n                input.addClassName(\"checkBox\");\n                if (parseInt(data[i][3]) == 1) // completed?\n                    input.setAttribute(\"checked\", \"checked\");\n                input.observe(\"click\", updateTaskStatus, true);\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                if (data[i][11] != null) {\n                    cell.update(_(\"prio_\" + data[i][11])); // Priority\n                }\n                else {\n                    cell.update(\"\"); // Priority\n                }\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                var colorDiv = createElement(\"div\", false, \"colorBox calendarFolder\" + calendar);\n                cell.appendChild(colorDiv);\n                colorDiv.update('&nbsp;');\n                var t = new Element (\"span\");\n                cell.appendChild(t);\n                t.update(data[i][4]); // title\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                if (data[i][13])\n                    cell.update(data[i][13]); // end date\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][7]); // location\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][8]); // category\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][2]); // calendar name\n            }\n\n            table.scrollTop = table.previousScroll;\n\n            if (sorting[\"task-attribute\"] && sorting[\"task-attribute\"].length > 0) {\n                var sortHeader = $(sorting[\"task-header\"]);\n\n                if (sortHeader) {\n                    var sortImages = $(table.tHead).select(\".sortImage\");\n                    $(sortImages).each(function(item) {\n                            item.remove();\n                        });\n\n                    var sortImage = createElement(\"img\", \"messageSortImage\", \"sortImage\");\n                    sortHeader.insertBefore(sortImage, sortHeader.firstChild);\n                    if (sorting[\"task-ascending\"])\n                        sortImage.src = ResourcesURL + \"/arrow-up.png\";\n                    else\n                        sortImage.src = ResourcesURL + \"/arrow-down.png\";\n                }\n            }\n            if (http.callbackData) {\n                var selectedNodesId = http.callbackData;\n                for (var i = 0; i < selectedNodesId.length; i++) {\n                    // \tlog(selectedNodesId[i] + \" (\" + i + \") is selected\");\n                    var node = $(selectedNodesId[i]);\n                    if (node) {\n                        node.selectElement();\n                    }\n                }\n            }\n            else\n                log (\"tasksListCallback: no data\");\n        }\n    }\n    else\n        log (\"tasksListCallback Ajax error\");\n}\n\n/* in dateselector */\nfunction restoreCurrentDaySelection(div) {\n    var elements = $(div).select(\"TD.activeDay SPAN\");\n    if (elements.size()) {\n        var day = elements[0].readAttribute('day');\n        if (day.substr(0, 6) == currentDay.substr(0, 6)) {\n            for (var i = 0; i < elements.length; i++) {\n                day = elements[i].readAttribute('day');\n                if (day && day == currentDay) {\n                    var td = $(elements[i]).getParentWithTagName(\"td\");\n                    if (document.selectedDate)\n                        document.selectedDate.deselect();\n                    $(td).selectElement();\n                    document.selectedDate = td;\n                }\n            }\n        }\n    }\n}\n\nfunction loadPreviousView(event) {\n    onCalendarGotoDay($(\"leftNavigationArrow\"));\n}\n\nfunction loadNextView(event) {\n    onCalendarGotoDay($(\"rightNavigationArrow\"));\n}\n\nfunction changeDateSelectorDisplay(day, keepCurrentDay) {\n    var url = ApplicationBaseURL + \"dateselector\";\n    if (day) {\n        if (day.length < 8)\n            day += \"01\";\n        url += \"?day=\" + day;\n    }\n\n    if (!keepCurrentDay)\n        currentDay = day;\n\n    var month = day.substr(0, 6);\n    if (cachedDateSelectors[month]) {\n        //       log (\"restoring cached selector for month: \" + month);\n        setDateSelectorContent(cachedDateSelectors[month]);\n    }\n    else {\n        //       log (\"loading selector for month: \" + month);\n        if (document.dateSelectorAjaxRequest) {\n            document.dateSelectorAjaxRequest.aborted = true;\n            document.dateSelectorAjaxRequest.abort();\n        }\n        document.dateSelectorAjaxRequest\n            = triggerAjaxRequest(url,\n                                 dateSelectorCallback,\n                                 month);\n    }\n}\n\nfunction changeCalendarDisplay(data, newView) {\n    newView = ((newView) ? newView : currentView);\n    var url = ApplicationBaseURL + newView;\n    var day = null;\n    var scrollEvent = null;\n    if (data) {\n        day = data['day'];\n        scrollEvent = data['scrollEvent'];\n    }\n\n    if (!day)\n        day = currentDay;\n\n    if (day) {\n        if (data) {\n            var dayDiv = $(\"day\"+day);\n            if (dayDiv) {\n                // Don't reload the view if the event is present in current view\n\n                // Deselect day in date selector\n                if (document.selectedDate)\n                    document.selectedDate.deselect();\n\n                // Select day in date selector\n                var selectedLink = $$('table#dateSelectorTable span[day='+day+']');\n                if (selectedLink.length > 0) {\n                    selectedCell = selectedLink[0].getParentWithTagName(\"td\");\n                    $(selectedCell).selectElement();\n                    document.selectedDate = selectedCell;\n                } else\n                    document.selectedDate = null;\n\n                // Scroll to event\n                if (scrollEvent) {\n                    preventAutoScroll = false;\n                    scrollDayView(scrollEvent);\n                }\n\n                setSelectedDayDate(day);\n\n                return false;\n            }\n            else if (day.length == 6) {\n                day += \"01\";\n            }\n        }\n        url += \"?day=\" + day;\n    }\n\n    selectedCalendarCell = null;\n\n    if (document.dayDisplayAjaxRequest) {\n        document.dayDisplayAjaxRequest.aborted = true;\n        document.dayDisplayAjaxRequest.abort();\n    }\n    document.dayDisplayAjaxRequest\n        = triggerAjaxRequest(url, calendarDisplayCallback,\n                             { \"view\": newView,\n                               \"day\": day,\n                               \"scrollEvent\": scrollEvent });\n\n    return false;\n}\n\nfunction _ensureView(view) {\n    if (currentView != view)\n        changeCalendarDisplay(null, view);\n\n    return false;\n}\n\nfunction onDayOverview() {\n    return _ensureView(\"dayview\");\n}\n\nfunction onMulticolumnDayOverview() {\n    return _ensureView(\"multicolumndayview\");\n}\n\nfunction onWeekOverview() {\n    return _ensureView(\"weekview\");\n}\n\nfunction onMonthOverview() {\n    return _ensureView(\"monthview\");\n}\n\nfunction refreshEventsAndTasks() {\n    refreshEvents();\n    refreshTasks();\n}\n\nfunction onCalendarReload() {\n    if (!reloadWebCalendars()) {\n        refreshEventsAndTasks();\n        changeCalendarDisplay();\n    }\n\n    return false;\n}\n\nfunction reloadWebCalendars() {\n    var remaining = [];\n    var refreshOperations = { \"remaining\": remaining };\n    if (UserSettings['Calendar']\n        && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n\n        var folders = $(\"calendarList\");\n        var calendarNodes = folders.childNodesWithTag(\"li\");\n        for (var i = 0; i < calendarNodes.length; i++) {\n            var current = calendarNodes[i];\n            var calendarID = current.getAttribute(\"id\");\n            var owner = current.getAttribute(\"owner\");\n            var realID = owner + \":Calendar/\" + calendarID.substr(1);\n            if (webCalendars[realID]) { /* is web calendar ? */\n                remaining.push(realID);\n                reloadWebCalendar(realID, refreshOperations);\n            }\n        }\n    }\n\n    return (remaining.length > 0);\n}\n\nvar calendarReloadErrors = { \"invalid-calendar-content\":\n                             _(\"the returned content was not valid calendar\"\n                               + \" data\"),\n                             \"http-error\": _(\"an unknown http error occurred\"\n                                             + \" during the load operation\"),\n                             \"bad-url\": _(\"the url in use is invalid or the\"\n                                          + \" host is currently unreachable\"),\n                             \"invalid-url\": _(\"the url being used is invalid\"\n                                              + \" or not handled\") };\n\nfunction reloadWebCalendar(folderID, refreshOperations) {\n    var url = URLForFolderID(folderID) + \"/reload\";\n    var cbData = { \"folderID\": folderID };\n    if (refreshOperations) {\n        cbData[\"refreshOperations\"] = refreshOperations;\n    }\n    triggerAjaxRequest(url, reloadWebCalendarCallback, cbData);\n}\n\nfunction reloadWebCalendarCallback(http) {\n    var cbData = http.callbackData;\n    if (http.status == 200) {\n        var result = http.responseText.evalJSON(true);\n        var requireAuth = false;\n        var success = false;\n        if (result.status) {\n            if (result.status == 401) {\n                requireAuth = true;\n            }\n            else {\n                if (result.status == 200) {\n                    success = true;\n                }\n                else {\n                    var errorMessage = _(\"An error occurred while importing calendar.\");\n                    if (result[\"error\"]) {\n                        var message = calendarReloadErrors[result[\"error\"]];\n                        errorMessage = (_(\"An error occurred while loading remote\"\n                                          + \" calendar: %{0}.\").formatted(message));\n                    }\n                    showAlertDialog (errorMessage);\n                }\n            }\n        }\n        else {\n            var errorMessage = _(\"An error occurred while importing calendar.\");\n            if (result[\"error\"]) {\n                var message = calendarReloadErrors[result[\"error\"]];\n                errorMessage = (_(\"An error occurred while loading remote\"\n                                  + \" calendar: %{0}.\").formatted(message));\n            }\n            showAlertDialog (errorMessage);\n        }\n\n        if (requireAuth) {\n            reauthenticateWebCalendar(cbData[\"folderID\"], cbData);\n        }\n        else {\n            var refreshOperations = cbData[\"refreshOperations\"];\n            if (refreshOperations) {\n                var remaining = refreshOperations[\"remaining\"];\n                var calIdx = remaining.indexOf(cbData[\"folderID\"]);\n                remaining.splice(calIdx, 1);\n                if (remaining.length == 0) {\n                    refreshEventsAndTasks();\n                    changeCalendarDisplay();\n                }\n            }\n            else {\n                if (success) {\n                    refreshEventsAndTasks();\n                    changeCalendarDisplay();\n                }\n            }\n        }\n    }\n    else {\n        showAlertDialog(_(\"An error occurred while importing calendar.\"));\n        var refreshOperations = cbData[\"refreshOperations\"];\n        if (refreshOperations) {\n            var remaining = refreshOperations[\"remaining\"];\n            var calIdx = remaining.indexOf(cbData[\"folderID\"]);\n            remaining.splice(calIdx, 1);\n            if (remaining.length > 0) {\n                var newFolderID = remaining[0];\n                reloadWebCalendar(newFolderID, refreshOperations);\n            }\n        }\n    }\n}\n\nfunction reauthenticateWebCalendar(folderID, refreshCBData) {\n    var remoteURL = null;\n    if (UserSettings['Calendar'] && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n        remoteURL = webCalendars[folderID];\n    }\n    var parts = remoteURL.split(\"/\");\n    var hostname = parts[2];\n    function authenticate(username, password) {\n        disposeDialog();\n        var url = URLForFolderID(folderID) + \"/set-credentials\";\n        var parameters = (\"username=\" + encodeURIComponent(username)\n                          + \"&password=\" + encodeURIComponent(password));\n        triggerAjaxRequest(url, authenticateWebCalendarCallback, refreshCBData, parameters,\n                           { \"Content-type\": \"application/x-www-form-urlencoded\" });\n    }\n    showAuthenticationDialog(_(\"Please identify yourself to %{0}\")\n                             .formatted(hostname),\n                             authenticate);\n}\n\nfunction authenticateWebCalendarCallback(http) {\n    var cbData = http.callbackData;\n    var folderID = cbData[\"folderID\"];\n    var refreshOperations = cbData[\"refreshOperations\"];\n    if (isHttpStatus204(http.status)) {\n        reloadWebCalendar(folderID, refreshOperations);\n    }\n    else {\n        if (refreshOperations) {\n            var remaining = refreshOperations[\"remaining\"];\n            var calIdx = remaining.indexOf(folderID);\n            remaining.splice(calIdx, 1);\n            if (remaining.length > 0) {\n                var newFolderID = remaining[0];\n                reloadWebCalendar(newFolderID, refreshOperations);\n            }\n        }\n    }\n}\n\nfunction scrollDayView(scrollEvent) {\n    if (!preventAutoScroll) {\n        if (scrollEvent) {\n            var contentView;\n            var eventRow = $(scrollEvent);\n            if (eventRow) {\n                var eventBlocks = selectCalendarEvent(eventRow.calendar, eventRow.cname, eventRow.recurrenceTime);\n                if (eventBlocks) {\n                    var firstEvent = eventBlocks.first();\n\n                    if (currentView == \"monthview\")\n                        contentView = firstEvent.up(\"DIV.day\");\n                    else\n                        contentView = $(\"daysView\");\n\n                    // Don't scroll to an all-day event\n                    if (typeof eventRow.hour != \"undefined\") {\n                        var top = firstEvent.cumulativeOffset()[1] - contentView.scrollTop;\n                        // Don't scroll if the event is visible to the user\n                        if (top < contentView.cumulativeOffset()[1])\n                            contentView.scrollTop = firstEvent.cumulativeOffset()[1] - contentView.cumulativeOffset()[1];\n                        else if (top > contentView.cumulativeOffset()[1] + contentView.getHeight() - firstEvent.getHeight())\n                            contentView.scrollTop = firstEvent.cumulativeOffset()[1] - contentView.cumulativeOffset()[1];\n                    }\n                }\n            }\n        }\n        else if (currentView != \"monthview\") {\n            var contentView = $(\"daysView\");\n            var hours = (contentView.childNodesWithTag(\"div\")[0]).childNodesWithTag(\"div\");\n            contentView.scrollTop = hours[dayStartHour].offsetTop;\n        }\n    }\n}\n\nfunction onClickableCellsDblClick(event) {\n    var target = getTarget(event);\n    // Hack to ignore double-click in the scrollbar\n    if (target.hasClassName(\"dayHeader\") || (this.scrollHeight - this.clientHeight <= 1)) {\n        newEventFromWidget(this, 'event');\n        Event.stop(event);\n    }\n}\n\nfunction refreshCalendarEvents(scrollEvent) {\n    var todayDate = new Date();\n    var sd;\n    var ed;\n\n    if (!currentDay)\n        currentDay = todayDate.getDayString();\n\n    if (currentView == \"dayview\") {\n        sd = currentDay;\n        ed = sd;\n    }\n    else if (currentView == \"weekview\") {\n        var startDate;\n        startDate = currentDay.asDate();\n        startDate = startDate.beginOfWeek();\n        sd = startDate.getDayString();\n        var endDate = new Date();\n        endDate.setTime(startDate.getTime());\n        endDate.addDays(6);\n        ed = endDate.getDayString();\n    }\n    else {\n        var monthDate;\n        monthDate = currentDay.asDate();\n        monthDate.setDate(1);\n        sd = monthDate.beginOfWeek().getDayString();\n\n        var lastMonthDate = new Date();\n        lastMonthDate.setTime(monthDate.getTime());\n        lastMonthDate.setMonth(monthDate.getMonth() + 1);\n        lastMonthDate.addDays(-1);\n        ed = lastMonthDate.endOfWeek().getDayString();\n    }\n    if (document.refreshCalendarEventsAjaxRequest) {\n        document.refreshCalendarEventsAjaxRequest.aborted = true;\n        document.refreshCalendarEventsAjaxRequest.abort();\n    }\n    var url = (ApplicationBaseURL + \"eventsblocks?sd=\" + sd + \"&ed=\" + ed\n               + \"&view=\" + currentView);\n    document.refreshCalendarEventsAjaxRequest\n        = triggerAjaxRequest(url, refreshCalendarEventsCallback,\n                             {\"startDate\": sd, \"endDate\": ed,\n                              \"scrollEvent\": scrollEvent});\n}\n\nfunction _parseEvents(list) {\n    var newCalendarEvents = {};\n\n    for (var i = 0; i < list.length; i++) {\n        var event = list[i];\n        var cname = event[0];\n        var calendar = event[1];\n        // log(\"parsed cname: \" + cname + \"; calendar: \" + calendar);\n        var calendarDict = newCalendarEvents[calendar];\n        if (!calendarDict) {\n            calendarDict = {};\n            newCalendarEvents[calendar] = calendarDict;\n        }\n        var occurences = calendarDict[cname];\n        if (!occurences) {\n            occurences = [];\n            calendarDict[cname] = occurences;\n        }\n        event.blocks = [];\n        occurences.push(event);\n    }\n\n    return newCalendarEvents;\n}\n\nfunction _setupEventsDragAndDrop(events) {\n    /* We setup the drag controllers for all the events.\n       Since the same events may be listed more than once per calendar\n       (repeating events), we must keep account of those that have already\n       been setup. */\n    var setupFlags = {};\n\n    for (var i = 0; i < events.length; i++) {\n        var cname = events[i][0];\n        var calendar = events[i][1];\n        var setupId = calendar + \"_\" + cname;\n        if (!setupFlags[setupId]) {\n            var occurrences = calendarEvents[calendar][cname];\n            for (var j = 0; j < occurrences.length; j++) {\n                var blocks = occurrences[j].blocks;\n                var dragController = new SOGoEventDragController();\n                dragController.updateDropCallback = updateEventFromDragging;\n                dragController.attachToEventCells(blocks);\n            }\n            setupFlags[setupId] = true;\n        }\n    }\n}\n\nfunction refreshCalendarEventsCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        if (http.responseText.length > 0) {\n            var eventsBlocks = http.responseText.evalJSON(true);\n            calendarEvents = _parseEvents(eventsBlocks[0]);\n            if (currentView == \"monthview\")\n                _drawMonthCalendarEvents(eventsBlocks[2], eventsBlocks[0]);\n            else {\n                _drawCalendarAllDayEvents(eventsBlocks[1], eventsBlocks[0]);\n                _drawCalendarEvents(eventsBlocks[2], eventsBlocks[0]);\n            }\n            _setupEventsDragAndDrop(eventsBlocks[0]);\n            resetCategoriesStyles();\n            onWindowResize(null);\n        }\n        if (http.callbackData[\"scrollEvent\"])\n            preventAutoScroll = false;\n        scrollDayView(http.callbackData[\"scrollEvent\"]);\n    }\n    else\n        log(\"AJAX error when refreshing calendar events\");\n}\n\nfunction resetCategoriesStyles() {\n    if (categoriesStyleSheet == null) {\n        categoriesStyleSheet = document.createElement(\"style\");\n        categoriesStyleSheet.type = \"text/css\";\n        document.getElementsByTagName(\"head\")[0].appendChild(categoriesStyleSheet);\n    }\n    else {\n        if (Prototype.Browser.IE)\n            while (categoriesStyleSheet.styleSheet.rules.length)\n                categoriesStyleSheet.styleSheet.removeRule();\n        else\n            while (categoriesStyleSheet.firstChild)\n                categoriesStyleSheet.removeChild(categoriesStyleSheet.firstChild);\n    }\n\n    if (UserDefaults['SOGoCalendarCategoriesColors']) {\n        // Update stylesheet with new categories colors\n        var selectors = [];\n        var rules = [];\n        categoriesStyles.keys().each(function(category) {\n            var color = UserDefaults['SOGoCalendarCategoriesColors'][category];\n            if (color) {\n                rules[rules.length] = '{ border-right: 8px solid ' + color + '; }';\n                selectors[selectors.length] = 'DIV.' + categoriesStyles.get(category);\n            }\n        });\n\n        if (selectors.length > 0) {\n            if (categoriesStyleSheet.styleSheet && categoriesStyleSheet.styleSheet.addRule) {\n                // IE\n                for (var i = 0; i < selectors.length; i++)\n                    categoriesStyleSheet.styleSheet.addRule(selectors[i],\n                                                            rules[i]);\n            }\n            else {\n                // Mozilla + Safari\n                for (var i = 0; i < selectors.length; i++)\n                    categoriesStyleSheet.appendChild(document.createTextNode(selectors[i] +\n                                                                             ' ' + rules[i]));\n            }\n        }\n    }\n}\n\nfunction newBaseEventDIV(eventRep, event, eventText) {\n    //\tlog (\"0 cname = \" + event[0]);\n    //\tlog (\"1 calendar = \" + event[1]);\n    //  log (\"2 calendar name = \" + event[2]);\n    //\tlog (\"3 status = \" + event[3]);\n    //\tlog (\"4 title = \" + event[4]);\n    //\tlog (\"5 start = \" + event[5]);\n    //\tlog (\"6 end = \" + event[6]);\n    //\tlog (\"7 location = \" + event[7]);\n    //\tlog (\"8 isallday = \" + event[8]);\n    //\tlog (\"9 classification = \" + event[9]); // 0 = public, 1 = private, 2 = confidential\n    //\tlog (\"10 category = \" + event[10]);\n    //\tlog (\"11 participants emails = \" + event[11]);\n    //\tlog (\"12 participants states = \" + event[12]);\n    //\tlog (\"13 owner = \" + event[13]);\n    //\tlog (\"14 iscycle = \" + event[14]);\n    //\tlog (\"15 nextalarm = \" + event[15]);\n    //\tlog (\"16 recurrenceid = \" + event[16]);\n    //\tlog (\"17 isexception = \" + event[17]);\n    //  log (\"18 editable = \" + event[18]);\n    //  log (\"19 erasable = \" + event[19]);\n    //  log (\"20 ownerisorganizer = \" + event[20]);\n\n    var eventCell = createElement(\"div\");\n    eventCell.cname = event[0];\n    eventCell.calendar = event[1];\n    var startDate = new Date(event[5]*1000);\n    if (startDate) {\n        eventCell.startDate = event[5];\n        eventCell.writeAttribute('day', startDate.getDayString());\n        eventCell.writeAttribute('hour', event[8]? 'allday' : startDate.getHourString());\n    }\n//    if (event[8] == 1)\n//        eventCell.addClassName(\"private\");\n//    else if (event[8] == 2)\n//        eventCell.addClassName(\"confidential\");\n    if (eventRep.recurrenceTime)\n        eventCell.recurrenceTime = eventRep.recurrenceTime;\n    //eventCell.owner = event[12];\n    eventCell.isException = event[17];\n    eventCell.editable = event[18];\n    eventCell.erasable = event[19] || IsSuperUser;\n    eventCell.ownerIsOrganizer = event[20];\n    eventCell.addClassName(\"event\");\n//    if (event[14] > 0)\n//        eventCell.addClassName(\"alarm\");\n\n    var innerDiv = createElement(\"div\");\n    eventCell.appendChild(innerDiv);\n    innerDiv.addClassName(\"eventInside\");\n    innerDiv.addClassName(\"calendarFolder\" + event[1]);\n    if (eventRep.userState >= 0 && userStates[eventRep.userState])\n        innerDiv.addClassName(userStates[eventRep.userState]);\n\n    var gradientDiv = createElement(\"div\");\n    innerDiv.appendChild(gradientDiv);\n    gradientDiv.addClassName(\"gradient\");\n\n    var gradientImg = createElement(\"img\");\n    gradientDiv.appendChild(gradientImg);\n    gradientImg.src = ResourcesURL + \"/event-gradient.png\";\n\n    var textDiv = createElement(\"div\");\n    innerDiv.appendChild(textDiv);\n    textDiv.addClassName(\"text\");\n    var iconSpan = createElement(\"span\", null, \"icons\");\n    textDiv.appendChild(iconSpan);\n    textDiv.appendChild(document.createTextNode(eventText.replace(/(\\\\r)?\\\\n/g, \"<BR/>\")));\n\n    // Add alarm and classification icons\n    if (event[9] == 1)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/private.png\"}, null, iconSpan);\n    else if (event[9] == 2)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/confidential.png\"}, null, iconSpan);\n    if (event[15] > 0)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/alarm.png\"}, null, iconSpan);\n\n    if (event[10] != null) {\n        var categoryStyle = categoriesStyles.get(event[10]);\n        if (!categoryStyle) {\n            categoryStyle = 'category_' + categoriesStyles.keys().length;\n            categoriesStyles.set([event[10]], categoryStyle);\n        }\n        innerDiv.addClassName(categoryStyle);\n    }\n    eventCell.observe(\"contextmenu\", onMenuCurrentView);\n\n    if (event[3] == null) {\n        // Status field is not defined -- user can't read event\n        eventCell.observe(\"selectstart\", listRowMouseDownHandler);\n        eventCell.observe(\"click\", onCalendarSelectEvent);\n        eventCell.observe(\"dblclick\", Event.stop);\n    }\n    else {\n        // Status field is defined -- user can read event\n        eventCell.observe(\"mousedown\", listRowMouseDownHandler);\n        eventCell.observe(\"click\", onCalendarSelectEvent);\n        eventCell.observe(\"dblclick\", editDoubleClickedEvent);\n        eventCell.observe(\"click\", onViewEvent);\n    }\n\n    event.blocks.push(eventCell);\n\n    return eventCell;\n}\n\nfunction _drawCalendarAllDayEvents(events, eventsData) {\n    var headerView = $(\"calendarHeader\");\n    var subdivs = headerView.childNodesWithTag(\"div\");\n    var days = subdivs[1].childNodesWithTag(\"div\");\n    for (var i = 0; i < days.length; i++) {\n        var parentDiv = days[i];\n        for (var j = 0; j < events[i].length; j++) {\n            var eventRep = events[i][j];\n            var nbr = eventRep.nbr;\n            var eventCell = newAllDayEventDIV(eventRep, eventsData[nbr]);\n            parentDiv.appendChild(eventCell);\n        }\n    }\n\n    resizeCalendarHeaderDIV();\n}\n\n/* When the list of all day events overflows, we resize it in order to contain\n   at least 6 or 7 items. Afterwards we restore the regular scrollbar\n   mechanism. */\nfunction resizeCalendarHeaderDIV() {\n    var headerView = $(\"calendarHeader\");\n    var daysView = $(\"daysView\");\n    if (headerView && daysView) {\n        /* consts */\n        var headerViewBaseHeight = 70;\n        var daysViewBaseTop = 120;\n        var maxDelta = 80;\n        /* /consts */\n\n        var maxEventPerDay = 0;\n\n        var subdivs = headerView.childNodesWithTag(\"div\");\n        var days = subdivs[1].childNodesWithTag(\"div\");\n        for (var i = 0; i < days.length; i++) {\n            var parentDiv = days[i];\n            var divs = parentDiv.childNodesWithTag(\"div\");\n            if (divs.length > maxEventPerDay) {\n                maxEventPerDay = divs.length;\n            }\n        }\n\n        if (maxEventPerDay > 2) {\n            var delta = ((maxEventPerDay - 2) * 22) + 10;\n            if (delta > maxDelta) {\n                delta = maxDelta;\n            }\n            daysView.style.top = String(delta + daysViewBaseTop) + \"px\";\n            headerView.style.height = String(delta + headerViewBaseHeight) + \"px\";\n        }\n        else {\n            daysView.style.top = null;\n            headerView.style.height = null;\n        }\n    }\n}\n\nfunction newAllDayEventDIV(eventRep, event) {\n    // cname, calendar, starts, lasts,\n    // \t\t     startHour, endHour, title) {\n    var eventCell = newBaseEventDIV(eventRep, event, event[4]);\n\n    return eventCell;\n}\n\nfunction _drawCalendarEvents(events, eventsData) {\n    var daysView = $(\"daysView\");\n    var subdivs = daysView.childNodesWithTag(\"div\");\n    for (var i = 0; i < subdivs.length; i++) {\n        var subdiv = subdivs[i];\n        if (subdiv.hasClassName(\"days\")) {\n            var days = subdiv.childNodesWithTag(\"div\");\n            for (var j = 0; j < days.length; j++) {\n                var parentDiv = days[j].childNodesWithTag(\"div\")[0];\n                for (var k = 0; k < events[j].length; k++) {\n                    var eventRep = events[j][k];\n                    var nbr = eventRep.nbr;\n                    var eventCell = newEventDIV(eventRep, eventsData[nbr]);\n                    parentDiv.appendChild(eventCell);\n                }\n            }\n        }\n    }\n}\n\nfunction newEventDIV(eventRep, event) {\n    var eventCell = newBaseEventDIV(eventRep, event, event[4]);\n\n    var pc = 100 / eventRep.siblings;\n    var left = Math.floor(eventRep.position * pc);\n    eventCell.style.left = left + \"%\";\n    var right = Math.floor(100 - (eventRep.position + 1) * pc);\n    eventCell.style.right = right + \"%\";\n    eventCell.addClassName(\"starts\" + eventRep.start);\n    eventCell.addClassName(\"lasts\" + eventRep.length);\n\n    if (event[7]) {\n        var inside = eventCell.childNodesWithTag(\"div\")[0];\n        var textDiv = inside.childNodesWithTag(\"div\")[1];\n        textDiv.appendChild(createElement(\"br\"));\n        var span = createElement(\"span\", null, \"location\");\n        var text = _(\"Location:\") + \" \" + event[7];\n        span.appendChild(document.createTextNode(text));\n        textDiv.appendChild(span);\n    }\n\n    return eventCell;\n}\n\nfunction _drawMonthCalendarEvents(events, eventsData) {\n    var daysView = $(\"monthDaysView\");\n    var days = daysView.childNodesWithTag(\"div\");\n    for (var i = 0; i < days.length; i++) {\n        var parentDiv = days[i];\n        for (var j = 0; j < events[i].length; j++) {\n            var eventRep = events[i][j];\n            var nbr = eventRep.nbr;\n            var eventCell = newMonthEventDIV(eventRep, eventsData[nbr]);\n            parentDiv.appendChild(eventCell);\n        }\n    }\n}\n\nfunction newMonthEventDIV(eventRep, event) {\n    var eventText;\n    if (event[8]) // all-day event\n        eventText = event[4];\n    else\n        eventText = eventRep.starthour + \" - \" + event[4];\n\n    var eventCell = newBaseEventDIV(eventRep, event,\n                                    eventText);\n\n    return eventCell;\n}\n\nfunction attachDragControllers(contentView) {\n    var dayNodes = contentView.select(\"DIV.days DIV.day\");\n    for (var j = 0; j < dayNodes.length; j++) {\n        var dayNode = dayNodes[j];\n        if (dayNode.hasClassName(\"day\")) {\n            var dragController = new SOGoEventDragController();\n            dragController.createDropCallback = newEventFromDragging;\n            dragController.attachToDayNode(dayNode);\n        }\n    }\n}\n\n/* On IE, the scroll bar is part of the last element. For other browsers, we\n   execute this method so that the \"right\" style attribute of the\n   \"calendarHeader\" element can be computed. This is execute only once. */\nfunction adjustCalendarHeaderDIV() {\n    var dv = $(\"daysView\");\n    if (dv) {\n        var ch = $(\"calendarHeader\");\n        var delta = ch.clientWidth - dv.clientWidth - 1;\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n        var selectors = [\"DIV#calendarHeader DIV.dayLabels\",\n                         \"DIV#calendarHeader DIV.days\"];\n        var rule = (\"right: \" + delta + \"px\");\n        if (styleElement.styleSheet && styleElement.styleSheet.addRule) {\n            // IE\n            styleElement.styleSheet.addRule(selectors[0], rule);\n            styleElement.styleSheet.addRule(selectors[1], rule);\n        } else {\n            // Mozilla + Firefox\n            var styleText = selectors.join(\",\") + \" { \" + rule + \"; }\";\n            styleElement.appendChild(document.createTextNode(styleText));\n        }\n        document.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n        calendarHeaderAdjusted = true;\n    }\n}\n\nfunction calendarDisplayCallback(http) {\n    var div = $(\"calendarView\");\n    var daysView = $(\"daysView\");\n    var position = -1;\n\n    // Check the previous view to restore the scrolling position\n    if (daysView)\n      position = daysView.scrollTop;\n    preventAutoScroll = (position != -1);\n\n    if (http.readyState == 4\n        && http.status == 200) {\n        document.dayDisplayAjaxRequest = null;\n        div.update(http.responseText);\n\n        // DOM has changed\n        daysView = $(\"daysView\");\n        if (daysView) {\n            if (preventAutoScroll)\n                daysView.scrollTop = position;\n            if (!calendarHeaderAdjusted)\n                adjustCalendarHeaderDIV();\n        }\n\n        if (http.callbackData[\"view\"])\n            currentView = http.callbackData[\"view\"];\n        if (http.callbackData[\"day\"])\n            currentDay = http.callbackData[\"day\"];\n\n        // Initialize contextual menu\n        var menu = new Array(onMenuNewEventClick,\n                             onMenuNewTaskClick,\n                             \"-\",\n                             loadPreviousView,\n                             loadNextView,\n                             \"-\",\n                             deleteEvent,\n                             copyEventToPersonalCalendar,\n                             onMenuRawEvent\n                            );\n        var observer;\n        if (currentView == 'dayview') {\n            observer = $(\"daysView\");\n        }\n        else if (currentView == 'weekview') {\n            observer = $(\"daysView\");\n        }\n        else {\n            observer = $(\"monthDaysView\");\n        }\n\n        var contentView;\n        if (currentView == \"monthview\")\n            contentView = $(\"calendarContent\");\n        else {\n            contentView = $(\"daysView\");\n            contentView.observe(\"scroll\", onBodyClickHandler);\n            attachDragControllers($(\"calendarHeader\"));\n\n            // Create a clone of the contextual menu for the all-day\n            // events area\n            var allDayViewMenu = Element.clone($(\"currentViewMenu\"), true);\n            allDayViewMenu.id = \"allDayViewMenu\";\n            var newEventMenuItem = allDayViewMenu.select(\"LI\").first();\n            newEventMenuItem.writeAttribute(\"hour\", \"allday\");\n            $(\"currentViewMenu\").parentNode.appendChild(allDayViewMenu);\n            initMenu($(\"allDayViewMenu\"), menu);\n            var allDayArea = $$(\"DIV#calendarHeader DIV.days\").first();\n            allDayArea.observe(\"contextmenu\", onMenuAllDayView);\n        }\n        attachDragControllers(contentView);\n\n        // Attach contextual menu\n        var currentViewMenu = $(\"currentViewMenu\");\n        initMenu(currentViewMenu, menu);\n        observer.observe(\"contextmenu\", onMenuCurrentView);\n        currentViewMenu.prepareVisibility = onMenuCurrentViewPrepareVisibility;\n\n        restoreSelectedDay();\n\n        refreshCalendarEvents(http.callbackData.scrollEvent);\n\n        var days = contentView.select(\"DIV.day\");\n\n        if (currentView == \"monthview\")\n            for (var i = 0; i < days.length; i++) {\n                days[i].observe(\"click\", onCalendarSelectDay);\n                days[i].observe(\"dblclick\", onClickableCellsDblClick);\n                days[i].observe(\"selectstart\", listRowMouseDownHandler);\n                //days[i].down(\".dayHeader\").observe(\"selectstart\", listRowMouseDownHandler);\n                if (currentView == \"monthview\")\n                    days[i].observe(\"scroll\", onBodyClickHandler);\n            }\n        else {\n            var calendarHeader = $(\"calendarHeader\");\n            var headerDaysLabels = calendarHeader.select(\"DIV.dayLabels DIV.day\");\n            var headerDays = calendarHeader.select(\"DIV.days DIV.day\");\n            for (var i = 0; i < days.length; i++) {\n                headerDays[i].hour = \"allday\";\n                headerDaysLabels[i].observe(\"mousedown\", listRowMouseDownHandler);\n                headerDays[i].observe(\"click\", onCalendarSelectDay);\n                headerDays[i].observe(\"dblclick\", onClickableCellsDblClick);\n                days[i].observe(\"click\", onCalendarSelectDay);\n\n                var clickableCells = days[i].select(\"DIV.clickableHourCell\");\n                for (var j = 0; j < clickableCells.length; j++)\n                    clickableCells[j].observe(\"dblclick\", onClickableCellsDblClick);\n            }\n        }\n    }\n    else\n        log (\"calendarDisplayCallback Ajax error (\"\n             + http.readyState + \"/\" + http.status + \")\");\n}\n\nfunction onEventsSelectionChange() {\n    listOfSelection = this;\n    this.removeClassName(\"_unfocused\");\n\n    var tasksList = $(\"tasksList\");\n    tasksList.addClassName(\"_unfocused\");\n    deselectAll(tasksList);\n\n    var rows = $(this).getSelectedNodes();\n    if (rows.length == 1) {\n        var row = rows[0];\n        changeCalendarDisplay( { \"day\": row.day,\n                    \"scrollEvent\": row.getAttribute(\"id\") } );\n        changeDateSelectorDisplay(row.day, true);\n    }\n    else {\n        // Select visible events cells\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            selectCalendarEvent(row.calendar, row.cname, row.recurrenceTime);\n        }\n    }\n}\n\nfunction onTasksSelectionChange(event) {\n    listOfSelection = this;\n    this.removeClassName(\"_unfocused\");\n\n    var target = Event.element(event);\n    if (target.tagName == 'SPAN')\n        target = target.parentNode;\n    // Update selection\n    onRowClick(event, target);\n\n    var eventsList = $(\"eventsList\");\n    eventsList.addClassName(\"_unfocused\");\n    eventsList.deselectAll();\n}\n\nfunction _loadEventHref(href) {\n    if (document.eventsListAjaxRequest) {\n        document.eventsListAjaxRequest.aborted = true;\n        document.eventsListAjaxRequest.abort();\n    }\n    var url = ApplicationBaseURL + href;\n    document.eventsListAjaxRequest\n        = triggerAjaxRequest(url, eventsListCallback, href);\n\n    return false;\n}\n\nfunction _loadTasksHref(href) {\n    if (document.tasksListAjaxRequest) {\n        document.tasksListAjaxRequest.aborted = true;\n        document.tasksListAjaxRequest.abort();\n    }\n    url = ApplicationBaseURL + href;\n\n    var tasksList = $(\"tasksList\");\n    var selectedIds;\n    if (tasksList)\n        selectedIds = tasksList.getSelectedNodesId();\n    else\n        selectedIds = null;\n    document.tasksListAjaxRequest\n        = triggerAjaxRequest(url, tasksListCallback, selectedIds);\n\n    return true;\n}\n\nfunction onHeaderClick(event) {\n    var newSortAttribute;\n    var headerId;\n\n    headerId = this.getAttribute(\"id\");\n\n    if (headerId.startsWith('event'))\n    {\n        // This is needed to get the dom object and flip the triangle\n        sorting[\"event-header\"] = headerId;\n        // Take away the 'events' and 'Header' and lowercase the result\n        newSortAttribute = headerId.sub(\"Header\", \"\").sub(\"event\", \"\").toLowerCase();\n        if (sorting[\"event-attribute\"] == newSortAttribute)\n            sorting[\"event-ascending\"] = !sorting[\"event-ascending\"];\n        else\n            sorting[\"event-ascending\"] = true;\n        sorting[\"event-attribute\"] = newSortAttribute;\n        refreshEvents();\n    }\n    else // Tasks\n    {\n        // This is needed to get the dom object and flip the triangle\n        sorting[\"task-header\"] = headerId;\n        // Take away the 'tasks' and 'Header' and lowercase the result\n        newSortAttribute = headerId.sub(\"Header\", \"\").sub(\"task\", \"\").toLowerCase();\n        if (sorting[\"task-attribute\"] == newSortAttribute)\n            sorting[\"task-ascending\"] = !sorting[\"task-ascending\"];\n        else\n            sorting[\"task-ascending\"] = true;\n        sorting[\"task-attribute\"] = newSortAttribute;\n        refreshTasks();\n    }\n\n    Event.stop(event);\n}\n\nfunction refreshCurrentFolder(id) {\n    if (id == 'tasks')\n        refreshTasks();\n    else\n        refreshEvents();\n}\n\n/* refreshes the \"unifinder\" list */\nfunction refreshEvents() {\n    var titleSearch;\n    var value = search[\"events\"][\"value\"];\n\n    if (value && value.length)\n        titleSearch = \"&search=\" + escape(value.utf8encode());\n    else\n        titleSearch = \"\";\n\n    refreshAlarms();\n\n    return _loadEventHref(\"eventslist?asc=\" + sorting[\"event-ascending\"]\n                          + \"&sort=\" + sorting[\"event-attribute\"]\n                          + \"&day=\" + currentDay\n                          + titleSearch\n                          + \"&filterpopup=\" + listFilter);\n}\n\nfunction refreshTasks(setUserDefault) {\n    var titleSearch;\n    var value = search[\"tasks\"][\"value\"];\n\n    if (value && value.length)\n        titleSearch = \"&search=\" + escape(value.utf8encode());\n    else\n        titleSearch = \"\";\n\n    if (setUserDefault == 1)\n      titleSearch += \"&setud=1\";\n\n    refreshAlarms();\n\n    return _loadTasksHref(\"taskslist?show-completed=\" + showCompletedTasks\n                          + \"&asc=\" + sorting[\"task-ascending\"]\n                          + \"&sort=\" + sorting[\"task-attribute\"]\n                          + titleSearch);\n}\n\nfunction refreshEventsAndDisplay() {\n    refreshEvents();\n    changeCalendarDisplay();\n}\n\nfunction onListFilterChange() {\n    var node = $(\"filterpopup\");\n\n    listFilter = node.value;\n//    log (\"listFilter = \" + listFilter);\n\n    return refreshEvents();\n}\n\nfunction selectMonthInMenu(menu, month) {\n    var entries = $(menu).select(\"LI\");\n    for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        var entryMonth = entry.getAttribute(\"month\");\n        if (entryMonth == month)\n            entry.addClassName(\"currentMonth\");\n        else\n            entry.removeClassName(\"currentMonth\");\n    }\n}\n\nfunction selectYearInMenu(menu, year) {\n    var entries = $(menu).select(\"LI\");\n    for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        var entryYear = entry.innerHTML.strip();\n        if (entryYear == year)\n            entry.addClassName(\"currentMonth\");\n        else\n            entry.removeClassName(\"currentMonth\");\n    }\n}\n\nfunction popupMonthMenu(event) {\n    if (event.button == 0) {\n        var id = this.getAttribute(\"id\");\n        if (id == \"monthLabel\")\n            menuId = \"monthListMenu\";\n        else\n            menuId = \"yearListMenu\";\n\n        var popup = $(menuId);\n        if (id == \"monthLabel\")\n            selectMonthInMenu(popup, this.getAttribute(\"month\"));\n        else\n            selectYearInMenu(popup, this.innerHTML);\n\n        popupToolbarMenu(this, menuId);\n        Event.stop(event);\n    }\n}\n\nfunction onMonthMenuItemClick(event) {\n    var month = '' + this.getAttribute(\"month\");\n    var year = '' + $(\"yearLabel\").innerHTML.strip();\n\n    changeDateSelectorDisplay(year + month + \"01\", true);\n}\n\nfunction onYearMenuItemClick(event) {\n    var month = '' + $(\"monthLabel\").getAttribute(\"month\");;\n    var year = '' + this.innerHTML.strip();\n\n    changeDateSelectorDisplay(year + month + \"01\", true);\n}\n\nfunction _eventBlocksMatching(calendar, cname, recurrenceTime) {\n    var blocks = null;\n    var events = calendarEvents[calendar];\n    if (events) {\n        var occurences = events[cname];\n        if (occurences) {\n            if (recurrenceTime) {\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    if (occurence[16] == recurrenceTime)\n                        blocks = occurence.blocks;\n                }\n            }\n            else {\n                blocks = [];\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    blocks = blocks.concat(occurence.blocks);\n                }\n            }\n        }\n    }\n\n    return blocks;\n}\n\n/** Select event in calendar view */\nfunction selectCalendarEvent(calendar, cname, recurrenceTime) {\n    var selection = _eventBlocksMatching(calendar, cname, recurrenceTime);\n    if (selection) {\n        for (var i = 0; i < selection.length; i++)\n            selection[i].selectElement();\n        if (selectedCalendarCell) {\n            selectedCalendarCell = selectedCalendarCell.concat(selection);\n        }\n        else\n            selectedCalendarCell = selection;\n    }\n\n    return selection;\n}\n\nfunction onSelectAll(event) {\n    if (listOfSelection)\n        listOfSelection.selectAll();\n    else {\n        // Select events cells\n        var selectedBlocks = [];\n        for (var c in calendarEvents) {\n            var events = calendarEvents[c];\n            for (var e in events) {\n                var occurrences = events[e];\n                for (var i = 0; i < occurrences.length; i++)\n                    selectedBlocks = selectedBlocks.concat(occurrences[i].blocks);\n            }\n        }\n        for (var i = 0; i < selectedBlocks.length; i++)\n            selectedBlocks[i].selectElement();\n\n        selectedCalendarCell = selectedBlocks;\n    }\n\n    return false;\n}\n\nfunction deselectAll(list) {\n    if (list) {\n        list.deselectAll();\n    }\n    else {\n        $(\"eventsList\").deselectAll();\n        $(\"tasksList\").deselectAll();\n    }\n    if (selectedCalendarCell) {\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            selectedCalendarCell[i].deselect();\n        selectedCalendarCell = null;\n    }\n}\n\n/** Click on an event in the calendar view */\nfunction onCalendarSelectEvent(event, willShowContextualMenu) {\n    var alreadySelected = false;\n\n    // Look for event in events list\n    // TODO: event will likely not be found if an Ajax query is refreshing\n    // the events list.\n    var rowID = this.calendar + \"-\" + this.cname;\n    if (this.recurrenceTime)\n        rowID += \"-\" + this.recurrenceTime;\n    var row = $(rowID);\n\n    // Check if event is already selected\n    if (selectedCalendarCell)\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            if (selectedCalendarCell[i] == this) {\n                alreadySelected = true;\n                break;\n            }\n\n    if ((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1)) {\n        // If meta or ctrl key is pressed, inverse the selection\n        if (alreadySelected) {\n            this.deselect();\n            selectedCalendarCell.splice(i, 1);\n            if (row)\n                row.deselect();\n\n            return true;\n        }\n    }\n    else if (!(alreadySelected && willShowContextualMenu)\n             && event.shiftKey == 0) {\n        // Unselect entries in events list and calendar view, unless :\n        // - Shift key is pressed;\n        // - Or right button is clicked and event is already selected.\n        deselectAll();\n        listOfSelection = null;\n        this.selectElement();\n        if (alreadySelected)\n            selectedCalendarCell = [this];\n    }\n\n    if (!alreadySelected) {\n        // Select event in calendar view\n        selectCalendarEvent(this.calendar, this.cname, this.recurrenceTime);\n    }\n    // Select event in events list\n    if (row) {\n        var div = row.parentNode.parentNode.parentNode;\n        div.scrollTop = row.offsetTop - (div.offsetHeight / 2);\n        row.selectElement();\n    }\n}\n\nfunction onCalendarSelectDay(event) {\n    var day = this.getAttribute(\"day\");\n    var needRefresh = (listFilter == 'view_selectedday' && day != currentDay);\n\n    setSelectedDayDate(day);\n    changeDateSelectorDisplay(day);\n\n    if (needRefresh)\n        refreshEvents();\n\n    var target = Event.findElement(event);\n    var div = target.up('div');\n    if (div && !div.hasClassName('event') && !div.hasClassName('eventInside') && !div.hasClassName('text') && !div.hasClassName('gradient')) {\n        // Target is not an event -- unselect all events.\n        listOfSelection = $(\"eventsList\");\n        deselectAll();\n        return true;\n    }\n\n    if (listOfSelection) {\n        listOfSelection.addClassName(\"_unfocused\");\n    }\n\n    changeCalendarDisplay( { \"day\": currentDay } );\n}\n\nfunction setSelectedDayDate(dayDate) {\n    if (selectedDayDate != dayDate) {\n        var day = $(\"day\" + selectedDayDate);\n        if (day)\n            day.removeClassName(\"selectedDay\");\n        var allDay = $(\"allDay\" + selectedDayDate);\n        if (allDay)\n            allDay.removeClassName(\"selectedDay\");\n\n        selectedDayDate = dayDate;\n\n        day = $(\"day\" + selectedDayDate);\n        day.addClassName(\"selectedDay\");\n        selectedDayNumber = day.readAttribute(\"day-number\");\n        allDay = $(\"allDay\" + selectedDayDate);\n        if (allDay)\n            allDay.addClassName(\"selectedDay\");\n    }\n}\n\n/* after loading a new view, to reselect the currently selected day */\nfunction restoreSelectedDay() {\n    var day = null;\n    if (selectedDayDate.length > 0)\n        day = $(\"day\" + selectedDayDate);\n    if (!day) {\n        if (selectedDayNumber > -1)\n            selectedDayDate = findDateFromDayNumber(selectedDayNumber);\n        else\n            selectedDayDate = currentDay;\n        if (selectedDayDate.length > 0)\n            day = $(\"day\" + selectedDayDate);\n    }\n    if (day) {\n        selectedDayDate = null;\n        setSelectedDayDate(day.id.substr(3));\n    }\n}\n\nfunction findDateFromDayNumber(dayNumber) {\n    var view;\n    if (currentView == \"monthview\")\n        view = $(\"monthDaysView\");\n    else\n        view = $(\"daysView\");\n    var days = view.select(\".day\");\n    return days[dayNumber].readAttribute(\"day\");\n}\n\nfunction onShowCompletedTasks(event) {\n    showCompletedTasks = (this.checked ? 1 : 0);\n\n    return refreshTasks(1);\n}\n\nfunction updateTaskStatus(event) {\n    var newStatus = (this.checked ? 1 : 0);\n    _updateTaskCompletion (this.up(\"tr\"), newStatus);\n    return false;\n}\n\nfunction updateCalendarStatus(event) {\n    var list = [];\n    var newStatus = (this.checked ? 1 : 0);\n\n    var nodes = $(\"calendarList\").childNodesWithTag(\"li\");\n    for (var i = 0; i < nodes.length; i++) {\n        var input = $(nodes[i]).childNodesWithTag(\"input\")[0];\n        if (input.checked) {\n            var folderId = nodes[i].getAttribute(\"id\");\n            var elems = folderId.split(\":\");\n            if (elems.length > 1)\n                list.push(elems[0]);\n            else\n                list.push(UserLogin);\n        }\n    }\n\n    //   if (!list.length) {\n    //      list.push(UserLogin);\n    //      nodes[0].childNodesWithTag(\"input\")[0].checked = true;\n    //   }\n\n    //   ApplicationBaseURL = (UserFolderURL + \"Groups/_custom_\"\n    // \t\t\t+ list.join(\",\") + \"/Calendar/\");\n\n    if (event) {\n        var folderID = this.parentNode.getAttribute(\"id\");\n        var urlstr = URLForFolderID(folderID);\n        if (newStatus)\n            urlstr += \"/activateFolder\";\n        else\n            urlstr += \"/deactivateFolder\";\n        //log(\"updateCalendarStatus: ajax request = \" + urlstr + \", folderID = \" + folderID);\n        triggerAjaxRequest(urlstr, calendarStatusCallback, folderID);\n    }\n    else {\n        updateCalendarsList();\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n\n    if (event) {\n        event.returnValue = true;\n    }\n}\n\nfunction calendarStatusCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            refreshEvents();\n            refreshTasks();\n            changeCalendarDisplay();\n        }\n        else {\n            var folder = $(http.callbackData);\n            var input = folder.childNodesWithTag(\"input\")[0];\n            input.checked = (!input.checked);\n        }\n    }\n    else\n        log(\"calendarStatusCallback Ajax error\");\n}\n\nfunction calendarEntryCallback(http) {\n    if (http.readyState == 4) {\n        var denied = !isHttpStatus204(http.status);\n        var entry = $(http.callbackData);\n        if (denied)\n            entry.addClassName(\"denied\");\n        else\n            entry.removeClassName(\"denied\");\n    }\n}\n\nfunction updateCalendarsList(method) {\n    var list = $(\"calendarList\").childNodesWithTag(\"li\");\n    for (var i = 0; i < list.length; i++) {\n        var folderID = list[i].getAttribute(\"id\");\n        var url = URLForFolderID(folderID) + \"/canAccessContent\";\n        triggerAjaxRequest(url, calendarEntryCallback, folderID);\n    }\n}\n\n//function validateBrowseURL(input) {\n//    var button = $(\"browseURLBtn\");\n//\n//    if (input.value.length) {\n//        if (!button.enabled)\n//            enableAnchor(button);\n//    } else if (!button.disabled)\n//        disableAnchor(button);\n//}\n\n//function browseURL(anchor, event) {\n//    if (event.button == 0) {\n//        var input = $(\"url\");\n//        var url = input.value;\n//        if (url.length)\n//            window.open(url, '_blank');\n//    }\n//\n//    return false;\n//}\n\nfunction onCalendarsMenuPrepareVisibility() {\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes();\n    if (selected.length > 0) {\n        var folderOwner = selected[0].getAttribute(\"owner\");\n\n        var lis = $(this).down(\"ul\").childElements();\n\n        /* distance: sharing = length - 1, export = length - 7 */\n        var endDists = [ 1, 7 ];\n        for (var i = 0; i < endDists.length; i++) {\n            var dist = lis.length - endDists[i];\n            var option = $(lis[dist]);\n            if (folderOwner == UserLogin || IsSuperUser)\n                option.removeClassName(\"disabled\");\n            else\n                option.addClassName(\"disabled\");\n        }\n\n        var deleteCalendarOption = $(\"deleteCalendarMenuItem\");\n        // Swith between Delete and Unsubscribe\n        if (folderOwner == UserLogin)\n            deleteCalendarOption.update(_(\"Delete Calendar\"));\n        else\n            deleteCalendarOption.update(_(\"Unsubscribe Calendar\"));\n\n        return true;\n    }\n    return false;\n}\n\nfunction onMenuCurrentViewPrepareVisibility() {\n    var options = $(this).down(\"ul\");\n    var deleteOption = options.down(\"li\", 6);\n    var copyOption = options.down(\"li\", 7);\n    var rawOption = options.down(\"li\", 8);\n    if (!selectedCalendarCell) {\n        deleteOption.addClassName(\"disabled\");\n        copyOption.addClassName(\"disabled\");\n        rawOption.addClassName(\"disabled\");\n    }\n    else {\n        deleteOption.removeClassName(\"disabled\");\n        var calendarEntry = $(\"/\" + selectedCalendarCell[0].calendar);\n        if (calendarEntry.getAttribute(\"owner\") == UserLogin)\n            copyOption.addClassName(\"disabled\");\n        else\n            copyOption.removeClassName(\"disabled\");\n\tif (selectedCalendarCell.length == 1) {\n\t    // show raw content is only allowed for single event\n            rawOption.removeClassName(\"disabled\");\n        }\n\telse\n            rawOption.addClassName(\"disabled\");\n    }\n\n    return true;\n}\n\nfunction onTasksListMenuPrepareVisibility() {\n    var options = $(this).down(\"ul\");\n    var rawOption = options.down(\"li\", 6);\n\n    var selectedTasks = $$(\"#tasksList ._selected\");\n    if (selectedTasks.length == 1)\n        rawOption.removeClassName(\"disabled\");\n    else\n        rawOption.addClassName(\"disabled\");\n\n    return true;\n}\nfunction getMenus() {\n    var menus = {};\n\n    var dateMenu = [];\n    for (var i = 0; i < 12; i++)\n        dateMenu.push(onMonthMenuItemClick);\n    menus[\"monthListMenu\"] = dateMenu;\n\n    dateMenu = [];\n    for (var i = 0; i < 11; i++)\n        dateMenu.push(onYearMenuItemClick);\n    menus[\"yearListMenu\"] = dateMenu;\n\n    menus[\"eventsListMenu\"] = new Array(onMenuNewEventClick, \"-\",\n                                        onMenuNewTaskClick,\n                                        editEvent, deleteEvent, \"-\",\n                                        onSelectAll, \"-\",\n                                        null, null);\n    menus[\"calendarsMenu\"] = new Array(onCalendarModify,\n                                       \"-\",\n                                       onCalendarNew, onCalendarRemove,\n                                       \"-\", onCalendarExport, onCalendarImport,\n                                       null, \"-\", null, \"-\", onMenuSharing);\n    menus[\"eventSearchMenu\"] = new Array(setSearchCriteria);\n\n    menus[\"tasksListMenu\"] = new Array (editEvent, newTask, \"-\",\n                                        marksTasksAsCompleted, deleteEvent, \"-\",\n\t\t\t\t\tonMenuRawTask);\n    menus[\"taskSearchMenu\"] = new Array(setSearchCriteria);\n\n    var calendarsMenu = $(\"calendarsMenu\");\n    if (calendarsMenu)\n        calendarsMenu.prepareVisibility = onCalendarsMenuPrepareVisibility;\n\n    var tasksListMenu = $(\"tasksListMenu\");\n    if (tasksListMenu)\n        tasksListMenu.prepareVisibility = onTasksListMenuPrepareVisibility;\n\n    return menus;\n}\n\nfunction newTask () {\n    return newEventFromWidget(this, 'task');\n}\n\nfunction marksTasksAsCompleted () {\n    var selectedTasks = $$(\"#tasksList ._selected\");\n\n    for (var i = 0; i < selectedTasks.length; i++) {\n        var task = selectedTasks[i];\n        _updateTaskCompletion (task, 1);\n    }\n}\n\nfunction _updateTaskCompletion (task, value) {\n    url = (ApplicationBaseURL + task.calendar\n           + \"/\" + task.cname + \"/changeStatus?status=\" + value);\n\n    triggerAjaxRequest(url, refreshTasks, null);\n\n    return false;\n}\n\nfunction onMenuRawTask(event) {\n    var selectedTasks = $$(\"#tasksList ._selected\");\n    if (selectedTasks.length != 1) {\n      return;\n    }\n\n    var url = ApplicationBaseURL + selectedTasks[0].calendar  + \"/\" + selectedTasks[0].cname + \"/raw\"\n    openGenericWindow(url);\n}\n\n\nfunction onMenuSharing(event) {\n    if ($(this).hasClassName(\"disabled\"))\n        return;\n\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes()[0];\n    /* FIXME: activation of the context menu should preferably select the entry\n       above which the event has occurred */\n    if (selected) {\n        var folderID = selected.getAttribute(\"id\");\n        var urlstr = URLForFolderID(folderID) + \"/acls\";\n\n        openAclWindow(urlstr);\n    }\n}\n\nfunction onMenuCurrentView(event) {\n    var target = getTarget(event);\n    $(\"eventDialog\").hide();\n    if (this.hasClassName('event')) {\n        // Select event cell\n        var onClick = onCalendarSelectEvent.bind(this);\n        onClick(event, true);\n        target = this;\n    }\n    popupMenu(event, 'currentViewMenu', target);\n}\n\nfunction onMenuAllDayView(event) {\n    $(\"eventDialog\").hide();\n    popupMenu(event, 'allDayViewMenu', getTarget(event));\n}\n\nfunction configureDragHandles() {\n    var handle = $(\"verticalDragHandle\");\n    if (handle) {\n        handle.addInterface(SOGoDragHandlesInterface);\n        handle.leftBlock = $(\"leftPanel\");\n        handle.rightBlock = $(\"rightPanel\");\n    }\n\n    handle = $(\"rightDragHandle\");\n    if (handle) {\n        handle.addInterface(SOGoDragHandlesInterface);\n        handle.upperBlock = $(\"schedulerTabs\");\n        handle.lowerBlock = $(\"calendarView\");\n    }\n}\n\nfunction initCalendarSelector() {\n    var selector = $(\"calendarSelector\");\n    updateCalendarStatus(); // triggers the initial events refresh\n    selector.changeNotification = updateCalendarsList;\n\n    var list = $(\"calendarList\");\n    list.on(\"mousedown\", onCalendarSelectionChange);\n    list.on(\"dblclick\", onCalendarModify);\n    list.on(\"selectstart\", listRowMouseDownHandler);\n    list.attachMenu(\"calendarsMenu\");\n\n    var items = list.childNodesWithTag(\"li\");\n    for (var i = 0; i < items.length; i++) {\n        var input = items[i].childNodesWithTag(\"input\")[0];\n        $(input).observe(\"click\", clickEventWrapper(updateCalendarStatus));\n    }\n\n    var links = $(\"calendarSelectorButtons\").childNodesWithTag(\"a\");\n    $(links[0]).observe(\"click\", clickEventWrapper(onCalendarNew));\n    $(links[1]).observe(\"click\", clickEventWrapper(onCalendarWebAdd));\n    $(links[2]).observe(\"click\", clickEventWrapper(onCalendarAdd));\n    $(links[3]).observe(\"click\", clickEventWrapper(onCalendarRemove));\n}\n\nfunction onCalendarSelectionChange(event) {\n    var target = Event.element(event);\n    if (target.tagName == 'DIV') {\n        target = target.parentNode;\n    }\n\n    onRowClick(event, target);\n}\n\nfunction onCalendarModify(event) {\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes()[0];\n    var calendarID = selected.getAttribute(\"id\");\n    var owner = selected.getAttribute(\"owner\");\n    var url = ApplicationBaseURL + calendarID + \"/properties\";\n    var windowID = sanitizeWindowName(calendarID + \" properties\");\n    var width = 410;\n    var height = 410;\n    var isWebCalendar = false;\n    if (UserSettings['Calendar']\n        && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n        var realID = owner + \":Calendar/\" + calendarID.substr (1, calendarID.length - 1);\n        if (webCalendars[realID]) {\n            isWebCalendar = true;\n        }\n    }\n    if (Prototype.Browser.IE) height += 10;\n\n    if (owner == UserLogin) {\n        height += 20;\n    }\n    if (isWebCalendar) {\n        height += 26;\n    }\n    else if (calendarID == \"/personal\") {\n        height -= 26;\n    }\n\n    var properties = window.open(url, windowID,\n                                 \"width=\"+width+\",height=\"+height+\",resizable=0\");\n    properties.focus();\n}\n\nfunction updateCalendarProperties(calendarID, calendarName, calendarColor) {\n    var idParts = calendarID.split(\":\");\n    var folderName = idParts[1].split(\"/\")[1];\n    var nodeID;\n\n    if (idParts[0] != UserLogin)\n        nodeID = \"/\" + idParts[0].asCSSIdentifier() + \"_\" + folderName;\n    else\n        nodeID = \"/\" + folderName;\n\t//   log(\"nodeID: \" + nodeID);\n    var calendarNode = $(nodeID);\n    var childNodes = calendarNode.childNodes;\n    var textNode = childNodes[childNodes.length-1];\n    if (textNode.tagName == 'DIV')\n        calendarNode.appendChild(document.createTextNode(calendarName));\n    else\n        childNodes[childNodes.length-1].nodeValue = calendarName;\n\n    appendStyleElement(nodeID, calendarColor);\n}\n\nfunction onCalendarNew(event) {\n    showPromptDialog(_(\"New Calendar...\"), _(\"Name of the Calendar\"), onCalendarNewConfirm);\n    preventDefault(event);\n}\n\nfunction onCalendarNewConfirm() {\n    createFolder(this.value, appendCalendar);\n    disposeDialog();\n}\n\nfunction onCalendarAdd(event) {\n    openUserFolderSelector(onFolderSubscribeCB, \"calendar\");\n    preventDefault(event);\n}\n\nfunction onCalendarWebAdd(event) {\n    showPromptDialog(_(\"Subscribe to a web calendar...\"), _(\"URL of the Calendar\"), onCalendarWebAddConfirm);\n}\n\nfunction onCalendarWebAddConfirm() {\n    disposeDialog();\n    var calendarUrl = this.value;\n    if (calendarUrl) {\n        var url = ApplicationBaseURL + \"/addWebCalendar\";\n        var parameters = \"url=\" + encodeURIComponent(calendarUrl);\n        triggerAjaxRequest(url, addWebCalendarCallback, calendarUrl, parameters,\n                           { \"Content-type\": \"application/x-www-form-urlencoded\" });\n    }\n}\n\nfunction addWebCalendarCallback(http) {\n    if (http.status == 200) {\n        var data = http.responseText.evalJSON(true);\n        if (!data || data[\"error\"] || !data[\"name\"] || !data[\"folderID\"]) {\n            showAlertDialog (_(\"An error occurred while importing calendar.\"));\n        }\n        else {\n            if (UserSettings['Calendar']) {\n                var webCalendars = UserSettings['Calendar']['WebCalendars'];\n                if (!webCalendars) {\n                    webCalendars = {};\n                    UserSettings['Calendar']['WebCalendars'] = webCalendars;\n                }\n                webCalendars[data[\"folderID\"]] = http.callbackData;\n            }\n\n            appendCalendar(data[\"name\"], data[\"folderID\"]);\n            reloadWebCalendar(data[\"folderID\"]);\n        }\n    }\n    else {\n        showAlertDialog (_(\"An error occurred while importing calendar.\"));\n    }\n\n    // if (data.imported) {\n    //     appendCalendar(data.displayname, \"/\" + data.name);\n    //     refreshEvents();\n    //     refreshTasks();\n    //     changeCalendarDisplay();\n    // }\n    // else if (data.status && data.status == 401) {\n    //     reauthenticateWebCalendar(data.name, data.url);\n    // }\n    // else {\n    // }\n}\n\nfunction onCalendarExport(event) {\n    var node = $(\"calendarList\").getSelectedNodes().first();\n    var folderId = node.getAttribute(\"id\");\n    var url = URLForFolderID(folderId) + \".ics/export\";\n    window.location.href = url;\n}\n\nfunction onCalendarImport(event) {\n    var list = $(\"calendarList\");\n    var node = list.getSelectedNodes().first();\n    var folderId = node.getAttribute(\"id\");\n\n    var url = ApplicationBaseURL + folderId + \"/import\";\n    $(\"uploadForm\").action = url;\n    $(\"calendarFile\").value = \"\";\n\n    var cellPosition = node.cumulativeOffset();\n    var cellDimensions = node.getDimensions();\n    var left = cellDimensions['width'] - 20;\n    var top = cellPosition[1];\n    top -= list.scrollTop;\n\n    var div = $(\"uploadDialog\");\n    var res = $(\"uploadResults\");\n    res.setStyle({ top: top + \"px\", left: left + \"px\" });\n    div.setStyle({ top: top + \"px\", left: left + \"px\" });\n    div.show();\n}\nfunction hideCalendarImport(event) {\n    $(\"uploadDialog\").hide();\n}\nfunction hideImportResults(event) {\n    $(\"uploadResults\").hide();\n}\nfunction validateUploadForm() {\n    rc = false;\n    if ($(\"calendarFile\").value.length) {\n      var btn = jQuery('#uploadSubmit');\n      jQuery('#uploadCancel').fadeOut('fast');\n      btn.addClass(\"disabled\");\n      btn.children('span').text(_('Uploading'));\n      rc = true;\n    }\n    return rc;\n}\nfunction uploadCompleted(response) {\n    jQuery('#uploadCancel').show();\n    var btn = jQuery('#uploadSubmit');\n    btn.removeClass(\"disabled\");\n    btn.children('span').text(_('Upload'));\n    var div = $(\"uploadResults\");\n\n    try {\n\tdata = response.evalJSON(true);\n\n\tif (data.imported < 0)\n            $(\"uploadResultsContent\").update(_(\"An error occurred while importing calendar.\"));\n\telse if (data.imported == 0)\n            $(\"uploadResultsContent\").update(_(\"No event was imported.\"));\n\telse {\n            $(\"uploadResultsContent\").update(_(\"A total of %{0} events were imported in the calendar.\").formatted(data.imported));\n            refreshEventsAndDisplay();\n\t}\n    } catch (e) {\n\t$(\"uploadResultsContent\").update(_(\"An error occurred while importing calendar.\"));\n    }\n\n    hideCalendarImport();\n    $(\"uploadResults\").show();\n}\n\nfunction appendCalendar(folderName, folderPath) {\n    var owner;\n\n    if (folderPath) {\n        owner = getSubscribedFolderOwner(folderPath);\n        folderPath = accessToSubscribedFolder(folderPath);\n    }\n    else\n        folderPath = \"/\" + folderName;\n\n    if (!owner)\n        owner = UserLogin;\n\n    //log (\"append name: \" + folderName + \"; path: \" + folderPath + \"; owner: \" + owner);\n\n    if ($(folderPath))\n        showAlertDialog(_(\"You have already subscribed to that folder!\"));\n    else {\n        var calendarList = $(\"calendarList\");\n        var items = calendarList.select(\"li\");\n        var li = document.createElement(\"li\");\n\n        // Add the calendar to the proper place\n        var i = getListIndexForFolder(items, owner, folderName);\n        if (i != items.length) // User is subscribed to other calendars of the same owner\n            calendarList.insertBefore(li, items[i]);\n        else\n            calendarList.appendChild(li);\n        $(li).writeAttribute(\"id\", folderPath);\n        $(li).writeAttribute(\"owner\", owner);\n\n        var checkBox = createElement(\"input\", null, \"checkBox\", { checked: 1 },\n                                     { type: \"checkbox\" }, li);\n\n        li.appendChild(document.createTextNode(\" \"));\n\n        var colorBox = document.createElement(\"div\");\n        li.appendChild(colorBox);\n        li.appendChild(document.createTextNode(folderName));\n        colorBox.appendChild(document.createTextNode(\"\\u00a0\"));\n\n        $(colorBox).addClassName(\"colorBox\");\n        $(colorBox).addClassName('calendarFolder' + folderPath.substr(1));\n\n        // Check the checkbox (required for IE)\n        li.getElementsByTagName(\"input\")[0].checked = true;\n\n        // Register event on checkbox\n        $(checkBox).on(\"click\", clickEventWrapper(updateCalendarStatus));\n\n        var url = URLForFolderID(folderPath) + \"/canAccessContent\";\n        triggerAjaxRequest(url, calendarEntryCallback, folderPath);\n\n        // Update CSS for events color\n        appendStyleElement(folderPath, \"#AAAAAA\");\n    }\n}\n\nfunction appendStyleElement(folderPath, color) {\n    if (document.styleSheets) {\n        var fgColor = getContrastingTextColor(color);\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n\n        var styles = ' .calendarFolder' + folderPath.substr(1)\n            + ' { background-color: ' + color + ' !important;' + ' color: ' + fgColor + ' !important; }'\n            + ' div.colorBox.calendarFolder' + folderPath.substr(1)\n            + ' { color: ' + color + ' !important; }';\n\n        if (styleElement.styleSheet) styleElement.styleSheet.cssText = styles; // IE\n        else styleElement.appendChild(document.createTextNode(styles));        // Mozilla + Webkit\n\n        document.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n    }\n}\n\nfunction onFolderSubscribeCB(folderData) {\n    var folder = $(folderData[\"folder\"]);\n    if (!folder) {\n        appendCalendar(folderData[\"folderName\"].unescapeHTML(), folderData[\"folder\"]);\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n}\n\nfunction onFolderUnsubscribeCB(folderId) {\n    var node = $(folderId);\n    var list = $(node.parentNode);\n    node.deselect();\n    list.removeChild(node);\n    if (removeFolderRequestCount == 0) {\n        list.down(\"li\").selectElement(); // personal calendar\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n}\n\nfunction onCalendarRemove(event) {\n    if (removeFolderRequestCount == 0) {\n        var nodes = $(\"calendarList\").getSelectedNodes();\n        for (var i = 0; i < nodes.length; i++) {\n            var owner = nodes[i].getAttribute(\"owner\");\n            var folderId = nodes[i].getAttribute(\"id\");\n            if (owner == UserLogin) {\n                if (folderId == \"/personal\") {\n                    var label = labels[\"You cannot remove nor unsubscribe from your\"\n                                       + \" personal calendar.\"];\n                    showAlertDialog(label);\n                }\n                else {\n                    deletePersonalCalendar(nodes[i]);\n                }\n            }\n            else {\n                var folderUrl = ApplicationBaseURL + folderId;\n                nodes[i].deselect();\n                unsubscribeFromFolder(folderUrl, owner,\n                                      onFolderUnsubscribeCB, folderId);\n            }\n        }\n    }\n\n    preventDefault(event);\n}\n\nfunction deletePersonalCalendar(folderElement) {\n    showConfirmDialog(_(\"Confirmation\"),\n                      _(\"Are you sure you want to delete the calendar \\\"%{0}\\\"?\").formatted(folderElement.lastChild.nodeValue.strip()),\n                      deletePersonalCalendarConfirm.bind(folderElement));\n}\n\nfunction deletePersonalCalendarConfirm() {\n    var folderId = this.getAttribute(\"id\").substr(1);\n    this.deselect();\n    this.hide();\n    removeFolderRequestCount++;\n    var url = ApplicationBaseURL + \"/\" + folderId + \"/delete\";\n    triggerAjaxRequest(url, deletePersonalCalendarCallback, this);\n    disposeDialog();\n}\n\nfunction deletePersonalCalendarCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var folderElement = http.callbackData;\n            if (folderElement) {\n                var list = folderElement.parentNode;\n                list.removeChild(folderElement);\n            }\n            removeFolderRequestCount--;\n            if (removeFolderRequestCount == 0) {\n                refreshEvents();\n                refreshTasks();\n                changeCalendarDisplay();\n            }\n        }\n    }\n    else {\n        log (\"ajax problem 5: \" + http.status);\n        var folderElement = http.callbackData;\n        folderElement.show();\n    }\n}\n\nfunction configureLists() {\n    // Move calendar view if lists are collapsed\n    if (!$(\"schedulerTabs\").visible()) {\n        $('calendarView').setStyle({ top: '0' }).show();\n    }\n\n    // TASK LIST\n    var list = $(\"tasksList\");\n    list.multiselect = true;\n    configureSortableTableHeaders(list);\n    TableKit.Resizable.init(list, {'trueResize' : true, 'keepWidth' : true});\n    list.down(\"tbody\").on(\"mousedown\", onTasksSelectionChange);\n    list.down(\"tbody\").on(\"selectstart\", listRowMouseDownHandler);\n    list.down(\"tbody\").attachMenu(\"tasksListMenu\");\n\n    var input = $(\"showHideCompletedTasks\");\n    input.observe(\"click\", onShowCompletedTasks);\n    if (showCompletedTasks)\n      input.checked = true;\n\n    // EVENT LIST\n    list = $(\"eventsList\");\n    list.multiselect = true;\n    configureSortableTableHeaders(list);\n    TableKit.Resizable.init(list, {'trueResize' : true, 'keepWidth' : true});\n    list.down(\"tbody\").on(\"mousedown\", onEventsSelectionChange);\n    list.down(\"tbody\").attachMenu(\"eventsListMenu\");\n}\n\nfunction initDateSelectorEvents() {\n    var arrow = $(\"rightArrow\");\n    arrow.observe(\"click\", onDateSelectorGotoMonth);\n    arrow = $(\"leftArrow\");\n    arrow.observe(\"click\", onDateSelectorGotoMonth);\n\n    var menuButton = $(\"monthLabel\");\n    menuButton.observe(\"click\", popupMonthMenu);\n    menuButton = $(\"yearLabel\");\n    menuButton.observe(\"click\", popupMonthMenu);\n}\n\nfunction onBodyClickHandler(event) {\n    $(\"eventDialog\").hide();\n}\n\nfunction onWindowResize(event) {\n    var handle = $(\"verticalDragHandle\");\n    if (handle)\n        handle.adjust();\n    handle = $(\"rightDragHandle\");\n    if (handle)\n        handle.adjust();\n\n    if (!$(document.body).hasClassName(\"popup\"))\n        drawNowLine();\n}\n\nfunction drawNowLine() {\n    var d = new Date();\n    var hours = d.getHours();\n    var minutes = d.getMinutes();\n\n    if (currentView == \"dayview\") {\n        var today = new Date();\n        var m = parseInt(today.getMonth()) + 1;\n        var d = today.getDate();\n        if (m < 10)\n            m = \"0\" + m;\n        if (d < 10)\n            d = \"0\" + d;\n        var day = today.getFullYear() + \"\" + m + \"\" + d;\n        var targets = $$(\"DIV#daysView DIV.days DIV.day[day=\" + day\n                         + \"] DIV.clickableHourCell\");\n    }\n    else if (currentView == \"weekview\")\n        var targets = $$(\"DIV#daysView DIV.days DIV.dayOfToday DIV.clickableHourCell\");\n\n    if (targets) {\n        var target = targets[hours];\n\n        if (target) {\n            var div = $(\"nowLineDisplay\");\n            if (!div)\n                div = new Element(\"div\", {'id': 'nowLineDisplay'});\n\n            div.style.top = parseInt((minutes * target.offsetHeight / 60) - 1) + \"px\";\n            target.insertBefore(div, target.firstChild);\n\n            setTimeout(\"drawNowLine ();\", 60000); // 1 min.\n        }\n    }\n}\n\nfunction onListCollapse(event, element) {\n    var img = element.select('img').first();\n    var tabs = $(\"schedulerTabs\");\n    var handle = $(\"rightDragHandle\");\n    var view = jQuery(\"#calendarView\");\n    var state = 'collapse';\n\n    if (tabs.visible()) {\n        img.removeClassName('collapse').addClassName('rise');\n        handle.hide();\n        view.animate({ top: '0' }, 200, function() {\n            tabs.hide();\n        });\n    }\n    else {\n        state = 'rise';\n        img.removeClassName('rise').addClassName('collapse');\n        tabs.show();\n        tabs.controller.onWindowResize();\n        view.animate({ top: handle.getStyle('top') }, 200, function() {\n            handle.show();\n        });\n    }\n\n    var url =  ApplicationBaseURL + \"saveListState\";\n    var params = \"state=\" + state;\n    triggerAjaxRequest(url, null, null, params,\n                       { \"Content-type\": \"application/x-www-form-urlencoded\" });\n\n}\n\nfunction onDocumentKeydown(event) {\n    var target = Event.element(event);\n    if (target.tagName != \"INPUT\") {\n        var keyCode = event.keyCode;\n        if (!keyCode) {\n            keyCode = event.charCode;\n            if (keyCode == \"a\".charCodeAt(0))\n                keyCode = \"A\".charCodeAt(0);\n            else if (keyCode == \"c\".charCodeAt(0))\n                keyCode = \"C\".charCodeAt(0);\n            else if (keyCode == \"v\".charCodeAt(0))\n                keyCode = \"V\".charCodeAt(0);\n        }\n        if (keyCode == Event.KEY_DELETE\n            || (keyCode == Event.KEY_BACKSPACE)) {\n            $(\"eventDialog\").hide();\n            deleteEvent();\n            event.stop();\n        }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"A\".charCodeAt(0)) {  // Ctrl-A\n            onSelectAll(event);\n            Event.stop(event);\n         }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"C\".charCodeAt(0)) {  // Ctrl-C\n            copyEventToClipboard();\n        }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"V\".charCodeAt(0)) {  // Ctrl-V\n            copyEventFromClipboard();\n        }\n    }\n}\n\nfunction saveTabState(event) {\n    var tab = $(event).memo;\n\n    var url =  ApplicationBaseURL + \"saveSelectedList\";\n    var params = \"list=\" + tab;\n    triggerAjaxRequest(url, null, null, params,\n                       { \"Content-type\": \"application/x-www-form-urlencoded\" });\n}\n\nfunction initScheduler() {\n    sorting[\"event-header\"] = \"\";\n    sorting[\"task-header\"] = \"\";\n    sorting[\"event-attribute\"] = \"start\";\n    sorting[\"task-attribute\"] = \"end\";\n    sorting[\"event-ascending\"] = true;\n    sorting[\"task-ascending\"] = true;\n\n    if (!$(document.body).hasClassName(\"popup\")) {\n        var node = $(\"filterpopup\");\n        listFilter = node.value;\n\n        var tabsContainer = $(\"schedulerTabs\");\n        var controller = new SOGoTabsController();\n        controller.attachToTabsContainer(tabsContainer);\n        tabsContainer.on(\"tabs:click\", saveTabState);\n\n        if (UserSettings['ShowCompletedTasks']) {\n            showCompletedTasks = parseInt(UserSettings['ShowCompletedTasks']);\n        }\n        else {\n            showCompletedTasks = 0;\n        }\n        initDateSelectorEvents();\n        initCalendarSelector();\n        configureSearchField();\n        configureLists();\n        $(document.body).observe(\"click\", onBodyClickHandler);\n        // Calendar import form\n        $(\"uploadCancel\").observe(\"click\", hideCalendarImport);\n        $(\"uploadOK\").observe(\"click\", hideImportResults);\n        $(\"calendarView\").on(\"click\", \"#listCollapse\", onListCollapse);\n        Event.observe(document, \"keydown\", onDocumentKeydown);\n    }\n\n    onWindowResize.defer();\n    Event.observe(window, \"resize\", onWindowResize);\n}\n\ndocument.observe(\"generic:loaded\", initScheduler);\n"], "fixing_code": ["2.1.2 (2014-01-XX)\n------------------\n\nNew features\n - it's now possible to set a default reminder for calendar components\n   using SOGoCalendarDefaultReminder\n - select multiple files to attach to a message or drag'n'drop files onto the\n   mail editor; will also now display progress of uploads\n - new popup menu to download all attachments of a mail\n - move & copy messages between different accounts\n - support for the Sieve 'body' extension (mail filter based on the body content)\n\nEnhancements\n - we now automatically convert <img src=data...> into file attachments\n   using CIDs. This prevents Outlook issues.\n - updated French and Finnish translations\n - XMLHttpRequest.js is now loaded conditionaly (< IE9)\n - format time in attendees invitation window according to the user's locale\n - improved IE11 support\n - respect signature placement when forwarding a message\n - respect Sieve server capabilities\n - encode messages in quoted-printable when content is bigger than 72 bytes\n - we now use binary encoding in memcached (#2587)\n - warn user when overbooking a resource by creating an event in its calendar (#2541)\n - converted JavaScript alerts to inline CSS dialogs in appointment editor\n - visually identify users with no freebusy information in autocompletion widget of attendees editor (#2565)\n - respect occurences of recurrent events when deleting selected events (#1950)\n - improved confirmation dialog box when deleting events and tasks\n - moved the DN cache to SOGoCache - avoiding sogod restarts after RDN operations\n\nBug fixes\n - don't load 'background' attribute (#2437)\n - fixed validation of subscribed folders (#2583)\n - fixed display of folder names in messages filter editor (#2569)\n - fixed contextual menu of the current calendar view (#2557)\n - fixed handling of the '=' character in cards/events/tasks (#2505)\n - simplify searches in the address book (#2187)\n - warn user when dnd failed because of a resource conflict (#1613)\n - respect the maximum number of bookings when viewing the freebusy information of a resource (#2560)\n - encode HTML entities when forwarding an HTML message inline in plain text composition mode (#2411)\n - encode HTML entities in JSON data returned by Calendar module (#2598)\n\n2.1.1b (2013-12-04)\n-------------------\n\nEnhancements\n - updated CKEditor to version 4.3.0 and added tab module\n\nBug fixes\n - HTML formatting is now retained when forwarding/replying to a mail using the HTML editor\n - put the text part before the HTML part when composing mail to fix a display issue with Thunderbird (#2512)\n\n2.1.1a (2013-11-22)\n-------------------\n\nBug fixes\n - fixed Sieve filters editor (#2504)\n - moved missing translation to UI/Common (#2499)\n - fixed potential crasher in OpenChange\n\n2.1.1 (2013-11-19)\n------------------\n\nNew features\n - creation and modification of mail labels\n\nEnhancements\n - the color picker is no longer a popup window\n\nBug fixes\n - fixed utf8 character handling in special folder names\n   Special folder names can now be set as UTF8 or modified UTF7 in sogo.conf\n - fixed reply-to header not being set for auxiliary IMAP accounts\n - fixed handling of broken/invalid email addresses\n\n2.1.0 (2013-11-07)\n------------------\n\nEnhancements\n - improved order of user rights in calendar module (#1431)\n - increased height of alarm editor when email alarms are enabled\n - added SMTP AUTH support for sogo-ealarms-notify\n - added support for LDAP password change against AD/Samba4\n - added Apache configuration for Apple autoconfiguration (#2248)\n - the init scripts now start 3 sogod processes by default instead of 1\n - SOGo now also sends a plain/text parts when sending HTML mails (#2217)\n - SOGo now listens on 127.0.0.1:20000 by default (instead of *:20000)\n - SOGo new uses the latest WebDAV sync response type (#1275)\n - updated CKEditor to version 4.2.2 and added the tables-related modules (#2410)\n - improved display of vEvents in messages\n\nBug fixes\n - fixed handling of an incomplete attachment filename (#2385)\n - fixed Finnish mail reply/forward templates (#2401)\n - fixed position of red line of current time (#2373)\n - fixed crontab error (#2372)\n - avoid using too many LDAP connections while looping through LDAP results\n - don't encode HTML entities in mail subject of notification (#2402)\n - fixed crash of Samba when sending an invitation (#2398)\n - fixed selection of destination calendar when saving a task or an event (#2353)\n - fixed \"display remote images\" preference for message in a popup (#2417)\n - avoid crash when handling malformed or non-ASCII HTTP credentials (#2358)\n - fixed crash in DAV free-busy lookups when using SQL addressbooks (#2418)\n - disabled verbose logging of SMTP sessions by default\n - fixed high CPU usage when there are no available child processes and added logging when such a condition occurs\n - fixed memory consumption issues when doing dav lookups with huge result set\n - fixed S/MIME verification issues with certain OpenSSL versions\n - worked around an issue with chunked encoding of CAS replies (#2408)\n - fixed OpenChange corruption issue regarding predecessors change list (#2405)\n - avoid unnecessary UTF-7 conversions (#2318)\n - improved RTF parser to fix vCards (#2354)\n - fixed definition of the COMPLETED attribute of vTODO (#2240)\n - fixed DAV:resource-id property when sharing calendars (#2399)\n - fixed reload of multiple external web calendars (#2221)\n - fixed display of PDF files sent from Thunderbird (#2270)\n - fixed TLS support for IMAP (#2386)\n - fixed creation of web calendar when added using sogo-tool (#2007)\n - avoid crash when parsing HTML tags of a message (#2434)\n - fixed handling of LDAP groups with no email address (#1328)\n - fixed encoding of messages with non-ASCII characters (#2459)\n - fixed compilation with clang 3.2 (#2235)\n - truncated long fields of quick records to avoid an SQL error (#2461)\n - fixed IMAP ACLs (#2433)\n - removed inline JavaScript when viewing HTML messages (#2468)\n\n2.0.7 (2013-07-19)\n------------------\n\nNew features\n - print gridlines of calendar in 15-minute intervals\n - allow the events/tasks lists to be collapsable\n \nEnhancements\n - bubble box of events no longer overlaps the current event\n - now pass the x-originating-ip using the IMAP ID extension (#2366)\n - updated BrazilianPortuguese, Czech, Dutch, German, Polish and Russian translations\n\nBug fixes\n - properly handle RFC2231 everywhere\n - fixed minor XSS issues \n - fixed jquery-ui not bluring the active element when clicking on a draggable\n\n2.0.6b (2013-06-27)\n------------------\n\nBug fixes\n - properly escape the foldername to avoid XSS issues\n - fixed loading of MSExchangeFreeBusySOAPResponseMap\n\n2.0.6a (2013-06-25)\n------------------\n\nBug fixes\n - documentation fixes\n - added missing file for CAS single logout\n\n2.0.6 (2013-06-21)\n------------------\n\nEnhancements\n - updated CKEditor to version 4.1.1 (#2333)\n - new failed login attemps rate-limiting options. See the new\n   SOGoMaximumFailedLoginCount, SOGoMaximumFailedLoginInterval and\n   SOGoFailedLoginBlockInterval defaults\n - new message submissions rate-limiting options. See the new\n   SOGoMaximumMessageSubmissionCount, SOGoMaximumRecipientCount,\n   SOGoMaximumSubmissionInterval and SOGoMessageSubmissionBlockInterval defaults \n - now possible to send or not event notifications on a per-event basis\n - now possible to see who created an event/task in a delegated calendar\n - multi-domain support in OpenChange (implemented using a trick)\n\nBug fixes\n - fixed decoding of the charset parameter when using single quotes (#2306)\n - fixed potential crash when sending MDN from Sent folder (#2209)\n - fixed handling of unicode separators (#2309)\n - fixed public access when SOGoTrustProxyAuthentication is used (#2237)\n - fixed access right issues with import feature (#2294)\n - fixed IMAP ACL issue when SOGoForceExternalLoginWithEmail is used (#2313)\n - fixed handling of CAS logoutRequest (#2346)\n - fixed many major OpenChange stability issues\n\n2.0.5a (2013-04-17)\n------------------\n\nBug fixes\n - fixed an issue when parsing user CN with leading or trailing spaces (#2287)\n - fixed a crash that occured when saving contacts or tasks via Outlook\n\n2.0.5 (2013-04-11)\n------------------\n\nNew features\n - new system default SOGoEncryptionKey to be used to encrypt the passwords of\n   remote Web calendars when SOGoTrustProxyAuthentication is enabled\n - activated the menu option \"Mark Folder Read\" in the Webmail (#1473)\n\nEnhancements\n - added logging of the X-Forwarded-For HTTP header (#2229)\n - now use BSON instead of GNUstep's binary format for serializing\n    Outlook related cache files\n - updated Danish, Finnish, Polish and Slovak translations\n - added Arabic translation - thanks to Anass Ahmed\n\nBug fixes\n - don't use the cache for password lookups from login page (#2169)\n - fixed issue with exceptions in repeating events\n - avoid data truncation issue in OpenChange with mysql backend\n   run sql-update-2.0.4b_to_2.0.5-mysql.sh to update existing tables\n - avoid random crashes in OpenChange due to RTF conversion\n - fixed issue when modifying/deleting exceptions of recurring events\n - fixed major cache miss issue leading to slow Outlook resynchronizations\n - fixed major memory corruption issue when Outlook was saving \"messages\"\n - fixed filtering of sql contact entries when using dynamic domains (#2269)\n - sogo.conf can now be used by all tools (#2226)\n - SOPE: fixed handling of sieve capabilities after starttls (#2132)\n - OpenChange: fixed 'stuck email' problem when sending a mail\n - OpenChange NTLMAuthHandler: avoid tightloop when samba isn't available.\n - OpenChange NTLMAuthHandler: avoid crash while parsing cookies\n - OpenChange ocsmanager: a LOT of fixes, see git log\n\n\n2.0.4b (2013-02-04)\n------------------\n\nBug fixes\n - Fixed order of precedence for options (#2166)\n   The following order is enforced - first match wins\n     1. Command line arguments\n     2. .GNUstepDefaults\n     3. /etc/sogo/{debconf,sogo}.conf\n     4. SOGoDefaults.plist\n - fixed handling of LDAP DN containing special characters (#2152, #2207)\n - fixed handling of credential files for older GNUsteps (#2216)\n - fixed display of messages with control characters (#2079, #2177)\n - fixed tooltips in contacts list (#2211)\n - fixed classification menu in component editor (#2223)\n - fixed link to ACL editor for 'any authenticated user' (#2222, #2224)\n - fixed saving preferences when mail module is disabled\n - fixed handling for long credential strings (#2212)\n\n2.0.4a (2013-01-30)\n------------------\n\nEnhancements\n - updated Czech translation\n - birthday is now properly formatted in addressbook module\n\nBug fixes\n - fixed handling of groups with spaces in their UID\n - fixed possible infinite loop in repeatable object\n - fixed until date in component editor\n - fixed saving all-day event in appointment editor\n - fixed handling of decoding contacts UID\n - fixed support of GNUstep 1.20 / Debian Squeeze\n\n2.0.4 (2013-01-25)\n------------------\n\nNew features\n - sogo-tool: new \"dump-defaults\" command to easily create /etc/sogo/sogo.conf\n\nEnhancements\n - The sogo user is now a system user.\n   For new installs, this means that 'su - sogo' won't work anymore.\n   Please use 'sudo -u sogo cmd' instead\n   If used in scripts from cronjobs, 'requiretty' must be disabled in sudoers\n - added basic support for LDAP URL in user sources\n - renamed default SOGoForceIMAPLoginWithEmail to\n   SOGoForceExternalLoginWithEmail and extended it to SMTP authentication\n - updated the timezone files to the 2012j edition and removed RRDATES\n - updated CKEditor to version 4.0.1\n - added Finnish translation - thanks to Kari Salmu\n - updated translations\n - recurrence-id of all-day events is now set as a proper date with no time\n - 'show completed tasks' is now persistent\n - fixed memory usage consumption for remote ICS subscriptions\n\nBug fixes\n - fixed usage of browser's language for the login page\n - fixed partstat of attendee in her/his calendar\n - fixed French templates encoding\n - fixed CardDAV collections for OS X\n - fixed event recurrence editor (until date)\n - fixed column display for subfolders of draft & sent\n - improved IE7 support\n - fixed drag'n'drop of events with Safari\n - fixed first day of the week in datepickers\n - fixed exceptions of recurring all-day events\n\n2.0.3 (2012-12-06)\n------------------\n\nNew features\n - support for SAML2 for single sign-on, with the help of the lasso library\n - added support for the \"AUTHENTICATE\" command and SASL mechanisms\n - added domain default SieveHostFieldName\n - added a search field for tasks\n\nEnhancements\n - search the contacts for the organization attribute\n - in HTML mode, optionally place answer after the quoted text\n - improved memory usage of \"sogo-tool restore\"\n - fixed invitations status in OSX iCal.app/Calendar.app (cleanup RSVP attribute)\n - now uses \"imap4flags\" instead of the deprecated \"imapflags\"\n - added Slovak translation - thanks to Martin Pastor\n - updated translations\n\nBug fixes\n - fixed LDIF import with categories\n - imported events now keep their UID when possible\n - fixed importation of multiple calendars\n - fixed modification date when drag'n'droping events\n - fixed missing 'from' header in Outlook\n - fixed invitations in Outlook\n - fixed JavaScript regexp for Firefox\n - fixed JavaScript syntax for IE7\n - fixed all-day event display in day/week view\n - fixed parsing of alarm\n - fixed Sieve server URL fallback\n - fixed Debian cronjob (spool directory cleanup)\n\n2.0.2a (2012-11-15)\n-------------------\n\nEnhancements\n - improved user rights editor in calendar module\n - disable alarms for newly subsribed calendars\n\nBug fixes\n - fixed typos in Spanish (Spain) translation\n - fixed display of raw source for tasks\n - fixed title display of cards with a photo\n - fixed null address in reply-to header of messages\n - fixed scrolling for calendar/addressbooks lists\n - fixed display of invitations on BlackBerry devices\n - fixed sogo-tool rename-user for MySQL database\n - fixed corrupted attachments in Webmail\n - fixed parsing of URLs that can throw an exception\n - fixed password encoding in user sources\n\n2.0.2 (2012-10-24)\n------------------\n\nNew features\n - added support for SMTP AUTH\n - sogo configuration can now be set in /etc/sogo/sogo.conf\n - added support for GNU TLS\n\nEnhancements\n - speed up of the parsing of IMAP traffic\n - minor speed up of the web interface\n - speed up the scrolling of the message list in the mail module\n - speed up the deletion of a large amounts of entries in the contacts module\n - updated the timezone files to the 2012.g edition\n - openchange backend: miscellaneous speed up of the synchronization\n   operations\n - open file descriptors are now closed when the process starts\n\nBug fixes\n - the parameters included in the url of remote calendars are now taken into\n   account\n - fixed an issue occurring with timezone definitions providing multiple entries\n - openchange backend: miscellaneous crashes during certain Outlook\n   operations, which have appeared in version 2.0.0, have been fixed\n - fixed issues occuring on OpenBSD and potentially other BSD flavours\n\n2.0.1 (2012-10-10)\n-------------------\n\nEnhancements\n - deletion of contacts is now performed in batch, which speeds up the\n   operation for large numbers of items\n - scalability enhancements in the OpenChange backend that enables the first\n   synchronization of mailboxes in a more reasonable time and using less\n   memory\n - the task list is now sortable \n\nBug Fixes\n - improved support of IE 9\n\n2.0.0 (2012-09-27)\n-------------------\nNew Features\n - Microsoft Outlook compatibility layer\n\nEnhancements\n - updated translations\n - calendars list and mini-calendar are now always visible\n - tasks list has moved to a table in a tabs view along the events list\n - rows in tree view are now 4 pixels taller\n - node selection in trees now highlights entire row\n - new inline date picker\n - improved IE8/9 support\n - added support for standard/daylight timezone definition with end date\n - no longer possible to send a message multilpe times\n - mail editor title now reflects the current message subject\n - default language is selected on login page\n - mail notifications now include the calendar name\n\nBug Fixes\n - fixed translation of invitation replies\n - fixed vacation message encoding\n - fixed display of events of no duration\n - fixed error when copying/moving large set of contacts\n - fixed drag'n'drop of all-day events\n\n1.3.18a (2012-09-04)\n-------------------\nBug Fixes\n - fixed display of weekly events with no day mask\n - fixed parsing of mail headers\n - fixed support for OS X 10.8 (Mountain Lion)\n\n1.3.18 (2012-08-28)\n-------------------\nEnhancements\n - updated Catalan, Dutch, German, Hungarian, Russian, Spanish (Argentina), and\n   Spanish (Spain) translations\n - mail filters (Sieve) are no longer conditional to each other (all filters are\n   executed, no matter if a previous condition matches)\n - improved tasks list display\n - RPM packages now treat logrotate file as a config file\n - completed the transition from text/plain message templates to HTML\n - new packages for Debian 7.0 (Wheezy)\n\nBug Fixes\n - fixed passwords that would be prefixed with '{none}' when not using a\n   password algorithm\n - fixed handling of duplicated contacts in contact lists\n - fixed handling of exception dates with timezones in recurrent events\n - fixed validation of the interval in daily recurrent events with a day mask\n   covering multiple days\n - fixed name quoting when sending invitations\n\n1.3.17 (2012-07-26)\n-------------------\nNew Features\n - new contextual menu to view the raw content of events, tasks and contacts\n - send and/or receive email notifications when a calendar is modified (new\n   domain defaults SOGoNotifyOnPersonalModifications and\n   SOGoNotifyOnExternalModifications)\n - added the SOGoSearchMinimumWordLength domain default which controls the\n   minimal length required before triggering server-side search operations for\n   attendee completion, contact searches, etc. The default value is 2, which\n   means search operations are trigged once the 3rd character is typed.\n\nEnhancements\n - updated BrazilianPortuguese, Czech, Dutch, French, German, Italian,\n   Spanish (Argentina), Spanish (Spain) translations\n - all addresses from a contact are displayed in the Web interface (no longer\n   limited to one additional address)\n - improved Sieve script: vacation message is now sent after evaluating the\n   mail filters\n - updated CKEditor to version 3.6.4\n\nBug Fixes\n - fixed a crash when multiple mail headers of the same type were encountered\n - fixed logrotate script for Debian\n - fixed linking of libcurl on Ubuntu 12.04\n - fixed parsing of timezones when importing .ics files\n - fixed resource reservation for recurring events\n - fixed display of text attachments in messages\n - fixed contextual menu on newly created address books\n - fixed missing sender in mail notifications to removed attendees\n - improved invitations handling in iCal\n\n1.3.16 (2012-06-07)\n-------------------\nEnhancements\n - new password schemes for SQL authentication (crypt-md5, ssha (including\n   256/512 variants), cram-md5, smd5, crypt, crypt-md5)\n - new unique names for static resources to avoid browser caching when\n   updating SOGo\n - it's no longer possible to click the \"Upload\" button multiple times\n - allow delivery of mail with no subject, but alert the user\n - updated Dutch, German, French translations\n\nBug Fixes\n - fixed compilation under GNU/kFreeBSD\n - fixed compilation for arm architecture\n - fixed exceptions under 64bit GNUstep 1.24\n - fixed LDAP group expansion\n - fixed exception when reading ACL of a deleted mailbox\n - fixed exception when composing a mail while the database server is down\n - fixed handling of all-day repeating events with exception dates\n - fixed Sieve filter editor when matching all messages\n - fixed creation of URLs (A-tag) in messages\n\n1.3.15 (2012-05-15)\n-------------------\nNew Features\n - sources address books are now exposed in Apple and iOS AddressBook app\n   using the \"directory gateway\" extension of CardDAV\n - sogo-tool: new \"expire-sessions\" command\n - the all-day events container is now resized progressively\n - added handling of \"BYSETPOS\" for \"BYDAY\" sets in monthly recurrence\n   calculator\n - new domain default (SOGoMailCustomFromEnabled) to allow users to change\n   their \"from\" and \"reply-to\" headers \n - access to external calendar subscriptions (.ics) with authentication\n - new domain default (SOGoHideSystemEMail) to hide or not the system\n   email. This is currently limited to CalDAV operations\n\nEnhancements\n - updated Spanish (Argentina), German, Dutch translations\n - updated CKEditor to version 3.6.3\n - automatically add/remove attendees to recurrence exceptions when they are\n   being added to the master event\n - replaced the Scriptaculous Javascript framework by jQuery to improve the\n   drag'n'drop experience\n - updated timezone definition files\n\nBug Fixes\n - fixed wrong date validation in preferences module affecting French users\n - fixed bugs in weekly recurrence calculator\n - when saving a draft, fixed content-transfer-encoding to properly handle\n   8bit data\n - escaped single-quote in HTML view of contacts\n - fixed support of recurrent events with Apple iCal\n - fixed overbooking handling of resources with recurrent events\n - fixed auto-accept of resources when added later to an event\n\n1.3.14 (2012-03-23)\n-------------------\nEnhancements\n - when replying or inline-forwarding a message, we now prefer the HTML part\n   over the text part when composing HTML messages\n - when emptying the trash, we now unsubscribe from folders within the trash\n - added CalDAV autocompletion support for iPad (iOS 5.0.x)\n - improved notifications support for Apple iCal\n - updated Czech translation\n - updated Russian translation\n\nBug Fixes\n - fixed name of backup script in cronjob template\n - fixed crash caused by contacts with multiple mail values\n - fixed signal handlers to avoid possible hanging issues\n - fixed the \"user-preferences\" command of sogo-tool\n\n1.3.13 (2012-03-16)\n-------------------\nNew Features\n - email notifications now includes a new x-sogo-message-type mail header\n - added the \"IMAPHostnameFieldName\" parameter in SQL source to\n   specify a different IMAP hostname for each user (was already possible for\n   LDAP sources)\n - default event & task classification can now be set from the preferences window\n - contacts from LDAP sources can now be modified by privileged owners (see\n   the \"modifiers\" parameter)\n\nEnhancements\n - bundled a shell script to perform and manage backups using sogo-tool\n - increased the delay before starting drag and drop in Mail and Contacts module\n  to improve the user experience with cheap mouses\n - improved contact card layout when it includes a photo\n - updated German translation\n - updated Spanish (Spain) translation\n - updated Spanish (Argentina) translation\n - updated Ukrainian translation\n - updated Hungarian translation\n - updated Dutch translation\n\nBug Fixes\n - fixed escaping issue with PostgreSQL 8.1\n - fixed resizing issue when editing an HTML message\n - fixed Spanish (Argentina) templates for mail reply and forward\n - we no longer show public address books (from SOGoUserSources) on iOS 5.0.1\n - improved support for IE\n\n1.3.12c (2012-02-15)\n-------------------\n\nBug Fixes\n - fixed a possible crash when using a SQL source\n\n1.3.12b (2012-02-14)\n-------------------\n\nBug Fixes\n - we now properly escape strings via the database adapator methods when\n   saving users settings\n - fixed a crash when exporting a vCard without specifying a UID\n - fixed the contextual menu on newly created contacts and lists\n\n1.3.12a (2012-02-13)\n-------------------\n\nBug Fixes\n - the plus sign (+) is now properly escaped in JavaScript (fixes issue when\n   loading the mailboxes list)\n - added missing migration script in Debian/Ubuntu packages\n\n1.3.12 (2012-02-13)\n-------------------\nNew Features\n - show end time in bubble box of events\n - we now check for new mails in folders for which sieve rules are defined to\n   file messages into\n - new parameter DomainFieldName for SQL sources to dynamically determine the \n   domain of the user\n\nEnhancements\n - updated Ukrainian translation\n - updated Russian translation\n - updated Brazilian (Portuguese) translation\n - updated Italian translation\n - updated Spanish (Spain) translation\n - updated German translation\n - updated Catalan translation\n - updated Norwegian (Bokmal) translation\n - now possible to use memcached over a UNIX socket\n - increase size of content columns\n - improved import of .ics files\n - new cronjob template with commented out entries\n - LDAP passwords can now be encrypted with the specified algorithm\n - improved parsing of addresses when composing mail\n\nBug Fixes\n - fixed resizing issue of mail editor\n - alarms for tasks now depend on the start date and instead of the due date\n - increased the content column size in database tables to permit syncs of\n   cards with big photos in them\n - fixed intended behavior of WOSendMail\n - fixed selection issue with Firefox when editing the content of a textarea\n - fixed bug with daily recurrence calculator that would affect conflict detection\n - fixed issue with Apple Address Book 6.1 (1083) (bundled with MacOS X 10.7.3)\n - removed double line breaks in HTML mail and fixed empty tags in general\n\n1.3.11 (2011-12-12)\n-------------------\nNew Features\n - new experimental feature to force popup windows to appear in an iframe -- this mode\n   can be forced by setting the cookie \"SOGoWindowMode\" to \"single\"\n\nEnhancements\n - contacts from the email editor now appear in a pane, like in Thunderbird\n - improved display of contacts in Address Book module\n - \"remember login\" cookie now expires after one month\n - added DanishDenmark translation - thanks to Altibox\n - updated German translation\n - updated SpanishArgentina translation\n - updated SpanishSpain translation\n - updated Russian translation\n\nBug Fixes\n - fixed encoding of headers in sogo-ealarm-notify\n - fixed confirmation dialog box when deleting too many events\n - fixed issue when saving associating a category to an event/task\n - fixed time shift regression in Calendar module\n - activated \"standard conforming strings\" in the PosgreSQL adapter to fixed errors with backslashes\n - fixed a bug when GCSFolderDebugEnabled or GCSFolderManagerDebugEnabled were enabled\n\n1.3.10 (2011-11-30)\n-------------------\nNew Features\n - new migration script for SquirrelMail (address books)\n - users can now set an end date to their vacation message (sysadmin must \n   configure sogo-tool)\n\nEnhancements\n - splitted Norwegian translation into NorwegianBokmal and NorwegianNynorsk\n - splitted Spanish translation into SpanishSpain and SpanishArgentina\n - updated timezone files\n - updated French translation\n\nBug Fixes\n - added missing Icelandic wod files\n - fixed crash when the Sieve authentication failed\n - fixed bug with iOS devices and UIDs containing the @ symbol\n - fixed handling of commas in multi-values fields of versit strings\n - fixed support of UTF-8 characters in LDAP searches\n - added initial fixes for iCal 5 (Mac OS X 10.7)\n - Address Book 6.1 now shows properly the personal address book\n - fixed vcomponent updates for MySQL\n - fixed clang/llvm and libobjc2 build\n\n1.3.9 (2011-10-28)\n-------------------\nNew Features\n - new user defaults SOGoDefaultCalendar to specify which calendar is used when\n   creating an event or a task (selected, personal, first enabled)\n - new user defaults SOGoBusyOffHours to specify if off-hours should be\n   automatically added to the free-busy information\n - new indicator in the link banner when a vacation message (auto-reply) is active\n - new snooze function for events alarms in Web interface\n - new \"Remember login\" checkbox on the login page\n - authentication with SQL sources can now be performed on any database column\n   using the new LoginFieldNames parameter\n\nEnhancements\n - added support for the CalDAV move operation\n - phone numbers in the contacts web module are now links (tel:)\n - revamp of the modules link banner (15-pixel taller)\n - updated CKEditor to version 3.6.2\n - updated unread and flagged icons in Webmail module\n - new dependency on GNUstep 1.23\n\nBug Fixes\n - fixed support for Apple iOS 5\n - fixed handling of untagged IMAP responses\n - fixed handling of commas in email addresses when composing a message\n - fixed creation of clickable links for URLs surrounded by square brackets\n - fixed behaviour of combo box for contacts categories\n - fixed Swedish translation classes\n - fixed bug when setting no ACL on a calendar\n\n1.3.8b (2011-07-26)\n-------------------\nBug Fixes\n - fixed a bug with multi-domain configurations that would cause the first\n   authentication to fail\n\n1.3.8a (2011-07-19)\n-------------------\nNew Features\n - new system setting SOGoEnableDomainBasedUID to enable user identification\n     by domain\n\nBug Fixes\n - fixed a buffer overflow in SOPE (mainly affecting OpenBSD)\n\n1.3.8 (2011-07-14)\n-------------------\nNew Features\n - initial support for threaded-view in the webmail interface\n - sogo-tool: new \"rename-user\" command that automatically updates all the\n   references in the database after modifying a user id\n - sogo-tool: new \"user-preferences {get,set,unset} command to manipulate\n   user's defaults/settings.\n - groups support for IMAP ACLs\n - now possible to define multiple forwarding addresses\n - now possible to define to-the-minute events/tasks\n - the domain can be selected from the login page when using multiple domains\n   (SOGoLoginDomains)\n - sources from one domain can be accessed from another domain when using\n   multiple domains (SOGoDomainsVisibility)\n- added Icelandic translation - thanks to Anna Jonna Armannsdottir\n\nEnhancements\n - improved list selection and contextual menu behavior in all web modules\n - the quota status bar is now updated more frequently in the webmail module\n - automatically create new cards when populating a list of contacts with unknown entries\n - added fade effect when displaying and hiding dialog boxes in Web interface\n - updated CKEditor to version 3.6.1\n - updated Russian translation\n\nBug Fixes\n - submenus in contextual menus splitted in multiple lists are now displayed correctly\n - fixed display of cards/lists icons in public address books\n - no longer accept an empty string when renaming a calendar\n - fixed display of daily events that cover two days\n - fixed time shift issue when editing an event title on iOS\n - fixed bug when using indirect LDAP binds and bindAsCurrentUser\n - fixed bugs when converting an event to an all-day one\n - many small fixes related to CalDAV scheduling\n - many OpenBSD-related fixes\n \n1.3.7 (2011-05-03)\n-------------------\nNew Features\n - IMAP namespaces are now translated and the full name of the\n   mailbox owner is extracted under \"Other Users\" \n - added the \"authenticationFilter\" parameter for SQL-based\n   sources to limit who can authenticate to a local SOGo instance\n - added the \"IMAPLoginFieldName\" parameter in authentication sources to\n   specify a different value for IMAP authentication\n - added support for resources like projectors, conference rooms\n   and more which allows SOGo to avoid double-booking of them\n   and also allows SOGo to automatically accept invitations for them\n\nEnhancements\n - the personal calendar in iCal is now placed at the very top\n - the recipients selection works more like Thunderbird when\n   composing emails\n - improved the documentation regarding groups in LDAP\n - minor improvements to the webmail module\n - minor improvements to the contacts web module\n\nBug Fixes\n - selection problems with Chrome under OS X in the webmail interface\n - crash when some events had no end date\n\n\n1.3.6 (2011-04-08)\n-------------------\nNew Features\n- added Norwegian translation - thanks to Altibox\n\nEnhancements\n- updated Italian translation\n- updated Ukranian translation\n- updated Spanish translation\n- \"check while typing\" is no longer enabled by default in HTML editor\n- show unread messages count in window title in the webmail interface\n- updated CKEditor to version 3.5.2\n- contact lists now have their own icons in the contacts web module\n- added the ability to invite people and to answer invitations from the iOS\n  Calendar\n- alarms are no longer exported to DAV clients for calendars where the alarms\n  are configured to be disabled\n- IMAP connection pooling is disabled by default to avoid flooding the IMAP\n  servers in multi-process environments (NGImap4DisableIMAP4Pooling now set\n  to \"YES\" by default)\n- sogo-tool: the remove-doubles command now makes use of the card complete\n  names\n- sope-appserver: added the ability to configure the minutes timeout per\n  request after which child processes are killed, via\n   WOWatchDogRequestTimeout (default: 10)\n\nBug Fixes\n- restored the automatic expunge of IMAP folders\n- various mutli-domain fixes\n- various timezone fixes\n- fixed various issues occurring with non-ascii strings received from DAV\n  clients\n- sogo-tool: now works in multi-domain environments\n- sogo-tool: now retrieves list of users from the folder info table\n- sogo-tool: the remove-doubles command is now compatible with the\n  synchronization mechanisms\n- sope-mime: fixed some parsing problems occurring with dbmail\n- sope-mime: fixed the fetching of mail body parts when other untagged\n  responses are received\n- sope-appserver: fixed a bug leaving child processes performing the watchdog\n  safety belt cleanup\n\n1.3.5 (2011-01-25)\n-------------------\nNew Features\n- implemented secured sessions\n- added SHA1 password hashing in SQL sources\n- mail aliases columns can be specified for SQL sources through the configuration parameter MailFieldNames\n\nEnhancements\n- updated CKEditor to version 3.4.3\n- removed the Reply-To header in sent messages\n- the event timezone is now considered when computing an event recurrence rule\n- improved printing of a message with multple recipients\n- the new parameter SearchFieldNames allows to specify which LDAP fields to query when filtering contacts\n\nBug Fixes\n- restored current time shown as a red line in calendar module\n- logout button no longer appears when SOGoCASLogoutEnabled is set to NO\n- fixed error when deleting freshly created addressbooks\n- the mail column in SQL sources is not longer ignored\n- fixed wrapping of long lines in messages with non-ASCII characters\n- fixed a bug that would prevent alarms to be triggered when non-repetitive\n\n1.3.4 (2010-11-17)\n-------------------\n- updated CKEditor to version 3.4.2\n- added event details in invitation email\n- fixed a bug that would prevent web calendars from being considered as such\n  under certain circumstances\n- when relevant, the \"X-Forward\" is added to mail headers with the client's\n  originating IP\n- added the ability to add categories to contacts as well as to configure the\n  list of contact categories in the preferences\n- improved performance of live-loading of messages in the webmail interface\n- fixed a bug that would not identify which calendars must be excluded from the\n  freebusy information\n- increased the contrast ratio of input/select/textarea fields\n\n1.3.3 (2010-10-19)\n-------------------\n- added Catalan translation, thanks to Hector Rulot\n- fixed German translation\n- fixed Polish translation\n- fixed Italian translation\n- enhanced default Apache config files\n- improved groups support by caching results\n- fixed base64 decoding issues in SOPE\n- updated the Polish, Italian and Ukrainian translations\n- added the capability of renaming subscribed address books\n- acls are now cached in memcached and added a major performance improvement\n  when listing calendar / contact folders\n- fixed many small issues pertaining to DST switches\n- auto complete of attendees caused an error if entered to fast\n- ctrl + a (select all) was not working properly in the Calendar UI on Firefox\n- calendar sync tag names and other metadata were not released when a calendar\n  was deleted\n- in the Contacts UI, clicking on the \"write\" toolbar button did not cause a\n  message to be displayed when no contact were selected\n- added the ability to rename a subscribed folder in the Contacts UI\n- card and event fields can now contain versit separators (\";\" and \",\")\n- fixed handling of unsigned int fields with the MySQL adaptor\n- improved the speed of certain IMAP operations, in particular for GMail\n  accounts\n- prevent excessing login failures with IMAP accounts\n- fixed spurious creation of header fields due to an bug of auto-completion in\n  the mail composition window\n- fixed a wrong redirect when clicking \"reply\" or \"forward\" while no mail were\n  selected\n- added caching of ACLs locally and in memcached\n\n1.3.2 (2010-09-21)\n-------------------\n- fixed various issues with some types of email address fields\n- added support for Ctrl-A (select all) in all web modules\n- added support for Ctrl-C/Ctrl-V (copy/paste) in the calendar web module\n- now builds properly with gnustep-make >= 2.2 and gnustep-base >= 1.20\n- added return receipts support in the webmail interface\n- added CardDAV support (Apple AddressBook and iPhone)\n- added support for multiple, external IMAP accounts\n- added SSL/TLS support for IMAP accounts (system and external)\n- improved and standardized alerts in all web modules\n- added differentiation of public, private and confidential events\n- added display of unread messages count for all mailboxes\n- added support for email event reminders\n\n1.3.1 (2010-08-19)\n-------------------\n- added migration scripts for Horde (email signatures and address books)\n- added migration script for Oracle Calendar (events, tasks and access rights)\n- added Polish translation\n- added crypt support to SQL sources\n- updated Ukrainian translation\n- added the caldav-auto-schedule capability \n- improved support for IE8\n\n1.3.0 (2010-07-21)\n-------------------\n- added support for the \"tentative\" status in the invitation responses\n- inviting a group of contacts is now possible, where each contact will be\n  extracted when the group is resolved\n- added support for modifying the role of the meeting participants\n- attendees having an \"RSVP\" set to \"FALSE\" or empty will no longer need/be\n  able to respond to invitations\n- added the ability to specify which calendar is taken into account when\n  retrieving a user's freebusy\n- added the ability to publish resources to unauthenticated (anonymous) users,\n  via the \"/SOGo/dav/public\" url\n- we now provide ICS and XML version of a user's personal calendars when\n  accessed from his own \"Calendar\" base collection\n- events are now displayed with the colored stripe representing their\n  category, if one is defined in the preferences\n- fixed display of all-day events in a monthly view where the timezone differs\n  from the current one\n- the event location is now displayed in the calendar view when defined\n  properly\n- added a caching mechanism for freebusy requests, in order to accelerate the\n  display\n- added the ability to specify a time range when requesting a time slot\n  suggestion\n- added live-loading support in the webmail interface with caching support\n- updated CKEditor and improved its integration with the current user\n  language for automatic spell checking support\n- added support for displaying photos from contacts\n- added a Ukrainian translation\n- updated the Czech translation\n\n1.2.2 (2010-05-04)\n-------------------\n- subscribers can now rename folders that do not belong to them in their own environment\n- added support for LDAP password policies\n- added support for custom Sieve filters\n- fixed timezone issues occurring specifically in the southern hemisphere\n- updated ckeditor to version 3.2\n- tabs: enabled the scrolling when overflowing\n- updated Czech translation, thanks to Milos Wimmer\n- updated German translation, tnanks to Alexander Greiner-Baer\n- removed remaining .wo templates, thereby easing the effort for future translations\n- fixed regressions with Courier IMAP and Dovecot\n- added support for BYDAY with multiple values and negative positions\n- added support for BYMONTHDAY with multiple values and negative positions\n- added support for BYMONTH with multiple values\n- added ability to delete events from a keypress\n- added the \"remove\" command to \"sogo-tool\", in order to remove user data and settings\n- added the ability to export address books in LDIF format from the web interface\n- improved the webmail security by banning a few sensitive tags and handling\n  \"object\" elements\n\n1.2.1 (2010-02-19)\n-------------------\n- added CAS authentication support\n- improved display of message size in webmail\n- improved security of login cookie by specifying a path\n- added drag and drop to the web calendar interface\n- calendar: fixed CSS oddities and harmonized appearance of event cells in all\n  supported browsers\n- added many IMAP fixes for Courier and Dovecot\n- many small bug fixes and other small enhancements\n\n1.2.0 (2010-01-25)\n-------------------\n- improved handling of popup windows when closing the parent window\n- major refresh of CSS\n- added handling of preforked processes by SOPE/SOGo (a load balancer is\n  therefore no longer needed)\n- added Swedish translation, thanks to Altrusoft\n- added multi-domain support\n- refactored the handling of user defaults to enable fallback on default\n  values more easily\n- added sensible default configuration values\n- updated ckeditor to version 3.1\n- added support for iCal 4 delegation\n- added support for letting the user choose which calendars should be shared\n  with iCal delegation\n- added the ability for users to subscribe other users to their resources from\n  the ACL dialog\n- added fixes for bugs in GNUstep 1.19.3 (NSURL)\n\n1.1.0 (2009-10-28)\n-------------------\n- added backup/restore tools for all user's data (calendars, address books, preferences, etc.)\n- added Web administrative interface (right now, only for ACLs)\n- added the \"Starred\" column in the webmail module to match Thunderbird's behavior\n- improved the calendar properties dialog to be able to enable/disabled calendars for synchronization\n- the default module can now be set on a per-user basis\n- a context menu is now available for tasks\n- added the capability of creating and managing lists of contacts (same as in Thunderbird)\n- added support for short date format in the calendar views\n- added support for iCal delegation (iCal 3)\n- added preliminary support for iCal 4\n- rewrote dTree.js to include major optimizations\n- added WebAuth support\n- added support for remote ICS subscriptions\n- added support for ICS and vCard/LDIF import\n- added support for event delegation (resend an invitation to someone else)\n- added initial support for checking and displaying S/MIME signed messages\n- added support SQL-based authentication sources and address books\n- added support for Sieve filters (Vacation and Forward)\n\n1.0.4 (2009-08-12)\n-------------------\n- added ability to create and modify event categories in the preferences\n- added contextual menu in web calendar views\n- added \"Reload\" button to refresh the current view in the calendar module\n- fixed freebusy support for Apple iCal\n- added support for the calendar application of the iPhone OS v3\n- added the possibility to disable alarms or tasks from Web calendars\n- added support for printing cards\n- added a default title when creating a new task or event\n- the completion checkbox of read-only tasks is now disabled\n- the event/task summary dialog is now similar to Lightning\n- added the current time as a line in the calendar module\n- added the necessary files to build Debian packages\n- added functional tests for DAV operations and fixed some issues related to\n  permissions\n- added Hungarian translation, thanks to S\u00e1ndor Kuti\n\n1.0.3 (2009-07-14)\n-------------------\n- improved search behavior of users folders (UIxContactsUserFolders)\n- the editor window in the web interface now appears directly when editing an exception occurence of a repeating event (no more dialog window, as in Lightning)\n- implemented the webdav sync spec from Cyrus Daboo, in order to reduce useless payload on databases\n- greatly reduced the number of SQL requests performed in many situations\n- added HTML composition in the web mail module\n- added drag and drop in the addressbook and mail modules\n- improved the attendees modification dialog by implementing slots management and zooming\n- added the capability to display the size of messages in the mail module\n- added the capability of limiting the number of returned events from DAV requests\n- added support for Cyrus Daboo's Webdav sync draft spec in the calendar and addressbook collections\n- added unicode support in the IMAP folder names\n- fixed some issues with the conversion of folder names in modified UTF-7\n- component editor in web interface stores the document URL in the ATTACH property of the component, like in Lightning\n- added Czech translation, thanks to \u0160imon Halam\u00e1sek\n- added Brazilian Portuguese translation, thanks to Alexandre Marcilio\n\n1.0.2 (2009-06-05)\n-------------------\n- basic alarm implementation for the web interface\n- added Welsh translation, thanks to Iona Bailey\n- added Russian translation, thanks to Alex Kabakaev\n- added support for Oracle RAC\n- added \"scope\" parameter to LDAP sources\n- now possible to use SSL (or TLS) for LDAP sources\n- added groups support in attendees and in ACLs\n- added support for user-based IMAP hostname\n- added support for IMAP subscriptions in web interface\n- added compatibility mode meta tag for IE8\n- added support for next/previous slot buttons in attendees window of\n   calendar module\n- user's status for events in the web interface now appears like in Lightning\n  (\"needs-action\" events are surrounded by a dashed line, \"declined\" events\n  are lighter)\n- improvements to the underlying SOGo cache infrastructure\n- improved JavaScript for selection and deselection in HTML tables and lists\n- improved the handling of user permissions in CalDAV and WebDAV queries\n  pertaining to accessing and deleting elements\n- fixed bug with LDAP-based address books and the entries references (ID vs\n  UID)\n- fixed week view alignment problem in IE7\n- fixed LDAP and SQL injection bugs\n- fixed many bugs related to the encoding and decoding of IMAP folder names\n\n1.0.1 (2009-04-07)\n-------------------\n- now possbile to navigate using keyboard keys in the address book and mail\n  modules\n- the favicon can now be specified using the SOGoFaviconRelativeURL preference\n- we now support LDAP encryption for binding and for contact lookups\n- we now support LDAP scopes for various search operations\n- when the status of an attendee changes, the event of an organizer is now\n  updated correctly if it doesn't reside in the personal folder\n- formatting improvements in the email invitation templates\n- Dovecot IMAP fixes and speed enhancements \n- code cleanups to remove most compiler warnings\n- various database fixes (Oracle, connection pools, unavailability, etc.)\n- init scripts improvements\n\n1.0.0 (2009-03-17)\n-------------------\n- when double-clicking in the all-day zone (day & week views), the \"All Day\n  event\" checkbox is now automatically checked\n- replaced the JavaScript FastInit class by the dom:loaded event of Prototype\n  JS\n- also updated Prototype JS to fix issues with IE7\n- improvements to the underlying SOGo cache infrastructure\n- many improvements to DST handling\n- better compatibility with nginx\n- new SOGo login screen\n- added MySQL support\n\n1.0 rc9 (2009-01-30)\n-------------------\n- added quota indicator in web mail module\n- improved drag handles behavior\n- added support for LDAP-based configuration\n- improved init script when killing proccesses\n- improved behavior of recurrent events with attendees\n- improved the ACL editor of the calendar web module\n- fixed handling of timezones in daily and weekly events\n\n1.0 rc8 (2008-08-26)\n-------------------\n- fixed a bug that would prevent deleted event and tasks from being removed\n  from the events and tasks list\n- fixed a bug where the search of contacts would be done in\n  authentication-only LDAP repositories\n- added the ability to transfer an event from one calendar to another\n- fixed a bug where deleting a contact would leave it listed in the contact\n  list until the next refresh\n- fixed a bug where events shared among different attendees would no longer be\n  updated automatically\n- changed the look of the Calendar module to match the look of Lightning 0.9\n- the event details appear when the user clicks on it\n- enable module constraints to be specified as patterns\n- inhibit internal links and css/javascript content from html files embedded\n  as attachments to mails\n- updated all icons to use those from Thunderbird 2 and Lightning 0.9\n- fixed a bug where the cached credentials wouldn't be expired using\n  SOGoLDAPUserManagerCleanupInterval\n- fixed a bug where mail headers wouldn't be decoded correctly\n- the copy/move menu items are correctly updated when IMAP folders are added,\n  removed or renamed\n- fixed a bug where the ctag of a calendar would not take the deleted events\n  into account, and another one where the value would always take the one of the\n  first calendar queries during the process lifetime.\n\n1.0 rc7 (2008-07-29)\n-------------------\n- work around the situation where Courier IMAP would refuse to rename the\n  current mailbox or move it into the trash\n- fixed tab index in mail composition window\n- fixed default privacy selection for new events\n- fixed a bug where concurrent versions of SOGo would create the user's\n  personal folders table twice\n- added address completion in the web mail editor\n- implemented support for CalDAV methods which were missing for supporting\n  iCal 3\n- added support to write to multiple contacts from the Address Book module\n- added support to move and copy one or many contacts to another address book\n  in the Address Book module\n- added icons to folders in Address Book module\n- fixed various bugs occuring with Safari 3.1\n- fixed various bugs occuring with Firefox 3\n- fixed bug where selecting the current day cell would not select the header\n  day cell and vice-versa in the daily and weekly views\n- the events are now computed in the server code again, in order to speedup\n  the drawing of events as well as to fix the bug where events would be\n  shifted back or forth of one day, depending on how their start time would be\n  compared to UTC time\n- implemented the handling of exceptional occurences of recurrent events\n- all the calendar preferences are now taken into account\n- the user defaults variable \"SOGoAuthentificationMethod\" has been renamed to\n  \"SOGoAuthenticationMethod\"\n- fixed a bug where the search of users would be done in addressbook-only LDAP\n  repositories\n\n1.0 rc6 (2008-05-20)\n-------------------\n- retrieving the freebusy DAV object was causing SOGo to crash\n- converted to use the gnustep-make 2 build framework\n- added custom DAV methods for managing user permissions from the SOGo\n  Integrator\n- pressing enter in the contact edition dialog will perform the\n  creation/update operation\n- implemented more of the CalDAV specification for compatibility with\n  Lightning 0.8\n- added Italian translation, thanks to Marco Lertora and Sauro Saltini\n- added initial logic for splitting overlapping events\n- improved restoration of drag handles state\n- improved contextual menu handling of Address Book module\n- fixed time/date control widget of attendees editor\n- fixed various bugs occuring with Safari 3.1\n- monthly events would not be returned properly\n- bi-weekly events would appear every week instead\n- weekly events with specified days of week would not appear on the correct\n  days\n- started supporting Lightning 0.8, improved general implementation of the\n  CalDAV protocol\n- added support for calendar colors, both in the web and DAV interfaces\n- refactored and fixed the implementation of DAV acl, with partial support for\n  CalDAV Scheduling extensions\n- removed the limitation that prevented the user of underscore characters in\n  usernames\n- added Spanish translation, thanks to Ernesto Revilla\n- added Dutch translation, thanks to Wilco Baan Hofman\n- applied a patch from Wilco Baan Hofman to let SOGo works correctly through a\n  Squid proxy\n\n1.0 rc5 (2008-02-08)\n-------------------\n- improved validation in the custom recurrence window\n- improved resiliance when parsing buggy recurrence rules\n- added the ability to authenticate users and to identify their resources with\n  an LDAP field other than the username\n- the monthly view would not switch to the next or previous month if the\n  current day of the new month was already displayed in the current view\n- enabled the instant-messaging entry in the addressbook\n- prevent the user from selecting disabled menu entries\n- added the ability to add/remove and rename calendars in DAV\n- no longer require a default domain name/imap server to work properly\n- the position of the splitters is now remembered across user sessions\n- improved the email notifications when creating and removing a folder\n- fixed the tab handling in IE7\n- improved the appearance of widgets in IE7\n- dramatic improvement in the overall stability of SOGo\n\n1.0 rc4 (2008-01-16)\n-------------------\n- improved the attendees window;\n- added the attendees pulldown menu in the event editor (like in Lightning);\n- added the recurrence window;\n- a message can be composed to multiple recipients from an address book or\n  from an event attendees menu;\n- many bugfixes in the Calendar module;\n\n1.0 rc3 (2007-12-17)\n-------------------\n- mail folders state is now saved;\n- image attachments in emails can now be saved;\n- the status of participants in represented with an icon;\n- added the option to save attached images;\n- fixed problems with mod_ngobjweb (part of SOPE);\n- the current module can no longer be reselected from the module navigation\n  bar;\n- many bugfixes in the Mail and Calendar modules;\n- improved handling of ACLs;\n\n1.0 rc2 (2007-11-27)\n-------------------\n- the user password is no longer transmitted in the url when logging in;\n- SOGo will no longer redirect the browser to the default page when a\n  specific location is submitted before login;\n- it is now possible to specify a sequence of LDAP attributes/values pairs\n  required in a user record to enable or prevent access to the Calendar and/or\n  Mail module;\n- many messages can be moved or copied at the same time;\n- replying to mails in the Sent folder will take the recipients of the\n  original mails into account;\n- complete review of the ACLs wrt to the address books, both in the Web UI and\n  through DAV access;\n- invitation from Google calendar are now correctly parsed;\n- it is now possible to search events by title in the Calendar module;\n- all the writable calendars are now listed in the event edition dialog;\n\n1.0 rc1 (2007-11-19)\n-------------------\n- the user can now configure his folders as drafts, trash or sent folder;\n- added the ability the move and copy message across mail folders;\n- added the ability to label messages;\n- implemented cookie-based identification in the web interface;\n- fixed a bug where a false positive happening whenever a wrong user login was\n  given during an indirect bind;\n- remove the constraint that a username can't begin with a digit;\n- deleting a message no longer expunges its parent folder;\n- implemented support for multiple calendars;\n- it is now possible to rename folders;\n- fixed search in message content;\n- added tooltips for toolbar buttons (English and French);\n- added checkmarks in live search options popup menus;\n- added browser detection with recommanded alternatives;\n- support for resizable columns in tables;\n- improved support for multiple selection in tables and lists;\n- improved IE7 and Safari support: attendees selector, email file attachments;\n- updated PrototypeJS to version 1.6.0;\n- improved address completion and freebusy timeline in attendees selector;\n- changed look of message composition window to Thunderbird 2.0;\n- countless bugfixes;\n\n0.9.0 (2007-08-24)\n-------------------\n- added the ability to choose the default module from the\n  application settings: \"Calendars\", \"Contacts\" or \"Mail\";\n- added the ability to show or hide the password change dialog from the\n  application settings;\n- put a work-around in the LDAP directory code to avoid fetching all the\n  entries whenever a specific one is being requested;\n- added support for limiting LDAP queries with the SOGoLDAPQueryLimit and\n  the SOGoLDAPSizeLimit settings;\n- fixed a bug where folders starting with digits would not be displayed;\n- improved IE7 and Safari support: priority menus, attendees selector,\n  search fields, textarea sizes;\n- added the ability to print messages from the mailer toolbar;\n- added the ability to use and configure SMTP as the email transport instead\n  of sendmail;\n- rewrote the handling of draft objects to comply better with the behaviour of\n  Thunderbird;\n- added a German translation based on Thunderbird;\n\n0.9.0 (2007-07-13)\n-------------------\n- added the ability to specify a super user through the SOGoSuperUsername user\n  default; \n- added the ability to view the message source;\n- don't autocreate folders if we are not their owners;\n- made compatible with PostgreSQL 8.2;\n- the months and years menus of the date selector would no longer appear;\n- fixed a bug which would produce task SQL records which would violate\n  non-null constraints on the quick calendar tables;\n- the tasks due date was wrongly set because of a change in the API;\n- it was impossible to empty the start and the due date in the task editor\n  from the moment they were set;\n- imap folders with non-ascii characters are now correctly accessed;\n- display the quotas of the selected mailbox on servers that support quotas;\n- a bug in the folder acl description was preventing from accessing resources\n  in dav;\n- AuthentificationMethod was renamed to SOGoAuthentificationMethod;\n- SOGoAuthentificationMethod needs to be explicitly set to \"bypass\" to prevent\n  login verification;\n\nLocal variables:\nmode: text\nEnd:\n", "/* UIxAppointmentEditor.m - this file is part of SOGo\n *\n * Copyright (C) 2007-2013 Inverse inc.\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#include <math.h>\n\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSEnumerator.h>\n#import <Foundation/NSTimeZone.h>\n\n#import <NGObjWeb/SoObject.h>\n#import <NGObjWeb/SoPermissions.h>\n#import <NGObjWeb/SoSecurityManager.h>\n#import <NGObjWeb/WORequest.h>\n#import <NGObjWeb/WOResponse.h>\n#import <NGObjWeb/NSException+HTTP.h>\n#import <NGExtensions/NSCalendarDate+misc.h>\n#import <NGExtensions/NSString+misc.h>\n\n#import <NGCards/iCalAlarm.h>\n#import <NGCards/iCalCalendar.h>\n#import <NGCards/iCalEvent.h>\n#import <NGCards/iCalPerson.h>\n#import <NGCards/iCalTrigger.h>\n#import <NGCards/iCalRecurrenceRule.h>\n#import <NGCards/iCalTimeZone.h>\n#import <NGCards/iCalDateTime.h>\n\n#import <SOGo/NSDictionary+Utilities.h>\n#import <SOGo/NSString+Utilities.h>\n#import <SOGo/SOGoContentObject.h>\n#import <SOGo/SOGoDateFormatter.h>\n#import <SOGo/SOGoPermissions.h>\n#import <SOGo/SOGoUser.h>\n#import <SOGo/SOGoUserDefaults.h>\n#import <Appointments/iCalEntityObject+SOGo.h>\n#import <Appointments/iCalPerson+SOGo.h>\n#import <Appointments/SOGoAppointmentFolder.h>\n#import <Appointments/SOGoAppointmentObject.h>\n#import <Appointments/SOGoAppointmentOccurence.h>\n\n#import <Appointments/SOGoComponentOccurence.h>\n\n#import \"UIxComponentEditor.h\"\n#import \"UIxAppointmentEditor.h\"\n\n@implementation UIxAppointmentEditor\n\n- (id) init\n{\n  SOGoUser *user;\n\n  if ((self = [super init]))\n    {\n      aptStartDate = nil;\n      aptEndDate = nil;\n      item = nil;\n      event = nil;\n      isAllDay = NO;\n      isTransparent = NO;\n      sendAppointmentNotifications = YES;\n      componentCalendar = nil;\n\n      user = [[self context] activeUser];\n      ASSIGN (dateFormatter, [user dateFormatterInContext: context]);\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [item release];\n  [[event parent] release];\n  [aptStartDate release];\n  [aptEndDate release];\n  [dateFormatter release];\n  [componentCalendar release];\n  [super dealloc];\n}\n\n/* template values */\n- (iCalEvent *) event\n{\n  if (!event)\n    {\n      event = (iCalEvent *) [[self clientObject] occurence];\n      [[event parent] retain];\n    }\n\n  return event;\n}\n\n- (NSString *) saveURL\n{\n  return [NSString stringWithFormat: @\"%@/saveAsAppointment\",\n                   [[self clientObject] baseURL]];\n}\n\n/* icalendar values */\n- (BOOL) isAllDay\n{\n  NSString *hm;\n\n  hm = [self queryParameterForKey: @\"hm\"];\n\n  return (isAllDay\n          || [hm isEqualToString: @\"allday\"]);\n}\n\n- (void) setIsAllDay: (BOOL) newIsAllDay\n{\n  isAllDay = newIsAllDay;\n}\n\n- (BOOL) isTransparent\n{\n  return isTransparent;\n}\n\n- (void) setIsTransparent: (BOOL) newIsTransparent\n{\n  isTransparent = newIsTransparent;\n}\n\n- (void) setSendAppointmentNotifications: (BOOL) theBOOL\n{\n  sendAppointmentNotifications = theBOOL;\n}\n\n- (BOOL) sendAppointmentNotifications\n{\n  return sendAppointmentNotifications;\n}\n\n\n- (void) setAptStartDate: (NSCalendarDate *) newAptStartDate\n{\n  ASSIGN (aptStartDate, newAptStartDate);\n}\n\n- (NSCalendarDate *) aptStartDate\n{\n  return aptStartDate;\n}\n\n- (void) setAptEndDate: (NSCalendarDate *) newAptEndDate\n{\n  ASSIGN (aptEndDate, newAptEndDate);\n}\n\n- (NSCalendarDate *) aptEndDate\n{\n  return aptEndDate;\n}\n\n- (void) setItem: (NSString *) newItem\n{\n  ASSIGN (item, newItem);\n}\n\n- (NSString *) item\n{\n  return item;\n}\n\n- (SOGoAppointmentFolder *) componentCalendar\n{\n  return componentCalendar;\n}\n\n- (void) setComponentCalendar: (SOGoAppointmentFolder *) _componentCalendar\n{\n  ASSIGN (componentCalendar, _componentCalendar);\n}\n\n/* read-only event */\n- (NSString *) aptStartDateText\n{\n  return [dateFormatter formattedDate: aptStartDate];\n}\n\n- (NSString *) aptStartDateTimeText\n{\n  return [dateFormatter formattedDateAndTime: aptStartDate];\n}\n\n- (NSString *) aptEndDateText\n{\n  return [dateFormatter formattedDate: aptEndDate];\n}\n\n- (NSString *) aptEndDateTimeText\n{\n  return [dateFormatter formattedDateAndTime: aptEndDate];\n}\n\n- (BOOL) startDateIsEqualToEndDate\n{\n  return [aptStartDate isEqualToDate: aptEndDate];\n}\n\n/* actions */\n- (NSCalendarDate *) newStartDate\n{\n  NSCalendarDate *newStartDate, *now;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  int hour, minute;\n  unsigned int uStart, uEnd;\n\n  newStartDate = [self selectedDate];\n  if (![[self queryParameterForKey: @\"hm\"] length])\n    {\n      ud = [[context activeUser] userDefaults];\n      timeZone = [ud timeZone];\n      now = [NSCalendarDate calendarDate];\n      [now setTimeZone: timeZone];\n\n      uStart = [ud dayStartHour];\n      if ([now isDateOnSameDay: newStartDate])\n        {\n          uEnd = [ud dayEndHour];\n          hour = [now hourOfDay];\n          minute = [now minuteOfHour];\n          if (minute % 15)\n            minute += 15 - (minute % 15);\n          if (hour < uStart)\n            newStartDate = [now hour: uStart minute: 0];\n          else if (hour > uEnd)\n            newStartDate = [[now tomorrow] hour: uStart minute: 0];\n          else\n            newStartDate = [now hour: [now hourOfDay] minute: minute];\n        }\n      else\n        newStartDate = [newStartDate hour: uStart minute: 0];\n    }\n\n  return newStartDate;\n}\n\n- (id <WOActionResults>) defaultAction\n{\n  NSCalendarDate *startDate, *endDate;\n  NSString *duration;\n  NSTimeZone *timeZone;\n  unsigned int total, hours, minutes;\n  signed int offset;\n  SOGoObject <SOGoComponentOccurence> *co;\n  SOGoUserDefaults *ud;\n\n  [self event];\n  co = [self clientObject];\n\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n\n  if ([co isNew]\n      && [co isKindOfClass: [SOGoCalendarComponent class]])\n    {\n      startDate = [self newStartDate];\n      duration = [self queryParameterForKey:@\"duration\"];\n      if ([duration length] > 0)\n        {\n          total = [duration intValue];\n          hours = total / 100;\n          minutes = total % 100;\n        }\n      else\n        {\n          hours = 1;\n          minutes = 0;\n        }\n      endDate\n        = [startDate dateByAddingYears: 0 months: 0 days: 0\n                                 hours: hours minutes: minutes seconds: 0];\n      sendAppointmentNotifications = YES;\n    }\n  else\n    {\n      startDate = [event startDate];\n      isAllDay = [event isAllDay];\n      endDate = [event endDate];\n      if (isAllDay)\n        {\n          endDate = [endDate dateByAddingYears: 0 months: 0 days: -1];\n\n          // Convert the dates to the user's timezone\n          offset = [timeZone secondsFromGMTForDate: startDate];\n          startDate = [startDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                           seconds:-offset];\n          endDate = [endDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                       seconds:-offset];\n        }\n      isTransparent = ![event isOpaque]; \n      sendAppointmentNotifications = ([event firstChildWithTag: @\"X-SOGo-Send-Appointment-Notifications\"] ? NO : YES);\n    }\n\n  [startDate setTimeZone: timeZone];\n  ASSIGN (aptStartDate, startDate);\n\n  [endDate setTimeZone: timeZone];\n  ASSIGN (aptEndDate, endDate);\n\n  return self;\n}\n\n- (id <WOActionResults>) newAction\n{\n  NSString *objectId, *method, *uri;\n  id <WOActionResults> result;\n  SOGoAppointmentFolder *co;\n  SoSecurityManager *sm;\n\n  co = [self clientObject];\n  objectId = [co globallyUniqueObjectId];\n  if ([objectId length])\n    {\n      sm = [SoSecurityManager sharedSecurityManager];\n      if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                         onObject: co\n                        inContext: context])\n        method = [NSString stringWithFormat:@\"%@/%@.ics/editAsAppointment\",\n                           [co soURL], objectId] ;\n      else\n        method = [NSString stringWithFormat: @\"%@/Calendar/personal/%@.ics/editAsAppointment\",\n                           [self userFolderPath], objectId];\n      uri = [self completeHrefForMethod: method];\n      result = [self redirectToLocation: uri];\n    }\n  else\n    result = [NSException exceptionWithHTTPStatus: 500 /* Internal Error */\n                          reason: @\"could not create a unique ID\"];\n\n  return result;\n}\n\n- (void) _adjustRecurrentRules\n{\n  iCalRecurrenceRule *rule;\n  NSEnumerator *rules;\n  NSCalendarDate *untilDate;\n  SOGoUserDefaults *ud;\n  NSTimeZone *timeZone;\n  \n  rules = [[event recurrenceRules] objectEnumerator];\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n\n  while ((rule = [rules nextObject]))\n    {\n      untilDate = [rule untilDate];\n      if (untilDate)\n        {\n          // The until date must match the time of the end date\n          NSCalendarDate *date;\n\n          date = [[event endDate] copy];\n          [date setTimeZone: timeZone];\n          [untilDate setTimeZone: timeZone];\n          untilDate = [untilDate dateByAddingYears:0\n                                 months:0\n                                 days:0\n                                 hours:[date hourOfDay]\n                                 minutes:[date minuteOfHour]\n                                 seconds:0];\n          [rule setUntilDate: untilDate];\n          [date release];\n        }\n    }\n}\n\n- (id <WOActionResults>) saveAction\n{\n  SOGoAppointmentFolder *previousCalendar;\n  SOGoAppointmentObject *co;\n  NSString *jsonResponse;\n  SoSecurityManager *sm;\n  NSException *ex;\n\n  co = [self clientObject];\n  if ([co isKindOfClass: [SOGoAppointmentOccurence class]])\n    co = [co container];\n  previousCalendar = [co container];\n  sm = [SoSecurityManager sharedSecurityManager];\n  ex = nil;\n\n  if ([event hasRecurrenceRules])\n    [self _adjustRecurrentRules];\n\n  if ([co isNew])\n    {\n      if (componentCalendar\n          && ![[componentCalendar ocsPath]\n                isEqualToString: [previousCalendar ocsPath]])\n        {\n          // New event in a different calendar -- make sure the user can\n          // write to the selected calendar since the rights were verified\n          // on the calendar specified in the URL, not on the selected\n          // calendar of the popup menu.\n          if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                   onObject: componentCalendar\n                   inContext: context])\n            co = [componentCalendar lookupName: [co nameInContainer]\n                                    inContext: context\n                                    acquire: NO];\n        }\n      \n      // Save the event.\n      ex = [co saveComponent: event];\n    }\n  else\n    {\n      // The event was modified -- save it.\n      ex = [co saveComponent: event];\n\n      if (componentCalendar\n          && ![[componentCalendar ocsPath]\n                isEqualToString: [previousCalendar ocsPath]])\n        {\n          // The event was moved to a different calendar.\n          if (![sm validatePermission: SoPerm_DeleteObjects\n                   onObject: previousCalendar\n                   inContext: context])\n            {\n              if (![sm validatePermission: SoPerm_AddDocumentsImagesAndFiles\n                       onObject: componentCalendar\n                       inContext: context])\n                ex = [co moveToFolder: componentCalendar];\n            }\n        }\n    }\n\n  if (ex)\n    jsonResponse = [NSDictionary dictionaryWithObjectsAndKeys:\n                                   @\"failure\", @\"status\",\n                                 [ex reason],\n                                 @\"message\",\n                                 nil];\n  else\n    jsonResponse = [NSDictionary dictionaryWithObjectsAndKeys:\n                                   @\"success\", @\"status\", nil];\n  \n  return [self responseWithStatus: 200\n               andString: [jsonResponse jsonRepresentation]];\n}\n\n- (id <WOActionResults>) viewAction\n{\n  WOResponse *result;\n  NSDictionary *data;\n  NSCalendarDate *eventStartDate, *eventEndDate;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  SOGoCalendarComponent *co;\n  NSString *created_by;\n\n  BOOL resetAlarm;\n  unsigned int snoozeAlarm;\n\n  [self event];\n\n  result = [self responseWithStatus: 200];\n  ud = [[context activeUser] userDefaults];\n  timeZone = [ud timeZone];\n  eventStartDate = [event startDate];\n  eventEndDate = [event endDate];\n  [eventStartDate setTimeZone: timeZone];\n  [eventEndDate setTimeZone: timeZone];\n  co = [self clientObject];\n  \n  if (!componentCalendar)\n    {\n      componentCalendar = [co container];\n      if ([componentCalendar isKindOfClass: [SOGoCalendarComponent class]])\n        componentCalendar = [componentCalendar container];\n      [componentCalendar retain];\n    }\n  \n  if ([event hasAlarms] && ![event hasRecurrenceRules])\n    {\n      iCalAlarm *anAlarm;\n      resetAlarm = [[[context request] formValueForKey: @\"resetAlarm\"] boolValue];\n      snoozeAlarm = [[[context request] formValueForKey: @\"snoozeAlarm\"] intValue];\n      if (resetAlarm)\n        {\n          iCalTrigger *aTrigger;\n          \n          anAlarm = [[event alarms] objectAtIndex: 0];\n          aTrigger = [anAlarm trigger];\n          [aTrigger setValue: 0 ofAttribute: @\"x-webstatus\" to: @\"triggered\"];\n          \n          [co saveComponent: event];\n        }\n      else if (snoozeAlarm)\n        {\n          anAlarm = [[event alarms] objectAtIndex: 0];\n          if ([[anAlarm action] caseInsensitiveCompare: @\"DISPLAY\"] == NSOrderedSame)\n            [co snoozeAlarm: snoozeAlarm];\n        }\n    }\n\n  created_by = [event createdBy];\n\n  data = [NSDictionary dictionaryWithObjectsAndKeys:\n                       [[componentCalendar displayName] stringByEscapingHTMLString], @\"calendar\",\n                       [event tag], @\"component\",\n                       [dateFormatter formattedDate: eventStartDate], @\"startDate\",\n                       [dateFormatter formattedTime: eventStartDate], @\"startTime\",\n                       [dateFormatter formattedDate: eventEndDate], @\"endDate\",\n                       [dateFormatter formattedTime: eventEndDate], @\"endTime\",\n                     //([event hasRecurrenceRules] ? @\"1\": @\"0\"), @\"isRecurring\",\n                       ([event isAllDay] ? @\"1\": @\"0\"), @\"isAllDay\",\n                       [[event summary] stringByEscapingHTMLString], @\"summary\",\n                       [[event location] stringByEscapingHTMLString], @\"location\",\n\t\t       [created_by stringByEscapingHTMLString], @\"created_by\",\n                       [[event comment] stringByEscapingHTMLString], @\"description\",\n                       nil];\n  \n  [result appendContentString: [data jsonRepresentation]];\n\n  return result;\n}\n\n- (BOOL) shouldTakeValuesFromRequest: (WORequest *) request\n                           inContext: (WOContext*) context\n{\n  NSString *actionName;\n\n  actionName = [[request requestHandlerPath] lastPathComponent];\n\n  return ([[self clientObject] conformsToProtocol: @protocol (SOGoComponentOccurence)]\n          && [actionName hasPrefix: @\"save\"]);\n}\n\n- (void) takeValuesFromRequest: (WORequest *) _rq\n                     inContext: (WOContext *) _ctx\n{\n  int nbrDays;\n  iCalDateTime *startDate;\n  iCalTimeZone *tz;\n  NSCalendarDate *allDayStartDate;\n  NSTimeZone *timeZone;\n  SOGoUserDefaults *ud;\n  signed int offset;\n  id o;\n  \n  [self event];  \n  [super takeValuesFromRequest: _rq inContext: _ctx];\n\n  if (isAllDay)\n    {\n      nbrDays = ((float) abs ([aptEndDate timeIntervalSinceDate: aptStartDate])\n                 / 86400) + 1;\n      // Convert all-day start date to GMT (floating date)\n      ud = [[context activeUser] userDefaults];\n      timeZone = [ud timeZone];\n      offset = [timeZone secondsFromGMTForDate: aptStartDate];\n      allDayStartDate = [aptStartDate dateByAddingYears:0 months:0 days:0 hours:0 minutes:0\n                                                seconds:offset];\n      [event setAllDayWithStartDate: allDayStartDate\n                           duration: nbrDays];\n    }\n  else\n    {\n      [event setStartDate: aptStartDate];\n      [event setEndDate: aptEndDate];\n    }\n  \n  if (!isAllDay)\n    {\n      // Make sure there's a vTimeZone associated to the event unless it\n      // is an all-day event.\n      startDate = (iCalDateTime *)[event uniqueChildWithTag: @\"dtstart\"];\n      if (![startDate timeZone])\n        {\n          ud = [[context activeUser] userDefaults];\n          tz = [iCalTimeZone timeZoneForName: [ud timeZoneName]];\n          if ([[event parent] addTimeZone: tz])\n            {\n              [startDate setTimeZone: tz];\n              [(iCalDateTime *)[event uniqueChildWithTag: @\"dtend\"] setTimeZone: tz];\n            }\n        }\n    }\n  else if (![[self clientObject] isNew])\n    {\n      // Remove the vTimeZone when dealing with an all-day event.\n      startDate = (iCalDateTime *)[event uniqueChildWithTag: @\"dtstart\"];\n      tz = [startDate timeZone];\n      if (tz)\n        {\n          [startDate setTimeZone: nil];\n          [(iCalDateTime *)[event uniqueChildWithTag: @\"dtend\"] setTimeZone: nil];\n          [[event parent] removeChild: tz];\n        }\n    }\n\n  [event setTransparency: (isTransparent? @\"TRANSPARENT\" : @\"OPAQUE\")];\n\n  o = [event firstChildWithTag: @\"X-SOGo-Send-Appointment-Notifications\"];\n\n  if (!sendAppointmentNotifications && !o)\n    [event addChild: [CardElement simpleElementWithTag: @\"X-SOGo-Send-Appointment-Notifications\"  value: @\"NO\"]];\n  else if (sendAppointmentNotifications && o)\n    [event removeChild: o];\n  \n}\n\n- (id) _statusChangeAction: (NSString *) newStatus\n{\n  [[self clientObject] changeParticipationStatus: newStatus\n                                    withDelegate: nil];\n\n  return [self responseWith204];\n}\n\n- (id) acceptAction\n{\n  return [self _statusChangeAction: @\"ACCEPTED\"];\n}\n\n- (id) declineAction\n{\n  return [self _statusChangeAction: @\"DECLINED\"];\n}\n\n- (id) needsActionAction\n{\n  return [self _statusChangeAction: @\"NEEDS-ACTION\"];\n}\n\n- (id) tentativeAction\n{\n  return [self _statusChangeAction: @\"TENTATIVE\"];\n}\n\n- (id) delegateAction\n{\n//  BOOL receiveUpdates;\n  NSString *delegatedEmail, *delegatedUid;\n  iCalPerson *delegatedAttendee;\n  SOGoUser *user;\n  WORequest *request;\n  WOResponse *response;\n\n  response = nil;\n  request = [context request];\n  delegatedEmail = [request formValueForKey: @\"to\"];\n  if ([delegatedEmail length])\n    {\n      user = [context activeUser];\n      delegatedAttendee = [iCalPerson new];\n      [delegatedAttendee autorelease];\n      [delegatedAttendee setEmail: delegatedEmail];\n      delegatedUid = [delegatedAttendee uid];\n      if (delegatedUid)\n        {\n          SOGoUser *delegatedUser;\n          delegatedUser = [SOGoUser userWithLogin: delegatedUid];\n          [delegatedAttendee setCn: [delegatedUser cn]];\n        }\n      \n      [delegatedAttendee setRole: @\"REQ-PARTICIPANT\"];\n      [delegatedAttendee setRsvp: @\"TRUE\"];\n      [delegatedAttendee setParticipationStatus: iCalPersonPartStatNeedsAction];\n      [delegatedAttendee setDelegatedFrom:\n               [NSString stringWithFormat: @\"mailto:%@\", [[user allEmails] objectAtIndex: 0]]];\n      \n//      receiveUpdates = [[request formValueForKey: @\"receiveUpdates\"] boolValue];\n//      if (receiveUpdates)\n//      [delegatedAttendee setRole: @\"NON-PARTICIPANT\"];\n\n      response = (WOResponse*)[[self clientObject] changeParticipationStatus: @\"DELEGATED\"\n                                                   withDelegate: delegatedAttendee];\n    }\n  else\n    response = [NSException exceptionWithHTTPStatus: 400\n                                             reason: @\"missing 'to' parameter\"];\n\n  if (!response)\n    response = [self responseWith204];\n\n  return response;\n}\n\n@end\n", "/* UIxCalListingActions.m - this file is part of SOGo\n *\n * Copyright (C) 2006-2011 Inverse inc.\n *\n * Author: Wolfgang Sourdeau <wsourdeau@inverse.ca>\n *         Francis Lachapelle <flachapelle@inverse.ca>\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#import <Foundation/NSArray.h>\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSEnumerator.h>\n#import <Foundation/NSNull.h>\n#import <Foundation/NSString.h>\n#import <Foundation/NSTimeZone.h>\n#import <Foundation/NSValue.h>\n\n#import <NGObjWeb/WOContext.h>\n#import <NGObjWeb/WOContext+SoObjects.h>\n#import <NGObjWeb/WORequest.h>\n#import <NGObjWeb/WOResponse.h>\n\n#import <NGCards/iCalPerson.h>\n#import <NGCards/iCalTimeZone.h>\n#import <NGCards/iCalDateTime.h>\n\n#import <NGExtensions/NGCalendarDateRange.h>\n#import <NGExtensions/NSCalendarDate+misc.h>\n#import <NGExtensions/NSObject+Logs.h>\n#import <NGExtensions/NSString+misc.h>\n\n#import <SOGo/SOGoDateFormatter.h>\n#import <SOGo/SOGoPermissions.h>\n#import <SOGo/SOGoUser.h>\n#import <SOGo/SOGoUserDefaults.h>\n#import <SOGo/SOGoUserFolder.h>\n#import <SOGo/SOGoUserSettings.h>\n#import <SOGo/NSCalendarDate+SOGo.h>\n#import <SOGo/NSArray+Utilities.h>\n#import <SOGo/NSObject+Utilities.h>\n#import <Appointments/SOGoAppointmentFolder.h>\n#import <Appointments/SOGoAppointmentFolders.h>\n#import <Appointments/SOGoAppointmentObject.h>\n#import <Appointments/SOGoWebAppointmentFolder.h>\n\n#import <UI/Common/WODirectAction+SOGo.h>\n\n#import \"NSArray+Scheduler.h\"\n\n#import \"UIxCalListingActions.h\"\n\nstatic NSArray *eventsFields = nil;\nstatic NSArray *tasksFields = nil;\n\n#define dayLength       86400\n#define quarterLength   900             // number of seconds in 15 minutes\n#define offsetHours (24 * 5)            // number of hours in invitation window\n#define offsetSeconds (offsetHours * 60 * 60)  // number of seconds in\n                                               // invitation window\n/* 1 block = 15 minutes */\n#define offsetBlocks (offsetHours * 4)  // number of 15-minute blocks in invitation window\n#define maxBlocks (offsetBlocks * 2)    // maximum number of blocks to search\n                                        // for a free slot (10 days)\n\n@implementation UIxCalListingActions\n\n+ (void) initialize\n{\n  if (!eventsFields)\n    {\n      eventsFields = [NSArray arrayWithObjects: @\"c_name\", @\"c_folder\",\n\t\t\t      @\"calendarName\",\n\t\t\t      @\"c_status\", @\"c_title\", @\"c_startdate\",\n\t\t\t      @\"c_enddate\", @\"c_location\", @\"c_isallday\",\n\t\t\t      @\"c_classification\", @\"c_category\",\n                              @\"c_partmails\", @\"c_partstates\", @\"c_owner\",\n                              @\"c_iscycle\", @\"c_nextalarm\",\n                              @\"c_recurrence_id\", @\"isException\", @\"editable\",\n                              @\"erasable\", @\"ownerIsOrganizer\", nil];\n      [eventsFields retain];\n    }\n  if (!tasksFields)\n    {\n      tasksFields = [NSArray arrayWithObjects: @\"c_name\", @\"c_folder\",\n                             @\"calendarName\",\n\t\t\t     @\"c_status\", @\"c_title\", @\"c_enddate\",\n\t\t\t     @\"c_classification\", @\"c_location\", @\"c_category\",\n                             @\"editable\", @\"erasable\",\n                             @\"c_priority\", nil];\n      [tasksFields retain];\n    }\n}\n\n- (id) initWithRequest: (WORequest *) newRequest\n{\n  SOGoUser *user;\n\n  if ((self = [super initWithRequest: newRequest]))\n    {\n      componentsData = [NSMutableDictionary new];\n      startDate = nil;\n      endDate = nil;\n      ASSIGN (request, newRequest);\n      user = [[self context] activeUser];\n      ASSIGN (dateFormatter, [user dateFormatterInContext: context]);\n      ASSIGN (userTimeZone, [[user userDefaults] timeZone]);\n      dayBasedView = NO;\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [dateFormatter release];\n  [request release];\n  [componentsData release];\n  [userTimeZone release];\n  [super dealloc];\n}\n\n- (void) _setupDatesWithPopup: (NSString *) popupValue\n\t\t    andUserTZ: (NSTimeZone *) userTZ\n{\n  NSCalendarDate *newDate;\n  NSString *param;\n\n  if ([popupValue isEqualToString: @\"view_today\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [newDate endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_all\"])\n    {\n      startDate = nil;\n      endDate = nil;\n    }\n  else if ([popupValue isEqualToString: @\"view_next7\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 6] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_next14\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 13] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_next31\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = [[startDate dateByAddingYears: 0 months: 0 days: 30] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_thismonth\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [[newDate firstDayOfMonth] beginOfDay];\n      endDate = [[newDate lastDayOfMonth] endOfDay];\n    }\n  else if ([popupValue isEqualToString: @\"view_future\"])\n    {\n      newDate = [NSCalendarDate calendarDate];\n      [newDate setTimeZone: userTZ];\n      startDate = [newDate beginOfDay];\n      endDate = nil;\n    }\n  else if ([popupValue isEqualToString: @\"view_selectedday\"])\n    {\n      param = [request formValueForKey: @\"day\"];\n      if ([param length] > 0)\n\tstartDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t     andShortTimeString: nil\n\t\t\t\t     inTimeZone: userTZ] beginOfDay];\n      else\n\t{\n\t  newDate = [NSCalendarDate calendarDate];\n\t  [newDate setTimeZone: userTZ];\n\t  startDate = [newDate beginOfDay];\n\t}\n      endDate = [startDate endOfDay];\n    }\n}\n\n- (void) _setupContext\n{\n  SOGoUser *user;\n  NSString *param;\n\n  user = [context activeUser];\n  userLogin = [user login];\n\n  title = [request formValueForKey: @\"search\"];\n  param = [request formValueForKey: @\"filterpopup\"];\n  if ([param length])\n    {\n      [self _setupDatesWithPopup: param andUserTZ: userTimeZone];\n    }\n  else\n    {\n      param = [request formValueForKey: @\"sd\"];\n      if ([param length] > 0)\n\tstartDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t     andShortTimeString: nil\n\t\t\t\t     inTimeZone: userTimeZone] beginOfDay];\n      else\n\tstartDate = nil;\n\n      param = [request formValueForKey: @\"ed\"];\n      if ([param length] > 0)\n\tendDate = [[NSCalendarDate dateFromShortDateString: param\n\t\t\t\t   andShortTimeString: nil\n\t\t\t\t   inTimeZone: userTimeZone] endOfDay];\n      else\n\tendDate = nil;\n\n      param = [request formValueForKey: @\"view\"];\n      dayBasedView = ![param isEqualToString: @\"monthview\"];\n    }\n}\n\n- (void) _fixComponentTitle: (NSMutableDictionary *) component\n                   withType: (NSString *) type\n{\n  NSString *labelKey;\n\n  labelKey = [NSString stringWithFormat: @\"%@_class%@\",\n\t\t       type, [component objectForKey: @\"c_classification\"]];\n  [component setObject: [self labelForKey: labelKey]\n\t     forKey: @\"c_title\"];\n}\n\n/*\n * Adjust the event start and end dates when there's a time change\n * in the period covering the view for the user's timezone.\n * @param theRecord the attributes of the event.\n */\n- (void) _fixDates: (NSMutableDictionary *) theRecord\n{\n  NSCalendarDate *aDate;\n  NSNumber *aDateValue;\n  NSString *aDateField;\n  int daylightOffset;\n  unsigned int count;\n  static NSString *fields[] = { @\"startDate\", @\"c_startdate\",\n\t\t\t\t@\"endDate\", @\"c_enddate\" };\n  \n  /* WARNING: This condition has been put and removed many times, please leave\n     it. Here is the story...\n     If _fixDates: is conditional to dayBasedView, the recurrences are computed\n     properly but the display time is wrong.\n     If _fixDates: is non-conditional, the reverse occurs.\n     If only this part of _fixDates: is conditional, both are right.\n\n     Regarding all day events, we need to execute this code no matter what the\n     date and the view are, otherwise the event will span on two days.\n     \n     ref bugs:\n     http://www.sogo.nu/bugs/view.php?id=909\n     http://www.sogo.nu/bugs/view.php?id=678\n     ...\n  */\n  \n  //NSLog(@\"***[UIxCalListingActions _fixDates:] %@\", [theRecord objectForKey: @\"c_title\"]);\n  if (dayBasedView || [[theRecord objectForKey: @\"c_isallday\"] boolValue])\n    {\n      for (count = 0; count < 2; count++)\n        {\n          aDateField = fields[count * 2];\n          aDate = [theRecord objectForKey: aDateField];\n\t  daylightOffset = (int) ([userTimeZone secondsFromGMTForDate: aDate]\n\t\t\t\t  - [userTimeZone secondsFromGMTForDate: startDate]);\n\t  //NSLog(@\"***[UIxCalListingActions _fixDates:] %@ = %@ (%i)\", aDateField, aDate, daylightOffset);\n          if (daylightOffset)\n            {\n              aDate = [aDate dateByAddingYears: 0 months: 0 days: 0 hours: 0\n                                       minutes: 0 seconds: daylightOffset];\n              [theRecord setObject: aDate forKey: aDateField];\n              aDateValue = [NSNumber numberWithInt: [aDate timeIntervalSince1970]];\n              [theRecord setObject: aDateValue forKey: fields[count * 2 + 1]];\n            }\n        }\n    }\n}\n\n- (NSArray *) _fetchFields: (NSArray *) fields\n\tforComponentOfType: (NSString *) component\n{\n  NSEnumerator *folders, *currentInfos;\n  SOGoAppointmentFolder *currentFolder;\n  NSMutableDictionary *newInfo;\n  NSMutableArray *infos, *newInfoForComponent;\n  NSNull *marker;\n  SOGoAppointmentFolders *clientObject;\n  SOGoUser *ownerUser;\n  NSString *owner, *role, *calendarName;\n  BOOL isErasable, folderIsRemote;\n  id currentInfo;\n  int i, count;\n\n  infos = [NSMutableArray array];\n  marker = [NSNull null];\n  clientObject = [self clientObject];\n\n  folders = [[clientObject subFolders] objectEnumerator];\n  while ((currentFolder = [folders nextObject]))\n    {\n      if ([currentFolder isActive])\n        {\n          folderIsRemote\n            = [currentFolder isKindOfClass: [SOGoWebAppointmentFolder class]];\n          currentInfos\n            = [[currentFolder fetchCoreInfosFrom: startDate\n                                              to: endDate\n                                           title: title\n                                       component: component] objectEnumerator];\n\t  owner = [currentFolder ownerInContext: context];\n\t  ownerUser = [SOGoUser userWithLogin: owner];\n\t  isErasable = ([owner isEqualToString: userLogin]\n\t\t\t|| [[currentFolder aclsForUser: userLogin] containsObject: SOGoRole_ObjectEraser]);\n          while ((newInfo = [currentInfos nextObject]))\n            {\n              if ([fields containsObject: @\"editable\"])\n                {\n                  if (folderIsRemote)\n\t\t    // .ics subscriptions are not editable\n                    [newInfo setObject: [NSNumber numberWithInt: 0]\n                                forKey: @\"editable\"];\n                  else\n                    {\n\t\t      // Identifies whether the active user can edit the event.\n                      role =\n                        [currentFolder roleForComponentsWithAccessClass:\n                                                 [[newInfo objectForKey: @\"c_classification\"] intValue]\n                                                                forUser: userLogin];\n                      if ([role isEqualToString: @\"ComponentModifier\"] \n                          || [role length] == 0)\n                        [newInfo setObject: [NSNumber numberWithInt: 1]\n                                    forKey: @\"editable\"];\n                      else\n                        [newInfo setObject: [NSNumber numberWithInt: 0]\n                                    forKey: @\"editable\"];\n                    }\n                }\n\t      if ([fields containsObject: @\"ownerIsOrganizer\"])\n\t\t{\n\t\t  // Identifies whether the active user is the organizer\n\t\t  // of this event.\n\t\t  NSString *c_orgmail;\n\t\t  c_orgmail = [newInfo objectForKey: @\"c_orgmail\"];\n\n\t\t  if ([c_orgmail isKindOfClass: [NSString class]] && [ownerUser hasEmail: c_orgmail])\n                    [newInfo setObject: [NSNumber numberWithInt: 1]\n                                forKey: @\"ownerIsOrganizer\"];\n                  else\n                    [newInfo setObject: [NSNumber numberWithInt: 0]\n                                forKey: @\"ownerIsOrganizer\"];\n\t\t}\n\t      if (isErasable)\n\t\t[newInfo setObject: [NSNumber numberWithInt: 1]\n\t\t\t    forKey: @\"erasable\"];\n\t      else\n\t\t[newInfo setObject: [NSNumber numberWithInt: 0]\n\t\t\t    forKey: @\"erasable\"];\n\t      [newInfo setObject: [currentFolder nameInContainer]\n                          forKey: @\"c_folder\"];\n              [newInfo setObject: [currentFolder ownerInContext: context]\n                          forKey: @\"c_owner\"];\n              calendarName = [currentFolder displayName];\n              if (calendarName == nil)\n                calendarName = @\"\";\n              [newInfo setObject: calendarName\n                          forKey: @\"calendarName\"];\n              if (![[newInfo objectForKey: @\"c_title\"] length])\n                [self _fixComponentTitle: newInfo withType: component];\n\t      // Possible improvement: only call _fixDates if event is recurrent\n\t      // or the view range span a daylight saving time change\n              [self _fixDates: newInfo];\n              newInfoForComponent = [NSMutableArray arrayWithArray: [newInfo objectsForKeys: fields\n                                                                             notFoundMarker: marker]];\n              // Escape HTML\n              count = [newInfoForComponent count];\n              for (i = 0; i < count; i++)\n                {\n                  currentInfo = [newInfoForComponent objectAtIndex: i];\n                  if ([currentInfo respondsToSelector: @selector (stringByEscapingHTMLString)])\n                    [newInfoForComponent replaceObjectAtIndex: i withObject: [currentInfo stringByEscapingHTMLString]];\n                }\n              [infos addObject: newInfoForComponent];\n            }\n        }\n    }\n\n  return infos;\n}\n\n- (WOResponse *) _responseWithData: (NSArray *) data\n{\n  WOResponse *response;\n\n  response = [self responseWithStatus: 200];\n  [response appendContentString: [data jsonRepresentation]];\n\n  return response;\n}\n\n- (NSString *) _formattedDateForSeconds: (unsigned int) seconds\n\t\t\t      forAllDay: (BOOL) forAllDay\n{\n  NSCalendarDate *date;\n  NSString *formattedDate;\n\n  date = [NSCalendarDate dateWithTimeIntervalSince1970: seconds];\n  // Adjust for daylight saving time? (wrt to startDate)\n  //NSLog(@\"***[UIxCalListingActions _formattedDateForSeconds] user timezone is %@\", userTimeZone);\n  [date setTimeZone: userTimeZone];\n  if (forAllDay)\n    formattedDate = [dateFormatter formattedDate: date];\n  else\n    formattedDate = [dateFormatter formattedDateAndTime: date];\n\n  return formattedDate;    \n}\n\n//\n// We return:\n// \n// [[calendar name (full path), complete Event ID (full path), Fire date (UTC)], ..]\n//\n// Called when each module is loaded or whenever a calendar component is created, modified, deleted\n// or whenever there's a {un}subscribe to a calendar.\n//\n// Workflow :\n//\n// - for ALL subscribed and ACTIVE calendars\n//  - returns alarms that will occur in the next 48 hours or the non-triggered alarms\n//    for non-completed events\n//  - recurring events are currently ignored\n//\n- (WOResponse *) alarmsListAction\n{\n  SOGoAppointmentFolder *currentFolder;\n  SOGoAppointmentFolders *clientObject;\n  NSMutableArray *allAlarms;\n  NSEnumerator *folders;\n  WOResponse *response;\n  unsigned int browserTime, laterTime;\n\n  // We look for alarms in the next 48 hours\n  browserTime = [[[context request] formValueForKey: @\"browserTime\"] intValue];\n  laterTime = browserTime + 60*60*48;\n  clientObject = [self clientObject];\n  allAlarms = [NSMutableArray array];\n\n  folders = [[clientObject subFolders] objectEnumerator];\n  while ((currentFolder = [folders nextObject]))\n    {\n      if ([currentFolder isActive] && [currentFolder showCalendarAlarms])\n\t{\n\t  NSDictionary *entry;\n\t  NSArray *alarms;\n\t  BOOL isCycle;\n\t  int i;\n\n\t  alarms = [currentFolder fetchAlarmInfosFrom: [NSNumber numberWithInt: browserTime]\n\t\t\t\t  to: [NSNumber numberWithInt: laterTime]];\n\t  \n\t  for (i = 0; i < [alarms count]; i++)\n\t    {\n\t      entry = [alarms objectAtIndex: i];\n\t      isCycle = [[entry objectForKey: @\"c_iscycle\"] boolValue];\n\t      \n\t      if (!isCycle)\n\t\t{\n\t\t  [allAlarms addObject: [NSArray arrayWithObjects:\n\t\t\t\t\t\t [currentFolder nameInContainer],\n\t\t\t\t\t\t [entry objectForKey: @\"c_name\"],\n\t\t\t\t\t\t [entry objectForKey: @\"c_nextalarm\"],\n\t\t\t\t\t\t nil]];\n\t\t}\n\t    }\n\t}\n    }\n  \n  \n  response = [self responseWithStatus: 200];\n  [response appendContentString: [allAlarms jsonRepresentation]];\n  \n  return response;\n}\n\n- (void) checkFilterValue\n{\n  NSString *filter;\n  SOGoUserSettings *us;\n\n  filter = [[context request] formValueForKey: @\"filterpopup\"];\n  if ([filter length]\n      && ![filter isEqualToString: @\"view_all\"]\n      && ![filter isEqualToString: @\"view_future\"])\n    {\n      us = [[context activeUser] userSettings];\n      [us setObject: filter forKey: @\"CalendarDefaultFilter\"];\n      [us synchronize];\n    }\n}\n\n- (WOResponse *) eventsListAction\n{\n  NSArray *oldEvent;\n  NSEnumerator *events;\n  NSMutableArray *newEvents, *newEvent;\n  unsigned int interval;\n  BOOL isAllDay;\n  NSString *sort, *ascending;\n\n  [self _setupContext];\n  [self checkFilterValue];\n\n  newEvents = [NSMutableArray array];\n  events = [[self _fetchFields: eventsFields\n\t\t  forComponentOfType: @\"vevent\"] objectEnumerator];\n  while ((oldEvent = [events nextObject]))\n    {\n      newEvent = [NSMutableArray arrayWithArray: oldEvent];\n      isAllDay = [[oldEvent objectAtIndex: eventIsAllDayIndex] boolValue];\n      interval = [[oldEvent objectAtIndex: eventStartDateIndex] intValue];\n      [newEvent addObject: [self _formattedDateForSeconds: interval\n\t\t\t\t\t\tforAllDay: isAllDay]];\n      interval = [[oldEvent objectAtIndex: eventEndDateIndex] intValue];\n      [newEvent addObject: [self _formattedDateForSeconds: interval\n\t\t\t\t\t\tforAllDay: isAllDay]];\n      [newEvents addObject: newEvent];\n    }\n  \n  sort = [[context request] formValueForKey: @\"sort\"];\n  if ([sort isEqualToString: @\"title\"])\n    [newEvents sortUsingSelector: @selector (compareEventsTitleAscending:)];\n  else if ([sort isEqualToString: @\"end\"])\n    [newEvents sortUsingSelector: @selector (compareEventsEndDateAscending:)];\n  else if ([sort isEqualToString: @\"location\"])\n    [newEvents sortUsingSelector: @selector (compareEventsLocationAscending:)];\n  else if ([sort isEqualToString: @\"calendarName\"])\n    [newEvents sortUsingSelector: @selector (compareEventsCalendarNameAscending:)];\n  else\n    [newEvents sortUsingSelector: @selector (compareEventsStartDateAscending:)];\n\n  ascending = [[context request] formValueForKey: @\"asc\"];\n  if (![ascending boolValue])\n    [newEvents reverseArray];\n\n  return [self _responseWithData: newEvents];\n}\n\nstatic inline void\n_feedBlockWithDayBasedData (NSMutableDictionary *block, unsigned int start,\n                            unsigned int end, unsigned int dayStart)\n{\n  unsigned int delta, quarterStart, length, swap;\n  \n  if (start > end)\n    {\n      swap = end;\n      end = start;\n      start = swap;\n    }\n  quarterStart = (start - dayStart) / quarterLength;\n  delta = end - dayStart;\n  if ((delta % quarterLength))\n    delta += quarterLength;\n  length = (delta / quarterLength) - quarterStart;\n  if (!length)\n    length = 1;\n  [block setObject: [NSNumber numberWithUnsignedInt: quarterStart]\n\t forKey: @\"start\"];\n  [block setObject: [NSNumber numberWithUnsignedInt: length]\n\t forKey: @\"length\"];\n}\n\nstatic inline void\n_feedBlockWithMonthBasedData (NSMutableDictionary *block, unsigned int start,\n                              NSTimeZone *userTimeZone,\n                              SOGoDateFormatter *dateFormatter)\n{\n  NSCalendarDate *eventStartDate;\n  NSString *startHour;\n\n  eventStartDate = [NSCalendarDate dateWithTimeIntervalSince1970: start];\n  [eventStartDate setTimeZone: userTimeZone];\n  startHour = [dateFormatter formattedTime: eventStartDate];\n  [block setObject: startHour forKey: @\"starthour\"];\n  [block setObject: [NSNumber numberWithUnsignedInt: start]\n\t forKey: @\"start\"];\n}\n\n- (NSMutableDictionary *) _eventBlockWithStart: (unsigned int) start\n\t\t\t\t\t   end: (unsigned int) end\n\t\t\t\t\tnumber: (NSNumber *) number\n\t\t\t\t\t onDay: (unsigned int) dayStart\n\t\t\t\trecurrenceTime: (unsigned int) recurrenceTime\n\t\t\t\t     userState: (iCalPersonPartStat) userState\n{\n  NSMutableDictionary *block;\n\n  block = [NSMutableDictionary dictionary];\n\n  if (dayBasedView)\n    _feedBlockWithDayBasedData (block, start, end, dayStart);\n  else\n    _feedBlockWithMonthBasedData (block, start, userTimeZone, dateFormatter);\n  [block setObject: number forKey: @\"nbr\"];\n  if (recurrenceTime)\n    [block setObject: [NSNumber numberWithInt: recurrenceTime]\n\t   forKey: @\"recurrenceTime\"];\n  if (userState != iCalPersonPartStatOther)\n    [block setObject: [NSNumber numberWithInt: userState]\n\t   forKey: @\"userState\"];\n\n  return block;\n}\n\nstatic inline iCalPersonPartStat\n_userStateInEvent (NSArray *event)\n{\n  unsigned int count, max;\n  iCalPersonPartStat state;\n  NSString *partList, *stateList;\n  NSArray *participants, *states;\n  SOGoUser *user;\n\n  participants = nil;\n  state = iCalPersonPartStatOther;\n\n  partList = [event objectAtIndex: eventPartMailsIndex];\n  stateList = [event objectAtIndex: eventPartStatesIndex];\n  if ([partList length] && [stateList length])\n    {\n      participants = [partList componentsSeparatedByString: @\"\\n\"];\n      states = [stateList componentsSeparatedByString: @\"\\n\"];\n      count = 0;\n      max = [participants count];\n      while (state == iCalPersonPartStatOther && count < max)\n\t{\n\t  user = [SOGoUser userWithLogin: [event objectAtIndex: eventOwnerIndex]\n\t\t\t   roles: nil];\n\t  if ([user hasEmail: [participants objectAtIndex: count]])\n\t    state = [[states objectAtIndex: count] intValue];\n\t  else\n\t    count++;\n\t}\n    }\n\n  return state;\n}\n\n- (void) _fillBlocks: (NSArray *) blocks\n\t   withEvent: (NSArray *) event\n\t  withNumber: (NSNumber *) number\n{\n  int currentDayStart, startSecs, endsSecs, currentStart, eventStart,\n    eventEnd, computedEventEnd, offset, recurrenceTime, swap;\n  NSMutableArray *currentDay;\n  NSMutableDictionary *eventBlock;\n  iCalPersonPartStat userState;\n\n  eventStart = [[event objectAtIndex: eventStartDateIndex] intValue];\n  if (eventStart < 0)\n    [self errorWithFormat: @\"event '%@' has negative start: %d (skipped)\",\n          [event objectAtIndex: eventNameIndex], eventStart];\n  else\n    {\n      eventEnd = [[event objectAtIndex: eventEndDateIndex] intValue];\n      if (eventEnd < 0)\n        [self errorWithFormat: @\"event '%@' has negative end: %d (skipped)\",\n              [event objectAtIndex: eventNameIndex], eventEnd];\n      else\n        {\n          if (eventEnd < eventStart)\n            {\n              swap = eventStart;\n              eventStart = eventEnd;\n              eventEnd = swap;\n              [self warnWithFormat: @\"event '%@' has end < start: %d < %d\",\n                    [event objectAtIndex: eventNameIndex], eventEnd, eventStart];\n            }\n\n          startSecs = (unsigned int) [startDate timeIntervalSince1970];\n          endsSecs = (unsigned int) [endDate timeIntervalSince1970];\n\n          if ([[event objectAtIndex: eventIsCycleIndex] boolValue])\n            recurrenceTime = [[event objectAtIndex: eventRecurrenceIdIndex] unsignedIntValue];\n          else\n            recurrenceTime = 0;\n\n          currentStart = eventStart;\n          if (currentStart < startSecs)\n            {\n              currentStart = startSecs;\n              offset = 0;\n            }\n          else\n            offset = ((currentStart - startSecs)\n                      / dayLength);\n          if (offset >= [blocks count])\n            [self errorWithFormat: @\"event '%@' has a computed offset that\"\n                  @\" overflows the amount of blocks (skipped)\",\n                  [event objectAtIndex: eventNameIndex]];\n          else\n            {\n              currentDay = [blocks objectAtIndex: offset];\n              currentDayStart = startSecs + dayLength * offset;\n\n              if (eventEnd > endsSecs)\n                eventEnd = endsSecs;\n\n              if (eventEnd < startSecs)\n                // The event doesn't end in the covered period.\n                // This special case occurs with a DST change.\n                return;\n\n              userState = _userStateInEvent (event);\n              while (currentDayStart + dayLength < eventEnd)\n                {\n                  eventBlock = [self _eventBlockWithStart: currentStart\n                                                      end: currentDayStart + dayLength - 1\n                                                   number: number\n                                                    onDay: currentDayStart\n                                           recurrenceTime: recurrenceTime\n                                                userState: userState];\n                  [currentDay addObject: eventBlock];\n                  currentDayStart += dayLength;\n                  currentStart = currentDayStart;\n                  offset++;\n                  currentDay = [blocks objectAtIndex: offset];\n                }\n\n\t      computedEventEnd = eventEnd;\n\n\t      // We add 5 mins to the end date of an event if the end date\n\t      // is equal or smaller than the event's start date.\n\t      if (eventEnd <= currentStart)\n\t\tcomputedEventEnd = currentStart + (5*60);\n\t      \n\t      eventBlock = [self _eventBlockWithStart: currentStart\n\t\t\t\t\t\t  end: computedEventEnd\n\t\t\t\t\t       number: number\n\t\t\t\t\t\tonDay: currentDayStart\n\t\t\t\t       recurrenceTime: recurrenceTime\n\t\t\t\t\t    userState: userState];\n\t      [currentDay addObject: eventBlock];\n\t    }\n        }\n    }\n}\n\n- (void) _prepareEventBlocks: (NSMutableArray **) blocks\n\t\t withAllDays: (NSMutableArray **) allDayBlocks\n{\n  unsigned int count, nbrDays;\n  int seconds;\n\n  seconds = [endDate timeIntervalSinceDate: startDate];\n  if (seconds > 0)\n    {\n      nbrDays = 1 + (unsigned int) (seconds / dayLength);\n      *blocks = [NSMutableArray arrayWithCapacity: nbrDays];\n      *allDayBlocks = [NSMutableArray arrayWithCapacity: nbrDays];\n      for (count = 0; count < nbrDays; count++)\n\t{\n\t  [*blocks addObject: [NSMutableArray array]];\n\t  [*allDayBlocks addObject: [NSMutableArray array]];\n\t}\n    }\n  else\n    {\n      *blocks = nil;\n      *allDayBlocks = nil;\n    }\n}\n\n- (NSArray *) _horizontalBlocks: (NSMutableArray *) day\n{\n  NSMutableArray *quarters[96];\n  NSMutableArray *currentBlock, *blocks;\n  NSDictionary *currentEvent;\n  unsigned int count, max, qCount, qMax, qOffset;\n\n  blocks = [NSMutableArray array];\n\n  bzero (quarters, 96 * sizeof (NSMutableArray *));\n\n  max = [day count];\n  for (count = 0; count < max; count++)\n    {\n      currentEvent = [day objectAtIndex: count];\n      qMax = [[currentEvent objectForKey: @\"length\"] unsignedIntValue];\n      qOffset = [[currentEvent objectForKey: @\"start\"] unsignedIntValue];\n      for (qCount = 0; qCount < qMax; qCount++)\n\t{\n\t  currentBlock = quarters[qCount + qOffset];\n\t  if (!currentBlock)\n\t    {\n\t      currentBlock = [NSMutableArray array];\n\t      quarters[qCount + qOffset] = currentBlock;\n\t      [blocks addObject: currentBlock];\n\t    }\n\t  [currentBlock addObject: currentEvent];\n\t}\n    }\n\n  return blocks;\n}\n\nstatic inline unsigned int\n_computeMaxBlockSiblings (NSArray *block)\n{\n  unsigned int count, max, maxSiblings, siblings;\n  NSNumber *nbrEvents;\n\n  max = [block count];\n  maxSiblings = max;\n  for (count = 0; count < max; count++)\n    {\n      nbrEvents = [[block objectAtIndex: count] objectForKey: @\"siblings\"];\n      if (nbrEvents)\n\t{\n\t  siblings = [nbrEvents unsignedIntValue];\n\t  if (siblings > maxSiblings)\n\t    maxSiblings = siblings;\n\t}\n    }\n\n  return maxSiblings;\n}\n\nstatic inline void\n_propagateBlockSiblings (NSArray *block, NSNumber *maxSiblings)\n{\n  unsigned int count, max;\n  NSMutableDictionary *event;\n  NSNumber *realSiblings;\n\n  max = [block count];\n  realSiblings = [NSNumber numberWithUnsignedInt: max];\n  for (count = 0; count < max; count++)\n    {\n      event = [block objectAtIndex: count];\n      [event setObject: maxSiblings forKey: @\"siblings\"];\n      [event setObject: realSiblings forKey: @\"realSiblings\"];\n    }\n}\n\n/* this requires two vertical passes */\nstatic inline void\n_computeBlocksSiblings (NSArray *blocks)\n{\n  NSArray *currentBlock;\n  unsigned int count, max, maxSiblings;\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      currentBlock = [blocks objectAtIndex: count];\n      maxSiblings = _computeMaxBlockSiblings (currentBlock);\n      _propagateBlockSiblings (currentBlock,\n\t\t\t       [NSNumber numberWithUnsignedInt: maxSiblings]);\n    }\n}\n\nstatic inline void\n_computeBlockPosition (NSArray *block)\n{\n  unsigned int count, max, j, siblings;\n  NSNumber *position;\n  NSMutableDictionary *event;\n  NSMutableDictionary **positions;\n\n  max = [block count];\n  event = [block objectAtIndex: 0];\n  siblings = [[event objectForKey: @\"siblings\"] unsignedIntValue];\n  positions = NSZoneCalloc (NULL, siblings, sizeof (NSMutableDictionary *));\n\n  for (count = 0; count < max; count++)\n    {\n      event = [block objectAtIndex: count];\n      position = [event objectForKey: @\"position\"];\n      if (position)\n\t*(positions + [position unsignedIntValue]) = event;\n      else\n\t{\n\t  j = 0;\n\t  while (j < max && *(positions + j))\n\t    j++;\n\t  *(positions + j) = event;\n\t  [event setObject: [NSNumber numberWithUnsignedInt: j]\n\t\t forKey: @\"position\"];\n\t}\n    }\n\n  NSZoneFree (NULL, positions);\n}\n\n// static inline void\n// _addBlockMultipliers (NSArray *block, NSMutableDictionary **positions)\n// {\n//   unsigned int count, max, limit, multiplier;\n//   NSMutableDictionary *currentEvent, *event;\n\n//   max = [block count];\n//   event = [block objectAtIndex: 0];\n//   limit = [[event objectForKey: @\"siblings\"] unsignedIntValue];\n\n//   if (max < limit)\n//     {\n//       currentEvent = nil;\n//       for (count = 0; count < limit; count++)\n// \t{\n// \t  multiplier = 1;\n// \t  event = positions[count];\n// \t  if ([[event objectForKey: @\"realSiblings\"] unsignedIntValue]\n// \t      < limit)\n// \t    {\n// \t      if (event)\n// \t\t{\n// \t\t  if (currentEvent && multiplier > 1)\n// \t\t    [currentEvent setObject: [NSNumber numberWithUnsignedInt: multiplier]\n// \t\t\t\t  forKey: @\"multiplier\"];\n// \t\t  currentEvent = event;\n// \t\t  multiplier = 1;\n// \t\t}\n// \t      else\n// \t\tmultiplier++;\n// \t    }\n// \t}\n//     }\n// }\n\nstatic inline void\n_computeBlocksPosition (NSArray *blocks)\n{\n  NSArray *block;\n  unsigned int count, max;\n//   NSMutableDictionary **positions;\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      block = [blocks objectAtIndex: count];\n      _computeBlockPosition (block);\n//       _addBlockMultipliers (block, positions);\n//       NSZoneFree (NULL, positions);\n    }\n}\n\n- (void) _addBlocksWidth: (NSMutableArray *) day\n{\n  NSArray *blocks;\n\n  blocks = [self _horizontalBlocks: day];\n  _computeBlocksSiblings (blocks);\n  _computeBlocksSiblings (blocks);\n  _computeBlocksPosition (blocks);\n  /* ... _computeBlocksMultiplier() ... */\n}\n\n- (WOResponse *) eventsBlocksAction\n{\n  int count, max;\n  NSArray *events, *event, *eventsBlocks;\n  NSMutableArray *allDayBlocks, *blocks, *currentDay;\n  NSNumber *eventNbr;\n  BOOL isAllDay;\n\n  [self _setupContext];\n\n  [self _prepareEventBlocks: &blocks withAllDays: &allDayBlocks];\n  events = [self _fetchFields: eventsFields\n\t\t forComponentOfType: @\"vevent\"];\n  eventsBlocks\n    = [NSArray arrayWithObjects: events, allDayBlocks, blocks, nil];\n  max = [events count];\n  for (count = 0; count < max; count++)\n    {\n      event = [events objectAtIndex: count];\n//      NSLog(@\"***[UIxCalListingActions eventsBlocksAction] %i = %@ : %@ / %@ / %@\", count,\n//\t    [event objectAtIndex: eventTitleIndex],\n//\t    [event objectAtIndex: eventStartDateIndex],\n//\t    [event objectAtIndex: eventEndDateIndex],\n//\t    [event objectAtIndex: eventRecurrenceIdIndex]);\n      eventNbr = [NSNumber numberWithUnsignedInt: count];\n      isAllDay = [[event objectAtIndex: eventIsAllDayIndex] boolValue];\n      if (dayBasedView && isAllDay)\n\t[self _fillBlocks: allDayBlocks withEvent: event withNumber: eventNbr];\n      else\n\t[self _fillBlocks: blocks withEvent: event withNumber: eventNbr];\n    }\n\n  max = [blocks count];\n  for (count = 0; count < max; count++)\n    {\n      currentDay = [blocks objectAtIndex: count];\n      [currentDay sortUsingSelector: @selector (compareEventByStart:)];\n      [self _addBlocksWidth: currentDay];\n    }\n\n  return [self _responseWithData: eventsBlocks];\n//   timeIntervalSinceDate:\n}\n\n- (NSString *) _getStatusClassForStatusCode: (int) statusCode\n\t\t\t    andEndDateStamp: (unsigned int) endDateStamp\n{\n  NSCalendarDate *taskDate, *now;\n  NSString *statusClass;\n\n  if (statusCode == 1)\n    statusClass = @\"completed\";\n  else\n    {\n      if (endDateStamp)\n        {\n          now = [NSCalendarDate calendarDate];\n          taskDate\n\t    = [NSCalendarDate dateWithTimeIntervalSince1970: endDateStamp];\n          [taskDate setTimeZone: userTimeZone];\n          if ([taskDate earlierDate: now] == taskDate)\n            statusClass = @\"overdue\";\n          else\n            {\n              if ([taskDate isToday])\n                statusClass = @\"duetoday\";\n              else\n                statusClass = @\"duelater\";\n            }\n        }\n      else\n        statusClass = @\"noduedate\";\n    }\n\n  return statusClass;\n}\n\n- (WOResponse *) tasksListAction\n{\n  NSMutableArray *filteredTasks, *filteredTask;\n  NSString *sort, *ascending;\n  NSString *statusFlag;\n  SOGoUserSettings *us;\n  NSEnumerator *tasks;\n  NSArray *task;\n\n  unsigned int endDateStamp;\n  BOOL showCompleted;\n  int statusCode;\n\n  filteredTasks = [NSMutableArray array];\n\n  [self _setupContext];\n\n#warning see TODO in SchedulerUI.js about \"setud\"\n  showCompleted = [[request formValueForKey: @\"show-completed\"] intValue];\n  if ([request formValueForKey: @\"setud\"])\n    {\n      us = [[context activeUser] userSettings];\n      [us setBool: showCompleted forKey: @\"ShowCompletedTasks\"];\n      [us synchronize];\n    }\n\n  tasks = [[self _fetchFields: tasksFields\n\t\t forComponentOfType: @\"vtodo\"] objectEnumerator];\n  while ((task = [tasks nextObject]))\n    {\n      statusCode = [[task objectAtIndex: 3] intValue];\n      if (statusCode != 1 || showCompleted)\n\t{\n\t  filteredTask = [NSMutableArray arrayWithArray: task];\n\t  endDateStamp = [[task objectAtIndex: 5] intValue];\n\t  statusFlag = [self _getStatusClassForStatusCode: statusCode\n\t\t\t     andEndDateStamp: endDateStamp];\n\t  [filteredTask addObject: statusFlag];\n          if (endDateStamp > 0)\n            [filteredTask addObject: [self _formattedDateForSeconds: endDateStamp\n                                                          forAllDay: NO]];\n\t  [filteredTasks addObject: filteredTask];\n\t}\n    }\n  sort = [[context request] formValueForKey: @\"sort\"];\n  if ([sort isEqualToString: @\"title\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksTitleAscending:)];\n  else if ([sort isEqualToString: @\"priority\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksPriorityAscending:)];\n  else if ([sort isEqualToString: @\"end\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksEndAscending:)];\n  else if ([sort isEqualToString: @\"location\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksLocationAscending:)];\n  else if ([sort isEqualToString: @\"category\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksCategoryAscending:)];\n  else if ([sort isEqualToString: @\"calendarname\"])\n    [filteredTasks sortUsingSelector: @selector (compareTasksCalendarNameAscending:)];\n  else \n    [filteredTasks sortUsingSelector: @selector (compareTasksAscending:)];\n\n  ascending = [[context request] formValueForKey: @\"asc\"];\n  if (![ascending boolValue])\n    [filteredTasks reverseArray];\n\n  return [self _responseWithData: filteredTasks];\n}\n\n@end\n", "var listFilter = 'view_today';\n\nvar listOfSelection = null;\nvar selectedCalendarCell = null;\n\nvar showCompletedTasks;\n\nvar currentDay = '';\nvar selectedDayNumber = -1;\nvar selectedDayDate = '';\n\nvar cachedDateSelectors = [];\n\nvar contactSelectorAction = 'calendars-contacts';\n\nvar eventsToDelete = [];\nvar calendarsOfEventsToDelete = [];\n\nvar usersRightsWindowHeight = 215;\nvar usersRightsWindowWidth = 502;\n\nvar calendarEvents = null;\n\nvar preventAutoScroll = false;\n\nvar userStates = [ \"needs-action\", \"accepted\", \"declined\", \"tentative\", \"delegated\" ];\n\nvar calendarHeaderAdjusted = false;\n\nvar categoriesStyles = new Hash();\nvar categoriesStyleSheet = null;\n\nvar clipboard = null;\nvar eventsToCopy = [];\n\nfunction newEvent(type, day, hour, duration) {\n    var folder = null;\n    if (UserDefaults['SOGoDefaultCalendar'] == 'personal')\n        folder = $(\"calendarList\").down(\"li\");\n    else if (UserDefaults['SOGoDefaultCalendar'] == 'first') {\n        var list = $(\"calendarList\");\n        var inputs = list.select(\"input\");\n        for (var i = 0; i < inputs.length; i++) {\n            var input = inputs[i];\n            if (input.checked) {\n                folder = input.up();\n                break;\n            }\n        }\n        if (!folder)\n            folder = list.down(\"li\");\n    }\n    else\n        folder = getSelectedFolder();\n    var folderID = folder.readAttribute(\"id\");\n    var urlstr = ApplicationBaseURL + folderID + \"/new\" + type;\n    var params = [];\n    if (!day)\n        day = currentDay;\n    params.push(\"day=\" + day);\n    if (hour)\n        params.push(\"hm=\" + hour);\n    if (duration)\n        params.push(\"duration=\" + duration);\n    if (params.length > 0)\n        urlstr += \"?\" + params.join(\"&\");\n\n    window.open(urlstr, \"\", \"width=490,height=470,resizable=0\");\n\n    return false; /* stop following the link */\n}\n\nfunction newEventFromWidget(sender, type) {\n    var day = $(sender).readAttribute(\"day\");\n    var hour = sender.readAttribute(\"hour\");\n\n    return newEvent(type, day, hour);\n}\n\nfunction minutesToHM(minutes) {\n    var hours = Math.floor(minutes / 60);\n    if (hours < 10)\n        hours = \"0\" + hours;\n    var mins = minutes % 60;\n    if (mins < 10)\n        mins = \"0\" + mins;\n\n    return \"\" + hours + mins;\n}\n\nfunction newEventFromDragging(controller, day, coordinates) {\n    var startHm;\n    if (controller.eventType == \"multiday\")\n        startHm = minutesToHM(coordinates.start * 15);\n    else\n        startHm = \"allday\";\n    var lengthHm = minutesToHM(coordinates.duration * 15);\n    newEvent(\"event\", day, startHm, lengthHm);\n}\n\nfunction updateEventFromDragging(controller, eventCells, eventDelta) {\n    if (eventDelta.dayNumber || eventDelta.start || eventDelta.duration) {\n        var params = (\"days=\" + eventDelta.dayNumber\n                      + \"&start=\" + eventDelta.start * 15\n                      + \"&duration=\" + eventDelta.duration * 15);\n        // log(\"eventCells: \" + eventCells.length);\n        var eventCell = eventCells[0];\n        // log(\"  time: \" + eventCell.recurrenceTime);\n        // log(\"  exception: \" + eventCell.isException);\n\n        if (eventCell.recurrenceTime && !eventCell.isException)\n            _editRecurrenceDialog(eventCell, \"confirmAdjustment\", params);\n        else {\n            var urlstr = (ApplicationBaseURL\n                          + eventCell.calendar + \"/\" + eventCell.cname);\n            if (eventCell.recurrenceTime)\n                urlstr += \"/occurence\" + eventCell.recurrenceTime;\n            urlstr += (\"/adjust?\" + params);\n            // log(\"  urlstr: \" + urlstr);\n            triggerAjaxRequest(urlstr, updateEventFromDraggingCallback);\n        }\n    }\n}\n\nfunction performEventAdjustment(folder, event, recurrence, params) {\n    var urlstr = ApplicationBaseURL + folder + \"/\" + event;\n    if (recurrence)\n        urlstr += \"/\" + recurrence;\n    urlstr += \"/adjust\" + generateQueryString(params);\n    triggerAjaxRequest(urlstr, updateEventFromDraggingCallback);\n}\n\nfunction updateEventFromDraggingCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            refreshEventsAndDisplay();\n        }\n        else {\n            var response = http.responseText.evalJSON(true);\n            showAlertDialog(response['message']);\n        }\n    }\n}\n\nfunction getSelectedFolder() {\n    var folder;\n    var list = $(\"calendarList\");\n    var nodes = list.getSelectedRows();\n    if (nodes.length > 0)\n        folder = nodes[0];\n    else\n        folder = list.down(\"li\"); // personal calendar\n\n    return folder;\n}\n\nfunction onMenuNewEventClick(event) {\n    var target = document.menuTarget;\n    if (/(minutes\\d{2}|dayHeader)/.test(target.className))\n        target = target.parentNode;\n    newEventFromWidget(target, \"event\");\n}\n\nfunction onMenuNewTaskClick(event) {\n    var target = document.menuTarget;\n    if (/(minutes\\d{2}|dayHeader)/.test(target.className))\n        target = target.parentNode;\n    newEventFromWidget(target, \"task\");\n}\n\nfunction _editEventId(id, calendar, recurrence) {\n    var targetname = \"SOGo_edit_\" + id;\n    var urlstr = ApplicationBaseURL + calendar + \"/\" + id;\n    if (recurrence) {\n        urlstr += \"/\" + recurrence;\n        targetname += recurrence;\n    }\n    urlstr += \"/edit\";\n    var win = window.open(urlstr, \"_blank\",\n                          \"width=490,height=470,resizable=0\");\n    if (win)\n        win.focus();\n}\n\nfunction editEvent() {\n    if (listOfSelection) {\n        var nodes = listOfSelection.getSelectedRows();\n\n        if (nodes.length == 0) {\n            showAlertDialog(_(\"Please select an event or a task.\"));\n            return false;\n        }\n\n        for (var i = 0; i < nodes.length; i++)\n            _editEventId(nodes[i].cname,\n                         nodes[i].calendar);\n    } else if (selectedCalendarCell) {\n        if (selectedCalendarCell[0].recurrenceTime && !selectedCalendarCell[0].isException)\n            _editRecurrenceDialog(selectedCalendarCell[0], \"confirmEditing\");\n        else\n            _editEventId(selectedCalendarCell[0].cname,\n                         selectedCalendarCell[0].calendar);\n    } else {\n        showAlertDialog(_(\"Please select an event or a task.\"));\n    }\n\n    return false; /* stop following the link */\n}\n\nfunction _batchDeleteEvents() {\n    // Delete the events of the next calendar\n    var calendar = calendarsOfEventsToDelete.shift();\n    var events = eventsToDelete.shift();\n    var urlstr = (ApplicationBaseURL + calendar\n                  + \"/batchDelete?ids=\" + events.join(','));\n    document.deleteEventAjaxRequest = triggerAjaxRequest(urlstr,\n                                                         deleteEventCallback,\n                                                         { calendar: calendar, events: events });\n}\n\nfunction deleteEvent() {\n    var label = \"\";\n    var events = [];\n    if (listOfSelection) {\n        var nodes = listOfSelection.getSelectedRows();\n        if (nodes.length > 0) {\n            if (listOfSelection.parentNode == $(\"tasksList\"))\n                label = _(\"taskDeleteConfirmation\");\n            else\n                label = _(\"eventDeleteConfirmation\");\n\n            if (nodes.length == 1\n                && nodes[0].recurrenceTime) {\n                if (nodes[0].erasable)\n                    _editRecurrenceDialog(nodes[0], \"confirmDeletion\");\n                else\n                    showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n            }\n            else {\n                var canDelete;\n                var sortedNodes = [];\n                var calendars = [];\n                for (var i = 0; i < nodes.length; i++) {\n                    canDelete = nodes[i].erasable;\n                    if (canDelete) {\n                        var calendar = nodes[i].calendar;\n                        var cname = nodes[i].cname;\n                        if (nodes[i].recurrenceTime) {\n                            cname += '/occurence' + nodes[i].recurrenceTime;\n                        }\n                        if (!sortedNodes[calendar]) {\n                            sortedNodes[calendar] = [];\n                            calendars.push(calendar);\n                        }\n                        if (sortedNodes[calendar].indexOf(cname) < 0) {\n                            // Build list item element for confirmation dialog\n                            var itemElement = new Element('li');\n                            var colorBox = new Element('div', {'class': 'colorBox calendarFolder' + nodes[i].calendar});\n                            var content = '';\n                            if (nodes[i].tagName == 'TR') {\n                                var cell = nodes[i].down('td span');\n                                content = cell.allTextContent(); // extract the first column only\n                            }\n                            else {\n                                content = nodes[i].allTextContent();\n                            }\n                            itemElement.appendChild(colorBox);\n                            itemElement.appendChild(new Element('span').update(content));\n                            if (nodes[i].startDate) {\n                                var startDate = new Date(nodes[i].startDate*1000);\n                                var dateElement = new Element('div', {'class': 'muted'});\n                                var date;\n                                if (typeof nodes[i].hour == 'undefined')\n                                    date = startDate.toLocaleDateString(localeCode);\n                                else\n                                    date = startDate.toLocaleString(localeCode);\n                                dateElement.update(date);\n                                itemElement.appendChild(dateElement);\n                            }\n                            events.push(itemElement);\n                            sortedNodes[calendar].push(cname);\n                        }\n                    }\n                }\n                // Update global arrays\n                for (i = 0; i < calendars.length; i++) {\n                    calendarsOfEventsToDelete.push(calendars[i]);\n                    eventsToDelete.push(sortedNodes[calendars[i]]);\n                }\n                if (i == 0)\n                    showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n            }\n        }\n        else\n            showAlertDialog(_(\"Please select an event or a task.\"));\n    }\n    else if (selectedCalendarCell) {\n        if (selectedCalendarCell.length == 1\n            && selectedCalendarCell[0].recurrenceTime) {\n            if (selectedCalendarCell[0].erasable)\n                _editRecurrenceDialog(selectedCalendarCell[0], \"confirmDeletion\");\n            else\n                showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        }\n        else {\n            var canDelete;\n            var sortedNodes = [];\n            var calendars = [];\n            var cname;\n            for (var i = 0; i < selectedCalendarCell.length; i++) {\n                canDelete = selectedCalendarCell[i].erasable;\n                if (canDelete) {\n                    var calendar = selectedCalendarCell[i].calendar;\n                    var cname = selectedCalendarCell[i].cname;\n                    if (selectedCalendarCell[i].recurrenceTime) {\n                        cname += '/occurence' + selectedCalendarCell[i].recurrenceTime;\n                    }\n                    if (!sortedNodes[calendar]) {\n                        sortedNodes[calendar] = [];\n                        calendars.push(calendar);\n                    }\n                    if (sortedNodes[calendar].indexOf(cname) < 0) {\n                        // Build list item element for confirmation dialog\n                        var itemElement = new Element('li');\n                        var colorBox = new Element('div', {'class': 'colorBox calendarFolder' + selectedCalendarCell[i].calendar});\n                        var content = '';\n                        var event = $(selectedCalendarCell[i]).down(\"DIV.text\");\n                        for (var j = 0; j < event.childNodes.length; j++) {\n                            var node = event.childNodes[j];\n                            if (node.nodeType == Node.TEXT_NODE) {\n                                content += node.nodeValue;\n                            }\n                        }\n                        itemElement.appendChild(colorBox);\n                        itemElement.appendChild(new Element('span').update(content));\n                        if (selectedCalendarCell[i].startDate) {\n                            var startDate = new Date(selectedCalendarCell[i].startDate*1000);\n                            var dateElement = new Element('div', {'class': 'muted'});\n                            var date;\n                            if (selectedCalendarCell[i].readAttribute('hour') == 'allday')\n                                date = startDate.toLocaleDateString(localeCode);\n                            else\n                                date = startDate.toLocaleString(localeCode);\n                            dateElement.update(date);\n                            itemElement.appendChild(dateElement);\n                        }\n                        events.push(itemElement);\n                        sortedNodes[calendar].push(cname);\n                    }\n                }\n            }\n            // Update global arrays\n            for (i = 0; i < calendars.length; i++) {\n                calendarsOfEventsToDelete.push(calendars[i]);\n                eventsToDelete.push(sortedNodes[calendars[i]]);\n            }\n            if (i == 0)\n                showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        }\n    }\n    else\n        showAlertDialog(_(\"Please select an event or a task.\"));\n\n    if (events.length > 0) {\n        // Show confirmation dialog\n        var p = new Element('p');\n        p.appendChild(document.createTextNode(label));\n        var list = new Element('ul');\n        for (i = 0; i < events.length; i++) {\n            list.appendChild(events[i]);\n        }\n        p.appendChild(list);\n        p.appendChild(document.createTextNode(_(\"Would you like to continue?\")));\n        showConfirmDialog(_(\"Warning\"), p, deleteEventFromListConfirm, deleteEventCancel);\n    }\n\n    return false;\n}\n\nfunction deleteEventFromListConfirm() {\n    if (document.deleteEventAjaxRequest) {\n        document.deleteEventAjaxRequest.aborted = true;\n        document.deleteEventAjaxRequest.abort();\n    }\n\n    _batchDeleteEvents();\n    disposeDialog();\n}\n\nfunction deleteEventFromViewConfirm() {\n    if (document.deleteEventAjaxRequest) {\n        document.deleteEventAjaxRequest.aborted = true;\n        document.deleteEventAjaxRequest.abort();\n    }\n\n    selectedCalendarCell = null;\n    _batchDeleteEvents();\n    disposeDialog();\n}\n\nfunction deleteEventCancel(event) {\n    calendarsOfEventsToDelete = [];\n    eventsToDelete = [];\n    disposeDialog();\n}\n\nfunction copyEventToClipboard() {\n    if (listOfSelection) {\n        clipboard = new Array();\n        var nodes = listOfSelection.getSelectedRows();\n        for (var i = 0; i < nodes.length; i++)\n            clipboard.push(nodes[i].calendar + \"/\" + nodes[i].cname);\n    }\n    else if (selectedCalendarCell) {\n        clipboard = new Array();\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            clipboard.push(selectedCalendarCell[i].calendar + \"/\" + selectedCalendarCell[i].cname);\n    }\n    log (\"clipboard : \" + clipboard.join(\", \"));\n}\n\nfunction copyEventFromClipboard() {\n    if (clipboard && clipboard.length > 0) {\n        var folder = getSelectedFolder();\n        var folderID = folder.readAttribute(\"id\").substr(1);\n        eventsToCopy = [];\n        for (var i = 0; i < clipboard.length; i++)\n            eventsToCopy[i] = clipboard[i] + \"/copy?destination=\" + folderID;\n        copyEvents();\n    }\n}\n\nfunction copyEventToPersonalCalendar(event) {\n    var calendar = selectedCalendarCell[0].calendar;\n    var cname = selectedCalendarCell[0].cname;\n    eventsToCopy = [calendar + \"/\" + cname + \"/copy\"];\n    copyEvents();\n}\n\nfunction copyEvents() {\n    var path = eventsToCopy.shift();\n    var urlstr = ApplicationBaseURL + path; log (urlstr);\n    triggerAjaxRequest(urlstr,\n                       copyEventCallback);\n}\n\nfunction copyEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            if (eventsToCopy.length)\n                copyEvents();\n            else\n                refreshEventsAndDisplay();\n        }\n        else if (parseInt(http.status) == 403)\n            showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        else if (parseInt(http.status) == 400)\n            showAlertDialog(_(\"DestinationCalendarError\"));\n        else\n            showAlertDialog(_(\"EventCopyError\"));\n    }\n}\n\nfunction onMenuRawEvent(event) {\n    if (selectedCalendarCell.length != 1) {\n      return;\n    }\n\n    var calendar = selectedCalendarCell[0].calendar;\n    var cname = selectedCalendarCell[0].cname;\n\n    var url = ApplicationBaseURL + calendar + \"/\" + cname + \"/raw\";\n    openGenericWindow(url);\n}\n\nfunction modifyEvent(sender, modification, parameters) {\n    var currentLocation = '' + window.location;\n    var arr = currentLocation.split(\"/\");\n    arr[arr.length-1] = modification;\n\n    document.modifyEventAjaxRequest = triggerAjaxRequest(arr.join(\"/\"),\n                                                         modifyEventCallback,\n                                                         modification,\n                                                         parameters,\n                                                         { \"Content-type\": \"application/x-www-form-urlencoded\" });\n\n    return false;\n}\n\nfunction closeInvitationWindow() {\n    var closeDiv = document.createElement(\"div\");\n    document.body.appendChild(closeDiv);\n    closeDiv.addClassName(\"javascriptPopupBackground\");\n\n    var closePseudoWin = document.createElement(\"div\");\n    document.body.appendChild(closePseudoWin);\n    closePseudoWin.addClassName(\"javascriptMessagePseudoTopWindow\");\n    closePseudoWin.style.top = \"0px;\";\n    closePseudoWin.style.left = \"0px;\";\n    closePseudoWin.style.right = \"0px;\";\n    closePseudoWin.appendChild(document.createTextNode(_(\"closeThisWindowMessage\")));\n\n    var calLink = document.createElement(\"a\");\n    closePseudoWin.appendChild(calLink);\n    calLink.href = ApplicationBaseURL;\n    calLink.appendChild(document.createTextNode(_(\"Calendar\").toLowerCase()));\n}\n\nfunction modifyEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status) || http.status == 200) {\n            var mailInvitation = queryParameters[\"mail-invitation\"];\n            if (mailInvitation && mailInvitation.toLowerCase() == \"yes\")\n                closeInvitationWindow();\n            else {\n                window.opener.setTimeout(\"refreshEventsAndDisplay();\", 100);\n                window.setTimeout(\"window.close();\", 100);\n            }\n        }\n        else if (http.status == 403) {\n            var data = http.responseText;\n            var msg;\n            if (data.indexOf(\"An error occurred during object publishing\") >\n                -1) {\n                msg = data.replace(/^(.*\\n)*.*<p>((.*\\n)*.*)<\\/p>(.*\\n)*.*$/, \"$2\");\n            } else {\n                msg = \"delegate is a participant\";\n            }\n            showAlertDialog(_(msg));\n        }\n        else {\n            showAlertDialog(_(\"eventPartStatModificationError\"));\n        }\n        document.modifyEventAjaxRequest = null;\n    }\n}\n\nfunction _deleteCalendarEventBlocks(calendar, cname, occurenceTime) {\n    // Delete event (or occurence) from the specified calendar\n    var ownerIsOrganizer = false;\n    var events = calendarEvents[calendar];\n    if (events) {\n        var occurences = events[cname];\n        if (occurences) {\n            for (var i = 0; i < occurences.length; i++) {\n                var nodes = occurences[i].blocks;\n                for (var j = 0; j < nodes.length; j++) {\n                    var node = nodes[j];\n                    if (occurenceTime == null\n                        || occurenceTime == node.recurrenceTime) {\n                        ownerIsOrganizer = node.ownerIsOrganizer;\n                        node.parentNode.removeChild(node);\n                    }\n                }\n            }\n            if (ownerIsOrganizer)\n                // Search for the same event in other calendars (using the cache)\n                // only if the delete operation is triggered from the organizer's\n                // calendar.\n                for (var otherCalendar in calendarEvents) {\n                    if (calendar != otherCalendar) {\n                        occurences = calendarEvents[otherCalendar][cname];\n                        if (occurences) {\n                            for (var i = 0; i < occurences.length; i++) {\n                                var occurence = occurences[i];\n                                if (occurenceTime == null || occurenceTime == occurence[15]) {\n                                    var nodes = occurence.blocks;\n                                    for (var j = 0; j < nodes.length; j++) {\n                                        var node = nodes[j];\n                                        if (node.parentNode)\n                                            node.parentNode.removeChild(node);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    resizeCalendarHeaderDIV();\n}\n\nfunction _deleteEventFromTables(calendar, cname, occurenceTime) {\n    var basename = \"-\" + cname;\n    if (occurenceTime) {\n        basename = basename + \"-\" + occurenceTime;\n    }\n    if (calendarEvents[calendar]) {\n        var occurences = calendarEvents[calendar][cname];\n        if (occurences) {\n            var occurence = occurences.first();\n            var ownerIsOrganizer = occurence[19];\n\n            // Delete event from events list\n            var table = $(\"eventsList\");\n            var rows = table.tBodies[0].rows;\n            for (var j = rows.length; j > 0; j--) {\n                var row = $(rows[j - 1]);\n                var id = row.getAttribute(\"id\");\n                var pos = id.indexOf(basename);\n                if (pos > 0) {\n                    var otherCalendar = id.substr(0, pos);\n                    occurences = calendarEvents[otherCalendar][cname];\n                    if (occurences) {\n                        for (var k = 0; k < occurences.length; k++) {\n                            var occurence = occurences[k];\n                            if (calendar == otherCalendar || ownerIsOrganizer) {\n                                // This is the specified event or the same event in another\n                                // calendar. In this case, remove it only if the delete\n                                // operation is triggered from the organizer's calendar.\n                                if (occurenceTime == null || occurenceTime == occurence[15]) {\n                                    row.parentNode.removeChild(row);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Delete task from tasks list\n    var row = $(calendar + basename);\n    if (row) {\n        row.parentNode.removeChild(row);\n    }\n}\n\nfunction _deleteCalendarEventCache(calendar, cname, occurenceTime) {\n    var ownerIsOrganizer = false;\n    if (calendarEvents[calendar]) {\n        var occurences = calendarEvents[calendar][cname];\n        if (occurences)\n            ownerIsOrganizer = occurences[0][19];\n    }\n\n    for (var otherCalendar in calendarEvents) {\n        if (calendarEvents[otherCalendar]) {\n            var occurences = calendarEvents[otherCalendar][cname];\n            if (occurences) {\n                var newOccurences = [];\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    if (calendar == otherCalendar || ownerIsOrganizer) {\n                        // This is the specified event or the same event in another\n                        // calendar. In this case, remove it only if the delete\n                        // operation is triggered from the organizer's calendar.\n                        if (occurenceTime == null) {\n                            delete calendarEvents[otherCalendar][cname];\n                        }\n                        else if (occurenceTime != occurence[15]) {\n                            // || occurenceTime == occurence[15]) {\n                            newOccurences.push(occurence);\n                        }\n                    }\n                }\n                if (occurenceTime)\n                    calendarEvents[otherCalendar][cname] = newOccurences;\n            }\n        }\n    }\n}\n\n/**\n * This is the Ajax callback function for _batchDeleteEvents.\n */\nfunction deleteEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var isTask = false;\n            var calendar = http.callbackData.calendar;\n            var events = http.callbackData.events;\n            for (var i = 0; i < events.length; i++) {\n                var cname = /(.+)\\/occurence([0-9]+)/.exec(events[i]) || [null, events[i]];\n                _deleteCalendarEventBlocks(calendar, cname[1], cname[2]);\n                _deleteEventFromTables(calendar, cname[1], cname[2]);\n                _deleteCalendarEventCache(calendar, cname[1], cname[2]);\n            }\n            if (eventsToDelete.length)\n                _batchDeleteEvents();\n            else\n                document.deleteEventAjaxRequest = null;\n        }\n        else if (parseInt(http.status) == 403)\n            showAlertDialog(_(\"You don't have the required privileges to perform the operation.\"));\n        else\n            log (\"deleteEventCallback Ajax error (\" + http.status + \")\");\n    }\n}\n\nfunction getEventById(cname, owner) {\n    var event = null;\n\n    if (calendarEvents) {\n        if (!owner)\n            owner = UserLogin;\n        var userEvents = calendarEvents[owner];\n        if (userEvents)\n            event = userEvents[cname];\n    }\n\n    return event;\n}\n\nfunction _editRecurrenceDialog(eventCell, method, params) {\n    var targetname = \"SOGo_edit_\" + eventCell.cname + eventCell.recurrenceTime;\n    var urlstr = (ApplicationBaseURL + eventCell.calendar + \"/\" + eventCell.cname\n                  + \"/occurence\" + eventCell.recurrenceTime + \"/\" + method);\n    if (params && params.length) {\n        urlstr += \"?\" + params;\n    }\n    var win = window.open(urlstr, \"_blank\",\n                          \"width=490,height=70,resizable=0\");\n    if (win)\n        win.focus();\n}\n\nfunction onViewEvent(event) {\n    if (event.detail == 2) return;\n    var url = ApplicationBaseURL + this.calendar + \"/\" + this.cname;\n\n    if (typeof this.recurrenceTime != \"undefined\")\n        url += \"/occurence\" + this.recurrenceTime;\n    url += \"/view\";\n    if (document.viewEventAjaxRequest) {\n        document.viewEventAjaxRequest.aborted = true;\n        document.viewEventAjaxRequest.abort();\n    }\n    document.viewEventAjaxRequest = triggerAjaxRequest(url, onViewEventCallback, this);\n}\n\nfunction onViewEventCallback(http) {\n    if (http.readyState == 4 && http.status == 200) {\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n            //      $H(data).keys().each(function(key) {\n            //\t  log (key + \" = \" + data[key]);\n            //\t});\n            var cell = http.callbackData;\n            var cellPosition = cell.cumulativeOffset();\n            var cellDimensions = cell.getDimensions();\n            var div = $(\"eventDialog\");\n            var divDimensions = div.getDimensions();\n            var view;\n            var left;\n            var top = cellPosition[1] - 5;\n\n            if (currentView != \"monthview\") {\n                view = $(\"daysView\");\n                var viewPosition = view.cumulativeOffset();\n\n                if (parseInt(data[\"isAllDay\"]) == 0) {\n                    top -= view.scrollTop;\n                    if (viewPosition[1] > top + 2) {\n                        view.stopObserving(\"scroll\", onBodyClickHandler);\n                        view.scrollTop = cell.offsetTop;\n                        top = viewPosition[1];\n                        Event.observe.delay(0.1, view, \"scroll\", onBodyClickHandler);\n                    }\n                }\n            }\n            else {\n                top -= cell.up(\"DIV.day\").scrollTop;\n            }\n\n            left = cellPosition[0] + cellDimensions[\"width\"] + 4;\n            if (left + divDimensions[\"width\"] > window.width()) {\n                left = cellPosition[0] - divDimensions[\"width\"];\n                div.removeClassName(\"left\");\n                div.addClassName(\"right\");\n            }\n            else {\n                div.removeClassName(\"right\");\n                div.addClassName(\"left\");\n            }\n\n            // Put the event's data in the DIV\n            div.down(\"h1\").update(data[\"summary\"].replace(/\\r?\\n/g, \"<BR/>\"));\n\n            var paras = div.getElementsByTagName(\"p\");\n            var para = $(paras[0]);\n            if (parseInt(data[\"isAllDay\"]) == 0) {\n                para.down(\"SPAN\").update(data[\"startTime\"] + \" - \" + data[\"endTime\"]);\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[1]);\n            if (data[\"calendar\"].length) {\n \t\t// Remove owner email from calendar's name\n                para.down(\"SPAN\", 1).update(data[\"calendar\"].escapeHTML());\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[2]);\n            if (data[\"location\"].length) {\n                para.down(\"SPAN\", 1).update(data[\"location\"].escapeHTML());\n                para.show();\n            } else\n                para.hide();\n\n\t    para = $(paras[3]);\n            if (data[\"created_by\"].length) {\n\t\tpara.down(\"SPAN\", 1).update(data[\"created_by\"]);\n                para.show();\n            } else\n                para.hide();\n\n            para = $(paras[4]);\n            if (data[\"description\"].length) {\n                para.update(data[\"description\"].replace(/\\r?\\n/g, \"<BR/>\"));\n                para.show();\n            } else\n                para.hide();\n\n            div.setStyle({ left: left + \"px\", top: top + \"px\" });\n            div.show();\n        }\n    }\n    else {\n        log(\"onViewEventCallback ajax error (\" + http.status + \"): \" + http.url);\n    }\n}\n\nfunction editDoubleClickedEvent(event) {\n    if (this.isException && this.recurrenceTime)\n        _editEventId(this.cname, this.calendar, \"occurence\" + this.recurrenceTime);\n    else if (this.recurrenceTime)\n        _editRecurrenceDialog(this, \"confirmEditing\");\n    else\n        _editEventId(this.cname, this.calendar);\n\n    Event.stop(event);\n}\n\nfunction performEventEdition(folder, event, recurrence) {\n    _editEventId(event, folder, recurrence);\n}\n\nfunction performEventDeletion(folder, event, recurrence) {\n    if (calendarEvents) {\n        if (recurrence) {\n            // Only one recurrence\n            var occurenceTime = recurrence.substring(9);\n            var nodes = _eventBlocksMatching(folder, event, occurenceTime);\n            var urlstr = ApplicationBaseURL + folder + \"/\" + event  + \"/\" + recurrence + \"/delete\";\n\n            if (nodes)\n                document.deleteEventAjaxRequest = triggerAjaxRequest(urlstr,\n                                                                     performDeleteEventCallback,\n                                                                     { nodes: nodes,\n                                                                       occurence: occurenceTime });\n        }\n        else {\n            // All recurrences\n            if (document.deleteEventAjaxRequest) {\n                document.deleteEventAjaxRequest.aborted = true;\n                document.deleteEventAjaxRequest.abort();\n            }\n            eventsToDelete.push([event]);\n            calendarsOfEventsToDelete.push(folder);\n            _batchDeleteEvents();\n        }\n    }\n}\n\nfunction performDeleteEventCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var occurenceTime = http.callbackData.occurence;\n            var nodes = http.callbackData.nodes;\n            var cname = nodes[0].cname;\n            var calendar = nodes[0].calendar;\n\n            _deleteCalendarEventBlocks(calendar, cname, occurenceTime);\n            _deleteEventFromTables(calendar, cname, occurenceTime);\n            _deleteCalendarEventCache(calendar, cname, occurenceTime);\n        }\n    }\n}\n\n/* in dateselector */\nfunction onDaySelect(node) {\n    var day = node.getAttribute('day');\n    var needRefresh = (listFilter == 'view_selectedday'\n                       && day != currentDay);\n\n    var td = $(node).getParentWithTagName(\"td\");\n    var table = $(td).getParentWithTagName(\"table\");\n\n    //   log (\"table.selected: \" + table.selected);\n\n    if (document.selectedDate)\n        document.selectedDate.deselect();\n\n    td.selectElement();\n    document.selectedDate = td;\n\n    changeCalendarDisplay( { \"day\": day } );\n    currentDay = day;\n    selectedDayDate = day;\n    if (needRefresh)\n        refreshEvents();\n\n    return false;\n}\n\nfunction onDateSelectorGotoMonth(event) {\n    var day = this.getAttribute(\"date\");\n\n    changeDateSelectorDisplay(day, true);\n\n    Event.stop(event);\n}\n\nfunction onCalendarGotoDay(node) {\n    var day = node.getAttribute(\"date\");\n    var needRefresh = (listFilter == 'view_selectedday' && day != currentDay);\n\n    changeDateSelectorDisplay(day);\n    changeCalendarDisplay( { \"day\": day } );\n    if (needRefresh)\n        refreshEvents();\n\n    return false;\n}\n\nfunction gotoToday() {\n    var todayDate = new Date();\n    selectedDayDate = todayDate.getDayString();\n    changeDateSelectorDisplay('');\n    changeCalendarDisplay();\n\n    return false;\n}\n\nfunction setDateSelectorContent(content) {\n    var div = $(\"dateSelectorView\");\n\n    div.update(content);\n    if (currentDay.length > 0)\n        restoreCurrentDaySelection(div);\n\n    initDateSelectorEvents();\n}\n\nfunction dateSelectorCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        document.dateSelectorAjaxRequest = null;\n        var content = http.responseText;\n        setDateSelectorContent(content);\n        cachedDateSelectors[http.callbackData] = content;\n    }\n    else\n        log (\"dateSelectorCallback Ajax error\");\n}\n\nfunction eventsListCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        var div = $(\"eventsListView\");\n        document.eventsListAjaxRequest = null;\n        var table = $(\"eventsList\");\n        lastClickedRow = -1; // from generic.js\n\n        var rows = table.select(\"TBODY TR\");\n        rows.each(function(e) {\n            e.remove();\n        });\n\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n            for (var i = 0; i < data.length; i++) {\n                var row = createElement(\"tr\");\n                table.tBodies[0].appendChild(row);\n                row.addClassName(\"eventRow\");\n                var calendar = escape(data[i][1]);\n                var rTime = data[i][16];\n                var id = escape(data[i][1] + \"-\" + data[i][0]);\n                if (rTime)\n                    id += \"-\" + escape(rTime);\n                row.setAttribute(\"id\", id);\n                row.cname = escape(data[i][0]);\n                row.calendar = calendar;\n                if (rTime)\n                    row.recurrenceTime = escape(rTime);\n                row.isException = data[i][17];\n                row.editable = data[i][18] || IsSuperUser;\n                row.erasable = data[i][19] || IsSuperUser;\n                row.startDate = data[i][5];\n                var startDate = new Date(data[i][5]*1000);\n                row.day = startDate.getDayString();\n                if (!data[i][8])\n                    row.hour = startDate.getHourString(); // event is not all day\n                row.observe(\"mousedown\", onRowClick);\n                row.observe(\"selectstart\", listRowMouseDownHandler);\n                if (data[i][3] != null)\n                    // Status is defined -- event is readable\n                    row.observe(\"dblclick\", editDoubleClickedEvent);\n\n                var td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                var colorDiv = createElement(\"div\", false, \"colorBox calendarFolder\" + calendar);\n                td.appendChild(colorDiv);\n                colorDiv.update('&nbsp;');\n                var span = createElement(\"span\");\n                td.appendChild(span);\n                span.update(data[i][4]); // title\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][21])); // start date\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][22])); // end date\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                if (data[i][7])\n                    td.appendChild(document.createTextNode(data[i][7])); // location\n\n                td = createElement(\"td\");\n                row.appendChild(td);\n                td.observe(\"mousedown\", listRowMouseDownHandler, true);\n                td.appendChild(document.createTextNode(data[i][2])); // calendar\n            }\n\n            if (sorting[\"event-header\"] && sorting[\"event-header\"].length > 0) {\n                var sortHeader = $(sorting[\"event-header\"]);\n\n                if (sortHeader) {\n                    var sortImages = $(table.tHead).select(\".sortImage\");\n                    $(sortImages).each(function(item) {\n                            item.remove();\n                        });\n\n                    var sortImage = createElement(\"img\", \"messageSortImage\", \"sortImage\");\n                    sortHeader.insertBefore(sortImage, sortHeader.firstChild);\n                    if (sorting[\"event-ascending\"])\n                        sortImage.src = ResourcesURL + \"/arrow-up.png\";\n                    else\n                        sortImage.src = ResourcesURL + \"/arrow-down.png\";\n                }\n            }\n        }\n    }\n    else\n        log (\"eventsListCallback Ajax error\");\n}\n\nfunction tasksListCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        var div = $(\"tasksListView\");\n        document.tasksListAjaxRequest = null;\n        var table = $(\"tasksList\");\n        lastClickedRow = -1; // from generic.js\n\n        var rows = table.select(\"TBODY TR\");\n        rows.each(function(e) {\n            e.remove();\n        });\n\n        if (http.responseText.length > 0) {\n            var data = http.responseText.evalJSON(true);\n\n            // [0] Task ID\n            // [1] Calendar ID\n            // [2] Calendar name\n            // [3] Status (0, 1 = completed, 2)\n            // [4] Title\n            // [5] Due date (int)\n            // [6] Classification (0 = public, 1, = private, 2 = confidential)\n            // [7] Location\n            // [8] Category\n            // [9] Editable?\n            // [10] Erasable?\n            // [11] Priority (0, 1 = important, 9 = low)\n            // [12] Status CSS class (duelater, completed, etc)\n            // (13) Due date (formatted)\n\n            for (var i = 0; i < data.length; i++) {\n                var row = createElement(\"tr\");\n                table.tBodies[0].appendChild(row);\n\n                row.on(\"dblclick\", editDoubleClickedEvent);\n\n                var calendar = escape(data[i][1]);\n                var cname = escape(data[i][0]);\n                row.setAttribute(\"id\", calendar + \"-\" + cname);\n                //listItem.addClassName(data[i][5]); // Classification\n                row.addClassName(data[i][12]); // status\n                row.calendar = calendar;\n                row.cname = cname;\n                row.erasable = data[i][10] || IsSuperUser;\n                if (parseInt(data[i][11]) == 1) {\n                  row.addClassName(\"important\");\n                }\n                else if (parseInt(data[i][11]) == 9) {\n                  row.addClassName(\"low\");\n                }\n\n                var cell = createElement(\"td\");\n                row.appendChild(cell);\n                var input = createElement(\"input\");\n                input.setAttribute(\"type\", \"checkbox\");\n                cell.appendChild(input);\n                input.setAttribute(\"value\", \"1\");\n                if (parseInt(data[i][9]) == 0) // editable?\n                    input.setAttribute(\"disabled\", true);\n                input.addClassName(\"checkBox\");\n                if (parseInt(data[i][3]) == 1) // completed?\n                    input.setAttribute(\"checked\", \"checked\");\n                input.observe(\"click\", updateTaskStatus, true);\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                if (data[i][11] != null) {\n                    cell.update(_(\"prio_\" + data[i][11])); // Priority\n                }\n                else {\n                    cell.update(\"\"); // Priority\n                }\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                var colorDiv = createElement(\"div\", false, \"colorBox calendarFolder\" + calendar);\n                cell.appendChild(colorDiv);\n                colorDiv.update('&nbsp;');\n                var t = new Element (\"span\");\n                cell.appendChild(t);\n                t.update(data[i][4]); // title\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                if (data[i][13])\n                    cell.update(data[i][13]); // end date\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][7]); // location\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][8]); // category\n\n                cell = createElement(\"td\");\n                row.appendChild(cell);\n                cell.update(data[i][2]); // calendar name\n            }\n\n            table.scrollTop = table.previousScroll;\n\n            if (sorting[\"task-attribute\"] && sorting[\"task-attribute\"].length > 0) {\n                var sortHeader = $(sorting[\"task-header\"]);\n\n                if (sortHeader) {\n                    var sortImages = $(table.tHead).select(\".sortImage\");\n                    $(sortImages).each(function(item) {\n                            item.remove();\n                        });\n\n                    var sortImage = createElement(\"img\", \"messageSortImage\", \"sortImage\");\n                    sortHeader.insertBefore(sortImage, sortHeader.firstChild);\n                    if (sorting[\"task-ascending\"])\n                        sortImage.src = ResourcesURL + \"/arrow-up.png\";\n                    else\n                        sortImage.src = ResourcesURL + \"/arrow-down.png\";\n                }\n            }\n            if (http.callbackData) {\n                var selectedNodesId = http.callbackData;\n                for (var i = 0; i < selectedNodesId.length; i++) {\n                    // \tlog(selectedNodesId[i] + \" (\" + i + \") is selected\");\n                    var node = $(selectedNodesId[i]);\n                    if (node) {\n                        node.selectElement();\n                    }\n                }\n            }\n            else\n                log (\"tasksListCallback: no data\");\n        }\n    }\n    else\n        log (\"tasksListCallback Ajax error\");\n}\n\n/* in dateselector */\nfunction restoreCurrentDaySelection(div) {\n    var elements = $(div).select(\"TD.activeDay SPAN\");\n    if (elements.size()) {\n        var day = elements[0].readAttribute('day');\n        if (day.substr(0, 6) == currentDay.substr(0, 6)) {\n            for (var i = 0; i < elements.length; i++) {\n                day = elements[i].readAttribute('day');\n                if (day && day == currentDay) {\n                    var td = $(elements[i]).getParentWithTagName(\"td\");\n                    if (document.selectedDate)\n                        document.selectedDate.deselect();\n                    $(td).selectElement();\n                    document.selectedDate = td;\n                }\n            }\n        }\n    }\n}\n\nfunction loadPreviousView(event) {\n    onCalendarGotoDay($(\"leftNavigationArrow\"));\n}\n\nfunction loadNextView(event) {\n    onCalendarGotoDay($(\"rightNavigationArrow\"));\n}\n\nfunction changeDateSelectorDisplay(day, keepCurrentDay) {\n    var url = ApplicationBaseURL + \"dateselector\";\n    if (day) {\n        if (day.length < 8)\n            day += \"01\";\n        url += \"?day=\" + day;\n    }\n\n    if (!keepCurrentDay)\n        currentDay = day;\n\n    var month = day.substr(0, 6);\n    if (cachedDateSelectors[month]) {\n        //       log (\"restoring cached selector for month: \" + month);\n        setDateSelectorContent(cachedDateSelectors[month]);\n    }\n    else {\n        //       log (\"loading selector for month: \" + month);\n        if (document.dateSelectorAjaxRequest) {\n            document.dateSelectorAjaxRequest.aborted = true;\n            document.dateSelectorAjaxRequest.abort();\n        }\n        document.dateSelectorAjaxRequest\n            = triggerAjaxRequest(url,\n                                 dateSelectorCallback,\n                                 month);\n    }\n}\n\nfunction changeCalendarDisplay(data, newView) {\n    newView = ((newView) ? newView : currentView);\n    var url = ApplicationBaseURL + newView;\n    var day = null;\n    var scrollEvent = null;\n    if (data) {\n        day = data['day'];\n        scrollEvent = data['scrollEvent'];\n    }\n\n    if (!day)\n        day = currentDay;\n\n    if (day) {\n        if (data) {\n            var dayDiv = $(\"day\"+day);\n            if (dayDiv) {\n                // Don't reload the view if the event is present in current view\n\n                // Deselect day in date selector\n                if (document.selectedDate)\n                    document.selectedDate.deselect();\n\n                // Select day in date selector\n                var selectedLink = $$('table#dateSelectorTable span[day='+day+']');\n                if (selectedLink.length > 0) {\n                    selectedCell = selectedLink[0].getParentWithTagName(\"td\");\n                    $(selectedCell).selectElement();\n                    document.selectedDate = selectedCell;\n                } else\n                    document.selectedDate = null;\n\n                // Scroll to event\n                if (scrollEvent) {\n                    preventAutoScroll = false;\n                    scrollDayView(scrollEvent);\n                }\n\n                setSelectedDayDate(day);\n\n                return false;\n            }\n            else if (day.length == 6) {\n                day += \"01\";\n            }\n        }\n        url += \"?day=\" + day;\n    }\n\n    selectedCalendarCell = null;\n\n    if (document.dayDisplayAjaxRequest) {\n        document.dayDisplayAjaxRequest.aborted = true;\n        document.dayDisplayAjaxRequest.abort();\n    }\n    document.dayDisplayAjaxRequest\n        = triggerAjaxRequest(url, calendarDisplayCallback,\n                             { \"view\": newView,\n                               \"day\": day,\n                               \"scrollEvent\": scrollEvent });\n\n    return false;\n}\n\nfunction _ensureView(view) {\n    if (currentView != view)\n        changeCalendarDisplay(null, view);\n\n    return false;\n}\n\nfunction onDayOverview() {\n    return _ensureView(\"dayview\");\n}\n\nfunction onMulticolumnDayOverview() {\n    return _ensureView(\"multicolumndayview\");\n}\n\nfunction onWeekOverview() {\n    return _ensureView(\"weekview\");\n}\n\nfunction onMonthOverview() {\n    return _ensureView(\"monthview\");\n}\n\nfunction refreshEventsAndTasks() {\n    refreshEvents();\n    refreshTasks();\n}\n\nfunction onCalendarReload() {\n    if (!reloadWebCalendars()) {\n        refreshEventsAndTasks();\n        changeCalendarDisplay();\n    }\n\n    return false;\n}\n\nfunction reloadWebCalendars() {\n    var remaining = [];\n    var refreshOperations = { \"remaining\": remaining };\n    if (UserSettings['Calendar']\n        && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n\n        var folders = $(\"calendarList\");\n        var calendarNodes = folders.childNodesWithTag(\"li\");\n        for (var i = 0; i < calendarNodes.length; i++) {\n            var current = calendarNodes[i];\n            var calendarID = current.getAttribute(\"id\");\n            var owner = current.getAttribute(\"owner\");\n            var realID = owner + \":Calendar/\" + calendarID.substr(1);\n            if (webCalendars[realID]) { /* is web calendar ? */\n                remaining.push(realID);\n                reloadWebCalendar(realID, refreshOperations);\n            }\n        }\n    }\n\n    return (remaining.length > 0);\n}\n\nvar calendarReloadErrors = { \"invalid-calendar-content\":\n                             _(\"the returned content was not valid calendar\"\n                               + \" data\"),\n                             \"http-error\": _(\"an unknown http error occurred\"\n                                             + \" during the load operation\"),\n                             \"bad-url\": _(\"the url in use is invalid or the\"\n                                          + \" host is currently unreachable\"),\n                             \"invalid-url\": _(\"the url being used is invalid\"\n                                              + \" or not handled\") };\n\nfunction reloadWebCalendar(folderID, refreshOperations) {\n    var url = URLForFolderID(folderID) + \"/reload\";\n    var cbData = { \"folderID\": folderID };\n    if (refreshOperations) {\n        cbData[\"refreshOperations\"] = refreshOperations;\n    }\n    triggerAjaxRequest(url, reloadWebCalendarCallback, cbData);\n}\n\nfunction reloadWebCalendarCallback(http) {\n    var cbData = http.callbackData;\n    if (http.status == 200) {\n        var result = http.responseText.evalJSON(true);\n        var requireAuth = false;\n        var success = false;\n        if (result.status) {\n            if (result.status == 401) {\n                requireAuth = true;\n            }\n            else {\n                if (result.status == 200) {\n                    success = true;\n                }\n                else {\n                    var errorMessage = _(\"An error occurred while importing calendar.\");\n                    if (result[\"error\"]) {\n                        var message = calendarReloadErrors[result[\"error\"]];\n                        errorMessage = (_(\"An error occurred while loading remote\"\n                                          + \" calendar: %{0}.\").formatted(message));\n                    }\n                    showAlertDialog (errorMessage);\n                }\n            }\n        }\n        else {\n            var errorMessage = _(\"An error occurred while importing calendar.\");\n            if (result[\"error\"]) {\n                var message = calendarReloadErrors[result[\"error\"]];\n                errorMessage = (_(\"An error occurred while loading remote\"\n                                  + \" calendar: %{0}.\").formatted(message));\n            }\n            showAlertDialog (errorMessage);\n        }\n\n        if (requireAuth) {\n            reauthenticateWebCalendar(cbData[\"folderID\"], cbData);\n        }\n        else {\n            var refreshOperations = cbData[\"refreshOperations\"];\n            if (refreshOperations) {\n                var remaining = refreshOperations[\"remaining\"];\n                var calIdx = remaining.indexOf(cbData[\"folderID\"]);\n                remaining.splice(calIdx, 1);\n                if (remaining.length == 0) {\n                    refreshEventsAndTasks();\n                    changeCalendarDisplay();\n                }\n            }\n            else {\n                if (success) {\n                    refreshEventsAndTasks();\n                    changeCalendarDisplay();\n                }\n            }\n        }\n    }\n    else {\n        showAlertDialog(_(\"An error occurred while importing calendar.\"));\n        var refreshOperations = cbData[\"refreshOperations\"];\n        if (refreshOperations) {\n            var remaining = refreshOperations[\"remaining\"];\n            var calIdx = remaining.indexOf(cbData[\"folderID\"]);\n            remaining.splice(calIdx, 1);\n            if (remaining.length > 0) {\n                var newFolderID = remaining[0];\n                reloadWebCalendar(newFolderID, refreshOperations);\n            }\n        }\n    }\n}\n\nfunction reauthenticateWebCalendar(folderID, refreshCBData) {\n    var remoteURL = null;\n    if (UserSettings['Calendar'] && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n        remoteURL = webCalendars[folderID];\n    }\n    var parts = remoteURL.split(\"/\");\n    var hostname = parts[2];\n    function authenticate(username, password) {\n        disposeDialog();\n        var url = URLForFolderID(folderID) + \"/set-credentials\";\n        var parameters = (\"username=\" + encodeURIComponent(username)\n                          + \"&password=\" + encodeURIComponent(password));\n        triggerAjaxRequest(url, authenticateWebCalendarCallback, refreshCBData, parameters,\n                           { \"Content-type\": \"application/x-www-form-urlencoded\" });\n    }\n    showAuthenticationDialog(_(\"Please identify yourself to %{0}\")\n                             .formatted(hostname),\n                             authenticate);\n}\n\nfunction authenticateWebCalendarCallback(http) {\n    var cbData = http.callbackData;\n    var folderID = cbData[\"folderID\"];\n    var refreshOperations = cbData[\"refreshOperations\"];\n    if (isHttpStatus204(http.status)) {\n        reloadWebCalendar(folderID, refreshOperations);\n    }\n    else {\n        if (refreshOperations) {\n            var remaining = refreshOperations[\"remaining\"];\n            var calIdx = remaining.indexOf(folderID);\n            remaining.splice(calIdx, 1);\n            if (remaining.length > 0) {\n                var newFolderID = remaining[0];\n                reloadWebCalendar(newFolderID, refreshOperations);\n            }\n        }\n    }\n}\n\nfunction scrollDayView(scrollEvent) {\n    if (!preventAutoScroll) {\n        if (scrollEvent) {\n            var contentView;\n            var eventRow = $(scrollEvent);\n            if (eventRow) {\n                var eventBlocks = selectCalendarEvent(eventRow.calendar, eventRow.cname, eventRow.recurrenceTime);\n                if (eventBlocks) {\n                    var firstEvent = eventBlocks.first();\n\n                    if (currentView == \"monthview\")\n                        contentView = firstEvent.up(\"DIV.day\");\n                    else\n                        contentView = $(\"daysView\");\n\n                    // Don't scroll to an all-day event\n                    if (typeof eventRow.hour != \"undefined\") {\n                        var top = firstEvent.cumulativeOffset()[1] - contentView.scrollTop;\n                        // Don't scroll if the event is visible to the user\n                        if (top < contentView.cumulativeOffset()[1])\n                            contentView.scrollTop = firstEvent.cumulativeOffset()[1] - contentView.cumulativeOffset()[1];\n                        else if (top > contentView.cumulativeOffset()[1] + contentView.getHeight() - firstEvent.getHeight())\n                            contentView.scrollTop = firstEvent.cumulativeOffset()[1] - contentView.cumulativeOffset()[1];\n                    }\n                }\n            }\n        }\n        else if (currentView != \"monthview\") {\n            var contentView = $(\"daysView\");\n            var hours = (contentView.childNodesWithTag(\"div\")[0]).childNodesWithTag(\"div\");\n            contentView.scrollTop = hours[dayStartHour].offsetTop;\n        }\n    }\n}\n\nfunction onClickableCellsDblClick(event) {\n    var target = getTarget(event);\n    // Hack to ignore double-click in the scrollbar\n    if (target.hasClassName(\"dayHeader\") || (this.scrollHeight - this.clientHeight <= 1)) {\n        newEventFromWidget(this, 'event');\n        Event.stop(event);\n    }\n}\n\nfunction refreshCalendarEvents(scrollEvent) {\n    var todayDate = new Date();\n    var sd;\n    var ed;\n\n    if (!currentDay)\n        currentDay = todayDate.getDayString();\n\n    if (currentView == \"dayview\") {\n        sd = currentDay;\n        ed = sd;\n    }\n    else if (currentView == \"weekview\") {\n        var startDate;\n        startDate = currentDay.asDate();\n        startDate = startDate.beginOfWeek();\n        sd = startDate.getDayString();\n        var endDate = new Date();\n        endDate.setTime(startDate.getTime());\n        endDate.addDays(6);\n        ed = endDate.getDayString();\n    }\n    else {\n        var monthDate;\n        monthDate = currentDay.asDate();\n        monthDate.setDate(1);\n        sd = monthDate.beginOfWeek().getDayString();\n\n        var lastMonthDate = new Date();\n        lastMonthDate.setTime(monthDate.getTime());\n        lastMonthDate.setMonth(monthDate.getMonth() + 1);\n        lastMonthDate.addDays(-1);\n        ed = lastMonthDate.endOfWeek().getDayString();\n    }\n    if (document.refreshCalendarEventsAjaxRequest) {\n        document.refreshCalendarEventsAjaxRequest.aborted = true;\n        document.refreshCalendarEventsAjaxRequest.abort();\n    }\n    var url = (ApplicationBaseURL + \"eventsblocks?sd=\" + sd + \"&ed=\" + ed\n               + \"&view=\" + currentView);\n    document.refreshCalendarEventsAjaxRequest\n        = triggerAjaxRequest(url, refreshCalendarEventsCallback,\n                             {\"startDate\": sd, \"endDate\": ed,\n                              \"scrollEvent\": scrollEvent});\n}\n\nfunction _parseEvents(list) {\n    var newCalendarEvents = {};\n\n    for (var i = 0; i < list.length; i++) {\n        var event = list[i];\n        var cname = event[0];\n        var calendar = event[1];\n        // log(\"parsed cname: \" + cname + \"; calendar: \" + calendar);\n        var calendarDict = newCalendarEvents[calendar];\n        if (!calendarDict) {\n            calendarDict = {};\n            newCalendarEvents[calendar] = calendarDict;\n        }\n        var occurences = calendarDict[cname];\n        if (!occurences) {\n            occurences = [];\n            calendarDict[cname] = occurences;\n        }\n        event.blocks = [];\n        occurences.push(event);\n    }\n\n    return newCalendarEvents;\n}\n\nfunction _setupEventsDragAndDrop(events) {\n    /* We setup the drag controllers for all the events.\n       Since the same events may be listed more than once per calendar\n       (repeating events), we must keep account of those that have already\n       been setup. */\n    var setupFlags = {};\n\n    for (var i = 0; i < events.length; i++) {\n        var cname = events[i][0];\n        var calendar = events[i][1];\n        var setupId = calendar + \"_\" + cname;\n        if (!setupFlags[setupId]) {\n            var occurrences = calendarEvents[calendar][cname];\n            for (var j = 0; j < occurrences.length; j++) {\n                var blocks = occurrences[j].blocks;\n                var dragController = new SOGoEventDragController();\n                dragController.updateDropCallback = updateEventFromDragging;\n                dragController.attachToEventCells(blocks);\n            }\n            setupFlags[setupId] = true;\n        }\n    }\n}\n\nfunction refreshCalendarEventsCallback(http) {\n    if (http.readyState == 4\n        && http.status == 200) {\n        if (http.responseText.length > 0) {\n            var eventsBlocks = http.responseText.evalJSON(true);\n            calendarEvents = _parseEvents(eventsBlocks[0]);\n            if (currentView == \"monthview\")\n                _drawMonthCalendarEvents(eventsBlocks[2], eventsBlocks[0]);\n            else {\n                _drawCalendarAllDayEvents(eventsBlocks[1], eventsBlocks[0]);\n                _drawCalendarEvents(eventsBlocks[2], eventsBlocks[0]);\n            }\n            _setupEventsDragAndDrop(eventsBlocks[0]);\n            resetCategoriesStyles();\n            onWindowResize(null);\n        }\n        if (http.callbackData[\"scrollEvent\"])\n            preventAutoScroll = false;\n        scrollDayView(http.callbackData[\"scrollEvent\"]);\n    }\n    else\n        log(\"AJAX error when refreshing calendar events\");\n}\n\nfunction resetCategoriesStyles() {\n    if (categoriesStyleSheet == null) {\n        categoriesStyleSheet = document.createElement(\"style\");\n        categoriesStyleSheet.type = \"text/css\";\n        document.getElementsByTagName(\"head\")[0].appendChild(categoriesStyleSheet);\n    }\n    else {\n        if (Prototype.Browser.IE)\n            while (categoriesStyleSheet.styleSheet.rules.length)\n                categoriesStyleSheet.styleSheet.removeRule();\n        else\n            while (categoriesStyleSheet.firstChild)\n                categoriesStyleSheet.removeChild(categoriesStyleSheet.firstChild);\n    }\n\n    if (UserDefaults['SOGoCalendarCategoriesColors']) {\n        // Update stylesheet with new categories colors\n        var selectors = [];\n        var rules = [];\n        categoriesStyles.keys().each(function(category) {\n            var color = UserDefaults['SOGoCalendarCategoriesColors'][category];\n            if (color) {\n                rules[rules.length] = '{ border-right: 8px solid ' + color + '; }';\n                selectors[selectors.length] = 'DIV.' + categoriesStyles.get(category);\n            }\n        });\n\n        if (selectors.length > 0) {\n            if (categoriesStyleSheet.styleSheet && categoriesStyleSheet.styleSheet.addRule) {\n                // IE\n                for (var i = 0; i < selectors.length; i++)\n                    categoriesStyleSheet.styleSheet.addRule(selectors[i],\n                                                            rules[i]);\n            }\n            else {\n                // Mozilla + Safari\n                for (var i = 0; i < selectors.length; i++)\n                    categoriesStyleSheet.appendChild(document.createTextNode(selectors[i] +\n                                                                             ' ' + rules[i]));\n            }\n        }\n    }\n}\n\nfunction newBaseEventDIV(eventRep, event, eventText) {\n    //\tlog (\"0 cname = \" + event[0]);\n    //\tlog (\"1 calendar = \" + event[1]);\n    //  log (\"2 calendar name = \" + event[2]);\n    //\tlog (\"3 status = \" + event[3]);\n    //\tlog (\"4 title = \" + event[4]);\n    //\tlog (\"5 start = \" + event[5]);\n    //\tlog (\"6 end = \" + event[6]);\n    //\tlog (\"7 location = \" + event[7]);\n    //\tlog (\"8 isallday = \" + event[8]);\n    //\tlog (\"9 classification = \" + event[9]); // 0 = public, 1 = private, 2 = confidential\n    //\tlog (\"10 category = \" + event[10]);\n    //\tlog (\"11 participants emails = \" + event[11]);\n    //\tlog (\"12 participants states = \" + event[12]);\n    //\tlog (\"13 owner = \" + event[13]);\n    //\tlog (\"14 iscycle = \" + event[14]);\n    //\tlog (\"15 nextalarm = \" + event[15]);\n    //\tlog (\"16 recurrenceid = \" + event[16]);\n    //\tlog (\"17 isexception = \" + event[17]);\n    //  log (\"18 editable = \" + event[18]);\n    //  log (\"19 erasable = \" + event[19]);\n    //  log (\"20 ownerisorganizer = \" + event[20]);\n\n    var eventCell = createElement(\"div\");\n    eventCell.cname = event[0];\n    eventCell.calendar = event[1];\n    var startDate = new Date(event[5]*1000);\n    if (startDate) {\n        eventCell.startDate = event[5];\n        eventCell.writeAttribute('day', startDate.getDayString());\n        eventCell.writeAttribute('hour', event[8]? 'allday' : startDate.getHourString());\n    }\n//    if (event[8] == 1)\n//        eventCell.addClassName(\"private\");\n//    else if (event[8] == 2)\n//        eventCell.addClassName(\"confidential\");\n    if (eventRep.recurrenceTime)\n        eventCell.recurrenceTime = eventRep.recurrenceTime;\n    //eventCell.owner = event[12];\n    eventCell.isException = event[17];\n    eventCell.editable = event[18];\n    eventCell.erasable = event[19] || IsSuperUser;\n    eventCell.ownerIsOrganizer = event[20];\n    eventCell.addClassName(\"event\");\n//    if (event[14] > 0)\n//        eventCell.addClassName(\"alarm\");\n\n    var innerDiv = createElement(\"div\");\n    eventCell.appendChild(innerDiv);\n    innerDiv.addClassName(\"eventInside\");\n    innerDiv.addClassName(\"calendarFolder\" + event[1]);\n    if (eventRep.userState >= 0 && userStates[eventRep.userState])\n        innerDiv.addClassName(userStates[eventRep.userState]);\n\n    var gradientDiv = createElement(\"div\");\n    innerDiv.appendChild(gradientDiv);\n    gradientDiv.addClassName(\"gradient\");\n\n    var gradientImg = createElement(\"img\");\n    gradientDiv.appendChild(gradientImg);\n    gradientImg.src = ResourcesURL + \"/event-gradient.png\";\n\n    var textDiv = createElement(\"div\");\n    innerDiv.appendChild(textDiv);\n    textDiv.addClassName(\"text\");\n    var iconSpan = createElement(\"span\", null, \"icons\");\n    textDiv.appendChild(iconSpan);\n    textDiv.update(eventText.replace(/(\\\\r)?\\\\n/g, \"<BR/>\"));\n\n    // Add alarm and classification icons\n    if (event[9] == 1)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/private.png\"}, null, iconSpan);\n    else if (event[9] == 2)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/confidential.png\"}, null, iconSpan);\n    if (event[15] > 0)\n        createElement(\"img\", null, null, {src: ResourcesURL + \"/alarm.png\"}, null, iconSpan);\n\n    if (event[10] != null) {\n        var categoryStyle = categoriesStyles.get(event[10]);\n        if (!categoryStyle) {\n            categoryStyle = 'category_' + categoriesStyles.keys().length;\n            categoriesStyles.set([event[10]], categoryStyle);\n        }\n        innerDiv.addClassName(categoryStyle);\n    }\n    eventCell.observe(\"contextmenu\", onMenuCurrentView);\n\n    if (event[3] == null) {\n        // Status field is not defined -- user can't read event\n        eventCell.observe(\"selectstart\", listRowMouseDownHandler);\n        eventCell.observe(\"click\", onCalendarSelectEvent);\n        eventCell.observe(\"dblclick\", Event.stop);\n    }\n    else {\n        // Status field is defined -- user can read event\n        eventCell.observe(\"mousedown\", listRowMouseDownHandler);\n        eventCell.observe(\"click\", onCalendarSelectEvent);\n        eventCell.observe(\"dblclick\", editDoubleClickedEvent);\n        eventCell.observe(\"click\", onViewEvent);\n    }\n\n    event.blocks.push(eventCell);\n\n    return eventCell;\n}\n\nfunction _drawCalendarAllDayEvents(events, eventsData) {\n    var headerView = $(\"calendarHeader\");\n    var subdivs = headerView.childNodesWithTag(\"div\");\n    var days = subdivs[1].childNodesWithTag(\"div\");\n    for (var i = 0; i < days.length; i++) {\n        var parentDiv = days[i];\n        for (var j = 0; j < events[i].length; j++) {\n            var eventRep = events[i][j];\n            var nbr = eventRep.nbr;\n            var eventCell = newAllDayEventDIV(eventRep, eventsData[nbr]);\n            parentDiv.appendChild(eventCell);\n        }\n    }\n\n    resizeCalendarHeaderDIV();\n}\n\n/* When the list of all day events overflows, we resize it in order to contain\n   at least 6 or 7 items. Afterwards we restore the regular scrollbar\n   mechanism. */\nfunction resizeCalendarHeaderDIV() {\n    var headerView = $(\"calendarHeader\");\n    var daysView = $(\"daysView\");\n    if (headerView && daysView) {\n        /* consts */\n        var headerViewBaseHeight = 70;\n        var daysViewBaseTop = 120;\n        var maxDelta = 80;\n        /* /consts */\n\n        var maxEventPerDay = 0;\n\n        var subdivs = headerView.childNodesWithTag(\"div\");\n        var days = subdivs[1].childNodesWithTag(\"div\");\n        for (var i = 0; i < days.length; i++) {\n            var parentDiv = days[i];\n            var divs = parentDiv.childNodesWithTag(\"div\");\n            if (divs.length > maxEventPerDay) {\n                maxEventPerDay = divs.length;\n            }\n        }\n\n        if (maxEventPerDay > 2) {\n            var delta = ((maxEventPerDay - 2) * 22) + 10;\n            if (delta > maxDelta) {\n                delta = maxDelta;\n            }\n            daysView.style.top = String(delta + daysViewBaseTop) + \"px\";\n            headerView.style.height = String(delta + headerViewBaseHeight) + \"px\";\n        }\n        else {\n            daysView.style.top = null;\n            headerView.style.height = null;\n        }\n    }\n}\n\nfunction newAllDayEventDIV(eventRep, event) {\n    // cname, calendar, starts, lasts,\n    // \t\t     startHour, endHour, title) {\n    var eventCell = newBaseEventDIV(eventRep, event, event[4]);\n\n    return eventCell;\n}\n\nfunction _drawCalendarEvents(events, eventsData) {\n    var daysView = $(\"daysView\");\n    var subdivs = daysView.childNodesWithTag(\"div\");\n    for (var i = 0; i < subdivs.length; i++) {\n        var subdiv = subdivs[i];\n        if (subdiv.hasClassName(\"days\")) {\n            var days = subdiv.childNodesWithTag(\"div\");\n            for (var j = 0; j < days.length; j++) {\n                var parentDiv = days[j].childNodesWithTag(\"div\")[0];\n                for (var k = 0; k < events[j].length; k++) {\n                    var eventRep = events[j][k];\n                    var nbr = eventRep.nbr;\n                    var eventCell = newEventDIV(eventRep, eventsData[nbr]);\n                    parentDiv.appendChild(eventCell);\n                }\n            }\n        }\n    }\n}\n\nfunction newEventDIV(eventRep, event) {\n    var eventCell = newBaseEventDIV(eventRep, event, event[4]);\n\n    var pc = 100 / eventRep.siblings;\n    var left = Math.floor(eventRep.position * pc);\n    eventCell.style.left = left + \"%\";\n    var right = Math.floor(100 - (eventRep.position + 1) * pc);\n    eventCell.style.right = right + \"%\";\n    eventCell.addClassName(\"starts\" + eventRep.start);\n    eventCell.addClassName(\"lasts\" + eventRep.length);\n\n    if (event[7]) {\n        var inside = eventCell.childNodesWithTag(\"div\")[0];\n        var textDiv = inside.childNodesWithTag(\"div\")[1];\n        textDiv.appendChild(createElement(\"br\"));\n        var span = createElement(\"span\", null, \"location\");\n        var text = _(\"Location:\") + \" \" + event[7];\n        span.appendChild(document.createTextNode(text));\n        textDiv.appendChild(span);\n    }\n\n    return eventCell;\n}\n\nfunction _drawMonthCalendarEvents(events, eventsData) {\n    var daysView = $(\"monthDaysView\");\n    var days = daysView.childNodesWithTag(\"div\");\n    for (var i = 0; i < days.length; i++) {\n        var parentDiv = days[i];\n        for (var j = 0; j < events[i].length; j++) {\n            var eventRep = events[i][j];\n            var nbr = eventRep.nbr;\n            var eventCell = newMonthEventDIV(eventRep, eventsData[nbr]);\n            parentDiv.appendChild(eventCell);\n        }\n    }\n}\n\nfunction newMonthEventDIV(eventRep, event) {\n    var eventText;\n    if (event[8]) // all-day event\n        eventText = event[4];\n    else\n        eventText = eventRep.starthour + \" - \" + event[4];\n\n    var eventCell = newBaseEventDIV(eventRep, event,\n                                    eventText);\n\n    return eventCell;\n}\n\nfunction attachDragControllers(contentView) {\n    var dayNodes = contentView.select(\"DIV.days DIV.day\");\n    for (var j = 0; j < dayNodes.length; j++) {\n        var dayNode = dayNodes[j];\n        if (dayNode.hasClassName(\"day\")) {\n            var dragController = new SOGoEventDragController();\n            dragController.createDropCallback = newEventFromDragging;\n            dragController.attachToDayNode(dayNode);\n        }\n    }\n}\n\n/* On IE, the scroll bar is part of the last element. For other browsers, we\n   execute this method so that the \"right\" style attribute of the\n   \"calendarHeader\" element can be computed. This is execute only once. */\nfunction adjustCalendarHeaderDIV() {\n    var dv = $(\"daysView\");\n    if (dv) {\n        var ch = $(\"calendarHeader\");\n        var delta = ch.clientWidth - dv.clientWidth - 1;\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n        var selectors = [\"DIV#calendarHeader DIV.dayLabels\",\n                         \"DIV#calendarHeader DIV.days\"];\n        var rule = (\"right: \" + delta + \"px\");\n        if (styleElement.styleSheet && styleElement.styleSheet.addRule) {\n            // IE\n            styleElement.styleSheet.addRule(selectors[0], rule);\n            styleElement.styleSheet.addRule(selectors[1], rule);\n        } else {\n            // Mozilla + Firefox\n            var styleText = selectors.join(\",\") + \" { \" + rule + \"; }\";\n            styleElement.appendChild(document.createTextNode(styleText));\n        }\n        document.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n        calendarHeaderAdjusted = true;\n    }\n}\n\nfunction calendarDisplayCallback(http) {\n    var div = $(\"calendarView\");\n    var daysView = $(\"daysView\");\n    var position = -1;\n\n    // Check the previous view to restore the scrolling position\n    if (daysView)\n      position = daysView.scrollTop;\n    preventAutoScroll = (position != -1);\n\n    if (http.readyState == 4\n        && http.status == 200) {\n        document.dayDisplayAjaxRequest = null;\n        div.update(http.responseText);\n\n        // DOM has changed\n        daysView = $(\"daysView\");\n        if (daysView) {\n            if (preventAutoScroll)\n                daysView.scrollTop = position;\n            if (!calendarHeaderAdjusted)\n                adjustCalendarHeaderDIV();\n        }\n\n        if (http.callbackData[\"view\"])\n            currentView = http.callbackData[\"view\"];\n        if (http.callbackData[\"day\"])\n            currentDay = http.callbackData[\"day\"];\n\n        // Initialize contextual menu\n        var menu = new Array(onMenuNewEventClick,\n                             onMenuNewTaskClick,\n                             \"-\",\n                             loadPreviousView,\n                             loadNextView,\n                             \"-\",\n                             deleteEvent,\n                             copyEventToPersonalCalendar,\n                             onMenuRawEvent\n                            );\n        var observer;\n        if (currentView == 'dayview') {\n            observer = $(\"daysView\");\n        }\n        else if (currentView == 'weekview') {\n            observer = $(\"daysView\");\n        }\n        else {\n            observer = $(\"monthDaysView\");\n        }\n\n        var contentView;\n        if (currentView == \"monthview\")\n            contentView = $(\"calendarContent\");\n        else {\n            contentView = $(\"daysView\");\n            contentView.observe(\"scroll\", onBodyClickHandler);\n            attachDragControllers($(\"calendarHeader\"));\n\n            // Create a clone of the contextual menu for the all-day\n            // events area\n            var allDayViewMenu = Element.clone($(\"currentViewMenu\"), true);\n            allDayViewMenu.id = \"allDayViewMenu\";\n            var newEventMenuItem = allDayViewMenu.select(\"LI\").first();\n            newEventMenuItem.writeAttribute(\"hour\", \"allday\");\n            $(\"currentViewMenu\").parentNode.appendChild(allDayViewMenu);\n            initMenu($(\"allDayViewMenu\"), menu);\n            var allDayArea = $$(\"DIV#calendarHeader DIV.days\").first();\n            allDayArea.observe(\"contextmenu\", onMenuAllDayView);\n        }\n        attachDragControllers(contentView);\n\n        // Attach contextual menu\n        var currentViewMenu = $(\"currentViewMenu\");\n        initMenu(currentViewMenu, menu);\n        observer.observe(\"contextmenu\", onMenuCurrentView);\n        currentViewMenu.prepareVisibility = onMenuCurrentViewPrepareVisibility;\n\n        restoreSelectedDay();\n\n        refreshCalendarEvents(http.callbackData.scrollEvent);\n\n        var days = contentView.select(\"DIV.day\");\n\n        if (currentView == \"monthview\")\n            for (var i = 0; i < days.length; i++) {\n                days[i].observe(\"click\", onCalendarSelectDay);\n                days[i].observe(\"dblclick\", onClickableCellsDblClick);\n                days[i].observe(\"selectstart\", listRowMouseDownHandler);\n                //days[i].down(\".dayHeader\").observe(\"selectstart\", listRowMouseDownHandler);\n                if (currentView == \"monthview\")\n                    days[i].observe(\"scroll\", onBodyClickHandler);\n            }\n        else {\n            var calendarHeader = $(\"calendarHeader\");\n            var headerDaysLabels = calendarHeader.select(\"DIV.dayLabels DIV.day\");\n            var headerDays = calendarHeader.select(\"DIV.days DIV.day\");\n            for (var i = 0; i < days.length; i++) {\n                headerDays[i].hour = \"allday\";\n                headerDaysLabels[i].observe(\"mousedown\", listRowMouseDownHandler);\n                headerDays[i].observe(\"click\", onCalendarSelectDay);\n                headerDays[i].observe(\"dblclick\", onClickableCellsDblClick);\n                days[i].observe(\"click\", onCalendarSelectDay);\n\n                var clickableCells = days[i].select(\"DIV.clickableHourCell\");\n                for (var j = 0; j < clickableCells.length; j++)\n                    clickableCells[j].observe(\"dblclick\", onClickableCellsDblClick);\n            }\n        }\n    }\n    else\n        log (\"calendarDisplayCallback Ajax error (\"\n             + http.readyState + \"/\" + http.status + \")\");\n}\n\nfunction onEventsSelectionChange() {\n    listOfSelection = this;\n    this.removeClassName(\"_unfocused\");\n\n    var tasksList = $(\"tasksList\");\n    tasksList.addClassName(\"_unfocused\");\n    deselectAll(tasksList);\n\n    var rows = $(this).getSelectedNodes();\n    if (rows.length == 1) {\n        var row = rows[0];\n        changeCalendarDisplay( { \"day\": row.day,\n                    \"scrollEvent\": row.getAttribute(\"id\") } );\n        changeDateSelectorDisplay(row.day, true);\n    }\n    else {\n        // Select visible events cells\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            selectCalendarEvent(row.calendar, row.cname, row.recurrenceTime);\n        }\n    }\n}\n\nfunction onTasksSelectionChange(event) {\n    listOfSelection = this;\n    this.removeClassName(\"_unfocused\");\n\n    var target = Event.element(event);\n    if (target.tagName == 'SPAN')\n        target = target.parentNode;\n    // Update selection\n    onRowClick(event, target);\n\n    var eventsList = $(\"eventsList\");\n    eventsList.addClassName(\"_unfocused\");\n    eventsList.deselectAll();\n}\n\nfunction _loadEventHref(href) {\n    if (document.eventsListAjaxRequest) {\n        document.eventsListAjaxRequest.aborted = true;\n        document.eventsListAjaxRequest.abort();\n    }\n    var url = ApplicationBaseURL + href;\n    document.eventsListAjaxRequest\n        = triggerAjaxRequest(url, eventsListCallback, href);\n\n    return false;\n}\n\nfunction _loadTasksHref(href) {\n    if (document.tasksListAjaxRequest) {\n        document.tasksListAjaxRequest.aborted = true;\n        document.tasksListAjaxRequest.abort();\n    }\n    url = ApplicationBaseURL + href;\n\n    var tasksList = $(\"tasksList\");\n    var selectedIds;\n    if (tasksList)\n        selectedIds = tasksList.getSelectedNodesId();\n    else\n        selectedIds = null;\n    document.tasksListAjaxRequest\n        = triggerAjaxRequest(url, tasksListCallback, selectedIds);\n\n    return true;\n}\n\nfunction onHeaderClick(event) {\n    var newSortAttribute;\n    var headerId;\n\n    headerId = this.getAttribute(\"id\");\n\n    if (headerId.startsWith('event'))\n    {\n        // This is needed to get the dom object and flip the triangle\n        sorting[\"event-header\"] = headerId;\n        // Take away the 'events' and 'Header' and lowercase the result\n        newSortAttribute = headerId.sub(\"Header\", \"\").sub(\"event\", \"\").toLowerCase();\n        if (sorting[\"event-attribute\"] == newSortAttribute)\n            sorting[\"event-ascending\"] = !sorting[\"event-ascending\"];\n        else\n            sorting[\"event-ascending\"] = true;\n        sorting[\"event-attribute\"] = newSortAttribute;\n        refreshEvents();\n    }\n    else // Tasks\n    {\n        // This is needed to get the dom object and flip the triangle\n        sorting[\"task-header\"] = headerId;\n        // Take away the 'tasks' and 'Header' and lowercase the result\n        newSortAttribute = headerId.sub(\"Header\", \"\").sub(\"task\", \"\").toLowerCase();\n        if (sorting[\"task-attribute\"] == newSortAttribute)\n            sorting[\"task-ascending\"] = !sorting[\"task-ascending\"];\n        else\n            sorting[\"task-ascending\"] = true;\n        sorting[\"task-attribute\"] = newSortAttribute;\n        refreshTasks();\n    }\n\n    Event.stop(event);\n}\n\nfunction refreshCurrentFolder(id) {\n    if (id == 'tasks')\n        refreshTasks();\n    else\n        refreshEvents();\n}\n\n/* refreshes the \"unifinder\" list */\nfunction refreshEvents() {\n    var titleSearch;\n    var value = search[\"events\"][\"value\"];\n\n    if (value && value.length)\n        titleSearch = \"&search=\" + escape(value.utf8encode());\n    else\n        titleSearch = \"\";\n\n    refreshAlarms();\n\n    return _loadEventHref(\"eventslist?asc=\" + sorting[\"event-ascending\"]\n                          + \"&sort=\" + sorting[\"event-attribute\"]\n                          + \"&day=\" + currentDay\n                          + titleSearch\n                          + \"&filterpopup=\" + listFilter);\n}\n\nfunction refreshTasks(setUserDefault) {\n    var titleSearch;\n    var value = search[\"tasks\"][\"value\"];\n\n    if (value && value.length)\n        titleSearch = \"&search=\" + escape(value.utf8encode());\n    else\n        titleSearch = \"\";\n\n    if (setUserDefault == 1)\n      titleSearch += \"&setud=1\";\n\n    refreshAlarms();\n\n    return _loadTasksHref(\"taskslist?show-completed=\" + showCompletedTasks\n                          + \"&asc=\" + sorting[\"task-ascending\"]\n                          + \"&sort=\" + sorting[\"task-attribute\"]\n                          + titleSearch);\n}\n\nfunction refreshEventsAndDisplay() {\n    refreshEvents();\n    changeCalendarDisplay();\n}\n\nfunction onListFilterChange() {\n    var node = $(\"filterpopup\");\n\n    listFilter = node.value;\n//    log (\"listFilter = \" + listFilter);\n\n    return refreshEvents();\n}\n\nfunction selectMonthInMenu(menu, month) {\n    var entries = $(menu).select(\"LI\");\n    for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        var entryMonth = entry.getAttribute(\"month\");\n        if (entryMonth == month)\n            entry.addClassName(\"currentMonth\");\n        else\n            entry.removeClassName(\"currentMonth\");\n    }\n}\n\nfunction selectYearInMenu(menu, year) {\n    var entries = $(menu).select(\"LI\");\n    for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        var entryYear = entry.innerHTML.strip();\n        if (entryYear == year)\n            entry.addClassName(\"currentMonth\");\n        else\n            entry.removeClassName(\"currentMonth\");\n    }\n}\n\nfunction popupMonthMenu(event) {\n    if (event.button == 0) {\n        var id = this.getAttribute(\"id\");\n        if (id == \"monthLabel\")\n            menuId = \"monthListMenu\";\n        else\n            menuId = \"yearListMenu\";\n\n        var popup = $(menuId);\n        if (id == \"monthLabel\")\n            selectMonthInMenu(popup, this.getAttribute(\"month\"));\n        else\n            selectYearInMenu(popup, this.innerHTML);\n\n        popupToolbarMenu(this, menuId);\n        Event.stop(event);\n    }\n}\n\nfunction onMonthMenuItemClick(event) {\n    var month = '' + this.getAttribute(\"month\");\n    var year = '' + $(\"yearLabel\").innerHTML.strip();\n\n    changeDateSelectorDisplay(year + month + \"01\", true);\n}\n\nfunction onYearMenuItemClick(event) {\n    var month = '' + $(\"monthLabel\").getAttribute(\"month\");;\n    var year = '' + this.innerHTML.strip();\n\n    changeDateSelectorDisplay(year + month + \"01\", true);\n}\n\nfunction _eventBlocksMatching(calendar, cname, recurrenceTime) {\n    var blocks = null;\n    var events = calendarEvents[calendar];\n    if (events) {\n        var occurences = events[cname];\n        if (occurences) {\n            if (recurrenceTime) {\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    if (occurence[16] == recurrenceTime)\n                        blocks = occurence.blocks;\n                }\n            }\n            else {\n                blocks = [];\n                for (var i = 0; i < occurences.length; i++) {\n                    var occurence = occurences[i];\n                    blocks = blocks.concat(occurence.blocks);\n                }\n            }\n        }\n    }\n\n    return blocks;\n}\n\n/** Select event in calendar view */\nfunction selectCalendarEvent(calendar, cname, recurrenceTime) {\n    var selection = _eventBlocksMatching(calendar, cname, recurrenceTime);\n    if (selection) {\n        for (var i = 0; i < selection.length; i++)\n            selection[i].selectElement();\n        if (selectedCalendarCell) {\n            selectedCalendarCell = selectedCalendarCell.concat(selection);\n        }\n        else\n            selectedCalendarCell = selection;\n    }\n\n    return selection;\n}\n\nfunction onSelectAll(event) {\n    if (listOfSelection)\n        listOfSelection.selectAll();\n    else {\n        // Select events cells\n        var selectedBlocks = [];\n        for (var c in calendarEvents) {\n            var events = calendarEvents[c];\n            for (var e in events) {\n                var occurrences = events[e];\n                for (var i = 0; i < occurrences.length; i++)\n                    selectedBlocks = selectedBlocks.concat(occurrences[i].blocks);\n            }\n        }\n        for (var i = 0; i < selectedBlocks.length; i++)\n            selectedBlocks[i].selectElement();\n\n        selectedCalendarCell = selectedBlocks;\n    }\n\n    return false;\n}\n\nfunction deselectAll(list) {\n    if (list) {\n        list.deselectAll();\n    }\n    else {\n        $(\"eventsList\").deselectAll();\n        $(\"tasksList\").deselectAll();\n    }\n    if (selectedCalendarCell) {\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            selectedCalendarCell[i].deselect();\n        selectedCalendarCell = null;\n    }\n}\n\n/** Click on an event in the calendar view */\nfunction onCalendarSelectEvent(event, willShowContextualMenu) {\n    var alreadySelected = false;\n\n    // Look for event in events list\n    // TODO: event will likely not be found if an Ajax query is refreshing\n    // the events list.\n    var rowID = this.calendar + \"-\" + this.cname;\n    if (this.recurrenceTime)\n        rowID += \"-\" + this.recurrenceTime;\n    var row = $(rowID);\n\n    // Check if event is already selected\n    if (selectedCalendarCell)\n        for (var i = 0; i < selectedCalendarCell.length; i++)\n            if (selectedCalendarCell[i] == this) {\n                alreadySelected = true;\n                break;\n            }\n\n    if ((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1)) {\n        // If meta or ctrl key is pressed, inverse the selection\n        if (alreadySelected) {\n            this.deselect();\n            selectedCalendarCell.splice(i, 1);\n            if (row)\n                row.deselect();\n\n            return true;\n        }\n    }\n    else if (!(alreadySelected && willShowContextualMenu)\n             && event.shiftKey == 0) {\n        // Unselect entries in events list and calendar view, unless :\n        // - Shift key is pressed;\n        // - Or right button is clicked and event is already selected.\n        deselectAll();\n        listOfSelection = null;\n        this.selectElement();\n        if (alreadySelected)\n            selectedCalendarCell = [this];\n    }\n\n    if (!alreadySelected) {\n        // Select event in calendar view\n        selectCalendarEvent(this.calendar, this.cname, this.recurrenceTime);\n    }\n    // Select event in events list\n    if (row) {\n        var div = row.parentNode.parentNode.parentNode;\n        div.scrollTop = row.offsetTop - (div.offsetHeight / 2);\n        row.selectElement();\n    }\n}\n\nfunction onCalendarSelectDay(event) {\n    var day = this.getAttribute(\"day\");\n    var needRefresh = (listFilter == 'view_selectedday' && day != currentDay);\n\n    setSelectedDayDate(day);\n    changeDateSelectorDisplay(day);\n\n    if (needRefresh)\n        refreshEvents();\n\n    var target = Event.findElement(event);\n    var div = target.up('div');\n    if (div && !div.hasClassName('event') && !div.hasClassName('eventInside') && !div.hasClassName('text') && !div.hasClassName('gradient')) {\n        // Target is not an event -- unselect all events.\n        listOfSelection = $(\"eventsList\");\n        deselectAll();\n        return true;\n    }\n\n    if (listOfSelection) {\n        listOfSelection.addClassName(\"_unfocused\");\n    }\n\n    changeCalendarDisplay( { \"day\": currentDay } );\n}\n\nfunction setSelectedDayDate(dayDate) {\n    if (selectedDayDate != dayDate) {\n        var day = $(\"day\" + selectedDayDate);\n        if (day)\n            day.removeClassName(\"selectedDay\");\n        var allDay = $(\"allDay\" + selectedDayDate);\n        if (allDay)\n            allDay.removeClassName(\"selectedDay\");\n\n        selectedDayDate = dayDate;\n\n        day = $(\"day\" + selectedDayDate);\n        day.addClassName(\"selectedDay\");\n        selectedDayNumber = day.readAttribute(\"day-number\");\n        allDay = $(\"allDay\" + selectedDayDate);\n        if (allDay)\n            allDay.addClassName(\"selectedDay\");\n    }\n}\n\n/* after loading a new view, to reselect the currently selected day */\nfunction restoreSelectedDay() {\n    var day = null;\n    if (selectedDayDate.length > 0)\n        day = $(\"day\" + selectedDayDate);\n    if (!day) {\n        if (selectedDayNumber > -1)\n            selectedDayDate = findDateFromDayNumber(selectedDayNumber);\n        else\n            selectedDayDate = currentDay;\n        if (selectedDayDate.length > 0)\n            day = $(\"day\" + selectedDayDate);\n    }\n    if (day) {\n        selectedDayDate = null;\n        setSelectedDayDate(day.id.substr(3));\n    }\n}\n\nfunction findDateFromDayNumber(dayNumber) {\n    var view;\n    if (currentView == \"monthview\")\n        view = $(\"monthDaysView\");\n    else\n        view = $(\"daysView\");\n    var days = view.select(\".day\");\n    return days[dayNumber].readAttribute(\"day\");\n}\n\nfunction onShowCompletedTasks(event) {\n    showCompletedTasks = (this.checked ? 1 : 0);\n\n    return refreshTasks(1);\n}\n\nfunction updateTaskStatus(event) {\n    var newStatus = (this.checked ? 1 : 0);\n    _updateTaskCompletion (this.up(\"tr\"), newStatus);\n    return false;\n}\n\nfunction updateCalendarStatus(event) {\n    var list = [];\n    var newStatus = (this.checked ? 1 : 0);\n\n    var nodes = $(\"calendarList\").childNodesWithTag(\"li\");\n    for (var i = 0; i < nodes.length; i++) {\n        var input = $(nodes[i]).childNodesWithTag(\"input\")[0];\n        if (input.checked) {\n            var folderId = nodes[i].getAttribute(\"id\");\n            var elems = folderId.split(\":\");\n            if (elems.length > 1)\n                list.push(elems[0]);\n            else\n                list.push(UserLogin);\n        }\n    }\n\n    //   if (!list.length) {\n    //      list.push(UserLogin);\n    //      nodes[0].childNodesWithTag(\"input\")[0].checked = true;\n    //   }\n\n    //   ApplicationBaseURL = (UserFolderURL + \"Groups/_custom_\"\n    // \t\t\t+ list.join(\",\") + \"/Calendar/\");\n\n    if (event) {\n        var folderID = this.parentNode.getAttribute(\"id\");\n        var urlstr = URLForFolderID(folderID);\n        if (newStatus)\n            urlstr += \"/activateFolder\";\n        else\n            urlstr += \"/deactivateFolder\";\n        //log(\"updateCalendarStatus: ajax request = \" + urlstr + \", folderID = \" + folderID);\n        triggerAjaxRequest(urlstr, calendarStatusCallback, folderID);\n    }\n    else {\n        updateCalendarsList();\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n\n    if (event) {\n        event.returnValue = true;\n    }\n}\n\nfunction calendarStatusCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            refreshEvents();\n            refreshTasks();\n            changeCalendarDisplay();\n        }\n        else {\n            var folder = $(http.callbackData);\n            var input = folder.childNodesWithTag(\"input\")[0];\n            input.checked = (!input.checked);\n        }\n    }\n    else\n        log(\"calendarStatusCallback Ajax error\");\n}\n\nfunction calendarEntryCallback(http) {\n    if (http.readyState == 4) {\n        var denied = !isHttpStatus204(http.status);\n        var entry = $(http.callbackData);\n        if (denied)\n            entry.addClassName(\"denied\");\n        else\n            entry.removeClassName(\"denied\");\n    }\n}\n\nfunction updateCalendarsList(method) {\n    var list = $(\"calendarList\").childNodesWithTag(\"li\");\n    for (var i = 0; i < list.length; i++) {\n        var folderID = list[i].getAttribute(\"id\");\n        var url = URLForFolderID(folderID) + \"/canAccessContent\";\n        triggerAjaxRequest(url, calendarEntryCallback, folderID);\n    }\n}\n\n//function validateBrowseURL(input) {\n//    var button = $(\"browseURLBtn\");\n//\n//    if (input.value.length) {\n//        if (!button.enabled)\n//            enableAnchor(button);\n//    } else if (!button.disabled)\n//        disableAnchor(button);\n//}\n\n//function browseURL(anchor, event) {\n//    if (event.button == 0) {\n//        var input = $(\"url\");\n//        var url = input.value;\n//        if (url.length)\n//            window.open(url, '_blank');\n//    }\n//\n//    return false;\n//}\n\nfunction onCalendarsMenuPrepareVisibility() {\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes();\n    if (selected.length > 0) {\n        var folderOwner = selected[0].getAttribute(\"owner\");\n\n        var lis = $(this).down(\"ul\").childElements();\n\n        /* distance: sharing = length - 1, export = length - 7 */\n        var endDists = [ 1, 7 ];\n        for (var i = 0; i < endDists.length; i++) {\n            var dist = lis.length - endDists[i];\n            var option = $(lis[dist]);\n            if (folderOwner == UserLogin || IsSuperUser)\n                option.removeClassName(\"disabled\");\n            else\n                option.addClassName(\"disabled\");\n        }\n\n        var deleteCalendarOption = $(\"deleteCalendarMenuItem\");\n        // Swith between Delete and Unsubscribe\n        if (folderOwner == UserLogin)\n            deleteCalendarOption.update(_(\"Delete Calendar\"));\n        else\n            deleteCalendarOption.update(_(\"Unsubscribe Calendar\"));\n\n        return true;\n    }\n    return false;\n}\n\nfunction onMenuCurrentViewPrepareVisibility() {\n    var options = $(this).down(\"ul\");\n    var deleteOption = options.down(\"li\", 6);\n    var copyOption = options.down(\"li\", 7);\n    var rawOption = options.down(\"li\", 8);\n    if (!selectedCalendarCell) {\n        deleteOption.addClassName(\"disabled\");\n        copyOption.addClassName(\"disabled\");\n        rawOption.addClassName(\"disabled\");\n    }\n    else {\n        deleteOption.removeClassName(\"disabled\");\n        var calendarEntry = $(\"/\" + selectedCalendarCell[0].calendar);\n        if (calendarEntry.getAttribute(\"owner\") == UserLogin)\n            copyOption.addClassName(\"disabled\");\n        else\n            copyOption.removeClassName(\"disabled\");\n\tif (selectedCalendarCell.length == 1) {\n\t    // show raw content is only allowed for single event\n            rawOption.removeClassName(\"disabled\");\n        }\n\telse\n            rawOption.addClassName(\"disabled\");\n    }\n\n    return true;\n}\n\nfunction onTasksListMenuPrepareVisibility() {\n    var options = $(this).down(\"ul\");\n    var rawOption = options.down(\"li\", 6);\n\n    var selectedTasks = $$(\"#tasksList ._selected\");\n    if (selectedTasks.length == 1)\n        rawOption.removeClassName(\"disabled\");\n    else\n        rawOption.addClassName(\"disabled\");\n\n    return true;\n}\nfunction getMenus() {\n    var menus = {};\n\n    var dateMenu = [];\n    for (var i = 0; i < 12; i++)\n        dateMenu.push(onMonthMenuItemClick);\n    menus[\"monthListMenu\"] = dateMenu;\n\n    dateMenu = [];\n    for (var i = 0; i < 11; i++)\n        dateMenu.push(onYearMenuItemClick);\n    menus[\"yearListMenu\"] = dateMenu;\n\n    menus[\"eventsListMenu\"] = new Array(onMenuNewEventClick, \"-\",\n                                        onMenuNewTaskClick,\n                                        editEvent, deleteEvent, \"-\",\n                                        onSelectAll, \"-\",\n                                        null, null);\n    menus[\"calendarsMenu\"] = new Array(onCalendarModify,\n                                       \"-\",\n                                       onCalendarNew, onCalendarRemove,\n                                       \"-\", onCalendarExport, onCalendarImport,\n                                       null, \"-\", null, \"-\", onMenuSharing);\n    menus[\"eventSearchMenu\"] = new Array(setSearchCriteria);\n\n    menus[\"tasksListMenu\"] = new Array (editEvent, newTask, \"-\",\n                                        marksTasksAsCompleted, deleteEvent, \"-\",\n\t\t\t\t\tonMenuRawTask);\n    menus[\"taskSearchMenu\"] = new Array(setSearchCriteria);\n\n    var calendarsMenu = $(\"calendarsMenu\");\n    if (calendarsMenu)\n        calendarsMenu.prepareVisibility = onCalendarsMenuPrepareVisibility;\n\n    var tasksListMenu = $(\"tasksListMenu\");\n    if (tasksListMenu)\n        tasksListMenu.prepareVisibility = onTasksListMenuPrepareVisibility;\n\n    return menus;\n}\n\nfunction newTask () {\n    return newEventFromWidget(this, 'task');\n}\n\nfunction marksTasksAsCompleted () {\n    var selectedTasks = $$(\"#tasksList ._selected\");\n\n    for (var i = 0; i < selectedTasks.length; i++) {\n        var task = selectedTasks[i];\n        _updateTaskCompletion (task, 1);\n    }\n}\n\nfunction _updateTaskCompletion (task, value) {\n    url = (ApplicationBaseURL + task.calendar\n           + \"/\" + task.cname + \"/changeStatus?status=\" + value);\n\n    triggerAjaxRequest(url, refreshTasks, null);\n\n    return false;\n}\n\nfunction onMenuRawTask(event) {\n    var selectedTasks = $$(\"#tasksList ._selected\");\n    if (selectedTasks.length != 1) {\n      return;\n    }\n\n    var url = ApplicationBaseURL + selectedTasks[0].calendar  + \"/\" + selectedTasks[0].cname + \"/raw\"\n    openGenericWindow(url);\n}\n\n\nfunction onMenuSharing(event) {\n    if ($(this).hasClassName(\"disabled\"))\n        return;\n\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes()[0];\n    /* FIXME: activation of the context menu should preferably select the entry\n       above which the event has occurred */\n    if (selected) {\n        var folderID = selected.getAttribute(\"id\");\n        var urlstr = URLForFolderID(folderID) + \"/acls\";\n\n        openAclWindow(urlstr);\n    }\n}\n\nfunction onMenuCurrentView(event) {\n    var target = getTarget(event);\n    $(\"eventDialog\").hide();\n    if (this.hasClassName('event')) {\n        // Select event cell\n        var onClick = onCalendarSelectEvent.bind(this);\n        onClick(event, true);\n        target = this;\n    }\n    popupMenu(event, 'currentViewMenu', target);\n}\n\nfunction onMenuAllDayView(event) {\n    $(\"eventDialog\").hide();\n    popupMenu(event, 'allDayViewMenu', getTarget(event));\n}\n\nfunction configureDragHandles() {\n    var handle = $(\"verticalDragHandle\");\n    if (handle) {\n        handle.addInterface(SOGoDragHandlesInterface);\n        handle.leftBlock = $(\"leftPanel\");\n        handle.rightBlock = $(\"rightPanel\");\n    }\n\n    handle = $(\"rightDragHandle\");\n    if (handle) {\n        handle.addInterface(SOGoDragHandlesInterface);\n        handle.upperBlock = $(\"schedulerTabs\");\n        handle.lowerBlock = $(\"calendarView\");\n    }\n}\n\nfunction initCalendarSelector() {\n    var selector = $(\"calendarSelector\");\n    updateCalendarStatus(); // triggers the initial events refresh\n    selector.changeNotification = updateCalendarsList;\n\n    var list = $(\"calendarList\");\n    list.on(\"mousedown\", onCalendarSelectionChange);\n    list.on(\"dblclick\", onCalendarModify);\n    list.on(\"selectstart\", listRowMouseDownHandler);\n    list.attachMenu(\"calendarsMenu\");\n\n    var items = list.childNodesWithTag(\"li\");\n    for (var i = 0; i < items.length; i++) {\n        var input = items[i].childNodesWithTag(\"input\")[0];\n        $(input).observe(\"click\", clickEventWrapper(updateCalendarStatus));\n    }\n\n    var links = $(\"calendarSelectorButtons\").childNodesWithTag(\"a\");\n    $(links[0]).observe(\"click\", clickEventWrapper(onCalendarNew));\n    $(links[1]).observe(\"click\", clickEventWrapper(onCalendarWebAdd));\n    $(links[2]).observe(\"click\", clickEventWrapper(onCalendarAdd));\n    $(links[3]).observe(\"click\", clickEventWrapper(onCalendarRemove));\n}\n\nfunction onCalendarSelectionChange(event) {\n    var target = Event.element(event);\n    if (target.tagName == 'DIV') {\n        target = target.parentNode;\n    }\n\n    onRowClick(event, target);\n}\n\nfunction onCalendarModify(event) {\n    var folders = $(\"calendarList\");\n    var selected = folders.getSelectedNodes()[0];\n    var calendarID = selected.getAttribute(\"id\");\n    var owner = selected.getAttribute(\"owner\");\n    var url = ApplicationBaseURL + calendarID + \"/properties\";\n    var windowID = sanitizeWindowName(calendarID + \" properties\");\n    var width = 410;\n    var height = 410;\n    var isWebCalendar = false;\n    if (UserSettings['Calendar']\n        && UserSettings['Calendar']['WebCalendars']) {\n        var webCalendars = UserSettings['Calendar']['WebCalendars'];\n        var realID = owner + \":Calendar/\" + calendarID.substr (1, calendarID.length - 1);\n        if (webCalendars[realID]) {\n            isWebCalendar = true;\n        }\n    }\n    if (Prototype.Browser.IE) height += 10;\n\n    if (owner == UserLogin) {\n        height += 20;\n    }\n    if (isWebCalendar) {\n        height += 26;\n    }\n    else if (calendarID == \"/personal\") {\n        height -= 26;\n    }\n\n    var properties = window.open(url, windowID,\n                                 \"width=\"+width+\",height=\"+height+\",resizable=0\");\n    properties.focus();\n}\n\nfunction updateCalendarProperties(calendarID, calendarName, calendarColor) {\n    var idParts = calendarID.split(\":\");\n    var folderName = idParts[1].split(\"/\")[1];\n    var nodeID;\n\n    if (idParts[0] != UserLogin)\n        nodeID = \"/\" + idParts[0].asCSSIdentifier() + \"_\" + folderName;\n    else\n        nodeID = \"/\" + folderName;\n\t//   log(\"nodeID: \" + nodeID);\n    var calendarNode = $(nodeID);\n    var childNodes = calendarNode.childNodes;\n    var textNode = childNodes[childNodes.length-1];\n    if (textNode.tagName == 'DIV')\n        calendarNode.appendChild(document.createTextNode(calendarName));\n    else\n        childNodes[childNodes.length-1].nodeValue = calendarName;\n\n    appendStyleElement(nodeID, calendarColor);\n}\n\nfunction onCalendarNew(event) {\n    showPromptDialog(_(\"New Calendar...\"), _(\"Name of the Calendar\"), onCalendarNewConfirm);\n    preventDefault(event);\n}\n\nfunction onCalendarNewConfirm() {\n    createFolder(this.value, appendCalendar);\n    disposeDialog();\n}\n\nfunction onCalendarAdd(event) {\n    openUserFolderSelector(onFolderSubscribeCB, \"calendar\");\n    preventDefault(event);\n}\n\nfunction onCalendarWebAdd(event) {\n    showPromptDialog(_(\"Subscribe to a web calendar...\"), _(\"URL of the Calendar\"), onCalendarWebAddConfirm);\n}\n\nfunction onCalendarWebAddConfirm() {\n    disposeDialog();\n    var calendarUrl = this.value;\n    if (calendarUrl) {\n        var url = ApplicationBaseURL + \"/addWebCalendar\";\n        var parameters = \"url=\" + encodeURIComponent(calendarUrl);\n        triggerAjaxRequest(url, addWebCalendarCallback, calendarUrl, parameters,\n                           { \"Content-type\": \"application/x-www-form-urlencoded\" });\n    }\n}\n\nfunction addWebCalendarCallback(http) {\n    if (http.status == 200) {\n        var data = http.responseText.evalJSON(true);\n        if (!data || data[\"error\"] || !data[\"name\"] || !data[\"folderID\"]) {\n            showAlertDialog (_(\"An error occurred while importing calendar.\"));\n        }\n        else {\n            if (UserSettings['Calendar']) {\n                var webCalendars = UserSettings['Calendar']['WebCalendars'];\n                if (!webCalendars) {\n                    webCalendars = {};\n                    UserSettings['Calendar']['WebCalendars'] = webCalendars;\n                }\n                webCalendars[data[\"folderID\"]] = http.callbackData;\n            }\n\n            appendCalendar(data[\"name\"], data[\"folderID\"]);\n            reloadWebCalendar(data[\"folderID\"]);\n        }\n    }\n    else {\n        showAlertDialog (_(\"An error occurred while importing calendar.\"));\n    }\n\n    // if (data.imported) {\n    //     appendCalendar(data.displayname, \"/\" + data.name);\n    //     refreshEvents();\n    //     refreshTasks();\n    //     changeCalendarDisplay();\n    // }\n    // else if (data.status && data.status == 401) {\n    //     reauthenticateWebCalendar(data.name, data.url);\n    // }\n    // else {\n    // }\n}\n\nfunction onCalendarExport(event) {\n    var node = $(\"calendarList\").getSelectedNodes().first();\n    var folderId = node.getAttribute(\"id\");\n    var url = URLForFolderID(folderId) + \".ics/export\";\n    window.location.href = url;\n}\n\nfunction onCalendarImport(event) {\n    var list = $(\"calendarList\");\n    var node = list.getSelectedNodes().first();\n    var folderId = node.getAttribute(\"id\");\n\n    var url = ApplicationBaseURL + folderId + \"/import\";\n    $(\"uploadForm\").action = url;\n    $(\"calendarFile\").value = \"\";\n\n    var cellPosition = node.cumulativeOffset();\n    var cellDimensions = node.getDimensions();\n    var left = cellDimensions['width'] - 20;\n    var top = cellPosition[1];\n    top -= list.scrollTop;\n\n    var div = $(\"uploadDialog\");\n    var res = $(\"uploadResults\");\n    res.setStyle({ top: top + \"px\", left: left + \"px\" });\n    div.setStyle({ top: top + \"px\", left: left + \"px\" });\n    div.show();\n}\nfunction hideCalendarImport(event) {\n    $(\"uploadDialog\").hide();\n}\nfunction hideImportResults(event) {\n    $(\"uploadResults\").hide();\n}\nfunction validateUploadForm() {\n    rc = false;\n    if ($(\"calendarFile\").value.length) {\n      var btn = jQuery('#uploadSubmit');\n      jQuery('#uploadCancel').fadeOut('fast');\n      btn.addClass(\"disabled\");\n      btn.children('span').text(_('Uploading'));\n      rc = true;\n    }\n    return rc;\n}\nfunction uploadCompleted(response) {\n    jQuery('#uploadCancel').show();\n    var btn = jQuery('#uploadSubmit');\n    btn.removeClass(\"disabled\");\n    btn.children('span').text(_('Upload'));\n    var div = $(\"uploadResults\");\n\n    try {\n\tdata = response.evalJSON(true);\n\n\tif (data.imported < 0)\n            $(\"uploadResultsContent\").update(_(\"An error occurred while importing calendar.\"));\n\telse if (data.imported == 0)\n            $(\"uploadResultsContent\").update(_(\"No event was imported.\"));\n\telse {\n            $(\"uploadResultsContent\").update(_(\"A total of %{0} events were imported in the calendar.\").formatted(data.imported));\n            refreshEventsAndDisplay();\n\t}\n    } catch (e) {\n\t$(\"uploadResultsContent\").update(_(\"An error occurred while importing calendar.\"));\n    }\n\n    hideCalendarImport();\n    $(\"uploadResults\").show();\n}\n\nfunction appendCalendar(folderName, folderPath) {\n    var owner;\n\n    if (folderPath) {\n        owner = getSubscribedFolderOwner(folderPath);\n        folderPath = accessToSubscribedFolder(folderPath);\n    }\n    else\n        folderPath = \"/\" + folderName;\n\n    if (!owner)\n        owner = UserLogin;\n\n    //log (\"append name: \" + folderName + \"; path: \" + folderPath + \"; owner: \" + owner);\n\n    if ($(folderPath))\n        showAlertDialog(_(\"You have already subscribed to that folder!\"));\n    else {\n        var calendarList = $(\"calendarList\");\n        var items = calendarList.select(\"li\");\n        var li = document.createElement(\"li\");\n\n        // Add the calendar to the proper place\n        var i = getListIndexForFolder(items, owner, folderName);\n        if (i != items.length) // User is subscribed to other calendars of the same owner\n            calendarList.insertBefore(li, items[i]);\n        else\n            calendarList.appendChild(li);\n        $(li).writeAttribute(\"id\", folderPath);\n        $(li).writeAttribute(\"owner\", owner);\n\n        var checkBox = createElement(\"input\", null, \"checkBox\", { checked: 1 },\n                                     { type: \"checkbox\" }, li);\n\n        li.appendChild(document.createTextNode(\" \"));\n\n        var colorBox = document.createElement(\"div\");\n        li.appendChild(colorBox);\n        li.appendChild(document.createTextNode(folderName));\n        colorBox.appendChild(document.createTextNode(\"\\u00a0\"));\n\n        $(colorBox).addClassName(\"colorBox\");\n        $(colorBox).addClassName('calendarFolder' + folderPath.substr(1));\n\n        // Check the checkbox (required for IE)\n        li.getElementsByTagName(\"input\")[0].checked = true;\n\n        // Register event on checkbox\n        $(checkBox).on(\"click\", clickEventWrapper(updateCalendarStatus));\n\n        var url = URLForFolderID(folderPath) + \"/canAccessContent\";\n        triggerAjaxRequest(url, calendarEntryCallback, folderPath);\n\n        // Update CSS for events color\n        appendStyleElement(folderPath, \"#AAAAAA\");\n    }\n}\n\nfunction appendStyleElement(folderPath, color) {\n    if (document.styleSheets) {\n        var fgColor = getContrastingTextColor(color);\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n\n        var styles = ' .calendarFolder' + folderPath.substr(1)\n            + ' { background-color: ' + color + ' !important;' + ' color: ' + fgColor + ' !important; }'\n            + ' div.colorBox.calendarFolder' + folderPath.substr(1)\n            + ' { color: ' + color + ' !important; }';\n\n        if (styleElement.styleSheet) styleElement.styleSheet.cssText = styles; // IE\n        else styleElement.appendChild(document.createTextNode(styles));        // Mozilla + Webkit\n\n        document.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n    }\n}\n\nfunction onFolderSubscribeCB(folderData) {\n    var folder = $(folderData[\"folder\"]);\n    if (!folder) {\n        appendCalendar(folderData[\"folderName\"].unescapeHTML(), folderData[\"folder\"]);\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n}\n\nfunction onFolderUnsubscribeCB(folderId) {\n    var node = $(folderId);\n    var list = $(node.parentNode);\n    node.deselect();\n    list.removeChild(node);\n    if (removeFolderRequestCount == 0) {\n        list.down(\"li\").selectElement(); // personal calendar\n        refreshEvents();\n        refreshTasks();\n        changeCalendarDisplay();\n    }\n}\n\nfunction onCalendarRemove(event) {\n    if (removeFolderRequestCount == 0) {\n        var nodes = $(\"calendarList\").getSelectedNodes();\n        for (var i = 0; i < nodes.length; i++) {\n            var owner = nodes[i].getAttribute(\"owner\");\n            var folderId = nodes[i].getAttribute(\"id\");\n            if (owner == UserLogin) {\n                if (folderId == \"/personal\") {\n                    var label = labels[\"You cannot remove nor unsubscribe from your\"\n                                       + \" personal calendar.\"];\n                    showAlertDialog(label);\n                }\n                else {\n                    deletePersonalCalendar(nodes[i]);\n                }\n            }\n            else {\n                var folderUrl = ApplicationBaseURL + folderId;\n                nodes[i].deselect();\n                unsubscribeFromFolder(folderUrl, owner,\n                                      onFolderUnsubscribeCB, folderId);\n            }\n        }\n    }\n\n    preventDefault(event);\n}\n\nfunction deletePersonalCalendar(folderElement) {\n    showConfirmDialog(_(\"Confirmation\"),\n                      _(\"Are you sure you want to delete the calendar \\\"%{0}\\\"?\").formatted(folderElement.lastChild.nodeValue.strip()),\n                      deletePersonalCalendarConfirm.bind(folderElement));\n}\n\nfunction deletePersonalCalendarConfirm() {\n    var folderId = this.getAttribute(\"id\").substr(1);\n    this.deselect();\n    this.hide();\n    removeFolderRequestCount++;\n    var url = ApplicationBaseURL + \"/\" + folderId + \"/delete\";\n    triggerAjaxRequest(url, deletePersonalCalendarCallback, this);\n    disposeDialog();\n}\n\nfunction deletePersonalCalendarCallback(http) {\n    if (http.readyState == 4) {\n        if (isHttpStatus204(http.status)) {\n            var folderElement = http.callbackData;\n            if (folderElement) {\n                var list = folderElement.parentNode;\n                list.removeChild(folderElement);\n            }\n            removeFolderRequestCount--;\n            if (removeFolderRequestCount == 0) {\n                refreshEvents();\n                refreshTasks();\n                changeCalendarDisplay();\n            }\n        }\n    }\n    else {\n        log (\"ajax problem 5: \" + http.status);\n        var folderElement = http.callbackData;\n        folderElement.show();\n    }\n}\n\nfunction configureLists() {\n    // Move calendar view if lists are collapsed\n    if (!$(\"schedulerTabs\").visible()) {\n        $('calendarView').setStyle({ top: '0' }).show();\n    }\n\n    // TASK LIST\n    var list = $(\"tasksList\");\n    list.multiselect = true;\n    configureSortableTableHeaders(list);\n    TableKit.Resizable.init(list, {'trueResize' : true, 'keepWidth' : true});\n    list.down(\"tbody\").on(\"mousedown\", onTasksSelectionChange);\n    list.down(\"tbody\").on(\"selectstart\", listRowMouseDownHandler);\n    list.down(\"tbody\").attachMenu(\"tasksListMenu\");\n\n    var input = $(\"showHideCompletedTasks\");\n    input.observe(\"click\", onShowCompletedTasks);\n    if (showCompletedTasks)\n      input.checked = true;\n\n    // EVENT LIST\n    list = $(\"eventsList\");\n    list.multiselect = true;\n    configureSortableTableHeaders(list);\n    TableKit.Resizable.init(list, {'trueResize' : true, 'keepWidth' : true});\n    list.down(\"tbody\").on(\"mousedown\", onEventsSelectionChange);\n    list.down(\"tbody\").attachMenu(\"eventsListMenu\");\n}\n\nfunction initDateSelectorEvents() {\n    var arrow = $(\"rightArrow\");\n    arrow.observe(\"click\", onDateSelectorGotoMonth);\n    arrow = $(\"leftArrow\");\n    arrow.observe(\"click\", onDateSelectorGotoMonth);\n\n    var menuButton = $(\"monthLabel\");\n    menuButton.observe(\"click\", popupMonthMenu);\n    menuButton = $(\"yearLabel\");\n    menuButton.observe(\"click\", popupMonthMenu);\n}\n\nfunction onBodyClickHandler(event) {\n    $(\"eventDialog\").hide();\n}\n\nfunction onWindowResize(event) {\n    var handle = $(\"verticalDragHandle\");\n    if (handle)\n        handle.adjust();\n    handle = $(\"rightDragHandle\");\n    if (handle)\n        handle.adjust();\n\n    if (!$(document.body).hasClassName(\"popup\"))\n        drawNowLine();\n}\n\nfunction drawNowLine() {\n    var d = new Date();\n    var hours = d.getHours();\n    var minutes = d.getMinutes();\n\n    if (currentView == \"dayview\") {\n        var today = new Date();\n        var m = parseInt(today.getMonth()) + 1;\n        var d = today.getDate();\n        if (m < 10)\n            m = \"0\" + m;\n        if (d < 10)\n            d = \"0\" + d;\n        var day = today.getFullYear() + \"\" + m + \"\" + d;\n        var targets = $$(\"DIV#daysView DIV.days DIV.day[day=\" + day\n                         + \"] DIV.clickableHourCell\");\n    }\n    else if (currentView == \"weekview\")\n        var targets = $$(\"DIV#daysView DIV.days DIV.dayOfToday DIV.clickableHourCell\");\n\n    if (targets) {\n        var target = targets[hours];\n\n        if (target) {\n            var div = $(\"nowLineDisplay\");\n            if (!div)\n                div = new Element(\"div\", {'id': 'nowLineDisplay'});\n\n            div.style.top = parseInt((minutes * target.offsetHeight / 60) - 1) + \"px\";\n            target.insertBefore(div, target.firstChild);\n\n            setTimeout(\"drawNowLine ();\", 60000); // 1 min.\n        }\n    }\n}\n\nfunction onListCollapse(event, element) {\n    var img = element.select('img').first();\n    var tabs = $(\"schedulerTabs\");\n    var handle = $(\"rightDragHandle\");\n    var view = jQuery(\"#calendarView\");\n    var state = 'collapse';\n\n    if (tabs.visible()) {\n        img.removeClassName('collapse').addClassName('rise');\n        handle.hide();\n        view.animate({ top: '0' }, 200, function() {\n            tabs.hide();\n        });\n    }\n    else {\n        state = 'rise';\n        img.removeClassName('rise').addClassName('collapse');\n        tabs.show();\n        tabs.controller.onWindowResize();\n        view.animate({ top: handle.getStyle('top') }, 200, function() {\n            handle.show();\n        });\n    }\n\n    var url =  ApplicationBaseURL + \"saveListState\";\n    var params = \"state=\" + state;\n    triggerAjaxRequest(url, null, null, params,\n                       { \"Content-type\": \"application/x-www-form-urlencoded\" });\n\n}\n\nfunction onDocumentKeydown(event) {\n    var target = Event.element(event);\n    if (target.tagName != \"INPUT\") {\n        var keyCode = event.keyCode;\n        if (!keyCode) {\n            keyCode = event.charCode;\n            if (keyCode == \"a\".charCodeAt(0))\n                keyCode = \"A\".charCodeAt(0);\n            else if (keyCode == \"c\".charCodeAt(0))\n                keyCode = \"C\".charCodeAt(0);\n            else if (keyCode == \"v\".charCodeAt(0))\n                keyCode = \"V\".charCodeAt(0);\n        }\n        if (keyCode == Event.KEY_DELETE\n            || (keyCode == Event.KEY_BACKSPACE)) {\n            $(\"eventDialog\").hide();\n            deleteEvent();\n            event.stop();\n        }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"A\".charCodeAt(0)) {  // Ctrl-A\n            onSelectAll(event);\n            Event.stop(event);\n         }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"C\".charCodeAt(0)) {  // Ctrl-C\n            copyEventToClipboard();\n        }\n        else if (((isMac() && event.metaKey == 1) || (!isMac() && event.ctrlKey == 1))\n                 && keyCode == \"V\".charCodeAt(0)) {  // Ctrl-V\n            copyEventFromClipboard();\n        }\n    }\n}\n\nfunction saveTabState(event) {\n    var tab = $(event).memo;\n\n    var url =  ApplicationBaseURL + \"saveSelectedList\";\n    var params = \"list=\" + tab;\n    triggerAjaxRequest(url, null, null, params,\n                       { \"Content-type\": \"application/x-www-form-urlencoded\" });\n}\n\nfunction initScheduler() {\n    sorting[\"event-header\"] = \"\";\n    sorting[\"task-header\"] = \"\";\n    sorting[\"event-attribute\"] = \"start\";\n    sorting[\"task-attribute\"] = \"end\";\n    sorting[\"event-ascending\"] = true;\n    sorting[\"task-ascending\"] = true;\n\n    if (!$(document.body).hasClassName(\"popup\")) {\n        var node = $(\"filterpopup\");\n        listFilter = node.value;\n\n        var tabsContainer = $(\"schedulerTabs\");\n        var controller = new SOGoTabsController();\n        controller.attachToTabsContainer(tabsContainer);\n        tabsContainer.on(\"tabs:click\", saveTabState);\n\n        if (UserSettings['ShowCompletedTasks']) {\n            showCompletedTasks = parseInt(UserSettings['ShowCompletedTasks']);\n        }\n        else {\n            showCompletedTasks = 0;\n        }\n        initDateSelectorEvents();\n        initCalendarSelector();\n        configureSearchField();\n        configureLists();\n        $(document.body).observe(\"click\", onBodyClickHandler);\n        // Calendar import form\n        $(\"uploadCancel\").observe(\"click\", hideCalendarImport);\n        $(\"uploadOK\").observe(\"click\", hideImportResults);\n        $(\"calendarView\").on(\"click\", \"#listCollapse\", onListCollapse);\n        Event.observe(document, \"keydown\", onDocumentKeydown);\n    }\n\n    onWindowResize.defer();\n    Event.observe(window, \"resize\", onWindowResize);\n}\n\ndocument.observe(\"generic:loaded\", initScheduler);\n"], "filenames": ["NEWS", "UI/Scheduler/UIxAppointmentEditor.m", "UI/Scheduler/UIxCalListingActions.m", "UI/WebServerResources/SchedulerUI.js"], "buggy_code_start_loc": [40, 33, 43, 1786], "buggy_code_end_loc": [40, 533, 400, 1787], "fixing_code_start_loc": [41, 34, 44, 1786], "fixing_code_end_loc": [42, 534, 411, 1787], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in the Web Calendar in SOGo before 2.2.0 allow remote attackers to inject arbitrary web script or HTML via the (1) title of an appointment or (2) contact fields.", "other": {"cve": {"id": "CVE-2014-9905", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-17T17:59:00.140", "lastModified": "2022-12-20T16:52:37.880", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in the Web Calendar in SOGo before 2.2.0 allow remote attackers to inject arbitrary web script or HTML via the (1) title of an appointment or (2) contact fields."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en el Web Calendar en SOGo en versiones anteriores a 2.2.0 permiten a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s del (1) t\u00edtulo de una cita o (2) de los campos de contacto."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alinto:sogo:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.1.1", "matchCriteriaId": "022E6D2E-74F5-478B-A08D-AF393E2C57F1"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/07/09/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "VDB Entry"]}, {"url": "https://github.com/inverse-inc/sogo/commit/1a7fc2a0e90a19dfb1fce292ae5ff53aa513ade9", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/inverse-inc/sogo/commit/3a5e44e7eb8b390b67a8f8a83030b49606956501", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/inverse-inc/sogo/commit/80a09407652ec04e8c9fb6cb48e1029e69a15765", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/inverse-inc/sogo/commit/c94595ea7f0f843c2d7abf25df039b2bbe707625", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://sogo.nu/bugs/view.php?id=2598", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/inverse-inc/sogo/commit/1a7fc2a0e90a19dfb1fce292ae5ff53aa513ade9"}}