{"buggy_code": ["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst commander_1 = require(\"commander\");\nconst analyze_1 = require(\"./analyze\");\nconst autobuild_1 = require(\"./autobuild\");\nconst codeql_1 = require(\"./codeql\");\nconst config_utils_1 = require(\"./config-utils\");\nconst init_1 = require(\"./init\");\nconst languages_1 = require(\"./languages\");\nconst logging_1 = require(\"./logging\");\nconst repository_1 = require(\"./repository\");\nconst upload_lib = __importStar(require(\"./upload-lib\"));\nconst util_1 = require(\"./util\");\nconst program = new commander_1.Command();\nprogram.version(\"0.0.1\");\nfunction getTempDir(userInput) {\n    const tempDir = path.join(userInput || process.cwd(), \"codeql-runner\");\n    if (!fs.existsSync(tempDir)) {\n        fs.mkdirSync(tempDir, { recursive: true });\n    }\n    return tempDir;\n}\nfunction getToolsDir(userInput) {\n    const toolsDir = userInput || path.join(os.homedir(), \"codeql-runner-tools\");\n    if (!fs.existsSync(toolsDir)) {\n        fs.mkdirSync(toolsDir, { recursive: true });\n    }\n    return toolsDir;\n}\nconst codeqlEnvJsonFilename = \"codeql-env.json\";\n// Imports the environment from codeqlEnvJsonFilename if not already present\nfunction importTracerEnvironment(config) {\n    if (!(\"ODASA_TRACER_CONFIGURATION\" in process.env)) {\n        const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n        const env = JSON.parse(fs.readFileSync(jsonEnvFile).toString(\"utf-8\"));\n        for (const key of Object.keys(env)) {\n            process.env[key] = env[key];\n        }\n    }\n}\n// Allow the user to specify refs in full refs/heads/branch format\n// or just the short branch name and prepend \"refs/heads/\" to it.\nfunction parseRef(userInput) {\n    if (userInput.startsWith(\"refs/\")) {\n        return userInput;\n    }\n    else {\n        return `refs/heads/${userInput}`;\n    }\n}\n// Parses the --trace-process-name arg from process.argv, or returns undefined\nfunction parseTraceProcessName() {\n    for (let i = 0; i < process.argv.length - 1; i++) {\n        if (process.argv[i] === \"--trace-process-name\") {\n            return process.argv[i + 1];\n        }\n    }\n    return undefined;\n}\n// Parses the --trace-process-level arg from process.argv, or returns undefined\nfunction parseTraceProcessLevel() {\n    for (let i = 0; i < process.argv.length - 1; i++) {\n        if (process.argv[i] === \"--trace-process-level\") {\n            const v = parseInt(process.argv[i + 1], 10);\n            return isNaN(v) ? undefined : v;\n        }\n    }\n    return undefined;\n}\nprogram\n    .command(\"init\")\n    .description(\"Initializes CodeQL\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--external-repository-token <token>\", \"A token for fetching external config files and queries if they reside in a private repository.\")\n    .option(\"--languages <languages>\", \"Comma-separated list of languages to analyze. Otherwise detects and analyzes all supported languages from the repo.\")\n    .option(\"--queries <queries>\", \"Comma-separated list of additional queries to run. This overrides the same setting in a configuration file.\")\n    .option(\"--config-file <file>\", \"Path to config file.\")\n    .option(\"--codeql-path <path>\", \"Path to a copy of the CodeQL CLI executable to use. Otherwise downloads a copy.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--tools-dir <dir>\", \"Directory to use for CodeQL tools and other files to store between runs. Default is a subdirectory of the home directory.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--debug\", \"Print more verbose output\", false)\n    // This prevents a message like: error: unknown option '--trace-process-level'\n    // Remove this if commander.js starts supporting hidden options.\n    .allowUnknownOption()\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const tempDir = getTempDir(cmd.tempDir);\n        const toolsDir = getToolsDir(cmd.toolsDir);\n        // Wipe the temp dir\n        logger.info(`Cleaning temp directory ${tempDir}`);\n        fs.rmdirSync(tempDir, { recursive: true });\n        fs.mkdirSync(tempDir, { recursive: true });\n        const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n        const apiDetails = {\n            auth,\n            externalRepoAuth: cmd.externalRepositoryToken,\n            url: util_1.parseGithubUrl(cmd.githubUrl),\n        };\n        const gitHubVersion = await util_1.getGitHubVersion(apiDetails);\n        if (gitHubVersion !== undefined) {\n            util_1.checkGitHubVersionInRange(gitHubVersion, \"runner\", logger);\n        }\n        let codeql;\n        if (cmd.codeqlPath !== undefined) {\n            codeql = codeql_1.getCodeQL(cmd.codeqlPath);\n        }\n        else {\n            codeql = (await init_1.initCodeQL(undefined, apiDetails, tempDir, toolsDir, \"runner\", logger)).codeql;\n        }\n        const config = await init_1.initConfig(cmd.languages, cmd.queries, cmd.configFile, repository_1.parseRepositoryNwo(cmd.repository), tempDir, toolsDir, codeql, cmd.checkoutPath || process.cwd(), gitHubVersion, apiDetails, logger);\n        const tracerConfig = await init_1.runInit(codeql, config);\n        if (tracerConfig === undefined) {\n            return;\n        }\n        if (process.platform === \"win32\") {\n            await init_1.injectWindowsTracer(parseTraceProcessName(), parseTraceProcessLevel(), config, codeql, tracerConfig);\n        }\n        // Always output a json file of the env that can be consumed programmatically\n        const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n        fs.writeFileSync(jsonEnvFile, JSON.stringify(tracerConfig.env));\n        if (process.platform === \"win32\") {\n            const batEnvFile = path.join(config.tempDir, \"codeql-env.bat\");\n            const batEnvFileContents = Object.entries(tracerConfig.env)\n                .map(([key, value]) => `Set ${key}=${value}`)\n                .join(\"\\n\");\n            fs.writeFileSync(batEnvFile, batEnvFileContents);\n            const powershellEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n            const powershellEnvFileContents = Object.entries(tracerConfig.env)\n                .map(([key, value]) => `$env:${key}=\"${value}\"`)\n                .join(\"\\n\");\n            fs.writeFileSync(powershellEnvFile, powershellEnvFileContents);\n            logger.info(`\\nCodeQL environment output to \"${jsonEnvFile}\", \"${batEnvFile}\" and \"${powershellEnvFile}\". ` +\n                `Please export these variables to future processes so that CodeQL can monitor the build. ` +\n                `If using cmd/batch run \"call ${batEnvFile}\" ` +\n                `or if using PowerShell run \"cat ${powershellEnvFile} | Invoke-Expression\".`);\n        }\n        else {\n            // Assume that anything that's not windows is using a unix-style shell\n            const shEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n            const shEnvFileContents = Object.entries(tracerConfig.env)\n                // Some vars contain ${LIB} that we do not want to be expanded when executing this script\n                .map(([key, value]) => `export ${key}=\"${value.replace(/\\$/g, \"\\\\$\")}\"`)\n                .join(\"\\n\");\n            fs.writeFileSync(shEnvFile, shEnvFileContents);\n            logger.info(`\\nCodeQL environment output to \"${jsonEnvFile}\" and \"${shEnvFile}\". ` +\n                `Please export these variables to future processes so that CodeQL can monitor the build, ` +\n                `for example by running \". ${shEnvFile}\".`);\n        }\n    }\n    catch (e) {\n        logger.error(\"Init failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"autobuild\")\n    .description(\"Attempts to automatically build code\")\n    .option(\"--language <language>\", \"The language to build. Otherwise will detect the dominant compiled language.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const config = await config_utils_1.getConfig(getTempDir(cmd.tempDir), logger);\n        if (config === undefined) {\n            throw new Error(\"Config file could not be found at expected location. \" +\n                \"Was the 'init' command run with the same '--temp-dir' argument as this command.\");\n        }\n        importTracerEnvironment(config);\n        let language = undefined;\n        if (cmd.language !== undefined) {\n            language = languages_1.parseLanguage(cmd.language);\n            if (language === undefined || !config.languages.includes(language)) {\n                throw new Error(`\"${cmd.language}\" is not a recognised language. ` +\n                    `Known languages in this project are ${config.languages.join(\", \")}.`);\n            }\n        }\n        else {\n            language = autobuild_1.determineAutobuildLanguage(config, logger);\n        }\n        if (language !== undefined) {\n            await autobuild_1.runAutobuild(language, config, logger);\n        }\n    }\n    catch (e) {\n        logger.error(\"Autobuild failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"analyze\")\n    .description(\"Finishes extracting code and runs CodeQL queries\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--commit <commit>\", \"SHA of commit that was analyzed. (Required)\")\n    .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--no-upload\", \"Do not upload results after analysis.\")\n    .option(\"--output-dir <dir>\", \"Directory to output SARIF files to. Default is in the temp directory.\")\n    .option(\"--ram <ram>\", \"Amount of memory to use when running queries. Default is to use all available memory.\")\n    .option(\"--no-add-snippets\", \"Specify whether to include code snippets in the sarif output.\")\n    .option(\"--threads <threads>\", \"Number of threads to use when running queries. \" +\n    \"Default is to use all available cores.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const tempDir = getTempDir(cmd.tempDir);\n        const outputDir = cmd.outputDir || path.join(tempDir, \"codeql-sarif\");\n        const config = await config_utils_1.getConfig(getTempDir(cmd.tempDir), logger);\n        if (config === undefined) {\n            throw new Error(\"Config file could not be found at expected location. \" +\n                \"Was the 'init' command run with the same '--temp-dir' argument as this command.\");\n        }\n        const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n        const apiDetails = {\n            auth,\n            url: util_1.parseGithubUrl(cmd.githubUrl),\n        };\n        await analyze_1.runAnalyze(outputDir, util_1.getMemoryFlag(cmd.ram), util_1.getAddSnippetsFlag(cmd.addSnippets), util_1.getThreadsFlag(cmd.threads, logger), config, logger);\n        if (!cmd.upload) {\n            logger.info(\"Not uploading results\");\n            return;\n        }\n        await upload_lib.uploadFromRunner(outputDir, repository_1.parseRepositoryNwo(cmd.repository), cmd.commit, parseRef(cmd.ref), cmd.checkoutPath || process.cwd(), config.gitHubVersion, apiDetails, logger);\n    }\n    catch (e) {\n        logger.error(\"Analyze failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"upload\")\n    .description(\"Uploads a SARIF file, or all SARIF files from a directory, to code scanning\")\n    .requiredOption(\"--sarif-file <file>\", \"SARIF file to upload, or a directory containing multiple SARIF files. (Required)\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--commit <commit>\", \"SHA of commit that was analyzed. (Required)\")\n    .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n    const apiDetails = {\n        auth,\n        url: util_1.parseGithubUrl(cmd.githubUrl),\n    };\n    try {\n        const gitHubVersion = await util_1.getGitHubVersion(apiDetails);\n        await upload_lib.uploadFromRunner(cmd.sarifFile, repository_1.parseRepositoryNwo(cmd.repository), cmd.commit, parseRef(cmd.ref), cmd.checkoutPath || process.cwd(), gitHubVersion, apiDetails, logger);\n    }\n    catch (e) {\n        logger.error(\"Upload failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram.parse(process.argv);\n//# sourceMappingURL=runner.js.map", "{\"version\":3,\"file\":\"runner.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/runner.ts\"],\"names\":[],\"mappings\":\";;;;;;;;;AAAA,uCAAyB;AACzB,uCAAyB;AACzB,2CAA6B;AAE7B,yCAAoC;AAEpC,uCAAuC;AACvC,2CAAuE;AACvE,qCAA6C;AAC7C,iDAAmD;AACnD,iCAA8E;AAC9E,2CAAsD;AACtD,uCAA4C;AAC5C,6CAAkD;AAClD,yDAA2C;AAC3C,iCAQgB;AAEhB,MAAM,OAAO,GAAG,IAAI,mBAAO,EAAE,CAAC;AAC9B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAEzB,SAAS,UAAU,CAAC,SAA6B;IAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,CAAC,CAAC;IACvE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QAC3B,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KAC5C;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,WAAW,CAAC,SAA6B;IAChD,MAAM,QAAQ,GAAG,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,qBAAqB,CAAC,CAAC;IAC7E,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC5B,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KAC7C;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,qBAAqB,GAAG,iBAAiB,CAAC;AAEhD,4EAA4E;AAC5E,SAAS,uBAAuB,CAAC,MAAc;IAC7C,IAAI,CAAC,CAAC,4BAA4B,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;QACrE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACvE,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SAC7B;KACF;AACH,CAAC;AAED,kEAAkE;AAClE,iEAAiE;AACjE,SAAS,QAAQ,CAAC,SAAiB;IACjC,IAAI,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QACjC,OAAO,SAAS,CAAC;KAClB;SAAM;QACL,OAAO,cAAc,SAAS,EAAE,CAAC;KAClC;AACH,CAAC;AAED,8EAA8E;AAC9E,SAAS,qBAAqB;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAChD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,sBAAsB,EAAE;YAC9C,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5B;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,+EAA+E;AAC/E,SAAS,sBAAsB;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAChD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,uBAAuB,EAAE;YAC/C,MAAM,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAkBD,OAAO;KACJ,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,oBAAoB,CAAC;KACjC,cAAc,CAAC,2BAA2B,EAAE,6BAA6B,CAAC;KAC1E,cAAc,CAAC,oBAAoB,EAAE,oCAAoC,CAAC;KAC1E,MAAM,CACL,sBAAsB,EACtB,+HAA+H,CAChI;KACA,MAAM,CACL,qBAAqB,EACrB,6DAA6D,CAC9D;KACA,MAAM,CACL,qCAAqC,EACrC,gGAAgG,CACjG;KACA,MAAM,CACL,yBAAyB,EACzB,qHAAqH,CACtH;KACA,MAAM,CACL,qBAAqB,EACrB,6GAA6G,CAC9G;KACA,MAAM,CAAC,sBAAsB,EAAE,sBAAsB,CAAC;KACtD,MAAM,CACL,sBAAsB,EACtB,iFAAiF,CAClF;KACA,MAAM,CACL,kBAAkB,EAClB,qEAAqE,CACtE;KACA,MAAM,CACL,mBAAmB,EACnB,2HAA2H,CAC5H;KACA,MAAM,CACL,wBAAwB,EACxB,0DAA0D,CAC3D;KACA,MAAM,CAAC,SAAS,EAAE,2BAA2B,EAAE,KAAK,CAAC;IACtD,8EAA8E;IAC9E,gEAAgE;KAC/D,kBAAkB,EAAE;KACpB,MAAM,CAAC,KAAK,EAAE,GAAa,EAAE,EAAE;IAC9B,MAAM,MAAM,GAAG,yBAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI;QACF,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE3C,oBAAoB;QACpB,MAAM,CAAC,IAAI,CAAC,2BAA2B,OAAO,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3C,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE3C,MAAM,IAAI,GAAG,MAAM,oBAAa,CAC9B,MAAM,EACN,GAAG,CAAC,UAAU,EACd,GAAG,CAAC,eAAe,CACpB,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,IAAI;YACJ,gBAAgB,EAAE,GAAG,CAAC,uBAAuB;YAC7C,GAAG,EAAE,qBAAc,CAAC,GAAG,CAAC,SAAS,CAAC;SACnC,CAAC;QAEF,MAAM,aAAa,GAAG,MAAM,uBAAgB,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,gCAAyB,CAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC5D;QAED,IAAI,MAAc,CAAC;QACnB,IAAI,GAAG,CAAC,UAAU,KAAK,SAAS,EAAE;YAChC,MAAM,GAAG,kBAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;SACpC;aAAM;YACL,MAAM,GAAG,CACP,MAAM,iBAAU,CACd,SAAS,EACT,UAAU,EACV,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,MAAM,CACP,CACF,CAAC,MAAM,CAAC;SACV;QAED,MAAM,MAAM,GAAG,MAAM,iBAAU,CAC7B,GAAG,CAAC,SAAS,EACb,GAAG,CAAC,OAAO,EACX,GAAG,CAAC,UAAU,EACd,+BAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,EAClC,OAAO,EACP,QAAQ,EACR,MAAM,EACN,GAAG,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,EAAE,EACjC,aAAa,EACb,UAAU,EACV,MAAM,CACP,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,cAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACnD,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,OAAO;SACR;QAED,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;YAChC,MAAM,0BAAmB,CACvB,qBAAqB,EAAE,EACvB,sBAAsB,EAAE,EACxB,MAAM,EACN,MAAM,EACN,YAAY,CACb,CAAC;SACH;QAED,6EAA6E;QAC7E,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;QACrE,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAEhE,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;YAChC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;YAC/D,MAAM,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;iBACxD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,OAAO,GAAG,IAAI,KAAK,EAAE,CAAC;iBAC5C,IAAI,CAAC,IAAI,CAAC,CAAC;YACd,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;YAEjD,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YACrE,MAAM,yBAAyB,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;iBAC/D,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,QAAQ,GAAG,KAAK,KAAK,GAAG,CAAC;iBAC/C,IAAI,CAAC,IAAI,CAAC,CAAC;YACd,EAAE,CAAC,aAAa,CAAC,iBAAiB,EAAE,yBAAyB,CAAC,CAAC;YAE/D,MAAM,CAAC,IAAI,CACT,mCAAmC,WAAW,OAAO,UAAU,UAAU,iBAAiB,KAAK;gBAC7F,0FAA0F;gBAC1F,gCAAgC,UAAU,IAAI;gBAC9C,mCAAmC,iBAAiB,wBAAwB,CAC/E,CAAC;SACH;aAAM;YACL,sEAAsE;YACtE,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YAC7D,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;gBACxD,yFAAyF;iBACxF,GAAG,CACF,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,UAAU,GAAG,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CACnE;iBACA,IAAI,CAAC,IAAI,CAAC,CAAC;YACd,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;YAE/C,MAAM,CAAC,IAAI,CACT,mCAAmC,WAAW,UAAU,SAAS,KAAK;gBACpE,0FAA0F;gBAC1F,6BAA6B,SAAS,IAAI,CAC7C,CAAC;SACH;KACF;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACtB;AACH,CAAC,CAAC,CAAC;AAQL,OAAO;KACJ,OAAO,CAAC,WAAW,CAAC;KACpB,WAAW,CAAC,sCAAsC,CAAC;KACnD,MAAM,CACL,uBAAuB,EACvB,8EAA8E,CAC/E;KACA,MAAM,CACL,kBAAkB,EAClB,qEAAqE,CACtE;KACA,MAAM,CAAC,SAAS,EAAE,2BAA2B,EAAE,KAAK,CAAC;KACrD,MAAM,CAAC,KAAK,EAAE,GAAkB,EAAE,EAAE;IACnC,MAAM,MAAM,GAAG,yBAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,wBAAS,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;QAChE,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CACb,uDAAuD;gBACrD,iFAAiF,CACpF,CAAC;SACH;QACD,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,QAAQ,GAAyB,SAAS,CAAC;QAC/C,IAAI,GAAG,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC9B,QAAQ,GAAG,yBAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAClE,MAAM,IAAI,KAAK,CACb,IAAI,GAAG,CAAC,QAAQ,kCAAkC;oBAChD,uCAAuC,MAAM,CAAC,SAAS,CAAC,IAAI,CAC1D,IAAI,CACL,GAAG,CACP,CAAC;aACH;SACF;aAAM;YACL,QAAQ,GAAG,sCAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SACvD;QACD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,MAAM,wBAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;SAC9C;KACF;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACtB;AACH,CAAC,CAAC,CAAC;AAmBL,OAAO;KACJ,OAAO,CAAC,SAAS,CAAC;KAClB,WAAW,CAAC,kDAAkD,CAAC;KAC/D,cAAc,CAAC,2BAA2B,EAAE,6BAA6B,CAAC;KAC1E,cAAc,CACb,mBAAmB,EACnB,6CAA6C,CAC9C;KACA,cAAc,CAAC,aAAa,EAAE,2CAA2C,CAAC;KAC1E,cAAc,CAAC,oBAAoB,EAAE,oCAAoC,CAAC;KAC1E,MAAM,CACL,sBAAsB,EACtB,+HAA+H,CAChI;KACA,MAAM,CACL,qBAAqB,EACrB,6DAA6D,CAC9D;KACA,MAAM,CACL,wBAAwB,EACxB,0DAA0D,CAC3D;KACA,MAAM,CAAC,aAAa,EAAE,uCAAuC,CAAC;KAC9D,MAAM,CACL,oBAAoB,EACpB,uEAAuE,CACxE;KACA,MAAM,CACL,aAAa,EACb,uFAAuF,CACxF;KACA,MAAM,CACL,mBAAmB,EACnB,+DAA+D,CAChE;KACA,MAAM,CACL,qBAAqB,EACrB,iDAAiD;IAC/C,wCAAwC,CAC3C;KACA,MAAM,CACL,kBAAkB,EAClB,qEAAqE,CACtE;KACA,MAAM,CAAC,SAAS,EAAE,2BAA2B,EAAE,KAAK,CAAC;KACrD,MAAM,CAAC,KAAK,EAAE,GAAgB,EAAE,EAAE;IACjC,MAAM,MAAM,GAAG,yBAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI;QACF,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,MAAM,wBAAS,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;QAChE,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CACb,uDAAuD;gBACrD,iFAAiF,CACpF,CAAC;SACH;QAED,MAAM,IAAI,GAAG,MAAM,oBAAa,CAC9B,MAAM,EACN,GAAG,CAAC,UAAU,EACd,GAAG,CAAC,eAAe,CACpB,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,IAAI;YACJ,GAAG,EAAE,qBAAc,CAAC,GAAG,CAAC,SAAS,CAAC;SACnC,CAAC;QAEF,MAAM,oBAAU,CACd,SAAS,EACT,oBAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EACtB,yBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,EACnC,qBAAc,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,EACnC,MAAM,EACN,MAAM,CACP,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACrC,OAAO;SACR;QAED,MAAM,UAAU,CAAC,gBAAgB,CAC/B,SAAS,EACT,+BAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,EAClC,GAAG,CAAC,MAAM,EACV,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EACjB,GAAG,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,EAAE,EACjC,MAAM,CAAC,aAAa,EACpB,UAAU,EACV,MAAM,CACP,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACtB;AACH,CAAC,CAAC,CAAC;AAcL,OAAO;KACJ,OAAO,CAAC,QAAQ,CAAC;KACjB,WAAW,CACV,6EAA6E,CAC9E;KACA,cAAc,CACb,qBAAqB,EACrB,kFAAkF,CACnF;KACA,cAAc,CAAC,2BAA2B,EAAE,6BAA6B,CAAC;KAC1E,cAAc,CACb,mBAAmB,EACnB,6CAA6C,CAC9C;KACA,cAAc,CAAC,aAAa,EAAE,2CAA2C,CAAC;KAC1E,cAAc,CAAC,oBAAoB,EAAE,oCAAoC,CAAC;KAC1E,MAAM,CACL,sBAAsB,EACtB,+HAA+H,CAChI;KACA,MAAM,CACL,qBAAqB,EACrB,6DAA6D,CAC9D;KACA,MAAM,CACL,wBAAwB,EACxB,0DAA0D,CAC3D;KACA,MAAM,CAAC,SAAS,EAAE,2BAA2B,EAAE,KAAK,CAAC;KACrD,MAAM,CAAC,KAAK,EAAE,GAAe,EAAE,EAAE;IAChC,MAAM,MAAM,GAAG,yBAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,IAAI,GAAG,MAAM,oBAAa,CAC9B,MAAM,EACN,GAAG,CAAC,UAAU,EACd,GAAG,CAAC,eAAe,CACpB,CAAC;IACF,MAAM,UAAU,GAAG;QACjB,IAAI;QACJ,GAAG,EAAE,qBAAc,CAAC,GAAG,CAAC,SAAS,CAAC;KACnC,CAAC;IACF,IAAI;QACF,MAAM,aAAa,GAAG,MAAM,uBAAgB,CAAC,UAAU,CAAC,CAAC;QACzD,MAAM,UAAU,CAAC,gBAAgB,CAC/B,GAAG,CAAC,SAAS,EACb,+BAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,EAClC,GAAG,CAAC,MAAM,EACV,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EACjB,GAAG,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,EAAE,EACjC,aAAa,EACb,UAAU,EACV,MAAM,CACP,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACtB;AACH,CAAC,CAAC,CAAC;AAEL,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC\"}", "import * as path from \"path\";\n\nimport * as githubUtils from \"@actions/github/lib/utils\";\nimport consoleLogLevel from \"console-log-level\";\n\nimport { getRequiredEnvParam, getRequiredInput } from \"./actions-util\";\nimport { isLocalRun } from \"./util\";\n\nexport enum DisallowedAPIVersionReason {\n  ACTION_TOO_OLD,\n  ACTION_TOO_NEW,\n}\n\nexport type GitHubApiCombinedDetails = GitHubApiDetails &\n  GitHubApiExternalRepoDetails;\n\nexport interface GitHubApiDetails {\n  auth: string;\n  url: string;\n}\n\nexport interface GitHubApiExternalRepoDetails {\n  externalRepoAuth: string | undefined;\n  url: string;\n}\n\nexport const getApiClient = function (\n  apiDetails: GitHubApiDetails,\n  allowLocalRun = false\n) {\n  if (isLocalRun() && !allowLocalRun) {\n    throw new Error(\"Invalid API call in local run\");\n  }\n  return new githubUtils.GitHub(\n    githubUtils.getOctokitOptions(apiDetails.auth, {\n      baseUrl: getApiUrl(apiDetails.url),\n      userAgent: \"CodeQL Action\",\n      log: consoleLogLevel({ level: \"debug\" }),\n    })\n  );\n};\n\nfunction getApiUrl(githubUrl: string): string {\n  const url = new URL(githubUrl);\n\n  // If we detect this is trying to connect to github.com\n  // then return with a fixed canonical URL.\n  if (url.hostname === \"github.com\" || url.hostname === \"api.github.com\") {\n    return \"https://api.github.com\";\n  }\n\n  // Add the /api/v3 API prefix\n  url.pathname = path.join(url.pathname, \"api\", \"v3\");\n  return url.toString();\n}\n\n// Temporary function to aid in the transition to running on and off of github actions.\n// Once all code has been converted this function should be removed or made canonical\n// and called only from the action entrypoints.\nexport function getActionsApiClient(allowLocalRun = false) {\n  const apiDetails = {\n    auth: getRequiredInput(\"token\"),\n    url: getRequiredEnvParam(\"GITHUB_SERVER_URL\"),\n  };\n\n  return getApiClient(apiDetails, allowLocalRun);\n}\n", "import * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\n\nimport { Command } from \"commander\";\n\nimport { runAnalyze } from \"./analyze\";\nimport { determineAutobuildLanguage, runAutobuild } from \"./autobuild\";\nimport { CodeQL, getCodeQL } from \"./codeql\";\nimport { Config, getConfig } from \"./config-utils\";\nimport { initCodeQL, initConfig, injectWindowsTracer, runInit } from \"./init\";\nimport { Language, parseLanguage } from \"./languages\";\nimport { getRunnerLogger } from \"./logging\";\nimport { parseRepositoryNwo } from \"./repository\";\nimport * as upload_lib from \"./upload-lib\";\nimport {\n  checkGitHubVersionInRange,\n  getAddSnippetsFlag,\n  getGitHubVersion,\n  getMemoryFlag,\n  getThreadsFlag,\n  parseGithubUrl,\n  getGitHubAuth,\n} from \"./util\";\n\nconst program = new Command();\nprogram.version(\"0.0.1\");\n\nfunction getTempDir(userInput: string | undefined): string {\n  const tempDir = path.join(userInput || process.cwd(), \"codeql-runner\");\n  if (!fs.existsSync(tempDir)) {\n    fs.mkdirSync(tempDir, { recursive: true });\n  }\n  return tempDir;\n}\n\nfunction getToolsDir(userInput: string | undefined): string {\n  const toolsDir = userInput || path.join(os.homedir(), \"codeql-runner-tools\");\n  if (!fs.existsSync(toolsDir)) {\n    fs.mkdirSync(toolsDir, { recursive: true });\n  }\n  return toolsDir;\n}\n\nconst codeqlEnvJsonFilename = \"codeql-env.json\";\n\n// Imports the environment from codeqlEnvJsonFilename if not already present\nfunction importTracerEnvironment(config: Config) {\n  if (!(\"ODASA_TRACER_CONFIGURATION\" in process.env)) {\n    const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n    const env = JSON.parse(fs.readFileSync(jsonEnvFile).toString(\"utf-8\"));\n    for (const key of Object.keys(env)) {\n      process.env[key] = env[key];\n    }\n  }\n}\n\n// Allow the user to specify refs in full refs/heads/branch format\n// or just the short branch name and prepend \"refs/heads/\" to it.\nfunction parseRef(userInput: string): string {\n  if (userInput.startsWith(\"refs/\")) {\n    return userInput;\n  } else {\n    return `refs/heads/${userInput}`;\n  }\n}\n\n// Parses the --trace-process-name arg from process.argv, or returns undefined\nfunction parseTraceProcessName(): string | undefined {\n  for (let i = 0; i < process.argv.length - 1; i++) {\n    if (process.argv[i] === \"--trace-process-name\") {\n      return process.argv[i + 1];\n    }\n  }\n  return undefined;\n}\n\n// Parses the --trace-process-level arg from process.argv, or returns undefined\nfunction parseTraceProcessLevel(): number | undefined {\n  for (let i = 0; i < process.argv.length - 1; i++) {\n    if (process.argv[i] === \"--trace-process-level\") {\n      const v = parseInt(process.argv[i + 1], 10);\n      return isNaN(v) ? undefined : v;\n    }\n  }\n  return undefined;\n}\n\ninterface InitArgs {\n  languages: string | undefined;\n  queries: string | undefined;\n  configFile: string | undefined;\n  codeqlPath: string | undefined;\n  tempDir: string | undefined;\n  toolsDir: string | undefined;\n  checkoutPath: string | undefined;\n  repository: string;\n  githubUrl: string;\n  githubAuth: string;\n  githubAuthStdin: boolean;\n  externalRepositoryToken: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"init\")\n  .description(\"Initializes CodeQL\")\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--external-repository-token <token>\",\n    \"A token for fetching external config files and queries if they reside in a private repository.\"\n  )\n  .option(\n    \"--languages <languages>\",\n    \"Comma-separated list of languages to analyze. Otherwise detects and analyzes all supported languages from the repo.\"\n  )\n  .option(\n    \"--queries <queries>\",\n    \"Comma-separated list of additional queries to run. This overrides the same setting in a configuration file.\"\n  )\n  .option(\"--config-file <file>\", \"Path to config file.\")\n  .option(\n    \"--codeql-path <path>\",\n    \"Path to a copy of the CodeQL CLI executable to use. Otherwise downloads a copy.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\n    \"--tools-dir <dir>\",\n    \"Directory to use for CodeQL tools and other files to store between runs. Default is a subdirectory of the home directory.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  // This prevents a message like: error: unknown option '--trace-process-level'\n  // Remove this if commander.js starts supporting hidden options.\n  .allowUnknownOption()\n  .action(async (cmd: InitArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const tempDir = getTempDir(cmd.tempDir);\n      const toolsDir = getToolsDir(cmd.toolsDir);\n\n      // Wipe the temp dir\n      logger.info(`Cleaning temp directory ${tempDir}`);\n      fs.rmdirSync(tempDir, { recursive: true });\n      fs.mkdirSync(tempDir, { recursive: true });\n\n      const auth = await getGitHubAuth(\n        logger,\n        cmd.githubAuth,\n        cmd.githubAuthStdin\n      );\n\n      const apiDetails = {\n        auth,\n        externalRepoAuth: cmd.externalRepositoryToken,\n        url: parseGithubUrl(cmd.githubUrl),\n      };\n\n      const gitHubVersion = await getGitHubVersion(apiDetails);\n      if (gitHubVersion !== undefined) {\n        checkGitHubVersionInRange(gitHubVersion, \"runner\", logger);\n      }\n\n      let codeql: CodeQL;\n      if (cmd.codeqlPath !== undefined) {\n        codeql = getCodeQL(cmd.codeqlPath);\n      } else {\n        codeql = (\n          await initCodeQL(\n            undefined,\n            apiDetails,\n            tempDir,\n            toolsDir,\n            \"runner\",\n            logger\n          )\n        ).codeql;\n      }\n\n      const config = await initConfig(\n        cmd.languages,\n        cmd.queries,\n        cmd.configFile,\n        parseRepositoryNwo(cmd.repository),\n        tempDir,\n        toolsDir,\n        codeql,\n        cmd.checkoutPath || process.cwd(),\n        gitHubVersion,\n        apiDetails,\n        logger\n      );\n\n      const tracerConfig = await runInit(codeql, config);\n      if (tracerConfig === undefined) {\n        return;\n      }\n\n      if (process.platform === \"win32\") {\n        await injectWindowsTracer(\n          parseTraceProcessName(),\n          parseTraceProcessLevel(),\n          config,\n          codeql,\n          tracerConfig\n        );\n      }\n\n      // Always output a json file of the env that can be consumed programmatically\n      const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n      fs.writeFileSync(jsonEnvFile, JSON.stringify(tracerConfig.env));\n\n      if (process.platform === \"win32\") {\n        const batEnvFile = path.join(config.tempDir, \"codeql-env.bat\");\n        const batEnvFileContents = Object.entries(tracerConfig.env)\n          .map(([key, value]) => `Set ${key}=${value}`)\n          .join(\"\\n\");\n        fs.writeFileSync(batEnvFile, batEnvFileContents);\n\n        const powershellEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n        const powershellEnvFileContents = Object.entries(tracerConfig.env)\n          .map(([key, value]) => `$env:${key}=\"${value}\"`)\n          .join(\"\\n\");\n        fs.writeFileSync(powershellEnvFile, powershellEnvFileContents);\n\n        logger.info(\n          `\\nCodeQL environment output to \"${jsonEnvFile}\", \"${batEnvFile}\" and \"${powershellEnvFile}\". ` +\n            `Please export these variables to future processes so that CodeQL can monitor the build. ` +\n            `If using cmd/batch run \"call ${batEnvFile}\" ` +\n            `or if using PowerShell run \"cat ${powershellEnvFile} | Invoke-Expression\".`\n        );\n      } else {\n        // Assume that anything that's not windows is using a unix-style shell\n        const shEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n        const shEnvFileContents = Object.entries(tracerConfig.env)\n          // Some vars contain ${LIB} that we do not want to be expanded when executing this script\n          .map(\n            ([key, value]) => `export ${key}=\"${value.replace(/\\$/g, \"\\\\$\")}\"`\n          )\n          .join(\"\\n\");\n        fs.writeFileSync(shEnvFile, shEnvFileContents);\n\n        logger.info(\n          `\\nCodeQL environment output to \"${jsonEnvFile}\" and \"${shEnvFile}\". ` +\n            `Please export these variables to future processes so that CodeQL can monitor the build, ` +\n            `for example by running \". ${shEnvFile}\".`\n        );\n      }\n    } catch (e) {\n      logger.error(\"Init failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface AutobuildArgs {\n  language: string;\n  tempDir: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"autobuild\")\n  .description(\"Attempts to automatically build code\")\n  .option(\n    \"--language <language>\",\n    \"The language to build. Otherwise will detect the dominant compiled language.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: AutobuildArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const config = await getConfig(getTempDir(cmd.tempDir), logger);\n      if (config === undefined) {\n        throw new Error(\n          \"Config file could not be found at expected location. \" +\n            \"Was the 'init' command run with the same '--temp-dir' argument as this command.\"\n        );\n      }\n      importTracerEnvironment(config);\n      let language: Language | undefined = undefined;\n      if (cmd.language !== undefined) {\n        language = parseLanguage(cmd.language);\n        if (language === undefined || !config.languages.includes(language)) {\n          throw new Error(\n            `\"${cmd.language}\" is not a recognised language. ` +\n              `Known languages in this project are ${config.languages.join(\n                \", \"\n              )}.`\n          );\n        }\n      } else {\n        language = determineAutobuildLanguage(config, logger);\n      }\n      if (language !== undefined) {\n        await runAutobuild(language, config, logger);\n      }\n    } catch (e) {\n      logger.error(\"Autobuild failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface AnalyzeArgs {\n  repository: string;\n  commit: string;\n  ref: string;\n  githubUrl: string;\n  githubAuth: string;\n  githubAuthStdin: boolean;\n  checkoutPath: string | undefined;\n  upload: boolean;\n  outputDir: string | undefined;\n  ram: string | undefined;\n  addSnippets: boolean;\n  threads: string | undefined;\n  tempDir: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"analyze\")\n  .description(\"Finishes extracting code and runs CodeQL queries\")\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\n    \"--commit <commit>\",\n    \"SHA of commit that was analyzed. (Required)\"\n  )\n  .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--no-upload\", \"Do not upload results after analysis.\")\n  .option(\n    \"--output-dir <dir>\",\n    \"Directory to output SARIF files to. Default is in the temp directory.\"\n  )\n  .option(\n    \"--ram <ram>\",\n    \"Amount of memory to use when running queries. Default is to use all available memory.\"\n  )\n  .option(\n    \"--no-add-snippets\",\n    \"Specify whether to include code snippets in the sarif output.\"\n  )\n  .option(\n    \"--threads <threads>\",\n    \"Number of threads to use when running queries. \" +\n      \"Default is to use all available cores.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: AnalyzeArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const tempDir = getTempDir(cmd.tempDir);\n      const outputDir = cmd.outputDir || path.join(tempDir, \"codeql-sarif\");\n      const config = await getConfig(getTempDir(cmd.tempDir), logger);\n      if (config === undefined) {\n        throw new Error(\n          \"Config file could not be found at expected location. \" +\n            \"Was the 'init' command run with the same '--temp-dir' argument as this command.\"\n        );\n      }\n\n      const auth = await getGitHubAuth(\n        logger,\n        cmd.githubAuth,\n        cmd.githubAuthStdin\n      );\n\n      const apiDetails = {\n        auth,\n        url: parseGithubUrl(cmd.githubUrl),\n      };\n\n      await runAnalyze(\n        outputDir,\n        getMemoryFlag(cmd.ram),\n        getAddSnippetsFlag(cmd.addSnippets),\n        getThreadsFlag(cmd.threads, logger),\n        config,\n        logger\n      );\n\n      if (!cmd.upload) {\n        logger.info(\"Not uploading results\");\n        return;\n      }\n\n      await upload_lib.uploadFromRunner(\n        outputDir,\n        parseRepositoryNwo(cmd.repository),\n        cmd.commit,\n        parseRef(cmd.ref),\n        cmd.checkoutPath || process.cwd(),\n        config.gitHubVersion,\n        apiDetails,\n        logger\n      );\n    } catch (e) {\n      logger.error(\"Analyze failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface UploadArgs {\n  sarifFile: string;\n  repository: string;\n  commit: string;\n  ref: string;\n  githubUrl: string;\n  githubAuthStdin: boolean;\n  githubAuth: string;\n  checkoutPath: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"upload\")\n  .description(\n    \"Uploads a SARIF file, or all SARIF files from a directory, to code scanning\"\n  )\n  .requiredOption(\n    \"--sarif-file <file>\",\n    \"SARIF file to upload, or a directory containing multiple SARIF files. (Required)\"\n  )\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\n    \"--commit <commit>\",\n    \"SHA of commit that was analyzed. (Required)\"\n  )\n  .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: UploadArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    const auth = await getGitHubAuth(\n      logger,\n      cmd.githubAuth,\n      cmd.githubAuthStdin\n    );\n    const apiDetails = {\n      auth,\n      url: parseGithubUrl(cmd.githubUrl),\n    };\n    try {\n      const gitHubVersion = await getGitHubVersion(apiDetails);\n      await upload_lib.uploadFromRunner(\n        cmd.sarifFile,\n        parseRepositoryNwo(cmd.repository),\n        cmd.commit,\n        parseRef(cmd.ref),\n        cmd.checkoutPath || process.cwd(),\n        gitHubVersion,\n        apiDetails,\n        logger\n      );\n    } catch (e) {\n      logger.error(\"Upload failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\nprogram.parse(process.argv);\n"], "fixing_code": ["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst commander_1 = require(\"commander\");\nconst analyze_1 = require(\"./analyze\");\nconst autobuild_1 = require(\"./autobuild\");\nconst codeql_1 = require(\"./codeql\");\nconst config_utils_1 = require(\"./config-utils\");\nconst init_1 = require(\"./init\");\nconst languages_1 = require(\"./languages\");\nconst logging_1 = require(\"./logging\");\nconst repository_1 = require(\"./repository\");\nconst upload_lib = __importStar(require(\"./upload-lib\"));\nconst util_1 = require(\"./util\");\nconst program = new commander_1.Command();\nprogram.version(\"0.0.1\");\nfunction getTempDir(userInput) {\n    const tempDir = path.join(userInput || process.cwd(), \"codeql-runner\");\n    if (!fs.existsSync(tempDir)) {\n        fs.mkdirSync(tempDir, { recursive: true });\n    }\n    return tempDir;\n}\nfunction getToolsDir(userInput) {\n    const toolsDir = userInput || path.join(os.homedir(), \"codeql-runner-tools\");\n    if (!fs.existsSync(toolsDir)) {\n        fs.mkdirSync(toolsDir, { recursive: true });\n    }\n    return toolsDir;\n}\nconst codeqlEnvJsonFilename = \"codeql-env.json\";\n// Imports the environment from codeqlEnvJsonFilename if not already present\nfunction importTracerEnvironment(config) {\n    if (!(\"ODASA_TRACER_CONFIGURATION\" in process.env)) {\n        const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n        const env = JSON.parse(fs.readFileSync(jsonEnvFile).toString(\"utf-8\"));\n        for (const key of Object.keys(env)) {\n            process.env[key] = env[key];\n        }\n    }\n}\n// Allow the user to specify refs in full refs/heads/branch format\n// or just the short branch name and prepend \"refs/heads/\" to it.\nfunction parseRef(userInput) {\n    if (userInput.startsWith(\"refs/\")) {\n        return userInput;\n    }\n    else {\n        return `refs/heads/${userInput}`;\n    }\n}\n// Parses the --trace-process-name arg from process.argv, or returns undefined\nfunction parseTraceProcessName() {\n    for (let i = 0; i < process.argv.length - 1; i++) {\n        if (process.argv[i] === \"--trace-process-name\") {\n            return process.argv[i + 1];\n        }\n    }\n    return undefined;\n}\n// Parses the --trace-process-level arg from process.argv, or returns undefined\nfunction parseTraceProcessLevel() {\n    for (let i = 0; i < process.argv.length - 1; i++) {\n        if (process.argv[i] === \"--trace-process-level\") {\n            const v = parseInt(process.argv[i + 1], 10);\n            return isNaN(v) ? undefined : v;\n        }\n    }\n    return undefined;\n}\nprogram\n    .command(\"init\")\n    .description(\"Initializes CodeQL\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--languages <languages>\", \"Comma-separated list of languages to analyze. Otherwise detects and analyzes all supported languages from the repo.\")\n    .option(\"--queries <queries>\", \"Comma-separated list of additional queries to run. This overrides the same setting in a configuration file.\")\n    .option(\"--config-file <file>\", \"Path to config file.\")\n    .option(\"--codeql-path <path>\", \"Path to a copy of the CodeQL CLI executable to use. Otherwise downloads a copy.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--tools-dir <dir>\", \"Directory to use for CodeQL tools and other files to store between runs. Default is a subdirectory of the home directory.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--debug\", \"Print more verbose output\", false)\n    // This prevents a message like: error: unknown option '--trace-process-level'\n    // Remove this if commander.js starts supporting hidden options.\n    .allowUnknownOption()\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const tempDir = getTempDir(cmd.tempDir);\n        const toolsDir = getToolsDir(cmd.toolsDir);\n        // Wipe the temp dir\n        logger.info(`Cleaning temp directory ${tempDir}`);\n        fs.rmdirSync(tempDir, { recursive: true });\n        fs.mkdirSync(tempDir, { recursive: true });\n        const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n        const apiDetails = {\n            auth,\n            url: util_1.parseGithubUrl(cmd.githubUrl),\n        };\n        const gitHubVersion = await util_1.getGitHubVersion(apiDetails);\n        if (gitHubVersion !== undefined) {\n            util_1.checkGitHubVersionInRange(gitHubVersion, \"runner\", logger);\n        }\n        let codeql;\n        if (cmd.codeqlPath !== undefined) {\n            codeql = codeql_1.getCodeQL(cmd.codeqlPath);\n        }\n        else {\n            codeql = (await init_1.initCodeQL(undefined, apiDetails, tempDir, toolsDir, \"runner\", logger)).codeql;\n        }\n        const config = await init_1.initConfig(cmd.languages, cmd.queries, cmd.configFile, repository_1.parseRepositoryNwo(cmd.repository), tempDir, toolsDir, codeql, cmd.checkoutPath || process.cwd(), gitHubVersion, apiDetails, logger);\n        const tracerConfig = await init_1.runInit(codeql, config);\n        if (tracerConfig === undefined) {\n            return;\n        }\n        if (process.platform === \"win32\") {\n            await init_1.injectWindowsTracer(parseTraceProcessName(), parseTraceProcessLevel(), config, codeql, tracerConfig);\n        }\n        // Always output a json file of the env that can be consumed programmatically\n        const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n        fs.writeFileSync(jsonEnvFile, JSON.stringify(tracerConfig.env));\n        if (process.platform === \"win32\") {\n            const batEnvFile = path.join(config.tempDir, \"codeql-env.bat\");\n            const batEnvFileContents = Object.entries(tracerConfig.env)\n                .map(([key, value]) => `Set ${key}=${value}`)\n                .join(\"\\n\");\n            fs.writeFileSync(batEnvFile, batEnvFileContents);\n            const powershellEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n            const powershellEnvFileContents = Object.entries(tracerConfig.env)\n                .map(([key, value]) => `$env:${key}=\"${value}\"`)\n                .join(\"\\n\");\n            fs.writeFileSync(powershellEnvFile, powershellEnvFileContents);\n            logger.info(`\\nCodeQL environment output to \"${jsonEnvFile}\", \"${batEnvFile}\" and \"${powershellEnvFile}\". ` +\n                `Please export these variables to future processes so that CodeQL can monitor the build. ` +\n                `If using cmd/batch run \"call ${batEnvFile}\" ` +\n                `or if using PowerShell run \"cat ${powershellEnvFile} | Invoke-Expression\".`);\n        }\n        else {\n            // Assume that anything that's not windows is using a unix-style shell\n            const shEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n            const shEnvFileContents = Object.entries(tracerConfig.env)\n                // Some vars contain ${LIB} that we do not want to be expanded when executing this script\n                .map(([key, value]) => `export ${key}=\"${value.replace(/\\$/g, \"\\\\$\")}\"`)\n                .join(\"\\n\");\n            fs.writeFileSync(shEnvFile, shEnvFileContents);\n            logger.info(`\\nCodeQL environment output to \"${jsonEnvFile}\" and \"${shEnvFile}\". ` +\n                `Please export these variables to future processes so that CodeQL can monitor the build, ` +\n                `for example by running \". ${shEnvFile}\".`);\n        }\n    }\n    catch (e) {\n        logger.error(\"Init failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"autobuild\")\n    .description(\"Attempts to automatically build code\")\n    .option(\"--language <language>\", \"The language to build. Otherwise will detect the dominant compiled language.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const config = await config_utils_1.getConfig(getTempDir(cmd.tempDir), logger);\n        if (config === undefined) {\n            throw new Error(\"Config file could not be found at expected location. \" +\n                \"Was the 'init' command run with the same '--temp-dir' argument as this command.\");\n        }\n        importTracerEnvironment(config);\n        let language = undefined;\n        if (cmd.language !== undefined) {\n            language = languages_1.parseLanguage(cmd.language);\n            if (language === undefined || !config.languages.includes(language)) {\n                throw new Error(`\"${cmd.language}\" is not a recognised language. ` +\n                    `Known languages in this project are ${config.languages.join(\", \")}.`);\n            }\n        }\n        else {\n            language = autobuild_1.determineAutobuildLanguage(config, logger);\n        }\n        if (language !== undefined) {\n            await autobuild_1.runAutobuild(language, config, logger);\n        }\n    }\n    catch (e) {\n        logger.error(\"Autobuild failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"analyze\")\n    .description(\"Finishes extracting code and runs CodeQL queries\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--commit <commit>\", \"SHA of commit that was analyzed. (Required)\")\n    .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--no-upload\", \"Do not upload results after analysis.\")\n    .option(\"--output-dir <dir>\", \"Directory to output SARIF files to. Default is in the temp directory.\")\n    .option(\"--ram <ram>\", \"Amount of memory to use when running queries. Default is to use all available memory.\")\n    .option(\"--no-add-snippets\", \"Specify whether to include code snippets in the sarif output.\")\n    .option(\"--threads <threads>\", \"Number of threads to use when running queries. \" +\n    \"Default is to use all available cores.\")\n    .option(\"--temp-dir <dir>\", 'Directory to use for temporary files. Default is \"./codeql-runner\".')\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    try {\n        const tempDir = getTempDir(cmd.tempDir);\n        const outputDir = cmd.outputDir || path.join(tempDir, \"codeql-sarif\");\n        const config = await config_utils_1.getConfig(getTempDir(cmd.tempDir), logger);\n        if (config === undefined) {\n            throw new Error(\"Config file could not be found at expected location. \" +\n                \"Was the 'init' command run with the same '--temp-dir' argument as this command.\");\n        }\n        const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n        const apiDetails = {\n            auth,\n            url: util_1.parseGithubUrl(cmd.githubUrl),\n        };\n        await analyze_1.runAnalyze(outputDir, util_1.getMemoryFlag(cmd.ram), util_1.getAddSnippetsFlag(cmd.addSnippets), util_1.getThreadsFlag(cmd.threads, logger), config, logger);\n        if (!cmd.upload) {\n            logger.info(\"Not uploading results\");\n            return;\n        }\n        await upload_lib.uploadFromRunner(outputDir, repository_1.parseRepositoryNwo(cmd.repository), cmd.commit, parseRef(cmd.ref), cmd.checkoutPath || process.cwd(), config.gitHubVersion, apiDetails, logger);\n    }\n    catch (e) {\n        logger.error(\"Analyze failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram\n    .command(\"upload\")\n    .description(\"Uploads a SARIF file, or all SARIF files from a directory, to code scanning\")\n    .requiredOption(\"--sarif-file <file>\", \"SARIF file to upload, or a directory containing multiple SARIF files. (Required)\")\n    .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n    .requiredOption(\"--commit <commit>\", \"SHA of commit that was analyzed. (Required)\")\n    .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n    .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n    .option(\"--github-auth <auth>\", \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\")\n    .option(\"--github-auth-stdin\", \"Read GitHub Apps token or personal access token from stdin.\")\n    .option(\"--checkout-path <path>\", \"Checkout path. Default is the current working directory.\")\n    .option(\"--debug\", \"Print more verbose output\", false)\n    .action(async (cmd) => {\n    const logger = logging_1.getRunnerLogger(cmd.debug);\n    const auth = await util_1.getGitHubAuth(logger, cmd.githubAuth, cmd.githubAuthStdin);\n    const apiDetails = {\n        auth,\n        url: util_1.parseGithubUrl(cmd.githubUrl),\n    };\n    try {\n        const gitHubVersion = await util_1.getGitHubVersion(apiDetails);\n        await upload_lib.uploadFromRunner(cmd.sarifFile, repository_1.parseRepositoryNwo(cmd.repository), cmd.commit, parseRef(cmd.ref), cmd.checkoutPath || process.cwd(), gitHubVersion, apiDetails, logger);\n    }\n    catch (e) {\n        logger.error(\"Upload failed\");\n        logger.error(e);\n        process.exitCode = 1;\n    }\n});\nprogram.parse(process.argv);\n//# sourceMappingURL=runner.js.map", "{\"version\":3,\"file\":\"runner.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/runner.ts\"],\"names\":[],\"mappings\":\"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\"}", "import * as path from \"path\";\n\nimport * as githubUtils from \"@actions/github/lib/utils\";\nimport consoleLogLevel from \"console-log-level\";\n\nimport { getRequiredEnvParam, getRequiredInput } from \"./actions-util\";\nimport { isLocalRun } from \"./util\";\n\nexport enum DisallowedAPIVersionReason {\n  ACTION_TOO_OLD,\n  ACTION_TOO_NEW,\n}\n\nexport type GitHubApiCombinedDetails = GitHubApiDetails &\n  GitHubApiExternalRepoDetails;\n\nexport interface GitHubApiDetails {\n  auth: string;\n  url: string;\n}\n\nexport interface GitHubApiExternalRepoDetails {\n  externalRepoAuth?: string;\n  url: string;\n}\n\nexport const getApiClient = function (\n  apiDetails: GitHubApiDetails,\n  allowLocalRun = false\n) {\n  if (isLocalRun() && !allowLocalRun) {\n    throw new Error(\"Invalid API call in local run\");\n  }\n  return new githubUtils.GitHub(\n    githubUtils.getOctokitOptions(apiDetails.auth, {\n      baseUrl: getApiUrl(apiDetails.url),\n      userAgent: \"CodeQL Action\",\n      log: consoleLogLevel({ level: \"debug\" }),\n    })\n  );\n};\n\nfunction getApiUrl(githubUrl: string): string {\n  const url = new URL(githubUrl);\n\n  // If we detect this is trying to connect to github.com\n  // then return with a fixed canonical URL.\n  if (url.hostname === \"github.com\" || url.hostname === \"api.github.com\") {\n    return \"https://api.github.com\";\n  }\n\n  // Add the /api/v3 API prefix\n  url.pathname = path.join(url.pathname, \"api\", \"v3\");\n  return url.toString();\n}\n\n// Temporary function to aid in the transition to running on and off of github actions.\n// Once all code has been converted this function should be removed or made canonical\n// and called only from the action entrypoints.\nexport function getActionsApiClient(allowLocalRun = false) {\n  const apiDetails = {\n    auth: getRequiredInput(\"token\"),\n    url: getRequiredEnvParam(\"GITHUB_SERVER_URL\"),\n  };\n\n  return getApiClient(apiDetails, allowLocalRun);\n}\n", "import * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\n\nimport { Command } from \"commander\";\n\nimport { runAnalyze } from \"./analyze\";\nimport { determineAutobuildLanguage, runAutobuild } from \"./autobuild\";\nimport { CodeQL, getCodeQL } from \"./codeql\";\nimport { Config, getConfig } from \"./config-utils\";\nimport { initCodeQL, initConfig, injectWindowsTracer, runInit } from \"./init\";\nimport { Language, parseLanguage } from \"./languages\";\nimport { getRunnerLogger } from \"./logging\";\nimport { parseRepositoryNwo } from \"./repository\";\nimport * as upload_lib from \"./upload-lib\";\nimport {\n  checkGitHubVersionInRange,\n  getAddSnippetsFlag,\n  getGitHubVersion,\n  getMemoryFlag,\n  getThreadsFlag,\n  parseGithubUrl,\n  getGitHubAuth,\n} from \"./util\";\n\nconst program = new Command();\nprogram.version(\"0.0.1\");\n\nfunction getTempDir(userInput: string | undefined): string {\n  const tempDir = path.join(userInput || process.cwd(), \"codeql-runner\");\n  if (!fs.existsSync(tempDir)) {\n    fs.mkdirSync(tempDir, { recursive: true });\n  }\n  return tempDir;\n}\n\nfunction getToolsDir(userInput: string | undefined): string {\n  const toolsDir = userInput || path.join(os.homedir(), \"codeql-runner-tools\");\n  if (!fs.existsSync(toolsDir)) {\n    fs.mkdirSync(toolsDir, { recursive: true });\n  }\n  return toolsDir;\n}\n\nconst codeqlEnvJsonFilename = \"codeql-env.json\";\n\n// Imports the environment from codeqlEnvJsonFilename if not already present\nfunction importTracerEnvironment(config: Config) {\n  if (!(\"ODASA_TRACER_CONFIGURATION\" in process.env)) {\n    const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n    const env = JSON.parse(fs.readFileSync(jsonEnvFile).toString(\"utf-8\"));\n    for (const key of Object.keys(env)) {\n      process.env[key] = env[key];\n    }\n  }\n}\n\n// Allow the user to specify refs in full refs/heads/branch format\n// or just the short branch name and prepend \"refs/heads/\" to it.\nfunction parseRef(userInput: string): string {\n  if (userInput.startsWith(\"refs/\")) {\n    return userInput;\n  } else {\n    return `refs/heads/${userInput}`;\n  }\n}\n\n// Parses the --trace-process-name arg from process.argv, or returns undefined\nfunction parseTraceProcessName(): string | undefined {\n  for (let i = 0; i < process.argv.length - 1; i++) {\n    if (process.argv[i] === \"--trace-process-name\") {\n      return process.argv[i + 1];\n    }\n  }\n  return undefined;\n}\n\n// Parses the --trace-process-level arg from process.argv, or returns undefined\nfunction parseTraceProcessLevel(): number | undefined {\n  for (let i = 0; i < process.argv.length - 1; i++) {\n    if (process.argv[i] === \"--trace-process-level\") {\n      const v = parseInt(process.argv[i + 1], 10);\n      return isNaN(v) ? undefined : v;\n    }\n  }\n  return undefined;\n}\n\ninterface InitArgs {\n  languages: string | undefined;\n  queries: string | undefined;\n  configFile: string | undefined;\n  codeqlPath: string | undefined;\n  tempDir: string | undefined;\n  toolsDir: string | undefined;\n  checkoutPath: string | undefined;\n  repository: string;\n  githubUrl: string;\n  githubAuth: string;\n  githubAuthStdin: boolean;\n  debug: boolean;\n}\n\nprogram\n  .command(\"init\")\n  .description(\"Initializes CodeQL\")\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--languages <languages>\",\n    \"Comma-separated list of languages to analyze. Otherwise detects and analyzes all supported languages from the repo.\"\n  )\n  .option(\n    \"--queries <queries>\",\n    \"Comma-separated list of additional queries to run. This overrides the same setting in a configuration file.\"\n  )\n  .option(\"--config-file <file>\", \"Path to config file.\")\n  .option(\n    \"--codeql-path <path>\",\n    \"Path to a copy of the CodeQL CLI executable to use. Otherwise downloads a copy.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\n    \"--tools-dir <dir>\",\n    \"Directory to use for CodeQL tools and other files to store between runs. Default is a subdirectory of the home directory.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  // This prevents a message like: error: unknown option '--trace-process-level'\n  // Remove this if commander.js starts supporting hidden options.\n  .allowUnknownOption()\n  .action(async (cmd: InitArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const tempDir = getTempDir(cmd.tempDir);\n      const toolsDir = getToolsDir(cmd.toolsDir);\n\n      // Wipe the temp dir\n      logger.info(`Cleaning temp directory ${tempDir}`);\n      fs.rmdirSync(tempDir, { recursive: true });\n      fs.mkdirSync(tempDir, { recursive: true });\n\n      const auth = await getGitHubAuth(\n        logger,\n        cmd.githubAuth,\n        cmd.githubAuthStdin\n      );\n\n      const apiDetails = {\n        auth,\n        url: parseGithubUrl(cmd.githubUrl),\n      };\n\n      const gitHubVersion = await getGitHubVersion(apiDetails);\n      if (gitHubVersion !== undefined) {\n        checkGitHubVersionInRange(gitHubVersion, \"runner\", logger);\n      }\n\n      let codeql: CodeQL;\n      if (cmd.codeqlPath !== undefined) {\n        codeql = getCodeQL(cmd.codeqlPath);\n      } else {\n        codeql = (\n          await initCodeQL(\n            undefined,\n            apiDetails,\n            tempDir,\n            toolsDir,\n            \"runner\",\n            logger\n          )\n        ).codeql;\n      }\n\n      const config = await initConfig(\n        cmd.languages,\n        cmd.queries,\n        cmd.configFile,\n        parseRepositoryNwo(cmd.repository),\n        tempDir,\n        toolsDir,\n        codeql,\n        cmd.checkoutPath || process.cwd(),\n        gitHubVersion,\n        apiDetails,\n        logger\n      );\n\n      const tracerConfig = await runInit(codeql, config);\n      if (tracerConfig === undefined) {\n        return;\n      }\n\n      if (process.platform === \"win32\") {\n        await injectWindowsTracer(\n          parseTraceProcessName(),\n          parseTraceProcessLevel(),\n          config,\n          codeql,\n          tracerConfig\n        );\n      }\n\n      // Always output a json file of the env that can be consumed programmatically\n      const jsonEnvFile = path.join(config.tempDir, codeqlEnvJsonFilename);\n      fs.writeFileSync(jsonEnvFile, JSON.stringify(tracerConfig.env));\n\n      if (process.platform === \"win32\") {\n        const batEnvFile = path.join(config.tempDir, \"codeql-env.bat\");\n        const batEnvFileContents = Object.entries(tracerConfig.env)\n          .map(([key, value]) => `Set ${key}=${value}`)\n          .join(\"\\n\");\n        fs.writeFileSync(batEnvFile, batEnvFileContents);\n\n        const powershellEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n        const powershellEnvFileContents = Object.entries(tracerConfig.env)\n          .map(([key, value]) => `$env:${key}=\"${value}\"`)\n          .join(\"\\n\");\n        fs.writeFileSync(powershellEnvFile, powershellEnvFileContents);\n\n        logger.info(\n          `\\nCodeQL environment output to \"${jsonEnvFile}\", \"${batEnvFile}\" and \"${powershellEnvFile}\". ` +\n            `Please export these variables to future processes so that CodeQL can monitor the build. ` +\n            `If using cmd/batch run \"call ${batEnvFile}\" ` +\n            `or if using PowerShell run \"cat ${powershellEnvFile} | Invoke-Expression\".`\n        );\n      } else {\n        // Assume that anything that's not windows is using a unix-style shell\n        const shEnvFile = path.join(config.tempDir, \"codeql-env.sh\");\n        const shEnvFileContents = Object.entries(tracerConfig.env)\n          // Some vars contain ${LIB} that we do not want to be expanded when executing this script\n          .map(\n            ([key, value]) => `export ${key}=\"${value.replace(/\\$/g, \"\\\\$\")}\"`\n          )\n          .join(\"\\n\");\n        fs.writeFileSync(shEnvFile, shEnvFileContents);\n\n        logger.info(\n          `\\nCodeQL environment output to \"${jsonEnvFile}\" and \"${shEnvFile}\". ` +\n            `Please export these variables to future processes so that CodeQL can monitor the build, ` +\n            `for example by running \". ${shEnvFile}\".`\n        );\n      }\n    } catch (e) {\n      logger.error(\"Init failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface AutobuildArgs {\n  language: string;\n  tempDir: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"autobuild\")\n  .description(\"Attempts to automatically build code\")\n  .option(\n    \"--language <language>\",\n    \"The language to build. Otherwise will detect the dominant compiled language.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: AutobuildArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const config = await getConfig(getTempDir(cmd.tempDir), logger);\n      if (config === undefined) {\n        throw new Error(\n          \"Config file could not be found at expected location. \" +\n            \"Was the 'init' command run with the same '--temp-dir' argument as this command.\"\n        );\n      }\n      importTracerEnvironment(config);\n      let language: Language | undefined = undefined;\n      if (cmd.language !== undefined) {\n        language = parseLanguage(cmd.language);\n        if (language === undefined || !config.languages.includes(language)) {\n          throw new Error(\n            `\"${cmd.language}\" is not a recognised language. ` +\n              `Known languages in this project are ${config.languages.join(\n                \", \"\n              )}.`\n          );\n        }\n      } else {\n        language = determineAutobuildLanguage(config, logger);\n      }\n      if (language !== undefined) {\n        await runAutobuild(language, config, logger);\n      }\n    } catch (e) {\n      logger.error(\"Autobuild failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface AnalyzeArgs {\n  repository: string;\n  commit: string;\n  ref: string;\n  githubUrl: string;\n  githubAuth: string;\n  githubAuthStdin: boolean;\n  checkoutPath: string | undefined;\n  upload: boolean;\n  outputDir: string | undefined;\n  ram: string | undefined;\n  addSnippets: boolean;\n  threads: string | undefined;\n  tempDir: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"analyze\")\n  .description(\"Finishes extracting code and runs CodeQL queries\")\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\n    \"--commit <commit>\",\n    \"SHA of commit that was analyzed. (Required)\"\n  )\n  .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--no-upload\", \"Do not upload results after analysis.\")\n  .option(\n    \"--output-dir <dir>\",\n    \"Directory to output SARIF files to. Default is in the temp directory.\"\n  )\n  .option(\n    \"--ram <ram>\",\n    \"Amount of memory to use when running queries. Default is to use all available memory.\"\n  )\n  .option(\n    \"--no-add-snippets\",\n    \"Specify whether to include code snippets in the sarif output.\"\n  )\n  .option(\n    \"--threads <threads>\",\n    \"Number of threads to use when running queries. \" +\n      \"Default is to use all available cores.\"\n  )\n  .option(\n    \"--temp-dir <dir>\",\n    'Directory to use for temporary files. Default is \"./codeql-runner\".'\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: AnalyzeArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    try {\n      const tempDir = getTempDir(cmd.tempDir);\n      const outputDir = cmd.outputDir || path.join(tempDir, \"codeql-sarif\");\n      const config = await getConfig(getTempDir(cmd.tempDir), logger);\n      if (config === undefined) {\n        throw new Error(\n          \"Config file could not be found at expected location. \" +\n            \"Was the 'init' command run with the same '--temp-dir' argument as this command.\"\n        );\n      }\n\n      const auth = await getGitHubAuth(\n        logger,\n        cmd.githubAuth,\n        cmd.githubAuthStdin\n      );\n\n      const apiDetails = {\n        auth,\n        url: parseGithubUrl(cmd.githubUrl),\n      };\n\n      await runAnalyze(\n        outputDir,\n        getMemoryFlag(cmd.ram),\n        getAddSnippetsFlag(cmd.addSnippets),\n        getThreadsFlag(cmd.threads, logger),\n        config,\n        logger\n      );\n\n      if (!cmd.upload) {\n        logger.info(\"Not uploading results\");\n        return;\n      }\n\n      await upload_lib.uploadFromRunner(\n        outputDir,\n        parseRepositoryNwo(cmd.repository),\n        cmd.commit,\n        parseRef(cmd.ref),\n        cmd.checkoutPath || process.cwd(),\n        config.gitHubVersion,\n        apiDetails,\n        logger\n      );\n    } catch (e) {\n      logger.error(\"Analyze failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\ninterface UploadArgs {\n  sarifFile: string;\n  repository: string;\n  commit: string;\n  ref: string;\n  githubUrl: string;\n  githubAuthStdin: boolean;\n  githubAuth: string;\n  checkoutPath: string | undefined;\n  debug: boolean;\n}\n\nprogram\n  .command(\"upload\")\n  .description(\n    \"Uploads a SARIF file, or all SARIF files from a directory, to code scanning\"\n  )\n  .requiredOption(\n    \"--sarif-file <file>\",\n    \"SARIF file to upload, or a directory containing multiple SARIF files. (Required)\"\n  )\n  .requiredOption(\"--repository <repository>\", \"Repository name. (Required)\")\n  .requiredOption(\n    \"--commit <commit>\",\n    \"SHA of commit that was analyzed. (Required)\"\n  )\n  .requiredOption(\"--ref <ref>\", \"Name of ref that was analyzed. (Required)\")\n  .requiredOption(\"--github-url <url>\", \"URL of GitHub instance. (Required)\")\n  .option(\n    \"--github-auth <auth>\",\n    \"GitHub Apps token or personal access token. This option is insecure and deprecated, please use `--github-auth-stdin` instead.\"\n  )\n  .option(\n    \"--github-auth-stdin\",\n    \"Read GitHub Apps token or personal access token from stdin.\"\n  )\n  .option(\n    \"--checkout-path <path>\",\n    \"Checkout path. Default is the current working directory.\"\n  )\n  .option(\"--debug\", \"Print more verbose output\", false)\n  .action(async (cmd: UploadArgs) => {\n    const logger = getRunnerLogger(cmd.debug);\n    const auth = await getGitHubAuth(\n      logger,\n      cmd.githubAuth,\n      cmd.githubAuthStdin\n    );\n    const apiDetails = {\n      auth,\n      url: parseGithubUrl(cmd.githubUrl),\n    };\n    try {\n      const gitHubVersion = await getGitHubVersion(apiDetails);\n      await upload_lib.uploadFromRunner(\n        cmd.sarifFile,\n        parseRepositoryNwo(cmd.repository),\n        cmd.commit,\n        parseRef(cmd.ref),\n        cmd.checkoutPath || process.cwd(),\n        gitHubVersion,\n        apiDetails,\n        logger\n      );\n    } catch (e) {\n      logger.error(\"Upload failed\");\n      logger.error(e);\n      process.exitCode = 1;\n    }\n  });\n\nprogram.parse(process.argv);\n"], "filenames": ["lib/runner.js", "lib/runner.js.map", "src/api-client.ts", "src/runner.ts"], "buggy_code_start_loc": [87, 1, 23, 101], "buggy_code_end_loc": [112, 2, 24, 171], "fixing_code_start_loc": [86, 1, 23, 100], "fixing_code_end_loc": [109, 2, 24, 164], "type": "CWE-200", "message": "Github's CodeQL action is provided to run CodeQL-based code scanning on non-GitHub CI/CD systems and requires a GitHub access token to connect to a GitHub repository. The runner and its documentation previously suggested passing the GitHub token as a command-line parameter to the process instead of reading it from a file, standard input, or an environment variable. This approach made the token visible to other processes on the same machine, for example in the output of the `ps` command. If the CI system publicly exposes the output of `ps`, for example by logging the output, then the GitHub access token can be exposed beyond the scope intended. Users of the CodeQL runner on 3rd-party systems, who are passing a GitHub token via the `--github-auth` flag, are affected. This applies to both GitHub.com and GitHub Enterprise users. Users of the CodeQL Action on GitHub Actions are not affected. The `--github-auth` flag is now considered insecure and deprecated. The undocumented `--external-repository-token` flag has been removed. To securely provide a GitHub access token to the CodeQL runner, users should **do one of the following instead**: Use the `--github-auth-stdin` flag and pass the token on the command line via standard input OR set the `GITHUB_TOKEN` environment variable to contain the token, then call the command without passing in the token. The old flag remains present for backwards compatibility with existing workflows. If the user tries to specify an access token using the `--github-auth` flag, there is a deprecation warning printed to the terminal that directs the user to one of the above options. All CodeQL runner releases codeql-bundle-20210304 onwards contain the patches. We recommend updating to a recent version of the CodeQL runner, storing a token in your CI system's secret storage mechanism, and passing the token to the CodeQL runner using `--github-auth-stdin` or the `GITHUB_TOKEN` environment variable. If still using the old flag, ensure that process output, such as from `ps`, is not persisted in CI logs.", "other": {"cve": {"id": "CVE-2021-32638", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-25T17:15:08.290", "lastModified": "2022-07-02T20:01:30.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Github's CodeQL action is provided to run CodeQL-based code scanning on non-GitHub CI/CD systems and requires a GitHub access token to connect to a GitHub repository. The runner and its documentation previously suggested passing the GitHub token as a command-line parameter to the process instead of reading it from a file, standard input, or an environment variable. This approach made the token visible to other processes on the same machine, for example in the output of the `ps` command. If the CI system publicly exposes the output of `ps`, for example by logging the output, then the GitHub access token can be exposed beyond the scope intended. Users of the CodeQL runner on 3rd-party systems, who are passing a GitHub token via the `--github-auth` flag, are affected. This applies to both GitHub.com and GitHub Enterprise users. Users of the CodeQL Action on GitHub Actions are not affected. The `--github-auth` flag is now considered insecure and deprecated. The undocumented `--external-repository-token` flag has been removed. To securely provide a GitHub access token to the CodeQL runner, users should **do one of the following instead**: Use the `--github-auth-stdin` flag and pass the token on the command line via standard input OR set the `GITHUB_TOKEN` environment variable to contain the token, then call the command without passing in the token. The old flag remains present for backwards compatibility with existing workflows. If the user tries to specify an access token using the `--github-auth` flag, there is a deprecation warning printed to the terminal that directs the user to one of the above options. All CodeQL runner releases codeql-bundle-20210304 onwards contain the patches. We recommend updating to a recent version of the CodeQL runner, storing a token in your CI system's secret storage mechanism, and passing the token to the CodeQL runner using `--github-auth-stdin` or the `GITHUB_TOKEN` environment variable. If still using the old flag, ensure that process output, such as from `ps`, is not persisted in CI logs."}, {"lang": "es", "value": "La acci\u00f3n CodeQL de Github es proporcionada para ejecutar el escaneo de c\u00f3digo basado en CodeQL en sistemas CI/CD que no son de GitHub y requiere un token de acceso de GitHub para conectarse a un repositorio de GitHub.&#xa0;El corredor y su documentaci\u00f3n sugirieron previamente pasar el token de GitHub como un par\u00e1metro command-line al proceso en lugar de leerlo desde un archivo, entrada est\u00e1ndar o una variable de entorno.&#xa0;Este enfoque hizo que el token fuera visible para otros procesos en la misma m\u00e1quina, por ejemplo, en la salida del comando \"ps\".&#xa0;Si el sistema de CI expone p\u00fablicamente la salida de \"ps\", por ejemplo, al registrar la salida, entonces el token de acceso de GitHub puede ser expuesto m\u00e1s all\u00e1 del alcance previsto.&#xa0;Los usuarios del corredor CodeQL en sistemas de terceros, que pasan un token de GitHub por medio de la marca \"--github-auth\", est\u00e1n afectados.&#xa0;Esto se aplica tanto a los usuarios de GitHub.com como a los de GitHub Enterprise.&#xa0;Los usuarios de la Action CodeQL  en GitHub Actions no est\u00e1n afectados.&#xa0;El flag \"--github-auth\" ahora es considerado no seguro y obsoleto.&#xa0;La marca no documentada \"--external-repository-token\" ha sido eliminada.&#xa0;Para proporcionar de forma segura un token de acceso de GitHub al corredor de CodeQL, los usuarios deben ** hacer una de las siguientes acciones en su lugar **: Usar la marca \"--github-auth-stdin\" y pasar el token la l\u00ednea de comando por medio de la entrada est\u00e1ndar O establecer la variable de entorno \"GITHUB_TOKEN\" para contener el token, luego llame al comando sin pasar el token.&#xa0;La flag anterior permanece presente para compatibilidad con workflows existentes.&#xa0;Si el usuario intenta especificar un token de acceso usando el flag \"--github-auth\", se presenta una advertencia de desaprobaci\u00f3n impresa en el terminal que dirige al usuario a una de las opciones anteriores.&#xa0;Todas las versiones de CodeQL runner codeql-bundle-20210304 en adelante contienen los parches.&#xa0;Recomendamos actualizar a una versi\u00f3n reciente del corredor de CodeQL, almacenar un token el mecanismo de almacenamiento secreto de su sistema de CI y pasar el token al corredor de CodeQL usando \"--github-auth-stdin\" o la variable de entorno \"GITHUB_TOKEN\".&#xa0;Si todav\u00eda usa el flag anterior, aseg\u00farese de que la salida del proceso, como la de \"ps\", no se conserve en los registros de CI"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}, {"lang": "en", "value": "CWE-214"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:github:codeql_action:*:*:*:*:*:*:*:*", "versionEndExcluding": "20210304", "matchCriteriaId": "B638C39B-90B4-4A32-A79C-D5FF4217C727"}]}]}], "references": [{"url": "https://github.com/github/codeql-action/commit/58defc0652e935f6f2ffc70a82828b98d75476fb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/github/codeql-action/commit/88714e3a60e72ec53caa0e6a203652ee1f3fb1db", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/github/codeql-action/releases/tag/codeql-bundle-20210304", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/github/codeql-action/security/advisories/GHSA-g36v-2xff-pv5m", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Patch", "Third Party Advisory"]}, {"url": "https://www.netmeister.org/blog/passing-passwords.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/github/codeql-action/commit/58defc0652e935f6f2ffc70a82828b98d75476fb"}}