{"buggy_code": ["#!/usr/bin/perl\n\n# script to administer the systempref table\n# written 20/02/2002 by paul.poulain@free.fr\n# This software is placed under the gnu General Public License, v2 (http://www.gnu.org/licenses/gpl.html)\n\n# Copyright 2000-2002 Katipo Communications\n#\n# This file is part of Koha.\n#\n# Koha is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# Koha is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Koha; if not, see <http://www.gnu.org/licenses>.\n\n=head1 systempreferences.pl\n\nALSO :\n this script use an $op to know what to do.\n if $op is empty or none of the above values,\n    - the default screen is build (with all records, or filtered datas).\n    - the   user can clic on add, modify or delete record.\n if $op=add_form\n    - if primkey exists, this is a modification,so we read the $primkey record\n    - builds the add/modify form\n if $op=add_validate\n    - the user has just send datas, so we create/modify the record\n if $op=delete_form\n    - we show the record having primkey=$primkey and ask for deletion validation form\n if $op=delete_confirm\n    - we delete the record having primkey=$primkey\n\n=cut\n\nuse strict;\nuse warnings;\n\nuse CGI;\nuse MIME::Base64;\nuse C4::Auth;\nuse C4::Context;\nuse C4::Koha;\nuse C4::Languages qw(getTranslatedLanguages);\nuse C4::ClassSource;\nuse C4::Log;\nuse C4::Output;\nuse YAML::Syck qw( Dump LoadFile );\n\nmy %tabsysprefs; #we do no longer need to keep track of a tab per pref (yaml)\n\nsub StringSearch {\n    my ( $searchstring, $tab ) = @_;\n    return (0,[]) if $tab ne 'local_use';\n\n    my $dbh = C4::Context->dbh;\n    $searchstring =~ s/\\'/\\\\\\'/g;\n    my @data = split( ' ', $searchstring );\n    my $count = @data;\n    my @results;\n    my $cnt = 0;\n    my $sth;\n\n    my $strsth = \"Select variable,value,explanation,type,options from systempreferences where variable in (\";\n    my $first = 1;\n    for my $name ( get_local_prefs() ) {\n                $strsth .= ',' unless $first;\n                $strsth .= \"'$name'\";\n                $first = 0;\n    }\n    $strsth .= \") order by variable\";\n    $sth = $dbh->prepare($strsth);\n    $sth->execute();\n\n    while ( my $data = $sth->fetchrow_hashref ) {\n            unless (defined $data->{value}) { $data->{value} = \"\";}\n            $data->{shortvalue} = $data->{value};\n            $data->{shortvalue} = substr( $data->{value}, 0, 60 ) . \"...\" if length( $data->{value} ) > 60;\n            push( @results, $data );\n            $cnt++;\n    }\n\n    return ( $cnt, \\@results );\n}\n\nsub GetPrefParams {\n    my $data   = shift;\n    my $params = $data;\n    my @options;\n\n    if ( defined $data->{'options'} ) {\n        foreach my $option ( split( /\\|/, $data->{'options'} ) ) {\n            my $selected = '0';\n            defined( $data->{'value'} ) and $option eq $data->{'value'} and $selected = 1;\n            push @options, { option => $option, selected => $selected };\n        }\n    }\n\n    $params->{'prefoptions'} = $data->{'options'};\n\n    if ( not defined( $data->{'type'} ) ) {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 );\n    } elsif ( $data->{'type'} eq 'Upload' ) {\n        $params->{'type_upload'} = 1;\n    } elsif ( $data->{'type'} eq 'Choice' ) {\n        $params->{'type_choice'} = 1;\n    } elsif ( $data->{'type'} eq 'YesNo' ) {\n        $params->{'type_yesno'} = 1;\n        $data->{'value'}        = C4::Context->boolean_preference( $data->{'variable'} );\n        if ( defined( $data->{'value'} ) and $data->{'value'} eq '1' ) {\n            $params->{'value_yes'} = 1;\n        } else {\n            $params->{'value_no'} = 1;\n        }\n    } elsif ( $data->{'type'} eq 'Integer' || $data->{'type'} eq 'Float' ) {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 ) ? $data->{'options'} : 10;\n    } elsif ( $data->{'type'} eq 'Textarea' ) {\n        $params->{'type_textarea'} = 1;\n        $data->{options} =~ /(.*)\\|(.*)/;\n        $params->{'cols'} = $1;\n        $params->{'rows'} = $2;\n    } elsif ( $data->{'type'} eq 'Themes' ) {\n        $params->{'type_choice'} = 1;\n        my $type = '';\n        ( $data->{'variable'} =~ m#opac#i ) ? ( $type = 'opac' ) : ( $type = 'intranet' );\n        @options = ();\n        my $currently_selected_themes;\n        my $counter = 0;\n        foreach my $theme ( split /\\s+/, $data->{'value'} ) {\n            push @options, { option => $theme, counter => $counter };\n            $currently_selected_themes->{$theme} = 1;\n            $counter++;\n        }\n        foreach my $theme ( getallthemes($type) ) {\n            my $selected = '0';\n            next if $currently_selected_themes->{$theme};\n            push @options, { option => $theme, counter => $counter };\n            $counter++;\n        }\n    } elsif ( $data->{'type'} eq 'ClassSources' ) {\n        $params->{'type_choice'} = 1;\n        my $type = '';\n        @options = ();\n        my $sources = GetClassSources();\n        my $counter = 0;\n        foreach my $cn_source ( sort keys %$sources ) {\n            if ( $cn_source eq $data->{'value'} ) {\n                push @options, { option => $cn_source, counter => $counter, selected => 1 };\n            } else {\n                push @options, { option => $cn_source, counter => $counter };\n            }\n            $counter++;\n        }\n    } elsif ( $data->{'type'} eq 'Languages' ) {\n        my $currently_selected_languages;\n        foreach my $language ( split /\\s+/, $data->{'value'} ) {\n            $currently_selected_languages->{$language} = 1;\n        }\n\n        # current language\n        my $lang = $params->{'lang'};\n        my $theme;\n        my $interface;\n        if ( $data->{'variable'} =~ /opac/ ) {\n\n            # this is the OPAC\n            $interface = 'opac';\n            $theme     = C4::Context->preference('opacthemes');\n        } else {\n\n            # this is the staff client\n            $interface = 'intranet';\n            $theme     = C4::Context->preference('template');\n        }\n        my $languages_loop = getTranslatedLanguages( $interface, $theme, $lang, $currently_selected_languages );\n\n        $params->{'languages_loop'}    = $languages_loop;\n        $params->{'type_langselector'} = 1;\n    } else {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 ) ? $data->{'options'} : 30;\n    }\n\n    if ( $params->{'type_choice'} || $params->{'type_free'} || $params->{'type_yesno'} ) {\n        $params->{'oneline'} = 1;\n    }\n\n    $params->{'preftype'} = $data->{'type'};\n    $params->{'options'}  = \\@options;\n\n    return $params;\n}\n\nmy $input       = new CGI;\nmy $searchfield = $input->param('searchfield') || '';\nmy $Tvalue      = $input->param('Tvalue');\nmy $offset      = $input->param('offset') || 0;\nmy $script_name = \"/cgi-bin/koha/admin/systempreferences.pl\";\n\nmy ( $template, $borrowernumber, $cookie ) = get_template_and_user(\n    {   template_name   => \"admin/systempreferences.tt\",\n        query           => $input,\n        type            => \"intranet\",\n        authnotrequired => 0,\n        flagsrequired   => { parameters => 'parameters_remaining_permissions' },\n        debug           => 1,\n    }\n);\nmy $pagesize = 100;\nmy $op = $input->param('op') || '';\n$searchfield =~ s/\\,//g;\n\nif ($op) {\n    $template->param(\n        script_name => $script_name,\n        $op         => 1\n    );    # we show only the TMPL_VAR names $op\n} else {\n    $template->param(\n        script_name => $script_name,\n        else        => 1\n    );    # we show only the TMPL_VAR names $op\n}\n\nif ( $op eq 'update_and_reedit' ) {\n    foreach ( $input->param ) {\n    }\n    my $value = '';\n    if ( my $currentorder = $input->param('currentorder') ) {\n        my @currentorder = split /\\|/, $currentorder;\n        my $orderchanged = 0;\n        foreach my $param ( $input->param ) {\n            if ( $param =~ m#up-(\\d+).x# ) {\n                my $temp = $currentorder[$1];\n                $currentorder[$1]       = $currentorder[ $1 - 1 ];\n                $currentorder[ $1 - 1 ] = $temp;\n                $orderchanged           = 1;\n                last;\n            } elsif ( $param =~ m#down-(\\d+).x# ) {\n                my $temp = $currentorder[$1];\n                $currentorder[$1]       = $currentorder[ $1 + 1 ];\n                $currentorder[ $1 + 1 ] = $temp;\n                $orderchanged           = 1;\n                last;\n            }\n        }\n        $value = join ' ', @currentorder;\n        if ($orderchanged) {\n            $op = 'add_form';\n            $template->param(\n                script_name => $script_name,\n                $op         => 1\n            );    # we show only the TMPL_VAR names $op\n        } else {\n            $op          = '';\n            $searchfield = '';\n            $template->param(\n                script_name => $script_name,\n                else        => 1\n            );    # we show only the TMPL_VAR names $op\n        }\n    }\n    my $dbh   = C4::Context->dbh;\n    my $query = \"select * from systempreferences where variable=?\";\n    my $sth   = $dbh->prepare($query);\n    $sth->execute( $input->param('variable') );\n    if ( $sth->rows ) {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"update systempreferences set value=?,explanation=?,type=?,options=? where variable=?\");\n            $sth->execute( $value, $input->param('explanation'), $input->param('variable'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'MODIFY', undef, $input->param('variable') . \" | \" . $value );\n        }\n    } else {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"insert into systempreferences (variable,value,explanation) values (?,?,?,?,?)\");\n            $sth->execute( $input->param('variable'), $input->param('value'), $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'ADD', undef, $input->param('variable') . \" | \" . $input->param('value') );\n        }\n    }\n\n}\n\n################## ADD_FORM ##################################\n# called by default. Used to create form to add or  modify a record\n\nif ( $op eq 'add_form' ) {\n\n    #---- if primkey exists, it's a modify action, so read values to modify...\n    my $data;\n    if ($searchfield) {\n        my $dbh = C4::Context->dbh;\n        my $sth = $dbh->prepare(\"select variable,value,explanation,type,options from systempreferences where variable=?\");\n        $sth->execute($searchfield);\n        $data = $sth->fetchrow_hashref;\n        $template->param( modify => 1 );\n\n        # save tab to return to if user cancels edit\n        $template->param( return_tab => $tabsysprefs{$searchfield} );\n    }\n\n    $data->{'lang'} = $template->param('lang');\n    my $prefparams = GetPrefParams($data);\n    $template->param( %$prefparams );\n    $template->param( searchfield => $searchfield );\n\n################## ADD_VALIDATE ##################################\n    # called by add_form, used to insert/modify data in DB\n} elsif ( $op eq 'add_validate' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"select * from systempreferences where variable=?\");\n    $sth->execute( $input->param('variable') );\n\n    # to handle multiple values\n    my $value;\n\n    # handle multiple value strings (separated by ',')\n    my $params = $input->Vars;\n    if ( defined $params->{'value'} ) {\n        my @values = ();\n        @values = split( \"\\0\", $params->{'value'} ) if defined( $params->{'value'} );\n        if (@values) {\n            $value = \"\";\n            for my $vl (@values) {\n                $value .= \"$vl,\";\n            }\n            $value =~ s/,$//;\n        } else {\n            $value = $params->{'value'};\n        }\n    }\n\n    if ( $input->param('preftype') eq 'Upload' ) {\n        my $lgtfh = $input->upload('value');\n        $value = join '', <$lgtfh>;\n        $value = encode_base64($value);\n    }\n\n    if ( $sth->rows ) {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"update systempreferences set value=?,explanation=?,type=?,options=? where variable=?\");\n            $sth->execute( $value, $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions'), $input->param('variable') );\n            logaction( 'SYSTEMPREFERENCE', 'MODIFY', undef, $input->param('variable') . \" | \" . $value );\n        }\n    } else {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"insert into systempreferences (variable,value,explanation,type,options) values (?,?,?,?,?)\");\n            $sth->execute( $input->param('variable'), $value, $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'ADD', undef, $input->param('variable') . \" | \" . $value );\n        }\n    }\n    print \"Content-Type: text/html\\n\\n<META HTTP-EQUIV=Refresh CONTENT=\\\"0; URL=systempreferences.pl?tab=\\\"></html>\";\n    exit;\n################## DELETE_CONFIRM ##################################\n    # called by default form, used to confirm deletion of data in DB\n} elsif ( $op eq 'delete_confirm' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"select variable,value,explanation,type,options from systempreferences where variable=?\");\n    $sth->execute($searchfield);\n    my $data = $sth->fetchrow_hashref;\n    $template->param(\n        searchfield => $searchfield,\n        Tvalue      => $data->{'value'},\n    );\n\n    # END $OP eq DELETE_CONFIRM\n################## DELETE_CONFIRMED ##################################\n    # called by delete_confirm, used to effectively confirm deletion of data in DB\n} elsif ( $op eq 'delete_confirmed' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"delete from systempreferences where variable=?\");\n    $sth->execute($searchfield);\n    my $logstring = $searchfield . \" | \" . $Tvalue;\n    logaction( 'SYSTEMPREFERENCE', 'DELETE', undef, $logstring );\n\n    # END $OP eq DELETE_CONFIRMED\n################## DEFAULT ##################################\n} else {    # DEFAULT\n            #Adding tab management for system preferences\n    my $tab = $input->param('tab')||'local_use';\n    $template->param( $tab => 1 );\n    my ( $count, $results ) = StringSearch( $searchfield, $tab );\n    my @loop_data = ();\n    for ( my $i = $offset ; $i < ( $offset + $pagesize < $count ? $offset + $pagesize : $count ) ; $i++ ) {\n        my $row_data = $results->[$i];\n        $row_data->{'lang'} = $template->param('lang');\n        $row_data           = GetPrefParams($row_data);                                                         # get a fresh hash for the row data\n        $row_data->{edit}   = \"$script_name?op=add_form&amp;searchfield=\" . $results->[$i]{'variable'};\n        $row_data->{delete} = \"$script_name?op=delete_confirm&amp;searchfield=\" . $results->[$i]{'variable'};\n        push( @loop_data, $row_data );\n    }\n    $template->param( loop => \\@loop_data );\n    if ( $offset > 0 ) {\n        my $prevpage = $offset - $pagesize;\n        $template->param( \"<a href=$script_name?offset=\" . $prevpage . '&lt;&lt; Prev</a>' );\n    }\n    if ( $offset + $pagesize < $count ) {\n        my $nextpage = $offset + $pagesize;\n        $template->param( \"a href=$script_name?offset=\" . $nextpage . 'Next &gt;&gt;</a>' );\n    }\n    $template->param( tab => $tab, );\n}    #---- END $OP eq DEFAULT\noutput_html_with_http_headers $input, $cookie, $template->output;\n\n\n# Return an array containing all preferences defined in current Koha instance\n# .pref files.\n\nsub get_prefs_from_files {\n    my $context       = C4::Context->new();\n    my $path_pref_en  = $context->config('intrahtdocs') .\n                        '/prog/en/modules/admin/preferences';\n    # Get all .pref file names\n    opendir ( my $fh, $path_pref_en );\n    my @pref_files = grep { /.pref/ } readdir($fh);\n    close $fh;\n\n    my @names = ();\n    my $append = sub {\n        my $prefs = shift;\n        for my $pref ( @$prefs ) {\n            for my $element ( @$pref ) {\n                if ( ref( $element) eq 'HASH' ) {\n                    my $name = $element->{pref};\n                    next unless $name;\n                    push @names, $name;\n                    next;\n                }\n            }\n        }\n    };\n    for my $file (@pref_files) {\n        my $pref = LoadFile( \"$path_pref_en/$file\" );\n        for my $tab ( keys %$pref ) {\n            my $content = $pref->{$tab};\n            if ( ref($content) eq 'ARRAY' ) {\n                $append->($content);\n                next;\n            }\n            for my $section ( keys %$content ) {\n                my $syspref = $content->{$section};\n                $append->($syspref);\n            }\n        }\n    }\n    return @names;\n}\n\n\n# Return an array containg all preferences defined in DB\n\nsub get_prefs_from_db {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"SELECT variable FROM systempreferences\");\n    $sth->execute;\n    my @names = ();\n    while ( (my $name) = $sth->fetchrow_array ) {\n        push @names, $name if $name;\n    }\n    return @names;\n}\n\n\n# Return an array containing all local preferences: those which are defined in\n# DB and not defined in Koha .pref files.\n\nsub get_local_prefs {\n    my @prefs_file = get_prefs_from_files();\n    my @prefs_db = get_prefs_from_db();\n\n    my %prefs_file = map { lc $_ => 1 } @prefs_file;\n    my @names = ();\n    foreach my $name (@prefs_db) {\n        push @names, $name  unless $prefs_file{lc $name};\n    }\n\n    return @names;\n}\n\n"], "fixing_code": ["#!/usr/bin/perl\n\n# script to administer the systempref table\n# written 20/02/2002 by paul.poulain@free.fr\n# This software is placed under the gnu General Public License, v2 (http://www.gnu.org/licenses/gpl.html)\n\n# Copyright 2000-2002 Katipo Communications\n#\n# This file is part of Koha.\n#\n# Koha is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# Koha is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Koha; if not, see <http://www.gnu.org/licenses>.\n\n=head1 systempreferences.pl\n\nALSO :\n this script use an $op to know what to do.\n if $op is empty or none of the above values,\n    - the default screen is build (with all records, or filtered datas).\n    - the   user can clic on add, modify or delete record.\n if $op=add_form\n    - if primkey exists, this is a modification,so we read the $primkey record\n    - builds the add/modify form\n if $op=add_validate\n    - the user has just send datas, so we create/modify the record\n if $op=delete_form\n    - we show the record having primkey=$primkey and ask for deletion validation form\n if $op=delete_confirm\n    - we delete the record having primkey=$primkey\n\n=cut\n\nuse strict;\nuse warnings;\n\nuse CGI;\nuse MIME::Base64;\nuse C4::Auth;\nuse C4::Context;\nuse C4::Koha;\nuse C4::Languages qw(getTranslatedLanguages);\nuse C4::ClassSource;\nuse C4::Log;\nuse C4::Output;\nuse YAML::Syck qw( Dump LoadFile );\n\nmy %tabsysprefs; #we do no longer need to keep track of a tab per pref (yaml)\n\nsub StringSearch {\n    my ( $searchstring, $tab ) = @_;\n    return (0,[]) if $tab ne 'local_use';\n\n    my $dbh = C4::Context->dbh;\n    $searchstring =~ s/\\'/\\\\\\'/g;\n    my @data = split( ' ', $searchstring );\n    my $count = @data;\n    my @results;\n    my $cnt = 0;\n    my $sth;\n\n    my $strsth = \"Select variable,value,explanation,type,options from systempreferences where variable in (\";\n    my $first = 1;\n    my @sql_bind;\n    for my $name ( get_local_prefs() ) {\n                $strsth .= ',' unless $first;\n                $strsth .= \"?\";\n                push(@sql_bind,$name);\n                $first = 0;\n    }\n    $strsth .= \") order by variable\";\n    $sth = $dbh->prepare($strsth);\n    $sth->execute(@sql_bind);\n\n    while ( my $data = $sth->fetchrow_hashref ) {\n            unless (defined $data->{value}) { $data->{value} = \"\";}\n            $data->{shortvalue} = $data->{value};\n            $data->{shortvalue} = substr( $data->{value}, 0, 60 ) . \"...\" if length( $data->{value} ) > 60;\n            push( @results, $data );\n            $cnt++;\n    }\n\n    return ( $cnt, \\@results );\n}\n\nsub GetPrefParams {\n    my $data   = shift;\n    my $params = $data;\n    my @options;\n\n    if ( defined $data->{'options'} ) {\n        foreach my $option ( split( /\\|/, $data->{'options'} ) ) {\n            my $selected = '0';\n            defined( $data->{'value'} ) and $option eq $data->{'value'} and $selected = 1;\n            push @options, { option => $option, selected => $selected };\n        }\n    }\n\n    $params->{'prefoptions'} = $data->{'options'};\n\n    if ( not defined( $data->{'type'} ) ) {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 );\n    } elsif ( $data->{'type'} eq 'Upload' ) {\n        $params->{'type_upload'} = 1;\n    } elsif ( $data->{'type'} eq 'Choice' ) {\n        $params->{'type_choice'} = 1;\n    } elsif ( $data->{'type'} eq 'YesNo' ) {\n        $params->{'type_yesno'} = 1;\n        $data->{'value'}        = C4::Context->boolean_preference( $data->{'variable'} );\n        if ( defined( $data->{'value'} ) and $data->{'value'} eq '1' ) {\n            $params->{'value_yes'} = 1;\n        } else {\n            $params->{'value_no'} = 1;\n        }\n    } elsif ( $data->{'type'} eq 'Integer' || $data->{'type'} eq 'Float' ) {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 ) ? $data->{'options'} : 10;\n    } elsif ( $data->{'type'} eq 'Textarea' ) {\n        $params->{'type_textarea'} = 1;\n        $data->{options} =~ /(.*)\\|(.*)/;\n        $params->{'cols'} = $1;\n        $params->{'rows'} = $2;\n    } elsif ( $data->{'type'} eq 'Themes' ) {\n        $params->{'type_choice'} = 1;\n        my $type = '';\n        ( $data->{'variable'} =~ m#opac#i ) ? ( $type = 'opac' ) : ( $type = 'intranet' );\n        @options = ();\n        my $currently_selected_themes;\n        my $counter = 0;\n        foreach my $theme ( split /\\s+/, $data->{'value'} ) {\n            push @options, { option => $theme, counter => $counter };\n            $currently_selected_themes->{$theme} = 1;\n            $counter++;\n        }\n        foreach my $theme ( getallthemes($type) ) {\n            my $selected = '0';\n            next if $currently_selected_themes->{$theme};\n            push @options, { option => $theme, counter => $counter };\n            $counter++;\n        }\n    } elsif ( $data->{'type'} eq 'ClassSources' ) {\n        $params->{'type_choice'} = 1;\n        my $type = '';\n        @options = ();\n        my $sources = GetClassSources();\n        my $counter = 0;\n        foreach my $cn_source ( sort keys %$sources ) {\n            if ( $cn_source eq $data->{'value'} ) {\n                push @options, { option => $cn_source, counter => $counter, selected => 1 };\n            } else {\n                push @options, { option => $cn_source, counter => $counter };\n            }\n            $counter++;\n        }\n    } elsif ( $data->{'type'} eq 'Languages' ) {\n        my $currently_selected_languages;\n        foreach my $language ( split /\\s+/, $data->{'value'} ) {\n            $currently_selected_languages->{$language} = 1;\n        }\n\n        # current language\n        my $lang = $params->{'lang'};\n        my $theme;\n        my $interface;\n        if ( $data->{'variable'} =~ /opac/ ) {\n\n            # this is the OPAC\n            $interface = 'opac';\n            $theme     = C4::Context->preference('opacthemes');\n        } else {\n\n            # this is the staff client\n            $interface = 'intranet';\n            $theme     = C4::Context->preference('template');\n        }\n        my $languages_loop = getTranslatedLanguages( $interface, $theme, $lang, $currently_selected_languages );\n\n        $params->{'languages_loop'}    = $languages_loop;\n        $params->{'type_langselector'} = 1;\n    } else {\n        $params->{'type_free'} = 1;\n        $params->{'fieldlength'} = ( defined( $data->{'options'} ) and $data->{'options'} and $data->{'options'} > 0 ) ? $data->{'options'} : 30;\n    }\n\n    if ( $params->{'type_choice'} || $params->{'type_free'} || $params->{'type_yesno'} ) {\n        $params->{'oneline'} = 1;\n    }\n\n    $params->{'preftype'} = $data->{'type'};\n    $params->{'options'}  = \\@options;\n\n    return $params;\n}\n\nmy $input       = new CGI;\nmy $searchfield = $input->param('searchfield') || '';\nmy $Tvalue      = $input->param('Tvalue');\nmy $offset      = $input->param('offset') || 0;\nmy $script_name = \"/cgi-bin/koha/admin/systempreferences.pl\";\n\nmy ( $template, $borrowernumber, $cookie ) = get_template_and_user(\n    {   template_name   => \"admin/systempreferences.tt\",\n        query           => $input,\n        type            => \"intranet\",\n        authnotrequired => 0,\n        flagsrequired   => { parameters => 'parameters_remaining_permissions' },\n        debug           => 1,\n    }\n);\nmy $pagesize = 100;\nmy $op = $input->param('op') || '';\n$searchfield =~ s/\\,//g;\n\nif ($op) {\n    $template->param(\n        script_name => $script_name,\n        $op         => 1\n    );    # we show only the TMPL_VAR names $op\n} else {\n    $template->param(\n        script_name => $script_name,\n        else        => 1\n    );    # we show only the TMPL_VAR names $op\n}\n\nif ( $op eq 'update_and_reedit' ) {\n    foreach ( $input->param ) {\n    }\n    my $value = '';\n    if ( my $currentorder = $input->param('currentorder') ) {\n        my @currentorder = split /\\|/, $currentorder;\n        my $orderchanged = 0;\n        foreach my $param ( $input->param ) {\n            if ( $param =~ m#up-(\\d+).x# ) {\n                my $temp = $currentorder[$1];\n                $currentorder[$1]       = $currentorder[ $1 - 1 ];\n                $currentorder[ $1 - 1 ] = $temp;\n                $orderchanged           = 1;\n                last;\n            } elsif ( $param =~ m#down-(\\d+).x# ) {\n                my $temp = $currentorder[$1];\n                $currentorder[$1]       = $currentorder[ $1 + 1 ];\n                $currentorder[ $1 + 1 ] = $temp;\n                $orderchanged           = 1;\n                last;\n            }\n        }\n        $value = join ' ', @currentorder;\n        if ($orderchanged) {\n            $op = 'add_form';\n            $template->param(\n                script_name => $script_name,\n                $op         => 1\n            );    # we show only the TMPL_VAR names $op\n        } else {\n            $op          = '';\n            $searchfield = '';\n            $template->param(\n                script_name => $script_name,\n                else        => 1\n            );    # we show only the TMPL_VAR names $op\n        }\n    }\n    my $dbh   = C4::Context->dbh;\n    my $query = \"select * from systempreferences where variable=?\";\n    my $sth   = $dbh->prepare($query);\n    $sth->execute( $input->param('variable') );\n    if ( $sth->rows ) {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"update systempreferences set value=?,explanation=?,type=?,options=? where variable=?\");\n            $sth->execute( $value, $input->param('explanation'), $input->param('variable'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'MODIFY', undef, $input->param('variable') . \" | \" . $value );\n        }\n    } else {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"insert into systempreferences (variable,value,explanation) values (?,?,?,?,?)\");\n            $sth->execute( $input->param('variable'), $input->param('value'), $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'ADD', undef, $input->param('variable') . \" | \" . $input->param('value') );\n        }\n    }\n\n}\n\n################## ADD_FORM ##################################\n# called by default. Used to create form to add or  modify a record\n\nif ( $op eq 'add_form' ) {\n\n    #---- if primkey exists, it's a modify action, so read values to modify...\n    my $data;\n    if ($searchfield) {\n        my $dbh = C4::Context->dbh;\n        my $sth = $dbh->prepare(\"select variable,value,explanation,type,options from systempreferences where variable=?\");\n        $sth->execute($searchfield);\n        $data = $sth->fetchrow_hashref;\n        $template->param( modify => 1 );\n\n        # save tab to return to if user cancels edit\n        $template->param( return_tab => $tabsysprefs{$searchfield} );\n    }\n\n    $data->{'lang'} = $template->param('lang');\n    my $prefparams = GetPrefParams($data);\n    $template->param( %$prefparams );\n    $template->param( searchfield => $searchfield );\n\n################## ADD_VALIDATE ##################################\n    # called by add_form, used to insert/modify data in DB\n} elsif ( $op eq 'add_validate' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"select * from systempreferences where variable=?\");\n    $sth->execute( $input->param('variable') );\n\n    # to handle multiple values\n    my $value;\n\n    # handle multiple value strings (separated by ',')\n    my $params = $input->Vars;\n    if ( defined $params->{'value'} ) {\n        my @values = ();\n        @values = split( \"\\0\", $params->{'value'} ) if defined( $params->{'value'} );\n        if (@values) {\n            $value = \"\";\n            for my $vl (@values) {\n                $value .= \"$vl,\";\n            }\n            $value =~ s/,$//;\n        } else {\n            $value = $params->{'value'};\n        }\n    }\n\n    if ( $input->param('preftype') eq 'Upload' ) {\n        my $lgtfh = $input->upload('value');\n        $value = join '', <$lgtfh>;\n        $value = encode_base64($value);\n    }\n\n    if ( $sth->rows ) {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"update systempreferences set value=?,explanation=?,type=?,options=? where variable=?\");\n            $sth->execute( $value, $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions'), $input->param('variable') );\n            logaction( 'SYSTEMPREFERENCE', 'MODIFY', undef, $input->param('variable') . \" | \" . $value );\n        }\n    } else {\n        unless ( C4::Context->config('demo') ) {\n            my $sth = $dbh->prepare(\"insert into systempreferences (variable,value,explanation,type,options) values (?,?,?,?,?)\");\n            $sth->execute( $input->param('variable'), $value, $input->param('explanation'), $input->param('preftype'), $input->param('prefoptions') );\n            logaction( 'SYSTEMPREFERENCE', 'ADD', undef, $input->param('variable') . \" | \" . $value );\n        }\n    }\n    print \"Content-Type: text/html\\n\\n<META HTTP-EQUIV=Refresh CONTENT=\\\"0; URL=systempreferences.pl?tab=\\\"></html>\";\n    exit;\n################## DELETE_CONFIRM ##################################\n    # called by default form, used to confirm deletion of data in DB\n} elsif ( $op eq 'delete_confirm' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"select variable,value,explanation,type,options from systempreferences where variable=?\");\n    $sth->execute($searchfield);\n    my $data = $sth->fetchrow_hashref;\n    $template->param(\n        searchfield => $searchfield,\n        Tvalue      => $data->{'value'},\n    );\n\n    # END $OP eq DELETE_CONFIRM\n################## DELETE_CONFIRMED ##################################\n    # called by delete_confirm, used to effectively confirm deletion of data in DB\n} elsif ( $op eq 'delete_confirmed' ) {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"delete from systempreferences where variable=?\");\n    $sth->execute($searchfield);\n    my $logstring = $searchfield . \" | \" . $Tvalue;\n    logaction( 'SYSTEMPREFERENCE', 'DELETE', undef, $logstring );\n\n    # END $OP eq DELETE_CONFIRMED\n################## DEFAULT ##################################\n} else {    # DEFAULT\n            #Adding tab management for system preferences\n    my $tab = $input->param('tab')||'local_use';\n    $template->param( $tab => 1 );\n    my ( $count, $results ) = StringSearch( $searchfield, $tab );\n    my @loop_data = ();\n    for ( my $i = $offset ; $i < ( $offset + $pagesize < $count ? $offset + $pagesize : $count ) ; $i++ ) {\n        my $row_data = $results->[$i];\n        $row_data->{'lang'} = $template->param('lang');\n        $row_data           = GetPrefParams($row_data);                                                         # get a fresh hash for the row data\n        $row_data->{edit}   = \"$script_name?op=add_form&amp;searchfield=\" . $results->[$i]{'variable'};\n        $row_data->{delete} = \"$script_name?op=delete_confirm&amp;searchfield=\" . $results->[$i]{'variable'};\n        push( @loop_data, $row_data );\n    }\n    $template->param( loop => \\@loop_data );\n    if ( $offset > 0 ) {\n        my $prevpage = $offset - $pagesize;\n        $template->param( \"<a href=$script_name?offset=\" . $prevpage . '&lt;&lt; Prev</a>' );\n    }\n    if ( $offset + $pagesize < $count ) {\n        my $nextpage = $offset + $pagesize;\n        $template->param( \"a href=$script_name?offset=\" . $nextpage . 'Next &gt;&gt;</a>' );\n    }\n    $template->param( tab => $tab, );\n}    #---- END $OP eq DEFAULT\noutput_html_with_http_headers $input, $cookie, $template->output;\n\n\n# Return an array containing all preferences defined in current Koha instance\n# .pref files.\n\nsub get_prefs_from_files {\n    my $context       = C4::Context->new();\n    my $path_pref_en  = $context->config('intrahtdocs') .\n                        '/prog/en/modules/admin/preferences';\n    # Get all .pref file names\n    opendir ( my $fh, $path_pref_en );\n    my @pref_files = grep { /.pref/ } readdir($fh);\n    close $fh;\n\n    my @names = ();\n    my $append = sub {\n        my $prefs = shift;\n        for my $pref ( @$prefs ) {\n            for my $element ( @$pref ) {\n                if ( ref( $element) eq 'HASH' ) {\n                    my $name = $element->{pref};\n                    next unless $name;\n                    push @names, $name;\n                    next;\n                }\n            }\n        }\n    };\n    for my $file (@pref_files) {\n        my $pref = LoadFile( \"$path_pref_en/$file\" );\n        for my $tab ( keys %$pref ) {\n            my $content = $pref->{$tab};\n            if ( ref($content) eq 'ARRAY' ) {\n                $append->($content);\n                next;\n            }\n            for my $section ( keys %$content ) {\n                my $syspref = $content->{$section};\n                $append->($syspref);\n            }\n        }\n    }\n    return @names;\n}\n\n\n# Return an array containg all preferences defined in DB\n\nsub get_prefs_from_db {\n    my $dbh = C4::Context->dbh;\n    my $sth = $dbh->prepare(\"SELECT variable FROM systempreferences\");\n    $sth->execute;\n    my @names = ();\n    while ( (my $name) = $sth->fetchrow_array ) {\n        push @names, $name if $name;\n    }\n    return @names;\n}\n\n\n# Return an array containing all local preferences: those which are defined in\n# DB and not defined in Koha .pref files.\n\nsub get_local_prefs {\n    my @prefs_file = get_prefs_from_files();\n    my @prefs_db = get_prefs_from_db();\n\n    my %prefs_file = map { lc $_ => 1 } @prefs_file;\n    my @names = ();\n    foreach my $name (@prefs_db) {\n        push @names, $name  unless $prefs_file{lc $name};\n    }\n\n    return @names;\n}\n\n"], "filenames": ["admin/systempreferences.pl"], "buggy_code_start_loc": [72], "buggy_code_end_loc": [81], "fixing_code_start_loc": [73], "fixing_code_end_loc": [83], "type": "CWE-89", "message": "A vulnerability has been found in ByWater Solutions bywater-koha-xslt and classified as critical. This vulnerability affects the function StringSearch of the file admin/systempreferences.pl. The manipulation of the argument name leads to sql injection. The attack can be initiated remotely. Continious delivery with rolling releases is used by this product. Therefore, no version details of affected nor updated releases are available. The name of the patch is 9513b93c828dfbc4413f9e0df63647401aaf4e58. It is recommended to apply a patch to fix this issue. VDB-222322 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10091", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-06T04:15:08.190", "lastModified": "2023-03-13T17:14:21.793", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in ByWater Solutions bywater-koha-xslt and classified as critical. This vulnerability affects the function StringSearch of the file admin/systempreferences.pl. The manipulation of the argument name leads to sql injection. The attack can be initiated remotely. Continious delivery with rolling releases is used by this product. Therefore, no version details of affected nor updated releases are available. The name of the patch is 9513b93c828dfbc4413f9e0df63647401aaf4e58. It is recommended to apply a patch to fix this issue. VDB-222322 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:M/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "MULTIPLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bywatersolutions:bywater-koha-xslt:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-07-21", "matchCriteriaId": "BB788570-0F13-4F01-9F6C-F1F05E505463"}]}]}], "references": [{"url": "https://github.com/bywatersolutions/bywater-koha-xslt/commit/9513b93c828dfbc4413f9e0df63647401aaf4e58", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.222322", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.222322", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bywatersolutions/bywater-koha-xslt/commit/9513b93c828dfbc4413f9e0df63647401aaf4e58"}}