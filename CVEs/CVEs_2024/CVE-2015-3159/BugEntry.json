{"buggy_code": ["# [encoding: UTF-8]\n# List of source files containing translatable strings.\n# Please keep this file sorted alphabetically.\nsrc/applet/abrt-applet.desktop.in\nsrc/applet/applet.c\nsrc/configuration-gui/abrt-config-widget.glade\nsrc/configuration-gui/system-config-abrt.c\nsrc/configuration-gui/main.c\nsrc/daemon/abrt-action-save-package-data.c\nsrc/daemon/abrt-server.c\nsrc/dbus/abrt-dbus.c\nsrc/dbus/abrt-configuration.c\nsrc/daemon/abrtd.c\nsrc/daemon/abrt-handle-event.c\nsrc/daemon/abrt-upload-watch.c\nsrc/daemon/abrt-auto-reporting.c\nsrc/daemon/abrt-handle-upload.in\nsrc/lib/abrt_conf.c\nsrc/lib/hooklib.c\nsrc/lib/problem_api.c\nsrc/lib/problem_api_dbus.c\nsrc/lib/ignored_problems.c\nsrc/plugins/abrt-action-analyze-backtrace.c\nsrc/plugins/abrt-action-analyze-c.c\nsrc/plugins/abrt-action-analyze-core.in\nsrc/plugins/abrt-action-analyze-oops.c\nsrc/plugins/abrt-action-analyze-xorg.c\nsrc/plugins/abrt-action-analyze-python.c\nsrc/plugins/abrt-action-analyze-vmcore.in\nsrc/plugins/abrt-action-check-oops-for-hw-error.in\nsrc/plugins/abrt-action-generate-backtrace.c\nsrc/plugins/abrt-action-generate-core-backtrace.c\nsrc/plugins/abrt-action-install-debuginfo.in\nsrc/plugins/abrt-action-perform-ccpp-analysis.in\nsrc/plugins/abrt-action-trim-files.c\nsrc/plugins/abrt-action-ureport\nsrc/plugins/abrt-gdb-exploitable\nsrc/plugins/abrt-watch-log.c\nsrc/plugins/abrt-dump-oops.c\nsrc/plugins/abrt-dump-xorg.c\nsrc/plugins/abrt-retrace-client.c\nsrc/plugins/analyze_LocalGDB.xml.in\nsrc/plugins/analyze_RetraceServer.xml.in\nsrc/plugins/collect_xsession_errors.xml.in\nsrc/plugins/https-utils.c\nsrc/plugins/bodhi.c\n\nsrc/hooks/abrt-merge-pstoreoops.c\n\nsrc/cli/abrt-cli-core.c\nsrc/cli/abrt-cli.c\nsrc/cli/list.c\nsrc/cli/status.c\nsrc/cli/report.c\nsrc/cli/process.c\n\nsrc/plugins/analyze_CCpp.xml.in\nsrc/plugins/analyze_VMcore.xml.in\nsrc/plugins/collect_GConf.xml.in\nsrc/plugins/collect_vimrc_system.xml.in\nsrc/plugins/collect_vimrc_user.xml.in\nsrc/plugins/post_report.xml.in\n", "/*\n    Copyright (C) 2011  ABRT Team\n    Copyright (C) 2011  RedHat inc.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n*/\n\n#include \"libabrt.h\"\n\n#define EXECUTABLE \"abrt-action-install-debuginfo\"\n#define IGNORE_RESULT(func_call) do { if (func_call) /* nothing */; } while (0)\n\n/* A binary wrapper is needed around python scripts if we want\n * to run them in sgid/suid mode.\n *\n * This is such a wrapper.\n */\nint main(int argc, char **argv)\n{\n    /*\n     * We disallow passing of arguments which point to writable dirs\n     * and other files possibly not accessible to calling user.\n     * This way, the script will always use default values for these arguments.\n     */\n    char **pp = argv;\n    char *arg;\n    while ((arg = *++pp) != NULL)\n    {\n        /* Allow taking ids from stdin */\n        if (strcmp(arg, \"--ids=-\") == 0)\n            continue;\n\n        if (strncmp(arg, \"--exact\", 7) == 0)\n            continue;\n\n        if (strncmp(arg, \"--cache\", 7) == 0)\n            error_msg_and_die(\"bad option %s\", arg);\n        if (strncmp(arg, \"--tmpdir\", 8) == 0)\n            error_msg_and_die(\"bad option %s\", arg);\n        if (strncmp(arg, \"--ids\", 5) == 0)\n            error_msg_and_die(\"bad option %s\", arg);\n    }\n\n    /* Switch real user/group to effective ones.\n     * Otherwise yum library gets confused - gets EPERM (why??).\n     */\n    gid_t g = getegid();\n    /* do setregid only if we have to, to not upset selinux needlessly */\n    if (g != getgid())\n        IGNORE_RESULT(setregid(g, g));\n    uid_t u = geteuid();\n    if (u != getuid())\n    {\n        IGNORE_RESULT(setreuid(u, u));\n        /* We are suid'ed! */\n        /* Prevent malicious user from messing up with suid'ed process: */\n#if 1\n// We forgot to sanitize PYTHONPATH. And who knows what else we forgot\n// (especially considering *future* new variables of this kind).\n// We switched to clearing entire environment instead:\n\n        // However since we communicate through environment variables\n        // we have to keep a whitelist of variables to keep.\n        static const char *whitelist[] = {\n            \"REPORT_CLIENT_SLAVE\", //  Check if the app is being run as a slave\n            \"LANG\",\n        };\n        const size_t wlsize = sizeof(whitelist)/sizeof(char*);\n        char *setlist[sizeof(whitelist)/sizeof(char*)] = { 0 };\n        char *p = NULL;\n        for (size_t i = 0; i < wlsize; i++)\n            if ((p = getenv(whitelist[i])) != NULL)\n                setlist[i] = xstrdup(p);\n\n        // Now we can clear the environment\n        clearenv();\n\n        // And once again set whitelisted variables\n        for (size_t i = 0; i < wlsize; i++)\n            if (setlist[i] != NULL)\n            {\n                xsetenv(whitelist[i], setlist[i]);\n                free(setlist[i]);\n            }\n#else\n        /* Clear dangerous stuff from env */\n        static const char forbid[] =\n            \"LD_LIBRARY_PATH\" \"\\0\"\n            \"LD_PRELOAD\" \"\\0\"\n            \"LD_TRACE_LOADED_OBJECTS\" \"\\0\"\n            \"LD_BIND_NOW\" \"\\0\"\n            \"LD_AOUT_LIBRARY_PATH\" \"\\0\"\n            \"LD_AOUT_PRELOAD\" \"\\0\"\n            \"LD_NOWARN\" \"\\0\"\n            \"LD_KEEPDIR\" \"\\0\"\n        ;\n        const char *p = forbid;\n        do {\n            unsetenv(p);\n            p += strlen(p) + 1;\n        } while (*p);\n#endif\n        /* Set safe PATH */\n        // Adding configure --bindir and --sbindir to the PATH so that\n        // abrt-action-install-debuginfo doesn't fail when spawning\n        // abrt-action-trim-files\n        char path_env[] = \"PATH=/usr/sbin:/sbin:/usr/bin:/bin:\"BIN_DIR\":\"SBIN_DIR;\n        if (u != 0)\n            strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);\n        putenv(path_env);\n    }\n\n    execvp(EXECUTABLE, argv);\n    error_msg_and_die(\"Can't execute %s\", EXECUTABLE);\n}\n"], "fixing_code": ["# [encoding: UTF-8]\n# List of source files containing translatable strings.\n# Please keep this file sorted alphabetically.\nsrc/applet/abrt-applet.desktop.in\nsrc/applet/applet.c\nsrc/configuration-gui/abrt-config-widget.glade\nsrc/configuration-gui/system-config-abrt.c\nsrc/configuration-gui/main.c\nsrc/daemon/abrt-action-save-package-data.c\nsrc/daemon/abrt-server.c\nsrc/dbus/abrt-dbus.c\nsrc/dbus/abrt-configuration.c\nsrc/daemon/abrtd.c\nsrc/daemon/abrt-handle-event.c\nsrc/daemon/abrt-upload-watch.c\nsrc/daemon/abrt-auto-reporting.c\nsrc/daemon/abrt-handle-upload.in\nsrc/lib/abrt_conf.c\nsrc/lib/hooklib.c\nsrc/lib/problem_api.c\nsrc/lib/problem_api_dbus.c\nsrc/lib/ignored_problems.c\nsrc/plugins/abrt-action-analyze-backtrace.c\nsrc/plugins/abrt-action-analyze-c.c\nsrc/plugins/abrt-action-analyze-core.in\nsrc/plugins/abrt-action-analyze-oops.c\nsrc/plugins/abrt-action-analyze-xorg.c\nsrc/plugins/abrt-action-analyze-python.c\nsrc/plugins/abrt-action-analyze-vmcore.in\nsrc/plugins/abrt-action-check-oops-for-hw-error.in\nsrc/plugins/abrt-action-generate-backtrace.c\nsrc/plugins/abrt-action-generate-core-backtrace.c\nsrc/plugins/abrt-action-install-debuginfo.in\nsrc/plugins/abrt-action-install-debuginfo-to-abrt-cache.c\nsrc/plugins/abrt-action-perform-ccpp-analysis.in\nsrc/plugins/abrt-action-trim-files.c\nsrc/plugins/abrt-action-ureport\nsrc/plugins/abrt-gdb-exploitable\nsrc/plugins/abrt-watch-log.c\nsrc/plugins/abrt-dump-oops.c\nsrc/plugins/abrt-dump-xorg.c\nsrc/plugins/abrt-retrace-client.c\nsrc/plugins/analyze_LocalGDB.xml.in\nsrc/plugins/analyze_RetraceServer.xml.in\nsrc/plugins/collect_xsession_errors.xml.in\nsrc/plugins/https-utils.c\nsrc/plugins/bodhi.c\n\nsrc/hooks/abrt-merge-pstoreoops.c\n\nsrc/cli/abrt-cli-core.c\nsrc/cli/abrt-cli.c\nsrc/cli/list.c\nsrc/cli/status.c\nsrc/cli/report.c\nsrc/cli/process.c\n\nsrc/plugins/analyze_CCpp.xml.in\nsrc/plugins/analyze_VMcore.xml.in\nsrc/plugins/collect_GConf.xml.in\nsrc/plugins/collect_vimrc_system.xml.in\nsrc/plugins/collect_vimrc_user.xml.in\nsrc/plugins/post_report.xml.in\n", "/*\n    Copyright (C) 2011  ABRT Team\n    Copyright (C) 2011  RedHat inc.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n*/\n\n#include \"libabrt.h\"\n\n#define EXECUTABLE \"abrt-action-install-debuginfo\"\n#define IGNORE_RESULT(func_call) do { if (func_call) /* nothing */; } while (0)\n\n/* A binary wrapper is needed around python scripts if we want\n * to run them in sgid/suid mode.\n *\n * This is such a wrapper.\n */\nint main(int argc, char **argv)\n{\n    /* I18n */\n    setlocale(LC_ALL, \"\");\n#if ENABLE_NLS\n    bindtextdomain(PACKAGE, LOCALEDIR);\n    textdomain(PACKAGE);\n#endif\n\n    abrt_init(argv);\n\n    /* Can't keep these strings/structs static: _() doesn't support that */\n    const char *program_usage_string = _(\n        \"& [-y] [-i BUILD_IDS_FILE|-i -] [-e PATH[:PATH]...]\\n\"\n        \"\\t[-r REPO]\\n\"\n        \"\\n\"\n        \"Installs debuginfo packages for all build-ids listed in BUILD_IDS_FILE to\\n\"\n        \"ABRT system cache.\"\n    );\n\n    enum {\n        OPT_v = 1 << 0,\n        OPT_y = 1 << 1,\n        OPT_i = 1 << 2,\n        OPT_e = 1 << 3,\n        OPT_r = 1 << 4,\n        OPT_s = 1 << 5,\n    };\n\n    const char *build_ids = \"build_ids\";\n    const char *exact = NULL;\n    const char *repo = NULL;\n    const char *size_mb = NULL;\n\n    struct options program_options[] = {\n        OPT__VERBOSE(&g_verbose),\n        OPT_BOOL  ('y', \"yes\",         NULL,                   _(\"Noninteractive, assume 'Yes' to all questions\")),\n        OPT_STRING('i', \"ids\",   &build_ids, \"BUILD_IDS_FILE\", _(\"- means STDIN, default: build_ids\")),\n        OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),\n        OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),\n        OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),\n        OPT_END()\n    };\n    const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);\n\n    /* We need to open the build ids file under the caller's UID/GID to avoid\n     * information disclosures when reading files with changed UID.\n     * Unfortunately, we cannot replace STDIN with the new fd because ABRT uses\n     * STDIN to communicate with the caller. So, the following code opens a\n     * dummy file descriptor to the build ids file and passes the new fd's proc\n     * path to the wrapped program in the ids argument.\n     * The new fd remains opened, the OS will close it for us. */\n    char *build_ids_self_fd = NULL;\n    if (strcmp(\"-\", build_ids) != 0)\n    {\n        const int build_ids_fd = open(build_ids, O_RDONLY);\n        if (build_ids_fd < 0)\n            perror_msg_and_die(\"Failed to open file '%s'\", build_ids);\n\n        /* We are not going to free this memory. There is no place to do so. */\n        build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);\n    }\n\n    /* name, -v, --ids, -, -y, -e, EXACT, -r, REPO, --, NULL */\n    const char *args[11];\n    {\n        const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };\n        unsigned i = 0;\n        args[i++] = EXECUTABLE;\n        args[i++] = \"--ids\";\n        args[i++] = (build_ids_self_fd != NULL) ? build_ids_self_fd : \"-\";\n        args[i++] = verbs[g_verbose <= 3 ? g_verbose : 3];\n        if ((opts & OPT_y))\n            args[i++] = \"-y\";\n        if ((opts & OPT_e))\n        {\n            args[i++] = \"--exact\";\n            args[i++] = exact;\n        }\n        if ((opts & OPT_r))\n        {\n            args[i++] = \"--repo\";\n            args[i++] = repo;\n        }\n        args[i++] = \"--\";\n        args[i] = NULL;\n    }\n\n    /* Switch real user/group to effective ones.\n     * Otherwise yum library gets confused - gets EPERM (why??).\n     */\n    gid_t g = getegid();\n    /* do setregid only if we have to, to not upset selinux needlessly */\n    if (g != getgid())\n        IGNORE_RESULT(setregid(g, g));\n    uid_t u = geteuid();\n    if (u != getuid())\n    {\n        IGNORE_RESULT(setreuid(u, u));\n        /* We are suid'ed! */\n        /* Prevent malicious user from messing up with suid'ed process: */\n#if 1\n// We forgot to sanitize PYTHONPATH. And who knows what else we forgot\n// (especially considering *future* new variables of this kind).\n// We switched to clearing entire environment instead:\n\n        // However since we communicate through environment variables\n        // we have to keep a whitelist of variables to keep.\n        static const char *whitelist[] = {\n            \"REPORT_CLIENT_SLAVE\", //  Check if the app is being run as a slave\n            \"LANG\",\n        };\n        const size_t wlsize = sizeof(whitelist)/sizeof(char*);\n        char *setlist[sizeof(whitelist)/sizeof(char*)] = { 0 };\n        char *p = NULL;\n        for (size_t i = 0; i < wlsize; i++)\n            if ((p = getenv(whitelist[i])) != NULL)\n                setlist[i] = xstrdup(p);\n\n        // Now we can clear the environment\n        clearenv();\n\n        // And once again set whitelisted variables\n        for (size_t i = 0; i < wlsize; i++)\n            if (setlist[i] != NULL)\n            {\n                xsetenv(whitelist[i], setlist[i]);\n                free(setlist[i]);\n            }\n#else\n        /* Clear dangerous stuff from env */\n        static const char forbid[] =\n            \"LD_LIBRARY_PATH\" \"\\0\"\n            \"LD_PRELOAD\" \"\\0\"\n            \"LD_TRACE_LOADED_OBJECTS\" \"\\0\"\n            \"LD_BIND_NOW\" \"\\0\"\n            \"LD_AOUT_LIBRARY_PATH\" \"\\0\"\n            \"LD_AOUT_PRELOAD\" \"\\0\"\n            \"LD_NOWARN\" \"\\0\"\n            \"LD_KEEPDIR\" \"\\0\"\n        ;\n        const char *p = forbid;\n        do {\n            unsetenv(p);\n            p += strlen(p) + 1;\n        } while (*p);\n#endif\n        /* Set safe PATH */\n        // Adding configure --bindir and --sbindir to the PATH so that\n        // abrt-action-install-debuginfo doesn't fail when spawning\n        // abrt-action-trim-files\n        char path_env[] = \"PATH=/usr/sbin:/sbin:/usr/bin:/bin:\"BIN_DIR\":\"SBIN_DIR;\n        if (u != 0)\n            strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);\n        putenv(path_env);\n    }\n\n    execvp(EXECUTABLE, (char **)args);\n    error_msg_and_die(\"Can't execute %s\", EXECUTABLE);\n}\n"], "filenames": ["po/POTFILES.in", "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"], "buggy_code_start_loc": [33, 32], "buggy_code_end_loc": [33, 126], "fixing_code_start_loc": [34, 32], "fixing_code_end_loc": [35, 188], "type": "NVD-CWE-noinfo", "message": "The abrt-action-install-debuginfo-to-abrt-cache help program in Automatic Bug Reporting Tool (ABRT) does not properly handle the process environment before invoking abrt-action-install-debuginfo, which allows local users to gain privileges.", "other": {"cve": {"id": "CVE-2015-3159", "sourceIdentifier": "secalert@redhat.com", "published": "2020-01-14T18:15:10.993", "lastModified": "2023-02-13T00:47:48.437", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The abrt-action-install-debuginfo-to-abrt-cache help program in Automatic Bug Reporting Tool (ABRT) does not properly handle the process environment before invoking abrt-action-install-debuginfo, which allows local users to gain privileges."}, {"lang": "es", "value": "El programa de ayuda abrt-action-install-debuginfo-to-abrt-cache en Automatic Bug Reporting Tool (ABRT). no maneja apropiadamente el entorno del proceso antes de invocar a abrt-action-install-debuginfo, lo que permite a usuarios locales alcanzar privilegios."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:automatic_bug_reporting_tool:-:*:*:*:*:*:*:*", "matchCriteriaId": "A396CA2B-75FF-4BEE-8C0A-89B7C030D1E5"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1216962", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/abrt/abrt/commit/9943a77bca37a0829ccd3784d1dfab37f8c24e7b", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/abrt/abrt/commit/9a4100678fea4d60ec93d35f4c5de2e9ad054f3a", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/abrt/abrt/commit/9943a77bca37a0829ccd3784d1dfab37f8c24e7b"}}