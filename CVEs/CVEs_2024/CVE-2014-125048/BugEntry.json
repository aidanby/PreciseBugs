{"buggy_code": ["var XINGApi        = require('xing-api'),\n    mongoose       = require('mongoose'),\n    Wall           = mongoose.model('Wall'),\n    Profile        = mongoose.model('Profile'),\n    xingApi        = new XINGApi({\n      consumerKey: process.env.XING_CONSUMER_KEY,\n      consumerSecret: process.env.XING_CONSUMER_SECRET,\n      oauthCallback: process.env.OAUTH_CALLBACK\n    });\n\nmodule.exports = function (app, io) {\n  app.get('/walls/:wall_id/connect', function (req, res) {\n    // XXX ugly hack\n    var existingAuthorizeCallback = xingApi.oauth._authorize_callback;\n    xingApi.oauth._authorize_callback = existingAuthorizeCallback + '?wall_id=' + req.params.wall_id;\n\n    xingApi.getRequestToken(function (oauthToken, oauthTokenSecret, authorizeUrl) {\n      res.cookie('requestToken',\n        JSON.stringify({ token: oauthToken, secret: oauthTokenSecret }),\n        { signed: true });\n\n      res.redirect(authorizeUrl);\n    });\n\n    // XXX ugly hack\n    xingApi.oauth._authorize_callback = existingAuthorizeCallback;\n  });\n\n  app.get('/oauth_callback', function (req, res) {\n    if (!req.signedCookies.requestToken) {\n      return res.redirect(\"/\");\n    }\n\n    var requestToken = JSON.parse(req.signedCookies.requestToken);\n\n    xingApi.getAccessToken(requestToken.token, requestToken.secret, req.query.oauth_verifier,\n      function (error, oauthToken, oauthTokenSecret) {\n        res.cookie('requestToken', null); // delete cookie\n\n        var client = xingApi.client(oauthToken, oauthTokenSecret);\n\n        client.get('/v1/users/me', function (error, response) {\n          var user = JSON.parse(response).users[0];\n\n          Wall.findOne({ _id: req.query.wall_id }).exec()\n            .then(function (wall) {\n\n              var profile = new Profile({\n                userId: user.id,\n                displayName: user.display_name,\n                photoUrls: {\n                  size_128x128: user.photo_urls.size_128x128,\n                  size_256x256: user.photo_urls.size_256x256\n                }\n              }).toObject();\n\n              delete profile._id; // make sure that we don't overwrite the internal _id on an update\n\n              Profile.findOneAndUpdate({ userId: user.id }, profile, { upsert: true }).exec()\n                .then(function (profile) {\n                  wall.profiles.pull(profile._id);\n                  wall.profiles.push(profile._id);\n\n                  wall.save(function (err) {\n                    if (err) {\n                      console.error(err);\n                      res.render('error');\n                    } else {\n                      req.session.user = {\n                        id: profile._id,\n                        oauthToken: oauthToken,\n                        oauthTokenSecret: oauthTokenSecret\n                      };\n\n                      io.emit('profiles:updated');\n                      res.render('oauth/callback', { url: \"/walls/\" + req.query.wall_id });\n                    }\n                  });\n                });\n\n            }, function (err) {\n              console.log(err);\n            });\n        });\n      });\n  });\n};\n"], "fixing_code": ["var XINGApi        = require('xing-api'),\n    mongoose       = require('mongoose'),\n    Wall           = mongoose.model('Wall'),\n    Profile        = mongoose.model('Profile'),\n    xingApi        = new XINGApi({\n      consumerKey: process.env.XING_CONSUMER_KEY,\n      consumerSecret: process.env.XING_CONSUMER_SECRET,\n      oauthCallback: process.env.OAUTH_CALLBACK\n    });\n\nmodule.exports = function (app, io) {\n  app.get('/walls/:wall_id/connect', function (req, res) {\n    // XXX ugly hack\n    var existingAuthorizeCallback = xingApi.oauth._authorize_callback;\n    xingApi.oauth._authorize_callback = existingAuthorizeCallback + '?wall_id=' + req.params.wall_id;\n\n    xingApi.getRequestToken(function (oauthToken, oauthTokenSecret, authorizeUrl) {\n      res.cookie('requestToken',\n        JSON.stringify({ token: oauthToken, secret: oauthTokenSecret }),\n        { signed: true });\n\n      res.redirect(authorizeUrl);\n    });\n\n    // XXX ugly hack\n    xingApi.oauth._authorize_callback = existingAuthorizeCallback;\n  });\n\n  app.get('/oauth_callback', function (req, res) {\n    if (!req.signedCookies.requestToken) {\n      return res.redirect(\"/\");\n    }\n\n    var requestToken = JSON.parse(req.signedCookies.requestToken);\n\n    xingApi.getAccessToken(requestToken.token, requestToken.secret, req.query.oauth_verifier,\n      function (error, oauthToken, oauthTokenSecret) {\n        if (error) {\n          console.log(error);\n          res.render('error');\n          return;\n        }\n        req.session.regenerate(function (err) {\n          res.cookie('requestToken', null); // delete cookie\n\n          var client = xingApi.client(oauthToken, oauthTokenSecret);\n\n          client.get('/v1/users/me', function (error, response) {\n            var user = JSON.parse(response).users[0];\n\n            Wall.findOne({ _id: req.query.wall_id }).exec()\n              .then(function (wall) {\n\n                var profile = new Profile({\n                  userId: user.id,\n                  displayName: user.display_name,\n                  photoUrls: {\n                    size_128x128: user.photo_urls.size_128x128,\n                    size_256x256: user.photo_urls.size_256x256\n                  }\n                }).toObject();\n\n                delete profile._id; // make sure that we don't overwrite the internal _id on an update\n\n                Profile.findOneAndUpdate({ userId: user.id }, profile, { upsert: true }).exec()\n                  .then(function (profile) {\n                    wall.profiles.pull(profile._id);\n                    wall.profiles.push(profile._id);\n\n                    wall.save(function (err) {\n                      if (err) {\n                        console.error(err);\n                        res.render('error');\n                      } else {\n                        req.session.user = {\n                          id: profile._id,\n                          oauthToken: oauthToken,\n                          oauthTokenSecret: oauthTokenSecret\n                        };\n\n                        io.emit('profiles:updated');\n                        res.render('oauth/callback', { url: \"/walls/\" + req.query.wall_id });\n                      }\n                    });\n                  });\n              }, function (err) {\n                console.log(err);\n              });\n          });\n        });\n      });\n  });\n};\n"], "filenames": ["app/controllers/oauth.js"], "buggy_code_start_loc": [38], "buggy_code_end_loc": [84], "fixing_code_start_loc": [38], "fixing_code_end_loc": [90], "type": "CWE-384", "message": "A vulnerability, which was classified as critical, has been found in kassi xingwall. This issue affects some unknown processing of the file app/controllers/oauth.js. The manipulation leads to session fixiation. The name of the patch is e9f0d509e1408743048e29d9c099d36e0e1f6ae7. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217559.", "other": {"cve": {"id": "CVE-2014-125048", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T13:15:09.670", "lastModified": "2023-01-12T14:50:27.587", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, has been found in kassi xingwall. This issue affects some unknown processing of the file app/controllers/oauth.js. The manipulation leads to session fixiation. The name of the patch is e9f0d509e1408743048e29d9c099d36e0e1f6ae7. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217559."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.5, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kluks:xingwall:*:*:*:*:*:*:*:*", "versionEndExcluding": "e9f0d509e1408743048e29d9c099d36e0e1f6ae7", "matchCriteriaId": "F3CD74EB-5D7B-43E6-BA22-70D7A36C8B3C"}]}]}], "references": [{"url": "https://github.com/kassi/xingwall/commit/e9f0d509e1408743048e29d9c099d36e0e1f6ae7", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217559", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217559", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kassi/xingwall/commit/e9f0d509e1408743048e29d9c099d36e0e1f6ae7"}}