{"buggy_code": ["<?php\nsession_start();\nif (empty($_POST) && !empty($_SESSION) && !isset($_REQUEST['stage'])) {\n    $_POST = $_SESSION;\n} else {\n    $_SESSION = array_replace($_SESSION, $_POST);\n}\n\n$stage = isset($_POST['stage']) ? $_POST['stage'] : 0;\n\n// Before we do anything, if we see config.php, redirect back to the homepage.\nif (file_exists('../config.php') && $stage != 6) {\n    header(\"Location: /\");\n    exit;\n}\n\n// do not use the DB in init, we'll bring it up ourselves\n$init_modules = array('web', 'nodb');\nif ($stage > 3) {\n    $init_modules[] = 'auth';\n}\nrequire realpath(__DIR__ . '/..') . '/includes/init.php';\n\n// List of php modules we expect to see\n$modules = array('gd','mysqli','mcrypt');\n\n$dbhost = @$_POST['dbhost'] ?: 'localhost';\n$dbuser = @$_POST['dbuser'] ?: 'librenms';\n$dbpass = @$_POST['dbpass'] ?: '';\n$dbname = @$_POST['dbname'] ?: 'librenms';\n$dbport = @$_POST['dbport'] ?: 3306;\n$dbsocket = @$_POST['dbsocket'] ?: '';\n$config['db_host']=$dbhost;\n$config['db_user']=$dbuser;\n$config['db_pass']=$dbpass;\n$config['db_name']=$dbname;\n$config['db_port']=$dbport;\n$config['db_socket']=$dbsocket;\n\nif (!empty($config['db_socket'])) {\n    $config['db_host'] = '';\n    $config['db_port'] = null;\n} else {\n    $config['db_socket'] = null;\n}\n\n$add_user = @$_POST['add_user'] ?: '';\n$add_pass = @$_POST['add_pass'] ?: '';\n$add_email = @$_POST['add_email'] ?: '';\n\n\n// Check we can connect to MySQL DB, if not, back to stage 1 :)\nif ($stage > 1) {\n    try {\n        dbConnect();\n        if ($stage == 2 && $_SESSION['build-ok'] == true) {\n            $stage = 3;\n            $msg = \"It appears that the database is already setup so have moved onto stage $stage\";\n        }\n    } catch (\\LibreNMS\\Exceptions\\DatabaseConnectException $e) {\n        $stage = 1;\n        $msg = \"Couldn't connect to the database, please check your details<br /> \" . $e->getMessage();\n    }\n    $_SESSION['stage'] = $stage;\n}\n\nsession_write_close();\n\nif ($stage == 4) {\n    // Now check we have a username, password and email before adding new user\n    if (empty($add_user) || empty($add_pass) || empty($add_email)) {\n        $stage = 3;\n        $msg = \"You haven't entered enough information to add the user account, please check below and re-try\";\n    }\n} elseif ($stage == 6) {\n    session_destroy();\n    // If we get here then let's do some final checks.\n    if (!file_exists(\"../config.php\")) {\n        // config.php file doesn't exist. go back to that stage\n        $msg = \"config.php still doesn't exist\";\n        $stage = 5;\n    }\n}\n\nif (empty($stage)) {\n    $stage = 0;\n}\n\n$total_stages = 6;\n$stage_perc = $stage / $total_stages * 100;\n$complete = 1;\n\n?>\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title><?php echo($config['page_title_prefix']); ?></title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\" />\n  <meta http-equiv=\"content-language\" content=\"en-us\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"<?php echo($config['stylesheet']);  ?>\" rel=\"stylesheet\" type=\"text/css\" />\n  <script src=\"js/jquery.min.js\"></script>\n  <script src=\"js/bootstrap.min.js\"></script>\n  <script src=\"js/bootstrap-hover-dropdown.min.js\"></script>\n  <script src=\"js/hogan-2.0.0.js\"></script>\n\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h2 class=\"text-center\">Welcome to the <?php echo($config['project_name']); ?> install</h2>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h4 class=\"text-center\">Stage <?php echo $stage; ?> of <?php echo $total_stages; ?> complete</h4>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n\nif (!empty($msg)) {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"alert alert-danger\"><?php echo $msg; ?></div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n}\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"progress progress-striped\">\n          <div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"<?php echo $stage_perc; ?>\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: <?php echo $stage_perc; ?>%\">\n            <span class=\"sr-only\"><?php echo $stage_perc; ?>% Complete</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n\nif ($stage == 0) {\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h5 class=\"text-center\">Checking PHP module support</h5>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <table class=\"table table-condensed table-bordered\">\n          <tr>\n            <th>Module</th>\n            <th>Installed</th>\n            <th>Comments</th>\n          </tr>\n<?php\n\nforeach ($modules as $extension) {\n    if (extension_loaded(\"$extension\")) {\n        $ext_loaded = 'yes';\n        $row_class = 'success';\n    } else {\n        $ext_loaded = 'no';\n        $row_class = 'danger';\n        $complete = 0;\n    }\n\n    echo(\"   <tr class='$row_class'>\n            <td>$extension</td>\n            <td>$ext_loaded</td>\");\n    if ($ext_loaded == 'no') {\n        echo(\"<td></td>\");\n    } else {\n        echo(\"<td></td>\");\n    }\n    echo(\"</tr>\");\n}\n\n    // Check for pear install\n    @include_once 'System.php';\n\nif (class_exists('System') === true) {\n    $ext_loaded = 'yes';\n    $row_class = 'success';\n} else {\n    $ext_loaded = 'no';\n    $row_class = 'danger';\n}\n\n    echo(\"     <tr class='$row_class'>\n        <td>pear</td>\n        <td>$ext_loaded</td>\");\nif ($ext_loaded == 'no') {\n    echo(\"<td>apt-get install php-pear / yum install php-pear</td>\");\n} else {\n    echo(\"<td></td>\");\n}\n    echo(\"</tr>\");\n?>\n        </table>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-inline\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"1\">\n          <button type=\"submit\" class=\"btn btn-success\" <?php if ($complete == '0') {\n                echo \"disabled='disabled'\";\n} ?>>Next Stage</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n} elseif ($stage == 1) {\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"2\">\n          <div class=\"form-group\">\n            <label for=\"dbhost\" class=\"col-sm-4\" control-label\">DB Host: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbhost\" id=\"dbhost\" value=\"<?php echo $dbhost; ?>\" placeholder=\"Leave empty if using Unix-Socket\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbport\" class=\"col-sm-4\" control-label\">DB Port: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbport\" id=\"dbport\" value=\"<?php echo $dbport; ?>\" placeholder=\"Leave empty if using Unix-Socket\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbsocket\" class=\"col-sm-4\" control-label\">DB Unix-Socket: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbsocket\" id=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\" placeholder=\"Leave empty if using Host\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbuser\" class=\"col-sm-4\" control-label\">DB User: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbuser\" id=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbpass\" class=\"col-sm-4\" control-label\">DB Pass: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"password\" class=\"form-control\" name=\"dbpass\" id=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbname\" class=\"col-sm-4\" control-label\">DB Name: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbname\" id=\"dbname\" value=\"<?php echo $dbname; ?>\">\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-success\">Next Stage</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n} elseif ($stage == \"2\") {\n?>\n    <div class=\"row\">\n     <div class=\"col-md-3\">\n     </div>\n     <div class=\"col-md-6\">\n         <h5 class=\"text-center\">Importing MySQL DB - Do not close this page or interrupt the import</h5>\n        <textarea readonly id=\"db-update\" class=\"form-control\" rows=\"20\" placeholder=\"Please Wait...\" style=\"resize:vertical;\"></textarea>\n     </div>\n     <div class=\"col-md-3\">\n     </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        If you don't see any errors or messages above then the database setup has been successful.<br />\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"3\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbport\" value=\"<?php echo $dbport; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <button type=\"submit\" id=\"add-user-btn\" class=\"btn btn-success\" disabled>Goto Add User</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <script type=\"text/javascript\">\n        output = document.getElementById(\"db-update\");\n        xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"ajax_output.php?id=db-update\", true);\n        xhr.onprogress = function (e) {\n            output.innerHTML = e.currentTarget.responseText;\n            output.scrollTop = output.scrollHeight - output.clientHeight; // scrolls the output area\n        };\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                console.log(\"Complete\");\n                document.getElementById(\"add-user-btn\").removeAttribute('disabled');\n            }\n        };\n        xhr.send();\n    </script>\n<?php\n} elseif ($stage == \"5\") {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n<?php\n\n// Create the config file we will write or display\n$config_file = <<<\"EOD\"\n## Have a look in defaults.inc.php for examples of settings you can set here. DO NOT EDIT defaults.inc.php!\n\n### Database config\n\\$config\\['db_host'\\] = '$dbhost';\n\\$config\\['db_port'\\] = '$dbport';\n\\$config\\['db_user'\\] = '$dbuser';\n\\$config\\['db_pass'\\] = '$dbpass';\n\\$config\\['db_name'\\] = '$dbname';\n\\$config\\['db_socket'\\] = '$dbsocket';\n\n// This is the user LibreNMS will run as\n//Please ensure this user is created and has the correct permissions to your install\n\\$config['user'] = 'librenms';\n\n### Memcached config - We use this to store realtime usage\n\\$config\\['memcached'\\]\\['enable'\\]  = FALSE;\n\\$config\\['memcached'\\]\\['host'\\]    = \"localhost\";\n\\$config\\['memcached'\\]\\['port'\\]    = 11211;\n\n### Locations - it is recommended to keep the default\n#\\$config\\['install_dir'\\]  = \"$install_dir\";\n\n### This should *only* be set if you want to *force* a particular hostname/port\n### It will prevent the web interface being usable form any other hostname\n#\\$config\\['base_url'\\]        = \"http://librenms.company.com\";\n\n### Enable this to use rrdcached. Be sure rrd_dir is within the rrdcached dir\n### and that your web server has permission to talk to rrdcached.\n#\\$config\\['rrdcached'\\]    = \"unix:/var/run/rrdcached.sock\";\n\n### Default community\n\\$config\\['snmp'\\]\\['community'\\] = array(\"public\");\n\n### Authentication Model\n\\$config\\['auth_mechanism'\\] = \"mysql\"; # default, other options: ldap, http-auth\n#\\$config\\['http_auth_guest'\\] = \"guest\"; # remember to configure this user if you use http-auth\n\n### List of RFC1918 networks to allow scanning-based discovery\n#\\$config\\['nets'\\]\\[\\] = \"10.0.0.0/8\";\n#\\$config\\['nets'\\]\\[\\] = \"172.16.0.0/12\";\n#\\$config\\['nets'\\]\\[\\] = \"192.168.0.0/16\";\n\n# Uncomment the next line to disable daily updates\n#\\$config\\['update'\\] = 0;\nEOD;\n\nif (!file_exists(\"../config.php\")) {\n    $conf = fopen(\"../config.php\", 'w');\n    if ($conf != false) {\n        if (fwrite($conf, \"<?php\\n\") === false) {\n            echo(\"<div class='alert alert-danger'>We couldn't create the config.php file, please create this manually before continuing by copying the below into a config.php in the root directory of your install (typically /opt/librenms/)</div>\");\n            echo(\"<pre>&lt;?php\\n\".stripslashes($config_file).\"</pre>\");\n        } else {\n            $config_file = stripslashes($config_file);\n            fwrite($conf, $config_file);\n            echo(\"<div class='alert alert-success'>The config file has been created</div>\");\n        }\n    } else {\n        echo(\"<div class='alert alert-danger'>We couldn't create the config.php file, please create this manually before continuing by copying the below into a config.php in the root directory of your install (typically /opt/librenms/)</div>\");\n        echo(\"<pre>&lt;?php\\n\".stripslashes($config_file).\"</pre>\");\n    }\n}\n?>\n      <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n        <input type=\"hidden\" name=\"stage\" value=\"6\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n        <button type=\"submit\" class=\"btn btn-success\">Finish install</button>\n      </form>\n<?php\n\n?>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"3\") {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"4\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <div class=\"form-group\">\n            <label for=\"add_user\" class=\"col-sm-4 control-label\">Username</label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"add_user\" id=\"add_user\" value=\"<?php echo $add_user; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"add_pass\" class=\"col-sm-4 control-label\">Password</label>\n            <div class=\"col-sm-8\">\n              <input type=\"password\" class=\"form-control\" name=\"add_pass\" id=\"add_pass\" value=\"<?php echo $add_pass; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"add_email\" class=\"col-sm-4 control-label\">Email</label>\n            <div class=\"col-sm-8\">\n              <input type=\"email\" class=\"form-control\" name=\"add_email\" id=\"add_email\" value=\"<?php echo $add_email; ?>\">\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-success\">Add User</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"4\") {\n    $proceed = 1;\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n<?php\nif (auth_usermanagement()) {\n    if (!user_exists($add_user)) {\n        if (adduser($add_user, $add_pass, '10', $add_email)) {\n            echo(\"<div class='alert alert-success'>User has been added successfully</div>\");\n            $proceed = 0;\n        } else {\n            echo(\"<div class='alert alert-danger'>User hasn't been added, please try again</div>\");\n        }\n    } else {\n        echo(\"<div class='alert alert-danger'>User $add_user already exists!</div>\");\n    }\n} else {\n    echo(\"<div class='alert alert-danger'>Auth module isn't loaded</div>\");\n}\n\n?>\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"5\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <button type=\"submit\" class=\"btn btn-success\" <?php if ($proceed == \"1\") {\n                echo \"disabled='disabled'\";\n} ?>>Generate Config</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"6\") {\n?>\n    <div class=\"row\">\n        <div class=\"col-md-offset-3 col-md-6\">\n            <div class=\"alert alert-danger\">You haven't quite finished yet - please go back to the install docs and carry on the necessary steps to finish the setup!</div>\n        </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"alert alert-success\">Thank you for setting up LibreNMS.<br />\n        It would be great if you would consider contributing to our statistics, you can do this on the <a href=\"about/\">/about/</a> page and check the box under Statistics.<br />\n        You can now click <a href=\"/\">here to login to your new install.</a></div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n<?php\n}\n?>\n\n  </div>\n</body>\n</html>\n", "<?php\n\n/*\n * dbFacile - A Database API that should have existed from the start\n * Version 0.4.3\n *\n * This code is covered by the MIT license http://en.wikipedia.org/wiki/MIT_License\n *\n * By Alan Szlosek from http://www.greaterscope.net/projects/dbFacile\n *\n * The non-OO version of dbFacile. It's a bit simplistic, but gives you the\n * really useful bits in non-class form.\n *\n * Usage\n * 1. Connect to MySQL as you normally would ... this code uses an existing connection\n * 2. Use dbFacile as you normally would, without the object context\n * 3. Oh, and dbFetchAll() is now dbFetchRows()\n */\n\nuse LibreNMS\\Exceptions\\DatabaseConnectException;\n\nfunction dbIsConnected()\n{\n    global $database_link;\n    if (empty($database_link)) {\n        return false;\n    }\n\n    return mysqli_ping($database_link);\n}\n\n/**\n * Connect to the database.\n * Will use global $config variables if they are not sent: db_host, db_user, db_pass, db_name, db_port, db_socket\n *\n * @param string $host\n * @param string $user\n * @param string $password\n * @param string $database\n * @param string $port\n * @param string $socket\n * @return mysqli\n * @throws DatabaseConnectException\n */\nfunction dbConnect($host = null, $user = '', $password = '', $database = '', $port = null, $socket = null)\n{\n    global $config, $database_link;\n\n    if (dbIsConnected()) {\n        return $database_link;\n    }\n\n    $host = empty($host) ? $config['db_host'] : $host;\n    $user = empty($user) ? $config['db_user'] : $user;\n    $password = empty($password) ? $config['db_pass'] : $password;\n    $database = empty($database) ? $config['db_name'] : $database;\n    $port = empty($port) ? $config['db_port'] : $port;\n    $socket = empty($socket) ? $config['db_socket'] : $socket;\n\n    $database_link = mysqli_connect('p:' . $host, $user, $password, null, $port, $socket);\n    if ($database_link === false) {\n        $error = mysqli_connect_error();\n        if ($error == 'No such file or directory') {\n            $error = 'Could not connect to ' . $host;\n        }\n        throw new DatabaseConnectException($error);\n    }\n\n    $database_db = mysqli_select_db($database_link, $config['db_name']);\n    if (!$database_db) {\n        $db_create_sql = \"CREATE DATABASE \" . $config['db_name'] . \" CHARACTER SET utf8 COLLATE utf8_unicode_ci\";\n        mysqli_query($database_link, $db_create_sql);\n        $database_db = mysqli_select_db($database_link, $database);\n    }\n\n    if (!$database_db) {\n        throw new DatabaseConnectException(\"Could not select database: $database. \" . mysqli_error($database_link));\n    }\n\n    dbQuery(\"SET NAMES 'utf8'\");\n    dbQuery(\"SET CHARACTER SET 'utf8'\");\n    dbQuery(\"SET COLLATION_CONNECTION = 'utf8_unicode_ci'\");\n\n    return $database_link;\n}\n\n/*\n * Performs a query using the given string.\n * Used by the other _query functions.\n * */\n\n\nfunction dbQuery($sql, $parameters = array())\n{\n    global $fullSql, $debug, $sql_debug, $database_link, $config;\n    $fullSql = dbMakeQuery($sql, $parameters);\n    if ($debug) {\n        if (php_sapi_name() == 'cli' && empty($_SERVER['REMOTE_ADDR'])) {\n            if (preg_match('/(INSERT INTO `alert_log`).*(details)/i', $fullSql)) {\n                echo \"\\nINSERT INTO `alert_log` entry masked due to binary data\\n\";\n            } else {\n                c_echo('SQL[%y'.$fullSql.\"%n] \\n\");\n            }\n        } else {\n            $sql_debug[] = $fullSql;\n        }\n    }\n\n    $result = mysqli_query($database_link, $fullSql);\n    if (!$result) {\n        $mysql_error = mysqli_error($database_link);\n        if (isset($config['mysql_log_level']) && ((in_array($config['mysql_log_level'], array('INFO', 'ERROR')) && !preg_match('/Duplicate entry/', $mysql_error)) || in_array($config['mysql_log_level'], array('DEBUG')))) {\n            if (!empty($mysql_error)) {\n                logfile(date($config['dateformat']['compact']) . \" MySQL Error: $mysql_error ($fullSql)\");\n            }\n        }\n    }\n\n    return $result;\n}//end dbQuery()\n\n\n/*\n * Passed an array and a table name, it attempts to insert the data into the table.\n * Check for boolean false to determine whether insert failed\n * */\n\n\nfunction dbInsert($data, $table)\n{\n    global $database_link;\n    $time_start = microtime(true);\n\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // insert into the TABLE this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n        // trigger_error('QDB - Parameters passed to insert() were in reverse order, but it has been allowed', E_USER_NOTICE);\n    }\n\n    $sql = 'INSERT INTO `'.$table.'` (`'.implode('`,`', array_keys($data)).'`)  VALUES ('.implode(',', dbPlaceHolders($data)).')';\n\n    dbBeginTransaction();\n    $result = dbQuery($sql, $data);\n    if ($result) {\n        $id = mysqli_insert_id($database_link);\n        dbCommitTransaction();\n        // return $id;\n    } else {\n        if ($table != 'Contact') {\n            trigger_error('QDB - Insert failed.', E_USER_WARNING);\n        }\n\n        dbRollbackTransaction();\n        $id = null;\n    }\n\n    recordDbStatistic('insert', $time_start);\n    return $id;\n}//end dbInsert()\n\n\n/*\n * Passed an array and a table name, it attempts to insert the data into the table.\n * $data is an array (rows) of key value pairs.  keys are fields.  Rows need to have same fields.\n * Check for boolean false to determine whether insert failed\n * */\n\n\nfunction dbBulkInsert($data, $table)\n{\n    $time_start = microtime(true);\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // insert into the TABLE this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n    }\n    if (count($data) === 0) {\n        return false;\n    }\n    if (count($data[0]) === 0) {\n        return false;\n    }\n\n    $sql = 'INSERT INTO `'.$table.'` (`'.implode('`,`', array_keys($data[0])).'`)  VALUES ';\n    $values ='';\n\n    foreach ($data as $row) {\n        if ($values != '') {\n            $values .= ',';\n        }\n        $rowvalues='';\n        foreach ($row as $key => $value) {\n            if ($rowvalues != '') {\n                $rowvalues .= ',';\n            }\n            $rowvalues .= \"'\".mres($value).\"'\";\n        }\n        $values .= \"(\".$rowvalues.\")\";\n    }\n\n    $result = dbQuery($sql.$values);\n\n    recordDbStatistic('insert', $time_start);\n    return $result;\n}//end dbBulkInsert()\n\n\n/*\n * Passed an array, table name, WHERE clause, and placeholder parameters, it attempts to update a record.\n * Returns the number of affected rows\n * */\n\n\nfunction dbUpdate($data, $table, $where = null, $parameters = array())\n{\n    global $fullSql, $database_link;\n    $time_start = microtime(true);\n\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // update the TABLE with this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n        // trigger_error('QDB - The first two parameters passed to update() were in reverse order, but it has been allowed', E_USER_NOTICE);\n    }\n\n    // need field name and placeholder value\n    // but how merge these field placeholders with actual $parameters array for the WHERE clause\n    $sql = 'UPDATE `'.$table.'` set ';\n    foreach ($data as $key => $value) {\n        $sql .= '`'.$key.'` '.'=:'.$key.',';\n    }\n\n    $sql = substr($sql, 0, -1);\n    // strip off last comma\n    if ($where) {\n        $sql .= ' WHERE '.$where;\n        $data = array_merge($data, $parameters);\n    }\n\n    if (dbQuery($sql, $data)) {\n        $return = mysqli_affected_rows($database_link);\n    } else {\n        // echo(\"$fullSql\");\n        trigger_error('QDB - Update failed.', E_USER_WARNING);\n        $return = false;\n    }\n\n    recordDbStatistic('update', $time_start);\n    return $return;\n}//end dbUpdate()\n\n\nfunction dbDelete($table, $where = null, $parameters = array())\n{\n    global $database_link;\n    $time_start = microtime(true);\n\n    $sql = 'DELETE FROM `'.$table.'`';\n    if ($where) {\n        $sql .= ' WHERE '.$where;\n    }\n\n    $result = dbQuery($sql, $parameters);\n\n    recordDbStatistic('delete', $time_start);\n    if ($result) {\n        return mysqli_affected_rows($database_link);\n    } else {\n        return false;\n    }\n}//end dbDelete()\n\n\n/*\n * Fetches all of the rows (associatively) from the last performed query.\n * Most other retrieval functions build off this\n * */\n\n\nfunction dbFetchRows($sql, $parameters = array(), $nocache = false)\n{\n    global $config;\n\n    if ($config['memcached']['enable'] && $nocache === false) {\n        $result = $config['memcached']['resource']->get(hash('sha512', $sql.'|'.serialize($parameters)));\n        if (!empty($result)) {\n            return $result;\n        }\n    }\n\n    $time_start = microtime(true);\n    $result         = dbQuery($sql, $parameters);\n\n    if (mysqli_num_rows($result) > 0) {\n        $rows = array();\n        while ($row = mysqli_fetch_assoc($result)) {\n            $rows[] = $row;\n        }\n\n        mysqli_free_result($result);\n        if ($config['memcached']['enable'] && $nocache === false) {\n            $config['memcached']['resource']->set(hash('sha512', $sql.'|'.serialize($parameters)), $rows, $config['memcached']['ttl']);\n        }\n        recordDbStatistic('fetchrows', $time_start);\n        return $rows;\n    }\n\n    mysqli_free_result($result);\n\n    // no records, thus return empty array\n    // which should evaluate to false, and will prevent foreach notices/warnings\n    recordDbStatistic('fetchrows', $time_start);\n    return array();\n}//end dbFetchRows()\n\n\n/*\n * This is intended to be the method used for large result sets.\n * It is intended to return an iterator, and act upon buffered data.\n * */\n\n\nfunction dbFetch($sql, $parameters = array(), $nocache = false)\n{\n    return dbFetchRows($sql, $parameters, $nocache);\n    /*\n        // for now, don't do the iterator thing\n        $result = dbQuery($sql, $parameters);\n        if($result) {\n        // return new iterator\n        return new dbIterator($result);\n        } else {\n        return null; // ??\n        }\n     */\n}//end dbFetch()\n\n\n/*\n * Like fetch(), accepts any number of arguments\n * The first argument is an sprintf-ready query stringTypes\n * */\n\n\nfunction dbFetchRow($sql = null, $parameters = array(), $nocache = false)\n{\n    global $config;\n\n    if (isset($config['memcached']['enable']) && $config['memcached']['enable'] && $nocache === false) {\n        $result = $config['memcached']['resource']->get(hash('sha512', $sql.'|'.serialize($parameters)));\n        if (!empty($result)) {\n            return $result;\n        }\n    }\n\n    $time_start = microtime(true);\n    $result         = dbQuery($sql, $parameters);\n    if ($result) {\n        $row = mysqli_fetch_assoc($result);\n        mysqli_free_result($result);\n\n        recordDbStatistic('fetchrow', $time_start);\n\n        if (isset($config['memcached']['enable']) && $config['memcached']['enable'] && $nocache === false) {\n            $config['memcached']['resource']->set(hash('sha512', $sql.'|'.serialize($parameters)), $row, $config['memcached']['ttl']);\n        }\n        return $row;\n    } else {\n        return null;\n    }\n}//end dbFetchRow()\n\n\n/*\n * Fetches the first call from the first row returned by the query\n * */\n\n\nfunction dbFetchCell($sql, $parameters = array(), $nocache = false)\n{\n    $time_start = microtime(true);\n    $row = dbFetchRow($sql, $parameters, $nocache);\n\n    recordDbStatistic('fetchcell', $time_start);\n    if ($row) {\n        return array_shift($row);\n        // shift first field off first row\n    }\n    return null;\n}//end dbFetchCell()\n\n\n/*\n * This method is quite different from fetchCell(), actually\n * It fetches one cell from each row and places all the values in 1 array\n * */\n\n\nfunction dbFetchColumn($sql, $parameters = array(), $nocache = false)\n{\n    $time_start = microtime(true);\n    $cells          = array();\n    foreach (dbFetch($sql, $parameters, $nocache) as $row) {\n        $cells[] = array_shift($row);\n    }\n\n    recordDbStatistic('fetchcolumn', $time_start);\n    return $cells;\n}//end dbFetchColumn()\n\n\n/*\n * Should be passed a query that fetches two fields\n * The first will become the array key\n * The second the key's value\n */\n\n\nfunction dbFetchKeyValue($sql, $parameters = array(), $nocache = false)\n{\n    $data = array();\n    foreach (dbFetch($sql, $parameters, $nocache) as $row) {\n        $key = array_shift($row);\n        if (sizeof($row) == 1) {\n            // if there were only 2 fields in the result\n            // use the second for the value\n            $data[$key] = array_shift($row);\n        } else {\n            // if more than 2 fields were fetched\n            // use the array of the rest as the value\n            $data[$key] = $row;\n        }\n    }\n\n    return $data;\n}//end dbFetchKeyValue()\n\n\n/*\n * This combines a query and parameter array into a final query string for execution\n * PDO drivers don't need to use this\n */\n\n\nfunction dbMakeQuery($sql, $parameters)\n{\n    // bypass extra logic if we have no parameters\n    if (sizeof($parameters) == 0) {\n        return $sql;\n    }\n\n    $parameters = dbPrepareData($parameters);\n    // separate the two types of parameters for easier handling\n    $questionParams = array();\n    $namedParams    = array();\n    foreach ($parameters as $key => $value) {\n        if (is_numeric($key)) {\n            $questionParams[] = $value;\n        } else {\n            $namedParams[':'.$key] = $value;\n        }\n    }\n\n    // sort namedParams in reverse to stop substring squashing\n    krsort($namedParams);\n\n    // split on question-mark and named placeholders\n    if (preg_match('/(\\[\\[:[\\w]+:\\]\\])/', $sql)) {\n        $result = preg_split('/(\\?[a-zA-Z0-9_-]*)/', $sql, -1, (PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE));\n    } else {\n        $result = preg_split('/(\\?|:[a-zA-Z0-9_-]+)/', $sql, -1, (PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE));\n    }\n\n    // every-other item in $result will be the placeholder that was found\n    $query            = '';\n    $res_size = sizeof($result);\n    for ($i = 0; $i < $res_size; $i += 2) {\n        $query .= $result[$i];\n\n        $j = ($i + 1);\n        if (array_key_exists($j, $result)) {\n            $test = $result[$j];\n            if ($test == '?') {\n                $query .= array_shift($questionParams);\n            } else {\n                $query .= $namedParams[$test];\n            }\n        }\n    }\n\n    return $query;\n}//end dbMakeQuery()\n\n\nfunction dbPrepareData($data)\n{\n    global $database_link;\n    $values = array();\n\n    foreach ($data as $key => $value) {\n        $escape = true;\n        // don't quote or esc if value is an array, we treat it\n        // as a \"decorator\" that tells us not to escape the\n        // value contained in the array\n        if (is_array($value) && !is_object($value)) {\n            $escape = false;\n            $value  = array_shift($value);\n        }\n\n        // it's not right to worry about invalid fields in this method because we may be operating on fields\n        // that are aliases, or part of other tables through joins\n        // if(!in_array($key, $columns)) // skip invalid fields\n        // continue;\n        if ($escape) {\n            $values[$key] = \"'\".mysqli_real_escape_string($database_link, $value).\"'\";\n        } else {\n            $values[$key] = $value;\n        }\n    }\n\n    return $values;\n}//end dbPrepareData()\n\n/**\n * Given a data array, this returns an array of placeholders\n * These may be question marks, or \":email\" type\n *\n * @param array $values\n * @return array\n */\nfunction dbPlaceHolders($values)\n{\n    $data = array();\n    foreach ($values as $key => $value) {\n        if (is_numeric($key)) {\n            $data[] = '?';\n        } else {\n            $data[] = ':'.$key;\n        }\n    }\n\n    return $data;\n}//end dbPlaceHolders()\n\n\nfunction dbBeginTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'begin');\n}//end dbBeginTransaction()\n\n\nfunction dbCommitTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'commit');\n}//end dbCommitTransaction()\n\n\nfunction dbRollbackTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'rollback');\n}//end dbRollbackTransaction()\n\n/**\n * Generate a string of placeholders to pass to fill in a list\n * result will look like this: (?, ?, ?, ?)\n *\n * @param $count\n * @return string placholder list\n */\nfunction dbGenPlaceholders($count)\n{\n    return '(' . implode(',', array_fill(0, $count, '?')) . ')';\n}\n"], "fixing_code": ["<?php\nsession_start();\nif (empty($_POST) && !empty($_SESSION) && !isset($_REQUEST['stage'])) {\n    $_POST = $_SESSION;\n} elseif (!file_exists(\"../config.php\")) {\n    $_SESSION = array_replace($_SESSION, $_POST);\n}\n\n$stage = isset($_POST['stage']) ? $_POST['stage'] : 0;\n\n// Before we do anything, if we see config.php, redirect back to the homepage.\nif (file_exists('../config.php') && $stage != 6) {\n    header(\"Location: /\");\n    exit;\n}\n\n// do not use the DB in init, we'll bring it up ourselves\n$init_modules = array('web', 'nodb');\nif ($stage > 3) {\n    $init_modules[] = 'auth';\n}\nrequire realpath(__DIR__ . '/..') . '/includes/init.php';\n\n// List of php modules we expect to see\n$modules = array('gd','mysqli','mcrypt');\n\n$dbhost = @$_POST['dbhost'] ?: 'localhost';\n$dbuser = @$_POST['dbuser'] ?: 'librenms';\n$dbpass = @$_POST['dbpass'] ?: '';\n$dbname = @$_POST['dbname'] ?: 'librenms';\n$dbport = @$_POST['dbport'] ?: 3306;\n$dbsocket = @$_POST['dbsocket'] ?: '';\n$config['db_host']=$dbhost;\n$config['db_user']=$dbuser;\n$config['db_pass']=$dbpass;\n$config['db_name']=$dbname;\n$config['db_port']=$dbport;\n$config['db_socket']=$dbsocket;\n\nif (!empty($config['db_socket'])) {\n    $config['db_host'] = '';\n    $config['db_port'] = null;\n} else {\n    $config['db_socket'] = null;\n}\n\n$add_user = @$_POST['add_user'] ?: '';\n$add_pass = @$_POST['add_pass'] ?: '';\n$add_email = @$_POST['add_email'] ?: '';\n\n\n// Check we can connect to MySQL DB, if not, back to stage 1 :)\nif ($stage > 1) {\n    try {\n        if ($stage != 6) {\n            dbConnect();\n        }\n        if ($stage == 2 && $_SESSION['build-ok'] == true) {\n            $stage = 3;\n            $msg = \"It appears that the database is already setup so have moved onto stage $stage\";\n        }\n    } catch (\\LibreNMS\\Exceptions\\DatabaseConnectException $e) {\n        $stage = 1;\n        $msg = \"Couldn't connect to the database, please check your details<br /> \" . $e->getMessage();\n    }\n    $_SESSION['stage'] = $stage;\n}\n\nsession_write_close();\n\nif ($stage == 4) {\n    // Now check we have a username, password and email before adding new user\n    if (empty($add_user) || empty($add_pass) || empty($add_email)) {\n        $stage = 3;\n        $msg = \"You haven't entered enough information to add the user account, please check below and re-try\";\n    }\n} elseif ($stage == 6) {\n    session_destroy();\n    // If we get here then let's do some final checks.\n    if (!file_exists(\"../config.php\")) {\n        // config.php file doesn't exist. go back to that stage\n        $msg = \"config.php still doesn't exist\";\n        $stage = 5;\n    }\n}\n\nif (empty($stage)) {\n    $stage = 0;\n}\n\n$total_stages = 6;\n$stage_perc = $stage / $total_stages * 100;\n$complete = 1;\n\n?>\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title><?php echo($config['page_title_prefix']); ?></title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\" />\n  <meta http-equiv=\"content-language\" content=\"en-us\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"<?php echo($config['stylesheet']);  ?>\" rel=\"stylesheet\" type=\"text/css\" />\n  <script src=\"js/jquery.min.js\"></script>\n  <script src=\"js/bootstrap.min.js\"></script>\n  <script src=\"js/bootstrap-hover-dropdown.min.js\"></script>\n  <script src=\"js/hogan-2.0.0.js\"></script>\n\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h2 class=\"text-center\">Welcome to the <?php echo($config['project_name']); ?> install</h2>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h4 class=\"text-center\">Stage <?php echo $stage; ?> of <?php echo $total_stages; ?> complete</h4>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n\nif (!empty($msg)) {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"alert alert-danger\"><?php echo $msg; ?></div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n}\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"progress progress-striped\">\n          <div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"<?php echo $stage_perc; ?>\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: <?php echo $stage_perc; ?>%\">\n            <span class=\"sr-only\"><?php echo $stage_perc; ?>% Complete</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n\nif ($stage == 0) {\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <h5 class=\"text-center\">Checking PHP module support</h5>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <table class=\"table table-condensed table-bordered\">\n          <tr>\n            <th>Module</th>\n            <th>Installed</th>\n            <th>Comments</th>\n          </tr>\n<?php\n\nforeach ($modules as $extension) {\n    if (extension_loaded(\"$extension\")) {\n        $ext_loaded = 'yes';\n        $row_class = 'success';\n    } else {\n        $ext_loaded = 'no';\n        $row_class = 'danger';\n        $complete = 0;\n    }\n\n    echo(\"   <tr class='$row_class'>\n            <td>$extension</td>\n            <td>$ext_loaded</td>\");\n    if ($ext_loaded == 'no') {\n        echo(\"<td></td>\");\n    } else {\n        echo(\"<td></td>\");\n    }\n    echo(\"</tr>\");\n}\n\n    // Check for pear install\n    @include_once 'System.php';\n\nif (class_exists('System') === true) {\n    $ext_loaded = 'yes';\n    $row_class = 'success';\n} else {\n    $ext_loaded = 'no';\n    $row_class = 'danger';\n}\n\n    echo(\"     <tr class='$row_class'>\n        <td>pear</td>\n        <td>$ext_loaded</td>\");\nif ($ext_loaded == 'no') {\n    echo(\"<td>apt-get install php-pear / yum install php-pear</td>\");\n} else {\n    echo(\"<td></td>\");\n}\n    echo(\"</tr>\");\n?>\n        </table>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-inline\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"1\">\n          <button type=\"submit\" class=\"btn btn-success\" <?php if ($complete == '0') {\n                echo \"disabled='disabled'\";\n} ?>>Next Stage</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n} elseif ($stage == 1) {\n?>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"2\">\n          <div class=\"form-group\">\n            <label for=\"dbhost\" class=\"col-sm-4\" control-label\">DB Host: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbhost\" id=\"dbhost\" value=\"<?php echo $dbhost; ?>\" placeholder=\"Leave empty if using Unix-Socket\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbport\" class=\"col-sm-4\" control-label\">DB Port: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbport\" id=\"dbport\" value=\"<?php echo $dbport; ?>\" placeholder=\"Leave empty if using Unix-Socket\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbsocket\" class=\"col-sm-4\" control-label\">DB Unix-Socket: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbsocket\" id=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\" placeholder=\"Leave empty if using Host\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbuser\" class=\"col-sm-4\" control-label\">DB User: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbuser\" id=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbpass\" class=\"col-sm-4\" control-label\">DB Pass: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"password\" class=\"form-control\" name=\"dbpass\" id=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dbname\" class=\"col-sm-4\" control-label\">DB Name: </label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"dbname\" id=\"dbname\" value=\"<?php echo $dbname; ?>\">\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-success\">Next Stage</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n\n<?php\n} elseif ($stage == \"2\") {\n?>\n    <div class=\"row\">\n     <div class=\"col-md-3\">\n     </div>\n     <div class=\"col-md-6\">\n         <h5 class=\"text-center\">Importing MySQL DB - Do not close this page or interrupt the import</h5>\n        <textarea readonly id=\"db-update\" class=\"form-control\" rows=\"20\" placeholder=\"Please Wait...\" style=\"resize:vertical;\"></textarea>\n     </div>\n     <div class=\"col-md-3\">\n     </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        If you don't see any errors or messages above then the database setup has been successful.<br />\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"3\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbport\" value=\"<?php echo $dbport; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <button type=\"submit\" id=\"add-user-btn\" class=\"btn btn-success\" disabled>Goto Add User</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n    <script type=\"text/javascript\">\n        output = document.getElementById(\"db-update\");\n        xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"ajax_output.php?id=db-update\", true);\n        xhr.onprogress = function (e) {\n            output.innerHTML = e.currentTarget.responseText;\n            output.scrollTop = output.scrollHeight - output.clientHeight; // scrolls the output area\n        };\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                console.log(\"Complete\");\n                document.getElementById(\"add-user-btn\").removeAttribute('disabled');\n            }\n        };\n        xhr.send();\n    </script>\n<?php\n} elseif ($stage == \"5\") {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n<?php\n\n// Create the config file we will write or display\n$config_file = <<<\"EOD\"\n## Have a look in defaults.inc.php for examples of settings you can set here. DO NOT EDIT defaults.inc.php!\n\n### Database config\n\\$config\\['db_host'\\] = '$dbhost';\n\\$config\\['db_port'\\] = '$dbport';\n\\$config\\['db_user'\\] = '$dbuser';\n\\$config\\['db_pass'\\] = '$dbpass';\n\\$config\\['db_name'\\] = '$dbname';\n\\$config\\['db_socket'\\] = '$dbsocket';\n\n// This is the user LibreNMS will run as\n//Please ensure this user is created and has the correct permissions to your install\n\\$config['user'] = 'librenms';\n\n### Memcached config - We use this to store realtime usage\n\\$config\\['memcached'\\]\\['enable'\\]  = FALSE;\n\\$config\\['memcached'\\]\\['host'\\]    = \"localhost\";\n\\$config\\['memcached'\\]\\['port'\\]    = 11211;\n\n### Locations - it is recommended to keep the default\n#\\$config\\['install_dir'\\]  = \"$install_dir\";\n\n### This should *only* be set if you want to *force* a particular hostname/port\n### It will prevent the web interface being usable form any other hostname\n#\\$config\\['base_url'\\]        = \"http://librenms.company.com\";\n\n### Enable this to use rrdcached. Be sure rrd_dir is within the rrdcached dir\n### and that your web server has permission to talk to rrdcached.\n#\\$config\\['rrdcached'\\]    = \"unix:/var/run/rrdcached.sock\";\n\n### Default community\n\\$config\\['snmp'\\]\\['community'\\] = array(\"public\");\n\n### Authentication Model\n\\$config\\['auth_mechanism'\\] = \"mysql\"; # default, other options: ldap, http-auth\n#\\$config\\['http_auth_guest'\\] = \"guest\"; # remember to configure this user if you use http-auth\n\n### List of RFC1918 networks to allow scanning-based discovery\n#\\$config\\['nets'\\]\\[\\] = \"10.0.0.0/8\";\n#\\$config\\['nets'\\]\\[\\] = \"172.16.0.0/12\";\n#\\$config\\['nets'\\]\\[\\] = \"192.168.0.0/16\";\n\n# Uncomment the next line to disable daily updates\n#\\$config\\['update'\\] = 0;\nEOD;\n\nif (!file_exists(\"../config.php\")) {\n    $conf = fopen(\"../config.php\", 'w');\n    if ($conf != false) {\n        if (fwrite($conf, \"<?php\\n\") === false) {\n            echo(\"<div class='alert alert-danger'>We couldn't create the config.php file, please create this manually before continuing by copying the below into a config.php in the root directory of your install (typically /opt/librenms/)</div>\");\n            echo(\"<pre>&lt;?php\\n\".stripslashes($config_file).\"</pre>\");\n        } else {\n            $config_file = stripslashes($config_file);\n            fwrite($conf, $config_file);\n            echo(\"<div class='alert alert-success'>The config file has been created</div>\");\n        }\n    } else {\n        echo(\"<div class='alert alert-danger'>We couldn't create the config.php file, please create this manually before continuing by copying the below into a config.php in the root directory of your install (typically /opt/librenms/)</div>\");\n        echo(\"<pre>&lt;?php\\n\".stripslashes($config_file).\"</pre>\");\n    }\n}\n?>\n      <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n        <input type=\"hidden\" name=\"stage\" value=\"6\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n        <button type=\"submit\" class=\"btn btn-success\">Finish install</button>\n      </form>\n<?php\n\n?>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"3\") {\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"4\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <div class=\"form-group\">\n            <label for=\"add_user\" class=\"col-sm-4 control-label\">Username</label>\n            <div class=\"col-sm-8\">\n              <input type=\"text\" class=\"form-control\" name=\"add_user\" id=\"add_user\" value=\"<?php echo $add_user; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"add_pass\" class=\"col-sm-4 control-label\">Password</label>\n            <div class=\"col-sm-8\">\n              <input type=\"password\" class=\"form-control\" name=\"add_pass\" id=\"add_pass\" value=\"<?php echo $add_pass; ?>\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"add_email\" class=\"col-sm-4 control-label\">Email</label>\n            <div class=\"col-sm-8\">\n              <input type=\"email\" class=\"form-control\" name=\"add_email\" id=\"add_email\" value=\"<?php echo $add_email; ?>\">\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-success\">Add User</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"4\") {\n    $proceed = 1;\n?>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n<?php\nif (auth_usermanagement()) {\n    if (!user_exists($add_user)) {\n        if (adduser($add_user, $add_pass, '10', $add_email)) {\n            echo(\"<div class='alert alert-success'>User has been added successfully</div>\");\n            $proceed = 0;\n        } else {\n            echo(\"<div class='alert alert-danger'>User hasn't been added, please try again</div>\");\n        }\n    } else {\n        echo(\"<div class='alert alert-danger'>User $add_user already exists!</div>\");\n    }\n} else {\n    echo(\"<div class='alert alert-danger'>Auth module isn't loaded</div>\");\n}\n\n?>\n        <form class=\"form-horizontal\" role=\"form\" method=\"post\">\n          <input type=\"hidden\" name=\"stage\" value=\"5\">\n          <input type=\"hidden\" name=\"dbhost\" value=\"<?php echo $dbhost; ?>\">\n          <input type=\"hidden\" name=\"dbuser\" value=\"<?php echo $dbuser; ?>\">\n          <input type=\"hidden\" name=\"dbpass\" value=\"<?php echo $dbpass; ?>\">\n          <input type=\"hidden\" name=\"dbname\" value=\"<?php echo $dbname; ?>\">\n          <input type=\"hidden\" name=\"dbsocket\" value=\"<?php echo $dbsocket; ?>\">\n          <button type=\"submit\" class=\"btn btn-success\" <?php if ($proceed == \"1\") {\n                echo \"disabled='disabled'\";\n} ?>>Generate Config</button>\n        </form>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n    </div>\n<?php\n} elseif ($stage == \"6\") {\n?>\n    <div class=\"row\">\n        <div class=\"col-md-offset-3 col-md-6\">\n            <div class=\"alert alert-danger\">You haven't quite finished yet - please go back to the install docs and carry on the necessary steps to finish the setup!</div>\n        </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"alert alert-success\">Thank you for setting up LibreNMS.<br />\n        It would be great if you would consider contributing to our statistics, you can do this on the <a href=\"about/\">/about/</a> page and check the box under Statistics.<br />\n        You can now click <a href=\"/\">here to login to your new install.</a></div>\n      </div>\n      <div class=\"col-md-3\">\n      </div>\n<?php\n}\n?>\n\n  </div>\n</body>\n</html>\n", "<?php\n\n/*\n * dbFacile - A Database API that should have existed from the start\n * Version 0.4.3\n *\n * This code is covered by the MIT license http://en.wikipedia.org/wiki/MIT_License\n *\n * By Alan Szlosek from http://www.greaterscope.net/projects/dbFacile\n *\n * The non-OO version of dbFacile. It's a bit simplistic, but gives you the\n * really useful bits in non-class form.\n *\n * Usage\n * 1. Connect to MySQL as you normally would ... this code uses an existing connection\n * 2. Use dbFacile as you normally would, without the object context\n * 3. Oh, and dbFetchAll() is now dbFetchRows()\n */\n\nuse LibreNMS\\Exceptions\\DatabaseConnectException;\n\nfunction dbIsConnected()\n{\n    global $database_link;\n    if (empty($database_link)) {\n        return false;\n    }\n\n    return mysqli_ping($database_link);\n}\n\n/**\n * Connect to the database.\n * Will use global $config variables if they are not sent: db_host, db_user, db_pass, db_name, db_port, db_socket\n *\n * @param string $host\n * @param string $user\n * @param string $password\n * @param string $database\n * @param string $port\n * @param string $socket\n * @return mysqli\n * @throws DatabaseConnectException\n */\nfunction dbConnect($host = null, $user = '', $password = '', $database = '', $port = null, $socket = null)\n{\n    global $config, $database_link;\n\n    if (dbIsConnected()) {\n        return $database_link;\n    }\n\n    $host = empty($host) ? $config['db_host'] : $host;\n    $user = empty($user) ? $config['db_user'] : $user;\n    $password = empty($password) ? $config['db_pass'] : $password;\n    $database = empty($database) ? $config['db_name'] : $database;\n    $port = empty($port) ? $config['db_port'] : $port;\n    $socket = empty($socket) ? $config['db_socket'] : $socket;\n\n    $database_link = mysqli_connect('p:' . $host, $user, $password, null, $port, $socket);\n    mysqli_options($database_link, MYSQLI_OPT_LOCAL_INFILE, false);\n    if ($database_link === false) {\n        $error = mysqli_connect_error();\n        if ($error == 'No such file or directory') {\n            $error = 'Could not connect to ' . $host;\n        }\n        throw new DatabaseConnectException($error);\n    }\n\n    $database_db = mysqli_select_db($database_link, $config['db_name']);\n    if (!$database_db) {\n        $db_create_sql = \"CREATE DATABASE \" . $config['db_name'] . \" CHARACTER SET utf8 COLLATE utf8_unicode_ci\";\n        mysqli_query($database_link, $db_create_sql);\n        $database_db = mysqli_select_db($database_link, $database);\n    }\n\n    if (!$database_db) {\n        throw new DatabaseConnectException(\"Could not select database: $database. \" . mysqli_error($database_link));\n    }\n\n    dbQuery(\"SET NAMES 'utf8'\");\n    dbQuery(\"SET CHARACTER SET 'utf8'\");\n    dbQuery(\"SET COLLATION_CONNECTION = 'utf8_unicode_ci'\");\n\n    return $database_link;\n}\n\n/*\n * Performs a query using the given string.\n * Used by the other _query functions.\n * */\n\n\nfunction dbQuery($sql, $parameters = array())\n{\n    global $fullSql, $debug, $sql_debug, $database_link, $config;\n    $fullSql = dbMakeQuery($sql, $parameters);\n    if ($debug) {\n        if (php_sapi_name() == 'cli' && empty($_SERVER['REMOTE_ADDR'])) {\n            if (preg_match('/(INSERT INTO `alert_log`).*(details)/i', $fullSql)) {\n                echo \"\\nINSERT INTO `alert_log` entry masked due to binary data\\n\";\n            } else {\n                c_echo('SQL[%y'.$fullSql.\"%n] \\n\");\n            }\n        } else {\n            $sql_debug[] = $fullSql;\n        }\n    }\n\n    $result = mysqli_query($database_link, $fullSql);\n    if (!$result) {\n        $mysql_error = mysqli_error($database_link);\n        if (isset($config['mysql_log_level']) && ((in_array($config['mysql_log_level'], array('INFO', 'ERROR')) && !preg_match('/Duplicate entry/', $mysql_error)) || in_array($config['mysql_log_level'], array('DEBUG')))) {\n            if (!empty($mysql_error)) {\n                logfile(date($config['dateformat']['compact']) . \" MySQL Error: $mysql_error ($fullSql)\");\n            }\n        }\n    }\n\n    return $result;\n}//end dbQuery()\n\n\n/*\n * Passed an array and a table name, it attempts to insert the data into the table.\n * Check for boolean false to determine whether insert failed\n * */\n\n\nfunction dbInsert($data, $table)\n{\n    global $database_link;\n    $time_start = microtime(true);\n\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // insert into the TABLE this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n        // trigger_error('QDB - Parameters passed to insert() were in reverse order, but it has been allowed', E_USER_NOTICE);\n    }\n\n    $sql = 'INSERT INTO `'.$table.'` (`'.implode('`,`', array_keys($data)).'`)  VALUES ('.implode(',', dbPlaceHolders($data)).')';\n\n    dbBeginTransaction();\n    $result = dbQuery($sql, $data);\n    if ($result) {\n        $id = mysqli_insert_id($database_link);\n        dbCommitTransaction();\n        // return $id;\n    } else {\n        if ($table != 'Contact') {\n            trigger_error('QDB - Insert failed.', E_USER_WARNING);\n        }\n\n        dbRollbackTransaction();\n        $id = null;\n    }\n\n    recordDbStatistic('insert', $time_start);\n    return $id;\n}//end dbInsert()\n\n\n/*\n * Passed an array and a table name, it attempts to insert the data into the table.\n * $data is an array (rows) of key value pairs.  keys are fields.  Rows need to have same fields.\n * Check for boolean false to determine whether insert failed\n * */\n\n\nfunction dbBulkInsert($data, $table)\n{\n    $time_start = microtime(true);\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // insert into the TABLE this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n    }\n    if (count($data) === 0) {\n        return false;\n    }\n    if (count($data[0]) === 0) {\n        return false;\n    }\n\n    $sql = 'INSERT INTO `'.$table.'` (`'.implode('`,`', array_keys($data[0])).'`)  VALUES ';\n    $values ='';\n\n    foreach ($data as $row) {\n        if ($values != '') {\n            $values .= ',';\n        }\n        $rowvalues='';\n        foreach ($row as $key => $value) {\n            if ($rowvalues != '') {\n                $rowvalues .= ',';\n            }\n            $rowvalues .= \"'\".mres($value).\"'\";\n        }\n        $values .= \"(\".$rowvalues.\")\";\n    }\n\n    $result = dbQuery($sql.$values);\n\n    recordDbStatistic('insert', $time_start);\n    return $result;\n}//end dbBulkInsert()\n\n\n/*\n * Passed an array, table name, WHERE clause, and placeholder parameters, it attempts to update a record.\n * Returns the number of affected rows\n * */\n\n\nfunction dbUpdate($data, $table, $where = null, $parameters = array())\n{\n    global $fullSql, $database_link;\n    $time_start = microtime(true);\n\n    // the following block swaps the parameters if they were given in the wrong order.\n    // it allows the method to work for those that would rather it (or expect it to)\n    // follow closer with SQL convention:\n    // update the TABLE with this DATA\n    if (is_string($data) && is_array($table)) {\n        $tmp   = $data;\n        $data  = $table;\n        $table = $tmp;\n        // trigger_error('QDB - The first two parameters passed to update() were in reverse order, but it has been allowed', E_USER_NOTICE);\n    }\n\n    // need field name and placeholder value\n    // but how merge these field placeholders with actual $parameters array for the WHERE clause\n    $sql = 'UPDATE `'.$table.'` set ';\n    foreach ($data as $key => $value) {\n        $sql .= '`'.$key.'` '.'=:'.$key.',';\n    }\n\n    $sql = substr($sql, 0, -1);\n    // strip off last comma\n    if ($where) {\n        $sql .= ' WHERE '.$where;\n        $data = array_merge($data, $parameters);\n    }\n\n    if (dbQuery($sql, $data)) {\n        $return = mysqli_affected_rows($database_link);\n    } else {\n        // echo(\"$fullSql\");\n        trigger_error('QDB - Update failed.', E_USER_WARNING);\n        $return = false;\n    }\n\n    recordDbStatistic('update', $time_start);\n    return $return;\n}//end dbUpdate()\n\n\nfunction dbDelete($table, $where = null, $parameters = array())\n{\n    global $database_link;\n    $time_start = microtime(true);\n\n    $sql = 'DELETE FROM `'.$table.'`';\n    if ($where) {\n        $sql .= ' WHERE '.$where;\n    }\n\n    $result = dbQuery($sql, $parameters);\n\n    recordDbStatistic('delete', $time_start);\n    if ($result) {\n        return mysqli_affected_rows($database_link);\n    } else {\n        return false;\n    }\n}//end dbDelete()\n\n\n/*\n * Fetches all of the rows (associatively) from the last performed query.\n * Most other retrieval functions build off this\n * */\n\n\nfunction dbFetchRows($sql, $parameters = array(), $nocache = false)\n{\n    global $config;\n\n    if ($config['memcached']['enable'] && $nocache === false) {\n        $result = $config['memcached']['resource']->get(hash('sha512', $sql.'|'.serialize($parameters)));\n        if (!empty($result)) {\n            return $result;\n        }\n    }\n\n    $time_start = microtime(true);\n    $result         = dbQuery($sql, $parameters);\n\n    if (mysqli_num_rows($result) > 0) {\n        $rows = array();\n        while ($row = mysqli_fetch_assoc($result)) {\n            $rows[] = $row;\n        }\n\n        mysqli_free_result($result);\n        if ($config['memcached']['enable'] && $nocache === false) {\n            $config['memcached']['resource']->set(hash('sha512', $sql.'|'.serialize($parameters)), $rows, $config['memcached']['ttl']);\n        }\n        recordDbStatistic('fetchrows', $time_start);\n        return $rows;\n    }\n\n    mysqli_free_result($result);\n\n    // no records, thus return empty array\n    // which should evaluate to false, and will prevent foreach notices/warnings\n    recordDbStatistic('fetchrows', $time_start);\n    return array();\n}//end dbFetchRows()\n\n\n/*\n * This is intended to be the method used for large result sets.\n * It is intended to return an iterator, and act upon buffered data.\n * */\n\n\nfunction dbFetch($sql, $parameters = array(), $nocache = false)\n{\n    return dbFetchRows($sql, $parameters, $nocache);\n    /*\n        // for now, don't do the iterator thing\n        $result = dbQuery($sql, $parameters);\n        if($result) {\n        // return new iterator\n        return new dbIterator($result);\n        } else {\n        return null; // ??\n        }\n     */\n}//end dbFetch()\n\n\n/*\n * Like fetch(), accepts any number of arguments\n * The first argument is an sprintf-ready query stringTypes\n * */\n\n\nfunction dbFetchRow($sql = null, $parameters = array(), $nocache = false)\n{\n    global $config;\n\n    if (isset($config['memcached']['enable']) && $config['memcached']['enable'] && $nocache === false) {\n        $result = $config['memcached']['resource']->get(hash('sha512', $sql.'|'.serialize($parameters)));\n        if (!empty($result)) {\n            return $result;\n        }\n    }\n\n    $time_start = microtime(true);\n    $result         = dbQuery($sql, $parameters);\n    if ($result) {\n        $row = mysqli_fetch_assoc($result);\n        mysqli_free_result($result);\n\n        recordDbStatistic('fetchrow', $time_start);\n\n        if (isset($config['memcached']['enable']) && $config['memcached']['enable'] && $nocache === false) {\n            $config['memcached']['resource']->set(hash('sha512', $sql.'|'.serialize($parameters)), $row, $config['memcached']['ttl']);\n        }\n        return $row;\n    } else {\n        return null;\n    }\n}//end dbFetchRow()\n\n\n/*\n * Fetches the first call from the first row returned by the query\n * */\n\n\nfunction dbFetchCell($sql, $parameters = array(), $nocache = false)\n{\n    $time_start = microtime(true);\n    $row = dbFetchRow($sql, $parameters, $nocache);\n\n    recordDbStatistic('fetchcell', $time_start);\n    if ($row) {\n        return array_shift($row);\n        // shift first field off first row\n    }\n    return null;\n}//end dbFetchCell()\n\n\n/*\n * This method is quite different from fetchCell(), actually\n * It fetches one cell from each row and places all the values in 1 array\n * */\n\n\nfunction dbFetchColumn($sql, $parameters = array(), $nocache = false)\n{\n    $time_start = microtime(true);\n    $cells          = array();\n    foreach (dbFetch($sql, $parameters, $nocache) as $row) {\n        $cells[] = array_shift($row);\n    }\n\n    recordDbStatistic('fetchcolumn', $time_start);\n    return $cells;\n}//end dbFetchColumn()\n\n\n/*\n * Should be passed a query that fetches two fields\n * The first will become the array key\n * The second the key's value\n */\n\n\nfunction dbFetchKeyValue($sql, $parameters = array(), $nocache = false)\n{\n    $data = array();\n    foreach (dbFetch($sql, $parameters, $nocache) as $row) {\n        $key = array_shift($row);\n        if (sizeof($row) == 1) {\n            // if there were only 2 fields in the result\n            // use the second for the value\n            $data[$key] = array_shift($row);\n        } else {\n            // if more than 2 fields were fetched\n            // use the array of the rest as the value\n            $data[$key] = $row;\n        }\n    }\n\n    return $data;\n}//end dbFetchKeyValue()\n\n\n/*\n * This combines a query and parameter array into a final query string for execution\n * PDO drivers don't need to use this\n */\n\n\nfunction dbMakeQuery($sql, $parameters)\n{\n    // bypass extra logic if we have no parameters\n    if (sizeof($parameters) == 0) {\n        return $sql;\n    }\n\n    $parameters = dbPrepareData($parameters);\n    // separate the two types of parameters for easier handling\n    $questionParams = array();\n    $namedParams    = array();\n    foreach ($parameters as $key => $value) {\n        if (is_numeric($key)) {\n            $questionParams[] = $value;\n        } else {\n            $namedParams[':'.$key] = $value;\n        }\n    }\n\n    // sort namedParams in reverse to stop substring squashing\n    krsort($namedParams);\n\n    // split on question-mark and named placeholders\n    if (preg_match('/(\\[\\[:[\\w]+:\\]\\])/', $sql)) {\n        $result = preg_split('/(\\?[a-zA-Z0-9_-]*)/', $sql, -1, (PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE));\n    } else {\n        $result = preg_split('/(\\?|:[a-zA-Z0-9_-]+)/', $sql, -1, (PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE));\n    }\n\n    // every-other item in $result will be the placeholder that was found\n    $query            = '';\n    $res_size = sizeof($result);\n    for ($i = 0; $i < $res_size; $i += 2) {\n        $query .= $result[$i];\n\n        $j = ($i + 1);\n        if (array_key_exists($j, $result)) {\n            $test = $result[$j];\n            if ($test == '?') {\n                $query .= array_shift($questionParams);\n            } else {\n                $query .= $namedParams[$test];\n            }\n        }\n    }\n\n    return $query;\n}//end dbMakeQuery()\n\n\nfunction dbPrepareData($data)\n{\n    global $database_link;\n    $values = array();\n\n    foreach ($data as $key => $value) {\n        $escape = true;\n        // don't quote or esc if value is an array, we treat it\n        // as a \"decorator\" that tells us not to escape the\n        // value contained in the array\n        if (is_array($value) && !is_object($value)) {\n            $escape = false;\n            $value  = array_shift($value);\n        }\n\n        // it's not right to worry about invalid fields in this method because we may be operating on fields\n        // that are aliases, or part of other tables through joins\n        // if(!in_array($key, $columns)) // skip invalid fields\n        // continue;\n        if ($escape) {\n            $values[$key] = \"'\".mysqli_real_escape_string($database_link, $value).\"'\";\n        } else {\n            $values[$key] = $value;\n        }\n    }\n\n    return $values;\n}//end dbPrepareData()\n\n/**\n * Given a data array, this returns an array of placeholders\n * These may be question marks, or \":email\" type\n *\n * @param array $values\n * @return array\n */\nfunction dbPlaceHolders($values)\n{\n    $data = array();\n    foreach ($values as $key => $value) {\n        if (is_numeric($key)) {\n            $data[] = '?';\n        } else {\n            $data[] = ':'.$key;\n        }\n    }\n\n    return $data;\n}//end dbPlaceHolders()\n\n\nfunction dbBeginTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'begin');\n}//end dbBeginTransaction()\n\n\nfunction dbCommitTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'commit');\n}//end dbCommitTransaction()\n\n\nfunction dbRollbackTransaction()\n{\n    global $database_link;\n    mysqli_query($database_link, 'rollback');\n}//end dbRollbackTransaction()\n\n/**\n * Generate a string of placeholders to pass to fill in a list\n * result will look like this: (?, ?, ?, ?)\n *\n * @param $count\n * @return string placholder list\n */\nfunction dbGenPlaceholders($count)\n{\n    return '(' . implode(',', array_fill(0, $count, '?')) . ')';\n}\n"], "filenames": ["html/install.php", "includes/dbFacile.php"], "buggy_code_start_loc": [5, 60], "buggy_code_end_loc": [56, 60], "fixing_code_start_loc": [5, 61], "fixing_code_end_loc": [58, 62], "type": "CWE-22", "message": "The installation process in LibreNMS before 2017-08-18 allows remote attackers to read arbitrary files, related to html/install.php.", "other": {"cve": {"id": "CVE-2017-16759", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-09T22:29:00.257", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The installation process in LibreNMS before 2017-08-18 allows remote attackers to read arbitrary files, related to html/install.php."}, {"lang": "es", "value": "El proceso de instalaci\u00f3n en LibreNMS, en versiones anteriores a 2017-08-18, permite que atacantes remotos lean archivos arbitrarios. Esto est\u00e1 relacionado con html/install.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.30", "matchCriteriaId": "77691BD8-54D4-4323-B5A8-CAAAFB90F923"}]}]}], "references": [{"url": "https://blog.librenms.org/2017/08/22/librenms-security-fix-during-the-installation-process/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/commit/7887b2e1c7158204ac69ca43beafce66e4d3a3b4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/commit/d3094fa6578b29dc34fb5a7d0bd6deab49ecc911", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/pull/7184", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/7887b2e1c7158204ac69ca43beafce66e4d3a3b4"}}