{"buggy_code": ["import org.bigbluebutton.build._\n\nversion := \"0.0.3-SNAPSHOT\"\n\nval compileSettings = Seq(\n  organization := \"org.bigbluebutton\",\n\n  scalacOptions ++= List(\n    \"-unchecked\",\n    \"-deprecation\",\n    \"-Xlint\",\n    \"-Ywarn-dead-code\",\n    \"-language:_\",\n    \"-target:11\",\n    \"-encoding\", \"UTF-8\"\n  ),\n  javacOptions ++= List(\n    \"-Xlint:unchecked\",\n    \"-Xlint:deprecation\"\n  )\n)\n\n// We want to have our jar files in lib_managed dir.\n// This way we'll have the right path when we import\n// into eclipse.\nretrieveManaged := true\n\ntestOptions in Test += Tests.Argument(TestFrameworks.Specs2, \"html\", \"console\", \"junitxml\")\n\ntestOptions in Test += Tests.Argument(TestFrameworks.ScalaTest, \"-h\", \"target/scalatest-reports\")\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.0.8\" % \"test\"\nlibraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"2.0.0\"\n\nSeq(Revolver.settings: _*)\n\nlazy val commonWeb = (project in file(\".\")).settings(name := \"bbb-common-web\", libraryDependencies ++= Dependencies.runtime).settings(compileSettings)\n\n// See https://github.com/scala-ide/scalariform\n// Config file is in ./.scalariform.conf\nscalariformAutoformat := true\n\nscalaVersion := \"2.13.9\"\n//-----------\n// Packaging\n//\n// Reference:\n// http://xerial.org/blog/2014/03/24/sbt/\n// http://www.scala-sbt.org/sbt-pgp/usage.html\n// http://www.scala-sbt.org/0.13/docs/Using-Sonatype.html\n// http://central.sonatype.org/pages/requirements.html\n// http://central.sonatype.org/pages/releasing-the-deployment.html\n//-----------\n\n// Build pure Java lib (i.e. without scala)\n// Do not append Scala versions to the generated artifacts\ncrossPaths := false\n\n// This forbids including Scala related libraries into the dependency\nautoScalaLibrary := false\n\n/** *************************\n  * When developing, change the version above to x.x.x-SNAPSHOT then use the file resolver to\n  * publish to the local maven repo using \"sbt publish\"\n  */\n// Uncomment this to publish to local maven repo while commenting out the nexus repo\npublishTo := Some(Resolver.file(\"file\", new File(Path.userHome.absolutePath + \"/.m2/repository\")))\n\n\n// Comment this out when publishing to local maven repo using SNAPSHOT version.\n// To push to sonatype \"sbt publishSigned\"\n//publishTo := {\n//   val nexus = \"https://oss.sonatype.org/\"\n//   if (isSnapshot.value)\n//     Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")\n//   else\n//     Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")\n//}\n\n// Enables publishing to maven repo\npublishMavenStyle := true\n\npublishArtifact in Test := false\n\npomIncludeRepository := { _ => false }\n\npomExtra := (\n  <scm>\n    <url>git@github.com:bigbluebutton/bigbluebutton.git</url>\n    <connection>scm:git:git@github.com:bigbluebutton/bigbluebutton.git</connection>\n  </scm>\n    <developers>\n      <developer>\n        <id>ritzalam</id>\n        <name>Richard Alam</name>\n        <url>http://www.bigbluebutton.org</url>\n      </developer>\n    </developers>)\n\nlicenses := Seq(\"LGPL-3.0\" -> url(\"http://opensource.org/licenses/LGPL-3.0\"))\n\nhomepage := Some(url(\"http://www.bigbluebutton.org\"))\n\nlibraryDependencies ++= Seq(\n  \"javax.validation\" % \"validation-api\" % \"2.0.1.Final\",\n  \"org.springframework.boot\" % \"spring-boot-starter-validation\" % \"2.7.12\",\n  \"org.springframework.data\" % \"spring-data-commons\" % \"2.7.6\",\n  \"org.apache.httpcomponents\" % \"httpclient\" % \"4.5.13\",\n)\n", "package org.bigbluebutton.presentation;\r\n\r\nimport java.io.File;\r\nimport java.io.FilenameFilter;\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.ScheduledFuture;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.FilenameUtils;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.HttpStatus;\r\nimport org.apache.http.client.ClientProtocolException;\r\nimport org.apache.http.entity.ContentType;\r\nimport org.apache.http.impl.nio.client.CloseableHttpAsyncClient;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClients;\r\nimport org.apache.http.nio.client.methods.HttpAsyncMethods;\r\nimport org.apache.http.nio.client.methods.ZeroCopyConsumer;\r\nimport org.bigbluebutton.api.Util;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class PresentationUrlDownloadService {\r\n    private static Logger log = LoggerFactory\r\n            .getLogger(PresentationUrlDownloadService.class);\r\n\r\n    private static final int MAX_REDIRECTS = 5;\r\n    private PageExtractor pageExtractor;\r\n    private DocumentConversionService documentConversionService;\r\n    private String presentationBaseURL;\r\n    private String presentationDir;\r\n    private String BLANK_PRESENTATION;\r\n\r\n    private ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);\r\n\r\n    public void stop() {\r\n        scheduledThreadPool.shutdownNow();\r\n    }\r\n\r\n    public void processUploadedPresentation(final UploadedPresentation uploadedPres) {\r\n        /**\r\n         * We delay processing of the presentation to make sure that the meeting has already been created.\r\n         * Otherwise, the meeting won't get the conversion events.\r\n         */\r\n        ScheduledFuture scheduledFuture =\r\n                scheduledThreadPool.schedule(new Runnable() {\r\n                    public void run() {\r\n                        documentConversionService.processDocument(uploadedPres);\r\n                    }\r\n                }, 5, TimeUnit.SECONDS);\r\n\r\n    }\r\n\r\n    public void processUploadedFile(String podId, String meetingId, String presId,\r\n                                    String filename, File presFile, Boolean current, String authzToken,\r\n                                    Boolean uploadFailed, ArrayList<String> uploadFailReasons) {\r\n        // TODO add podId\r\n        UploadedPresentation uploadedPres = new UploadedPresentation(\r\n          podId,\r\n          meetingId,\r\n          presId,\r\n          filename,\r\n          presentationBaseURL,\r\n          current,\r\n          authzToken,\r\n          uploadFailed,\r\n          uploadFailReasons);\r\n        uploadedPres.setUploadedFile(presFile);\r\n        processUploadedPresentation(uploadedPres);\r\n    }\r\n\r\n    public void extractPresentationPage(final String sourceMeetingId, final String presentationId,\r\n                                        final Integer presentationSlide, final String destinationMeetingId)  {\r\n        /**\r\n         * We delay processing of the presentation to make sure that the meeting has already been created.\r\n         * Otherwise, the meeting won't get the conversion events.\r\n         */\r\n        ScheduledFuture scheduledFuture =\r\n                scheduledThreadPool.schedule(new Runnable() {\r\n                    public void run() {\r\n                        extractPage(sourceMeetingId, presentationId, presentationSlide, destinationMeetingId) ;\r\n                    }\r\n                }, 5, TimeUnit.SECONDS);\r\n    }\r\n\r\n    private void extractPage(final String sourceMeetingId, final String presentationId,\r\n                             final Integer presentationSlide, final String destinationMeetingId) {\r\n\r\n        Boolean uploadFailed = false;\r\n        ArrayList<String> uploadFailedReasons = new ArrayList<String>();\r\n\r\n        // Build the source meeting path\r\n        File sourceMeetingPath = new File(presentationDir + File.separatorChar\r\n                + sourceMeetingId + File.separatorChar + sourceMeetingId\r\n                + File.separatorChar + presentationId);\r\n\r\n        // Find the source meeting presentation file\r\n        final String presentationFilter = presentationId;\r\n        FilenameFilter pdfFilter = new FilenameFilter() {\r\n            public boolean accept(File dir, String name) {\r\n                return name.startsWith(presentationFilter)\r\n                        && name.toLowerCase().endsWith(\"pdf\");\r\n            }\r\n        };\r\n\r\n        File[] matches = sourceMeetingPath.listFiles(pdfFilter);\r\n        if (matches != null && matches.length != 1) {\r\n            // No PDF presentation was found, we look for an image presentation\r\n            FilenameFilter imgFlter = new FilenameFilter() {\r\n                public boolean accept(File dir, String name) {\r\n                    return name.startsWith(presentationFilter);\r\n                }\r\n            };\r\n\r\n            matches = sourceMeetingPath.listFiles(imgFlter);\r\n        }\r\n        File sourcePresentationFile;\r\n        if (matches == null || matches.length != 1) {\r\n            log.warn(\r\n                    \"Not matching PDF file with prefix {} found at {}. Using the default blank PDF\",\r\n                    sourceMeetingId, sourceMeetingPath);\r\n            sourcePresentationFile = new File(BLANK_PRESENTATION);\r\n        } else {\r\n            sourcePresentationFile = matches[0];\r\n        }\r\n\r\n        // Build the target meeting path\r\n        String filenameExt = FilenameUtils.getExtension(sourcePresentationFile.getName());\r\n        String presId = Util.generatePresentationId(presentationId);\r\n        String newFilename = Util.createNewFilename(presId, filenameExt);\r\n\r\n        File uploadDir = Util.createPresentationDir(destinationMeetingId,\r\n                presentationDir, presId);\r\n        String newFilePath = uploadDir.getAbsolutePath() + File.separatorChar\r\n                + newFilename;\r\n        File newPresentation = new File(newFilePath);\r\n\r\n        if (sourcePresentationFile.getName().toLowerCase().endsWith(\"pdf\")) {\r\n            pageExtractor.extractPage(sourcePresentationFile, new File(\r\n                    newFilePath), presentationSlide);\r\n        } else {\r\n            try {\r\n                FileUtils.copyFile(sourcePresentationFile, newPresentation);\r\n            } catch (IOException e) {\r\n                log.error(\"Could not copy presentation {} to {}\", sourcePresentationFile.getAbsolutePath(),\r\n                        newPresentation.getAbsolutePath(), e);\r\n            }\r\n        }\r\n\r\n        // Hardcode pre-uploaded presentation for breakout room to the default presentation window\r\n        processUploadedFile(\"DEFAULT_PRESENTATION_POD\",\r\n          destinationMeetingId,\r\n          presId,\r\n          \"default-\" + presentationSlide.toString() + \".\" + filenameExt,\r\n          newPresentation,\r\n          true,\r\n          \"breakout-authz-token\",\r\n          uploadFailed,\r\n          uploadFailedReasons);\r\n    }\r\n\r\n    private String followRedirect(String meetingId, String redirectUrl,\r\n            int redirectCount, String origUrl) {\r\n\r\n        if (redirectCount > MAX_REDIRECTS) {\r\n            log.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\r\n                    meetingId, origUrl);\r\n            return null;\r\n        }\r\n\r\n        URL presUrl;\r\n        try {\r\n            presUrl = new URL(redirectUrl);\r\n        } catch (MalformedURLException e) {\r\n            log.error(\"Malformed url=[{}] for meeting=[{}]\", redirectUrl, meetingId, e);\r\n            return null;\r\n        }\r\n\r\n        HttpURLConnection conn;\r\n        try {\r\n            conn = (HttpURLConnection) presUrl.openConnection();\r\n            conn.setReadTimeout(60000);\r\n            conn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\r\n            conn.addRequestProperty(\"User-Agent\", \"Mozilla\");\r\n\r\n            // normally, 3xx is redirect\r\n            int status = conn.getResponseCode();\r\n            if (status != HttpURLConnection.HTTP_OK) {\r\n                if (status == HttpURLConnection.HTTP_MOVED_TEMP\r\n                        || status == HttpURLConnection.HTTP_MOVED_PERM\r\n                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\r\n                    String newUrl = conn.getHeaderField(\"Location\");\r\n                    return followRedirect(meetingId, newUrl, redirectCount + 1,\r\n                            origUrl);\r\n                } else {\r\n                    log.error(\r\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\r\n                            status, redirectUrl, meetingId);\r\n                    return null;\r\n                }\r\n            } else {\r\n                return redirectUrl;\r\n            }\r\n        } catch (IOException e) {\r\n            log.error(\"IOException for url=[{}] with meeting[{}]\", redirectUrl, meetingId, e);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public boolean savePresentation(final String meetingId,\r\n            final String filename, final String urlString) {\r\n\r\n        String finalUrl = followRedirect(meetingId, urlString, 0, urlString);\r\n\r\n        if (finalUrl == null) return false;\r\n\r\n        boolean success = false;\r\n\r\n        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\r\n        try {\r\n            httpclient.start();\r\n            File download = new File(filename);\r\n            ZeroCopyConsumer<File> consumer = new ZeroCopyConsumer<File>(download) {\r\n                @Override\r\n                protected File process(\r\n                        final HttpResponse response,\r\n                        final File file,\r\n                        final ContentType contentType) throws Exception {\r\n                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\r\n                        throw new ClientProtocolException(\"Upload failed: \" + response.getStatusLine());\r\n                    }\r\n                    return file;\r\n                }\r\n\r\n            };\r\n            Future<File> future = httpclient.execute(HttpAsyncMethods.createGet(finalUrl), consumer, null);\r\n            File result = future.get();\r\n            success = result.exists();\r\n        } catch (java.lang.InterruptedException ex) {\r\n            log.error(\"InterruptedException while saving presentation\", meetingId, ex);\r\n        } catch (java.util.concurrent.ExecutionException ex) {\r\n            log.error(\"ExecutionException while saving presentation\", meetingId, ex);\r\n        } catch (java.io.FileNotFoundException ex) {\r\n            log.error(\"FileNotFoundException while saving presentation\", meetingId, ex);\r\n        } finally {\r\n            try {\r\n                httpclient.close();\r\n            } catch (java.io.IOException ex) {\r\n                log.error(\"IOException while saving presentation\", meetingId, ex);\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    public void setPageExtractor(PageExtractor extractor) {\r\n        this.pageExtractor = extractor;\r\n    }\r\n\r\n    public void setPresentationDir(String presDir) {\r\n        presentationDir = presDir;\r\n    }\r\n\r\n    public void setPresentationBaseURL(String presentationBaseUrl) {\r\n        presentationBaseURL = presentationBaseUrl;\r\n    }\r\n\r\n    public void setDocumentConversionService(\r\n            DocumentConversionService documentConversionService) {\r\n        this.documentConversionService = documentConversionService;\r\n    }\r\n\r\n    public void setBlankPresentation(String blankPresentation) {\r\n        this.BLANK_PRESENTATION = blankPresentation;\r\n    }\r\n\r\n}\r\n", "package org.bigbluebutton.web.services.callback;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.*;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.nio.client.CloseableHttpAsyncClient;\nimport org.apache.http.impl.nio.client.HttpAsyncClients;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.Gson;\n\npublic class CallbackUrlService {\n\tprivate static Logger log = LoggerFactory.getLogger(CallbackUrlService.class);\n\n\tprivate BlockingQueue<DelayCallback> receivedMessages = new DelayQueue<DelayCallback>();\n\n\tprivate volatile boolean processMessage = false;\n\tprivate static final int MAX_REDIRECTS = 5;\n\n\tprivate final Executor msgProcessorExec = Executors.newSingleThreadExecutor();\n\tprivate final Executor runExec = Executors.newSingleThreadExecutor();\n\n\tpublic void stop() {\n\t\tlog.info(\"Stopping callback url service.\");\n\t\tprocessMessage = false;\n\t}\n\n\tpublic void start() {\n\t\tlog.info(\"Starting callback url service.\");\n\n\t\ttry {\n\t\t\tprocessMessage = true;\n\n\t\t\tRunnable messageProcessor = new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile (processMessage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tDelayCallback msg = receivedMessages.take();\n\t\t\t\t\t\t\tprocessMessage(msg);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tlog.warn(\"Error while taking received message from queue.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tmsgProcessorExec.execute(messageProcessor);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error subscribing to channels: {}\", e);\n\t\t}\n\t}\n\n\n\tprivate void processMessage(final DelayCallback msg) {\n\t\tRunnable task = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\t\t\tif (fetchCallbackUrl(msg.callbackEvent.getCallbackUrl())) {\n\t\t\t\t\tMap<String, Object> logData = new HashMap<>();\n\t\t\t\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\t\t\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\t\t\t\tlogData.put(\"name\",event.name);\n\t\t\t\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\t\t\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\t\t\t\tlogData.put(\"logCode\", \"callback_success\");\n\t\t\t\t\tlogData.put(\"description\", \"Callback successful.\");\n\n\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\tString logStr = gson.toJson(logData);\n\n\t\t\t\t\tlog.info(\" --analytics-- data={}\", logStr);\n\t\t\t\t} else {\n\t\t\t\t\tschedRetryCallback(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trunExec.execute(task);\n\t}\n\n\tprivate void schedCallback(final DelayCallback msg, long delayInMillis, int numAttempt) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\tMap<String, Object> logData = new HashMap<>();\n\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\tlogData.put(\"name\",event.name);\n\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\tlogData.put(\"retryInMs\", delayInMillis);\n\t\tlogData.put(\"logCode\", \"callback_failed_retry\");\n\t\tlogData.put(\"description\", \"Callback failed but retrying.\");\n\n\t\tGson gson = new Gson();\n\t\tString logStr = gson.toJson(logData);\n\n\t\tlog.info(\" --analytics-- data={}\", logStr);\n\n\t\tDelayCallback dc = new DelayCallback(event, delayInMillis, numAttempt);\n\t\treceivedMessages.add(dc);\n\t}\n\n\tprivate void giveupCallback(final DelayCallback msg) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\tMap<String, Object> logData = new HashMap<>();\n\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\tlogData.put(\"name\",event.name);\n\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\tlogData.put(\"logCode\", \"callback_failed_give_up\");\n\t\tlogData.put(\"description\", \"Callback failed and giving up.\");\n\n\t\tGson gson = new Gson();\n\t\tString logStr = gson.toJson(logData);\n\n\t\tlog.info(\" --analytics-- data={}\", logStr);\n\t}\n\tprivate void schedRetryCallback(final DelayCallback msg) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\n\t\tswitch (msg.numAttempts) {\n\t\t\tcase 1:\n\t\t\t\tschedCallback(msg, 30_000 /** 30sec **/, 2);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tschedCallback(msg, 60_000 /** 1min **/, 3);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tschedCallback(msg, 120_000 /** 2min **/, 4);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tschedCallback(msg, 300_000 /** 5min **/, 5);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tgiveupCallback(msg);\n\t\t\t}\n\t}\n\n\tpublic void handleMessage(ICallbackEvent message) {\n\t\tlong delayInMillis = -1000 /**Send right away **/;\n\t\tint numAttempt = 1;\n\t\tDelayCallback dc = new DelayCallback(message, delayInMillis, numAttempt);\n\t\treceivedMessages.add(dc);\n\t}\n\n\tprivate String followRedirect(String redirectUrl, int redirectCount, String origUrl) {\n\n\t\tif (redirectCount > MAX_REDIRECTS) {\n\t\t\tlog.error(\"Max redirect reached for callback url=[{}]\", origUrl);\n\t\t\treturn null;\n\t\t}\n\n\t\tURL presUrl;\n\t\ttry {\n\t\t\tpresUrl = new URL(redirectUrl);\n\t\t} catch (MalformedURLException e) {\n\t\t\tlog.error(\"Malformed callback url=[{}]\", redirectUrl);\n\t\t\treturn null;\n\t\t}\n\n\t\tHttpURLConnection conn;\n\t\ttry {\n\t\t\tconn = (HttpURLConnection) presUrl.openConnection();\n\t\t\tconn.setReadTimeout(5000);\n\t\t\tconn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n\t\t\tconn.addRequestProperty(\"User-Agent\", \"Mozilla\");\n\n\t\t\t// normally, 3xx is redirect\n\t\t\tint status = conn.getResponseCode();\n\t\t\tif (status != HttpURLConnection.HTTP_OK) {\n\t\t\t\tif (status == HttpURLConnection.HTTP_MOVED_TEMP\n\t\t\t\t\t\t\t\t|| status == HttpURLConnection.HTTP_MOVED_PERM\n\t\t\t\t\t\t\t\t|| status == HttpURLConnection.HTTP_SEE_OTHER) {\n\t\t\t\t\tString newUrl = conn.getHeaderField(\"Location\");\n\t\t\t\t\treturn followRedirect(newUrl, redirectCount + 1, origUrl);\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"Invalid HTTP response=[{}] for callback url=[{}]\", status, redirectUrl);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn redirectUrl;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"IOException for callback url=[{}]\", redirectUrl);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate boolean fetchCallbackUrl(final String callbackUrl) {\n\t\t// Do not handle redirects as we must expect that the passed\n\t\t// in callback url on meeting create must be working.\n\t\t//String finalUrl = followRedirect(callbackUrl, 0, callbackUrl);\n\t\t//log.info(\"Calling callback url {}\", finalUrl);\n\t\t//if (finalUrl == null) return false;\n\n\t\tboolean success = false;\n\n\t\tCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\n\t\ttry {\n\t\t\thttpclient.start();\n\n\t\t\tHttpGet request = new HttpGet(callbackUrl);\n\n\t\t\tFuture<HttpResponse> future = httpclient.execute(request, null);\n\t\t\tHttpResponse response = future.get();\n\t\t\t// Consider 2xx response code as success.\n\t\t\tsuccess = (response.getStatusLine().getStatusCode() >= 200 && response.getStatusLine().getStatusCode() < 300);\n\t\t} catch (java.lang.InterruptedException ex) {\n\t\t\tlog.error(\"Interrupted exception while calling url {}\", callbackUrl);\n\t\t} catch (java.util.concurrent.ExecutionException ex) {\n\t\t\tlog.error(\"ExecutionException exception while calling url {}\", callbackUrl);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\thttpclient.close();\n\t\t\t} catch (java.io.IOException ex) {\n\t\t\t\tlog.error(\"IOException exception while closing http client for url {}\", callbackUrl);\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}\n}\n", "#\n# BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\n#\n# Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\n#\n# This program is free software; you can redistribute it and/or modify it under the\n# terms of the GNU Lesser General Public License as published by the Free Software\n# Foundation; either version 3.0 of the License, or (at your option) any later\n# version.\n#\n# BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License along\n# with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\n#\n\n#\n# These are the default properites for BigBlueButton Web application\n\n# Default loglevel.\nappLogLevel=DEBUG\n\n#----------------------------------------------------\n# Directory where BigBlueButton stores uploaded slides\npresentationDir=/var/bigbluebutton\n\n#----------------------------------------------------\n# Directory where SWFTOOLS (pdf2swf, jpeg2swf, png2swf) are located\nswfToolsDir=/usr/bin\n\n#----------------------------------------------------\n# Directory where ImageMagick's convert executable is located\nimageMagickDir=/usr/bin\n\n#----------------------------------------------------\n# Fonts directory passed into PDF2SWF to support highlighting of texts\n# in the SWF slides.\nfontsDir=/usr/share/fonts\n\n#----------------------------------------------------\n# Executable for presentation checker\npresCheckExec=/usr/share/prescheck/prescheck.sh\n\n#----------------------------------------------------\n# Skip Office doc conversion pre-check. Attempt to convert\n# Office doc to PDF right away.\nskipOfficePrecheck=true\n\n#----------------------------------------------------\n# Executable for presentation office conversion\npresOfficeConversionExec=/usr/share/bbb-libreoffice-conversion/convert.sh\n\n#----------------------------------------------------\n# These will be copied in cases where the conversion process\n# fails to generate a slide from the uploaded presentation\nBLANK_SLIDE=/usr/share/bigbluebutton/blank/blank-slide.swf\nBLANK_PRESENTATION=/usr/share/bigbluebutton/blank/blank-presentation.pdf\nBLANK_THUMBNAIL=/usr/share/bigbluebutton/blank/blank-thumb.png\nBLANK_PNG=/usr/share/bigbluebutton/blank/blank-png.png\nBLANK_SVG=/usr/share/bigbluebutton/blank/blank-svg.svg\n\n#----------------------------------------------------\n# Number of minutes the conversion should take. If it takes\n# more than this time, cancel the conversion process.\nmaxConversionTime=5\n\n#----------------------------------------------------\n# Maximum number of pages allowed for an uploaded presentation (default 100).\nmaxNumPages=200\n\n#----------------------------------------------------\n# Maximum file size for an uploaded presentation (default 30MB).\nmaxFileSizeUpload=30000000\n\n#----------------------------------------------------\n# Maximum swf file size for load to the client (default 500000).\nMAX_SWF_FILE_SIZE=500000\n\n#----------------------------------------------------\n# Maximum allowed number of place object tags in the converted SWF, if exceeded the conversion will fallback to full BMP (default 800)\nplacementsThreshold=800\n\n# Maximum allowed number of bitmap images in the converted SWF, if exceeded the conversion will fallback to full BMP (default 800)\nimageTagThreshold=800\n\n# Maximum allowed number of define text tags in the converted SWF, if exceeded the conversion will fallback to full BMP (default 200)\ndefineTextThreshold=2000\n\n#------------------------------------\n# Number of threads in the pool to do the presentation conversion.\n#------------------------------------\nnumConversionThreads=5\n\n#------------------------------------\n# Number of threads to process file uploads\n#------------------------------------\nnumFileProcessorThreads=2\n\n#------------------------------------\n# Timeout(secs) to wait for pdf to svg conversion (timeout for each tool called during the process)\n#------------------------------------\nsvgConversionTimeout=60\n\n#------------------------------------\n# pdfFonts is used to detect whether PDF contains text with font Type 3\n# it is also used to check if the pdf has some problem to be opened (timeout) and abort the conversion if so\n# Configuration for pdfFonts Timeout(secs) and Max number of attempts\n#------------------------------------\npdfFontsTimeout=3\nmaxNumberOfAttemptsForPdfFonts=3\n\n#------------------------------------\n# Presentation resolution, in PPI (will be set to generated svg)\n#------------------------------------\nsvgPresentationResolutionPpi=300\n\n#------------------------------------\n# Force conversion of slides to PNG before converting to SVG\n## Experimental - this option might be removed in next releases\n## This will solve problems like reported in issue #8835\n## Disabled by default as it can affect the quality in zoom\n#------------------------------------\nforceRasterizeSlides=false\n\n#------------------------------------\n# Presentation will be resized to this width (in pixels) when rasterizing (converting to PNG)\n## Applied in these situations:\n##  a) the source can't be converted directly to SVG ;\n##  b) option \"forceRasterizeSlides\" is defined as true ;\n## To disable this constraint (and keep source resolution) define this property as 0.\n#------------------------------------\npngWidthRasterizedSlides=2048\n\n\n#------------------------------------\n# Timeout(secs) to wait for conversion script execution\n#------------------------------------\nofficeToPdfConversionTimeout=60\n\n#------------------------------------\n# Max concurrent of conversion script execution\n#------------------------------------\nofficeToPdfMaxConcurrentConversions=4\n\n#----------------------------------------------------\n# Conversion of the presentation slides to SWF to be\n# used in the Flash client\nswfSlidesRequired=false\n\n#----------------------------------------------------\n# Additional conversion of the presentation slides to SVG\n# to be used in the HTML5 client\nsvgImagesRequired=true\n\n#----------------------------------------------------\n# Additional conversion of the presentation slides to PNG\n# to be used in the IOS mobile client\ngeneratePngs=false\npngSlideWidth=1200\n\n# Default number of digits for voice conference users joining through the PSTN.\ndefaultNumDigitsForTelVoice=5\n\n#----------------------------------------------------\n# Configuration for large images, 2 MB by default, if bigger it will down-scaled\nmaxImageSize=2000000\n\n#----------------------------------------------------\n# Configuration for large PDF, 14 MB by default, if bigger it will be analysed during the conversion process\nbigPdfSize=14000000\n\n# The maximum allowed page size for PDF files exceeding the 'pdfCheckSize' value, 2 MB by default\nmaxBigPdfPageSize=2000000\n\n#----------------------------------------------------\n# Default dial access number\ndefaultDialAccessNumber=613-555-1234\n\n# Default Guest Policy\n# Valid values are ALWAYS_ACCEPT, ALWAYS_DENY, ASK_MODERATOR\n#\ndefaultGuestPolicy=ALWAYS_ACCEPT\n\n# Enables or disables authenticated guest\nauthenticatedGuest=true\n\n#---------------------------------------------------\n# Default Meeting Layout\n# Valid values are CUSTOM_LAYOUT, SMART_LAYOUT, PRESENTATION_FOCUS, VIDEO_FOCUS\ndefaultMeetingLayout=CUSTOM_LAYOUT\n\n#\n#----------------------------------------------------\n# Default welcome message to display when the participant joins the web\n# conference. This is only used for the old scheduling which will be\n# removed in the future. Use the API to create a conference.\n#\n# If the message contains characters not in ISO-8859-1 character sets\n# they must be properly escaped to unicode characters. An easy way to\n# do this is running the native2ascii command setting UTF8 encoding and\n# passing this file's path as input and output parameters, e.g.:\n#\n# native2ascii -encoding UTF8 bigbluebutton.properties bigbluebutton.properties\n#\ndefaultWelcomeMessage=Welcome to <b>%%CONFNAME%%</b>!<br><br>For help on using BigBlueButton see these (short) <a href=\"https://bigbluebutton.org/teachers/tutorials/\"><u>tutorial videos</u></a>.<br><br>To join the audio bridge click the speaker button.  Use a headset to avoid causing background noise for others.\ndefaultWelcomeMessageFooter=This server is running <a href=\"https://bigbluebutton.org/\" target=\"_blank\"><u>BigBlueButton</u></a>.\n\n# Default maximum number of users a meeting can have.\n# Current default is 0 (meeting doesn't have a user limit).\ndefaultMaxUsers=0\n\n# Default duration of the meeting in minutes.\n# Current default is 0 (meeting doesn't end).\ndefaultMeetingDuration=0\n\n# Number of minutes to logout client if user\n# isn't responsive\nclientLogoutTimerInMinutes=0\n\n# End meeting if no user joined within\n# a period of time after meeting created.\nmeetingExpireIfNoUserJoinedInMinutes=5\n\n# Number of minutes to end meeting when\n# the last user left.\nmeetingExpireWhenLastUserLeftInMinutes=1\n\n# User inactivity audit timer interval.\nuserInactivityInspectTimerInMinutes=0\n\n# Number of minutes to consider a user inactive.\n# iSend warning message to client to check if really inactive.\nuserInactivityThresholdInMinutes=30\n\n# Number of minutes for user to respond to inactivity\n# warning before being logged out.\nuserActivitySignResponseDelayInMinutes=5\n\n# Disable recording by default.\n#   true - don't record even if record param in the api call is set to record\n#   false - when record param is passed from api, override this default\ndisableRecordingDefault=false\n\n# Start recording when first user joins the meeting.\n# For backward compatibility with 0.81 where whole meeting\n# is recorded.\nautoStartRecording=false\n\n# Allow the user to start/stop recording.\nallowStartStopRecording=true\n\n# Number of minutes that Learning Dashboard will be available after the end of the meeting\n# if 0, the Learning Dashboard will keep available permanently\n# this is the default value, can be customized using the create API\nlearningDashboardCleanupDelayInMinutes=2\n\n# Allow webcams streaming reception only to and from moderators\nwebcamsOnlyForModerator=false\n\n# Per meeting camera share limit\n# if 0, there's no limit\nmeetingCameraCap=0\n\n\n# Per user camera share limit\n# if 0, there's no limit\nuserCameraCap=3\n\n# Mute the meeting on start\nmuteOnStart=false\n\n# Unmute users\n# Gives moderators permisson to unmute other users\nallowModsToUnmuteUsers=false\n\n# Eject user webcams\n# Gives moderators permisson to close other users' webcams\nallowModsToEjectCameras=false\n\n# Saves meeting events even if the meeting is not recorded\ndefaultKeepEvents=false\n\n# Timeout (millis) to remove a joined user after her/his left event without a rejoin\n# e.g. regular user left event\n# Default 60s\nusersTimeout=60000\n\n# Timeout (millis) to remove guest users that stopped fetching for her/his status\n# e.g. guest that closed the waiting page before being approved\n# Default 30s\nwaitingGuestUsersTimeout=30000\n\n# Timeout (millis) to remove users that called the enter API but did not join\n# e.g. user's client hanged between the enter call and join event\n# Default 45s\nenteredUsersTimeout=45000\n\n#----------------------------------------------------\n# This URL is where the BBB client is accessible. When a user sucessfully\n# enters a name and password, she is redirected here to load the client.\n# Do not commit changes to this field.\nbigbluebutton.web.serverURL=http://bigbluebutton.example.com\n\n#----------------------------------------------------\n# Assign URL where the logged-out participant will be redirected after sign-out.\n# If \"default\", it returns to bigbluebutton.web.serverURL\nbigbluebutton.web.logoutURL=default\n\n# The url of the BigBlueButton HTML5 client. Users will be redirected here when\n# successfully joining the meeting.\ndefaultHTML5ClientUrl=${bigbluebutton.web.serverURL}/html5client/join\n\nuseDefaultLogo=false\ndefaultLogoURL=${bigbluebutton.web.serverURL}/images/logo.png\n\n# Allow requests without JSESSIONID to be handled (default = false)\nallowRequestsWithoutSession=false\n\n# The url for where the guest will poll if approved to join or not.\ndefaultGuestWaitURL=${bigbluebutton.web.serverURL}/html5client/guestWait\n\n# The default avatar image to display.\nuseDefaultAvatar=false\ndefaultAvatarURL=${bigbluebutton.web.serverURL}/html5client/resources/images/avatar.png\n\napiVersion=2.0\n\n# Salt which is used by 3rd-party apps to authenticate api calls\nsecuritySalt=330a8b08c3b4c61533e1d0c5ce1ac88f\n\n# List of supported hash algorithms for validating checksums (comma-separated)\n# Available options: sha1, sha256, sha384, sha512\nsupportedChecksumAlgorithms=sha1,sha256,sha384,sha512\n\n\n# Directory where we drop the <meeting-id-recorded>.done file\nrecordStatusDir=/var/bigbluebutton/recording/status/recorded\n\nredisHost=127.0.0.1\nredisPort=6379\nredisPassword=\nredisKeyExpiry=1209600\n\n# The directory where the published/unpublised recordings are located. This is for\n# the get recording* api calls\npublishedDir=/var/bigbluebutton/published\nunpublishedDir=/var/bigbluebutton/unpublished\ncaptionsDir=/var/bigbluebutton/captions\n\n# The directory where the pre-built configs are stored\nconfigDir=/var/bigbluebutton/configs\n\n# The directory to export Json with Meeting activities (used in Learning Dashboard)\nlearningDashboardFilesDir=/var/bigbluebutton/learning-dashboard\n\n# If the API is enabled.\nserviceEnabled = true\n\n# Test voiceBridge number\ntestVoiceBridge=99999\ntestConferenceMock=conference-mock-default\n\n#------------------------------------------------------\n# These properties are used to test the conversion process.\n# Conference name folder in ${presentationDir} (see above)\nbeans.presentationService.testConferenceMock=${testConferenceMock}\n\n# Conference room folder in ${presentationDir}/${testConferenceMock}\nbeans.presentationService.testRoomMock=conference-mock-default\n# Uploaded presentation name\nbeans.presentationService.testPresentationName=appkonference\n# Uploaded presentation file\nbeans.presentationService.testUploadedPresentation=appkonference.txt\n# Default Uploaded presentation file\nbeans.presentationService.defaultUploadedPresentation=${bigbluebutton.web.serverURL}/default.pdf\n# Discard default presentation (default.pdf) when Pre-upload Slides are sent within the create call (default true)\nbeans.presentationService.preUploadedPresentationOverrideDefault=true\n\npresentationBaseURL=${bigbluebutton.web.serverURL}/bigbluebutton/presentation\n\n#----------------------------------------------------\n# The URL where the presentations will be loaded from.\n#----------------------------------------------------\nbeans.presentationService.presentationBaseUrl=${presentationBaseURL}\n#----------------------------------------------------\n# Inject values into grails service beans\nbeans.presentationService.presentationDir=${presentationDir}\n\n#----------------------------------------------------\n# Specify which IPs can do cross domain requests\naccessControlAllowOrigin=${bigbluebutton.web.serverURL}\n\n#----------------------------------------------------\n# The lapsus of seconds for polling the BBB Server in order to check if it's down.\n# After 5 tries if there isn't response, it will be declared down\ncheckBBBServerEvery=10\n\n# Default settings for breakout rooms\nbreakoutRoomsRecord=false\nbreakoutRoomsPrivateChatEnabled=true\n\n# Default Lock Settings\nlockSettingsDisableCam=false\nlockSettingsDisableMic=false\nlockSettingsDisablePrivateChat=false\nlockSettingsDisablePublicChat=false\nlockSettingsDisableNotes=false\nlockSettingsHideUserList=false\nlockSettingsLockedLayout=false\nlockSettingsLockOnJoin=true\nlockSettingsLockOnJoinConfigurable=false\nlockSettingsHideViewersCursor=false\n\nallowDuplicateExtUserid=true\n\ndefaultTextTrackUrl=${bigbluebutton.web.serverURL}/bigbluebutton\n\n# Param to end the meeting when there are no moderators after a certain period of time.\n# Needed for classes where teacher gets disconnected and can't get back in. Prevents\n# students from running amok.\nendWhenNoModerator=false\n\n# Number of minutes to wait for moderator rejoin before end meeting (if `endWhenNoModerator` enabled)\nendWhenNoModeratorDelayInMinutes=1\n\n# List of features to disable (comma-separated)\n# Available options: breakoutRooms, captions, chat, externalVideos, layouts, learningDashboard, polls, screenshare, sharedNotes, virtualBackgrounds\n# disabledFeatures=\n\n# Allow endpoint with current BigBlueButton version\nallowRevealOfBBBVersion=false\n\nlearningDashboardEnabled=true\nbreakoutRoomsEnabled=true\n\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!--\r\n\r\nBigBlueButton open source conferencing system - http://www.bigbluebutton.org/\r\n\r\nCopyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\r\n\r\nThis program is free software; you can redistribute it and/or modify it under the\r\nterms of the GNU Lesser General Public License as published by the Free Software\r\nFoundation; either version 3.0 of the License, or (at your option) any later\r\nversion.\r\n\r\nBigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\nPARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License along\r\nwith BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\r\n\r\n-->\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:util=\"http://www.springframework.org/schema/util\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n        http://www.springframework.org/schema/util\r\n        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\r\n\r\n    <bean id=\"validator\" class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\r\n\r\n    <bean id=\"characterEncodingFilter\" class=\"org.springframework.web.filter.CharacterEncodingFilter\">\r\n        <property name=\"encoding\">\r\n            <value>utf-8</value>\r\n        </property>\r\n    </bean>\r\n\r\n    <bean id=\"waitingGuestCleanupTimerTask\" class=\"org.bigbluebutton.web.services.WaitingGuestCleanupTimerTask\"/>\r\n    <bean id=\"userCleanupTimerTask\" class=\"org.bigbluebutton.web.services.UserCleanupTimerTask\"/>\r\n    <bean id=\"enteredUserCleanupTimerTask\" class=\"org.bigbluebutton.web.services.EnteredUserCleanupTimerTask\"/>\r\n\r\n    <bean id=\"keepAliveService\" class=\"org.bigbluebutton.web.services.KeepAliveService\"\r\n          init-method=\"start\" destroy-method=\"stop\">\r\n        <property name=\"runEvery\" value=\"${checkBBBServerEvery}\"/>\r\n        <property name=\"gw\" ref=\"bbbWebApiGWApp\"/>\r\n    </bean>\r\n\r\n    <bean id=\"meetingService\" class=\"org.bigbluebutton.api.MeetingService\" init-method=\"start\" destroy-method=\"stop\">\r\n        <property name=\"redisStorageService\" ref=\"redisStorageService\"/>\r\n        <property name=\"learningDashboardService\" ref=\"learningDashboardService\"/>\r\n        <property name=\"recordingService\" ref=\"recordingService\"/>\r\n        <property name=\"presDownloadService\" ref=\"presDownloadService\"/>\r\n        <property name=\"paramsProcessorUtil\" ref=\"paramsProcessorUtil\"/>\r\n        <property name=\"stunTurnService\" ref=\"stunTurnService\"/>\r\n        <property name=\"waitingGuestCleanupTimerTask\" ref=\"waitingGuestCleanupTimerTask\"/>\r\n        <property name=\"userCleanupTimerTask\" ref=\"userCleanupTimerTask\"/>\r\n        <property name=\"enteredUserCleanupTimerTask\" ref=\"enteredUserCleanupTimerTask\"/>\r\n        <property name=\"gw\" ref=\"bbbWebApiGWApp\"/>\r\n        <property name=\"callbackUrlService\" ref=\"callbackUrlService\"/>\r\n        <property name=\"usersTimeout\" value=\"${usersTimeout}\"/>\r\n        <property name=\"waitingGuestUsersTimeout\" value=\"${waitingGuestUsersTimeout}\"/>\r\n        <property name=\"enteredUsersTimeout\" value=\"${enteredUsersTimeout}\"/>\r\n        <property name=\"swfSlidesGenerationProgressNotifier\" ref=\"swfSlidesGenerationProgressNotifier\"/>\r\n    </bean>\r\n\r\n    <bean id=\"oldMessageReceivedGW\" class=\"org.bigbluebutton.api2.bus.OldMessageReceivedGW\">\r\n        <constructor-arg index=\"0\" ref=\"redisMessageHandler\"/>\r\n    </bean>\r\n\r\n    <bean id=\"callbackUrlService\" class=\"org.bigbluebutton.web.services.callback.CallbackUrlService\"\r\n          init-method=\"start\" destroy-method=\"stop\">\r\n    </bean>\r\n\r\n    <bean id=\"bbbWebApiGWApp\" class=\"org.bigbluebutton.api2.BbbWebApiGWApp\">\r\n        <constructor-arg index=\"0\" ref=\"oldMessageReceivedGW\"/>\r\n        <constructor-arg index=\"1\" value=\"${redisHost}\"/>\r\n        <constructor-arg index=\"2\" value=\"${redisPort}\"/>\r\n        <constructor-arg index=\"3\" value=\"${redisPassword}\"/>\r\n        <constructor-arg index=\"4\" value=\"${redisKeyExpiry}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"recordingServiceHelper\" class=\"org.bigbluebutton.api.util.RecordingMetadataReaderHelper\">\r\n        <property name=\"recordingServiceGW\" ref=\"recordingServiceGW\"/>\r\n    </bean>\r\n\r\n    <bean id=\"recordingServiceGW\" class=\"org.bigbluebutton.api2.util.RecMetaXmlHelper\">\r\n        <constructor-arg index=\"0\" ref=\"bbbWebApiGWApp\"/>\r\n    </bean>\r\n\r\n    <bean id=\"presDownloadService\" class=\"org.bigbluebutton.presentation.PresentationUrlDownloadService\"\r\n          destroy-method=\"stop\">\r\n        <property name=\"presentationDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"presentationBaseURL\" value=\"${presentationBaseURL}\"/>\r\n        <property name=\"pageExtractor\" ref=\"pageExtractor\"/>\r\n        <property name=\"documentConversionService\" ref=\"documentConversionService\"/>\r\n        <property name=\"blankPresentation\" value=\"${BLANK_PRESENTATION}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"recordingService\" class=\"org.bigbluebutton.api.RecordingService\">\r\n        <property name=\"recordingStatusDir\" value=\"${recordStatusDir}\"/>\r\n        <property name=\"publishedDir\" value=\"${publishedDir}\"/>\r\n        <property name=\"unpublishedDir\" value=\"${unpublishedDir}\"/>\r\n        <property name=\"captionsDir\" value=\"${captionsDir}\"/>\r\n        <property name=\"recordingServiceHelper\" ref=\"recordingServiceHelper\"/>\r\n        <property name=\"presentationBaseDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"defaultServerUrl\" value=\"${bigbluebutton.web.serverURL}\"/>\r\n        <property name=\"defaultTextTrackUrl\" value=\"${defaultTextTrackUrl}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"learningDashboardService\" class=\"org.bigbluebutton.api.LearningDashboardService\">\r\n        <property name=\"learningDashboardFilesDir\" value=\"${learningDashboardFilesDir}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"html5LoadBalancingService\" class=\"org.bigbluebutton.api.HTML5LoadBalancingService\" init-method=\"init\" />\r\n\r\n    <bean id=\"configServiceHelper\" class=\"org.bigbluebutton.api.ClientConfigServiceHelperImp\"/>\r\n\r\n    <bean id=\"configService\" class=\"org.bigbluebutton.api.ClientConfigService\" init-method=\"init\">\r\n        <property name=\"configDir\" value=\"${configDir}\"/>\r\n        <property name=\"clientConfigServiceHelper\" ref=\"configServiceHelper\"/>\r\n    </bean>\r\n\r\n    <bean id=\"validationService\" class=\"org.bigbluebutton.api.service.ValidationService\">\r\n        <property name=\"securitySalt\" value=\"${securitySalt}\"/>\r\n        <property name=\"supportedChecksumAlgorithms\" value=\"${supportedChecksumAlgorithms}\"/>\r\n        <property name=\"allowRequestsWithoutSession\" value=\"${allowRequestsWithoutSession}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"serviceUtils\" class=\"org.bigbluebutton.api.service.ServiceUtils\">\r\n        <property name=\"meetingService\" ref=\"meetingService\" />\r\n        <property name=\"validationService\" ref=\"validationService\" />\r\n    </bean>\r\n\r\n    <bean id=\"paramsProcessorUtil\" class=\"org.bigbluebutton.api.ParamsProcessorUtil\">\r\n        <property name=\"apiVersion\" value=\"${apiVersion}\"/>\r\n        <property name=\"serviceEnabled\" value=\"${serviceEnabled}\"/>\r\n        <property name=\"securitySalt\" value=\"${securitySalt}\"/>\r\n        <property name=\"supportedChecksumAlgorithms\" value=\"${supportedChecksumAlgorithms}\"/>\r\n        <property name=\"defaultMaxUsers\" value=\"${defaultMaxUsers}\"/>\r\n        <property name=\"defaultWelcomeMessage\" value=\"${defaultWelcomeMessage}\"/>\r\n        <property name=\"defaultWelcomeMessageFooter\" value=\"${defaultWelcomeMessageFooter}\"/>\r\n        <property name=\"defaultDialAccessNumber\" value=\"${defaultDialAccessNumber}\"/>\r\n        <property name=\"testVoiceBridge\" value=\"${testVoiceBridge}\"/>\r\n        <property name=\"testConferenceMock\" value=\"${testConferenceMock}\"/>\r\n        <property name=\"defaultLogoutUrl\" value=\"${bigbluebutton.web.logoutURL}\"/>\r\n        <property name=\"defaultServerUrl\" value=\"${bigbluebutton.web.serverURL}\"/>\r\n        <property name=\"defaultNumDigitsForTelVoice\" value=\"${defaultNumDigitsForTelVoice}\"/>\r\n        <property name=\"defaultHTML5ClientUrl\" value=\"${defaultHTML5ClientUrl}\"/>\r\n        <property name=\"useDefaultLogo\" value=\"${useDefaultLogo}\"/>\r\n        <property name=\"defaultLogoURL\" value=\"${defaultLogoURL}\"/>\r\n        <property name=\"defaultGuestWaitURL\" value=\"${defaultGuestWaitURL}\"/>\r\n        <property name=\"allowRequestsWithoutSession\" value=\"${allowRequestsWithoutSession}\"/>\r\n        <property name=\"defaultMeetingDuration\" value=\"${defaultMeetingDuration}\"/>\r\n        <property name=\"disableRecordingDefault\" value=\"${disableRecordingDefault}\"/>\r\n        <property name=\"autoStartRecording\" value=\"${autoStartRecording}\"/>\r\n        <property name=\"allowStartStopRecording\" value=\"${allowStartStopRecording}\"/>\r\n        <property name=\"learningDashboardEnabled\" value=\"${learningDashboardEnabled}\"/>\r\n        <property name=\"learningDashboardCleanupDelayInMinutes\" value=\"${learningDashboardCleanupDelayInMinutes}\"/>\r\n        <property name=\"webcamsOnlyForModerator\" value=\"${webcamsOnlyForModerator}\"/>\r\n        <property name=\"defaultMeetingCameraCap\" value=\"${meetingCameraCap}\"/>\r\n        <property name=\"defaultUserCameraCap\" value=\"${userCameraCap}\"/>\r\n        <property name=\"useDefaultAvatar\" value=\"${useDefaultAvatar}\"/>\r\n        <property name=\"defaultAvatarURL\" value=\"${defaultAvatarURL}\"/>\r\n        <property name=\"defaultGuestPolicy\" value=\"${defaultGuestPolicy}\"/>\r\n        <property name=\"authenticatedGuest\" value=\"${authenticatedGuest}\"/>\r\n        <property name=\"defaultMeetingLayout\" value=\"${defaultMeetingLayout}\"/>\r\n        <property name=\"meetingExpireIfNoUserJoinedInMinutes\" value=\"${meetingExpireIfNoUserJoinedInMinutes}\"/>\r\n        <property name=\"meetingExpireWhenLastUserLeftInMinutes\" value=\"${meetingExpireWhenLastUserLeftInMinutes}\"/>\r\n        <property name=\"userInactivityInspectTimerInMinutes\" value=\"${userInactivityInspectTimerInMinutes}\"/>\r\n        <property name=\"userInactivityThresholdInMinutes\" value=\"${userInactivityThresholdInMinutes}\"/>\r\n        <property name=\"userActivitySignResponseDelayInMinutes\" value=\"${userActivitySignResponseDelayInMinutes}\"/>\r\n        <property name=\"maxPresentationFileUpload\" value=\"${maxFileSizeUpload}\"/>\r\n        <property name=\"clientLogoutTimerInMinutes\" value=\"${clientLogoutTimerInMinutes}\"/>\r\n        <property name=\"muteOnStart\" value=\"${muteOnStart}\"/>\r\n        <property name=\"allowModsToUnmuteUsers\" value=\"${allowModsToUnmuteUsers}\"/>\r\n        <property name=\"allowModsToEjectCameras\" value=\"${allowModsToEjectCameras}\"/>\r\n        <property name=\"breakoutRoomsEnabled\" value=\"${breakoutRoomsEnabled}\"/>\r\n        <property name=\"breakoutRoomsRecord\" value=\"${breakoutRoomsRecord}\"/>\r\n        <property name=\"breakoutRoomsPrivateChatEnabled\" value=\"${breakoutRoomsPrivateChatEnabled}\"/>\r\n        <property name=\"lockSettingsDisableCam\" value=\"${lockSettingsDisableCam}\"/>\r\n        <property name=\"lockSettingsDisableMic\" value=\"${lockSettingsDisableMic}\"/>\r\n        <property name=\"lockSettingsDisablePrivateChat\" value=\"${lockSettingsDisablePrivateChat}\"/>\r\n        <property name=\"lockSettingsDisablePublicChat\" value=\"${lockSettingsDisablePublicChat}\"/>\r\n        <property name=\"lockSettingsDisableNotes\" value=\"${lockSettingsDisableNotes}\"/>\r\n        <property name=\"lockSettingsHideUserList\" value=\"${lockSettingsHideUserList}\"/>\r\n        <property name=\"lockSettingsLockedLayout\" value=\"${lockSettingsLockedLayout}\"/>\r\n        <property name=\"lockSettingsLockOnJoin\" value=\"${lockSettingsLockOnJoin}\"/>\r\n        <property name=\"lockSettingsLockOnJoinConfigurable\" value=\"${lockSettingsLockOnJoinConfigurable}\"/>\r\n        <property name=\"lockSettingsHideViewersCursor\" value=\"${lockSettingsHideViewersCursor}\"/>\r\n        <property name=\"allowDuplicateExtUserid\" value=\"${allowDuplicateExtUserid}\"/>\r\n        <property name=\"endWhenNoModerator\" value=\"${endWhenNoModerator}\"/>\r\n        <property name=\"endWhenNoModeratorDelayInMinutes\" value=\"${endWhenNoModeratorDelayInMinutes}\"/>\r\n        <property name=\"disabledFeatures\" value=\"${disabledFeatures}\"/>\r\n        <property name=\"defaultKeepEvents\" value=\"${defaultKeepEvents}\"/>\r\n        <property name=\"allowRevealOfBBBVersion\" value=\"${allowRevealOfBBBVersion}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"presentationService\" class=\"org.bigbluebutton.web.services.PresentationService\">\r\n        <property name=\"presentationDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"testConferenceMock\" value=\"${testConferenceMock}\"/>\r\n        <property name=\"testRoomMock\" value=\"${beans.presentationService.testRoomMock}\"/>\r\n        <property name=\"testPresentationName\" value=\"${beans.presentationService.testPresentationName}\"/>\r\n        <property name=\"testUploadedPresentation\" value=\"${beans.presentationService.testUploadedPresentation}\"/>\r\n        <property name=\"defaultUploadedPresentation\" value=\"${beans.presentationService.defaultUploadedPresentation}\"/>\r\n        <property name=\"presentationBaseUrl\" value=\"${presentationBaseURL}\"/>\r\n        <property name=\"preUploadedPresentationOverrideDefault\" value=\"${beans.presentationService.preUploadedPresentationOverrideDefault}\"/>\r\n    </bean>\r\n\r\n    <import resource=\"doc-conversion.xml\"/>\r\n    <import resource=\"bbb-redis-messaging.xml\"/>\r\n    <!-- moved the following import statement for turn-stun-servers.xml to resources.groovy to be able to use overlay config for turn/stun servers -->\r\n    <!--\t <import resource=\"turn-stun-servers.xml\"/>-->\r\n</beans>\r\n"], "fixing_code": ["import org.bigbluebutton.build._\n\nversion := \"0.0.3-SNAPSHOT\"\n\nval compileSettings = Seq(\n  organization := \"org.bigbluebutton\",\n\n  scalacOptions ++= List(\n    \"-unchecked\",\n    \"-deprecation\",\n    \"-Xlint\",\n    \"-Ywarn-dead-code\",\n    \"-language:_\",\n    \"-target:11\",\n    \"-encoding\", \"UTF-8\"\n  ),\n  javacOptions ++= List(\n    \"-Xlint:unchecked\",\n    \"-Xlint:deprecation\"\n  )\n)\n\n// We want to have our jar files in lib_managed dir.\n// This way we'll have the right path when we import\n// into eclipse.\nretrieveManaged := true\n\ntestOptions in Test += Tests.Argument(TestFrameworks.Specs2, \"html\", \"console\", \"junitxml\")\n\ntestOptions in Test += Tests.Argument(TestFrameworks.ScalaTest, \"-h\", \"target/scalatest-reports\")\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.0.8\" % \"test\"\nlibraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"2.0.0\"\n\nSeq(Revolver.settings: _*)\n\nlazy val commonWeb = (project in file(\".\")).settings(name := \"bbb-common-web\", libraryDependencies ++= Dependencies.runtime).settings(compileSettings)\n\n// See https://github.com/scala-ide/scalariform\n// Config file is in ./.scalariform.conf\nscalariformAutoformat := true\n\nscalaVersion := \"2.13.9\"\n//-----------\n// Packaging\n//\n// Reference:\n// http://xerial.org/blog/2014/03/24/sbt/\n// http://www.scala-sbt.org/sbt-pgp/usage.html\n// http://www.scala-sbt.org/0.13/docs/Using-Sonatype.html\n// http://central.sonatype.org/pages/requirements.html\n// http://central.sonatype.org/pages/releasing-the-deployment.html\n//-----------\n\n// Build pure Java lib (i.e. without scala)\n// Do not append Scala versions to the generated artifacts\ncrossPaths := false\n\n// This forbids including Scala related libraries into the dependency\nautoScalaLibrary := false\n\n/** *************************\n  * When developing, change the version above to x.x.x-SNAPSHOT then use the file resolver to\n  * publish to the local maven repo using \"sbt publish\"\n  */\n// Uncomment this to publish to local maven repo while commenting out the nexus repo\npublishTo := Some(Resolver.file(\"file\", new File(Path.userHome.absolutePath + \"/.m2/repository\")))\n\n\n// Comment this out when publishing to local maven repo using SNAPSHOT version.\n// To push to sonatype \"sbt publishSigned\"\n//publishTo := {\n//   val nexus = \"https://oss.sonatype.org/\"\n//   if (isSnapshot.value)\n//     Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")\n//   else\n//     Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")\n//}\n\n// Enables publishing to maven repo\npublishMavenStyle := true\n\npublishArtifact in Test := false\n\npomIncludeRepository := { _ => false }\n\npomExtra := (\n  <scm>\n    <url>git@github.com:bigbluebutton/bigbluebutton.git</url>\n    <connection>scm:git:git@github.com:bigbluebutton/bigbluebutton.git</connection>\n  </scm>\n    <developers>\n      <developer>\n        <id>ritzalam</id>\n        <name>Richard Alam</name>\n        <url>http://www.bigbluebutton.org</url>\n      </developer>\n    </developers>)\n\nlicenses := Seq(\"LGPL-3.0\" -> url(\"http://opensource.org/licenses/LGPL-3.0\"))\n\nhomepage := Some(url(\"http://www.bigbluebutton.org\"))\n\nlibraryDependencies ++= Seq(\n  \"javax.validation\" % \"validation-api\" % \"2.0.1.Final\",\n  \"org.springframework.boot\" % \"spring-boot-starter-validation\" % \"2.7.12\",\n  \"org.springframework.data\" % \"spring-data-commons\" % \"2.7.6\",\n  \"org.apache.httpcomponents\" % \"httpclient\" % \"4.5.13\",\n  \"commons-validator\" % \"commons-validator\" % \"1.7\"\n)\n", "package org.bigbluebutton.presentation;\r\n\r\nimport java.io.File;\r\nimport java.io.FilenameFilter;\r\nimport java.io.IOException;\r\nimport java.net.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.ScheduledFuture;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Stream;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.FilenameUtils;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.HttpStatus;\r\nimport org.apache.http.client.ClientProtocolException;\r\nimport org.apache.http.entity.ContentType;\r\nimport org.apache.http.impl.nio.client.CloseableHttpAsyncClient;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClients;\r\nimport org.apache.http.nio.client.methods.HttpAsyncMethods;\r\nimport org.apache.http.nio.client.methods.ZeroCopyConsumer;\r\nimport org.apache.commons.validator.routines.InetAddressValidator;\r\nimport org.bigbluebutton.api.Util;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class PresentationUrlDownloadService {\r\n    private static Logger log = LoggerFactory\r\n            .getLogger(PresentationUrlDownloadService.class);\r\n\r\n    private static final int MAX_REDIRECTS = 5;\r\n    private PageExtractor pageExtractor;\r\n    private DocumentConversionService documentConversionService;\r\n    private String presentationBaseURL;\r\n    private String presentationDir;\r\n    private String BLANK_PRESENTATION;\r\n    private List<String> insertDocumentSupportedProtocols;\r\n    private List<String> insertDocumentBlockedHosts;\r\n\r\n    private ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);\r\n\r\n    public void stop() {\r\n        scheduledThreadPool.shutdownNow();\r\n    }\r\n\r\n    public void processUploadedPresentation(final UploadedPresentation uploadedPres) {\r\n        /**\r\n         * We delay processing of the presentation to make sure that the meeting has already been created.\r\n         * Otherwise, the meeting won't get the conversion events.\r\n         */\r\n        ScheduledFuture scheduledFuture =\r\n                scheduledThreadPool.schedule(new Runnable() {\r\n                    public void run() {\r\n                        documentConversionService.processDocument(uploadedPres);\r\n                    }\r\n                }, 5, TimeUnit.SECONDS);\r\n\r\n    }\r\n\r\n    public void processUploadedFile(String podId, String meetingId, String presId,\r\n                                    String filename, File presFile, Boolean current, String authzToken,\r\n                                    Boolean uploadFailed, ArrayList<String> uploadFailReasons) {\r\n        // TODO add podId\r\n        UploadedPresentation uploadedPres = new UploadedPresentation(\r\n          podId,\r\n          meetingId,\r\n          presId,\r\n          filename,\r\n          presentationBaseURL,\r\n          current,\r\n          authzToken,\r\n          uploadFailed,\r\n          uploadFailReasons);\r\n        uploadedPres.setUploadedFile(presFile);\r\n        processUploadedPresentation(uploadedPres);\r\n    }\r\n\r\n    public void extractPresentationPage(final String sourceMeetingId, final String presentationId,\r\n                                        final Integer presentationSlide, final String destinationMeetingId)  {\r\n        /**\r\n         * We delay processing of the presentation to make sure that the meeting has already been created.\r\n         * Otherwise, the meeting won't get the conversion events.\r\n         */\r\n        ScheduledFuture scheduledFuture =\r\n                scheduledThreadPool.schedule(new Runnable() {\r\n                    public void run() {\r\n                        extractPage(sourceMeetingId, presentationId, presentationSlide, destinationMeetingId) ;\r\n                    }\r\n                }, 5, TimeUnit.SECONDS);\r\n    }\r\n\r\n    private void extractPage(final String sourceMeetingId, final String presentationId,\r\n                             final Integer presentationSlide, final String destinationMeetingId) {\r\n\r\n        Boolean uploadFailed = false;\r\n        ArrayList<String> uploadFailedReasons = new ArrayList<String>();\r\n\r\n        // Build the source meeting path\r\n        File sourceMeetingPath = new File(presentationDir + File.separatorChar\r\n                + sourceMeetingId + File.separatorChar + sourceMeetingId\r\n                + File.separatorChar + presentationId);\r\n\r\n        // Find the source meeting presentation file\r\n        final String presentationFilter = presentationId;\r\n        FilenameFilter pdfFilter = new FilenameFilter() {\r\n            public boolean accept(File dir, String name) {\r\n                return name.startsWith(presentationFilter)\r\n                        && name.toLowerCase().endsWith(\"pdf\");\r\n            }\r\n        };\r\n\r\n        File[] matches = sourceMeetingPath.listFiles(pdfFilter);\r\n        if (matches != null && matches.length != 1) {\r\n            // No PDF presentation was found, we look for an image presentation\r\n            FilenameFilter imgFlter = new FilenameFilter() {\r\n                public boolean accept(File dir, String name) {\r\n                    return name.startsWith(presentationFilter);\r\n                }\r\n            };\r\n\r\n            matches = sourceMeetingPath.listFiles(imgFlter);\r\n        }\r\n        File sourcePresentationFile;\r\n        if (matches == null || matches.length != 1) {\r\n            log.warn(\r\n                    \"Not matching PDF file with prefix {} found at {}. Using the default blank PDF\",\r\n                    sourceMeetingId, sourceMeetingPath);\r\n            sourcePresentationFile = new File(BLANK_PRESENTATION);\r\n        } else {\r\n            sourcePresentationFile = matches[0];\r\n        }\r\n\r\n        // Build the target meeting path\r\n        String filenameExt = FilenameUtils.getExtension(sourcePresentationFile.getName());\r\n        String presId = Util.generatePresentationId(presentationId);\r\n        String newFilename = Util.createNewFilename(presId, filenameExt);\r\n\r\n        File uploadDir = Util.createPresentationDir(destinationMeetingId,\r\n                presentationDir, presId);\r\n        String newFilePath = uploadDir.getAbsolutePath() + File.separatorChar\r\n                + newFilename;\r\n        File newPresentation = new File(newFilePath);\r\n\r\n        if (sourcePresentationFile.getName().toLowerCase().endsWith(\"pdf\")) {\r\n            pageExtractor.extractPage(sourcePresentationFile, new File(\r\n                    newFilePath), presentationSlide);\r\n        } else {\r\n            try {\r\n                FileUtils.copyFile(sourcePresentationFile, newPresentation);\r\n            } catch (IOException e) {\r\n                log.error(\"Could not copy presentation {} to {}\", sourcePresentationFile.getAbsolutePath(),\r\n                        newPresentation.getAbsolutePath(), e);\r\n            }\r\n        }\r\n\r\n        // Hardcode pre-uploaded presentation for breakout room to the default presentation window\r\n        processUploadedFile(\"DEFAULT_PRESENTATION_POD\",\r\n          destinationMeetingId,\r\n          presId,\r\n          \"default-\" + presentationSlide.toString() + \".\" + filenameExt,\r\n          newPresentation,\r\n          true,\r\n          \"breakout-authz-token\",\r\n          uploadFailed,\r\n          uploadFailedReasons);\r\n    }\r\n\r\n    private String followRedirect(String meetingId, String redirectUrl,\r\n            int redirectCount, String origUrl) {\r\n\r\n        if (redirectCount > MAX_REDIRECTS) {\r\n            log.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\r\n                    meetingId, origUrl);\r\n            return null;\r\n        }\r\n\r\n        if(!isValidRedirectUrl(redirectUrl)) return null;\r\n\r\n        URL presUrl;\r\n        try {\r\n            presUrl = new URL(redirectUrl);\r\n        } catch (MalformedURLException e) {\r\n            log.error(\"Malformed url=[{}] for meeting=[{}]\", redirectUrl, meetingId, e);\r\n            return null;\r\n        }\r\n\r\n        HttpURLConnection conn;\r\n        try {\r\n            conn = (HttpURLConnection) presUrl.openConnection();\r\n            conn.setReadTimeout(60000);\r\n            conn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\r\n            conn.addRequestProperty(\"User-Agent\", \"Mozilla\");\r\n\r\n            // normally, 3xx is redirect\r\n            int status = conn.getResponseCode();\r\n            if (status != HttpURLConnection.HTTP_OK) {\r\n                if (status == HttpURLConnection.HTTP_MOVED_TEMP\r\n                        || status == HttpURLConnection.HTTP_MOVED_PERM\r\n                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\r\n                    String newUrl = conn.getHeaderField(\"Location\");\r\n                    return followRedirect(meetingId, newUrl, redirectCount + 1,\r\n                            origUrl);\r\n                } else {\r\n                    log.error(\r\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\r\n                            status, redirectUrl, meetingId);\r\n                    return null;\r\n                }\r\n            } else {\r\n                return redirectUrl;\r\n            }\r\n        } catch (IOException e) {\r\n            log.error(\"IOException for url=[{}] with meeting[{}]\", redirectUrl, meetingId, e);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private boolean isValidRedirectUrl(String redirectUrl) {\r\n        URL url;\r\n\r\n        try {\r\n            url = new URL(redirectUrl);\r\n            String protocol = url.getProtocol();\r\n            String host = url.getHost();\r\n\r\n            if(insertDocumentSupportedProtocols.stream().noneMatch(p -> p.equalsIgnoreCase(protocol))) {\r\n                if(insertDocumentSupportedProtocols.size() == 1 && insertDocumentSupportedProtocols.get(0).equalsIgnoreCase(\"all\")) {\r\n                    log.warn(\"Warning: All protocols are supported for presentation download. It is recommended to only allow HTTPS.\");\r\n                } else {\r\n                    log.error(\"Invalid protocol [{}]\", protocol);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if(insertDocumentBlockedHosts.stream().anyMatch(h -> h.equalsIgnoreCase(host))) {\r\n                log.error(\"Attempted to download from blocked host [{}]\", host);\r\n                return false;\r\n            }\r\n        } catch(MalformedURLException e) {\r\n            log.error(\"Malformed URL [{}]\", redirectUrl);\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            InetAddress[] addresses = InetAddress.getAllByName(url.getHost());\r\n            InetAddressValidator validator = InetAddressValidator.getInstance();\r\n\r\n            boolean localhostBlocked = insertDocumentBlockedHosts.stream().anyMatch(h -> h.equalsIgnoreCase(\"localhost\"));\r\n\r\n            for(InetAddress address: addresses) {\r\n                if(!validator.isValid(address.getHostAddress())) {\r\n                    log.error(\"Invalid address [{}]\", address.getHostAddress());\r\n                    return false;\r\n                }\r\n\r\n                if(localhostBlocked) {\r\n                    if(address.isAnyLocalAddress()) {\r\n                        log.error(\"Address [{}] is a local address\", address.getHostAddress());\r\n                        return false;\r\n                    }\r\n\r\n                    if(address.isLoopbackAddress()) {\r\n                        log.error(\"Address [{}] is a loopback address\", address.getHostAddress());\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        } catch(UnknownHostException e) {\r\n            log.error(\"Unknown host [{}]\", url.getHost());\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean savePresentation(final String meetingId,\r\n            final String filename, final String urlString) {\r\n\r\n        String finalUrl = followRedirect(meetingId, urlString, 0, urlString);\r\n\r\n        if (finalUrl == null) return false;\r\n\r\n        boolean success = false;\r\n\r\n        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\r\n        try {\r\n            httpclient.start();\r\n            File download = new File(filename);\r\n            ZeroCopyConsumer<File> consumer = new ZeroCopyConsumer<File>(download) {\r\n                @Override\r\n                protected File process(\r\n                        final HttpResponse response,\r\n                        final File file,\r\n                        final ContentType contentType) throws Exception {\r\n                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\r\n                        throw new ClientProtocolException(\"Upload failed: \" + response.getStatusLine());\r\n                    }\r\n                    return file;\r\n                }\r\n\r\n            };\r\n            Future<File> future = httpclient.execute(HttpAsyncMethods.createGet(finalUrl), consumer, null);\r\n            File result = future.get();\r\n            success = result.exists();\r\n        } catch (java.lang.InterruptedException ex) {\r\n            log.error(\"InterruptedException while saving presentation\", meetingId, ex);\r\n        } catch (java.util.concurrent.ExecutionException ex) {\r\n            log.error(\"ExecutionException while saving presentation\", meetingId, ex);\r\n        } catch (java.io.FileNotFoundException ex) {\r\n            log.error(\"FileNotFoundException while saving presentation\", meetingId, ex);\r\n        } finally {\r\n            try {\r\n                httpclient.close();\r\n            } catch (java.io.IOException ex) {\r\n                log.error(\"IOException while saving presentation\", meetingId, ex);\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    public void setPageExtractor(PageExtractor extractor) {\r\n        this.pageExtractor = extractor;\r\n    }\r\n\r\n    public void setPresentationDir(String presDir) {\r\n        presentationDir = presDir;\r\n    }\r\n\r\n    public void setPresentationBaseURL(String presentationBaseUrl) {\r\n        presentationBaseURL = presentationBaseUrl;\r\n    }\r\n\r\n    public void setDocumentConversionService(\r\n            DocumentConversionService documentConversionService) {\r\n        this.documentConversionService = documentConversionService;\r\n    }\r\n\r\n    public void setBlankPresentation(String blankPresentation) {\r\n        this.BLANK_PRESENTATION = blankPresentation;\r\n    }\r\n\r\n    public void setInsertDocumentSupportedProtocols(String insertDocumentSupportedProtocols) {\r\n        this.insertDocumentSupportedProtocols = new ArrayList<>(Arrays.asList(insertDocumentSupportedProtocols.split(\",\")));\r\n    }\r\n\r\n    public void setInsertDocumentBlockedHosts(String insertDocumentBlockedHosts) {\r\n        this.insertDocumentBlockedHosts = new ArrayList<>(Arrays.asList(insertDocumentBlockedHosts.split(\",\")));\r\n    }\r\n\r\n}\r\n", "package org.bigbluebutton.web.services.callback;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.*;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.nio.client.CloseableHttpAsyncClient;\nimport org.apache.http.impl.nio.client.HttpAsyncClients;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.Gson;\n\npublic class CallbackUrlService {\n\tprivate static Logger log = LoggerFactory.getLogger(CallbackUrlService.class);\n\n\tprivate BlockingQueue<DelayCallback> receivedMessages = new DelayQueue<DelayCallback>();\n\n\tprivate volatile boolean processMessage = false;\n\tprivate static final int MAX_REDIRECTS = 5;\n\n\tprivate final Executor msgProcessorExec = Executors.newSingleThreadExecutor();\n\tprivate final Executor runExec = Executors.newSingleThreadExecutor();\n\n\tpublic void stop() {\n\t\tlog.info(\"Stopping callback url service.\");\n\t\tprocessMessage = false;\n\t}\n\n\tpublic void start() {\n\t\tlog.info(\"Starting callback url service.\");\n\n\t\ttry {\n\t\t\tprocessMessage = true;\n\n\t\t\tRunnable messageProcessor = new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile (processMessage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tDelayCallback msg = receivedMessages.take();\n\t\t\t\t\t\t\tprocessMessage(msg);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\tlog.warn(\"Error while taking received message from queue.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tmsgProcessorExec.execute(messageProcessor);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error subscribing to channels: {}\", e);\n\t\t}\n\t}\n\n\n\tprivate void processMessage(final DelayCallback msg) {\n\t\tRunnable task = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\t\t\tif (fetchCallbackUrl(msg.callbackEvent.getCallbackUrl())) {\n\t\t\t\t\tMap<String, Object> logData = new HashMap<>();\n\t\t\t\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\t\t\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\t\t\t\tlogData.put(\"name\",event.name);\n\t\t\t\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\t\t\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\t\t\t\tlogData.put(\"logCode\", \"callback_success\");\n\t\t\t\t\tlogData.put(\"description\", \"Callback successful.\");\n\n\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\tString logStr = gson.toJson(logData);\n\n\t\t\t\t\tlog.info(\" --analytics-- data={}\", logStr);\n\t\t\t\t} else {\n\t\t\t\t\tschedRetryCallback(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trunExec.execute(task);\n\t}\n\n\tprivate void schedCallback(final DelayCallback msg, long delayInMillis, int numAttempt) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\tMap<String, Object> logData = new HashMap<>();\n\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\tlogData.put(\"name\",event.name);\n\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\tlogData.put(\"retryInMs\", delayInMillis);\n\t\tlogData.put(\"logCode\", \"callback_failed_retry\");\n\t\tlogData.put(\"description\", \"Callback failed but retrying.\");\n\n\t\tGson gson = new Gson();\n\t\tString logStr = gson.toJson(logData);\n\n\t\tlog.info(\" --analytics-- data={}\", logStr);\n\n\t\tDelayCallback dc = new DelayCallback(event, delayInMillis, numAttempt);\n\t\treceivedMessages.add(dc);\n\t}\n\n\tprivate void giveupCallback(final DelayCallback msg) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\t\tMap<String, Object> logData = new HashMap<>();\n\t\tlogData.put(\"meetingId\", event.meetingid);\n\t\tlogData.put(\"externalMeetingId\", event.extMeetingid);\n\t\tlogData.put(\"name\",event.name);\n\t\tlogData.put(\"callback\", event.getCallbackUrl());\n\t\tlogData.put(\"attempts\", msg.numAttempts);\n\t\tlogData.put(\"logCode\", \"callback_failed_give_up\");\n\t\tlogData.put(\"description\", \"Callback failed and giving up.\");\n\n\t\tGson gson = new Gson();\n\t\tString logStr = gson.toJson(logData);\n\n\t\tlog.info(\" --analytics-- data={}\", logStr);\n\t}\n\tprivate void schedRetryCallback(final DelayCallback msg) {\n\t\tMeetingEndedEvent event = (MeetingEndedEvent) msg.callbackEvent;\n\n\t\tswitch (msg.numAttempts) {\n\t\t\tcase 1:\n\t\t\t\tschedCallback(msg, 30_000 /** 30sec **/, 2);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tschedCallback(msg, 60_000 /** 1min **/, 3);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tschedCallback(msg, 120_000 /** 2min **/, 4);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tschedCallback(msg, 300_000 /** 5min **/, 5);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tgiveupCallback(msg);\n\t\t\t}\n\t}\n\n\tpublic void handleMessage(ICallbackEvent message) {\n\t\tlong delayInMillis = -1000 /**Send right away **/;\n\t\tint numAttempt = 1;\n\t\tDelayCallback dc = new DelayCallback(message, delayInMillis, numAttempt);\n\t\treceivedMessages.add(dc);\n\t}\n\n\tprivate boolean fetchCallbackUrl(final String callbackUrl) {\n\n\t\tboolean success = false;\n\n\t\tCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\n\t\ttry {\n\t\t\thttpclient.start();\n\n\t\t\tHttpGet request = new HttpGet(callbackUrl);\n\n\t\t\tFuture<HttpResponse> future = httpclient.execute(request, null);\n\t\t\tHttpResponse response = future.get();\n\t\t\t// Consider 2xx response code as success.\n\t\t\tsuccess = (response.getStatusLine().getStatusCode() >= 200 && response.getStatusLine().getStatusCode() < 300);\n\t\t} catch (java.lang.InterruptedException ex) {\n\t\t\tlog.error(\"Interrupted exception while calling url {}\", callbackUrl);\n\t\t} catch (java.util.concurrent.ExecutionException ex) {\n\t\t\tlog.error(\"ExecutionException exception while calling url {}\", callbackUrl);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\thttpclient.close();\n\t\t\t} catch (java.io.IOException ex) {\n\t\t\t\tlog.error(\"IOException exception while closing http client for url {}\", callbackUrl);\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}\n}\n", "#\n# BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\n#\n# Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\n#\n# This program is free software; you can redistribute it and/or modify it under the\n# terms of the GNU Lesser General Public License as published by the Free Software\n# Foundation; either version 3.0 of the License, or (at your option) any later\n# version.\n#\n# BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License along\n# with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\n#\n\n#\n# These are the default properites for BigBlueButton Web application\n\n# Default loglevel.\nappLogLevel=DEBUG\n\n#----------------------------------------------------\n# Directory where BigBlueButton stores uploaded slides\npresentationDir=/var/bigbluebutton\n\n#----------------------------------------------------\n# Directory where SWFTOOLS (pdf2swf, jpeg2swf, png2swf) are located\nswfToolsDir=/usr/bin\n\n#----------------------------------------------------\n# Directory where ImageMagick's convert executable is located\nimageMagickDir=/usr/bin\n\n#----------------------------------------------------\n# Fonts directory passed into PDF2SWF to support highlighting of texts\n# in the SWF slides.\nfontsDir=/usr/share/fonts\n\n#----------------------------------------------------\n# Executable for presentation checker\npresCheckExec=/usr/share/prescheck/prescheck.sh\n\n#----------------------------------------------------\n# Skip Office doc conversion pre-check. Attempt to convert\n# Office doc to PDF right away.\nskipOfficePrecheck=true\n\n#----------------------------------------------------\n# Executable for presentation office conversion\npresOfficeConversionExec=/usr/share/bbb-libreoffice-conversion/convert.sh\n\n#----------------------------------------------------\n# These will be copied in cases where the conversion process\n# fails to generate a slide from the uploaded presentation\nBLANK_SLIDE=/usr/share/bigbluebutton/blank/blank-slide.swf\nBLANK_PRESENTATION=/usr/share/bigbluebutton/blank/blank-presentation.pdf\nBLANK_THUMBNAIL=/usr/share/bigbluebutton/blank/blank-thumb.png\nBLANK_PNG=/usr/share/bigbluebutton/blank/blank-png.png\nBLANK_SVG=/usr/share/bigbluebutton/blank/blank-svg.svg\n\n#----------------------------------------------------\n# Number of minutes the conversion should take. If it takes\n# more than this time, cancel the conversion process.\nmaxConversionTime=5\n\n#----------------------------------------------------\n# Maximum number of pages allowed for an uploaded presentation (default 100).\nmaxNumPages=200\n\n#----------------------------------------------------\n# Maximum file size for an uploaded presentation (default 30MB).\nmaxFileSizeUpload=30000000\n\n#----------------------------------------------------\n# Maximum swf file size for load to the client (default 500000).\nMAX_SWF_FILE_SIZE=500000\n\n#----------------------------------------------------\n# Maximum allowed number of place object tags in the converted SWF, if exceeded the conversion will fallback to full BMP (default 800)\nplacementsThreshold=800\n\n# Maximum allowed number of bitmap images in the converted SWF, if exceeded the conversion will fallback to full BMP (default 800)\nimageTagThreshold=800\n\n# Maximum allowed number of define text tags in the converted SWF, if exceeded the conversion will fallback to full BMP (default 200)\ndefineTextThreshold=2000\n\n#------------------------------------\n# Number of threads in the pool to do the presentation conversion.\n#------------------------------------\nnumConversionThreads=5\n\n#------------------------------------\n# Number of threads to process file uploads\n#------------------------------------\nnumFileProcessorThreads=2\n\n#------------------------------------\n# Timeout(secs) to wait for pdf to svg conversion (timeout for each tool called during the process)\n#------------------------------------\nsvgConversionTimeout=60\n\n#------------------------------------\n# pdfFonts is used to detect whether PDF contains text with font Type 3\n# it is also used to check if the pdf has some problem to be opened (timeout) and abort the conversion if so\n# Configuration for pdfFonts Timeout(secs) and Max number of attempts\n#------------------------------------\npdfFontsTimeout=3\nmaxNumberOfAttemptsForPdfFonts=3\n\n#------------------------------------\n# Presentation resolution, in PPI (will be set to generated svg)\n#------------------------------------\nsvgPresentationResolutionPpi=300\n\n#------------------------------------\n# Force conversion of slides to PNG before converting to SVG\n## Experimental - this option might be removed in next releases\n## This will solve problems like reported in issue #8835\n## Disabled by default as it can affect the quality in zoom\n#------------------------------------\nforceRasterizeSlides=false\n\n#------------------------------------\n# Presentation will be resized to this width (in pixels) when rasterizing (converting to PNG)\n## Applied in these situations:\n##  a) the source can't be converted directly to SVG ;\n##  b) option \"forceRasterizeSlides\" is defined as true ;\n## To disable this constraint (and keep source resolution) define this property as 0.\n#------------------------------------\npngWidthRasterizedSlides=2048\n\n\n#------------------------------------\n# Timeout(secs) to wait for conversion script execution\n#------------------------------------\nofficeToPdfConversionTimeout=60\n\n#------------------------------------\n# Max concurrent of conversion script execution\n#------------------------------------\nofficeToPdfMaxConcurrentConversions=4\n\n#----------------------------------------------------\n# Conversion of the presentation slides to SWF to be\n# used in the Flash client\nswfSlidesRequired=false\n\n#----------------------------------------------------\n# Additional conversion of the presentation slides to SVG\n# to be used in the HTML5 client\nsvgImagesRequired=true\n\n#----------------------------------------------------\n# Additional conversion of the presentation slides to PNG\n# to be used in the IOS mobile client\ngeneratePngs=false\npngSlideWidth=1200\n\n# Default number of digits for voice conference users joining through the PSTN.\ndefaultNumDigitsForTelVoice=5\n\n#----------------------------------------------------\n# Configuration for large images, 2 MB by default, if bigger it will down-scaled\nmaxImageSize=2000000\n\n#----------------------------------------------------\n# Configuration for large PDF, 14 MB by default, if bigger it will be analysed during the conversion process\nbigPdfSize=14000000\n\n# The maximum allowed page size for PDF files exceeding the 'pdfCheckSize' value, 2 MB by default\nmaxBigPdfPageSize=2000000\n\n#----------------------------------------------------\n# Default dial access number\ndefaultDialAccessNumber=613-555-1234\n\n# Default Guest Policy\n# Valid values are ALWAYS_ACCEPT, ALWAYS_DENY, ASK_MODERATOR\n#\ndefaultGuestPolicy=ALWAYS_ACCEPT\n\n# Enables or disables authenticated guest\nauthenticatedGuest=true\n\n#---------------------------------------------------\n# Default Meeting Layout\n# Valid values are CUSTOM_LAYOUT, SMART_LAYOUT, PRESENTATION_FOCUS, VIDEO_FOCUS\ndefaultMeetingLayout=CUSTOM_LAYOUT\n\n#\n#----------------------------------------------------\n# Default welcome message to display when the participant joins the web\n# conference. This is only used for the old scheduling which will be\n# removed in the future. Use the API to create a conference.\n#\n# If the message contains characters not in ISO-8859-1 character sets\n# they must be properly escaped to unicode characters. An easy way to\n# do this is running the native2ascii command setting UTF8 encoding and\n# passing this file's path as input and output parameters, e.g.:\n#\n# native2ascii -encoding UTF8 bigbluebutton.properties bigbluebutton.properties\n#\ndefaultWelcomeMessage=Welcome to <b>%%CONFNAME%%</b>!<br><br>For help on using BigBlueButton see these (short) <a href=\"https://bigbluebutton.org/teachers/tutorials/\"><u>tutorial videos</u></a>.<br><br>To join the audio bridge click the speaker button.  Use a headset to avoid causing background noise for others.\ndefaultWelcomeMessageFooter=This server is running <a href=\"https://bigbluebutton.org/\" target=\"_blank\"><u>BigBlueButton</u></a>.\n\n# Default maximum number of users a meeting can have.\n# Current default is 0 (meeting doesn't have a user limit).\ndefaultMaxUsers=0\n\n# Default duration of the meeting in minutes.\n# Current default is 0 (meeting doesn't end).\ndefaultMeetingDuration=0\n\n# Number of minutes to logout client if user\n# isn't responsive\nclientLogoutTimerInMinutes=0\n\n# End meeting if no user joined within\n# a period of time after meeting created.\nmeetingExpireIfNoUserJoinedInMinutes=5\n\n# Number of minutes to end meeting when\n# the last user left.\nmeetingExpireWhenLastUserLeftInMinutes=1\n\n# User inactivity audit timer interval.\nuserInactivityInspectTimerInMinutes=0\n\n# Number of minutes to consider a user inactive.\n# iSend warning message to client to check if really inactive.\nuserInactivityThresholdInMinutes=30\n\n# Number of minutes for user to respond to inactivity\n# warning before being logged out.\nuserActivitySignResponseDelayInMinutes=5\n\n# Disable recording by default.\n#   true - don't record even if record param in the api call is set to record\n#   false - when record param is passed from api, override this default\ndisableRecordingDefault=false\n\n# Start recording when first user joins the meeting.\n# For backward compatibility with 0.81 where whole meeting\n# is recorded.\nautoStartRecording=false\n\n# Allow the user to start/stop recording.\nallowStartStopRecording=true\n\n# Number of minutes that Learning Dashboard will be available after the end of the meeting\n# if 0, the Learning Dashboard will keep available permanently\n# this is the default value, can be customized using the create API\nlearningDashboardCleanupDelayInMinutes=2\n\n# Allow webcams streaming reception only to and from moderators\nwebcamsOnlyForModerator=false\n\n# Per meeting camera share limit\n# if 0, there's no limit\nmeetingCameraCap=0\n\n\n# Per user camera share limit\n# if 0, there's no limit\nuserCameraCap=3\n\n# Mute the meeting on start\nmuteOnStart=false\n\n# Unmute users\n# Gives moderators permisson to unmute other users\nallowModsToUnmuteUsers=false\n\n# Eject user webcams\n# Gives moderators permisson to close other users' webcams\nallowModsToEjectCameras=false\n\n# Saves meeting events even if the meeting is not recorded\ndefaultKeepEvents=false\n\n# Timeout (millis) to remove a joined user after her/his left event without a rejoin\n# e.g. regular user left event\n# Default 60s\nusersTimeout=60000\n\n# Timeout (millis) to remove guest users that stopped fetching for her/his status\n# e.g. guest that closed the waiting page before being approved\n# Default 30s\nwaitingGuestUsersTimeout=30000\n\n# Timeout (millis) to remove users that called the enter API but did not join\n# e.g. user's client hanged between the enter call and join event\n# Default 45s\nenteredUsersTimeout=45000\n\n#----------------------------------------------------\n# This URL is where the BBB client is accessible. When a user sucessfully\n# enters a name and password, she is redirected here to load the client.\n# Do not commit changes to this field.\nbigbluebutton.web.serverURL=http://bigbluebutton.example.com\n\n#----------------------------------------------------\n# Assign URL where the logged-out participant will be redirected after sign-out.\n# If \"default\", it returns to bigbluebutton.web.serverURL\nbigbluebutton.web.logoutURL=default\n\n# The url of the BigBlueButton HTML5 client. Users will be redirected here when\n# successfully joining the meeting.\ndefaultHTML5ClientUrl=${bigbluebutton.web.serverURL}/html5client/join\n\nuseDefaultLogo=false\ndefaultLogoURL=${bigbluebutton.web.serverURL}/images/logo.png\n\n# Allow requests without JSESSIONID to be handled (default = false)\nallowRequestsWithoutSession=false\n\n# The url for where the guest will poll if approved to join or not.\ndefaultGuestWaitURL=${bigbluebutton.web.serverURL}/html5client/guestWait\n\n# The default avatar image to display.\nuseDefaultAvatar=false\ndefaultAvatarURL=${bigbluebutton.web.serverURL}/html5client/resources/images/avatar.png\n\napiVersion=2.0\n\n# Salt which is used by 3rd-party apps to authenticate api calls\nsecuritySalt=330a8b08c3b4c61533e1d0c5ce1ac88f\n\n# List of supported hash algorithms for validating checksums (comma-separated)\n# Available options: sha1, sha256, sha384, sha512\nsupportedChecksumAlgorithms=sha1,sha256,sha384,sha512\n\n\n# Directory where we drop the <meeting-id-recorded>.done file\nrecordStatusDir=/var/bigbluebutton/recording/status/recorded\n\nredisHost=127.0.0.1\nredisPort=6379\nredisPassword=\nredisKeyExpiry=1209600\n\n# The directory where the published/unpublised recordings are located. This is for\n# the get recording* api calls\npublishedDir=/var/bigbluebutton/published\nunpublishedDir=/var/bigbluebutton/unpublished\ncaptionsDir=/var/bigbluebutton/captions\n\n# The directory where the pre-built configs are stored\nconfigDir=/var/bigbluebutton/configs\n\n# The directory to export Json with Meeting activities (used in Learning Dashboard)\nlearningDashboardFilesDir=/var/bigbluebutton/learning-dashboard\n\n# If the API is enabled.\nserviceEnabled = true\n\n# Test voiceBridge number\ntestVoiceBridge=99999\ntestConferenceMock=conference-mock-default\n\n#------------------------------------------------------\n# These properties are used to test the conversion process.\n# Conference name folder in ${presentationDir} (see above)\nbeans.presentationService.testConferenceMock=${testConferenceMock}\n\n# Conference room folder in ${presentationDir}/${testConferenceMock}\nbeans.presentationService.testRoomMock=conference-mock-default\n# Uploaded presentation name\nbeans.presentationService.testPresentationName=appkonference\n# Uploaded presentation file\nbeans.presentationService.testUploadedPresentation=appkonference.txt\n# Default Uploaded presentation file\nbeans.presentationService.defaultUploadedPresentation=${bigbluebutton.web.serverURL}/default.pdf\n# Discard default presentation (default.pdf) when Pre-upload Slides are sent within the create call (default true)\nbeans.presentationService.preUploadedPresentationOverrideDefault=true\n\npresentationBaseURL=${bigbluebutton.web.serverURL}/bigbluebutton/presentation\n\n# Comma separated list of supported protocols for hosts to download presentations from\n# By default only HTTPS is supported. To enable support for all protocols (NOT RECOMMENDED) use 'all' instead\ninsertDocumentSupportedProtocols=https\n\n# Comma separated list of hosts that presentations CANNOT be downloaded from\n# By default localhost is blocked (i.e. all IPs related to localhost will be blocked and cannot be used for presentation download)\ninsertDocumentBlockedHosts=localhost\n\n#----------------------------------------------------\n# The URL where the presentations will be loaded from.\n#----------------------------------------------------\nbeans.presentationService.presentationBaseUrl=${presentationBaseURL}\n#----------------------------------------------------\n# Inject values into grails service beans\nbeans.presentationService.presentationDir=${presentationDir}\n\n#----------------------------------------------------\n# Specify which IPs can do cross domain requests\naccessControlAllowOrigin=${bigbluebutton.web.serverURL}\n\n#----------------------------------------------------\n# The lapsus of seconds for polling the BBB Server in order to check if it's down.\n# After 5 tries if there isn't response, it will be declared down\ncheckBBBServerEvery=10\n\n# Default settings for breakout rooms\nbreakoutRoomsRecord=false\nbreakoutRoomsPrivateChatEnabled=true\n\n# Default Lock Settings\nlockSettingsDisableCam=false\nlockSettingsDisableMic=false\nlockSettingsDisablePrivateChat=false\nlockSettingsDisablePublicChat=false\nlockSettingsDisableNotes=false\nlockSettingsHideUserList=false\nlockSettingsLockedLayout=false\nlockSettingsLockOnJoin=true\nlockSettingsLockOnJoinConfigurable=false\nlockSettingsHideViewersCursor=false\n\nallowDuplicateExtUserid=true\n\ndefaultTextTrackUrl=${bigbluebutton.web.serverURL}/bigbluebutton\n\n# Param to end the meeting when there are no moderators after a certain period of time.\n# Needed for classes where teacher gets disconnected and can't get back in. Prevents\n# students from running amok.\nendWhenNoModerator=false\n\n# Number of minutes to wait for moderator rejoin before end meeting (if `endWhenNoModerator` enabled)\nendWhenNoModeratorDelayInMinutes=1\n\n# List of features to disable (comma-separated)\n# Available options: breakoutRooms, captions, chat, externalVideos, layouts, learningDashboard, polls, screenshare, sharedNotes, virtualBackgrounds\n# disabledFeatures=\n\n# Allow endpoint with current BigBlueButton version\nallowRevealOfBBBVersion=false\n\nlearningDashboardEnabled=true\nbreakoutRoomsEnabled=true\n\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!--\r\n\r\nBigBlueButton open source conferencing system - http://www.bigbluebutton.org/\r\n\r\nCopyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\r\n\r\nThis program is free software; you can redistribute it and/or modify it under the\r\nterms of the GNU Lesser General Public License as published by the Free Software\r\nFoundation; either version 3.0 of the License, or (at your option) any later\r\nversion.\r\n\r\nBigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\nPARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License along\r\nwith BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\r\n\r\n-->\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:util=\"http://www.springframework.org/schema/util\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n        http://www.springframework.org/schema/util\r\n        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\r\n\r\n    <bean id=\"validator\" class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\r\n\r\n    <bean id=\"characterEncodingFilter\" class=\"org.springframework.web.filter.CharacterEncodingFilter\">\r\n        <property name=\"encoding\">\r\n            <value>utf-8</value>\r\n        </property>\r\n    </bean>\r\n\r\n    <bean id=\"waitingGuestCleanupTimerTask\" class=\"org.bigbluebutton.web.services.WaitingGuestCleanupTimerTask\"/>\r\n    <bean id=\"userCleanupTimerTask\" class=\"org.bigbluebutton.web.services.UserCleanupTimerTask\"/>\r\n    <bean id=\"enteredUserCleanupTimerTask\" class=\"org.bigbluebutton.web.services.EnteredUserCleanupTimerTask\"/>\r\n\r\n    <bean id=\"keepAliveService\" class=\"org.bigbluebutton.web.services.KeepAliveService\"\r\n          init-method=\"start\" destroy-method=\"stop\">\r\n        <property name=\"runEvery\" value=\"${checkBBBServerEvery}\"/>\r\n        <property name=\"gw\" ref=\"bbbWebApiGWApp\"/>\r\n    </bean>\r\n\r\n    <bean id=\"meetingService\" class=\"org.bigbluebutton.api.MeetingService\" init-method=\"start\" destroy-method=\"stop\">\r\n        <property name=\"redisStorageService\" ref=\"redisStorageService\"/>\r\n        <property name=\"learningDashboardService\" ref=\"learningDashboardService\"/>\r\n        <property name=\"recordingService\" ref=\"recordingService\"/>\r\n        <property name=\"presDownloadService\" ref=\"presDownloadService\"/>\r\n        <property name=\"paramsProcessorUtil\" ref=\"paramsProcessorUtil\"/>\r\n        <property name=\"stunTurnService\" ref=\"stunTurnService\"/>\r\n        <property name=\"waitingGuestCleanupTimerTask\" ref=\"waitingGuestCleanupTimerTask\"/>\r\n        <property name=\"userCleanupTimerTask\" ref=\"userCleanupTimerTask\"/>\r\n        <property name=\"enteredUserCleanupTimerTask\" ref=\"enteredUserCleanupTimerTask\"/>\r\n        <property name=\"gw\" ref=\"bbbWebApiGWApp\"/>\r\n        <property name=\"callbackUrlService\" ref=\"callbackUrlService\"/>\r\n        <property name=\"usersTimeout\" value=\"${usersTimeout}\"/>\r\n        <property name=\"waitingGuestUsersTimeout\" value=\"${waitingGuestUsersTimeout}\"/>\r\n        <property name=\"enteredUsersTimeout\" value=\"${enteredUsersTimeout}\"/>\r\n        <property name=\"swfSlidesGenerationProgressNotifier\" ref=\"swfSlidesGenerationProgressNotifier\"/>\r\n    </bean>\r\n\r\n    <bean id=\"oldMessageReceivedGW\" class=\"org.bigbluebutton.api2.bus.OldMessageReceivedGW\">\r\n        <constructor-arg index=\"0\" ref=\"redisMessageHandler\"/>\r\n    </bean>\r\n\r\n    <bean id=\"callbackUrlService\" class=\"org.bigbluebutton.web.services.callback.CallbackUrlService\"\r\n          init-method=\"start\" destroy-method=\"stop\">\r\n    </bean>\r\n\r\n    <bean id=\"bbbWebApiGWApp\" class=\"org.bigbluebutton.api2.BbbWebApiGWApp\">\r\n        <constructor-arg index=\"0\" ref=\"oldMessageReceivedGW\"/>\r\n        <constructor-arg index=\"1\" value=\"${redisHost}\"/>\r\n        <constructor-arg index=\"2\" value=\"${redisPort}\"/>\r\n        <constructor-arg index=\"3\" value=\"${redisPassword}\"/>\r\n        <constructor-arg index=\"4\" value=\"${redisKeyExpiry}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"recordingServiceHelper\" class=\"org.bigbluebutton.api.util.RecordingMetadataReaderHelper\">\r\n        <property name=\"recordingServiceGW\" ref=\"recordingServiceGW\"/>\r\n    </bean>\r\n\r\n    <bean id=\"recordingServiceGW\" class=\"org.bigbluebutton.api2.util.RecMetaXmlHelper\">\r\n        <constructor-arg index=\"0\" ref=\"bbbWebApiGWApp\"/>\r\n    </bean>\r\n\r\n    <bean id=\"presDownloadService\" class=\"org.bigbluebutton.presentation.PresentationUrlDownloadService\"\r\n          destroy-method=\"stop\">\r\n        <property name=\"presentationDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"presentationBaseURL\" value=\"${presentationBaseURL}\"/>\r\n        <property name=\"pageExtractor\" ref=\"pageExtractor\"/>\r\n        <property name=\"documentConversionService\" ref=\"documentConversionService\"/>\r\n        <property name=\"blankPresentation\" value=\"${BLANK_PRESENTATION}\"/>\r\n        <property name=\"insertDocumentSupportedProtocols\" value=\"${insertDocumentSupportedProtocols}\" />\r\n        <property name=\"insertDocumentBlockedHosts\" value=\"${insertDocumentBlockedHosts}\" />\r\n    </bean>\r\n\r\n    <bean id=\"recordingService\" class=\"org.bigbluebutton.api.RecordingService\">\r\n        <property name=\"recordingStatusDir\" value=\"${recordStatusDir}\"/>\r\n        <property name=\"publishedDir\" value=\"${publishedDir}\"/>\r\n        <property name=\"unpublishedDir\" value=\"${unpublishedDir}\"/>\r\n        <property name=\"captionsDir\" value=\"${captionsDir}\"/>\r\n        <property name=\"recordingServiceHelper\" ref=\"recordingServiceHelper\"/>\r\n        <property name=\"presentationBaseDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"defaultServerUrl\" value=\"${bigbluebutton.web.serverURL}\"/>\r\n        <property name=\"defaultTextTrackUrl\" value=\"${defaultTextTrackUrl}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"learningDashboardService\" class=\"org.bigbluebutton.api.LearningDashboardService\">\r\n        <property name=\"learningDashboardFilesDir\" value=\"${learningDashboardFilesDir}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"html5LoadBalancingService\" class=\"org.bigbluebutton.api.HTML5LoadBalancingService\" init-method=\"init\" />\r\n\r\n    <bean id=\"configServiceHelper\" class=\"org.bigbluebutton.api.ClientConfigServiceHelperImp\"/>\r\n\r\n    <bean id=\"configService\" class=\"org.bigbluebutton.api.ClientConfigService\" init-method=\"init\">\r\n        <property name=\"configDir\" value=\"${configDir}\"/>\r\n        <property name=\"clientConfigServiceHelper\" ref=\"configServiceHelper\"/>\r\n    </bean>\r\n\r\n    <bean id=\"validationService\" class=\"org.bigbluebutton.api.service.ValidationService\">\r\n        <property name=\"securitySalt\" value=\"${securitySalt}\"/>\r\n        <property name=\"supportedChecksumAlgorithms\" value=\"${supportedChecksumAlgorithms}\"/>\r\n        <property name=\"allowRequestsWithoutSession\" value=\"${allowRequestsWithoutSession}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"serviceUtils\" class=\"org.bigbluebutton.api.service.ServiceUtils\">\r\n        <property name=\"meetingService\" ref=\"meetingService\" />\r\n        <property name=\"validationService\" ref=\"validationService\" />\r\n    </bean>\r\n\r\n    <bean id=\"paramsProcessorUtil\" class=\"org.bigbluebutton.api.ParamsProcessorUtil\">\r\n        <property name=\"apiVersion\" value=\"${apiVersion}\"/>\r\n        <property name=\"serviceEnabled\" value=\"${serviceEnabled}\"/>\r\n        <property name=\"securitySalt\" value=\"${securitySalt}\"/>\r\n        <property name=\"supportedChecksumAlgorithms\" value=\"${supportedChecksumAlgorithms}\"/>\r\n        <property name=\"defaultMaxUsers\" value=\"${defaultMaxUsers}\"/>\r\n        <property name=\"defaultWelcomeMessage\" value=\"${defaultWelcomeMessage}\"/>\r\n        <property name=\"defaultWelcomeMessageFooter\" value=\"${defaultWelcomeMessageFooter}\"/>\r\n        <property name=\"defaultDialAccessNumber\" value=\"${defaultDialAccessNumber}\"/>\r\n        <property name=\"testVoiceBridge\" value=\"${testVoiceBridge}\"/>\r\n        <property name=\"testConferenceMock\" value=\"${testConferenceMock}\"/>\r\n        <property name=\"defaultLogoutUrl\" value=\"${bigbluebutton.web.logoutURL}\"/>\r\n        <property name=\"defaultServerUrl\" value=\"${bigbluebutton.web.serverURL}\"/>\r\n        <property name=\"defaultNumDigitsForTelVoice\" value=\"${defaultNumDigitsForTelVoice}\"/>\r\n        <property name=\"defaultHTML5ClientUrl\" value=\"${defaultHTML5ClientUrl}\"/>\r\n        <property name=\"useDefaultLogo\" value=\"${useDefaultLogo}\"/>\r\n        <property name=\"defaultLogoURL\" value=\"${defaultLogoURL}\"/>\r\n        <property name=\"defaultGuestWaitURL\" value=\"${defaultGuestWaitURL}\"/>\r\n        <property name=\"allowRequestsWithoutSession\" value=\"${allowRequestsWithoutSession}\"/>\r\n        <property name=\"defaultMeetingDuration\" value=\"${defaultMeetingDuration}\"/>\r\n        <property name=\"disableRecordingDefault\" value=\"${disableRecordingDefault}\"/>\r\n        <property name=\"autoStartRecording\" value=\"${autoStartRecording}\"/>\r\n        <property name=\"allowStartStopRecording\" value=\"${allowStartStopRecording}\"/>\r\n        <property name=\"learningDashboardEnabled\" value=\"${learningDashboardEnabled}\"/>\r\n        <property name=\"learningDashboardCleanupDelayInMinutes\" value=\"${learningDashboardCleanupDelayInMinutes}\"/>\r\n        <property name=\"webcamsOnlyForModerator\" value=\"${webcamsOnlyForModerator}\"/>\r\n        <property name=\"defaultMeetingCameraCap\" value=\"${meetingCameraCap}\"/>\r\n        <property name=\"defaultUserCameraCap\" value=\"${userCameraCap}\"/>\r\n        <property name=\"useDefaultAvatar\" value=\"${useDefaultAvatar}\"/>\r\n        <property name=\"defaultAvatarURL\" value=\"${defaultAvatarURL}\"/>\r\n        <property name=\"defaultGuestPolicy\" value=\"${defaultGuestPolicy}\"/>\r\n        <property name=\"authenticatedGuest\" value=\"${authenticatedGuest}\"/>\r\n        <property name=\"defaultMeetingLayout\" value=\"${defaultMeetingLayout}\"/>\r\n        <property name=\"meetingExpireIfNoUserJoinedInMinutes\" value=\"${meetingExpireIfNoUserJoinedInMinutes}\"/>\r\n        <property name=\"meetingExpireWhenLastUserLeftInMinutes\" value=\"${meetingExpireWhenLastUserLeftInMinutes}\"/>\r\n        <property name=\"userInactivityInspectTimerInMinutes\" value=\"${userInactivityInspectTimerInMinutes}\"/>\r\n        <property name=\"userInactivityThresholdInMinutes\" value=\"${userInactivityThresholdInMinutes}\"/>\r\n        <property name=\"userActivitySignResponseDelayInMinutes\" value=\"${userActivitySignResponseDelayInMinutes}\"/>\r\n        <property name=\"maxPresentationFileUpload\" value=\"${maxFileSizeUpload}\"/>\r\n        <property name=\"clientLogoutTimerInMinutes\" value=\"${clientLogoutTimerInMinutes}\"/>\r\n        <property name=\"muteOnStart\" value=\"${muteOnStart}\"/>\r\n        <property name=\"allowModsToUnmuteUsers\" value=\"${allowModsToUnmuteUsers}\"/>\r\n        <property name=\"allowModsToEjectCameras\" value=\"${allowModsToEjectCameras}\"/>\r\n        <property name=\"breakoutRoomsEnabled\" value=\"${breakoutRoomsEnabled}\"/>\r\n        <property name=\"breakoutRoomsRecord\" value=\"${breakoutRoomsRecord}\"/>\r\n        <property name=\"breakoutRoomsPrivateChatEnabled\" value=\"${breakoutRoomsPrivateChatEnabled}\"/>\r\n        <property name=\"lockSettingsDisableCam\" value=\"${lockSettingsDisableCam}\"/>\r\n        <property name=\"lockSettingsDisableMic\" value=\"${lockSettingsDisableMic}\"/>\r\n        <property name=\"lockSettingsDisablePrivateChat\" value=\"${lockSettingsDisablePrivateChat}\"/>\r\n        <property name=\"lockSettingsDisablePublicChat\" value=\"${lockSettingsDisablePublicChat}\"/>\r\n        <property name=\"lockSettingsDisableNotes\" value=\"${lockSettingsDisableNotes}\"/>\r\n        <property name=\"lockSettingsHideUserList\" value=\"${lockSettingsHideUserList}\"/>\r\n        <property name=\"lockSettingsLockedLayout\" value=\"${lockSettingsLockedLayout}\"/>\r\n        <property name=\"lockSettingsLockOnJoin\" value=\"${lockSettingsLockOnJoin}\"/>\r\n        <property name=\"lockSettingsLockOnJoinConfigurable\" value=\"${lockSettingsLockOnJoinConfigurable}\"/>\r\n        <property name=\"lockSettingsHideViewersCursor\" value=\"${lockSettingsHideViewersCursor}\"/>\r\n        <property name=\"allowDuplicateExtUserid\" value=\"${allowDuplicateExtUserid}\"/>\r\n        <property name=\"endWhenNoModerator\" value=\"${endWhenNoModerator}\"/>\r\n        <property name=\"endWhenNoModeratorDelayInMinutes\" value=\"${endWhenNoModeratorDelayInMinutes}\"/>\r\n        <property name=\"disabledFeatures\" value=\"${disabledFeatures}\"/>\r\n        <property name=\"defaultKeepEvents\" value=\"${defaultKeepEvents}\"/>\r\n        <property name=\"allowRevealOfBBBVersion\" value=\"${allowRevealOfBBBVersion}\"/>\r\n    </bean>\r\n\r\n    <bean id=\"presentationService\" class=\"org.bigbluebutton.web.services.PresentationService\">\r\n        <property name=\"presentationDir\" value=\"${presentationDir}\"/>\r\n        <property name=\"testConferenceMock\" value=\"${testConferenceMock}\"/>\r\n        <property name=\"testRoomMock\" value=\"${beans.presentationService.testRoomMock}\"/>\r\n        <property name=\"testPresentationName\" value=\"${beans.presentationService.testPresentationName}\"/>\r\n        <property name=\"testUploadedPresentation\" value=\"${beans.presentationService.testUploadedPresentation}\"/>\r\n        <property name=\"defaultUploadedPresentation\" value=\"${beans.presentationService.defaultUploadedPresentation}\"/>\r\n        <property name=\"presentationBaseUrl\" value=\"${presentationBaseURL}\"/>\r\n        <property name=\"preUploadedPresentationOverrideDefault\" value=\"${beans.presentationService.preUploadedPresentationOverrideDefault}\"/>\r\n    </bean>\r\n\r\n    <import resource=\"doc-conversion.xml\"/>\r\n    <import resource=\"bbb-redis-messaging.xml\"/>\r\n    <!-- moved the following import statement for turn-stun-servers.xml to resources.groovy to be able to use overlay config for turn/stun servers -->\r\n    <!--\t <import resource=\"turn-stun-servers.xml\"/>-->\r\n</beans>\r\n"], "filenames": ["bbb-common-web/build.sbt", "bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java", "bbb-common-web/src/main/java/org/bigbluebutton/web/services/callback/CallbackUrlService.java", "bigbluebutton-web/grails-app/conf/bigbluebutton.properties", "bigbluebutton-web/grails-app/conf/spring/resources.xml"], "buggy_code_start_loc": [108, 6, 153, 381, 95], "buggy_code_end_loc": [108, 284, 202, 381, 95], "fixing_code_start_loc": [109, 6, 152, 382, 96], "fixing_code_end_loc": [110, 357, 153, 390, 98], "type": "CWE-918", "message": "BigBlueButton is an open source virtual classroom designed to help teachers teach and learners learn. In affected versions are affected by a Server-Side Request Forgery (SSRF) vulnerability. In an `insertDocument` API request the user is able to supply a URL from which the presentation should be downloaded. This URL was being used without having been successfully validated first. An update to the `followRedirect` method in the `PresentationUrlDownloadService` has been made to validate all URLs to be used for presentation download. Two new properties `presentationDownloadSupportedProtocols` and `presentationDownloadBlockedHosts` have also been added to `bigbluebutton.properties` to allow administrators to define what protocols a URL must use and to explicitly define hosts that a presentation cannot be downloaded from. All URLs passed to `insertDocument` must conform to the requirements of the two previously mentioned properties. Additionally, these URLs must resolve to valid addresses, and these addresses must not be local or loopback addresses. There are no workarounds. Users are advised to upgrade to a patched version of BigBlueButton.", "other": {"cve": {"id": "CVE-2023-33176", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-26T20:15:10.063", "lastModified": "2023-07-05T17:49:17.157", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "BigBlueButton is an open source virtual classroom designed to help teachers teach and learners learn. In affected versions are affected by a Server-Side Request Forgery (SSRF) vulnerability. In an `insertDocument` API request the user is able to supply a URL from which the presentation should be downloaded. This URL was being used without having been successfully validated first. An update to the `followRedirect` method in the `PresentationUrlDownloadService` has been made to validate all URLs to be used for presentation download. Two new properties `presentationDownloadSupportedProtocols` and `presentationDownloadBlockedHosts` have also been added to `bigbluebutton.properties` to allow administrators to define what protocols a URL must use and to explicitly define hosts that a presentation cannot be downloaded from. All URLs passed to `insertDocument` must conform to the requirements of the two previously mentioned properties. Additionally, these URLs must resolve to valid addresses, and these addresses must not be local or loopback addresses. There are no workarounds. Users are advised to upgrade to a patched version of BigBlueButton."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigbluebutton:bigbluebutton:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.18", "matchCriteriaId": "3B7CCA1A-4A56-43B9-A9AA-BB999FB98A72"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigbluebutton:bigbluebutton:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndExcluding": "2.6.9", "matchCriteriaId": "55138784-E1EC-452E-8534-460BBB2A0C7C"}]}]}], "references": [{"url": "https://github.com/bigbluebutton/bigbluebutton/commit/43394dade595d0707384e4878357901537352415", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/commit/b18aff32e65a47f1eb2c800e86dcfc7a8fb05e71", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/pull/18045", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/pull/18052", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/security/advisories/GHSA-3q22-hph2-cff7", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/bigbluebutton/bigbluebutton/commit/43394dade595d0707384e4878357901537352415"}}