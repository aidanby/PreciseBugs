{"buggy_code": ["<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/**\n * Logs an administrator action taking any arguments as log data.\n */\nfunction log_admin_action()\n{\n\tglobal $db, $mybb;\n\n\t$data = func_get_args();\n\n\tif(count($data) == 1 && is_array($data[0]))\n\t{\n\t\t$data = $data[0];\n\t}\n\n\tif(!is_array($data))\n\t{\n\t\t$data = array($data);\n\t}\n\n\t$log_entry = array(\n\t\t\"uid\" => (int)$mybb->user['uid'],\n\t\t\"ipaddress\" => $db->escape_binary(my_inet_pton(get_ip())),\n\t\t\"dateline\" => TIME_NOW,\n\t\t\"module\" => $db->escape_string($mybb->get_input('module')),\n\t\t\"action\" => $db->escape_string($mybb->get_input('action')),\n\t\t\"data\" => $db->escape_string(@my_serialize($data))\n\t);\n\n\t$db->insert_query(\"adminlog\", $log_entry);\n}\n\n/**\n * Redirects the current user to a specified URL.\n *\n * @param string $url The URL to redirect to\n */\nfunction admin_redirect($url)\n{\n\tif(!headers_sent())\n\t{\n\t\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t\theader(\"Location: $url\");\n\t}\n\telse\n\t{\n\t\techo \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; url={$url}\\\">\";\n\t}\n\texit;\n}\n\n/**\n * Updates an administration session data array.\n *\n * @param string $name The name of the item in the data session to update\n * @param mixed $value The value\n */\nfunction update_admin_session($name, $value)\n{\n\tglobal $db, $admin_session;\n\n\t$admin_session['data'][$name] = $value;\n\t$updated_session = array(\n\t\t\"data\" => $db->escape_string(@my_serialize($admin_session['data']))\n\t);\n\t$db->update_query(\"adminsessions\", $updated_session, \"sid='{$admin_session['sid']}'\");\n}\n\n/**\n * Saves a \"flash message\" for the current user to be shown on their next page visit.\n *\n * @param string $message The message to show\n * @param string $type The type of message to be shown (success|error)\n */\nfunction flash_message($message, $type='')\n{\n\t$flash = array('message' => $message, 'type' => $type);\n\tupdate_admin_session('flash_message', $flash);\n}\n\n/**\n * Draw pagination for pages in the Admin CP.\n *\n * @param int $page The current page we're on\n * @param int $per_page The number of items per page\n * @param int $total_items The total number of items in this collection\n * @param string $url The URL for pagination of this collection\n * @return string The built pagination\n */\nfunction draw_admin_pagination($page, $per_page, $total_items, $url)\n{\n\tglobal $mybb, $lang;\n\n\tif($total_items <= $per_page)\n\t{\n\t\treturn '';\n\t}\n\n\t$pages = ceil($total_items / $per_page);\n\n\t$pagination = \"<div class=\\\"pagination\\\"><span class=\\\"pages\\\">{$lang->pages}: </span>\\n\";\n\n\tif($page > 1)\n\t{\n\t\t$prev = $page-1;\n\t\t$prev_page = fetch_page_url($url, $prev);\n\t\t$pagination .= \"<a href=\\\"{$prev_page}\\\" class=\\\"pagination_previous\\\">&laquo; {$lang->previous}</a> \\n\";\n\t}\n\n\t// Maximum number of \"page bits\" to show\n\tif(!$mybb->settings['maxmultipagelinks'])\n\t{\n\t\t$mybb->settings['maxmultipagelinks'] = 5;\n\t}\n\n\t$max_links = $mybb->settings['maxmultipagelinks'];\n\n\t$from = $page-floor($mybb->settings['maxmultipagelinks']/2);\n\t$to = $page+floor($mybb->settings['maxmultipagelinks']/2);\n\n\tif($from <= 0)\n\t{\n\t\t$from = 1;\n\t\t$to = $from+$max_links-1;\n\t}\n\n\tif($to > $pages)\n\t{\n\t\t$to = $pages;\n\t\t$from = $pages-$max_links+1;\n\t\tif($from <= 0)\n\t\t{\n\t\t\t$from = 1;\n\t\t}\n\t}\n\n\tif($to == 0)\n\t{\n\t\t$to = $pages;\n\t}\n\n\tif($from > 2)\n\t{\n\t\t$first = fetch_page_url($url, 1);\n\t\t$pagination .= \"<a href=\\\"{$first}\\\" title=\\\"{$lang->page} 1\\\" class=\\\"pagination_first\\\">1</a> ... \";\n\t}\n\n\tfor($i = $from; $i <= $to; ++$i)\n\t{\n\t\t$page_url = fetch_page_url($url, $i);\n\t\tif($page == $i)\n\t\t{\n\t\t\t$pagination .= \"<span class=\\\"pagination_current\\\">{$i}</span> \\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$pagination .= \"<a href=\\\"{$page_url}\\\" title=\\\"{$lang->page} {$i}\\\">{$i}</a> \\n\";\n\t\t}\n\t}\n\n\tif($to < $pages)\n\t{\n\t\t$last = fetch_page_url($url, $pages);\n\t\t$pagination .= \"... <a href=\\\"{$last}\\\" title=\\\"{$lang->page} {$pages}\\\" class=\\\"pagination_last\\\">{$pages}</a>\";\n\t}\n\n\tif($page < $pages)\n\t{\n\t\t$next = $page+1;\n\t\t$next_page = fetch_page_url($url, $next);\n\t\t$pagination .= \" <a href=\\\"{$next_page}\\\" class=\\\"pagination_next\\\">{$lang->next} &raquo;</a>\\n\";\n\t}\n\t$pagination .= \"</div>\\n\";\n\treturn $pagination;\n}\n\n/**\n * Builds a CSV parent list for a particular forum.\n *\n * @param int $fid The forum ID\n * @param string $navsep Optional separator - defaults to comma for CSV list\n * @return string The built parent list\n */\nfunction make_parent_list($fid, $navsep=\",\")\n{\n\tglobal $pforumcache, $db;\n\n\tif(!$pforumcache)\n\t{\n\t\t$query = $db->simple_select(\"forums\", \"name, fid, pid\", \"\", array(\"order_by\" => \"disporder, pid\"));\n\t\twhile($forum = $db->fetch_array($query))\n\t\t{\n\t\t\t$pforumcache[$forum['fid']][$forum['pid']] = $forum;\n\t\t}\n\t}\n\n\treset($pforumcache);\n\treset($pforumcache[$fid]);\n\n\t$navigation = '';\n\n\tforeach($pforumcache[$fid] as $key => $forum)\n\t{\n\t\tif($fid == $forum['fid'])\n\t\t{\n\t\t\tif(!empty($pforumcache[$forum['pid']]))\n\t\t\t{\n\t\t\t\t$navigation = make_parent_list($forum['pid'], $navsep).$navigation;\n\t\t\t}\n\n\t\t\tif($navigation)\n\t\t\t{\n\t\t\t\t$navigation .= $navsep;\n\t\t\t}\n\t\t\t$navigation .= $forum['fid'];\n\t\t}\n\t}\n\treturn $navigation;\n}\n\n/**\n * @param int $fid\n */\nfunction save_quick_perms($fid)\n{\n\tglobal $db, $inherit, $canview, $canpostthreads, $canpostreplies, $canpostpolls, $canpostattachments, $cache;\n\n\t$permission_fields = array();\n\n\t$field_list = $db->show_fields_from(\"forumpermissions\");\n\tforeach($field_list as $field)\n\t{\n\t\tif(strpos($field['Field'], 'can') !== false || strpos($field['Field'], 'mod') !== false)\n\t\t{\n\t\t\t$permission_fields[$field['Field']] = 1;\n\t\t}\n\t}\n\n\t// \"Can Only View Own Threads\" and \"Can Only Reply Own Threads\" permissions are forum permission only options\n\t$usergroup_permission_fields = $permission_fields;\n\tunset($usergroup_permission_fields['canonlyviewownthreads']);\n\tunset($usergroup_permission_fields['canonlyreplyownthreads']);\n\n\t$query = $db->simple_select(\"usergroups\", \"gid\");\n\twhile($usergroup = $db->fetch_array($query))\n\t{\n\t\t$query2 = $db->simple_select(\"forumpermissions\", $db->escape_string(implode(',', array_keys($permission_fields))), \"fid='{$fid}' AND gid='{$usergroup['gid']}'\", array('limit' => 1));\n\t\t$existing_permissions = $db->fetch_array($query2);\n\n\t\tif(!$existing_permissions)\n\t\t{\n\t\t\t$query2 = $db->simple_select(\"usergroups\", $db->escape_string(implode(',', array_keys($usergroup_permission_fields))), \"gid='{$usergroup['gid']}'\", array('limit' => 1));\n\t\t\t$existing_permissions = $db->fetch_array($query2);\n\t\t}\n\n\t\t// Delete existing permissions\n\t\t$db->delete_query(\"forumpermissions\", \"fid='{$fid}' AND gid='{$usergroup['gid']}'\");\n\n\t\t// Only insert the new ones if we're using custom permissions\n\t\tif(empty($inherit[$usergroup['gid']]))\n\t\t{\n\t\t\tif(!empty($canview[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$pview = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pview = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostthreads[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$pthreads = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pthreads = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostreplies[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$preplies = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$preplies = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostpolls[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$ppolls = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ppolls = 0;\n\t\t\t}\n\n\t\t\tif(!$preplies && !$pthreads)\n\t\t\t{\n\t\t\t\t$ppost = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ppost = 1;\n\t\t\t}\n\n\t\t\t$insertquery = array(\n\t\t\t\t\"fid\" => (int)$fid,\n\t\t\t\t\"gid\" => (int)$usergroup['gid'],\n\t\t\t\t\"canview\" => (int)$pview,\n\t\t\t\t\"canpostthreads\" => (int)$pthreads,\n\t\t\t\t\"canpostreplys\" => (int)$preplies,\n\t\t\t\t\"canpostpolls\" => (int)$ppolls,\n\t\t\t);\n\n\t\t\tforeach($permission_fields as $field => $value)\n\t\t\t{\n\t\t\t\tif(array_key_exists($field, $insertquery))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$insertquery[$db->escape_string($field)] = isset($existing_permissions[$field]) ? (int)$existing_permissions[$field] : 0;\n\t\t\t}\n\n\t\t\t$db->insert_query(\"forumpermissions\", $insertquery);\n\t\t}\n\t}\n\t$cache->update_forumpermissions();\n}\n\n/**\n * Checks if a particular user has the necessary permissions to access a particular page.\n *\n * @param array $action Array containing module and action to check for\n * @param bool $error\n * @return bool\n */\nfunction check_admin_permissions($action, $error = true)\n{\n\tglobal $mybb, $page, $lang, $modules_dir;\n\n\tif(is_super_admin($mybb->user['uid']))\n\t{\n\t\treturn true;\n\t}\n\n\trequire_once $modules_dir.\"/\".$action['module'].\"/module_meta.php\";\n\tif(function_exists($action['module'].\"_admin_permissions\"))\n\t{\n\t\t$func = $action['module'].\"_admin_permissions\";\n\t\t$permissions = $func();\n\t\tif(\n\t\t\t!empty($permissions['permissions'][$action['action']]) &&\n\t\t\tempty($mybb->admin['permissions'][$action['module']][$action['action']])\n\t\t)\n\t\t{\n\t\t\tif($error)\n\t\t\t{\n\t\t\t\t$page->output_header($lang->access_denied);\n\t\t\t\t$page->add_breadcrumb_item($lang->access_denied, \"index.php?module=home-index\");\n\t\t\t\t$page->output_error(\"<b>{$lang->access_denied}</b><ul><li style=\\\"list-style-type: none;\\\">{$lang->access_denied_desc}</li></ul>\");\n\t\t\t\t$page->output_footer();\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Fetches the list of administrator permissions for a particular user or group\n *\n * @param int $get_uid The user ID to fetch permissions for\n * @param int $get_gid The (optional) group ID to fetch permissions for\n * @return array Array of permissions for specified user or group\n */\nfunction get_admin_permissions($get_uid=0, $get_gid=0)\n{\n\tglobal $db, $mybb;\n\n\t// Set UID and GID if none\n\t$uid = $get_uid;\n\t$gid = $get_gid;\n\n\t$gid_array = array();\n\n\tif($uid === 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif(!$gid)\n\t{\n\t\t// Prepare user's groups since the group isn't specified\n\t\t$gid_array[] = (-1) * (int)$mybb->user['usergroup'];\n\n\t\tif($mybb->user['additionalgroups'])\n\t\t{\n\t\t\t$additional_groups = explode(',', $mybb->user['additionalgroups']);\n\n\t\t\tif(!empty($additional_groups))\n\t\t\t{\n\t\t\t\t// Make sure gids are negative\n\t\t\t\tforeach($additional_groups as $g)\n\t\t\t\t{\n\t\t\t\t\t$gid_array[] = (-1) * abs($g);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Group is specified\n\t\t// Make sure gid is negative\n\t\t$gid_array[] = (-1) * abs($gid);\n\t}\n\n\t// What are we trying to find?\n\tif($get_gid && !$get_uid)\n\t{\n\t\t// A group only\n\n\t\t$options = array(\n\t\t\t\"order_by\" => \"uid\",\n\t\t\t\"order_dir\" => \"ASC\",\n\t\t\t\"limit\" => \"1\"\n\t\t);\n\t\t$query = $db->simple_select(\"adminoptions\", \"permissions\", \"(uid='-{$get_gid}' OR uid='0') AND permissions != ''\", $options);\n\t\treturn my_unserialize($db->fetch_field($query, \"permissions\"));\n\t}\n\telse\n\t{\n\t\t// A user and/or group\n\n\t\t$options = array(\n\t\t\t\"order_by\" => \"uid\",\n\t\t\t\"order_dir\" => \"DESC\"\n\t\t);\n\n\t\t// Prepare user's groups into SQL format\n\t\t$group_sql = '';\n\t\tforeach($gid_array as $gid)\n\t\t{\n\t\t\t$group_sql .= \" OR uid='{$gid}'\";\n\t\t}\n\n\t\t$perms_group = array();\n\t\t$query = $db->simple_select(\"adminoptions\", \"permissions, uid\", \"(uid='{$uid}'{$group_sql}) AND permissions != ''\", $options);\n\t\twhile($perm = $db->fetch_array($query))\n\t\t{\n\t\t\t$perm['permissions'] = my_unserialize($perm['permissions']);\n\n\t\t\t// Sorting out which permission is which\n\t\t\tif($perm['uid'] > 0)\n\t\t\t{\n\t\t\t\t$perms_user = $perm;\n\t\t\t\treturn $perms_user['permissions'];\n\t\t\t}\n\t\t\telseif($perm['uid'] < 0)\n\t\t\t{\n\t\t\t\t$perms_group[] = $perm['permissions'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$perms_def = $perm['permissions'];\n\t\t\t}\n\t\t}\n\n\t\t// Figure out group permissions...ugh.\n\t\tforeach($perms_group as $gperms)\n\t\t{\n\t\t\tif(!isset($final_group_perms))\n\t\t\t{\n\t\t\t\t// Use this group as the base for admin group permissions\n\t\t\t\t$final_group_perms = $gperms;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loop through each specific permission to find the highest permission\n\t\t\tforeach($gperms as $perm_name => $perm_value)\n\t\t\t{\n\t\t\t\tif($final_group_perms[$perm_name] != '1' && $perm_value == '1')\n\t\t\t\t{\n\t\t\t\t\t$final_group_perms[$perm_name] = '1';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send specific user, or group permissions before default.\n\t\t// If user's permission are explicitly set, they've already been returned above.\n\t\tif(isset($final_group_perms))\n\t\t{\n\t\t\treturn $final_group_perms;\n\t\t}\n\t\telseif(isset($perms_def))\n\t\t{\n\t\t\treturn $perms_def;\n\t\t}\n\n\t\treturn array();\n\t}\n}\n\n/**\n * Fetch the iconv/mb encoding for a particular MySQL encoding\n *\n * @param string $mysql_encoding The MySQL encoding\n * @return string The iconv/mb encoding\n */\nfunction fetch_iconv_encoding($mysql_encoding)\n{\n    $mysql_encoding = explode(\"_\", $mysql_encoding);\n    switch($mysql_encoding[0])\n    {\n        case \"utf8\":\n            return \"utf-8\";\n\t\t\tbreak;\n        case \"latin1\":\n            return \"iso-8859-1\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn $mysql_encoding[0];\n    }\n}\n\n/**\n * Adds/Updates a Page/Tab to the permissions array in the adminoptions table\n *\n * @param string $tab The name of the tab that is being affected\n * @param string $page The name of the page being affected (optional - if not specified, will affect everything under the specified tab)\n * @param integer $default Default permissions for the page (1 for allowed - 0 for disallowed - -1 to remove)\n */\nfunction change_admin_permission($tab, $page=\"\", $default=1)\n{\n\tglobal $db;\n\n\t$query = $db->simple_select(\"adminoptions\", \"uid, permissions\", \"permissions != ''\");\n\twhile($adminoption = $db->fetch_array($query))\n\t{\n\t\t$adminoption['permissions'] = my_unserialize($adminoption['permissions']);\n\n\t\tif($default == -1)\n\t\t{\n\t\t\tif(!empty($page))\n\t\t\t{\n\t\t\t\tunset($adminoption['permissions'][$tab][$page]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunset($adminoption['permissions'][$tab]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!empty($page))\n\t\t\t{\n\t\t\t\tif($adminoption['uid'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab][$page] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab][$page] = $default;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif($adminoption['uid'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab]['tab'] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab]['tab'] = $default;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$db->update_query(\"adminoptions\", array('permissions' => $db->escape_string(my_serialize($adminoption['permissions']))), \"uid='{$adminoption['uid']}'\");\n\t}\n}\n\n/**\n * Checks if we have had too many attempts at logging into the ACP\n *\n * @param integer $uid The uid of the admin to check\n * @param boolean $return_num Return an array of the number of attempts and expiry time? (default false)\n * @return mixed Return an array if the second parameter is true, boolean otherwise.\n */\nfunction login_attempt_check_acp($uid=0, $return_num=false)\n{\n\tglobal $db, $mybb;\n\n\t$attempts['loginattempts'] = 0;\n\n\tif($uid > 0)\n\t{\n\t\t$query = $db->simple_select(\"adminoptions\", \"loginattempts, loginlockoutexpiry\", \"uid='\".(int)$uid.\"'\", 1);\n\t\t$attempts = $db->fetch_array($query);\n\n\t\tif(!$attempts)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif($attempts['loginattempts'] <= 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif($mybb->settings['maxloginattempts'] > 0 && $attempts['loginattempts'] >= $mybb->settings['maxloginattempts'])\n\t{\n\t\t// Has the expiry dateline been set yet?\n\t\tif($attempts['loginlockoutexpiry'] == 0 && $return_num == false)\n\t\t{\n\t\t\t$db->update_query(\"adminoptions\", array(\"loginlockoutexpiry\" => TIME_NOW+((int)$mybb->settings['loginattemptstimeout']*60)), \"uid='\".(int)$uid.\"'\");\n\t\t}\n\n\t\t// Are we returning the # of login attempts?\n\t\tif($return_num == true)\n\t\t{\n\t\t\treturn $attempts;\n\t\t}\n\t\t// Otherwise are we still locked out?\n\t\telse if($attempts['loginlockoutexpiry'] > TIME_NOW)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks whether the administrator is on a mobile device\n *\n * @param string $useragent The useragent to be checked\n * @return boolean A true/false depending on if the administrator is on a mobile\n */\nfunction is_mobile($useragent)\n{\n\treturn preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\", $useragent);\n}\n\n/**\n * Checks whether there are any 'security' issues in templates via complex syntax\n *\n * @param string $template The template to be scanned\n * @return boolean A true/false depending on if an issue was detected\n */\nfunction check_template($template)\n{\n\t// Check to see if our database password is in the template\n\tif(preg_match('#\\$config\\[(([\\'|\"]database[\\'|\"])|([^\\'\"].*?))\\]\\[(([\\'|\"](database|hostname|password|table_prefix|username)[\\'|\"])|([^\\'\"].*?))\\]#i', $template)) \n\t{\n\t\treturn true;\n\t}\n\n\t// System calls via backtick\n\tif(preg_match('#\\$\\s*\\{#', $template))\n\t{\n\t\treturn true;\n\t}\n\n\t// Any other malicious acts?\n\t// Courtesy of ZiNgA BuRgA\n\tif(preg_match(\"~\\\\{\\\\$.+?\\\\}~s\", preg_replace('~\\\\{\\\\$+[a-zA-Z_][a-zA-Z_0-9]*((?:-\\\\>|\\\\:\\\\:)\\\\$*[a-zA-Z_][a-zA-Z_0-9]*|\\\\[\\s*\\\\$*([\\'\"]?)[a-zA-Z_ 0-9 ]+\\\\2\\\\]\\s*)*\\\\}~', '', $template)))\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Provides a function to entirely delete a user's posts, and find the threads attached to them\n *\n * @param integer $uid The uid of the user\n * @param int $date A UNIX timestamp to delete posts that are older\n * @return array An array of threads to delete, threads/forums to recount\n */\nfunction delete_user_posts($uid, $date)\n{\n\tglobal $db;\n\t$uid = (int)$uid;\n\n\t// Build an array of posts to delete\n\t$postcache = array();\n\t$query = $db->simple_select(\"posts\", \"pid\", \"uid = '\".$uid.\"' AND dateline < '\".$date.\"'\");\n\twhile($post = $db->fetch_array($query))\n\t{\n\t\t$postcache[] = $post['pid'];\n\t}\n\n\tif(!$db->num_rows($query))\n\t{\n\t\treturn false;\n\t}\n\telseif(!empty($postcache))\n\t{\n\t\t// Let's start deleting posts\n\t\t$user_posts = implode(\",\", $postcache);\n\t\t$query = $db->query(\"\n\t\t\tSELECT p.pid, p.visible, f.usepostcounts, t.tid AS thread, t.firstpost, t.fid AS forum\n\t\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"forums f ON (f.fid=p.fid)\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"threads t ON (t.tid=p.tid)\n\t\t\tWHERE p.pid IN ({$user_posts})\n\t\t\");\n\n\t\t$post_count = 0; // Collect the post number to deduct from the user's postcount\n\t\t$thread_list = array();\n\t\t$forum_list = array();\n\t\t$delete_thread_list = array();\n\t\tif(!$db->num_rows($query))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile($post = $db->fetch_array($query))\n\t\t\t{\n\t\t\t\tif($post['usepostcounts'] != 0 && $post['visible'] == 1)\n\t\t\t\t{\n\t\t\t\t\t++$post_count;\n\t\t\t\t}\n\n\t\t\t\tif($post['pid'] == $post['firstpost'])\n\t\t\t\t{\n\t\t\t\t\t$delete_thread_list[] = $post['thread'];\n\t\t\t\t}\n\n\t\t\t\tif(!in_array($post['thread'], $thread_list) && !in_array($post['thread'], $delete_thread_list))\n\t\t\t\t{\n\t\t\t\t\t$thread_list[] = $post['thread']; // Threads that have been affected by this action, that aren't marked to be deleted\n\t\t\t\t}\n\t\t\t\tif(!in_array($post['forum'], $forum_list))\n\t\t\t\t{\n\t\t\t\t\t$forum_list[] = $post['forum']; // Forums that have been affected, too\n\t\t\t\t}\n\n\t\t\t\t// Remove the attachments to this post, then delete the post\n\t\t\t\tremove_attachments($post['pid']);\n\t\t\t\t$db->delete_query(\"posts\", \"pid = '\".$post['pid'].\"'\");\n\t\t\t\t$db->delete_query(\"pollvotes\", \"pid = '\".$post['pid'].\"'\"); // Delete pollvotes attached to this post\n\t\t\t}\n\n\t\t\t$db->update_query(\"users\", array(\"postnum\" => \"postnum-\".$post_count.\"\"), \"uid='\".$uid.\"'\", 1, true);\n\n\t\t\t$to_return = array(\n\t\t\t\t'to_delete' => $delete_thread_list,\n\t\t\t\t'thread_update' => $thread_list,\n\t\t\t\t'forum_update' => $forum_list\n\t\t\t);\n\n\t\t\treturn $to_return;\n\t\t}\n\t}\n}\n\n/**\n * Prints a selection JavaScript code for selectable groups/forums fields.\n */\nfunction print_selection_javascript()\n{\n\tstatic $already_printed = false;\n\n\tif($already_printed)\n\t{\n\t\treturn;\n\t}\n\n\t$already_printed = true;\n\n\techo \"<script type=\\\"text/javascript\\\">\n\tfunction checkAction(id)\n\t{\n\t\tvar checked = '';\n\n\t\t$('.'+id+'_forums_groups_check').each(function(e, val)\n\t\t{\n\t\t\tif($(this).prop('checked') == true)\n\t\t\t{\n\t\t\t\tchecked = $(this).val();\n\t\t\t}\n\t\t});\n\n\t\t$('.'+id+'_forums_groups').each(function(e)\n\t\t{\n\t\t\t$(this).hide();\n\t\t});\n\n\t\tif($('#'+id+'_forums_groups_'+checked))\n\t\t{\n\t\t\t$('#'+id+'_forums_groups_'+checked).show();\n\t\t}\n\t}\n</script>\";\n}\n\nif(!function_exists('array_column'))\n{\n\tfunction array_column($input, $column_key)\n\t{\n\t\t$values = array();\n\n\t\tif(!is_array($input))\n\t\t{\n\t\t\t$input = array($input);\n\t\t}\n\n\t\tforeach($input as $val)\n\t\t{\n\t\t\tif(is_array($val) && isset($val[$column_key]))\n\t\t\t{\n\t\t\t\t$values[] = $val[$column_key];\n\t\t\t}\n\t\t\telseif(is_object($val) && isset($val->$column_key))\n\t\t\t{\n\t\t\t\t$values[] = $val->$column_key;\n\t\t\t}\n\t\t}\n\n\t\treturn $values;\n\t}\n}\n\n/**\n * Output the auto redirect block.\n *\n * @param \\Form $form An existing form instance to wrap the redirect within.\n * @param string $prompt The prompt to show.\n */\nfunction output_auto_redirect($form, $prompt)\n{\n\tglobal $lang;\n\n\techo <<<HTML\n<div class=\"confirm_action\">\n\t<p>{$prompt}</p>\n\t<br />\n\t<script type=\"text/javascript\">\n\t\t$(function() { \n\t\t\tvar button = $(\"#proceed_button\"); \n\t\t\tif (button.length > 0) {\n\t\t\t\t// create a temporary div element to render the text within, un-escaping HTML entities\n\t\t\t\tvar textElement = $('<div/>').html('{$lang->automatically_redirecting}');\n\t\t\t\n\t\t\t\tbutton.val(textElement.text());\n\t\t\t\tbutton.attr(\"disabled\", true);\n\t\t\t\tbutton.css(\"color\", \"#aaa\");\n\t\t\t\tbutton.css(\"borderColor\", \"#aaa\");\n\t\t\t\t\n\t\t\t\tvar parent_form = button.closest('form');\n\n\t\t\t\tif (parent_form.length > 0) {\n\t\t\t\t\tparent_form.submit();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t</script>\n\t<p class=\"buttons\">\n\t\t{$form->generate_submit_button($lang->proceed, array('class' => 'button_yes', 'id' => 'proceed_button'))}\n\t</p>\n</div>\nHTML;\n}"], "fixing_code": ["<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/**\n * Logs an administrator action taking any arguments as log data.\n */\nfunction log_admin_action()\n{\n\tglobal $db, $mybb;\n\n\t$data = func_get_args();\n\n\tif(count($data) == 1 && is_array($data[0]))\n\t{\n\t\t$data = $data[0];\n\t}\n\n\tif(!is_array($data))\n\t{\n\t\t$data = array($data);\n\t}\n\n\t$log_entry = array(\n\t\t\"uid\" => (int)$mybb->user['uid'],\n\t\t\"ipaddress\" => $db->escape_binary(my_inet_pton(get_ip())),\n\t\t\"dateline\" => TIME_NOW,\n\t\t\"module\" => $db->escape_string($mybb->get_input('module')),\n\t\t\"action\" => $db->escape_string($mybb->get_input('action')),\n\t\t\"data\" => $db->escape_string(@my_serialize($data))\n\t);\n\n\t$db->insert_query(\"adminlog\", $log_entry);\n}\n\n/**\n * Redirects the current user to a specified URL.\n *\n * @param string $url The URL to redirect to\n */\nfunction admin_redirect($url)\n{\n\tif(!headers_sent())\n\t{\n\t\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t\theader(\"Location: $url\");\n\t}\n\telse\n\t{\n\t\techo \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; url={$url}\\\">\";\n\t}\n\texit;\n}\n\n/**\n * Updates an administration session data array.\n *\n * @param string $name The name of the item in the data session to update\n * @param mixed $value The value\n */\nfunction update_admin_session($name, $value)\n{\n\tglobal $db, $admin_session;\n\n\t$admin_session['data'][$name] = $value;\n\t$updated_session = array(\n\t\t\"data\" => $db->escape_string(@my_serialize($admin_session['data']))\n\t);\n\t$db->update_query(\"adminsessions\", $updated_session, \"sid='{$admin_session['sid']}'\");\n}\n\n/**\n * Saves a \"flash message\" for the current user to be shown on their next page visit.\n *\n * @param string $message The message to show\n * @param string $type The type of message to be shown (success|error)\n */\nfunction flash_message($message, $type='')\n{\n\t$flash = array('message' => $message, 'type' => $type);\n\tupdate_admin_session('flash_message', $flash);\n}\n\n/**\n * Draw pagination for pages in the Admin CP.\n *\n * @param int $page The current page we're on\n * @param int $per_page The number of items per page\n * @param int $total_items The total number of items in this collection\n * @param string $url The URL for pagination of this collection\n * @return string The built pagination\n */\nfunction draw_admin_pagination($page, $per_page, $total_items, $url)\n{\n\tglobal $mybb, $lang;\n\n\tif($total_items <= $per_page)\n\t{\n\t\treturn '';\n\t}\n\n\t$pages = ceil($total_items / $per_page);\n\n\t$pagination = \"<div class=\\\"pagination\\\"><span class=\\\"pages\\\">{$lang->pages}: </span>\\n\";\n\n\tif($page > 1)\n\t{\n\t\t$prev = $page-1;\n\t\t$prev_page = fetch_page_url($url, $prev);\n\t\t$pagination .= \"<a href=\\\"{$prev_page}\\\" class=\\\"pagination_previous\\\">&laquo; {$lang->previous}</a> \\n\";\n\t}\n\n\t// Maximum number of \"page bits\" to show\n\tif(!$mybb->settings['maxmultipagelinks'])\n\t{\n\t\t$mybb->settings['maxmultipagelinks'] = 5;\n\t}\n\n\t$max_links = $mybb->settings['maxmultipagelinks'];\n\n\t$from = $page-floor($mybb->settings['maxmultipagelinks']/2);\n\t$to = $page+floor($mybb->settings['maxmultipagelinks']/2);\n\n\tif($from <= 0)\n\t{\n\t\t$from = 1;\n\t\t$to = $from+$max_links-1;\n\t}\n\n\tif($to > $pages)\n\t{\n\t\t$to = $pages;\n\t\t$from = $pages-$max_links+1;\n\t\tif($from <= 0)\n\t\t{\n\t\t\t$from = 1;\n\t\t}\n\t}\n\n\tif($to == 0)\n\t{\n\t\t$to = $pages;\n\t}\n\n\tif($from > 2)\n\t{\n\t\t$first = fetch_page_url($url, 1);\n\t\t$pagination .= \"<a href=\\\"{$first}\\\" title=\\\"{$lang->page} 1\\\" class=\\\"pagination_first\\\">1</a> ... \";\n\t}\n\n\tfor($i = $from; $i <= $to; ++$i)\n\t{\n\t\t$page_url = fetch_page_url($url, $i);\n\t\tif($page == $i)\n\t\t{\n\t\t\t$pagination .= \"<span class=\\\"pagination_current\\\">{$i}</span> \\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$pagination .= \"<a href=\\\"{$page_url}\\\" title=\\\"{$lang->page} {$i}\\\">{$i}</a> \\n\";\n\t\t}\n\t}\n\n\tif($to < $pages)\n\t{\n\t\t$last = fetch_page_url($url, $pages);\n\t\t$pagination .= \"... <a href=\\\"{$last}\\\" title=\\\"{$lang->page} {$pages}\\\" class=\\\"pagination_last\\\">{$pages}</a>\";\n\t}\n\n\tif($page < $pages)\n\t{\n\t\t$next = $page+1;\n\t\t$next_page = fetch_page_url($url, $next);\n\t\t$pagination .= \" <a href=\\\"{$next_page}\\\" class=\\\"pagination_next\\\">{$lang->next} &raquo;</a>\\n\";\n\t}\n\t$pagination .= \"</div>\\n\";\n\treturn $pagination;\n}\n\n/**\n * Builds a CSV parent list for a particular forum.\n *\n * @param int $fid The forum ID\n * @param string $navsep Optional separator - defaults to comma for CSV list\n * @return string The built parent list\n */\nfunction make_parent_list($fid, $navsep=\",\")\n{\n\tglobal $pforumcache, $db;\n\n\tif(!$pforumcache)\n\t{\n\t\t$query = $db->simple_select(\"forums\", \"name, fid, pid\", \"\", array(\"order_by\" => \"disporder, pid\"));\n\t\twhile($forum = $db->fetch_array($query))\n\t\t{\n\t\t\t$pforumcache[$forum['fid']][$forum['pid']] = $forum;\n\t\t}\n\t}\n\n\treset($pforumcache);\n\treset($pforumcache[$fid]);\n\n\t$navigation = '';\n\n\tforeach($pforumcache[$fid] as $key => $forum)\n\t{\n\t\tif($fid == $forum['fid'])\n\t\t{\n\t\t\tif(!empty($pforumcache[$forum['pid']]))\n\t\t\t{\n\t\t\t\t$navigation = make_parent_list($forum['pid'], $navsep).$navigation;\n\t\t\t}\n\n\t\t\tif($navigation)\n\t\t\t{\n\t\t\t\t$navigation .= $navsep;\n\t\t\t}\n\t\t\t$navigation .= $forum['fid'];\n\t\t}\n\t}\n\treturn $navigation;\n}\n\n/**\n * @param int $fid\n */\nfunction save_quick_perms($fid)\n{\n\tglobal $db, $inherit, $canview, $canpostthreads, $canpostreplies, $canpostpolls, $canpostattachments, $cache;\n\n\t$permission_fields = array();\n\n\t$field_list = $db->show_fields_from(\"forumpermissions\");\n\tforeach($field_list as $field)\n\t{\n\t\tif(strpos($field['Field'], 'can') !== false || strpos($field['Field'], 'mod') !== false)\n\t\t{\n\t\t\t$permission_fields[$field['Field']] = 1;\n\t\t}\n\t}\n\n\t// \"Can Only View Own Threads\" and \"Can Only Reply Own Threads\" permissions are forum permission only options\n\t$usergroup_permission_fields = $permission_fields;\n\tunset($usergroup_permission_fields['canonlyviewownthreads']);\n\tunset($usergroup_permission_fields['canonlyreplyownthreads']);\n\n\t$query = $db->simple_select(\"usergroups\", \"gid\");\n\twhile($usergroup = $db->fetch_array($query))\n\t{\n\t\t$query2 = $db->simple_select(\"forumpermissions\", $db->escape_string(implode(',', array_keys($permission_fields))), \"fid='{$fid}' AND gid='{$usergroup['gid']}'\", array('limit' => 1));\n\t\t$existing_permissions = $db->fetch_array($query2);\n\n\t\tif(!$existing_permissions)\n\t\t{\n\t\t\t$query2 = $db->simple_select(\"usergroups\", $db->escape_string(implode(',', array_keys($usergroup_permission_fields))), \"gid='{$usergroup['gid']}'\", array('limit' => 1));\n\t\t\t$existing_permissions = $db->fetch_array($query2);\n\t\t}\n\n\t\t// Delete existing permissions\n\t\t$db->delete_query(\"forumpermissions\", \"fid='{$fid}' AND gid='{$usergroup['gid']}'\");\n\n\t\t// Only insert the new ones if we're using custom permissions\n\t\tif(empty($inherit[$usergroup['gid']]))\n\t\t{\n\t\t\tif(!empty($canview[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$pview = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pview = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostthreads[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$pthreads = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pthreads = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostreplies[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$preplies = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$preplies = 0;\n\t\t\t}\n\n\t\t\tif(!empty($canpostpolls[$usergroup['gid']]))\n\t\t\t{\n\t\t\t\t$ppolls = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ppolls = 0;\n\t\t\t}\n\n\t\t\tif(!$preplies && !$pthreads)\n\t\t\t{\n\t\t\t\t$ppost = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ppost = 1;\n\t\t\t}\n\n\t\t\t$insertquery = array(\n\t\t\t\t\"fid\" => (int)$fid,\n\t\t\t\t\"gid\" => (int)$usergroup['gid'],\n\t\t\t\t\"canview\" => (int)$pview,\n\t\t\t\t\"canpostthreads\" => (int)$pthreads,\n\t\t\t\t\"canpostreplys\" => (int)$preplies,\n\t\t\t\t\"canpostpolls\" => (int)$ppolls,\n\t\t\t);\n\n\t\t\tforeach($permission_fields as $field => $value)\n\t\t\t{\n\t\t\t\tif(array_key_exists($field, $insertquery))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$insertquery[$db->escape_string($field)] = isset($existing_permissions[$field]) ? (int)$existing_permissions[$field] : 0;\n\t\t\t}\n\n\t\t\t$db->insert_query(\"forumpermissions\", $insertquery);\n\t\t}\n\t}\n\t$cache->update_forumpermissions();\n}\n\n/**\n * Checks if a particular user has the necessary permissions to access a particular page.\n *\n * @param array $action Array containing module and action to check for\n * @param bool $error\n * @return bool\n */\nfunction check_admin_permissions($action, $error = true)\n{\n\tglobal $mybb, $page, $lang, $modules_dir;\n\n\tif(is_super_admin($mybb->user['uid']))\n\t{\n\t\treturn true;\n\t}\n\n\trequire_once $modules_dir.\"/\".$action['module'].\"/module_meta.php\";\n\tif(function_exists($action['module'].\"_admin_permissions\"))\n\t{\n\t\t$func = $action['module'].\"_admin_permissions\";\n\t\t$permissions = $func();\n\t\tif(\n\t\t\t!empty($permissions['permissions'][$action['action']]) &&\n\t\t\tempty($mybb->admin['permissions'][$action['module']][$action['action']])\n\t\t)\n\t\t{\n\t\t\tif($error)\n\t\t\t{\n\t\t\t\t$page->output_header($lang->access_denied);\n\t\t\t\t$page->add_breadcrumb_item($lang->access_denied, \"index.php?module=home-index\");\n\t\t\t\t$page->output_error(\"<b>{$lang->access_denied}</b><ul><li style=\\\"list-style-type: none;\\\">{$lang->access_denied_desc}</li></ul>\");\n\t\t\t\t$page->output_footer();\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Fetches the list of administrator permissions for a particular user or group\n *\n * @param int $get_uid The user ID to fetch permissions for\n * @param int $get_gid The (optional) group ID to fetch permissions for\n * @return array Array of permissions for specified user or group\n */\nfunction get_admin_permissions($get_uid=0, $get_gid=0)\n{\n\tglobal $db, $mybb;\n\n\t// Set UID and GID if none\n\t$uid = $get_uid;\n\t$gid = $get_gid;\n\n\t$gid_array = array();\n\n\tif($uid === 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif(!$gid)\n\t{\n\t\t// Prepare user's groups since the group isn't specified\n\t\t$gid_array[] = (-1) * (int)$mybb->user['usergroup'];\n\n\t\tif($mybb->user['additionalgroups'])\n\t\t{\n\t\t\t$additional_groups = explode(',', $mybb->user['additionalgroups']);\n\n\t\t\tif(!empty($additional_groups))\n\t\t\t{\n\t\t\t\t// Make sure gids are negative\n\t\t\t\tforeach($additional_groups as $g)\n\t\t\t\t{\n\t\t\t\t\t$gid_array[] = (-1) * abs($g);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Group is specified\n\t\t// Make sure gid is negative\n\t\t$gid_array[] = (-1) * abs($gid);\n\t}\n\n\t// What are we trying to find?\n\tif($get_gid && !$get_uid)\n\t{\n\t\t// A group only\n\n\t\t$options = array(\n\t\t\t\"order_by\" => \"uid\",\n\t\t\t\"order_dir\" => \"ASC\",\n\t\t\t\"limit\" => \"1\"\n\t\t);\n\t\t$query = $db->simple_select(\"adminoptions\", \"permissions\", \"(uid='-{$get_gid}' OR uid='0') AND permissions != ''\", $options);\n\t\treturn my_unserialize($db->fetch_field($query, \"permissions\"));\n\t}\n\telse\n\t{\n\t\t// A user and/or group\n\n\t\t$options = array(\n\t\t\t\"order_by\" => \"uid\",\n\t\t\t\"order_dir\" => \"DESC\"\n\t\t);\n\n\t\t// Prepare user's groups into SQL format\n\t\t$group_sql = '';\n\t\tforeach($gid_array as $gid)\n\t\t{\n\t\t\t$group_sql .= \" OR uid='{$gid}'\";\n\t\t}\n\n\t\t$perms_group = array();\n\t\t$query = $db->simple_select(\"adminoptions\", \"permissions, uid\", \"(uid='{$uid}'{$group_sql}) AND permissions != ''\", $options);\n\t\twhile($perm = $db->fetch_array($query))\n\t\t{\n\t\t\t$perm['permissions'] = my_unserialize($perm['permissions']);\n\n\t\t\t// Sorting out which permission is which\n\t\t\tif($perm['uid'] > 0)\n\t\t\t{\n\t\t\t\t$perms_user = $perm;\n\t\t\t\treturn $perms_user['permissions'];\n\t\t\t}\n\t\t\telseif($perm['uid'] < 0)\n\t\t\t{\n\t\t\t\t$perms_group[] = $perm['permissions'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$perms_def = $perm['permissions'];\n\t\t\t}\n\t\t}\n\n\t\t// Figure out group permissions...ugh.\n\t\tforeach($perms_group as $gperms)\n\t\t{\n\t\t\tif(!isset($final_group_perms))\n\t\t\t{\n\t\t\t\t// Use this group as the base for admin group permissions\n\t\t\t\t$final_group_perms = $gperms;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loop through each specific permission to find the highest permission\n\t\t\tforeach($gperms as $perm_name => $perm_value)\n\t\t\t{\n\t\t\t\tif($final_group_perms[$perm_name] != '1' && $perm_value == '1')\n\t\t\t\t{\n\t\t\t\t\t$final_group_perms[$perm_name] = '1';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send specific user, or group permissions before default.\n\t\t// If user's permission are explicitly set, they've already been returned above.\n\t\tif(isset($final_group_perms))\n\t\t{\n\t\t\treturn $final_group_perms;\n\t\t}\n\t\telseif(isset($perms_def))\n\t\t{\n\t\t\treturn $perms_def;\n\t\t}\n\n\t\treturn array();\n\t}\n}\n\n/**\n * Fetch the iconv/mb encoding for a particular MySQL encoding\n *\n * @param string $mysql_encoding The MySQL encoding\n * @return string The iconv/mb encoding\n */\nfunction fetch_iconv_encoding($mysql_encoding)\n{\n    $mysql_encoding = explode(\"_\", $mysql_encoding);\n    switch($mysql_encoding[0])\n    {\n        case \"utf8\":\n            return \"utf-8\";\n\t\t\tbreak;\n        case \"latin1\":\n            return \"iso-8859-1\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn $mysql_encoding[0];\n    }\n}\n\n/**\n * Adds/Updates a Page/Tab to the permissions array in the adminoptions table\n *\n * @param string $tab The name of the tab that is being affected\n * @param string $page The name of the page being affected (optional - if not specified, will affect everything under the specified tab)\n * @param integer $default Default permissions for the page (1 for allowed - 0 for disallowed - -1 to remove)\n */\nfunction change_admin_permission($tab, $page=\"\", $default=1)\n{\n\tglobal $db;\n\n\t$query = $db->simple_select(\"adminoptions\", \"uid, permissions\", \"permissions != ''\");\n\twhile($adminoption = $db->fetch_array($query))\n\t{\n\t\t$adminoption['permissions'] = my_unserialize($adminoption['permissions']);\n\n\t\tif($default == -1)\n\t\t{\n\t\t\tif(!empty($page))\n\t\t\t{\n\t\t\t\tunset($adminoption['permissions'][$tab][$page]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunset($adminoption['permissions'][$tab]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!empty($page))\n\t\t\t{\n\t\t\t\tif($adminoption['uid'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab][$page] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab][$page] = $default;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif($adminoption['uid'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab]['tab'] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$adminoption['permissions'][$tab]['tab'] = $default;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$db->update_query(\"adminoptions\", array('permissions' => $db->escape_string(my_serialize($adminoption['permissions']))), \"uid='{$adminoption['uid']}'\");\n\t}\n}\n\n/**\n * Checks if we have had too many attempts at logging into the ACP\n *\n * @param integer $uid The uid of the admin to check\n * @param boolean $return_num Return an array of the number of attempts and expiry time? (default false)\n * @return mixed Return an array if the second parameter is true, boolean otherwise.\n */\nfunction login_attempt_check_acp($uid=0, $return_num=false)\n{\n\tglobal $db, $mybb;\n\n\t$attempts['loginattempts'] = 0;\n\n\tif($uid > 0)\n\t{\n\t\t$query = $db->simple_select(\"adminoptions\", \"loginattempts, loginlockoutexpiry\", \"uid='\".(int)$uid.\"'\", 1);\n\t\t$attempts = $db->fetch_array($query);\n\n\t\tif(!$attempts)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif($attempts['loginattempts'] <= 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif($mybb->settings['maxloginattempts'] > 0 && $attempts['loginattempts'] >= $mybb->settings['maxloginattempts'])\n\t{\n\t\t// Has the expiry dateline been set yet?\n\t\tif($attempts['loginlockoutexpiry'] == 0 && $return_num == false)\n\t\t{\n\t\t\t$db->update_query(\"adminoptions\", array(\"loginlockoutexpiry\" => TIME_NOW+((int)$mybb->settings['loginattemptstimeout']*60)), \"uid='\".(int)$uid.\"'\");\n\t\t}\n\n\t\t// Are we returning the # of login attempts?\n\t\tif($return_num == true)\n\t\t{\n\t\t\treturn $attempts;\n\t\t}\n\t\t// Otherwise are we still locked out?\n\t\telse if($attempts['loginlockoutexpiry'] > TIME_NOW)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks whether the administrator is on a mobile device\n *\n * @param string $useragent The useragent to be checked\n * @return boolean A true/false depending on if the administrator is on a mobile\n */\nfunction is_mobile($useragent)\n{\n\treturn preg_match(\"/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\\.browser|up\\.link|webos|wos)/i\", $useragent);\n}\n\n/**\n * Checks whether there are any 'security' issues in templates via complex syntax\n *\n * @param string $template The template to be scanned\n * @return boolean A true/false depending on if an issue was detected\n */\nfunction check_template($template)\n{\n\t// Check to see if our database password is in the template\n\tif(preg_match('#\\$config\\[(([\\'|\"]database[\\'|\"])|([^\\'\"].*?))\\]\\[(([\\'|\"](database|hostname|password|table_prefix|username)[\\'|\"])|([^\\'\"].*?))\\]#i', $template) !== 0)\n\t{\n\t\treturn true;\n\t}\n\n\t// System calls via backtick\n\tif(preg_match('#\\$\\s*\\{#', $template) !== 0)\n\t{\n\t\treturn true;\n\t}\n\n\t// Any other malicious acts?\n\t// Courtesy of ZiNgA BuRgA\n\t$allowed = preg_replace('~\\\\{\\\\$+[a-zA-Z_][a-zA-Z_0-9]*((?:-\\\\>|\\\\:\\\\:)\\\\$*[a-zA-Z_][a-zA-Z_0-9]*|\\\\[\\s*\\\\$*([\\'\"]?)[a-zA-Z_ 0-9 ]+\\\\2\\\\]\\s*)*\\\\}~', '', $template);\n\tif($allowed === null || preg_match(\"~\\\\{\\\\$.+?\\\\}~s\", $allowed) !== 0)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Provides a function to entirely delete a user's posts, and find the threads attached to them\n *\n * @param integer $uid The uid of the user\n * @param int $date A UNIX timestamp to delete posts that are older\n * @return array An array of threads to delete, threads/forums to recount\n */\nfunction delete_user_posts($uid, $date)\n{\n\tglobal $db;\n\t$uid = (int)$uid;\n\n\t// Build an array of posts to delete\n\t$postcache = array();\n\t$query = $db->simple_select(\"posts\", \"pid\", \"uid = '\".$uid.\"' AND dateline < '\".$date.\"'\");\n\twhile($post = $db->fetch_array($query))\n\t{\n\t\t$postcache[] = $post['pid'];\n\t}\n\n\tif(!$db->num_rows($query))\n\t{\n\t\treturn false;\n\t}\n\telseif(!empty($postcache))\n\t{\n\t\t// Let's start deleting posts\n\t\t$user_posts = implode(\",\", $postcache);\n\t\t$query = $db->query(\"\n\t\t\tSELECT p.pid, p.visible, f.usepostcounts, t.tid AS thread, t.firstpost, t.fid AS forum\n\t\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"forums f ON (f.fid=p.fid)\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"threads t ON (t.tid=p.tid)\n\t\t\tWHERE p.pid IN ({$user_posts})\n\t\t\");\n\n\t\t$post_count = 0; // Collect the post number to deduct from the user's postcount\n\t\t$thread_list = array();\n\t\t$forum_list = array();\n\t\t$delete_thread_list = array();\n\t\tif(!$db->num_rows($query))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile($post = $db->fetch_array($query))\n\t\t\t{\n\t\t\t\tif($post['usepostcounts'] != 0 && $post['visible'] == 1)\n\t\t\t\t{\n\t\t\t\t\t++$post_count;\n\t\t\t\t}\n\n\t\t\t\tif($post['pid'] == $post['firstpost'])\n\t\t\t\t{\n\t\t\t\t\t$delete_thread_list[] = $post['thread'];\n\t\t\t\t}\n\n\t\t\t\tif(!in_array($post['thread'], $thread_list) && !in_array($post['thread'], $delete_thread_list))\n\t\t\t\t{\n\t\t\t\t\t$thread_list[] = $post['thread']; // Threads that have been affected by this action, that aren't marked to be deleted\n\t\t\t\t}\n\t\t\t\tif(!in_array($post['forum'], $forum_list))\n\t\t\t\t{\n\t\t\t\t\t$forum_list[] = $post['forum']; // Forums that have been affected, too\n\t\t\t\t}\n\n\t\t\t\t// Remove the attachments to this post, then delete the post\n\t\t\t\tremove_attachments($post['pid']);\n\t\t\t\t$db->delete_query(\"posts\", \"pid = '\".$post['pid'].\"'\");\n\t\t\t\t$db->delete_query(\"pollvotes\", \"pid = '\".$post['pid'].\"'\"); // Delete pollvotes attached to this post\n\t\t\t}\n\n\t\t\t$db->update_query(\"users\", array(\"postnum\" => \"postnum-\".$post_count.\"\"), \"uid='\".$uid.\"'\", 1, true);\n\n\t\t\t$to_return = array(\n\t\t\t\t'to_delete' => $delete_thread_list,\n\t\t\t\t'thread_update' => $thread_list,\n\t\t\t\t'forum_update' => $forum_list\n\t\t\t);\n\n\t\t\treturn $to_return;\n\t\t}\n\t}\n}\n\n/**\n * Prints a selection JavaScript code for selectable groups/forums fields.\n */\nfunction print_selection_javascript()\n{\n\tstatic $already_printed = false;\n\n\tif($already_printed)\n\t{\n\t\treturn;\n\t}\n\n\t$already_printed = true;\n\n\techo \"<script type=\\\"text/javascript\\\">\n\tfunction checkAction(id)\n\t{\n\t\tvar checked = '';\n\n\t\t$('.'+id+'_forums_groups_check').each(function(e, val)\n\t\t{\n\t\t\tif($(this).prop('checked') == true)\n\t\t\t{\n\t\t\t\tchecked = $(this).val();\n\t\t\t}\n\t\t});\n\n\t\t$('.'+id+'_forums_groups').each(function(e)\n\t\t{\n\t\t\t$(this).hide();\n\t\t});\n\n\t\tif($('#'+id+'_forums_groups_'+checked))\n\t\t{\n\t\t\t$('#'+id+'_forums_groups_'+checked).show();\n\t\t}\n\t}\n</script>\";\n}\n\nif(!function_exists('array_column'))\n{\n\tfunction array_column($input, $column_key)\n\t{\n\t\t$values = array();\n\n\t\tif(!is_array($input))\n\t\t{\n\t\t\t$input = array($input);\n\t\t}\n\n\t\tforeach($input as $val)\n\t\t{\n\t\t\tif(is_array($val) && isset($val[$column_key]))\n\t\t\t{\n\t\t\t\t$values[] = $val[$column_key];\n\t\t\t}\n\t\t\telseif(is_object($val) && isset($val->$column_key))\n\t\t\t{\n\t\t\t\t$values[] = $val->$column_key;\n\t\t\t}\n\t\t}\n\n\t\treturn $values;\n\t}\n}\n\n/**\n * Output the auto redirect block.\n *\n * @param \\Form $form An existing form instance to wrap the redirect within.\n * @param string $prompt The prompt to show.\n */\nfunction output_auto_redirect($form, $prompt)\n{\n\tglobal $lang;\n\n\techo <<<HTML\n<div class=\"confirm_action\">\n\t<p>{$prompt}</p>\n\t<br />\n\t<script type=\"text/javascript\">\n\t\t$(function() { \n\t\t\tvar button = $(\"#proceed_button\"); \n\t\t\tif (button.length > 0) {\n\t\t\t\t// create a temporary div element to render the text within, un-escaping HTML entities\n\t\t\t\tvar textElement = $('<div/>').html('{$lang->automatically_redirecting}');\n\t\t\t\n\t\t\t\tbutton.val(textElement.text());\n\t\t\t\tbutton.attr(\"disabled\", true);\n\t\t\t\tbutton.css(\"color\", \"#aaa\");\n\t\t\t\tbutton.css(\"borderColor\", \"#aaa\");\n\t\t\t\t\n\t\t\t\tvar parent_form = button.closest('form');\n\n\t\t\t\tif (parent_form.length > 0) {\n\t\t\t\t\tparent_form.submit();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t</script>\n\t<p class=\"buttons\">\n\t\t{$form->generate_submit_button($lang->proceed, array('class' => 'button_yes', 'id' => 'proceed_button'))}\n\t</p>\n</div>\nHTML;\n}"], "filenames": ["admin/inc/functions.php"], "buggy_code_start_loc": [670], "buggy_code_end_loc": [684], "fixing_code_start_loc": [670], "fixing_code_end_loc": [685], "type": "CWE-94", "message": "MyBB before 1.8.36 allows Code Injection by users with certain high privileges. Templates in Admin CP intentionally use eval, and there was some validation of the input to eval, but type juggling interfered with this when using PCRE within PHP.", "other": {"cve": {"id": "CVE-2023-41362", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-29T16:15:09.237", "lastModified": "2023-09-11T15:16:03.410", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "MyBB before 1.8.36 allows Code Injection by users with certain high privileges. Templates in Admin CP intentionally use eval, and there was some validation of the input to eval, but type juggling interfered with this when using PCRE within PHP."}, {"lang": "es", "value": "MyBB anterior a 1.8.36 permite la inyecci\u00f3n de c\u00f3digo por parte de usuarios con ciertos privilegios elevados. Las plantillas en Admin CP usan intencionalmente eval, y hubo cierta validaci\u00f3n de la entrada para eval, pero el malabarismo de tipos interfiri\u00f3 con esto cuando se usaba PCRE dentro de PHP.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mybb:mybb:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.36", "matchCriteriaId": "BB1F809C-701C-452A-9E80-B91FF79CF7AC"}]}]}], "references": [{"url": "https://blog.sorcery.ie/posts/mybb_acp_rce/", "source": "cve@mitre.org"}, {"url": "https://github.com/mybb/mybb/commit/a43a6f22944e769a6eabc58c39e7bc18c1cab4ca.patch", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/mybb/mybb/security/advisories/GHSA-pr74-wvp3-q6f5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://mybb.com/versions/1.8.36/", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/mybb/mybb/commit/a43a6f22944e769a6eabc58c39e7bc18c1cab4ca.patch"}}