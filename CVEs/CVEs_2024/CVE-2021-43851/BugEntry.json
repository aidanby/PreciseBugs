{"buggy_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nimport('ttRoleHelper');\n\n// Class ttGroupHelper - contains helper functions that operate with groups.\n// This is a planned replacement for ttTeamHelper as we move forward with subgroups.\nclass ttGroupHelper {\n\n  // The getGroupName function returns group name.\n  static function getGroupName($group_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $sql = \"select name from tt_groups where id = $group_id and org_id = $user->org_id and (status = 1 or status = 0)\";\n    $res = $mdb2->query($sql);\n\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val['name'];\n    }\n    return false;\n  }\n\n  // The getParentGroup determines a parent group for a given group.\n  static function getParentGroup($group_id) {\n    global $user;\n\n    $mdb2 = getConnection();\n\n    $sql = \"select parent_id from tt_groups where id = $group_id and org_id = $user->org_id and status = 1\";\n    $res = $mdb2->query($sql);\n\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val['parent_id'];\n    }\n    return false;\n  }\n\n  // The getSubgroupByName obtain an immediate subgroup by name if one exists.\n  static function getSubgroupByName($name) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $parent_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id from tt_groups where parent_id = $parent_id and org_id = $org_id\".\n      \" and name = \".$mdb2->quote($name).\" and status is not null\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      if ($val && $val['id'])\n        return $val;\n    }\n    return false;\n  }\n\n  // The insertSubgroup inserts a new subgroup in database.\n  static function insertSubgroup($fields) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $parent_id = $user->getGroup();\n    $org_id = $user->org_id;\n    $group_key = ttRandomString();\n    $name = $fields['name'];\n    $description = $fields['description'];\n\n    // We need to inherit attributes from the parent group.\n    $attrs = ttGroupHelper::getGroupAttrs($parent_id);\n\n    $columns = '(parent_id, org_id, group_key, name, description, currency, decimal_mark, lang, date_format,'.\n      ' time_format, week_start, tracking_mode, project_required, record_type, bcc_email,'.\n      ' allow_ip, password_complexity, plugins, lock_spec,'.\n      ' workday_minutes, config, created, created_ip, created_by)';\n\n    $values = \" values ($parent_id, $org_id\";\n    $values .= ', '.$mdb2->quote($group_key);\n    $values .= ', '.$mdb2->quote($name);\n    $values .= ', '.$mdb2->quote($description);\n    $values .= ', '.$mdb2->quote($attrs['currency']);\n    $values .= ', '.$mdb2->quote($attrs['decimal_mark']);\n    $values .= ', '.$mdb2->quote($attrs['lang']);\n    $values .= ', '.$mdb2->quote($attrs['date_format']);\n    $values .= ', '.$mdb2->quote($attrs['time_format']);\n    $values .= ', '.(int)$attrs['week_start'];\n    $values .= ', '.(int)$attrs['tracking_mode'];\n    $values .= ', '.(int)$attrs['project_required'];\n    $values .= ', '.(int)$attrs['record_type'];\n    $values .= ', '.$mdb2->quote($attrs['bcc_email']);\n    $values .= ', '.$mdb2->quote($attrs['allow_ip']);\n    $values .= ', '.$mdb2->quote($attrs['password_complexity']);\n    $values .= ', '.$mdb2->quote($attrs['plugins']);\n    $values .= ', '.$mdb2->quote($attrs['lock_spec']);\n    $values .= ', '.(int)$attrs['workday_minutes'];\n    $values .= ', '.$mdb2->quote($attrs['config']);\n    $values .= ', now(), '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', '.$user->id;\n    $values .= ')';\n\n    $sql = 'insert into tt_groups '.$columns.$values;\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error')) return false;\n\n    $subgroup_id = $mdb2->lastInsertID('tt_groups', 'id');\n\n    // Copy roles from the parent group to child group.\n    if (!ttRoleHelper::copyRolesToGroup($subgroup_id))\n      return false;\n    \n    return $subgroup_id;\n  }\n\n  // markGroupDeleted marks a group and everything in it as deleted.\n  // This function is called in context of a logged on user (global $user object).\n  // It uses current user attributes for access checks and in sql queries.\n  // Compare this with admin:\n  //   admin can delete any group.\n  //   user can delete only relevant groups and only if allowed.\n  static function markGroupDeleted($group_id) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $org_id = $user->org_id;\n\n    // Security check.\n    if (!$user->isGroupValid($group_id))\n      return false;\n\n    // Keep the logic simple by returning false on first error.\n\n    // Obtain subgroups and call self recursively on them.\n    $subgroups = (array) $user->getSubgroups($group_id);\n    foreach($subgroups as $subgroup) {\n      if (!ttGroupHelper::markGroupDeleted($subgroup['id']))\n        return false;\n    }\n\n    // Now do actual work with all entities.\n\n    // Delete group files.\n    ttGroupHelper::deleteGroupFiles($group_id);\n\n    // Some things cannot be marked deleted as we don't have the status field for them.\n    // Just delete such things (until we have a better way to deal with them).\n    $tables_to_delete_from = array(\n      'tt_config',\n      'tt_predefined_expenses',\n      'tt_client_project_binds',\n      'tt_project_task_binds',\n      'tt_project_template_binds'\n    );\n    foreach($tables_to_delete_from as $table) {\n      if (!ttGroupHelper::deleteGroupEntriesFromTable($group_id, $table))\n        return false;\n    }\n\n    // Now mark status deleted where we can.\n    // Note: we don't mark tt_log, tt_custom_field_lod, or tt_expense_items deleted here.\n    // Reasoning is:\n    //\n    // 1) Users may mark some of them deleted during their work.\n    // If we mark all of them deleted here, we can't recover nicely\n    // as we'll lose track of what was deleted by users.\n    //\n    // 2) DB maintenance script (Clean up DB from inactive groups) should\n    // get rid of these items permanently eventually.\n    $tables_to_mark_deleted_in = array(\n      'tt_cron',\n      'tt_fav_reports',\n      // 'tt_expense_items',\n      // 'tt_custom_field_log',\n      'tt_custom_field_options',\n      'tt_custom_fields',\n      // 'tt_log',\n      'tt_invoices',\n      'tt_user_project_binds',\n      'tt_users',\n      'tt_clients',\n      'tt_projects',\n      'tt_tasks',\n      'tt_roles'\n    );\n    foreach($tables_to_mark_deleted_in as $table) {\n      if (!ttGroupHelper::markGroupDeletedInTable($group_id, $table))\n        return false;\n    }\n\n    // Mark group deleted.\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$user->id;\n    $sql = \"update tt_groups set status = null $modified_part where id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error')) return false;\n\n    return true;\n  }\n\n  // markGroupDeletedInTable is a generic helper function for markGroupDeleted.\n  // It updates ONE table by setting status to NULL for all records belonging to a group.\n  static function markGroupDeletedInTable($group_id, $table_name) {\n    global $user;\n    $mdb2 = getConnection();\n\n    // Add modified info to sql for some tables, depending on table name.\n    $modified_part = '';\n    if ($table_name == 'tt_users') {\n      $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$user->id;\n    }\n\n    $org_id = $user->org_id; // The only security measure we use here for match.\n    $sql = \"update $table_name set status = null $modified_part where group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n\n  // deleteGroupEntriesFromTable is a generic helper function for markGroupDeleted.\n  // It deletes entries in ONE table belonging to a given group.\n  static function deleteGroupEntriesFromTable($group_id, $table_name) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $org_id = $user->org_id; // The only security measure we use here for match.\n    $sql = \"delete from $table_name where group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n\n  // getGroupAttrs obtains all group attributes.\n  static function getGroupAttrs($group_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $sql =  \"select * from tt_groups\".\n            \" where status = 1 and id = $group_id and org_id = $user->org_id\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n    }\n    return $val;\n  }\n\n  // getRoles obtains all active and inactive roles in current group.\n  static function getRoles() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    $sql =  \"select * from tt_roles\".\n      \" where group_id = $group_id and org_id = $org_id and status is not null\";\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) return false;\n    while ($val = $res->fetchRow()) {\n      $roles[] = $val;\n    }\n    return $roles;\n  }\n\n  // The getActiveClients returns an array of active clients for a group.\n  static function getActiveClients($all_fields = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    if ($all_fields)\n      $sql = \"select * from tt_clients where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    else\n      $sql = \"select id, name from tt_clients where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // The getInactiveClients returns an array of inactive clients for a group.\n  static function getInactiveClients($all_fields = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    if ($all_fields)\n      $sql = \"select * from tt_clients where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    else\n      $sql = \"select id, name from tt_clients where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getActiveProjects - returns an array of active projects for a group.\n  static function getActiveProjects($includeFiles = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if ($includeFiles) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    $sql = \"select p.id, p.name, p.description, p.tasks $filePart from tt_projects p $fileJoin\".\n      \" where p.group_id = $group_id and p.org_id = $org_id and p.status = 1 order by upper(p.name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveProjects - returns an array of inactive projects for a group.\n  static function getInactiveProjects($includeFiles = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if ($includeFiles) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    $sql = \"select p.id, p.name, p.description, p.tasks $filePart from tt_projects p $fileJoin\".\n      \"  where p.group_id = $group_id and p.org_id = $org_id and p.status = 0 order by upper(p.name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getPredefinedExpenses - obtains predefined expenses for a group.\n  static function getPredefinedExpenses() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $result = array();\n    $sql = \"select id, name, cost from tt_predefined_expenses\".\n      \" where group_id = $group_id and org_id = $org_id\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $decimal_mark = $user->getDecimalMark();\n      $replaceDecimalMark = ('.' != $decimal_mark);\n\n      while ($val = $res->fetchRow()) {\n        if ($replaceDecimalMark)\n          $val['cost'] = str_replace('.', $decimal_mark, $val['cost']);\n        $result[] = $val;\n      }\n      return $result;\n    }\n    return false;\n  }\n\n  // The getActiveInvoices returns an array of active invoices for a group.\n  static function getActiveInvoices($sort_options = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $addPaidStatus = $user->isPluginEnabled('ps');\n    $result = array();\n\n    $client_part = '';\n    if ($user->isClient())\n      $client_part = \"and i.client_id = $user->client_id\";\n\n    // Prepare order by part.\n    $order_by_part = 'order  by ';\n    if (!$sort_options)\n      $order_by_part .= 'name';\n    else {\n      $order_by_part .= $sort_options['sort_option_1'];\n      if ($sort_options['sort_order_1'] == 'descending') $order_by_part .= ' desc';\n\n      if ($sort_options['sort_option_2']) {\n        $order_by_part .= ', '.$sort_options['sort_option_2'];\n        if ($sort_options['sort_order_2'] == 'descending') $order_by_part .= ' desc';\n      }\n    }\n\n    $sql = \"select i.id, i.name, i.date, i.client_id, i.status, c.name as client from tt_invoices i\".\n      \" left join tt_clients c on (c.id = i.client_id)\".\n      \" where i.status = 1 and i.group_id = $group_id and i.org_id = $org_id $client_part $order_by_part\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $dt = new DateAndTime(DB_DATEFORMAT);\n      while ($val = $res->fetchRow()) {\n        // Localize date.\n        $dt->parseVal($val['date']);\n        $val['date'] = $dt->toString($user->getDateFormat());\n        if ($addPaidStatus)\n          $val['paid'] = ttInvoiceHelper::isPaid($val['id']);\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getNotifications - obtains notification descriptions for a group.\n  static function getNotifications() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $result = array();\n    $sql = \"select c.id, c.cron_spec, c.email, c.report_condition, fr.name from tt_cron c\".\n      \" left join tt_fav_reports fr on (fr.id = c.report_id)\".\n      \" where c.group_id = $group_id and c.org_id = $org_id and c.status = 1 and fr.status = 1\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n      return $result;\n    }\n    return false;\n  }\n\n  // The getActiveUsers obtains all active users excluding clients in a given group.\n  static function getActiveUsers($options = null) {\n    global $user;\n    global $i18n;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $client_part = \" and u.client_id is null\";\n\n    if (isset($options['getAllFields']))\n      $sql = \"select u.*, r.name as role_name, r.rank from tt_users u left join tt_roles r on (u.role_id = r.id) where u.group_id = $group_id and u.org_id = $org_id and u.status = 1 $client_part order by upper(u.name)\";\n    else\n      $sql = \"select u.id, u.name from tt_users u where u.group_id = $group_id and u.org_id = $org_id and u.status = 1 $client_part order by upper(u.name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      // Localize top manager role name, as it is not localized in db.\n      if (isset($val['rank']) && $val['rank'] == 512)\n        $val['role_name'] = $i18n->get('role.top_manager.label');\n      $user_list[] = $val;\n    }\n\n    return $user_list;\n  }\n\n  // getActiveTasks - returns an array of active tasks for a group.\n  static function getActiveTasks()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveTasks - returns an array of inactive tasks for a group.\n  static function getInactiveTasks()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getActiveTemplates - returns an array of active templates for a group.\n  static function getActiveTemplates()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description, content from tt_templates\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveTemplates - returns an array of active templates for a group.\n  static function getInactiveTemplates()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_templates\".\n      \" where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // validateCheckboxGroupInput - validates user input in a group of checkboxes\n  // in context of a specific database table.\n  //\n  // We need to make sure that input is a set of unique positive integers, and is\n  // \"relevant\" to the current group (entities exists in table).\n  //\n  // It is a safeguard against manipulation of data in posts.\n  static function validateCheckboxGroupInput($input, $table) {\n    // Empty input is valid.\n    if (!$input) return true;\n\n    // Input containing duplicates is invalid.\n    if (count($input) !== count(array_unique($input))) return false;\n\n    // Input containing anything but positive integers is invalid.\n    foreach ($input as $single_selection) {\n      if (!is_numeric($single_selection) || $single_selection <= 0) return false;\n    }\n\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    // Now check the table. It must contain all entities associated with current group and org.\n    $comma_separated = implode(',', $input);\n    $sql = \"select count(*) as item_count from $table\".\n      \" where id in ($comma_separated) and group_id = $group_id and org_id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) return false;\n    $val = $res->fetchRow();\n    if (count($input) != $val['item_count'])\n      return false; // Number of entities in table is different.\n\n    return true; // All is good.\n  }\n\n  // The getUsers obtains all active and inactive (but not deleted) users in a group.\n  static function getUsers() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name from tt_users where group_id = $group_id and org_id = $org_id and (status = 1 or status = 0) order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      $user_list[] = $val;\n    }\n    return $user_list;\n  }\n\n  // The getUsersForClient obtains all active and inactive users in a group that are relevant to a client.\n  static function getUsersForClient($options) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    if (isset($options['status']))\n      $where_part = 'where u.status = '.(int)$options['status'];\n    else\n      $where_part = 'where u.status is not null';\n\n    $sql = \"select u.id, u.name from tt_user_project_binds upb\".\n      \" inner join tt_client_project_binds cpb on (upb.project_id = cpb.project_id and cpb.client_id = $user->client_id)\".\n      \" inner join tt_users u on (u.id = upb.user_id and u.group_id = $group_id and u.org_id = $org_id)\".\n      \" $where_part group by u.id order by upper(u.name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      $user_list[] = $val;\n    }\n    return $user_list;\n  }\n\n  // The getRecentInvoices returns an array of recent invoices (max 3) for a client.\n  static function getRecentInvoices($client_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select i.id, i.name from tt_invoices i\".\n      \" left join tt_clients c on (c.id = i.client_id)\".\n      \" where i.group_id = $group_id and i.org_id = $org_id and i.status = 1 and c.id = $client_id\".\n      \" order by i.id desc limit 3\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $dt = new DateAndTime(DB_DATEFORMAT);\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // deleteGroupFiles deletes files attached to all entities in the entire group.\n  // Note that it is a permanent delete, not \"mark deleted\" by design.\n  static function deleteGroupFiles($group_id) {\n\n    global $user;\n    $org_id = $user->org_id;\n\n    // Delete all group files from the database.\n    $mdb2 = getConnection();\n    $sql = \"delete from tt_files where org_id = $org_id and group_id = $group_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    if ($affected == 0) return true; // Do not call file storage utility.\n\n    // Try to make a call to file storage server.\n    $storage_uri = defined('FILE_STORAGE_URI') ? FILE_STORAGE_URI : \"https://www.anuko.com/files/\";\n    $deletegroupfiles_uri = $storage_uri.'deletegroupfiles';\n\n    // Obtain site id.\n    $sql = \"select param_value as site_id from tt_site_config where param_name = 'locker_id'\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $site_id = $val['site_id'];\n    if (!$site_id) return true; // Nothing to do.\n\n    // Obtain site key.\n    $sql = \"select param_value as site_key from tt_site_config where param_name = 'locker_key'\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $site_key = $val['site_key'];\n    if (!$site_key) return true; // Can't continue without site key.\n\n    // Obtain org key.\n    $sql = \"select group_key as org_key from tt_groups where id = $org_id\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $org_key = $val['org_key'];\n    if (!$org_key) return true; // Can't continue without org key.\n\n    // Obtain group key.\n    $sql = \"select group_key as group_key from tt_groups where id = $group_id\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $group_key = $val['group_key'];\n    if (!$group_key) return true; // Can't continue without group key.\n\n    $curl_fields = array('site_id' => $site_id,\n      'site_key' => $site_key,\n      'org_id' => $org_id,\n      'org_key' => $org_key,\n      'group_id' => $group_id,\n      'group_key' => $group_key);\n\n    // url-ify the data for the POST.\n    foreach($curl_fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }\n    $fields_string = rtrim($fields_string, '&');\n\n    // Open connection.\n    $ch = curl_init();\n\n    // Set the url, number of POST vars, POST data.\n    curl_setopt($ch, CURLOPT_URL, $deletegroupfiles_uri);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Execute a post request.\n    $result = curl_exec($ch);\n\n    // Close connection.\n    curl_close($ch);\n\n    // Many things can go wrong with a remote call to file storage facility.\n    // By design, we ignore such errors.\n    return true;\n  }\n\n  // updateEntitiesModified updates the entities_modified field in tt_groups table\n  // with a current timestamp.\n  static function updateEntitiesModified() {\n    global $user;\n    $org_id = $user->org_id;\n    $group_id = $user->getGroup();\n    $mdb2 = getConnection();\n\n    $sql = \"update tt_groups set entities_modified = now() where id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.19.31.5602\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "fixing_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nimport('ttRoleHelper');\n\n// Class ttGroupHelper - contains helper functions that operate with groups.\n// This is a planned replacement for ttTeamHelper as we move forward with subgroups.\nclass ttGroupHelper {\n\n  // The getGroupName function returns group name.\n  static function getGroupName($group_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $sql = \"select name from tt_groups where id = $group_id and org_id = $user->org_id and (status = 1 or status = 0)\";\n    $res = $mdb2->query($sql);\n\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val['name'];\n    }\n    return false;\n  }\n\n  // The getParentGroup determines a parent group for a given group.\n  static function getParentGroup($group_id) {\n    global $user;\n\n    // Checking parameters for sanity is normally done in access check blocks on pages.\n    // This cast below is just in case we forgot to check $group_id to be an integer.\n    $groupId = (int) $group_id; // Protection against sql injection.\n\n    $mdb2 = getConnection();\n\n    $sql = \"select parent_id from tt_groups where id = $groupId and org_id = $user->org_id and status = 1\";\n    $res = $mdb2->query($sql);\n\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val['parent_id'];\n    }\n    return false;\n  }\n\n  // The getSubgroupByName obtain an immediate subgroup by name if one exists.\n  static function getSubgroupByName($name) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $parent_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id from tt_groups where parent_id = $parent_id and org_id = $org_id\".\n      \" and name = \".$mdb2->quote($name).\" and status is not null\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      if ($val && $val['id'])\n        return $val;\n    }\n    return false;\n  }\n\n  // The insertSubgroup inserts a new subgroup in database.\n  static function insertSubgroup($fields) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $parent_id = $user->getGroup();\n    $org_id = $user->org_id;\n    $group_key = ttRandomString();\n    $name = $fields['name'];\n    $description = $fields['description'];\n\n    // We need to inherit attributes from the parent group.\n    $attrs = ttGroupHelper::getGroupAttrs($parent_id);\n\n    $columns = '(parent_id, org_id, group_key, name, description, currency, decimal_mark, lang, date_format,'.\n      ' time_format, week_start, tracking_mode, project_required, record_type, bcc_email,'.\n      ' allow_ip, password_complexity, plugins, lock_spec,'.\n      ' workday_minutes, config, created, created_ip, created_by)';\n\n    $values = \" values ($parent_id, $org_id\";\n    $values .= ', '.$mdb2->quote($group_key);\n    $values .= ', '.$mdb2->quote($name);\n    $values .= ', '.$mdb2->quote($description);\n    $values .= ', '.$mdb2->quote($attrs['currency']);\n    $values .= ', '.$mdb2->quote($attrs['decimal_mark']);\n    $values .= ', '.$mdb2->quote($attrs['lang']);\n    $values .= ', '.$mdb2->quote($attrs['date_format']);\n    $values .= ', '.$mdb2->quote($attrs['time_format']);\n    $values .= ', '.(int)$attrs['week_start'];\n    $values .= ', '.(int)$attrs['tracking_mode'];\n    $values .= ', '.(int)$attrs['project_required'];\n    $values .= ', '.(int)$attrs['record_type'];\n    $values .= ', '.$mdb2->quote($attrs['bcc_email']);\n    $values .= ', '.$mdb2->quote($attrs['allow_ip']);\n    $values .= ', '.$mdb2->quote($attrs['password_complexity']);\n    $values .= ', '.$mdb2->quote($attrs['plugins']);\n    $values .= ', '.$mdb2->quote($attrs['lock_spec']);\n    $values .= ', '.(int)$attrs['workday_minutes'];\n    $values .= ', '.$mdb2->quote($attrs['config']);\n    $values .= ', now(), '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', '.$user->id;\n    $values .= ')';\n\n    $sql = 'insert into tt_groups '.$columns.$values;\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error')) return false;\n\n    $subgroup_id = $mdb2->lastInsertID('tt_groups', 'id');\n\n    // Copy roles from the parent group to child group.\n    if (!ttRoleHelper::copyRolesToGroup($subgroup_id))\n      return false;\n    \n    return $subgroup_id;\n  }\n\n  // markGroupDeleted marks a group and everything in it as deleted.\n  // This function is called in context of a logged on user (global $user object).\n  // It uses current user attributes for access checks and in sql queries.\n  // Compare this with admin:\n  //   admin can delete any group.\n  //   user can delete only relevant groups and only if allowed.\n  static function markGroupDeleted($group_id) {\n    global $user;\n\n    $mdb2 = getConnection();\n    $org_id = $user->org_id;\n\n    // Security check.\n    if (!$user->isGroupValid($group_id))\n      return false;\n\n    // Keep the logic simple by returning false on first error.\n\n    // Obtain subgroups and call self recursively on them.\n    $subgroups = (array) $user->getSubgroups($group_id);\n    foreach($subgroups as $subgroup) {\n      if (!ttGroupHelper::markGroupDeleted($subgroup['id']))\n        return false;\n    }\n\n    // Now do actual work with all entities.\n\n    // Delete group files.\n    ttGroupHelper::deleteGroupFiles($group_id);\n\n    // Some things cannot be marked deleted as we don't have the status field for them.\n    // Just delete such things (until we have a better way to deal with them).\n    $tables_to_delete_from = array(\n      'tt_config',\n      'tt_predefined_expenses',\n      'tt_client_project_binds',\n      'tt_project_task_binds',\n      'tt_project_template_binds'\n    );\n    foreach($tables_to_delete_from as $table) {\n      if (!ttGroupHelper::deleteGroupEntriesFromTable($group_id, $table))\n        return false;\n    }\n\n    // Now mark status deleted where we can.\n    // Note: we don't mark tt_log, tt_custom_field_lod, or tt_expense_items deleted here.\n    // Reasoning is:\n    //\n    // 1) Users may mark some of them deleted during their work.\n    // If we mark all of them deleted here, we can't recover nicely\n    // as we'll lose track of what was deleted by users.\n    //\n    // 2) DB maintenance script (Clean up DB from inactive groups) should\n    // get rid of these items permanently eventually.\n    $tables_to_mark_deleted_in = array(\n      'tt_cron',\n      'tt_fav_reports',\n      // 'tt_expense_items',\n      // 'tt_custom_field_log',\n      'tt_custom_field_options',\n      'tt_custom_fields',\n      // 'tt_log',\n      'tt_invoices',\n      'tt_user_project_binds',\n      'tt_users',\n      'tt_clients',\n      'tt_projects',\n      'tt_tasks',\n      'tt_roles'\n    );\n    foreach($tables_to_mark_deleted_in as $table) {\n      if (!ttGroupHelper::markGroupDeletedInTable($group_id, $table))\n        return false;\n    }\n\n    // Mark group deleted.\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$user->id;\n    $sql = \"update tt_groups set status = null $modified_part where id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error')) return false;\n\n    return true;\n  }\n\n  // markGroupDeletedInTable is a generic helper function for markGroupDeleted.\n  // It updates ONE table by setting status to NULL for all records belonging to a group.\n  static function markGroupDeletedInTable($group_id, $table_name) {\n    global $user;\n    $mdb2 = getConnection();\n\n    // Add modified info to sql for some tables, depending on table name.\n    $modified_part = '';\n    if ($table_name == 'tt_users') {\n      $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$user->id;\n    }\n\n    $org_id = $user->org_id; // The only security measure we use here for match.\n    $sql = \"update $table_name set status = null $modified_part where group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n\n  // deleteGroupEntriesFromTable is a generic helper function for markGroupDeleted.\n  // It deletes entries in ONE table belonging to a given group.\n  static function deleteGroupEntriesFromTable($group_id, $table_name) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $org_id = $user->org_id; // The only security measure we use here for match.\n    $sql = \"delete from $table_name where group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n\n  // getGroupAttrs obtains all group attributes.\n  static function getGroupAttrs($group_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $sql =  \"select * from tt_groups\".\n            \" where status = 1 and id = $group_id and org_id = $user->org_id\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n    }\n    return $val;\n  }\n\n  // getRoles obtains all active and inactive roles in current group.\n  static function getRoles() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    $sql =  \"select * from tt_roles\".\n      \" where group_id = $group_id and org_id = $org_id and status is not null\";\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) return false;\n    while ($val = $res->fetchRow()) {\n      $roles[] = $val;\n    }\n    return $roles;\n  }\n\n  // The getActiveClients returns an array of active clients for a group.\n  static function getActiveClients($all_fields = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    if ($all_fields)\n      $sql = \"select * from tt_clients where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    else\n      $sql = \"select id, name from tt_clients where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // The getInactiveClients returns an array of inactive clients for a group.\n  static function getInactiveClients($all_fields = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n    if ($all_fields)\n      $sql = \"select * from tt_clients where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    else\n      $sql = \"select id, name from tt_clients where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getActiveProjects - returns an array of active projects for a group.\n  static function getActiveProjects($includeFiles = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if ($includeFiles) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    $sql = \"select p.id, p.name, p.description, p.tasks $filePart from tt_projects p $fileJoin\".\n      \" where p.group_id = $group_id and p.org_id = $org_id and p.status = 1 order by upper(p.name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveProjects - returns an array of inactive projects for a group.\n  static function getInactiveProjects($includeFiles = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if ($includeFiles) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    $sql = \"select p.id, p.name, p.description, p.tasks $filePart from tt_projects p $fileJoin\".\n      \"  where p.group_id = $group_id and p.org_id = $org_id and p.status = 0 order by upper(p.name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getPredefinedExpenses - obtains predefined expenses for a group.\n  static function getPredefinedExpenses() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $result = array();\n    $sql = \"select id, name, cost from tt_predefined_expenses\".\n      \" where group_id = $group_id and org_id = $org_id\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $decimal_mark = $user->getDecimalMark();\n      $replaceDecimalMark = ('.' != $decimal_mark);\n\n      while ($val = $res->fetchRow()) {\n        if ($replaceDecimalMark)\n          $val['cost'] = str_replace('.', $decimal_mark, $val['cost']);\n        $result[] = $val;\n      }\n      return $result;\n    }\n    return false;\n  }\n\n  // The getActiveInvoices returns an array of active invoices for a group.\n  static function getActiveInvoices($sort_options = false)\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $addPaidStatus = $user->isPluginEnabled('ps');\n    $result = array();\n\n    $client_part = '';\n    if ($user->isClient())\n      $client_part = \"and i.client_id = $user->client_id\";\n\n    // Prepare order by part.\n    $order_by_part = 'order  by ';\n    if (!$sort_options)\n      $order_by_part .= 'name';\n    else {\n      $order_by_part .= $sort_options['sort_option_1'];\n      if ($sort_options['sort_order_1'] == 'descending') $order_by_part .= ' desc';\n\n      if ($sort_options['sort_option_2']) {\n        $order_by_part .= ', '.$sort_options['sort_option_2'];\n        if ($sort_options['sort_order_2'] == 'descending') $order_by_part .= ' desc';\n      }\n    }\n\n    $sql = \"select i.id, i.name, i.date, i.client_id, i.status, c.name as client from tt_invoices i\".\n      \" left join tt_clients c on (c.id = i.client_id)\".\n      \" where i.status = 1 and i.group_id = $group_id and i.org_id = $org_id $client_part $order_by_part\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $dt = new DateAndTime(DB_DATEFORMAT);\n      while ($val = $res->fetchRow()) {\n        // Localize date.\n        $dt->parseVal($val['date']);\n        $val['date'] = $dt->toString($user->getDateFormat());\n        if ($addPaidStatus)\n          $val['paid'] = ttInvoiceHelper::isPaid($val['id']);\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getNotifications - obtains notification descriptions for a group.\n  static function getNotifications() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $result = array();\n    $sql = \"select c.id, c.cron_spec, c.email, c.report_condition, fr.name from tt_cron c\".\n      \" left join tt_fav_reports fr on (fr.id = c.report_id)\".\n      \" where c.group_id = $group_id and c.org_id = $org_id and c.status = 1 and fr.status = 1\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n      return $result;\n    }\n    return false;\n  }\n\n  // The getActiveUsers obtains all active users excluding clients in a given group.\n  static function getActiveUsers($options = null) {\n    global $user;\n    global $i18n;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $client_part = \" and u.client_id is null\";\n\n    if (isset($options['getAllFields']))\n      $sql = \"select u.*, r.name as role_name, r.rank from tt_users u left join tt_roles r on (u.role_id = r.id) where u.group_id = $group_id and u.org_id = $org_id and u.status = 1 $client_part order by upper(u.name)\";\n    else\n      $sql = \"select u.id, u.name from tt_users u where u.group_id = $group_id and u.org_id = $org_id and u.status = 1 $client_part order by upper(u.name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      // Localize top manager role name, as it is not localized in db.\n      if (isset($val['rank']) && $val['rank'] == 512)\n        $val['role_name'] = $i18n->get('role.top_manager.label');\n      $user_list[] = $val;\n    }\n\n    return $user_list;\n  }\n\n  // getActiveTasks - returns an array of active tasks for a group.\n  static function getActiveTasks()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveTasks - returns an array of inactive tasks for a group.\n  static function getInactiveTasks()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getActiveTemplates - returns an array of active templates for a group.\n  static function getActiveTemplates()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description, content from tt_templates\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getInactiveTemplates - returns an array of active templates for a group.\n  static function getInactiveTemplates()\n  {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name, description from tt_templates\".\n      \" where group_id = $group_id and org_id = $org_id and status = 0 order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // validateCheckboxGroupInput - validates user input in a group of checkboxes\n  // in context of a specific database table.\n  //\n  // We need to make sure that input is a set of unique positive integers, and is\n  // \"relevant\" to the current group (entities exists in table).\n  //\n  // It is a safeguard against manipulation of data in posts.\n  static function validateCheckboxGroupInput($input, $table) {\n    // Empty input is valid.\n    if (!$input) return true;\n\n    // Input containing duplicates is invalid.\n    if (count($input) !== count(array_unique($input))) return false;\n\n    // Input containing anything but positive integers is invalid.\n    foreach ($input as $single_selection) {\n      if (!is_numeric($single_selection) || $single_selection <= 0) return false;\n    }\n\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    // Now check the table. It must contain all entities associated with current group and org.\n    $comma_separated = implode(',', $input);\n    $sql = \"select count(*) as item_count from $table\".\n      \" where id in ($comma_separated) and group_id = $group_id and org_id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) return false;\n    $val = $res->fetchRow();\n    if (count($input) != $val['item_count'])\n      return false; // Number of entities in table is different.\n\n    return true; // All is good.\n  }\n\n  // The getUsers obtains all active and inactive (but not deleted) users in a group.\n  static function getUsers() {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select id, name from tt_users where group_id = $group_id and org_id = $org_id and (status = 1 or status = 0) order by upper(name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      $user_list[] = $val;\n    }\n    return $user_list;\n  }\n\n  // The getUsersForClient obtains all active and inactive users in a group that are relevant to a client.\n  static function getUsersForClient($options) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    if (isset($options['status']))\n      $where_part = 'where u.status = '.(int)$options['status'];\n    else\n      $where_part = 'where u.status is not null';\n\n    $sql = \"select u.id, u.name from tt_user_project_binds upb\".\n      \" inner join tt_client_project_binds cpb on (upb.project_id = cpb.project_id and cpb.client_id = $user->client_id)\".\n      \" inner join tt_users u on (u.id = upb.user_id and u.group_id = $group_id and u.org_id = $org_id)\".\n      \" $where_part group by u.id order by upper(u.name)\";\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n    while ($val = $res->fetchRow()) {\n      $user_list[] = $val;\n    }\n    return $user_list;\n  }\n\n  // The getRecentInvoices returns an array of recent invoices (max 3) for a client.\n  static function getRecentInvoices($client_id) {\n    global $user;\n    $mdb2 = getConnection();\n\n    $group_id = $user->getGroup();\n    $org_id = $user->org_id;\n\n    $sql = \"select i.id, i.name from tt_invoices i\".\n      \" left join tt_clients c on (c.id = i.client_id)\".\n      \" where i.group_id = $group_id and i.org_id = $org_id and i.status = 1 and c.id = $client_id\".\n      \" order by i.id desc limit 3\";\n    $res = $mdb2->query($sql);\n    $result = array();\n    if (!is_a($res, 'PEAR_Error')) {\n      $dt = new DateAndTime(DB_DATEFORMAT);\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // deleteGroupFiles deletes files attached to all entities in the entire group.\n  // Note that it is a permanent delete, not \"mark deleted\" by design.\n  static function deleteGroupFiles($group_id) {\n\n    global $user;\n    $org_id = $user->org_id;\n\n    // Delete all group files from the database.\n    $mdb2 = getConnection();\n    $sql = \"delete from tt_files where org_id = $org_id and group_id = $group_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    if ($affected == 0) return true; // Do not call file storage utility.\n\n    // Try to make a call to file storage server.\n    $storage_uri = defined('FILE_STORAGE_URI') ? FILE_STORAGE_URI : \"https://www.anuko.com/files/\";\n    $deletegroupfiles_uri = $storage_uri.'deletegroupfiles';\n\n    // Obtain site id.\n    $sql = \"select param_value as site_id from tt_site_config where param_name = 'locker_id'\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $site_id = $val['site_id'];\n    if (!$site_id) return true; // Nothing to do.\n\n    // Obtain site key.\n    $sql = \"select param_value as site_key from tt_site_config where param_name = 'locker_key'\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $site_key = $val['site_key'];\n    if (!$site_key) return true; // Can't continue without site key.\n\n    // Obtain org key.\n    $sql = \"select group_key as org_key from tt_groups where id = $org_id\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $org_key = $val['org_key'];\n    if (!$org_key) return true; // Can't continue without org key.\n\n    // Obtain group key.\n    $sql = \"select group_key as group_key from tt_groups where id = $group_id\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $group_key = $val['group_key'];\n    if (!$group_key) return true; // Can't continue without group key.\n\n    $curl_fields = array('site_id' => $site_id,\n      'site_key' => $site_key,\n      'org_id' => $org_id,\n      'org_key' => $org_key,\n      'group_id' => $group_id,\n      'group_key' => $group_key);\n\n    // url-ify the data for the POST.\n    foreach($curl_fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }\n    $fields_string = rtrim($fields_string, '&');\n\n    // Open connection.\n    $ch = curl_init();\n\n    // Set the url, number of POST vars, POST data.\n    curl_setopt($ch, CURLOPT_URL, $deletegroupfiles_uri);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Execute a post request.\n    $result = curl_exec($ch);\n\n    // Close connection.\n    curl_close($ch);\n\n    // Many things can go wrong with a remote call to file storage facility.\n    // By design, we ignore such errors.\n    return true;\n  }\n\n  // updateEntitiesModified updates the entities_modified field in tt_groups table\n  // with a current timestamp.\n  static function updateEntitiesModified() {\n    global $user;\n    $org_id = $user->org_id;\n    $group_id = $user->getGroup();\n    $mdb2 = getConnection();\n\n    $sql = \"update tt_groups set entities_modified = now() where id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    return (!is_a($affected, 'PEAR_Error'));\n  }\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.19.31.5603\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "filenames": ["WEB-INF/lib/ttGroupHelper.class.php", "initialize.php"], "buggy_code_start_loc": [30, 15], "buggy_code_end_loc": [33, 16], "fixing_code_start_loc": [30, 15], "fixing_code_end_loc": [37, 16], "type": "CWE-89", "message": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. SQL injection vulnerability exist in multiple files in Time Tracker version 1.19.33.5606 and prior due to not properly checking of the \"group\" and \"status\" parameters in POST requests. Group parameter is posted along when navigating between organizational subgroups (groups.php file). Status parameter is used in multiple files to change a status of an entity such as making a project, task, or user inactive. This issue has been patched in version 1.19.33.5607. An upgrade is highly recommended. If an upgrade is not practical, introduce ttValidStatus function as in the latest version and start using it user input check blocks wherever status field is used. For groups.php fix, introduce ttValidInteger function as in the latest version and use it in the access check block in the file.", "other": {"cve": {"id": "CVE-2021-43851", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-22T00:15:09.987", "lastModified": "2021-12-28T14:58:23.080", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. SQL injection vulnerability exist in multiple files in Time Tracker version 1.19.33.5606 and prior due to not properly checking of the \"group\" and \"status\" parameters in POST requests. Group parameter is posted along when navigating between organizational subgroups (groups.php file). Status parameter is used in multiple files to change a status of an entity such as making a project, task, or user inactive. This issue has been patched in version 1.19.33.5607. An upgrade is highly recommended. If an upgrade is not practical, introduce ttValidStatus function as in the latest version and start using it user input check blocks wherever status field is used. For groups.php fix, introduce ttValidInteger function as in the latest version and use it in the access check block in the file."}, {"lang": "es", "value": "Anuko Time Tracker es una aplicaci\u00f3n de seguimiento del tiempo de c\u00f3digo abierto, basada en la web y escrita en PHP. Se presenta una vulnerabilidad de inyecci\u00f3n SQL en m\u00faltiples archivos de Time Tracker versi\u00f3n 1.19.33.5606 y anteriores, debido a que no se comprueban correctamente los par\u00e1metros \"group\" y \"status\" en las peticiones POST. El par\u00e1metro \"group\" es contabilizado cuando se navega entre subgrupos de la organizaci\u00f3n (archivo groups.php). El par\u00e1metro de estado es usado en varios archivos para cambiar el estado de una entidad, como por ejemplo, hacer que un proyecto, una tarea o un usuario est\u00e9n inactivos. Este problema ha sido parcheado en la versi\u00f3n 1.19.33.5607. Se recomienda encarecidamente una actualizaci\u00f3n. Si la actualizaci\u00f3n no es pr\u00e1ctica, introduzca la funci\u00f3n ttValidStatus como en la \u00faltima versi\u00f3n y comience a usarla en los bloques de comprobaci\u00f3n de entrada de usuarios donde es usado el campo status. Para la correcci\u00f3n de groups.php, introduzca la funci\u00f3n ttValidInteger como en la \u00faltima versi\u00f3n y \u00fasela en el bloque de comprobaci\u00f3n de acceso del archivo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.33.5607", "matchCriteriaId": "29EAC4EA-8F91-4D0F-89AF-6A1593DF42A8"}]}]}], "references": [{"url": "https://github.com/anuko/timetracker/commit/0cf32f1046418aa2e5218b0b370064820c330c6a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/commit/94fda0cc0c9c20ab98d38ccc75ff040d13dc7f1b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-wx6x-6rq3-pqcc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/0cf32f1046418aa2e5218b0b370064820c330c6a"}}