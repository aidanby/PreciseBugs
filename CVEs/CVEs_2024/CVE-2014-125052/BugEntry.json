{"buggy_code": ["package org.identifiers.db;\n\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n/**\n * Database access utilities.\n * \n * @author Camille Laibe\n * @version 20140519\n */\npublic class DbUtilities\n{\n\tprivate static final String DRIVER = \"com.mysql.jdbc.Driver\";\n    private static final String SERVER = \"172.17.1.107\";\n    private static final String PORT = \"3306\";\n    private static final String DATABASE = \"miriam-demo\";\n    private static final String LOGIN = \"miriam_demo\";  \n    private static final String PASSWORD = \"demo\";\n    \n\t\n\t/**\n\t * Initialises the database connection.\n\t * @return connection\n\t */\n\tpublic static Connection initDbConnection()\n\t{\n\t\tConnection connection = null;\n\t\t\n\t\t// loads the JDBC driver\n//        System.out.println(\"+ Loads the JDBC driver...\");\n        try\n        {\n            Class.forName(DRIVER);\n        }\n        catch (ClassNotFoundException e)\n        {\n            System.out.println(\"Cannot load the database driver!\");\n            System.out.println(\"ClassNotFound Exception raised: \" + e.getMessage());\n        }\n        \n        // creates a connection to the database\n//        System.out.println(\"+ Creates the connection to the database...\");\n        String url = \"jdbc:mysql://\" + SERVER +  \":\" + PORT + \"/\" + DATABASE;   // a JDBC url\n        try\n        {\n        \tconnection = DriverManager.getConnection(url, LOGIN, PASSWORD);\n        }\n        catch (SQLException e)\n        {\n            System.out.println(\"Cannot open the database connection!\");\n            System.out.println(\"SQL Exception raised: \" + e.getMessage());\n        }\n        \n        return connection;\n\t}\n\t\n\t\n\t/**\n\t * Closes the database connection, included the prepared statement.\n\t * @param connection\n\t * @param stmt\n\t */\n\tpublic static void closeDbConnection(Connection connection, PreparedStatement stmt)\n\t{\n        // closes the connection\n        try\n        {\n            if (null !=  stmt)\n            {\n            \t//System.out.println(\"- Closes the prepared statement\");\n            \tstmt.close();\n            }\n            if (null != connection)\n            {\n            \t//System.out.println(\"- Closes the connection\");\n            \tconnection.close();\n            }\n        }\n        catch (SQLException e)\n        {\n            System.err.println(\"Cannot close the database connection!\");\n            System.err.println(\"SQL Exception raised: \" + e.getMessage());\n        }\n\t}\n\t\n\t\n\t/**\n\t * Closes a Statement silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyStatement(Statement stmt)\n\t{\n\t\ttry\n\t\t{\n\t\t\tstmt.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Closes a PreparedStatement silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyPreparedStatement(PreparedStatement stmt)\n\t{\n\t\ttry\n\t\t{\n\t\t\tstmt.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Closes a ResultSet silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyResultSet(ResultSet rs)\n\t{\n\t\ttry\n\t\t{\n\t\t\trs.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n}\n", "package org.identifiers.db;\n\n\nimport org.identifiers.data.URIextended;\nimport org.identifiers.db.DbUtilities;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * Simple dao for SPARQL testing.\n * \n * @author Camille\n * @version 20140519\n */\npublic class RegistryDao\n{\n\tprivate Connection connection = null;\n\t\n\t\n\t\n\t\n\t/**\n\t * Returns all URIs sameAs the provided one.\n\t * @param uri\n\t * @return\n\t */\n\tpublic List<URIextended> getSameAsURIs(String uri)\n\t{\n        Boolean error = false;   // if an error happens\n        PreparedStatement stmt = null;\n        ResultSet rs;\n        List<URIextended> urls = null;\n        \n        // initialisation of the database connection\n\t    connection = DbUtilities.initDbConnection();\n        \n        try\n        {\n\n            final String uriTobe = uri.substring(0,uri.indexOf(\"/\", 10));\n\t\t\tString query = \"SELECT convertPrefix, ptr_datatype FROM mir_resource WHERE `convertPrefix` LIKE '\"+uriTobe+\"%'\";\n            \n            try\n            {\n                stmt = connection.prepareStatement(query);\n            }\n            catch (SQLException e)\n            {\n                System.err.println(\"Error while creating the prepared statement!\");\n                System.err.println(\"SQL Exception raised: \" + e.getMessage());\n            }\n            \n            //logger.debug(\"SQL prepared query: \" + stmt.toString());\n            rs = stmt.executeQuery();\n\n            String dataTypeId = null;\n            String identifier = null;\n\n            while (rs.next()) {\n                String convertPrefix = rs.getString(\"convertPrefix\");\n                if(uri.contains(convertPrefix)){\n                    dataTypeId = rs.getString(\"ptr_datatype\");\n                    identifier = uri.substring(convertPrefix.length());\n                }\n\n            }\n\n            query = \"SELECT convertPrefix, obsolete FROM mir_resource WHERE ptr_datatype=\\\"\"+dataTypeId+\"\\\" and urischeme=1\";\n\n            try\n            {\n                stmt = connection.prepareStatement(query);\n            }\n            catch (SQLException e)\n            {\n                System.err.println(\"Error while creating the prepared statement!\");\n                System.err.println(\"SQL Exception raised: \" + e.getMessage());\n            }\n            //logger.debug(\"SQL prepared query: \" + stmt.toString());\n            rs = stmt.executeQuery();\n\n            urls = new ArrayList<URIextended>();\n            while (rs.next())\n            {\n                urls.add(new URIextended(rs.getString(\"convertPrefix\") + identifier, rs.getInt(\"obsolete\")));\n            }\n            rs.close();\n        }\n        catch (SQLException e)\n        {\n            //logger.error(\"Error during the processing of the result of a query.\");\n            //logger.error(\"SQL Exception raised: \" + e.getMessage());\n            error = true;\n        }\n        finally\n        {\n        \t// closes the database connection and statement\n            DbUtilities.closeDbConnection(connection, stmt);\n        }\n\n\n        // exception handling\n        if (error)\n        {\n            throw new RuntimeException(\"Sorry, an error occurred while dealing with your request.\");\n        }\n        System.out.println(\"u\"+urls.size());\n        return urls;\n\t}\n}\n"], "fixing_code": ["package org.identifiers.db;\n\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n/**\n * Database access utilities.\n * \n * @author Camille Laibe\n * @version 20140519\n */\npublic class DbUtilities\n{\n\tprivate static final String DRIVER = \"com.mysql.jdbc.Driver\";\n    private static final String SERVER = \"172.17.1.107\";\n    private static final String PORT = \"3306\";\n    private static final String DATABASE = \"miriam-demo\";\n    private static final String LOGIN = \"miriam_demo\";  \n    private static final String PASSWORD = \"demo\";\n    \n\t\n\t/**\n\t * Initialises the database connection.\n\t * @return connection\n\t */\n\tpublic static Connection initDbConnection()\n\t{\n\t\tConnection connection = null;\n\t\t\n\t\t// loads the JDBC driver\n//        System.out.println(\"+ Loads the JDBC driver...\");\n        try\n        {\n            Class.forName(DRIVER);\n        }\n        catch (ClassNotFoundException e)\n        {\n            System.out.println(\"Cannot load the database driver!\");\n            System.out.println(\"ClassNotFound Exception raised: \" + e.getMessage());\n        }\n        \n        // creates a connection to the database\n//        System.out.println(\"+ Creates the connection to the database...\");\n        String url = \"jdbc:mysql://\" + SERVER +  \":\" + PORT + \"/\" + DATABASE;   // a JDBC url\n        try\n        {\n        \tconnection = DriverManager.getConnection(url, LOGIN, PASSWORD);\n        }\n        catch (SQLException e)\n        {\n            System.out.println(\"Cannot open the database connection!\");\n            System.out.println(\"SQL Exception raised: \" + e.getMessage());\n        }\n        \n        return connection;\n\t}\n\t\n\t\n\t/**\n\t * Closes the database connection, included the prepared statement.\n\t * @param connection\n\t * @param stmt\n\t */\n\tpublic static void closeDbConnection(Connection connection)\n\t{\n        // closes the connection\n        try\n        {\n            if (null != connection)\n            {\n            \t//System.out.println(\"- Closes the connection\");\n            \tconnection.close();\n            }\n        }\n        catch (SQLException e)\n        {\n            System.err.println(\"Cannot close the database connection!\");\n            System.err.println(\"SQL Exception raised: \" + e.getMessage());\n        }\n\t}\n\t\n\t\n\t/**\n\t * Closes a Statement silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyStatement(Statement stmt)\n\t{\n\t\ttry\n\t\t{\n\t\t\tstmt.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Closes a PreparedStatement silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyPreparedStatement(PreparedStatement stmt)\n\t{\n\t\ttry\n\t\t{\n\t\t\tstmt.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Closes a ResultSet silently (no exception raised).\n\t */\n\tpublic static void closeSilentlyResultSet(ResultSet rs)\n\t{\n\t\ttry\n\t\t{\n\t\t\trs.close();\n\t\t}\n\t\tcatch (SQLException e)\n\t\t{\n\t\t\t// nothing\n\t\t}\n\t}\n}\n", "package org.identifiers.db;\n\nimport org.identifiers.data.URIextended;\nimport org.identifiers.db.DbUtilities;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Simple dao for SPARQL testing.\n * \n * @author Camille\n * @version 20140519\n */\npublic class RegistryDao {\n\n\t/**\n\t * Returns all URIs sameAs the provided one.\n\t * \n\t * @param uri\n\t * @return\n\t */\n\tpublic List<URIextended> getSameAsURIs(String uri) {\n\n\t\tList<URIextended> urls = null;\n\n\t\t// initialisation of the database connection\n\t\ttry (Connection connection = DbUtilities.initDbConnection()) {\n\n\t\t\tfinal String uriTobe = uri.substring(0, uri.indexOf(\"/\", 10))+'%';\n\t\t\tString query = \"SELECT convertPrefix, ptr_datatype FROM mir_resource WHERE `convertPrefix` LIKE ?\";\n\n\t\t\tString dataTypeId = null;\n\t\t\tString identifier = null;\n\n\t\t\ttry (PreparedStatement stmt = connection.prepareStatement(query)) {\n\t\t\t\tstmt.setString(1, uriTobe);\n\t\t\t\ttry (ResultSet rs = stmt.executeQuery()) {\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\tString convertPrefix = rs.getString(\"convertPrefix\");\n\t\t\t\t\t\tif (uri.contains(convertPrefix)) {\n\t\t\t\t\t\t\tdataTypeId = rs.getString(\"ptr_datatype\");\n\t\t\t\t\t\t\tidentifier = uri.substring(convertPrefix.length());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tSystem.err\n\t\t\t\t\t\t.println(\"Error while creating the prepared statement!\");\n\t\t\t\tSystem.err.println(\"SQL Exception raised: \" + e.getMessage());\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"Sorry, an error occurred while dealing with your request.\",\n\t\t\t\t\t\te);\n\t\t\t}\n\n\t\t\t// logger.debug(\"SQL prepared query: \" + stmt.toString());\n\n\t\t\tquery = \"SELECT convertPrefix, obsolete FROM mir_resource WHERE ptr_datatype=? and urischeme=1\";\n\n\t\t\ttry (PreparedStatement stmt = connection.prepareStatement(query)) {\n\t\t\t\tstmt.setString(1, dataTypeId);\n\t\t\t\ttry (ResultSet rs = stmt.executeQuery()) {\n\n\t\t\t\t\turls = new ArrayList<URIextended>();\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\turls.add(new URIextended(rs.getString(\"convertPrefix\")\n\t\t\t\t\t\t\t\t+ identifier, rs.getInt(\"obsolete\")));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tSystem.err\n\t\t\t\t\t\t.println(\"Error while creating the prepared statement!\");\n\t\t\t\tSystem.err.println(\"SQL Exception raised: \" + e.getMessage());\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"Sorry, an error occurred while dealing with your request.\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t\t// logger.debug(\"SQL prepared query: \" + stmt.toString());\n\n\t\t} catch (SQLException e1) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Sorry, an error occurred while dealing with your request.\",\n\t\t\t\t\te1);\n\t\t}\n\t\tSystem.out.println(\"u\" + urls.size());\n\t\treturn urls;\n\t}\n}\n"], "filenames": ["src/main/java/org/identifiers/db/DbUtilities.java", "src/main/java/org/identifiers/db/RegistryDao.java"], "buggy_code_start_loc": [70, 2], "buggy_code_end_loc": [80, 115], "fixing_code_start_loc": [70, 1], "fixing_code_end_loc": [74, 91], "type": "CWE-89", "message": "A vulnerability was found in JervenBolleman sparql-identifiers and classified as critical. This issue affects some unknown processing of the file src/main/java/org/identifiers/db/RegistryDao.java. The manipulation leads to sql injection. The name of the patch is 44bb0db91c064e305b192fc73521d1dfd25bde52. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217571.", "other": {"cve": {"id": "CVE-2014-125052", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T21:15:09.060", "lastModified": "2023-01-12T15:51:27.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in JervenBolleman sparql-identifiers and classified as critical. This issue affects some unknown processing of the file src/main/java/org/identifiers/db/RegistryDao.java. The manipulation leads to sql injection. The name of the patch is 44bb0db91c064e305b192fc73521d1dfd25bde52. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217571."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sparql-identifiers_project:sparql-identifiers:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-05-19", "matchCriteriaId": "FAC1B2FF-912D-4C6B-8955-8BCE19331340"}]}]}], "references": [{"url": "https://github.com/JervenBolleman/sparql-identifiers/commit/44bb0db91c064e305b192fc73521d1dfd25bde52", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217571", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217571", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/JervenBolleman/sparql-identifiers/commit/44bb0db91c064e305b192fc73521d1dfd25bde52"}}