{"buggy_code": ["package ca.uhn.fhir.to;\n\nimport ca.uhn.fhir.context.FhirContext;\nimport ca.uhn.fhir.context.FhirVersionEnum;\nimport ca.uhn.fhir.context.RuntimeResourceDefinition;\nimport ca.uhn.fhir.model.api.ExtensionDt;\nimport ca.uhn.fhir.model.api.IResource;\nimport ca.uhn.fhir.model.dstu2.resource.Conformance;\nimport ca.uhn.fhir.model.primitive.DecimalDt;\nimport ca.uhn.fhir.rest.api.Constants;\nimport ca.uhn.fhir.rest.api.EncodingEnum;\nimport ca.uhn.fhir.rest.client.api.IClientInterceptor;\nimport ca.uhn.fhir.rest.client.api.IHttpRequest;\nimport ca.uhn.fhir.rest.client.api.IHttpResponse;\nimport ca.uhn.fhir.rest.client.impl.GenericClient;\nimport ca.uhn.fhir.to.model.HomeRequest;\nimport ca.uhn.fhir.util.ExtensionConstants;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.Header;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.message.BasicHeader;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestComponent;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceComponent;\nimport org.hl7.fhir.dstu3.model.DecimalType;\nimport org.hl7.fhir.dstu3.model.Extension;\nimport org.hl7.fhir.instance.model.api.IAnyResource;\nimport org.hl7.fhir.instance.model.api.IBaseResource;\nimport org.hl7.fhir.instance.model.api.IDomainResource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ui.ModelMap;\nimport org.thymeleaf.ITemplateEngine;\nimport org.thymeleaf.TemplateEngine;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.*;\n\nimport static org.apache.commons.lang3.StringUtils.defaultString;\n\npublic class BaseController {\n\tstatic final String PARAM_RESOURCE = \"resource\";\n\tstatic final String RESOURCE_COUNT_EXT_URL = \"http://hl7api.sourceforge.net/hapi-fhir/res/extdefs.html#resourceCount\";\n\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(BaseController.class);\n\t@Autowired\n\tprotected TesterConfig myConfig;\n\tprivate Map<FhirVersionEnum, FhirContext> myContexts = new HashMap<FhirVersionEnum, FhirContext>();\n\tprivate List<String> myFilterHeaders;\n\t@Autowired\n\tprivate ITemplateEngine myTemplateEngine;\n\n\tpublic BaseController() {\n\t\tsuper();\n\t}\n\n\tprotected IBaseResource addCommonParams(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tfinal String serverId = theRequest.getServerIdWithDefault(myConfig);\n\t\tfinal String serverBase = theRequest.getServerBase(theServletRequest, myConfig);\n\t\tfinal String serverName = theRequest.getServerName(myConfig);\n\t\tfinal String apiKey = theRequest.getApiKey(theServletRequest, myConfig);\n\t\ttheModel.put(\"serverId\", serverId);\n\t\ttheModel.put(\"base\", serverBase);\n\t\ttheModel.put(\"baseName\", serverName);\n\t\ttheModel.put(\"apiKey\", apiKey);\n\t\ttheModel.put(\"resourceName\", defaultString(theRequest.getResource()));\n\t\ttheModel.put(\"encoding\", theRequest.getEncoding());\n\t\ttheModel.put(\"pretty\", theRequest.getPretty());\n\t\ttheModel.put(\"_summary\", theRequest.get_summary());\n\t\ttheModel.put(\"serverEntries\", myConfig.getIdToServerName());\n\n\t\treturn loadAndAddConf(theServletRequest, theRequest, theModel);\n\t}\n\n\tprivate Header[] applyHeaderFilters(Header[] theAllHeaders) {\n\t\tif (myFilterHeaders == null || myFilterHeaders.isEmpty()) {\n\t\t\treturn theAllHeaders;\n\t\t}\n\t\tArrayList<Header> retVal = new ArrayList<Header>();\n\t\tfor (Header next : theAllHeaders) {\n\t\t\tif (!myFilterHeaders.contains(next.getName().toLowerCase())) {\n\t\t\t\tretVal.add(next);\n\t\t\t}\n\t\t}\n\t\treturn retVal.toArray(new Header[retVal.size()]);\n\t}\n\n\tprivate Header[] applyHeaderFilters(Map<String, List<String>> theAllHeaders) {\n\t\tArrayList<Header> retVal = new ArrayList<Header>();\n\t\tfor (String nextKey : theAllHeaders.keySet()) {\n\t\t\tfor (String nextValue : theAllHeaders.get(nextKey)) {\n\t\t\t\tif (myFilterHeaders == null || !myFilterHeaders.contains(nextKey.toLowerCase())) {\n\t\t\t\t\tretVal.add(new BasicHeader(nextKey, nextValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn retVal.toArray(new Header[retVal.size()]);\n\t}\n\n\tprivate String format(String theResultBody, EncodingEnum theEncodingEnum) {\n\t\tString str = StringEscapeUtils.escapeHtml4(theResultBody);\n\t\tif (str == null || theEncodingEnum == null) {\n\t\t\treturn str;\n\t\t}\n\n\t\tStringBuilder b = new StringBuilder();\n\n\t\tif (theEncodingEnum == EncodingEnum.JSON) {\n\n\t\t\tboolean inValue = false;\n\t\t\tboolean inQuote = false;\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tchar prevChar = (i > 0) ? str.charAt(i - 1) : ' ';\n\t\t\t\tchar nextChar = str.charAt(i);\n\t\t\t\tchar nextChar2 = (i + 1) < str.length() ? str.charAt(i + 1) : ' ';\n\t\t\t\tchar nextChar3 = (i + 2) < str.length() ? str.charAt(i + 2) : ' ';\n\t\t\t\tchar nextChar4 = (i + 3) < str.length() ? str.charAt(i + 3) : ' ';\n\t\t\t\tchar nextChar5 = (i + 4) < str.length() ? str.charAt(i + 4) : ' ';\n\t\t\t\tchar nextChar6 = (i + 5) < str.length() ? str.charAt(i + 5) : ' ';\n\t\t\t\tif (inQuote) {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\tif (prevChar != '\\\\' && nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t} else if (nextChar == '\\\\' && nextChar2 == '\"') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (nextChar == ':') {\n\t\t\t\t\t\tinValue = true;\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t} else if (nextChar == '[' || nextChar == '{') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = false;\n\t\t\t\t\t} else if (nextChar == '{' || nextChar == '}' || nextChar == ',') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = false;\n\t\t\t\t\t} else if (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tif (inValue) {\n\t\t\t\t\t\t\tb.append(\"<span class='hlQuot'>&quot;\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tb.append(\"<span class='hlTagName'>&quot;\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinQuote = true;\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t} else if (nextChar == ':') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tboolean inQuote = false;\n\t\t\tboolean inTag = false;\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tchar nextChar = str.charAt(i);\n\t\t\t\tchar nextChar2 = (i + 1) < str.length() ? str.charAt(i + 1) : ' ';\n\t\t\t\tchar nextChar3 = (i + 2) < str.length() ? str.charAt(i + 2) : ' ';\n\t\t\t\tchar nextChar4 = (i + 3) < str.length() ? str.charAt(i + 3) : ' ';\n\t\t\t\tchar nextChar5 = (i + 4) < str.length() ? str.charAt(i + 4) : ' ';\n\t\t\t\tchar nextChar6 = (i + 5) < str.length() ? str.charAt(i + 5) : ' ';\n\t\t\t\tif (inQuote) {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t}\n\t\t\t\t} else if (inTag) {\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'g' && nextChar3 == 't' && nextChar4 == ';') {\n\t\t\t\t\t\tb.append(\"</span><span class='hlControl'>&gt;</span>\");\n\t\t\t\t\t\tinTag = false;\n\t\t\t\t\t\ti += 3;\n\t\t\t\t\t} else if (nextChar == ' ') {\n\t\t\t\t\t\tb.append(\"</span><span class='hlAttr'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t} else if (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"<span class='hlQuot'>&quot;\");\n\t\t\t\t\t\tinQuote = true;\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'l' && nextChar3 == 't' && nextChar4 == ';') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>&lt;</span><span class='hlTagName'>\");\n\t\t\t\t\t\tinTag = true;\n\t\t\t\t\t\ti += 3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn b.toString();\n\t}\n\n\tprivate String formatUrl(String theUrlBase, String theResultBody) {\n\t\tString str = theResultBody;\n\t\tif (str == null) {\n\t\t\treturn str;\n\t\t}\n\n\t\ttry {\n\t\t\tstr = URLDecoder.decode(str, \"UTF-8\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tourLog.error(\"Should not happen\", e);\n\t\t}\n\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"<span class='hlUrlBase'>\");\n\n\t\tboolean inParams = false;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tchar nextChar = str.charAt(i);\n\t\t\t// char nextChar2 = i < str.length()-2 ? str.charAt(i+1):' ';\n\t\t\t// char nextChar3 = i < str.length()-2 ? str.charAt(i+2):' ';\n\t\t\tif (!inParams) {\n\t\t\t\tif (nextChar == '?') {\n\t\t\t\t\tinParams = true;\n\t\t\t\t\tb.append(\"</span><wbr /><span class='hlControl'>?</span><span class='hlTagName'>\");\n\t\t\t\t} else {\n\t\t\t\t\tif (i == theUrlBase.length()) {\n\t\t\t\t\t\tb.append(\"</span><wbr /><span class='hlText'>\");\n\t\t\t\t\t}\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (nextChar == '&') {\n\t\t\t\t\tb.append(\"</span><wbr /><span class='hlControl'>&amp;</span><span class='hlTagName'>\");\n\t\t\t\t} else if (nextChar == '=') {\n\t\t\t\t\tb.append(\"</span><span class='hlControl'>=</span><span class='hlAttr'>\");\n\t\t\t\t\t// }else if (nextChar=='%' && Character.isLetterOrDigit(nextChar2)&& Character.isLetterOrDigit(nextChar3)) {\n\t\t\t\t\t// URLDecoder.decode(s, enc)\n\t\t\t\t} else {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (inParams) {\n\t\t\tb.append(\"</span>\");\n\t\t}\n\t\treturn b.toString();\n\t}\n\n\tprotected FhirContext getContext(HomeRequest theRequest) {\n\t\tFhirVersionEnum version = theRequest.getFhirVersion(myConfig);\n\t\tFhirContext retVal = myContexts.get(version);\n\t\tif (retVal == null) {\n\t\t\tretVal = newContext(version);\n\t\t\tmyContexts.put(version, retVal);\n\t\t}\n\t\treturn retVal;\n\t}\n\n\tprotected RuntimeResourceDefinition getResourceType(HomeRequest theRequest, HttpServletRequest theReq) throws ServletException {\n\t\tString resourceName = StringUtils.defaultString(theReq.getParameter(PARAM_RESOURCE));\n\t\tRuntimeResourceDefinition def = getContext(theRequest).getResourceDefinition(resourceName);\n\t\tif (def == null) {\n\t\t\tthrow new ServletException(\"Invalid resourceName: \" + resourceName);\n\t\t}\n\t\treturn def;\n\t}\n\n\tprotected ResultType handleClientException(GenericClient theClient, Exception e, ModelMap theModel) {\n\t\tResultType returnsResource;\n\t\treturnsResource = ResultType.NONE;\n\t\tourLog.warn(\"Failed to invoke server\", e);\n\n\t\tif (e != null) {\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Error: \" + e.getMessage(), e));\n\t\t}\n\n\t\treturn returnsResource;\n\t}\n\n\tprivate IBaseResource loadAndAddConf(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tswitch (theRequest.getFhirVersion(myConfig)) {\n\t\t\tcase DSTU2:\n\t\t\t\treturn loadAndAddConfDstu2(theServletRequest, theRequest, theModel);\n\t\t\tcase DSTU3:\n\t\t\t\treturn loadAndAddConfDstu3(theServletRequest, theRequest, theModel);\n\t\t\tcase R4:\n\t\t\t\treturn loadAndAddConfR4(theServletRequest, theRequest, theModel);\n\t\t\tcase DSTU2_1:\n\t\t\tcase DSTU2_HL7ORG:\n\t\t\t\tbreak;\n\t\t}\n\t\tthrow new IllegalStateException(\"Unknown version: \" + theRequest.getFhirVersion(myConfig));\n\t}\n\n\n\tprivate IResource loadAndAddConfDstu2(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\tca.uhn.fhir.model.dstu2.resource.Conformance conformance;\n\t\ttry {\n\t\t\tconformance = (ca.uhn.fhir.model.dstu2.resource.Conformance) client.fetchConformance().ofType(Conformance.class).execute();\n\t\t} catch (Exception e) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", e.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + e.toString(), e));\n\t\t\tconformance = new ca.uhn.fhir.model.dstu2.resource.Conformance();\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(conformance));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest nextRest : conformance.getRest()) {\n\t\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource nextResource : nextRest.getResource()) {\n\t\t\t\tList<ExtensionDt> exts = nextResource.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((DecimalDt) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest nextRest : conformance.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource theO1, ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource theO2) {\n\t\t\t\t\t\tDecimalDt count1 = new DecimalDt();\n\t\t\t\t\t\tList<ExtensionDt> count1exts = theO1.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (DecimalDt) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDecimalDt count2 = new DecimalDt();\n\t\t\t\t\t\tList<ExtensionDt> count2exts = theO2.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (DecimalDt) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"conf\", conformance);\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\treturn conformance;\n\t}\n\n\tprivate IBaseResource loadAndAddConfDstu3(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\torg.hl7.fhir.dstu3.model.CapabilityStatement capabilityStatement = new CapabilityStatement();\n\t\ttry {\n\t\t\tcapabilityStatement = client.fetchConformance().ofType(org.hl7.fhir.dstu3.model.CapabilityStatement.class).execute();\n\t\t} catch (Exception ex) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", ex.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + ex.toString(), ex));\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(capabilityStatement));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\n\t\tfor (CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\tfor (CapabilityStatementRestResourceComponent nextResource : nextRest.getResource()) {\n\t\t\t\tList<Extension> exts = nextResource.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((DecimalType) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<CapabilityStatementRestResourceComponent>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(CapabilityStatementRestResourceComponent theO1, CapabilityStatementRestResourceComponent theO2) {\n\t\t\t\t\t\tDecimalType count1 = new DecimalType();\n\t\t\t\t\t\tList<Extension> count1exts = theO1.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (DecimalType) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDecimalType count2 = new DecimalType();\n\t\t\t\t\t\tList<Extension> count2exts = theO2.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (DecimalType) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\ttheModel.put(\"conf\", capabilityStatement);\n\t\treturn capabilityStatement;\n\t}\n\n\tprivate IBaseResource loadAndAddConfR4(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\torg.hl7.fhir.r4.model.CapabilityStatement capabilityStatement = new org.hl7.fhir.r4.model.CapabilityStatement();\n\t\ttry {\n\t\t\tcapabilityStatement = client.fetchConformance().ofType(org.hl7.fhir.r4.model.CapabilityStatement.class).execute();\n\t\t} catch (Exception ex) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", ex.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + ex.toString(), ex));\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(capabilityStatement));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\n\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent nextResource : nextRest.getResource()) {\n\t\t\t\tList<org.hl7.fhir.r4.model.Extension> exts = nextResource.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((org.hl7.fhir.r4.model.DecimalType) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent theO1, org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent theO2) {\n\t\t\t\t\t\torg.hl7.fhir.r4.model.DecimalType count1 = new org.hl7.fhir.r4.model.DecimalType();\n\t\t\t\t\t\tList<org.hl7.fhir.r4.model.Extension> count1exts = theO1.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (org.hl7.fhir.r4.model.DecimalType) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\torg.hl7.fhir.r4.model.DecimalType count2 = new org.hl7.fhir.r4.model.DecimalType();\n\t\t\t\t\t\tList<org.hl7.fhir.r4.model.Extension> count2exts = theO2.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (org.hl7.fhir.r4.model.DecimalType) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\ttheModel.put(\"conf\", capabilityStatement);\n\t\treturn capabilityStatement;\n\t}\n\n\tprotected String logPrefix(ModelMap theModel) {\n\t\treturn \"[server=\" + theModel.get(\"serverId\") + \"] - \";\n\t}\n\n\tprotected FhirContext newContext(FhirVersionEnum version) {\n\t\tFhirContext retVal;\n\t\tretVal = new FhirContext(version);\n\t\treturn retVal;\n\t}\n\n\tprivate String parseNarrative(HomeRequest theRequest, EncodingEnum theCtEnum, String theResultBody) {\n\t\ttry {\n\t\t\tIBaseResource par = theCtEnum.newParser(getContext(theRequest)).parseResource(theResultBody);\n\t\t\tString retVal;\n\t\t\tif (par instanceof IResource) {\n\t\t\t\tIResource resource = (IResource) par;\n\t\t\t\tretVal = resource.getText().getDiv().getValueAsString();\n\t\t\t} else if (par instanceof IDomainResource) {\n\t\t\t\tretVal = ((IDomainResource) par).getText().getDivAsString();\n\t\t\t} else {\n\t\t\t\tretVal = null;\n\t\t\t}\n\t\t\treturn StringUtils.defaultString(retVal);\n\t\t} catch (Exception e) {\n\t\t\tourLog.error(\"Failed to parse resource\", e);\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprotected String preProcessMessageBody(String theBody) {\n\t\tif (theBody == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString retVal = theBody.trim();\n\n\t\tStringBuilder b = new StringBuilder();\n\t\tfor (int i = 0; i < retVal.length(); i++) {\n\t\t\tchar nextChar = retVal.charAt(i);\n\t\t\tint nextCharI = nextChar;\n\t\t\tif (nextCharI == 65533) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (nextCharI == 160) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (nextCharI == 194) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tb.append(nextChar);\n\t\t}\n\t\tretVal = b.toString();\n\t\treturn retVal;\n\t}\n\n\tprotected void processAndAddLastClientInvocation(GenericClient theClient, ResultType theResultType, ModelMap theModelMap, long theLatency, String outcomeDescription,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t CaptureInterceptor theInterceptor, HomeRequest theRequest) {\n\t\ttry {\n//\t\t\tApacheHttpRequest lastRequest = theInterceptor.getLastRequest();\n//\t\t\tHttpResponse lastResponse = theInterceptor.getLastResponse();\n//\t\t\tString requestBody = null;\n//\t\t\tString requestUrl = lastRequest != null ? lastRequest.getApacheRequest().getURI().toASCIIString() : null;\n//\t\t\tString action = lastRequest != null ? lastRequest.getApacheRequest().getMethod() : null;\n//\t\t\tString resultStatus = lastResponse != null ? lastResponse.getStatusLine().toString() : null;\n//\t\t\tString resultBody = StringUtils.defaultString(theInterceptor.getLastResponseBody());\n//\n//\t\t\tif (lastRequest instanceof HttpEntityEnclosingRequest) {\n//\t\t\t\tHttpEntity entity = ((HttpEntityEnclosingRequest) lastRequest).getEntity();\n//\t\t\t\tif (entity.isRepeatable()) {\n//\t\t\t\t\trequestBody = IOUtils.toString(entity.getContent());\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\tContentType ct = lastResponse != null ? ContentType.get(lastResponse.getEntity()) : null;\n//\t\t\tString mimeType = ct != null ? ct.getMimeType() : null;\n\n\n\t\t\tIHttpRequest lastRequest = theInterceptor.getLastRequest();\n\t\t\tIHttpResponse lastResponse = theInterceptor.getLastResponse();\n\t\t\tString requestBody = null;\n\t\t\tString requestUrl = null;\n\t\t\tString action = null;\n\t\t\tString resultStatus = null;\n\t\t\tString resultBody = null;\n\t\t\tString mimeType = null;\n\t\t\tContentType ct = null;\n\t\t\tif (lastRequest != null) {\n\t\t\t\trequestBody = lastRequest.getRequestBodyFromStream();\n\t\t\t\trequestUrl = lastRequest.getUri();\n\t\t\t\taction = lastRequest.getHttpVerbName();\n\t\t\t}\n\t\t\tif (lastResponse != null) {\n\t\t\t\tresultStatus = \"HTTP \" + lastResponse.getStatus() + \" \" + lastResponse.getStatusInfo();\n\t\t\t\tlastResponse.bufferEntity();\n\t\t\t\tresultBody = IOUtils.toString(lastResponse.readEntity(), Constants.CHARSET_UTF8);\n\n\t\t\t\tList<String> ctStrings = lastResponse.getHeaders(Constants.HEADER_CONTENT_TYPE);\n\t\t\t\tif (ctStrings != null && ctStrings.isEmpty() == false) {\n\t\t\t\t\tct = ContentType.parse(ctStrings.get(0));\n\t\t\t\t\tmimeType = ct.getMimeType();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tEncodingEnum ctEnum = EncodingEnum.forContentType(mimeType);\n\t\t\tString narrativeString = \"\";\n\n\t\t\tStringBuilder resultDescription = new StringBuilder();\n\t\t\tIBaseResource riBundle = null;\n\n\t\t\tFhirContext context = getContext(theRequest);\n\t\t\tif (ctEnum == null) {\n\t\t\t\tresultDescription.append(\"Non-FHIR response\");\n\t\t\t} else {\n\t\t\t\tswitch (ctEnum) {\n\t\t\t\t\tcase JSON:\n\t\t\t\t\t\tif (theResultType == ResultType.RESOURCE) {\n\t\t\t\t\t\t\tnarrativeString = parseNarrative(theRequest, ctEnum, resultBody);\n\t\t\t\t\t\t\tresultDescription.append(\"JSON resource\");\n\t\t\t\t\t\t} else if (theResultType == ResultType.BUNDLE) {\n\t\t\t\t\t\t\tresultDescription.append(\"JSON bundle\");\n\t\t\t\t\t\t\triBundle = context.newJsonParser().parseResource(resultBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase XML:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (theResultType == ResultType.RESOURCE) {\n\t\t\t\t\t\t\tnarrativeString = parseNarrative(theRequest, ctEnum, resultBody);\n\t\t\t\t\t\t\tresultDescription.append(\"XML resource\");\n\t\t\t\t\t\t} else if (theResultType == ResultType.BUNDLE) {\n\t\t\t\t\t\t\tresultDescription.append(\"XML bundle\");\n\t\t\t\t\t\t\triBundle = context.newXmlParser().parseResource(resultBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresultDescription.append(\" (\").append(defaultString(resultBody).length() + \" bytes)\");\n\n\t\t\tHeader[] requestHeaders = lastRequest != null ? applyHeaderFilters(lastRequest.getAllHeaders()) : new Header[0];\n\t\t\tHeader[] responseHeaders = lastResponse != null ? applyHeaderFilters(lastResponse.getAllHeaders()) : new Header[0];\n\n\t\t\ttheModelMap.put(\"outcomeDescription\", outcomeDescription);\n\t\t\ttheModelMap.put(\"resultDescription\", resultDescription.toString());\n\t\t\ttheModelMap.put(\"action\", action);\n\t\t\ttheModelMap.put(\"ri\", riBundle instanceof IAnyResource);\n\t\t\ttheModelMap.put(\"riBundle\", riBundle);\n\t\t\ttheModelMap.put(\"resultStatus\", resultStatus);\n\n\t\t\ttheModelMap.put(\"requestUrl\", requestUrl);\n\t\t\ttheModelMap.put(\"requestUrlText\", formatUrl(theClient.getUrlBase(), requestUrl));\n\n\t\t\tString requestBodyText = format(requestBody, ctEnum);\n\t\t\ttheModelMap.put(\"requestBody\", requestBodyText);\n\n\t\t\tString resultBodyText = format(resultBody, ctEnum);\n\t\t\ttheModelMap.put(\"resultBody\", resultBodyText);\n\n\t\t\ttheModelMap.put(\"resultBodyIsLong\", resultBodyText.length() > 1000);\n\t\t\ttheModelMap.put(\"requestHeaders\", requestHeaders);\n\t\t\ttheModelMap.put(\"responseHeaders\", responseHeaders);\n\t\t\ttheModelMap.put(\"narrative\", narrativeString);\n\t\t\ttheModelMap.put(\"latencyMs\", theLatency);\n\n\t\t} catch (Exception e) {\n\t\t\tourLog.error(\"Failure during processing\", e);\n\t\t\ttheModelMap.put(\"errorMsg\", toDisplayError(\"Error during processing: \" + e.getMessage(), e));\n\t\t}\n\n\t}\n\n\t/**\n\t * A hook to be overridden by subclasses. The overriding method can modify the error message\n\t * based on its content and/or the related exception.\n\t *\n\t * @param theErrorMsg  The original error message to be displayed to the user.\n\t * @param theException The exception that occurred. May be null.\n\t * @return The modified error message to be displayed to the user.\n\t */\n\tprotected String toDisplayError(String theErrorMsg, Exception theException) {\n\t\treturn theErrorMsg;\n\t}\n\n\tprotected enum ResultType {\n\t\tBUNDLE, NONE, RESOURCE, TAGLIST\n\t}\n\n\tpublic static class CaptureInterceptor implements IClientInterceptor {\n\n\t\tprivate IHttpRequest myLastRequest;\n\t\tprivate IHttpResponse myLastResponse;\n//\t\tprivate String myResponseBody;\n\n\t\tpublic IHttpRequest getLastRequest() {\n\t\t\treturn myLastRequest;\n\t\t}\n\n\t\tpublic IHttpResponse getLastResponse() {\n\t\t\treturn myLastResponse;\n\t\t}\n\n//\t\tpublic String getLastResponseBody() {\n//\t\t\treturn myResponseBody;\n//\t\t}\n\n\t\t@Override\n\t\tpublic void interceptRequest(IHttpRequest theRequest) {\n\t\t\tassert myLastRequest == null;\n\n\t\t\tmyLastRequest = theRequest;\n\t\t}\n\n\t\t@Override\n\t\tpublic void interceptResponse(IHttpResponse theResponse) throws IOException {\n\t\t\tassert myLastResponse == null;\n\t\t\tmyLastResponse = theResponse;\n//\t\t\tmyLastResponse = ((ApacheHttpResponse) theResponse).getResponse();\n//\n//\t\t\tHttpEntity respEntity = myLastResponse.getEntity();\n//\t\t\tif (respEntity != null) {\n//\t\t\t\tfinal byte[] bytes;\n//\t\t\t\ttry {\n//\t\t\t\t\tbytes = IOUtils.toByteArray(respEntity.getContent());\n//\t\t\t\t} catch (IllegalStateException e) {\n//\t\t\t\t\tthrow new InternalErrorException(e);\n//\t\t\t\t}\n//\n//\t\t\t\tmyResponseBody = new String(bytes, \"UTF-8\");\n//\t\t\t\tmyLastResponse.setEntity(new MyEntityWrapper(respEntity, bytes));\n//\t\t\t}\n\t\t}\n\n//\t\tprivate static class MyEntityWrapper extends HttpEntityWrapper {\n//\n//\t\t\tprivate byte[] myBytes;\n//\n//\t\t\tpublic MyEntityWrapper(HttpEntity theWrappedEntity, byte[] theBytes) {\n//\t\t\t\tsuper(theWrappedEntity);\n//\t\t\t\tmyBytes = theBytes;\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic InputStream getContent() throws IOException {\n//\t\t\t\treturn new ByteArrayInputStream(myBytes);\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void writeTo(OutputStream theOutstream) throws IOException {\n//\t\t\t\ttheOutstream.write(myBytes);\n//\t\t\t}\n//\n//\t\t}\n\n\t}\n\n}\n", "<?xml version=\"1.0\"?>\n<document xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/changes/1.0.0\"\n\t\t\t xsi:schemaLocation=\"http://maven.apache.org/changes/1.0.0 ./changes.xsd\">\n\t<properties>\n\t\t<author>James Agnew</author>\n\t\t<title>HAPI FHIR Changelog</title>\n\t</properties>\n\t<body>\n\t\t<release version=\"3.8.0\" date=\"TBD\" description=\"Hippo\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Guava (base): 25-jre -&gt; 27.1-jre</li>\n\t\t\t\t\t<li>Hibernate (JPA): 5.4.1 -&gt; 5.4.2</li>\n\t\t\t\t\t<li>Jackson (JPA): 2.9.7 -&gt; 2.9.8</li>\n\t\t\t\t\t<li>Spring (JPA): 5.1.3.RELEASE -&gt; 5.1.6.RELEASE</li>\n\t\t\t\t\t<li>Spring-Data (JPA): 2.1.3.RELEASE -&gt; 2.1.6.RELEASE</li>\n\t\t\t\t\t<li>Caffeine (JPA): 2.6.2 -&gt; 2.7.0</li>\n\t\t\t\t\t<li>JANSI (CLI): 1.16 -&gt; 1.17.1</li>\n\t\t\t\t\t<!--<li>Jetty (CLI): 9.4.14.v20181114 -&gt; 9.4.17.v20190418</li>-->\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn Servers that are configured to support extended mode\n\t\t\t\t<![CDATA[<code>_elements</code>]]> parameters, it is now possible to\n\t\t\t\tuse the :exclude modifier to exclude entire resource types.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRequestDetails now has methods called getAttribute and setAttribute that can\n\t\t\t\tbe used by interceptors to pass arbitrary data between requests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe hapi-fhir-jpaserver-starter project has been updated to use a properties\n\t\t\t\tfile for configuration, making it much easier to get started with this\n\t\t\t\tproject. Thanks to Sean McIlvenna for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe hapi-fhir-jpaserver-example did not have Subscription capabilities\n\t\t\t\tenabled after the refactoring of how Subscriptions are enabled that\n\t\t\t\toccurred in HAPI FHIR 3.7.0. Thanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tRe-use subscription channel and handlers when a subscription is updated (unless the channel type changed).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the <![CDATA[<code>_elements</code>]]> parameter on searches and reads,\n\t\t\t\trequesting extensions to be included caused the extensions to be included but\n\t\t\t\tnot any values contained within. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA terminology service can now detect when Hibvernate Search (Lucene)\n\t\t\t\tis not enabled, and will perform simple ValueSet expansions without relying\n\t\t\t\ton Hibenrate Search in such cases.\n\t\t\t</action>\n\t\t\t<action type=\"change\" issue=\"1209\">\n\t\t\t\tA Google Analytics script fragment was leftover in the hapi-fhir-jpaserver\n\t\t\t\texample and starter projects. Thanks to Patrick Werner for removing these!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParametersUtil now has a utility method that can be used to add parameter values\n\t\t\t\tusing the string name of the datatype (e.g. \"dateTime\") in order to help\n\t\t\t\tbuilding Parameters resources in a version-independent way.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a search using the JPA server, if a search returned between 1500\n\t\t\t\tand 2000 results, a query for the final page of results would timeout due to\n\t\t\t\ta page calculation error. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, a much more readable error message is now returned returned when \n\t\t\t\ttwo client threads collide while trying to simultaneously create a resource with the\n\t\t\t\tsame client-assigned ID. In addition, better error messages are now returned\n\t\t\t\twhen conflicts such as this one are hit within a FHIR transaction operation.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA query builder has been optimized to take better advantage of SQL IN (..) expressions\n\t\t\t\twhen performing token searches with multiple OR values.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server transaction processor will now automatically detect if the request\n\t\t\t\tBundle contains multiple entries having identical conditional create operations, and\n\t\t\t\tcollapse these into a single operation. This is done as a convenience, since many\n\t\t\t\tconversion algorithms can accidentally generate such duplicates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1223\">\n\t\t\t\tSearching the JPA server with multiple instances of the same token search parameter\n\t\t\t\t(e.g. \"Patient?identifier=&amp;identifier=b\" returned no results even if resources\n\t\t\t\tshould have matched. Thanks to @mingdatacom for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new config setting has been added to the JPA DaoConfig that disables validation\n\t\t\t\tof the resource type for target resources in references.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHapiLocalizer can now handle message patterns with braces that aren't a part of a\n\t\t\t\tmessage format expression. E.g. \"Here is an {example}\".\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA searches using a Composite Unique Index will now use that index for faster\n\t\t\t\tsearching even if the search has _includes and/or _sorts. Previously these two\n\t\t\t\tfeatures caused the search builder to skip using the index.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA searches using a Composite Unique Index did not return the correct results if\n\t\t\t\ta REFERENCE search parameter was used with arguments that consisted of\n\t\t\t\tunqualified resource IDs.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA non-threadsafe use of DateFormat was cleaned up in the StopWatch class.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a search in the JPA server where one of the parameters is a\n\t\t\t\treference with multiple values (e.g. Patient?organization=A,B) the generated\n\t\t\t\tSQL was previously a set of OR clauses and this has been collapsed into a single\n\t\t\t\tIN clause for better performance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen returning the results of a history operation from a HAPI FHIR server,\n\t\t\t\tany entries with a method of DELETE contained a stub resource in\n\t\t\t\tBundle.entry.resource, even though the FHIR spec states that this field\n\t\t\t\tshould be empty. This was corrected.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe hapi-fhir-testpage-overlay project no longer includes any library JARs\n\t\t\t\tin the built WAR, in order to prevent duplicates and conflicts in implementing\n\t\t\t\tprojects.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTwo expunge bug fixes:\n\t\t\t\tThe first bug is that the expunge operation wasn't bailing once it hit its limit. This resulted in a\n\t\t\t\t\"Page size must not be less than one!\" error.\n\t\t\t\tThe second bug is that one case wasn't properly handled: when a resourceId with no version is provided.\n\t\t\t\tThis executed the case where only resource type is provided.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating a resource in the JPA server, if the contents have not actually changed\n\t\t\t\tthe resource version is not updated and no new version is created. In this situation,\n\t\t\t\tthe update time was modified however. It will no longer be updated.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen running the JPA server in Resource Client ID strategy mode of \"ANY\", using the\n\t\t\t\t<![CDATA[<code>_id</code>]]> search parameter could return incorrect results. This\n\t\t\t\thas been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerforming a PUT or POST against a HAPI FHIR Server with no request body caused an\n\t\t\t\tHTTP 500 to be returned instead of a more appropriate HTTP 400. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1255\">\n\t\t\t\tThe fetchValueSet method on IValidationSupport implementation was not visible and could\n\t\t\t\tnot be overridden. Thanks to Patrick Werner for the pull reuqest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1280\">\n\t\t\t\tThe JPA server failed to index R4 reources with search parameters pointing to the Money data type.\n\t\t\t\tThanks to GitHub user @navyflower for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen validating DSTU3 QuestionnaireResponses that leverage the \"enableWhen\" functionality available\n\t\t\t\tin Questionnaire resources, the validation could sometimes fail incorrectly.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded new configuration parameter to DaoConfig and ModelConfig to specify the websocket context path.\n\t\t\t\t(Before it was hardcoded to \"/websocket\").\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded new IRemovableChannel interface.  If a SubscriptionChannel implements this, then when a subscription\n\t\t\t\tchannel is destroyed (because its subscription is deleted) then the remove() method will be called on that\n\t\t\t\tchannel.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe JSON Patch provider has been switched to use the provider from the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"https://github.com/java-json-tools/json-patch\">Java JSON Tools</a>\n\t\t\t\t]]>\n\t\t\t\tproject, as it is much more robust and fault tolerant.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tEnsure that database cursors are closed immediately after performing a FHIR search.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a JSON Patch in JPA server, the post-patched document is now validated to\n\t\t\t\tensure that the patch was valid for the candidate resource. This means that invalid patches\n\t\t\t\tare caught and not just silently ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tExpunges are now done in batches in multiple threads.  Both the number of expunge threads and batch size are configurable\n\t\t\t\tin DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tValidation errors were fixed when using a Questionnaire with enableWhen on a question that\n\t\t\t\tcontains sub-items.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed \"because at least one resource has a reference to this resource\" delete error message that mistakingly reported\n\t\t\t\tthe target instead of the source with the reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tValidationSupportChain will now call isCodeSystemSupported() on each entry in the chain before\n\t\t\t\tcalling fetchCodeSystem() in order to reduce the work required by chain entries. Thanks to \n\t\t\t\tAnders Havn for the suggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.7.0\" date=\"2019-02-06\" description=\"Gale\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR is now built using OpenJDK 11. Users are recommended to upgrade to this version\n\t\t\t\tof Java if this is feasible. We are not yet dropping support for Java 8 (aka 1.8), but\n\t\t\t\tusers are recommended to upgrade if possible.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA): 5.0.8.RELEASE -&gt; 5.1.3.RELEASE</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 2.0.7.RELEASE -&gt; 2.1.3.RELEASE</li>\n\t\t\t\t\t\t<li>Hibernate-Core (JPA): 5.3.6.FINAL -&gt; 5.4.1.FINAL</li>\n\t\t\t\t\t\t<li>Hibernate-Search (JPA): 5.10.3.FINAL -&gt; 5.11.1.FINAL</li>\n\t\t\t\t\t\t<li>Thymeleaf (JPA): 3.0.9.RELEASE -&gt; 3.0.11.RELEASE</li>\n\t\t\t\t\t\t<li>thymeleaf-spring4 (Testpage Overlay) has been replaced with thymeleaf-spring5</li>\n\t\t\t\t\t\t<li>Commons-Lang3: 3.8 -&gt; 3.8.1</li>\n\t\t\t\t\t\t<li>Commons-Text: 1.4 -&gt; 1.4</li>\n\t\t\t\t\t\t<li>Spring Boot: 1.5.6.RELEASE -&gt; 2.1.1.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tChanged subscription processing, if the subscription criteria are straightforward (i.e. no\n\t\t\t\tchained references, qualifiers or prefixes) then attempt to match the incoming resource against\n\t\t\t\tthe criteria in-memory. If the subscription criteria can't be matched in-memory, then the\n\t\t\t\tserver falls back to the original subscription matching process of querying the database. The\n\t\t\t\tin-memory matcher can be disabled by setting isEnableInMemorySubscriptionMatching to \"false\" in\n\t\t\t\tDaoConfig (by default it is true). If isEnableInMemorySubscriptionMatching is \"false\", then all\n\t\t\t\tsubscription matching will query the database as before.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tRemoved BaseSubscriptionInterceptor and all its subclasses (RestHook, EMail, WebSocket). These are replaced\n\t\t\t\tby two new interceptors: SubscriptionActivatingInterceptor that is responsible for activating subscriptions\n\t\t\t\tand SubscriptionMatchingInterceptor that is responsible for matching incoming resources against activated\n\t\t\t\tsubscriptions. Call DaoConfig.addSupportedSubscriptionType(type) to configure which subscription types\n\t\t\t\tare supported in your environment. If you are processing subscriptions on a separate server and only want\n\t\t\t\tto activate subscriptions on this server, you should set DaoConfig.setSubscriptionMatchingEnabled to false.\n\t\t\t\tThe helper method SubscriptionInterceptorLoader.registerInterceptors()\n\t\t\t\twill check if any subscription types are supported, and if so then load active subscriptions into the\n\t\t\t\tSubscriptionRegistry and register the subscription activating interceptor. This method also registers\n\t\t\t\tthe subscription matching interceptor (that matches incoming resources and sends matches to subscription\n\t\t\t\tchannels) only if DaoConfig.isSubscriptionMatchingEnabled is true.\n\t\t\t\tSee https://github.com/jamesagnew/hapi-fhir/wiki/Proposed-Subscription-Design-Change for more\n\t\t\t\tdetails.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tAdded support for matching subscriptions in a separate server from the REST Server. To do this, run the\n\t\t\t\tSubscriptionActivatingInterceptor on the REST server and the SubscriptionMatchingInterceptor in the\n\t\t\t\tstandalone server. Classes required to support running a standalone subscription server are in the\n\t\t\t\tca.uhn.fhir.jpa.subscription.module.standalone package. These classes are excluded by default from\n\t\t\t\tthe JPA ApplicationContext (that package is explicitly filtered out in the BaseConfig.java @ComponentScan).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tChanged behaviour of FHIR Server to reject subscriptions with invalid criteria. If a Subscription\n\t\t\t\tis submitted with invalid criteria, the server returns HTTP 422 \"Unprocessable Entity\" and the\n\t\t\t\tSubscription is not persisted.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server $expunge operation could sometimes fail to expunge if\n\t\t\t\tanother resource linked to a resource that was being\n\t\t\t\texpunged. This has been corrected. In addition, the $expunge operation\n\t\t\t\thas been refactored to use smaller chunks of work\n\t\t\t\twithin a single DB transaction. This improves performance and reduces contention when\n\t\t\t\tperforming large expunge workloads.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1117\">\n\t\t\t\tA badly formatted log message when handing exceptions was cleaned up. Thanks to\n\t\t\t\tMagnus Watn for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"944\">\n\t\t\t\tA NullPointerException has been fixed when using custom resource classes that\n\t\t\t\thave a @Block class as a child element. Thanks to Lars Gram Mathiasen for\n\t\t\t\treporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now allows the GraphQL operation to be\n\t\t\t\tauthorized. Note that this is an all-or-nothing grant for now, it\n\t\t\t\tis not yet possible to specify individual resource security when\n\t\t\t\tusing GraphQL.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe ResponseHighlighterInterceptor now declines to handle Binary responses\n\t\t\t\tprovided as a response from extended operations. In other words if the\n\t\t\t\toperation $foo returns a Binary resource, the ResponseHighliterInterceptor will\n\t\t\t\tnot provide syntax highlighting on the response. This was previously the case for\n\t\t\t\tthe /Binary endpoint, but not for other binary responses.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFHIR Parser now has an additional overload of the\n\t\t\t\t<![CDATA[<code>parseResource</code>]]> method that accepts\n\t\t\t\tan InputStream instead of a Reader as the source.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFHIR Fluent/Generic Client now has a new return option called\n\t\t\t\t<![CDATA[<code>returnMethodOutcome</code>]]> which can be\n\t\t\t\tused to return a raw response. This is handy for invoking operations\n\t\t\t\tthat might return arbitrary binary content.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tMoved state and functionality out of BaseHapiFhirDao.java into new classes: LogicalReferenceHelper,\n\t\t\t\tResourceIndexedSearchParams, IdHelperService, SearcchParamExtractorService, and MatchUrlService.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tReplaced explicit @Bean construction in BaseConfig.java with @ComponentScan. Beans with state are annotated\n\t\t\t\twith\n\t\t\t\t@Component and stateless beans are annotated as @Service. Also changed SearchBuilder.java and the\n\t\t\t\tthree Subscriber classes into @Scope(\"protoype\") so their dependencies can be @Autowired injected\n\t\t\t\tas opposed to constructor parameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA resource reindexer was fixed: In many cases the reindexer would\n\t\t\t\tmark reindexing jobs as deleted before they had actually completed, leading to\n\t\t\t\tsome resources not actually being reindexed.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe JPA stale search deletion service now deletes cached search results in much\n\t\t\t\tlarger batches (20000 instead of 500) in order to reduce the amount of noise\n\t\t\t\tin the logs.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now allows arbitrary FHIR $operations to be authorized,\n\t\t\t\tincluding support for either allowing the operation response to proceed unchallenged,\n\t\t\t\tor authorizing the contents of the response.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Migrator tool enhancements:\n\t\t\t\tAn invalid SQL syntax issue has been fixed when running the CLI JPA Migrator tool against\n\t\t\t\tOracle or SQL Server. In addition, when using the \"Dry Run\" option, all generated SQL\n\t\t\t\tstatements will be logged at the end of the run. Also, a case sensitivity issue when running against\n\t\t\t\tsome Postgres databases has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, when performing a chained reference search on a search parameter with\n\t\t\t\ta target type of\n\t\t\t\t<![CDATA[<code>Reference(Any)</code>]]>, the search failed with an incomprehensible\n\t\t\t\terror. This has been corrected to return an error message indicating that the chain\n\t\t\t\tmust be qualified with a resource type for such a field. For example,\n\t\t\t\t<![CDATA[<code>QuestionnaireResponse?subject:Patient.name=smith</code>]]>\n\t\t\t\tinstead of\n\t\t\t\t<![CDATA[<code>QuestionnaireResponse?subject.name=smith</code>]]>.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe LOINC uploader has been updated to suport the LOINC 2.65 release\n\t\t\t\tfile format.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe resource reindexer can now detect when a resource's current version no longer\n\t\t\t\texists in the database (e.g. because it was manually expunged), and can automatically\n\t\t\t\tadjust the most recent version to\n\t\t\t\taccount for this.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen updating existing resources, the JPA server will now attempt to reuse/update\n\t\t\t\trows in the index tables if one row is being removed and one row is being added (e.g.\n\t\t\t\tbecause a Patient's name is changing from \"A\" to \"B\"). This has the net effect\n\t\t\t\tof reducing the number\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was corrected with the JPA reindexer, where String index columns do not always\n\t\t\t\tget reindexed if they did not have an identity hash value in the HASH_IDENTITY column.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPlain Server ResourceProvider classes are no longer required to be public classes. This\n\t\t\t\tlimitation has always been enforced, but did not actually serve any real purpose so it\n\t\t\t\thas been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new interceptor called ServeMediaResourceRawInterceptor has been added. This interceptor\n\t\t\t\tcauses Media resources to be served as raw content if the client explicitly requests\n\t\t\t\tthe correct content type cia the Accept header.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"917\">\n\t\t\t\tA new configuration item has been added to the FhirInstanceValidator that\n\t\t\t\tallows you to specify additional \"known extension domains\", meaning\n\t\t\t\tdomains in which the validator will not complain about when it\n\t\t\t\tencounters new extensions. Thanks to Heinz-Dieter Conradi for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUnder some circumstances, when a custom search parameter was added to the JPA server\n\t\t\t\tresources could start reindexing before the new search parameter had been saved, meaning that\n\t\t\t\tit was not applied to all resources. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tIn example-projects/README.md and hapi-fhir-jpaserver-example/README.md, incidate that these examples\n\t\t\t\tprojects\n\t\t\t\tare no longer maintained. The README.md points users to a starter project they should use for examples.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tReplaced use of BeanFactory with custom factory classes that Spring @Lookup the @Scope(\"prototype\") beans\n\t\t\t\t(e.g. SearchBuilderFactory).\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tMoved e-mail from address configuration from EmailInterceptor (which doesn't exist any more) to DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded 3 interfaces for services required by the standalone subscription server. The standalone subscription\n\t\t\t\tserver doesn't have access to a database and so needs to get its resources using a FhirClient. Thus\n\t\t\t\tfor each of these interfaces, there are two implementations: a Dao implementaiton and a FhirClient\n\t\t\t\timplementation. The interfaces thus introduced are ISubscriptionProvider (used to load subscriptions\n\t\t\t\tinto the SubscriptionRegistry), the IResourceProvider (used to get the latest version of a resource\n\t\t\t\tif the \"get latest version\" flag is set on the subscription) and ISearchParamProvider used to load\n\t\t\t\tcustom search parameters.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tSeparated active subscription cache from the interceptors into a new Spring component called the\n\t\t\t\tSubscriptionRegistry. This component maintains a cache of ActiveSubscriptions. An ActiveSubscription\n\t\t\t\tcontains the subscription, it's delivery channel, and a list of delivery handlers.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tIntroduced a new Spring factory interface ISubscribableChannelFactory that is used to create delivery\n\t\t\t\tchannels and handlers. By default, HAPI FHIR ships with a LinkedBlockingQueue implementation of the\n\t\t\t\tdelivery channel factory. If a different type of channel factory is required (e.g. JMS or Kafka), add it\n\t\t\t\tto your application context and mark it as @Primary.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"980\">\n\t\t\t\tWhen using the HL7.org DSTU2 structures, a QuestionnaireResponse with a\n\t\t\t\tvalue of type reference would fail to parse. Thanks to David Gileadi for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1051\">\n\t\t\t\tFHIR Servers now support the HTTP HEAD method for FHIR read operations. Thanks\n\t\t\t\tto GitHub user Cory00 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen running the JPA server on Oracle, certain search queries that return a very large number of\n\t\t\t\t_included resources failed with an SQL exception stating that too many parameters were used. Search\n\t\t\t\tinclude logic has been reworked to avoid this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA Subscription deliveries did not always include the accurate versionId if the Subscription\n\t\t\t\tmodule was configured to use an external queuing engine. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIt is now possible in a plain or JPA server to specify the default return\n\t\t\t\ttype for create/update operations when no Prefer header has been provided\n\t\t\t\tby the client.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIt is now possible in a JPA server to specify the _total calculation\n\t\t\t\tbehaviour if no parameter is supplied by the client. This is done using a\n\t\t\t\tnew setting on the DaoConfig. This can be used to force a total to\n\t\t\t\talways be calculated for searches, including large ones.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now rejects transactions with an invalid or unset request\n\t\t\t\tusing an HTTP 422 response Bundle type instead of silently refusing to authorize them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor is now able to authorize DELETE operations performed via a\n\t\t\t\ttransaction operation. Previously these were always denied.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1065\">\n\t\t\t\tOperationDefinitions are now created for named queries in server\n\t\t\t\tmodule. Thanks to Stig D\u00f8ssing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new server interceptor has been added called \"SearchNarrowingInterceptor\".\n\t\t\t\tThis interceptor can be used to automatically narrow the scope of searches\n\t\t\t\tperformed by the user to limit them to specific resources or compartments\n\t\t\t\tthat the user should have access to.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn a DSTU2 server, if search parameters are expressed with chains directly in the\n\t\t\t\tparameter name (e.g.\n\t\t\t\t<![CDATA[<code>@RequiredParam(name=\"subject.name.family\")</code>]]>) the second\n\t\t\t\tpart of the chain was lost when the chain was described in the server\n\t\t\t\tCapabilityStatement. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the JPA server, search/read operations being performed within a transaction bundle\n\t\t\t\tdid not pass the client request HTTP headers to the sub-request. This meant that\n\t\t\t\tAuthorizationInterceptor could not authorize these requests if it was depending on\n\t\t\t\theaders being present.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using a client in DSTU3/R4 mode, if the client attempted to validate the server\n\t\t\t\tCapabilityStatement but was not able to parse the response, the client would throw\n\t\t\t\tan exception with a misleading error about the Conformance resource not existing. This\n\t\t\t\thas been corrected. Thanks to Shayaan Munshi for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIt is now possible to upload a ConceptMap to the JPA server containing mappings where the\n\t\t\t\tsource or target is a StructureDefinition canonical URI. This was previously blocked, as the\n\t\t\t\tsystem could not apply these mappings. It is now permitted to be stored, although\n\t\t\t\tthe system will still not apply these mappings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA wrapper script for Maven has been added, enabling new users to use Maven without having\n\t\t\t\tto install it beforehand. Thanks to Ari Ruotsalainen for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow a user to perform a search that is scoped to a particular\n\t\t\t\tresource (e.g. Patient?_id=123) if the user has read access for that specific instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1084\">\n\t\t\t\tIn JPA Server REST Hook Subscriptions, any Headers defined in the\n\t\t\t\tSubscription resource are now applied to the outgoing HTTP\n\t\t\t\trequest.\n\t\t\t\tThanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR will now log the Git revision when it first starts up (on the ame line as the version number\n\t\t\t\tthat it already logs).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen fetching a page of search results, if a page offset beyond the total number\n\t\t\t\tof available result was requested, a single result was still returned (e.g.\n\t\t\t\trequesting a page beginning at index 1000 when there are only 10 results would\n\t\t\t\tresult in the 10th result being returned). This will now result in an empty\n\t\t\t\tresponse Bundle as would be expected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded support for _id in in-memory matcher\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe casing of the base64Binary datatype was incorrect in the DSTU3 and R4 model classes.\n\t\t\t\tThis has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a \"subscription-matching-strategy\" meta tag to incoming subscriptions with value of IN_MEMORY\n\t\t\t\tor DATABASE indicating whether the subscription can be matched against new resources in-memory or\n\t\t\t\twhether a call out to the database may be required. I say \"may\" because subscription matches fail fast\n\t\t\t\tso a negative match may be performed in-memory, but a positive match will require a database call.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a JPA search with a chained :text modifier\n\t\t\t\t(e.g. MedicationStatement?medication.code:text=aspirin,tylenol) a series\n\t\t\t\tof unneccesary joins were introduced to the generated SQL query, harming\n\t\t\t\tperformance. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA serialization error when performing some searches in the JPA server\n\t\t\t\tusing data parameters has been fixed. Thanks to GitHub user\n\t\t\t\t@PickOneFish for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1135\">\n\t\t\t\tAn issue with outdated syntax in the Vagrant file that prevent it from being used\n\t\t\t\twas corrected. Thanks to Steve Lewis for the pull requst!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1130\">\n\t\t\t\tThe HAPI FHIR tutorial server project had outdated versions of HAPI FHIR\n\t\t\t\tin its pom file. Thanks to Ricardo Estevez for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1114\">\n\t\t\t\tA NullPointerException during validation was fixed. Thanks to GitHub\n\t\t\t\tuser zilin375 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1148\">\n\t\t\t\tSupport for validating enableWhen in Questionnaires has been added to the Validator. Thanks\n\t\t\t\tto Eeva Turkka and Matti Uutsitalo for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.6.0\" date=\"2018-11-12\" description=\"Food\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Karaf (OSGi): 4.1.4 -&gt; 4.1.6</li>\n\t\t\t\t\t\t<li>Commons-Compress (JPA): 1.14 -&gt; 1.18</li>\n\t\t\t\t\t\t<li>Jackson (JPA): 2.9.2 -&gt; 2.9.7</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA migration tasks from 3.4.0 to 3.5.0 caused a failure if the HFJ_SEARCH_PARM\n\t\t\t\ttable did not exist. This table existed in previous versions of HAPI FHIR but was dropped\n\t\t\t\tin 3.5.0, meaning that migrations would fail if the database was created using a snapshot\n\t\t\t\tversion of 3.5.0.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAutomatic ID generation for contained resources (in cases where the user hasn't manually specified an ID)\n\t\t\t\thas been streamlined to generate more predictable IDs in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue in the HAPI FHIR CLI database migrator command has been resolved, where\n\t\t\t\tsome database drivers did not automatically register and had to be manually added to\n\t\t\t\tthe classpath.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe module which deletes stale searches has been modified so that it deletes very large\n\t\t\t\tsearches (searches with 10000+ results in the query cache) in smaller batches, in order\n\t\t\t\tto avoid having very long running delete operations occupying database connections for a\n\t\t\t\tlong time or timing out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen invoking an operation using the fluent client on an instance, the operation would\n\t\t\t\taccidentally invoke against the server if the provided ID did not include a type. This\n\t\t\t\thas been corrected so that an IllegalArgumentException is now thrown.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new operation has been added to the JPA server called\n\t\t\t\t<![CDATA[<code>$trigger-subscription</code>]]>. This can\n\t\t\t\tbe used to cause a transaction to redeliver a resource that previously triggered.\n\t\t\t\tSee\n\t\t\t\t<![CDATA[<a href=\"https://smilecdr.com/docs/current/fhir_repository/subscription.html#manually-triggering-subscriptions\">this link</a>]]>\n\t\t\t\tfor a description of how this feature works. Note that you must add the\n\t\t\t\tSubscriptionRetriggeringProvider as shown in the sample project\n\t\t\t\t<![CDATA[<a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/java/ca/uhn/fhir/jpa/demo/JpaServerDemo.java\">here</a>.]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen operating in R4 mode, the HAPI FHIR server will now populate Bundle.entry.response\n\t\t\t\tfor history and search results, which is did not previously do.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA database migrator tool has been enhanced so that it now supports migrations from\n\t\t\t\tHAPI FHIR 3.3.0 to HAPI FHIR 3.4.0 / 3.5.0+ as well.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the HAPI FHIR CLI, user-prompted passwords were not correctly encoded, meaning that the\n\t\t\t\t\"--basic-auth PROMPT\" action was not usable. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server SearchCoordinator has been refactored to make searches more efficient:\n\t\t\t\tWhen a search is performed, the SearchCoordinator loads multiple pages of results even\n\t\t\t\tif the user has only requested a small number. This is done in order to prevent needing\n\t\t\t\tto re-run the search for every page of results that is loaded.\n\t\t\t\tIn previous versions of HAPI FHIR, when a search was made the SearchCoordinator would\n\t\t\t\tprefetch as many results as the user could possibly request across all pages (even if\n\t\t\t\tthis meant prefetching thousands or millions of resources).\n\t\t\t\tAs of this version, a new option has been added to DaoConfig that specifies how many\n\t\t\t\tresources to prefetch. This can have a significant impact on performance for servers\n\t\t\t\twith a large number of resources, where users often only want the first page\n\t\t\t\tof results.\n\t\t\t\tSee\n\t\t\t\t<![CDATA[<code>DatConfig#setSearchPreFetchThresholds()</code>]]>\n\t\t\t\tfor configuration of this feature.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a JPA server using a date parameter, if a time is not specified in\n\t\t\t\tthe query URL, the date range is expanded slightly to include all possible\n\t\t\t\ttimezones where the date that could apply. This makes the search slightly more\n\t\t\t\tinclusive, which errs on the side of caution.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug was fixed in the JPA server $expunge operation where a database connection\n\t\t\t\tcould sometimes be opened and not returned to the pool immediately, leading to\n\t\t\t\tpool starvation if the operation was called many times in a row.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new setting has been added to the JPA server DaoConfig that causes the server\n\t\t\t\tto keep certain searches \"warm\" in the cache. This means that the search will\n\t\t\t\tbe performed periodically in the background in order to keep a reasonably fresh copy\n\t\t\t\tof the results in the query cache.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the testpage overlay to delete a resource, currently a crash can occur\n\t\t\t\tif an unqualified ID is placed in the ID text box. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not allow FHIR batch operations when the transaction()\n\t\t\t\tpermission is granted. This has been corrected so that transaction() allows both\n\t\t\t\tbatch and transaction requests to proceed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now automatically supplies several appropriate hibernate performance\n\t\t\t\tsettings as long as the JPA EntityManagerFactory was created using HAPI FHIR's\n\t\t\t\tbuilt-in method for creating it.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tExisting JPA projects should consider using\n\t\t\t\t<![CDATA[<code>super.entityManagerFactory()</code>]]>\n\t\t\t\tas shown in\n\t\t\t\t<![CDATA[<a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/java/ca/uhn/fhir/jpa/demo/FhirServerConfig.java#L62\">the example project</a>]]>\n\t\t\t\tif they are not already.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe FhirTerser <![CDATA[<code>getValues(...)</code>]]> methods have been overloaded. The terser can now be\n\t\t\t\tused to create a null-valued element where none exists. Additionally, the terser can now add a null-valued\n\t\t\t\textension where one or more such extensions already exist. These changes allow better population of FHIR\n\t\t\t\telements provided an arbitrary FHIR path.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe FhirTerser <![CDATA[<code>getValues(...)</code>]]> methods were not properly handling modifier\n\t\t\t\textensions for verions of FHIR prior to DSTU3. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating resources in the JPA server, a bug caused index table entries to be refreshed\n\t\t\t\tsometimes even though the index value hadn't changed. This issue did not cause incorrect search\n\t\t\t\tresults but had an effect on write performance. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe @Operation annotation used to declare operations on the Plain Server now\n\t\t\t\thas a wildcard constant which may be used for the operation name. This allows\n\t\t\t\tyou to create a server that supports operations that are not known to the\n\t\t\t\tserver when it starts up. This is generally not advisable but can be useful\n\t\t\t\tfor some circumstances.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using an @Operation method in the Plain Server, it is now possible\n\t\t\t\tto use a parameter annotated with @ResourceParam to receive the Parameters\n\t\t\t\t(or other) resource supplied by the client as the request body.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server version migrator tool now runs in a multithreaded way, allowing it to\n\t\t\t\tupgrade th database faster when migration tasks require data updates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server was fixed: When a resource was previously deleted,\n\t\t\t\ta transaction could not be posted that both restored the deleted resource but\n\t\t\t\talso contained references to the now-restored resource.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe $expunge operation could sometimes fail to delete resources if a resource\n\t\t\t\tto be deleted had recently been returned in a search result. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new setting has been added to the JPA Server DopConfig that controls the\n\t\t\t\tbehaviour when a client-assigned ID is encountered (i.e. the client performs\n\t\t\t\tan HTTP PUT to a resource ID that doesn't already exist on the server). It is\n\t\t\t\tnow possible to disallow this action, to only allow alphanumeric IDs (the default\n\t\t\t\tand only option previously) or allow any IDs including alphanumeric.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1103\" dev=\"ruthakm\">\n\t\t\t\tIt is now possible to use your own IMessageResolver instance in the narrative\n\t\t\t\tgenerator. Thanks to Ruth Alkema for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1071\" dev=\"volsch\">\n\t\t\t\tWhen restful reponses tried to return multiple instances of the same response header,\n\t\t\t\tsome instances were discarded. Thanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST client now allows for configurable behaviour as to whether a\n\t\t\t\t<![CDATA[<code>_format</code>]]>\n\t\t\t\tparameter should be included in requests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server R4 SearchParameter custom expression validation is now done using the\n\t\t\t\tactual FHIRPath evaluator, meaning it is more rigorous in what it can find.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1047\">\n\t\t\t\tA NullPointerException in DateRangeParam when a client URL conrtained a malformed\n\t\t\t\tdate was corrected. Thanks Heinz-Dieter Conradi for the Pull Request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.5.0\" date=\"2018-09-17\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR now supports JDK 9 and JDK 10, both for building HAPI FHIR\n\t\t\t\tas well as for use. JDK 8 remains supported and is the minimum requirement\n\t\t\t\tin order to build or use HAPI FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new command has been added to the HAPI FHIR CLI tool: \"migrate-database\". This\n\t\t\t\tcommand performs the schema modifications required when upgrading HAPI FHIR JPA\n\t\t\t\tto a new version (previously this was a manual process involving running scripts and\n\t\t\t\treindexing everything).\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br>\n\t\t\t\tSee the\n\t\t\t\t<a href=\"http://hapifhir.io/doc_cli.html#migrate-database\">command documentation</a>\n\t\t\t\tfor more information on how to use this tool. Please post in the HAPI FHIR\n\t\t\t\tGoogle Group if you run into issues, as this is a brand new framework and we still need\n\t\t\t\tlots of help with testing.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Gson (JSON Parser): 2.8.1 -&gt; 2.8.5</li>\n\t\t\t\t\t\t<li>Spring Framework (JPA): 5.0.3.RELEASE -&gt; 5.0.8.RELEASE</li>\n\t\t\t\t\t\t<li>Hibernate ORM (JPA): 5.2.16.Final -&gt; 5.3.6.Final</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.7.1.Final -&gt; 5.10.3.Final</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.4.8.v20171121 -&gt; 9.4.12.v20180830</li>\n\t\t\t\t\t\t<li>Commons-Codec (All): 1.10 -&gt; 1.11</li>\n\t\t\t\t\t\t<li>Commons-Lang (All): 3.7 -&gt; 3.8</li>\n\t\t\t\t\t\t<li>Commons-IO (All): 2.5 -&gt; 2.6</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 1.11.6.RELEASE -&gt; 2.0.7.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new mnandatory library depdendency has been added to hapi-fhir-base, meaning that all\n\t\t\t\tapplications using HAPI FHIR must import ti: commons-text. This library has been added as\n\t\t\t\ta few utility methods used by HAPI FHIR that were formerly in the commons-lang3\n\t\t\t\tproject have been moved into commons-text. This library has been added as a non-optional\n\t\t\t\tdependency in the hapi-fhir-base POM, so Maven/Gradle users should not have to make\n\t\t\t\tany changes.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now has a configuration item in the DaoConfig to specify which bundle types\n\t\t\t\tmay be stored as-is on the /Bundle endpoint. By default the following types\n\t\t\t\tare allowed: collection, document, message.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCapabilityStatements generated by the server module will now include the server\n\t\t\t\tbase URL in the\n\t\t\t\t<![CDATA[<code>CapabilityStatement.implementation.url</code>]]>\n\t\t\t\tfield.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"974\">\n\t\t\t\tSpring-data (used by the JPA server) has been upgraded to version 2.0.7\n\t\t\t\t(from version 1.11.6). Thanks to Roman Doboni for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash in the validator was fixed: Validating a Bundle that did not have Bundle.fullUrl\n\t\t\t\tpopulated could cause a NullPointerException.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now examines requests more closely in order\n\t\t\t\tto block requests early that are not possibly going to return\n\t\t\t\tallowable results when compartment rules are used. For example,\n\t\t\t\tif an AuthorizationInterceptor is configured to allow only\n\t\t\t\t<![CDATA[<b>read</b>]]>\n\t\t\t\taccess to compartment\n\t\t\t\t<![CDATA[<code>Patient/123</code>]]>,\n\t\t\t\ta search for\n\t\t\t\t<![CDATA[<code>Observation?subject=987</code>]]>\n\t\t\t\twill now be blocked before the method handler is called. Previously\n\t\t\t\tthe search was performed and the results were examined in order to\n\t\t\t\tdetermine whether they were all in the appropriate compartment, but\n\t\t\t\tthis incurs a performance cost, and means that this search would\n\t\t\t\tsuccessfully return an empty Bundle if no matches were present.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new setting on AuthorizationInterceptor called\n\t\t\t\t<![CDATA[<code>setFlags(flags)</code>]]>\n\t\t\t\tcan be used to maintain the previous behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"974\">\n\t\t\t\tJPA server loading logic has been improved to enhance performance when\n\t\t\t\tloading a large number of results in a page, or when loading multiple\n\t\t\t\tsearch results with tags. Thanks to Frank Tao for the pull request!\n\t\t\t\tThis change was introduced as a part of a collaboration between\n\t\t\t\tHAPI FHIR and the US National Institiutes for Health (NIH).\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1010\">\n\t\t\t\tResource loading logic for the JPA server has been optimized to\n\t\t\t\treduce the number of database round trips required when loading\n\t\t\t\tsearch results where many of the entries have a \"forced ID\" (an alphanumeric\n\t\t\t\tclient-assigned resource ID). Thanks to Frank Tao for the pull\n\t\t\t\trequest!\n\t\t\t\tThis change was introduced as a part of a collaboration between\n\t\t\t\tHAPI FHIR and the US National Institiutes for Health (NIH).\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1000\">\n\t\t\t\tLOINC uploader has been updated to support the new LOINC filename\n\t\t\t\tscheme introduced in LOINC 2.64. Thanks to Rob Hausam for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, it is now possible for a custom search parameter\n\t\t\t\tto use the\n\t\t\t\t<![CDATA[<code>resolve()</code>]]> function in its path to descend into\n\t\t\t\tcontained resources and index fields within them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new IValidationSupport implementation has been added, named CachingValidationSupport. This\n\t\t\t\tmodule wraps another implementation and provides short-term caching. This can have a dramatic\n\t\t\t\tperformance improvement on servers that are validating or executing FHIRPath repeatedly\n\t\t\t\tunder load. This module is used by default in the JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn index in the JPA server on the HFJ_FORCED_ID table was incorrectly\n\t\t\t\tnot marked as unique. This meant that under heavy load it was possible to\n\t\t\t\tcreate two resources with the same client-assigned ID.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server\n\t\t\t\t<![CDATA[<code>$expunge</code>]]>\n\t\t\t\toperation deleted components of an individual resource record in\n\t\t\t\tseparate database transactions, meaning that if an operation failed\n\t\t\t\tunexpectedly resources could be left in a weird state. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1015\">\n\t\t\t\tA bug was fixed in the JPA terminology uploader, where it was possible\n\t\t\t\tin some cases for some ValueSets and ConceptMaps to not be saved because\n\t\t\t\tof a premature short circuit during deferred uploading. Thanks to\n\t\t\t\tJoel Schneider for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"969\">\n\t\t\t\tA bug in the HAPI FHIR CLI was fixed, where uploading terminology for R4\n\t\t\t\tcould cause an error about the incorrect FHIR version. Thanks to\n\t\t\t\tRob Hausam for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method has been added to AuthorizationInterceptor that can be used to\n\t\t\t\tcreate rules allowing FHIR patch operations. See\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_rest_server_security.html#Authorizing_Patch_Operations\">Authorizing Patch Operations</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1018\">\n\t\t\t\tA new view has been added to the JPA server, reducing the number of database\n\t\t\t\tcalls required when reading resources back. This causes an improvement in performance.\n\t\t\t\tThanks to Frank Tao for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash was fixed when deleting a ConceptMap resource in the\n\t\t\t\tJPA server. This crash was a regression in HAPI FHIR 3.4.0.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash in the JPA server when performing a manual reindex of a deleted resource\n\t\t\t\twas fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUsing the generic/fluent client, it is now possible to\n\t\t\t\tinvoke the $process-message method using a standard\n\t\t\t\tclient.operation() call. Previously this caused a strange\n\t\t\t\tNullPointerException.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe REST Server now sanitizes URL path components and query parameter\n\t\t\t\tnames to escape several reserved characters (e.g. &quot; and &lt;)\n\t\t\t\tin order to prevent HTML injection attacks via maliciously\n\t\t\t\tcrafted URLs.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"912\">\n\t\t\t\tThe generic/fluent client now supports the :contains modifier on\n\t\t\t\tstring search params. Thanks to Clayton Bodendein for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"996\">\n\t\t\t\tThe HAPI FHIR Server has been updated to correctly reflect the current\n\t\t\t\tFHIR specification behaviour for the Prefer header. This means that\n\t\t\t\tthe server will no longer return an OperationOutcome by default, but\n\t\t\t\tthat one may be requested via a Prefer header, using the newly implemented\n\t\t\t\t\"Repreentation: OperationOutcome\" value.\n\t\t\t\tThanks to Ana Maria Radu for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST Server module now allows more than one Resource Provider\n\t\t\t\t(i.e. more than one implementation of IResourceProvider) to be registered\n\t\t\t\tto the RestfulServer for the same resource type. Previous versions of\n\t\t\t\tHAPI FHIR have always limited support to a single resource provider, but\n\t\t\t\tthis limitation did not serve any purpose so it has been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HashMapResourceProvider now supports the type and\n\t\t\t\tinstance history operations. In addition, the search method\n\t\t\t\tfor the\n\t\t\t\t<![CDATA[<code>_id</code>]]> search parameter now has the\n\t\t\t\tsearch parameter marked as \"required\". This means that additional\n\t\t\t\tsearch methods can be added in subclasses without their intended\n\t\t\t\tsearches being routed to the searchById method. Also, the resource\n\t\t\t\tmap now uses a LinkedHashMap, so searches return a predictable\n\t\t\t\torder for unit tests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed a bug when creating a custom search parameter in the JPA\n\t\t\t\tserver: if the SearchParameter resource contained an invalid\n\t\t\t\texpression, create/update operations for the given resource would\n\t\t\t\tfail with a cryptic error. SearchParameter expressions are now\n\t\t\t\tvalidated upon storage, and the SearchParameter will be rejected\n\t\t\t\tif the expression can not be processed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe generic client history operations (history-instance, history-type,\n\t\t\t\tand history-server) now support the\n\t\t\t\t<![CDATA[<code>_at</code>]]> parameter.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the plain server, many resource provider method parameters may now\n\t\t\t\tuse a generic\n\t\t\t\t<![CDATA[<code>IPrimitiveType&lt;String&gt;</code>]]>\n\t\t\t\tor\n\t\t\t\t<![CDATA[<code>IPrimitiveType&lt;Date&gt;</code>]]> at the\n\t\t\t\tparameter type. This is handy if you are trying to write code\n\t\t\t\tthat works across versions of FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSeveral convenience methods have been added to the fluent/generic\n\t\t\t\tclient interfaces. These methods allow the adding of a sort via a\n\t\t\t\tSortSpec object, as well as specifying search parameters via a plain\n\t\t\t\tMap of Strings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new client interceptor called ThreadLocalCapturingInterceptor has been\n\t\t\t\tadded. This interceptor works the same way as CapturingInterceptor in that\n\t\t\t\tit captures requests and responses for later processing, but it uses\n\t\t\t\ta ThreadLocal object to store them in order to facilitate\n\t\t\t\tuse in multithreaded environments.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new constructor has been added to the client BasicAuthInterceptor\n\t\t\t\tallowing credentials to be specified in the form\n\t\t\t\t\"username:password\" as an alternate to specifying them as two\n\t\t\t\tdiscrete strings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSimpleBundleProvider has been modified to optionally allow calling\n\t\t\t\tcode to specify a search UUID, and a field to allow the preferred\n\t\t\t\tpage size to be configured.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server search UUID column has been reduced in length from\n\t\t\t\t40 chars to 36, in order to align with the actual length of the\n\t\t\t\tgenerated UUIDs.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPlain servers using paging may now specify an ID/name for\n\t\t\t\tindividual pages being returned, avoiding the need to\n\t\t\t\trespond to arbitrary offset/index requests from the server.\n\t\t\t\tIn this mode, page links in search result bundles simply\n\t\t\t\tinclude the ID to the next page.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"965\">\n\t\t\t\tAn issue was fixed in BundleUtil#toListOfEntries, where sometimes\n\t\t\t\ta resource could be associated with the wrong entry in the response.\n\t\t\t\tThanks to GitHub user @jbalbien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA subscription delivery queues no longer store the resource body in the\n\t\t\t\tqueue (only the ID), which should reduce the memory/disk footprint of the queue\n\t\t\t\twhen it grows long.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1053\">\n\t\t\t\tA bug was fixed in JPA server searches: When performing a search with a _lastUpdate\n\t\t\t\tfilter, the filter was applied to any _include values, which it should not have been.\n\t\t\t\tThanks to Deepak Garg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a ConceptMap/$translate operation with reverse=\"true\" in the arguments,\n\t\t\t\tthe equivalency flag is now set on the response just as it is for a non-reverse lookup.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen executing a FHIR transaction in JPA server, if the request bundle contains\n\t\t\t\tplaceholder IDs references (i.e. \"urn:uuid:*\" references) that can not be resolved\n\t\t\t\tanywhere else in the bundle, a user friendly error is now returned. Previously,\n\t\t\t\ta cryptic error containing only the UUID was returned. As a part of this change,\n\t\t\t\ttransaction processing has now been consolidated into a single codebase for DSTU3\n\t\t\t\t/ R4 (and future) versions of FHIR. This should greatly improve maintainability\n\t\t\t\tand consistency for transaction processing.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlighterInterceptor now displays the total size of the output and\n\t\t\t\tan estimate of the transfer time at the bottom of the response.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1022\">\n\t\t\t\tThe Prefer header is now honoured for HTTP PATCH requests. Thanks to\n\t\t\t\tAlin Leonard for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe <![CDATA[<code>Composition</code>]]> operation <![CDATA[<code>$document</code>]]> has been\n\t\t\t\timplemented. Thanks to Patrick Werner for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR CLI commands that allow Basic Auth credentials or a Bearer Token may now use\n\t\t\t\ta value of \"PROMPT\" to cause the CLI to prompt the user for credentials using an\n\t\t\t\tinteractive prompt.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tThe experimental \"dynamic mode\" for search parameter registration has been removed. This\n\t\t\t\tmode was never published or documented and was labelled as experimental, so I am hoping it\n\t\t\t\twas never depended on by anyone. Please post on the HAPI FHIR mailing list if this\n\t\t\t\tchange affects you.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash was fixed when using the ConceptMap/$translate operation to translate a mapping\n\t\t\t\twhere the equivalence was not specified.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe maximum length for codes in the JPA server terminology service have been increased\n\t\t\t\tto 500 in order to better accomodate code systems with very long codes.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the DSTU3 validator was fixed where validation resources such as StructureDefinitions\n\t\t\t\tand Questionnaires were cached in a cache that never expired, leading to validations against\n\t\t\t\tstale versions of resources.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the REST server, if an incoming request has the Content-Encoding header, the server will\n\t\t\t\tnot try to read request parameters from the content stream. This avoids an incompatibility with\n\t\t\t\tnew versions of Jetty.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1050\">\n\t\t\t\tCustom profile names when not matching standard FHIR profile names, are now\n\t\t\t\thandled properly by the validator. Thanks to Anthony Sute\n\t\t\t\tfor the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now performs a count query instead of a more expensive data query\n\t\t\t\twhen searches using\n\t\t\t\t<![CDATA[<code>_summary=count</code>]]>.\n\t\t\t\tThis means that a total will always be returned in the Bundle (this isn't always\n\t\t\t\tguaranteed otherwise, since the Search Controller can result in data being returned\n\t\t\t\tbefore the total number of results is known).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server SearchCoordinator now prefetches only a smaller and configurable number\n\t\t\t\tof results during the initial search request, and more may be requested in subsequent\n\t\t\t\tpage requests. This change may have a significant improvement on performance: in\n\t\t\t\tprevious versions of HAPI FHIR, even if the user only wanted the first page of 10\n\t\t\t\tresults, many many more might be prefetched, consuming database resources and\n\t\t\t\tserver time.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.4.0\" date=\"2018-05-28\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Commons-Lang3 (All): 3.6 -&gt; 3.7</li>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.12.Final -&gt; 5.2.16.Final</li>\n\t\t\t\t\t\t<li>Javassist (JPA): 3.20.0-GA -&gt; 3.22.0-GA</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSeveral enhancements have been made to the JPA server index\n\t\t\t\ttables. These enhancements consist of new colums that will be\n\t\t\t\tused in a future version of HAPI FHIR to significantly decrease\n\t\t\t\tthe amount of space required for indexes on token and string index\n\t\t\t\ttypes.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThese new columns are not yet used in HAPI FHIR 3.4.0 but will be\n\t\t\t\tenabled in HAPI FHIR 3.5.0. Anyone upgrading to HAPI FHIR 3.4.0 (or above)\n\t\t\t\tis recommended to invoke the following SQL statement on their\n\t\t\t\tdatabase in order to reindex all data in a background job:\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\t<![CDATA[<pre>update HFJ_RESOURCE set SP_INDEX_STATUS = null;</pre>]]>\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tNote that if you do this reindex now, you will not have any downtime while\n\t\t\t\tyou upgrade to HAPI FHIR 3.5.0. If you need to perform the reindex at the\n\t\t\t\ttime that you upgrade to HAPI FHIR 3.5.0 some indexes may not be\n\t\t\t\tavailable.\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tIn addition, the following schema changes should be made while upgrading:\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\t<![CDATA[<pre>update table TRM_CODESYSTEM_VER drop column RES_VERSION_ID;\nalter table TRM_CODESYSTEM_VER drop constraint IDX_CSV_RESOURCEPID_AND_VER</pre>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tR4 structures have been updated to the latest definitions\n\t\t\t\t(SVN 13732)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"846\">\n\t\t\t\tWhen calling a getter on a DSTU3/R4 structure for a choice type\n\t\t\t\t(e.g. Observation#getValueString()), a NullPointerException\n\t\t\t\twas thrown if there was no value in this field, and the NPE\n\t\t\t\thad no useful error message. Now this method call will simply\n\t\t\t\treturn null.\n\t\t\t\tmethod\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a FHIR resource update in the JPA server\n\t\t\t\twhere the update happens within a transaction, and the\n\t\t\t\tresource being updated contains placeholder IDs, and\n\t\t\t\tthe resource has not actually changed, a new version was\n\t\t\t\tcreated even though there was not actually any change.\n\t\t\t\tThis particular combination of circumstances seems very\n\t\t\t\tspecific and improbable, but it is quite common for some\n\t\t\t\ttypes of solutions (e.g. mapping HL7v2 data) so this\n\t\t\t\tfix can prevent significant wasted space in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server index tables did not have a column length specified\n\t\t\t\ton the resource type column. This caused the default of 255 to\n\t\t\t\tbe used, which wasted a lot of space since resource names are all\n\t\t\t\tless than 30 chars long and a single resource can have 10-100+\n\t\t\t\tindex rows depending on configuration. This has now been set\n\t\t\t\tto a much more sensible 30.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe LOINC uploader for the JPA Terminology Server has been\n\t\t\t\tsignificantly beefed up so that it now takes in the full\n\t\t\t\tset of LOINC distribution artifacts, and creates not only\n\t\t\t\tthe LOINC CodeSystem but a complete set of concept properties,\n\t\t\t\ta number of LOINC ValueSets, and a number of LOINC ConceptMaps.\n\t\t\t\tThis work was sponsored by the Regenstrief Institute. Thanks\n\t\t\t\tto Regenstrief for their support!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe DSTU2 validator has been refactored to use the same codebase\n\t\t\t\tas the DSTU3/R4 validator (which were harmonized in HAPI FHIR 3.3.0).\n\t\t\t\tThis means that we now have a single codebase for all validators, which\n\t\t\t\timproves maintainability and brings a number of improvements\n\t\t\t\tto the accuracy of DSTU2 resource validation.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding a resource that had contained resources with user-supplied\n\t\t\t\tlocal IDs (e.g. resource.setId(\"#1\")) as well as contained resources\n\t\t\t\twith no IDs (meaning HAPI should automatically assign a local ID\n\t\t\t\tfor these resources) it was possible for HAPI to generate\n\t\t\t\ta local ID that already existed, making the resulting\n\t\t\t\tserialization invalid. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST Generic Client now supports invoking an operation\n\t\t\t\ton a specific version of a resource instance.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new operation has been added to the JPA server called\n\t\t\t\t\"$expunge\". This operation can be used to physically delete\n\t\t\t\told versions of resources, logically deleted resources, or\n\t\t\t\teven all resources in the database.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn experimental new feature has been added to AuthorizationInterceptor which\n\t\t\t\tallows user-supplied checkers to add additional checking logic\n\t\t\t\tto determine whether a particular rule applies. This could be\n\t\t\t\tused for example to restrict an auth rule to particular\n\t\t\t\tsource IPs, or to only allow operations with specific\n\t\t\t\tparameter values.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new qualifier has been added to the AuthorizationInterceptor\n\t\t\t\tRuleBuilder that allows a rule on an operation to match\n\t\t\t\t<![CDATA[<code>atAnyLevel()</code>]]>, meaning that the rule\n\t\t\t\tapplies to the operation by name whether it is at the\n\t\t\t\tserver, type, or instance level.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCalling <![CDATA[<code>IdType#withVersion(String)</code>]]>\n\t\t\t\twith a null/blank parameter will now return a copy of the\n\t\t\t\tID with the version removed. Previously this call would\n\t\t\t\tdeliberately cause an IllegalArgumentException.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating resources on the JPA server, tags did not always\n\t\t\t\tconsistently follow FHIR's recommended rules for tag retention. According\n\t\t\t\tto FHIR's rules, if a tag is not explicitly present on an update but\n\t\t\t\twas present on the previous version, it should be carried forward anyhow.\n\t\t\t\tDue to a bug, this happened when more than one tag was present\n\t\t\t\tbut not when only one was present. This has been corrected. In\n\t\t\t\taddition, a new request header called\n\t\t\t\t<![CDATA[<code>X-Meta-Snapshot-Mode</code>]]>\n\t\t\t\thas been added that can be used by the client to override\n\t\t\t\tthis behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server's resource counts query has been optimized to\n\t\t\t\tgive the database a bit more flexibility to\n\t\t\t\toptimize, which should increase performance for this query.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server CapabilityStatement generator has been tuned\n\t\t\t\tso that resource counts are no longer calculated synchronously\n\t\t\t\tas a part of building the CapabilityStatement response. With\n\t\t\t\tthis change, counts are calculated in the background and cached\n\t\t\t\twhich can yield significant performance improvements on\n\t\t\t\thevaily loaded servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a significant performance regression in 3.3.0 when validating DSTU3 content using the\n\t\t\t\tInstanceValidator. From 3.3.0 onward, StructureDefinitions are converted to FHIR R4\n\t\t\t\tcontent on the fly in order to reduct duplication in the codebase. These conversions\n\t\t\t\thappened upon every validation however, instead of only happening once which adversely\n\t\t\t\taffected performance. A cache has been added.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"903\">\n\t\t\t\tFix a bug in the DSTU2 QuestionnaireResponseValidator which prevented validation\n\t\t\t\ton groups with only one question. Thanks David Gileadi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"709\">\n\t\t\t\tThe <![CDATA[<code>ConceptMap</code>]]> operation <![CDATA[<code>$translate</code>]]> has been\n\t\t\t\timplemented.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"927\">\n\t\t\t\tHAPI-FHIR_CLI now includes two new commands: one for importing and populating a\n\t\t\t\t<![CDATA[<code>ConceptMap</code>]]> resource from a CSV; and one for exporting a\n\t\t\t\t<![CDATA[<code>ConceptMap</code>]]> resource to a CSV.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tOperation methods on a plain server may now use parameters\n\t\t\t\tof type String (i.e. plain Java strings), and any FHIR primitive\n\t\t\t\tdatatype will be automatically coerced into a String.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HAPI FHIR CLI now supports importing an IGPack file as an import\n\t\t\t\tto the validation process.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen two threads attempt to update the same resource at the same time, previously\n\t\t\t\tan unspecified error was thrown by the JPA server. An HTTP 409\n\t\t\t\t(Conflict) with an informative error message is now thrown.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server's DSTU2 transaction processing routine caused it\n\t\t\t\tto occasionally consume two database connections, which could lead to deadlocks\n\t\t\t\tunder heavy load. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor sometimes incorrectly identified an operation\n\t\t\t\tinvocation at the type level as being at the instance level if the method\n\t\t\t\tindicated that the IdParam parameter was optional. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStructureDefinitions for the FHIR standard extensions have been added to the\n\t\t\t\thapi-fhir-validation-resources-XXXX modules. Thanks to Patrick Werner for the\n\t\t\t\tpull request! These have also been added to the list of definitions uploaded\n\t\t\t\tby the CLI \"upload-definitions\" command.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA workaround for an invalid search parameter path in the R4 consent\n\t\t\t\tresource has been implemented. This path was preventing some Consent\n\t\t\t\tresources from successfully being uploaded to the JPA server. Thanks to\n\t\t\t\tAnthony Sute for identifying this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"937\">\n\t\t\t\tA hard-to-understand validation message was fixed in the validator when\n\t\t\t\tvalidating against profiles that declare some elements as mustSupport\n\t\t\t\tbut have others used but not declared as mustSupport. Thanks to Patrick\n\t\t\t\tWerner for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"926\">\n\t\t\t\tThe HAPI FHIR CLI is now available for installation on OSX using the\n\t\t\t\t(really excellent) Homebrew package manager thanks to an effort by\n\t\t\t\tJohn Grimes to get it added. Thanks John!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"953\">\n\t\t\t\tWhen the REST Server experiences an expected error (such as a NullPointerException)\n\t\t\t\tin a resource provider class, a simple message of \"Failed to call access method\" is\n\t\t\t\treturned to the user. This has been enhanced to also include the message from\n\t\t\t\tthe underlying exception.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"836\">\n\t\t\t\tA bug in the plain server was fixed that prevented some includes from\n\t\t\t\tcorrectly causing their targets to be included in the response bundle.\n\t\t\t\tThanks to GitHub user @RuthAlk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"857\">\n\t\t\t\tDateRangeParameter was enhanced to support convenient method chanining, and\n\t\t\t\tthe parameter validation was improved to only change state after validating\n\t\t\t\tthat parameters were valid. Thanks to Gaetano Gallo for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"867\">\n\t\t\t\tThe HumanName DSTU3+ datatype had convenience methods for testing\n\t\t\t\twhether the name has a specific given name or not, but these methods\n\t\t\t\tdid not work. Thanks to Jason Owen for reporting and providing a test\n\t\t\t\tcase!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"874\">\n\t\t\t\tAn issue was corrected in the validator where Questionnaire references that\n\t\t\t\tused contained resources caused an unexpected crash. Thanks to\n\t\t\t\tHeinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"875\">\n\t\t\t\tAn issue in the narrative generator template for the CodeableConcept\n\t\t\t\tdatatype was corrected. Thanks to @RuthAlk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server automatic reindexing process has been tweaked so that it no\n\t\t\t\tlonger runs once per minute (this was a heavy strain on large databases)\n\t\t\t\tbut will instead run once an hour unless triggered for some reason. In addition,\n\t\t\t\tthe number of threads allocated to reindexing may now be adjusted via a\n\t\t\t\tsetting in the DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not correctly grant access to resources\n\t\t\t\tby compartment when the reference on the target resource that pointed\n\t\t\t\tto the compartment owner was defined using a resource object (ResourceReference#setResource)\n\t\t\t\tinstead of a reference (ResourceReference#setReference).\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"880\">\n\t\t\t\tSeveral tests were added to ensure accurate validation of QuestionnaireResponse\n\t\t\t\tresources. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"886\">\n\t\t\t\tA NullPointerException when validating some QuestionnaireResponse reousrces\n\t\t\t\twas fixed in the validator. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"892\">\n\t\t\t\tQuestionnaireResponse answers of type \"text\" may now be validated by the\n\t\t\t\tFhirInstanceValidator. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe REST server has been modified so that the\n\t\t\t\t<![CDATA[<code>Location</code>]]>\n\t\t\t\theader is no longer returned by the server on read or update responses.\n\t\t\t\tThis header was returned in the past, but this header is actually\n\t\t\t\tinappropriate for any response that is not a create operation.\n\t\t\t\tThe\n\t\t\t\t<![CDATA[<code>Content-Location</code>]]>\n\t\t\t\twill still be returned, and will hold the same contents.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe Postgres sample JPA project was fixed to use the current version\n\t\t\t\tof HAPI FHIR (it was previously stuck on 2.2). Thanks to\n\t\t\t\tKai Liu for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.3.0\" date=\"2018-03-29\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThis release corrects an inefficiency in the JPA Server, but requires a schema\n\t\t\t\tchange in order to update. Prior to this version of HAPI FHIR, a CLOB column\n\t\t\t\tcontaining the complete resource body was stored in two\n\t\t\t\ttables: HFJ_RESOURCE and HFJ_RES_VER. Because the same content was stored in two\n\t\t\t\tplaces, the database consumed more space than is needed to.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn order to reduce this duplication, the\n\t\t\t\t<![CDATA[<code>RES_TEXT</code> and <code>RES_ENCODING</code>]]>\n\t\t\t\tcolumns have been\n\t\t\t\t<![CDATA[<b>dropped</b>]]>\n\t\t\t\tfrom the\n\t\t\t\t<![CDATA[<code>HFJ_RESOURCE]]>\n\t\t\t\ttable, and the\n\t\t\t\t<![CDATA[<code>RES_TEXT</code> and <code>RES_ENCODING</code>]]>\n\t\t\t\tcolumns have been\n\t\t\t\t<![CDATA[<b>made NULLABLE</b>]]>\n\t\t\t\ton the\n\t\t\t\t<![CDATA[<code>HFJ_RES_VER]]>\n\t\t\t\ttable.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThe following migration script may be used to apply these changes to\n\t\t\t\tyour database. Naturally you should back your database up prior to\n\t\t\t\tmaking this change.\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>ALTER TABLE hfj_resource DROP COLUMN res_text;\nALTER TABLE hfj_resource DROP COLUMN res_encoding;\nALTER TABLE hfj_res_ver ALTER COLUMN res_encoding DROP NOT NULL;\nALTER TABLE hfj_res_ver ALTER COLUMN res_text DROP NOT NULL;</pre>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe validation module has been refactored to use the R4 (currently maintained)\n\t\t\t\tvalidator even for DSTU3 validation. This is done by using an automatic\n\t\t\t\tconverter which converts StructureDefinition/ValueSet/CodeSystem resources\n\t\t\t\twhich are used as inputs to the validator. This change should fix a number\n\t\t\t\tof known issues with the validator, as they have been fixed in R4 but\n\t\t\t\tnot in DSTU3. This also makes our validator much more maintainable\n\t\t\t\tsince it is now one codebase.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.10.Final -&gt; 5.2.12.Final</li>\n\t\t\t\t\t\t<li>Spring (JPA): 5.0.0 -&gt; 5.0.3</li>\n\t\t\t\t\t\t<li>Thymeleaf (Web Tespage Overlay): 3.0.7.RELEASE -&gt; 3.0.9.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"871\">\n\t\t\t\tA number of HAPI FHIR modules have been converted so that they now work\n\t\t\t\tas OSGi modules. Unlike the previous OSGi module, which was a mega-JAR\n\t\t\t\twith all of HAPI FHIR in it, this is simply the appropriate\n\t\t\t\tOSGi manifest inside the existing JARs. Thanks to John Poth\n\t\t\t\tfor the Pull Request!\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br/>\n\t\t\t\tNote that this does not cover all modules in the project. Current support includes:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>HAPI-FHIR structures DSTU2, HL7ORGDSTU2, DSTU2.1, DSTU3, R4</li>\n\t\t\t\t\t<li>HAPI-FHIR Resource validation DSTU2, HL7ORGDSTU2, DSTU2.1, DSTU3, R4</li>\n\t\t\t\t\t<li>Apache Karaf features for all the above</li>\n\t\t\t\t\t<li> Integration Tests</li>\n\t\t\t\t</ul>\n\t\t\t\tRemaining work includes:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>HAPI-FHIR Server support</li>\n\t\t\t\t\t<li> HAPI-FHIR narrative support. This might be tricky as Thymeleaf doesn't support OSGi.</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in the JSON parser when parsing extensions on repeatable\n\t\t\t\telements (e.g. Patient.address.line) where there is an extension on the\n\t\t\t\tfirst repetition but not on subsequent repetitions of the\n\t\t\t\trepeatable primitive. Thanks to Igor Sirkovich for providing a\n\t\t\t\ttest case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"832\">\n\t\t\t\tFix an issue where the JPA server crashed while attempting to normalize string values\n\t\t\t\tcontaining Korean text. Thanks to GitHub user @JoonggeonLee for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was solved where it was possible for server interceptors\n\t\t\t\tto have both processingCompletedNormally and handleException called\n\t\t\t\tif the stream.close() method threw an exception. Thanks to Carlos\n\t\t\t\tEduardo Lara Augusto for investigating!\n\t\t\t</action>\n\t\t\t<action type=\"remove\" issue=\"831\">\n\t\t\t\tThe <![CDATA[<code>@TagListParam</code>]]> annotation has been removed. This\n\t\t\t\tannotation had no use after DSTU1 but never got deleted and was misleading. Thanks\n\t\t\t\tto Angelo Kastroulis for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method overload has been added to IServerInterceptor:\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>outgoingResponse(RequestDetails, ResponseDetails, HttpServletRequest, HttpServletResponse)\n\t\t\t\t]]>. This new method allows an interceptor to completely replace\n\t\t\t\tthe resource being returned with a different resource instance, or\n\t\t\t\tto modify the HTTP Status Code being returned. All other \"outgoingResponse\"\n\t\t\t\tmethods have been deprecated and are recommended to be migrated\n\t\t\t\tto the new method. This new method (with its RequestDetails and ResponseDetails\n\t\t\t\tparameters) should be flexible enough to\n\t\t\t\taccommodate future needs which means that this should be the last\n\t\t\t\ttime we have to change it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"838\">\n\t\t\t\tThe HAPI-FHIR-CLI now explicitly includes JAXB dependencies in its combined JAR\n\t\t\t\tfile. These were not neccesary prior to Java 9, but the JDK (mercifully) does\n\t\t\t\tnot include JAXB in the default classpath as of Java 9. This means that\n\t\t\t\tit is possible to perform Schematron validation on Java 9. Thanks to\n\t\t\t\tJohn Grimes for reporting and suggesting a fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn experimental interceptor called VersionedApiConverterInterceptor has been added,\n\t\t\t\twhich automaticaly converts response payloads to a client-specified version\n\t\t\t\taccording to transforms built into FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"822\">\n\t\t\t\tSearches which were embedded in a Bundle as a transaction or batch operation did\n\t\t\t\tnot respect any chained method parameters (e.g. MedicationRequest?medication.code=123).\n\t\t\t\tThanks to @manjusampath for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA few fixes went into the build which should now allow HAPI FHIR\n\t\t\t\tto build correctly on JDK 9.0. Currently building is supported on\n\t\t\t\tJDK 8.x and 9.x only.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"837\">\n\t\t\t\tClient requests with an\n\t\t\t\t<![CDATA[<code>Accept</code>]]>\n\t\t\t\theader value of\n\t\t\t\t<![CDATA[<code>application/json</code>]]>\n\t\t\t\twill now be served with the non-legacy content type of\n\t\t\t\t<![CDATA[<code>application/fhir+json</code>]]>\n\t\t\t\tinstead of the legacy\n\t\t\t\t<![CDATA[<code>application/json+fhir</code>]]>.\n\t\t\t\tThanks to John Grimes for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed a regression in server where a count parameter in the form\n\t\t\t\t<![CDATA[<code>@Count IntegerType theCount</code>]]>\n\t\t\t\tcaused an exception if the client made a request with\n\t\t\t\tno count parameter included. Thanks to Viviana Sanz for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server was fixed where a Subscription incorrectly created\n\t\t\t\twithout a status or with invalid criteria would cause a crash during\n\t\t\t\tstartup.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now properly parses _format\n\t\t\t\tparameters that include additional content (e.g.\n\t\t\t\t<![CDATA[<code>_format=html/json;fhirVersion=1.0</code>]]>)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStale search deleting routine on JPA server has been adjusted\n\t\t\t\tto delete one search per transaction instead of batching 1000\n\t\t\t\tsearches per transaction. This should make the deletion logic\n\t\t\t\tmore tolerant of deleting very large search result sets.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAvoid refreshing the search parameter cache from an incoming client\n\t\t\t\trequest thread, which caused unneccesary delays for clients.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn occasional crash in the JPA was fixed when using unique search\n\t\t\t\tparameters and updating a resource to no longer match\n\t\t\t\tone of these search parameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid an endless loop of reindexing in JPA if a SearchParameter is\n\t\t\t\tcreated which indexed the SearchParameter resource itself\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"854\">\n\t\t\t\tJPA server now performs temporary/placeholder ID substitution processing on elements in\n\t\t\t\tresources which are of type \"URI\" in addition to the current substitution for\n\t\t\t\telements of type \"Reference\". Thanks to GitHub user @t4deon for supplying\n\t\t\t\ta testcase!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDeleting a resource from the testpage overlay resulted in an error page after\n\t\t\t\tclicking \"delete\", even though the delete succeeded.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tA number of info level log lines have been reduced to debug level in the JPA server, in\n\t\t\t\torder to reduce contention during heavy loads and reduce the amount of noise\n\t\t\t\tin log files overall. A typical server should now see far less logging coming\n\t\t\t\tfrom HAPI, at least at the INFO level.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"863\">\n\t\t\t\tJPA server now correctly indexes custom search parameters which\n\t\t\t\thave multiple base resource types. Previously, the indexing could\n\t\t\t\tcause resources of the wrong type to be returned in a search\n\t\t\t\tif a parameter being used also matched that type. Thanks\n\t\t\t\tto Dave Carlson for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new IResourceProvider implementation called\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>HashMapResourceProvider</code>\n\t\t\t\t]]>\n\t\t\t\thas been added. This is a complete resource provider\n\t\t\t\timplementation that uses a HashMap as a backing store. This class\n\t\t\t\tis probably of limited use in real production systems, but it\n\t\t\t\tcam be useful for tests or for static servers with small amounts\n\t\t\t\tof data.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"872\">\n\t\t\t\tAn issue in the JPA server was corrected where searching using\n\t\t\t\tURI search parameters would sometimes not include the resource type in the\n\t\t\t\tcriteria. This meant, for example, that a search for\n\t\t\t\t<![CDATA[<code>ValueSet?url=http://foo</code>]]> would also\n\t\t\t\tmatch any CodeSystem resource that happened to also have\n\t\t\t\tthat URL as the value for the \"url\" search parameter. Thanks\n\t\t\t\tto Josh Mandel for reporting and supplying a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"868\">\n\t\t\t\tDateParam class now has equals() and hashCode() implementations. Thanks\n\t\t\t\tto Gaetano Gallo for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"814\">\n\t\t\t\tFix a bug where under certain circumstances, duplicate contained resources\n\t\t\t\tcould be output by the parser's encode methods. Thanks to\n\t\t\t\tFrank Tao for supplying a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe client LoggingInterceptor now includes the number of\n\t\t\t\tmilliseconds spent performing each call that is logged.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"786\">\n\t\t\t\tReferenceParam has been enhanced to properly return the resource type to\n\t\t\t\tuser code in a server via the ReferenceType#getResourceType() method\n\t\t\t\tif the client has specified a reference parameter with\n\t\t\t\ta resource type. Thanks to @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"776\">\n\t\t\t\tAn entry has been added to ResourceMetadataKeyEnum which allows extensions\n\t\t\t\tto be placed in the resource metadata section in DSTU2 resource (this is\n\t\t\t\tpossible already in DSTU3+ resources as Meta is a normal model type, but\n\t\t\t\tthe older structures worked a bit differently. Thanks to GitHub user\n\t\t\t\tsjanic for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"791\">\n\t\t\t\tAn example project has een contributed which shows how to use the CQL\n\t\t\t\tframework in a server with HAPI FHIR JPA. Thanks to Chris Schuler\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"798\">\n\t\t\t\tA new module has been contributed called hapi-fhir-jpaserver-elasticsearch\n\t\t\t\twhich adds support for Elasticsearch instead of raw Lucene for fulltext\n\t\t\t\tindexing. Testing help on this would be appreciated! Thanks to\n\t\t\t\tJiajing Liang for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"800\">\n\t\t\t\tJAX-RS server now supports R4 and DSTU2_1 FHIR versions, which were\n\t\t\t\tpreviously missing. Thanks to Clayton Bodendein for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"806\">\n\t\t\t\tAuthorizationInterceptor did not correctly handle authorization against\n\t\t\t\tagainst a compartment where the compartment owner was specified\n\t\t\t\tas a list of IDs. Thanks to Jiajing Liang for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"812\">\n\t\t\t\tREST HOOK subscriptions in the JPA server now support having\n\t\t\t\tan empty/missing Subscription.channel.payload value, which\n\t\t\t\tis supported according to the FHIR specification. Thanks\n\t\t\t\tto Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA Server Operation Interceptor create/update methods will now no\n\t\t\t\tlonger be fired if the create/update operation being performed\n\t\t\t\tis a no-op (e.g. a conditional create that did not need to perform\n\t\t\t\tany action, or an update where the contents didn't actually change)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"879\">\n\t\t\t\tJPA server sometimes updated resources even though the client\n\t\t\t\tsupplied an update with no actual changes in it, due to\n\t\t\t\tchanges in the metadata section being considered content\n\t\t\t\tchanges. Thanks to Kyle Meadows for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"817\">\n\t\t\t\tA new example project has been added called hapi-fhir-jpaserver-dynamic,\n\t\t\t\twhich uses application/environment properties to configure which version\n\t\t\t\tof FHIR the server supports and other configuration. Thanks to\n\t\t\t\tAnoush Mouradian for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"581\">\n\t\t\t\tA new example project showing the use of JAX-RS Server Side Events has\n\t\t\t\tbeen added. Thanks to Jens Kristian Villadsen for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\" issue=\"864\">\n\t\t\t\tAn unneccesary reference to the Javassist library has been\n\t\t\t\tremoved from the build. Thanks to \u0141ukasz Dywicki for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"819\">\n\t\t\t\tSupport has been added to the JPA server for the :not modifier. Thanks\n\t\t\t\tto \u0141ukasz Dywicki for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"877\">\n\t\t\t\tSuport for the :contains string search parameter modifier has been added to\n\t\t\t\tthe JPA server. Thanks to Anthony Sute for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAll instances of DefaultProfileValidationSupport (i.e. one for\n\t\t\t\teach version of FHIR) have been fixed so that they explicitly\n\t\t\t\tclose any InputStreams they open in order to read the built-in\n\t\t\t\tprofile resources. Leaving these open caused resource starvation\n\t\t\t\tin some cases under heavy load.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.2.0\" date=\"2018-01-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for custom search parameters has been backported in the JPA server\n\t\t\t\tfrom DSTU3 back to DSTU2. As of this release of HAPI, full support for custom\n\t\t\t\tsearch parameters exists in all supported versions of FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new set of methods have been added to\n\t\t\t\t<![CDATA[<code>IServerOperationInterceptor</code>]]>\n\t\t\t\tcalled\n\t\t\t\t<![CDATA[<code>resourcePreCreate</code>]]>,\n\t\t\t\t<![CDATA[<code>resourcePreUpdate</code>]]>, and\n\t\t\t\t<![CDATA[<code>resourcePreDelete</code>]]>. These\n\t\t\t\tmethods are called within the database transaction\n\t\t\t\t(just as the existing methods were) but are invoked\n\t\t\t\tprior to the contents being saved to the database. This\n\t\t\t\tcan be useful in order to allow interceptors to\n\t\t\t\tchange payload contents being saved.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tA few redundant and no longer useful methods have been marked as\n\t\t\t\tdeprecated in\n\t\t\t\t<![CDATA[<code>IServerInterceptor</code>]]>. If you have implemented\n\t\t\t\tcustom interceptors you are recommended to migrate to the recommended\n\t\t\t\tmethods.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method has been added to RequestDetails called\n\t\t\t\t<![CDATA[<code>setRequestContents()]]> which can be used\n\t\t\t\tby interceptors to modify the request body before it\n\t\t\t\tis parsed by the server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in JPA server when performing a recursive\n\t\t\t\t<![CDATA[<code>_include</code>]]> which doesn't actually find any matches.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"796\">\n\t\t\t\tWhen encoding URL parameter values, HAPI FHIR would incorrectly escape\n\t\t\t\ta space (\" \") as a plus (\"+\") insetad of as \"%20\" as required by\n\t\t\t\tRFC 3986. This affects client calls, as well as URLs generated by\n\t\t\t\tthe server (e.g. REST HOOK calls). Thanks to James Daily for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSearching in JPA server using a combination of _content and _id parameters\n\t\t\t\tfailed. Thanks to Jeff Weyer for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new configuration option has been added to DaoConfig which allows newly created\n\t\t\t\tresources to be assigned a UUID by the server instead of a sequential ID\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn unneccesary column called \"MYHASHCODE\" was added to the\n\t\t\t\tHFJ_TAG_DEF table in the JPA server schema\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA few log entries emitted by the JPA server suring every search have been reduced\n\t\t\t\tfrom INFO to DEBUG in order to reduce log noise\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"810\">\n\t\t\t\tFix an issue in JPA server where updating a resource sometimes caused date search indexes to\n\t\t\t\tbe incorrectly deleted. Thanks to Kyle Meadows for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"808\">\n\t\t\t\tServers did not return an ETag if the version was provided on a\n\t\t\t\tDSTU3/R4 structure in the getMeta() version field instead of in the\n\t\t\t\tgetIdElement() ID. Thanks to GitHub user @Chrisjobling for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug was fixed in the JPA server when performing a validate operation with a mode\n\t\t\t\tof DELETE on a server with referential integrity disabled, the validate operation would delete\n\t\t\t\tresource reference indexes as though the delete was actually happening, which negatively\n\t\t\t\taffected searching for the resource being validated.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HAPI FHIR Server framework now has initial support for\n\t\t\t\tmultitenancy. At this time the support is limited to the server\n\t\t\t\tframework (not the client, JPA, or JAX-RS frameworks). See\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"http://hapifhir.io/doc_rest_server.html\">Server Documentation</a>\n\t\t\t\t]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.1.0\" date=\"2017-11-23\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.10 -&gt; 5.0.0</li>\n\t\t\t\t\t\t<li>Jackson (JPA): 2.8.1 -&gt; 2.9.2</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe Android client module has been restored to working order, and no longer\n\t\t\t\trequires a special classifier or an XML parser to be present in order to\n\t\t\t\twork. This means that the hapi-fhir-android library is much less likely\n\t\t\t\tto cause conflicts with other libraries imported into an Android application\n\t\t\t\tvia Gradle.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_android.html\">HAPI FHIR Android Documentation</a>]]>\n\t\t\t\tfor more information. As a part of this fix, all dependencies on\n\t\t\t\tthe StAX API have been removed in environments where StAX is not\n\t\t\t\tpresent (such as Android). The client will now detect this case, and\n\t\t\t\texplicitly request JSON payloads from servers, meaning that Android clients\n\t\t\t\tno longer need to include two parser stacks\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA performance to the JPA server has been made which reduces the number\n\t\t\t\tof writes to index tables when updating a resource with contents that\n\t\t\t\tonly make minor changes to the resource content. In many cases this can\n\t\t\t\tnoticeably improve update performance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn FHIR DSTU3 the\n\t\t\t\t<![CDATA[<code>ValueSet/$expand?identifier=foo</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>ValueSet/$validate-code?identifier=foo</code>]]>\n\t\t\t\tparameters were changed to\n\t\t\t\t<![CDATA[<code>ValueSet/$expand?url=foo</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>ValueSet/$validate-code?url=foo</code>]]>\n\t\t\t\trespectively, but the JPA server had not caught up. The\n\t\t\t\tJPA DSTU3 server has been adjusted to accept either \"identifier\"\n\t\t\t\tor \"url\" (with \"url\" taking precedence), and the JPA R4 server\n\t\t\t\thas been changed to only accept \"url\".\n\t\t\t\tThanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"744\">\n\t\t\t\tFix an error in JPA server when using Derby Database, where search queries with\n\t\t\t\ta search URL longer than 255 characters caused a mysterious failure. Thanks to\n\t\t\t\tChris Schuler and Bryn Rhodes for all of their help in reproducing this issue.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports the use of the\n\t\t\t\t<![CDATA[<code>Cache-Control</code>]]>\n\t\t\t\theader in order to allow the client to selectively disable the\n\t\t\t\tsearch result cache. This directive can also be used to disable result paging\n\t\t\t\tand return results faster when only a small number of results is needed.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_jpa.html\">JPA Page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn certain cases in the JPA server, if multiple threads all attempted to\n\t\t\t\tupdate the same resource simultaneously, the optimistic lock failure caused\n\t\t\t\ta \"gap\" in the history numbers to occur. This would then cause a mysterious\n\t\t\t\tfailure when trying to update this resource further. This has been\n\t\t\t\tresolved.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Server search/history results now set the ID of the returned Bundle to\n\t\t\t\tthe ID of the search, meaning that if a search returns results from the Query\n\t\t\t\tcache, it will reuse the ID of the previously returned Bundle\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a NullPointerException when validating a Bundle (in DSTU3/R4) with no\n\t\t\t\t<![CDATA[<code>Bundle.type</code>]]> value\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server transaction operation (DSTU3/R4) did not correctly process the\n\t\t\t\tIf-Match header when passed in via\n\t\t\t\t<![CDATA[<code>Bundle.entry.request.ifMatch</code>]]> value\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn Apache client, remove a log message at WARN level when the response does not\n\t\t\t\tspecify a charset. This log line often showed up any time a server was not supplying\n\t\t\t\ta response, making client logs quite noisy\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new configuration item has been added to the JPA server DaoConfig\n\t\t\t\tcalled\n\t\t\t\t<![CDATA[<code>getCountSearchResultsUpTo()</code>]]>.\n\t\t\t\tThis setting governs how many search results the search\n\t\t\t\tcoordinator should try to find before returning an initial\n\t\t\t\tsearch response to the user, which has an effect on whether\n\t\t\t\tthe\n\t\t\t\t<![CDATA[<code>Bundle.total</code>]]>\n\t\t\t\tfield is always populated in search responses. This has now\n\t\t\t\tbeen set to 20000 on out public server (fhirtest.uhn.ca)\n\t\t\t\tso most search results should now include a total.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove a bunch of exceptions in the org.hl7.fhir.exception package from the\n\t\t\t\thapi-fhir-base module, as they were also duplicated in the\n\t\t\t\thapi-fhir-utilities module.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe DSTU2 XhtmlDt type has been modified so that it no longer uses\n\t\t\t\tthe StAX XMLEvent type as its internal model, and instead simply uses\n\t\t\t\ta String. New methods called \"parse\" and \"encode\" have been added\n\t\t\t\tto HAPI FHIR's XmlUtil class, which can be used to convert\n\t\t\t\tbetween a String and an XML representation. This should allow\n\t\t\t\tHAPI FHIR to run in environments where StAX is not available, such\n\t\t\t\tas Android phones.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"761\">\n\t\t\t\tRestored the\n\t\t\t\t<![CDATA[<code>org.hl7.fhir.r4.model.codesystem.*</code>]]>\n\t\t\t\tclasses (which are Java Enums for the various FHIR codesystems).\n\t\t\t\tThese were accidentally removed in HAPI FHIR 3.0.0. Thanks to\n\t\t\t\tGitHub user @CarthageKing for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe resource Profile Validator has been enhanced to not try to validate\n\t\t\t\tbound fields where the binding strength is \"example\", and a crash was\n\t\t\t\tresolved when validating QuestionnaireResponse answers with a type\n\t\t\t\tof \"choice\" where the choice was bound to a ValueSet.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove the fake \"Test\" resource from DSTU2 structures. This was not\n\t\t\t\ta real resource type, and caused conflicts with the .NET client. Thanks to\n\t\t\t\tVlad Ignatov for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"720\">\n\t\t\t\tParsing a DSTU3/R4 custom structure which contained a field of\n\t\t\t\ta custom type caused a crash during parsing. Thanks to\n\t\t\t\tGitHub user @mosaic-hgw for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"711\">\n\t\t\t\tClient logic for checking the version of the connected\n\t\t\t\tserver to ensure it is for the correct version of FHIR now\n\t\t\t\tincludes a check for R4 servers. Thanks to Clayton Bodendein\n\t\t\t\tfor the pull request, including a number of great tests!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"714\">\n\t\t\t\tJAX-RS client framework now supports the ability to\n\t\t\t\tregister your own JAX-RS Component Classes against the client,\n\t\t\t\tas well as better documentation about thread safety. Thanks\n\t\t\t\tto S\u00c3\u00a9bastien Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"717\">\n\t\t\t\tProcessing of the If-Modified-Since header on FHIR read operations was reversed,\n\t\t\t\treturning a 304 when the resource had been modified recently. Thanks to\n\t\t\t\tMichael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd <![CDATA[<code>Prefer</code> and <code>Cache-Control</code>]]> to the list of headers which are declared\n\t\t\t\tas\n\t\t\t\tbeing acceptable for CORS requests in CorsInterceptor, CLI, and JPA Example.\n\t\t\t\tThanks to Patrick Werner for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"725\">\n\t\t\t\tDSTU2-hl7org and DSTU2.1 structures did not copy resource IDs when invoking\n\t\t\t\tcopyValues(). Thanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"734\">\n\t\t\t\tWhen encoding a Binary resource, the Binary.securityContext field\n\t\t\t\twas not encoded correctly. Thanks to Malcolm McRoberts for the pull\n\t\t\t\trequest with fix and test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBundle resources did not have their version encoded when serializing\n\t\t\t\tin FHIR resource (XML/JSON) format.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe Binary resource endpoint now supports the <![CDATA[<code>X-Security-Context</code>]]> header when\n\t\t\t\treading or writing Binary contents using their native Content-Type (i.e exchanging\n\t\t\t\tthe raw binary with the server, as opposed to exchanging a FHIR resource).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen paging through multiple pages of search results, if the\n\t\t\t\tclient had requested a subset of resources to be returned using the\n\t\t\t\t<![CDATA[<code>_elements</code>]]> parameter, the elements list\n\t\t\t\twas lost after the first page of results.\n\t\t\t\tIn addition, elements will not remove elements from\n\t\t\t\tsearch/history Bundles (i.e. elements from the Bundle itself, as opposed\n\t\t\t\tto elements in the entry resources) unless the Bundle elements are\n\t\t\t\texplicitly listed, e.g. <![CDATA[<code>_include=Bundle.total</code>]]>.\n\t\t\t\tThanks to @parisni for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"743\">\n\t\t\t\tAdd support for Spring Boot for initializing a number of parts of the library,\n\t\t\t\tas well as several examples.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-samples\">Spring Boot samples</a>]]>\n\t\t\t\tfor examples of how this works.\n\t\t\t\tThanks to Mathieu Ouellet for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"747\">\n\t\t\t\tJPA server now has lucene index support moved to separate classes from the entity\n\t\t\t\tclasses in order to facilitate support for ElasticSearch. Thanks to Jiang Liang\n\t\t\t\tfor the pull request!\n\t\t\t\t<![CDATA[\n\t\t\t\tNote that any existing JPA projects will need to add an additional property in their Spring config called <code>hibernate.search.model_mapping</code>. See <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-example/src/main/java/ca/uhn/fhir/jpa/demo/FhirServerConfig.java#L84\">this line</a> in the example project.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"755\">\n\t\t\t\tA new client interceptor has been added called\n\t\t\t\tAdditionalRequestHeadersInterceptor, which allows\n\t\t\t\ta developer to add additional custom headers to a\n\t\t\t\tclient requests.\n\t\t\t\tThanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was fixed in JPA server where extensions on primitives which\n\t\t\t\tare nestedt several layers deep are lost when resources are retrieved\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"756\">\n\t\t\t\tConditional deletes in JPA server were incorrectly denied by AuthorizationInterceptor\n\t\t\t\tif the delete was permitted via a compartment rule. Thanks to Alvin Leonard for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"767\">\n\t\t\t\tJAX-RS server module was not able to generate server CapabilityStatement for\n\t\t\t\tsome versions of FHIR (DSTU2_HL7ORG, DSTU2_1, or R4). Thanks to Clayton Bodendein for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"769\">\n\t\t\t\tWhen a server method throws a DataFormatException, the error will now be converted into\n\t\t\t\tan HTTP 400 instead of an HTTP 500 when returned to the client (and a stack\n\t\t\t\ttrace will now be returned to the client for JAX-RS server if configured to\n\t\t\t\tdo so). Thanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"770\">\n\t\t\t\tJAX-RS server conformance provider in the example module passed in the\n\t\t\t\tserver description, server name, and server version in the incorrect order.\n\t\t\t\tThanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"774\">\n\t\t\t\tThe learn more links on the website home page had broken links. Thanks to\n\t\t\t\tJames Daily for the pull request to fix this!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"762\">\n\t\t\t\tPrevent a crash in AuthorizationInterceptor when processing transactions\n\t\t\t\tif the interceptor has rules declared which allow resources to be read/written\n\t\t\t\tby \"any ID of a given type\". Thanks to GitHub user @dconlan for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.0.0\" date=\"2017-09-27\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for FHIR R4 (current working draft) has been <![CDATA[<b>added</b>]]>\n\t\t\t\t(in a new module called <![CDATA[<code>hapi-fhir-structures-r4</code>]]>)\n\t\t\t\tand\n\t\t\t\tsupport for FHIR DSTU1 (<![CDATA[<code>hapi-fhir-structures-dstu</code>]]>)\n\t\t\t\thas been <![CDATA[<b>removed</b>]]>. Removing support for the legacy\n\t\t\t\tDSTU1 FHIR version was a difficult decision, but it allows us the\n\t\t\t\topportunitity to clean up the codebase quite a bit, and remove some\n\t\t\t\tconfusing legacy parts of the API (such as the legacy Atom Bundle class).\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new redesigned table of HAPI FHIR versions to FHIR version support has been\n\t\t\t\tadded to the <![CDATA[<a href=\"http://hapifhir.io/download.html\">Download Page</a>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR's modules have been restructured for more consistency and less coupling\n\t\t\t\tbetween unrelated parts of the API.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new complete list of HAPI FHIR modules has been added to the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/download.html\">Download Page</a>]]>. Key changes\n\t\t\t\tinclude:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tHAPI FHIR's <b>client</b> codebase has been moved out of <code>hapi-fhir-base</code>\n\t\t\t\t\t\tand in to a new module called <code>hapi-fhir-client</code>. Client users now need\n\t\t\t\t\t\tto explicitly add this JAR to their project (and non-client users now no longer\n\t\t\t\t\t\tneed to depend on it)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tHAPI FHIR's <b>server</b> codebase has been moved out of <code>hapi-fhir-base</code>\n\t\t\t\t\t\tand in to a new module called <code>hapi-fhir-server</code>. Server users now need\n\t\t\t\t\t\tto explicitly add this JAR to their project (and non-server users now no longer\n\t\t\t\t\t\tneed to depend on it)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tAs a result of the client and server changes above, we no longer need to produce\n\t\t\t\t\t\ta special Android JAR which contains the client, server (which added space but was\n\t\t\t\t\t\tnot used) and structures. There is now a normal module called <code>hapi-fhir-android</code>\n\t\t\t\t\t\twhich is added to your Android Gradle file along with whatever structures JARs you\n\t\t\t\t\t\twish to add. See the\n\t\t\t\t\t\t<a href=\"https://github.com/hapifhir/hapi-fhir-android-integration-test\">Android Integration Test</a>\n\t\t\t\t\t\tto see a sample project using HAPI FHIR 3.0.0. <b>Note that this has been reported to\n\t\t\t\t\t\twork by some people but others are having issues with it!</b> In order to avoid delaying\n\t\t\t\t\t\tthis release any further we are releasing now despite these issues. If you are an Android\n\t\t\t\t\t\tguru and want to help iron things out please get in touch. If not, it might be a good\n\t\t\t\t\t\tidea to stay on HAPI FHIR 2.5 until the next point release of the 3.x series.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tA new JAR containing FHIR utilities called <code>hapi-fhir-utilities</code> has been\n\t\t\t\t\t\tadded. This JAR reflects the ongoing harmonization between HAPI FHIR and the FHIR\n\t\t\t\t\t\tRI codebases and is generally required in order to use HAPI at this point (if you\n\t\t\t\t\t\tare using a dependency manager such as Maven or Gradle it will be brought in to your\n\t\t\t\t\t\tproject automatically as a dependency)\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn order to allow the reoganizations and decoupling above to happen, a number of important classes\n\t\t\t\tand interfaces have been moved to new packages. A sample list of these changes is listed\n\t\t\t\tbelow. When upgrading to 3.0.0 your project may well show a number of compile errors\n\t\t\t\trelated to missing classes. In most cases this can be resolved by simply removing the HAPI\n\t\t\t\timports from your classes and asking your IDE to \"Organize Imports\" once again. This is an\n\t\t\t\tannoying change we do realize, but it is neccesary in order to allow the project to\n\t\t\t\tcontinue to grow.\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>IGenericClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>IRestfulClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>AddProfileTagEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>IVersionSpecificBundleFactory moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>BundleInclusionRule moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>RestSearchParameterTypeEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>EncodingEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>Constants moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>IClientInterceptor moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>ITestingUiClientFactory moved from package ca.uhn.fhir.util to package ca.uhn.fhir.rest.server.util</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBecause the Atom-based DSTU1 Bundle class has been removed from the library, users of the\n\t\t\t\tHAPI FHIR client must now always include a Bundle return type in search calls. For example,\n\t\t\t\tthe following call would have worked previously:\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>\nBundle bundle = client.search().forResource(Patient.class)\n\t.where(new TokenClientParam(\"gender\").exactly().code(\"unknown\"))\n   .prettyPrint()\n   .execute();\n\t\t\t\t</pre>\n\t\t\t\t]]>\n\t\t\t\tThis now needs an explicit returnBundle statement, as follows:\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>\nBundle bundle = client.search().forResource(Patient.class)\n\t.where(new TokenClientParam(\"gender\").exactly().code(\"unknown\"))\n   .prettyPrint()\n   .returnBundle(Bundle.class)\n   .execute();\n\t\t\t\t</pre>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Gson (JSON Parser): 2.8.0 -&gt; 2.8.1</li>\n\t\t\t\t\t\t<li>Commons-lang3 (Everywhere): 3.5 -&gt; 3.6</li>\n\t\t\t\t\t\t<!--<li>Saxon-HE (Validator): 9.5.1-5 -&gt; 9.8.0-3</li>-->\n\t\t\t\t\t\t<li>Apache HttpClient (FHIR Client): 4.5.2 -&gt; 4.5.3</li>\n\t\t\t\t\t\t<li>Apache HttpCore (FHIR Client): 4.4.5 -&gt; 4.4.6</li>\n\t\t\t\t\t\t<li>Phloc Commons (Schematron Validator): 4.4.6 -&gt; 4.4.11</li>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.9 -&gt; 5.2.10</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.7.0 -&gt; 5.7.1</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.7 -&gt; 4.3.10</li>\n\t\t\t\t\t\t<li>Spring Data JPA (JPA): 1.10.4 -&gt; 1.11.6</li>\n\t\t\t\t\t\t<li>Guava (JPA): 22.0 -&gt; 23.0</li>\n\t\t\t\t\t\t<li>Thymeleaf (Testpage Overlay): 3.0.2 -&gt; 3.0.7</li>\n\t\t\t\t\t\t<li>OkHttp (Android): 3.4.1 -&gt; 3.8.1</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Subscription support has been refactored. A design contributed\n\t\t\t\tby Jeff Chung for the REST Hook subscription module has been ported\n\t\t\t\tso that Websocket subscriptions use it too. This design uses an\n\t\t\t\tinterceptor to scan resources as they are processed to test whether\n\t\t\t\tthey should be delivered to subscriptions, instead of using a\n\t\t\t\tpolling design.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn addition, this scanning has been reworked to happen in a separate\n\t\t\t\tthread from the main storage thread, which should improve\n\t\t\t\tperformance and scalability of systems with multiple\n\t\t\t\tsubscriptions. Thanks to Jeff for all of his work on this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\thapi-fhir-client-okhttp project POM had dependencies on both\n\t\t\t\thapi-fhir-structures-dstu2 and hapi-fhir-structures-dstu3, which\n\t\t\t\tmeant that any project using ookhttp would import both structures\n\t\t\t\tJARs. This has been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server is now able to handle placeholder IDs (e.g. urn:uuid:00....000)\n\t\t\t\tbeing used in Bundle.entry.request.url as a part of the conditional URL\n\t\t\t\twithin transactions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSchematron validator now applies invariants to resources within a Bundle, not\n\t\t\t\tjust to the outer Bundle resource itself\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer and Client both still included Category header for resource tags even though\n\t\t\t\tthis feature was only present in FHIR DSTU1 and was removed from the specification in\n\t\t\t\tFHIR DSTU2. The presence of these headers sometimes caused parsed resource instances\n\t\t\t\tto contain duplicate tags\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"667\">\n\t\t\t\tWhen using the AuthorizationInterceptor with the JPA server, when a client is updating a resource\n\t\t\t\tfrom A to B, the user now needs to have write permission for both A and B. This is particularly\n\t\t\t\timportant for cases where (for example) an Observation is being updated from having a subject of\n\t\t\t\tPatient/A to Patient/B. If the user has write permission for Patient/B's compartment, this would\n\t\t\t\tpreviously have been allowed even if the user did not have access to write to Patient/A's compartment.\n\t\t\t\tThanks to Eeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIServerOperationInterceptor now has a new method\n\t\t\t\t<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource, IBaseResource)</code>]]>\n\t\t\t\twhich replaces the previous\n\t\t\t\t<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource)</code>]]>. This allows\n\t\t\t\tinterceptors to be notified of resource updates, but also see what the resource\n\t\t\t\tlooked like before the update. This change was made to support the change above, but\n\t\t\t\tseems like a useful feature all around.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"604\">\n\t\t\t\tAllow DateParam (used in servers) to handle values with MINUTE precision. Thanks to\n\t\t\t\tChristian Ohr for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix HTTP 500 error in JPA server if a numeric search parameter was supplied with no value, e.g.\n\t\t\t\t<![CDATA[<code>GET /Observation?value-quantity=</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server transaction processing now honours the Prefer header and includes\n\t\t\t\tcreated and updated resource bodies in the response bundle if it is set\n\t\t\t\tappropriately.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tOptimize queries in JPA server remove a few redundant select columns when performing\n\t\t\t\tsearches. This provides a slight speed increase in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd configuration to JPA server DaoConfig that allows a maximum\n\t\t\t\tnumber of search results to be specified. Queries will never return\n\t\t\t\tmore than this number, which can be good for avoiding accidental\n\t\t\t\tperformance problems in situations where large queries should not be\n\t\t\t\tneeded\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"674\">\n\t\t\t\tPrevent duplicates in $everything query response in JPA server. Thanks to @vlad-ignatov\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in calling JPA server transactions programmatically where resources\n\t\t\t\tare linked by object reference and not by ID where indexes were not correctly\n\t\t\t\tgenerated. This should not affect most users.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"678\">\n\t\t\t\tFix issue in SubscriptionInterceptor that caused interceptor to only\n\t\t\t\tactually notify listeners of the first 10 subscriptions. Thanks to Jeff Chung\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"693\">\n\t\t\t\tFix potential ConcurrentModificationException when adding subscriptions while\n\t\t\t\trunning under heavy load. Thanks to Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA search now uses hibernate ScrollableResults instead of plain JPA List. This\n\t\t\t\tshould improve performance over large search results.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA servers with no paging provider configured, or with a paging provider other than\n\t\t\t\tDatabaseBackedPagingProvider will load all results in a single pass and keep them\n\t\t\t\tin memory. Using this setup is not a good idea unless you know for sure that you\n\t\t\t\twill never have very large queries since it means that all results will be loaded into\n\t\t\t\tmemory, but there are valid reasons to need this and it will perform better than\n\t\t\t\tpaging to the database in that case. This fix also resolves a NullPointerException\n\t\t\t\twhen performing an $everything search. Thanks to Kamal Othman for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect an issue in JPA server on Postgres where searches with a long search URL\n\t\t\t\twere not able to be automatically purged from the database after they were scheduled\n\t\t\t\tfor deletion. Thanks to Ravi Kuchi for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd an optional and configurable hard limit on the total number of meta items\n\t\t\t\t(tags, profiles, and security labels) on an individual resource. The default\n\t\t\t\tis 1000.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen executing a search (HTTP GET) as a nested operation in in a transaction or\n\t\t\t\tbatch operation, the search now returns a normal page of results with a link to\n\t\t\t\tthe next page, like any other search would. Previously the search would return\n\t\t\t\ta small number of results with no paging performed, so this change brings transaction\n\t\t\t\tand batch processing in line with other types of search.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server no longer returns an OperationOutcome resource as the first resource\n\t\t\t\tin the Bundle for a response to a batch operation. This behaviour was previously\n\t\t\t\tpresent, but was not specified in the FHIR specification so it caused confusion and\n\t\t\t\twas inconsistent with behaviour in other servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a regression in HAPI FHIR 2.5 JPA server where executing a search in a\n\t\t\t\ttransaction or batch operation caused an exception. Thanks to Ravi Kuchi for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect an issue when processing transactions in JPA server where updates and\n\t\t\t\tcreates to resources with tags caused the tags to be created twice in the\n\t\t\t\tdatabase. These duplicates were utomatically filtered upon read so this issue\n\t\t\t\twas not user-visible, but it coule occasionally lead to performance issues\n\t\t\t\tif a resource containing multiple tags was updated many times via\n\t\t\t\ttransactions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should not allow creation of resources that have a reference to\n\t\t\t\ta resource ID that previously existed but is now deleted. Thanks to Artem\n\t\t\t\tSopin for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJpaConformanceProvider now has a configuration setting to enable and\n\t\t\t\tdisable adding resource counts to the server metadata.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid a deadlock in JPA server when the RequestValidatingInterceptor is being\n\t\t\t\tused and a large number of resources are being created by clients at\n\t\t\t\tthe same time.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTestpage Overlay's transaction method did not work if the response\n\t\t\t\tBundle contained any entries that did not contain a resource (which\n\t\t\t\tis often the case in more recent versions of HAPI). Thanks to Sujay R\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen the server was returning a multi-page search result where the\n\t\t\t\tclient did not explicitly request an encoding via the _format\n\t\t\t\tparameter, a _format parameter was incorrectly added to the paging\n\t\t\t\tlinks in the response Bundle. This would often explicitly request\n\t\t\t\tXML encoding because of the browser Accept header even though\n\t\t\t\tthis was not what the client wanted.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"651\">\n\t\t\t\tEnhancement to ResponseHighlighterInterceptor where links in the resource\n\t\t\t\tbody are now converted to actual clickable hyperlinks. Thanks to Eugene Lubarsky\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBanUnsupportedHttpMethodsInterceptor has been modified so that it now allows\n\t\t\t\tHTTP PATCH to proceed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"651\">\n\t\t\t\tEnhancement to ResponseHighlighterInterceptor so that it now can be configured\n\t\t\t\tto display the request headers and response headers, and individual lines\n\t\t\t\tmay be highlighted.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not permit PATCH operations to proceed even\n\t\t\t\tif the user had write access for the resource being patched.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"682\">\n\t\t\t\tFix an issue in HapiWorkerContext where structure definitions are\n\t\t\t\tnot able to be retrieved if they are referred to by their\n\t\t\t\trelative or logical ID. This affects profile tooling such as\n\t\t\t\tStructureMapUtilities. Thanks to Travis Lukach for reporting and\n\t\t\t\tproviding a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"679\">\n\t\t\t\tAdd link to DSTU3 JavaDocs from documentation index. Thanks\n\t\t\t\tto Vadim Peretokin for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"680\">\n\t\t\t\tFix a typo in the documentation. Thanks to Saren Currie\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"689\">\n\t\t\t\tAdd a command line flag to the CLI tool to allow configuration of the\n\t\t\t\tserver search result cache timeout period. Thanks to Eugene Lubarsky\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"683\">\n\t\t\t\tCorrect an issue with the model classes for STU3 where any classes\n\t\t\t\tcontaining the @ChildOrder annotation (basically the conformance\n\t\t\t\tresources) will not correctly set the order if any of the\n\t\t\t\telements are a choice type (i.e. named \"foo[x]\"). Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix potential deadlock in stale search deleting task in JPA server, as well\n\t\t\t\tas potential deadlock when executing transactions containing nested\n\t\t\t\tsearches when operating under extremely heavy load.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server transaction operations now put OperationOutcome resources resulting\n\t\t\t\tfrom actions in\n\t\t\t\t<![CDATA[<code>Bundle.entry.response.outcome</code>]]>\n\t\t\t\tinstead of the previous\n\t\t\t\t<![CDATA[<code>Bundle.entry.resource</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"696\">\n\t\t\t\tAn issue was corrected where search parameters containing negative numbers\n\t\t\t\twere sometimes treated as positive numbers when processing the search. Thanks\n\t\t\t\tto Keith Boone for reporting and suggesting a fix!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"699\">\n\t\t\t\tFix an unfortunate typo in the custom structures documentation. Thanks to\n\t\t\t\tJason Owen for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"686\">\n\t\t\t\tCorrect an issue in the validator (DSTU3/R4) where elements were not always\n\t\t\t\tcorrectly validated if the element contained only a profiled extension. Thanks\n\t\t\t\tto S\u00c3\u00a9bastien Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"701\">\n\t\t\t\tTesting UI now has a dropdown for modifiers on token search. Thanks\n\t\t\t\tto GitHub user @dconlan for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"688\">\n\t\t\t\tWhen parsing an incomplete ID with the form <![CDATA[<code>http://my.org/Foo</code>]]> into\n\t\t\t\tIdDt and IdType objects, the Foo portion will now be treated as the resource type.\n\t\t\t\tPreviously my.org was treated as the resource type and Foo was treated as the ID. Thanks\n\t\t\t\tto GitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"695\">\n\t\t\t\tExtensions on ID datatypes were not parsed or serialized correctly. Thanks to\n\t\t\t\tStephen Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"710\">\n\t\t\t\tFix a bug in REST Hook Subscription interceptors which prevented subscriptions\n\t\t\t\tfrom being activated. Thanks to Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"708\">\n\t\t\t\tFix broken links in usage pattern diagram on website. Thanks to\n\t\t\t\tPascal Brandt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"706\">\n\t\t\t\tFix incorrect FHIR Version Strings that were being outputted and verified in the\n\t\t\t\tclient for some versions of FHIR. Thanks to Clayton Bodendein for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new constructor to SimpleRequestHeaderInterceptor which allows a complete header\n\t\t\t\tto be passed in (including name and value in one string)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tREST Hook subscriptions now honour the Subscription.channel.header field\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDSTU2 validator has been enhanced to do a better job handling\n\t\t\t\tValueSets with expansions pointing to other ValueSets\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST HOOK subscriptions now use HTTP PUT if there is a payload type\n\t\t\t\tspecified, regardless of whether the source event was a create or an\n\t\t\t\tupdate\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"712\">\n\t\t\t\tAdd appropriate import statements for logging to JPA demo code. Thanks to\n\t\t\t\tRob Hausam for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"700\">\n\t\t\t\tAdd some browser performance logging to ResponseHighlightingInterceptor. Thanks\n\t\t\t\tto Eugene Lubarsky for the pull request, and for convincing James not to\n\t\t\t\toptimize something that did not need optimizing!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new config property has been added to the JPA seerver DaoConfig called\n\t\t\t\t\"setAutoCreatePlaceholderReferenceTargets\".\n\t\t\t\tThis property causes references to unknown resources in created/updated resources to have a placeholder\n\t\t\t\ttarget resource automatically created.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe server LoggingInterceptor has had a variable called\n\t\t\t\t<![CDATA[<code>processingTimeMillis</code>]]> which logs the number\n\t\t\t\tof milliseconds the server took to process a given request since\n\t\t\t\tHAPI FHIR 2.5, but this was not documented. This variable has now been\n\t\t\t\tdocumented as a part of the available features.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new experimental feature has been added to the JPA server which allows\n\t\t\t\tyou to define certain search parameter combinations as being resource keys,\n\t\t\t\tso that a database constraint will prevent more than one resource from\n\t\t\t\thaving a matching pair\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using the client LoggingInterceptor in non-verbose mode, the\n\t\t\t\tlog line showing the server's response HTTP status will now also include\n\t\t\t\tthe returned\n\t\t\t\t<![CDATA[<code>Location</code>]]> header value as well\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new flag has been add to the CLI upload-definitions command\n\t\t\t\t\"-e\" which allows skipping particular resources\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn issue in JPA server has been corrected where if a CodeSystem\n\t\t\t\tresource was deleted, it was not possible to create a new resource\n\t\t\t\twith the same URI as the previous one\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen uploading a Bundle resource to the server (as a collection or\n\t\t\t\tdocument, not as a transaction) the ID was incorrectly stripped from\n\t\t\t\tresources being saved within the Bundle. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSubscriptions in JPA server now support \"email\" delivery type through the\n\t\t\t\tuse of a new interceptor which handles that type\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server can now be configured to not support\n\t\t\t\t<![CDATA[<code>:missing</code>]]> modifiers, which\n\t\t\t\tincreases write performance since fewer indexes are written\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new JPA configuration option has been added to the DaoConfig which allows\n\t\t\t\tsupport for the <![CDATA[<code>:missing</code>]]> search parameter modifier\n\t\t\t\tto be enabled or disabled, and sets the default to DISABLED.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tSupport for this parameter causes many more index rows to be inserted in the database,\n\t\t\t\twhich has a significant impact on write performance. A future HAPI update may allow these\n\t\t\t\trows to be written asynchronously in order to improve this.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.5\" date=\"2017-06-08\">\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[\n\t\t\t\tThis release includes significant performance enhancements for the\n\t\t\t\tJPA server. Most importantly, the way that searches are performed\n\t\t\t\thas been re-written to allow the server to perform better when\n\t\t\t\tthe database has a large number of results in it. The following\n\t\t\t\tenhancements have been made:\n\t\t\t\t<br/><br/>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearches with multiple search parameters of different \n\t\t\t\t\t\tdatatypes (e.g. find patients by name and date of birth) \n\t\t\t\t\t\twere previously joined in Java code, now the join is \n\t\t\t\t\t\tperformed by the database which is faster\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearches which returned lots of results previously has all \n\t\t\t\t\t\tresults streamed into memory before anything was returned to \n\t\t\t\t\t\tthe client. This is particularly slow if you do a search for\n\t\t\t\t\t\t(say) \"get me all patients\" since potentially thousands or \n\t\t\t\t\t\teven millions of patients' IDs were loaded into memory \n\t\t\t\t\t\tbefore anything gets returned to the client. HAPI FHIR \n\t\t\t\t\t\tnow has a multithreaded search coordinator which returns \n\t\t\t\t\t\tresults to the client as soon as they are available\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearch results will be cached and reused (so that if a client\n\t\t\t\t\t\tdoes two searches for \"get me all patients matching FOO\"\n\t\t\t\t\t\twith the same FOO in short succession, we won't query the DB\n\t\t\t\t\t\tagain but will instead reuse the cached results). Note that\n\t\t\t\t\t\tthis can improve performance, but does mean that searches can\n\t\t\t\t\t\treturn slightly out of date results. Essentially what this means\n\t\t\t\t\t\tis that the latest version of individual resources will always\n\t\t\t\t\t\tbe returned despite this cacheing, but newly created resources\n\t\t\t\t\t\tthat should match may not be returned until the cache\n\t\t\t\t\t\texpires. By default this cache has been set to one minute, \n\t\t\t\t\t\twhich should be acceptable for most real-world usage, but\n\t\t\t\t\t\tthis can be changed or disabled entirely.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tUpdates which do not actually change the contents of the resource\n\t\t\t\t\t\tcan optionally be prevented from creating a new version\n\t\t\t\t\t\tof the resource in the database\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<br/><br/>\n\t\t\t\tExisting users should delete the \n\t\t\t\t<code>HFJ_SEARCH</code>, \n\t\t\t\t<code>HFJ_SEARCH_INCLUDE</code>,\n\t\t\t\tand \n\t\t\t\t<code>HFJ_SEARCH_RESULT</code>\n\t\t\t\ttables from your database before upgrading, as the structure of these tables\n\t\t\t\thas changed and old search results can not be reused.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"590\">\n\t\t\t\tAuthorizationInterceptor did not correctly handle paging requests\n\t\t\t\t(e.g. requests for the second page of results for a search operation).\n\t\t\t\tThanks to Eeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd configuration property to DSTU3 FhirInstanceValidator to\n\t\t\t\tallow client code to change unknown extension handling behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"630\">\n\t\t\t\tFix concurrency issues in FhirContext that were causing issues when\n\t\t\t\tstarting a context up on Android. Thanks to GitHub issue @Jaypeg85 for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix an issue in the JPA server if a resource has been previously\n\t\t\t\tsaved containing vocabulary that is no longer valid. This only really\n\t\t\t\thappened if you were using a non-final version of FHIR (e.g. using DSTU3\n\t\t\t\tbefore it was finalized) but if you were in this situation, upgrading HAPI\n\t\t\t\tcould cause you to have old codes that no longer exist in your database. This\n\t\t\t\tfix prevents these from blocking you from accesing those resources.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCLI now defaults to DSTU3 mode if no FHIR version is specified\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer and annotation-client @History annotation now allows DSTU3+ resource\n\t\t\t\ttypes in the type= property\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"563\">\n\t\t\t\tJSON Parser gave a very unhelpful error message (Unknown attribute 'value' found during parse)\n\t\t\t\twhen a scalar value was found in a spot where an object is expected. This has been corrected to\n\t\t\t\tinclude much more information. Thanks to GitHub user @jasminas for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDaoConfig#setInterceptors() has been un-deprecated. It was previously deprecated as\n\t\t\t\twe thought it was not useful, but uses have been identified so it turns out this method\n\t\t\t\twill live after all. Interceptors registered to this method will now be treated\n\t\t\t\tappropriately if they implement IServerOperationInterceptor too.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly support searching on a custom search parameter whose\n\t\t\t\tpath pointed to an extension, where the client used a chained value.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue where the JSON parser sometimes did not encode DSTU3 extensions on the root of a\n\t\t\t\tresource which have a value of type reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now respects the If-Modified-Since header and will return an HTTP 304 if appropriate\n\t\t\t\tfor read operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly process :missing qualifier on date parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"633\">\n\t\t\t\tAppacheHttpClient did not always respect the charset in the response\n\t\t\t\tContent-Type header. Thanks to Gijsbert van den Brink for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"636\">\n\t\t\t\tFix XhtmlParser to correctly handle hexadecimal escaped literals. Thanks to\n\t\t\t\tGijsbert van den Brink for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now has configurable properties that allow referential integrity\n\t\t\t\tto be disabled for both writes and deletes. This is useful in some cases\n\t\t\t\twhere data integrity is not wanted or not possible. It can also be useful\n\t\t\t\tif you want to delete large amounts of interconnected data quickly.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA corresponding flag has been added to the CLI tool as well.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly support searching on a custom search parameter whose\n\t\t\t\tpath pointed to an extension, where the client used a chained value.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix dependency on commons-codec 1.4 in hapi-fhir-structures-dstu3, which was\n\t\t\t\tpreventing this library from being used on Android because Android includes\n\t\t\t\tan older version of commons-codec.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server failed to index search parameters on paths containing a decimal\n\t\t\t\tdata type\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tValidator incorrectly rejected references where only an identifier was populated\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"649\">\n\t\t\t\tMake error handler in the client more tolerant of errors where no response has\n\t\t\t\tbeen received by the client when the error happens. Thanks to GitHub\n\t\t\t\tuser maclema for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a check in JPA server that prevents completely blank tags, profiles, and security labels\n\t\t\t\tfrom being saved to the database. These were filtered out anyhow when the\n\t\t\t\tresult was returned back to the client but they were persisted which\n\t\t\t\tjust wasted space.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"664\">\n\t\t\t\tLoading the build-in profile structures (StructureDefinition, ValueSet, etc) is now done in\n\t\t\t\ta synchronized block in order to prevent multiple loads happening if the server processes\n\t\t\t\tmultiple validations in parallel threads right after startup. Previously a heavy load could\n\t\t\t\tcause the server to run out of memory and lock up. Thanks to Karl M Davis\n\t\t\t\tfor analysis and help fixing this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"652\">\n\t\t\t\tFix bad ValueSet URL in DeviceRequest profile definition for STU3 which\n\t\t\t\twas preventing the CLI from uploading definitions correctly. Thanks to\n\t\t\t\tJoel Schneider for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"656\">\n\t\t\t\tImprove handling in JPA server when doing code:above and code:below\n\t\t\t\tsearches to use a disjunction of AND and IN in order to avoid failures\n\t\t\t\tunder certain conditions. Thanks to Michael Lawley for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"660\">\n\t\t\t\tFix an error where the JPA server sometimes failed occasional requests\n\t\t\t\twith a weird NullPointerException when running under very large concurrent\n\t\t\t\tloads. Thanks to Karl M. Davis for reporting, investigating, and ultimately\n\t\t\t\tfinding a solution!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.4\" date=\"2017-04-19\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThis release brings the DSTU3 structures up to FHIR R3 (FHIR 3.0.1) definitions. Note that\n\t\t\t\tthere are very few changes between the DSTU3 structures in HAPI FHIR 2.3 and\n\t\t\t\tthe ones in HAPI FHIR 2.4 since the basis for the DSTU3 structures in HAPI FHIR\n\t\t\t\t2.3 was the R3 QA FHIR version (1.9.0) but this is the first release of\n\t\t\t\tHAPI FHIR to support the final/complete R3 release.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.7 -&gt; 5.2.9</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.7.CR1 -&gt; 5.2.7.Final</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA): 5.3.4 -&gt; 5.4.1</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.6 -&gt; 4.3.7</li>\n\t\t\t\t\t\t<li>Gson (Core): 2.7 -&gt; 2.8.0</li>\n\t\t\t\t\t\t<li>Guava (JPA): 19.0 -&gt; 21.0</li>\n\t\t\t\t\t\t<li>SLF4j (Core): 1.7.21 -&gt; 1.7.25</li>\n\t\t\t\t\t\t<li>Logback (Core): 1.1.7 -&gt; 1.2.2</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"602\">\n\t\t\t\thapi-fhir-jpaserver-example now includes the\n\t\t\t\t<![CDATA[<code>Prefer</code>]]> header in the list of\n\t\t\t\tCORS headers. Thanks to GitHub user @elnin0815 for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow make read or write\n\t\t\t\tauthorization decisions on a resource by instance ID\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"208\">\n\t\t\t\tRemove SupportingDocumentation resource from DSTU2 structures. This isn't\n\t\t\t\tactually a resource in FHIR DSTU2 and its inclusion causes errors on clients\n\t\t\t\tthat don't understand what it is. Thanks to Travis Cummings and Michele Mottini for pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"607\">\n\t\t\t\tWeb testing UI displayed an error when a transaction was pasted into the UI\n\t\t\t\tfor a DSTU2 server. Thanks to Suresh Kumar for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDaoConfig#setAllowInlineMatchUrlReferences() now defaults to\n\t\t\t\t<![CDATA[<code>true</code>]]> since inline conditional references\n\t\t\t\tare now a part of the FHIR specification. Thanks to Jan D\u00c4\u009bdek for\n\t\t\t\tpointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"609\">\n\t\t\t\thapi-fhir-jpaserver-base now exposes a\n\t\t\t\t<![CDATA[<code>FhirInstanceValidator</code> bean named <code>\"myInstanceValidatorDstu2\"</code>]]>\n\t\t\t\tfor DSTU2. A similar bean for DSTU3 was previously implemented.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"453\">\n\t\t\t\thapi-fhir-jpaserver-example project now defaults to STU3 mode instead of\n\t\t\t\tthe previous DSTU2. Thanks to Joel Schneider for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"534\">\n\t\t\t\tJPA server now has a setting on the DaoConfig to force it to treat\n\t\t\t\tcertain reference URLs or reference URL patterns as logical URLs instead\n\t\t\t\tof literal ones, meaning that the server will not try to resolve these\n\t\t\t\tURLs. Thanks to Eeva Turkka for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a utility method to JPA server:\n\t\t\t\t<![CDATA[<code>IFhirResourceDao#removeTag(IIdType, TagTypeEnum, String, String)</code>]]>. This allows\n\t\t\t\tclient code to remove tags\n\t\t\t\tfrom a resource without having a servlet request object in context.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server was unable to process custom search parameters where\n\t\t\t\tthe path pointed to an extension containing a reference. Thanks\n\t\t\t\tto Ravi Kuchi for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"623\">\n\t\t\t\tServers in DSTU2.1 mode were incorrectly using the legacy mimetypes instead\n\t\t\t\tof the new STU3 ones. Thanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"624\">\n\t\t\t\tAdd an option to ParserOptions that specifies that when parsing a bundle, the\n\t\t\t\tID found in the Bundle.entry.fullUrl should not override the ID found\n\t\t\t\tin the Resource.id field. Technically these fields must always supply the\n\t\t\t\tsame ID in order for a server to be considered conformant, but this option allows\n\t\t\t\tyou to deal with servers which are behaving badly. Thanks to\n\t\t\t\tGitHub user CarthageKing for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"617\">\n\t\t\t\tRemove unneccesary whitespace in the text areas on the testing\n\t\t\t\tweb UI. Thanks to GitHub user @elnin0815 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"613\">\n\t\t\t\tIn JAX-RS server it is now possible to change the server exception handler\n\t\t\t\tat runtime without a server restart.\n\t\t\t\tThanks to Sebastien Riviere for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"610\">\n\t\t\t\tFix a potential race condition when the FhirContext is being accessed by many threads\n\t\t\t\tat the same time right as it is initializing. Thanks to Ben Spencer for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.3\" date=\"2017-03-18\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.1.0 -&gt; 5.2.7</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.4 -&gtp; 5.7.0.CR1</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA): 5.2.4 -&gtp; 5.3.4</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.1 -&gt; 4.3.6</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now supports custom search parameters in DSTU3\n\t\t\t\tmode. This allows users to create search parameters which contain\n\t\t\t\tcustom paths, or even override and disable existing search\n\t\t\t\tparameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI example uploader couldn't find STU3 examples after CI server\n\t\t\t\twas moved to build.fhir.org\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA subscription module that prevented purging stale\n\t\t\t\tsubscriptions when many were present on Postgres\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"532\">\n\t\t\t\tServer interceptor methods were being called twice unnecessarily\n\t\t\t\tby the JPA server, and the DaoConfig interceptor registration\n\t\t\t\tframework was not actually useful. Thanks to GitHub user\n\t\t\t\t@mattiuusitalo for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"503\">\n\t\t\t\tAuthorizationInterceptor on JPA server did not correctly\n\t\t\t\tapply rules on deleting resources in a specific compartment\n\t\t\t\tbecause the resource metadata was stripped by the JPA server\n\t\t\t\tbefore the interceptor could see it. Thanks to\n\t\t\t\tEeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"519\">\n\t\t\t\tJPA server exported CapabilityStatement includes\n\t\t\t\tdouble entries for the _id parameter and uses the\n\t\t\t\twrong type (string instead of token). Thanks to\n\t\t\t\tRobert Lichtenberger for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"504\">\n\t\t\t\tCustom resource types which extend Binary must not\n\t\t\t\thave declared extensions since this is invalid in\n\t\t\t\tFHIR (and HAPI would just ignore them anyhow). Thanks\n\t\t\t\tto Thomas S Berg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStandard HAPI zip/tar distributions did not include the project\n\t\t\t\tsources and JavaDoc JARs. Thanks to Keith Boone for pointing\n\t\t\t\tthis out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer AuthorizationInterceptor always rejects history operation\n\t\t\t\tat the type level even if rules should allow it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server terminology service was not correctly validating or expanding codes\n\t\t\t\tin SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"539\">\n\t\t\t\tAttempting to search for an invalid resource type (e.g. GET base/FooResource) should\n\t\t\t\treturn an HTTP 404 and not a 400, per the HTTP spec. Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"544\">\n\t\t\t\tWhen parsing a Bundle containing placeholder fullUrls and references\n\t\t\t\t(e.g. \"urn:uuid:0000-0000\") the resource reference targets did not get\n\t\t\t\tpopulated with the given resources. Note that as a part of this\n\t\t\t\tchange, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified\n\t\t\t\tso that when parsing a placeholder ID, the complete placeholder including the\n\t\t\t\t\"urn:uuid:\" or \"urn:oid:\" prefix will be placed into the ID part. Previously,\n\t\t\t\tthe prefix was treated as the base URL, which led to strange behaviour\n\t\t\t\tlike the placeholder being treated as a real IDs. Thanks to GitHub\n\t\t\t\tuser @jodue for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeclared extensions with multiple type() options listed in the @Child\n\t\t\t\tannotation caused a crash on startup. Now this is supported.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 XHTML parser for narrative choked if the narrative contained\n\t\t\t\tan <![CDATA[<code>&amp;rsquot;</code>]]> entity string.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"538\">\n\t\t\t\tWhen parsing a quantity parameter on the server with a\n\t\t\t\tvalue and units but no system (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)\n\t\t\t\tthe unit was incorrectly treated as the system. Thanks to\n\t\t\t\t@CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"533\">\n\t\t\t\tCorrect a typo in the JPA ValueSet ResourceProvider which prevented\n\t\t\t\tsuccessful operation under Spring 4.3. Thanks to\n\t\t\t\tRobbert van Waveren for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDeprecate the method\n\t\t\t\t<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>\n\t\t\t\tas it is no longer used by HAPI and is just an annoying step\n\t\t\t\tin creating custom structures. Thanks to Allan Bro Hansen\n\t\t\t\tfor pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"547\">\n\t\t\t\tCapturingInterceptor did not buffer the response meaning\n\t\t\t\tthat in many circumstances it did not actually capture\n\t\t\t\tthe response. Thanks to Jenny Syed of Cerner for\n\t\t\t\tthe pull request and contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"548\">\n\t\t\t\tClean up dependencies and remove Eclipse project files from git. Thanks to\n\t\t\t\t@sekaijin for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a conditional create in a transaction in JPA server,\n\t\t\t\tif a resource already existed matching the conditional expression, the\n\t\t\t\tserver did not change the version of the resource but did update the body\n\t\t\t\twith the passed in body. Thanks to Artem Sopin for reporting and providing a test\n\t\t\t\tcase for this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient revincludes did not include the :recurse modifier. Thanks to\n\t\t\t\tJenny Meinsma for pointing this out on Zulip!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server did not return an OperationOutcome in the response for\n\t\t\t\ta normal delete operation.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix an issue in JPA server where _history results were kept in memory instead\n\t\t\t\tof being spooled to the database as they should be. Note that as a part of this fix\n\t\t\t\ta new method was added to\n\t\t\t\t<![CDATA[<code>IBundleProvider</code> called <code>getUuid()</code>]]>. This\n\t\t\t\tmethod may return <![CDATA[<code>null</code>]]> in any current cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExpanding a ValueSet in JPA server did not correctly apply\n\t\t\t\t<![CDATA[<code>?filter=</code>]]> parameter when the ValueSet\n\t\t\t\tbeing expanded had codes included explicitly (i.e. not by\n\t\t\t\tis-a relationship). Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA validator incorrectly returned an HTTP 400 instead of an HTTP 422 when\n\t\t\t\tthe resource ID was not present and required, or vice versa. Thanks to\n\t\t\t\tBrian Postlethwaite for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using an annotation based client, a ClassCastException would\n\t\t\t\toccur under certain circumstances when the response contained\n\t\t\t\tcontained resources\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server interceptor methods for create/update/delete provided\n\t\t\t\tthe wrong version ID to the interceptors\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA post-processing hook for subclasses of BaseValidatingInterceptor is now available.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"585\">\n\t\t\t\tAuthorizationInterceptor can now authorize (allow/deny) extended operations\n\t\t\t\ton instances and types by wildcard (on any type, or on any instance)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"595\">\n\t\t\t\tWhen RequestValidatingInterceptor is used, the validation results\n\t\t\t\tare now populated into the OperationOutcome produced by\n\t\t\t\tcreate and update operations\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"542\">\n\t\t\t\tAdd support for the $process-message operation to fluent client.\n\t\t\t\tThanks to Hugo Soares for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"543\">\n\t\t\t\tParser can now be configured when encoding to use a specific\n\t\t\t\tbase URL for extensions. Thanks to Sebastien Riviere for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"568\">\n\t\t\t\tCorrect the resource paths for the DSTU2.1 validation resources,\n\t\t\t\tallowing the validator to correctly work against those structures.\n\t\t\t\tThanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"551\">\n\t\t\t\tXML Parser failed to parse large field values (greater than 512 Kb)\n\t\t\t\ton certain platforms where the StAX parser was overridden. Thanks to\n\t\t\t\tGitHub user @Jodue for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"575\">\n\t\t\t\tRemove an unneccesary database flush when saving large code systems to\n\t\t\t\tthe JPA database, improving performance of this operation. Thanks to\n\t\t\t\tJoel Schneider for the pull request and analysis!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new post-processing hook for subclasses of BaseValidatingInterceptor is now\n\t\t\t\tavailable. The hook exposes the request details on validation failure prior to throwing an\n\t\t\t\tUnprocessableEntityException.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.2\" date=\"2016-12-20\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<!--<li>spring (JPA): 4.3.1 -&gt; 4.3.4</li>-->\n\t\t\t\t\t\t<li>Derby (CLI): 10.12.1.1 -&gt; 10.13.1.1</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.3.10.v20160621 -&gt; 9.3.14.v20161028</li>\n\t\t\t\t\t\t<li>JAnsi (CLI): 1.13 -&gt; 1.14</li>\n\t\t\t\t\t\t<li>Phloc Commons (SCH Validator): 4.4.5 -&gt; 4.4.6</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in AuthorizationIntetceptor where\n\t\t\t\ttransactions are blocked even when they\n\t\t\t\tshould not be\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix regression in HAPI FHIR 2.1 JPA\n\t\t\t\tserver where some search parameters on\n\t\t\t\tmetadata resources did not appear\n\t\t\t\t(e.g. \"StructureDefinition.url\"). Thanks\n\t\t\t\tto David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd ability to JPA server for disabling stale search\n\t\t\t\texpiry. This is useful if you are deploying the server\n\t\t\t\tto a cluster.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"495\">\n\t\t\t\tRestfulServer with no explicitly set FhirContext\n\t\t\t\tfails to detect the presents of DSTU3 structures. Thanks\n\t\t\t\tto GitHub user @vijayt27 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAs the\n\t\t\t\t<![CDATA[<a href=\"https://github.com/eBay/cors-filter\">eBay CORS interceptor</a>]]>\n\t\t\t\tproject\n\t\t\t\thas gone dormant, we have introduced a new\n\t\t\t\tHAPI server interceptor which can be used to implement CORS support\n\t\t\t\tinstead of using the previously recommended Servlet Filter. All server\n\t\t\t\texamples as well as the CLI have been switched to use this new interceptor.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"./doc_cors.html\">CORS Documentation</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"480\">\n\t\t\t\tMake the parser configurable so that when\n\t\t\t\tparsing an invalid empty value (e.g.\n\t\t\t\t<![CDATA[<code>{\"status\":\"\"}</code>]]>) the\n\t\t\t\tparser will either throw a meaningful exception\n\t\t\t\tor log a warning depending on the configured\n\t\t\t\terror handler.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"276\">\n\t\t\t\tFix issue when serializing resources that have\n\t\t\t\tcontained resources which are referred to\n\t\t\t\tfrom multiple places. Sometimes when serializing\n\t\t\t\tthese resources the contained resource section\n\t\t\t\twould contain duplicates. Thanks to Hugo Soares\n\t\t\t\tand Stefan Evinance for reporting and providing\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"518\">\n\t\t\t\tAllow client to gracefully handle running in DSTU3 mode\n\t\t\t\tbut with a structures JAR that does not contain a\n\t\t\t\tCapabilityStatement resource. Thanks to Michael Lawley\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in JPA server when searching using an _include if _include targets are\n\t\t\t\texternal references (and therefore can't be loaded\n\t\t\t\tby the server). Thanks to Hannes Ulrich for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHAPI FHIR CLI failed to delete a file when uploading\n\t\t\t\texample resources while running under Windows.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"521\">\n\t\t\t\tServer should reject update if the resource body\n\t\t\t\tdoes not contain an ID, or the ID does not match\n\t\t\t\tthe request URL. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"500\">\n\t\t\t\tWeb Testing UI's next and previous buttons for paging\n\t\t\t\tthrough paged results did not work after the migration\n\t\t\t\tto using Thymeleaf 3. Thanks to GitHub user @gsureshkumar\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"525\">\n\t\t\t\tWhen parsing invalid enum values in STU3,\n\t\t\t\treport errors through the parserErrorHandler,\n\t\t\t\tnot by throwing an exception. Thanks to\n\t\t\t\tMichael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"516\">\n\t\t\t\tWhen parsing DSTU3 resources with enumerated\n\t\t\t\ttypes that contain invalid values, the parser will now\n\t\t\t\tinvoke the parserErrorHandler. For example, when parsing\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>{\"resourceType\":\"Patient\", \"gender\":\"foo\"}</code>\n\t\t\t\t]]>\n\t\t\t\tthe previous behaviour was to throw an InvalidArgumentException.\n\t\t\t\tNow, the parserErrorHandler is invoked. In addition, thw\n\t\t\t\tLenientErrorHandler has been modified so that this one case\n\t\t\t\twill result in a DataFormatException. This has the effect\n\t\t\t\tthat servers which receive an invalid enum velue will return\n\t\t\t\tan HTTP 400 instead of an HTTP 500. Thanks to Jim\n\t\t\t\tSteel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"520\">\n\t\t\t\tDSTU3 context now pulls the FHIR version from the actual\n\t\t\t\tmodel classes. Thanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tEnhancements to the tinder-plugin's generic template features\n\t\t\t\tof the <![CDATA[<i>generate-multi-files</i> and <i>generate-single-file</i>\n\t\t\t\tMaven goals as well as the Ant <i>hapi-tinder</i> task.\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Provides the full Tinder data model by adding composites, valuesets, and profiles to resourcesw.</li>\n\t\t\t\t\t<li>Supports generating files for resources, composites, valuesets, and profiles</li>\n\t\t\t\t\t<li>Supports Velocimacro files outside the tinder-plugin JAR</li>\n\t\t\t\t\t<li>Provides filename prefix as well as suffix properties</li>\n\t\t\t\t\t<li>Can specify any of the Velocity configuration parameters such as\n\t\t\t\t\t<i>macro.provide.scope.control</i> which allows safe macro recursion</li>\n\t\t\t\t\t<li>Templates can now drill down into the referenced children for a ResourceBlockCopy</li>\n\t\t\t\t\t<li>Normalization of properties across all three generic tasks</li>\n\t\t\t\t</ul>\n\t\t\t    ]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"523\">\n\t\t\t\tFix ordering of validator property handling when an element\n\t\t\t\thas a name that is similar to a shorter name[x] style name.\n\t\t\t\tThanks to CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"510\">\n\t\t\t\tAdd a docker configuration to the hapi-fhir-jpaservr-example\n\t\t\t\tmodule. Thanks to Gijsbert van den Brink for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"507\">\n\t\t\t\tAdd utility constructors to MoneyDt. Thanks to James Ren for the\n\t\t\t\tcontribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"528\">\n\t\t\t\tAuthorizationInterceptor was failing to allow read requests to pass\n\t\t\t\twhen a rule authorized those resources by compartment. Thanks to\n\t\t\t\tGitHub user @mattiuusitalo for reporting and supplying\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect a typo in client\n\t\t\t\t<![CDATA[<code>IHttpRequest</code>]]> class: \"bufferEntitity\" should be \"bufferEntity\".\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tErrorHandler is now called (resulting in a warning by default, but can also be an exception) when arsing\n\t\t\t\tJSON if\n\t\t\t\tthe resource ID is not a JSON string, or an object is found where an array is expected (e.g. repeating\n\t\t\t\tfield). Thanks\n\t\t\t\tto Jenni Syed of Cerner for providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix Web Testing UI to be able to handle STU3 servers which\n\t\t\t\treturn CapabilityStatement instead of the previously used\n\t\t\t\t\"Conformance\" resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI example uploader couldn't find STU3 examples after CI server\n\t\t\t\twas moved to build.fhir.org\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA subscription module that prevented purging stale\n\t\t\t\tsubscriptions when many were present on Postgres\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"532\">\n\t\t\t\tServer interceptor methods were being called twice unnecessarily\n\t\t\t\tby the JPA server, and the DaoConfig interceptor registration\n\t\t\t\tframework was not actually useful. Thanks to GitHub user\n\t\t\t\t@mattiuusitalo for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"503\">\n\t\t\t\tAuthorizationInterceptor on JPA server did not correctly\n\t\t\t\tapply rules on deleting resources in a specific compartment\n\t\t\t\tbecause the resource metadata was stripped by the JPA server\n\t\t\t\tbefore the interceptor could see it. Thanks to\n\t\t\t\tEeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"519\">\n\t\t\t\tJPA server exported CapabilityStatement includes\n\t\t\t\tdouble entries for the _id parameter and uses the\n\t\t\t\twrong type (string instead of token). Thanks to\n\t\t\t\tRobert Lichtenberger for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"504\">\n\t\t\t\tCustom resource types which extend Binary must not\n\t\t\t\thave declared extensions since this is invalid in\n\t\t\t\tFHIR (and HAPI would just ignore them anyhow). Thanks\n\t\t\t\tto Thomas S Berg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStandard HAPI zip/tar distributions did not include the project\n\t\t\t\tsources and JavaDoc JARs. Thanks to Keith Boone for pointing\n\t\t\t\tthis out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer AuthorizationInterceptor always rejects history operation\n\t\t\t\tat the type level even if rules should allow it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server terminology service was not correctly validating or expanding codes\n\t\t\t\tin SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"539\">\n\t\t\t\tAttempting to search for an invalid resource type (e.g. GET base/FooResource) should\n\t\t\t\treturn an HTTP 404 and not a 400, per the HTTP spec. Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"544\">\n\t\t\t\tWhen parsing a Bundle containing placeholder fullUrls and references\n\t\t\t\t(e.g. \"urn:uuid:0000-0000\") the resource reference targets did not get\n\t\t\t\tpopulated with the given resources. Note that as a part of this\n\t\t\t\tchange, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified\n\t\t\t\tso that when parsing a placeholder ID, the complete placeholder including the\n\t\t\t\t\"urn:uuid:\" or \"urn:oid:\" prefix will be placed into the ID part. Previously,\n\t\t\t\tthe prefix was treated as the base URL, which led to strange behaviour\n\t\t\t\tlike the placeholder being treated as a real IDs. Thanks to GitHub\n\t\t\t\tuser @jodue for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeclared extensions with multiple type() options listed in the @Child\n\t\t\t\tannotation caused a crash on startup. Now this is supported.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 XHTML parser for narrative choked if the narrative contained\n\t\t\t\tan <![CDATA[<code>&amp;rsquot;</code>]]> entity string.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"538\">\n\t\t\t\tWhen parsing a quantity parameter on the server with a\n\t\t\t\tvalue and units but no system (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)\n\t\t\t\tthe unit was incorrectly treated as the system. Thanks to\n\t\t\t\t@CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"533\">\n\t\t\t\tCorrect a typo in the JPA ValueSet ResourceProvider which prevented\n\t\t\t\tsuccessful operation under Spring 4.3. Thanks to\n\t\t\t\tRobbert van Waveren for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDeprecate the method\n\t\t\t\t<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>\n\t\t\t\tas it is no longer used by HAPI and is just an annoying step\n\t\t\t\tin creating custom structures. Thanks to Allan Bro Hansen\n\t\t\t\tfor pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"547\">\n\t\t\t\tCapturingInterceptor did not buffer the response meaning\n\t\t\t\tthat in many circumstances it did not actually capture\n\t\t\t\tthe response. Thanks to Jenny Syed of Cerner for\n\t\t\t\tthe pull request and contribution!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.1\" date=\"2016-11-11\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 structure definitions have been updated to the\n\t\t\t\tSTU3 latest definitions (1.7.0 - SVN 10129). In\n\t\t\t\tparticular, this version supports the new CapabilityStatement\n\t\t\t\tresource which replaces the previous Conformance\n\t\t\t\tresource (in order to reduce upgrade pain, both resource\n\t\t\t\ttypes are included in this version of HAPI)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>spring-data-orm (JPA): 1.10.2 -&gt; 1.10.4</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a fairly significant issue in JPA Server when using the\n\t\t\t\t<![CDATA[<code>DatabaseBackedPagingProvider</code>]]>: When paging over the results\n\t\t\t\tof a search / $everything operation, under certain circumstances resources may be missing from the last page\n\t\t\t\tof results\n\t\t\t\tthat is returned. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tClient, Server, and JPA server now support experimental support\n\t\t\t\tfor\n\t\t\t\t<![CDATA[HTTP PATCH]]>\n\t\t\t\tusing the XML Patch and JSON Patch syntax as explored during the\n\t\t\t\tSeptember 2016 Baltimore Connectathon. See\n\t\t\t\t<![CDATA[<a href=\"http://wiki.hl7.org/index.php?title=201609_PATCH_Connectathon_Track_Proposal\">this wiki page</a>]]>\n\t\t\t\tfor a description of the syntax.\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tThanks to Pater Girard for all of his help during the connectathon\n\t\t\t\tin implementing this feature!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAndroid library now uses OkHttp client by default instead\n\t\t\t\tof Apache HttpClient. This should lead to much simpler\n\t\t\t\tsupport for Android in the future.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBoth client and server now use the new STU3 mime types by default\n\t\t\t\tif running in STU3 mode (in other words, using an STU3\n\t\t\t\tFhirContext).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, when returning a list of resources, the server sometimes failed to add\n\t\t\t\t<![CDATA[<code>_include</code>]]> resources to the response bundle if they were\n\t\t\t\treferred to by a contained reosurce. Thanks to Neal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix regression in web testing UI where \"prev\" and \"next\" buttons don't work\n\t\t\t\twhen showing a result bundle\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should not attempt to resolve built-in FHIR StructureDefinitions from the\n\t\t\t\tdatabase (this causes a significant performance hit when validating)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tBanUnsupportedHttpMethodsInterceptor was erroring out when a client\n\t\t\t\tattempts HTTP HEAD requests\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional URLs in JPA server (e.g. for delete or update) did not support the\n\t\t\t\t<![CDATA[<code>_has</code>]]> parameter\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"440\">\n\t\t\t\tRemove Maven dependency on Saxon library, as it is not actually used. Thanks\n\t\t\t\tto Lem Edmondson for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"444\">\n\t\t\t\tTimes before 1970 with fractional milliseconds were parsed incorrectly. Thanks\n\t\t\t\tto GitHub user @CarthageKing for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"448\">\n\t\t\t\tPrevent crash in parser when parsing resource\n\t\t\t\twith multiple profile declarations when\n\t\t\t\tdefault type for profile is used. Thanks to\n\t\t\t\tFilip Domazet for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"445\">\n\t\t\t\tSTU3 servers were adding the old MimeType\n\t\t\t\tstrings to the\n\t\t\t\t<![CDATA[<code>Conformance.format</code>]]>\n\t\t\t\tpart of the generated server conformance\n\t\t\t\tstatement\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"446\">\n\t\t\t\tWhen performing an update using the client on a resource that\n\t\t\t\tcontains other resources (e.g. Bundle update), all child resources in the\n\t\t\t\tparent bundle were incorrectly given the ID of the parent. Thanks\n\t\t\t\tto Filip Domazet for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU clients now use an Accept header which\n\t\t\t\tindicates support for both the old MimeTypes\n\t\t\t\t(e.g. <![CDATA[<code>application/xml+fhir</code>]]>)\n\t\t\t\tand the new MimeTypes\n\t\t\t\t(e.g. <![CDATA[<code>application/fhir+xml</code>]]>)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now sends correct\n\t\t\t\t<![CDATA[<code>HTTP 409 Version Conflict</code>]]>\n\t\t\t\twhen a\n\t\t\t\tDELETE fails because of constraint issues, instead of\n\t\t\t\t<![CDATA[<code>HTTP 400 Invalid Request</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer history operation did not populate the Bundle.entry.request.url\n\t\t\t\tfield, which is required in order for the bundle to pass validation.\n\t\t\t\tThanks to Richard Ettema for spotting this!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to the server interceptor framework which will be\n\t\t\t\tcalled after all other processing is complete (useful for performance\n\t\t\t\ttracking). The server LoggingInterceptor has been switched to using this\n\t\t\t\tmethod which means that log lines will be created when processing is finished,\n\t\t\t\tinstead of when it started.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 clients were not sending the new mimetype values in the\n\t\t\t\t<![CDATA[<code>Content-Type</code>]]> header. Thanks to\n\t\t\t\tClaude Nanjo for pointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJAX-RS server was not able to handle the new mime types defined\n\t\t\t\tin STU3\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not handle custom types when being called\n\t\t\t\tprogramatically (I.e. not through HTTP interface). Thanks to\n\t\t\t\tAnthony Mei for pointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI was not correctly able to upload DSTU2 examples to any server\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 validator has been upgrated to include fixes made since the\n\t\t\t\t1.6.0 ballot\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent JPA server from creating a bunch of\n\t\t\t\tFhirContext objects for versions of FHIR that\n\t\t\t\taren't actually being used\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"443\">\n\t\t\t\tXhtmlNode.equalsDeep() contained a bug which caused resources\n\t\t\t\tcontaining a narrative to always return\n\t\t\t\t<![CDATA[<code>false</code>]]> for STU3\n\t\t\t\t<![CDATA[<code>Resource#equalsDeep()</code>]]>. Thanks to\n\t\t\t\tGitHub user @XcrigX for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"441\">\n\t\t\t\tJPA server did not correctly process searches for chained parameters\n\t\t\t\twhere the chain passed across a field that was a choice between a\n\t\t\t\treference and a non-reference type (e.g.\n\t\t\t\t<![CDATA[<code>MedicationAdministration.medication[x]</code>]]>.\n\t\t\t\tThanks to GitHub user @Crudelus for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"414\">\n\t\t\t\tHandle parsing an extension without a URL more gracefully. In HAPI FHIR 2.0 this caused\n\t\t\t\ta NullPointerException to be thrown. Now it will trigger a warning, or throw a\n\t\t\t\tDataFormatException if the StrictErrorHandler is configured on the parser.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCalling a HAPI server URL with a chain on a parameter that shouldn't accept\n\t\t\t\tchains (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Patient?name.foo=smith</code>]]>)\n\t\t\t\tdid not return an error and instead just ignored the chained part\n\t\t\t\tand treated the parameter as though it did not have the chain. This\n\t\t\t\tled to confusing and potentially unsafe behaviour. This has been\n\t\t\t\tcorrected to return an error to the client. Thanks to\n\t\t\t\tKevin Tallevi for finding this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"411\">\n\t\t\t\tFix #411 - Searching by <![CDATA[<code>POST [base]/_search</code>]]> with urlencoded parameters doesn't work\n\t\t\t\tcorrectly if\n\t\t\t\tinterceptors are accessing the parameters and there is are also\n\t\t\t\tparameters on the URL. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFluent client can now return types other than Parameters\n\t\t\t\twhen invoking operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server shouldn't report a totalCount in Bundle of \"-1\" when\n\t\t\t\tthere are no results\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"454\">\n\t\t\t\tJPA server was not correctly normalizing strings with non-latin characters\n\t\t\t\t(e.g. Chinese chars). Thanks to GitHub user @YinAqu for reporting and providing\n\t\t\t\tsome great analysis of the issue!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to ReferenceClientParam which allows you to\n\t\t\t\tpass in a number of IDs by a collection of Strings. Thanks to\n\t\t\t\tThomas Andersen for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"327\">\n\t\t\t\tWhen encoding a resource in JSON where the resource has\n\t\t\t\tan extension with a value where the value is a reference to a\n\t\t\t\tcontained resource, the reference value (e.g. \"#1\") did not\n\t\t\t\tget serialized. Thanks to GitHub user @fw060 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"464\">\n\t\t\t\tResponseHighlighterInterceptor now pretty-prints responses\n\t\t\t\tby default unless the user has explicitly requested\n\t\t\t\ta non-pretty-printed response (ie.\n\t\t\t\tusing <![CDATA[<code>?_pretty=false</code>]]>. Thanks to\n\t\t\t\tAllan Brohansen and Jens Villadsen for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"469\">\n\t\t\t\tAdd a new JSON library abstraction layer to the JSON parser.\n\t\t\t\tThis contribution shouldn't have any end-user impact but does\n\t\t\t\tmake it easier to use the JSON parser to generate custom structures\n\t\t\t\tfor other purposes, and should allow us to support RDF more\n\t\t\t\teasily at some point. Thanks to Bill Denton for the pull\n\t\t\t\trequest and the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"455\">\n\t\t\t\tDSTU1 Bundle encoder did not include the Bundle entry author in\n\t\t\t\tthe generated bundle. Thanks to Hannes Venter for the pull\n\t\t\t\trequest and contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove unused field (myIsContained) from ResourceTable\n\t\t\t\tin JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor is now a bit more aggressive\n\t\t\t\tat blocking read operations, stopping them on the\n\t\t\t\tway in if there is no way they will be accepted\n\t\t\t\tto the resource check on the way out. In addition\n\t\t\t\tit can now be configured to allow/deny operation\n\t\t\t\tinvocations at the instance level on any\n\t\t\t\tinstance of a given type\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"472\">\n\t\t\t\tSTU3 servers were incorrectly returning the\n\t\t\t\t<![CDATA[<code>Content-Location</code>]]>\n\t\t\t\theader instead of the\n\t\t\t\t<![CDATA[<code>Content</code>]]>\n\t\t\t\theader. The former has been removed from the\n\t\t\t\tFHIR specification in STU3, but the\n\t\t\t\tlatter got removed in HAPI's code base.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect several documentation issues. Thanks to Vadim Peretokin\n\t\t\t\tfor the pull requests!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRemove an unneccesary database flush\n\t\t\t\tfrom JPA persistence operations\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"470\">\n\t\t\t\tAdd method to fluent client to allow OR search across several\n\t\t\t\tprofiles. Thanks to Thomas Andersen for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.0\" date=\"2016-08-30\">\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parsing in HAPI FHIR has been switched from using JSR353 (javax.json) to\n\t\t\t\tusing Google Gson. For this reason we are bumping the major release number to\n\t\t\t\t2.0. Theoretically this should not affect projects in any major way, but Gson\n\t\t\t\tdoes have subtle differences. Two differences which popped up a fair bit in\n\t\t\t\tour own testing:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\tA space is placed after the : in keys, e.g. what was previously\n\t\t\t\t\t\tencoded as <code>\"resourceType\":\"Patient\"</code> is now encoded\n\t\t\t\t\t\tas <code>\"resourceType\": \"Patient\"</code> (this broke a number of\n\t\t\t\t\t\tour unit tests with hardcoded resource definitions)\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\tTrailing content after a valid json resource is rejected by\n\t\t\t\t\t\tGson (it was ignored by the Glassfish parser we were previously\n\t\t\t\t\t\tusing even though it was invalid)\n\t\t\t\t\t</ul>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 structure definitions have been updated to the\n\t\t\t\tSTU3 ballot candidate versions (1.6.0 - SVN 9663)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBoth client and server now support the new Content Types decided in\n\t\t\t\t<![CDATA[<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=10199\">FHIR #10199</a>]]>\n\t\t\t\t.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis means that the server now supports\n\t\t\t\t<![CDATA[<code>application/fhir+xml</code> and <code>application/fhir+json</code>]]>\n\t\t\t\tin addition to the older style\n\t\t\t\t<![CDATA[<code>application/xml+fhir</code> and <code>application/json+fhir</code>]]>.\n\t\t\t\tIn order to facilitate migration by implementors, the old style remains the default\n\t\t\t\tfor now, but the server will respond using the new style if the request contains it. The\n\t\t\t\tclient now uses an <![CDATA[<code>Accept</code>]]> header value which requests both\n\t\t\t\tstyles with a preference given to the new style when running in DSTU3 mode.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, the server has also been enhanced so that if a request\n\t\t\t\tcontains a Content-Type header but no Accept header, the response will prefer the\n\t\t\t\tencoding specified by the Content-Type header.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Logback (used in sample projects): 1.1.5 -&gt; 1.1.7</li>\n\t\t\t\t\t\t<li>Phloc Commons (used by schematron validator): 4.4.4 -&gt; 4.4.5</li>\n\t\t\t\t\t\t<li>Commons-IO: 2.4 -&gt; 2.5</li>\n\t\t\t\t\t\t<li>Apache HTTPClient: 4.5.1 -&gt; 4.5.2</li>\n\t\t\t\t\t\t<li>Apache HTTPCore: 4.4.4 -&gt; 4.4.5</li>\n\t\t\t\t\t\t<li>Jersey (JAX-RS tests): 2.22.2 -&gt; 2.23.1</li>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.3.0 -&gt; 4.3.1</li>\n\t\t\t\t\t\t<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.1</li>-->\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.4</li>\n\t\t\t\t\t\t<li>Thymeleaf (Narrative Generator / Web Tester): 2.1.4 -&gt;3.0.1</li> \n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in DSTU1 Bundle parsing where unexpected elements in the bundle resulted in a failure\n\t\t\t\tto parse.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDSTU2 QuestionnaireResponse validator failed with an exception if the\n\t\t\t\tQuestionnaireResponse contained certain groups with no content\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"150\">\n\t\t\t\tFluent client should ignore parameter values which are null instead of including\n\t\t\t\tthem as <![CDATA[<code>?foo=null</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using <![CDATA[<code>_elements</code>]]> parameter on server, the server was not\n\t\t\t\tautomatically adding the <![CDATA[<code>SUBSETTED</code>]]> tag as it should\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should now automatically detect\n\t\t\t\tif Hibernate Search (Lucene) is configured to be\n\t\t\t\tdisabled and will not attempt to use it. This\n\t\t\t\tprevents a crash for some operations.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new server interceptor \"BanUnsupprtedHttpMethodsInterceptor\" has been added\n\t\t\t\twhich causes the server to return an HTTP 405 if an unsupported HTTP\n\t\t\t\tverb is received from the client\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"404\">\n\t\t\t\tFix an issue where resource IDs were not correctly set when using\n\t\t\t\tDSTU2 HL7org structures with the JAX-RS module. Thanks to Carlo Mion\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\thapi-fhir-testpage-overlay project contained an unneccesary\n\t\t\t\tdependency on hapi-fhir-jpaserver-base module, which resulted in\n\t\t\t\tprojects using the overlay having a large number of unnneded\n\t\t\t\tJARs included\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"403\">\n\t\t\t\tIt is not possible to configure both the parser and the context to\n\t\t\t\tpreserve versions in resource references (default behaviour is to\n\t\t\t\tstrip versions from references). Thanks to GitHub user @cknaap\n\t\t\t\tfor the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"409\">\n\t\t\t\t<![CDATA[<code>Tag#setCode(String)</code>]]> did not actually set the code it was supposed to\n\t\t\t\tset. Thanks to Tim Tschampel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"401\">\n\t\t\t\tJPA server's <![CDATA[<code>/Bundle</code>]]> endpoint cleared\n\t\t\t\tthe <![CDATA[<code>Bundle.entry.fullUrl</code>]]> field on stored\n\t\t\t\tbundles, resulting in invalid content being saved. Thanks to Mirjam\n\t\t\t\tBaltus for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now returns HTTP 200 instead of HTTP 404 for\n\t\t\t\tconditional deletes which did not find any matches,\n\t\t\t\tper FHIR-I decision.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient that declares explicitly that it is searching/reading/etc for\n\t\t\t\ta custom type did not automatically parse into that type.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"406\">\n\t\t\t\tAllow servers to specify the authentication realm of their choosing when\n\t\t\t\tthrowing an AuthenticationException. Thanks to GitHub user @allanbrohansen\n\t\t\t\tfor the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"416\">\n\t\t\t\tAdd a new client implementation which uses the\n\t\t\t\t<![CDATA[<a href=\"http://square.github.io/okhttp/\">OkHttp</a>]]>\n\t\t\t\tlibrary as the HTTP client implementation (instead of Apache HttpClient).\n\t\t\t\tThis is particularly useful for Android (where HttpClient is a pain) but\n\t\t\t\tcould also be useful in other places too.\n\t\t\t\tThanks to Matt Clarke of Orion Health for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a regression when parsing resources that have contained\n\t\t\t\tresources, where the reference in the outer resource which\n\t\t\t\tlinks to the contained resource sometimes did does not get\n\t\t\t\tpopulated with the actual target resource instance. Thanks to\n\t\t\t\tNeal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\thapi-fhir-cli upload-terminology command now has an argument\n\t\t\t\t\"-b FOO\" that lets you add an authorization header in the form\n\t\t\t\t<![CDATA[<code>Authorization: Bearer FOO</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"423\">\n\t\t\t\tParser failed to successfully encode a custom resource\n\t\t\t\tif it contained custom fields that also used custom\n\t\t\t\ttypes. Thanks to GitHub user @sjanic for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tInprove handling of _text and _content searches in JPA server to do better\n\t\t\t\tmatching on partial strings\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServers in STU3 mode will now ignore any ID or VersionID found in the\n\t\t\t\tresource body provided by the client when processing FHIR\n\t\t\t\t<![CDATA[<code>update</code>]]> operations. This change has been made\n\t\t\t\tbecause the FHIR specification now requires servers to ignore\n\t\t\t\tthese values. Note that as a result of this change, resources passed\n\t\t\t\tto <![CDATA[<code>@Update</code>]]> methods will always have\n\t\t\t\t<![CDATA[<code>null</code>]]> ID\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new methods to\n\t\t\t\t<![CDATA[<code>AuthorizationInterceptor</code>]]>\n\t\t\t\twhich allow user code to declare support for conditional\n\t\t\t\tcreate, update, and delete.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding a resource with a reference to another resource\n\t\t\t\tthat has a placeholder ID (e.g. urn:uuid:foo), the urn prefix\n\t\t\t\twas incorrectly stripped from the reference.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServers for STU3 (or newer) will no longer include a\n\t\t\t\t<![CDATA[<code>Location:</code>]]> header on responses for\n\t\t\t\t<![CDATA[<code>read</code>]]> operations. This header was\n\t\t\t\trequired in earlier versions of FHIR but has been removed\n\t\t\t\tfrom the specification.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"428\">\n\t\t\t\tFix NullPointerException when encoding an extension containing CodeableConcept\n\t\t\t\twith log level set to TRACE. Thanks to Bill Denton for the report!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd two new methods to the parser error handler that let users trap\n\t\t\t\tinvalid contained resources with no ID, as well as references to contained\n\t\t\t\tresource that do not exist.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove performance when parsing resources containing contained resources\n\t\t\t\tby eliminating a step where references were woven twice\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"426\">\n\t\t\t\tParser failed to parse resources containing an extension with a value type of\n\t\t\t\t\"id\". Thanks to Raphael M\u00c3\u00a4der for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen committing a transaction in JPA server\n\t\t\t\twhere the transaction contained placeholder IDs\n\t\t\t\tfor references between bundles, the placeholder\n\t\t\t\tIDs were not substituted with viewing\n\t\t\t\tresources using the _history operation\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI root pom shouldn't include animal-sniffer plugin,\n\t\t\t\tsince that causes any projects which extend this to\n\t\t\t\tbe held to Java 6 compliance.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.6\" date=\"2016-07-07\">\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerformance has been improved for the initial FhirContext\n\t\t\t\tobject creation by avoiding a lot of unnecessary reflection. HAPI FHIR\n\t\t\t\t1.5 had a regression compared to previous releases\n\t\t\t\tand this has been corrected, but other improvements have been\n\t\t\t\tmade so that this release is faster than previous releases too.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn addition, a new \"deferred scan\" mode has been implemented for\n\t\t\t\teven faster initialization on slower environments (e.g. Android).\n\t\t\t\tSee the <![CDATA[<a href=\"./doc_rest_client_http_config.html#performance\">performance documentation</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThe following shows our benchmarks for context initialization across several\n\t\t\t\tversions of HAPI:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Version 1.4: <b>560ms</b></li>\n\t\t\t\t\t\t<li>Version 1.5: <b>800ms</b></li>\n\t\t\t\t\t\t<li>Version 1.6: <b>340ms</b></li>\n\t\t\t\t\t\t<li>Version 1.6 (deferred mode): <b>240ms</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.2.5 -&gt; 4.3.0</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 1.9.2 -&gt; 1.10.1</li>\n\t\t\t\t\t\t<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.0</li>-->\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.3</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.3.9 -&gt; 9.3.10</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tRemove some clases that were deprecated over a year ago and have\n\t\t\t\tsuitable replacements:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>QualifiedDateParam has been removed, but DateParam may be used instead</li>\n\t\t\t\t\t\t<li>PathSpecification has been removedm but Include may be used instead</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"345\">\n\t\t\t\tResponseValidatingInterceptor threw an InternalErrorException (HTTP 500) for operations\n\t\t\t\tthat do not return any content (e.g. delete). Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"342\">\n\t\t\t\tREST server now throws an HTTP 400 instead of an HTTP 500 if an operation which takes\n\t\t\t\ta FHIR resource in the request body (e.g. create, update) contains invalid content that\n\t\t\t\tthe parser is unable to parse. Thanks to Jim Steel for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeprecate fluent client search operations without an explicit declaration of the\n\t\t\t\tbundle type being used. This also means that in a client\n\t\t\t\t<![CDATA[<code>.search()</code>]]>\n\t\t\t\toperation, the\n\t\t\t\t<![CDATA[<code>.returnBundle(Bundle.class)</code>]]>\n\t\t\t\tneeds to be the last statement before\n\t\t\t\t<![CDATA[<code>.execute()</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"346\">\n\t\t\t\tServer now respects the parameter <![CDATA[<code>_format=application/xml+fhir\"</code>]]>\n\t\t\t\twhich is technically invalid since the + should be escaped, but is likely to be used. Also,\n\t\t\t\ta parameter of <![CDATA[<code>_format=html</code>]]> can now be used, which\n\t\t\t\tforces SyntaxHighlightingInterceptor to use HTML even\n\t\t\t\tif the headers wouldn't otherwise trigger it.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tImprove performance when parsing large bundles by fixing a loop over all of the\n\t\t\t\tentries inthe bundle to stitch together cross-references, which was happening once\n\t\t\t\tper entry instead of once overall. Thanks to Erick on the HAPI FHIR Google Group for\n\t\t\t\tnoticing that this was an issue!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tJSON parser no longer allows the resource ID to be specified in an element called \"_id\"\n\t\t\t\t(the correct one is \"id\"). Previously _id was allowed because some early FHIR examples\n\t\t\t\tused that form, but this was never actually valid so it is now being removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now allows \"forced IDs\" (ids containing non-numeric, client assigned IDs)\n\t\t\t\tto use the same logical ID part on different resource types. E.g. A server may now have\n\t\t\t\tboth Patient/foo and Obervation/foo on the same server.<![CDATA[<br/><br/>]]>\n\t\t\t\tNote that existing databases will need to modify index \"IDX_FORCEDID\" as\n\t\t\t\tit is no longer unique, and perform a reindexing pass.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"350\">\n\t\t\t\tWhen serializing/encoding custom types which replace exsting choice fields by\n\t\t\t\tfixing the choice to a single type, the parser would forget that the\n\t\t\t\tfield was a choice and would use the wrong name (e.g. \"abatement\" instead of\n\t\t\t\t\"abatementDateType\"). Thanks to Yaroslav Kovbas for reporting and\n\t\t\t\tproviding a unit test!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transactions sometimes created an incorrect resource reference\n\t\t\t\tif a resource being saved contained references that had a display value but\n\t\t\t\tnot an actual reference. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"352\">\n\t\t\t\tWhen performing a REST Client create or update with\n\t\t\t\t<![CDATA[<code>Prefer: return=representation</code>]]> set,\n\t\t\t\tif the server does not honour the Prefer header, the client\n\t\t\t\twill automatically fetch the resource before returning. Thanks\n\t\t\t\tto Ewout Kramer for the idea!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"354\">\n\t\t\t\tDSTU3 structures now have\n\t\t\t\t<![CDATA[<code>setFoo(List)</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>setGetFooFirstRep()</code>]]>\n\t\t\t\tmethods, bringing them back to parity with the HAPI\n\t\t\t\tDSTU2 structures. Thanks to Rahul Somasunderam and\n\t\t\t\tClaude Nanjo for the suggestions!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server has now been refactored to use the\n\t\t\t\tnew FluentPath search parameter definitions\n\t\t\t\tfor DSTU3 resources.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRequestValidatingInterceptor and ResponseValidatingInterceptor\n\t\t\t\tboth have new method <![CDATA[<code>setIgnoreValidatorExceptions</code>]]>\n\t\t\t\twhich causes validator exceptions to be ignored, rather than causing\n\t\t\t\tprocessing to be aborted.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLoggingInterceptor on server has a new parameter\n\t\t\t\t<![CDATA[<code>${requestBodyFhir}</code>]]> which logs the entire request body.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"355\">\n\t\t\t\tJAX-RS server module now supports DSTU3 resources (previously it only supported DSTU2). Thanks\n\t\t\t\tto Phillip Warner for implementing this, and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"356\">\n\t\t\t\tGenerated conformance statements for DSTU3 servers did not properly reference their\n\t\t\t\tOperationDefinitions. Thanks\n\t\t\t\tto Phillip Warner for implementing this, and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"359\">\n\t\t\t\tProperly handle null arrays when parsing JSON resources. Thanks to Subhro for\n\t\t\t\tfixing this and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 validator failed to validate codes where the\n\t\t\t\tcode was a child code within the code system that contained it\n\t\t\t\t(i.e. not a top level code). Thanks to Jon\n\t\t\t\tZammit for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"361\">\n\t\t\t\tRestore the setType method in the DSTU1 Bundle\n\t\t\t\tclass, as it was accidentally commented out. Thanks\n\t\t\t\tto GitHub user @Virdulys for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports composite search parameters\n\t\t\t\twhere the type of the composite parameter is\n\t\t\t\ta quantity (e.g. Observation:component-code-component-value-quantity)\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tRemove the Remittance resource from DSTU2\n\t\t\t\tstructures, as it is not a real resource and\n\t\t\t\twas causing issues with interoperability\n\t\t\t\twith the .NET client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI tool cache feature (-c) for upload-example task sometimes failed\n\t\t\t\tto write cache file and exited with an exception.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix error message in web testing UI when loading pages in a search\n\t\t\t\tresult for STU3 endpoints.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding JSON resource, the parser will now always\n\t\t\t\tensure that XHTML narrative content has an\n\t\t\t\tXHTML namespace declaration on the first\n\t\t\t\tDIV tag. This was preventing validation for\n\t\t\t\tsome resources using the official validator\n\t\t\t\trules.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer failed to invoke operations when the name\n\t\t\t\twas escaped (%24execute instead of $execute).\n\t\t\t\tThanks to Michael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transactions containing a bundle that has multiple entries\n\t\t\t\ttrying to delete the same resource caused a 500 internal error\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA module failed to index search parameters that mapped to a Timing datatype,\n\t\t\t\te.g. CarePlan:activitydate\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new option to the CLI run-server command called <![CDATA[<code>--lowmem</code>]]>.\n\t\t\t\tThis option disables some features (e.g. fulltext search) in order to allow the\n\t\t\t\tserver to start in memory-constrained environments (e.g Raspberry Pi)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen updating a resource via an update operation on the server, if the ID of the\n\t\t\t\tresource is not present in the resource body but is present on the URL, this will\n\t\t\t\tnow be treated as a warning instead of as a failure in order to be a bit more\n\t\t\t\ttolerant of errors. If the ID is present in the body but does not agree with the\n\t\t\t\tID in the URL this remains an error.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer / JPA server date range search params (e.g. Encounter:date) now treat\n\t\t\t\ta single date with no comparator (or the eq comparator) as requiring that the\n\t\t\t\tvalue be completely contained by the range specified. Thanks to Chris Moesel\n\t\t\t\tfor the suggestion.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, if a parameter was annotated with the <![CDATA[@Count]]> annotation, the\n\t\t\t\tcount would not appear in the self/prev/next links and would not actually be applied\n\t\t\t\tto the search results by the server. Thanks to Jim Steele for letting us know!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional update on server failed to process if the conditional URL did not have any\n\t\t\t\tsearch parameters that did not start with an underscore. E.g. \"Patient?_id=1\" failed\n\t\t\t\teven though this is a valid conditional reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"363\">\n\t\t\t\tJPA server can now be configured to allow external references (i.e. references that\n\t\t\t\tpoint to resources on other servers). See\n\t\t\t\t<![CDATA[<a href=\"./doc_jpa.html\">JPA Documentation</a>]]> for information on\n\t\t\t\thow to use this. Thanks to Naminder Soorma for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"366\">\n\t\t\t\tWhen posting a resource to a server that contains an invalid value in a boolean field\n\t\t\t\t(e.g. Patient with an active value of \"1\") the server should return an HTTP 400, not\n\t\t\t\tan HTTP 500. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"364\">\n\t\t\t\tEnable parsers to parse and serialize custom resources that contain custom datatypes.\n\t\t\t\tAn example has been added which shows how to do this\n\t\t\t\t<![CDATA[<a href=\"./doc_custom_structures.html\">here</a>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser was incorrectly encoding resource language attribute in JSON as an\n\t\t\t\tarray instead of a string. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"367\">\n\t\t\t\tS\u00c3\u00a9bastien Rivi\u00c3\u00a8re contributed an excellent pull request which adds a\n\t\t\t\tnumber of enhancements to JAX-RS module:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t<li>Enable the conditional update and delete</li>\n\t\t\t\t<li>Creation of a bundle provider, and support of the @Transaction</li>\n\t\t\t\t<li>Bug fix on the exceptions handling as some exceptions throw outside bean context were not intercept.</li>\n\t\t\t\t<li>Add the possibility to have the stacktrace in the jaxrsException</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"369\">\n\t\t\t\tFhirTerser.cloneInto method failed to clone correctly if the source\n\t\t\t\thad any extensions. Thanks to GitHub user @Virdulys for submitting and\n\t\t\t\tproviding a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUpdate DSTU2 InstanceValidator to latest version from upstream\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWeb Testing UI was not able to correctly post an STU3 transaction\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateTime parser incorrectly parsed times where more than 3 digits of\n\t\t\t\tprecision were provided on the seconds after the decimal point\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove error messages when the $validate operation is called but no resource\n\t\t\t\tis actually supplied to validate\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDSTU2+ servers no longer return the Category header, as this has been\n\t\t\t\tremoved from the FHIR specification (and tags are now available in the\n\t\t\t\tresource body so the header was duplication/wasted bandwidth)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"374\">\n\t\t\t\tCreate and Update operations in server did not\n\t\t\t\tinclude ETag or Last-Modified headers even though\n\t\t\t\tthe spec says they should. Thanks to Jim Steel for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"371\">\n\t\t\t\tUpdate STU3 client and server to use the new sort parameter style (param1,-param2,param). Thanks to GitHub\n\t\t\t\tuser @euz1e4r for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tQuantityClientParam#withUnit(String) put the unit into the system part of the\n\t\t\t\tparameter value\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFluent client searches with date parameters were not correctly using\n\t\t\t\tnew prefix style (e.g. gt) instead of old one (e.g. &gt;)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"370\">\n\t\t\t\tSome built-in v3 code systems for STU3 resources were missing\n\t\t\t\tcertain codes, which caused false failures when validating\n\t\t\t\tresources. Thanks to GitHub user @Xoude for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"365\">\n\t\t\t\tSome methods on DSTU2 model structures have JavaDocs that\n\t\t\t\tincorrectly claim that the method will not return null when\n\t\t\t\tin fact it can. Thanks to Rick Riemer for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor has been modified based on consensus\n\t\t\t\ton Zulip with Grahame that requests that have a parameter of\n\t\t\t\t<![CDATA[<code>_format=json</code>]]> or\n\t\t\t\t<![CDATA[<code>_format=xml</code>]]> will output raw FHIR content\n\t\t\t\tinstead of HTML highlighting the content as they previously did.\n\t\t\t\tHTML content can now be forced via the (previously existing)\n\t\t\t\t<![CDATA[<code>_format=html</code>]]> or via the two newly added\n\t\t\t\tvalues\n\t\t\t\t<![CDATA[<code>_format=html/json</code>]]> and\n\t\t\t\t<![CDATA[<code>_format=html/xml</code>]]>. Because of this\n\t\t\t\tchange, the custom\n\t\t\t\t<![CDATA[<code>_raw=true</code>]]> mode has been deprecated and\n\t\t\t\twill be removed at some point.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"267\">\n\t\t\t\tOperation definitions (e.g. for $everything operation) in the generated\n\t\t\t\tserver conformance statement should not include the $ prefix in the operation\n\t\t\t\tname or code. Thanks to Dion McMurtrie for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"378\">\n\t\t\t\tServer generated OperationDefinition resources did not validate\n\t\t\t\tdue to some missing elements (kind, status, etc.).\n\t\t\t\tThanks to\n\t\t\t\tMichael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"379\">\n\t\t\t\tOperations that are defined on multiple resource provider types with\n\t\t\t\tthe same name (e.g. \"$everything\") are now automatically exposed by the server\n\t\t\t\tas separate OperationDefinition resources per resource type. Thanks to\n\t\t\t\tMichael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"380\">\n\t\t\t\tOperationDefinition resources generated automatically by the server for operations\n\t\t\t\tthat are defined within resource/plain providers incorrectly stated that\n\t\t\t\tthe maximum cardinality was \"*\" for non-collection types with no explicit\n\t\t\t\tmaximum stated, which is not the behaviour that the JavaDoc on the\n\t\t\t\t<![CDATA[@OperationParam]]> annotation describes. Thanks to Michael Lawley\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer parameters annotated with\n\t\t\t\t<![CDATA[<code>@Since</code>]]>\n\t\t\t\tor\n\t\t\t\t<![CDATA[<code>@Count</code>]]>\n\t\t\t\twhich are of a FHIR type such as IntegerDt or DateTimeType will\n\t\t\t\tnow be set to null if the client's URL does not\n\t\t\t\tcontain this parameter. Previously they would be populated\n\t\t\t\twith an empty instance of the FHIR type, which was inconsistent with\n\t\t\t\tthe way other server parameters worked.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now supports the _at parameter (including multiple repetitions)\n\t\t\t\tfor history operation\n\t\t\t</action>\n\t\t\t<!--\n\t\t\tThis one actually doesn't seem possible without using a deprecated servlet API\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen throwing UnclassifiedServerException in server methods, the HTTP response\n\t\t\t\tstatus line contained the response code specified in the exception, but not the\n\t\t\t\tresponse message\n\t\t\t</action>\n\t\t\t-->\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow or deny requests to extended\n\t\t\t\toperations (e.g. $everything)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDecimalType used BigDecimal constructor instead of valueOf method to\n\t\t\t\tcreate a BigDecimal from a double, resulting in weird floating point\n\t\t\t\tconversions. Thanks to Craig McClendon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"394\">\n\t\t\t\tRemove the depdendency on a method from commons-lang3 3.3 which was\n\t\t\t\tcausing issues on some Android phones which come with an older version\n\t\t\t\tof this library bundled. Thanks to Paolo Perliti for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParser is now better able to handle encoding fields which have been\n\t\t\t\tpopulated with a class that extends the expected class\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen declaring a child with\n\t\t\t\t<![CDATA[<code>order=Child.REPLACE_PARENT</code>]]>\n\t\t\t\tthe serialized form still put the element at the\n\t\t\t\tend of the resource instead of in the correct\n\t\t\t\torder\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix STU3 JPA resource providers to allow validate operation\n\t\t\t\tat instance level\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.5\" date=\"2016-04-20\">\n\t\t\t<action type=\"fix\" issue=\"339\">\n\t\t\t\tSecurity Fix: XML parser was vulnerable to XXE (XML External Entity)\n\t\t\t\tprocessing, which could result in local files on disk being disclosed.\n\t\t\t\tSee <![CDATA[<a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\">this page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 5.0.7 -&gt; 5.1.0</li>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.2.4 -&gt; 4.2.5</li>\n\t\t\t\t\t\t<li>SLF4j (All): 1.7.14 -&gt; 1.7.21</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport comments when parsing and encoding both JSON and XML. Comments are retrieved\n\t\t\t\tand added to the newly created methods\n\t\t\t\tIBase#getFormatCommentsPre() and\n\t\t\t\tIBase#getFormatCommentsPost()\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"293\">\n\t\t\t\tAdded options to the CLI upload-examples command which allow it to cache\n\t\t\t\tthe downloaded content file, or use an arbitrary one. Thanks to Adam Carbone\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST search parameters with a prefix/comparator had not been updated to use\n\t\t\t\tthe DSTU2 style prefixes (gt2011-01-10) instead of the DSTU1 style prefixes\n\t\t\t\t(&gt;2011-01-01). The client has been updated so that it uses the new prefixes\n\t\t\t\tif the client has a DSTU2+ context. The server has been updated so that it now\n\t\t\t\tsupports both styles.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, a new enum called\n\t\t\t\t<![CDATA[<a href=\"./apidocs/ca/uhn/fhir/rest/param/ParamPrefixEnum.html\">ParamPrefixEnum</a>]]>\n\t\t\t\thas been introduced. This enum replaces the old\n\t\t\t\t<![CDATA[<a href=\"./apidocs/ca/uhn/fhir/model/dstu/valueset/QuantityCompararatorEnum.html\">QuantityCompararatorEnum</a>]]>\n\t\t\t\twhich has a typo in its name and can not represent several new prefixes added since\n\t\t\t\tDSTU1.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server number and quantity search params now follow the rules for the\n\t\t\t\tuse of precision in search terms outlined in the\n\t\t\t\t<![CDATA[<a href=\"https://www.hl7.org/fhir/search.html\">search page</a>]]> of the\n\t\t\t\tFHIR specification. For example, previously a 1% tolerance was applied for\n\t\t\t\tall searches (10% for approximate search). Now, a tolerance which respects the\n\t\t\t\tprecision of the search term is used (but still 10% for approximate search).\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"291\">\n\t\t\t\tFix a failure starting the REST server if a method returns an untyped List, which\n\t\t\t\tamong other things prevented resource provider added to the server\n\t\t\t\tas CDI beans in a JBoss enviroment. Thanks to GitHub user fw060 (Fei) for\n\t\t\t\treporting and figuring out exactly why this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports :above and :below qualifiers on URI search params\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd optional support (disabled by default for now) to JPA server to support\n\t\t\t\tinline references containing search URLs. These URLs will be resolved when\n\t\t\t\ta resource is being created/updated and replaced with the single matching\n\t\t\t\tresource. This is being used as a part of the May 2016 Connectathon for\n\t\t\t\ta testing scenario.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe server no longer adds a\n\t\t\t\t<![CDATA[<code>WWW-Authenticate</code>]]>\n\t\t\t\theader to the response if any resource provider code throws an\n\t\t\t\t<![CDATA[<code>AuthenticationException</code>]]>. This header is\n\t\t\t\tused for interactive authentication, which isn't generally\n\t\t\t\tappropriate for FHIR. We added code to add this header a long time\n\t\t\t\tago for testing purposes and it never got removed. Please let us\n\t\t\t\tknow if you need the ability to add this header automatically. Thanks\n\t\t\t\tto Lars Kristian Roland for pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the client, the create/update operations on a Binary resource\n\t\t\t\t(which use the raw binary's content type as opposed to the FHIR\n\t\t\t\tcontent type) were not including any request headers (Content-Type,\n\t\t\t\tUser-Agent, etc.) Thanks to Peter Van Houte of Agfa Healthcare for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHandling of Binary resources containing embedded FHIR resources for\n\t\t\t\tcreate/update/etc operations has been corrected per the FHIR rules\n\t\t\t\toutlined at\n\t\t\t\t<![CDATA[<a href=\"http://hl7.org/fhir/binary.html\">Binary Resource</a>]]>\n\t\t\t\tin both the client and server.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tEssentially, if the Binary contains something\n\t\t\t\tthat isn't FHIR (e.g. an image with an image content-type) the\n\t\t\t\tclient will send the raw data with the image content type to the server. The\n\t\t\t\tserver will place the content type and raw data into a Binary resource instance\n\t\t\t\tand pass those to the resource provider. This part was already correct previous\n\t\t\t\tto 1.5.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tOn the other hand, if the Binary contains a FHIR content type, the Binary\n\t\t\t\tis now sent by the client to the server as a Binary resource with a FHIR content-type,\n\t\t\t\tand the embedded FHIR content is contained in the appropriate fields. The server\n\t\t\t\twill pass this &quot;outer&quot; Binary resource to the resource provider code.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe RequestDetails and ActionRequestDetails objects which are passed to\n\t\t\t\tserver interceptor methods and may also be used as server provider method\n\t\t\t\targuments now has a new method\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>Map&lt;String, String&gt; getUserData()</code>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to pass data and objects between interceptor methods to\n\t\t\t\tto providers. This can be useful, for instance, if an authorization\n\t\t\t\tinterceptor wants to pass the logged in user's details to other parts\n\t\t\t\tof the server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"297\">\n\t\t\t\t<![CDATA[When <code>IServerInterceptor#incomingRequestPreHandled()</code> is called \n\t\t\t\tfor a <code>@Validate</code> method, the resource was not populated in the\n\t\t\t\t<code>ActionRequestDetails</code> argument. Thanks to Ravi Kuchi for reporting!\t\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"298\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\tRequest to server at <code>[baseUrl]/metadata</code> with an HTTP method\n\t\t\t\t\tother than GET (e.g. POST, PUT) should result in an HTTP 405. Thanks to \n\t\t\t\t\tMichael Lawley for reporting! \n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"302\">\n\t\t\t\tFix a server exception when trying to automatically add the profile tag\n\t\t\t\tto a resource which already has one or more profiles set. Thanks to\n\t\t\t\tMagnus Vinther for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"296\">\n\t\t\t\tQuantityParam parameters being used in the RESTful server were ignoring\n\t\t\t\tthe\n\t\t\t\t<![CDATA[<code>:missing</code>]]>\n\t\t\t\tqualifier. Thanks to Alexander Takacs for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"299\">\n\t\t\t\tAnnotation client failed with an exception if the response contained\n\t\t\t\textensions on fields in the resonse Bundle (e.g. Bundle.entry.search).\n\t\t\t\tThanks to GitHub user am202 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"274\">\n\t\t\t\tPrimitive elements with no value but an extension were sometimes not\n\t\t\t\tencoded correctly in XML, and sometimes not parsed correctly in JSON.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"280\">\n\t\t\t\tThe Web Testing UI has long had an issue where if you click on a button which\n\t\t\t\tnavigates to a new page (e.g. search, read, etc) and then click the back button\n\t\t\t\tto return to the original page, the button you clicked remains disabled and can't\n\t\t\t\tbe clicked again (on Firefox and Safari). This is now fixed. Unfortunately the fix means that the\n\t\t\t\tbuttom will no longer show a \"loading\" spinner, but there doesn't seem to\n\t\t\t\tbe another way of fixing this. Thanks to Mark Scrimshire for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExtensions found while parsing an object that doesn't support extensions are now\n\t\t\t\treported using the IParserErrorHandler framework in the same way that\n\t\t\t\tother similar errors are handled. This allows the parser to be more lenient\n\t\t\t\twhen needed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"304\">\n\t\t\t\tImprove error message if incorrect type is placed in a list field in the data model. Java\n\t\t\t\tuses generics to prevent this at compile time, but if someone is in an environment without\n\t\t\t\tgenerics this helps improve the error message at runtime. Thanks to Hugo Soares for\n\t\t\t\tsuggesting.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"308\">\n\t\t\t\tPrevent an unneeded warning when parsing a resource containing\n\t\t\t\ta declared extension. Thanks to Matt Blanchette for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWeb Tester UI did not invoke VRead even if a version ID was specified. Thanks\n\t\t\t\tto Poseidon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPer discussion on the FHIR implementer chat, the JPA server no\n\t\t\t\tlonger includes _revinclude matches in the Bundle.total count, or the\n\t\t\t\tpage size limit.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now persists search results to the database in a new table where they\n\t\t\t\tcan be temporaily preserved. This makes the JPA server much more scalable, since it\n\t\t\t\tno longer needs to store large lists of pages in memory between search invocations.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tOld searches are deleted after an hour by default, but this can be changed\n\t\t\t\tvia a setting in the DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA servers' resource version history mechanism\n\t\t\t\thas been adjusted so that the history table\n\t\t\t\tkeeps a record of all versions including the\n\t\t\t\tcurrent version. This has the very helpful\n\t\t\t\tside effect that history no longer needs to be\n\t\t\t\tpaged into memory as a complete set. Previously\n\t\t\t\thistory had a hard limit of only being able to\n\t\t\t\tpage the most recent 20000 entries. Now it has\n\t\t\t\tno limit.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server returned the wrong Bundle.type value (COLLECTION, should be SEARCHSET)\n\t\t\t\tfor $everything operation responses. Thanks to Sonali Somase for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"305\">\n\t\t\t\tREST and JPA server should reject update requests where the resource body does not\n\t\t\t\tcontain an ID, or contains an ID which does not match the URL. Previously these\n\t\t\t\twere accepted (the URL ID was trusted) which is incorrect according to the\n\t\t\t\tFHIR specification. Thanks to GitHub user ametke for reporting!\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, server error messages were also improved for\n\t\t\t\trequests where the URL does not contain an ID but needs to (e.g. for\n\t\t\t\tan update) or contains an ID but shouldn't (e.g. for a create)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen fields of type BoundCodeDt (e.g. Patient.gender)\n\t\t\t\tare serialized and deserialized using Java's native\n\t\t\t\tobject serialization, the enum binder was not\n\t\t\t\tserialized too. This meant that values for the\n\t\t\t\tfield in the deserialized object could not be\n\t\t\t\tmodified. Thanks to Thomas Andersen for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"313\">\n\t\t\t\tREST Server responded to HTTP OPTIONS requests with\n\t\t\t\tany URI as being a request for the server's\n\t\t\t\tConformance statement. This is incorrect, as only\n\t\t\t\ta request for <![CDATA[<code>OPTIONS [base url]</code>]]> should be treated as such. Thanks to Michael\n\t\t\t\tLawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST annotation style client was not able to handle extended operations\n\t\t\t\t($foo) where the response from the server was a raw resource instead\n\t\t\t\tof a Parameters resource. Thanks to Andrew Michael Martin for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server applies _lastUpdated filter inline with other searches wherever possible\n\t\t\t\tinstead of applying this filter as a second query against the results of the\n\t\t\t\tfirst query. This should improve performance when searching against large\n\t\t\t\tdatasets.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParsers have new method\n\t\t\t\t<![CDATA[<code>setDontEncodeElements</code>]]>\n\t\t\t\twhich can be used to force the parser to not encode certain elements\n\t\t\t\tin a resource when serializing. For example this can be used to omit\n\t\t\t\tsensitive data or skip the resource metadata.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server database design has been adjusted\n\t\t\t\tso that different tables use different sequences\n\t\t\t\tto generate their indexes, resulting in more sequential\n\t\t\t\tresource IDs being assigned by the server\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now correctly serves up Binary resources\n\t\t\t\tusing their native content type (instead of as a\n\t\t\t\tFHIR resource) if the request contains an accept\n\t\t\t\theader containing \"application/xml\" as some browsers\n\t\t\t\tdo.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDSTU2 resources now have a\n\t\t\t\t<![CDATA[<code>getMeta()</code>]]> method which returns a\n\t\t\t\tmodifiable view of the resource metadata for convenience. This\n\t\t\t\tmatches the equivalent method in the DSTU3 structures.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"315\">\n\t\t\t\tAdd a new method to FhirContext called\n\t\t\t\t<![CDATA[\n\t\t\t\t<code><a href=\"./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-\">setDefaultTypeForProfile</a></code>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to specify that when recources are received which declare\n\t\t\t\tsupport for specific profiles, a specific custom structures should be used\n\t\t\t\tinstead of the default. For example, if you have created a custom Observation\n\t\t\t\tclass for a specific profile, you could use this method to cause your custom\n\t\t\t\ttype to be used by the parser for resources in a search bundle you receive.\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br/>\n\t\t\t\tSee the documentation page on\n\t\t\t\t<a href=\"./doc_extensions.html\">Profiles and Extensions</a>\n\t\t\t\tfor more information.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"315\">\n\t\t\t\tParsing/Encoding a custom resource type which extends a\n\t\t\t\tbase type sometimes caused the FhirContext to treat all future\n\t\t\t\tparses of the same resource as using the custom type even when\n\t\t\t\tthis was not wanted.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tCustom structures may now be explicitly declared by profile\n\t\t\t\tusing the\n\t\t\t\t<![CDATA[\n\t\t\t\t<code><a href=\"./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-\">setDefaultTypeForProfile</a></code>\n\t\t\t\t]]>\n\t\t\t\tmethod.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis issue was discovered and fixed as a part of the implementation of issue #315.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"321\">\n\t\t\t\tSet up the tinder plugin to work as an ant task\n\t\t\t\tas well as a Maven plugin, and to use external\n\t\t\t\tsources. Thanks to Bill Denton for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now allows searching by token\n\t\t\t\tparameter using a system only and no code,\n\t\t\t\tgiving a search for any tokens which match\n\t\t\t\tthe given token with any code. Previously the\n\t\t\t\texpected behaviour for this search\n\t\t\t\twas not clear in the spec and HAPI had different\n\t\t\t\tbehaviour from the other reference servers.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce a JAX-RS client provider which can be used instead of the\n\t\t\t\tdefault Apache HTTP Client provider to provide low level HTTP\n\t\t\t\tservices to HAPI's REST client. See\n\t\t\t\t<![CDATA[<a href=\"./doc_rest_client_alternate_provider.html\">JAX-RS &amp; Alternate HTTP Client Providers</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis is useful in cases where you have other non-FHIR REST clients\n\t\t\t\tusing a JAX-RS provider and want to take advantage of the\n\t\t\t\trest of the framework.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThanks to Peter Van Houte from Agfa for the amazing work!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"312\">\n\t\t\t\tParser failed with a NPE while encoding resources if the\n\t\t\t\tresource contained a null extension. Thanks to\n\t\t\t\tsteve1medix for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"320\">\n\t\t\t\tIn generated model classes (DSTU1/2) don't\n\t\t\t\tuse BoundCodeDt and BoundCodeableConceptDt for\n\t\t\t\tcoded fields which use example bindings. Thanks\n\t\t\t\tto GitHub user Ricq for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[\n\t\t\t\tOperations methods defined using \n\t\t\t\t<code>@Operation</code> will now infer the maximum number of repetitions\n\t\t\t\tof their parameters by the type of the parameter. Previously if\n\t\t\t\ta default <code>max()</code> value was not specified in the\n\t\t\t\t<code>@OperationParam</code> annotation on a parameter, the maximum\n\t\t\t\twas assumed to be 1. Now, if a max value is not explicitly specified \n\t\t\t\tand the type of the parameter is a basic type (e.g. <code>StringDt</code>) the\n\t\t\t\tmax will be 1. If the parameter is a collection type (e.g. <code>List&lt;StringDt&gt;</code>)\n\t\t\t\tthe max will be *\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"317\">\n\t\t\t\t<![CDATA[\n\t\t\t\tOperation methods defined using\n\t\t\t\t<code>@Operation</code>\n\t\t\t\tmay now use search parameter types, such as \n\t\t\t\t<code>TokenParam</code> and\n\t\t\t\t<code>TokenAndListParam</code> as values. Thanks to \n\t\t\t\tChristian Ohr for reporting!\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd databases indexes to JPA module search index tables\n\t\t\t\tfor the RES_ID column on each. This should help\n\t\t\t\tperformance when searching over large datasets.\n\t\t\t\tThanks to Emmanuel Duviviers for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateTimeType should fail to parse 1974-12-25+10:00 as this is not\n\t\t\t\ta valid time in FHIR. Thanks to Grahame Grieve for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing a Bundle resource, if the Bundle.entry.request.url contains a UUID\n\t\t\t\tbut the resource body has no ID, the Resource.id will be populated with the ID from the\n\t\t\t\tBundle.entry.request.url. This is helpful when round tripping Bundles containing\n\t\t\t\tUUIDs.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing a DSTU3 bundle, references between resources did not have\n\t\t\t\tthe actual resource instance populated into the reference if the\n\t\t\t\tIDs matched as they did in DSTU1/2.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"326\">\n\t\t\t\tContained resource references on DSTU3\n\t\t\t\tresources were not serialized correctly when\n\t\t\t\tusing the Json Parser. Thanks to GitHub user\n\t\t\t\t@fw060 for reporting and supplying a patch\n\t\t\t\twhich corrects the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"325\">\n\t\t\t\tDSTU3 model classes equalsShallow and equalsDeep both did not work\n\t\t\t\tcorrectly if a field was null in one object, but contained an empty\n\t\t\t\tobject in the other (e.g. a StringType with no actual value in it). These\n\t\t\t\ttwo should be considered equal, since they would produce the exact same\n\t\t\t\twire format.<![CDATA[<br/><br/>]]>\n\t\t\t\tThanks to GitHub user @ipropper for reporting and providing\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports searching for <![CDATA[<code>_tag:not=[tag]</code>]]>\n\t\t\t\twhich enables finding resources that to not have a given tag/profile/security tag.\n\t\t\t\tThanks to Lars Kristian Roland for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExtensions containing resource references did not get encoded correctly\n\t\t\t\tsome of the time. Thanks to Poseidon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsers (both XML and JSON) encoded the first few elements of DSTU3 structures in the wrong order:\n\t\t\t\tExtensions were placed before any other content, which is incorrect (several\n\t\t\t\telements come first: meta, text, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server implementations, the Bundle.entry.fullUrl was not getting correctly\n\t\t\t\tpopulated on Hl7OrgDstu2 servers. Thanks to Christian Ohr for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"335\">\n\t\t\t\tEnsure that element IDs within resources (i.e. IDs on elements other than the\n\t\t\t\tresource itself) get serialized and parsed correctly. Previously, these didn't get\n\t\t\t\tserialized in a bunch of circumstances. Thanks to Vadim Peretokin for reporting\n\t\t\t\tand providing test cases!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove CLI error message if the tool can't bind to the requested port. Thanks\n\t\t\t\tto Claude Nanjo for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer param of <![CDATA[<code>_summary=text</code>]]> did not\n\t\t\t\tinclude mandatory elements in return as well as\n\t\t\t\tthe text element, even though the FHIR specification\n\t\t\t\trequired it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove invalid resource type \"Documentation\" from DSTU2\n\t\t\t\tstructures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not respect target types for search parameters. E.g. Appointment:patient has\n\t\t\t\ta path of \"Appointment.participant.actor\" and a target type of \"Patient\". The search path\n\t\t\t\twas being correctly handled, but the target type was being ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer now manually parses URL parameters instead of relying on the container's\n\t\t\t\tparsed parameters. This is useful because many Java servlet containers (e.g. Tomcat, Glassfish)\n\t\t\t\tdefault to ISO-8859-1 encoding for URLs insetad of the UTF-8 encoding specified by\n\t\t\t\tFHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now doesn't highlight if the request\n\t\t\t\thas an Origin header, since this probably denotes an AJAX request.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.4\" date=\"2016-02-04\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 5.0.3 -&gt; 5.0.7</li>\n\t\t\t\t\t\t<li>Springframework (JPA, Web Tester): 4.2.2 -&gt; 4.2.4</li>\n\t\t\t\t\t\t<li>Phloc-Commons (Schematron Validator): 4.3.6 -&gt; 4.4.4</li>\n\t\t\t\t\t\t<li>Apache httpclient (Client): 4.4 -&gt; 4.5.1</li>\n\t\t\t\t\t\t<li>Apache httpcore (Client): 4.4 -&gt; 4.4.4</li>\n\t\t\t\t\t\t<li>SLF4j (All): 1.7.13 -&gt; 1.7.14</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove a dependency on a Java 1.7 class\n\t\t\t\t(ReflectiveOperationException) in several spots in the\n\t\t\t\tcodebase. This dependency was accidentally introduced in\n\t\t\t\t1.3, and animal-sniffer-plugin failed to detect it (sigh).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd two new server interceptors:\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"./apidocs/ca/uhn/fhir/rest/server/interceptor/RequestValidatingInterceptor.html\">RequestValidatingInterceptor</a> \n\t\t\t\tand \n\t\t\t\t<a href=\"./apidocs/ca/uhn/fhir/rest/server/interceptor/ResponseValidatingInterceptor.html\">ResponseValidatingInterceptor</a>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to validate incoming requests or outgoing responses using the standard FHIR validation\n\t\t\t\ttools. See the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"./doc_rest_server_interceptor.html#RequestResponse_Validation\">Server Validation Page</a>\n\t\t\t\t]]>\n\t\t\t\tfor examples of how to use these interceptors. These intereptors have both\n\t\t\t\tbeen enabled on the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"http://fhirtest.uhn.ca\">public test page</a>.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"259\">\n\t\t\t\tMake IBoundCodeableConcept and IValueSetEnumBinder serializable,\n\t\t\t\tfixing an issue when trying to serialize model classes containing\n\t\t\t\tbound codes. Thanks to Nick Peterson for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"251\">\n\t\t\t\tIntroduce a JAX-RS version of the REST server, which can be used\n\t\t\t\tto deploy the same resource provider implementations which work\n\t\t\t\ton the existing REST server into a JAX-RS (e.g. Jersey) environment.\n\t\t\t\tThanks to Peter Van Houte from Agfa for the amazing work!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCLI now supports writing to file:// URL for 'upload-examples' command\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGZipped content is now supported for client-to-server uploads (create, update, transaction, etc.).\n\t\t\t\tThe server will not automatically detect compressed incoming content and decompress it (this can be\n\t\t\t\tdisabled using a RestfulServer configuration setting). A new client interceptor has been added\n\t\t\t\twhich compresses outgoing content from the client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transaction attempted to validate resources twice each,\n\t\t\t\twith one of these times being before anything had been committed to the\n\t\t\t\tdatabase. This meant that if a transaction contained both a Questionnaire\n\t\t\t\tand a QuestionnaireResponse, it would fail because the QuestionnaireResponse\n\t\t\t\tvalidator wouldn't be able to find the questionnaire. This is now corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to the generic/fluent client for searching:\n\t\t\t\t<![CDATA[<code>.count(int)</code><br/>]]>\n\t\t\t\tThis replaces the existing \".limitTo(int)\" method which has\n\t\t\t\tnow been deprocated because it was badly named and undocumented.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tProfile validator has been configured to allow extensions even if they\n\t\t\t\taren't explicitly declared in the profile.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"265\">\n\t\t\t\tAdd a constraint that the Maven build will only run in JDK 8+. HAPI\n\t\t\t\tremains committed to supporting JDK 6+ in the compiled library, but these\n\t\t\t\tdays it can only be built using JDK 8. Thanks to joelsch for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen serializing a value[x] field, if the value type was a profiled type (e.g. markdown is a\n\t\t\t\tprofile of string) HAPI 1.3 would use the base type in the element name, e.g.\n\t\t\t\tvalueString instead of valueMarkdown. After discussion with Grahame, this appears to\n\t\t\t\tbe incorrect behaviour so it has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"240\">\n\t\t\t\tSupport target parameter type in _include / _revinclude values, e.g.\n\t\t\t\t_include=Patient:careProvider:Organization. Thanks to Joe Portner\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUse ResponseHighlighterInterceptor in the hapi-fhir-jpaserver-example\n\t\t\t\tproject to provide nice syntax highlighting. Thanks to Rob Hausam for\n\t\t\t\tnoting that this wasn't there.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce custom @CoverageIgnore annotation to hapi-fhir-base in order to\n\t\t\t\tremove dependency on cobertura during build and in runtime.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer-generated conformance statements incorrectly used /Profile/ instead\n\t\t\t\tof /StructureDefinition/ in URL links to structures.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJsonParser has been changed so that when serializing numbers it will use\n\t\t\t\tplain format (0.001) instead of scientific format (1e-3). The latter is\n\t\t\t\tvalid JSON, and the parser will still correctly parse either format (all\n\t\t\t\tclients should be prepared to) but this change makes serialized\n\t\t\t\tresources appear more consistent between XML and JSON. As a result of this\n\t\t\t\tchange, trailing zeros will now be preserved when serializing as well.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"278\">\n\t\t\t\tAdd DSTU3 example to hapi-fhir-jpaserver-example. Thanks to Karl\n\t\t\t\tDavis for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer#setUseBrowserFriendlyContentTypes has been deprecated and its\n\t\t\t\tfunctionality removed. The intention of this feature was that if it\n\t\t\t\tdetected a request coming in from a browser, it would serve up JSON/XML\n\t\t\t\tusing content types that caused the browsers to pretty print. But\n\t\t\t\teach browser has different rules for when to pretty print, and\n\t\t\t\tafter we wrote that feature both Chrome and FF changed their rules to break it anyhow.\n\t\t\t\tResponseHighlightingInterceptor provides a better implementation of\n\t\t\t\tthis functionality and should be used instead.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tNarrative generator framework has removed the\n\t\t\t\tability to generate resource titles. This\n\t\t\t\tfunctionality was only useful for DSTU1\n\t\t\t\timplementations and wasn't compatible\n\t\t\t\twith coming changes to that API.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"283\">\n\t\t\t\tRemove dependency on Servlet-API 3.0+ by using methods available in 2.5 where possible.\n\t\t\t\tNote that we continue to use Servlet-API 3.0+ features in some parts of the JPA API, so\n\t\t\t\trunning in an old serlvet container should be tested well before use. Thanks to Bill Denton\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"288\">\n\t\t\t\tAdd new methods to RestfulClientFactory allowing you to configure the size of the\n\t\t\t\tclient pool used by Apache HttpClient. Thanks to Matt Blanchette for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for new modifier types on Token search params in Server and\n\t\t\t\tannotation client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"286\">\n\t\t\t\tServer conformance statement should include search parameter chains if the\n\t\t\t\tchains are explicitly defined via @Search(whitelist={....}). Thanks to lcamilo15\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove afterPropertiesSet() call in Java config for JPA\n\t\t\t\tserver's EntityManagerFactory. This doesn't need to be called\n\t\t\t\tmanually, the the manual call led to a warning about\n\t\t\t\tthe EntityManager being created twice.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"289\">\n\t\t\t\tAllow server to correctly figure out it's own address even if the container provides\n\t\t\t\ta Servlet Context Path which does not include the root. Thanks to Petro Mykhaylyshyn\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.3\" date=\"2015-11-14\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Commons-lang3 (Core): 3.3.2 -&gt; 3.4</li>\n\t\t\t\t\t\t<li>Logback (Core): 1.1.2 -&gt; 1.1.3</li>\n\t\t\t\t\t\t<li>SLF4j (Core): 1.7.102 -&gt; 1.7.12</li>\n\t\t\t\t\t\t<li>Springframework (JPA, Web Tester): 4.1.5 -&gt; 4.2.2</li>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 4.2.17 -&gt; 5.\"</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA, Web Tester): 5.2.1 -&gt; 5.2.2</li>\n\t\t\t\t\t\t<li>Derby (JPA, CLI, Public Server): 10.11.1.1 -&gt; 10.12.1.1 </li>\n\t\t\t\t\t\t<li>Jetty (JPA, CLI, Public Server): 9.2.6.v20141205 -&gt; 9.3.4.v20151007 </li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA and Tester Overlay now use Spring Java config files instead\n\t\t\t\tof the older XML config files. All example projects have been updated.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server removes duplicate resource index entries before storing them\n\t\t\t\t(e.g. if a patient has the same name twice, only one index entry is created\n\t\t\t\tfor that name)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly index search parameters of type \"reference\" where the\n\t\t\t\tpath had multiple entries (i.e. \"Resource.path1 | Resource.path2\")\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server _history operations (server, type, instance) not correctly set the\n\t\t\t\tBundle.entry.request.method to POST or PUT for create and updates of the resource.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"225\">\n\t\t\t\tSupport AND/OR on _id search parameter in JPA\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConstructor for DateRanfeParam which dates in two DateParam instances was ignoring\n\t\t\t\tcomparators on the DateParam.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn JSON parsing, finding an object where an array was expected led to an unhelpful\n\t\t\t\terror message. Thanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server gave an unhelpful error message if $meta-add or $meta-delete were called\n\t\t\t\twith no meta elements in the input Parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tNarrative generator did not include OperationOutcome.issue.diagnostics in the\n\t\t\t\tgenerated narrative.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"250\">\n\t\t\t\tClients (generic and annotation) did not populate the Accept header on outgoing\n\t\t\t\trequests. This is now populated to indicate that the client supports both XML and\n\t\t\t\tJSON unless the user has explicitly requested one or the other (in which case the\n\t\t\t\tappropriate type only will be send in the accept header). Thanks to\n\t\t\t\tAvinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tQuestionnaireResponse validator now allows responses to questions of\n\t\t\t\ttype OPENCHOICE to be of type 'string'\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"227\">\n\t\t\t\tJPA server should reject resources with a reference that points to an incorrectly typed\n\t\t\t\tresource (e.g. points to Patient/123 but resource 123 is actually an Observation) or points\n\t\t\t\tto a resource that is not valid in the location it is found in (e.g. points to Patient/123 but\n\t\t\t\tthe field supposed to reference an Organization). Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, if a client request is received and it has an Accept header indicating\n\t\t\t\tthat it supports both XML and JSON with equal weight, the server's default is used instead of the first\n\t\t\t\tentry in the list.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports searching with sort by token, quantity,\n\t\t\t\tnumber, Uri, and _lastUpdated (previously only string, date, and _id\n\t\t\t\twere supported)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA where a search with a _lastUpdated filter which matches no results\n\t\t\t\twould crash if the search also had a _sort\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix several cases where invalid requests would cause an HTTP 500 instead of\n\t\t\t\ta more appropriate 400/404 in the JPA server (vread on invalid version,\n\t\t\t\tdelete with no ID, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix narrative generation for DSTU2 Medication resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tProfile validator now works for valuesets which use\n\t\t\t\tv2 tables\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server Patient/[id]/$everything operation now supports\n\t\t\t\t_lastUpdated filtering and _sort'ing of results.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"233\">\n\t\t\t\tFix parser issue where profiled choice element datatypes (e.g. value[x] where one allowable\n\t\t\t\ttype is Duration, which is a profile of Quantity) get incorrectly encoded using the\n\t\t\t\tprofiled datatype name instead of the base datatype name as required by the FHIR\n\t\t\t\tspec. Thanks to Nehashri Puttu Lokesh for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSome generated Enum types in DSTU2 HAPI structures\n\t\t\t\tdid not have latest valueset definitions applied. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server can now successfully search for tokens pointing at code values\n\t\t\t\t(values with no explicit system but an implied one, such as Patient.gender)\n\t\t\t\teven if the system is supplied in the query.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"235\">\n\t\t\t\tCorrect issues with Android library. Thanks to\n\t\t\t\tThomas Andersen for the submission!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server incorrectly rejected match URLs\n\t\t\t\tif they did not contain a question mark. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"234\">\n\t\t\t\tRemove invalid entries in OSGi Manifest. Thanks\n\t\t\t\tto Alexander Kley for the fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports $everything on Patient and Encounter types (patient and encounter instance was\n\t\t\t\talready supported)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric client operation invocations now\n\t\t\t\thave an additional inline method for generating the input\n\t\t\t\tParameters using chained method calls instead\n\t\t\t\tof by passing a Parameters resource in\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsing an XML resource where the XHTML\n\t\t\t\tnamespace was declared before the beginning\n\t\t\t\tof the narrative section caused an invalid\n\t\t\t\tre-encoding when encoding to JSON.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional deletes in JPA did not correctly\n\t\t\t\tprocess if the condition had a chain or a\n\t\t\t\tqualifier, e.g. \"Patient?organization.name\" or\n\t\t\t\t\"Patient.identifier:missing\"\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric/fluent client search can now be\n\t\t\t\tperformed using a complete URL supplied\n\t\t\t\tby user code. Thanks to Simone Heckmann\n\t\t\t\tpointing out that this was needed!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRefactor JPA $everything operations so that\n\t\t\t\tthey perform better\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer operation methods can now declare the\n\t\t\t\tID optional, via\n\t\t\t\t@IdParam(optional=true)\n\t\t\t\tmeaning that the same operation can also be invoked\n\t\t\t\tat the type level.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tMake JPA search queries with _lastUpdated parameter a bit more efficient\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"239\">\n\t\t\t\tClean up Android project to make it more lightweight and remove a\n\t\t\t\tnumber of unneeded dependencies. Thanks to Thomas Andersen\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash when encoding a Binary resource in JSON encoding\n\t\t\t\tif the resource has no content-type\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now supports read/history/search in transaction entries\n\t\t\t\tby calling the actual implementing method in the server (previously\n\t\t\t\tthe call was simulated, which meant that many features did not work)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResourceReferenceDt#loadResource(IRestfulClient) did not\n\t\t\t\tuse the client's read functionality, so it did not\n\t\t\t\thandle JSON responses or use interceptors. Thanks to\n\t\t\t\tJT for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server maximumn length for a URI search parameter has been reduced from\n\t\t\t\t256 to 255 in order to accomodate MySQL's indexing requirements\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"242\">\n\t\t\t\tServer failed to respond correctly to compartment search operations\n\t\t\t\tif the same provider also contained a read operation. Thanks to GitHub user\n\t\t\t\t@am202 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"245\">\n\t\t\t\tFix issue in testpage-overlay's new Java configuration where only the first\n\t\t\t\tconfigured server actually gets used.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce\n\t\t\t\t<![CDATA[<a href=\"./apidocs-jpaserver/ca/uhn/fhir/jpa/dao/IJpaServerInterceptor.html\">IJpaServerInterceptor</a>]]>\n\t\t\t\tinterceptors for JPA server which can be used for more fine grained operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"241\">\n\t\t\t\tParser (XML and JSON) shouldn't encode an ID tag in resources\n\t\t\t\twhich are part of a bundle when the resource has a UUID/OID\n\t\t\t\tID.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd ability for a server REST resource provider @Search method\n\t\t\t\tto declare that it should allow even parameters it doesn't\n\t\t\t\tunderstand.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"247\">\n\t\t\t\tCorrectly set the Bundle.type value on all pages of a search result in\n\t\t\t\tthe server, and correcltly set the same value in JPA server $everything\n\t\t\t\tresults.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA $everything operations now support new parameters _content\n\t\t\t\tand _text, which work the same way as the same parameters on a\n\t\t\t\tsearch. This is experimental, since it is not a part of the core\n\t\t\t\tFHIR specification.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"250\">\n\t\t\t\tProcess \"Accept: text/xml\" and \"Accept: text/json\" headers was\n\t\t\t\twanting the equivalent FHIR encoding styles. These are not\n\t\t\t\tcorrect, but the intention is clear so we will honour them\n\t\t\t\tjust to be helpful.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tGenerated Enum types for some ValueSets did not include all\n\t\t\t\tcodes (specifically, ValueSets which defined concepts containing\n\t\t\t\tchild concepts did not result in Enum values for the child concepts)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"253\">\n\t\t\t\tIn the JPA server, order of transaction processing should be\n\t\t\t\tDELETE, POST, PUT, GET, and the order should not matter\n\t\t\t\twithin entries with the same verb. Thanks to Bill de Beaubien\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"254\">\n\t\t\t\tAdd the ability to wire JPA conformance providers\n\t\t\t\tusing Spring (basically, add default constructors\n\t\t\t\tand setters to the conformance providers). Thanks\n\t\t\t\tto C. Mike Bylund for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.2\" date=\"2015-09-18\">\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now validates QuestionnaireAnswers for conformance to their respective Questionnaire\n\t\t\t\tif one is declared.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSyntaxHighlightingInterceptor now also highlights OperationOutcome responses for errors/exceptions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"126\">\n\t\t\t\tModel classes do not use BoundCodeableConcept for example bindings that do not\n\t\t\t\tactually point to any codes (e.g. Observation.interpretation). Thanks\n\t\t\t\tto GitHub user @steve1medix for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now exports operations as separate resources instead of as contained resources\n\t\t\t\twithin Conformance\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new operation $get-resource-counts which will replace the resource\n\t\t\t\tcount extensions exported in the Conformance statement by the JPA\n\t\t\t\tserver.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"198\">\n\t\t\t\tJPA server sorting often returned unexpected orders when multiple\n\t\t\t\tindexes of the same type were found on the same resource (e.g. multiple string indexed fields). Thanks to\n\t\t\t\tTravis Cummings for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd another method to IServerInterceptor which converts an exception generated on the server\n\t\t\t\tinto a BaseServerResponseException. This is useful so that servers using ResponseHighlighterInterceptor\n\t\t\t\twill highlight exceptions even if they aren't created with an OperationOutcome.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"158\">\n\t\t\t\tXmlParser and JsonParser in DSTU2 mode should not encode empty\n\t\t\t\ttags in resource. Thanks to Bill De Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tOperationDefinitions generated by server did not properly document\n\t\t\t\ttheir return parameters or the type of their input parameters.\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tOperations in server generated conformance statement should only\n\t\t\t\tappear once per name, since the name needs to be unique.\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tResources and datatypes are now serializable. This is an\n\t\t\t\texperimental feature which hasn't yet been extensively tested. Please test and give us your feedback!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSwitch REST server to using HttpServletRequest#getContextPath() to get\n\t\t\t\tthe servlet's context path. This means that the server should behave more\n\t\t\t\tpredictably, and should work in servlet 2.4 environments. Thanks to\n\t\t\t\tKen Zeisset for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"200\">\n\t\t\t\tVagrant environment now has an apt recipt to ensure that\n\t\t\t\tpackage lists are up to date. Thanks to GitHub user\n\t\t\t\tBrian S. Corbin (@corbinbs) for thr contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server and generic client now both support the _tag search parameter\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for BATCH mode to JPA server transaction operation\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"192\">\n\t\t\t\tServer was not correctly unescaping URL parameter values with\n\t\t\t\ta trailing comma or an escaped backslash. Thanks to GitHub user\n\t\t\t\t@SherryH for all of her help in diagnosing this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid crash when parsing if an invalid child element is found in\n\t\t\t\ta resource reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCreate new android specialty libraries for DSTU1 and DSTU2\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThrowing a server exception (e.g. AuthenticationException) in a server interceptor's\n\t\t\t\tincomingRequestPreProcessed method resulted in the server returning an HTTP 500 instead\n\t\t\t\tof the appropriate error code for the exception being thrown. Thanks to Nagesh Bashyam\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"207\">\n\t\t\t\tFix issue in JSON parser where invalid contained resources (missing\n\t\t\t\ta resourceType element) fail to parse with a confusing NullPointerException.\n\t\t\t\tThanks to GitHub user @hugosoares for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now implements the $validate-code operation\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"125\">\n\t\t\t\tHAPI-FHIR now has support for _summary and _elements parameters, in server, client,\n\t\t\t\tand JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"209\">\n\t\t\t\t_revinclude results from JPA server should have a Bundle.entry.search.mode of\n\t\t\t\t\"include\" and not \"match\". Thanks to Josh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResource references using resource instance objects instead of resource IDs\n\t\t\t\twill correctly qualify the IDs with the resource type if they aren't already qualified\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"211\">\n\t\t\t\tTestpage Overlay project now properly allows a custom client\n\t\t\t\tfactory to be used (e.g. for custom authentication, etc.) Thanks\n\t\t\t\tto Chin Huang (@pukkaone) for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"212\">\n\t\t\t\tJPA server should reject IDs containing invalid characters (e.g. \"abc:123\")\n\t\t\t\tbut should allow client assigned IDs that contain text but do not start with\n\t\t\t\ttext. Thanks to Josh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t:text modifier on server and JPA server did not work correctly. Thanks to\n\t\t\t\tJosh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in client where parameter values containing a comma were\n\t\t\t\tsometimes double escaped.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t_include parameters now support the new <![CDATA[<code>_include:recurse=FOO</code>]]>\n\t\t\t\tsyntax that has been introduced in DSTU2 in the Client, Server, and JPA Server modules.\n\t\t\t\tNon-recursive behaviour is now the default (previously it was recursive) and :recurse\n\t\t\t\tneeds to be explicitly stated in order to support recursion.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tNew operations added to JPA server to force re-indexing of all\n\t\t\t\tresources (really only useful after indexes change or bugs are\n\t\t\t\tfixed)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly index search parameters\n\t\t\t\tof type \"URI\". Thanks to David Hay for reporting! Note that if you are using the JPA server, this change\n\t\t\t\tmeans that\n\t\t\t\tthere are two new tables added to the database schema. Updating existing resources in the database may fail\n\t\t\t\tunless you\n\t\t\t\tset default values for the resource\n\t\t\t\ttable by issuing a SQL command similar to the following (false may be 0 or something else, depending on the\n\t\t\t\tdatabase platform in use)\n\t\t\t\t<![CDATA[<br/><code>update hfj_resource set sp_coords_present = false;<br/>\n\t\t\t\tupdate hfj_resource set sp_uri_present = false;</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFIx issue in JPA server where profile declarations, tags, and\n\t\t\t\tsecurity labels were not always properly removed by an update that\n\t\t\t\twas trying to remove them. Also don't store duplicates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tInstance $meta operations on JPA server did not previously return the\n\t\t\t\tresource version and lastUpdated time\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer responses populate Bundle.entry.fullUrl if possible. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXML parser failed to initialize in environments where a very old Woodstox\n\t\t\t\tlibrary is in use (earlier than 4.0). Thanks to Bill de Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"216\">\n\t\t\t\tInvalid/unexpected attributes found when parsing composite elements\n\t\t\t\tshould be logged or reported to the parser error handler\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server can now store Conformance resources, per a request\n\t\t\t\tfrom David Hay\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now skips handling responses if it\n\t\t\t\tfinds a URL parameter of <![CDATA[<code>_raw=true</code>]]> (in other\n\t\t\t\twords, if this parameter is found, the response won't be returned as\n\t\t\t\tHTML even if the request is detected as coming from a browser.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer now supports dynamically adding and removing resource providers\n\t\t\t\tat runtime. Thanks to Bill Denton for adding this.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now correctly suppresses contents of deleted resources\n\t\t\t\tin history\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"222\">\n\t\t\t\tJPA server returned deleted resources in search results when using the _tag, _id, _profile, or _security\n\t\t\t\tsearch parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"223\">\n\t\t\t\tFix issue with build on Windows. Thanks to Bryce van Dyk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports $validate operation completely, including delete mode\n\t\t\t\tand profile validation using the RI InstanceValidator\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.1\" date=\"2015-07-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for reference implementation structures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsers did not encode the resource meta element if the resource\n\t\t\t\thad tags but no other meta elements. Thanks to Bill de Beaubien and\n\t\t\t\tClaude Nanjo for finding this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"164\">\n\t\t\t\tCorrect performance issue with :missing=true search requests where the parameter is a resource link. Thanks\n\t\t\t\tto wanghaisheng for all his help in testing this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"149\">\n\t\t\t\tThe self link in the Bundle returned by searches on the server does not respect the\n\t\t\t\tserver's address strategy (which resulted in an internal IP being shown on fhirtest.uhn.ca)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce ResponseHighlighterInterceptor, which provides syntax highlighting on RESTful server responses\n\t\t\t\tif the server detects that the request is coming from a browser. This interceptor has been added\n\t\t\t\tto fhirtest.uhn.ca responses.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerforming a create operation in a client used an incorrect URL if the\n\t\t\t\tresource had an ID set. ID should be ignored for creates. Thanks to\n\t\t\t\tPeter Girard for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"170\">\n\t\t\t\tAdd better addXXX() methods to structures, which take the datatype being added as a parameter. Thanks to\n\t\t\t\tClaude Nanjo for the\n\t\t\t\tsuggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"152\">\n\t\t\t\tAdd a new parser validation mechanism (see the\n\t\t\t\t<![CDATA[<a href=\"./doc_validation.html\">validation page</a>]]> for info) which can be\n\t\t\t\tused to validate resources as they are being parsed, and optionally fail if invalid/unexpected\n\t\t\t\telements are found in resource bodies during parsing.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIParser#parseResource(Class, String) method, which is used to parse a resource into the given\n\t\t\t\tstructure will now throw a DataFormatException if the structure is for the wrong type of\n\t\t\t\tresource for the one actually found in the input String (or Reader). For example, if a Patient\n\t\t\t\tresource is being parsed into Organization.class this will now cause an error. Previously,\n\t\t\t\tthe XML parser would ignore the type and the JSON parser would fail. This also caused\n\t\t\t\toperations to not parse correctly if they returned a resource type other than\n\t\t\t\tparameters with JSON encoding (e.g. the $everything operation on UHN's test server).\n\t\t\t\tThanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWeb tester UI now supports _revinclude\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"178\">\n\t\t\t\tSupport link elements in Bundle.entry when parsing in DSTU2 mode\n\t\t\t\tusing the old (non-resource) Bundle class. Thanks to GitHub user\n\t\t\t\t@joedai for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLoggingInterceptor for server now supports logging DSTU2 extended operations by name\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWoodstox XML parser has a default setting to limit the maximum\n\t\t\t\tlength of an attribute to 512kb. This caused issues handling\n\t\t\t\tlarge attachments, so this setting has been increased to 100Mb.\n\t\t\t\tThanks to Nikos Kyriakoulakos for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"175\">\n\t\t\t\tSome HTML entities were not correctly converted during parsing. Thanks to\n\t\t\t\tNick Kitto for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the JPA Server:\n\t\t\t\tTransactions creating resources with temporary/placeholder resource IDs\n\t\t\t\tand other resources with references to those placeholder IDs previously\n\t\t\t\tdid not work if the reference did not contain the resource type\n\t\t\t\t(e.g. Patient/urn:oid:0.1.2.3 instead of urn:oid:0.1.2.3). The\n\t\t\t\tlatter is actually the correct way of specifying a reference to a\n\t\t\t\tplaceholder, but the former was the only way that worked. Both forms\n\t\t\t\tnow work, in order to be lenient. Thanks to Bill De Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing Bundles, if Bundle.entry.base is set to \"cid:\" (for DSTU1)\n\t\t\t\tor \"urn:uuid:\" / \"urn:oid:\" (for DSTU2) this is now correctly passed as\n\t\t\t\tthe base in resource.getId(). Conversely, when\n\t\t\t\tencoding bundles, if a resource ID has a base defined,\n\t\t\t\tand Bundle.entry.base is empty, it will now be\n\t\t\t\tautomatically set by the parser.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"179\">\n\t\t\t\tAdd fluent client method for validate operation, and support the\n\t\t\t\tnew DSTU2 style extended operation for $validate if the client is\n\t\t\t\tin DSTU2 mode. Thanks to Eric from the FHIR Skype Implementers chat for\n\t\t\t\treporting.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now supports complete Accept header content negotiation, including\n\t\t\t\tq values specifying order of preference. Previously the q value was ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer in DSTU2 mode now indicates that whether it has support for Transaction operation or not. Thanks to\n\t\t\t\tKevin Paschke for pointing out that this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"166\">\n\t\t\t\tQuestionnaire.title now gets correctly indexed in JPA server (it has no path, so it is a special case)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports ifNoneMatch in GET within a transaction request.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDateRangeParam now supports null values in the constructor for lower or upper bounds (but\n\t\t\t\tstill not both)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric/fluent client and JPA server now both support _lastUpdated search parameter\n\t\t\t\twhich was added in DSTU2\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"188\">\n\t\t\t\tJPA server now supports sorting on reference parameters. Thanks to\n\t\t\t\tVishal Kachroo for reporting that this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent Last-Updated header in responses coming back to the client from\n\t\t\t\toverwriting the 'lastUpdated' value in the meta element in DSTU2\n\t\t\t\tresources. This is important because 'lastUpdated' can have more\n\t\t\t\tprecision than the equivalent header, but the client previously\n\t\t\t\tgave the header priority.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server supports _count parameter in transaction containing search URL (nested search)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDSTU2 servers now indicate support for conditional create/update/delete in their\n\t\t\t\tconformance statement.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSupport for the Prefer header has been added to the server, client, and\n\t\t\t\tJPA modules.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"196\">\n\t\t\t\tJPA server failed to search for deep chained parameters across multiple references,\n\t\t\t\te.g. \"Location.partof.partof.organization\". Thanks to Ismael Sarmento Jr for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent crash when encoding resources with contained resources\n\t\t\t\tif the contained resources contained a circular reference to each other\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd $meta, $meta-add, and $meta-delete operations to generic client\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.0\" date=\"2015-04-08\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Phloc-commons (for schematron validation) 4.3.5 -> 4.3.6</li>\n\t\t\t\t\t\t<li>Apache HttpClient 4.3.6 -> 4.4</li>\n\t\t\t\t\t\t<li>Woodstox 4.4.0 -> 4.4.1</li>\n\t\t\t\t\t\t<li>SLF4j 1.7.9 -> 1.7.10</li>\n\t\t\t\t\t\t<li>Spring (used in hapi-fhir-jpaserver-base module) 4.1.3.RELEASE -> 4.1.5.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for \"profile\" and \"tag\" elements in the resource Meta block\n\t\t\t\twhen parsing DSTU2 structures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"113\">\n\t\t\t\tWhen a user manually creates the list of contained resources in a resource,\n\t\t\t\tthe encoder fails to encode any resources that don't have a '#' at the\n\t\t\t\tstart of their ID. This is unintuitive, so we now assume that '123' means '#123'.\n\t\t\t\tThanks to myungchoi for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd methods for setting the default encoding (XML/JSON) and\n\t\t\t\toretty print behaviour in the Fluent Client. Thanks to Stackoverflow\n\t\t\t\tuser ewall for the idea.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"129\">\n\t\t\t\tJPA Server did not mark a resource as \"no longer deleted\" if it\n\t\t\t\twas updated after being deleted. Thanks to Elliott Lavy and Lloyd\n\t\t\t\tMcKenzie for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"128\">\n\t\t\t\tFix regression in 0.9 - Server responds with an HTTP 500 and a NullPointerException instead of an HTTP 400\n\t\t\t\tand a useful error message if the client requests an unknown resource type\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for\n\t\t\t\t<![CDATA[<code>_revinclude</code>]]>\n\t\t\t\tparameter in client, server, and JPA.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tInclude constants on resources (such as\n\t\t\t\t<![CDATA[<code>Observation.INCLUDE_VALUE_STRING</code>]]>)\n\t\t\t\thave been switched in the DSTU2 structures to use\n\t\t\t\tthe new syntax required in DSTU2: [resource name]:[search param NAME]\n\t\t\t\tinsead of the DSTU1 style [resource name].[search param PATH]\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"124\">\n\t\t\t\tWhen encoding resources, the parser will now convert any resource\n\t\t\t\treferences to versionless references automatically (i.e. it will\n\t\t\t\tomit the version part automatically if one is present in the reference)\n\t\t\t\tsince references between resources must be versionless. Additionally,\n\t\t\t\treferences in server responses will omit the server base URL part of the\n\t\t\t\treference if the base matches the base for the server giving\n\t\t\t\tthe response.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"130\">\n\t\t\t\tNarrative generator incorrectly sets the Resource.text.status to 'generated' even if the\n\t\t\t\tgiven resource type does not have a template (and therefore no narrative is actually generated).\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSearching in JPA server with no search parameter returns deleted resources when it should exclude them.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"135\">\n\t\t\t\tRemove Eclipse and IntelliJ artifacts (.project, *.iml, etc) from version control. Thanks\n\t\t\t\tto Doug Martin for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tREST server methods may now have a parameter of\n\t\t\t\ttype NarrativeModeEnum which will be populated with\n\t\t\t\tthe value of the _narrative URL parameter\n\t\t\t\tif one was supplied. Annotation client methods\n\t\t\t\tmay also include a parameter of this type, and it\n\t\t\t\twill be used to populate this parameter on the request\n\t\t\t\tURL if it is not null. Thanks to Neal Acharya for the\n\t\t\t\tidea!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAndroid JAR now includes servlet-API classes, as the project will not\n\t\t\t\twork without them. Thanks\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"116\">\n\t\t\t\tRequested _include values are preserved across paging links when the\n\t\t\t\tserver returns multiple pages. Thanks to Bill de Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"138\" dev=\"wdebeau1\">\n\t\t\t\tAdd new server address strategy \"ApacheProxyAddressStrategy\" which uses\n\t\t\t\theaders \"x-forwarded-host\" and \"x-forwarded-proto\" to determine the\n\t\t\t\tserver's address. This is useful if you are deploying a HAPI FHIR\n\t\t\t\tserver behind an Apache proxy (e.g. for load balancing or other reasons).\n\t\t\t\tThanks to Bill de Beaubien for contributing!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"143\">\n\t\t\t\tResource references between separate resources found in a single\n\t\t\t\tbundle did not get populated with the actual resource when parsing a\n\t\t\t\tDSTU2 style bundle. Thanks to Nick Peterson for reporting and figuring\n\t\t\t\tout why none of our unit tests were actually catching the problem!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"146\">\n\t\t\t\tJSON encoder did not encode contained resources when encoding\n\t\t\t\ta DSTU2 style bundle. Thanks to Mohammad Jafari and baopingle\n\t\t\t\tfor all of their help in tracking this issue down and developing\n\t\t\t\tuseful unit tests to demonstrate it.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tClient now supports invoking transcation using a DSTU2-style\n\t\t\t\tBundle resource as the input.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"147\">\n\t\t\t\tJPA Server $everything operation could sometimes include a duplicate copy of\n\t\t\t\tthe main focus resource if it was referred to in a deep chain. Thanks\n\t\t\t\tto David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"148\">\n\t\t\t\tJPA Server $everything operation now allows a _count parameter\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"139\">\n\t\t\t\tJPA server failed to index resources containing ContactPointDt elements with\n\t\t\t\tpopulated values (e.g. Patient.telecom). Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new configuration method on the parsers,\n\t\t\t\t<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which\n\t\t\t\tconfigures the parser to preserve versions in resource reference links when\n\t\t\t\tencoding. By default, these are removed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"155\" dev=\"wdebeau1\">\n\t\t\t\tTerser's IModelVisitor now supplies to the path to the element. This is\n\t\t\t\tan API change, but I don't think there are many users of the IModelVisitor yet.\n\t\t\t\tPlease let us know if this is a big hardship and we can find an alternate way\n\t\t\t\tof making this change.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent server from returning a Content-Location header for search\n\t\t\t\tresponse when using the DSTU2 bundle format\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server (uhnfhirtest.uhn.ca) sometimes included an empty\n\t\t\t\t\"text\" element in Bundles being returned.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"162\">\n\t\t\t\tAdd a framework for the Web Tester UI to allow its internal FHIR client to\n\t\t\t\tbe configured (e.g. to add an authorization interceptor so that it adds\n\t\t\t\tcredentials to client requests it makes). Thanks to Harsha Kumara for\n\t\t\t\tthe suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"163\">\n\t\t\t\tFix regression in early 1.0 builds where resource type sometimes does not get\n\t\t\t\tpopulated in a resource ID when the resource is parsed. Thanks to\n\t\t\t\tNick Peterson for reporting, and for providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow fluent/generic client users to execute a transaction using a raw string (containing a bundle resource)\n\t\t\t\tas input instead of a Bundle resource class instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDisable date validation in the web tester UI, so that it is possible to\n\t\t\t\tenter partial dates, or dates without times, or even test out invalid date\n\t\t\t\toptions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"36\">\n\t\t\t\tMake BaseElement#getUndeclaredExtensions() and BaseElement#getUndeclaredExtensions() return\n\t\t\t\ta mutable list so that it is possible to delete extensions from a resource instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"168\">\n\t\t\t\tServer conformance statement check in clients (this is the check\n\t\t\t\twhere the first time a given FhirContext is used to access a given server\n\t\t\t\tbase URL, it will first check the server's Conformance statement to ensure\n\t\t\t\tthat it supports the correct version of FHIR) now uses any\n\t\t\t\tregistered client interceptors. In addition, IGenericClient now has a method\n\t\t\t\t\"forceConformanceCheck()\" which manually triggers this check. Thanks to\n\t\t\t\tDoug Martin for reporting and suggesting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"167\">\n\t\t\t\tRename the Spring Bean definition for the JPA server EntityManager from\n\t\t\t\t\"myEntityManagerFactory\" to just \"entityManagerFactory\" as this is the\n\t\t\t\tdefault bean name expected in other parts of the Spring framework.\n\t\t\t\tThanks to Mohammad Jafari for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tImprove error message when a user tries to perform a create/update with an invalid\n\t\t\t\tor missing Content-Type header. Thanks to wanghaisheng for reporting! (This was\n\t\t\t\tactually a three part bug, so the following two fixes also reference this\n\t\t\t\tbug number)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tAdd support for :missing qualifier in generic/fluent client.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tAdd support for :missing qualifier in JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new configuration method on the parsers,\n\t\t\t\t<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which\n\t\t\t\tconfigures the parser to preserve versions in resource reference links when\n\t\t\t\tencoding. By default, these are removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" due-to=\"joel-costigliola\" issue=\"171\">\n\t\t\t\tAdd an exception for RESTful clients/servers to represent the\n\t\t\t\tHTTP 403 Forbidden status code. Thanks to Joel Costigliola for\n\t\t\t\tthe patch!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTransaction server operations incorrectly used the \"Accept\" header instead of the \"Content-Type\" header to\n\t\t\t\tdetermine the\n\t\t\t\tPOST request encoding. Thanks to Rene Spronk for providing a test case!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.9\" date=\"2015-03-14\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for DSTU2 features introduced: New resource definitions, Bundle resource,\n\t\t\t\tencoding changes (ID in resource bodt, meta tag)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"65\">\n\t\t\t\tFix an issue encoding extensions on primitive types in JSON. Previously the \"_value\" object\n\t\t\t\twould be an array even if the field it was extending was not repeatable. This is not correct\n\t\t\t\taccording to the specification, nor can HAPI's parser parse this correctly. The encoder\n\t\t\t\thas been corrected, and the parser has been adjusted to be able to handle resources with\n\t\t\t\textensions encoded in this way. Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLibrary now checks if custom resource types can be instantiated on startup\n\t\t\t\t(e.g. because they don't have a no-argument constructor) in order to\n\t\t\t\tavoid failing later\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump a few dependency JARs to the latest versions in Maven POM:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>SLF4j (in base module) - Bumped to 1.7.9</li>\n\t\t\t\t\t\t<li>Apache HTTPClient (in base module) - Bumped to 4.3.6</li>\n\t\t\t\t\t\t<li>Hibernate (in JPA module) - Bumped to 4.3.7</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"67\">\n\t\t\t\tIdDt failed to recognize local identifiers containing fragments that look like\n\t\t\t\treal identifiers as being local identifiers even though they started with '#'.\n\t\t\t\tFor example, a local resource reference of \"#aa/_history/aa\" would be incorrectly\n\t\t\t\tparsed as a non-local reference.\n\t\t\t\tThanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[<code>Last-Modified</code>]]>\n\t\t\t\theader in server was incorrectly using FHIR date format instead\n\t\t\t\tof RFC-1123 format.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer create and update methods failed with an IllegalArgumentException if\n\t\t\t\tthe method type was a custom resource definition type (instead of a built-in\n\t\t\t\tHAPI type). Thanks to Neal Acharya for the analysis.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"79\">\n\t\t\t\tJPA server module now supports\n\t\t\t\t<![CDATA[<code>_include</code>]]>\n\t\t\t\tvalue of\n\t\t\t\t<![CDATA[<code>*</code>]]>. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIdDt method\n\t\t\t\t<![CDATA[withServerBase]]>\n\t\t\t\treturned String (unlike all of the other \"withFoo\" methods on that class),\n\t\t\t\tand did not work correctly if the IdDt already had a server base. This\n\t\t\t\thas been corrected. Note that the return type for this method has been\n\t\t\t\tchanged, so code may need to be updated.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"84\" due-to=\"mochaholic\">\n\t\t\t\tIn previous versions of HAPI, the XML parser encoded multiple contained\n\t\t\t\tresources in a single\n\t\t\t\t<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>\n\t\t\t\ttag, even though the FHIR specification rerquires a separate\n\t\t\t\t<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>\n\t\t\t\ttag for each resource. This has been corrected. Note that the parser will\n\t\t\t\tcorrectly parse either form (this has always been the case) so this\n\t\t\t\tchange should not cause any breakage in HAPI based trading partners, but\n\t\t\t\tmay cause issues if other applications have been coded to depend on the\n\t\t\t\tincorrect behaviour. Thanks to Mochaholic for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"91\" due-to=\"andyhuang91\">\n\t\t\t\tCustom/user defined resource definitions which contained more than one\n\t\t\t\tchild with no order defined failed to initialize properly. Thanks to\n\t\t\t\tAndy Huang for reporting and figuring out where the\n\t\t\t\tproblem was!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRESTful Client now queries the server (only once per server base URL) to ensure that\n\t\t\t\tthe given server corresponds to the correct version of the FHIR specification, as\n\t\t\t\tdefined by the FhirContext. This behaviour can be disabled by setting the\n\t\t\t\tappropriate configuration on the\n\t\t\t\tRestfulClientConfig. Thanks to Grahame Grieve for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA module now supports deleting resource via transaction\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"97\" due-to=\"twilson650\">\n\t\t\t\tDateClientParam#second() incorrectly used DAY precision instead\n\t\t\t\tof SECOND precision. Thanks to Tom Wilson for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"100\" due-to=\"sweetnavelorange\">\n\t\t\t\tFix issue where HAPI failed to initialize correctly if Woodstox library was not on the classpath, even\n\t\t\t\tif StAX API was configured to use a different provider. Thanks to\n\t\t\t\tJames Butler for reporting and figuring out where the issue was!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"101\">\n\t\t\t\tCalling BaseDateTimeDt#setValue(Date, TemporalPrecisionEnum) did not always actually respect\n\t\t\t\tthe given precision when the value was encoded. Thanks to jacksonjesse for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"103\">\n\t\t\t\tEncoders (both XML and JSON) will no longer encode contained resources if they are\n\t\t\t\tnot referenced anywhere in the resource via a local reference. This is just a convenience\n\t\t\t\tfor users who have parsed a resource with contained resources and want to remove some\n\t\t\t\tbefore re-encoding. Thanks to Alexander Kley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"110\" due-to=\"mochaholic\">\n\t\t\t\tAdd support for DSTU2 style security labels in the parser and encoder. Thanks to\n\t\t\t\tMohammad Jafari for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer requests for Binary resources where the client has explicitly requested XML or JSON responses\n\t\t\t\t(either with a <![CDATA[<code>_format</code>]]> URL parameter, or an <![CDATA[<code>Accept</code>]]> request\n\t\t\t\theader)\n\t\t\t\twill be responded to using the Binary FHIR resource type instead of as Binary blobs. This is\n\t\t\t\tin accordance with the recommended behaviour in the FHIR specification.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new properties to RestfulServer: \"DefaultResponseEncoding\", which allows\n\t\t\t\tusers to configure a default encoding (XML/JSON) to use if none is specified in the\n\t\t\t\tclient request. Currently defaults to XML. Also \"DefaultPrettyPrint\", which specifies\n\t\t\t\twhether to pretty print responses by default. Both properties can be overridden\n\t\t\t\ton individual requets using the appropriate Accept header or request URL parameters.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for quantity search params in FHIR tester UI\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for FHIR \"extended operations\" as defined in the FHIR DSTU2\n\t\t\t\tspecification, for the Generic Client, Annotation Client, and\n\t\t\t\tServer.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tObservation.applies[x] and other similar search fields with multiple allowable\n\t\t\t\tvalue types were not being correctly indexed in the JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"122\">\n\t\t\t\tDateClientParam.before() incorrectly placed \"&lt;=\" instead of\n\t\t\t\t\"&lt;\" in the request URL. Thanks to Ryan for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"77\" dev=\"wdebeau1\">\n\t\t\t\tServer now only automatically adds _include resources which are provided\n\t\t\t\tas references if the client request actually requested that specific include.\n\t\t\t\tSee RestfulServer\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"120\">\n\t\t\t\tUser defined resource types which contain extensions that use a bound code type\n\t\t\t\t(e.g. an BoundCodeDt with a custom Enum) failed to parse correctly. Thanks\n\t\t\t\tto baopingle for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSorting is now supported in the Web Testing UI (previously a button existed for sorting, but it didn't do\n\t\t\t\tanything)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"111\">\n\t\t\t\tServer will no longer include stack traces in the OperationOutcome returned to the client\n\t\t\t\twhen an exception is thrown. A new interceptor called ExceptionHandlingInterceptor has been\n\t\t\t\tcreated which adds this functionality back if it is needed (e.g. for DEV setups). See the\n\t\t\t\tserver interceptor documentation for more information. Thanks to Andy Huang for the suggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.8\" date=\"2014-12-17\">\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]> The \"FHIR structures\" for DSTU1 (the classes which model the\n\t\t\t\tresources and composite datatypes) have been moved out of the core JAR into their\n\t\t\t\town JAR, in order to allow support for DEV resources, and DSTU2 resources when thast\n\t\t\t\tversion is finalized. See the\n\t\t\t\t<![CDATA[<a href=\"./doc_dstu2.html\">DSTU2 page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<b>Deprocated API Removal</b>: The following classes (which were deprocated previously)\n\t\t\t\t\thave now been removed:\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><b>ISecurityManager</b>: If you are using this class, the same functionality\n\t\t\t\t\t\tis available through the more general purpose\n\t\t\t\t\t\t<a href=\"http://jamesagnew.github.io/hapi-fhir/doc_rest_server_interceptor.html\">server interceptor</a>\n\t\t\t\t\t\tcapabilities.\n\t\t\t\t\t\t<li><b>CodingListParam</b>: This class was made redundant by the\n\t\t\t\t\t\t<a href=\"http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/param/TokenOrListParam.html\">TokenOrListParam</a>\n\t\t\t\t\t\tclass, which can be used in its place.\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<b>API Change</b>: The IResource#getResourceMetadata() method has been changed\n\t\t\t\t\tfrom returning \n\t\t\t\t\t<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>\n\t\t\t\t\tto returning a new type called\n\t\t\t\t\t<code>ResourceMetadataMap</code>. This new type implements \n\t\t\t\t\t<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>\n\t\t\t\t\titself, so this change should not break existing code, but may\n\t\t\t\t\trequire a clean build in order to run correctly.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"38\" dev=\"wdebeau1\">\n\t\t\t\tProfile generation on the server was not working due to IdDt being\n\t\t\t\tincorrectly used. Thanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"42\" dev=\"wdebeau1\">\n\t\t\t\tProfiles did not generate correctly if a resource definition class had a\n\t\t\t\tdefined extension which was of a composite type. Thanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"44\" dev=\"petromykhailysyn\">\n\t\t\t\tRemove unnecessary IOException from narrative generator API. Thanks to\n\t\t\t\tPetro Mykhailysyn for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"48\" dev=\"wdebeau1\">\n\t\t\t\tIntroduced a new\n\t\t\t\t<![CDATA[<code>@ProvidesResources</code>]]> annotation which can be added to\n\t\t\t\tresource provider and servers to allow them to declare additional resource\n\t\t\t\tclasses they are able to serve. This is useful if you have a server which can\n\t\t\t\tserve up multiple classes for the same resource type (e.g. a server that sometimes\n\t\t\t\treturns a default Patient, but sometimes uses a custom subclass).\n\t\t\t\tThanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"49\" dev=\"wdebeau1\">\n\t\t\t\tIntroduced a new\n\t\t\t\t<![CDATA[<code>@Destroy</code>]]> annotation which can be added to\n\t\t\t\ta resource provider method. This method will be called by the server when it\n\t\t\t\tis being closed/destroyed (e.g. when the application is being undeployed, the\n\t\t\t\tcontainer is being shut down, etc.)\n\t\t\t\tThanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method <![CDATA[handleException]]> to the server interceptor\n\t\t\t\tframework which allows interceptors to be notified of any exceptions and\n\t\t\t\truntime errors within server methods. Interceptors may optionally also\n\t\t\t\toverride the default error handling behaviour of the RestfulServer.\n\t\t\t</action>\n\t\t\t<action dev=\"wdebeau1\" type=\"add\">\n\t\t\t\tAdd constants to BaseResource for the \"_id\" search parameter which all resources\n\t\t\t\tshould support.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateRangeParam parameters on the server now return correct\n\t\t\t\t<![CDATA[<code>getLowerBoundAsInstant()</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>getUpperBoundAsInstant()</code>]]>\n\t\t\t\tvalues if a single unqualified value is passed in. For example, if\n\t\t\t\ta query containing\n\t\t\t\t<![CDATA[<code>&birthdate=2012-10-01</code>]]>\n\t\t\t\tis received, previously these two methods would both return the same\n\t\t\t\tvalue, but with this fix\n\t\t\t\t<![CDATA[<code>getUpperBoundAsInstant()</code>]]>\n\t\t\t\tnow returns the instant at 23:59:59.9999.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource fields with a type of \"*\" (or Any) sometimes failed to parse if a\n\t\t\t\tvalue type of \"code\" was used. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"lmds\">\n\t\t\t\tRemove dependency on JAXB libraries, which were used to parse and encode\n\t\t\t\tdates and times (even in the JSON parser). JAXB is built in to most JDKs\n\t\t\t\tbut the version bundled with IBM's JDK is flaky and resulted in a number\n\t\t\t\tof problems when deploying to Websphere.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"50\" dev=\"jjathman\">\n\t\t\t\tPrimitive datatypes now preserve their original string value when parsing resources,\n\t\t\t\tas well as containing the \"parsed value\". For instance, a DecimalDt field value of\n\t\t\t\t<![CDATA[<code>1.0000</code>]]> will be parsed into the corresponding\n\t\t\t\tdecimal value, but will also retain the original value with the corresponding\n\t\t\t\tlevel of precision. This allows vadliator rules to be applied to\n\t\t\t\toriginal values as received \"over the wire\", such as well formatted but\n\t\t\t\tinvalid dates, e.g. \"2001-15-01\". Thanks to Joe Athman for reporting and\n\t\t\t\thelping to come up with a fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using Generic Client, if performing a\n\t\t\t\t<![CDATA[create]]> or <![CDATA[update]]> operation using a String as the resource body,\n\t\t\t\tthe client will auto-detect the FHIR encoding style and send an appropriate\n\t\t\t\t<![CDATA[Content-Type]]> header.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"52\">\n\t\t\t\tJPA module (and public HAPI-FHIR test server) were unable to process resource types\n\t\t\t\twhere at least one search parameter has no path specified. These now correctly save\n\t\t\t\t(although the server does not yet process these params, and it should). Thanks to\n\t\t\t\tGitHub user shvoidlee for reporting and help with analysis!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tGeneric/Fluent Client \"create\" and \"update\" method requests were not setting a content type header\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"53\" dev=\"petromykhailysyn\">\n\t\t\t\tDateDt left precision value as <![CDATA[null]]> in the constructor\n\t\t\t\t<![CDATA[DateDt(Date)]]>.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRESTful server now doesn't overwrite resource IDs if they are absolute. In other words, if\n\t\t\t\ta server's Resource Provider returns a resource with ID \"Patient/123\" it will be translated to\n\t\t\t\t\"[base url]/Patient/123\" but if the RP returns ID \"http://foo/Patient/123\" the ID will be\n\t\t\t\treturned exactly as is. Thanks to Bill de Beaubien for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"55\">\n\t\t\t\tJPA module Transaction operation was not correctly replacing logical IDs\n\t\t\t\tbeginning with \"cid:\" with server assigned IDs, as required by the\n\t\t\t\tspecification.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"tahurac\">\n\t\t\t\t<![CDATA[FhirTerser]]> did not visit or find children in contained resources when\n\t\t\t\tsearching a resource. This caused server implementations to not always return contained\n\t\t\t\tresources when they are included with a resource being returned.\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"lmds\">\n\t\t\t\tAdd a method <![CDATA[String IResource#getResourceName()]]> which returns the name of the\n\t\t\t\tresource in question (e.g. \"Patient\", or \"Observation\"). This is intended as a\n\t\t\t\tconvenience to users.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDo not strip version from resource references in resources returned\n\t\t\t\tfrom server search methods. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"jjathman\" issue=\"54\">\n\t\t\t\tCorrect an issue with the validator where changes to the underlying\n\t\t\t\tOperationOutcome produced by a validation cycle cause the validation\n\t\t\t\tresults to be incorrect.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient interceptors registered to an interface based client instance\n\t\t\t\twere applied to other client instances for the same client interface as well. (Issue\n\t\t\t\tdid not affect generic/fluent clients)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"57\">\n\t\t\t\tDateDt, DateTimeDt and types InstantDt types now do not throw an exception\n\t\t\t\tif they are used to parse a value with the wrong level of precision for\n\t\t\t\tthe given type but do throw an exception if the wrong level of precision\n\t\t\t\tis passed into their constructors.<![CDATA[<br/><br/>]]>\n\t\t\t\tThis means that HAPI FHIR can now successfully parse resources from external\n\t\t\t\tsources that have the wrong level of precision, but will generate a validation\n\t\t\t\terror if the resource is validated. Thanks to Alexander Kley for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tEncoding a Binary resource without a content type set should not result in a NullPointerException. Thanks\n\t\t\t\tto Alexander Kley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer gives a more helpful error message if multiple IResourceProvider implementations\n\t\t\t\tare provided for the same resource type. Thanks to wanghaisheng for the idea!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"61\">\n\t\t\t\tBring DSTU1 resource definitions up to version 0.0.82-2929<![CDATA[<br/>]]>\n\t\t\t\tBring DEV resource definitions up to 0.4.0-3775<![CDATA[<br/>]]>\n\t\t\t\tThanks to crinacimpian for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"62\">\n\t\t\t\tJPA server did not correctly process _include requests if included\n\t\t\t\tresources were present with a non-numeric identifier. Thanks to\n\t\t\t\tBill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"60\">\n\t\t\t\tClient requests which include a resource/bundle body (e.g. create,\n\t\t\t\tupdate, transaction) were not including a charset in the content type\n\t\t\t\theader, leading to servers incorrectly assuming ISO-8859/1. Thanks to\n\t\t\t\tshvoidlee for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"59\" dev=\"wdebeau1\">\n\t\t\t\tClean up the way that Profile resources are automatically exported\n\t\t\t\tby the server for custom resource profile classes. See the\n\t\t\t\t<![CDATA[<a href=\"http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/model/api/annotation/ResourceDef.html\">@ResourceDef</a>]]>\n\t\t\t\tJavaDoc for information on how this works.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"73\" dev=\"wdebeau1\">\n\t\t\t\tAdd convenience methods to TokenOrListParam to test whether any of a set of tokens match\n\t\t\t\tthe given requested list.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"86\" dev=\"harsha89\">\n\t\t\t\tAdd a protected method to RestfulServer which allows developers to\n\t\t\t\timplement their own method for determining which part of the request\n\t\t\t\tURL is the FHIR request path (useful if you are embedding the RestulServer inside\n\t\t\t\tof another web framework). Thanks to Harsha Kumara for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.7\" date=\"2014-10-23\">\n\t\t\t<action type=\"add\" issue=\"30\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]> The TagList class previously implemented ArrayList semantics,\n\t\t\t\tbut this has been replaced with LinkedHashMap semantics. This means that the list of\n\t\t\t\ttags will no longer accept duplicate tags, but that tag order will still be\n\t\t\t\tpreserved. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"33\">\n\t\t\t\tServer was incorrectly including contained resources being returned as both contained resources, and as\n\t\t\t\ttop-level resources in the returned bundle for search operations.\n\t\t\t\tThanks to Bill de Beaubien for reporting! This also fixes Issue #20, thanks to\n\t\t\t\tlephty for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"suranga\">\n\t\t\t\tDocumentation fixes\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"dougmartin\">\n\t\t\t\tAdd a collection of new methods on the generic client which support the\n\t\t\t\t<![CDATA[ \n\t\t\t\t<b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#read(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">read</a></b>,\n\t\t\t\t<b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#vread(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">read</a></b>,\n\t\t\t\tand <b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#search(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">search</a></b>\n\t\t\t\t]]>\n\t\t\t\toperations using an absolute URL. This allows developers to perform these operations using\n\t\t\t\tURLs they obtained from other sources (or external resource references within resources). In\n\t\t\t\taddition, the existing read/vread operations will now access absolute URL references if\n\t\t\t\tthey are passed in. Thanks to Doug Martin of the Regenstrief Center for Biomedical Informatics\n\t\t\t\tfor contributing this implementation!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer implementation was not correctly figuring out its own FHIR Base URL when deployed\n\t\t\t\ton Amazon Web Service server. Thanks to Jeffrey Ting and Bill De Beaubien of\n\t\t\t\tSystems Made Simple for their help in figuring out this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXML Parser failed to encode fields with both a resource reference child and\n\t\t\t\ta primitive type child. Thanks to Jeffrey Ting and Bill De Beaubien of\n\t\t\t\tSystems Made Simple for their help in figuring out this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHAPI now runs successfully on Servlet 2.5 containers (such as Tomcat 6). Thanks to\n\t\t\t\tBernard Gitaadji for reporting and diagnosing the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSummary (in the bundle entry) is now encoded by the XML and JSON parsers if supplied. Thanks to David Hay of\n\t\t\t\tOrion Health for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"24\">\n\t\t\t\tConformance profiles which are automatically generated by the server were missing a few mandatory elements,\n\t\t\t\twhich meant that the profile did not correctly validate. Thanks to Bill de Beaubien of Systems Made Simple\n\t\t\t\tfor reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXHTML (in narratives) containing escapable characters (e.g. &lt; or &quot;) will now always have those\n\t\t\t\tcharacters\n\t\t\t\tescaped properly in encoded messages.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResources containing entities which are not valid in basic XML (e.g. &amp;sect;) will have those\n\t\t\t\tentities converted to their equivalent unicode characters when resources are encoded, since FHIR does\n\t\t\t\tnot allow extended entities in resource instances.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new client interceptor which adds HTTP Authorization Bearer Tokens (for use with OAUTH2 servers)\n\t\t\t\tto client requests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAdd phloc-commons dependency explicitly, which resolves an issue building HAPI from source on\n\t\t\t\tsome platforms. Thanks to Odysseas Pentakalos for the patch!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI now logs a single line indicating the StAX implementation being used upon the\n\t\t\t\tfirst time an XML parser is created.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUpdate methods on the server did not return a \"content-location\" header, but\n\t\t\t\tonly a \"location\" header. Both are required according to the FHIR specification.\n\t\t\t\tThanks to Bill de Beaubien of Systems Made Simple for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"26\" dev=\"akley\">\n\t\t\t\tParser failed to correctly read contained Binary resources. Thanks to Alexander Kley for\n\t\t\t\tthe patch!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"29\" dev=\"akley\">\n\t\t\t\tCalling encode multiple times on a resource with contained resources caused the contained\n\t\t\t\tresources to be re-added (and the actual message to grow) with each encode pass. Thanks to\n\t\t\t\tAlexander Kley for the test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON-encoded contained resources with the incorrect \"_id\" element (which should be \"id\", but some\n\t\t\t\tincorrect examples exist on the FHIR specification) now parse correctly. In other words, HAPI\n\t\t\t\tpreviously only accepted the correct \"id\" element, but now it also accepts the incorrect\n\t\t\t\t\"_id\" element just to be more lenient.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSeveral unit tests failed on Windows (or any platform with non UTF-8 default encoding). This may\n\t\t\t\thave also caused resource validation to fail occasionally on these platforms as well.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\ttoString() method on TokenParam was incorrectly showing the system as the value.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"update\">\n\t\t\t\tDocumentation on contained resources contained a typo and did not actually produce contained resources.\n\t\t\t\tThanks\n\t\t\t\tto David Hay of Orion Health for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"31\" dev=\"preston\">\n\t\t\t\tAdd a\n\t\t\t\t<![CDATA[<a href=\"https://www.vagrantup.com/\">Vagrant</a>]]>\n\t\t\t\tbased environment (basically a fully built, self contained development environment) for\n\t\t\t\ttrying out the HAPI server modules. Thanks to Preston Lee for the pull request, and for\n\t\t\t\toffering to maintain this!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"32\" dev=\"jjathman\">\n\t\t\t\tChange validation API so that it uses a return type instead of exceptions to communicate\n\t\t\t\tvalidation failures. Thanks to Joe Athman for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"35\" dev=\"petromykhailysyn\">\n\t\t\t\tAdd a client interceptor which adds an HTTP cookie to each client request. Thanks to\n\t\t\t\tPetro Mykhailysyn for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.6\" date=\"2014-09-08\"\n\t\t\t\t\tdescription=\"This release brings a number of new features and bug fixes!\">\n\t\t\t<!-- \n\t\t\t<action type=\"add\">\n\t\t\t\tAllow generic client\t... OAUTH\n\t\t\t</action>\n\t\t\t-->\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd server interceptor framework, and new interceptor for logging incoming\n\t\t\t\trequests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd server validation framework for validating resources against the FHIR schemas and schematrons\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTester UI created double _format and _pretty param entries in searches. Thanks to Gered King of University\n\t\t\t\tHealth Network for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"4\">\n\t\t\t\tCreate method was incorrectly returning an HTTP 204 on sucessful completion, but\n\t\t\t\tshould be returning an HTTP 200 per the FHIR specification. Thanks to wanghaisheng\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFHIR Tester UI now correctly sends UTF-8 charset in responses so that message payloads containing\n\t\t\t\tnon US-ASCII characters will correctly display in the browser\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser was incorrectly encoding extensions on composite elements outside the element itself\n\t\t\t\t(as is done correctly for non-composite elements) instead of inside of them. Thanks to David Hay of\n\t\t\t\tOrion for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tContained/included resource instances received by a client are now automatically\n\t\t\t\tadded to any ResourceReferenceDt instancea in other resources which reference them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd documentation on how to use eBay CORS Filter to support Cross Origin Resource\n\t\t\t\tSharing (CORS) to server. CORS support that was built in to the server itself has\n\t\t\t\tbeen removed, as it did not work correctly (and was reinventing a wheel that others\n\t\t\t\thave done a great job inventing). Thanks to Peter Bernhardt of Relay Health for all the assistance\n\t\t\t\tin testing this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIResource interface did not expose the getLanguage/setLanguage methods from BaseResource,\n\t\t\t\tso the resource language was difficult to access.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON Parser now gives a more friendly error message if it tries to parse JSON with invalid use\n\t\t\t\tof single quotes\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction server method is now allowed to return an OperationOutcome in addition to the\n\t\t\t\tincoming resources. The public test server now does this in order to return status information\n\t\t\t\tabout the transaction processing.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUpdate method in the server can now flag (via a field on the MethodOutcome object being returned)\n\t\t\t\tthat the result was actually a creation, and Create method can indicate that it was actually an\n\t\t\t\tupdate. This has no effect other than to switch between the HTTP 200 and HTTP 201 status codes on the\n\t\t\t\tresponse, but this may be useful in some circumstances.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"tahurac\">\n\t\t\t\tAnnotation client search methods with a specific resource type (e.g. List&lt;Patient&gt; search())\n\t\t\t\twon't return any resources that aren't of the correct type that are received in a response\n\t\t\t\tbundle (generally these are referenced resources, so they are populated in the reference fields instead).\n\t\t\t\tThanks to Tahura Chaudhry of University Health Network for the unit test!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded narrative generator template for OperationOutcome resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDate/time types did not correctly parse values in the format \"yyyymmdd\" (although the FHIR-defined format\n\t\t\t\tis \"yyyy-mm-dd\" anyhow, and this is correctly handled). Thanks to Jeffrey Ting of Systems Made Simple\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer search method for an unnamed query gets called if the client requests a named query\n\t\t\t\twith the same parameter list. Thanks to Neal Acharya of University Health Network for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCategory header (for tags) is correctly read in client for \"read\" operation\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction method in server can now have parameter type Bundle instead of\n\t\t\t\tList&lt;IResource&gt;\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI parsers now use field access to get/set values instead of method accessors and mutators.\n\t\t\t\tThis should give a small performance boost.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser encodes resource references incorrectly, using the name \"resource\" instead\n\t\t\t\tof the name \"reference\" for the actual reference. Thanks to\n\t\t\t\tRicky Nguyen for reporting and tracking down the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRename NotImpementedException to NotImplementedException (to correct typo)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer setUseBrowserFriendlyContentType setting also respected for errors (e.g. OperationOutcome with\n\t\t\t\t4xx/5xx status)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix performance issue in date/time datatypes where pattern matchers were not static\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now gives a more helpful error message if a @Read method has a search parameter (which is invalid,\n\t\t\t\tbut\n\t\t\t\tpreviously lead to a very unhelpful error message). Thanks to Tahura Chaudhry of UHN for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource of type \"List\" failed to parse from a bundle correctly. Thanks to David Hay of Orion Health\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tQuantityParam correctly encodes approximate (~) prefix to values\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"14\">\n\t\t\t\tIf a server defines a method with parameter \"_id\", incoming search requests for that method may\n\t\t\t\tget delegated to the wrong method. Thanks to Neal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSecurityEvent.Object structural element has been renamed to\n\t\t\t\tSecurityEvent.ObjectElement to avoid conflicting names with the\n\t\t\t\tjava Object class. Thanks to Laurie Macdougall-Sookraj of UHN for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tText/narrative blocks that were created with a non-empty\n\t\t\t\tnamespace prefix (e.g. &lt;xhtml:div xmlns:xhtml=\"...\"&gt;...&lt;/xhtml:div&gt;)\n\t\t\t\tfailed to encode correctly (prefix was missing in encoded resource)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource references previously encoded their children (display and reference)\n\t\t\t\tin the wrong order so references with both would fail schema validation.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSecurityEvent resource's enums now use friendly enum names instead of the unfriendly\n\t\t\t\tnumeric code values. Thanks to Laurie MacDougall-Sookraj of UHN for the\n\t\t\t\tsuggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.5\" date=\"2014-07-30\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI has a number of RESTful method parameter types that have similar but not identical\n\t\t\t\tpurposes and confusing names. A cleanup has been undertaken to clean this up.\n\t\t\t\tThis means that a number of existing classes\n\t\t\t\thave been deprocated in favour of new naming schemes.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll annotation-based clients and all server search method parameters are now named\n\t\t\t\t(type)Param, for example: StringParam, TokenParam, etc.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll generic/fluent client method parameters are now named\n\t\t\t\t(type)ClientParam, for example: StringClientParam, TokenClientParam, etc.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll renamed classes have been retained and deprocated, so this change should not cause any issues\n\t\t\t\tfor existing applications but those applications should be refactored to use the\n\t\t\t\tnew parameters when possible.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow server methods to return wildcard generic types (e.g. List&lt;? extends IResource&gt;)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSearch parameters are not properly escaped and unescaped. E.g. for a token parameter such as\n\t\t\t\t\"&amp;identifier=system|codepart1\\|codepart2\"\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for OPTIONS verb (which returns the server conformance statement)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for CORS headers in server\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump SLF4j dependency to latest version (1.7.7)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd interceptor framework for clients (annotation based and generic), and add interceptors\n\t\t\t\tfor configurable logging, capturing requests and responses, and HTTP basic auth.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTransaction client invocations with XML encoding were using the wrong content type (\"application/xml+fhir\"\n\t\t\t\tinstead\n\t\t\t\tof the correct \"application/atom+xml\"). Thanks to David Hay of Orion Health for surfacing this one!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBundle entries now support a link type of \"search\". Thanks to David Hay for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1\">\n\t\t\t\tIf a client receives a non 2xx response (e.g. HTTP 500) and the response body is a text/plain message or\n\t\t\t\tan OperationOutcome resource, include the message in the exception message so that it will be\n\t\t\t\tmore conveniently displayed in logs and other places. Thanks to Neal Acharya for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"2\">\n\t\t\t\tRead invocations in the client now process the \"Content-Location\" header and use it to\n\t\t\t\tpopulate the ID of the returned resource. Thanks to Neal Acharya for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"3\">\n\t\t\t\tFix issue where vread invocations on server incorrectly get routed to instance history method if one is\n\t\t\t\tdefined. Thanks to Neal Acharya from UHN for surfacing this one!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBinary reads on a server not include the Content-Disposition header, to prevent HTML in binary\n\t\t\t\tblobs from being used for nefarious purposes. See\n\t\t\t\t<![CDATA[<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=3298\">FHIR Tracker Bug 3298</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport has been added for using an HTTP proxy for outgoing requests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix: Primitive extensions declared against custom resource types\n\t\t\t\tare encoded even if they have no value. Thanks to David Hay of Orion for\n\t\t\t\treporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix: RESTful server deployed to a location where the URL to access it contained a\n\t\t\t\tspace (e.g. a WAR file with a space in the name) failed to work correctly.\n\t\t\t\tThanks to David Hay of Orion for reporting this!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.4\" date=\"2014-07-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>BREAKING CHANGE:</b>]]>: IdDt has been modified so that it\n\t\t\t\tcontains a partial or complete resource identity. Previously it contained\n\t\t\t\tonly the simple alphanumeric id of the resource (the part at the end of the \"read\" URL for\n\t\t\t\tthat resource) but it can now contain a complete URL or even a partial URL (e.g. \"Patient/123\")\n\t\t\t\tand can optionally contain a version (e.g. \"Patient/123/_history/456\"). New methods have\n\t\t\t\tbeen added to this datatype which provide just the numeric portion. See the JavaDoc\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]>: Most elements in the HAPI FHIR model contain\n\t\t\t\ta getId() and setId() method. This method is confusing because it is only actually used\n\t\t\t\tfor IDREF elements (which are rare) but its name makes it easy to confuse with more\n\t\t\t\timportant identifiers. For this reason, these methods have been deprecated and replaced with\n\t\t\t\tget/setElementSpecificId() methods. The old methods will be removed at some point. Resource\n\t\t\t\ttypes are unchanged and retain their get/setId methods.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow use of QuantityDt as a service parameter to support the \"quantity\" type. Previously\n\t\t\t\tQuantityDt did not implement IQueryParameterType so it was not valid, and there was no way to\n\t\t\t\tsupport quantity search parameters on the server (e.g. Observation.value-quantity)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce StringParameter type which can be used as a RESTful operation search parameter\n\t\t\t\ttype. StringParameter allows \":exact\" matches to be specified in clients, and handled in servers.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParsers (XML/JSON) now support deleted entries in bundles\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction method now supported in servers\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for Binary resources added (in servers, clients, parsers, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSupport for Query resources fixed (in parser)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tNested contained resources (e.g. encoding a resource with a contained resource that itself contains a\n\t\t\t\tresource)\n\t\t\t\tnow parse and encode correctly, meaning that all contained resources are placed in the \"contained\" element\n\t\t\t\tof the root resource, and the parser looks in the root resource for all container levels when stitching\n\t\t\t\tcontained resources back together.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer methods with @Include parameter would sometimes fail when no _include was actually\n\t\t\t\tspecified in query strings.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient requests for IdentifierDt types (such as Patient.identifier) did not create the correct\n\t\t\t\tquery string if the system is null.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for paging responses from RESTful servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDon't fail on narrative blocks in JSON resources with only an XML declaration but no content (these are\n\t\t\t\tproduced by the Health Intersections server)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now automatically compresses responses if the client indicates support\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer failed to support optional parameters when type is String and :exact qualifier is used\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRead method in client correctly populated resource ID in returned object\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport added for deleted-entry by/name, by/email, and comment from Tombstones spec\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.3\" date=\"2014-05-12\"\n\t\t\t\t\tdescription=\"This release corrects lots of bugs and introduces the fluent client mode\">\n\t\t</release>\n\t\t<release version=\"0.2\" date=\"2014-04-23\">\n\t\t</release>\n\t\t<release version=\"0.1\" date=\"2014-04-15\">\n\t\t</release>\n\t</body>\n</document>\n"], "fixing_code": ["package ca.uhn.fhir.to;\n\nimport ca.uhn.fhir.context.FhirContext;\nimport ca.uhn.fhir.context.FhirVersionEnum;\nimport ca.uhn.fhir.context.RuntimeResourceDefinition;\nimport ca.uhn.fhir.model.api.ExtensionDt;\nimport ca.uhn.fhir.model.api.IResource;\nimport ca.uhn.fhir.model.dstu2.resource.Conformance;\nimport ca.uhn.fhir.model.primitive.DecimalDt;\nimport ca.uhn.fhir.rest.api.Constants;\nimport ca.uhn.fhir.rest.api.EncodingEnum;\nimport ca.uhn.fhir.rest.client.api.IClientInterceptor;\nimport ca.uhn.fhir.rest.client.api.IHttpRequest;\nimport ca.uhn.fhir.rest.client.api.IHttpResponse;\nimport ca.uhn.fhir.rest.client.impl.GenericClient;\nimport ca.uhn.fhir.to.model.HomeRequest;\nimport ca.uhn.fhir.util.ExtensionConstants;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.Header;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.message.BasicHeader;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestComponent;\nimport org.hl7.fhir.dstu3.model.CapabilityStatement.CapabilityStatementRestResourceComponent;\nimport org.hl7.fhir.dstu3.model.DecimalType;\nimport org.hl7.fhir.dstu3.model.Extension;\nimport org.hl7.fhir.instance.model.api.IAnyResource;\nimport org.hl7.fhir.instance.model.api.IBaseResource;\nimport org.hl7.fhir.instance.model.api.IDomainResource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ui.ModelMap;\nimport org.thymeleaf.ITemplateEngine;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.*;\n\nimport static org.apache.commons.lang3.StringUtils.defaultString;\n\npublic class BaseController {\n\tstatic final String PARAM_RESOURCE = \"resource\";\n\tstatic final String RESOURCE_COUNT_EXT_URL = \"http://hl7api.sourceforge.net/hapi-fhir/res/extdefs.html#resourceCount\";\n\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(BaseController.class);\n\t@Autowired\n\tprotected TesterConfig myConfig;\n\tprivate Map<FhirVersionEnum, FhirContext> myContexts = new HashMap<FhirVersionEnum, FhirContext>();\n\tprivate List<String> myFilterHeaders;\n\t@Autowired\n\tprivate ITemplateEngine myTemplateEngine;\n\n\tpublic BaseController() {\n\t\tsuper();\n\t}\n\n\tprotected IBaseResource addCommonParams(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tfinal String serverId = theRequest.getServerIdWithDefault(myConfig);\n\t\tfinal String serverBase = theRequest.getServerBase(theServletRequest, myConfig);\n\t\tfinal String serverName = theRequest.getServerName(myConfig);\n\t\tfinal String apiKey = theRequest.getApiKey(theServletRequest, myConfig);\n\t\ttheModel.put(\"serverId\", sanitizeInput(serverId));\n\t\ttheModel.put(\"base\", sanitizeInput(serverBase));\n\t\ttheModel.put(\"baseName\", sanitizeInput(serverName));\n\t\ttheModel.put(\"apiKey\", sanitizeInput(apiKey));\n\t\ttheModel.put(\"resourceName\", sanitizeInput(defaultString(theRequest.getResource())));\n\t\ttheModel.put(\"encoding\", sanitizeInput(theRequest.getEncoding()));\n\t\ttheModel.put(\"pretty\", sanitizeInput(theRequest.getPretty()));\n\t\ttheModel.put(\"_summary\", sanitizeInput(theRequest.get_summary()));\n\t\ttheModel.put(\"serverEntries\", myConfig.getIdToServerName());\n\n\t\treturn loadAndAddConf(theServletRequest, theRequest, theModel);\n\t}\n\n\tprivate Header[] applyHeaderFilters(Header[] theAllHeaders) {\n\t\tif (myFilterHeaders == null || myFilterHeaders.isEmpty()) {\n\t\t\treturn theAllHeaders;\n\t\t}\n\t\tArrayList<Header> retVal = new ArrayList<Header>();\n\t\tfor (Header next : theAllHeaders) {\n\t\t\tif (!myFilterHeaders.contains(next.getName().toLowerCase())) {\n\t\t\t\tretVal.add(next);\n\t\t\t}\n\t\t}\n\t\treturn retVal.toArray(new Header[retVal.size()]);\n\t}\n\n\tprivate Header[] applyHeaderFilters(Map<String, List<String>> theAllHeaders) {\n\t\tArrayList<Header> retVal = new ArrayList<Header>();\n\t\tfor (String nextKey : theAllHeaders.keySet()) {\n\t\t\tfor (String nextValue : theAllHeaders.get(nextKey)) {\n\t\t\t\tif (myFilterHeaders == null || !myFilterHeaders.contains(nextKey.toLowerCase())) {\n\t\t\t\t\tretVal.add(new BasicHeader(nextKey, nextValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn retVal.toArray(new Header[retVal.size()]);\n\t}\n\n\tprivate String format(String theResultBody, EncodingEnum theEncodingEnum) {\n\t\tString str = StringEscapeUtils.escapeHtml4(theResultBody);\n\t\tif (str == null || theEncodingEnum == null) {\n\t\t\treturn str;\n\t\t}\n\n\t\tStringBuilder b = new StringBuilder();\n\n\t\tif (theEncodingEnum == EncodingEnum.JSON) {\n\n\t\t\tboolean inValue = false;\n\t\t\tboolean inQuote = false;\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tchar prevChar = (i > 0) ? str.charAt(i - 1) : ' ';\n\t\t\t\tchar nextChar = str.charAt(i);\n\t\t\t\tchar nextChar2 = (i + 1) < str.length() ? str.charAt(i + 1) : ' ';\n\t\t\t\tchar nextChar3 = (i + 2) < str.length() ? str.charAt(i + 2) : ' ';\n\t\t\t\tchar nextChar4 = (i + 3) < str.length() ? str.charAt(i + 3) : ' ';\n\t\t\t\tchar nextChar5 = (i + 4) < str.length() ? str.charAt(i + 4) : ' ';\n\t\t\t\tchar nextChar6 = (i + 5) < str.length() ? str.charAt(i + 5) : ' ';\n\t\t\t\tif (inQuote) {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\tif (prevChar != '\\\\' && nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t} else if (nextChar == '\\\\' && nextChar2 == '\"') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (nextChar == ':') {\n\t\t\t\t\t\tinValue = true;\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t} else if (nextChar == '[' || nextChar == '{') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = false;\n\t\t\t\t\t} else if (nextChar == '{' || nextChar == '}' || nextChar == ',') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = false;\n\t\t\t\t\t} else if (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tif (inValue) {\n\t\t\t\t\t\t\tb.append(\"<span class='hlQuot'>&quot;\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tb.append(\"<span class='hlTagName'>&quot;\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinQuote = true;\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t} else if (nextChar == ':') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t\tb.append(\"</span>\");\n\t\t\t\t\t\tinValue = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tboolean inQuote = false;\n\t\t\tboolean inTag = false;\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tchar nextChar = str.charAt(i);\n\t\t\t\tchar nextChar2 = (i + 1) < str.length() ? str.charAt(i + 1) : ' ';\n\t\t\t\tchar nextChar3 = (i + 2) < str.length() ? str.charAt(i + 2) : ' ';\n\t\t\t\tchar nextChar4 = (i + 3) < str.length() ? str.charAt(i + 3) : ' ';\n\t\t\t\tchar nextChar5 = (i + 4) < str.length() ? str.charAt(i + 4) : ' ';\n\t\t\t\tchar nextChar6 = (i + 5) < str.length() ? str.charAt(i + 5) : ' ';\n\t\t\t\tif (inQuote) {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"quot;</span>\");\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t\tinQuote = false;\n\t\t\t\t\t}\n\t\t\t\t} else if (inTag) {\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'g' && nextChar3 == 't' && nextChar4 == ';') {\n\t\t\t\t\t\tb.append(\"</span><span class='hlControl'>&gt;</span>\");\n\t\t\t\t\t\tinTag = false;\n\t\t\t\t\t\ti += 3;\n\t\t\t\t\t} else if (nextChar == ' ') {\n\t\t\t\t\t\tb.append(\"</span><span class='hlAttr'>\");\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t} else if (nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {\n\t\t\t\t\t\tb.append(\"<span class='hlQuot'>&quot;\");\n\t\t\t\t\t\tinQuote = true;\n\t\t\t\t\t\ti += 5;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (nextChar == '&' && nextChar2 == 'l' && nextChar3 == 't' && nextChar4 == ';') {\n\t\t\t\t\t\tb.append(\"<span class='hlControl'>&lt;</span><span class='hlTagName'>\");\n\t\t\t\t\t\tinTag = true;\n\t\t\t\t\t\ti += 3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb.append(nextChar);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn b.toString();\n\t}\n\n\tprivate String formatUrl(String theUrlBase, String theResultBody) {\n\t\tString str = theResultBody;\n\t\tif (str == null) {\n\t\t\treturn str;\n\t\t}\n\n\t\ttry {\n\t\t\tstr = URLDecoder.decode(str, \"UTF-8\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tourLog.error(\"Should not happen\", e);\n\t\t}\n\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"<span class='hlUrlBase'>\");\n\n\t\tboolean inParams = false;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tchar nextChar = str.charAt(i);\n\t\t\t// char nextChar2 = i < str.length()-2 ? str.charAt(i+1):' ';\n\t\t\t// char nextChar3 = i < str.length()-2 ? str.charAt(i+2):' ';\n\t\t\tif (!inParams) {\n\t\t\t\tif (nextChar == '?') {\n\t\t\t\t\tinParams = true;\n\t\t\t\t\tb.append(\"</span><wbr /><span class='hlControl'>?</span><span class='hlTagName'>\");\n\t\t\t\t} else {\n\t\t\t\t\tif (i == theUrlBase.length()) {\n\t\t\t\t\t\tb.append(\"</span><wbr /><span class='hlText'>\");\n\t\t\t\t\t}\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (nextChar == '&') {\n\t\t\t\t\tb.append(\"</span><wbr /><span class='hlControl'>&amp;</span><span class='hlTagName'>\");\n\t\t\t\t} else if (nextChar == '=') {\n\t\t\t\t\tb.append(\"</span><span class='hlControl'>=</span><span class='hlAttr'>\");\n\t\t\t\t\t// }else if (nextChar=='%' && Character.isLetterOrDigit(nextChar2)&& Character.isLetterOrDigit(nextChar3)) {\n\t\t\t\t\t// URLDecoder.decode(s, enc)\n\t\t\t\t} else {\n\t\t\t\t\tb.append(nextChar);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (inParams) {\n\t\t\tb.append(\"</span>\");\n\t\t}\n\t\treturn b.toString();\n\t}\n\n\tprotected FhirContext getContext(HomeRequest theRequest) {\n\t\tFhirVersionEnum version = theRequest.getFhirVersion(myConfig);\n\t\tFhirContext retVal = myContexts.get(version);\n\t\tif (retVal == null) {\n\t\t\tretVal = newContext(version);\n\t\t\tmyContexts.put(version, retVal);\n\t\t}\n\t\treturn retVal;\n\t}\n\n\tprotected RuntimeResourceDefinition getResourceType(HomeRequest theRequest, HttpServletRequest theReq) throws ServletException {\n\t\tString resourceName = StringUtils.defaultString(theReq.getParameter(PARAM_RESOURCE));\n\t\tRuntimeResourceDefinition def = getContext(theRequest).getResourceDefinition(resourceName);\n\t\tif (def == null) {\n\t\t\tthrow new ServletException(\"Invalid resourceName: \" + resourceName);\n\t\t}\n\t\treturn def;\n\t}\n\n\tprotected ResultType handleClientException(GenericClient theClient, Exception e, ModelMap theModel) {\n\t\tResultType returnsResource;\n\t\treturnsResource = ResultType.NONE;\n\t\tourLog.warn(\"Failed to invoke server\", e);\n\n\t\tif (e != null) {\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Error: \" + e.getMessage(), e));\n\t\t}\n\n\t\treturn returnsResource;\n\t}\n\n\tprivate IBaseResource loadAndAddConf(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tswitch (theRequest.getFhirVersion(myConfig)) {\n\t\t\tcase DSTU2:\n\t\t\t\treturn loadAndAddConfDstu2(theServletRequest, theRequest, theModel);\n\t\t\tcase DSTU3:\n\t\t\t\treturn loadAndAddConfDstu3(theServletRequest, theRequest, theModel);\n\t\t\tcase R4:\n\t\t\t\treturn loadAndAddConfR4(theServletRequest, theRequest, theModel);\n\t\t\tcase DSTU2_1:\n\t\t\tcase DSTU2_HL7ORG:\n\t\t\t\tbreak;\n\t\t}\n\t\tthrow new IllegalStateException(\"Unknown version: \" + theRequest.getFhirVersion(myConfig));\n\t}\n\n\tprivate IResource loadAndAddConfDstu2(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\tca.uhn.fhir.model.dstu2.resource.Conformance conformance;\n\t\ttry {\n\t\t\tconformance = (ca.uhn.fhir.model.dstu2.resource.Conformance) client.fetchConformance().ofType(Conformance.class).execute();\n\t\t} catch (Exception e) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", e.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + e.toString(), e));\n\t\t\tconformance = new ca.uhn.fhir.model.dstu2.resource.Conformance();\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(conformance));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest nextRest : conformance.getRest()) {\n\t\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource nextResource : nextRest.getResource()) {\n\t\t\t\tList<ExtensionDt> exts = nextResource.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((DecimalDt) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest nextRest : conformance.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource theO1, ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource theO2) {\n\t\t\t\t\t\tDecimalDt count1 = new DecimalDt();\n\t\t\t\t\t\tList<ExtensionDt> count1exts = theO1.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (DecimalDt) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDecimalDt count2 = new DecimalDt();\n\t\t\t\t\t\tList<ExtensionDt> count2exts = theO2.getUndeclaredExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (DecimalDt) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"conf\", conformance);\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\treturn conformance;\n\t}\n\n\tprivate IBaseResource loadAndAddConfDstu3(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\torg.hl7.fhir.dstu3.model.CapabilityStatement capabilityStatement = new CapabilityStatement();\n\t\ttry {\n\t\t\tcapabilityStatement = client.fetchConformance().ofType(org.hl7.fhir.dstu3.model.CapabilityStatement.class).execute();\n\t\t} catch (Exception ex) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", ex.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + ex.toString(), ex));\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(capabilityStatement));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\n\t\tfor (CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\tfor (CapabilityStatementRestResourceComponent nextResource : nextRest.getResource()) {\n\t\t\t\tList<Extension> exts = nextResource.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((DecimalType) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<CapabilityStatementRestResourceComponent>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(CapabilityStatementRestResourceComponent theO1, CapabilityStatementRestResourceComponent theO2) {\n\t\t\t\t\t\tDecimalType count1 = new DecimalType();\n\t\t\t\t\t\tList<Extension> count1exts = theO1.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (DecimalType) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDecimalType count2 = new DecimalType();\n\t\t\t\t\t\tList<Extension> count2exts = theO2.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (DecimalType) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\ttheModel.put(\"conf\", capabilityStatement);\n\t\treturn capabilityStatement;\n\t}\n\n\tprivate IBaseResource loadAndAddConfR4(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {\n\t\tCaptureInterceptor interceptor = new CaptureInterceptor();\n\t\tGenericClient client = theRequest.newClient(theServletRequest, getContext(theRequest), myConfig, interceptor);\n\n\t\torg.hl7.fhir.r4.model.CapabilityStatement capabilityStatement = new org.hl7.fhir.r4.model.CapabilityStatement();\n\t\ttry {\n\t\t\tcapabilityStatement = client.fetchConformance().ofType(org.hl7.fhir.r4.model.CapabilityStatement.class).execute();\n\t\t} catch (Exception ex) {\n\t\t\tourLog.warn(\"Failed to load conformance statement, error was: {}\", ex.toString());\n\t\t\ttheModel.put(\"errorMsg\", toDisplayError(\"Failed to load conformance statement, error was: \" + ex.toString(), ex));\n\t\t}\n\n\t\ttheModel.put(\"jsonEncodedConf\", getContext(theRequest).newJsonParser().encodeResourceToString(capabilityStatement));\n\n\t\tMap<String, Number> resourceCounts = new HashMap<String, Number>();\n\t\tlong total = 0;\n\n\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent nextResource : nextRest.getResource()) {\n\t\t\t\tList<org.hl7.fhir.r4.model.Extension> exts = nextResource.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\tif (exts != null && exts.size() > 0) {\n\t\t\t\t\tNumber nextCount = ((org.hl7.fhir.r4.model.DecimalType) (exts.get(0).getValue())).getValueAsNumber();\n\t\t\t\t\tresourceCounts.put(nextResource.getTypeElement().getValue(), nextCount);\n\t\t\t\t\ttotal += nextCount.longValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"resourceCounts\", resourceCounts);\n\n\t\tif (total > 0) {\n\t\t\tfor (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent nextRest : capabilityStatement.getRest()) {\n\t\t\t\tCollections.sort(nextRest.getResource(), new Comparator<org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent theO1, org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent theO2) {\n\t\t\t\t\t\torg.hl7.fhir.r4.model.DecimalType count1 = new org.hl7.fhir.r4.model.DecimalType();\n\t\t\t\t\t\tList<org.hl7.fhir.r4.model.Extension> count1exts = theO1.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count1exts != null && count1exts.size() > 0) {\n\t\t\t\t\t\t\tcount1 = (org.hl7.fhir.r4.model.DecimalType) count1exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\torg.hl7.fhir.r4.model.DecimalType count2 = new org.hl7.fhir.r4.model.DecimalType();\n\t\t\t\t\t\tList<org.hl7.fhir.r4.model.Extension> count2exts = theO2.getExtensionsByUrl(RESOURCE_COUNT_EXT_URL);\n\t\t\t\t\t\tif (count2exts != null && count2exts.size() > 0) {\n\t\t\t\t\t\t\tcount2 = (org.hl7.fhir.r4.model.DecimalType) count2exts.get(0).getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint retVal = count2.compareTo(count1);\n\t\t\t\t\t\tif (retVal == 0) {\n\t\t\t\t\t\t\tretVal = theO1.getTypeElement().getValue().compareTo(theO2.getTypeElement().getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn retVal;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttheModel.put(\"requiredParamExtension\", ExtensionConstants.PARAM_IS_REQUIRED);\n\n\t\ttheModel.put(\"conf\", capabilityStatement);\n\t\treturn capabilityStatement;\n\t}\n\n\tprotected String logPrefix(ModelMap theModel) {\n\t\treturn \"[server=\" + theModel.get(\"serverId\") + \"] - \";\n\t}\n\n\tprotected FhirContext newContext(FhirVersionEnum version) {\n\t\tFhirContext retVal;\n\t\tretVal = new FhirContext(version);\n\t\treturn retVal;\n\t}\n\n\tprivate String parseNarrative(HomeRequest theRequest, EncodingEnum theCtEnum, String theResultBody) {\n\t\ttry {\n\t\t\tIBaseResource par = theCtEnum.newParser(getContext(theRequest)).parseResource(theResultBody);\n\t\t\tString retVal;\n\t\t\tif (par instanceof IResource) {\n\t\t\t\tIResource resource = (IResource) par;\n\t\t\t\tretVal = resource.getText().getDiv().getValueAsString();\n\t\t\t} else if (par instanceof IDomainResource) {\n\t\t\t\tretVal = ((IDomainResource) par).getText().getDivAsString();\n\t\t\t} else {\n\t\t\t\tretVal = null;\n\t\t\t}\n\t\t\treturn StringUtils.defaultString(retVal);\n\t\t} catch (Exception e) {\n\t\t\tourLog.error(\"Failed to parse resource\", e);\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprotected String preProcessMessageBody(String theBody) {\n\t\tif (theBody == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString retVal = theBody.trim();\n\n\t\tStringBuilder b = new StringBuilder();\n\t\tfor (int i = 0; i < retVal.length(); i++) {\n\t\t\tchar nextChar = retVal.charAt(i);\n\t\t\tint nextCharI = nextChar;\n\t\t\tif (nextCharI == 65533) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (nextCharI == 160) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (nextCharI == 194) {\n\t\t\t\tb.append(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tb.append(nextChar);\n\t\t}\n\t\tretVal = b.toString();\n\t\treturn retVal;\n\t}\n\n\tprotected void processAndAddLastClientInvocation(GenericClient theClient, ResultType theResultType, ModelMap theModelMap, long theLatency, String outcomeDescription,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t CaptureInterceptor theInterceptor, HomeRequest theRequest) {\n\t\ttry {\n//\t\t\tApacheHttpRequest lastRequest = theInterceptor.getLastRequest();\n//\t\t\tHttpResponse lastResponse = theInterceptor.getLastResponse();\n//\t\t\tString requestBody = null;\n//\t\t\tString requestUrl = lastRequest != null ? lastRequest.getApacheRequest().getURI().toASCIIString() : null;\n//\t\t\tString action = lastRequest != null ? lastRequest.getApacheRequest().getMethod() : null;\n//\t\t\tString resultStatus = lastResponse != null ? lastResponse.getStatusLine().toString() : null;\n//\t\t\tString resultBody = StringUtils.defaultString(theInterceptor.getLastResponseBody());\n//\n//\t\t\tif (lastRequest instanceof HttpEntityEnclosingRequest) {\n//\t\t\t\tHttpEntity entity = ((HttpEntityEnclosingRequest) lastRequest).getEntity();\n//\t\t\t\tif (entity.isRepeatable()) {\n//\t\t\t\t\trequestBody = IOUtils.toString(entity.getContent());\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\tContentType ct = lastResponse != null ? ContentType.get(lastResponse.getEntity()) : null;\n//\t\t\tString mimeType = ct != null ? ct.getMimeType() : null;\n\n\n\t\t\tIHttpRequest lastRequest = theInterceptor.getLastRequest();\n\t\t\tIHttpResponse lastResponse = theInterceptor.getLastResponse();\n\t\t\tString requestBody = null;\n\t\t\tString requestUrl = null;\n\t\t\tString action = null;\n\t\t\tString resultStatus = null;\n\t\t\tString resultBody = null;\n\t\t\tString mimeType = null;\n\t\t\tContentType ct = null;\n\t\t\tif (lastRequest != null) {\n\t\t\t\trequestBody = lastRequest.getRequestBodyFromStream();\n\t\t\t\trequestUrl = lastRequest.getUri();\n\t\t\t\taction = lastRequest.getHttpVerbName();\n\t\t\t}\n\t\t\tif (lastResponse != null) {\n\t\t\t\tresultStatus = \"HTTP \" + lastResponse.getStatus() + \" \" + lastResponse.getStatusInfo();\n\t\t\t\tlastResponse.bufferEntity();\n\t\t\t\tresultBody = IOUtils.toString(lastResponse.readEntity(), Constants.CHARSET_UTF8);\n\n\t\t\t\tList<String> ctStrings = lastResponse.getHeaders(Constants.HEADER_CONTENT_TYPE);\n\t\t\t\tif (ctStrings != null && ctStrings.isEmpty() == false) {\n\t\t\t\t\tct = ContentType.parse(ctStrings.get(0));\n\t\t\t\t\tmimeType = ct.getMimeType();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tEncodingEnum ctEnum = EncodingEnum.forContentType(mimeType);\n\t\t\tString narrativeString = \"\";\n\n\t\t\tStringBuilder resultDescription = new StringBuilder();\n\t\t\tIBaseResource riBundle = null;\n\n\t\t\tFhirContext context = getContext(theRequest);\n\t\t\tif (ctEnum == null) {\n\t\t\t\tresultDescription.append(\"Non-FHIR response\");\n\t\t\t} else {\n\t\t\t\tswitch (ctEnum) {\n\t\t\t\t\tcase JSON:\n\t\t\t\t\t\tif (theResultType == ResultType.RESOURCE) {\n\t\t\t\t\t\t\tnarrativeString = parseNarrative(theRequest, ctEnum, resultBody);\n\t\t\t\t\t\t\tresultDescription.append(\"JSON resource\");\n\t\t\t\t\t\t} else if (theResultType == ResultType.BUNDLE) {\n\t\t\t\t\t\t\tresultDescription.append(\"JSON bundle\");\n\t\t\t\t\t\t\triBundle = context.newJsonParser().parseResource(resultBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase XML:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (theResultType == ResultType.RESOURCE) {\n\t\t\t\t\t\t\tnarrativeString = parseNarrative(theRequest, ctEnum, resultBody);\n\t\t\t\t\t\t\tresultDescription.append(\"XML resource\");\n\t\t\t\t\t\t} else if (theResultType == ResultType.BUNDLE) {\n\t\t\t\t\t\t\tresultDescription.append(\"XML bundle\");\n\t\t\t\t\t\t\triBundle = context.newXmlParser().parseResource(resultBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresultDescription.append(\" (\").append(defaultString(resultBody).length() + \" bytes)\");\n\n\t\t\tHeader[] requestHeaders = lastRequest != null ? applyHeaderFilters(lastRequest.getAllHeaders()) : new Header[0];\n\t\t\tHeader[] responseHeaders = lastResponse != null ? applyHeaderFilters(lastResponse.getAllHeaders()) : new Header[0];\n\n\t\t\ttheModelMap.put(\"outcomeDescription\", outcomeDescription);\n\t\t\ttheModelMap.put(\"resultDescription\", resultDescription.toString());\n\t\t\ttheModelMap.put(\"action\", action);\n\t\t\ttheModelMap.put(\"ri\", riBundle instanceof IAnyResource);\n\t\t\ttheModelMap.put(\"riBundle\", riBundle);\n\t\t\ttheModelMap.put(\"resultStatus\", resultStatus);\n\n\t\t\ttheModelMap.put(\"requestUrl\", requestUrl);\n\t\t\ttheModelMap.put(\"requestUrlText\", formatUrl(theClient.getUrlBase(), requestUrl));\n\n\t\t\tString requestBodyText = format(requestBody, ctEnum);\n\t\t\ttheModelMap.put(\"requestBody\", requestBodyText);\n\n\t\t\tString resultBodyText = format(resultBody, ctEnum);\n\t\t\ttheModelMap.put(\"resultBody\", resultBodyText);\n\n\t\t\ttheModelMap.put(\"resultBodyIsLong\", resultBodyText.length() > 1000);\n\t\t\ttheModelMap.put(\"requestHeaders\", requestHeaders);\n\t\t\ttheModelMap.put(\"responseHeaders\", responseHeaders);\n\t\t\ttheModelMap.put(\"narrative\", narrativeString);\n\t\t\ttheModelMap.put(\"latencyMs\", theLatency);\n\n\t\t} catch (Exception e) {\n\t\t\tourLog.error(\"Failure during processing\", e);\n\t\t\ttheModelMap.put(\"errorMsg\", toDisplayError(\"Error during processing: \" + e.getMessage(), e));\n\t\t}\n\n\t}\n\n\t/**\n\t * A hook to be overridden by subclasses. The overriding method can modify the error message\n\t * based on its content and/or the related exception.\n\t *\n\t * @param theErrorMsg  The original error message to be displayed to the user.\n\t * @param theException The exception that occurred. May be null.\n\t * @return The modified error message to be displayed to the user.\n\t */\n\tprotected String toDisplayError(String theErrorMsg, Exception theException) {\n\t\treturn theErrorMsg;\n\t}\n\n\tprotected enum ResultType {\n\t\tBUNDLE, NONE, RESOURCE, TAGLIST\n\t}\n\n\tpublic static class CaptureInterceptor implements IClientInterceptor {\n\n\t\tprivate IHttpRequest myLastRequest;\n\t\tprivate IHttpResponse myLastResponse;\n//\t\tprivate String myResponseBody;\n\n\t\tpublic IHttpRequest getLastRequest() {\n\t\t\treturn myLastRequest;\n\t\t}\n\n\t\tpublic IHttpResponse getLastResponse() {\n\t\t\treturn myLastResponse;\n\t\t}\n\n//\t\tpublic String getLastResponseBody() {\n//\t\t\treturn myResponseBody;\n//\t\t}\n\n\t\t@Override\n\t\tpublic void interceptRequest(IHttpRequest theRequest) {\n\t\t\tassert myLastRequest == null;\n\n\t\t\tmyLastRequest = theRequest;\n\t\t}\n\n\t\t@Override\n\t\tpublic void interceptResponse(IHttpResponse theResponse) throws IOException {\n\t\t\tassert myLastResponse == null;\n\t\t\tmyLastResponse = theResponse;\n//\t\t\tmyLastResponse = ((ApacheHttpResponse) theResponse).getResponse();\n//\n//\t\t\tHttpEntity respEntity = myLastResponse.getEntity();\n//\t\t\tif (respEntity != null) {\n//\t\t\t\tfinal byte[] bytes;\n//\t\t\t\ttry {\n//\t\t\t\t\tbytes = IOUtils.toByteArray(respEntity.getContent());\n//\t\t\t\t} catch (IllegalStateException e) {\n//\t\t\t\t\tthrow new InternalErrorException(e);\n//\t\t\t\t}\n//\n//\t\t\t\tmyResponseBody = new String(bytes, \"UTF-8\");\n//\t\t\t\tmyLastResponse.setEntity(new MyEntityWrapper(respEntity, bytes));\n//\t\t\t}\n\t\t}\n\n//\t\tprivate static class MyEntityWrapper extends HttpEntityWrapper {\n//\n//\t\t\tprivate byte[] myBytes;\n//\n//\t\t\tpublic MyEntityWrapper(HttpEntity theWrappedEntity, byte[] theBytes) {\n//\t\t\t\tsuper(theWrappedEntity);\n//\t\t\t\tmyBytes = theBytes;\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic InputStream getContent() throws IOException {\n//\t\t\t\treturn new ByteArrayInputStream(myBytes);\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void writeTo(OutputStream theOutstream) throws IOException {\n//\t\t\t\ttheOutstream.write(myBytes);\n//\t\t\t}\n//\n//\t\t}\n\n\t}\n\n\tprivate static String sanitizeInput(String theString) {\n\t\tString retVal = theString;\n\t\tif (retVal != null) {\n\t\t\tfor (int i = 0; i < retVal.length(); i++) {\n\t\t\t\tchar nextChar = retVal.charAt(i);\n\t\t\t\tswitch (nextChar) {\n\t\t\t\t\tcase '\\'':\n\t\t\t\t\tcase '\"':\n\t\t\t\t\tcase '<':\n\t\t\t\t\tcase '>':\n\t\t\t\t\t\tretVal = retVal.replace(nextChar, '_');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn retVal;\n\t}\n\n}\n", "<?xml version=\"1.0\"?>\n<document xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/changes/1.0.0\"\n\t\t\t xsi:schemaLocation=\"http://maven.apache.org/changes/1.0.0 ./changes.xsd\">\n\t<properties>\n\t\t<author>James Agnew</author>\n\t\t<title>HAPI FHIR Changelog</title>\n\t</properties>\n\t<body>\n\t\t<release version=\"3.8.0\" date=\"TBD\" description=\"Hippo\">\n\t\t\t<action type=\"fix\">\n\t\t\t\tA potential security vulnerability in the hapi-fhir-testpage-overlay project was corrected: A URL\n\t\t\t\tparameter was not being correctly escaped, leading to a potential XSS vulnerabnility. A big thanks to\n\t\t\t\tMudit Punia and Dushyant Garg for reporting this.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Guava (base): 25-jre -&gt; 27.1-jre</li>\n\t\t\t\t\t<li>Hibernate (JPA): 5.4.1 -&gt; 5.4.2</li>\n\t\t\t\t\t<li>Jackson (JPA): 2.9.7 -&gt; 2.9.8</li>\n\t\t\t\t\t<li>Spring (JPA): 5.1.3.RELEASE -&gt; 5.1.6.RELEASE</li>\n\t\t\t\t\t<li>Spring-Data (JPA): 2.1.3.RELEASE -&gt; 2.1.6.RELEASE</li>\n\t\t\t\t\t<li>Caffeine (JPA): 2.6.2 -&gt; 2.7.0</li>\n\t\t\t\t\t<li>JANSI (CLI): 1.16 -&gt; 1.17.1</li>\n\t\t\t\t\t<!--<li>Jetty (CLI): 9.4.14.v20181114 -&gt; 9.4.17.v20190418</li>-->\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn Servers that are configured to support extended mode\n\t\t\t\t<![CDATA[<code>_elements</code>]]> parameters, it is now possible to\n\t\t\t\tuse the :exclude modifier to exclude entire resource types.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRequestDetails now has methods called getAttribute and setAttribute that can\n\t\t\t\tbe used by interceptors to pass arbitrary data between requests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe hapi-fhir-jpaserver-starter project has been updated to use a properties\n\t\t\t\tfile for configuration, making it much easier to get started with this\n\t\t\t\tproject. Thanks to Sean McIlvenna for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe hapi-fhir-jpaserver-example did not have Subscription capabilities\n\t\t\t\tenabled after the refactoring of how Subscriptions are enabled that\n\t\t\t\toccurred in HAPI FHIR 3.7.0. Thanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tRe-use subscription channel and handlers when a subscription is updated (unless the channel type changed).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the <![CDATA[<code>_elements</code>]]> parameter on searches and reads,\n\t\t\t\trequesting extensions to be included caused the extensions to be included but\n\t\t\t\tnot any values contained within. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA terminology service can now detect when Hibvernate Search (Lucene)\n\t\t\t\tis not enabled, and will perform simple ValueSet expansions without relying\n\t\t\t\ton Hibenrate Search in such cases.\n\t\t\t</action>\n\t\t\t<action type=\"change\" issue=\"1209\">\n\t\t\t\tA Google Analytics script fragment was leftover in the hapi-fhir-jpaserver\n\t\t\t\texample and starter projects. Thanks to Patrick Werner for removing these!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParametersUtil now has a utility method that can be used to add parameter values\n\t\t\t\tusing the string name of the datatype (e.g. \"dateTime\") in order to help\n\t\t\t\tbuilding Parameters resources in a version-independent way.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a search using the JPA server, if a search returned between 1500\n\t\t\t\tand 2000 results, a query for the final page of results would timeout due to\n\t\t\t\ta page calculation error. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, a much more readable error message is now returned returned when \n\t\t\t\ttwo client threads collide while trying to simultaneously create a resource with the\n\t\t\t\tsame client-assigned ID. In addition, better error messages are now returned\n\t\t\t\twhen conflicts such as this one are hit within a FHIR transaction operation.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA query builder has been optimized to take better advantage of SQL IN (..) expressions\n\t\t\t\twhen performing token searches with multiple OR values.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server transaction processor will now automatically detect if the request\n\t\t\t\tBundle contains multiple entries having identical conditional create operations, and\n\t\t\t\tcollapse these into a single operation. This is done as a convenience, since many\n\t\t\t\tconversion algorithms can accidentally generate such duplicates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1223\">\n\t\t\t\tSearching the JPA server with multiple instances of the same token search parameter\n\t\t\t\t(e.g. \"Patient?identifier=&amp;identifier=b\" returned no results even if resources\n\t\t\t\tshould have matched. Thanks to @mingdatacom for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new config setting has been added to the JPA DaoConfig that disables validation\n\t\t\t\tof the resource type for target resources in references.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHapiLocalizer can now handle message patterns with braces that aren't a part of a\n\t\t\t\tmessage format expression. E.g. \"Here is an {example}\".\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA searches using a Composite Unique Index will now use that index for faster\n\t\t\t\tsearching even if the search has _includes and/or _sorts. Previously these two\n\t\t\t\tfeatures caused the search builder to skip using the index.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA searches using a Composite Unique Index did not return the correct results if\n\t\t\t\ta REFERENCE search parameter was used with arguments that consisted of\n\t\t\t\tunqualified resource IDs.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA non-threadsafe use of DateFormat was cleaned up in the StopWatch class.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a search in the JPA server where one of the parameters is a\n\t\t\t\treference with multiple values (e.g. Patient?organization=A,B) the generated\n\t\t\t\tSQL was previously a set of OR clauses and this has been collapsed into a single\n\t\t\t\tIN clause for better performance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen returning the results of a history operation from a HAPI FHIR server,\n\t\t\t\tany entries with a method of DELETE contained a stub resource in\n\t\t\t\tBundle.entry.resource, even though the FHIR spec states that this field\n\t\t\t\tshould be empty. This was corrected.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe hapi-fhir-testpage-overlay project no longer includes any library JARs\n\t\t\t\tin the built WAR, in order to prevent duplicates and conflicts in implementing\n\t\t\t\tprojects.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTwo expunge bug fixes:\n\t\t\t\tThe first bug is that the expunge operation wasn't bailing once it hit its limit. This resulted in a\n\t\t\t\t\"Page size must not be less than one!\" error.\n\t\t\t\tThe second bug is that one case wasn't properly handled: when a resourceId with no version is provided.\n\t\t\t\tThis executed the case where only resource type is provided.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating a resource in the JPA server, if the contents have not actually changed\n\t\t\t\tthe resource version is not updated and no new version is created. In this situation,\n\t\t\t\tthe update time was modified however. It will no longer be updated.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen running the JPA server in Resource Client ID strategy mode of \"ANY\", using the\n\t\t\t\t<![CDATA[<code>_id</code>]]> search parameter could return incorrect results. This\n\t\t\t\thas been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerforming a PUT or POST against a HAPI FHIR Server with no request body caused an\n\t\t\t\tHTTP 500 to be returned instead of a more appropriate HTTP 400. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1255\">\n\t\t\t\tThe fetchValueSet method on IValidationSupport implementation was not visible and could\n\t\t\t\tnot be overridden. Thanks to Patrick Werner for the pull reuqest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1280\">\n\t\t\t\tThe JPA server failed to index R4 reources with search parameters pointing to the Money data type.\n\t\t\t\tThanks to GitHub user @navyflower for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen validating DSTU3 QuestionnaireResponses that leverage the \"enableWhen\" functionality available\n\t\t\t\tin Questionnaire resources, the validation could sometimes fail incorrectly.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded new configuration parameter to DaoConfig and ModelConfig to specify the websocket context path.\n\t\t\t\t(Before it was hardcoded to \"/websocket\").\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded new IRemovableChannel interface.  If a SubscriptionChannel implements this, then when a subscription\n\t\t\t\tchannel is destroyed (because its subscription is deleted) then the remove() method will be called on that\n\t\t\t\tchannel.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe JSON Patch provider has been switched to use the provider from the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"https://github.com/java-json-tools/json-patch\">Java JSON Tools</a>\n\t\t\t\t]]>\n\t\t\t\tproject, as it is much more robust and fault tolerant.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tEnsure that database cursors are closed immediately after performing a FHIR search.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a JSON Patch in JPA server, the post-patched document is now validated to\n\t\t\t\tensure that the patch was valid for the candidate resource. This means that invalid patches\n\t\t\t\tare caught and not just silently ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tExpunges are now done in batches in multiple threads.  Both the number of expunge threads and batch size are configurable\n\t\t\t\tin DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tValidation errors were fixed when using a Questionnaire with enableWhen on a question that\n\t\t\t\tcontains sub-items.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed \"because at least one resource has a reference to this resource\" delete error message that mistakingly reported\n\t\t\t\tthe target instead of the source with the reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tValidationSupportChain will now call isCodeSystemSupported() on each entry in the chain before\n\t\t\t\tcalling fetchCodeSystem() in order to reduce the work required by chain entries. Thanks to \n\t\t\t\tAnders Havn for the suggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.7.0\" date=\"2019-02-06\" description=\"Gale\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR is now built using OpenJDK 11. Users are recommended to upgrade to this version\n\t\t\t\tof Java if this is feasible. We are not yet dropping support for Java 8 (aka 1.8), but\n\t\t\t\tusers are recommended to upgrade if possible.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA): 5.0.8.RELEASE -&gt; 5.1.3.RELEASE</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 2.0.7.RELEASE -&gt; 2.1.3.RELEASE</li>\n\t\t\t\t\t\t<li>Hibernate-Core (JPA): 5.3.6.FINAL -&gt; 5.4.1.FINAL</li>\n\t\t\t\t\t\t<li>Hibernate-Search (JPA): 5.10.3.FINAL -&gt; 5.11.1.FINAL</li>\n\t\t\t\t\t\t<li>Thymeleaf (JPA): 3.0.9.RELEASE -&gt; 3.0.11.RELEASE</li>\n\t\t\t\t\t\t<li>thymeleaf-spring4 (Testpage Overlay) has been replaced with thymeleaf-spring5</li>\n\t\t\t\t\t\t<li>Commons-Lang3: 3.8 -&gt; 3.8.1</li>\n\t\t\t\t\t\t<li>Commons-Text: 1.4 -&gt; 1.4</li>\n\t\t\t\t\t\t<li>Spring Boot: 1.5.6.RELEASE -&gt; 2.1.1.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tChanged subscription processing, if the subscription criteria are straightforward (i.e. no\n\t\t\t\tchained references, qualifiers or prefixes) then attempt to match the incoming resource against\n\t\t\t\tthe criteria in-memory. If the subscription criteria can't be matched in-memory, then the\n\t\t\t\tserver falls back to the original subscription matching process of querying the database. The\n\t\t\t\tin-memory matcher can be disabled by setting isEnableInMemorySubscriptionMatching to \"false\" in\n\t\t\t\tDaoConfig (by default it is true). If isEnableInMemorySubscriptionMatching is \"false\", then all\n\t\t\t\tsubscription matching will query the database as before.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tRemoved BaseSubscriptionInterceptor and all its subclasses (RestHook, EMail, WebSocket). These are replaced\n\t\t\t\tby two new interceptors: SubscriptionActivatingInterceptor that is responsible for activating subscriptions\n\t\t\t\tand SubscriptionMatchingInterceptor that is responsible for matching incoming resources against activated\n\t\t\t\tsubscriptions. Call DaoConfig.addSupportedSubscriptionType(type) to configure which subscription types\n\t\t\t\tare supported in your environment. If you are processing subscriptions on a separate server and only want\n\t\t\t\tto activate subscriptions on this server, you should set DaoConfig.setSubscriptionMatchingEnabled to false.\n\t\t\t\tThe helper method SubscriptionInterceptorLoader.registerInterceptors()\n\t\t\t\twill check if any subscription types are supported, and if so then load active subscriptions into the\n\t\t\t\tSubscriptionRegistry and register the subscription activating interceptor. This method also registers\n\t\t\t\tthe subscription matching interceptor (that matches incoming resources and sends matches to subscription\n\t\t\t\tchannels) only if DaoConfig.isSubscriptionMatchingEnabled is true.\n\t\t\t\tSee https://github.com/jamesagnew/hapi-fhir/wiki/Proposed-Subscription-Design-Change for more\n\t\t\t\tdetails.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tAdded support for matching subscriptions in a separate server from the REST Server. To do this, run the\n\t\t\t\tSubscriptionActivatingInterceptor on the REST server and the SubscriptionMatchingInterceptor in the\n\t\t\t\tstandalone server. Classes required to support running a standalone subscription server are in the\n\t\t\t\tca.uhn.fhir.jpa.subscription.module.standalone package. These classes are excluded by default from\n\t\t\t\tthe JPA ApplicationContext (that package is explicitly filtered out in the BaseConfig.java @ComponentScan).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tChanged behaviour of FHIR Server to reject subscriptions with invalid criteria. If a Subscription\n\t\t\t\tis submitted with invalid criteria, the server returns HTTP 422 \"Unprocessable Entity\" and the\n\t\t\t\tSubscription is not persisted.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server $expunge operation could sometimes fail to expunge if\n\t\t\t\tanother resource linked to a resource that was being\n\t\t\t\texpunged. This has been corrected. In addition, the $expunge operation\n\t\t\t\thas been refactored to use smaller chunks of work\n\t\t\t\twithin a single DB transaction. This improves performance and reduces contention when\n\t\t\t\tperforming large expunge workloads.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1117\">\n\t\t\t\tA badly formatted log message when handing exceptions was cleaned up. Thanks to\n\t\t\t\tMagnus Watn for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"944\">\n\t\t\t\tA NullPointerException has been fixed when using custom resource classes that\n\t\t\t\thave a @Block class as a child element. Thanks to Lars Gram Mathiasen for\n\t\t\t\treporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now allows the GraphQL operation to be\n\t\t\t\tauthorized. Note that this is an all-or-nothing grant for now, it\n\t\t\t\tis not yet possible to specify individual resource security when\n\t\t\t\tusing GraphQL.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe ResponseHighlighterInterceptor now declines to handle Binary responses\n\t\t\t\tprovided as a response from extended operations. In other words if the\n\t\t\t\toperation $foo returns a Binary resource, the ResponseHighliterInterceptor will\n\t\t\t\tnot provide syntax highlighting on the response. This was previously the case for\n\t\t\t\tthe /Binary endpoint, but not for other binary responses.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFHIR Parser now has an additional overload of the\n\t\t\t\t<![CDATA[<code>parseResource</code>]]> method that accepts\n\t\t\t\tan InputStream instead of a Reader as the source.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFHIR Fluent/Generic Client now has a new return option called\n\t\t\t\t<![CDATA[<code>returnMethodOutcome</code>]]> which can be\n\t\t\t\tused to return a raw response. This is handy for invoking operations\n\t\t\t\tthat might return arbitrary binary content.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tMoved state and functionality out of BaseHapiFhirDao.java into new classes: LogicalReferenceHelper,\n\t\t\t\tResourceIndexedSearchParams, IdHelperService, SearcchParamExtractorService, and MatchUrlService.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tReplaced explicit @Bean construction in BaseConfig.java with @ComponentScan. Beans with state are annotated\n\t\t\t\twith\n\t\t\t\t@Component and stateless beans are annotated as @Service. Also changed SearchBuilder.java and the\n\t\t\t\tthree Subscriber classes into @Scope(\"protoype\") so their dependencies can be @Autowired injected\n\t\t\t\tas opposed to constructor parameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA resource reindexer was fixed: In many cases the reindexer would\n\t\t\t\tmark reindexing jobs as deleted before they had actually completed, leading to\n\t\t\t\tsome resources not actually being reindexed.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tThe JPA stale search deletion service now deletes cached search results in much\n\t\t\t\tlarger batches (20000 instead of 500) in order to reduce the amount of noise\n\t\t\t\tin the logs.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now allows arbitrary FHIR $operations to be authorized,\n\t\t\t\tincluding support for either allowing the operation response to proceed unchallenged,\n\t\t\t\tor authorizing the contents of the response.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Migrator tool enhancements:\n\t\t\t\tAn invalid SQL syntax issue has been fixed when running the CLI JPA Migrator tool against\n\t\t\t\tOracle or SQL Server. In addition, when using the \"Dry Run\" option, all generated SQL\n\t\t\t\tstatements will be logged at the end of the run. Also, a case sensitivity issue when running against\n\t\t\t\tsome Postgres databases has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, when performing a chained reference search on a search parameter with\n\t\t\t\ta target type of\n\t\t\t\t<![CDATA[<code>Reference(Any)</code>]]>, the search failed with an incomprehensible\n\t\t\t\terror. This has been corrected to return an error message indicating that the chain\n\t\t\t\tmust be qualified with a resource type for such a field. For example,\n\t\t\t\t<![CDATA[<code>QuestionnaireResponse?subject:Patient.name=smith</code>]]>\n\t\t\t\tinstead of\n\t\t\t\t<![CDATA[<code>QuestionnaireResponse?subject.name=smith</code>]]>.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe LOINC uploader has been updated to suport the LOINC 2.65 release\n\t\t\t\tfile format.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe resource reindexer can now detect when a resource's current version no longer\n\t\t\t\texists in the database (e.g. because it was manually expunged), and can automatically\n\t\t\t\tadjust the most recent version to\n\t\t\t\taccount for this.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen updating existing resources, the JPA server will now attempt to reuse/update\n\t\t\t\trows in the index tables if one row is being removed and one row is being added (e.g.\n\t\t\t\tbecause a Patient's name is changing from \"A\" to \"B\"). This has the net effect\n\t\t\t\tof reducing the number\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was corrected with the JPA reindexer, where String index columns do not always\n\t\t\t\tget reindexed if they did not have an identity hash value in the HASH_IDENTITY column.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPlain Server ResourceProvider classes are no longer required to be public classes. This\n\t\t\t\tlimitation has always been enforced, but did not actually serve any real purpose so it\n\t\t\t\thas been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new interceptor called ServeMediaResourceRawInterceptor has been added. This interceptor\n\t\t\t\tcauses Media resources to be served as raw content if the client explicitly requests\n\t\t\t\tthe correct content type cia the Accept header.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"917\">\n\t\t\t\tA new configuration item has been added to the FhirInstanceValidator that\n\t\t\t\tallows you to specify additional \"known extension domains\", meaning\n\t\t\t\tdomains in which the validator will not complain about when it\n\t\t\t\tencounters new extensions. Thanks to Heinz-Dieter Conradi for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUnder some circumstances, when a custom search parameter was added to the JPA server\n\t\t\t\tresources could start reindexing before the new search parameter had been saved, meaning that\n\t\t\t\tit was not applied to all resources. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tIn example-projects/README.md and hapi-fhir-jpaserver-example/README.md, incidate that these examples\n\t\t\t\tprojects\n\t\t\t\tare no longer maintained. The README.md points users to a starter project they should use for examples.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tReplaced use of BeanFactory with custom factory classes that Spring @Lookup the @Scope(\"prototype\") beans\n\t\t\t\t(e.g. SearchBuilderFactory).\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tMoved e-mail from address configuration from EmailInterceptor (which doesn't exist any more) to DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded 3 interfaces for services required by the standalone subscription server. The standalone subscription\n\t\t\t\tserver doesn't have access to a database and so needs to get its resources using a FhirClient. Thus\n\t\t\t\tfor each of these interfaces, there are two implementations: a Dao implementaiton and a FhirClient\n\t\t\t\timplementation. The interfaces thus introduced are ISubscriptionProvider (used to load subscriptions\n\t\t\t\tinto the SubscriptionRegistry), the IResourceProvider (used to get the latest version of a resource\n\t\t\t\tif the \"get latest version\" flag is set on the subscription) and ISearchParamProvider used to load\n\t\t\t\tcustom search parameters.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tSeparated active subscription cache from the interceptors into a new Spring component called the\n\t\t\t\tSubscriptionRegistry. This component maintains a cache of ActiveSubscriptions. An ActiveSubscription\n\t\t\t\tcontains the subscription, it's delivery channel, and a list of delivery handlers.\n\t\t\t</action>\n\t\t\t<action type=\"change\">\n\t\t\t\tIntroduced a new Spring factory interface ISubscribableChannelFactory that is used to create delivery\n\t\t\t\tchannels and handlers. By default, HAPI FHIR ships with a LinkedBlockingQueue implementation of the\n\t\t\t\tdelivery channel factory. If a different type of channel factory is required (e.g. JMS or Kafka), add it\n\t\t\t\tto your application context and mark it as @Primary.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"980\">\n\t\t\t\tWhen using the HL7.org DSTU2 structures, a QuestionnaireResponse with a\n\t\t\t\tvalue of type reference would fail to parse. Thanks to David Gileadi for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1051\">\n\t\t\t\tFHIR Servers now support the HTTP HEAD method for FHIR read operations. Thanks\n\t\t\t\tto GitHub user Cory00 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen running the JPA server on Oracle, certain search queries that return a very large number of\n\t\t\t\t_included resources failed with an SQL exception stating that too many parameters were used. Search\n\t\t\t\tinclude logic has been reworked to avoid this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA Subscription deliveries did not always include the accurate versionId if the Subscription\n\t\t\t\tmodule was configured to use an external queuing engine. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIt is now possible in a plain or JPA server to specify the default return\n\t\t\t\ttype for create/update operations when no Prefer header has been provided\n\t\t\t\tby the client.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIt is now possible in a JPA server to specify the _total calculation\n\t\t\t\tbehaviour if no parameter is supplied by the client. This is done using a\n\t\t\t\tnew setting on the DaoConfig. This can be used to force a total to\n\t\t\t\talways be calculated for searches, including large ones.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now rejects transactions with an invalid or unset request\n\t\t\t\tusing an HTTP 422 response Bundle type instead of silently refusing to authorize them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor is now able to authorize DELETE operations performed via a\n\t\t\t\ttransaction operation. Previously these were always denied.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1065\">\n\t\t\t\tOperationDefinitions are now created for named queries in server\n\t\t\t\tmodule. Thanks to Stig D\u00f8ssing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new server interceptor has been added called \"SearchNarrowingInterceptor\".\n\t\t\t\tThis interceptor can be used to automatically narrow the scope of searches\n\t\t\t\tperformed by the user to limit them to specific resources or compartments\n\t\t\t\tthat the user should have access to.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn a DSTU2 server, if search parameters are expressed with chains directly in the\n\t\t\t\tparameter name (e.g.\n\t\t\t\t<![CDATA[<code>@RequiredParam(name=\"subject.name.family\")</code>]]>) the second\n\t\t\t\tpart of the chain was lost when the chain was described in the server\n\t\t\t\tCapabilityStatement. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the JPA server, search/read operations being performed within a transaction bundle\n\t\t\t\tdid not pass the client request HTTP headers to the sub-request. This meant that\n\t\t\t\tAuthorizationInterceptor could not authorize these requests if it was depending on\n\t\t\t\theaders being present.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using a client in DSTU3/R4 mode, if the client attempted to validate the server\n\t\t\t\tCapabilityStatement but was not able to parse the response, the client would throw\n\t\t\t\tan exception with a misleading error about the Conformance resource not existing. This\n\t\t\t\thas been corrected. Thanks to Shayaan Munshi for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIt is now possible to upload a ConceptMap to the JPA server containing mappings where the\n\t\t\t\tsource or target is a StructureDefinition canonical URI. This was previously blocked, as the\n\t\t\t\tsystem could not apply these mappings. It is now permitted to be stored, although\n\t\t\t\tthe system will still not apply these mappings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA wrapper script for Maven has been added, enabling new users to use Maven without having\n\t\t\t\tto install it beforehand. Thanks to Ari Ruotsalainen for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow a user to perform a search that is scoped to a particular\n\t\t\t\tresource (e.g. Patient?_id=123) if the user has read access for that specific instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1084\">\n\t\t\t\tIn JPA Server REST Hook Subscriptions, any Headers defined in the\n\t\t\t\tSubscription resource are now applied to the outgoing HTTP\n\t\t\t\trequest.\n\t\t\t\tThanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR will now log the Git revision when it first starts up (on the ame line as the version number\n\t\t\t\tthat it already logs).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen fetching a page of search results, if a page offset beyond the total number\n\t\t\t\tof available result was requested, a single result was still returned (e.g.\n\t\t\t\trequesting a page beginning at index 1000 when there are only 10 results would\n\t\t\t\tresult in the 10th result being returned). This will now result in an empty\n\t\t\t\tresponse Bundle as would be expected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded support for _id in in-memory matcher\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe casing of the base64Binary datatype was incorrect in the DSTU3 and R4 model classes.\n\t\t\t\tThis has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a \"subscription-matching-strategy\" meta tag to incoming subscriptions with value of IN_MEMORY\n\t\t\t\tor DATABASE indicating whether the subscription can be matched against new resources in-memory or\n\t\t\t\twhether a call out to the database may be required. I say \"may\" because subscription matches fail fast\n\t\t\t\tso a negative match may be performed in-memory, but a positive match will require a database call.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a JPA search with a chained :text modifier\n\t\t\t\t(e.g. MedicationStatement?medication.code:text=aspirin,tylenol) a series\n\t\t\t\tof unneccesary joins were introduced to the generated SQL query, harming\n\t\t\t\tperformance. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA serialization error when performing some searches in the JPA server\n\t\t\t\tusing data parameters has been fixed. Thanks to GitHub user\n\t\t\t\t@PickOneFish for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1135\">\n\t\t\t\tAn issue with outdated syntax in the Vagrant file that prevent it from being used\n\t\t\t\twas corrected. Thanks to Steve Lewis for the pull requst!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1130\">\n\t\t\t\tThe HAPI FHIR tutorial server project had outdated versions of HAPI FHIR\n\t\t\t\tin its pom file. Thanks to Ricardo Estevez for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1114\">\n\t\t\t\tA NullPointerException during validation was fixed. Thanks to GitHub\n\t\t\t\tuser zilin375 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1148\">\n\t\t\t\tSupport for validating enableWhen in Questionnaires has been added to the Validator. Thanks\n\t\t\t\tto Eeva Turkka and Matti Uutsitalo for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.6.0\" date=\"2018-11-12\" description=\"Food\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Karaf (OSGi): 4.1.4 -&gt; 4.1.6</li>\n\t\t\t\t\t\t<li>Commons-Compress (JPA): 1.14 -&gt; 1.18</li>\n\t\t\t\t\t\t<li>Jackson (JPA): 2.9.2 -&gt; 2.9.7</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA migration tasks from 3.4.0 to 3.5.0 caused a failure if the HFJ_SEARCH_PARM\n\t\t\t\ttable did not exist. This table existed in previous versions of HAPI FHIR but was dropped\n\t\t\t\tin 3.5.0, meaning that migrations would fail if the database was created using a snapshot\n\t\t\t\tversion of 3.5.0.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAutomatic ID generation for contained resources (in cases where the user hasn't manually specified an ID)\n\t\t\t\thas been streamlined to generate more predictable IDs in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue in the HAPI FHIR CLI database migrator command has been resolved, where\n\t\t\t\tsome database drivers did not automatically register and had to be manually added to\n\t\t\t\tthe classpath.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe module which deletes stale searches has been modified so that it deletes very large\n\t\t\t\tsearches (searches with 10000+ results in the query cache) in smaller batches, in order\n\t\t\t\tto avoid having very long running delete operations occupying database connections for a\n\t\t\t\tlong time or timing out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen invoking an operation using the fluent client on an instance, the operation would\n\t\t\t\taccidentally invoke against the server if the provided ID did not include a type. This\n\t\t\t\thas been corrected so that an IllegalArgumentException is now thrown.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new operation has been added to the JPA server called\n\t\t\t\t<![CDATA[<code>$trigger-subscription</code>]]>. This can\n\t\t\t\tbe used to cause a transaction to redeliver a resource that previously triggered.\n\t\t\t\tSee\n\t\t\t\t<![CDATA[<a href=\"https://smilecdr.com/docs/current/fhir_repository/subscription.html#manually-triggering-subscriptions\">this link</a>]]>\n\t\t\t\tfor a description of how this feature works. Note that you must add the\n\t\t\t\tSubscriptionRetriggeringProvider as shown in the sample project\n\t\t\t\t<![CDATA[<a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/java/ca/uhn/fhir/jpa/demo/JpaServerDemo.java\">here</a>.]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen operating in R4 mode, the HAPI FHIR server will now populate Bundle.entry.response\n\t\t\t\tfor history and search results, which is did not previously do.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA database migrator tool has been enhanced so that it now supports migrations from\n\t\t\t\tHAPI FHIR 3.3.0 to HAPI FHIR 3.4.0 / 3.5.0+ as well.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the HAPI FHIR CLI, user-prompted passwords were not correctly encoded, meaning that the\n\t\t\t\t\"--basic-auth PROMPT\" action was not usable. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server SearchCoordinator has been refactored to make searches more efficient:\n\t\t\t\tWhen a search is performed, the SearchCoordinator loads multiple pages of results even\n\t\t\t\tif the user has only requested a small number. This is done in order to prevent needing\n\t\t\t\tto re-run the search for every page of results that is loaded.\n\t\t\t\tIn previous versions of HAPI FHIR, when a search was made the SearchCoordinator would\n\t\t\t\tprefetch as many results as the user could possibly request across all pages (even if\n\t\t\t\tthis meant prefetching thousands or millions of resources).\n\t\t\t\tAs of this version, a new option has been added to DaoConfig that specifies how many\n\t\t\t\tresources to prefetch. This can have a significant impact on performance for servers\n\t\t\t\twith a large number of resources, where users often only want the first page\n\t\t\t\tof results.\n\t\t\t\tSee\n\t\t\t\t<![CDATA[<code>DatConfig#setSearchPreFetchThresholds()</code>]]>\n\t\t\t\tfor configuration of this feature.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a JPA server using a date parameter, if a time is not specified in\n\t\t\t\tthe query URL, the date range is expanded slightly to include all possible\n\t\t\t\ttimezones where the date that could apply. This makes the search slightly more\n\t\t\t\tinclusive, which errs on the side of caution.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug was fixed in the JPA server $expunge operation where a database connection\n\t\t\t\tcould sometimes be opened and not returned to the pool immediately, leading to\n\t\t\t\tpool starvation if the operation was called many times in a row.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new setting has been added to the JPA server DaoConfig that causes the server\n\t\t\t\tto keep certain searches \"warm\" in the cache. This means that the search will\n\t\t\t\tbe performed periodically in the background in order to keep a reasonably fresh copy\n\t\t\t\tof the results in the query cache.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using the testpage overlay to delete a resource, currently a crash can occur\n\t\t\t\tif an unqualified ID is placed in the ID text box. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not allow FHIR batch operations when the transaction()\n\t\t\t\tpermission is granted. This has been corrected so that transaction() allows both\n\t\t\t\tbatch and transaction requests to proceed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now automatically supplies several appropriate hibernate performance\n\t\t\t\tsettings as long as the JPA EntityManagerFactory was created using HAPI FHIR's\n\t\t\t\tbuilt-in method for creating it.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tExisting JPA projects should consider using\n\t\t\t\t<![CDATA[<code>super.entityManagerFactory()</code>]]>\n\t\t\t\tas shown in\n\t\t\t\t<![CDATA[<a href=\"https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/java/ca/uhn/fhir/jpa/demo/FhirServerConfig.java#L62\">the example project</a>]]>\n\t\t\t\tif they are not already.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe FhirTerser <![CDATA[<code>getValues(...)</code>]]> methods have been overloaded. The terser can now be\n\t\t\t\tused to create a null-valued element where none exists. Additionally, the terser can now add a null-valued\n\t\t\t\textension where one or more such extensions already exist. These changes allow better population of FHIR\n\t\t\t\telements provided an arbitrary FHIR path.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe FhirTerser <![CDATA[<code>getValues(...)</code>]]> methods were not properly handling modifier\n\t\t\t\textensions for verions of FHIR prior to DSTU3. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating resources in the JPA server, a bug caused index table entries to be refreshed\n\t\t\t\tsometimes even though the index value hadn't changed. This issue did not cause incorrect search\n\t\t\t\tresults but had an effect on write performance. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe @Operation annotation used to declare operations on the Plain Server now\n\t\t\t\thas a wildcard constant which may be used for the operation name. This allows\n\t\t\t\tyou to create a server that supports operations that are not known to the\n\t\t\t\tserver when it starts up. This is generally not advisable but can be useful\n\t\t\t\tfor some circumstances.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using an @Operation method in the Plain Server, it is now possible\n\t\t\t\tto use a parameter annotated with @ResourceParam to receive the Parameters\n\t\t\t\t(or other) resource supplied by the client as the request body.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server version migrator tool now runs in a multithreaded way, allowing it to\n\t\t\t\tupgrade th database faster when migration tasks require data updates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server was fixed: When a resource was previously deleted,\n\t\t\t\ta transaction could not be posted that both restored the deleted resource but\n\t\t\t\talso contained references to the now-restored resource.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe $expunge operation could sometimes fail to delete resources if a resource\n\t\t\t\tto be deleted had recently been returned in a search result. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new setting has been added to the JPA Server DopConfig that controls the\n\t\t\t\tbehaviour when a client-assigned ID is encountered (i.e. the client performs\n\t\t\t\tan HTTP PUT to a resource ID that doesn't already exist on the server). It is\n\t\t\t\tnow possible to disallow this action, to only allow alphanumeric IDs (the default\n\t\t\t\tand only option previously) or allow any IDs including alphanumeric.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1103\" dev=\"ruthakm\">\n\t\t\t\tIt is now possible to use your own IMessageResolver instance in the narrative\n\t\t\t\tgenerator. Thanks to Ruth Alkema for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1071\" dev=\"volsch\">\n\t\t\t\tWhen restful reponses tried to return multiple instances of the same response header,\n\t\t\t\tsome instances were discarded. Thanks to Volker Schmidt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST client now allows for configurable behaviour as to whether a\n\t\t\t\t<![CDATA[<code>_format</code>]]>\n\t\t\t\tparameter should be included in requests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server R4 SearchParameter custom expression validation is now done using the\n\t\t\t\tactual FHIRPath evaluator, meaning it is more rigorous in what it can find.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1047\">\n\t\t\t\tA NullPointerException in DateRangeParam when a client URL conrtained a malformed\n\t\t\t\tdate was corrected. Thanks Heinz-Dieter Conradi for the Pull Request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.5.0\" date=\"2018-09-17\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR now supports JDK 9 and JDK 10, both for building HAPI FHIR\n\t\t\t\tas well as for use. JDK 8 remains supported and is the minimum requirement\n\t\t\t\tin order to build or use HAPI FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new command has been added to the HAPI FHIR CLI tool: \"migrate-database\". This\n\t\t\t\tcommand performs the schema modifications required when upgrading HAPI FHIR JPA\n\t\t\t\tto a new version (previously this was a manual process involving running scripts and\n\t\t\t\treindexing everything).\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br>\n\t\t\t\tSee the\n\t\t\t\t<a href=\"http://hapifhir.io/doc_cli.html#migrate-database\">command documentation</a>\n\t\t\t\tfor more information on how to use this tool. Please post in the HAPI FHIR\n\t\t\t\tGoogle Group if you run into issues, as this is a brand new framework and we still need\n\t\t\t\tlots of help with testing.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Gson (JSON Parser): 2.8.1 -&gt; 2.8.5</li>\n\t\t\t\t\t\t<li>Spring Framework (JPA): 5.0.3.RELEASE -&gt; 5.0.8.RELEASE</li>\n\t\t\t\t\t\t<li>Hibernate ORM (JPA): 5.2.16.Final -&gt; 5.3.6.Final</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.7.1.Final -&gt; 5.10.3.Final</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.4.8.v20171121 -&gt; 9.4.12.v20180830</li>\n\t\t\t\t\t\t<li>Commons-Codec (All): 1.10 -&gt; 1.11</li>\n\t\t\t\t\t\t<li>Commons-Lang (All): 3.7 -&gt; 3.8</li>\n\t\t\t\t\t\t<li>Commons-IO (All): 2.5 -&gt; 2.6</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 1.11.6.RELEASE -&gt; 2.0.7.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new mnandatory library depdendency has been added to hapi-fhir-base, meaning that all\n\t\t\t\tapplications using HAPI FHIR must import ti: commons-text. This library has been added as\n\t\t\t\ta few utility methods used by HAPI FHIR that were formerly in the commons-lang3\n\t\t\t\tproject have been moved into commons-text. This library has been added as a non-optional\n\t\t\t\tdependency in the hapi-fhir-base POM, so Maven/Gradle users should not have to make\n\t\t\t\tany changes.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now has a configuration item in the DaoConfig to specify which bundle types\n\t\t\t\tmay be stored as-is on the /Bundle endpoint. By default the following types\n\t\t\t\tare allowed: collection, document, message.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCapabilityStatements generated by the server module will now include the server\n\t\t\t\tbase URL in the\n\t\t\t\t<![CDATA[<code>CapabilityStatement.implementation.url</code>]]>\n\t\t\t\tfield.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"974\">\n\t\t\t\tSpring-data (used by the JPA server) has been upgraded to version 2.0.7\n\t\t\t\t(from version 1.11.6). Thanks to Roman Doboni for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash in the validator was fixed: Validating a Bundle that did not have Bundle.fullUrl\n\t\t\t\tpopulated could cause a NullPointerException.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor now examines requests more closely in order\n\t\t\t\tto block requests early that are not possibly going to return\n\t\t\t\tallowable results when compartment rules are used. For example,\n\t\t\t\tif an AuthorizationInterceptor is configured to allow only\n\t\t\t\t<![CDATA[<b>read</b>]]>\n\t\t\t\taccess to compartment\n\t\t\t\t<![CDATA[<code>Patient/123</code>]]>,\n\t\t\t\ta search for\n\t\t\t\t<![CDATA[<code>Observation?subject=987</code>]]>\n\t\t\t\twill now be blocked before the method handler is called. Previously\n\t\t\t\tthe search was performed and the results were examined in order to\n\t\t\t\tdetermine whether they were all in the appropriate compartment, but\n\t\t\t\tthis incurs a performance cost, and means that this search would\n\t\t\t\tsuccessfully return an empty Bundle if no matches were present.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new setting on AuthorizationInterceptor called\n\t\t\t\t<![CDATA[<code>setFlags(flags)</code>]]>\n\t\t\t\tcan be used to maintain the previous behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"974\">\n\t\t\t\tJPA server loading logic has been improved to enhance performance when\n\t\t\t\tloading a large number of results in a page, or when loading multiple\n\t\t\t\tsearch results with tags. Thanks to Frank Tao for the pull request!\n\t\t\t\tThis change was introduced as a part of a collaboration between\n\t\t\t\tHAPI FHIR and the US National Institiutes for Health (NIH).\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1010\">\n\t\t\t\tResource loading logic for the JPA server has been optimized to\n\t\t\t\treduce the number of database round trips required when loading\n\t\t\t\tsearch results where many of the entries have a \"forced ID\" (an alphanumeric\n\t\t\t\tclient-assigned resource ID). Thanks to Frank Tao for the pull\n\t\t\t\trequest!\n\t\t\t\tThis change was introduced as a part of a collaboration between\n\t\t\t\tHAPI FHIR and the US National Institiutes for Health (NIH).\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1000\">\n\t\t\t\tLOINC uploader has been updated to support the new LOINC filename\n\t\t\t\tscheme introduced in LOINC 2.64. Thanks to Rob Hausam for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the JPA server, it is now possible for a custom search parameter\n\t\t\t\tto use the\n\t\t\t\t<![CDATA[<code>resolve()</code>]]> function in its path to descend into\n\t\t\t\tcontained resources and index fields within them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new IValidationSupport implementation has been added, named CachingValidationSupport. This\n\t\t\t\tmodule wraps another implementation and provides short-term caching. This can have a dramatic\n\t\t\t\tperformance improvement on servers that are validating or executing FHIRPath repeatedly\n\t\t\t\tunder load. This module is used by default in the JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn index in the JPA server on the HFJ_FORCED_ID table was incorrectly\n\t\t\t\tnot marked as unique. This meant that under heavy load it was possible to\n\t\t\t\tcreate two resources with the same client-assigned ID.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server\n\t\t\t\t<![CDATA[<code>$expunge</code>]]>\n\t\t\t\toperation deleted components of an individual resource record in\n\t\t\t\tseparate database transactions, meaning that if an operation failed\n\t\t\t\tunexpectedly resources could be left in a weird state. This has been\n\t\t\t\tcorrected.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1015\">\n\t\t\t\tA bug was fixed in the JPA terminology uploader, where it was possible\n\t\t\t\tin some cases for some ValueSets and ConceptMaps to not be saved because\n\t\t\t\tof a premature short circuit during deferred uploading. Thanks to\n\t\t\t\tJoel Schneider for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"969\">\n\t\t\t\tA bug in the HAPI FHIR CLI was fixed, where uploading terminology for R4\n\t\t\t\tcould cause an error about the incorrect FHIR version. Thanks to\n\t\t\t\tRob Hausam for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method has been added to AuthorizationInterceptor that can be used to\n\t\t\t\tcreate rules allowing FHIR patch operations. See\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_rest_server_security.html#Authorizing_Patch_Operations\">Authorizing Patch Operations</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1018\">\n\t\t\t\tA new view has been added to the JPA server, reducing the number of database\n\t\t\t\tcalls required when reading resources back. This causes an improvement in performance.\n\t\t\t\tThanks to Frank Tao for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash was fixed when deleting a ConceptMap resource in the\n\t\t\t\tJPA server. This crash was a regression in HAPI FHIR 3.4.0.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash in the JPA server when performing a manual reindex of a deleted resource\n\t\t\t\twas fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUsing the generic/fluent client, it is now possible to\n\t\t\t\tinvoke the $process-message method using a standard\n\t\t\t\tclient.operation() call. Previously this caused a strange\n\t\t\t\tNullPointerException.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe REST Server now sanitizes URL path components and query parameter\n\t\t\t\tnames to escape several reserved characters (e.g. &quot; and &lt;)\n\t\t\t\tin order to prevent HTML injection attacks via maliciously\n\t\t\t\tcrafted URLs.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"912\">\n\t\t\t\tThe generic/fluent client now supports the :contains modifier on\n\t\t\t\tstring search params. Thanks to Clayton Bodendein for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"996\">\n\t\t\t\tThe HAPI FHIR Server has been updated to correctly reflect the current\n\t\t\t\tFHIR specification behaviour for the Prefer header. This means that\n\t\t\t\tthe server will no longer return an OperationOutcome by default, but\n\t\t\t\tthat one may be requested via a Prefer header, using the newly implemented\n\t\t\t\t\"Repreentation: OperationOutcome\" value.\n\t\t\t\tThanks to Ana Maria Radu for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST Server module now allows more than one Resource Provider\n\t\t\t\t(i.e. more than one implementation of IResourceProvider) to be registered\n\t\t\t\tto the RestfulServer for the same resource type. Previous versions of\n\t\t\t\tHAPI FHIR have always limited support to a single resource provider, but\n\t\t\t\tthis limitation did not serve any purpose so it has been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HashMapResourceProvider now supports the type and\n\t\t\t\tinstance history operations. In addition, the search method\n\t\t\t\tfor the\n\t\t\t\t<![CDATA[<code>_id</code>]]> search parameter now has the\n\t\t\t\tsearch parameter marked as \"required\". This means that additional\n\t\t\t\tsearch methods can be added in subclasses without their intended\n\t\t\t\tsearches being routed to the searchById method. Also, the resource\n\t\t\t\tmap now uses a LinkedHashMap, so searches return a predictable\n\t\t\t\torder for unit tests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed a bug when creating a custom search parameter in the JPA\n\t\t\t\tserver: if the SearchParameter resource contained an invalid\n\t\t\t\texpression, create/update operations for the given resource would\n\t\t\t\tfail with a cryptic error. SearchParameter expressions are now\n\t\t\t\tvalidated upon storage, and the SearchParameter will be rejected\n\t\t\t\tif the expression can not be processed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe generic client history operations (history-instance, history-type,\n\t\t\t\tand history-server) now support the\n\t\t\t\t<![CDATA[<code>_at</code>]]> parameter.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn the plain server, many resource provider method parameters may now\n\t\t\t\tuse a generic\n\t\t\t\t<![CDATA[<code>IPrimitiveType&lt;String&gt;</code>]]>\n\t\t\t\tor\n\t\t\t\t<![CDATA[<code>IPrimitiveType&lt;Date&gt;</code>]]> at the\n\t\t\t\tparameter type. This is handy if you are trying to write code\n\t\t\t\tthat works across versions of FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSeveral convenience methods have been added to the fluent/generic\n\t\t\t\tclient interfaces. These methods allow the adding of a sort via a\n\t\t\t\tSortSpec object, as well as specifying search parameters via a plain\n\t\t\t\tMap of Strings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new client interceptor called ThreadLocalCapturingInterceptor has been\n\t\t\t\tadded. This interceptor works the same way as CapturingInterceptor in that\n\t\t\t\tit captures requests and responses for later processing, but it uses\n\t\t\t\ta ThreadLocal object to store them in order to facilitate\n\t\t\t\tuse in multithreaded environments.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new constructor has been added to the client BasicAuthInterceptor\n\t\t\t\tallowing credentials to be specified in the form\n\t\t\t\t\"username:password\" as an alternate to specifying them as two\n\t\t\t\tdiscrete strings.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSimpleBundleProvider has been modified to optionally allow calling\n\t\t\t\tcode to specify a search UUID, and a field to allow the preferred\n\t\t\t\tpage size to be configured.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server search UUID column has been reduced in length from\n\t\t\t\t40 chars to 36, in order to align with the actual length of the\n\t\t\t\tgenerated UUIDs.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPlain servers using paging may now specify an ID/name for\n\t\t\t\tindividual pages being returned, avoiding the need to\n\t\t\t\trespond to arbitrary offset/index requests from the server.\n\t\t\t\tIn this mode, page links in search result bundles simply\n\t\t\t\tinclude the ID to the next page.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"965\">\n\t\t\t\tAn issue was fixed in BundleUtil#toListOfEntries, where sometimes\n\t\t\t\ta resource could be associated with the wrong entry in the response.\n\t\t\t\tThanks to GitHub user @jbalbien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA subscription delivery queues no longer store the resource body in the\n\t\t\t\tqueue (only the ID), which should reduce the memory/disk footprint of the queue\n\t\t\t\twhen it grows long.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1053\">\n\t\t\t\tA bug was fixed in JPA server searches: When performing a search with a _lastUpdate\n\t\t\t\tfilter, the filter was applied to any _include values, which it should not have been.\n\t\t\t\tThanks to Deepak Garg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen performing a ConceptMap/$translate operation with reverse=\"true\" in the arguments,\n\t\t\t\tthe equivalency flag is now set on the response just as it is for a non-reverse lookup.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen executing a FHIR transaction in JPA server, if the request bundle contains\n\t\t\t\tplaceholder IDs references (i.e. \"urn:uuid:*\" references) that can not be resolved\n\t\t\t\tanywhere else in the bundle, a user friendly error is now returned. Previously,\n\t\t\t\ta cryptic error containing only the UUID was returned. As a part of this change,\n\t\t\t\ttransaction processing has now been consolidated into a single codebase for DSTU3\n\t\t\t\t/ R4 (and future) versions of FHIR. This should greatly improve maintainability\n\t\t\t\tand consistency for transaction processing.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlighterInterceptor now displays the total size of the output and\n\t\t\t\tan estimate of the transfer time at the bottom of the response.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1022\">\n\t\t\t\tThe Prefer header is now honoured for HTTP PATCH requests. Thanks to\n\t\t\t\tAlin Leonard for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe <![CDATA[<code>Composition</code>]]> operation <![CDATA[<code>$document</code>]]> has been\n\t\t\t\timplemented. Thanks to Patrick Werner for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR CLI commands that allow Basic Auth credentials or a Bearer Token may now use\n\t\t\t\ta value of \"PROMPT\" to cause the CLI to prompt the user for credentials using an\n\t\t\t\tinteractive prompt.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tThe experimental \"dynamic mode\" for search parameter registration has been removed. This\n\t\t\t\tmode was never published or documented and was labelled as experimental, so I am hoping it\n\t\t\t\twas never depended on by anyone. Please post on the HAPI FHIR mailing list if this\n\t\t\t\tchange affects you.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA crash was fixed when using the ConceptMap/$translate operation to translate a mapping\n\t\t\t\twhere the equivalence was not specified.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe maximum length for codes in the JPA server terminology service have been increased\n\t\t\t\tto 500 in order to better accomodate code systems with very long codes.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the DSTU3 validator was fixed where validation resources such as StructureDefinitions\n\t\t\t\tand Questionnaires were cached in a cache that never expired, leading to validations against\n\t\t\t\tstale versions of resources.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the REST server, if an incoming request has the Content-Encoding header, the server will\n\t\t\t\tnot try to read request parameters from the content stream. This avoids an incompatibility with\n\t\t\t\tnew versions of Jetty.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"1050\">\n\t\t\t\tCustom profile names when not matching standard FHIR profile names, are now\n\t\t\t\thandled properly by the validator. Thanks to Anthony Sute\n\t\t\t\tfor the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now performs a count query instead of a more expensive data query\n\t\t\t\twhen searches using\n\t\t\t\t<![CDATA[<code>_summary=count</code>]]>.\n\t\t\t\tThis means that a total will always be returned in the Bundle (this isn't always\n\t\t\t\tguaranteed otherwise, since the Search Controller can result in data being returned\n\t\t\t\tbefore the total number of results is known).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server SearchCoordinator now prefetches only a smaller and configurable number\n\t\t\t\tof results during the initial search request, and more may be requested in subsequent\n\t\t\t\tpage requests. This change may have a significant improvement on performance: in\n\t\t\t\tprevious versions of HAPI FHIR, even if the user only wanted the first page of 10\n\t\t\t\tresults, many many more might be prefetched, consuming database resources and\n\t\t\t\tserver time.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.4.0\" date=\"2018-05-28\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Commons-Lang3 (All): 3.6 -&gt; 3.7</li>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.12.Final -&gt; 5.2.16.Final</li>\n\t\t\t\t\t\t<li>Javassist (JPA): 3.20.0-GA -&gt; 3.22.0-GA</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSeveral enhancements have been made to the JPA server index\n\t\t\t\ttables. These enhancements consist of new colums that will be\n\t\t\t\tused in a future version of HAPI FHIR to significantly decrease\n\t\t\t\tthe amount of space required for indexes on token and string index\n\t\t\t\ttypes.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThese new columns are not yet used in HAPI FHIR 3.4.0 but will be\n\t\t\t\tenabled in HAPI FHIR 3.5.0. Anyone upgrading to HAPI FHIR 3.4.0 (or above)\n\t\t\t\tis recommended to invoke the following SQL statement on their\n\t\t\t\tdatabase in order to reindex all data in a background job:\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\t<![CDATA[<pre>update HFJ_RESOURCE set SP_INDEX_STATUS = null;</pre>]]>\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tNote that if you do this reindex now, you will not have any downtime while\n\t\t\t\tyou upgrade to HAPI FHIR 3.5.0. If you need to perform the reindex at the\n\t\t\t\ttime that you upgrade to HAPI FHIR 3.5.0 some indexes may not be\n\t\t\t\tavailable.\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tIn addition, the following schema changes should be made while upgrading:\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\t<![CDATA[<pre>update table TRM_CODESYSTEM_VER drop column RES_VERSION_ID;\nalter table TRM_CODESYSTEM_VER drop constraint IDX_CSV_RESOURCEPID_AND_VER</pre>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tR4 structures have been updated to the latest definitions\n\t\t\t\t(SVN 13732)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"846\">\n\t\t\t\tWhen calling a getter on a DSTU3/R4 structure for a choice type\n\t\t\t\t(e.g. Observation#getValueString()), a NullPointerException\n\t\t\t\twas thrown if there was no value in this field, and the NPE\n\t\t\t\thad no useful error message. Now this method call will simply\n\t\t\t\treturn null.\n\t\t\t\tmethod\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a FHIR resource update in the JPA server\n\t\t\t\twhere the update happens within a transaction, and the\n\t\t\t\tresource being updated contains placeholder IDs, and\n\t\t\t\tthe resource has not actually changed, a new version was\n\t\t\t\tcreated even though there was not actually any change.\n\t\t\t\tThis particular combination of circumstances seems very\n\t\t\t\tspecific and improbable, but it is quite common for some\n\t\t\t\ttypes of solutions (e.g. mapping HL7v2 data) so this\n\t\t\t\tfix can prevent significant wasted space in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server index tables did not have a column length specified\n\t\t\t\ton the resource type column. This caused the default of 255 to\n\t\t\t\tbe used, which wasted a lot of space since resource names are all\n\t\t\t\tless than 30 chars long and a single resource can have 10-100+\n\t\t\t\tindex rows depending on configuration. This has now been set\n\t\t\t\tto a much more sensible 30.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe LOINC uploader for the JPA Terminology Server has been\n\t\t\t\tsignificantly beefed up so that it now takes in the full\n\t\t\t\tset of LOINC distribution artifacts, and creates not only\n\t\t\t\tthe LOINC CodeSystem but a complete set of concept properties,\n\t\t\t\ta number of LOINC ValueSets, and a number of LOINC ConceptMaps.\n\t\t\t\tThis work was sponsored by the Regenstrief Institute. Thanks\n\t\t\t\tto Regenstrief for their support!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe DSTU2 validator has been refactored to use the same codebase\n\t\t\t\tas the DSTU3/R4 validator (which were harmonized in HAPI FHIR 3.3.0).\n\t\t\t\tThis means that we now have a single codebase for all validators, which\n\t\t\t\timproves maintainability and brings a number of improvements\n\t\t\t\tto the accuracy of DSTU2 resource validation.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding a resource that had contained resources with user-supplied\n\t\t\t\tlocal IDs (e.g. resource.setId(\"#1\")) as well as contained resources\n\t\t\t\twith no IDs (meaning HAPI should automatically assign a local ID\n\t\t\t\tfor these resources) it was possible for HAPI to generate\n\t\t\t\ta local ID that already existed, making the resulting\n\t\t\t\tserialization invalid. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe REST Generic Client now supports invoking an operation\n\t\t\t\ton a specific version of a resource instance.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new operation has been added to the JPA server called\n\t\t\t\t\"$expunge\". This operation can be used to physically delete\n\t\t\t\told versions of resources, logically deleted resources, or\n\t\t\t\teven all resources in the database.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn experimental new feature has been added to AuthorizationInterceptor which\n\t\t\t\tallows user-supplied checkers to add additional checking logic\n\t\t\t\tto determine whether a particular rule applies. This could be\n\t\t\t\tused for example to restrict an auth rule to particular\n\t\t\t\tsource IPs, or to only allow operations with specific\n\t\t\t\tparameter values.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new qualifier has been added to the AuthorizationInterceptor\n\t\t\t\tRuleBuilder that allows a rule on an operation to match\n\t\t\t\t<![CDATA[<code>atAnyLevel()</code>]]>, meaning that the rule\n\t\t\t\tapplies to the operation by name whether it is at the\n\t\t\t\tserver, type, or instance level.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCalling <![CDATA[<code>IdType#withVersion(String)</code>]]>\n\t\t\t\twith a null/blank parameter will now return a copy of the\n\t\t\t\tID with the version removed. Previously this call would\n\t\t\t\tdeliberately cause an IllegalArgumentException.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen updating resources on the JPA server, tags did not always\n\t\t\t\tconsistently follow FHIR's recommended rules for tag retention. According\n\t\t\t\tto FHIR's rules, if a tag is not explicitly present on an update but\n\t\t\t\twas present on the previous version, it should be carried forward anyhow.\n\t\t\t\tDue to a bug, this happened when more than one tag was present\n\t\t\t\tbut not when only one was present. This has been corrected. In\n\t\t\t\taddition, a new request header called\n\t\t\t\t<![CDATA[<code>X-Meta-Snapshot-Mode</code>]]>\n\t\t\t\thas been added that can be used by the client to override\n\t\t\t\tthis behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe JPA server's resource counts query has been optimized to\n\t\t\t\tgive the database a bit more flexibility to\n\t\t\t\toptimize, which should increase performance for this query.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server CapabilityStatement generator has been tuned\n\t\t\t\tso that resource counts are no longer calculated synchronously\n\t\t\t\tas a part of building the CapabilityStatement response. With\n\t\t\t\tthis change, counts are calculated in the background and cached\n\t\t\t\twhich can yield significant performance improvements on\n\t\t\t\thevaily loaded servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a significant performance regression in 3.3.0 when validating DSTU3 content using the\n\t\t\t\tInstanceValidator. From 3.3.0 onward, StructureDefinitions are converted to FHIR R4\n\t\t\t\tcontent on the fly in order to reduct duplication in the codebase. These conversions\n\t\t\t\thappened upon every validation however, instead of only happening once which adversely\n\t\t\t\taffected performance. A cache has been added.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"903\">\n\t\t\t\tFix a bug in the DSTU2 QuestionnaireResponseValidator which prevented validation\n\t\t\t\ton groups with only one question. Thanks David Gileadi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"709\">\n\t\t\t\tThe <![CDATA[<code>ConceptMap</code>]]> operation <![CDATA[<code>$translate</code>]]> has been\n\t\t\t\timplemented.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"927\">\n\t\t\t\tHAPI-FHIR_CLI now includes two new commands: one for importing and populating a\n\t\t\t\t<![CDATA[<code>ConceptMap</code>]]> resource from a CSV; and one for exporting a\n\t\t\t\t<![CDATA[<code>ConceptMap</code>]]> resource to a CSV.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tOperation methods on a plain server may now use parameters\n\t\t\t\tof type String (i.e. plain Java strings), and any FHIR primitive\n\t\t\t\tdatatype will be automatically coerced into a String.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HAPI FHIR CLI now supports importing an IGPack file as an import\n\t\t\t\tto the validation process.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen two threads attempt to update the same resource at the same time, previously\n\t\t\t\tan unspecified error was thrown by the JPA server. An HTTP 409\n\t\t\t\t(Conflict) with an informative error message is now thrown.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server's DSTU2 transaction processing routine caused it\n\t\t\t\tto occasionally consume two database connections, which could lead to deadlocks\n\t\t\t\tunder heavy load. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor sometimes incorrectly identified an operation\n\t\t\t\tinvocation at the type level as being at the instance level if the method\n\t\t\t\tindicated that the IdParam parameter was optional. This has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStructureDefinitions for the FHIR standard extensions have been added to the\n\t\t\t\thapi-fhir-validation-resources-XXXX modules. Thanks to Patrick Werner for the\n\t\t\t\tpull request! These have also been added to the list of definitions uploaded\n\t\t\t\tby the CLI \"upload-definitions\" command.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA workaround for an invalid search parameter path in the R4 consent\n\t\t\t\tresource has been implemented. This path was preventing some Consent\n\t\t\t\tresources from successfully being uploaded to the JPA server. Thanks to\n\t\t\t\tAnthony Sute for identifying this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"937\">\n\t\t\t\tA hard-to-understand validation message was fixed in the validator when\n\t\t\t\tvalidating against profiles that declare some elements as mustSupport\n\t\t\t\tbut have others used but not declared as mustSupport. Thanks to Patrick\n\t\t\t\tWerner for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"926\">\n\t\t\t\tThe HAPI FHIR CLI is now available for installation on OSX using the\n\t\t\t\t(really excellent) Homebrew package manager thanks to an effort by\n\t\t\t\tJohn Grimes to get it added. Thanks John!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"953\">\n\t\t\t\tWhen the REST Server experiences an expected error (such as a NullPointerException)\n\t\t\t\tin a resource provider class, a simple message of \"Failed to call access method\" is\n\t\t\t\treturned to the user. This has been enhanced to also include the message from\n\t\t\t\tthe underlying exception.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"836\">\n\t\t\t\tA bug in the plain server was fixed that prevented some includes from\n\t\t\t\tcorrectly causing their targets to be included in the response bundle.\n\t\t\t\tThanks to GitHub user @RuthAlk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"857\">\n\t\t\t\tDateRangeParameter was enhanced to support convenient method chanining, and\n\t\t\t\tthe parameter validation was improved to only change state after validating\n\t\t\t\tthat parameters were valid. Thanks to Gaetano Gallo for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"867\">\n\t\t\t\tThe HumanName DSTU3+ datatype had convenience methods for testing\n\t\t\t\twhether the name has a specific given name or not, but these methods\n\t\t\t\tdid not work. Thanks to Jason Owen for reporting and providing a test\n\t\t\t\tcase!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"874\">\n\t\t\t\tAn issue was corrected in the validator where Questionnaire references that\n\t\t\t\tused contained resources caused an unexpected crash. Thanks to\n\t\t\t\tHeinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"875\">\n\t\t\t\tAn issue in the narrative generator template for the CodeableConcept\n\t\t\t\tdatatype was corrected. Thanks to @RuthAlk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server automatic reindexing process has been tweaked so that it no\n\t\t\t\tlonger runs once per minute (this was a heavy strain on large databases)\n\t\t\t\tbut will instead run once an hour unless triggered for some reason. In addition,\n\t\t\t\tthe number of threads allocated to reindexing may now be adjusted via a\n\t\t\t\tsetting in the DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not correctly grant access to resources\n\t\t\t\tby compartment when the reference on the target resource that pointed\n\t\t\t\tto the compartment owner was defined using a resource object (ResourceReference#setResource)\n\t\t\t\tinstead of a reference (ResourceReference#setReference).\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"880\">\n\t\t\t\tSeveral tests were added to ensure accurate validation of QuestionnaireResponse\n\t\t\t\tresources. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"886\">\n\t\t\t\tA NullPointerException when validating some QuestionnaireResponse reousrces\n\t\t\t\twas fixed in the validator. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"892\">\n\t\t\t\tQuestionnaireResponse answers of type \"text\" may now be validated by the\n\t\t\t\tFhirInstanceValidator. Thanks to Heinz-Dieter Conradi for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe REST server has been modified so that the\n\t\t\t\t<![CDATA[<code>Location</code>]]>\n\t\t\t\theader is no longer returned by the server on read or update responses.\n\t\t\t\tThis header was returned in the past, but this header is actually\n\t\t\t\tinappropriate for any response that is not a create operation.\n\t\t\t\tThe\n\t\t\t\t<![CDATA[<code>Content-Location</code>]]>\n\t\t\t\twill still be returned, and will hold the same contents.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe Postgres sample JPA project was fixed to use the current version\n\t\t\t\tof HAPI FHIR (it was previously stuck on 2.2). Thanks to\n\t\t\t\tKai Liu for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.3.0\" date=\"2018-03-29\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThis release corrects an inefficiency in the JPA Server, but requires a schema\n\t\t\t\tchange in order to update. Prior to this version of HAPI FHIR, a CLOB column\n\t\t\t\tcontaining the complete resource body was stored in two\n\t\t\t\ttables: HFJ_RESOURCE and HFJ_RES_VER. Because the same content was stored in two\n\t\t\t\tplaces, the database consumed more space than is needed to.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn order to reduce this duplication, the\n\t\t\t\t<![CDATA[<code>RES_TEXT</code> and <code>RES_ENCODING</code>]]>\n\t\t\t\tcolumns have been\n\t\t\t\t<![CDATA[<b>dropped</b>]]>\n\t\t\t\tfrom the\n\t\t\t\t<![CDATA[<code>HFJ_RESOURCE]]>\n\t\t\t\ttable, and the\n\t\t\t\t<![CDATA[<code>RES_TEXT</code> and <code>RES_ENCODING</code>]]>\n\t\t\t\tcolumns have been\n\t\t\t\t<![CDATA[<b>made NULLABLE</b>]]>\n\t\t\t\ton the\n\t\t\t\t<![CDATA[<code>HFJ_RES_VER]]>\n\t\t\t\ttable.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThe following migration script may be used to apply these changes to\n\t\t\t\tyour database. Naturally you should back your database up prior to\n\t\t\t\tmaking this change.\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>ALTER TABLE hfj_resource DROP COLUMN res_text;\nALTER TABLE hfj_resource DROP COLUMN res_encoding;\nALTER TABLE hfj_res_ver ALTER COLUMN res_encoding DROP NOT NULL;\nALTER TABLE hfj_res_ver ALTER COLUMN res_text DROP NOT NULL;</pre>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe validation module has been refactored to use the R4 (currently maintained)\n\t\t\t\tvalidator even for DSTU3 validation. This is done by using an automatic\n\t\t\t\tconverter which converts StructureDefinition/ValueSet/CodeSystem resources\n\t\t\t\twhich are used as inputs to the validator. This change should fix a number\n\t\t\t\tof known issues with the validator, as they have been fixed in R4 but\n\t\t\t\tnot in DSTU3. This also makes our validator much more maintainable\n\t\t\t\tsince it is now one codebase.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.10.Final -&gt; 5.2.12.Final</li>\n\t\t\t\t\t\t<li>Spring (JPA): 5.0.0 -&gt; 5.0.3</li>\n\t\t\t\t\t\t<li>Thymeleaf (Web Tespage Overlay): 3.0.7.RELEASE -&gt; 3.0.9.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"871\">\n\t\t\t\tA number of HAPI FHIR modules have been converted so that they now work\n\t\t\t\tas OSGi modules. Unlike the previous OSGi module, which was a mega-JAR\n\t\t\t\twith all of HAPI FHIR in it, this is simply the appropriate\n\t\t\t\tOSGi manifest inside the existing JARs. Thanks to John Poth\n\t\t\t\tfor the Pull Request!\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br/>\n\t\t\t\tNote that this does not cover all modules in the project. Current support includes:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>HAPI-FHIR structures DSTU2, HL7ORGDSTU2, DSTU2.1, DSTU3, R4</li>\n\t\t\t\t\t<li>HAPI-FHIR Resource validation DSTU2, HL7ORGDSTU2, DSTU2.1, DSTU3, R4</li>\n\t\t\t\t\t<li>Apache Karaf features for all the above</li>\n\t\t\t\t\t<li> Integration Tests</li>\n\t\t\t\t</ul>\n\t\t\t\tRemaining work includes:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>HAPI-FHIR Server support</li>\n\t\t\t\t\t<li> HAPI-FHIR narrative support. This might be tricky as Thymeleaf doesn't support OSGi.</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in the JSON parser when parsing extensions on repeatable\n\t\t\t\telements (e.g. Patient.address.line) where there is an extension on the\n\t\t\t\tfirst repetition but not on subsequent repetitions of the\n\t\t\t\trepeatable primitive. Thanks to Igor Sirkovich for providing a\n\t\t\t\ttest case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"832\">\n\t\t\t\tFix an issue where the JPA server crashed while attempting to normalize string values\n\t\t\t\tcontaining Korean text. Thanks to GitHub user @JoonggeonLee for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was solved where it was possible for server interceptors\n\t\t\t\tto have both processingCompletedNormally and handleException called\n\t\t\t\tif the stream.close() method threw an exception. Thanks to Carlos\n\t\t\t\tEduardo Lara Augusto for investigating!\n\t\t\t</action>\n\t\t\t<action type=\"remove\" issue=\"831\">\n\t\t\t\tThe <![CDATA[<code>@TagListParam</code>]]> annotation has been removed. This\n\t\t\t\tannotation had no use after DSTU1 but never got deleted and was misleading. Thanks\n\t\t\t\tto Angelo Kastroulis for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method overload has been added to IServerInterceptor:\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>outgoingResponse(RequestDetails, ResponseDetails, HttpServletRequest, HttpServletResponse)\n\t\t\t\t]]>. This new method allows an interceptor to completely replace\n\t\t\t\tthe resource being returned with a different resource instance, or\n\t\t\t\tto modify the HTTP Status Code being returned. All other \"outgoingResponse\"\n\t\t\t\tmethods have been deprecated and are recommended to be migrated\n\t\t\t\tto the new method. This new method (with its RequestDetails and ResponseDetails\n\t\t\t\tparameters) should be flexible enough to\n\t\t\t\taccommodate future needs which means that this should be the last\n\t\t\t\ttime we have to change it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"838\">\n\t\t\t\tThe HAPI-FHIR-CLI now explicitly includes JAXB dependencies in its combined JAR\n\t\t\t\tfile. These were not neccesary prior to Java 9, but the JDK (mercifully) does\n\t\t\t\tnot include JAXB in the default classpath as of Java 9. This means that\n\t\t\t\tit is possible to perform Schematron validation on Java 9. Thanks to\n\t\t\t\tJohn Grimes for reporting and suggesting a fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn experimental interceptor called VersionedApiConverterInterceptor has been added,\n\t\t\t\twhich automaticaly converts response payloads to a client-specified version\n\t\t\t\taccording to transforms built into FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"822\">\n\t\t\t\tSearches which were embedded in a Bundle as a transaction or batch operation did\n\t\t\t\tnot respect any chained method parameters (e.g. MedicationRequest?medication.code=123).\n\t\t\t\tThanks to @manjusampath for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA few fixes went into the build which should now allow HAPI FHIR\n\t\t\t\tto build correctly on JDK 9.0. Currently building is supported on\n\t\t\t\tJDK 8.x and 9.x only.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"837\">\n\t\t\t\tClient requests with an\n\t\t\t\t<![CDATA[<code>Accept</code>]]>\n\t\t\t\theader value of\n\t\t\t\t<![CDATA[<code>application/json</code>]]>\n\t\t\t\twill now be served with the non-legacy content type of\n\t\t\t\t<![CDATA[<code>application/fhir+json</code>]]>\n\t\t\t\tinstead of the legacy\n\t\t\t\t<![CDATA[<code>application/json+fhir</code>]]>.\n\t\t\t\tThanks to John Grimes for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFixed a regression in server where a count parameter in the form\n\t\t\t\t<![CDATA[<code>@Count IntegerType theCount</code>]]>\n\t\t\t\tcaused an exception if the client made a request with\n\t\t\t\tno count parameter included. Thanks to Viviana Sanz for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug in the JPA server was fixed where a Subscription incorrectly created\n\t\t\t\twithout a status or with invalid criteria would cause a crash during\n\t\t\t\tstartup.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now properly parses _format\n\t\t\t\tparameters that include additional content (e.g.\n\t\t\t\t<![CDATA[<code>_format=html/json;fhirVersion=1.0</code>]]>)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStale search deleting routine on JPA server has been adjusted\n\t\t\t\tto delete one search per transaction instead of batching 1000\n\t\t\t\tsearches per transaction. This should make the deletion logic\n\t\t\t\tmore tolerant of deleting very large search result sets.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAvoid refreshing the search parameter cache from an incoming client\n\t\t\t\trequest thread, which caused unneccesary delays for clients.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn occasional crash in the JPA was fixed when using unique search\n\t\t\t\tparameters and updating a resource to no longer match\n\t\t\t\tone of these search parameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid an endless loop of reindexing in JPA if a SearchParameter is\n\t\t\t\tcreated which indexed the SearchParameter resource itself\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"854\">\n\t\t\t\tJPA server now performs temporary/placeholder ID substitution processing on elements in\n\t\t\t\tresources which are of type \"URI\" in addition to the current substitution for\n\t\t\t\telements of type \"Reference\". Thanks to GitHub user @t4deon for supplying\n\t\t\t\ta testcase!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDeleting a resource from the testpage overlay resulted in an error page after\n\t\t\t\tclicking \"delete\", even though the delete succeeded.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tA number of info level log lines have been reduced to debug level in the JPA server, in\n\t\t\t\torder to reduce contention during heavy loads and reduce the amount of noise\n\t\t\t\tin log files overall. A typical server should now see far less logging coming\n\t\t\t\tfrom HAPI, at least at the INFO level.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"863\">\n\t\t\t\tJPA server now correctly indexes custom search parameters which\n\t\t\t\thave multiple base resource types. Previously, the indexing could\n\t\t\t\tcause resources of the wrong type to be returned in a search\n\t\t\t\tif a parameter being used also matched that type. Thanks\n\t\t\t\tto Dave Carlson for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new IResourceProvider implementation called\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>HashMapResourceProvider</code>\n\t\t\t\t]]>\n\t\t\t\thas been added. This is a complete resource provider\n\t\t\t\timplementation that uses a HashMap as a backing store. This class\n\t\t\t\tis probably of limited use in real production systems, but it\n\t\t\t\tcam be useful for tests or for static servers with small amounts\n\t\t\t\tof data.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"872\">\n\t\t\t\tAn issue in the JPA server was corrected where searching using\n\t\t\t\tURI search parameters would sometimes not include the resource type in the\n\t\t\t\tcriteria. This meant, for example, that a search for\n\t\t\t\t<![CDATA[<code>ValueSet?url=http://foo</code>]]> would also\n\t\t\t\tmatch any CodeSystem resource that happened to also have\n\t\t\t\tthat URL as the value for the \"url\" search parameter. Thanks\n\t\t\t\tto Josh Mandel for reporting and supplying a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"868\">\n\t\t\t\tDateParam class now has equals() and hashCode() implementations. Thanks\n\t\t\t\tto Gaetano Gallo for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"814\">\n\t\t\t\tFix a bug where under certain circumstances, duplicate contained resources\n\t\t\t\tcould be output by the parser's encode methods. Thanks to\n\t\t\t\tFrank Tao for supplying a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe client LoggingInterceptor now includes the number of\n\t\t\t\tmilliseconds spent performing each call that is logged.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"786\">\n\t\t\t\tReferenceParam has been enhanced to properly return the resource type to\n\t\t\t\tuser code in a server via the ReferenceType#getResourceType() method\n\t\t\t\tif the client has specified a reference parameter with\n\t\t\t\ta resource type. Thanks to @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"776\">\n\t\t\t\tAn entry has been added to ResourceMetadataKeyEnum which allows extensions\n\t\t\t\tto be placed in the resource metadata section in DSTU2 resource (this is\n\t\t\t\tpossible already in DSTU3+ resources as Meta is a normal model type, but\n\t\t\t\tthe older structures worked a bit differently. Thanks to GitHub user\n\t\t\t\tsjanic for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"791\">\n\t\t\t\tAn example project has een contributed which shows how to use the CQL\n\t\t\t\tframework in a server with HAPI FHIR JPA. Thanks to Chris Schuler\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"798\">\n\t\t\t\tA new module has been contributed called hapi-fhir-jpaserver-elasticsearch\n\t\t\t\twhich adds support for Elasticsearch instead of raw Lucene for fulltext\n\t\t\t\tindexing. Testing help on this would be appreciated! Thanks to\n\t\t\t\tJiajing Liang for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"800\">\n\t\t\t\tJAX-RS server now supports R4 and DSTU2_1 FHIR versions, which were\n\t\t\t\tpreviously missing. Thanks to Clayton Bodendein for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"806\">\n\t\t\t\tAuthorizationInterceptor did not correctly handle authorization against\n\t\t\t\tagainst a compartment where the compartment owner was specified\n\t\t\t\tas a list of IDs. Thanks to Jiajing Liang for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"812\">\n\t\t\t\tREST HOOK subscriptions in the JPA server now support having\n\t\t\t\tan empty/missing Subscription.channel.payload value, which\n\t\t\t\tis supported according to the FHIR specification. Thanks\n\t\t\t\tto Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA Server Operation Interceptor create/update methods will now no\n\t\t\t\tlonger be fired if the create/update operation being performed\n\t\t\t\tis a no-op (e.g. a conditional create that did not need to perform\n\t\t\t\tany action, or an update where the contents didn't actually change)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"879\">\n\t\t\t\tJPA server sometimes updated resources even though the client\n\t\t\t\tsupplied an update with no actual changes in it, due to\n\t\t\t\tchanges in the metadata section being considered content\n\t\t\t\tchanges. Thanks to Kyle Meadows for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"817\">\n\t\t\t\tA new example project has been added called hapi-fhir-jpaserver-dynamic,\n\t\t\t\twhich uses application/environment properties to configure which version\n\t\t\t\tof FHIR the server supports and other configuration. Thanks to\n\t\t\t\tAnoush Mouradian for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"581\">\n\t\t\t\tA new example project showing the use of JAX-RS Server Side Events has\n\t\t\t\tbeen added. Thanks to Jens Kristian Villadsen for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\" issue=\"864\">\n\t\t\t\tAn unneccesary reference to the Javassist library has been\n\t\t\t\tremoved from the build. Thanks to \u0141ukasz Dywicki for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"819\">\n\t\t\t\tSupport has been added to the JPA server for the :not modifier. Thanks\n\t\t\t\tto \u0141ukasz Dywicki for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"877\">\n\t\t\t\tSuport for the :contains string search parameter modifier has been added to\n\t\t\t\tthe JPA server. Thanks to Anthony Sute for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAll instances of DefaultProfileValidationSupport (i.e. one for\n\t\t\t\teach version of FHIR) have been fixed so that they explicitly\n\t\t\t\tclose any InputStreams they open in order to read the built-in\n\t\t\t\tprofile resources. Leaving these open caused resource starvation\n\t\t\t\tin some cases under heavy load.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.2.0\" date=\"2018-01-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for custom search parameters has been backported in the JPA server\n\t\t\t\tfrom DSTU3 back to DSTU2. As of this release of HAPI, full support for custom\n\t\t\t\tsearch parameters exists in all supported versions of FHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new set of methods have been added to\n\t\t\t\t<![CDATA[<code>IServerOperationInterceptor</code>]]>\n\t\t\t\tcalled\n\t\t\t\t<![CDATA[<code>resourcePreCreate</code>]]>,\n\t\t\t\t<![CDATA[<code>resourcePreUpdate</code>]]>, and\n\t\t\t\t<![CDATA[<code>resourcePreDelete</code>]]>. These\n\t\t\t\tmethods are called within the database transaction\n\t\t\t\t(just as the existing methods were) but are invoked\n\t\t\t\tprior to the contents being saved to the database. This\n\t\t\t\tcan be useful in order to allow interceptors to\n\t\t\t\tchange payload contents being saved.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tA few redundant and no longer useful methods have been marked as\n\t\t\t\tdeprecated in\n\t\t\t\t<![CDATA[<code>IServerInterceptor</code>]]>. If you have implemented\n\t\t\t\tcustom interceptors you are recommended to migrate to the recommended\n\t\t\t\tmethods.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new method has been added to RequestDetails called\n\t\t\t\t<![CDATA[<code>setRequestContents()]]> which can be used\n\t\t\t\tby interceptors to modify the request body before it\n\t\t\t\tis parsed by the server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in JPA server when performing a recursive\n\t\t\t\t<![CDATA[<code>_include</code>]]> which doesn't actually find any matches.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"796\">\n\t\t\t\tWhen encoding URL parameter values, HAPI FHIR would incorrectly escape\n\t\t\t\ta space (\" \") as a plus (\"+\") insetad of as \"%20\" as required by\n\t\t\t\tRFC 3986. This affects client calls, as well as URLs generated by\n\t\t\t\tthe server (e.g. REST HOOK calls). Thanks to James Daily for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSearching in JPA server using a combination of _content and _id parameters\n\t\t\t\tfailed. Thanks to Jeff Weyer for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new configuration option has been added to DaoConfig which allows newly created\n\t\t\t\tresources to be assigned a UUID by the server instead of a sequential ID\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn unneccesary column called \"MYHASHCODE\" was added to the\n\t\t\t\tHFJ_TAG_DEF table in the JPA server schema\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA few log entries emitted by the JPA server suring every search have been reduced\n\t\t\t\tfrom INFO to DEBUG in order to reduce log noise\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"810\">\n\t\t\t\tFix an issue in JPA server where updating a resource sometimes caused date search indexes to\n\t\t\t\tbe incorrectly deleted. Thanks to Kyle Meadows for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"808\">\n\t\t\t\tServers did not return an ETag if the version was provided on a\n\t\t\t\tDSTU3/R4 structure in the getMeta() version field instead of in the\n\t\t\t\tgetIdElement() ID. Thanks to GitHub user @Chrisjobling for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tA bug was fixed in the JPA server when performing a validate operation with a mode\n\t\t\t\tof DELETE on a server with referential integrity disabled, the validate operation would delete\n\t\t\t\tresource reference indexes as though the delete was actually happening, which negatively\n\t\t\t\taffected searching for the resource being validated.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe HAPI FHIR Server framework now has initial support for\n\t\t\t\tmultitenancy. At this time the support is limited to the server\n\t\t\t\tframework (not the client, JPA, or JAX-RS frameworks). See\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"http://hapifhir.io/doc_rest_server.html\">Server Documentation</a>\n\t\t\t\t]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.1.0\" date=\"2017-11-23\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.10 -&gt; 5.0.0</li>\n\t\t\t\t\t\t<li>Jackson (JPA): 2.8.1 -&gt; 2.9.2</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe Android client module has been restored to working order, and no longer\n\t\t\t\trequires a special classifier or an XML parser to be present in order to\n\t\t\t\twork. This means that the hapi-fhir-android library is much less likely\n\t\t\t\tto cause conflicts with other libraries imported into an Android application\n\t\t\t\tvia Gradle.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_android.html\">HAPI FHIR Android Documentation</a>]]>\n\t\t\t\tfor more information. As a part of this fix, all dependencies on\n\t\t\t\tthe StAX API have been removed in environments where StAX is not\n\t\t\t\tpresent (such as Android). The client will now detect this case, and\n\t\t\t\texplicitly request JSON payloads from servers, meaning that Android clients\n\t\t\t\tno longer need to include two parser stacks\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA performance to the JPA server has been made which reduces the number\n\t\t\t\tof writes to index tables when updating a resource with contents that\n\t\t\t\tonly make minor changes to the resource content. In many cases this can\n\t\t\t\tnoticeably improve update performance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn FHIR DSTU3 the\n\t\t\t\t<![CDATA[<code>ValueSet/$expand?identifier=foo</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>ValueSet/$validate-code?identifier=foo</code>]]>\n\t\t\t\tparameters were changed to\n\t\t\t\t<![CDATA[<code>ValueSet/$expand?url=foo</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>ValueSet/$validate-code?url=foo</code>]]>\n\t\t\t\trespectively, but the JPA server had not caught up. The\n\t\t\t\tJPA DSTU3 server has been adjusted to accept either \"identifier\"\n\t\t\t\tor \"url\" (with \"url\" taking precedence), and the JPA R4 server\n\t\t\t\thas been changed to only accept \"url\".\n\t\t\t\tThanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"744\">\n\t\t\t\tFix an error in JPA server when using Derby Database, where search queries with\n\t\t\t\ta search URL longer than 255 characters caused a mysterious failure. Thanks to\n\t\t\t\tChris Schuler and Bryn Rhodes for all of their help in reproducing this issue.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports the use of the\n\t\t\t\t<![CDATA[<code>Cache-Control</code>]]>\n\t\t\t\theader in order to allow the client to selectively disable the\n\t\t\t\tsearch result cache. This directive can also be used to disable result paging\n\t\t\t\tand return results faster when only a small number of results is needed.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/doc_jpa.html\">JPA Page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn certain cases in the JPA server, if multiple threads all attempted to\n\t\t\t\tupdate the same resource simultaneously, the optimistic lock failure caused\n\t\t\t\ta \"gap\" in the history numbers to occur. This would then cause a mysterious\n\t\t\t\tfailure when trying to update this resource further. This has been\n\t\t\t\tresolved.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Server search/history results now set the ID of the returned Bundle to\n\t\t\t\tthe ID of the search, meaning that if a search returns results from the Query\n\t\t\t\tcache, it will reuse the ID of the previously returned Bundle\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a NullPointerException when validating a Bundle (in DSTU3/R4) with no\n\t\t\t\t<![CDATA[<code>Bundle.type</code>]]> value\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server transaction operation (DSTU3/R4) did not correctly process the\n\t\t\t\tIf-Match header when passed in via\n\t\t\t\t<![CDATA[<code>Bundle.entry.request.ifMatch</code>]]> value\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn Apache client, remove a log message at WARN level when the response does not\n\t\t\t\tspecify a charset. This log line often showed up any time a server was not supplying\n\t\t\t\ta response, making client logs quite noisy\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new configuration item has been added to the JPA server DaoConfig\n\t\t\t\tcalled\n\t\t\t\t<![CDATA[<code>getCountSearchResultsUpTo()</code>]]>.\n\t\t\t\tThis setting governs how many search results the search\n\t\t\t\tcoordinator should try to find before returning an initial\n\t\t\t\tsearch response to the user, which has an effect on whether\n\t\t\t\tthe\n\t\t\t\t<![CDATA[<code>Bundle.total</code>]]>\n\t\t\t\tfield is always populated in search responses. This has now\n\t\t\t\tbeen set to 20000 on out public server (fhirtest.uhn.ca)\n\t\t\t\tso most search results should now include a total.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove a bunch of exceptions in the org.hl7.fhir.exception package from the\n\t\t\t\thapi-fhir-base module, as they were also duplicated in the\n\t\t\t\thapi-fhir-utilities module.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe DSTU2 XhtmlDt type has been modified so that it no longer uses\n\t\t\t\tthe StAX XMLEvent type as its internal model, and instead simply uses\n\t\t\t\ta String. New methods called \"parse\" and \"encode\" have been added\n\t\t\t\tto HAPI FHIR's XmlUtil class, which can be used to convert\n\t\t\t\tbetween a String and an XML representation. This should allow\n\t\t\t\tHAPI FHIR to run in environments where StAX is not available, such\n\t\t\t\tas Android phones.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"761\">\n\t\t\t\tRestored the\n\t\t\t\t<![CDATA[<code>org.hl7.fhir.r4.model.codesystem.*</code>]]>\n\t\t\t\tclasses (which are Java Enums for the various FHIR codesystems).\n\t\t\t\tThese were accidentally removed in HAPI FHIR 3.0.0. Thanks to\n\t\t\t\tGitHub user @CarthageKing for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThe resource Profile Validator has been enhanced to not try to validate\n\t\t\t\tbound fields where the binding strength is \"example\", and a crash was\n\t\t\t\tresolved when validating QuestionnaireResponse answers with a type\n\t\t\t\tof \"choice\" where the choice was bound to a ValueSet.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove the fake \"Test\" resource from DSTU2 structures. This was not\n\t\t\t\ta real resource type, and caused conflicts with the .NET client. Thanks to\n\t\t\t\tVlad Ignatov for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"720\">\n\t\t\t\tParsing a DSTU3/R4 custom structure which contained a field of\n\t\t\t\ta custom type caused a crash during parsing. Thanks to\n\t\t\t\tGitHub user @mosaic-hgw for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"711\">\n\t\t\t\tClient logic for checking the version of the connected\n\t\t\t\tserver to ensure it is for the correct version of FHIR now\n\t\t\t\tincludes a check for R4 servers. Thanks to Clayton Bodendein\n\t\t\t\tfor the pull request, including a number of great tests!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"714\">\n\t\t\t\tJAX-RS client framework now supports the ability to\n\t\t\t\tregister your own JAX-RS Component Classes against the client,\n\t\t\t\tas well as better documentation about thread safety. Thanks\n\t\t\t\tto S\u00c3\u00a9bastien Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"717\">\n\t\t\t\tProcessing of the If-Modified-Since header on FHIR read operations was reversed,\n\t\t\t\treturning a 304 when the resource had been modified recently. Thanks to\n\t\t\t\tMichael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd <![CDATA[<code>Prefer</code> and <code>Cache-Control</code>]]> to the list of headers which are declared\n\t\t\t\tas\n\t\t\t\tbeing acceptable for CORS requests in CorsInterceptor, CLI, and JPA Example.\n\t\t\t\tThanks to Patrick Werner for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"725\">\n\t\t\t\tDSTU2-hl7org and DSTU2.1 structures did not copy resource IDs when invoking\n\t\t\t\tcopyValues(). Thanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"734\">\n\t\t\t\tWhen encoding a Binary resource, the Binary.securityContext field\n\t\t\t\twas not encoded correctly. Thanks to Malcolm McRoberts for the pull\n\t\t\t\trequest with fix and test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBundle resources did not have their version encoded when serializing\n\t\t\t\tin FHIR resource (XML/JSON) format.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe Binary resource endpoint now supports the <![CDATA[<code>X-Security-Context</code>]]> header when\n\t\t\t\treading or writing Binary contents using their native Content-Type (i.e exchanging\n\t\t\t\tthe raw binary with the server, as opposed to exchanging a FHIR resource).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen paging through multiple pages of search results, if the\n\t\t\t\tclient had requested a subset of resources to be returned using the\n\t\t\t\t<![CDATA[<code>_elements</code>]]> parameter, the elements list\n\t\t\t\twas lost after the first page of results.\n\t\t\t\tIn addition, elements will not remove elements from\n\t\t\t\tsearch/history Bundles (i.e. elements from the Bundle itself, as opposed\n\t\t\t\tto elements in the entry resources) unless the Bundle elements are\n\t\t\t\texplicitly listed, e.g. <![CDATA[<code>_include=Bundle.total</code>]]>.\n\t\t\t\tThanks to @parisni for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"743\">\n\t\t\t\tAdd support for Spring Boot for initializing a number of parts of the library,\n\t\t\t\tas well as several examples.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-samples\">Spring Boot samples</a>]]>\n\t\t\t\tfor examples of how this works.\n\t\t\t\tThanks to Mathieu Ouellet for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"747\">\n\t\t\t\tJPA server now has lucene index support moved to separate classes from the entity\n\t\t\t\tclasses in order to facilitate support for ElasticSearch. Thanks to Jiang Liang\n\t\t\t\tfor the pull request!\n\t\t\t\t<![CDATA[\n\t\t\t\tNote that any existing JPA projects will need to add an additional property in their Spring config called <code>hibernate.search.model_mapping</code>. See <a href=\"https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-example/src/main/java/ca/uhn/fhir/jpa/demo/FhirServerConfig.java#L84\">this line</a> in the example project.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"755\">\n\t\t\t\tA new client interceptor has been added called\n\t\t\t\tAdditionalRequestHeadersInterceptor, which allows\n\t\t\t\ta developer to add additional custom headers to a\n\t\t\t\tclient requests.\n\t\t\t\tThanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAn issue was fixed in JPA server where extensions on primitives which\n\t\t\t\tare nestedt several layers deep are lost when resources are retrieved\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"756\">\n\t\t\t\tConditional deletes in JPA server were incorrectly denied by AuthorizationInterceptor\n\t\t\t\tif the delete was permitted via a compartment rule. Thanks to Alvin Leonard for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"767\">\n\t\t\t\tJAX-RS server module was not able to generate server CapabilityStatement for\n\t\t\t\tsome versions of FHIR (DSTU2_HL7ORG, DSTU2_1, or R4). Thanks to Clayton Bodendein for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"769\">\n\t\t\t\tWhen a server method throws a DataFormatException, the error will now be converted into\n\t\t\t\tan HTTP 400 instead of an HTTP 500 when returned to the client (and a stack\n\t\t\t\ttrace will now be returned to the client for JAX-RS server if configured to\n\t\t\t\tdo so). Thanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"770\">\n\t\t\t\tJAX-RS server conformance provider in the example module passed in the\n\t\t\t\tserver description, server name, and server version in the incorrect order.\n\t\t\t\tThanks to Clayton Bodendein for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"774\">\n\t\t\t\tThe learn more links on the website home page had broken links. Thanks to\n\t\t\t\tJames Daily for the pull request to fix this!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"762\">\n\t\t\t\tPrevent a crash in AuthorizationInterceptor when processing transactions\n\t\t\t\tif the interceptor has rules declared which allow resources to be read/written\n\t\t\t\tby \"any ID of a given type\". Thanks to GitHub user @dconlan for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"3.0.0\" date=\"2017-09-27\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for FHIR R4 (current working draft) has been <![CDATA[<b>added</b>]]>\n\t\t\t\t(in a new module called <![CDATA[<code>hapi-fhir-structures-r4</code>]]>)\n\t\t\t\tand\n\t\t\t\tsupport for FHIR DSTU1 (<![CDATA[<code>hapi-fhir-structures-dstu</code>]]>)\n\t\t\t\thas been <![CDATA[<b>removed</b>]]>. Removing support for the legacy\n\t\t\t\tDSTU1 FHIR version was a difficult decision, but it allows us the\n\t\t\t\topportunitity to clean up the codebase quite a bit, and remove some\n\t\t\t\tconfusing legacy parts of the API (such as the legacy Atom Bundle class).\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new redesigned table of HAPI FHIR versions to FHIR version support has been\n\t\t\t\tadded to the <![CDATA[<a href=\"http://hapifhir.io/download.html\">Download Page</a>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI FHIR's modules have been restructured for more consistency and less coupling\n\t\t\t\tbetween unrelated parts of the API.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA new complete list of HAPI FHIR modules has been added to the\n\t\t\t\t<![CDATA[<a href=\"http://hapifhir.io/download.html\">Download Page</a>]]>. Key changes\n\t\t\t\tinclude:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tHAPI FHIR's <b>client</b> codebase has been moved out of <code>hapi-fhir-base</code>\n\t\t\t\t\t\tand in to a new module called <code>hapi-fhir-client</code>. Client users now need\n\t\t\t\t\t\tto explicitly add this JAR to their project (and non-client users now no longer\n\t\t\t\t\t\tneed to depend on it)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tHAPI FHIR's <b>server</b> codebase has been moved out of <code>hapi-fhir-base</code>\n\t\t\t\t\t\tand in to a new module called <code>hapi-fhir-server</code>. Server users now need\n\t\t\t\t\t\tto explicitly add this JAR to their project (and non-server users now no longer\n\t\t\t\t\t\tneed to depend on it)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tAs a result of the client and server changes above, we no longer need to produce\n\t\t\t\t\t\ta special Android JAR which contains the client, server (which added space but was\n\t\t\t\t\t\tnot used) and structures. There is now a normal module called <code>hapi-fhir-android</code>\n\t\t\t\t\t\twhich is added to your Android Gradle file along with whatever structures JARs you\n\t\t\t\t\t\twish to add. See the\n\t\t\t\t\t\t<a href=\"https://github.com/hapifhir/hapi-fhir-android-integration-test\">Android Integration Test</a>\n\t\t\t\t\t\tto see a sample project using HAPI FHIR 3.0.0. <b>Note that this has been reported to\n\t\t\t\t\t\twork by some people but others are having issues with it!</b> In order to avoid delaying\n\t\t\t\t\t\tthis release any further we are releasing now despite these issues. If you are an Android\n\t\t\t\t\t\tguru and want to help iron things out please get in touch. If not, it might be a good\n\t\t\t\t\t\tidea to stay on HAPI FHIR 2.5 until the next point release of the 3.x series.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tA new JAR containing FHIR utilities called <code>hapi-fhir-utilities</code> has been\n\t\t\t\t\t\tadded. This JAR reflects the ongoing harmonization between HAPI FHIR and the FHIR\n\t\t\t\t\t\tRI codebases and is generally required in order to use HAPI at this point (if you\n\t\t\t\t\t\tare using a dependency manager such as Maven or Gradle it will be brought in to your\n\t\t\t\t\t\tproject automatically as a dependency)\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIn order to allow the reoganizations and decoupling above to happen, a number of important classes\n\t\t\t\tand interfaces have been moved to new packages. A sample list of these changes is listed\n\t\t\t\tbelow. When upgrading to 3.0.0 your project may well show a number of compile errors\n\t\t\t\trelated to missing classes. In most cases this can be resolved by simply removing the HAPI\n\t\t\t\timports from your classes and asking your IDE to \"Organize Imports\" once again. This is an\n\t\t\t\tannoying change we do realize, but it is neccesary in order to allow the project to\n\t\t\t\tcontinue to grow.\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<li>IGenericClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>IRestfulClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>AddProfileTagEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>IVersionSpecificBundleFactory moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>BundleInclusionRule moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>\n\t\t\t\t\t<li>RestSearchParameterTypeEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>EncodingEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>Constants moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>\n\t\t\t\t\t<li>IClientInterceptor moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>\n\t\t\t\t\t<li>ITestingUiClientFactory moved from package ca.uhn.fhir.util to package ca.uhn.fhir.rest.server.util</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBecause the Atom-based DSTU1 Bundle class has been removed from the library, users of the\n\t\t\t\tHAPI FHIR client must now always include a Bundle return type in search calls. For example,\n\t\t\t\tthe following call would have worked previously:\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>\nBundle bundle = client.search().forResource(Patient.class)\n\t.where(new TokenClientParam(\"gender\").exactly().code(\"unknown\"))\n   .prettyPrint()\n   .execute();\n\t\t\t\t</pre>\n\t\t\t\t]]>\n\t\t\t\tThis now needs an explicit returnBundle statement, as follows:\n\t\t\t\t<![CDATA[\n\t\t\t\t<pre>\nBundle bundle = client.search().forResource(Patient.class)\n\t.where(new TokenClientParam(\"gender\").exactly().code(\"unknown\"))\n   .prettyPrint()\n   .returnBundle(Bundle.class)\n   .execute();\n\t\t\t\t</pre>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe version of a few dependencies have been bumped to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Gson (JSON Parser): 2.8.0 -&gt; 2.8.1</li>\n\t\t\t\t\t\t<li>Commons-lang3 (Everywhere): 3.5 -&gt; 3.6</li>\n\t\t\t\t\t\t<!--<li>Saxon-HE (Validator): 9.5.1-5 -&gt; 9.8.0-3</li>-->\n\t\t\t\t\t\t<li>Apache HttpClient (FHIR Client): 4.5.2 -&gt; 4.5.3</li>\n\t\t\t\t\t\t<li>Apache HttpCore (FHIR Client): 4.4.5 -&gt; 4.4.6</li>\n\t\t\t\t\t\t<li>Phloc Commons (Schematron Validator): 4.4.6 -&gt; 4.4.11</li>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.9 -&gt; 5.2.10</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.7.0 -&gt; 5.7.1</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.7 -&gt; 4.3.10</li>\n\t\t\t\t\t\t<li>Spring Data JPA (JPA): 1.10.4 -&gt; 1.11.6</li>\n\t\t\t\t\t\t<li>Guava (JPA): 22.0 -&gt; 23.0</li>\n\t\t\t\t\t\t<li>Thymeleaf (Testpage Overlay): 3.0.2 -&gt; 3.0.7</li>\n\t\t\t\t\t\t<li>OkHttp (Android): 3.4.1 -&gt; 3.8.1</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA Subscription support has been refactored. A design contributed\n\t\t\t\tby Jeff Chung for the REST Hook subscription module has been ported\n\t\t\t\tso that Websocket subscriptions use it too. This design uses an\n\t\t\t\tinterceptor to scan resources as they are processed to test whether\n\t\t\t\tthey should be delivered to subscriptions, instead of using a\n\t\t\t\tpolling design.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn addition, this scanning has been reworked to happen in a separate\n\t\t\t\tthread from the main storage thread, which should improve\n\t\t\t\tperformance and scalability of systems with multiple\n\t\t\t\tsubscriptions. Thanks to Jeff for all of his work on this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\thapi-fhir-client-okhttp project POM had dependencies on both\n\t\t\t\thapi-fhir-structures-dstu2 and hapi-fhir-structures-dstu3, which\n\t\t\t\tmeant that any project using ookhttp would import both structures\n\t\t\t\tJARs. This has been removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server is now able to handle placeholder IDs (e.g. urn:uuid:00....000)\n\t\t\t\tbeing used in Bundle.entry.request.url as a part of the conditional URL\n\t\t\t\twithin transactions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSchematron validator now applies invariants to resources within a Bundle, not\n\t\t\t\tjust to the outer Bundle resource itself\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer and Client both still included Category header for resource tags even though\n\t\t\t\tthis feature was only present in FHIR DSTU1 and was removed from the specification in\n\t\t\t\tFHIR DSTU2. The presence of these headers sometimes caused parsed resource instances\n\t\t\t\tto contain duplicate tags\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"667\">\n\t\t\t\tWhen using the AuthorizationInterceptor with the JPA server, when a client is updating a resource\n\t\t\t\tfrom A to B, the user now needs to have write permission for both A and B. This is particularly\n\t\t\t\timportant for cases where (for example) an Observation is being updated from having a subject of\n\t\t\t\tPatient/A to Patient/B. If the user has write permission for Patient/B's compartment, this would\n\t\t\t\tpreviously have been allowed even if the user did not have access to write to Patient/A's compartment.\n\t\t\t\tThanks to Eeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIServerOperationInterceptor now has a new method\n\t\t\t\t<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource, IBaseResource)</code>]]>\n\t\t\t\twhich replaces the previous\n\t\t\t\t<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource)</code>]]>. This allows\n\t\t\t\tinterceptors to be notified of resource updates, but also see what the resource\n\t\t\t\tlooked like before the update. This change was made to support the change above, but\n\t\t\t\tseems like a useful feature all around.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"604\">\n\t\t\t\tAllow DateParam (used in servers) to handle values with MINUTE precision. Thanks to\n\t\t\t\tChristian Ohr for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix HTTP 500 error in JPA server if a numeric search parameter was supplied with no value, e.g.\n\t\t\t\t<![CDATA[<code>GET /Observation?value-quantity=</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server transaction processing now honours the Prefer header and includes\n\t\t\t\tcreated and updated resource bodies in the response bundle if it is set\n\t\t\t\tappropriately.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tOptimize queries in JPA server remove a few redundant select columns when performing\n\t\t\t\tsearches. This provides a slight speed increase in some cases.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd configuration to JPA server DaoConfig that allows a maximum\n\t\t\t\tnumber of search results to be specified. Queries will never return\n\t\t\t\tmore than this number, which can be good for avoiding accidental\n\t\t\t\tperformance problems in situations where large queries should not be\n\t\t\t\tneeded\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"674\">\n\t\t\t\tPrevent duplicates in $everything query response in JPA server. Thanks to @vlad-ignatov\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in calling JPA server transactions programmatically where resources\n\t\t\t\tare linked by object reference and not by ID where indexes were not correctly\n\t\t\t\tgenerated. This should not affect most users.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"678\">\n\t\t\t\tFix issue in SubscriptionInterceptor that caused interceptor to only\n\t\t\t\tactually notify listeners of the first 10 subscriptions. Thanks to Jeff Chung\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"693\">\n\t\t\t\tFix potential ConcurrentModificationException when adding subscriptions while\n\t\t\t\trunning under heavy load. Thanks to Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA search now uses hibernate ScrollableResults instead of plain JPA List. This\n\t\t\t\tshould improve performance over large search results.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA servers with no paging provider configured, or with a paging provider other than\n\t\t\t\tDatabaseBackedPagingProvider will load all results in a single pass and keep them\n\t\t\t\tin memory. Using this setup is not a good idea unless you know for sure that you\n\t\t\t\twill never have very large queries since it means that all results will be loaded into\n\t\t\t\tmemory, but there are valid reasons to need this and it will perform better than\n\t\t\t\tpaging to the database in that case. This fix also resolves a NullPointerException\n\t\t\t\twhen performing an $everything search. Thanks to Kamal Othman for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect an issue in JPA server on Postgres where searches with a long search URL\n\t\t\t\twere not able to be automatically purged from the database after they were scheduled\n\t\t\t\tfor deletion. Thanks to Ravi Kuchi for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd an optional and configurable hard limit on the total number of meta items\n\t\t\t\t(tags, profiles, and security labels) on an individual resource. The default\n\t\t\t\tis 1000.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen executing a search (HTTP GET) as a nested operation in in a transaction or\n\t\t\t\tbatch operation, the search now returns a normal page of results with a link to\n\t\t\t\tthe next page, like any other search would. Previously the search would return\n\t\t\t\ta small number of results with no paging performed, so this change brings transaction\n\t\t\t\tand batch processing in line with other types of search.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server no longer returns an OperationOutcome resource as the first resource\n\t\t\t\tin the Bundle for a response to a batch operation. This behaviour was previously\n\t\t\t\tpresent, but was not specified in the FHIR specification so it caused confusion and\n\t\t\t\twas inconsistent with behaviour in other servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a regression in HAPI FHIR 2.5 JPA server where executing a search in a\n\t\t\t\ttransaction or batch operation caused an exception. Thanks to Ravi Kuchi for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect an issue when processing transactions in JPA server where updates and\n\t\t\t\tcreates to resources with tags caused the tags to be created twice in the\n\t\t\t\tdatabase. These duplicates were utomatically filtered upon read so this issue\n\t\t\t\twas not user-visible, but it coule occasionally lead to performance issues\n\t\t\t\tif a resource containing multiple tags was updated many times via\n\t\t\t\ttransactions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should not allow creation of resources that have a reference to\n\t\t\t\ta resource ID that previously existed but is now deleted. Thanks to Artem\n\t\t\t\tSopin for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJpaConformanceProvider now has a configuration setting to enable and\n\t\t\t\tdisable adding resource counts to the server metadata.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid a deadlock in JPA server when the RequestValidatingInterceptor is being\n\t\t\t\tused and a large number of resources are being created by clients at\n\t\t\t\tthe same time.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTestpage Overlay's transaction method did not work if the response\n\t\t\t\tBundle contained any entries that did not contain a resource (which\n\t\t\t\tis often the case in more recent versions of HAPI). Thanks to Sujay R\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen the server was returning a multi-page search result where the\n\t\t\t\tclient did not explicitly request an encoding via the _format\n\t\t\t\tparameter, a _format parameter was incorrectly added to the paging\n\t\t\t\tlinks in the response Bundle. This would often explicitly request\n\t\t\t\tXML encoding because of the browser Accept header even though\n\t\t\t\tthis was not what the client wanted.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"651\">\n\t\t\t\tEnhancement to ResponseHighlighterInterceptor where links in the resource\n\t\t\t\tbody are now converted to actual clickable hyperlinks. Thanks to Eugene Lubarsky\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBanUnsupportedHttpMethodsInterceptor has been modified so that it now allows\n\t\t\t\tHTTP PATCH to proceed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"651\">\n\t\t\t\tEnhancement to ResponseHighlighterInterceptor so that it now can be configured\n\t\t\t\tto display the request headers and response headers, and individual lines\n\t\t\t\tmay be highlighted.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAuthorizationInterceptor did not permit PATCH operations to proceed even\n\t\t\t\tif the user had write access for the resource being patched.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"682\">\n\t\t\t\tFix an issue in HapiWorkerContext where structure definitions are\n\t\t\t\tnot able to be retrieved if they are referred to by their\n\t\t\t\trelative or logical ID. This affects profile tooling such as\n\t\t\t\tStructureMapUtilities. Thanks to Travis Lukach for reporting and\n\t\t\t\tproviding a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"679\">\n\t\t\t\tAdd link to DSTU3 JavaDocs from documentation index. Thanks\n\t\t\t\tto Vadim Peretokin for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"680\">\n\t\t\t\tFix a typo in the documentation. Thanks to Saren Currie\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"689\">\n\t\t\t\tAdd a command line flag to the CLI tool to allow configuration of the\n\t\t\t\tserver search result cache timeout period. Thanks to Eugene Lubarsky\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"683\">\n\t\t\t\tCorrect an issue with the model classes for STU3 where any classes\n\t\t\t\tcontaining the @ChildOrder annotation (basically the conformance\n\t\t\t\tresources) will not correctly set the order if any of the\n\t\t\t\telements are a choice type (i.e. named \"foo[x]\"). Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix potential deadlock in stale search deleting task in JPA server, as well\n\t\t\t\tas potential deadlock when executing transactions containing nested\n\t\t\t\tsearches when operating under extremely heavy load.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server transaction operations now put OperationOutcome resources resulting\n\t\t\t\tfrom actions in\n\t\t\t\t<![CDATA[<code>Bundle.entry.response.outcome</code>]]>\n\t\t\t\tinstead of the previous\n\t\t\t\t<![CDATA[<code>Bundle.entry.resource</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"696\">\n\t\t\t\tAn issue was corrected where search parameters containing negative numbers\n\t\t\t\twere sometimes treated as positive numbers when processing the search. Thanks\n\t\t\t\tto Keith Boone for reporting and suggesting a fix!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"699\">\n\t\t\t\tFix an unfortunate typo in the custom structures documentation. Thanks to\n\t\t\t\tJason Owen for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"686\">\n\t\t\t\tCorrect an issue in the validator (DSTU3/R4) where elements were not always\n\t\t\t\tcorrectly validated if the element contained only a profiled extension. Thanks\n\t\t\t\tto S\u00c3\u00a9bastien Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"701\">\n\t\t\t\tTesting UI now has a dropdown for modifiers on token search. Thanks\n\t\t\t\tto GitHub user @dconlan for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"688\">\n\t\t\t\tWhen parsing an incomplete ID with the form <![CDATA[<code>http://my.org/Foo</code>]]> into\n\t\t\t\tIdDt and IdType objects, the Foo portion will now be treated as the resource type.\n\t\t\t\tPreviously my.org was treated as the resource type and Foo was treated as the ID. Thanks\n\t\t\t\tto GitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"695\">\n\t\t\t\tExtensions on ID datatypes were not parsed or serialized correctly. Thanks to\n\t\t\t\tStephen Rivi\u00c3\u00a8re for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"710\">\n\t\t\t\tFix a bug in REST Hook Subscription interceptors which prevented subscriptions\n\t\t\t\tfrom being activated. Thanks to Jeff Chung for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"708\">\n\t\t\t\tFix broken links in usage pattern diagram on website. Thanks to\n\t\t\t\tPascal Brandt for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"706\">\n\t\t\t\tFix incorrect FHIR Version Strings that were being outputted and verified in the\n\t\t\t\tclient for some versions of FHIR. Thanks to Clayton Bodendein for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new constructor to SimpleRequestHeaderInterceptor which allows a complete header\n\t\t\t\tto be passed in (including name and value in one string)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tREST Hook subscriptions now honour the Subscription.channel.header field\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDSTU2 validator has been enhanced to do a better job handling\n\t\t\t\tValueSets with expansions pointing to other ValueSets\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST HOOK subscriptions now use HTTP PUT if there is a payload type\n\t\t\t\tspecified, regardless of whether the source event was a create or an\n\t\t\t\tupdate\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"712\">\n\t\t\t\tAdd appropriate import statements for logging to JPA demo code. Thanks to\n\t\t\t\tRob Hausam for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"700\">\n\t\t\t\tAdd some browser performance logging to ResponseHighlightingInterceptor. Thanks\n\t\t\t\tto Eugene Lubarsky for the pull request, and for convincing James not to\n\t\t\t\toptimize something that did not need optimizing!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new config property has been added to the JPA seerver DaoConfig called\n\t\t\t\t\"setAutoCreatePlaceholderReferenceTargets\".\n\t\t\t\tThis property causes references to unknown resources in created/updated resources to have a placeholder\n\t\t\t\ttarget resource automatically created.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe server LoggingInterceptor has had a variable called\n\t\t\t\t<![CDATA[<code>processingTimeMillis</code>]]> which logs the number\n\t\t\t\tof milliseconds the server took to process a given request since\n\t\t\t\tHAPI FHIR 2.5, but this was not documented. This variable has now been\n\t\t\t\tdocumented as a part of the available features.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new experimental feature has been added to the JPA server which allows\n\t\t\t\tyou to define certain search parameter combinations as being resource keys,\n\t\t\t\tso that a database constraint will prevent more than one resource from\n\t\t\t\thaving a matching pair\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using the client LoggingInterceptor in non-verbose mode, the\n\t\t\t\tlog line showing the server's response HTTP status will now also include\n\t\t\t\tthe returned\n\t\t\t\t<![CDATA[<code>Location</code>]]> header value as well\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new flag has been add to the CLI upload-definitions command\n\t\t\t\t\"-e\" which allows skipping particular resources\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAn issue in JPA server has been corrected where if a CodeSystem\n\t\t\t\tresource was deleted, it was not possible to create a new resource\n\t\t\t\twith the same URI as the previous one\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen uploading a Bundle resource to the server (as a collection or\n\t\t\t\tdocument, not as a transaction) the ID was incorrectly stripped from\n\t\t\t\tresources being saved within the Bundle. This has been corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSubscriptions in JPA server now support \"email\" delivery type through the\n\t\t\t\tuse of a new interceptor which handles that type\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server can now be configured to not support\n\t\t\t\t<![CDATA[<code>:missing</code>]]> modifiers, which\n\t\t\t\tincreases write performance since fewer indexes are written\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new JPA configuration option has been added to the DaoConfig which allows\n\t\t\t\tsupport for the <![CDATA[<code>:missing</code>]]> search parameter modifier\n\t\t\t\tto be enabled or disabled, and sets the default to DISABLED.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tSupport for this parameter causes many more index rows to be inserted in the database,\n\t\t\t\twhich has a significant impact on write performance. A future HAPI update may allow these\n\t\t\t\trows to be written asynchronously in order to improve this.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.5\" date=\"2017-06-08\">\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[\n\t\t\t\tThis release includes significant performance enhancements for the\n\t\t\t\tJPA server. Most importantly, the way that searches are performed\n\t\t\t\thas been re-written to allow the server to perform better when\n\t\t\t\tthe database has a large number of results in it. The following\n\t\t\t\tenhancements have been made:\n\t\t\t\t<br/><br/>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearches with multiple search parameters of different \n\t\t\t\t\t\tdatatypes (e.g. find patients by name and date of birth) \n\t\t\t\t\t\twere previously joined in Java code, now the join is \n\t\t\t\t\t\tperformed by the database which is faster\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearches which returned lots of results previously has all \n\t\t\t\t\t\tresults streamed into memory before anything was returned to \n\t\t\t\t\t\tthe client. This is particularly slow if you do a search for\n\t\t\t\t\t\t(say) \"get me all patients\" since potentially thousands or \n\t\t\t\t\t\teven millions of patients' IDs were loaded into memory \n\t\t\t\t\t\tbefore anything gets returned to the client. HAPI FHIR \n\t\t\t\t\t\tnow has a multithreaded search coordinator which returns \n\t\t\t\t\t\tresults to the client as soon as they are available\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSearch results will be cached and reused (so that if a client\n\t\t\t\t\t\tdoes two searches for \"get me all patients matching FOO\"\n\t\t\t\t\t\twith the same FOO in short succession, we won't query the DB\n\t\t\t\t\t\tagain but will instead reuse the cached results). Note that\n\t\t\t\t\t\tthis can improve performance, but does mean that searches can\n\t\t\t\t\t\treturn slightly out of date results. Essentially what this means\n\t\t\t\t\t\tis that the latest version of individual resources will always\n\t\t\t\t\t\tbe returned despite this cacheing, but newly created resources\n\t\t\t\t\t\tthat should match may not be returned until the cache\n\t\t\t\t\t\texpires. By default this cache has been set to one minute, \n\t\t\t\t\t\twhich should be acceptable for most real-world usage, but\n\t\t\t\t\t\tthis can be changed or disabled entirely.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tUpdates which do not actually change the contents of the resource\n\t\t\t\t\t\tcan optionally be prevented from creating a new version\n\t\t\t\t\t\tof the resource in the database\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<br/><br/>\n\t\t\t\tExisting users should delete the \n\t\t\t\t<code>HFJ_SEARCH</code>, \n\t\t\t\t<code>HFJ_SEARCH_INCLUDE</code>,\n\t\t\t\tand \n\t\t\t\t<code>HFJ_SEARCH_RESULT</code>\n\t\t\t\ttables from your database before upgrading, as the structure of these tables\n\t\t\t\thas changed and old search results can not be reused.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"590\">\n\t\t\t\tAuthorizationInterceptor did not correctly handle paging requests\n\t\t\t\t(e.g. requests for the second page of results for a search operation).\n\t\t\t\tThanks to Eeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd configuration property to DSTU3 FhirInstanceValidator to\n\t\t\t\tallow client code to change unknown extension handling behaviour.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"630\">\n\t\t\t\tFix concurrency issues in FhirContext that were causing issues when\n\t\t\t\tstarting a context up on Android. Thanks to GitHub issue @Jaypeg85 for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix an issue in the JPA server if a resource has been previously\n\t\t\t\tsaved containing vocabulary that is no longer valid. This only really\n\t\t\t\thappened if you were using a non-final version of FHIR (e.g. using DSTU3\n\t\t\t\tbefore it was finalized) but if you were in this situation, upgrading HAPI\n\t\t\t\tcould cause you to have old codes that no longer exist in your database. This\n\t\t\t\tfix prevents these from blocking you from accesing those resources.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCLI now defaults to DSTU3 mode if no FHIR version is specified\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer and annotation-client @History annotation now allows DSTU3+ resource\n\t\t\t\ttypes in the type= property\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"563\">\n\t\t\t\tJSON Parser gave a very unhelpful error message (Unknown attribute 'value' found during parse)\n\t\t\t\twhen a scalar value was found in a spot where an object is expected. This has been corrected to\n\t\t\t\tinclude much more information. Thanks to GitHub user @jasminas for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDaoConfig#setInterceptors() has been un-deprecated. It was previously deprecated as\n\t\t\t\twe thought it was not useful, but uses have been identified so it turns out this method\n\t\t\t\twill live after all. Interceptors registered to this method will now be treated\n\t\t\t\tappropriately if they implement IServerOperationInterceptor too.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly support searching on a custom search parameter whose\n\t\t\t\tpath pointed to an extension, where the client used a chained value.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue where the JSON parser sometimes did not encode DSTU3 extensions on the root of a\n\t\t\t\tresource which have a value of type reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now respects the If-Modified-Since header and will return an HTTP 304 if appropriate\n\t\t\t\tfor read operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly process :missing qualifier on date parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"633\">\n\t\t\t\tAppacheHttpClient did not always respect the charset in the response\n\t\t\t\tContent-Type header. Thanks to Gijsbert van den Brink for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"636\">\n\t\t\t\tFix XhtmlParser to correctly handle hexadecimal escaped literals. Thanks to\n\t\t\t\tGijsbert van den Brink for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now has configurable properties that allow referential integrity\n\t\t\t\tto be disabled for both writes and deletes. This is useful in some cases\n\t\t\t\twhere data integrity is not wanted or not possible. It can also be useful\n\t\t\t\tif you want to delete large amounts of interconnected data quickly.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tA corresponding flag has been added to the CLI tool as well.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly support searching on a custom search parameter whose\n\t\t\t\tpath pointed to an extension, where the client used a chained value.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix dependency on commons-codec 1.4 in hapi-fhir-structures-dstu3, which was\n\t\t\t\tpreventing this library from being used on Android because Android includes\n\t\t\t\tan older version of commons-codec.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server failed to index search parameters on paths containing a decimal\n\t\t\t\tdata type\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tValidator incorrectly rejected references where only an identifier was populated\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"649\">\n\t\t\t\tMake error handler in the client more tolerant of errors where no response has\n\t\t\t\tbeen received by the client when the error happens. Thanks to GitHub\n\t\t\t\tuser maclema for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a check in JPA server that prevents completely blank tags, profiles, and security labels\n\t\t\t\tfrom being saved to the database. These were filtered out anyhow when the\n\t\t\t\tresult was returned back to the client but they were persisted which\n\t\t\t\tjust wasted space.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"664\">\n\t\t\t\tLoading the build-in profile structures (StructureDefinition, ValueSet, etc) is now done in\n\t\t\t\ta synchronized block in order to prevent multiple loads happening if the server processes\n\t\t\t\tmultiple validations in parallel threads right after startup. Previously a heavy load could\n\t\t\t\tcause the server to run out of memory and lock up. Thanks to Karl M Davis\n\t\t\t\tfor analysis and help fixing this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"652\">\n\t\t\t\tFix bad ValueSet URL in DeviceRequest profile definition for STU3 which\n\t\t\t\twas preventing the CLI from uploading definitions correctly. Thanks to\n\t\t\t\tJoel Schneider for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"656\">\n\t\t\t\tImprove handling in JPA server when doing code:above and code:below\n\t\t\t\tsearches to use a disjunction of AND and IN in order to avoid failures\n\t\t\t\tunder certain conditions. Thanks to Michael Lawley for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"660\">\n\t\t\t\tFix an error where the JPA server sometimes failed occasional requests\n\t\t\t\twith a weird NullPointerException when running under very large concurrent\n\t\t\t\tloads. Thanks to Karl M. Davis for reporting, investigating, and ultimately\n\t\t\t\tfinding a solution!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.4\" date=\"2017-04-19\">\n\t\t\t<action type=\"add\">\n\t\t\t\tThis release brings the DSTU3 structures up to FHIR R3 (FHIR 3.0.1) definitions. Note that\n\t\t\t\tthere are very few changes between the DSTU3 structures in HAPI FHIR 2.3 and\n\t\t\t\tthe ones in HAPI FHIR 2.4 since the basis for the DSTU3 structures in HAPI FHIR\n\t\t\t\t2.3 was the R3 QA FHIR version (1.9.0) but this is the first release of\n\t\t\t\tHAPI FHIR to support the final/complete R3 release.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.2.7 -&gt; 5.2.9</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.7.CR1 -&gt; 5.2.7.Final</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA): 5.3.4 -&gt; 5.4.1</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.6 -&gt; 4.3.7</li>\n\t\t\t\t\t\t<li>Gson (Core): 2.7 -&gt; 2.8.0</li>\n\t\t\t\t\t\t<li>Guava (JPA): 19.0 -&gt; 21.0</li>\n\t\t\t\t\t\t<li>SLF4j (Core): 1.7.21 -&gt; 1.7.25</li>\n\t\t\t\t\t\t<li>Logback (Core): 1.1.7 -&gt; 1.2.2</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"602\">\n\t\t\t\thapi-fhir-jpaserver-example now includes the\n\t\t\t\t<![CDATA[<code>Prefer</code>]]> header in the list of\n\t\t\t\tCORS headers. Thanks to GitHub user @elnin0815 for\n\t\t\t\tthe pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow make read or write\n\t\t\t\tauthorization decisions on a resource by instance ID\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"208\">\n\t\t\t\tRemove SupportingDocumentation resource from DSTU2 structures. This isn't\n\t\t\t\tactually a resource in FHIR DSTU2 and its inclusion causes errors on clients\n\t\t\t\tthat don't understand what it is. Thanks to Travis Cummings and Michele Mottini for pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"607\">\n\t\t\t\tWeb testing UI displayed an error when a transaction was pasted into the UI\n\t\t\t\tfor a DSTU2 server. Thanks to Suresh Kumar for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDaoConfig#setAllowInlineMatchUrlReferences() now defaults to\n\t\t\t\t<![CDATA[<code>true</code>]]> since inline conditional references\n\t\t\t\tare now a part of the FHIR specification. Thanks to Jan D\u00c4\u009bdek for\n\t\t\t\tpointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"609\">\n\t\t\t\thapi-fhir-jpaserver-base now exposes a\n\t\t\t\t<![CDATA[<code>FhirInstanceValidator</code> bean named <code>\"myInstanceValidatorDstu2\"</code>]]>\n\t\t\t\tfor DSTU2. A similar bean for DSTU3 was previously implemented.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"453\">\n\t\t\t\thapi-fhir-jpaserver-example project now defaults to STU3 mode instead of\n\t\t\t\tthe previous DSTU2. Thanks to Joel Schneider for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"534\">\n\t\t\t\tJPA server now has a setting on the DaoConfig to force it to treat\n\t\t\t\tcertain reference URLs or reference URL patterns as logical URLs instead\n\t\t\t\tof literal ones, meaning that the server will not try to resolve these\n\t\t\t\tURLs. Thanks to Eeva Turkka for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a utility method to JPA server:\n\t\t\t\t<![CDATA[<code>IFhirResourceDao#removeTag(IIdType, TagTypeEnum, String, String)</code>]]>. This allows\n\t\t\t\tclient code to remove tags\n\t\t\t\tfrom a resource without having a servlet request object in context.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server was unable to process custom search parameters where\n\t\t\t\tthe path pointed to an extension containing a reference. Thanks\n\t\t\t\tto Ravi Kuchi for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"623\">\n\t\t\t\tServers in DSTU2.1 mode were incorrectly using the legacy mimetypes instead\n\t\t\t\tof the new STU3 ones. Thanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"624\">\n\t\t\t\tAdd an option to ParserOptions that specifies that when parsing a bundle, the\n\t\t\t\tID found in the Bundle.entry.fullUrl should not override the ID found\n\t\t\t\tin the Resource.id field. Technically these fields must always supply the\n\t\t\t\tsame ID in order for a server to be considered conformant, but this option allows\n\t\t\t\tyou to deal with servers which are behaving badly. Thanks to\n\t\t\t\tGitHub user CarthageKing for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"617\">\n\t\t\t\tRemove unneccesary whitespace in the text areas on the testing\n\t\t\t\tweb UI. Thanks to GitHub user @elnin0815 for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"613\">\n\t\t\t\tIn JAX-RS server it is now possible to change the server exception handler\n\t\t\t\tat runtime without a server restart.\n\t\t\t\tThanks to Sebastien Riviere for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"610\">\n\t\t\t\tFix a potential race condition when the FhirContext is being accessed by many threads\n\t\t\t\tat the same time right as it is initializing. Thanks to Ben Spencer for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.3\" date=\"2017-03-18\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA): 5.1.0 -&gt; 5.2.7</li>\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.4 -&gtp; 5.7.0.CR1</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA): 5.2.4 -&gtp; 5.3.4</li>\n\t\t\t\t\t\t<li>Spring (JPA): 4.3.1 -&gt; 4.3.6</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe JPA server now supports custom search parameters in DSTU3\n\t\t\t\tmode. This allows users to create search parameters which contain\n\t\t\t\tcustom paths, or even override and disable existing search\n\t\t\t\tparameters.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI example uploader couldn't find STU3 examples after CI server\n\t\t\t\twas moved to build.fhir.org\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA subscription module that prevented purging stale\n\t\t\t\tsubscriptions when many were present on Postgres\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"532\">\n\t\t\t\tServer interceptor methods were being called twice unnecessarily\n\t\t\t\tby the JPA server, and the DaoConfig interceptor registration\n\t\t\t\tframework was not actually useful. Thanks to GitHub user\n\t\t\t\t@mattiuusitalo for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"503\">\n\t\t\t\tAuthorizationInterceptor on JPA server did not correctly\n\t\t\t\tapply rules on deleting resources in a specific compartment\n\t\t\t\tbecause the resource metadata was stripped by the JPA server\n\t\t\t\tbefore the interceptor could see it. Thanks to\n\t\t\t\tEeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"519\">\n\t\t\t\tJPA server exported CapabilityStatement includes\n\t\t\t\tdouble entries for the _id parameter and uses the\n\t\t\t\twrong type (string instead of token). Thanks to\n\t\t\t\tRobert Lichtenberger for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"504\">\n\t\t\t\tCustom resource types which extend Binary must not\n\t\t\t\thave declared extensions since this is invalid in\n\t\t\t\tFHIR (and HAPI would just ignore them anyhow). Thanks\n\t\t\t\tto Thomas S Berg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStandard HAPI zip/tar distributions did not include the project\n\t\t\t\tsources and JavaDoc JARs. Thanks to Keith Boone for pointing\n\t\t\t\tthis out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer AuthorizationInterceptor always rejects history operation\n\t\t\t\tat the type level even if rules should allow it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server terminology service was not correctly validating or expanding codes\n\t\t\t\tin SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"539\">\n\t\t\t\tAttempting to search for an invalid resource type (e.g. GET base/FooResource) should\n\t\t\t\treturn an HTTP 404 and not a 400, per the HTTP spec. Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"544\">\n\t\t\t\tWhen parsing a Bundle containing placeholder fullUrls and references\n\t\t\t\t(e.g. \"urn:uuid:0000-0000\") the resource reference targets did not get\n\t\t\t\tpopulated with the given resources. Note that as a part of this\n\t\t\t\tchange, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified\n\t\t\t\tso that when parsing a placeholder ID, the complete placeholder including the\n\t\t\t\t\"urn:uuid:\" or \"urn:oid:\" prefix will be placed into the ID part. Previously,\n\t\t\t\tthe prefix was treated as the base URL, which led to strange behaviour\n\t\t\t\tlike the placeholder being treated as a real IDs. Thanks to GitHub\n\t\t\t\tuser @jodue for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeclared extensions with multiple type() options listed in the @Child\n\t\t\t\tannotation caused a crash on startup. Now this is supported.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 XHTML parser for narrative choked if the narrative contained\n\t\t\t\tan <![CDATA[<code>&amp;rsquot;</code>]]> entity string.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"538\">\n\t\t\t\tWhen parsing a quantity parameter on the server with a\n\t\t\t\tvalue and units but no system (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)\n\t\t\t\tthe unit was incorrectly treated as the system. Thanks to\n\t\t\t\t@CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"533\">\n\t\t\t\tCorrect a typo in the JPA ValueSet ResourceProvider which prevented\n\t\t\t\tsuccessful operation under Spring 4.3. Thanks to\n\t\t\t\tRobbert van Waveren for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDeprecate the method\n\t\t\t\t<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>\n\t\t\t\tas it is no longer used by HAPI and is just an annoying step\n\t\t\t\tin creating custom structures. Thanks to Allan Bro Hansen\n\t\t\t\tfor pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"547\">\n\t\t\t\tCapturingInterceptor did not buffer the response meaning\n\t\t\t\tthat in many circumstances it did not actually capture\n\t\t\t\tthe response. Thanks to Jenny Syed of Cerner for\n\t\t\t\tthe pull request and contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"548\">\n\t\t\t\tClean up dependencies and remove Eclipse project files from git. Thanks to\n\t\t\t\t@sekaijin for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen performing a conditional create in a transaction in JPA server,\n\t\t\t\tif a resource already existed matching the conditional expression, the\n\t\t\t\tserver did not change the version of the resource but did update the body\n\t\t\t\twith the passed in body. Thanks to Artem Sopin for reporting and providing a test\n\t\t\t\tcase for this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient revincludes did not include the :recurse modifier. Thanks to\n\t\t\t\tJenny Meinsma for pointing this out on Zulip!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server did not return an OperationOutcome in the response for\n\t\t\t\ta normal delete operation.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix an issue in JPA server where _history results were kept in memory instead\n\t\t\t\tof being spooled to the database as they should be. Note that as a part of this fix\n\t\t\t\ta new method was added to\n\t\t\t\t<![CDATA[<code>IBundleProvider</code> called <code>getUuid()</code>]]>. This\n\t\t\t\tmethod may return <![CDATA[<code>null</code>]]> in any current cases.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExpanding a ValueSet in JPA server did not correctly apply\n\t\t\t\t<![CDATA[<code>?filter=</code>]]> parameter when the ValueSet\n\t\t\t\tbeing expanded had codes included explicitly (i.e. not by\n\t\t\t\tis-a relationship). Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA validator incorrectly returned an HTTP 400 instead of an HTTP 422 when\n\t\t\t\tthe resource ID was not present and required, or vice versa. Thanks to\n\t\t\t\tBrian Postlethwaite for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using an annotation based client, a ClassCastException would\n\t\t\t\toccur under certain circumstances when the response contained\n\t\t\t\tcontained resources\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server interceptor methods for create/update/delete provided\n\t\t\t\tthe wrong version ID to the interceptors\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA post-processing hook for subclasses of BaseValidatingInterceptor is now available.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"585\">\n\t\t\t\tAuthorizationInterceptor can now authorize (allow/deny) extended operations\n\t\t\t\ton instances and types by wildcard (on any type, or on any instance)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"595\">\n\t\t\t\tWhen RequestValidatingInterceptor is used, the validation results\n\t\t\t\tare now populated into the OperationOutcome produced by\n\t\t\t\tcreate and update operations\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"542\">\n\t\t\t\tAdd support for the $process-message operation to fluent client.\n\t\t\t\tThanks to Hugo Soares for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"543\">\n\t\t\t\tParser can now be configured when encoding to use a specific\n\t\t\t\tbase URL for extensions. Thanks to Sebastien Riviere for the\n\t\t\t\tpull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"568\">\n\t\t\t\tCorrect the resource paths for the DSTU2.1 validation resources,\n\t\t\t\tallowing the validator to correctly work against those structures.\n\t\t\t\tThanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"551\">\n\t\t\t\tXML Parser failed to parse large field values (greater than 512 Kb)\n\t\t\t\ton certain platforms where the StAX parser was overridden. Thanks to\n\t\t\t\tGitHub user @Jodue for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"575\">\n\t\t\t\tRemove an unneccesary database flush when saving large code systems to\n\t\t\t\tthe JPA database, improving performance of this operation. Thanks to\n\t\t\t\tJoel Schneider for the pull request and analysis!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new post-processing hook for subclasses of BaseValidatingInterceptor is now\n\t\t\t\tavailable. The hook exposes the request details on validation failure prior to throwing an\n\t\t\t\tUnprocessableEntityException.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.2\" date=\"2016-12-20\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<!--<li>spring (JPA): 4.3.1 -&gt; 4.3.4</li>-->\n\t\t\t\t\t\t<li>Derby (CLI): 10.12.1.1 -&gt; 10.13.1.1</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.3.10.v20160621 -&gt; 9.3.14.v20161028</li>\n\t\t\t\t\t\t<li>JAnsi (CLI): 1.13 -&gt; 1.14</li>\n\t\t\t\t\t\t<li>Phloc Commons (SCH Validator): 4.4.5 -&gt; 4.4.6</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in AuthorizationIntetceptor where\n\t\t\t\ttransactions are blocked even when they\n\t\t\t\tshould not be\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix regression in HAPI FHIR 2.1 JPA\n\t\t\t\tserver where some search parameters on\n\t\t\t\tmetadata resources did not appear\n\t\t\t\t(e.g. \"StructureDefinition.url\"). Thanks\n\t\t\t\tto David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd ability to JPA server for disabling stale search\n\t\t\t\texpiry. This is useful if you are deploying the server\n\t\t\t\tto a cluster.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"495\">\n\t\t\t\tRestfulServer with no explicitly set FhirContext\n\t\t\t\tfails to detect the presents of DSTU3 structures. Thanks\n\t\t\t\tto GitHub user @vijayt27 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAs the\n\t\t\t\t<![CDATA[<a href=\"https://github.com/eBay/cors-filter\">eBay CORS interceptor</a>]]>\n\t\t\t\tproject\n\t\t\t\thas gone dormant, we have introduced a new\n\t\t\t\tHAPI server interceptor which can be used to implement CORS support\n\t\t\t\tinstead of using the previously recommended Servlet Filter. All server\n\t\t\t\texamples as well as the CLI have been switched to use this new interceptor.\n\t\t\t\tSee the\n\t\t\t\t<![CDATA[<a href=\"./doc_cors.html\">CORS Documentation</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"480\">\n\t\t\t\tMake the parser configurable so that when\n\t\t\t\tparsing an invalid empty value (e.g.\n\t\t\t\t<![CDATA[<code>{\"status\":\"\"}</code>]]>) the\n\t\t\t\tparser will either throw a meaningful exception\n\t\t\t\tor log a warning depending on the configured\n\t\t\t\terror handler.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"276\">\n\t\t\t\tFix issue when serializing resources that have\n\t\t\t\tcontained resources which are referred to\n\t\t\t\tfrom multiple places. Sometimes when serializing\n\t\t\t\tthese resources the contained resource section\n\t\t\t\twould contain duplicates. Thanks to Hugo Soares\n\t\t\t\tand Stefan Evinance for reporting and providing\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"518\">\n\t\t\t\tAllow client to gracefully handle running in DSTU3 mode\n\t\t\t\tbut with a structures JAR that does not contain a\n\t\t\t\tCapabilityStatement resource. Thanks to Michael Lawley\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash in JPA server when searching using an _include if _include targets are\n\t\t\t\texternal references (and therefore can't be loaded\n\t\t\t\tby the server). Thanks to Hannes Ulrich for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHAPI FHIR CLI failed to delete a file when uploading\n\t\t\t\texample resources while running under Windows.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"521\">\n\t\t\t\tServer should reject update if the resource body\n\t\t\t\tdoes not contain an ID, or the ID does not match\n\t\t\t\tthe request URL. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"500\">\n\t\t\t\tWeb Testing UI's next and previous buttons for paging\n\t\t\t\tthrough paged results did not work after the migration\n\t\t\t\tto using Thymeleaf 3. Thanks to GitHub user @gsureshkumar\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"525\">\n\t\t\t\tWhen parsing invalid enum values in STU3,\n\t\t\t\treport errors through the parserErrorHandler,\n\t\t\t\tnot by throwing an exception. Thanks to\n\t\t\t\tMichael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"516\">\n\t\t\t\tWhen parsing DSTU3 resources with enumerated\n\t\t\t\ttypes that contain invalid values, the parser will now\n\t\t\t\tinvoke the parserErrorHandler. For example, when parsing\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>{\"resourceType\":\"Patient\", \"gender\":\"foo\"}</code>\n\t\t\t\t]]>\n\t\t\t\tthe previous behaviour was to throw an InvalidArgumentException.\n\t\t\t\tNow, the parserErrorHandler is invoked. In addition, thw\n\t\t\t\tLenientErrorHandler has been modified so that this one case\n\t\t\t\twill result in a DataFormatException. This has the effect\n\t\t\t\tthat servers which receive an invalid enum velue will return\n\t\t\t\tan HTTP 400 instead of an HTTP 500. Thanks to Jim\n\t\t\t\tSteel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"520\">\n\t\t\t\tDSTU3 context now pulls the FHIR version from the actual\n\t\t\t\tmodel classes. Thanks to Michael Lawley for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tEnhancements to the tinder-plugin's generic template features\n\t\t\t\tof the <![CDATA[<i>generate-multi-files</i> and <i>generate-single-file</i>\n\t\t\t\tMaven goals as well as the Ant <i>hapi-tinder</i> task.\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Provides the full Tinder data model by adding composites, valuesets, and profiles to resourcesw.</li>\n\t\t\t\t\t<li>Supports generating files for resources, composites, valuesets, and profiles</li>\n\t\t\t\t\t<li>Supports Velocimacro files outside the tinder-plugin JAR</li>\n\t\t\t\t\t<li>Provides filename prefix as well as suffix properties</li>\n\t\t\t\t\t<li>Can specify any of the Velocity configuration parameters such as\n\t\t\t\t\t<i>macro.provide.scope.control</i> which allows safe macro recursion</li>\n\t\t\t\t\t<li>Templates can now drill down into the referenced children for a ResourceBlockCopy</li>\n\t\t\t\t\t<li>Normalization of properties across all three generic tasks</li>\n\t\t\t\t</ul>\n\t\t\t    ]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"523\">\n\t\t\t\tFix ordering of validator property handling when an element\n\t\t\t\thas a name that is similar to a shorter name[x] style name.\n\t\t\t\tThanks to CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"510\">\n\t\t\t\tAdd a docker configuration to the hapi-fhir-jpaservr-example\n\t\t\t\tmodule. Thanks to Gijsbert van den Brink for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"507\">\n\t\t\t\tAdd utility constructors to MoneyDt. Thanks to James Ren for the\n\t\t\t\tcontribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"528\">\n\t\t\t\tAuthorizationInterceptor was failing to allow read requests to pass\n\t\t\t\twhen a rule authorized those resources by compartment. Thanks to\n\t\t\t\tGitHub user @mattiuusitalo for reporting and supplying\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect a typo in client\n\t\t\t\t<![CDATA[<code>IHttpRequest</code>]]> class: \"bufferEntitity\" should be \"bufferEntity\".\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tErrorHandler is now called (resulting in a warning by default, but can also be an exception) when arsing\n\t\t\t\tJSON if\n\t\t\t\tthe resource ID is not a JSON string, or an object is found where an array is expected (e.g. repeating\n\t\t\t\tfield). Thanks\n\t\t\t\tto Jenni Syed of Cerner for providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix Web Testing UI to be able to handle STU3 servers which\n\t\t\t\treturn CapabilityStatement instead of the previously used\n\t\t\t\t\"Conformance\" resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI example uploader couldn't find STU3 examples after CI server\n\t\t\t\twas moved to build.fhir.org\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA subscription module that prevented purging stale\n\t\t\t\tsubscriptions when many were present on Postgres\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"532\">\n\t\t\t\tServer interceptor methods were being called twice unnecessarily\n\t\t\t\tby the JPA server, and the DaoConfig interceptor registration\n\t\t\t\tframework was not actually useful. Thanks to GitHub user\n\t\t\t\t@mattiuusitalo for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"503\">\n\t\t\t\tAuthorizationInterceptor on JPA server did not correctly\n\t\t\t\tapply rules on deleting resources in a specific compartment\n\t\t\t\tbecause the resource metadata was stripped by the JPA server\n\t\t\t\tbefore the interceptor could see it. Thanks to\n\t\t\t\tEeva Turkka for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"519\">\n\t\t\t\tJPA server exported CapabilityStatement includes\n\t\t\t\tdouble entries for the _id parameter and uses the\n\t\t\t\twrong type (string instead of token). Thanks to\n\t\t\t\tRobert Lichtenberger for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"504\">\n\t\t\t\tCustom resource types which extend Binary must not\n\t\t\t\thave declared extensions since this is invalid in\n\t\t\t\tFHIR (and HAPI would just ignore them anyhow). Thanks\n\t\t\t\tto Thomas S Berg for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tStandard HAPI zip/tar distributions did not include the project\n\t\t\t\tsources and JavaDoc JARs. Thanks to Keith Boone for pointing\n\t\t\t\tthis out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer AuthorizationInterceptor always rejects history operation\n\t\t\t\tat the type level even if rules should allow it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server terminology service was not correctly validating or expanding codes\n\t\t\t\tin SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"539\">\n\t\t\t\tAttempting to search for an invalid resource type (e.g. GET base/FooResource) should\n\t\t\t\treturn an HTTP 404 and not a 400, per the HTTP spec. Thanks to\n\t\t\t\tGitHub user @CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"544\">\n\t\t\t\tWhen parsing a Bundle containing placeholder fullUrls and references\n\t\t\t\t(e.g. \"urn:uuid:0000-0000\") the resource reference targets did not get\n\t\t\t\tpopulated with the given resources. Note that as a part of this\n\t\t\t\tchange, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified\n\t\t\t\tso that when parsing a placeholder ID, the complete placeholder including the\n\t\t\t\t\"urn:uuid:\" or \"urn:oid:\" prefix will be placed into the ID part. Previously,\n\t\t\t\tthe prefix was treated as the base URL, which led to strange behaviour\n\t\t\t\tlike the placeholder being treated as a real IDs. Thanks to GitHub\n\t\t\t\tuser @jodue for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeclared extensions with multiple type() options listed in the @Child\n\t\t\t\tannotation caused a crash on startup. Now this is supported.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 XHTML parser for narrative choked if the narrative contained\n\t\t\t\tan <![CDATA[<code>&amp;rsquot;</code>]]> entity string.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"538\">\n\t\t\t\tWhen parsing a quantity parameter on the server with a\n\t\t\t\tvalue and units but no system (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)\n\t\t\t\tthe unit was incorrectly treated as the system. Thanks to\n\t\t\t\t@CarthageKing for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"533\">\n\t\t\t\tCorrect a typo in the JPA ValueSet ResourceProvider which prevented\n\t\t\t\tsuccessful operation under Spring 4.3. Thanks to\n\t\t\t\tRobbert van Waveren for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDeprecate the method\n\t\t\t\t<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>\n\t\t\t\tas it is no longer used by HAPI and is just an annoying step\n\t\t\t\tin creating custom structures. Thanks to Allan Bro Hansen\n\t\t\t\tfor pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"547\">\n\t\t\t\tCapturingInterceptor did not buffer the response meaning\n\t\t\t\tthat in many circumstances it did not actually capture\n\t\t\t\tthe response. Thanks to Jenny Syed of Cerner for\n\t\t\t\tthe pull request and contribution!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.1\" date=\"2016-11-11\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 structure definitions have been updated to the\n\t\t\t\tSTU3 latest definitions (1.7.0 - SVN 10129). In\n\t\t\t\tparticular, this version supports the new CapabilityStatement\n\t\t\t\tresource which replaces the previous Conformance\n\t\t\t\tresource (in order to reduce upgrade pain, both resource\n\t\t\t\ttypes are included in this version of HAPI)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>spring-data-orm (JPA): 1.10.2 -&gt; 1.10.4</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a fairly significant issue in JPA Server when using the\n\t\t\t\t<![CDATA[<code>DatabaseBackedPagingProvider</code>]]>: When paging over the results\n\t\t\t\tof a search / $everything operation, under certain circumstances resources may be missing from the last page\n\t\t\t\tof results\n\t\t\t\tthat is returned. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tClient, Server, and JPA server now support experimental support\n\t\t\t\tfor\n\t\t\t\t<![CDATA[HTTP PATCH]]>\n\t\t\t\tusing the XML Patch and JSON Patch syntax as explored during the\n\t\t\t\tSeptember 2016 Baltimore Connectathon. See\n\t\t\t\t<![CDATA[<a href=\"http://wiki.hl7.org/index.php?title=201609_PATCH_Connectathon_Track_Proposal\">this wiki page</a>]]>\n\t\t\t\tfor a description of the syntax.\n\t\t\t\t<![CDATA[<br/>]]>\n\t\t\t\tThanks to Pater Girard for all of his help during the connectathon\n\t\t\t\tin implementing this feature!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAndroid library now uses OkHttp client by default instead\n\t\t\t\tof Apache HttpClient. This should lead to much simpler\n\t\t\t\tsupport for Android in the future.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBoth client and server now use the new STU3 mime types by default\n\t\t\t\tif running in STU3 mode (in other words, using an STU3\n\t\t\t\tFhirContext).\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, when returning a list of resources, the server sometimes failed to add\n\t\t\t\t<![CDATA[<code>_include</code>]]> resources to the response bundle if they were\n\t\t\t\treferred to by a contained reosurce. Thanks to Neal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix regression in web testing UI where \"prev\" and \"next\" buttons don't work\n\t\t\t\twhen showing a result bundle\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should not attempt to resolve built-in FHIR StructureDefinitions from the\n\t\t\t\tdatabase (this causes a significant performance hit when validating)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tBanUnsupportedHttpMethodsInterceptor was erroring out when a client\n\t\t\t\tattempts HTTP HEAD requests\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional URLs in JPA server (e.g. for delete or update) did not support the\n\t\t\t\t<![CDATA[<code>_has</code>]]> parameter\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"440\">\n\t\t\t\tRemove Maven dependency on Saxon library, as it is not actually used. Thanks\n\t\t\t\tto Lem Edmondson for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"444\">\n\t\t\t\tTimes before 1970 with fractional milliseconds were parsed incorrectly. Thanks\n\t\t\t\tto GitHub user @CarthageKing for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"448\">\n\t\t\t\tPrevent crash in parser when parsing resource\n\t\t\t\twith multiple profile declarations when\n\t\t\t\tdefault type for profile is used. Thanks to\n\t\t\t\tFilip Domazet for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"445\">\n\t\t\t\tSTU3 servers were adding the old MimeType\n\t\t\t\tstrings to the\n\t\t\t\t<![CDATA[<code>Conformance.format</code>]]>\n\t\t\t\tpart of the generated server conformance\n\t\t\t\tstatement\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"446\">\n\t\t\t\tWhen performing an update using the client on a resource that\n\t\t\t\tcontains other resources (e.g. Bundle update), all child resources in the\n\t\t\t\tparent bundle were incorrectly given the ID of the parent. Thanks\n\t\t\t\tto Filip Domazet for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU clients now use an Accept header which\n\t\t\t\tindicates support for both the old MimeTypes\n\t\t\t\t(e.g. <![CDATA[<code>application/xml+fhir</code>]]>)\n\t\t\t\tand the new MimeTypes\n\t\t\t\t(e.g. <![CDATA[<code>application/fhir+xml</code>]]>)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now sends correct\n\t\t\t\t<![CDATA[<code>HTTP 409 Version Conflict</code>]]>\n\t\t\t\twhen a\n\t\t\t\tDELETE fails because of constraint issues, instead of\n\t\t\t\t<![CDATA[<code>HTTP 400 Invalid Request</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer history operation did not populate the Bundle.entry.request.url\n\t\t\t\tfield, which is required in order for the bundle to pass validation.\n\t\t\t\tThanks to Richard Ettema for spotting this!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to the server interceptor framework which will be\n\t\t\t\tcalled after all other processing is complete (useful for performance\n\t\t\t\ttracking). The server LoggingInterceptor has been switched to using this\n\t\t\t\tmethod which means that log lines will be created when processing is finished,\n\t\t\t\tinstead of when it started.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 clients were not sending the new mimetype values in the\n\t\t\t\t<![CDATA[<code>Content-Type</code>]]> header. Thanks to\n\t\t\t\tClaude Nanjo for pointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJAX-RS server was not able to handle the new mime types defined\n\t\t\t\tin STU3\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not handle custom types when being called\n\t\t\t\tprogramatically (I.e. not through HTTP interface). Thanks to\n\t\t\t\tAnthony Mei for pointing this out!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI was not correctly able to upload DSTU2 examples to any server\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 validator has been upgrated to include fixes made since the\n\t\t\t\t1.6.0 ballot\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent JPA server from creating a bunch of\n\t\t\t\tFhirContext objects for versions of FHIR that\n\t\t\t\taren't actually being used\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"443\">\n\t\t\t\tXhtmlNode.equalsDeep() contained a bug which caused resources\n\t\t\t\tcontaining a narrative to always return\n\t\t\t\t<![CDATA[<code>false</code>]]> for STU3\n\t\t\t\t<![CDATA[<code>Resource#equalsDeep()</code>]]>. Thanks to\n\t\t\t\tGitHub user @XcrigX for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"441\">\n\t\t\t\tJPA server did not correctly process searches for chained parameters\n\t\t\t\twhere the chain passed across a field that was a choice between a\n\t\t\t\treference and a non-reference type (e.g.\n\t\t\t\t<![CDATA[<code>MedicationAdministration.medication[x]</code>]]>.\n\t\t\t\tThanks to GitHub user @Crudelus for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"414\">\n\t\t\t\tHandle parsing an extension without a URL more gracefully. In HAPI FHIR 2.0 this caused\n\t\t\t\ta NullPointerException to be thrown. Now it will trigger a warning, or throw a\n\t\t\t\tDataFormatException if the StrictErrorHandler is configured on the parser.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCalling a HAPI server URL with a chain on a parameter that shouldn't accept\n\t\t\t\tchains (e.g.\n\t\t\t\t<![CDATA[<code>GET [base]/Patient?name.foo=smith</code>]]>)\n\t\t\t\tdid not return an error and instead just ignored the chained part\n\t\t\t\tand treated the parameter as though it did not have the chain. This\n\t\t\t\tled to confusing and potentially unsafe behaviour. This has been\n\t\t\t\tcorrected to return an error to the client. Thanks to\n\t\t\t\tKevin Tallevi for finding this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"411\">\n\t\t\t\tFix #411 - Searching by <![CDATA[<code>POST [base]/_search</code>]]> with urlencoded parameters doesn't work\n\t\t\t\tcorrectly if\n\t\t\t\tinterceptors are accessing the parameters and there is are also\n\t\t\t\tparameters on the URL. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tFluent client can now return types other than Parameters\n\t\t\t\twhen invoking operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server shouldn't report a totalCount in Bundle of \"-1\" when\n\t\t\t\tthere are no results\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"454\">\n\t\t\t\tJPA server was not correctly normalizing strings with non-latin characters\n\t\t\t\t(e.g. Chinese chars). Thanks to GitHub user @YinAqu for reporting and providing\n\t\t\t\tsome great analysis of the issue!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to ReferenceClientParam which allows you to\n\t\t\t\tpass in a number of IDs by a collection of Strings. Thanks to\n\t\t\t\tThomas Andersen for the pul request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"327\">\n\t\t\t\tWhen encoding a resource in JSON where the resource has\n\t\t\t\tan extension with a value where the value is a reference to a\n\t\t\t\tcontained resource, the reference value (e.g. \"#1\") did not\n\t\t\t\tget serialized. Thanks to GitHub user @fw060 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"464\">\n\t\t\t\tResponseHighlighterInterceptor now pretty-prints responses\n\t\t\t\tby default unless the user has explicitly requested\n\t\t\t\ta non-pretty-printed response (ie.\n\t\t\t\tusing <![CDATA[<code>?_pretty=false</code>]]>. Thanks to\n\t\t\t\tAllan Brohansen and Jens Villadsen for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"469\">\n\t\t\t\tAdd a new JSON library abstraction layer to the JSON parser.\n\t\t\t\tThis contribution shouldn't have any end-user impact but does\n\t\t\t\tmake it easier to use the JSON parser to generate custom structures\n\t\t\t\tfor other purposes, and should allow us to support RDF more\n\t\t\t\teasily at some point. Thanks to Bill Denton for the pull\n\t\t\t\trequest and the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"455\">\n\t\t\t\tDSTU1 Bundle encoder did not include the Bundle entry author in\n\t\t\t\tthe generated bundle. Thanks to Hannes Venter for the pull\n\t\t\t\trequest and contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove unused field (myIsContained) from ResourceTable\n\t\t\t\tin JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor is now a bit more aggressive\n\t\t\t\tat blocking read operations, stopping them on the\n\t\t\t\tway in if there is no way they will be accepted\n\t\t\t\tto the resource check on the way out. In addition\n\t\t\t\tit can now be configured to allow/deny operation\n\t\t\t\tinvocations at the instance level on any\n\t\t\t\tinstance of a given type\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"472\">\n\t\t\t\tSTU3 servers were incorrectly returning the\n\t\t\t\t<![CDATA[<code>Content-Location</code>]]>\n\t\t\t\theader instead of the\n\t\t\t\t<![CDATA[<code>Content</code>]]>\n\t\t\t\theader. The former has been removed from the\n\t\t\t\tFHIR specification in STU3, but the\n\t\t\t\tlatter got removed in HAPI's code base.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCorrect several documentation issues. Thanks to Vadim Peretokin\n\t\t\t\tfor the pull requests!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRemove an unneccesary database flush\n\t\t\t\tfrom JPA persistence operations\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"470\">\n\t\t\t\tAdd method to fluent client to allow OR search across several\n\t\t\t\tprofiles. Thanks to Thomas Andersen for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"2.0\" date=\"2016-08-30\">\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parsing in HAPI FHIR has been switched from using JSR353 (javax.json) to\n\t\t\t\tusing Google Gson. For this reason we are bumping the major release number to\n\t\t\t\t2.0. Theoretically this should not affect projects in any major way, but Gson\n\t\t\t\tdoes have subtle differences. Two differences which popped up a fair bit in\n\t\t\t\tour own testing:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\tA space is placed after the : in keys, e.g. what was previously\n\t\t\t\t\t\tencoded as <code>\"resourceType\":\"Patient\"</code> is now encoded\n\t\t\t\t\t\tas <code>\"resourceType\": \"Patient\"</code> (this broke a number of\n\t\t\t\t\t\tour unit tests with hardcoded resource definitions)\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\tTrailing content after a valid json resource is rejected by\n\t\t\t\t\t\tGson (it was ignored by the Glassfish parser we were previously\n\t\t\t\t\t\tusing even though it was invalid)\n\t\t\t\t\t</ul>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSTU3 structure definitions have been updated to the\n\t\t\t\tSTU3 ballot candidate versions (1.6.0 - SVN 9663)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBoth client and server now support the new Content Types decided in\n\t\t\t\t<![CDATA[<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=10199\">FHIR #10199</a>]]>\n\t\t\t\t.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis means that the server now supports\n\t\t\t\t<![CDATA[<code>application/fhir+xml</code> and <code>application/fhir+json</code>]]>\n\t\t\t\tin addition to the older style\n\t\t\t\t<![CDATA[<code>application/xml+fhir</code> and <code>application/json+fhir</code>]]>.\n\t\t\t\tIn order to facilitate migration by implementors, the old style remains the default\n\t\t\t\tfor now, but the server will respond using the new style if the request contains it. The\n\t\t\t\tclient now uses an <![CDATA[<code>Accept</code>]]> header value which requests both\n\t\t\t\tstyles with a preference given to the new style when running in DSTU3 mode.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, the server has also been enhanced so that if a request\n\t\t\t\tcontains a Content-Type header but no Accept header, the response will prefer the\n\t\t\t\tencoding specified by the Content-Type header.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Logback (used in sample projects): 1.1.5 -&gt; 1.1.7</li>\n\t\t\t\t\t\t<li>Phloc Commons (used by schematron validator): 4.4.4 -&gt; 4.4.5</li>\n\t\t\t\t\t\t<li>Commons-IO: 2.4 -&gt; 2.5</li>\n\t\t\t\t\t\t<li>Apache HTTPClient: 4.5.1 -&gt; 4.5.2</li>\n\t\t\t\t\t\t<li>Apache HTTPCore: 4.4.4 -&gt; 4.4.5</li>\n\t\t\t\t\t\t<li>Jersey (JAX-RS tests): 2.22.2 -&gt; 2.23.1</li>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.3.0 -&gt; 4.3.1</li>\n\t\t\t\t\t\t<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.1</li>-->\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.4</li>\n\t\t\t\t\t\t<li>Thymeleaf (Narrative Generator / Web Tester): 2.1.4 -&gt;3.0.1</li> \n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in DSTU1 Bundle parsing where unexpected elements in the bundle resulted in a failure\n\t\t\t\tto parse.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDSTU2 QuestionnaireResponse validator failed with an exception if the\n\t\t\t\tQuestionnaireResponse contained certain groups with no content\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"150\">\n\t\t\t\tFluent client should ignore parameter values which are null instead of including\n\t\t\t\tthem as <![CDATA[<code>?foo=null</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen using <![CDATA[<code>_elements</code>]]> parameter on server, the server was not\n\t\t\t\tautomatically adding the <![CDATA[<code>SUBSETTED</code>]]> tag as it should\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server should now automatically detect\n\t\t\t\tif Hibernate Search (Lucene) is configured to be\n\t\t\t\tdisabled and will not attempt to use it. This\n\t\t\t\tprevents a crash for some operations.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tA new server interceptor \"BanUnsupprtedHttpMethodsInterceptor\" has been added\n\t\t\t\twhich causes the server to return an HTTP 405 if an unsupported HTTP\n\t\t\t\tverb is received from the client\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"404\">\n\t\t\t\tFix an issue where resource IDs were not correctly set when using\n\t\t\t\tDSTU2 HL7org structures with the JAX-RS module. Thanks to Carlo Mion\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\thapi-fhir-testpage-overlay project contained an unneccesary\n\t\t\t\tdependency on hapi-fhir-jpaserver-base module, which resulted in\n\t\t\t\tprojects using the overlay having a large number of unnneded\n\t\t\t\tJARs included\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"403\">\n\t\t\t\tIt is not possible to configure both the parser and the context to\n\t\t\t\tpreserve versions in resource references (default behaviour is to\n\t\t\t\tstrip versions from references). Thanks to GitHub user @cknaap\n\t\t\t\tfor the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"409\">\n\t\t\t\t<![CDATA[<code>Tag#setCode(String)</code>]]> did not actually set the code it was supposed to\n\t\t\t\tset. Thanks to Tim Tschampel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"401\">\n\t\t\t\tJPA server's <![CDATA[<code>/Bundle</code>]]> endpoint cleared\n\t\t\t\tthe <![CDATA[<code>Bundle.entry.fullUrl</code>]]> field on stored\n\t\t\t\tbundles, resulting in invalid content being saved. Thanks to Mirjam\n\t\t\t\tBaltus for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now returns HTTP 200 instead of HTTP 404 for\n\t\t\t\tconditional deletes which did not find any matches,\n\t\t\t\tper FHIR-I decision.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient that declares explicitly that it is searching/reading/etc for\n\t\t\t\ta custom type did not automatically parse into that type.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"406\">\n\t\t\t\tAllow servers to specify the authentication realm of their choosing when\n\t\t\t\tthrowing an AuthenticationException. Thanks to GitHub user @allanbrohansen\n\t\t\t\tfor the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"416\">\n\t\t\t\tAdd a new client implementation which uses the\n\t\t\t\t<![CDATA[<a href=\"http://square.github.io/okhttp/\">OkHttp</a>]]>\n\t\t\t\tlibrary as the HTTP client implementation (instead of Apache HttpClient).\n\t\t\t\tThis is particularly useful for Android (where HttpClient is a pain) but\n\t\t\t\tcould also be useful in other places too.\n\t\t\t\tThanks to Matt Clarke of Orion Health for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a regression when parsing resources that have contained\n\t\t\t\tresources, where the reference in the outer resource which\n\t\t\t\tlinks to the contained resource sometimes did does not get\n\t\t\t\tpopulated with the actual target resource instance. Thanks to\n\t\t\t\tNeal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\thapi-fhir-cli upload-terminology command now has an argument\n\t\t\t\t\"-b FOO\" that lets you add an authorization header in the form\n\t\t\t\t<![CDATA[<code>Authorization: Bearer FOO</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"423\">\n\t\t\t\tParser failed to successfully encode a custom resource\n\t\t\t\tif it contained custom fields that also used custom\n\t\t\t\ttypes. Thanks to GitHub user @sjanic for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tInprove handling of _text and _content searches in JPA server to do better\n\t\t\t\tmatching on partial strings\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServers in STU3 mode will now ignore any ID or VersionID found in the\n\t\t\t\tresource body provided by the client when processing FHIR\n\t\t\t\t<![CDATA[<code>update</code>]]> operations. This change has been made\n\t\t\t\tbecause the FHIR specification now requires servers to ignore\n\t\t\t\tthese values. Note that as a result of this change, resources passed\n\t\t\t\tto <![CDATA[<code>@Update</code>]]> methods will always have\n\t\t\t\t<![CDATA[<code>null</code>]]> ID\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new methods to\n\t\t\t\t<![CDATA[<code>AuthorizationInterceptor</code>]]>\n\t\t\t\twhich allow user code to declare support for conditional\n\t\t\t\tcreate, update, and delete.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding a resource with a reference to another resource\n\t\t\t\tthat has a placeholder ID (e.g. urn:uuid:foo), the urn prefix\n\t\t\t\twas incorrectly stripped from the reference.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServers for STU3 (or newer) will no longer include a\n\t\t\t\t<![CDATA[<code>Location:</code>]]> header on responses for\n\t\t\t\t<![CDATA[<code>read</code>]]> operations. This header was\n\t\t\t\trequired in earlier versions of FHIR but has been removed\n\t\t\t\tfrom the specification.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"428\">\n\t\t\t\tFix NullPointerException when encoding an extension containing CodeableConcept\n\t\t\t\twith log level set to TRACE. Thanks to Bill Denton for the report!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd two new methods to the parser error handler that let users trap\n\t\t\t\tinvalid contained resources with no ID, as well as references to contained\n\t\t\t\tresource that do not exist.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove performance when parsing resources containing contained resources\n\t\t\t\tby eliminating a step where references were woven twice\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"426\">\n\t\t\t\tParser failed to parse resources containing an extension with a value type of\n\t\t\t\t\"id\". Thanks to Raphael M\u00c3\u00a4der for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen committing a transaction in JPA server\n\t\t\t\twhere the transaction contained placeholder IDs\n\t\t\t\tfor references between bundles, the placeholder\n\t\t\t\tIDs were not substituted with viewing\n\t\t\t\tresources using the _history operation\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI root pom shouldn't include animal-sniffer plugin,\n\t\t\t\tsince that causes any projects which extend this to\n\t\t\t\tbe held to Java 6 compliance.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.6\" date=\"2016-07-07\">\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerformance has been improved for the initial FhirContext\n\t\t\t\tobject creation by avoiding a lot of unnecessary reflection. HAPI FHIR\n\t\t\t\t1.5 had a regression compared to previous releases\n\t\t\t\tand this has been corrected, but other improvements have been\n\t\t\t\tmade so that this release is faster than previous releases too.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tIn addition, a new \"deferred scan\" mode has been implemented for\n\t\t\t\teven faster initialization on slower environments (e.g. Android).\n\t\t\t\tSee the <![CDATA[<a href=\"./doc_rest_client_http_config.html#performance\">performance documentation</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThe following shows our benchmarks for context initialization across several\n\t\t\t\tversions of HAPI:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Version 1.4: <b>560ms</b></li>\n\t\t\t\t\t\t<li>Version 1.5: <b>800ms</b></li>\n\t\t\t\t\t\t<li>Version 1.6: <b>340ms</b></li>\n\t\t\t\t\t\t<li>Version 1.6 (deferred mode): <b>240ms</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.2.5 -&gt; 4.3.0</li>\n\t\t\t\t\t\t<li>Spring-Data (JPA): 1.9.2 -&gt; 1.10.1</li>\n\t\t\t\t\t\t<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.0</li>-->\n\t\t\t\t\t\t<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.3</li>\n\t\t\t\t\t\t<li>Jetty (CLI): 9.3.9 -&gt; 9.3.10</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tRemove some clases that were deprecated over a year ago and have\n\t\t\t\tsuitable replacements:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>QualifiedDateParam has been removed, but DateParam may be used instead</li>\n\t\t\t\t\t\t<li>PathSpecification has been removedm but Include may be used instead</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"345\">\n\t\t\t\tResponseValidatingInterceptor threw an InternalErrorException (HTTP 500) for operations\n\t\t\t\tthat do not return any content (e.g. delete). Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"342\">\n\t\t\t\tREST server now throws an HTTP 400 instead of an HTTP 500 if an operation which takes\n\t\t\t\ta FHIR resource in the request body (e.g. create, update) contains invalid content that\n\t\t\t\tthe parser is unable to parse. Thanks to Jim Steel for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDeprecate fluent client search operations without an explicit declaration of the\n\t\t\t\tbundle type being used. This also means that in a client\n\t\t\t\t<![CDATA[<code>.search()</code>]]>\n\t\t\t\toperation, the\n\t\t\t\t<![CDATA[<code>.returnBundle(Bundle.class)</code>]]>\n\t\t\t\tneeds to be the last statement before\n\t\t\t\t<![CDATA[<code>.execute()</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"346\">\n\t\t\t\tServer now respects the parameter <![CDATA[<code>_format=application/xml+fhir\"</code>]]>\n\t\t\t\twhich is technically invalid since the + should be escaped, but is likely to be used. Also,\n\t\t\t\ta parameter of <![CDATA[<code>_format=html</code>]]> can now be used, which\n\t\t\t\tforces SyntaxHighlightingInterceptor to use HTML even\n\t\t\t\tif the headers wouldn't otherwise trigger it.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tImprove performance when parsing large bundles by fixing a loop over all of the\n\t\t\t\tentries inthe bundle to stitch together cross-references, which was happening once\n\t\t\t\tper entry instead of once overall. Thanks to Erick on the HAPI FHIR Google Group for\n\t\t\t\tnoticing that this was an issue!\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tJSON parser no longer allows the resource ID to be specified in an element called \"_id\"\n\t\t\t\t(the correct one is \"id\"). Previously _id was allowed because some early FHIR examples\n\t\t\t\tused that form, but this was never actually valid so it is now being removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now allows \"forced IDs\" (ids containing non-numeric, client assigned IDs)\n\t\t\t\tto use the same logical ID part on different resource types. E.g. A server may now have\n\t\t\t\tboth Patient/foo and Obervation/foo on the same server.<![CDATA[<br/><br/>]]>\n\t\t\t\tNote that existing databases will need to modify index \"IDX_FORCEDID\" as\n\t\t\t\tit is no longer unique, and perform a reindexing pass.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"350\">\n\t\t\t\tWhen serializing/encoding custom types which replace exsting choice fields by\n\t\t\t\tfixing the choice to a single type, the parser would forget that the\n\t\t\t\tfield was a choice and would use the wrong name (e.g. \"abatement\" instead of\n\t\t\t\t\"abatementDateType\"). Thanks to Yaroslav Kovbas for reporting and\n\t\t\t\tproviding a unit test!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transactions sometimes created an incorrect resource reference\n\t\t\t\tif a resource being saved contained references that had a display value but\n\t\t\t\tnot an actual reference. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"352\">\n\t\t\t\tWhen performing a REST Client create or update with\n\t\t\t\t<![CDATA[<code>Prefer: return=representation</code>]]> set,\n\t\t\t\tif the server does not honour the Prefer header, the client\n\t\t\t\twill automatically fetch the resource before returning. Thanks\n\t\t\t\tto Ewout Kramer for the idea!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"354\">\n\t\t\t\tDSTU3 structures now have\n\t\t\t\t<![CDATA[<code>setFoo(List)</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>setGetFooFirstRep()</code>]]>\n\t\t\t\tmethods, bringing them back to parity with the HAPI\n\t\t\t\tDSTU2 structures. Thanks to Rahul Somasunderam and\n\t\t\t\tClaude Nanjo for the suggestions!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server has now been refactored to use the\n\t\t\t\tnew FluentPath search parameter definitions\n\t\t\t\tfor DSTU3 resources.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRequestValidatingInterceptor and ResponseValidatingInterceptor\n\t\t\t\tboth have new method <![CDATA[<code>setIgnoreValidatorExceptions</code>]]>\n\t\t\t\twhich causes validator exceptions to be ignored, rather than causing\n\t\t\t\tprocessing to be aborted.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLoggingInterceptor on server has a new parameter\n\t\t\t\t<![CDATA[<code>${requestBodyFhir}</code>]]> which logs the entire request body.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"355\">\n\t\t\t\tJAX-RS server module now supports DSTU3 resources (previously it only supported DSTU2). Thanks\n\t\t\t\tto Phillip Warner for implementing this, and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"356\">\n\t\t\t\tGenerated conformance statements for DSTU3 servers did not properly reference their\n\t\t\t\tOperationDefinitions. Thanks\n\t\t\t\tto Phillip Warner for implementing this, and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"359\">\n\t\t\t\tProperly handle null arrays when parsing JSON resources. Thanks to Subhro for\n\t\t\t\tfixing this and providing a pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSTU3 validator failed to validate codes where the\n\t\t\t\tcode was a child code within the code system that contained it\n\t\t\t\t(i.e. not a top level code). Thanks to Jon\n\t\t\t\tZammit for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"361\">\n\t\t\t\tRestore the setType method in the DSTU1 Bundle\n\t\t\t\tclass, as it was accidentally commented out. Thanks\n\t\t\t\tto GitHub user @Virdulys for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports composite search parameters\n\t\t\t\twhere the type of the composite parameter is\n\t\t\t\ta quantity (e.g. Observation:component-code-component-value-quantity)\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tRemove the Remittance resource from DSTU2\n\t\t\t\tstructures, as it is not a real resource and\n\t\t\t\twas causing issues with interoperability\n\t\t\t\twith the .NET client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCLI tool cache feature (-c) for upload-example task sometimes failed\n\t\t\t\tto write cache file and exited with an exception.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix error message in web testing UI when loading pages in a search\n\t\t\t\tresult for STU3 endpoints.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen encoding JSON resource, the parser will now always\n\t\t\t\tensure that XHTML narrative content has an\n\t\t\t\tXHTML namespace declaration on the first\n\t\t\t\tDIV tag. This was preventing validation for\n\t\t\t\tsome resources using the official validator\n\t\t\t\trules.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer failed to invoke operations when the name\n\t\t\t\twas escaped (%24execute instead of $execute).\n\t\t\t\tThanks to Michael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transactions containing a bundle that has multiple entries\n\t\t\t\ttrying to delete the same resource caused a 500 internal error\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA module failed to index search parameters that mapped to a Timing datatype,\n\t\t\t\te.g. CarePlan:activitydate\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new option to the CLI run-server command called <![CDATA[<code>--lowmem</code>]]>.\n\t\t\t\tThis option disables some features (e.g. fulltext search) in order to allow the\n\t\t\t\tserver to start in memory-constrained environments (e.g Raspberry Pi)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen updating a resource via an update operation on the server, if the ID of the\n\t\t\t\tresource is not present in the resource body but is present on the URL, this will\n\t\t\t\tnow be treated as a warning instead of as a failure in order to be a bit more\n\t\t\t\ttolerant of errors. If the ID is present in the body but does not agree with the\n\t\t\t\tID in the URL this remains an error.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer / JPA server date range search params (e.g. Encounter:date) now treat\n\t\t\t\ta single date with no comparator (or the eq comparator) as requiring that the\n\t\t\t\tvalue be completely contained by the range specified. Thanks to Chris Moesel\n\t\t\t\tfor the suggestion.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, if a parameter was annotated with the <![CDATA[@Count]]> annotation, the\n\t\t\t\tcount would not appear in the self/prev/next links and would not actually be applied\n\t\t\t\tto the search results by the server. Thanks to Jim Steele for letting us know!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional update on server failed to process if the conditional URL did not have any\n\t\t\t\tsearch parameters that did not start with an underscore. E.g. \"Patient?_id=1\" failed\n\t\t\t\teven though this is a valid conditional reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"363\">\n\t\t\t\tJPA server can now be configured to allow external references (i.e. references that\n\t\t\t\tpoint to resources on other servers). See\n\t\t\t\t<![CDATA[<a href=\"./doc_jpa.html\">JPA Documentation</a>]]> for information on\n\t\t\t\thow to use this. Thanks to Naminder Soorma for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"366\">\n\t\t\t\tWhen posting a resource to a server that contains an invalid value in a boolean field\n\t\t\t\t(e.g. Patient with an active value of \"1\") the server should return an HTTP 400, not\n\t\t\t\tan HTTP 500. Thanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"364\">\n\t\t\t\tEnable parsers to parse and serialize custom resources that contain custom datatypes.\n\t\t\t\tAn example has been added which shows how to do this\n\t\t\t\t<![CDATA[<a href=\"./doc_custom_structures.html\">here</a>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser was incorrectly encoding resource language attribute in JSON as an\n\t\t\t\tarray instead of a string. Thanks to David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"367\">\n\t\t\t\tS\u00c3\u00a9bastien Rivi\u00c3\u00a8re contributed an excellent pull request which adds a\n\t\t\t\tnumber of enhancements to JAX-RS module:\n\t\t\t\t<![CDATA[\n\t\t\t\t<ul>\n\t\t\t\t<li>Enable the conditional update and delete</li>\n\t\t\t\t<li>Creation of a bundle provider, and support of the @Transaction</li>\n\t\t\t\t<li>Bug fix on the exceptions handling as some exceptions throw outside bean context were not intercept.</li>\n\t\t\t\t<li>Add the possibility to have the stacktrace in the jaxrsException</li>\n\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"369\">\n\t\t\t\tFhirTerser.cloneInto method failed to clone correctly if the source\n\t\t\t\thad any extensions. Thanks to GitHub user @Virdulys for submitting and\n\t\t\t\tproviding a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUpdate DSTU2 InstanceValidator to latest version from upstream\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWeb Testing UI was not able to correctly post an STU3 transaction\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateTime parser incorrectly parsed times where more than 3 digits of\n\t\t\t\tprecision were provided on the seconds after the decimal point\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove error messages when the $validate operation is called but no resource\n\t\t\t\tis actually supplied to validate\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tDSTU2+ servers no longer return the Category header, as this has been\n\t\t\t\tremoved from the FHIR specification (and tags are now available in the\n\t\t\t\tresource body so the header was duplication/wasted bandwidth)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"374\">\n\t\t\t\tCreate and Update operations in server did not\n\t\t\t\tinclude ETag or Last-Modified headers even though\n\t\t\t\tthe spec says they should. Thanks to Jim Steel for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"371\">\n\t\t\t\tUpdate STU3 client and server to use the new sort parameter style (param1,-param2,param). Thanks to GitHub\n\t\t\t\tuser @euz1e4r for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tQuantityClientParam#withUnit(String) put the unit into the system part of the\n\t\t\t\tparameter value\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFluent client searches with date parameters were not correctly using\n\t\t\t\tnew prefix style (e.g. gt) instead of old one (e.g. &gt;)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"370\">\n\t\t\t\tSome built-in v3 code systems for STU3 resources were missing\n\t\t\t\tcertain codes, which caused false failures when validating\n\t\t\t\tresources. Thanks to GitHub user @Xoude for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"365\">\n\t\t\t\tSome methods on DSTU2 model structures have JavaDocs that\n\t\t\t\tincorrectly claim that the method will not return null when\n\t\t\t\tin fact it can. Thanks to Rick Riemer for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor has been modified based on consensus\n\t\t\t\ton Zulip with Grahame that requests that have a parameter of\n\t\t\t\t<![CDATA[<code>_format=json</code>]]> or\n\t\t\t\t<![CDATA[<code>_format=xml</code>]]> will output raw FHIR content\n\t\t\t\tinstead of HTML highlighting the content as they previously did.\n\t\t\t\tHTML content can now be forced via the (previously existing)\n\t\t\t\t<![CDATA[<code>_format=html</code>]]> or via the two newly added\n\t\t\t\tvalues\n\t\t\t\t<![CDATA[<code>_format=html/json</code>]]> and\n\t\t\t\t<![CDATA[<code>_format=html/xml</code>]]>. Because of this\n\t\t\t\tchange, the custom\n\t\t\t\t<![CDATA[<code>_raw=true</code>]]> mode has been deprecated and\n\t\t\t\twill be removed at some point.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"267\">\n\t\t\t\tOperation definitions (e.g. for $everything operation) in the generated\n\t\t\t\tserver conformance statement should not include the $ prefix in the operation\n\t\t\t\tname or code. Thanks to Dion McMurtrie for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"378\">\n\t\t\t\tServer generated OperationDefinition resources did not validate\n\t\t\t\tdue to some missing elements (kind, status, etc.).\n\t\t\t\tThanks to\n\t\t\t\tMichael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"379\">\n\t\t\t\tOperations that are defined on multiple resource provider types with\n\t\t\t\tthe same name (e.g. \"$everything\") are now automatically exposed by the server\n\t\t\t\tas separate OperationDefinition resources per resource type. Thanks to\n\t\t\t\tMichael Lawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"380\">\n\t\t\t\tOperationDefinition resources generated automatically by the server for operations\n\t\t\t\tthat are defined within resource/plain providers incorrectly stated that\n\t\t\t\tthe maximum cardinality was \"*\" for non-collection types with no explicit\n\t\t\t\tmaximum stated, which is not the behaviour that the JavaDoc on the\n\t\t\t\t<![CDATA[@OperationParam]]> annotation describes. Thanks to Michael Lawley\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer parameters annotated with\n\t\t\t\t<![CDATA[<code>@Since</code>]]>\n\t\t\t\tor\n\t\t\t\t<![CDATA[<code>@Count</code>]]>\n\t\t\t\twhich are of a FHIR type such as IntegerDt or DateTimeType will\n\t\t\t\tnow be set to null if the client's URL does not\n\t\t\t\tcontain this parameter. Previously they would be populated\n\t\t\t\twith an empty instance of the FHIR type, which was inconsistent with\n\t\t\t\tthe way other server parameters worked.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now supports the _at parameter (including multiple repetitions)\n\t\t\t\tfor history operation\n\t\t\t</action>\n\t\t\t<!--\n\t\t\tThis one actually doesn't seem possible without using a deprecated servlet API\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen throwing UnclassifiedServerException in server methods, the HTTP response\n\t\t\t\tstatus line contained the response code specified in the exception, but not the\n\t\t\t\tresponse message\n\t\t\t</action>\n\t\t\t-->\n\t\t\t<action type=\"add\">\n\t\t\t\tAuthorizationInterceptor can now allow or deny requests to extended\n\t\t\t\toperations (e.g. $everything)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDecimalType used BigDecimal constructor instead of valueOf method to\n\t\t\t\tcreate a BigDecimal from a double, resulting in weird floating point\n\t\t\t\tconversions. Thanks to Craig McClendon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"394\">\n\t\t\t\tRemove the depdendency on a method from commons-lang3 3.3 which was\n\t\t\t\tcausing issues on some Android phones which come with an older version\n\t\t\t\tof this library bundled. Thanks to Paolo Perliti for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParser is now better able to handle encoding fields which have been\n\t\t\t\tpopulated with a class that extends the expected class\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen declaring a child with\n\t\t\t\t<![CDATA[<code>order=Child.REPLACE_PARENT</code>]]>\n\t\t\t\tthe serialized form still put the element at the\n\t\t\t\tend of the resource instead of in the correct\n\t\t\t\torder\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix STU3 JPA resource providers to allow validate operation\n\t\t\t\tat instance level\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.5\" date=\"2016-04-20\">\n\t\t\t<action type=\"fix\" issue=\"339\">\n\t\t\t\tSecurity Fix: XML parser was vulnerable to XXE (XML External Entity)\n\t\t\t\tprocessing, which could result in local files on disk being disclosed.\n\t\t\t\tSee <![CDATA[<a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\">this page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\tThanks to Jim Steel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 5.0.7 -&gt; 5.1.0</li>\n\t\t\t\t\t\t<li>Spring (JPA, Web Tester): 4.2.4 -&gt; 4.2.5</li>\n\t\t\t\t\t\t<li>SLF4j (All): 1.7.14 -&gt; 1.7.21</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport comments when parsing and encoding both JSON and XML. Comments are retrieved\n\t\t\t\tand added to the newly created methods\n\t\t\t\tIBase#getFormatCommentsPre() and\n\t\t\t\tIBase#getFormatCommentsPost()\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"293\">\n\t\t\t\tAdded options to the CLI upload-examples command which allow it to cache\n\t\t\t\tthe downloaded content file, or use an arbitrary one. Thanks to Adam Carbone\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST search parameters with a prefix/comparator had not been updated to use\n\t\t\t\tthe DSTU2 style prefixes (gt2011-01-10) instead of the DSTU1 style prefixes\n\t\t\t\t(&gt;2011-01-01). The client has been updated so that it uses the new prefixes\n\t\t\t\tif the client has a DSTU2+ context. The server has been updated so that it now\n\t\t\t\tsupports both styles.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, a new enum called\n\t\t\t\t<![CDATA[<a href=\"./apidocs/ca/uhn/fhir/rest/param/ParamPrefixEnum.html\">ParamPrefixEnum</a>]]>\n\t\t\t\thas been introduced. This enum replaces the old\n\t\t\t\t<![CDATA[<a href=\"./apidocs/ca/uhn/fhir/model/dstu/valueset/QuantityCompararatorEnum.html\">QuantityCompararatorEnum</a>]]>\n\t\t\t\twhich has a typo in its name and can not represent several new prefixes added since\n\t\t\t\tDSTU1.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server number and quantity search params now follow the rules for the\n\t\t\t\tuse of precision in search terms outlined in the\n\t\t\t\t<![CDATA[<a href=\"https://www.hl7.org/fhir/search.html\">search page</a>]]> of the\n\t\t\t\tFHIR specification. For example, previously a 1% tolerance was applied for\n\t\t\t\tall searches (10% for approximate search). Now, a tolerance which respects the\n\t\t\t\tprecision of the search term is used (but still 10% for approximate search).\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"291\">\n\t\t\t\tFix a failure starting the REST server if a method returns an untyped List, which\n\t\t\t\tamong other things prevented resource provider added to the server\n\t\t\t\tas CDI beans in a JBoss enviroment. Thanks to GitHub user fw060 (Fei) for\n\t\t\t\treporting and figuring out exactly why this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports :above and :below qualifiers on URI search params\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd optional support (disabled by default for now) to JPA server to support\n\t\t\t\tinline references containing search URLs. These URLs will be resolved when\n\t\t\t\ta resource is being created/updated and replaced with the single matching\n\t\t\t\tresource. This is being used as a part of the May 2016 Connectathon for\n\t\t\t\ta testing scenario.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe server no longer adds a\n\t\t\t\t<![CDATA[<code>WWW-Authenticate</code>]]>\n\t\t\t\theader to the response if any resource provider code throws an\n\t\t\t\t<![CDATA[<code>AuthenticationException</code>]]>. This header is\n\t\t\t\tused for interactive authentication, which isn't generally\n\t\t\t\tappropriate for FHIR. We added code to add this header a long time\n\t\t\t\tago for testing purposes and it never got removed. Please let us\n\t\t\t\tknow if you need the ability to add this header automatically. Thanks\n\t\t\t\tto Lars Kristian Roland for pointing this out.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the client, the create/update operations on a Binary resource\n\t\t\t\t(which use the raw binary's content type as opposed to the FHIR\n\t\t\t\tcontent type) were not including any request headers (Content-Type,\n\t\t\t\tUser-Agent, etc.) Thanks to Peter Van Houte of Agfa Healthcare for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHandling of Binary resources containing embedded FHIR resources for\n\t\t\t\tcreate/update/etc operations has been corrected per the FHIR rules\n\t\t\t\toutlined at\n\t\t\t\t<![CDATA[<a href=\"http://hl7.org/fhir/binary.html\">Binary Resource</a>]]>\n\t\t\t\tin both the client and server.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tEssentially, if the Binary contains something\n\t\t\t\tthat isn't FHIR (e.g. an image with an image content-type) the\n\t\t\t\tclient will send the raw data with the image content type to the server. The\n\t\t\t\tserver will place the content type and raw data into a Binary resource instance\n\t\t\t\tand pass those to the resource provider. This part was already correct previous\n\t\t\t\tto 1.5.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tOn the other hand, if the Binary contains a FHIR content type, the Binary\n\t\t\t\tis now sent by the client to the server as a Binary resource with a FHIR content-type,\n\t\t\t\tand the embedded FHIR content is contained in the appropriate fields. The server\n\t\t\t\twill pass this &quot;outer&quot; Binary resource to the resource provider code.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tThe RequestDetails and ActionRequestDetails objects which are passed to\n\t\t\t\tserver interceptor methods and may also be used as server provider method\n\t\t\t\targuments now has a new method\n\t\t\t\t<![CDATA[\n\t\t\t\t<code>Map&lt;String, String&gt; getUserData()</code>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to pass data and objects between interceptor methods to\n\t\t\t\tto providers. This can be useful, for instance, if an authorization\n\t\t\t\tinterceptor wants to pass the logged in user's details to other parts\n\t\t\t\tof the server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"297\">\n\t\t\t\t<![CDATA[When <code>IServerInterceptor#incomingRequestPreHandled()</code> is called \n\t\t\t\tfor a <code>@Validate</code> method, the resource was not populated in the\n\t\t\t\t<code>ActionRequestDetails</code> argument. Thanks to Ravi Kuchi for reporting!\t\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"298\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\tRequest to server at <code>[baseUrl]/metadata</code> with an HTTP method\n\t\t\t\t\tother than GET (e.g. POST, PUT) should result in an HTTP 405. Thanks to \n\t\t\t\t\tMichael Lawley for reporting! \n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"302\">\n\t\t\t\tFix a server exception when trying to automatically add the profile tag\n\t\t\t\tto a resource which already has one or more profiles set. Thanks to\n\t\t\t\tMagnus Vinther for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"296\">\n\t\t\t\tQuantityParam parameters being used in the RESTful server were ignoring\n\t\t\t\tthe\n\t\t\t\t<![CDATA[<code>:missing</code>]]>\n\t\t\t\tqualifier. Thanks to Alexander Takacs for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"299\">\n\t\t\t\tAnnotation client failed with an exception if the response contained\n\t\t\t\textensions on fields in the resonse Bundle (e.g. Bundle.entry.search).\n\t\t\t\tThanks to GitHub user am202 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"274\">\n\t\t\t\tPrimitive elements with no value but an extension were sometimes not\n\t\t\t\tencoded correctly in XML, and sometimes not parsed correctly in JSON.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"280\">\n\t\t\t\tThe Web Testing UI has long had an issue where if you click on a button which\n\t\t\t\tnavigates to a new page (e.g. search, read, etc) and then click the back button\n\t\t\t\tto return to the original page, the button you clicked remains disabled and can't\n\t\t\t\tbe clicked again (on Firefox and Safari). This is now fixed. Unfortunately the fix means that the\n\t\t\t\tbuttom will no longer show a \"loading\" spinner, but there doesn't seem to\n\t\t\t\tbe another way of fixing this. Thanks to Mark Scrimshire for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExtensions found while parsing an object that doesn't support extensions are now\n\t\t\t\treported using the IParserErrorHandler framework in the same way that\n\t\t\t\tother similar errors are handled. This allows the parser to be more lenient\n\t\t\t\twhen needed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"304\">\n\t\t\t\tImprove error message if incorrect type is placed in a list field in the data model. Java\n\t\t\t\tuses generics to prevent this at compile time, but if someone is in an environment without\n\t\t\t\tgenerics this helps improve the error message at runtime. Thanks to Hugo Soares for\n\t\t\t\tsuggesting.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"308\">\n\t\t\t\tPrevent an unneeded warning when parsing a resource containing\n\t\t\t\ta declared extension. Thanks to Matt Blanchette for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWeb Tester UI did not invoke VRead even if a version ID was specified. Thanks\n\t\t\t\tto Poseidon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tPer discussion on the FHIR implementer chat, the JPA server no\n\t\t\t\tlonger includes _revinclude matches in the Bundle.total count, or the\n\t\t\t\tpage size limit.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now persists search results to the database in a new table where they\n\t\t\t\tcan be temporaily preserved. This makes the JPA server much more scalable, since it\n\t\t\t\tno longer needs to store large lists of pages in memory between search invocations.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tOld searches are deleted after an hour by default, but this can be changed\n\t\t\t\tvia a setting in the DaoConfig.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA servers' resource version history mechanism\n\t\t\t\thas been adjusted so that the history table\n\t\t\t\tkeeps a record of all versions including the\n\t\t\t\tcurrent version. This has the very helpful\n\t\t\t\tside effect that history no longer needs to be\n\t\t\t\tpaged into memory as a complete set. Previously\n\t\t\t\thistory had a hard limit of only being able to\n\t\t\t\tpage the most recent 20000 entries. Now it has\n\t\t\t\tno limit.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server returned the wrong Bundle.type value (COLLECTION, should be SEARCHSET)\n\t\t\t\tfor $everything operation responses. Thanks to Sonali Somase for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"305\">\n\t\t\t\tREST and JPA server should reject update requests where the resource body does not\n\t\t\t\tcontain an ID, or contains an ID which does not match the URL. Previously these\n\t\t\t\twere accepted (the URL ID was trusted) which is incorrect according to the\n\t\t\t\tFHIR specification. Thanks to GitHub user ametke for reporting!\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAs a part of this change, server error messages were also improved for\n\t\t\t\trequests where the URL does not contain an ID but needs to (e.g. for\n\t\t\t\tan update) or contains an ID but shouldn't (e.g. for a create)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen fields of type BoundCodeDt (e.g. Patient.gender)\n\t\t\t\tare serialized and deserialized using Java's native\n\t\t\t\tobject serialization, the enum binder was not\n\t\t\t\tserialized too. This meant that values for the\n\t\t\t\tfield in the deserialized object could not be\n\t\t\t\tmodified. Thanks to Thomas Andersen for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"313\">\n\t\t\t\tREST Server responded to HTTP OPTIONS requests with\n\t\t\t\tany URI as being a request for the server's\n\t\t\t\tConformance statement. This is incorrect, as only\n\t\t\t\ta request for <![CDATA[<code>OPTIONS [base url]</code>]]> should be treated as such. Thanks to Michael\n\t\t\t\tLawley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tREST annotation style client was not able to handle extended operations\n\t\t\t\t($foo) where the response from the server was a raw resource instead\n\t\t\t\tof a Parameters resource. Thanks to Andrew Michael Martin for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server applies _lastUpdated filter inline with other searches wherever possible\n\t\t\t\tinstead of applying this filter as a second query against the results of the\n\t\t\t\tfirst query. This should improve performance when searching against large\n\t\t\t\tdatasets.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParsers have new method\n\t\t\t\t<![CDATA[<code>setDontEncodeElements</code>]]>\n\t\t\t\twhich can be used to force the parser to not encode certain elements\n\t\t\t\tin a resource when serializing. For example this can be used to omit\n\t\t\t\tsensitive data or skip the resource metadata.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server database design has been adjusted\n\t\t\t\tso that different tables use different sequences\n\t\t\t\tto generate their indexes, resulting in more sequential\n\t\t\t\tresource IDs being assigned by the server\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now correctly serves up Binary resources\n\t\t\t\tusing their native content type (instead of as a\n\t\t\t\tFHIR resource) if the request contains an accept\n\t\t\t\theader containing \"application/xml\" as some browsers\n\t\t\t\tdo.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDSTU2 resources now have a\n\t\t\t\t<![CDATA[<code>getMeta()</code>]]> method which returns a\n\t\t\t\tmodifiable view of the resource metadata for convenience. This\n\t\t\t\tmatches the equivalent method in the DSTU3 structures.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"315\">\n\t\t\t\tAdd a new method to FhirContext called\n\t\t\t\t<![CDATA[\n\t\t\t\t<code><a href=\"./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-\">setDefaultTypeForProfile</a></code>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to specify that when recources are received which declare\n\t\t\t\tsupport for specific profiles, a specific custom structures should be used\n\t\t\t\tinstead of the default. For example, if you have created a custom Observation\n\t\t\t\tclass for a specific profile, you could use this method to cause your custom\n\t\t\t\ttype to be used by the parser for resources in a search bundle you receive.\n\t\t\t\t<![CDATA[\n\t\t\t\t<br/><br/>\n\t\t\t\tSee the documentation page on\n\t\t\t\t<a href=\"./doc_extensions.html\">Profiles and Extensions</a>\n\t\t\t\tfor more information.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"315\">\n\t\t\t\tParsing/Encoding a custom resource type which extends a\n\t\t\t\tbase type sometimes caused the FhirContext to treat all future\n\t\t\t\tparses of the same resource as using the custom type even when\n\t\t\t\tthis was not wanted.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tCustom structures may now be explicitly declared by profile\n\t\t\t\tusing the\n\t\t\t\t<![CDATA[\n\t\t\t\t<code><a href=\"./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-\">setDefaultTypeForProfile</a></code>\n\t\t\t\t]]>\n\t\t\t\tmethod.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis issue was discovered and fixed as a part of the implementation of issue #315.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"321\">\n\t\t\t\tSet up the tinder plugin to work as an ant task\n\t\t\t\tas well as a Maven plugin, and to use external\n\t\t\t\tsources. Thanks to Bill Denton for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now allows searching by token\n\t\t\t\tparameter using a system only and no code,\n\t\t\t\tgiving a search for any tokens which match\n\t\t\t\tthe given token with any code. Previously the\n\t\t\t\texpected behaviour for this search\n\t\t\t\twas not clear in the spec and HAPI had different\n\t\t\t\tbehaviour from the other reference servers.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce a JAX-RS client provider which can be used instead of the\n\t\t\t\tdefault Apache HTTP Client provider to provide low level HTTP\n\t\t\t\tservices to HAPI's REST client. See\n\t\t\t\t<![CDATA[<a href=\"./doc_rest_client_alternate_provider.html\">JAX-RS &amp; Alternate HTTP Client Providers</a>]]>\n\t\t\t\tfor more information.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThis is useful in cases where you have other non-FHIR REST clients\n\t\t\t\tusing a JAX-RS provider and want to take advantage of the\n\t\t\t\trest of the framework.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tThanks to Peter Van Houte from Agfa for the amazing work!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"312\">\n\t\t\t\tParser failed with a NPE while encoding resources if the\n\t\t\t\tresource contained a null extension. Thanks to\n\t\t\t\tsteve1medix for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"320\">\n\t\t\t\tIn generated model classes (DSTU1/2) don't\n\t\t\t\tuse BoundCodeDt and BoundCodeableConceptDt for\n\t\t\t\tcoded fields which use example bindings. Thanks\n\t\t\t\tto GitHub user Ricq for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[\n\t\t\t\tOperations methods defined using \n\t\t\t\t<code>@Operation</code> will now infer the maximum number of repetitions\n\t\t\t\tof their parameters by the type of the parameter. Previously if\n\t\t\t\ta default <code>max()</code> value was not specified in the\n\t\t\t\t<code>@OperationParam</code> annotation on a parameter, the maximum\n\t\t\t\twas assumed to be 1. Now, if a max value is not explicitly specified \n\t\t\t\tand the type of the parameter is a basic type (e.g. <code>StringDt</code>) the\n\t\t\t\tmax will be 1. If the parameter is a collection type (e.g. <code>List&lt;StringDt&gt;</code>)\n\t\t\t\tthe max will be *\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"317\">\n\t\t\t\t<![CDATA[\n\t\t\t\tOperation methods defined using\n\t\t\t\t<code>@Operation</code>\n\t\t\t\tmay now use search parameter types, such as \n\t\t\t\t<code>TokenParam</code> and\n\t\t\t\t<code>TokenAndListParam</code> as values. Thanks to \n\t\t\t\tChristian Ohr for reporting!\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd databases indexes to JPA module search index tables\n\t\t\t\tfor the RES_ID column on each. This should help\n\t\t\t\tperformance when searching over large datasets.\n\t\t\t\tThanks to Emmanuel Duviviers for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateTimeType should fail to parse 1974-12-25+10:00 as this is not\n\t\t\t\ta valid time in FHIR. Thanks to Grahame Grieve for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing a Bundle resource, if the Bundle.entry.request.url contains a UUID\n\t\t\t\tbut the resource body has no ID, the Resource.id will be populated with the ID from the\n\t\t\t\tBundle.entry.request.url. This is helpful when round tripping Bundles containing\n\t\t\t\tUUIDs.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing a DSTU3 bundle, references between resources did not have\n\t\t\t\tthe actual resource instance populated into the reference if the\n\t\t\t\tIDs matched as they did in DSTU1/2.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"326\">\n\t\t\t\tContained resource references on DSTU3\n\t\t\t\tresources were not serialized correctly when\n\t\t\t\tusing the Json Parser. Thanks to GitHub user\n\t\t\t\t@fw060 for reporting and supplying a patch\n\t\t\t\twhich corrects the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"325\">\n\t\t\t\tDSTU3 model classes equalsShallow and equalsDeep both did not work\n\t\t\t\tcorrectly if a field was null in one object, but contained an empty\n\t\t\t\tobject in the other (e.g. a StringType with no actual value in it). These\n\t\t\t\ttwo should be considered equal, since they would produce the exact same\n\t\t\t\twire format.<![CDATA[<br/><br/>]]>\n\t\t\t\tThanks to GitHub user @ipropper for reporting and providing\n\t\t\t\ta test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports searching for <![CDATA[<code>_tag:not=[tag]</code>]]>\n\t\t\t\twhich enables finding resources that to not have a given tag/profile/security tag.\n\t\t\t\tThanks to Lars Kristian Roland for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tExtensions containing resource references did not get encoded correctly\n\t\t\t\tsome of the time. Thanks to Poseidon for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsers (both XML and JSON) encoded the first few elements of DSTU3 structures in the wrong order:\n\t\t\t\tExtensions were placed before any other content, which is incorrect (several\n\t\t\t\telements come first: meta, text, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server implementations, the Bundle.entry.fullUrl was not getting correctly\n\t\t\t\tpopulated on Hl7OrgDstu2 servers. Thanks to Christian Ohr for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"335\">\n\t\t\t\tEnsure that element IDs within resources (i.e. IDs on elements other than the\n\t\t\t\tresource itself) get serialized and parsed correctly. Previously, these didn't get\n\t\t\t\tserialized in a bunch of circumstances. Thanks to Vadim Peretokin for reporting\n\t\t\t\tand providing test cases!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tImprove CLI error message if the tool can't bind to the requested port. Thanks\n\t\t\t\tto Claude Nanjo for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer param of <![CDATA[<code>_summary=text</code>]]> did not\n\t\t\t\tinclude mandatory elements in return as well as\n\t\t\t\tthe text element, even though the FHIR specification\n\t\t\t\trequired it.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove invalid resource type \"Documentation\" from DSTU2\n\t\t\t\tstructures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not respect target types for search parameters. E.g. Appointment:patient has\n\t\t\t\ta path of \"Appointment.participant.actor\" and a target type of \"Patient\". The search path\n\t\t\t\twas being correctly handled, but the target type was being ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer now manually parses URL parameters instead of relying on the container's\n\t\t\t\tparsed parameters. This is useful because many Java servlet containers (e.g. Tomcat, Glassfish)\n\t\t\t\tdefault to ISO-8859-1 encoding for URLs insetad of the UTF-8 encoding specified by\n\t\t\t\tFHIR.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now doesn't highlight if the request\n\t\t\t\thas an Origin header, since this probably denotes an AJAX request.\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.4\" date=\"2016-02-04\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 5.0.3 -&gt; 5.0.7</li>\n\t\t\t\t\t\t<li>Springframework (JPA, Web Tester): 4.2.2 -&gt; 4.2.4</li>\n\t\t\t\t\t\t<li>Phloc-Commons (Schematron Validator): 4.3.6 -&gt; 4.4.4</li>\n\t\t\t\t\t\t<li>Apache httpclient (Client): 4.4 -&gt; 4.5.1</li>\n\t\t\t\t\t\t<li>Apache httpcore (Client): 4.4 -&gt; 4.4.4</li>\n\t\t\t\t\t\t<li>SLF4j (All): 1.7.13 -&gt; 1.7.14</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove a dependency on a Java 1.7 class\n\t\t\t\t(ReflectiveOperationException) in several spots in the\n\t\t\t\tcodebase. This dependency was accidentally introduced in\n\t\t\t\t1.3, and animal-sniffer-plugin failed to detect it (sigh).\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd two new server interceptors:\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"./apidocs/ca/uhn/fhir/rest/server/interceptor/RequestValidatingInterceptor.html\">RequestValidatingInterceptor</a> \n\t\t\t\tand \n\t\t\t\t<a href=\"./apidocs/ca/uhn/fhir/rest/server/interceptor/ResponseValidatingInterceptor.html\">ResponseValidatingInterceptor</a>\n\t\t\t\t]]>\n\t\t\t\twhich can be used to validate incoming requests or outgoing responses using the standard FHIR validation\n\t\t\t\ttools. See the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"./doc_rest_server_interceptor.html#RequestResponse_Validation\">Server Validation Page</a>\n\t\t\t\t]]>\n\t\t\t\tfor examples of how to use these interceptors. These intereptors have both\n\t\t\t\tbeen enabled on the\n\t\t\t\t<![CDATA[\n\t\t\t\t<a href=\"http://fhirtest.uhn.ca\">public test page</a>.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"259\">\n\t\t\t\tMake IBoundCodeableConcept and IValueSetEnumBinder serializable,\n\t\t\t\tfixing an issue when trying to serialize model classes containing\n\t\t\t\tbound codes. Thanks to Nick Peterson for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"251\">\n\t\t\t\tIntroduce a JAX-RS version of the REST server, which can be used\n\t\t\t\tto deploy the same resource provider implementations which work\n\t\t\t\ton the existing REST server into a JAX-RS (e.g. Jersey) environment.\n\t\t\t\tThanks to Peter Van Houte from Agfa for the amazing work!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCLI now supports writing to file:// URL for 'upload-examples' command\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGZipped content is now supported for client-to-server uploads (create, update, transaction, etc.).\n\t\t\t\tThe server will not automatically detect compressed incoming content and decompress it (this can be\n\t\t\t\tdisabled using a RestfulServer configuration setting). A new client interceptor has been added\n\t\t\t\twhich compresses outgoing content from the client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server transaction attempted to validate resources twice each,\n\t\t\t\twith one of these times being before anything had been committed to the\n\t\t\t\tdatabase. This meant that if a transaction contained both a Questionnaire\n\t\t\t\tand a QuestionnaireResponse, it would fail because the QuestionnaireResponse\n\t\t\t\tvalidator wouldn't be able to find the questionnaire. This is now corrected.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method to the generic/fluent client for searching:\n\t\t\t\t<![CDATA[<code>.count(int)</code><br/>]]>\n\t\t\t\tThis replaces the existing \".limitTo(int)\" method which has\n\t\t\t\tnow been deprocated because it was badly named and undocumented.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tProfile validator has been configured to allow extensions even if they\n\t\t\t\taren't explicitly declared in the profile.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"265\">\n\t\t\t\tAdd a constraint that the Maven build will only run in JDK 8+. HAPI\n\t\t\t\tremains committed to supporting JDK 6+ in the compiled library, but these\n\t\t\t\tdays it can only be built using JDK 8. Thanks to joelsch for the PR!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen serializing a value[x] field, if the value type was a profiled type (e.g. markdown is a\n\t\t\t\tprofile of string) HAPI 1.3 would use the base type in the element name, e.g.\n\t\t\t\tvalueString instead of valueMarkdown. After discussion with Grahame, this appears to\n\t\t\t\tbe incorrect behaviour so it has been fixed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"240\">\n\t\t\t\tSupport target parameter type in _include / _revinclude values, e.g.\n\t\t\t\t_include=Patient:careProvider:Organization. Thanks to Joe Portner\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUse ResponseHighlighterInterceptor in the hapi-fhir-jpaserver-example\n\t\t\t\tproject to provide nice syntax highlighting. Thanks to Rob Hausam for\n\t\t\t\tnoting that this wasn't there.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce custom @CoverageIgnore annotation to hapi-fhir-base in order to\n\t\t\t\tremove dependency on cobertura during build and in runtime.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer-generated conformance statements incorrectly used /Profile/ instead\n\t\t\t\tof /StructureDefinition/ in URL links to structures.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJsonParser has been changed so that when serializing numbers it will use\n\t\t\t\tplain format (0.001) instead of scientific format (1e-3). The latter is\n\t\t\t\tvalid JSON, and the parser will still correctly parse either format (all\n\t\t\t\tclients should be prepared to) but this change makes serialized\n\t\t\t\tresources appear more consistent between XML and JSON. As a result of this\n\t\t\t\tchange, trailing zeros will now be preserved when serializing as well.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"278\">\n\t\t\t\tAdd DSTU3 example to hapi-fhir-jpaserver-example. Thanks to Karl\n\t\t\t\tDavis for the Pull Request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer#setUseBrowserFriendlyContentTypes has been deprecated and its\n\t\t\t\tfunctionality removed. The intention of this feature was that if it\n\t\t\t\tdetected a request coming in from a browser, it would serve up JSON/XML\n\t\t\t\tusing content types that caused the browsers to pretty print. But\n\t\t\t\teach browser has different rules for when to pretty print, and\n\t\t\t\tafter we wrote that feature both Chrome and FF changed their rules to break it anyhow.\n\t\t\t\tResponseHighlightingInterceptor provides a better implementation of\n\t\t\t\tthis functionality and should be used instead.\n\t\t\t</action>\n\t\t\t<action type=\"remove\">\n\t\t\t\tNarrative generator framework has removed the\n\t\t\t\tability to generate resource titles. This\n\t\t\t\tfunctionality was only useful for DSTU1\n\t\t\t\timplementations and wasn't compatible\n\t\t\t\twith coming changes to that API.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"283\">\n\t\t\t\tRemove dependency on Servlet-API 3.0+ by using methods available in 2.5 where possible.\n\t\t\t\tNote that we continue to use Servlet-API 3.0+ features in some parts of the JPA API, so\n\t\t\t\trunning in an old serlvet container should be tested well before use. Thanks to Bill Denton\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"288\">\n\t\t\t\tAdd new methods to RestfulClientFactory allowing you to configure the size of the\n\t\t\t\tclient pool used by Apache HttpClient. Thanks to Matt Blanchette for the pull\n\t\t\t\trequest!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for new modifier types on Token search params in Server and\n\t\t\t\tannotation client.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"286\">\n\t\t\t\tServer conformance statement should include search parameter chains if the\n\t\t\t\tchains are explicitly defined via @Search(whitelist={....}). Thanks to lcamilo15\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRemove afterPropertiesSet() call in Java config for JPA\n\t\t\t\tserver's EntityManagerFactory. This doesn't need to be called\n\t\t\t\tmanually, the the manual call led to a warning about\n\t\t\t\tthe EntityManager being created twice.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"289\">\n\t\t\t\tAllow server to correctly figure out it's own address even if the container provides\n\t\t\t\ta Servlet Context Path which does not include the root. Thanks to Petro Mykhaylyshyn\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.3\" date=\"2015-11-14\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions (dependent HAPI modules listed in brackets):\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Commons-lang3 (Core): 3.3.2 -&gt; 3.4</li>\n\t\t\t\t\t\t<li>Logback (Core): 1.1.2 -&gt; 1.1.3</li>\n\t\t\t\t\t\t<li>SLF4j (Core): 1.7.102 -&gt; 1.7.12</li>\n\t\t\t\t\t\t<li>Springframework (JPA, Web Tester): 4.1.5 -&gt; 4.2.2</li>\n\t\t\t\t\t\t<li>Hibernate (JPA, Web Tester): 4.2.17 -&gt; 5.\"</li>\n\t\t\t\t\t\t<li>Hibernate Validator (JPA, Web Tester): 5.2.1 -&gt; 5.2.2</li>\n\t\t\t\t\t\t<li>Derby (JPA, CLI, Public Server): 10.11.1.1 -&gt; 10.12.1.1 </li>\n\t\t\t\t\t\t<li>Jetty (JPA, CLI, Public Server): 9.2.6.v20141205 -&gt; 9.3.4.v20151007 </li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA and Tester Overlay now use Spring Java config files instead\n\t\t\t\tof the older XML config files. All example projects have been updated.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server removes duplicate resource index entries before storing them\n\t\t\t\t(e.g. if a patient has the same name twice, only one index entry is created\n\t\t\t\tfor that name)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly index search parameters of type \"reference\" where the\n\t\t\t\tpath had multiple entries (i.e. \"Resource.path1 | Resource.path2\")\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server _history operations (server, type, instance) not correctly set the\n\t\t\t\tBundle.entry.request.method to POST or PUT for create and updates of the resource.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"225\">\n\t\t\t\tSupport AND/OR on _id search parameter in JPA\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConstructor for DateRanfeParam which dates in two DateParam instances was ignoring\n\t\t\t\tcomparators on the DateParam.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn JSON parsing, finding an object where an array was expected led to an unhelpful\n\t\t\t\terror message. Thanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server gave an unhelpful error message if $meta-add or $meta-delete were called\n\t\t\t\twith no meta elements in the input Parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tNarrative generator did not include OperationOutcome.issue.diagnostics in the\n\t\t\t\tgenerated narrative.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"250\">\n\t\t\t\tClients (generic and annotation) did not populate the Accept header on outgoing\n\t\t\t\trequests. This is now populated to indicate that the client supports both XML and\n\t\t\t\tJSON unless the user has explicitly requested one or the other (in which case the\n\t\t\t\tappropriate type only will be send in the accept header). Thanks to\n\t\t\t\tAvinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tQuestionnaireResponse validator now allows responses to questions of\n\t\t\t\ttype OPENCHOICE to be of type 'string'\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"227\">\n\t\t\t\tJPA server should reject resources with a reference that points to an incorrectly typed\n\t\t\t\tresource (e.g. points to Patient/123 but resource 123 is actually an Observation) or points\n\t\t\t\tto a resource that is not valid in the location it is found in (e.g. points to Patient/123 but\n\t\t\t\tthe field supposed to reference an Organization). Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn server, if a client request is received and it has an Accept header indicating\n\t\t\t\tthat it supports both XML and JSON with equal weight, the server's default is used instead of the first\n\t\t\t\tentry in the list.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports searching with sort by token, quantity,\n\t\t\t\tnumber, Uri, and _lastUpdated (previously only string, date, and _id\n\t\t\t\twere supported)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in JPA where a search with a _lastUpdated filter which matches no results\n\t\t\t\twould crash if the search also had a _sort\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix several cases where invalid requests would cause an HTTP 500 instead of\n\t\t\t\ta more appropriate 400/404 in the JPA server (vread on invalid version,\n\t\t\t\tdelete with no ID, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix narrative generation for DSTU2 Medication resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tProfile validator now works for valuesets which use\n\t\t\t\tv2 tables\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server Patient/[id]/$everything operation now supports\n\t\t\t\t_lastUpdated filtering and _sort'ing of results.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"233\">\n\t\t\t\tFix parser issue where profiled choice element datatypes (e.g. value[x] where one allowable\n\t\t\t\ttype is Duration, which is a profile of Quantity) get incorrectly encoded using the\n\t\t\t\tprofiled datatype name instead of the base datatype name as required by the FHIR\n\t\t\t\tspec. Thanks to Nehashri Puttu Lokesh for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSome generated Enum types in DSTU2 HAPI structures\n\t\t\t\tdid not have latest valueset definitions applied. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server can now successfully search for tokens pointing at code values\n\t\t\t\t(values with no explicit system but an implied one, such as Patient.gender)\n\t\t\t\teven if the system is supplied in the query.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"235\">\n\t\t\t\tCorrect issues with Android library. Thanks to\n\t\t\t\tThomas Andersen for the submission!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server incorrectly rejected match URLs\n\t\t\t\tif they did not contain a question mark. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"234\">\n\t\t\t\tRemove invalid entries in OSGi Manifest. Thanks\n\t\t\t\tto Alexander Kley for the fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports $everything on Patient and Encounter types (patient and encounter instance was\n\t\t\t\talready supported)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric client operation invocations now\n\t\t\t\thave an additional inline method for generating the input\n\t\t\t\tParameters using chained method calls instead\n\t\t\t\tof by passing a Parameters resource in\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsing an XML resource where the XHTML\n\t\t\t\tnamespace was declared before the beginning\n\t\t\t\tof the narrative section caused an invalid\n\t\t\t\tre-encoding when encoding to JSON.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tConditional deletes in JPA did not correctly\n\t\t\t\tprocess if the condition had a chain or a\n\t\t\t\tqualifier, e.g. \"Patient?organization.name\" or\n\t\t\t\t\"Patient.identifier:missing\"\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric/fluent client search can now be\n\t\t\t\tperformed using a complete URL supplied\n\t\t\t\tby user code. Thanks to Simone Heckmann\n\t\t\t\tpointing out that this was needed!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRefactor JPA $everything operations so that\n\t\t\t\tthey perform better\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer operation methods can now declare the\n\t\t\t\tID optional, via\n\t\t\t\t@IdParam(optional=true)\n\t\t\t\tmeaning that the same operation can also be invoked\n\t\t\t\tat the type level.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tMake JPA search queries with _lastUpdated parameter a bit more efficient\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"239\">\n\t\t\t\tClean up Android project to make it more lightweight and remove a\n\t\t\t\tnumber of unneeded dependencies. Thanks to Thomas Andersen\n\t\t\t\tfor the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix a crash when encoding a Binary resource in JSON encoding\n\t\t\t\tif the resource has no content-type\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server now supports read/history/search in transaction entries\n\t\t\t\tby calling the actual implementing method in the server (previously\n\t\t\t\tthe call was simulated, which meant that many features did not work)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResourceReferenceDt#loadResource(IRestfulClient) did not\n\t\t\t\tuse the client's read functionality, so it did not\n\t\t\t\thandle JSON responses or use interceptors. Thanks to\n\t\t\t\tJT for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server maximumn length for a URI search parameter has been reduced from\n\t\t\t\t256 to 255 in order to accomodate MySQL's indexing requirements\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"242\">\n\t\t\t\tServer failed to respond correctly to compartment search operations\n\t\t\t\tif the same provider also contained a read operation. Thanks to GitHub user\n\t\t\t\t@am202 for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"245\">\n\t\t\t\tFix issue in testpage-overlay's new Java configuration where only the first\n\t\t\t\tconfigured server actually gets used.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce\n\t\t\t\t<![CDATA[<a href=\"./apidocs-jpaserver/ca/uhn/fhir/jpa/dao/IJpaServerInterceptor.html\">IJpaServerInterceptor</a>]]>\n\t\t\t\tinterceptors for JPA server which can be used for more fine grained operations.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"241\">\n\t\t\t\tParser (XML and JSON) shouldn't encode an ID tag in resources\n\t\t\t\twhich are part of a bundle when the resource has a UUID/OID\n\t\t\t\tID.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd ability for a server REST resource provider @Search method\n\t\t\t\tto declare that it should allow even parameters it doesn't\n\t\t\t\tunderstand.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"247\">\n\t\t\t\tCorrectly set the Bundle.type value on all pages of a search result in\n\t\t\t\tthe server, and correcltly set the same value in JPA server $everything\n\t\t\t\tresults.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA $everything operations now support new parameters _content\n\t\t\t\tand _text, which work the same way as the same parameters on a\n\t\t\t\tsearch. This is experimental, since it is not a part of the core\n\t\t\t\tFHIR specification.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"250\">\n\t\t\t\tProcess \"Accept: text/xml\" and \"Accept: text/json\" headers was\n\t\t\t\twanting the equivalent FHIR encoding styles. These are not\n\t\t\t\tcorrect, but the intention is clear so we will honour them\n\t\t\t\tjust to be helpful.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tGenerated Enum types for some ValueSets did not include all\n\t\t\t\tcodes (specifically, ValueSets which defined concepts containing\n\t\t\t\tchild concepts did not result in Enum values for the child concepts)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"253\">\n\t\t\t\tIn the JPA server, order of transaction processing should be\n\t\t\t\tDELETE, POST, PUT, GET, and the order should not matter\n\t\t\t\twithin entries with the same verb. Thanks to Bill de Beaubien\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"254\">\n\t\t\t\tAdd the ability to wire JPA conformance providers\n\t\t\t\tusing Spring (basically, add default constructors\n\t\t\t\tand setters to the conformance providers). Thanks\n\t\t\t\tto C. Mike Bylund for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.2\" date=\"2015-09-18\">\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now validates QuestionnaireAnswers for conformance to their respective Questionnaire\n\t\t\t\tif one is declared.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSyntaxHighlightingInterceptor now also highlights OperationOutcome responses for errors/exceptions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"126\">\n\t\t\t\tModel classes do not use BoundCodeableConcept for example bindings that do not\n\t\t\t\tactually point to any codes (e.g. Observation.interpretation). Thanks\n\t\t\t\tto GitHub user @steve1medix for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now exports operations as separate resources instead of as contained resources\n\t\t\t\twithin Conformance\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new operation $get-resource-counts which will replace the resource\n\t\t\t\tcount extensions exported in the Conformance statement by the JPA\n\t\t\t\tserver.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"198\">\n\t\t\t\tJPA server sorting often returned unexpected orders when multiple\n\t\t\t\tindexes of the same type were found on the same resource (e.g. multiple string indexed fields). Thanks to\n\t\t\t\tTravis Cummings for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd another method to IServerInterceptor which converts an exception generated on the server\n\t\t\t\tinto a BaseServerResponseException. This is useful so that servers using ResponseHighlighterInterceptor\n\t\t\t\twill highlight exceptions even if they aren't created with an OperationOutcome.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"158\">\n\t\t\t\tXmlParser and JsonParser in DSTU2 mode should not encode empty\n\t\t\t\ttags in resource. Thanks to Bill De Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tOperationDefinitions generated by server did not properly document\n\t\t\t\ttheir return parameters or the type of their input parameters.\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tOperations in server generated conformance statement should only\n\t\t\t\tappear once per name, since the name needs to be unique.\n\t\t\t</action>\n\t\t\t<action>\n\t\t\t\tResources and datatypes are now serializable. This is an\n\t\t\t\texperimental feature which hasn't yet been extensively tested. Please test and give us your feedback!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSwitch REST server to using HttpServletRequest#getContextPath() to get\n\t\t\t\tthe servlet's context path. This means that the server should behave more\n\t\t\t\tpredictably, and should work in servlet 2.4 environments. Thanks to\n\t\t\t\tKen Zeisset for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"200\">\n\t\t\t\tVagrant environment now has an apt recipt to ensure that\n\t\t\t\tpackage lists are up to date. Thanks to GitHub user\n\t\t\t\tBrian S. Corbin (@corbinbs) for thr contribution!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server and generic client now both support the _tag search parameter\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for BATCH mode to JPA server transaction operation\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"192\">\n\t\t\t\tServer was not correctly unescaping URL parameter values with\n\t\t\t\ta trailing comma or an escaped backslash. Thanks to GitHub user\n\t\t\t\t@SherryH for all of her help in diagnosing this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAvoid crash when parsing if an invalid child element is found in\n\t\t\t\ta resource reference.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tCreate new android specialty libraries for DSTU1 and DSTU2\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tThrowing a server exception (e.g. AuthenticationException) in a server interceptor's\n\t\t\t\tincomingRequestPreProcessed method resulted in the server returning an HTTP 500 instead\n\t\t\t\tof the appropriate error code for the exception being thrown. Thanks to Nagesh Bashyam\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"207\">\n\t\t\t\tFix issue in JSON parser where invalid contained resources (missing\n\t\t\t\ta resourceType element) fail to parse with a confusing NullPointerException.\n\t\t\t\tThanks to GitHub user @hugosoares for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now implements the $validate-code operation\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"125\">\n\t\t\t\tHAPI-FHIR now has support for _summary and _elements parameters, in server, client,\n\t\t\t\tand JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"209\">\n\t\t\t\t_revinclude results from JPA server should have a Bundle.entry.search.mode of\n\t\t\t\t\"include\" and not \"match\". Thanks to Josh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResource references using resource instance objects instead of resource IDs\n\t\t\t\twill correctly qualify the IDs with the resource type if they aren't already qualified\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"211\">\n\t\t\t\tTestpage Overlay project now properly allows a custom client\n\t\t\t\tfactory to be used (e.g. for custom authentication, etc.) Thanks\n\t\t\t\tto Chin Huang (@pukkaone) for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"212\">\n\t\t\t\tJPA server should reject IDs containing invalid characters (e.g. \"abc:123\")\n\t\t\t\tbut should allow client assigned IDs that contain text but do not start with\n\t\t\t\ttext. Thanks to Josh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t:text modifier on server and JPA server did not work correctly. Thanks to\n\t\t\t\tJosh Mandel for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix issue in client where parameter values containing a comma were\n\t\t\t\tsometimes double escaped.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t_include parameters now support the new <![CDATA[<code>_include:recurse=FOO</code>]]>\n\t\t\t\tsyntax that has been introduced in DSTU2 in the Client, Server, and JPA Server modules.\n\t\t\t\tNon-recursive behaviour is now the default (previously it was recursive) and :recurse\n\t\t\t\tneeds to be explicitly stated in order to support recursion.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tNew operations added to JPA server to force re-indexing of all\n\t\t\t\tresources (really only useful after indexes change or bugs are\n\t\t\t\tfixed)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server did not correctly index search parameters\n\t\t\t\tof type \"URI\". Thanks to David Hay for reporting! Note that if you are using the JPA server, this change\n\t\t\t\tmeans that\n\t\t\t\tthere are two new tables added to the database schema. Updating existing resources in the database may fail\n\t\t\t\tunless you\n\t\t\t\tset default values for the resource\n\t\t\t\ttable by issuing a SQL command similar to the following (false may be 0 or something else, depending on the\n\t\t\t\tdatabase platform in use)\n\t\t\t\t<![CDATA[<br/><code>update hfj_resource set sp_coords_present = false;<br/>\n\t\t\t\tupdate hfj_resource set sp_uri_present = false;</code>]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFIx issue in JPA server where profile declarations, tags, and\n\t\t\t\tsecurity labels were not always properly removed by an update that\n\t\t\t\twas trying to remove them. Also don't store duplicates.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tInstance $meta operations on JPA server did not previously return the\n\t\t\t\tresource version and lastUpdated time\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer responses populate Bundle.entry.fullUrl if possible. Thanks\n\t\t\t\tto Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXML parser failed to initialize in environments where a very old Woodstox\n\t\t\t\tlibrary is in use (earlier than 4.0). Thanks to Bill de Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"216\">\n\t\t\t\tInvalid/unexpected attributes found when parsing composite elements\n\t\t\t\tshould be logged or reported to the parser error handler\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server can now store Conformance resources, per a request\n\t\t\t\tfrom David Hay\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tResponseHighlightingInterceptor now skips handling responses if it\n\t\t\t\tfinds a URL parameter of <![CDATA[<code>_raw=true</code>]]> (in other\n\t\t\t\twords, if this parameter is found, the response won't be returned as\n\t\t\t\tHTML even if the request is detected as coming from a browser.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRestfulServer now supports dynamically adding and removing resource providers\n\t\t\t\tat runtime. Thanks to Bill Denton for adding this.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now correctly suppresses contents of deleted resources\n\t\t\t\tin history\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"222\">\n\t\t\t\tJPA server returned deleted resources in search results when using the _tag, _id, _profile, or _security\n\t\t\t\tsearch parameters\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"223\">\n\t\t\t\tFix issue with build on Windows. Thanks to Bryce van Dyk for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports $validate operation completely, including delete mode\n\t\t\t\tand profile validation using the RI InstanceValidator\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.1\" date=\"2015-07-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for reference implementation structures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tParsers did not encode the resource meta element if the resource\n\t\t\t\thad tags but no other meta elements. Thanks to Bill de Beaubien and\n\t\t\t\tClaude Nanjo for finding this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"164\">\n\t\t\t\tCorrect performance issue with :missing=true search requests where the parameter is a resource link. Thanks\n\t\t\t\tto wanghaisheng for all his help in testing this.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"149\">\n\t\t\t\tThe self link in the Bundle returned by searches on the server does not respect the\n\t\t\t\tserver's address strategy (which resulted in an internal IP being shown on fhirtest.uhn.ca)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce ResponseHighlighterInterceptor, which provides syntax highlighting on RESTful server responses\n\t\t\t\tif the server detects that the request is coming from a browser. This interceptor has been added\n\t\t\t\tto fhirtest.uhn.ca responses.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPerforming a create operation in a client used an incorrect URL if the\n\t\t\t\tresource had an ID set. ID should be ignored for creates. Thanks to\n\t\t\t\tPeter Girard for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"170\">\n\t\t\t\tAdd better addXXX() methods to structures, which take the datatype being added as a parameter. Thanks to\n\t\t\t\tClaude Nanjo for the\n\t\t\t\tsuggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"152\">\n\t\t\t\tAdd a new parser validation mechanism (see the\n\t\t\t\t<![CDATA[<a href=\"./doc_validation.html\">validation page</a>]]> for info) which can be\n\t\t\t\tused to validate resources as they are being parsed, and optionally fail if invalid/unexpected\n\t\t\t\telements are found in resource bodies during parsing.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIParser#parseResource(Class, String) method, which is used to parse a resource into the given\n\t\t\t\tstructure will now throw a DataFormatException if the structure is for the wrong type of\n\t\t\t\tresource for the one actually found in the input String (or Reader). For example, if a Patient\n\t\t\t\tresource is being parsed into Organization.class this will now cause an error. Previously,\n\t\t\t\tthe XML parser would ignore the type and the JSON parser would fail. This also caused\n\t\t\t\toperations to not parse correctly if they returned a resource type other than\n\t\t\t\tparameters with JSON encoding (e.g. the $everything operation on UHN's test server).\n\t\t\t\tThanks to Avinash Shanbhag for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWeb tester UI now supports _revinclude\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"178\">\n\t\t\t\tSupport link elements in Bundle.entry when parsing in DSTU2 mode\n\t\t\t\tusing the old (non-resource) Bundle class. Thanks to GitHub user\n\t\t\t\t@joedai for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLoggingInterceptor for server now supports logging DSTU2 extended operations by name\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWoodstox XML parser has a default setting to limit the maximum\n\t\t\t\tlength of an attribute to 512kb. This caused issues handling\n\t\t\t\tlarge attachments, so this setting has been increased to 100Mb.\n\t\t\t\tThanks to Nikos Kyriakoulakos for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"175\">\n\t\t\t\tSome HTML entities were not correctly converted during parsing. Thanks to\n\t\t\t\tNick Kitto for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIn the JPA Server:\n\t\t\t\tTransactions creating resources with temporary/placeholder resource IDs\n\t\t\t\tand other resources with references to those placeholder IDs previously\n\t\t\t\tdid not work if the reference did not contain the resource type\n\t\t\t\t(e.g. Patient/urn:oid:0.1.2.3 instead of urn:oid:0.1.2.3). The\n\t\t\t\tlatter is actually the correct way of specifying a reference to a\n\t\t\t\tplaceholder, but the former was the only way that worked. Both forms\n\t\t\t\tnow work, in order to be lenient. Thanks to Bill De Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tWhen parsing Bundles, if Bundle.entry.base is set to \"cid:\" (for DSTU1)\n\t\t\t\tor \"urn:uuid:\" / \"urn:oid:\" (for DSTU2) this is now correctly passed as\n\t\t\t\tthe base in resource.getId(). Conversely, when\n\t\t\t\tencoding bundles, if a resource ID has a base defined,\n\t\t\t\tand Bundle.entry.base is empty, it will now be\n\t\t\t\tautomatically set by the parser.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"179\">\n\t\t\t\tAdd fluent client method for validate operation, and support the\n\t\t\t\tnew DSTU2 style extended operation for $validate if the client is\n\t\t\t\tin DSTU2 mode. Thanks to Eric from the FHIR Skype Implementers chat for\n\t\t\t\treporting.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer now supports complete Accept header content negotiation, including\n\t\t\t\tq values specifying order of preference. Previously the q value was ignored.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer in DSTU2 mode now indicates that whether it has support for Transaction operation or not. Thanks to\n\t\t\t\tKevin Paschke for pointing out that this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"166\">\n\t\t\t\tQuestionnaire.title now gets correctly indexed in JPA server (it has no path, so it is a special case)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA server now supports ifNoneMatch in GET within a transaction request.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tDateRangeParam now supports null values in the constructor for lower or upper bounds (but\n\t\t\t\tstill not both)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tGeneric/fluent client and JPA server now both support _lastUpdated search parameter\n\t\t\t\twhich was added in DSTU2\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"188\">\n\t\t\t\tJPA server now supports sorting on reference parameters. Thanks to\n\t\t\t\tVishal Kachroo for reporting that this wasn't working!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent Last-Updated header in responses coming back to the client from\n\t\t\t\toverwriting the 'lastUpdated' value in the meta element in DSTU2\n\t\t\t\tresources. This is important because 'lastUpdated' can have more\n\t\t\t\tprecision than the equivalent header, but the client previously\n\t\t\t\tgave the header priority.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server supports _count parameter in transaction containing search URL (nested search)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDSTU2 servers now indicate support for conditional create/update/delete in their\n\t\t\t\tconformance statement.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSupport for the Prefer header has been added to the server, client, and\n\t\t\t\tJPA modules.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"196\">\n\t\t\t\tJPA server failed to search for deep chained parameters across multiple references,\n\t\t\t\te.g. \"Location.partof.partof.organization\". Thanks to Ismael Sarmento Jr for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent crash when encoding resources with contained resources\n\t\t\t\tif the contained resources contained a circular reference to each other\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd $meta, $meta-add, and $meta-delete operations to generic client\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"1.0\" date=\"2015-04-08\">\n\t\t\t<action type=\"add\">\n\t\t\t\tBump the version of a few dependencies to the\n\t\t\t\tlatest versions:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>Phloc-commons (for schematron validation) 4.3.5 -> 4.3.6</li>\n\t\t\t\t\t\t<li>Apache HttpClient 4.3.6 -> 4.4</li>\n\t\t\t\t\t\t<li>Woodstox 4.4.0 -> 4.4.1</li>\n\t\t\t\t\t\t<li>SLF4j 1.7.9 -> 1.7.10</li>\n\t\t\t\t\t\t<li>Spring (used in hapi-fhir-jpaserver-base module) 4.1.3.RELEASE -> 4.1.5.RELEASE</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for \"profile\" and \"tag\" elements in the resource Meta block\n\t\t\t\twhen parsing DSTU2 structures.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"113\">\n\t\t\t\tWhen a user manually creates the list of contained resources in a resource,\n\t\t\t\tthe encoder fails to encode any resources that don't have a '#' at the\n\t\t\t\tstart of their ID. This is unintuitive, so we now assume that '123' means '#123'.\n\t\t\t\tThanks to myungchoi for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd methods for setting the default encoding (XML/JSON) and\n\t\t\t\toretty print behaviour in the Fluent Client. Thanks to Stackoverflow\n\t\t\t\tuser ewall for the idea.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"129\">\n\t\t\t\tJPA Server did not mark a resource as \"no longer deleted\" if it\n\t\t\t\twas updated after being deleted. Thanks to Elliott Lavy and Lloyd\n\t\t\t\tMcKenzie for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"128\">\n\t\t\t\tFix regression in 0.9 - Server responds with an HTTP 500 and a NullPointerException instead of an HTTP 400\n\t\t\t\tand a useful error message if the client requests an unknown resource type\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for\n\t\t\t\t<![CDATA[<code>_revinclude</code>]]>\n\t\t\t\tparameter in client, server, and JPA.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tInclude constants on resources (such as\n\t\t\t\t<![CDATA[<code>Observation.INCLUDE_VALUE_STRING</code>]]>)\n\t\t\t\thave been switched in the DSTU2 structures to use\n\t\t\t\tthe new syntax required in DSTU2: [resource name]:[search param NAME]\n\t\t\t\tinsead of the DSTU1 style [resource name].[search param PATH]\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"124\">\n\t\t\t\tWhen encoding resources, the parser will now convert any resource\n\t\t\t\treferences to versionless references automatically (i.e. it will\n\t\t\t\tomit the version part automatically if one is present in the reference)\n\t\t\t\tsince references between resources must be versionless. Additionally,\n\t\t\t\treferences in server responses will omit the server base URL part of the\n\t\t\t\treference if the base matches the base for the server giving\n\t\t\t\tthe response.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"130\">\n\t\t\t\tNarrative generator incorrectly sets the Resource.text.status to 'generated' even if the\n\t\t\t\tgiven resource type does not have a template (and therefore no narrative is actually generated).\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSearching in JPA server with no search parameter returns deleted resources when it should exclude them.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"135\">\n\t\t\t\tRemove Eclipse and IntelliJ artifacts (.project, *.iml, etc) from version control. Thanks\n\t\t\t\tto Doug Martin for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tREST server methods may now have a parameter of\n\t\t\t\ttype NarrativeModeEnum which will be populated with\n\t\t\t\tthe value of the _narrative URL parameter\n\t\t\t\tif one was supplied. Annotation client methods\n\t\t\t\tmay also include a parameter of this type, and it\n\t\t\t\twill be used to populate this parameter on the request\n\t\t\t\tURL if it is not null. Thanks to Neal Acharya for the\n\t\t\t\tidea!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAndroid JAR now includes servlet-API classes, as the project will not\n\t\t\t\twork without them. Thanks\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"116\">\n\t\t\t\tRequested _include values are preserved across paging links when the\n\t\t\t\tserver returns multiple pages. Thanks to Bill de Beaubien for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"138\" dev=\"wdebeau1\">\n\t\t\t\tAdd new server address strategy \"ApacheProxyAddressStrategy\" which uses\n\t\t\t\theaders \"x-forwarded-host\" and \"x-forwarded-proto\" to determine the\n\t\t\t\tserver's address. This is useful if you are deploying a HAPI FHIR\n\t\t\t\tserver behind an Apache proxy (e.g. for load balancing or other reasons).\n\t\t\t\tThanks to Bill de Beaubien for contributing!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"143\">\n\t\t\t\tResource references between separate resources found in a single\n\t\t\t\tbundle did not get populated with the actual resource when parsing a\n\t\t\t\tDSTU2 style bundle. Thanks to Nick Peterson for reporting and figuring\n\t\t\t\tout why none of our unit tests were actually catching the problem!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"146\">\n\t\t\t\tJSON encoder did not encode contained resources when encoding\n\t\t\t\ta DSTU2 style bundle. Thanks to Mohammad Jafari and baopingle\n\t\t\t\tfor all of their help in tracking this issue down and developing\n\t\t\t\tuseful unit tests to demonstrate it.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tClient now supports invoking transcation using a DSTU2-style\n\t\t\t\tBundle resource as the input.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"147\">\n\t\t\t\tJPA Server $everything operation could sometimes include a duplicate copy of\n\t\t\t\tthe main focus resource if it was referred to in a deep chain. Thanks\n\t\t\t\tto David Hay for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"148\">\n\t\t\t\tJPA Server $everything operation now allows a _count parameter\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"139\">\n\t\t\t\tJPA server failed to index resources containing ContactPointDt elements with\n\t\t\t\tpopulated values (e.g. Patient.telecom). Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new configuration method on the parsers,\n\t\t\t\t<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which\n\t\t\t\tconfigures the parser to preserve versions in resource reference links when\n\t\t\t\tencoding. By default, these are removed.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"155\" dev=\"wdebeau1\">\n\t\t\t\tTerser's IModelVisitor now supplies to the path to the element. This is\n\t\t\t\tan API change, but I don't think there are many users of the IModelVisitor yet.\n\t\t\t\tPlease let us know if this is a big hardship and we can find an alternate way\n\t\t\t\tof making this change.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tPrevent server from returning a Content-Location header for search\n\t\t\t\tresponse when using the DSTU2 bundle format\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJPA server (uhnfhirtest.uhn.ca) sometimes included an empty\n\t\t\t\t\"text\" element in Bundles being returned.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"162\">\n\t\t\t\tAdd a framework for the Web Tester UI to allow its internal FHIR client to\n\t\t\t\tbe configured (e.g. to add an authorization interceptor so that it adds\n\t\t\t\tcredentials to client requests it makes). Thanks to Harsha Kumara for\n\t\t\t\tthe suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"163\">\n\t\t\t\tFix regression in early 1.0 builds where resource type sometimes does not get\n\t\t\t\tpopulated in a resource ID when the resource is parsed. Thanks to\n\t\t\t\tNick Peterson for reporting, and for providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow fluent/generic client users to execute a transaction using a raw string (containing a bundle resource)\n\t\t\t\tas input instead of a Bundle resource class instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDisable date validation in the web tester UI, so that it is possible to\n\t\t\t\tenter partial dates, or dates without times, or even test out invalid date\n\t\t\t\toptions.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"36\">\n\t\t\t\tMake BaseElement#getUndeclaredExtensions() and BaseElement#getUndeclaredExtensions() return\n\t\t\t\ta mutable list so that it is possible to delete extensions from a resource instance.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"168\">\n\t\t\t\tServer conformance statement check in clients (this is the check\n\t\t\t\twhere the first time a given FhirContext is used to access a given server\n\t\t\t\tbase URL, it will first check the server's Conformance statement to ensure\n\t\t\t\tthat it supports the correct version of FHIR) now uses any\n\t\t\t\tregistered client interceptors. In addition, IGenericClient now has a method\n\t\t\t\t\"forceConformanceCheck()\" which manually triggers this check. Thanks to\n\t\t\t\tDoug Martin for reporting and suggesting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"167\">\n\t\t\t\tRename the Spring Bean definition for the JPA server EntityManager from\n\t\t\t\t\"myEntityManagerFactory\" to just \"entityManagerFactory\" as this is the\n\t\t\t\tdefault bean name expected in other parts of the Spring framework.\n\t\t\t\tThanks to Mohammad Jafari for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tImprove error message when a user tries to perform a create/update with an invalid\n\t\t\t\tor missing Content-Type header. Thanks to wanghaisheng for reporting! (This was\n\t\t\t\tactually a three part bug, so the following two fixes also reference this\n\t\t\t\tbug number)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tAdd support for :missing qualifier in generic/fluent client.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"164\">\n\t\t\t\tAdd support for :missing qualifier in JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new configuration method on the parsers,\n\t\t\t\t<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which\n\t\t\t\tconfigures the parser to preserve versions in resource reference links when\n\t\t\t\tencoding. By default, these are removed.\n\t\t\t</action>\n\t\t\t<action type=\"add\" due-to=\"joel-costigliola\" issue=\"171\">\n\t\t\t\tAdd an exception for RESTful clients/servers to represent the\n\t\t\t\tHTTP 403 Forbidden status code. Thanks to Joel Costigliola for\n\t\t\t\tthe patch!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTransaction server operations incorrectly used the \"Accept\" header instead of the \"Content-Type\" header to\n\t\t\t\tdetermine the\n\t\t\t\tPOST request encoding. Thanks to Rene Spronk for providing a test case!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.9\" date=\"2015-03-14\">\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for DSTU2 features introduced: New resource definitions, Bundle resource,\n\t\t\t\tencoding changes (ID in resource bodt, meta tag)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"65\">\n\t\t\t\tFix an issue encoding extensions on primitive types in JSON. Previously the \"_value\" object\n\t\t\t\twould be an array even if the field it was extending was not repeatable. This is not correct\n\t\t\t\taccording to the specification, nor can HAPI's parser parse this correctly. The encoder\n\t\t\t\thas been corrected, and the parser has been adjusted to be able to handle resources with\n\t\t\t\textensions encoded in this way. Thanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tLibrary now checks if custom resource types can be instantiated on startup\n\t\t\t\t(e.g. because they don't have a no-argument constructor) in order to\n\t\t\t\tavoid failing later\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump a few dependency JARs to the latest versions in Maven POM:\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>SLF4j (in base module) - Bumped to 1.7.9</li>\n\t\t\t\t\t\t<li>Apache HTTPClient (in base module) - Bumped to 4.3.6</li>\n\t\t\t\t\t\t<li>Hibernate (in JPA module) - Bumped to 4.3.7</li>\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"67\">\n\t\t\t\tIdDt failed to recognize local identifiers containing fragments that look like\n\t\t\t\treal identifiers as being local identifiers even though they started with '#'.\n\t\t\t\tFor example, a local resource reference of \"#aa/_history/aa\" would be incorrectly\n\t\t\t\tparsed as a non-local reference.\n\t\t\t\tThanks to Mohammad Jafari for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[<code>Last-Modified</code>]]>\n\t\t\t\theader in server was incorrectly using FHIR date format instead\n\t\t\t\tof RFC-1123 format.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer create and update methods failed with an IllegalArgumentException if\n\t\t\t\tthe method type was a custom resource definition type (instead of a built-in\n\t\t\t\tHAPI type). Thanks to Neal Acharya for the analysis.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"79\">\n\t\t\t\tJPA server module now supports\n\t\t\t\t<![CDATA[<code>_include</code>]]>\n\t\t\t\tvalue of\n\t\t\t\t<![CDATA[<code>*</code>]]>. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIdDt method\n\t\t\t\t<![CDATA[withServerBase]]>\n\t\t\t\treturned String (unlike all of the other \"withFoo\" methods on that class),\n\t\t\t\tand did not work correctly if the IdDt already had a server base. This\n\t\t\t\thas been corrected. Note that the return type for this method has been\n\t\t\t\tchanged, so code may need to be updated.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"84\" due-to=\"mochaholic\">\n\t\t\t\tIn previous versions of HAPI, the XML parser encoded multiple contained\n\t\t\t\tresources in a single\n\t\t\t\t<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>\n\t\t\t\ttag, even though the FHIR specification rerquires a separate\n\t\t\t\t<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>\n\t\t\t\ttag for each resource. This has been corrected. Note that the parser will\n\t\t\t\tcorrectly parse either form (this has always been the case) so this\n\t\t\t\tchange should not cause any breakage in HAPI based trading partners, but\n\t\t\t\tmay cause issues if other applications have been coded to depend on the\n\t\t\t\tincorrect behaviour. Thanks to Mochaholic for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"91\" due-to=\"andyhuang91\">\n\t\t\t\tCustom/user defined resource definitions which contained more than one\n\t\t\t\tchild with no order defined failed to initialize properly. Thanks to\n\t\t\t\tAndy Huang for reporting and figuring out where the\n\t\t\t\tproblem was!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tRESTful Client now queries the server (only once per server base URL) to ensure that\n\t\t\t\tthe given server corresponds to the correct version of the FHIR specification, as\n\t\t\t\tdefined by the FhirContext. This behaviour can be disabled by setting the\n\t\t\t\tappropriate configuration on the\n\t\t\t\tRestfulClientConfig. Thanks to Grahame Grieve for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tJPA module now supports deleting resource via transaction\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"97\" due-to=\"twilson650\">\n\t\t\t\tDateClientParam#second() incorrectly used DAY precision instead\n\t\t\t\tof SECOND precision. Thanks to Tom Wilson for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"100\" due-to=\"sweetnavelorange\">\n\t\t\t\tFix issue where HAPI failed to initialize correctly if Woodstox library was not on the classpath, even\n\t\t\t\tif StAX API was configured to use a different provider. Thanks to\n\t\t\t\tJames Butler for reporting and figuring out where the issue was!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"101\">\n\t\t\t\tCalling BaseDateTimeDt#setValue(Date, TemporalPrecisionEnum) did not always actually respect\n\t\t\t\tthe given precision when the value was encoded. Thanks to jacksonjesse for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"103\">\n\t\t\t\tEncoders (both XML and JSON) will no longer encode contained resources if they are\n\t\t\t\tnot referenced anywhere in the resource via a local reference. This is just a convenience\n\t\t\t\tfor users who have parsed a resource with contained resources and want to remove some\n\t\t\t\tbefore re-encoding. Thanks to Alexander Kley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"110\" due-to=\"mochaholic\">\n\t\t\t\tAdd support for DSTU2 style security labels in the parser and encoder. Thanks to\n\t\t\t\tMohammad Jafari for the contribution!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer requests for Binary resources where the client has explicitly requested XML or JSON responses\n\t\t\t\t(either with a <![CDATA[<code>_format</code>]]> URL parameter, or an <![CDATA[<code>Accept</code>]]> request\n\t\t\t\theader)\n\t\t\t\twill be responded to using the Binary FHIR resource type instead of as Binary blobs. This is\n\t\t\t\tin accordance with the recommended behaviour in the FHIR specification.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd new properties to RestfulServer: \"DefaultResponseEncoding\", which allows\n\t\t\t\tusers to configure a default encoding (XML/JSON) to use if none is specified in the\n\t\t\t\tclient request. Currently defaults to XML. Also \"DefaultPrettyPrint\", which specifies\n\t\t\t\twhether to pretty print responses by default. Both properties can be overridden\n\t\t\t\ton individual requets using the appropriate Accept header or request URL parameters.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for quantity search params in FHIR tester UI\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for FHIR \"extended operations\" as defined in the FHIR DSTU2\n\t\t\t\tspecification, for the Generic Client, Annotation Client, and\n\t\t\t\tServer.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tObservation.applies[x] and other similar search fields with multiple allowable\n\t\t\t\tvalue types were not being correctly indexed in the JPA server.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"122\">\n\t\t\t\tDateClientParam.before() incorrectly placed \"&lt;=\" instead of\n\t\t\t\t\"&lt;\" in the request URL. Thanks to Ryan for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"77\" dev=\"wdebeau1\">\n\t\t\t\tServer now only automatically adds _include resources which are provided\n\t\t\t\tas references if the client request actually requested that specific include.\n\t\t\t\tSee RestfulServer\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"120\">\n\t\t\t\tUser defined resource types which contain extensions that use a bound code type\n\t\t\t\t(e.g. an BoundCodeDt with a custom Enum) failed to parse correctly. Thanks\n\t\t\t\tto baopingle for reporting and providing a test case!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSorting is now supported in the Web Testing UI (previously a button existed for sorting, but it didn't do\n\t\t\t\tanything)\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"111\">\n\t\t\t\tServer will no longer include stack traces in the OperationOutcome returned to the client\n\t\t\t\twhen an exception is thrown. A new interceptor called ExceptionHandlingInterceptor has been\n\t\t\t\tcreated which adds this functionality back if it is needed (e.g. for DEV setups). See the\n\t\t\t\tserver interceptor documentation for more information. Thanks to Andy Huang for the suggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.8\" date=\"2014-12-17\">\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]> The \"FHIR structures\" for DSTU1 (the classes which model the\n\t\t\t\tresources and composite datatypes) have been moved out of the core JAR into their\n\t\t\t\town JAR, in order to allow support for DEV resources, and DSTU2 resources when thast\n\t\t\t\tversion is finalized. See the\n\t\t\t\t<![CDATA[<a href=\"./doc_dstu2.html\">DSTU2 page</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<b>Deprocated API Removal</b>: The following classes (which were deprocated previously)\n\t\t\t\t\thave now been removed:\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><b>ISecurityManager</b>: If you are using this class, the same functionality\n\t\t\t\t\t\tis available through the more general purpose\n\t\t\t\t\t\t<a href=\"http://jamesagnew.github.io/hapi-fhir/doc_rest_server_interceptor.html\">server interceptor</a>\n\t\t\t\t\t\tcapabilities.\n\t\t\t\t\t\t<li><b>CodingListParam</b>: This class was made redundant by the\n\t\t\t\t\t\t<a href=\"http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/param/TokenOrListParam.html\">TokenOrListParam</a>\n\t\t\t\t\t\tclass, which can be used in its place.\n\t\t\t\t\t</ul>\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[\n\t\t\t\t\t<b>API Change</b>: The IResource#getResourceMetadata() method has been changed\n\t\t\t\t\tfrom returning \n\t\t\t\t\t<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>\n\t\t\t\t\tto returning a new type called\n\t\t\t\t\t<code>ResourceMetadataMap</code>. This new type implements \n\t\t\t\t\t<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>\n\t\t\t\t\titself, so this change should not break existing code, but may\n\t\t\t\t\trequire a clean build in order to run correctly.\n\t\t\t\t]]>\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"38\" dev=\"wdebeau1\">\n\t\t\t\tProfile generation on the server was not working due to IdDt being\n\t\t\t\tincorrectly used. Thanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"42\" dev=\"wdebeau1\">\n\t\t\t\tProfiles did not generate correctly if a resource definition class had a\n\t\t\t\tdefined extension which was of a composite type. Thanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"44\" dev=\"petromykhailysyn\">\n\t\t\t\tRemove unnecessary IOException from narrative generator API. Thanks to\n\t\t\t\tPetro Mykhailysyn for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"48\" dev=\"wdebeau1\">\n\t\t\t\tIntroduced a new\n\t\t\t\t<![CDATA[<code>@ProvidesResources</code>]]> annotation which can be added to\n\t\t\t\tresource provider and servers to allow them to declare additional resource\n\t\t\t\tclasses they are able to serve. This is useful if you have a server which can\n\t\t\t\tserve up multiple classes for the same resource type (e.g. a server that sometimes\n\t\t\t\treturns a default Patient, but sometimes uses a custom subclass).\n\t\t\t\tThanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"49\" dev=\"wdebeau1\">\n\t\t\t\tIntroduced a new\n\t\t\t\t<![CDATA[<code>@Destroy</code>]]> annotation which can be added to\n\t\t\t\ta resource provider method. This method will be called by the server when it\n\t\t\t\tis being closed/destroyed (e.g. when the application is being undeployed, the\n\t\t\t\tcontainer is being shut down, etc.)\n\t\t\t\tThanks to Bill de Beaubien for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new method <![CDATA[handleException]]> to the server interceptor\n\t\t\t\tframework which allows interceptors to be notified of any exceptions and\n\t\t\t\truntime errors within server methods. Interceptors may optionally also\n\t\t\t\toverride the default error handling behaviour of the RestfulServer.\n\t\t\t</action>\n\t\t\t<action dev=\"wdebeau1\" type=\"add\">\n\t\t\t\tAdd constants to BaseResource for the \"_id\" search parameter which all resources\n\t\t\t\tshould support.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDateRangeParam parameters on the server now return correct\n\t\t\t\t<![CDATA[<code>getLowerBoundAsInstant()</code>]]>\n\t\t\t\tand\n\t\t\t\t<![CDATA[<code>getUpperBoundAsInstant()</code>]]>\n\t\t\t\tvalues if a single unqualified value is passed in. For example, if\n\t\t\t\ta query containing\n\t\t\t\t<![CDATA[<code>&birthdate=2012-10-01</code>]]>\n\t\t\t\tis received, previously these two methods would both return the same\n\t\t\t\tvalue, but with this fix\n\t\t\t\t<![CDATA[<code>getUpperBoundAsInstant()</code>]]>\n\t\t\t\tnow returns the instant at 23:59:59.9999.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource fields with a type of \"*\" (or Any) sometimes failed to parse if a\n\t\t\t\tvalue type of \"code\" was used. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"lmds\">\n\t\t\t\tRemove dependency on JAXB libraries, which were used to parse and encode\n\t\t\t\tdates and times (even in the JSON parser). JAXB is built in to most JDKs\n\t\t\t\tbut the version bundled with IBM's JDK is flaky and resulted in a number\n\t\t\t\tof problems when deploying to Websphere.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"50\" dev=\"jjathman\">\n\t\t\t\tPrimitive datatypes now preserve their original string value when parsing resources,\n\t\t\t\tas well as containing the \"parsed value\". For instance, a DecimalDt field value of\n\t\t\t\t<![CDATA[<code>1.0000</code>]]> will be parsed into the corresponding\n\t\t\t\tdecimal value, but will also retain the original value with the corresponding\n\t\t\t\tlevel of precision. This allows vadliator rules to be applied to\n\t\t\t\toriginal values as received \"over the wire\", such as well formatted but\n\t\t\t\tinvalid dates, e.g. \"2001-15-01\". Thanks to Joe Athman for reporting and\n\t\t\t\thelping to come up with a fix!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tWhen using Generic Client, if performing a\n\t\t\t\t<![CDATA[create]]> or <![CDATA[update]]> operation using a String as the resource body,\n\t\t\t\tthe client will auto-detect the FHIR encoding style and send an appropriate\n\t\t\t\t<![CDATA[Content-Type]]> header.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"52\">\n\t\t\t\tJPA module (and public HAPI-FHIR test server) were unable to process resource types\n\t\t\t\twhere at least one search parameter has no path specified. These now correctly save\n\t\t\t\t(although the server does not yet process these params, and it should). Thanks to\n\t\t\t\tGitHub user shvoidlee for reporting and help with analysis!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tGeneric/Fluent Client \"create\" and \"update\" method requests were not setting a content type header\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"53\" dev=\"petromykhailysyn\">\n\t\t\t\tDateDt left precision value as <![CDATA[null]]> in the constructor\n\t\t\t\t<![CDATA[DateDt(Date)]]>.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRESTful server now doesn't overwrite resource IDs if they are absolute. In other words, if\n\t\t\t\ta server's Resource Provider returns a resource with ID \"Patient/123\" it will be translated to\n\t\t\t\t\"[base url]/Patient/123\" but if the RP returns ID \"http://foo/Patient/123\" the ID will be\n\t\t\t\treturned exactly as is. Thanks to Bill de Beaubien for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"55\">\n\t\t\t\tJPA module Transaction operation was not correctly replacing logical IDs\n\t\t\t\tbeginning with \"cid:\" with server assigned IDs, as required by the\n\t\t\t\tspecification.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"tahurac\">\n\t\t\t\t<![CDATA[FhirTerser]]> did not visit or find children in contained resources when\n\t\t\t\tsearching a resource. This caused server implementations to not always return contained\n\t\t\t\tresources when they are included with a resource being returned.\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"lmds\">\n\t\t\t\tAdd a method <![CDATA[String IResource#getResourceName()]]> which returns the name of the\n\t\t\t\tresource in question (e.g. \"Patient\", or \"Observation\"). This is intended as a\n\t\t\t\tconvenience to users.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDo not strip version from resource references in resources returned\n\t\t\t\tfrom server search methods. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"jjathman\" issue=\"54\">\n\t\t\t\tCorrect an issue with the validator where changes to the underlying\n\t\t\t\tOperationOutcome produced by a validation cycle cause the validation\n\t\t\t\tresults to be incorrect.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient interceptors registered to an interface based client instance\n\t\t\t\twere applied to other client instances for the same client interface as well. (Issue\n\t\t\t\tdid not affect generic/fluent clients)\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"57\">\n\t\t\t\tDateDt, DateTimeDt and types InstantDt types now do not throw an exception\n\t\t\t\tif they are used to parse a value with the wrong level of precision for\n\t\t\t\tthe given type but do throw an exception if the wrong level of precision\n\t\t\t\tis passed into their constructors.<![CDATA[<br/><br/>]]>\n\t\t\t\tThis means that HAPI FHIR can now successfully parse resources from external\n\t\t\t\tsources that have the wrong level of precision, but will generate a validation\n\t\t\t\terror if the resource is validated. Thanks to Alexander Kley for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tEncoding a Binary resource without a content type set should not result in a NullPointerException. Thanks\n\t\t\t\tto Alexander Kley for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tServer gives a more helpful error message if multiple IResourceProvider implementations\n\t\t\t\tare provided for the same resource type. Thanks to wanghaisheng for the idea!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"61\">\n\t\t\t\tBring DSTU1 resource definitions up to version 0.0.82-2929<![CDATA[<br/>]]>\n\t\t\t\tBring DEV resource definitions up to 0.4.0-3775<![CDATA[<br/>]]>\n\t\t\t\tThanks to crinacimpian for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"62\">\n\t\t\t\tJPA server did not correctly process _include requests if included\n\t\t\t\tresources were present with a non-numeric identifier. Thanks to\n\t\t\t\tBill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"60\">\n\t\t\t\tClient requests which include a resource/bundle body (e.g. create,\n\t\t\t\tupdate, transaction) were not including a charset in the content type\n\t\t\t\theader, leading to servers incorrectly assuming ISO-8859/1. Thanks to\n\t\t\t\tshvoidlee for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"59\" dev=\"wdebeau1\">\n\t\t\t\tClean up the way that Profile resources are automatically exported\n\t\t\t\tby the server for custom resource profile classes. See the\n\t\t\t\t<![CDATA[<a href=\"http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/model/api/annotation/ResourceDef.html\">@ResourceDef</a>]]>\n\t\t\t\tJavaDoc for information on how this works.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"73\" dev=\"wdebeau1\">\n\t\t\t\tAdd convenience methods to TokenOrListParam to test whether any of a set of tokens match\n\t\t\t\tthe given requested list.\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"86\" dev=\"harsha89\">\n\t\t\t\tAdd a protected method to RestfulServer which allows developers to\n\t\t\t\timplement their own method for determining which part of the request\n\t\t\t\tURL is the FHIR request path (useful if you are embedding the RestulServer inside\n\t\t\t\tof another web framework). Thanks to Harsha Kumara for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.7\" date=\"2014-10-23\">\n\t\t\t<action type=\"add\" issue=\"30\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]> The TagList class previously implemented ArrayList semantics,\n\t\t\t\tbut this has been replaced with LinkedHashMap semantics. This means that the list of\n\t\t\t\ttags will no longer accept duplicate tags, but that tag order will still be\n\t\t\t\tpreserved. Thanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"33\">\n\t\t\t\tServer was incorrectly including contained resources being returned as both contained resources, and as\n\t\t\t\ttop-level resources in the returned bundle for search operations.\n\t\t\t\tThanks to Bill de Beaubien for reporting! This also fixes Issue #20, thanks to\n\t\t\t\tlephty for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"suranga\">\n\t\t\t\tDocumentation fixes\n\t\t\t</action>\n\t\t\t<action type=\"add\" dev=\"dougmartin\">\n\t\t\t\tAdd a collection of new methods on the generic client which support the\n\t\t\t\t<![CDATA[ \n\t\t\t\t<b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#read(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">read</a></b>,\n\t\t\t\t<b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#vread(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">read</a></b>,\n\t\t\t\tand <b><a href=\"./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#search(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)\">search</a></b>\n\t\t\t\t]]>\n\t\t\t\toperations using an absolute URL. This allows developers to perform these operations using\n\t\t\t\tURLs they obtained from other sources (or external resource references within resources). In\n\t\t\t\taddition, the existing read/vread operations will now access absolute URL references if\n\t\t\t\tthey are passed in. Thanks to Doug Martin of the Regenstrief Center for Biomedical Informatics\n\t\t\t\tfor contributing this implementation!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer implementation was not correctly figuring out its own FHIR Base URL when deployed\n\t\t\t\ton Amazon Web Service server. Thanks to Jeffrey Ting and Bill De Beaubien of\n\t\t\t\tSystems Made Simple for their help in figuring out this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXML Parser failed to encode fields with both a resource reference child and\n\t\t\t\ta primitive type child. Thanks to Jeffrey Ting and Bill De Beaubien of\n\t\t\t\tSystems Made Simple for their help in figuring out this issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tHAPI now runs successfully on Servlet 2.5 containers (such as Tomcat 6). Thanks to\n\t\t\t\tBernard Gitaadji for reporting and diagnosing the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSummary (in the bundle entry) is now encoded by the XML and JSON parsers if supplied. Thanks to David Hay of\n\t\t\t\tOrion Health for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"24\">\n\t\t\t\tConformance profiles which are automatically generated by the server were missing a few mandatory elements,\n\t\t\t\twhich meant that the profile did not correctly validate. Thanks to Bill de Beaubien of Systems Made Simple\n\t\t\t\tfor reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tXHTML (in narratives) containing escapable characters (e.g. &lt; or &quot;) will now always have those\n\t\t\t\tcharacters\n\t\t\t\tescaped properly in encoded messages.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResources containing entities which are not valid in basic XML (e.g. &amp;sect;) will have those\n\t\t\t\tentities converted to their equivalent unicode characters when resources are encoded, since FHIR does\n\t\t\t\tnot allow extended entities in resource instances.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd a new client interceptor which adds HTTP Authorization Bearer Tokens (for use with OAUTH2 servers)\n\t\t\t\tto client requests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tAdd phloc-commons dependency explicitly, which resolves an issue building HAPI from source on\n\t\t\t\tsome platforms. Thanks to Odysseas Pentakalos for the patch!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI now logs a single line indicating the StAX implementation being used upon the\n\t\t\t\tfirst time an XML parser is created.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tUpdate methods on the server did not return a \"content-location\" header, but\n\t\t\t\tonly a \"location\" header. Both are required according to the FHIR specification.\n\t\t\t\tThanks to Bill de Beaubien of Systems Made Simple for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"26\" dev=\"akley\">\n\t\t\t\tParser failed to correctly read contained Binary resources. Thanks to Alexander Kley for\n\t\t\t\tthe patch!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"29\" dev=\"akley\">\n\t\t\t\tCalling encode multiple times on a resource with contained resources caused the contained\n\t\t\t\tresources to be re-added (and the actual message to grow) with each encode pass. Thanks to\n\t\t\t\tAlexander Kley for the test case!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON-encoded contained resources with the incorrect \"_id\" element (which should be \"id\", but some\n\t\t\t\tincorrect examples exist on the FHIR specification) now parse correctly. In other words, HAPI\n\t\t\t\tpreviously only accepted the correct \"id\" element, but now it also accepts the incorrect\n\t\t\t\t\"_id\" element just to be more lenient.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSeveral unit tests failed on Windows (or any platform with non UTF-8 default encoding). This may\n\t\t\t\thave also caused resource validation to fail occasionally on these platforms as well.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\ttoString() method on TokenParam was incorrectly showing the system as the value.\n\t\t\t\tThanks to Bill de Beaubien for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"update\">\n\t\t\t\tDocumentation on contained resources contained a typo and did not actually produce contained resources.\n\t\t\t\tThanks\n\t\t\t\tto David Hay of Orion Health for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"31\" dev=\"preston\">\n\t\t\t\tAdd a\n\t\t\t\t<![CDATA[<a href=\"https://www.vagrantup.com/\">Vagrant</a>]]>\n\t\t\t\tbased environment (basically a fully built, self contained development environment) for\n\t\t\t\ttrying out the HAPI server modules. Thanks to Preston Lee for the pull request, and for\n\t\t\t\toffering to maintain this!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"32\" dev=\"jjathman\">\n\t\t\t\tChange validation API so that it uses a return type instead of exceptions to communicate\n\t\t\t\tvalidation failures. Thanks to Joe Athman for the pull request!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"35\" dev=\"petromykhailysyn\">\n\t\t\t\tAdd a client interceptor which adds an HTTP cookie to each client request. Thanks to\n\t\t\t\tPetro Mykhailysyn for the pull request!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.6\" date=\"2014-09-08\"\n\t\t\t\t\tdescription=\"This release brings a number of new features and bug fixes!\">\n\t\t\t<!-- \n\t\t\t<action type=\"add\">\n\t\t\t\tAllow generic client\t... OAUTH\n\t\t\t</action>\n\t\t\t-->\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd server interceptor framework, and new interceptor for logging incoming\n\t\t\t\trequests.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd server validation framework for validating resources against the FHIR schemas and schematrons\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTester UI created double _format and _pretty param entries in searches. Thanks to Gered King of University\n\t\t\t\tHealth Network for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"4\">\n\t\t\t\tCreate method was incorrectly returning an HTTP 204 on sucessful completion, but\n\t\t\t\tshould be returning an HTTP 200 per the FHIR specification. Thanks to wanghaisheng\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFHIR Tester UI now correctly sends UTF-8 charset in responses so that message payloads containing\n\t\t\t\tnon US-ASCII characters will correctly display in the browser\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser was incorrectly encoding extensions on composite elements outside the element itself\n\t\t\t\t(as is done correctly for non-composite elements) instead of inside of them. Thanks to David Hay of\n\t\t\t\tOrion for reporting this!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tContained/included resource instances received by a client are now automatically\n\t\t\t\tadded to any ResourceReferenceDt instancea in other resources which reference them.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd documentation on how to use eBay CORS Filter to support Cross Origin Resource\n\t\t\t\tSharing (CORS) to server. CORS support that was built in to the server itself has\n\t\t\t\tbeen removed, as it did not work correctly (and was reinventing a wheel that others\n\t\t\t\thave done a great job inventing). Thanks to Peter Bernhardt of Relay Health for all the assistance\n\t\t\t\tin testing this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tIResource interface did not expose the getLanguage/setLanguage methods from BaseResource,\n\t\t\t\tso the resource language was difficult to access.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON Parser now gives a more friendly error message if it tries to parse JSON with invalid use\n\t\t\t\tof single quotes\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction server method is now allowed to return an OperationOutcome in addition to the\n\t\t\t\tincoming resources. The public test server now does this in order to return status information\n\t\t\t\tabout the transaction processing.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tUpdate method in the server can now flag (via a field on the MethodOutcome object being returned)\n\t\t\t\tthat the result was actually a creation, and Create method can indicate that it was actually an\n\t\t\t\tupdate. This has no effect other than to switch between the HTTP 200 and HTTP 201 status codes on the\n\t\t\t\tresponse, but this may be useful in some circumstances.\n\t\t\t</action>\n\t\t\t<action type=\"fix\" dev=\"tahurac\">\n\t\t\t\tAnnotation client search methods with a specific resource type (e.g. List&lt;Patient&gt; search())\n\t\t\t\twon't return any resources that aren't of the correct type that are received in a response\n\t\t\t\tbundle (generally these are referenced resources, so they are populated in the reference fields instead).\n\t\t\t\tThanks to Tahura Chaudhry of University Health Network for the unit test!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdded narrative generator template for OperationOutcome resource\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDate/time types did not correctly parse values in the format \"yyyymmdd\" (although the FHIR-defined format\n\t\t\t\tis \"yyyy-mm-dd\" anyhow, and this is correctly handled). Thanks to Jeffrey Ting of Systems Made Simple\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer search method for an unnamed query gets called if the client requests a named query\n\t\t\t\twith the same parameter list. Thanks to Neal Acharya of University Health Network for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tCategory header (for tags) is correctly read in client for \"read\" operation\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction method in server can now have parameter type Bundle instead of\n\t\t\t\tList&lt;IResource&gt;\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI parsers now use field access to get/set values instead of method accessors and mutators.\n\t\t\t\tThis should give a small performance boost.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tJSON parser encodes resource references incorrectly, using the name \"resource\" instead\n\t\t\t\tof the name \"reference\" for the actual reference. Thanks to\n\t\t\t\tRicky Nguyen for reporting and tracking down the issue!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRename NotImpementedException to NotImplementedException (to correct typo)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer setUseBrowserFriendlyContentType setting also respected for errors (e.g. OperationOutcome with\n\t\t\t\t4xx/5xx status)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix performance issue in date/time datatypes where pattern matchers were not static\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now gives a more helpful error message if a @Read method has a search parameter (which is invalid,\n\t\t\t\tbut\n\t\t\t\tpreviously lead to a very unhelpful error message). Thanks to Tahura Chaudhry of UHN for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource of type \"List\" failed to parse from a bundle correctly. Thanks to David Hay of Orion Health\n\t\t\t\tfor reporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tQuantityParam correctly encodes approximate (~) prefix to values\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"14\">\n\t\t\t\tIf a server defines a method with parameter \"_id\", incoming search requests for that method may\n\t\t\t\tget delegated to the wrong method. Thanks to Neal Acharya for reporting!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSecurityEvent.Object structural element has been renamed to\n\t\t\t\tSecurityEvent.ObjectElement to avoid conflicting names with the\n\t\t\t\tjava Object class. Thanks to Laurie Macdougall-Sookraj of UHN for\n\t\t\t\treporting!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tText/narrative blocks that were created with a non-empty\n\t\t\t\tnamespace prefix (e.g. &lt;xhtml:div xmlns:xhtml=\"...\"&gt;...&lt;/xhtml:div&gt;)\n\t\t\t\tfailed to encode correctly (prefix was missing in encoded resource)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tResource references previously encoded their children (display and reference)\n\t\t\t\tin the wrong order so references with both would fail schema validation.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSecurityEvent resource's enums now use friendly enum names instead of the unfriendly\n\t\t\t\tnumeric code values. Thanks to Laurie MacDougall-Sookraj of UHN for the\n\t\t\t\tsuggestion!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.5\" date=\"2014-07-30\">\n\t\t\t<action type=\"add\">\n\t\t\t\tHAPI has a number of RESTful method parameter types that have similar but not identical\n\t\t\t\tpurposes and confusing names. A cleanup has been undertaken to clean this up.\n\t\t\t\tThis means that a number of existing classes\n\t\t\t\thave been deprocated in favour of new naming schemes.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll annotation-based clients and all server search method parameters are now named\n\t\t\t\t(type)Param, for example: StringParam, TokenParam, etc.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll generic/fluent client method parameters are now named\n\t\t\t\t(type)ClientParam, for example: StringClientParam, TokenClientParam, etc.\n\t\t\t\t<![CDATA[<br/><br/>]]>\n\t\t\t\tAll renamed classes have been retained and deprocated, so this change should not cause any issues\n\t\t\t\tfor existing applications but those applications should be refactored to use the\n\t\t\t\tnew parameters when possible.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow server methods to return wildcard generic types (e.g. List&lt;? extends IResource&gt;)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSearch parameters are not properly escaped and unescaped. E.g. for a token parameter such as\n\t\t\t\t\"&amp;identifier=system|codepart1\\|codepart2\"\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for OPTIONS verb (which returns the server conformance statement)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for CORS headers in server\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBump SLF4j dependency to latest version (1.7.7)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd interceptor framework for clients (annotation based and generic), and add interceptors\n\t\t\t\tfor configurable logging, capturing requests and responses, and HTTP basic auth.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tTransaction client invocations with XML encoding were using the wrong content type (\"application/xml+fhir\"\n\t\t\t\tinstead\n\t\t\t\tof the correct \"application/atom+xml\"). Thanks to David Hay of Orion Health for surfacing this one!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBundle entries now support a link type of \"search\". Thanks to David Hay for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"1\">\n\t\t\t\tIf a client receives a non 2xx response (e.g. HTTP 500) and the response body is a text/plain message or\n\t\t\t\tan OperationOutcome resource, include the message in the exception message so that it will be\n\t\t\t\tmore conveniently displayed in logs and other places. Thanks to Neal Acharya for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"add\" issue=\"2\">\n\t\t\t\tRead invocations in the client now process the \"Content-Location\" header and use it to\n\t\t\t\tpopulate the ID of the returned resource. Thanks to Neal Acharya for the suggestion!\n\t\t\t</action>\n\t\t\t<action type=\"fix\" issue=\"3\">\n\t\t\t\tFix issue where vread invocations on server incorrectly get routed to instance history method if one is\n\t\t\t\tdefined. Thanks to Neal Acharya from UHN for surfacing this one!\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tBinary reads on a server not include the Content-Disposition header, to prevent HTML in binary\n\t\t\t\tblobs from being used for nefarious purposes. See\n\t\t\t\t<![CDATA[<a href=\"http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=3298\">FHIR Tracker Bug 3298</a>]]>\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport has been added for using an HTTP proxy for outgoing requests.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix: Primitive extensions declared against custom resource types\n\t\t\t\tare encoded even if they have no value. Thanks to David Hay of Orion for\n\t\t\t\treporting this!\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tFix: RESTful server deployed to a location where the URL to access it contained a\n\t\t\t\tspace (e.g. a WAR file with a space in the name) failed to work correctly.\n\t\t\t\tThanks to David Hay of Orion for reporting this!\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.4\" date=\"2014-07-13\">\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>BREAKING CHANGE:</b>]]>: IdDt has been modified so that it\n\t\t\t\tcontains a partial or complete resource identity. Previously it contained\n\t\t\t\tonly the simple alphanumeric id of the resource (the part at the end of the \"read\" URL for\n\t\t\t\tthat resource) but it can now contain a complete URL or even a partial URL (e.g. \"Patient/123\")\n\t\t\t\tand can optionally contain a version (e.g. \"Patient/123/_history/456\"). New methods have\n\t\t\t\tbeen added to this datatype which provide just the numeric portion. See the JavaDoc\n\t\t\t\tfor more information.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\t<![CDATA[<b>API CHANGE:</b>]]>: Most elements in the HAPI FHIR model contain\n\t\t\t\ta getId() and setId() method. This method is confusing because it is only actually used\n\t\t\t\tfor IDREF elements (which are rare) but its name makes it easy to confuse with more\n\t\t\t\timportant identifiers. For this reason, these methods have been deprecated and replaced with\n\t\t\t\tget/setElementSpecificId() methods. The old methods will be removed at some point. Resource\n\t\t\t\ttypes are unchanged and retain their get/setId methods.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAllow use of QuantityDt as a service parameter to support the \"quantity\" type. Previously\n\t\t\t\tQuantityDt did not implement IQueryParameterType so it was not valid, and there was no way to\n\t\t\t\tsupport quantity search parameters on the server (e.g. Observation.value-quantity)\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tIntroduce StringParameter type which can be used as a RESTful operation search parameter\n\t\t\t\ttype. StringParameter allows \":exact\" matches to be specified in clients, and handled in servers.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tParsers (XML/JSON) now support deleted entries in bundles\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tTransaction method now supported in servers\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport for Binary resources added (in servers, clients, parsers, etc.)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tSupport for Query resources fixed (in parser)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tNested contained resources (e.g. encoding a resource with a contained resource that itself contains a\n\t\t\t\tresource)\n\t\t\t\tnow parse and encode correctly, meaning that all contained resources are placed in the \"contained\" element\n\t\t\t\tof the root resource, and the parser looks in the root resource for all container levels when stitching\n\t\t\t\tcontained resources back together.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer methods with @Include parameter would sometimes fail when no _include was actually\n\t\t\t\tspecified in query strings.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tClient requests for IdentifierDt types (such as Patient.identifier) did not create the correct\n\t\t\t\tquery string if the system is null.\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tAdd support for paging responses from RESTful servers.\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tDon't fail on narrative blocks in JSON resources with only an XML declaration but no content (these are\n\t\t\t\tproduced by the Health Intersections server)\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer now automatically compresses responses if the client indicates support\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tServer failed to support optional parameters when type is String and :exact qualifier is used\n\t\t\t</action>\n\t\t\t<action type=\"fix\">\n\t\t\t\tRead method in client correctly populated resource ID in returned object\n\t\t\t</action>\n\t\t\t<action type=\"add\">\n\t\t\t\tSupport added for deleted-entry by/name, by/email, and comment from Tombstones spec\n\t\t\t</action>\n\t\t</release>\n\t\t<release version=\"0.3\" date=\"2014-05-12\"\n\t\t\t\t\tdescription=\"This release corrects lots of bugs and introduces the fluent client mode\">\n\t\t</release>\n\t\t<release version=\"0.2\" date=\"2014-04-23\">\n\t\t</release>\n\t\t<release version=\"0.1\" date=\"2014-04-15\">\n\t\t</release>\n\t</body>\n</document>\n"], "filenames": ["hapi-fhir-testpage-overlay/src/main/java/ca/uhn/fhir/to/BaseController.java", "src/changes/changes.xml"], "buggy_code_start_loc": [35, 9], "buggy_code_end_loc": [748, 9], "fixing_code_start_loc": [34, 10], "fixing_code_end_loc": [764, 15], "type": "CWE-79", "message": "XSS exists in the HAPI FHIR testpage overlay module of the HAPI FHIR library before 3.8.0. The attack involves unsanitized HTTP parameters being output in a form page, allowing attackers to leak cookies and other sensitive information from ca/uhn/fhir/to/BaseController.java via a specially crafted URL. (This module is not generally used in production systems so the attack surface is expected to be low, but affected systems are recommended to upgrade immediately.)", "other": {"cve": {"id": "CVE-2019-12741", "sourceIdentifier": "cve@mitre.org", "published": "2019-06-05T15:29:01.873", "lastModified": "2019-06-06T12:50:39.883", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XSS exists in the HAPI FHIR testpage overlay module of the HAPI FHIR library before 3.8.0. The attack involves unsanitized HTTP parameters being output in a form page, allowing attackers to leak cookies and other sensitive information from ca/uhn/fhir/to/BaseController.java via a specially crafted URL. (This module is not generally used in production systems so the attack surface is expected to be low, but affected systems are recommended to upgrade immediately.)"}, {"lang": "es", "value": "Existe una vulnerabilidad de XSS en el m\u00f3dulo testpage overlay de HAPI FHIR de la biblioteca HAPI FHIR anterior a la versi\u00f3n 3.8.0. El ataque comprende la salida de par\u00e1metros HTTP no saneados en una p\u00e1gina de formulario, lo que permite a los atacantes filtrar cookies y otra informaci\u00f3n confidencial del  archivo ca/uhn/fhir/to/BaseController.java por medio de una URL especialmente creada. (Este m\u00f3dulo no se usa generalmente en los sistemas de producci\u00f3n, por lo que se espera que la superficie de ataque sea baja, pero para los sistemas afectados se recomienda que se actualicen inmediatamente)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fhir:hapi_fhir:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.8.0", "matchCriteriaId": "7AB29E8B-65EC-450A-AA69-FB3CA91C13DC"}]}]}], "references": [{"url": "https://github.com/jamesagnew/hapi-fhir/commit/8f41159eb147eeb964cad68b28eff97acac6ea9a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jamesagnew/hapi-fhir/issues/1335", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jamesagnew/hapi-fhir/releases/tag/v3.8.0", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jamesagnew/hapi-fhir/commit/8f41159eb147eeb964cad68b28eff97acac6ea9a"}}