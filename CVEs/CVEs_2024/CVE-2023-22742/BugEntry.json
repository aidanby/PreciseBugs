{"buggy_code": ["# libgit2: the cross-platform, linkable library implementation of git.\n# See `README.md` for build instructions.\n#\n# This top-level CMakeLists.txt sets up configuration options and\n# determines which subprojects to build.\n\ncmake_minimum_required(VERSION 3.5.1)\n\nproject(libgit2 VERSION \"1.5.0\" LANGUAGES C)\n\n# Add find modules to the path\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/cmake\")\n\n#\n# Build options\n#\n\n# Optional subsystems\noption(BUILD_SHARED_LIBS       \"Build Shared Library (OFF for Static)\"                  ON)\noption(BUILD_TESTS             \"Build Tests using the Clar suite\"                       ON)\noption(BUILD_CLI               \"Build the command-line interface\"                       ON)\noption(BUILD_EXAMPLES          \"Build library usage example apps\"                      OFF)\noption(BUILD_FUZZERS           \"Build the fuzz targets\"                                OFF)\n\n# Suggested functionality that may not be available on a per-platform basis\noption(USE_THREADS             \"Use threads for parallel processing when possible\"      ON)\noption(USE_NSEC                \"Support nanosecond precision file mtimes and ctimes\"    ON)\n\n# Backend selection\noption(USE_SSH                 \"Link with libssh2 to enable SSH support\"               OFF)\noption(USE_HTTPS               \"Enable HTTPS support. Can be set to a specific backend\" ON)\noption(USE_SHA1                \"Enable SHA1. Can be set to CollisionDetection(ON)/HTTPS\" ON)\noption(USE_SHA256              \"Enable SHA256. Can be set to HTTPS/Builtin\" ON)\noption(USE_GSSAPI              \"Link with libgssapi for SPNEGO auth\"      OFF)\n   set(USE_HTTP_PARSER         \"\" CACHE STRING \"Specifies the HTTP Parser implementation; either system or builtin.\")\n   set(REGEX_BACKEND           \"\" CACHE STRING \"Regular expression implementation. One of regcomp_l, pcre2, pcre, regcomp, or builtin.\")\noption(USE_BUNDLED_ZLIB        \"Use the bundled version of zlib. Can be set to one of Bundled(ON)/Chromium. The Chromium option requires a x86_64 processor with SSE4.2 and CLMUL\" OFF)\n\n# Debugging options\noption(USE_LEAK_CHECKER        \"Run tests with leak checker\"                           OFF)\noption(USE_STANDALONE_FUZZERS  \"Enable standalone fuzzers (compatible with gcc)\"       OFF)\noption(DEBUG_POOL              \"Enable debug pool allocator\"                           OFF)\noption(DEBUG_STRICT_ALLOC      \"Enable strict allocator behavior\"                      OFF)\noption(DEBUG_STRICT_OPEN       \"Enable path validation in open\"                        OFF)\n\n# Output options\noption(SONAME                  \"Set the (SO)VERSION of the target\"                      ON)\n   set(LIBGIT2_FILENAME        \"git2\" CACHE STRING \"Name of the produced binary\")\noption(DEPRECATE_HARD          \"Do not include deprecated functions in the library\"    OFF)\n\n# Compilation options\noption(ENABLE_WERROR           \"Enable compilation with -Werror\"                       OFF)\n\nif(UNIX)\n\t# NTLM client requires crypto libraries from the system HTTPS stack\n\tif(NOT USE_HTTPS)\n\t\toption(USE_NTLMCLIENT  \"Enable NTLM support on Unix.\"                  OFF)\n\telse()\n\t\toption(USE_NTLMCLIENT  \"Enable NTLM support on Unix.\"                   ON)\n\tendif()\n\n\toption(ENABLE_REPRODUCIBLE_BUILDS \"Enable reproducible builds\"                 OFF)\nendif()\n\nif(APPLE)\n\toption(USE_ICONV           \"Link with and use iconv library\"                    ON)\nendif()\n\nif(MSVC)\n\t# This option must match the settings used in your program, in particular if you\n\t# are linking statically\n\toption(STATIC_CRT          \"Link the static CRT libraries\"                      ON)\n\n\t# If you want to embed a copy of libssh2 into libgit2, pass a\n\t# path to libssh2\n\toption(EMBED_SSH_PATH      \"Path to libssh2 to embed (Windows)\"                OFF)\n\n\t# Enable leak checking using the debugging C runtime.\n\toption(WIN32_LEAKCHECK     \"Enable leak reporting via crtdbg\"                  OFF)\nendif()\n\nif(WIN32)\n\t# By default, libgit2 is built with WinHTTP.  To use the built-in\n\t# HTTP transport, invoke CMake with the \"-DUSE_WINHTTP=OFF\" argument.\n\toption(USE_WINHTTP         \"Use Win32 WinHTTP routines\"                         ON)\nendif()\n\nif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\n\n# Modules\n\ninclude(CheckLibraryExists)\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckStructHasMember)\ninclude(CheckPrototypeDefinition)\ninclude(AddCFlagIfSupported)\ninclude(FindPkgLibraries)\ninclude(FindThreads)\ninclude(FindStatNsec)\ninclude(Findfutimens)\ninclude(GNUInstallDirs)\ninclude(IdeSplitSources)\ninclude(FeatureSummary)\ninclude(EnableWarnings)\ninclude(DefaultCFlags)\n\n\n#\n# Subdirectories\n#\n\nadd_subdirectory(src)\n\nif(BUILD_TESTS)\n\tenable_testing()\n\tadd_subdirectory(tests)\nendif()\n\nif(BUILD_EXAMPLES)\n\tadd_subdirectory(examples)\nendif()\n\nif(BUILD_FUZZERS)\n\tif((BUILD_TESTS OR BUILD_EXAMPLES) AND NOT USE_STANDALONE_FUZZERS)\n\t\tmessage(FATAL_ERROR \"Cannot build the fuzzer and the tests or examples together\")\n\tendif()\n\tadd_subdirectory(fuzzers)\nendif()\n\n\n# Export for people who use us as a dependency\n\nif(NOT \"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_SOURCE_DIR}\")\n\tset(LIBGIT2_DEPENDENCY_OBJECTS ${LIBGIT2_DEPENDENCY_OBJECTS} PARENT_SCOPE)\n\tset(LIBGIT2_SYSTEM_LIBS ${LIBGIT2_SYSTEM_LIBS} PARENT_SCOPE)\nendif()\n\n\n# Summary\n\nfeature_summary(WHAT ENABLED_FEATURES DESCRIPTION \"Enabled features:\")\nfeature_summary(WHAT DISABLED_FEATURES DESCRIPTION \"Disabled features:\")\n", "#!/usr/bin/env bash\n\nset -e\n\nif [ -n \"$SKIP_TESTS\" ]; then\n\texit 0\nfi\n\n# Windows doesn't run the NTLM tests properly (yet)\nif [[ \"$(uname -s)\" == MINGW* ]]; then\n        SKIP_NTLM_TESTS=1\nfi\n\nSOURCE_DIR=${SOURCE_DIR:-$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && dirname $( pwd ) )}\nBUILD_DIR=$(pwd)\nTMPDIR=${TMPDIR:-/tmp}\nUSER=${USER:-$(whoami)}\n\nSUCCESS=1\nCONTINUE_ON_FAILURE=0\n\ncleanup() {\n\techo \"Cleaning up...\"\n\n\tif [ ! -z \"$GITDAEMON_PID\" ]; then\n\t\techo \"Stopping git daemon...\"\n\t\tkill $GITDAEMON_PID\n\tfi\n\n\tif [ ! -z \"$SSHD_DIR\" -a -f \"${SSHD_DIR}/pid\" ]; then\n\t\techo \"Stopping SSH...\"\n\t\tkill $(cat \"${SSHD_DIR}/pid\")\n\tfi\n\n\techo \"Done.\"\n}\n\nrun_test() {\n\tif [[ \"$GITTEST_FLAKY_RETRY\" > 0 ]]; then\n\t\tATTEMPTS_REMAIN=$GITTEST_FLAKY_RETRY\n\telse\n\t\tATTEMPTS_REMAIN=1\n\tfi\n\n\tFAILED=0\n\twhile [[ \"$ATTEMPTS_REMAIN\" > 0 ]]; do\n\t\tif [ \"$FAILED\" -eq 1 ]; then\n\t\t\techo \"\"\n\t\t\techo \"Re-running flaky ${1} tests...\"\n\t\t\techo \"\"\n\t\tfi\n\n\t\tRETURN_CODE=0\n\n\t\tCLAR_SUMMARY=\"${BUILD_DIR}/results_${1}.xml\" ctest -V -R \"^${1}$\" || RETURN_CODE=$? && true\n\n\t\tif [ \"$RETURN_CODE\" -eq 0 ]; then\n\t\t\tFAILED=0\n\t\t\tbreak\n\t\tfi\n\n\t\techo \"Test exited with code: $RETURN_CODE\"\n\t\tATTEMPTS_REMAIN=\"$(($ATTEMPTS_REMAIN-1))\"\n\t\tFAILED=1\n\tdone\n\n\tif [ \"$FAILED\" -ne 0 ]; then\n\t\tif [ \"$CONTINUE_ON_FAILURE\" -ne 1 ]; then\n\t\t\texit 1\n\t\tfi\n\n\t\tSUCCESS=0\n\tfi\n}\n\n# Configure the test environment; run them early so that we're certain\n# that they're started by the time we need them.\n\necho \"##############################################################################\"\necho \"## Configuring test environment\"\necho \"##############################################################################\"\n\nif [ -z \"$SKIP_GITDAEMON_TESTS\" ]; then\n\techo \"Starting git daemon...\"\n\tGITDAEMON_DIR=`mktemp -d ${TMPDIR}/gitdaemon.XXXXXXXX`\n\tgit init --bare \"${GITDAEMON_DIR}/test.git\" >/dev/null\n\tgit daemon --listen=localhost --export-all --enable=receive-pack --base-path=\"${GITDAEMON_DIR}\" \"${GITDAEMON_DIR}\" 2>/dev/null &\n\tGITDAEMON_PID=$!\n\tdisown $GITDAEMON_PID\nfi\n\nif [ -z \"$SKIP_PROXY_TESTS\" ]; then\n\tcurl --location --silent --show-error https://github.com/ethomson/poxyproxy/releases/download/v0.7.0/poxyproxy-0.7.0.jar >poxyproxy.jar\n\n\techo \"\"\n\techo \"Starting HTTP proxy (Basic)...\"\n\tjava -jar poxyproxy.jar --address 127.0.0.1 --port 8080 --credentials foo:bar --auth-type basic --quiet &\n\n\techo \"\"\n\techo \"Starting HTTP proxy (NTLM)...\"\n\tjava -jar poxyproxy.jar --address 127.0.0.1 --port 8090 --credentials foo:bar --auth-type ntlm --quiet &\nfi\n\nif [ -z \"$SKIP_NTLM_TESTS\" -o -z \"$SKIP_ONLINE_TESTS\" ]; then\n\tcurl --location --silent --show-error https://github.com/ethomson/poxygit/releases/download/v0.5.1/poxygit-0.5.1.jar >poxygit.jar\n\n\techo \"\"\n\techo \"Starting HTTP server...\"\n\tNTLM_DIR=`mktemp -d ${TMPDIR}/ntlm.XXXXXXXX`\n\tgit init --bare \"${NTLM_DIR}/test.git\"\n\tjava -jar poxygit.jar --address 127.0.0.1 --port 9000 --credentials foo:baz --quiet \"${NTLM_DIR}\" &\nfi\n\nif [ -z \"$SKIP_SSH_TESTS\" ]; then\n\techo \"\"\n\techo \"Starting ssh daemon...\"\n\tHOME=`mktemp -d ${TMPDIR}/home.XXXXXXXX`\n\tSSHD_DIR=`mktemp -d ${TMPDIR}/sshd.XXXXXXXX`\n\tgit init --bare \"${SSHD_DIR}/test.git\" >/dev/null\n\tcat >\"${SSHD_DIR}/sshd_config\" <<-EOF\n\tPort 2222\n\tListenAddress 0.0.0.0\n\tProtocol 2\n\tHostKey ${SSHD_DIR}/id_rsa\n\tPidFile ${SSHD_DIR}/pid\n\tAuthorizedKeysFile ${HOME}/.ssh/authorized_keys\n\tLogLevel DEBUG\n\tRSAAuthentication yes\n\tPasswordAuthentication yes\n\tPubkeyAuthentication yes\n\tChallengeResponseAuthentication no\n\tStrictModes no\n\t# Required here as sshd will simply close connection otherwise\n\tUsePAM no\n\tEOF\n\tssh-keygen -t rsa -f \"${SSHD_DIR}/id_rsa\" -N \"\" -q\n\t/usr/sbin/sshd -f \"${SSHD_DIR}/sshd_config\" -E \"${SSHD_DIR}/log\"\n\n\t# Set up keys\n\tmkdir \"${HOME}/.ssh\"\n\tssh-keygen -t rsa -f \"${HOME}/.ssh/id_rsa\" -N \"\" -q\n\tcat \"${HOME}/.ssh/id_rsa.pub\" >>\"${HOME}/.ssh/authorized_keys\"\n\twhile read algorithm key comment; do\n\t\techo \"[localhost]:2222 $algorithm $key\" >>\"${HOME}/.ssh/known_hosts\"\n\tdone <\"${SSHD_DIR}/id_rsa.pub\"\n\n\t# Get the fingerprint for localhost and remove the colons so we can\n\t# parse it as a hex number. Older versions have a different output\n\t# format.\n\tif [[ $(ssh -V 2>&1) == OpenSSH_6* ]]; then\n\t\tSSH_FINGERPRINT=$(ssh-keygen -F '[localhost]:2222' -f \"${HOME}/.ssh/known_hosts\" -l | tail -n 1 | cut -d ' ' -f 2 | tr -d ':')\n\telse\n\t\tSSH_FINGERPRINT=$(ssh-keygen -E md5 -F '[localhost]:2222' -f \"${HOME}/.ssh/known_hosts\" -l | tail -n 1 | cut -d ' ' -f 3 | cut -d : -f2- | tr -d :)\n\tfi\nfi\n\n# Run the tests that do not require network connectivity.\n\nif [ -z \"$SKIP_OFFLINE_TESTS\" ]; then\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running core tests\"\n\techo \"##############################################################################\"\n\n\techo \"\"\n\techo \"Running libgit2 integration (offline) tests\"\n\techo \"\"\n\trun_test offline\n\n\techo \"\"\n\techo \"Running utility tests\"\n\techo \"\"\n\trun_test util\nfi\n\nif [ -n \"$RUN_INVASIVE_TESTS\" ]; then\n\techo \"\"\n\techo \"Running invasive tests\"\n\techo \"\"\n\n\texport GITTEST_INVASIVE_FS_SIZE=1\n\texport GITTEST_INVASIVE_MEMORY=1\n\texport GITTEST_INVASIVE_SPEED=1\n\trun_test invasive\n\tunset GITTEST_INVASIVE_FS_SIZE\n\tunset GITTEST_INVASIVE_MEMORY\n\tunset GITTEST_INVASIVE_SPEED\nfi\n\nif [ -z \"$SKIP_ONLINE_TESTS\" ]; then\n\t# Run the online tests.  The \"online\" test suite only includes the\n\t# default online tests that do not require additional configuration.\n\t# The \"proxy\" and \"ssh\" test suites require further setup.\n\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running networking (online) tests\"\n\techo \"##############################################################################\"\n\n\texport GITTEST_REMOTE_REDIRECT_INITIAL=\"http://localhost:9000/initial-redirect/libgit2/TestGitRepository\"\n\texport GITTEST_REMOTE_REDIRECT_SUBSEQUENT=\"http://localhost:9000/subsequent-redirect/libgit2/TestGitRepository\"\n\trun_test online\n\tunset GITTEST_REMOTE_REDIRECT_INITIAL\n\tunset GITTEST_REMOTE_REDIRECT_SUBSEQUENT\n\n\t# Run the online tests that immutably change global state separately\n\t# to avoid polluting the test environment.\n\techo \"\"\n\techo \"Running custom certificate (online_customcert) tests\"\n\techo \"\"\n\n\trun_test online_customcert\nfi\n\nif [ -z \"$SKIP_GITDAEMON_TESTS\" ]; then\n\techo \"\"\n\techo \"Running gitdaemon tests\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"git://localhost/test.git\"\n\trun_test gitdaemon\n\tunset GITTEST_REMOTE_URL\nfi\n\nif [ -z \"$SKIP_PROXY_TESTS\" ]; then\n\techo \"\"\n\techo \"Running proxy tests (Basic authentication)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_PROXY_HOST=\"localhost:8080\"\n\texport GITTEST_REMOTE_PROXY_USER=\"foo\"\n\texport GITTEST_REMOTE_PROXY_PASS=\"bar\"\n\trun_test proxy\n\tunset GITTEST_REMOTE_PROXY_HOST\n\tunset GITTEST_REMOTE_PROXY_USER\n\tunset GITTEST_REMOTE_PROXY_PASS\n\n\techo \"\"\n\techo \"Running proxy tests (NTLM authentication)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_PROXY_HOST=\"localhost:8090\"\n\texport GITTEST_REMOTE_PROXY_USER=\"foo\"\n\texport GITTEST_REMOTE_PROXY_PASS=\"bar\"\n\trun_test proxy\n\tunset GITTEST_REMOTE_PROXY_HOST\n\tunset GITTEST_REMOTE_PROXY_USER\n\tunset GITTEST_REMOTE_PROXY_PASS\nfi\n\nif [ -z \"$SKIP_NTLM_TESTS\" ]; then\n\techo \"\"\n\techo \"Running NTLM tests (IIS emulation)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"http://localhost:9000/ntlm/test.git\"\n\texport GITTEST_REMOTE_USER=\"foo\"\n\texport GITTEST_REMOTE_PASS=\"baz\"\n\trun_test auth_clone_and_push\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_PASS\n\n\techo \"\"\n\techo \"Running NTLM tests (Apache emulation)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"http://localhost:9000/broken-ntlm/test.git\"\n\texport GITTEST_REMOTE_USER=\"foo\"\n\texport GITTEST_REMOTE_PASS=\"baz\"\n\trun_test auth_clone_and_push\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_PASS\nfi\n\nif [ -z \"$SKIP_NEGOTIATE_TESTS\" -a -n \"$GITTEST_NEGOTIATE_PASSWORD\" ]; then\n\techo \"\"\n\techo \"Running SPNEGO tests\"\n\techo \"\"\n\n\tif [ \"$(uname -s)\" = \"Darwin\" ]; then\n\t\tKINIT_FLAGS=\"--password-file=STDIN\"\n\tfi\n\n\techo $GITTEST_NEGOTIATE_PASSWORD | kinit $KINIT_FLAGS test@LIBGIT2.ORG\n\tklist -5f\n\n\texport GITTEST_REMOTE_URL=\"https://test.libgit2.org/kerberos/empty.git\"\n\texport GITTEST_REMOTE_DEFAULT=\"true\"\n\trun_test auth_clone\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_DEFAULT\n\n\techo \"\"\n\techo \"Running SPNEGO tests (expect/continue)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"https://test.libgit2.org/kerberos/empty.git\"\n\texport GITTEST_REMOTE_DEFAULT=\"true\"\n\texport GITTEST_REMOTE_EXPECTCONTINUE=\"true\"\n\trun_test auth_clone\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_DEFAULT\n\tunset GITTEST_REMOTE_EXPECTCONTINUE\n\n\tkdestroy -A\nfi\n\nif [ -z \"$SKIP_SSH_TESTS\" ]; then\n\texport GITTEST_REMOTE_USER=$USER\n\texport GITTEST_REMOTE_SSH_KEY=\"${HOME}/.ssh/id_rsa\"\n\texport GITTEST_REMOTE_SSH_PUBKEY=\"${HOME}/.ssh/id_rsa.pub\"\n\texport GITTEST_REMOTE_SSH_PASSPHRASE=\"\"\n\texport GITTEST_REMOTE_SSH_FINGERPRINT=\"${SSH_FINGERPRINT}\"\n\n\techo \"\"\n\techo \"Running ssh tests\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"ssh://localhost:2222/$SSHD_DIR/test.git\"\n\trun_test ssh\n\tunset GITTEST_REMOTE_URL\n\n\techo \"\"\n\techo \"Running ssh tests (scp-style paths)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"[localhost:2222]:$SSHD_DIR/test.git\"\n\trun_test ssh\n\tunset GITTEST_REMOTE_URL\n\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_SSH_KEY\n\tunset GITTEST_REMOTE_SSH_PUBKEY\n\tunset GITTEST_REMOTE_SSH_PASSPHRASE\n\tunset GITTEST_REMOTE_SSH_FINGERPRINT\nfi\n\nif [ -z \"$SKIP_FUZZERS\" ]; then\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running fuzzers\"\n\techo \"##############################################################################\"\n\n\tctest -V -R 'fuzzer'\nfi\n\ncleanup\n\nif [ \"$SUCCESS\" -ne 1 ]; then\n\techo \"Some tests failed.\"\n\texit 1\nfi\n\necho \"Success.\"\nexit 0\n", "v1.5\n----\n\nThis is release v1.5.0, \"Stubentiger\". This release adds the basis for an experimental CLI, continues preparing for SHA256 support, adds a benchmarking utility, and has numerous new features and bugfixes.\n\n## What's Changed\n### New features\n* The beginnings of a git-compatible CLI for testing and benchmarking by @ethomson in https://github.com/libgit2/libgit2/pull/6133\n* Add `clone` support to the CLI @ethomson in https://github.com/libgit2/libgit2/pull/6274\n* A benchmarking suite to compare libgit2 functionality against git by @ethomson in https://github.com/libgit2/libgit2/pull/6235\n* SHA256: add a SHA256 implementation backend by @ethomson in https://github.com/libgit2/libgit2/pull/6144\n* SHA256: support dynamically loaded openssl by @ethomson in https://github.com/libgit2/libgit2/pull/6258\n* Transport: introduce `git_transport_smart_remote_connect_options` by @lhchavez in https://github.com/libgit2/libgit2/pull/6278\n### Bug fixes\n* Free parent and ref in lg2_commit before returning. by @apnadkarni in https://github.com/libgit2/libgit2/pull/6219\n* xdiff: use xdl_free not free by @ethomson in https://github.com/libgit2/libgit2/pull/6223\n* remote: do store the update_tips callback error value by @carlosmn in https://github.com/libgit2/libgit2/pull/6226\n* win32: `find_system_dirs` does not return `GIT_ENOTFOUND` by @ethomson in https://github.com/libgit2/libgit2/pull/6228\n* Some minor fixes for issues discovered by coverity by @ethomson in https://github.com/libgit2/libgit2/pull/6238\n* Fix a string concatenation bug when validating extensions by @bierbaum in https://github.com/libgit2/libgit2/pull/6246\n* fetch: support OID refspec without dst by @ethomson in https://github.com/libgit2/libgit2/pull/6251\n* Fix crash when regenerating a patch with unquoted spaces in filename by @jorio in https://github.com/libgit2/libgit2/pull/6244\n* midx: Fix an undefined behavior (left-shift signed overflow) by @lhchavez in https://github.com/libgit2/libgit2/pull/6260\n* Validate repository directory ownership by @ethomson in https://github.com/libgit2/libgit2/pull/6266\n* midx: fix large offset table check. by @ccstolley in https://github.com/libgit2/libgit2/pull/6309\n* midx: do not verify the checksum on load by @carlosmn in https://github.com/libgit2/libgit2/pull/6291\n* revparse: Remove error-prone, redundant test by @dongcarl in https://github.com/libgit2/libgit2/pull/6299\n* refs: fix missing error message by @zawata in https://github.com/libgit2/libgit2/pull/6305\n* CLI: progress updates by @ethomson in https://github.com/libgit2/libgit2/pull/6319\n* A couple of simplications around mwindow by @carlosmn in https://github.com/libgit2/libgit2/pull/6288\n* config: update config entry iteration lifecycle by @ethomson in https://github.com/libgit2/libgit2/pull/6320\n* repo: allow administrator to own the configuration by @ethomson in https://github.com/libgit2/libgit2/pull/6321\n* filter: Fix Segfault by @zawata in https://github.com/libgit2/libgit2/pull/6303\n* ntlmclient: LibreSSL 3.5 removed HMAC_CTX_cleanup by @vishwin in https://github.com/libgit2/libgit2/pull/6340\n* Fix internal git_sysdir_find* function usage within public git_config_find* functions by @kcsaul in https://github.com/libgit2/libgit2/pull/6335\n* fix interactive rebase detect. by @i-tengfei in https://github.com/libgit2/libgit2/pull/6334\n* cmake: drop posix dependency from pcre* detection by @jpalus in https://github.com/libgit2/libgit2/pull/6333\n* Fix erroneously lax configuration ownership checks by @ethomson in https://github.com/libgit2/libgit2/pull/6341\n* pack: don't pretend we support pack files v3 by @ethomson in https://github.com/libgit2/libgit2/pull/6347\n* Fix creation of branches and tags with invalid names by @lya001 in https://github.com/libgit2/libgit2/pull/6348\n### Security fixes\n* Fixes for CVE 2022-29187 by @ethomson in https://github.com/libgit2/libgit2/pull/6349\n* zlib: update bundled zlib to v1.2.12 by @ethomson in https://github.com/libgit2/libgit2/pull/6350\n### Code cleanups\n* sha256: refactoring in preparation for sha256 by @ethomson in https://github.com/libgit2/libgit2/pull/6265\n* remote: Delete a now-inexistent API declaration by @lhchavez in https://github.com/libgit2/libgit2/pull/6276\n* Fix missing include by @cschlack in https://github.com/libgit2/libgit2/pull/6277\n### Build and CI improvements\n* meta: show build status for v1.3 and v1.4 branches by @ethomson in https://github.com/libgit2/libgit2/pull/6216\n* cmake: Fix package name for system http-parser by @mgorny in https://github.com/libgit2/libgit2/pull/6217\n* meta: update version number to v1.5.0-alpha by @ethomson in https://github.com/libgit2/libgit2/pull/6220\n* cmake: export libraries needed to compile against libgit2 by @ethomson in https://github.com/libgit2/libgit2/pull/6239\n* clone: update bitbucket tests by @ethomson in https://github.com/libgit2/libgit2/pull/6252\n* diff: don't stat empty file on arm32 (flaky test) by @ethomson in https://github.com/libgit2/libgit2/pull/6259\n* tests: support flaky stat by @ethomson in https://github.com/libgit2/libgit2/pull/6262\n* Include test results data in CI by @ethomson in https://github.com/libgit2/libgit2/pull/6306\n* Add a .clang-format with our style by @ethomson in https://github.com/libgit2/libgit2/pull/6023\n* CI: limits actions scheduled workflows to the main repo by @ethomson in https://github.com/libgit2/libgit2/pull/6342\n* ci: update dockerfiles for mbedTLS new url by @ethomson in https://github.com/libgit2/libgit2/pull/6343\n### Documentation improvements\n* Add Pharo to language bindings by @theseion in https://github.com/libgit2/libgit2/pull/6310\n* Add link to Tcl bindings for libgit2 by @apnadkarni in https://github.com/libgit2/libgit2/pull/6318\n* fix couple of typos by @SkinnyMind in https://github.com/libgit2/libgit2/pull/6287\n* update documentation for default status options by @ethomson in https://github.com/libgit2/libgit2/pull/6322\n\n## New Contributors\n* @bierbaum made their first contribution in https://github.com/libgit2/libgit2/pull/6246\n* @dongcarl made their first contribution in https://github.com/libgit2/libgit2/pull/6299\n* @SkinnyMind made their first contribution in https://github.com/libgit2/libgit2/pull/6287\n* @zawata made their first contribution in https://github.com/libgit2/libgit2/pull/6305\n* @vishwin made their first contribution in https://github.com/libgit2/libgit2/pull/6340\n* @i-tengfei made their first contribution in https://github.com/libgit2/libgit2/pull/6334\n* @jpalus made their first contribution in https://github.com/libgit2/libgit2/pull/6333\n* @lya001 made their first contribution in https://github.com/libgit2/libgit2/pull/6348\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.4.0...v1.5.0\n\nv1.4\n----\n\nThis is release v1.4.0, \"Fisematenten\".  This release includes several new features and bugfixes, improves compatibility with git, and begins preparation for SHA256 support in a future release.\n\n## What's Changed\n### New features\n* diff: update rename limit to 1000 to match git's behavior by @ethomson in https://github.com/libgit2/libgit2/pull/6092\n* odb: support checking for object existence without refresh by @joshtriplett in https://github.com/libgit2/libgit2/pull/6107\n* object: provide a low-level mechanism to validate whether a raw object is valid (`git_object_rawcontent_is_valid`) by @ethomson in https://github.com/libgit2/libgit2/pull/6128\n* blob: provide a function to identify binary content by @ethomson in https://github.com/libgit2/libgit2/pull/6142\n* status: add `rename_threshold` to `git_status_options`. by @arroz in https://github.com/libgit2/libgit2/pull/6158\n* remote: support `http.followRedirects` (`false` and `initial`) and follow initial redirects by default by @ethomson in https://github.com/libgit2/libgit2/pull/6175\n* remote: support scp style paths with ports (`[git@github.com:22]:libgit2/libgit2`) by @ethomson in https://github.com/libgit2/libgit2/pull/6167\n* win32: update git for windows configuration file location compatibility by @csware in https://github.com/libgit2/libgit2/pull/6151 and @ethomson in https://github.com/libgit2/libgit2/pull/6180\n* refs: speed up packed reference lookups when packed refs are sorted by @ccstolley in https://github.com/libgit2/libgit2/pull/6138\n* merge: support zdiff3 conflict styles by @ethomson in https://github.com/libgit2/libgit2/pull/6195\n* remote: support fetching by object id (using \"+oid:ref\" refspec syntax) by @ethomson in https://github.com/libgit2/libgit2/pull/6203\n* merge: callers can specify virtual-base building behavior and to optionally accept conflict markers as a resolution by @boretrk in https://github.com/libgit2/libgit2/pull/6204\n\n### Bug fixes\n* Fix a gcc 11 warning in src/threadstate.c by @lhchavez in https://github.com/libgit2/libgit2/pull/6115\n* Fix a gcc 11 warning in src/thread.h by @lhchavez in https://github.com/libgit2/libgit2/pull/6116\n* cmake: re-enable WinHTTP by @ethomson in https://github.com/libgit2/libgit2/pull/6120\n* Fix repo init when template dir is non-existent by @ammgws in https://github.com/libgit2/libgit2/pull/6106\n* cmake: use project-specific root variable instead of CMAKE_SOURCE_DIR by @Qix- in https://github.com/libgit2/libgit2/pull/6146\n* Better revparse compatibility for at time notation by @yoichi in https://github.com/libgit2/libgit2/pull/6095\n* remotes: fix insteadOf/pushInsteadOf handling by @mkhl in https://github.com/libgit2/libgit2/pull/6101\n* git_commit_summary: ignore lines with spaces by @stforek in https://github.com/libgit2/libgit2/pull/6125\n* Config parsing by @csware in https://github.com/libgit2/libgit2/pull/6124\n* config: handle empty conditional in includeIf by @ethomson in https://github.com/libgit2/libgit2/pull/6165\n* #6154 git_status_list_new case insensitive fix by @arroz in https://github.com/libgit2/libgit2/pull/6159\n* futils_mktmp: don't use umask by @boretrk in https://github.com/libgit2/libgit2/pull/6178\n* revparse: support bare '@' by @ethomson in https://github.com/libgit2/libgit2/pull/6196\n* odb: check for write failures by @ethomson in https://github.com/libgit2/libgit2/pull/6206\n* push: Prepare pack before sending pack header. by @ccstolley in https://github.com/libgit2/libgit2/pull/6205\n* mktmp: improve our temp file creation by @ethomson in https://github.com/libgit2/libgit2/pull/6207\n* diff_file: fix crash if size of diffed file changes in workdir by @jorio in https://github.com/libgit2/libgit2/pull/6208\n* merge: comment conflicts lines in MERGE_MSG by @ethomson in https://github.com/libgit2/libgit2/pull/6197\n* Fix crashes in example programs on Windows (sprintf_s not compatible with snprintf) by @apnadkarni in https://github.com/libgit2/libgit2/pull/6212\n\n### Code cleanups\n* Introduce `git_remote_connect_options` by @ethomson in https://github.com/libgit2/libgit2/pull/6161\n* hash: separate hashes and git_oid by @ethomson in https://github.com/libgit2/libgit2/pull/6082\n* `git_buf`: now a public-only API (`git_str` is our internal API) by @ethomson in https://github.com/libgit2/libgit2/pull/6078\n* cmake: cleanups and consistency by @ethomson in https://github.com/libgit2/libgit2/pull/6084\n* path: refactor utility path functions by @ethomson in https://github.com/libgit2/libgit2/pull/6104\n* str: git_str_free is never a function by @ethomson in https://github.com/libgit2/libgit2/pull/6111\n* cmake refactorings by @ethomson in https://github.com/libgit2/libgit2/pull/6112\n* Add missing-declarations warning globally by @ethomson in https://github.com/libgit2/libgit2/pull/6113\n* cmake: further refactorings by @ethomson in https://github.com/libgit2/libgit2/pull/6114\n* tag: set validity to 0 by default by @ethomson in https://github.com/libgit2/libgit2/pull/6119\n* util: minor cleanup and refactoring to the date class by @ethomson in https://github.com/libgit2/libgit2/pull/6121\n* Minor code cleanups by @ethomson in https://github.com/libgit2/libgit2/pull/6122\n* Fix a long long that crept past by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/6094\n* remote: refactor insteadof application by @ethomson in https://github.com/libgit2/libgit2/pull/6147\n* ntmlclient: fix linking with libressl by @boretrk in https://github.com/libgit2/libgit2/pull/6157\n* c99: change single bit flags to unsigned by @boretrk in https://github.com/libgit2/libgit2/pull/6179\n* Fix typos by @rex4539 in https://github.com/libgit2/libgit2/pull/6164\n* diff_driver: split global_drivers array into separate elements by @boretrk in https://github.com/libgit2/libgit2/pull/6184\n* cmake: disable some gnu extensions by @boretrk in https://github.com/libgit2/libgit2/pull/6185\n* Disabling setting `CMAKE_FIND_LIBRARY_SUFFIXES` on Apple platforms. by @arroz in https://github.com/libgit2/libgit2/pull/6153\n* C90: add inline macro to xdiff and mbedtls by @boretrk in https://github.com/libgit2/libgit2/pull/6200\n* SHA256: early preparation by @ethomson in https://github.com/libgit2/libgit2/pull/6192\n\n### CI improvements\n* tests: rename test runner to `libgit2_tests`, build option to `BUILD_TESTS`. by @ethomson in https://github.com/libgit2/libgit2/pull/6083\n* ci: only update docs on push by @ethomson in https://github.com/libgit2/libgit2/pull/6108\n* Pedantic header test by @boretrk in https://github.com/libgit2/libgit2/pull/6086\n* ci: build with ssh on nightly by @ethomson in https://github.com/libgit2/libgit2/pull/6148\n* ci: improve the name in CI runs by @ethomson in https://github.com/libgit2/libgit2/pull/6198\n\n### Documentation improvements\n* Document that `git_odb` is thread-safe by @joshtriplett in https://github.com/libgit2/libgit2/pull/6109\n* Improve documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/6168\n\n### Other changes\n* libgit2_clar is now libgit2_tests by @mkhl in https://github.com/libgit2/libgit2/pull/6100\n* Remove PSGit from Language Bindings section of README by @cestrand in https://github.com/libgit2/libgit2/pull/6150\n* COPYING: remove regex copyright, add PCRE copyright by @ethomson in https://github.com/libgit2/libgit2/pull/6187\n* meta: add a release configuration file by @ethomson in https://github.com/libgit2/libgit2/pull/6211\n\n## New Contributors\n* @mkhl made their first contribution in https://github.com/libgit2/libgit2/pull/6100\n* @ammgws made their first contribution in https://github.com/libgit2/libgit2/pull/6106\n* @yoichi made their first contribution in https://github.com/libgit2/libgit2/pull/6095\n* @stforek made their first contribution in https://github.com/libgit2/libgit2/pull/6125\n* @cestrand made their first contribution in https://github.com/libgit2/libgit2/pull/6150\n* @rex4539 made their first contribution in https://github.com/libgit2/libgit2/pull/6164\n* @jorio made their first contribution in https://github.com/libgit2/libgit2/pull/6208\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.3.0...v1.4.0\n\nv1.3\n----\n\nThis is release v1.3.0, \"Zugunruhe\".  This release includes only minor new features that will be helpful for users to have an orderly transition to the v2.0 lineage.\n\n## New Features\n* Support custom git extensions by @ethomson in https://github.com/libgit2/libgit2/pull/6031\n* Introduce `git_email_create`; deprecate `git_diff_format_email` by @ethomson in https://github.com/libgit2/libgit2/pull/6061\n\n## Deprecated APIs\n* `git_oidarray_free` is deprecated; callers should use `git_oidarray_dispose`\n\n## Bug fixes\n* #6028: Check if `threadstate->error_t.message` is not `git_buf__initbuf` before freeing. by @arroz in https://github.com/libgit2/libgit2/pull/6029\n* remote: Mark `git_remote_name_is_valid` as `GIT_EXTERN` by @lhchavez in https://github.com/libgit2/libgit2/pull/6032\n* Fix config parsing for multiline with multiple quoted comment chars by @basile-henry in https://github.com/libgit2/libgit2/pull/6043\n* indexer: Avoid one `mmap(2)`/`munmap(2)` pair per `git_indexer_append` call by @lhchavez in https://github.com/libgit2/libgit2/pull/6039\n* merge: Check file mode when resolving renames by @ccstolley in https://github.com/libgit2/libgit2/pull/6060\n* Allow proxy options when connecting with a detached remote. by @lrm29 in https://github.com/libgit2/libgit2/pull/6058\n* win32: allow empty environment variables by @ethomson in https://github.com/libgit2/libgit2/pull/6063\n* Fixes for deprecated APIs by @ethomson in https://github.com/libgit2/libgit2/pull/6066\n* filter: use a `git_oid` in filter options, not a pointer by @ethomson in https://github.com/libgit2/libgit2/pull/6067\n* diff: update `GIT_DIFF_IGNORE_BLANK_LINES` by @ethomson in https://github.com/libgit2/libgit2/pull/6068 \n* Attribute lookups are always on relative paths by @ethomson in https://github.com/libgit2/libgit2/pull/6073\n* Handle long paths when querying attributes by @ethomson in https://github.com/libgit2/libgit2/pull/6075\n\n## Code cleanups\n* notes: use a buffer internally by @ethomson in https://github.com/libgit2/libgit2/pull/6047\n* Fix coding style for pointer by @punkymaniac in https://github.com/libgit2/libgit2/pull/6045\n* Use __typeof__ GNUC keyword for ISO C compatibility by @duncanthomson in https://github.com/libgit2/libgit2/pull/6041\n* Discover libssh2 without pkg-config by @stac47 in https://github.com/libgit2/libgit2/pull/6053\n* Longpath filter bug by @lrm29 in https://github.com/libgit2/libgit2/pull/6055\n* Add test to ensure empty proxy env behaves like unset env by @sathieu in https://github.com/libgit2/libgit2/pull/6052\n* Stdint header condition has been reverted. by @lolgear in https://github.com/libgit2/libgit2/pull/6020\n* buf: `common_prefix` takes a string array by @ethomson in https://github.com/libgit2/libgit2/pull/6077\n* oidarray: introduce `git_oidarray_dispose` by @ethomson in https://github.com/libgit2/libgit2/pull/6076\n* examples: Free the git_config and git_config_entry after use by @257 in https://github.com/libgit2/libgit2/pull/6071\n\n## CI Improvements\n* ci: pull libssh2 from www.libssh2.org by @ethomson in https://github.com/libgit2/libgit2/pull/6064\n\n## Documentation changes\n* Update README.md by @shijinglu in https://github.com/libgit2/libgit2/pull/6050\n\n## New Contributors\n* @basile-henry made their first contribution in https://github.com/libgit2/libgit2/pull/6043\n* @duncanthomson made their first contribution in https://github.com/libgit2/libgit2/pull/6041\n* @stac47 made their first contribution in https://github.com/libgit2/libgit2/pull/6053\n* @shijinglu made their first contribution in https://github.com/libgit2/libgit2/pull/6050\n* @ccstolley made their first contribution in https://github.com/libgit2/libgit2/pull/6060\n* @sathieu made their first contribution in https://github.com/libgit2/libgit2/pull/6052\n* @257 made their first contribution in https://github.com/libgit2/libgit2/pull/6071\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.2.0...v1.3.0\n\n---------------------------------------------------------------------\n\nv1.2\n-----\n\nThis is release v1.2.0, \"Absacker\".  This release includes many new features: in particular, support for commit graphs, multi-pack indexes, and `core.longpaths` support.\n\nThis is meant to be the final minor release in the v1 lineage.  v2.0 will be the next major release and will remove deprecated APIs and may include breaking changes.\n\n## Deprecated APIs\n\n* revspec: rename git_revparse_mode_t to git_revspec_t by @ethomson in https://github.com/libgit2/libgit2/pull/5786\n* tree: deprecate `git_treebuilder_write_with_buffer` by @ethomson in https://github.com/libgit2/libgit2/pull/5815\n* Deprecate `is_valid_name` functions; replace with `name_is_valid` functions by @ethomson in https://github.com/libgit2/libgit2/pull/5659\n* filter: stop taking git_buf as user input by @ethomson in https://github.com/libgit2/libgit2/pull/5859\n* remote: introduce remote_ready_cb, deprecate resolve_url callback by @ethomson in https://github.com/libgit2/libgit2/pull/6012\n* Introduce `create_commit_cb`, deprecate `signing_cb` by @ethomson in https://github.com/libgit2/libgit2/pull/6016\n* filter: filter drivers stop taking git_buf as user input by @ethomson in https://github.com/libgit2/libgit2/pull/6011\n* buf: deprecate public git_buf writing functions by @ethomson in https://github.com/libgit2/libgit2/pull/6017\n\n## New features\n\n* winhttp: support optional client cert by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5384\n* Add support for additional SSH hostkey types. by @arroz in https://github.com/libgit2/libgit2/pull/5750\n* Handle ipv6 addresses by @ethomson in https://github.com/libgit2/libgit2/pull/5741\n* zlib: Add support for building with Chromium's zlib implementation by @lhchavez in https://github.com/libgit2/libgit2/pull/5748\n* commit-graph: Introduce a parser for commit-graph files by @lhchavez in https://github.com/libgit2/libgit2/pull/5762\n* patch: add owner accessor by @KOLANICH in https://github.com/libgit2/libgit2/pull/5731\n* commit-graph: Support lookups of entries in a commit-graph by @lhchavez in https://github.com/libgit2/libgit2/pull/5763\n* commit-graph: Introduce `git_commit_graph_needs_refresh()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5764\n* Working directory path validation by @ethomson in https://github.com/libgit2/libgit2/pull/5823\n* Support `core.longpaths` on Windows by @ethomson in https://github.com/libgit2/libgit2/pull/5857\n* git_reference_create_matching: Treat all-zero OID as \"must be absent\" by @novalis in https://github.com/libgit2/libgit2/pull/5842\n* diff:add option to ignore blank line changes by @yuuri in https://github.com/libgit2/libgit2/pull/5853\n* [Submodule] Git submodule dup by @lolgear in https://github.com/libgit2/libgit2/pull/5890\n* commit-graph: Use the commit-graph in revwalks by @lhchavez in https://github.com/libgit2/libgit2/pull/5765\n* commit-graph: Introduce `git_commit_list_generation_cmp` by @lhchavez in https://github.com/libgit2/libgit2/pull/5766\n* graph: Create `git_graph_reachable_from_any()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5767\n* Support reading attributes from a specific commit by @ethomson in https://github.com/libgit2/libgit2/pull/5952\n* [Branch] Branch upstream with format by @lolgear in https://github.com/libgit2/libgit2/pull/5861\n* Dynamically load OpenSSL (optionally) by @ethomson in https://github.com/libgit2/libgit2/pull/5974\n* Set refs/remotes/origin/HEAD to default branch when branch is specified by @A-Ovchinnikov-mx in https://github.com/libgit2/libgit2/pull/6010\n* midx: Add a way to write multi-pack-index files by @lhchavez in https://github.com/libgit2/libgit2/pull/5404\n* Use error code GIT_EAUTH for authentication failures by @josharian in https://github.com/libgit2/libgit2/pull/5395\n* midx: Introduce git_odb_write_multi_pack_index() by @lhchavez in https://github.com/libgit2/libgit2/pull/5405\n* Checkout dry-run by @J0Nes90 in https://github.com/libgit2/libgit2/pull/5841\n* mbedTLS: Fix setting certificate directory by @mikezackles in https://github.com/libgit2/libgit2/pull/6004\n* remote: introduce remote_ready_cb, deprecate resolve_url callback by @ethomson in https://github.com/libgit2/libgit2/pull/6012\n* Introduce `create_commit_cb`, deprecate `signing_cb` by @ethomson in https://github.com/libgit2/libgit2/pull/6016\n* commit-graph: Add a way to write commit-graph files by @lhchavez in https://github.com/libgit2/libgit2/pull/5778\n\n## Bug fixes\n\n* Define `git___load` when building with `-DTHREADSAFE=OFF` by @lhchavez in https://github.com/libgit2/libgit2/pull/5664\n* Make the Windows leak detection more robust by @lhchavez in https://github.com/libgit2/libgit2/pull/5661\n* Refactor \"global\" state by @ethomson in https://github.com/libgit2/libgit2/pull/5546\n* threadstate: rename tlsdata when building w/o threads by @ethomson in https://github.com/libgit2/libgit2/pull/5668\n* Include `${MBEDTLS_INCLUDE_DIR}` when compiling `crypt_mbedtls.c` by @staticfloat in https://github.com/libgit2/libgit2/pull/5685\n* Fix the `-DTHREADSAFE=OFF` build by @lhchavez in https://github.com/libgit2/libgit2/pull/5690\n* Add missing worktree_dir check and test case by @rbmclean in https://github.com/libgit2/libgit2/pull/5692\n* msvc crtdbg -> win32 leakcheck by @ethomson in https://github.com/libgit2/libgit2/pull/5580\n* Introduce GIT_ASSERT macros by @ethomson in https://github.com/libgit2/libgit2/pull/5327\n* Also add the raw hostkey to `git_cert_hostkey` by @lhchavez in https://github.com/libgit2/libgit2/pull/5704\n* Make the odb race-free by @lhchavez in https://github.com/libgit2/libgit2/pull/5595\n* Make the pack and mwindow implementations data-race-free by @lhchavez in https://github.com/libgit2/libgit2/pull/5593\n* Thread-free implementation by @ethomson in https://github.com/libgit2/libgit2/pull/5719\n* Thread-local storage: a generic internal library (with no allocations) by @ethomson in https://github.com/libgit2/libgit2/pull/5720\n* Friendlier getting started in the lack of git_libgit2_init by @ethomson in https://github.com/libgit2/libgit2/pull/5578\n* Make git__strntol64() ~70%* faster by @lhchavez in https://github.com/libgit2/libgit2/pull/5735\n* Cache the parsed submodule config when diffing by @lhchavez in https://github.com/libgit2/libgit2/pull/5727\n* pack: continue zlib while we can make progress by @ethomson in https://github.com/libgit2/libgit2/pull/5740\n* Avoid using `__builtin_mul_overflow` with the clang+32-bit combo by @lhchavez in https://github.com/libgit2/libgit2/pull/5742\n* repository: use intptr_t's in the config map cache by @ethomson in https://github.com/libgit2/libgit2/pull/5746\n* Build with NO_MMAP by @0xdky in https://github.com/libgit2/libgit2/pull/5583\n* Add documentation for git_blob_filter_options.version by @JoshuaS3 in https://github.com/libgit2/libgit2/pull/5759\n* blob: fix name of `GIT_BLOB_FILTER_ATTRIBUTES_FROM_HEAD` by @ethomson in https://github.com/libgit2/libgit2/pull/5760\n* Cope with empty default branch by @ethomson in https://github.com/libgit2/libgit2/pull/5770\n* README: instructions for using libgit2 without compiling by @ethomson in https://github.com/libgit2/libgit2/pull/5772\n* Use `p_pwrite`/`p_pread` consistently throughout the codebase by @lhchavez in https://github.com/libgit2/libgit2/pull/5769\n* midx: Fix a bug in `git_midx_needs_refresh()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5768\n* mwindow: Fix a bug in the LRU window finding code by @lhchavez in https://github.com/libgit2/libgit2/pull/5783\n* refdb_fs: Check git_sortedcache wlock/rlock errors by @mamapanda in https://github.com/libgit2/libgit2/pull/5800\n* index: Check git_vector_dup error in write_entries by @mamapanda in https://github.com/libgit2/libgit2/pull/5801\n* Fix documentation formating on repository.h by @punkymaniac in https://github.com/libgit2/libgit2/pull/5806\n* include: fix typos in comments by @tniessen in https://github.com/libgit2/libgit2/pull/5805\n* Fix some typos by @aaronfranke in https://github.com/libgit2/libgit2/pull/5797\n* Check git_signature_dup failure by @mamapanda in https://github.com/libgit2/libgit2/pull/5817\n* merge: Check insert_head_ids error in create_virtual_base by @mamapanda in https://github.com/libgit2/libgit2/pull/5818\n* winhttp: skip certificate check if unable to send request by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5814\n* Default to GIT_BRANCH_DEFAULT if init.defaultBranch is empty string by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5832\n* Fix diff_entrycount -> diff_num_deltas doc typo by @mjsir911 in https://github.com/libgit2/libgit2/pull/5838\n* repo: specify init.defaultbranch is meant to be a branch name by @carlosmn in https://github.com/libgit2/libgit2/pull/5835\n* repo: remove an inappropriate use of PASSTHROUGH by @carlosmn in https://github.com/libgit2/libgit2/pull/5834\n* src: fix typos in header files by @tniessen in https://github.com/libgit2/libgit2/pull/5843\n* test: clean up memory leaks by @ethomson in https://github.com/libgit2/libgit2/pull/5858\n* buf: remove unnecessary buf_text namespace by @ethomson in https://github.com/libgit2/libgit2/pull/5860\n* Fix bug in git_diff_find_similar. by @staktrace in https://github.com/libgit2/libgit2/pull/5839\n* Fix issues with Proxy Authentication after httpclient refactor by @implausible in https://github.com/libgit2/libgit2/pull/5852\n* tests: clean up memory leak, fail on leak for win32 by @ethomson in https://github.com/libgit2/libgit2/pull/5892\n* Tolerate readlink size less than st_size by @dtolnay in https://github.com/libgit2/libgit2/pull/5900\n* Define WINHTTP_NO_CLIENT_CERT_CONTEXT if needed by @jacquesg in https://github.com/libgit2/libgit2/pull/5929\n* Update from regex to pcre licensing information in docs/contributing.md by @boretrk in https://github.com/libgit2/libgit2/pull/5916\n* Consider files executable only if the user can execute them by @novalis in https://github.com/libgit2/libgit2/pull/5915\n* git__timer: Limit ITimer usage to AmigaOS4 by @boretrk in https://github.com/libgit2/libgit2/pull/5936\n* Fix memory leak in git_smart__connect by @punkymaniac in https://github.com/libgit2/libgit2/pull/5908\n* config: fix included configs not refreshed more than once by @Batchyx in https://github.com/libgit2/libgit2/pull/5926\n* Fix wrong time_t used in function by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5938\n* fix check for ignoring of negate rules by @palmin in https://github.com/libgit2/libgit2/pull/5824\n* Make `FIND_PACKAGE(PythonInterp)` prefer `python3` by @lhchavez in https://github.com/libgit2/libgit2/pull/5913\n* git__timer: Allow compilation on systems without CLOCK_MONOTONIC by @boretrk in https://github.com/libgit2/libgit2/pull/5945\n* stdintification: use int64_t and INT64_C instead of long long by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5941\n* Optional stricter allocation checking (for `malloc(0)` cases) by @ethomson in https://github.com/libgit2/libgit2/pull/5951\n* Variadic arguments aren't in C89 by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5948\n* Fix typo in general.c by @Crayon2000 in https://github.com/libgit2/libgit2/pull/5954\n* common.h: use inline when compiling for C99 and later by @boretrk in https://github.com/libgit2/libgit2/pull/5953\n* Fix one memory leak in master by @lhchavez in https://github.com/libgit2/libgit2/pull/5957\n* tests: reset odb backend priority by @ethomson in https://github.com/libgit2/libgit2/pull/5961\n* cmake: extended futimens checking on macOS by @ethomson in https://github.com/libgit2/libgit2/pull/5962\n* amiga: use ';' as path list separator on AmigaOS by @boretrk in https://github.com/libgit2/libgit2/pull/5978\n* Respect the force flag on refspecs in git_remote_fetch by @alexjg in https://github.com/libgit2/libgit2/pull/5854\n* Fix LIBGIT2_FILENAME not being passed to the resource compiler by @jairbubbles in https://github.com/libgit2/libgit2/pull/5994\n* sha1dc: remove conditional for <sys/types.h> by @boretrk in https://github.com/libgit2/libgit2/pull/5997\n* openssl: don't fail when we can't customize allocators by @ethomson in https://github.com/libgit2/libgit2/pull/5999\n* C11 warnings by @boretrk in https://github.com/libgit2/libgit2/pull/6005\n* open: input validation for empty segments in path by @boretrk in https://github.com/libgit2/libgit2/pull/5950\n* Introduce GIT_WARN_UNUSED_RESULT by @lhchavez in https://github.com/libgit2/libgit2/pull/5802\n* GCC C11 warnings by @boretrk in https://github.com/libgit2/libgit2/pull/6006\n* array: check dereference from void * type by @boretrk in https://github.com/libgit2/libgit2/pull/6007\n* Homogenize semantics for atomic-related functions by @lhchavez in https://github.com/libgit2/libgit2/pull/5747\n* git_array_alloc: return objects of correct type by @boretrk in https://github.com/libgit2/libgit2/pull/6008\n* CMake. hash sha1 header has been added. by @lolgear in https://github.com/libgit2/libgit2/pull/6013\n* tests: change comments to c89 style by @boretrk in https://github.com/libgit2/libgit2/pull/6015\n* Set Host Header to match CONNECT authority target by @lollipopman in https://github.com/libgit2/libgit2/pull/6022\n* Fix worktree iteration when repository has no common directory by @kcsaul in https://github.com/libgit2/libgit2/pull/5943\n\n## Documentation improvements\n\n* Update README.md for additional Delphi bindings by @todaysoftware in https://github.com/libgit2/libgit2/pull/5831\n* Fix documentation formatting by @punkymaniac in https://github.com/libgit2/libgit2/pull/5850\n* docs: fix incorrect comment marker by @tiennou in https://github.com/libgit2/libgit2/pull/5897\n* Patch documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/5903\n* Fix misleading doc for `git_index_find` by @arxanas in https://github.com/libgit2/libgit2/pull/5910\n* docs: stop mentioning libgit2's \"master\" branch by @Batchyx in https://github.com/libgit2/libgit2/pull/5925\n* docs: fix some missing includes that cause Docurium to error out by @tiennou in https://github.com/libgit2/libgit2/pull/5917\n* Patch documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/5940\n\n## Development improvements\n\n* WIP: .devcontainer: settings for a codespace workflow by @ethomson in https://github.com/libgit2/libgit2/pull/5508\n\n## CI Improvements\n\n* Add a ThreadSanitizer build by @lhchavez in https://github.com/libgit2/libgit2/pull/5597\n* ci: more GitHub Actions by @ethomson in https://github.com/libgit2/libgit2/pull/5706\n* ci: run coverity in the nightly builds by @ethomson in https://github.com/libgit2/libgit2/pull/5707\n* ci: only report main branch in README status by @ethomson in https://github.com/libgit2/libgit2/pull/5708\n* Fix the `ENABLE_WERROR=ON` build in Groovy Gorilla (gcc 10.2) by @lhchavez in https://github.com/libgit2/libgit2/pull/5715\n* Re-enable the RC4 test by @carlosmn in https://github.com/libgit2/libgit2/pull/4418\n* ci: run codeql by @ethomson in https://github.com/libgit2/libgit2/pull/5709\n* github-actions: Also rename the main branch here by @lhchavez in https://github.com/libgit2/libgit2/pull/5771\n* ci: don't use ninja on macOS by @ethomson in https://github.com/libgit2/libgit2/pull/5780\n* ci: use GitHub for storing mingw-w64 build dependency by @ethomson in https://github.com/libgit2/libgit2/pull/5855\n* docker: remove the entrypoint by @ethomson in https://github.com/libgit2/libgit2/pull/5980\n* http: don't require a password by @ethomson in https://github.com/libgit2/libgit2/pull/5972\n* ci: update nightly to use source path by @ethomson in https://github.com/libgit2/libgit2/pull/5989\n* ci: add centos 7 and centos 8 by @ethomson in https://github.com/libgit2/libgit2/pull/5992\n* ci: update centos builds by @ethomson in https://github.com/libgit2/libgit2/pull/5995\n* ci: tag new containers with the latest tag by @ethomson in https://github.com/libgit2/libgit2/pull/6000\n\n## Dependency updates\n\n* ntlm: [ntlmclient](https://github.com/ethomson/ntlmclient) is now v0.9.1\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.1.0...v1.2.0\n\n---------------------------------------------------------------------\n\nv1.1\n----\n\nThis is release v1.1, \"Fernweh\".\n\n### Changes or improvements\n\n* Our bundled PCRE dependency has been updated to 8.44.\n\n* The `refs/remotes/origin/HEAD` file will be created at clone time to\n  point to the origin's default branch.\n\n* libgit2 now uses the `__atomic_` intrinsics instead of `__sync_`\n  intrinsics on supported gcc and clang versions.\n\n* The `init.defaultBranch` setting is now respected and `master` is\n  no longer the hardcoded as the default branch name.\n\n* Patch files that do not contain an `index` line can now be parsed.\n\n* Configuration files with multi-line values can now contain quotes\n  split across multiple lines.\n\n* Windows clients now attempt to use TLS1.3 when available.\n\n* Servers that request an upgrade to a newer HTTP version are\n  silently ignored instead of erroneously failing.\n\n* Users can pass `NULL` to the options argument to\n  `git_describe_commit`.\n\n* Clones and fetches of very large packfiles now succeeds on 32-bit\n  platforms.\n\n* Custom reference database backends can now handle the repository's\n  `HEAD` correctly.\n\n* Repositories with a large number of packfiles no longer exhaust the\n  number of file descriptors.\n\n* The test framework now supports TAP output when the `-t` flag is\n  specified.\n\n* The test framework can now specify an exact match to a test\n  function using a trailing `$`.\n\n* All checkout types support `GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH`.\n\n* `git_blame` now can ignore whitespace changes using the option\n  `GIT_BLAME_IGNORE_WHITESPACE`.\n\n* Several new examples have been created, including an examples for\n  commit, add and push.\n\n* Mode changes during rename are now supported in patch application.\n\n* `git_checkout_head` now correctly removes untracked files in a\n  subdirectory when the `FORCE | REMOVE_UNTRACKED` options are specified.\n\nv1.0.1\n------\n\nThis is a bugfix release with the following changes:\n\n- Calculating information about renamed files during merges is more\n  efficient because dissimilarity about files is now being cached and\n  no longer needs to be recomputed.\n  \n- The `git_worktree_prune_init_options` has been correctly restored for\n  backward compatibility.  In v1.0 it was incorrectly deprecated with a\n  typo.\n\n- The optional ntlmclient dependency now supports NetBSD.\n\n- A bug where attempting to stash on a bare repository may have failed\n  has been fixed.\n\n- Configuration files that are unreadable due to permissions are now\n  silently ignored, and treated as if they do not exist.  This matches\n  git's behavior; previously this case would have been an error.\n\n- v4 index files are now correctly written; previously we would read\n  them correctly but would not write the prefix-compression accurately,\n  causing corruption.\n\n- A bug where the smart HTTP transport could not read large data packets\n  has been fixed.  Previously, fetching from servers like Gerrit, that\n  sent large data packets, would error.\n\n---------------------------------------------------------------------\n\nv1.0\n----\n\nThis is release v1.0 \"Luftschloss\", which is the first stabe release of\nlibgit2. The API will stay compatible across all releases of the same major\nversion. This release includes bugfixes only and supersedes v0.99, which will\nstop being maintained. Both v0.27 and v0.28 stay supported in accordance with\nour release policy.\n\n### Changes or improvements\n\n- CMake was converted to make use of the GNUInstallDirs module for both our\n  pkgconfig and install targets in favor of our custom build options\n  `BIN_INSTALL_DIR`, `LIB_INSTALL_DIR` and `INCLUDE_INSTALL_DIR`. Instead, you\n  can now use CMakes standard variables `CMAKE_INSTALL_BINDIR`,\n  `CMAKE_INSTALL_LIBDIR` and `CMAKE_INSTALL_INCLUDEDIR`.\n\n- Some CMake build options accepted either a specific value or a boolean value\n  to disable the option altogether or use automatic detection. We only accepted\n  \"ON\" or \"OFF\", but none of the other values CMake recognizes as boolean. This\n  was aligned with CMake's understanding of booleans.\n\n- The installed pkgconfig file contained incorrect values for both `libdir` and\n  `includedir` variables.\n\n- If using pcre2 for regular expressions, then we incorrectly added \"pcre2\"\n  instead of \"pcre2-8\" to our pkgconfig dependencies, which was corrected.\n\n- Fixed building the bundled ntlmclient dependency on FreeBSD, OpenBSD and\n  SunOS.\n\n- When writing symlinks on Windows, we incorrectly handled relative symlink\n  targets, which was corrected.\n\n- When using the HTTP protocol via macOS' SecureTransport implementation, reads\n  could stall at the end of the session and only continue after a timeout of 60\n  seconds was reached.\n\n- The filesystem-based reference callback didn't corectly initialize the backend\n  version.\n\n- A segmentation fault was fixed when calling `git_blame_buffer()` for files\n  that were modified and added to the index.\n\n- A backwards-incompatible change was introduced when we moved some structures\n  from \"git2/credentials.h\" into \"git2/sys/credentials.h\". This was fixed in the\n  case where you do not use hard deprecation.\n\n- Improved error handling in various places.\n\n\nv0.99\n-----\n\nThis is v0.99 \"Torschlusspanik\".  This will be the last minor release\nbefore libgit2 v1.0.  We expect to only respond to bugs in this release,\nto stabilize it for next major release.\n\nIt contains significant refactorings, but is expected to be API-compatible\nwith v0.28.0.\n\n### Changes or improvements\n\n* When fetching from an anonymous remote using a URL with authentication\n  information provided in the URL (eg `https://foo:bar@example.com/repo`),\n  we would erroneously include the literal URL in the FETCH_HEAD file.\n  We now remove that to match git's behavior.\n\n* Some credential structures, enums and values have been renamed:\n  `git_cred` is now `git_credential`.  `git_credtype_t` is now\n  `git_credential_t`.  Functions and types beginning with\n  `git_cred_` now begin with `git_credential`, and constants beginning\n  with `GIT_CREDTYPE` now begin with `GIT_CREDENTIAL`.  The former names\n  are deprecated.\n\n* Several function signatures have been changed to return an `int` to\n  indicate error conditions.  We encourage you to check them for errors\n  in the standard way. \n\n  * `git_attr_cache_flush`\n  * `git_error_set_str`\n  * `git_index_name_clear`\n  * `git_index_reuc_clear`\n  * `git_libgit2_version`\n  * `git_mempack_reset`\n  * `git_oid_cpy`\n  * `git_oid_fmt`\n  * `git_oid_fromraw`\n  * `git_oid_nfmt`\n  * `git_oid_pathfmt`\n  * `git_remote_stop`\n  * `git_remote_disconnect`\n  * `git_repository__cleanup`\n  * `git_repository_set_config`\n  * `git_repository_set_index`\n  * `git_repository_set_odb`\n  * `git_repository_set_refdb`\n  * `git_revwalk_reset`\n  * `git_revwalk_simplify_first_parent`\n  * `git_revwalk_sorting`\n  * `git_treebuilder_clear`\n  * `git_treebuilder_filter`\n\n* The NTLM and Negotiate authentication mechanisms are now supported when\n  talking to git implementations hosted on Apache or nginx servers.\n\n* The `HEAD` symbolic reference can no longer be deleted.\n\n* `git_merge_driver_source_repo` no longer returns a `const git_repository *`,\n  it now returns a non-`const` `git_repository *`.\n\n* Relative symbolic links are now supported on Windows when `core.symlinks`\n  is enabled.\n\n* Servers that provide query parameters with a redirect are now supported.\n\n* `git_submodule_sync` will now resolve relative URLs.\n\n* When creating git endpoint URLs, double-slashes are no longer used when\n  the given git URL has a trailing slash.\n\n* On Windows, a `DllMain` function is no longer included and thread-local\n  storage has moved to fiber-local storage in order to prevent race\n  conditions during shutdown.\n\n* The tracing mechanism (`GIT_TRACE`) is now enabled by default and does\n  not need to be explicitly enabled in CMake.\n\n* The size of Git objects is now represented by `git_object_size_t`\n  instead of `off_t`.\n\n* Binary patches without data can now be parsed.\n\n* A configuration snapshot can now be created from another configuration\n  snapshot, not just a \"true\" configuration object.\n\n* The `git_commit_with_signature` API will now ensure that referenced\n  objects exist in the object database.\n\n* Stash messages containing newlines will now be replaced with spaces;\n  they will no longer be (erroneously) written to the repository.\n\n* `git_commit_create_with_signature` now verifies the commit information\n  to ensure that it points to a valid tree and valid parents.\n\n* `git_apply` has an option `GIT_APPLY_CHECK` that will only do a dry-run.\n  The index and working directory will remain unmodified, and application\n  will report if it would have worked.\n\n* Patches produced by Mercurial (those that lack some git extended headers)\n  can now be parsed and applied.\n\n* Reference locks are obeyed correctly on POSIX platforms, instead of\n  being removed.\n\n* Patches with empty new files can now be read and applied.\n\n* `git_apply_to_tree` can now correctly apply patches that add new files.\n\n* The program data configuration on Windows (`C:\\ProgramData\\Git\\config`)\n  must be owned by an administrator, a system account or the current user\n  to be read.\n\n* `git_blob_filtered_content` is now deprecated in favor of `git_blob_filter`.\n\n* Configuration files can now be included conditionally using the\n  `onbranch` conditional.\n\n* Checkout can now properly create and remove symbolic links to directories\n  on Windows.\n\n* Stash no longer recomputes trees when committing a worktree, for\n  improved performance.\n\n* Repository templates can now include a `HEAD` file to default the\n  initial default branch.\n\n* Some configuration structures, enums and values have been renamed:\n  `git_cvar_map` is now `git_configmap`, `git_cvar_t` is now\n  `git_configmap_t`, `GIT_CVAR_FALSE` is now `GIT_CONFIGMAP_FALSE`,\n  `GIT_CVAR_TRUE` is now `GIT_CONFIGMAP_TRUE`, `GIT_CVAR_INT32` is now\n  `GIT_CONFIGMAP_INT32`, and `GIT_CVAR_STRING` is now `GIT_CONFIGMAP_STRING`.\n  The former names are deprecated.\n\n* Repositories can now be created at the root of a Windows drive.\n\n* Configuration lookups are now more efficiently cached.\n\n* `git_commit_create_with_signature` now supports a `NULL` signature,\n  which will create a commit without adding a signature.\n\n* When a repository lacks an `info` \"common directory\", we will no\n  longer erroneously return `GIT_ENOTFOUND` for all attribute lookups.\n\n* Several attribute macros have been renamed: `GIT_ATTR_TRUE` is now\n  `GIT_ATTR_IS_TRUE`, `GIT_ATTR_FALSE` is now `GIT_ATTR_IS_FALSE`,\n  `GIT_ATTR_UNSPECIFIED` is now `GIT_ATTR_IS_UNSPECIFIED`.  The \n  attribute enum `git_attr_t` is now `git_attr_value_t` and its\n  values have been renamed: `GIT_ATTR_UNSPECIFIED_T` is now\n  `GIT_ATTR_VALUE_UNSPECIFIED`, `GIT_ATTR_TRUE_T` is now\n  `GIT_ATTR_VALUE_TRUE`, `GIT_ATTR_FALSE_T` is now `GIT_ATTR_VALUE_FALSE`,\n  and `GIT_ATTR_VALUE_T` is now `GIT_ATTR_VALUE_STRING`.  The\n  former names are deprecated.\n\n* `git_object__size` is now `git_object_size`.  The former name is\n  deprecated.\n\n* `git_tag_create_frombuffer` is now `git_tag_create_from_buffer`.  The\n  former name is deprecated.\n\n* Several blob creation functions have been renamed:\n  `git_blob_create_frombuffer` is now named `git_blob_create_from_buffer`,\n  `git_blob_create_fromdisk` is now named `git_blob_create_from_disk`,\n  `git_blob_create_fromworkdir` is now named `git_blob_create_from_workdir`,\n  `git_blob_create_fromstream` is now named `git_blob_create_from_stream`,\n  and `git_blob_create_fromstream_commit` is now named\n  `git_blob_create_from_stream_commit`.  The former names are deprecated.\n\n* The function `git_oid_iszero` is now named `git_oid_is_zero`.  The\n  former name is deprecated.\n\n* Pattern matching is now done using `wildmatch` instead of `fnmatch`\n  for compatibility with git.\n\n* The option initialization functions suffixed by `init_options` are now\n  suffixed with `options_init`.  (For example, `git_checkout_init_options`\n  is now `git_checkout_options_init`.)  The former names are deprecated.\n\n* NTLM2 authentication is now supported on non-Windows platforms.\n\n* The `git_cred_sign_callback` callback is now named `git_cred_sign_cb`.\n  The `git_cred_ssh_interactive_callback` callback is now named\n  `git_cred_ssh_interactive_cb`.\n\n* Ignore files now:\n\n  * honor escaped trailing whitespace.\n  * do not incorrectly negate sibling paths of a negated pattern.\n  * honor rules that stop ignoring files after a wildcard\n\n* Attribute files now:\n\n  * honor leading and trailing whitespace.\n  * treat paths beginning with `\\` as absolute only on Windows.\n  * properly handle escaped characters.\n  * stop reading macros defined in subdirectories\n\n* The C locale is now correctly used when parsing regular expressions.\n\n* The system PCRE2 or PCRE regular expression libraries are now used\n  when `regcomp_l` is not available on the system.  If none of these\n  are available on the system, an included version of PCRE is used.\n\n* Wildcards in reference specifications are now supported beyond simply\n  a bare wildcard (`*`) for compatibility with git.\n\n* When `git_ignore_path_is_ignored` is provided a path with a trailing\n  slash (eg, `dir/`), it will now treat it as a directory for the\n  purposes of ignore matching.\n\n* Patches that add or remove a file with a space in the path can now\n  be correctly parsed.\n\n* The `git_remote_completion_type` type is now `git_remote_completion_t`.\n  The former name is deprecated.\n\n* The `git_odb_backend_malloc` is now `git_odb_backend_data_alloc`.  The\n  former name is deprecated.\n\n* The `git_transfer_progress_cb` callback is now `git_indexer_progress_cb`\n  and the `git_transfer_progress` structure is now `git_indexer_progress`.\n  The former names are deprecated.\n\n* The example projects are now contained in a single `lg2` executable\n  for ease of use.\n\n* libgit2 now correctly handles more URLs, such as\n  `http://example.com:/repo.git` (colon but no port),\n  `http://example.com` (no path),\n  and `http://example.com:8080/` (path is /, nonstandard port).\n\n* A carefully constructed commit object with a very large number\n  of parents may lead to potential out-of-bounds writes or\n  potential denial of service.\n\n* The ProgramData configuration file is always read for compatibility\n  with Git for Windows and Portable Git installations.  The ProgramData\n  location is not necessarily writable only by administrators, so we\n  now ensure that the configuration file is owned by the administrator\n  or the current user.\n\n### API additions\n\n* The SSH host key now supports SHA-256 when `GIT_CERT_SSH_SHA256` is set.\n\n* The diff format option `GIT_DIFF_FORMAT_PATCH_ID` can now be used to\n  emit an output like `git patch-id`.\n\n* The `git_apply_options_init` function will initialize a\n  `git_apply_options` structure.\n\n* The remote callbacks structure adds a `git_url_resolve_cb` callback\n  that is invoked when connecting to a server, so that applications\n  may edit or replace the URL before connection.\n\n* The information about the original `HEAD` in a rebase operation is\n  available with `git_rebase_orig_head_name`.  Its ID is available with\n  `git_rebase_orig_head_id`.  The `onto` reference name is available with\n  `git_rebase_onto_name` and its ID is available with `git_rebase_onto_id`.\n\n* ODB backends can now free backend data when an error occurs during its\n  backend data creation using `git_odb_backend_data_free`.\n\n* Options may be specified to `git_repository_foreach_head` to control\n  its behavior: `GIT_REPOSITORY_FOREACH_HEAD_SKIP_REPO` will not skip\n  the main repository's HEAD reference, while\n  `GIT_REPOSITORY_FOREACH_HEAD_SKIP_WORKTREES` will now skip the\n  worktree HEAD references.\n\n* The `GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS` option can be specified to\n  `git_libgit2_opts()` to avoid looking for `.keep` files that correspond\n  to packfiles.  This setting can improve performance when packfiles are\n  stored on high-latency filesystems like network filesystems.\n\n* Blobs can now be filtered with `git_blob_filter`, which allows for\n  options to be set with `git_blob_filter_options`, including\n  `GIT_FILTER_NO_SYSTEM_ATTRIBUTES` to disable filtering with system-level\n  attributes in `/etc/gitattributes` and `GIT_ATTR_CHECK_INCLUDE_HEAD` to\n  enable filtering with `.gitattributes` files in the HEAD revision.\n\n### API removals\n\n* The unused `git_headlist_cb` function declaration was removed.\n\n* The unused `git_time_monotonic` API is removed.\n\n* The erroneously exported `inttypes.h` header was removed.\n\n# Security Fixes\n\n- CVE-2019-1348: the fast-import stream command \"feature\n  export-marks=path\" allows writing to arbitrary file paths. As\n  libgit2 does not offer any interface for fast-import, it is not\n  susceptible to this vulnerability.\n\n- CVE-2019-1349: by using NTFS 8.3 short names, backslashes or\n  alternate filesystreams, it is possible to cause submodules to\n  be written into pre-existing directories during a recursive\n  clone using git. As libgit2 rejects cloning into non-empty\n  directories by default, it is not susceptible to this\n  vulnerability.\n\n- CVE-2019-1350: recursive clones may lead to arbitrary remote\n  code executing due to improper quoting of command line\n  arguments. As libgit2 uses libssh2, which does not require us\n  to perform command line parsing, it is not susceptible to this\n  vulnerability.\n\n- CVE-2019-1351: Windows provides the ability to substitute\n  drive letters with arbitrary letters, including multi-byte\n  Unicode letters. To fix any potential issues arising from\n  interpreting such paths as relative paths, we have extended\n  detection of DOS drive prefixes to accomodate for such cases.\n\n- CVE-2019-1352: by using NTFS-style alternative file streams for\n  the \".git\" directory, it is possible to overwrite parts of the\n  repository. While this has been fixed in the past for Windows,\n  the same vulnerability may also exist on other systems that\n  write to NTFS filesystems. We now reject any paths starting\n  with \".git:\" on all systems.\n\n- CVE-2019-1353: by using NTFS-style 8.3 short names, it was\n  possible to write to the \".git\" directory and thus overwrite\n  parts of the repository, leading to possible remote code\n  execution. While this problem was already fixed in the past for\n  Windows, other systems accessing NTFS filesystems are\n  vulnerable to this issue too. We now enable NTFS protecions by\n  default on all systems to fix this attack vector.\n\n- CVE-2019-1354: on Windows, backslashes are not a valid part of\n  a filename but are instead interpreted as directory separators.\n  As other platforms allowed to use such paths, it was possible\n  to write such invalid entries into a Git repository and was\n  thus an attack vector to write into the \".git\" dierctory. We\n  now reject any entries starting with \".git\\\" on all systems.\n\n- CVE-2019-1387: it is possible to let a submodule's git\n  directory point into a sibling's submodule directory, which may\n  result in overwriting parts of the Git repository and thus lead\n  to arbitrary command execution. As libgit2 doesn't provide any\n  way to do submodule clones natively, it is not susceptible to\n  this vulnerability. Users of libgit2 that have implemented\n  recursive submodule clones manually are encouraged to review\n  their implementation for this vulnerability.\n\n### Breaking API changes\n\n* The \"private\" implementation details of the `git_cred` structure have been\n  moved to a dedicated `git2/sys/cred.h` header, to clarify that the underlying\n  structures are only provided for custom transport implementers.\n  The breaking change is that the `username` member of the underlying struct\n  is now hidden, and a new `git_cred_get_username` function has been provided.\n\n* Some errors of class `GIT_ERROR_NET` now have class `GIT_ERROR_HTTP`.\n  Most authentication failures now have error code `GIT_EAUTH` instead of `GIT_ERROR`.\n\n### Breaking CMake configuration changes\n\n* The CMake option to use a system http-parser library, instead of the\n  bundled dependency, has changed.  This is due to a deficiency in\n  http-parser that we have fixed in our implementation.  The bundled\n  library is now the default, but if you wish to force the use of the\n  system http-parser implementation despite incompatibilities, you can\n  specify `-DUSE_HTTP_PARSER=system` to CMake.\n\n* The interactions between `USE_HTTPS` and `SHA1_BACKEND` have been\n  streamlined. The detection was moved to a new `USE_SHA1`, modeled after\n  `USE_HTTPS`, which takes the values \"CollisionDetection/Backend/Generic\", to\n  better match how the \"hashing backend\" is selected, the default (ON) being\n  \"CollisionDetection\". If you were using `SHA1_BACKEND` previously, you'll\n  need to check the value you've used, or switch to the autodetection.\n\n### Authors\n\nThe following individuals provided changes that were included in this\nrelease:\n\n* Aaron Patterson\n* Alberto Fanjul\n* Anders Borum\n* Augie Fackler\n* Augustin Fabre\n* Ayush Shridhar\n* brian m. carlson\n* buddyspike\n* Carlos Mart\u00edn Nieto\n* cheese1\n* Dan Skorupski\n* Daniel Cohen Gindi\n* Dave Lee\n* David Brooks\n* David Turner\n* Denis Laxalde\n* Dhruva Krishnamurthy\n* Dominik Ritter\n* Drew DeVault\n* Edward Thomson\n* Eric Huss\n* Erik Aigner\n* Etienne Samson\n* Gregory Herrero\n* Heiko Voigt\n* Ian Hattendorf\n* Jacques Germishuys\n* Janardhan Pulivarthi\n* Jason Haslam\n* Johannes Schindelin\n* Jordan Wallet\n* Josh Bleecher Snyder\n* kas\n* kdj0c\n* Laurence McGlashan\n* lhchavez\n* Lukas Berk\n* Max Kostyukevich\n* Patrick Steinhardt\n* pcpthm\n* Remy Suen\n* Robert Coup\n* romkatv\n* Scott Furry\n* Sebastian Henke\n* Stefan Widgren\n* Steve King Jr\n* Sven Strickroth\n* Tobias Nie\u00dfen\n* Tyler Ang-Wanek\n* Tyler Wanek\n\n---------------------------------------------------------------------\n\nv0.28\n-----\n\n### Changes or improvements\n\n* The library is now always built with cdecl calling conventions on\n  Windows; the ability to build a stdcall library has been removed.\n\n* Reference log creation now honors `core.logallrefupdates=always`.\n\n* Fix some issues with the error-reporting in the OpenSSL backend.\n\n* HTTP proxy support is now builtin; libcurl is no longer used to support\n  proxies and is removed as a dependency.\n\n* Certificate and credential callbacks can now return `GIT_PASSTHROUGH`\n  to decline to act; libgit2 will behave as if there was no callback set\n  in the first place.\n\n* The line-ending filtering logic - when checking out files - has been\n  updated to match newer git (>= git 2.9) for proper interoperability.\n\n* Symbolic links are now supported on Windows when `core.symlinks` is set\n  to `true`.\n\n* Submodules with names which attempt to perform path traversal now have their\n  configuration ignored. Such names were blindly appended to the\n  `$GIT_DIR/modules` and a malicious name could lead to an attacker writing to\n  an arbitrary location. This matches git's handling of CVE-2018-11235.\n\n* Object validation is now performed during tree creation in the\n  `git_index_write_tree_to` API.\n\n* Configuration variable may now be specified on the same line as a section\n  header; previously this was erroneously a parser error.\n\n* When an HTTP server supports both NTLM and Negotiate authentication\n  mechanisms, we would previously fail to authenticate with any mechanism.\n\n* The `GIT_OPT_SET_PACK_MAX_OBJECTS` option can now set the maximum\n  number of objects allowed in a packfile being downloaded; this can help\n  limit the maximum memory used when fetching from an untrusted remote.\n\n* Line numbers in diffs loaded from patch files were not being populated;\n  they are now included in the results.\n\n* The repository's index is reloaded from disk at the beginning of\n  `git_merge` operations to ensure that it is up-to-date.\n\n* Mailmap handling APIs have been introduced, and the new commit APIs\n  `git_commit_committer_with_mailmap` and `git_commit_author_with_mailmap`\n  will use the mailmap to resolve the committer and author information.\n  In addition, blame will use the mailmap given when the\n  `GIT_BLAME_USE_MAILMAP` option.\n\n* Ignore handling for files in ignored folders would be ignored.\n\n* Worktrees can now be backed by bare repositories.\n\n* Trailing spaces are supported in `.gitignore` files, these spaces were\n  previously (and erroneously) treated as part of the pattern.\n\n* The library can now be built with mbedTLS support for HTTPS.\n\n* The diff status character 'T' will now be presented by the\n  `git_diff_status_char` API for diff entries that change type.\n\n* Revision walks previously would sometimes include commits that should\n  have been ignored; this is corrected.\n\n* Revision walks are now more efficient when the output is unsorted;\n  we now avoid walking all the way to the beginning of history unnecessarily.\n\n* Error-handling around index extension loading has been fixed. We were\n  previously always misreporting a truncated index (#4858).\n\n### API additions\n\n* The index may now be iterated atomically using `git_index_iterator`.\n\n* Remote objects can now be created with extended options using the\n  `git_remote_create_with_opts` API.\n\n* Diff objects can now be applied as changes to the working directory,\n  index or both, emulating the `git apply` command.  Additionally,\n  `git_apply_to_tree` can apply those changes to a tree object as a\n  fully in-memory operation.\n\n* You can now swap out memory allocators via the\n  `GIT_OPT_SET_ALLOCATOR` option with `git_libgit2_opts()`.\n\n* You can now ensure that functions do not discard unwritten changes to the\n  index via the `GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY` option to\n  `git_libgit2_opts()`.  This will cause functions that implicitly re-read\n  the index (eg, `git_checkout`) to fail if you have staged changes to the\n  index but you have not written the index to disk.  (Unless the checkout\n  has the FORCE flag specified.)\n\n  At present, this defaults to off, but we intend to enable this more\n  broadly in the future, as a warning or error.  We encourage you to\n  examine your code to ensure that you are not relying on the current\n  behavior that implicitly removes staged changes.\n\n* Reference specifications can be parsed from an arbitrary string with\n  the `git_refspec_parse` API.\n\n* You can now get the name and path of worktrees using the\n  `git_worktree_name` and `git_worktree_path` APIs, respectively.\n\n* The `ref` field has been added to `git_worktree_add_options` to enable\n  the creation of a worktree from a pre-existing branch.\n\n* It's now possible to analyze merge relationships between any two\n  references, not just against `HEAD`, using `git_merge_analysis_for_ref`.\n\n### API removals\n\n* The `git_buf_free` API is deprecated; it has been renamed to\n  `git_buf_dispose` for consistency.  The `git_buf_free` API will be\n  retained for backward compatibility for the foreseeable future.\n\n* The `git_otype` enumeration and its members are deprecated and have\n  been renamed for consistency.  The `GIT_OBJ_` enumeration values are\n  now prefixed with `GIT_OBJECT_`.  The old enumerations and macros\n  will be retained for backward compatibility for the foreseeable future.\n\n* Several index-related APIs have been renamed for consistency.  The\n  `GIT_IDXENTRY_` enumeration values and macros have been renamed to\n  be prefixed with `GIT_INDEX_ENTRY_`.  The `GIT_INDEXCAP` enumeration\n  values are now prefixed with `GIT_INDEX_CAPABILITY_`.  The old\n  enumerations and macros will be retained for backward compatibility\n  for the foreseeable future.\n\n* The error functions and enumeration values have been renamed for\n  consistency.  The `giterr_` functions and values prefix have been\n  renamed to be prefixed with `git_error_`; similarly, the `GITERR_`\n  constants have been renamed to be prefixed with `GIT_ERROR_`.\n  The old enumerations and macros will be retained for backward\n  compatibility for the foreseeable future.\n\n### Breaking API changes\n\n* The default checkout strategy changed from `DRY_RUN` to `SAFE` (#4531).\n\n* Adding a symlink as .gitmodules into the index from the workdir or checking\n  out such files is not allowed as this can make a Git implementation write\n  outside of the repository and bypass the fsck checks for CVE-2018-11235.\n\n---------------------------------------------------------------------\n\nv0.27\n---------\n\n### Changes or improvements\n\n* Improved `p_unlink` in `posix_w32.c` to try and make a file writable\n  before sleeping in the retry loop to prevent unnecessary calls to sleep.\n\n* The CMake build infrastructure has been improved to speed up building time.\n\n* A new CMake option \"-DUSE_HTTPS=<backend>\" makes it possible to explicitly\n  choose an HTTP backend.\n\n* A new CMake option \"-DSHA1_BACKEND=<backend>\" makes it possible to explicitly\n  choose an SHA1 backend. The collision-detecting backend is now the default.\n\n* A new CMake option \"-DUSE_BUNDLED_ZLIB\" makes it possible to explicitly use\n  the bundled zlib library.\n\n* A new CMake option \"-DENABLE_REPRODUCIBLE_BUILDS\" makes it possible to\n  generate a reproducible static archive. This requires support from your\n  toolchain.\n\n* The minimum required CMake version has been bumped to 2.8.11.\n\n* Writing to a configuration file now preserves the case of the key given by the\n  caller for the case-insensitive portions of the key (existing sections are\n  used even if they don't match).\n\n* We now support conditional includes in configuration files.\n\n* Fix for handling re-reading of configuration files with includes.\n\n* Fix for reading patches which contain exact renames only.\n\n* Fix for reading patches with whitespace in the compared files' paths.\n\n* We will now fill `FETCH_HEAD` from all passed refspecs instead of overwriting\n  with the last one.\n\n* There is a new diff option, `GIT_DIFF_INDENT_HEURISTIC` which activates a\n  heuristic which takes into account whitespace and indentation in order to\n  produce better diffs when dealing with ambiguous diff hunks.\n\n* Fix for pattern-based ignore rules where files ignored by a rule cannot be\n  un-ignored by another rule.\n\n* Sockets opened by libgit2 are now being closed on exec(3) if the platform\n  supports it.\n\n* Fix for peeling annotated tags from packed-refs files.\n\n* Fix reading huge loose objects from the object database.\n\n* Fix files not being treated as modified when only the file mode has changed.\n\n* We now explicitly reject adding submodules to the index via\n  `git_index_add_frombuffer`.\n\n* Fix handling of `GIT_DIFF_FIND_RENAMES_FROM_REWRITES` raising `SIGABRT` when\n  one file has been deleted and another file has been rewritten.\n\n* Fix for WinHTTP not properly handling NTLM and Negotiate challenges.\n\n* When using SSH-based transports, we now repeatedly ask for the passphrase to\n  decrypt the private key in case a wrong passphrase is being provided.\n\n* When generating conflict markers, they will now use the same line endings as\n  the rest of the file.\n\n### API additions\n\n* The `git_merge_file_options` structure now contains a new setting,\n  `marker_size`.  This allows users to set the size of markers that\n  delineate the sides of merged files in the output conflict file.\n  By default this is 7 (`GIT_MERGE_CONFLICT_MARKER_SIZE`), which\n  produces output markers like `<<<<<<<` and `>>>>>>>`.\n\n* `git_remote_create_detached()` creates a remote that is not associated\n  to any repository (and does not apply configuration like 'insteadof' rules).\n  This is mostly useful for e.g. emulating `git ls-remote` behavior.\n\n* `git_diff_patchid()` lets you generate patch IDs for diffs.\n\n* `git_status_options` now has an additional field `baseline` to allow creating\n  status lists against different trees.\n\n* New family of functions to allow creating notes for a specific notes commit\n  instead of for a notes reference.\n\n* New family of functions to allow parsing message trailers. This API is still\n  experimental and may change in future releases.\n\n### API removals\n\n### Breaking API changes\n\n* Signatures now distinguish between +0000 and -0000 UTC offsets.\n\n* The certificate check callback in the WinHTTP transport will now receive the\n  `message_cb_payload` instead of the `cred_acquire_payload`.\n\n* We are now reading symlinked directories under .git/refs.\n\n* We now refuse creating branches named \"HEAD\".\n\n* We now refuse reading and writing all-zero object IDs into the\n  object database.\n\n* We now read the effective user's configuration file instead of the real user's\n  configuration in case libgit2 runs as part of a setuid binary.\n\n* The `git_odb_open_rstream` function and its `readstream` callback in the\n  `git_odb_backend` interface have changed their signatures to allow providing\n  the object's size and type to the caller.\n\n---------------------------------------------------------------------\n    \nv0.26\n-----\n\n### Changes or improvements\n\n* Support for opening, creating and modifying worktrees.\n\n* We can now detect SHA1 collisions resulting from the SHAttered attack. These\n  checks can be enabled at build time via `-DUSE_SHA1DC`.\n\n* Fix for missing implementation of `git_merge_driver_source` getters.\n\n* Fix for installed pkg-config file being broken when the prefix contains\n  spaces.\n\n* We now detect when the hashsum of on-disk objects does not match their\n  expected hashsum.\n\n* We now support open-ended ranges (e.g. \"master..\", \"...master\") in our\n  revision range parsing code.\n\n* We now correctly compute ignores with leading \"/\" in subdirectories.\n\n* We now optionally call `fsync` on loose objects, packfiles and their indexes,\n  loose references and packed reference files.\n\n* We can now build against OpenSSL v1.1 and against LibreSSL.\n\n* `GIT_MERGE_OPTIONS_INIT` now includes a setting to perform rename detection.\n  This aligns this structure with the default by `git_merge` and\n  `git_merge_trees` when `NULL` was provided for the options.\n\n* Improvements for reading index v4 files.\n\n* Perform additional retries for filesystem operations on Windows when files\n  are temporarily locked by other processes.\n\n### API additions\n\n* New family of functions to handle worktrees:\n\n    * `git_worktree_list()` lets you look up worktrees for a repository.\n    * `git_worktree_lookup()` lets you get a specific worktree.\n    * `git_worktree_open_from_repository()` lets you get the associated worktree\n      of a repository.\n      a worktree.\n    * `git_worktree_add` lets you create new worktrees.\n    * `git_worktree_prune` lets you remove worktrees from disk.\n    * `git_worktree_lock()` and `git_worktree_unlock()` let you lock\n      respectively unlock a worktree.\n    * `git_repository_open_from_worktree()` lets you open a repository via\n    * `git_repository_head_for_worktree()` lets you get the current `HEAD` for a\n      linked worktree.\n    * `git_repository_head_detached_for_worktree()` lets you check whether a\n      linked worktree is in detached HEAD mode.\n\n* `git_repository_item_path()` lets you retrieve paths for various repository\n  files.\n\n* `git_repository_commondir()` lets you retrieve the common directory of a\n  repository.\n\n* `git_branch_is_checked_out()` allows you to check whether a branch is checked\n  out in a repository or any of its worktrees.\n\n* `git_repository_submodule_cache_all()` and\n  `git_repository_submodule_cache_clear()` functions allow you to prime or clear\n  the submodule cache of a repository.\n\n* You can disable strict hash verifications via the\n  `GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION` option with `git_libgit2_opts()`.\n\n* You can enable us calling `fsync` for various files inside the \".git\"\n  directory by setting the `GIT_OPT_ENABLE_FSYNC_GITDIR` option with\n  `git_libgit2_opts()`.\n\n* You can now enable \"offset deltas\" when creating packfiles and negotiating\n  packfiles with a remote server by setting `GIT_OPT_ENABLE_OFS_DELTA` option\n  with `GIT_libgit2_opts()`.\n\n* You can now set the default share mode on Windows for opening files using\n  `GIT_OPT_SET_WINDOWS_SHAREMODE` option with `git_libgit2_opts()`.\n  You can query the current share mode with `GIT_OPT_GET_WINDOWS_SHAREMODE`.\n\n* `git_transport_smart_proxy_options()' enables you to get the proxy options for\n  smart transports.\n\n* The `GIT_FILTER_INIT` macro and the `git_filter_init` function are provided\n  to initialize a `git_filter` structure.\n\n### Breaking API changes\n\n* `clone_checkout_strategy` has been removed from\n  `git_submodule_update_option`. The checkout strategy used to clone will\n  be the same strategy specified in `checkout_opts`.\n\nv0.25\n-------\n\n### Changes or improvements\n\n* Fix repository discovery with `git_repository_discover` and\n  `git_repository_open_ext` to match git's handling of a ceiling\n  directory at the current directory. git only checks ceiling\n  directories when its search ascends to a parent directory.  A ceiling\n  directory matching the starting directory will not prevent git from\n  finding a repository in the starting directory or a parent directory.\n\n* Do not fail when deleting remotes in the presence of broken\n  global configs which contain branches.\n\n* Support for reading and writing git index v4 files\n\n* Improve the performance of the revwalk and bring us closer to git's code.\n\n* The reference db has improved support for concurrency and returns `GIT_ELOCKED`\n  when an operation could not be performed due to locking.\n\n* Nanosecond resolution is now activated by default, following git's change to\n  do this.\n\n* We now restrict the set of ciphers we let OpenSSL use by default.\n\n* Users can now register their own merge drivers for use with `.gitattributes`.\n  The library also gained built-in support for the union merge driver.\n\n* The default for creating references is now to validate that the object does\n  exist.\n\n* Add `git_proxy_options` which is used by the different networking\n  implementations to let the caller specify the proxy settings instead of\n  relying on the environment variables.\n\n### API additions\n\n* You can now get the user-agent used by libgit2 using the\n  `GIT_OPT_GET_USER_AGENT` option with `git_libgit2_opts()`.\n  It is the counterpart to `GIT_OPT_SET_USER_AGENT`.\n\n* The `GIT_OPT_SET_SSL_CIPHERS` option for `git_libgit2_opts()` lets you specify\n  a custom list of ciphers to use for OpenSSL.\n\n* `git_commit_create_buffer()` creates a commit and writes it into a\n  user-provided buffer instead of writing it into the object db. Combine it with\n  `git_commit_create_with_signature()` in order to create a commit with a\n  cryptographic signature.\n\n* `git_blob_create_fromstream()` and\n  `git_blob_create_fromstream_commit()` allow you to create a blob by\n  writing into a stream. Useful when you do not know the final size or\n  want to copy the contents from another stream.\n\n* New flags for `git_repository_open_ext`:\n\n    * `GIT_REPOSITORY_OPEN_NO_DOTGIT` - Do not check for a repository by\n      appending `/.git` to the `start_path`; only open the repository if\n      `start_path` itself points to the git directory.\n    * `GIT_REPOSITORY_OPEN_FROM_ENV` - Find and open a git repository,\n      respecting the environment variables used by the git command-line\n      tools. If set, `git_repository_open_ext` will ignore the other\n      flags and the `ceiling_dirs` argument, and will allow a NULL\n      `path` to use `GIT_DIR` or search from the current directory. The\n      search for a repository will respect `$GIT_CEILING_DIRECTORIES`\n      and `$GIT_DISCOVERY_ACROSS_FILESYSTEM`.  The opened repository\n      will respect `$GIT_INDEX_FILE`, `$GIT_NAMESPACE`,\n      `$GIT_OBJECT_DIRECTORY`, and `$GIT_ALTERNATE_OBJECT_DIRECTORIES`.\n      In the future, this flag will also cause `git_repository_open_ext`\n      to respect `$GIT_WORK_TREE` and `$GIT_COMMON_DIR`; currently,\n      `git_repository_open_ext` with this flag will error out if either\n      `$GIT_WORK_TREE` or `$GIT_COMMON_DIR` is set.\n\n* `git_diff_from_buffer()` can create a `git_diff` object from the contents\n  of a git-style patch file.\n\n* `git_index_version()` and `git_index_set_version()` to get and set\n  the index version\n\n* `git_odb_expand_ids()` lets you check for the existence of multiple\n  objects at once.\n\n* The new `git_blob_dup()`, `git_commit_dup()`, `git_tag_dup()` and\n  `git_tree_dup()` functions provide type-specific wrappers for\n  `git_object_dup()` to reduce noise and increase type safety for callers.\n\n* `git_reference_dup()` lets you duplicate a reference to aid in ownership\n  management and cleanup.\n\n* `git_signature_from_buffer()` lets you create a signature from a string in the\n  format that appear in objects.\n\n* `git_tree_create_updated()` lets you create a tree based on another one\n  together with a list of updates. For the covered update cases, it's more\n  efficient than the `git_index` route.\n\n* `git_apply_patch()` applies hunks from a `git_patch` to a buffer.\n\n* `git_diff_to_buf()` lets you print an entire diff directory to a buffer,\n  similar to how `git_patch_to_buf()` works.\n\n* `git_proxy_init_options()` is added to initialize a `git_proxy_options`\n  structure at run-time.\n\n* `git_merge_driver_register()`, `git_merge_driver_unregister()` let you\n  register and unregister a custom merge driver to be used when `.gitattributes`\n  specifies it.\n\n* `git_merge_driver_lookup()` can be used to look up a merge driver by name.\n\n* `git_merge_driver_source_repo()`, `git_merge_driver_source_ancestor()`,\n  `git_merge_driver_source_ours()`, `git_merge_driver_source_theirs()`,\n  `git_merge_driver_source_file_options()` added as accessors to\n  `git_merge_driver_source`.\n\n### API removals\n\n* `git_blob_create_fromchunks()` has been removed in favour of\n  `git_blob_create_fromstream()`.\n\n### Breaking API changes\n\n* `git_packbuilder_object_count` and `git_packbuilder_written` now\n  return a `size_t` instead of a `uint32_t` for more thorough\n  compatibility with the rest of the library.\n\n* `git_packbuiler_progress` now provides explicitly sized `uint32_t`\n  values instead of `unsigned int`.\n\n* `git_diff_file` now includes an `id_abbrev` field that reflects the\n  number of nibbles set in the `id` field.\n\n* `git_odb_backend` now has a `freshen` function pointer.  This optional\n  function pointer is similar to the `exists` function, but it will update\n  a last-used marker.  For filesystem-based object databases, this updates\n  the timestamp of the file containing the object, to indicate \"freshness\".\n  If this is `NULL`, then it will not be called and the `exists` function\n  will be used instead.\n\n* `git_remote_connect()` now accepts `git_proxy_options` argument, and\n  `git_fetch_options` and `git_push_options` each have a `proxy_opts` field.\n\n* `git_merge_options` now provides a `default_driver` that can be used\n  to provide the name of a merge driver to be used to handle files changed\n  during a merge.\n\n---------------------------------------------------------------------\n\nv0.24\n-------\n\n### Changes or improvements\n\n* Custom merge drivers can now be registered, which allows callers to\n  configure callbacks to honor `merge=driver` configuration in\n  `.gitattributes`.\n\n* Custom filters can now be registered with wildcard attributes, for\n  example `filter=*`.  Consumers should examine the attributes parameter\n  of the `check` function for details.\n\n* Symlinks are now followed when locking a file, which can be\n  necessary when multiple worktrees share a base repository.\n\n* You can now set your own user-agent to be sent for HTTP requests by\n  using the `GIT_OPT_SET_USER_AGENT` with `git_libgit2_opts()`.\n\n* You can set custom HTTP header fields to be sent along with requests\n  by passing them in the fetch and push options.\n\n* Tree objects are now assumed to be sorted. If a tree is not\n  correctly formed, it will give bad results. This is the git approach\n  and cuts a significant amount of time when reading the trees.\n\n* Filter registration is now protected against concurrent\n  registration.\n\n* Filenames which are not valid on Windows in an index no longer cause\n  to fail to parse it on that OS.\n\n* Rebases can now be performed purely in-memory, without touching the\n  repository's workdir.\n\n* When adding objects to the index, or when creating new tree or commit\n  objects, the inputs are validated to ensure that the dependent objects\n  exist and are of the correct type.  This object validation can be\n  disabled with the GIT_OPT_ENABLE_STRICT_OBJECT_CREATION option.\n\n* The WinHTTP transport's handling of bad credentials now behaves like\n  the others, asking for credentials again.\n\n### API additions\n\n* `git_config_lock()` has been added, which allow for\n  transactional/atomic complex updates to the configuration, removing\n  the opportunity for concurrent operations and not committing any\n  changes until the unlock.\n\n* `git_diff_options` added a new callback `progress_cb` to report on the\n  progress of the diff as files are being compared. The documentation of\n  the existing callback `notify_cb` was updated to reflect that it only\n  gets called when new deltas are added to the diff.\n\n* `git_fetch_options` and `git_push_options` have gained a `custom_headers`\n  field to set the extra HTTP header fields to send.\n\n* `git_stream_register_tls()` lets you register a callback to be used\n  as the constructor for a TLS stream instead of the libgit2 built-in\n  one.\n\n* `git_commit_header_field()` allows you to look up a specific header\n  field in a commit.\n\n* `git_commit_extract_signature()` extracts the signature from a\n  commit and gives you both the signature and the signed data so you\n  can verify it.\n\n### API removals\n\n* No APIs were removed in this version.\n\n### Breaking API changes\n\n* The `git_merge_tree_flag_t` is now `git_merge_flag_t`.  Subsequently,\n  its members are no longer prefixed with `GIT_MERGE_TREE_FLAG` but are\n  now prefixed with `GIT_MERGE_FLAG`, and the `tree_flags` field of the\n  `git_merge_options` structure is now named `flags`.\n\n* The `git_merge_file_flags_t` enum is now `git_merge_file_flag_t` for\n  consistency with other enum type names.\n\n* `git_cert` descendent types now have a proper `parent` member\n\n* It is the responsibility of the refdb backend to decide what to do\n  with the reflog on ref deletion. The file-based backend must delete\n  it, a database-backed one may wish to archive it.\n\n* `git_config_backend` has gained two entries. `lock` and `unlock`\n  with which to implement the transactional/atomic semantics for the\n  configuration backend.\n\n* `git_index_add` and `git_index_conflict_add()` will now use the case\n  as provided by the caller on case insensitive systems.  Previous\n  versions would keep the case as it existed in the index.  This does\n  not affect the higher-level `git_index_add_bypath` or\n  `git_index_add_frombuffer` functions.\n\n* The `notify_payload` field of `git_diff_options` was renamed to `payload`\n  to reflect that it's also the payload for the new progress callback.\n\n* The `git_config_level_t` enum has gained a higher-priority value\n  `GIT_CONFIG_LEVEL_PROGRAMDATA` which represent a rough Windows equivalent\n  to the system level configuration.\n\n* `git_rebase_options` now has a `merge_options` field.\n\n* The index no longer performs locking itself. This is not something\n  users of the library should have been relying on as it's not part of\n  the concurrency guarantees.\n\n* `git_remote_connect()` now takes a `custom_headers` argument to set\n  the extra HTTP header fields to send.\n\n---------------------------------------------------------------------\n\nv0.23\n------\n\n### Changes or improvements\n\n* Patience and minimal diff drivers can now be used for merges.\n\n* Merges can now ignore whitespace changes.\n\n* Updated binary identification in CRLF filtering to avoid false positives in\n  UTF-8 files.\n\n* Rename and copy detection is enabled for small files.\n\n* Checkout can now handle an initial checkout of a repository, making\n  `GIT_CHECKOUT_SAFE_CREATE` unnecessary for users of clone.\n\n* The signature parameter in the ref-modifying functions has been\n  removed. Use `git_repository_set_ident()` and\n  `git_repository_ident()` to override the signature to be used.\n\n* The local transport now auto-scales the number of threads to use\n  when creating the packfile instead of sticking to one.\n\n* Reference renaming now uses the right id for the old value.\n\n* The annotated version of branch creation, HEAD detaching and reset\n  allow for specifying the expression from the user to be put into the\n  reflog.\n\n* `git_rebase_commit` now returns `GIT_EUNMERGED` when you attempt to\n  commit with unstaged changes.\n\n* On Mac OS X, we now use SecureTransport to provide the cryptographic\n  support for HTTPS connections insead of OpenSSL.\n\n* Checkout can now accept an index for the baseline computations via the\n  `baseline_index` member.\n\n* The configuration for fetching is no longer stored inside the\n  `git_remote` struct but has been moved to a `git_fetch_options`. The\n  remote functions now take these options or the callbacks instead of\n  setting them beforehand.\n\n* `git_submodule` instances are no longer cached or shared across\n  lookup. Each submodule represents the configuration at the time of\n  loading.\n\n* The index now uses diffs for `add_all()` and `update_all()` which\n  gives it a speed boost and closer semantics to git.\n\n* The ssh transport now reports the stderr output from the server as\n  the error message, which allows you to get the \"repository not\n  found\" messages.\n\n* `git_index_conflict_add()` will remove staged entries that exist for\n  conflicted paths.\n\n* The flags for a `git_diff_file` will now have the `GIT_DIFF_FLAG_EXISTS`\n  bit set when a file exists on that side of the diff.  This is useful\n  for understanding whether a side of the diff exists in the presence of\n  a conflict.\n\n* The constructor for a write-stream into the odb now takes\n  `git_off_t` instead of `size_t` for the size of the blob, which\n  allows putting large files into the odb on 32-bit systems.\n\n* The remote's push and pull URLs now honor the url.$URL.insteadOf\n  configuration. This allows modifying URL prefixes to a custom\n  value via gitconfig.\n\n* `git_diff_foreach`, `git_diff_blobs`, `git_diff_blob_to_buffer`,\n  and `git_diff_buffers` now accept a new binary callback of type\n  `git_diff_binary_cb` that includes the binary diff information.\n\n* The race condition mitigations described in `racy-git.txt` have been\n  implemented.\n\n* If libcurl is installed, we will use it to connect to HTTP(S)\n  servers.\n\n### API additions\n\n* The `git_merge_options` gained a `file_flags` member.\n\n* Parsing and retrieving a configuration value as a path is exposed\n  via `git_config_parse_path()` and `git_config_get_path()`\n  respectively.\n\n* `git_repository_set_ident()` and `git_repository_ident()` serve to\n  set and query which identity will be used when writing to the\n  reflog.\n\n* `git_config_entry_free()` frees a config entry.\n\n* `git_config_get_string_buf()` provides a way to safely retrieve a\n  string from a non-snapshot configuration.\n\n* `git_annotated_commit_from_revspec()` allows to get an annotated\n  commit from an extended sha synatx string.\n\n* `git_repository_set_head_detached_from_annotated()`,\n  `git_branch_create_from_annotated()` and\n  `git_reset_from_annotated()` allow for the caller to provide an\n  annotated commit through which they can control what expression is\n  put into the reflog as the source/target.\n\n* `git_index_add_frombuffer()` can now create a blob from memory\n  buffer and add it to the index which is attached to a repository.\n\n* The structure `git_fetch_options` has been added to determine the\n  runtime configuration for fetching, such as callbacks, pruning and\n  autotag behaviour. It has the runtime initializer\n  `git_fetch_init_options()`.\n\n* The enum `git_fetch_prune_t` has been added, letting you specify the\n  pruning behaviour for a fetch.\n\n* A push operation will notify the caller of what updates it indends\n  to perform on the remote, which provides similar information to\n  git's pre-push hook.\n\n* `git_stash_apply()` can now apply a stashed state from the stash list,\n  placing the data into the working directory and index.\n\n* `git_stash_pop()` will apply a stashed state (like `git_stash_apply()`)\n  but will remove the stashed state after a successful application.\n\n* A new error code `GIT_EEOF` indicates an early EOF from the\n  server. This typically indicates an error with the URL or\n  configuration of the server, and tools can use this to show messages\n  about failing to communicate with the server.\n\n* A new error code `GIT_EINVALID` indicates that an argument to a\n  function is invalid, or an invalid operation was requested.\n\n* `git_diff_index_to_workdir()` and `git_diff_tree_to_index()` will now\n  produce deltas of type `GIT_DELTA_CONFLICTED` to indicate that the index\n  side of the delta is a conflict.\n\n* The `git_status` family of functions will now produce status of type\n  `GIT_STATUS_CONFLICTED` to indicate that a conflict exists for that file\n  in the index.\n\n* `git_index_entry_is_conflict()` is a utility function to determine if\n  a given index entry has a non-zero stage entry, indicating that it is\n  one side of a conflict.\n\n* It is now possible to pass a keypair via a buffer instead of a\n  path. For this, `GIT_CREDTYPE_SSH_MEMORY` and\n  `git_cred_ssh_key_memory_new()` have been added.\n\n* `git_filter_list_contains` will indicate whether a particular\n  filter will be run in the given filter list.\n\n* `git_commit_header_field()` has been added, which allows retrieving\n  the contents of an arbitrary header field.\n\n* `git_submodule_set_branch()` allows to set the configured branch for\n  a submodule.\n\n### API removals\n\n* `git_remote_save()` and `git_remote_clear_refspecs()` have been\n  removed. Remote's configuration is changed via the configuration\n  directly or through a convenience function which performs changes to\n  the configuration directly.\n\n* `git_remote_set_callbacks()`, `git_remote_get_callbacks()` and\n  `git_remote_set_transport()` have been removed and the remote no\n  longer stores this configuration.\n\n* `git_remote_set_fetch_refpecs()` and\n  `git_remote_set_push_refspecs()` have been removed. There is no\n  longer a way to set the base refspecs at run-time.\n\n* `git_submodule_save()` has been removed. The submodules are no\n  longer configured via the objects.\n\n* `git_submodule_reload_all()` has been removed as we no longer cache\n  submodules.\n\n### Breaking API changes\n\n* `git_smart_subtransport_cb` now has a `param` parameter.\n\n* The `git_merge_options` structure member `flags` has been renamed\n  to `tree_flags`.\n\n* The `git_merge_file_options` structure member `flags` is now\n  an unsigned int. It was previously a `git_merge_file_flags_t`.\n\n* `GIT_CHECKOUT_SAFE_CREATE` has been removed.  Most users will generally\n  be able to switch to `GIT_CHECKOUT_SAFE`, but if you require missing\n  file handling during checkout, you may now use `GIT_CHECKOUT_SAFE |\n  GIT_CHECKOUT_RECREATE_MISSING`.\n\n* The `git_clone_options` and `git_submodule_update_options`\n  structures no longer have a `signature` field.\n\n* The following functions have removed the signature and/or log message\n  parameters in favour of git-emulating ones.\n\n    * `git_branch_create()`, `git_branch_move()`\n    * `git_rebase_init()`, `git_rebase_abort()`\n    * `git_reference_symbolic_create_matching()`,\n      `git_reference_symbolic_create()`, `git_reference_create()`,\n      `git_reference_create_matching()`,\n      `git_reference_symbolic_set_target()`,\n      `git_reference_set_target()`, `git_reference_rename()`\n    * `git_remote_update_tips()`, `git_remote_fetch()`, `git_remote_push()`\n    * `git_repository_set_head()`,\n      `git_repository_set_head_detached()`,\n      `git_repository_detach_head()`\n    * `git_reset()`\n\n* `git_config_get_entry()` now gives back a ref-counted\n  `git_config_entry`. You must free it when you no longer need it.\n\n* `git_config_get_string()` will return an error if used on a\n  non-snapshot configuration, as there can be no guarantee that the\n  returned pointer is valid.\n\n* `git_note_default_ref()` now uses a `git_buf` to return the string,\n  as the string is otherwise not guaranteed to stay allocated.\n\n* `git_rebase_operation_current()` will return `GIT_REBASE_NO_OPERATION`\n  if it is called immediately after creating a rebase session but before\n  you have applied the first patch.\n\n* `git_rebase_options` now contains a `git_checkout_options` struct\n  that will be used for functions that modify the working directory,\n  namely `git_rebase_init`, `git_rebase_next` and\n  `git_rebase_abort`.  As a result, `git_rebase_open` now also takes\n  a `git_rebase_options` and only the `git_rebase_init` and\n  `git_rebase_open` functions take a `git_rebase_options`, where they\n  will persist the options to subsequent `git_rebase` calls.\n\n* The `git_clone_options` struct now has fetch options in a\n  `fetch_opts` field instead of remote callbacks in\n  `remote_callbacks`.\n\n* The remote callbacks has gained a new member `push_negotiation`\n  which gets called before sending the update commands to the server.\n\n* The following functions no longer act on a remote instance but\n  change the repository's configuration. Their signatures have changed\n  accordingly:\n\n    * `git_remote_set_url()`, `git_remote_seturl()`\n    * `git_remote_add_fetch()`, `git_remote_add_push()` and\n    * `git_remote_set_autotag()`\n\n* `git_remote_connect()` and `git_remote_prune()` now take a pointer\n  to the callbacks.\n\n* `git_remote_fetch()` and `git_remote_download()` now take a pointer\n  to fetch options which determine the runtime configuration.\n\n* The `git_remote_autotag_option_t` values have been changed. It has\n  gained a `_UNSPECIFIED` default value to specify no override for the\n  configured setting.\n\n* `git_remote_update_tips()` now takes a pointer to the callbacks as\n  well as a boolean whether to write `FETCH_HEAD` and the autotag\n  setting.\n\n* `git_remote_create_anonymous()` no longer takes a fetch refspec as\n  url-only remotes cannot have configured refspecs.\n\n* The `git_submodule_update_options` struct now has fetch options in\n  the `fetch_opts` field instead of callbacks in the\n  `remote_callbacks` field.\n\n* The following functions no longer act on a submodule instance but\n  change the repository's configuration. Their signatures have changed\n  accordingly:\n\n    * `git_submodule_set_url()`, `git_submodule_set_ignore()`,\n      `git_submodule_set_update()`,\n      `git_submodule_set_fetch_recurse_submodules()`.\n\n* `git_submodule_status()` no longer takes a submodule instance but a\n  repsitory, a submodule name and an ignore setting.\n\n* The `push` function in the `git_transport` interface now takes a\n  pointer to the remote callbacks.\n\n* The `git_index_entry` struct's fields' types have been changed to\n  more accurately reflect what is in fact stored in the\n  index. Specifically, time and file size are 32 bits intead of 64, as\n  these values are truncated.\n\n* `GIT_EMERGECONFLICT` is now `GIT_ECONFLICT`, which more accurately\n  describes the nature of the error.\n\n* It is no longer allowed to call `git_buf_grow()` on buffers\n  borrowing the memory they point to.\n\n---------------------------------------------------------------------\n\nv0.22\n------\n\n### Changes or improvements\n\n* `git_signature_new()` now requires a non-empty email address.\n\n* Use CommonCrypto libraries for SHA-1 calculation on Mac OS X.\n\n* Disable SSL compression and SSLv2 and SSLv3 ciphers in favor of TLSv1\n  in OpenSSL.\n\n* The fetch behavior of remotes with autotag set to `GIT_REMOTE_DOWNLOAD_TAGS_ALL`\n  has been changed to match git 1.9.0 and later. In this mode, libgit2 now\n  fetches all tags in addition to whatever else needs to be fetched.\n\n* `git_checkout()` now handles case-changing renames correctly on\n  case-insensitive filesystems; for example renaming \"readme\" to \"README\".\n\n* The search for libssh2 is now done via pkg-config instead of a\n  custom search of a few directories.\n\n* Add support for core.protectHFS and core.protectNTFS. Add more\n  validation for filenames which we write such as references.\n\n* The local transport now generates textual progress output like\n  git-upload-pack does (\"counting objects\").\n\n* `git_checkout_index()` can now check out an in-memory index that is not\n  necessarily the repository's index, so you may check out an index\n  that was produced by git_merge and friends while retaining the cached\n  information.\n\n* Remove the default timeout for receiving / sending data over HTTP using\n  the WinHTTP transport layer.\n\n* Add SPNEGO (Kerberos) authentication using GSSAPI on Unix systems.\n\n* Provide built-in objects for the empty blob (e69de29) and empty\n  tree (4b825dc) objects.\n\n* The index' tree cache is now filled upon read-tree and write-tree\n  and the cache is written to disk.\n\n* LF -> CRLF filter refuses to handle mixed-EOL files\n\n* LF -> CRLF filter now runs when * text = auto (with Git for Windows 1.9.4)\n\n* File unlocks are atomic again via rename. Read-only files on Windows are\n  made read-write if necessary.\n\n* Share open packfiles across repositories to share descriptors and mmaps.\n\n* Use a map for the treebuilder, making insertion O(1)\n\n* The build system now accepts an option EMBED_SSH_PATH which when set\n  tells it to include a copy of libssh2 at the given location. This is\n  enabled for MSVC.\n\n* Add support for refspecs with the asterisk in the middle of a\n  pattern.\n\n* Fetching now performs opportunistic updates. To achieve this, we\n  introduce a difference between active and passive refspecs, which\n  make `git_remote_download()` and `git_remote_fetch()` to take a list of\n  resfpecs to be the active list, similarly to how git fetch accepts a\n  list on the command-line.\n\n* The THREADSAFE option to build libgit2 with threading support has\n  been flipped to be on by default.\n\n* The remote object has learnt to prune remote-tracking branches. If\n  the remote is configured to do so, this will happen via\n  `git_remote_fetch()`. You can also call `git_remote_prune()` after\n  connecting or fetching to perform the prune.\n\n\n### API additions\n\n* Introduce `git_buf_text_is_binary()` and `git_buf_text_contains_nul()` for\n  consumers to perform binary detection on a git_buf.\n\n* `git_branch_upstream_remote()` has been introduced to provide the\n  branch.<name>.remote configuration value.\n\n* Introduce `git_describe_commit()` and `git_describe_workdir()` to provide\n  a description of the current commit (and working tree, respectively)\n  based on the nearest tag or reference\n\n* Introduce `git_merge_bases()` and the `git_oidarray` type to expose all\n  merge bases between two commits.\n\n* Introduce `git_merge_bases_many()` to expose all merge bases between\n  multiple commits.\n\n* Introduce rebase functionality (using the merge algorithm only).\n  Introduce `git_rebase_init()` to begin a new rebase session,\n  `git_rebase_open()` to open an in-progress rebase session,\n  `git_rebase_commit()` to commit the current rebase operation,\n  `git_rebase_next()` to apply the next rebase operation,\n  `git_rebase_abort()` to abort an in-progress rebase and `git_rebase_finish()`\n  to complete a rebase operation.\n\n* Introduce `git_note_author()` and `git_note_committer()` to get the author\n  and committer information on a `git_note`, respectively.\n\n* A factory function for ssh has been added which allows to change the\n  path of the programs to execute for receive-pack and upload-pack on\n  the server, `git_transport_ssh_with_paths()`.\n\n* The ssh transport supports asking the remote host for accepted\n  credential types as well as multiple challeges using a single\n  connection. This requires to know which username you want to connect\n  as, so this introduces the USERNAME credential type which the ssh\n  transport will use to ask for the username.\n\n* The `GIT_EPEEL` error code has been introduced when we cannot peel a tag\n  to the requested object type; if the given object otherwise cannot be\n  peeled, `GIT_EINVALIDSPEC` is returned.\n\n* Introduce `GIT_REPOSITORY_INIT_RELATIVE_GITLINK` to use relative paths\n  when writing gitlinks, as is used by git core for submodules.\n\n* `git_remote_prune()` has been added. See above for description.\n\n\n* Introduce reference transactions, which allow multiple references to\n  be locked at the same time and updates be queued. This also allows\n  us to safely update a reflog with arbitrary contents, as we need to\n  do for stash.\n\n### API removals\n\n* `git_remote_supported_url()` and `git_remote_is_valid_url()` have been\n  removed as they have become essentially useless with rsync-style ssh paths.\n\n* `git_clone_into()` and `git_clone_local_into()` have been removed from the\n  public API in favour of `git_clone callbacks`.\n\n* The option to ignore certificate errors via `git_remote_cert_check()`\n  is no longer present. Instead, `git_remote_callbacks` has gained a new\n  entry which lets the user perform their own certificate checks.\n\n### Breaking API changes\n\n* `git_cherry_pick()` is now `git_cherrypick()`.\n\n* The `git_submodule_update()` function was renamed to\n  `git_submodule_update_strategy()`. `git_submodule_update()` is now used to\n  provide functionalty similar to \"git submodule update\".\n\n* `git_treebuilder_create()` was renamed to `git_treebuilder_new()` to better\n  reflect it being a constructor rather than something which writes to\n  disk.\n\n* `git_treebuilder_new()` (was `git_treebuilder_create()`) now takes a\n  repository so that it can query repository configuration.\n  Subsequently, `git_treebuilder_write()` no longer takes a repository.\n\n* `git_threads_init()` and `git_threads_shutdown()` have been renamed to\n  `git_libgit2_init()` and `git_libgit2_shutdown()` to better explain what\n  their purpose is, as it's grown to be more than just about threads.\n\n* `git_libgit2_init()` and `git_libgit2_shutdown()` now return the number of\n  initializations of the library, so consumers may schedule work on the\n  first initialization.\n\n* The `git_transport_register()` function no longer takes a priority and takes\n  a URL scheme name (eg \"http\") instead of a prefix like \"http://\"\n\n* `git_index_name_entrycount()` and `git_index_reuc_entrycount()` now\n  return size_t instead of unsigned int.\n\n* The `context_lines` and `interhunk_lines` fields in `git_diff`_options are\n  now `uint32_t` instead of `uint16_t`. This allows to set them to `UINT_MAX`,\n  in effect asking for \"infinite\" context e.g. to iterate over all the\n  unmodified lines of a diff.\n\n* `git_status_file()` now takes an exact path. Use `git_status_list_new()` if\n  pathspec searching is needed.\n\n* `git_note_create()` has changed the position of the notes reference\n  name to match `git_note_remove()`.\n\n* Rename `git_remote_load()` to `git_remote_lookup()` to bring it in line\n  with the rest of the lookup functions.\n\n* `git_remote_rename()` now takes the repository and the remote's\n  current name. Accepting a remote indicates we want to change it,\n  which we only did partially. It is much clearer if we accept a name\n  and no loaded objects are changed.\n\n* `git_remote_delete()` now accepts the repository and the remote's name\n  instead of a loaded remote.\n\n* `git_merge_head` is now `git_annotated_commit`, to better reflect its usage\n  for multiple functions (including rebase)\n\n* The `git_clone_options` struct no longer provides the `ignore_cert_errors` or\n  `remote_name` members for remote customization.\n\n  Instead, the `git_clone_options` struct has two new members, `remote_cb` and\n  `remote_cb_payload`, which allow the caller to completely override the remote\n  creation process. If needed, the caller can use this callback to give their\n  remote a name other than the default (origin) or disable cert checking.\n\n  The `remote_callbacks` member has been preserved for convenience, although it\n  is not used when a remote creation callback is supplied.\n\n* The `git_clone`_options struct now provides `repository_cb` and\n  `repository_cb_payload` to allow the user to create a repository with\n  custom options.\n\n* The `git_push` struct to perform a push has been replaced with\n  `git_remote_upload()`. The refspecs and options are passed as a\n  function argument. `git_push_update_tips()` is now also\n  `git_remote_update_tips()` and the callbacks are in the same struct as\n  the rest.\n\n* The `git_remote_set_transport()` function now sets a transport factory function,\n  rather than a pre-existing transport instance.\n\n* The `git_transport` structure definition has moved into the sys/transport.h\n  file.\n\n* libgit2 no longer automatically sets the OpenSSL locking\n  functions. This is not something which we can know to do. A\n  last-resort convenience function is provided in sys/openssl.h,\n  `git_openssl_set_locking()` which can be used to set the locking.\n\n* `git_reference_*()` functions use mmap() + binary search for packed\n  refs lookups when using the fs backend. Previously all entries were\n  read into a hashtable, which could be slow for repositories with a\n  large number of refs.\n", "/*\n * Copyright (C) the libgit2 contributors. All rights reserved.\n *\n * This file is part of libgit2, distributed under the GNU GPL v2 with\n * a Linking Exception. For full terms see the included COPYING file.\n */\n#ifndef INCLUDE_git_version_h__\n#define INCLUDE_git_version_h__\n\n/**\n * The version string for libgit2.  This string follows semantic\n * versioning (v2) guidelines.\n */\n#define LIBGIT2_VERSION        \"1.5.0\"\n\n/** The major version number for this version of libgit2. */\n#define LIBGIT2_VER_MAJOR      1\n\n/** The minor version number for this version of libgit2. */\n#define LIBGIT2_VER_MINOR      5\n\n/** The revision (\"teeny\") version number for this version of libgit2. */\n#define LIBGIT2_VER_REVISION   0\n\n/** The Windows DLL patch number for this version of libgit2. */\n#define LIBGIT2_VER_PATCH      0\n\n/**\n * The prerelease string for this version of libgit2.  For development\n * (nightly) builds, this will be \"alpha\".  For prereleases, this will be\n * a prerelease name like \"beta\" or \"rc1\".  For final releases, this will\n * be `NULL`.\n */\n#define LIBGIT2_VER_PRERELEASE NULL\n\n/** The library ABI soversion for this version of libgit2. */\n#define LIBGIT2_SOVERSION      \"1.5\"\n\n#endif\n", "{\n  \"name\": \"libgit2\",\n  \"version\": \"1.5.0\",\n  \"repo\": \"https://github.com/libgit2/libgit2\",\n  \"description\": \" A cross-platform, linkable library implementation of Git that you can use in your application.\",\n  \"install\": \"mkdir build && cd build && cmake .. && cmake --build .\"\n}\n", "/*\n * Copyright (C) the libgit2 contributors. All rights reserved.\n *\n * This file is part of libgit2, distributed under the GNU GPL v2 with\n * a Linking Exception. For full terms see the included COPYING file.\n */\n\n#include \"ssh.h\"\n\n#ifdef GIT_SSH\n#include <libssh2.h>\n#endif\n\n#include \"runtime.h\"\n#include \"net.h\"\n#include \"netops.h\"\n#include \"smart.h\"\n#include \"streams/socket.h\"\n\n#include \"git2/credential.h\"\n#include \"git2/sys/credential.h\"\n\n#ifdef GIT_SSH\n\n#define OWNING_SUBTRANSPORT(s) ((ssh_subtransport *)(s)->parent.subtransport)\n\nstatic const char cmd_uploadpack[] = \"git-upload-pack\";\nstatic const char cmd_receivepack[] = \"git-receive-pack\";\n\ntypedef struct {\n\tgit_smart_subtransport_stream parent;\n\tgit_stream *io;\n\tLIBSSH2_SESSION *session;\n\tLIBSSH2_CHANNEL *channel;\n\tconst char *cmd;\n\tgit_net_url url;\n\tunsigned sent_command : 1;\n} ssh_stream;\n\ntypedef struct {\n\tgit_smart_subtransport parent;\n\ttransport_smart *owner;\n\tssh_stream *current_stream;\n\tgit_credential *cred;\n\tchar *cmd_uploadpack;\n\tchar *cmd_receivepack;\n} ssh_subtransport;\n\nstatic int list_auth_methods(int *out, LIBSSH2_SESSION *session, const char *username);\n\nstatic void ssh_error(LIBSSH2_SESSION *session, const char *errmsg)\n{\n\tchar *ssherr;\n\tlibssh2_session_last_error(session, &ssherr, NULL, 0);\n\n\tgit_error_set(GIT_ERROR_SSH, \"%s: %s\", errmsg, ssherr);\n}\n\n/*\n * Create a git protocol request.\n *\n * For example: git-upload-pack '/libgit2/libgit2'\n */\nstatic int gen_proto(git_str *request, const char *cmd, git_net_url *url)\n{\n\tconst char *repo;\n\n\trepo = url->path;\n\n\tif (repo && repo[0] == '/' && repo[1] == '~')\n\t\trepo++;\n\n\tif (!repo || !repo[0]) {\n\t\tgit_error_set(GIT_ERROR_NET, \"malformed git protocol URL\");\n\t\treturn -1;\n\t}\n\n\tgit_str_puts(request, cmd);\n\tgit_str_puts(request, \" '\");\n\tgit_str_puts(request, repo);\n\tgit_str_puts(request, \"'\");\n\n\tif (git_str_oom(request))\n\t\treturn -1;\n\n\treturn 0;\n}\n\nstatic int send_command(ssh_stream *s)\n{\n\tint error;\n\tgit_str request = GIT_STR_INIT;\n\n\terror = gen_proto(&request, s->cmd, &s->url);\n\tif (error < 0)\n\t\tgoto cleanup;\n\n\terror = libssh2_channel_exec(s->channel, request.ptr);\n\tif (error < LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s->session, \"SSH could not execute request\");\n\t\tgoto cleanup;\n\t}\n\n\ts->sent_command = 1;\n\ncleanup:\n\tgit_str_dispose(&request);\n\treturn error;\n}\n\nstatic int ssh_stream_read(\n\tgit_smart_subtransport_stream *stream,\n\tchar *buffer,\n\tsize_t buf_size,\n\tsize_t *bytes_read)\n{\n\tint rc;\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\n\t*bytes_read = 0;\n\n\tif (!s->sent_command && send_command(s) < 0)\n\t\treturn -1;\n\n\tif ((rc = libssh2_channel_read(s->channel, buffer, buf_size)) < LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s->session, \"SSH could not read data\");\n\t\treturn -1;\n\t}\n\n\t/*\n\t * If we can't get anything out of stdout, it's typically a\n\t * not-found error, so read from stderr and signal EOF on\n\t * stderr.\n\t */\n\tif (rc == 0) {\n\t\tif ((rc = libssh2_channel_read_stderr(s->channel, buffer, buf_size)) > 0) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"%*s\", rc, buffer);\n\t\t\treturn GIT_EEOF;\n\t\t} else if (rc < LIBSSH2_ERROR_NONE) {\n\t\t\tssh_error(s->session, \"SSH could not read stderr\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t*bytes_read = rc;\n\n\treturn 0;\n}\n\nstatic int ssh_stream_write(\n\tgit_smart_subtransport_stream *stream,\n\tconst char *buffer,\n\tsize_t len)\n{\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\tsize_t off = 0;\n\tssize_t ret = 0;\n\n\tif (!s->sent_command && send_command(s) < 0)\n\t\treturn -1;\n\n\tdo {\n\t\tret = libssh2_channel_write(s->channel, buffer + off, len - off);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\n\t\toff += ret;\n\n\t} while (off < len);\n\n\tif (ret < 0) {\n\t\tssh_error(s->session, \"SSH could not write data\");\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic void ssh_stream_free(git_smart_subtransport_stream *stream)\n{\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\tssh_subtransport *t;\n\n\tif (!stream)\n\t\treturn;\n\n\tt = OWNING_SUBTRANSPORT(s);\n\tt->current_stream = NULL;\n\n\tif (s->channel) {\n\t\tlibssh2_channel_close(s->channel);\n\t\tlibssh2_channel_free(s->channel);\n\t\ts->channel = NULL;\n\t}\n\n\tif (s->session) {\n\t\tlibssh2_session_disconnect(s->session, \"closing transport\");\n\t\tlibssh2_session_free(s->session);\n\t\ts->session = NULL;\n\t}\n\n\tif (s->io) {\n\t\tgit_stream_close(s->io);\n\t\tgit_stream_free(s->io);\n\t\ts->io = NULL;\n\t}\n\n\tgit_net_url_dispose(&s->url);\n\tgit__free(s);\n}\n\nstatic int ssh_stream_alloc(\n\tssh_subtransport *t,\n\tconst char *cmd,\n\tgit_smart_subtransport_stream **stream)\n{\n\tssh_stream *s;\n\n\tGIT_ASSERT_ARG(stream);\n\n\ts = git__calloc(sizeof(ssh_stream), 1);\n\tGIT_ERROR_CHECK_ALLOC(s);\n\n\ts->parent.subtransport = &t->parent;\n\ts->parent.read = ssh_stream_read;\n\ts->parent.write = ssh_stream_write;\n\ts->parent.free = ssh_stream_free;\n\n\ts->cmd = cmd;\n\n\t*stream = &s->parent;\n\treturn 0;\n}\n\nstatic int ssh_agent_auth(LIBSSH2_SESSION *session, git_credential_ssh_key *c) {\n\tint rc = LIBSSH2_ERROR_NONE;\n\n\tstruct libssh2_agent_publickey *curr, *prev = NULL;\n\n\tLIBSSH2_AGENT *agent = libssh2_agent_init(session);\n\n\tif (agent == NULL)\n\t\treturn -1;\n\n\trc = libssh2_agent_connect(agent);\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tgoto shutdown;\n\n\trc = libssh2_agent_list_identities(agent);\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tgoto shutdown;\n\n\twhile (1) {\n\t\trc = libssh2_agent_get_identity(agent, &curr, prev);\n\n\t\tif (rc < 0)\n\t\t\tgoto shutdown;\n\n\t\t/* rc is set to 1 whenever the ssh agent ran out of keys to check.\n\t\t * Set the error code to authentication failure rather than erroring\n\t\t * out with an untranslatable error code.\n\t\t */\n\t\tif (rc == 1) {\n\t\t\trc = LIBSSH2_ERROR_AUTHENTICATION_FAILED;\n\t\t\tgoto shutdown;\n\t\t}\n\n\t\trc = libssh2_agent_userauth(agent, c->username, curr);\n\n\t\tif (rc == 0)\n\t\t\tbreak;\n\n\t\tprev = curr;\n\t}\n\nshutdown:\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tssh_error(session, \"error authenticating\");\n\n\tlibssh2_agent_disconnect(agent);\n\tlibssh2_agent_free(agent);\n\n\treturn rc;\n}\n\nstatic int _git_ssh_authenticate_session(\n\tLIBSSH2_SESSION *session,\n\tgit_credential *cred)\n{\n\tint rc;\n\n\tdo {\n\t\tgit_error_clear();\n\t\tswitch (cred->credtype) {\n\t\tcase GIT_CREDENTIAL_USERPASS_PLAINTEXT: {\n\t\t\tgit_credential_userpass_plaintext *c = (git_credential_userpass_plaintext *)cred;\n\t\t\trc = libssh2_userauth_password(session, c->username, c->password);\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_KEY: {\n\t\t\tgit_credential_ssh_key *c = (git_credential_ssh_key *)cred;\n\n\t\t\tif (c->privatekey)\n\t\t\t\trc = libssh2_userauth_publickey_fromfile(\n\t\t\t\t\tsession, c->username, c->publickey,\n\t\t\t\t\tc->privatekey, c->passphrase);\n\t\t\telse\n\t\t\t\trc = ssh_agent_auth(session, c);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_CUSTOM: {\n\t\t\tgit_credential_ssh_custom *c = (git_credential_ssh_custom *)cred;\n\n\t\t\trc = libssh2_userauth_publickey(\n\t\t\t\tsession, c->username, (const unsigned char *)c->publickey,\n\t\t\t\tc->publickey_len, c->sign_callback, &c->payload);\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_INTERACTIVE: {\n\t\t\tvoid **abstract = libssh2_session_abstract(session);\n\t\t\tgit_credential_ssh_interactive *c = (git_credential_ssh_interactive *)cred;\n\n\t\t\t/* ideally, we should be able to set this by calling\n\t\t\t * libssh2_session_init_ex() instead of libssh2_session_init().\n\t\t\t * libssh2's API is inconsistent here i.e. libssh2_userauth_publickey()\n\t\t\t * allows you to pass the `abstract` as part of the call, whereas\n\t\t\t * libssh2_userauth_keyboard_interactive() does not!\n\t\t\t *\n\t\t\t * The only way to set the `abstract` pointer is by calling\n\t\t\t * libssh2_session_abstract(), which will replace the existing\n\t\t\t * pointer as is done below. This is safe for now (at time of writing),\n\t\t\t * but may not be valid in future.\n\t\t\t */\n\t\t\t*abstract = c->payload;\n\n\t\t\trc = libssh2_userauth_keyboard_interactive(\n\t\t\t\tsession, c->username, c->prompt_callback);\n\t\t\tbreak;\n\t\t}\n#ifdef GIT_SSH_MEMORY_CREDENTIALS\n\t\tcase GIT_CREDENTIAL_SSH_MEMORY: {\n\t\t\tgit_credential_ssh_key *c = (git_credential_ssh_key *)cred;\n\n\t\t\tGIT_ASSERT(c->username);\n\t\t\tGIT_ASSERT(c->privatekey);\n\n\t\t\trc = libssh2_userauth_publickey_frommemory(\n\t\t\t\tsession,\n\t\t\t\tc->username,\n\t\t\t\tstrlen(c->username),\n\t\t\t\tc->publickey,\n\t\t\t\tc->publickey ? strlen(c->publickey) : 0,\n\t\t\t\tc->privatekey,\n\t\t\t\tstrlen(c->privatekey),\n\t\t\t\tc->passphrase);\n\t\t\tbreak;\n\t\t}\n#endif\n\t\tdefault:\n\t\t\trc = LIBSSH2_ERROR_AUTHENTICATION_FAILED;\n\t\t}\n\t} while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);\n\n\tif (rc == LIBSSH2_ERROR_PASSWORD_EXPIRED ||\n\t\trc == LIBSSH2_ERROR_AUTHENTICATION_FAILED ||\n\t\trc == LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED)\n\t\t\treturn GIT_EAUTH;\n\n\tif (rc != LIBSSH2_ERROR_NONE) {\n\t\tif (!git_error_last())\n\t\t\tssh_error(session, \"Failed to authenticate SSH session\");\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int request_creds(git_credential **out, ssh_subtransport *t, const char *user, int auth_methods)\n{\n\tint error, no_callback = 0;\n\tgit_credential *cred = NULL;\n\n\tif (!t->owner->connect_opts.callbacks.credentials) {\n\t\tno_callback = 1;\n\t} else {\n\t\terror = t->owner->connect_opts.callbacks.credentials(\n\t\t\t&cred,\n\t\t\tt->owner->url,\n\t\t\tuser,\n\t\t\tauth_methods,\n\t\t\tt->owner->connect_opts.callbacks.payload);\n\n\t\tif (error == GIT_PASSTHROUGH) {\n\t\t\tno_callback = 1;\n\t\t} else if (error < 0) {\n\t\t\treturn error;\n\t\t} else if (!cred) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"callback failed to initialize SSH credentials\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (no_callback) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"authentication required but no callback set\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\tif (!(cred->credtype & auth_methods)) {\n\t\tcred->free(cred);\n\t\tgit_error_set(GIT_ERROR_SSH, \"authentication callback returned unsupported credentials type\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\t*out = cred;\n\n\treturn 0;\n}\n\nstatic int _git_ssh_session_create(\n\tLIBSSH2_SESSION **session,\n\tgit_stream *io)\n{\n\tint rc = 0;\n\tLIBSSH2_SESSION *s;\n\tgit_socket_stream *socket = GIT_CONTAINER_OF(io, git_socket_stream, parent);\n\n\tGIT_ASSERT_ARG(session);\n\n\ts = libssh2_session_init();\n\tif (!s) {\n\t\tgit_error_set(GIT_ERROR_NET, \"failed to initialize SSH session\");\n\t\treturn -1;\n\t}\n\n\tdo {\n\t\trc = libssh2_session_handshake(s, socket->s);\n\t} while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);\n\n\tif (rc != LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s, \"failed to start SSH session\");\n\t\tlibssh2_session_free(s);\n\t\treturn -1;\n\t}\n\n\tlibssh2_session_set_blocking(s, 1);\n\n\t*session = s;\n\n\treturn 0;\n}\n\n#define SSH_DEFAULT_PORT \"22\"\n\nstatic int _git_ssh_setup_conn(\n\tssh_subtransport *t,\n\tconst char *url,\n\tconst char *cmd,\n\tgit_smart_subtransport_stream **stream)\n{\n\tint auth_methods, error = 0;\n\tssh_stream *s;\n\tgit_credential *cred = NULL;\n\tLIBSSH2_SESSION *session=NULL;\n\tLIBSSH2_CHANNEL *channel=NULL;\n\n\tt->current_stream = NULL;\n\n\t*stream = NULL;\n\tif (ssh_stream_alloc(t, cmd, stream) < 0)\n\t\treturn -1;\n\n\ts = (ssh_stream *)*stream;\n\ts->session = NULL;\n\ts->channel = NULL;\n\n\tif (git_net_str_is_url(url))\n\t\terror = git_net_url_parse(&s->url, url);\n\telse\n\t\terror = git_net_url_parse_scp(&s->url, url);\n\n\tif (error < 0)\n\t\tgoto done;\n\n\tif ((error = git_socket_stream_new(&s->io, s->url.host, s->url.port)) < 0 ||\n\t    (error = git_stream_connect(s->io)) < 0)\n\t\tgoto done;\n\n\tif ((error = _git_ssh_session_create(&session, s->io)) < 0)\n\t\tgoto done;\n\n\tif (t->owner->connect_opts.callbacks.certificate_check != NULL) {\n\t\tgit_cert_hostkey cert = {{ 0 }}, *cert_ptr;\n\t\tconst char *key;\n\t\tsize_t cert_len;\n\t\tint cert_type;\n\n\t\tcert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;\n\n\t\tkey = libssh2_session_hostkey(session, &cert_len, &cert_type);\n\t\tif (key != NULL) {\n\t\t\tcert.type |= GIT_CERT_SSH_RAW;\n\t\t\tcert.hostkey = key;\n\t\t\tcert.hostkey_len = cert_len;\n\t\t\tswitch (cert_type) {\n\t\t\t\tcase LIBSSH2_HOSTKEY_TYPE_RSA:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIBSSH2_HOSTKEY_TYPE_DSS:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;\n\t\t\t\t\tbreak;\n\n#ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256\n\t\t\t\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_256:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_384:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIBSSH2_KNOWNHOST_KEY_ECDSA_521:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;\n\t\t\t\t\tbreak;\n#endif\n\n#ifdef LIBSSH2_HOSTKEY_TYPE_ED25519\n\t\t\t\tcase LIBSSH2_HOSTKEY_TYPE_ED25519:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;\n\t\t\t\t\tbreak;\n#endif\n\t\t\t\tdefault:\n\t\t\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;\n\t\t\t}\n\t\t}\n\n#ifdef LIBSSH2_HOSTKEY_HASH_SHA256\n\t\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);\n\t\tif (key != NULL) {\n\t\t\tcert.type |= GIT_CERT_SSH_SHA256;\n\t\t\tmemcpy(&cert.hash_sha256, key, 32);\n\t\t}\n#endif\n\n\t\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);\n\t\tif (key != NULL) {\n\t\t\tcert.type |= GIT_CERT_SSH_SHA1;\n\t\t\tmemcpy(&cert.hash_sha1, key, 20);\n\t\t}\n\n\t\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);\n\t\tif (key != NULL) {\n\t\t\tcert.type |= GIT_CERT_SSH_MD5;\n\t\t\tmemcpy(&cert.hash_md5, key, 16);\n\t\t}\n\n\t\tif (cert.type == 0) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"unable to get the host key\");\n\t\t\terror = -1;\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* We don't currently trust any hostkeys */\n\t\tgit_error_clear();\n\n\t\tcert_ptr = &cert;\n\n\t\terror = t->owner->connect_opts.callbacks.certificate_check(\n\t\t\t(git_cert *)cert_ptr,\n\t\t\t0,\n\t\t\ts->url.host,\n\t\t\tt->owner->connect_opts.callbacks.payload);\n\n\t\tif (error < 0 && error != GIT_PASSTHROUGH) {\n\t\t\tif (!git_error_last())\n\t\t\t\tgit_error_set(GIT_ERROR_NET, \"user cancelled hostkey check\");\n\n\t\t\tgoto done;\n\t\t}\n\t}\n\n\t/* we need the username to ask for auth methods */\n\tif (!s->url.username) {\n\t\tif ((error = request_creds(&cred, t, NULL, GIT_CREDENTIAL_USERNAME)) < 0)\n\t\t\tgoto done;\n\n\t\ts->url.username = git__strdup(((git_credential_username *) cred)->username);\n\t\tcred->free(cred);\n\t\tcred = NULL;\n\t\tif (!s->url.username)\n\t\t\tgoto done;\n\t} else if (s->url.username && s->url.password) {\n\t\tif ((error = git_credential_userpass_plaintext_new(&cred, s->url.username, s->url.password)) < 0)\n\t\t\tgoto done;\n\t}\n\n\tif ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)\n\t\tgoto done;\n\n\terror = GIT_EAUTH;\n\t/* if we already have something to try */\n\tif (cred && auth_methods & cred->credtype)\n\t\terror = _git_ssh_authenticate_session(session, cred);\n\n\twhile (error == GIT_EAUTH) {\n\t\tif (cred) {\n\t\t\tcred->free(cred);\n\t\t\tcred = NULL;\n\t\t}\n\n\t\tif ((error = request_creds(&cred, t, s->url.username, auth_methods)) < 0)\n\t\t\tgoto done;\n\n\t\tif (strcmp(s->url.username, git_credential_get_username(cred))) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"username does not match previous request\");\n\t\t\terror = -1;\n\t\t\tgoto done;\n\t\t}\n\n\t\terror = _git_ssh_authenticate_session(session, cred);\n\n\t\tif (error == GIT_EAUTH) {\n\t\t\t/* refresh auth methods */\n\t\t\tif ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)\n\t\t\t\tgoto done;\n\t\t\telse\n\t\t\t\terror = GIT_EAUTH;\n\t\t}\n\t}\n\n\tif (error < 0)\n\t\tgoto done;\n\n\tchannel = libssh2_channel_open_session(session);\n\tif (!channel) {\n\t\terror = -1;\n\t\tssh_error(session, \"Failed to open SSH channel\");\n\t\tgoto done;\n\t}\n\n\tlibssh2_channel_set_blocking(channel, 1);\n\n\ts->session = session;\n\ts->channel = channel;\n\n\tt->current_stream = s;\n\ndone:\n\tif (error < 0) {\n\t\tssh_stream_free(*stream);\n\n\t\tif (session)\n\t\t\tlibssh2_session_free(session);\n\t}\n\n\tif (cred)\n\t\tcred->free(cred);\n\n\treturn error;\n}\n\nstatic int ssh_uploadpack_ls(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tconst char *cmd = t->cmd_uploadpack ? t->cmd_uploadpack : cmd_uploadpack;\n\n\treturn _git_ssh_setup_conn(t, url, cmd, stream);\n}\n\nstatic int ssh_uploadpack(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tGIT_UNUSED(url);\n\n\tif (t->current_stream) {\n\t\t*stream = &t->current_stream->parent;\n\t\treturn 0;\n\t}\n\n\tgit_error_set(GIT_ERROR_NET, \"must call UPLOADPACK_LS before UPLOADPACK\");\n\treturn -1;\n}\n\nstatic int ssh_receivepack_ls(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tconst char *cmd = t->cmd_receivepack ? t->cmd_receivepack : cmd_receivepack;\n\n\n\treturn _git_ssh_setup_conn(t, url, cmd, stream);\n}\n\nstatic int ssh_receivepack(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tGIT_UNUSED(url);\n\n\tif (t->current_stream) {\n\t\t*stream = &t->current_stream->parent;\n\t\treturn 0;\n\t}\n\n\tgit_error_set(GIT_ERROR_NET, \"must call RECEIVEPACK_LS before RECEIVEPACK\");\n\treturn -1;\n}\n\nstatic int _ssh_action(\n\tgit_smart_subtransport_stream **stream,\n\tgit_smart_subtransport *subtransport,\n\tconst char *url,\n\tgit_smart_service_t action)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tswitch (action) {\n\t\tcase GIT_SERVICE_UPLOADPACK_LS:\n\t\t\treturn ssh_uploadpack_ls(t, url, stream);\n\n\t\tcase GIT_SERVICE_UPLOADPACK:\n\t\t\treturn ssh_uploadpack(t, url, stream);\n\n\t\tcase GIT_SERVICE_RECEIVEPACK_LS:\n\t\t\treturn ssh_receivepack_ls(t, url, stream);\n\n\t\tcase GIT_SERVICE_RECEIVEPACK:\n\t\t\treturn ssh_receivepack(t, url, stream);\n\t}\n\n\t*stream = NULL;\n\treturn -1;\n}\n\nstatic int _ssh_close(git_smart_subtransport *subtransport)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tGIT_ASSERT(!t->current_stream);\n\n\tGIT_UNUSED(t);\n\n\treturn 0;\n}\n\nstatic void _ssh_free(git_smart_subtransport *subtransport)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tgit__free(t->cmd_uploadpack);\n\tgit__free(t->cmd_receivepack);\n\tgit__free(t);\n}\n\n#define SSH_AUTH_PUBLICKEY \"publickey\"\n#define SSH_AUTH_PASSWORD \"password\"\n#define SSH_AUTH_KEYBOARD_INTERACTIVE \"keyboard-interactive\"\n\nstatic int list_auth_methods(int *out, LIBSSH2_SESSION *session, const char *username)\n{\n\tconst char *list, *ptr;\n\n\t*out = 0;\n\n\tlist = libssh2_userauth_list(session, username, strlen(username));\n\n\t/* either error, or the remote accepts NONE auth, which is bizarre, let's punt */\n\tif (list == NULL && !libssh2_userauth_authenticated(session)) {\n\t\tssh_error(session, \"Failed to retrieve list of SSH authentication methods\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\tptr = list;\n\twhile (ptr) {\n\t\tif (*ptr == ',')\n\t\t\tptr++;\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_PUBLICKEY)) {\n\t\t\t*out |= GIT_CREDENTIAL_SSH_KEY;\n\t\t\t*out |= GIT_CREDENTIAL_SSH_CUSTOM;\n#ifdef GIT_SSH_MEMORY_CREDENTIALS\n\t\t\t*out |= GIT_CREDENTIAL_SSH_MEMORY;\n#endif\n\t\t\tptr += strlen(SSH_AUTH_PUBLICKEY);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_PASSWORD)) {\n\t\t\t*out |= GIT_CREDENTIAL_USERPASS_PLAINTEXT;\n\t\t\tptr += strlen(SSH_AUTH_PASSWORD);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_KEYBOARD_INTERACTIVE)) {\n\t\t\t*out |= GIT_CREDENTIAL_SSH_INTERACTIVE;\n\t\t\tptr += strlen(SSH_AUTH_KEYBOARD_INTERACTIVE);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Skip it if we don't know it */\n\t\tptr = strchr(ptr, ',');\n\t}\n\n\treturn 0;\n}\n#endif\n\nint git_smart_subtransport_ssh(\n\tgit_smart_subtransport **out, git_transport *owner, void *param)\n{\n#ifdef GIT_SSH\n\tssh_subtransport *t;\n\n\tGIT_ASSERT_ARG(out);\n\n\tGIT_UNUSED(param);\n\n\tt = git__calloc(sizeof(ssh_subtransport), 1);\n\tGIT_ERROR_CHECK_ALLOC(t);\n\n\tt->owner = (transport_smart *)owner;\n\tt->parent.action = _ssh_action;\n\tt->parent.close = _ssh_close;\n\tt->parent.free = _ssh_free;\n\n\t*out = (git_smart_subtransport *) t;\n\treturn 0;\n#else\n\tGIT_UNUSED(owner);\n\tGIT_UNUSED(param);\n\n\tGIT_ASSERT_ARG(out);\n\t*out = NULL;\n\n\tgit_error_set(GIT_ERROR_INVALID, \"cannot create SSH transport. Library was built without SSH support\");\n\treturn -1;\n#endif\n}\n\nint git_transport_ssh_with_paths(git_transport **out, git_remote *owner, void *payload)\n{\n#ifdef GIT_SSH\n\tgit_strarray *paths = (git_strarray *) payload;\n\tgit_transport *transport;\n\ttransport_smart *smart;\n\tssh_subtransport *t;\n\tint error;\n\tgit_smart_subtransport_definition ssh_definition = {\n\t\tgit_smart_subtransport_ssh,\n\t\t0, /* no RPC */\n\t\tNULL,\n\t};\n\n\tif (paths->count != 2) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"invalid ssh paths, must be two strings\");\n\t\treturn GIT_EINVALIDSPEC;\n\t}\n\n\tif ((error = git_transport_smart(&transport, owner, &ssh_definition)) < 0)\n\t\treturn error;\n\n\tsmart = (transport_smart *) transport;\n\tt = (ssh_subtransport *) smart->wrapped;\n\n\tt->cmd_uploadpack = git__strdup(paths->strings[0]);\n\tGIT_ERROR_CHECK_ALLOC(t->cmd_uploadpack);\n\tt->cmd_receivepack = git__strdup(paths->strings[1]);\n\tGIT_ERROR_CHECK_ALLOC(t->cmd_receivepack);\n\n\t*out = transport;\n\treturn 0;\n#else\n\tGIT_UNUSED(owner);\n\tGIT_UNUSED(payload);\n\n\tGIT_ASSERT_ARG(out);\n\t*out = NULL;\n\n\tgit_error_set(GIT_ERROR_INVALID, \"cannot create SSH transport. Library was built without SSH support\");\n\treturn -1;\n#endif\n}\n\n#ifdef GIT_SSH\nstatic void shutdown_ssh(void)\n{\n    libssh2_exit();\n}\n#endif\n\nint git_transport_ssh_global_init(void)\n{\n#ifdef GIT_SSH\n\tif (libssh2_init(0) < 0) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"unable to initialize libssh2\");\n\t\treturn -1;\n\t}\n\n\treturn git_runtime_shutdown_register(shutdown_ssh);\n\n#else\n\n\t/* Nothing to initialize */\n\treturn 0;\n\n#endif\n}\n", "# tests: the unit and integration tests for libgit2\n\nset(Python_ADDITIONAL_VERSIONS 3 2.7)\nfind_package(PythonInterp)\n\nif(NOT PYTHONINTERP_FOUND)\n\tmessage(FATAL_ERROR \"Could not find a python interpreter, which is needed to build the tests. \"\n\t                     \"Make sure python is available, or pass -DBUILD_TESTS=OFF to skip building the tests\")\nENDIF()\n\nset(CLAR_PATH \"${PROJECT_SOURCE_DIR}/tests/clar\")\nset(CLAR_FIXTURES \"${PROJECT_SOURCE_DIR}/tests/resources/\")\nset(TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\")\nadd_definitions(-DCLAR_FIXTURE_PATH=\\\"${CLAR_FIXTURES}\\\")\nadd_definitions(-DCLAR_TMPDIR=\\\"libgit2_tests\\\")\nadd_definitions(-DCLAR_WIN32_LONGPATHS)\nadd_definitions(-D_FILE_OFFSET_BITS=64)\n\n# Ensure that we do not use deprecated functions internally\nadd_definitions(-DGIT_DEPRECATE_HARD)\n\nset(TEST_INCLUDES \"${CLAR_PATH}\" \"${TEST_PATH}\" \"${CMAKE_CURRENT_BINARY_DIR}\")\nfile(GLOB_RECURSE SRC_TEST ${TEST_PATH}/*/*.c ${TEST_PATH}/*/*.h)\nfile(GLOB_RECURSE SRC_CLAR ${CLAR_PATH}/*.c ${CLAR_PATH}/*.h)\n\nif(MSVC_IDE)\n\tlist(APPEND SRC_TEST \"precompiled.c\")\nendif()\n\nadd_custom_command(\n\tOUTPUT ${CMAKE_CURRENT_BINARY_DIR}/clar.suite ${CMAKE_CURRENT_BINARY_DIR}/clar_suite.h\n\tCOMMAND ${PYTHON_EXECUTABLE} ${CLAR_PATH}/generate.py -o \"${CMAKE_CURRENT_BINARY_DIR}\" -f -xonline -xstress -xperf .\n\tDEPENDS ${SRC_TEST}\n\tWORKING_DIRECTORY ${TEST_PATH}\n)\n\nset_source_files_properties(\n\t${CLAR_PATH}/clar.c\n\tPROPERTIES OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/clar.suite)\n\nadd_executable(libgit2_tests ${SRC_CLAR} ${SRC_TEST} ${LIBGIT2_OBJECTS})\n\nset_target_properties(libgit2_tests PROPERTIES C_STANDARD 90)\nset_target_properties(libgit2_tests PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})\n\ntarget_include_directories(libgit2_tests PRIVATE ${TEST_INCLUDES} ${LIBGIT2_INCLUDES} ${LIBGIT2_DEPENDENCY_INCLUDES})\ntarget_include_directories(libgit2_tests SYSTEM PRIVATE ${LIBGIT2_SYSTEM_INCLUDES})\ntarget_link_libraries(libgit2_tests ${LIBGIT2_SYSTEM_LIBS})\n\nide_split_sources(libgit2_tests)\n\n#\n# Old versions of gcc require us to declare our test functions; don't do\n# this on newer compilers to avoid unnecessary recompilation.\n#\nif(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)\n\ttarget_compile_options(libgit2_tests PRIVATE -include \"clar_suite.h\")\nendif()\n\nif(MSVC_IDE)\n\t# Precompiled headers\n\tset_target_properties(libgit2_tests PROPERTIES COMPILE_FLAGS \"/Yuprecompiled.h /FIprecompiled.h\")\n\tset_source_files_properties(\"precompiled.c\" COMPILE_FLAGS \"/Ycprecompiled.h\")\nendif()\n\ninclude(AddClarTest)\nadd_clar_test(libgit2_tests offline             -v -xonline)\nadd_clar_test(libgit2_tests invasive            -v -score::ftruncate -sfilter::stream::bigfile -sodb::largefiles -siterator::workdir::filesystem_gunk -srepo::init -srepo::init::at_filesystem_root)\nadd_clar_test(libgit2_tests online              -v -sonline -xonline::customcert)\nadd_clar_test(libgit2_tests online_customcert   -v -sonline::customcert)\nadd_clar_test(libgit2_tests gitdaemon           -v -sonline::push)\nadd_clar_test(libgit2_tests ssh                 -v -sonline::push -sonline::clone::ssh_cert -sonline::clone::ssh_with_paths -sonline::clone::path_whitespace_ssh)\nadd_clar_test(libgit2_tests proxy               -v -sonline::clone::proxy)\nadd_clar_test(libgit2_tests auth_clone          -v -sonline::clone::cred)\nadd_clar_test(libgit2_tests auth_clone_and_push -v -sonline::clone::push -sonline::push)\n"], "fixing_code": ["# libgit2: the cross-platform, linkable library implementation of git.\n# See `README.md` for build instructions.\n#\n# This top-level CMakeLists.txt sets up configuration options and\n# determines which subprojects to build.\n\ncmake_minimum_required(VERSION 3.5.1)\n\nproject(libgit2 VERSION \"1.5.1\" LANGUAGES C)\n\n# Add find modules to the path\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/cmake\")\n\n#\n# Build options\n#\n\n# Optional subsystems\noption(BUILD_SHARED_LIBS       \"Build Shared Library (OFF for Static)\"                  ON)\noption(BUILD_TESTS             \"Build Tests using the Clar suite\"                       ON)\noption(BUILD_CLI               \"Build the command-line interface\"                       ON)\noption(BUILD_EXAMPLES          \"Build library usage example apps\"                      OFF)\noption(BUILD_FUZZERS           \"Build the fuzz targets\"                                OFF)\n\n# Suggested functionality that may not be available on a per-platform basis\noption(USE_THREADS             \"Use threads for parallel processing when possible\"      ON)\noption(USE_NSEC                \"Support nanosecond precision file mtimes and ctimes\"    ON)\n\n# Backend selection\noption(USE_SSH                 \"Link with libssh2 to enable SSH support\"               OFF)\noption(USE_HTTPS               \"Enable HTTPS support. Can be set to a specific backend\" ON)\noption(USE_SHA1                \"Enable SHA1. Can be set to CollisionDetection(ON)/HTTPS\" ON)\noption(USE_SHA256              \"Enable SHA256. Can be set to HTTPS/Builtin\" ON)\noption(USE_GSSAPI              \"Link with libgssapi for SPNEGO auth\"      OFF)\n   set(USE_HTTP_PARSER         \"\" CACHE STRING \"Specifies the HTTP Parser implementation; either system or builtin.\")\n   set(REGEX_BACKEND           \"\" CACHE STRING \"Regular expression implementation. One of regcomp_l, pcre2, pcre, regcomp, or builtin.\")\noption(USE_BUNDLED_ZLIB        \"Use the bundled version of zlib. Can be set to one of Bundled(ON)/Chromium. The Chromium option requires a x86_64 processor with SSE4.2 and CLMUL\" OFF)\n\n# Debugging options\noption(USE_LEAK_CHECKER        \"Run tests with leak checker\"                           OFF)\noption(USE_STANDALONE_FUZZERS  \"Enable standalone fuzzers (compatible with gcc)\"       OFF)\noption(DEBUG_POOL              \"Enable debug pool allocator\"                           OFF)\noption(DEBUG_STRICT_ALLOC      \"Enable strict allocator behavior\"                      OFF)\noption(DEBUG_STRICT_OPEN       \"Enable path validation in open\"                        OFF)\n\n# Output options\noption(SONAME                  \"Set the (SO)VERSION of the target\"                      ON)\n   set(LIBGIT2_FILENAME        \"git2\" CACHE STRING \"Name of the produced binary\")\noption(DEPRECATE_HARD          \"Do not include deprecated functions in the library\"    OFF)\n\n# Compilation options\noption(ENABLE_WERROR           \"Enable compilation with -Werror\"                       OFF)\n\nif(UNIX)\n\t# NTLM client requires crypto libraries from the system HTTPS stack\n\tif(NOT USE_HTTPS)\n\t\toption(USE_NTLMCLIENT  \"Enable NTLM support on Unix.\"                  OFF)\n\telse()\n\t\toption(USE_NTLMCLIENT  \"Enable NTLM support on Unix.\"                   ON)\n\tendif()\n\n\toption(ENABLE_REPRODUCIBLE_BUILDS \"Enable reproducible builds\"                 OFF)\nendif()\n\nif(APPLE)\n\toption(USE_ICONV           \"Link with and use iconv library\"                    ON)\nendif()\n\nif(MSVC)\n\t# This option must match the settings used in your program, in particular if you\n\t# are linking statically\n\toption(STATIC_CRT          \"Link the static CRT libraries\"                      ON)\n\n\t# If you want to embed a copy of libssh2 into libgit2, pass a\n\t# path to libssh2\n\toption(EMBED_SSH_PATH      \"Path to libssh2 to embed (Windows)\"                OFF)\n\n\t# Enable leak checking using the debugging C runtime.\n\toption(WIN32_LEAKCHECK     \"Enable leak reporting via crtdbg\"                  OFF)\nendif()\n\nif(WIN32)\n\t# By default, libgit2 is built with WinHTTP.  To use the built-in\n\t# HTTP transport, invoke CMake with the \"-DUSE_WINHTTP=OFF\" argument.\n\toption(USE_WINHTTP         \"Use Win32 WinHTTP routines\"                         ON)\nendif()\n\nif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\n\n# Modules\n\ninclude(CheckLibraryExists)\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckStructHasMember)\ninclude(CheckPrototypeDefinition)\ninclude(AddCFlagIfSupported)\ninclude(FindPkgLibraries)\ninclude(FindThreads)\ninclude(FindStatNsec)\ninclude(Findfutimens)\ninclude(GNUInstallDirs)\ninclude(IdeSplitSources)\ninclude(FeatureSummary)\ninclude(EnableWarnings)\ninclude(DefaultCFlags)\n\n\n#\n# Subdirectories\n#\n\nadd_subdirectory(src)\n\nif(BUILD_TESTS)\n\tenable_testing()\n\tadd_subdirectory(tests)\nendif()\n\nif(BUILD_EXAMPLES)\n\tadd_subdirectory(examples)\nendif()\n\nif(BUILD_FUZZERS)\n\tif((BUILD_TESTS OR BUILD_EXAMPLES) AND NOT USE_STANDALONE_FUZZERS)\n\t\tmessage(FATAL_ERROR \"Cannot build the fuzzer and the tests or examples together\")\n\tendif()\n\tadd_subdirectory(fuzzers)\nendif()\n\n\n# Export for people who use us as a dependency\n\nif(NOT \"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_SOURCE_DIR}\")\n\tset(LIBGIT2_DEPENDENCY_OBJECTS ${LIBGIT2_DEPENDENCY_OBJECTS} PARENT_SCOPE)\n\tset(LIBGIT2_SYSTEM_LIBS ${LIBGIT2_SYSTEM_LIBS} PARENT_SCOPE)\nendif()\n\n\n# Summary\n\nfeature_summary(WHAT ENABLED_FEATURES DESCRIPTION \"Enabled features:\")\nfeature_summary(WHAT DISABLED_FEATURES DESCRIPTION \"Disabled features:\")\n", "#!/usr/bin/env bash\n\nset -e\n\nif [ -n \"$SKIP_TESTS\" ]; then\n\texit 0\nfi\n\n# Windows doesn't run the NTLM tests properly (yet)\nif [[ \"$(uname -s)\" == MINGW* ]]; then\n        SKIP_NTLM_TESTS=1\nfi\n\nSOURCE_DIR=${SOURCE_DIR:-$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && dirname $( pwd ) )}\nBUILD_DIR=$(pwd)\nTMPDIR=${TMPDIR:-/tmp}\nUSER=${USER:-$(whoami)}\n\nSUCCESS=1\nCONTINUE_ON_FAILURE=0\n\ncleanup() {\n\techo \"Cleaning up...\"\n\n\tif [ ! -z \"$GITDAEMON_PID\" ]; then\n\t\techo \"Stopping git daemon...\"\n\t\tkill $GITDAEMON_PID\n\tfi\n\n\tif [ ! -z \"$SSHD_DIR\" -a -f \"${SSHD_DIR}/pid\" ]; then\n\t\techo \"Stopping SSH...\"\n\t\tkill $(cat \"${SSHD_DIR}/pid\")\n\tfi\n\n\techo \"Done.\"\n}\n\nrun_test() {\n\tif [[ \"$GITTEST_FLAKY_RETRY\" > 0 ]]; then\n\t\tATTEMPTS_REMAIN=$GITTEST_FLAKY_RETRY\n\telse\n\t\tATTEMPTS_REMAIN=1\n\tfi\n\n\tFAILED=0\n\twhile [[ \"$ATTEMPTS_REMAIN\" > 0 ]]; do\n\t\tif [ \"$FAILED\" -eq 1 ]; then\n\t\t\techo \"\"\n\t\t\techo \"Re-running flaky ${1} tests...\"\n\t\t\techo \"\"\n\t\tfi\n\n\t\tRETURN_CODE=0\n\n\t\tCLAR_SUMMARY=\"${BUILD_DIR}/results_${1}.xml\" ctest -V -R \"^${1}$\" || RETURN_CODE=$? && true\n\n\t\tif [ \"$RETURN_CODE\" -eq 0 ]; then\n\t\t\tFAILED=0\n\t\t\tbreak\n\t\tfi\n\n\t\techo \"Test exited with code: $RETURN_CODE\"\n\t\tATTEMPTS_REMAIN=\"$(($ATTEMPTS_REMAIN-1))\"\n\t\tFAILED=1\n\tdone\n\n\tif [ \"$FAILED\" -ne 0 ]; then\n\t\tif [ \"$CONTINUE_ON_FAILURE\" -ne 1 ]; then\n\t\t\texit 1\n\t\tfi\n\n\t\tSUCCESS=0\n\tfi\n}\n\n# Configure the test environment; run them early so that we're certain\n# that they're started by the time we need them.\n\necho \"##############################################################################\"\necho \"## Configuring test environment\"\necho \"##############################################################################\"\n\nif [ -z \"$SKIP_GITDAEMON_TESTS\" ]; then\n\techo \"Starting git daemon...\"\n\tGITDAEMON_DIR=`mktemp -d ${TMPDIR}/gitdaemon.XXXXXXXX`\n\tgit init --bare \"${GITDAEMON_DIR}/test.git\" >/dev/null\n\tgit daemon --listen=localhost --export-all --enable=receive-pack --base-path=\"${GITDAEMON_DIR}\" \"${GITDAEMON_DIR}\" 2>/dev/null &\n\tGITDAEMON_PID=$!\n\tdisown $GITDAEMON_PID\nfi\n\nif [ -z \"$SKIP_PROXY_TESTS\" ]; then\n\tcurl --location --silent --show-error https://github.com/ethomson/poxyproxy/releases/download/v0.7.0/poxyproxy-0.7.0.jar >poxyproxy.jar\n\n\techo \"\"\n\techo \"Starting HTTP proxy (Basic)...\"\n\tjava -jar poxyproxy.jar --address 127.0.0.1 --port 8080 --credentials foo:bar --auth-type basic --quiet &\n\n\techo \"\"\n\techo \"Starting HTTP proxy (NTLM)...\"\n\tjava -jar poxyproxy.jar --address 127.0.0.1 --port 8090 --credentials foo:bar --auth-type ntlm --quiet &\nfi\n\nif [ -z \"$SKIP_NTLM_TESTS\" -o -z \"$SKIP_ONLINE_TESTS\" ]; then\n\tcurl --location --silent --show-error https://github.com/ethomson/poxygit/releases/download/v0.5.1/poxygit-0.5.1.jar >poxygit.jar\n\n\techo \"\"\n\techo \"Starting HTTP server...\"\n\tNTLM_DIR=`mktemp -d ${TMPDIR}/ntlm.XXXXXXXX`\n\tgit init --bare \"${NTLM_DIR}/test.git\"\n\tjava -jar poxygit.jar --address 127.0.0.1 --port 9000 --credentials foo:baz --quiet \"${NTLM_DIR}\" &\nfi\n\nif [ -z \"$SKIP_SSH_TESTS\" ]; then\n\techo \"\"\n\techo \"Starting ssh daemon...\"\n\tHOME=`mktemp -d ${TMPDIR}/home.XXXXXXXX`\n\tSSHD_DIR=`mktemp -d ${TMPDIR}/sshd.XXXXXXXX`\n\tgit init --bare \"${SSHD_DIR}/test.git\" >/dev/null\n\tcat >\"${SSHD_DIR}/sshd_config\" <<-EOF\n\tPort 2222\n\tListenAddress 0.0.0.0\n\tProtocol 2\n\tHostKey ${SSHD_DIR}/id_rsa\n\tPidFile ${SSHD_DIR}/pid\n\tAuthorizedKeysFile ${HOME}/.ssh/authorized_keys\n\tLogLevel DEBUG\n\tRSAAuthentication yes\n\tPasswordAuthentication yes\n\tPubkeyAuthentication yes\n\tChallengeResponseAuthentication no\n\tStrictModes no\n\t# Required here as sshd will simply close connection otherwise\n\tUsePAM no\n\tEOF\n\tssh-keygen -t rsa -f \"${SSHD_DIR}/id_rsa\" -N \"\" -q\n\t/usr/sbin/sshd -f \"${SSHD_DIR}/sshd_config\" -E \"${SSHD_DIR}/log\"\n\n\t# Set up keys\n\tmkdir \"${HOME}/.ssh\"\n\tssh-keygen -t rsa -f \"${HOME}/.ssh/id_rsa\" -N \"\" -q\n\tcat \"${HOME}/.ssh/id_rsa.pub\" >>\"${HOME}/.ssh/authorized_keys\"\n\twhile read algorithm key comment; do\n\t\techo \"[localhost]:2222 $algorithm $key\" >>\"${HOME}/.ssh/known_hosts\"\n\tdone <\"${SSHD_DIR}/id_rsa.pub\"\n\n\t# Append the github.com keys for the tests that don't override checks.\n\t# We ask for ssh-rsa to test that the selection based off of known_hosts\n\t# is working.\n\tssh-keyscan -t ssh-rsa github.com >>\"${HOME}/.ssh/known_hosts\"\n\n\t# Get the fingerprint for localhost and remove the colons so we can\n\t# parse it as a hex number. Older versions have a different output\n\t# format.\n\tif [[ $(ssh -V 2>&1) == OpenSSH_6* ]]; then\n\t\tSSH_FINGERPRINT=$(ssh-keygen -F '[localhost]:2222' -f \"${HOME}/.ssh/known_hosts\" -l | tail -n 1 | cut -d ' ' -f 2 | tr -d ':')\n\telse\n\t\tSSH_FINGERPRINT=$(ssh-keygen -E md5 -F '[localhost]:2222' -f \"${HOME}/.ssh/known_hosts\" -l | tail -n 1 | cut -d ' ' -f 3 | cut -d : -f2- | tr -d :)\n\tfi\nfi\n\n# Run the tests that do not require network connectivity.\n\nif [ -z \"$SKIP_OFFLINE_TESTS\" ]; then\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running core tests\"\n\techo \"##############################################################################\"\n\n\techo \"\"\n\techo \"Running libgit2 integration (offline) tests\"\n\techo \"\"\n\trun_test offline\n\n\techo \"\"\n\techo \"Running utility tests\"\n\techo \"\"\n\trun_test util\nfi\n\nif [ -n \"$RUN_INVASIVE_TESTS\" ]; then\n\techo \"\"\n\techo \"Running invasive tests\"\n\techo \"\"\n\n\texport GITTEST_INVASIVE_FS_SIZE=1\n\texport GITTEST_INVASIVE_MEMORY=1\n\texport GITTEST_INVASIVE_SPEED=1\n\trun_test invasive\n\tunset GITTEST_INVASIVE_FS_SIZE\n\tunset GITTEST_INVASIVE_MEMORY\n\tunset GITTEST_INVASIVE_SPEED\nfi\n\nif [ -z \"$SKIP_ONLINE_TESTS\" ]; then\n\t# Run the online tests.  The \"online\" test suite only includes the\n\t# default online tests that do not require additional configuration.\n\t# The \"proxy\" and \"ssh\" test suites require further setup.\n\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running networking (online) tests\"\n\techo \"##############################################################################\"\n\n\texport GITTEST_REMOTE_REDIRECT_INITIAL=\"http://localhost:9000/initial-redirect/libgit2/TestGitRepository\"\n\texport GITTEST_REMOTE_REDIRECT_SUBSEQUENT=\"http://localhost:9000/subsequent-redirect/libgit2/TestGitRepository\"\n\trun_test online\n\tunset GITTEST_REMOTE_REDIRECT_INITIAL\n\tunset GITTEST_REMOTE_REDIRECT_SUBSEQUENT\n\n\t# Run the online tests that immutably change global state separately\n\t# to avoid polluting the test environment.\n\techo \"\"\n\techo \"Running custom certificate (online_customcert) tests\"\n\techo \"\"\n\n\trun_test online_customcert\nfi\n\nif [ -z \"$SKIP_GITDAEMON_TESTS\" ]; then\n\techo \"\"\n\techo \"Running gitdaemon tests\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"git://localhost/test.git\"\n\trun_test gitdaemon\n\tunset GITTEST_REMOTE_URL\nfi\n\nif [ -z \"$SKIP_PROXY_TESTS\" ]; then\n\techo \"\"\n\techo \"Running proxy tests (Basic authentication)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_PROXY_HOST=\"localhost:8080\"\n\texport GITTEST_REMOTE_PROXY_USER=\"foo\"\n\texport GITTEST_REMOTE_PROXY_PASS=\"bar\"\n\trun_test proxy\n\tunset GITTEST_REMOTE_PROXY_HOST\n\tunset GITTEST_REMOTE_PROXY_USER\n\tunset GITTEST_REMOTE_PROXY_PASS\n\n\techo \"\"\n\techo \"Running proxy tests (NTLM authentication)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_PROXY_HOST=\"localhost:8090\"\n\texport GITTEST_REMOTE_PROXY_USER=\"foo\"\n\texport GITTEST_REMOTE_PROXY_PASS=\"bar\"\n\trun_test proxy\n\tunset GITTEST_REMOTE_PROXY_HOST\n\tunset GITTEST_REMOTE_PROXY_USER\n\tunset GITTEST_REMOTE_PROXY_PASS\nfi\n\nif [ -z \"$SKIP_NTLM_TESTS\" ]; then\n\techo \"\"\n\techo \"Running NTLM tests (IIS emulation)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"http://localhost:9000/ntlm/test.git\"\n\texport GITTEST_REMOTE_USER=\"foo\"\n\texport GITTEST_REMOTE_PASS=\"baz\"\n\trun_test auth_clone_and_push\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_PASS\n\n\techo \"\"\n\techo \"Running NTLM tests (Apache emulation)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"http://localhost:9000/broken-ntlm/test.git\"\n\texport GITTEST_REMOTE_USER=\"foo\"\n\texport GITTEST_REMOTE_PASS=\"baz\"\n\trun_test auth_clone_and_push\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_PASS\nfi\n\nif [ -z \"$SKIP_NEGOTIATE_TESTS\" -a -n \"$GITTEST_NEGOTIATE_PASSWORD\" ]; then\n\techo \"\"\n\techo \"Running SPNEGO tests\"\n\techo \"\"\n\n\tif [ \"$(uname -s)\" = \"Darwin\" ]; then\n\t\tKINIT_FLAGS=\"--password-file=STDIN\"\n\tfi\n\n\techo $GITTEST_NEGOTIATE_PASSWORD | kinit $KINIT_FLAGS test@LIBGIT2.ORG\n\tklist -5f\n\n\texport GITTEST_REMOTE_URL=\"https://test.libgit2.org/kerberos/empty.git\"\n\texport GITTEST_REMOTE_DEFAULT=\"true\"\n\trun_test auth_clone\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_DEFAULT\n\n\techo \"\"\n\techo \"Running SPNEGO tests (expect/continue)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"https://test.libgit2.org/kerberos/empty.git\"\n\texport GITTEST_REMOTE_DEFAULT=\"true\"\n\texport GITTEST_REMOTE_EXPECTCONTINUE=\"true\"\n\trun_test auth_clone\n\tunset GITTEST_REMOTE_URL\n\tunset GITTEST_REMOTE_DEFAULT\n\tunset GITTEST_REMOTE_EXPECTCONTINUE\n\n\tkdestroy -A\nfi\n\nif [ -z \"$SKIP_SSH_TESTS\" ]; then\n\texport GITTEST_REMOTE_USER=$USER\n\texport GITTEST_REMOTE_SSH_KEY=\"${HOME}/.ssh/id_rsa\"\n\texport GITTEST_REMOTE_SSH_PUBKEY=\"${HOME}/.ssh/id_rsa.pub\"\n\texport GITTEST_REMOTE_SSH_PASSPHRASE=\"\"\n\texport GITTEST_REMOTE_SSH_FINGERPRINT=\"${SSH_FINGERPRINT}\"\n\n\techo \"\"\n\techo \"Running ssh tests\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"ssh://localhost:2222/$SSHD_DIR/test.git\"\n\trun_test ssh\n\tunset GITTEST_REMOTE_URL\n\n\techo \"\"\n\techo \"Running ssh tests (scp-style paths)\"\n\techo \"\"\n\n\texport GITTEST_REMOTE_URL=\"[localhost:2222]:$SSHD_DIR/test.git\"\n\trun_test ssh\n\tunset GITTEST_REMOTE_URL\n\n\tunset GITTEST_REMOTE_USER\n\tunset GITTEST_REMOTE_SSH_KEY\n\tunset GITTEST_REMOTE_SSH_PUBKEY\n\tunset GITTEST_REMOTE_SSH_PASSPHRASE\n\tunset GITTEST_REMOTE_SSH_FINGERPRINT\nfi\n\nif [ -z \"$SKIP_FUZZERS\" ]; then\n\techo \"\"\n\techo \"##############################################################################\"\n\techo \"## Running fuzzers\"\n\techo \"##############################################################################\"\n\n\tctest -V -R 'fuzzer'\nfi\n\ncleanup\n\nif [ \"$SUCCESS\" -ne 1 ]; then\n\techo \"Some tests failed.\"\n\texit 1\nfi\n\necho \"Success.\"\nexit 0\n", "v1.5.1\n------\n\n\ud83d\udd12 This is a security release to address CVE-2023-22742: when compiled using the optional, included libssh2 backend, libgit2 fails to verify SSH keys by default.\n\nWhen using an SSH remote with the optional, included libssh2 backend, libgit2 does not perform certificate checking by default. Prior versions of libgit2 require the caller to set the `certificate_check` field of libgit2's `git_remote_callbacks` structure - if a certificate check callback is not set, libgit2 does not perform any certificate checking. This means that by default - without configuring a certificate check callback, clients will not perform validation on the server SSH keys and may be subject to a man-in-the-middle attack.\n\nThe libgit2 security team would like to thank the Julia and Rust security teams for responsibly disclosing this vulnerability and assisting with fixing the vulnerability.\n\nAll users of the v1.5 release line are recommended to upgrade.\n\nv1.5\n----\n\nThis is release v1.5.0, \"Stubentiger\". This release adds the basis for an experimental CLI, continues preparing for SHA256 support, adds a benchmarking utility, and has numerous new features and bugfixes.\n\n## What's Changed\n### New features\n* The beginnings of a git-compatible CLI for testing and benchmarking by @ethomson in https://github.com/libgit2/libgit2/pull/6133\n* Add `clone` support to the CLI @ethomson in https://github.com/libgit2/libgit2/pull/6274\n* A benchmarking suite to compare libgit2 functionality against git by @ethomson in https://github.com/libgit2/libgit2/pull/6235\n* SHA256: add a SHA256 implementation backend by @ethomson in https://github.com/libgit2/libgit2/pull/6144\n* SHA256: support dynamically loaded openssl by @ethomson in https://github.com/libgit2/libgit2/pull/6258\n* Transport: introduce `git_transport_smart_remote_connect_options` by @lhchavez in https://github.com/libgit2/libgit2/pull/6278\n### Bug fixes\n* Free parent and ref in lg2_commit before returning. by @apnadkarni in https://github.com/libgit2/libgit2/pull/6219\n* xdiff: use xdl_free not free by @ethomson in https://github.com/libgit2/libgit2/pull/6223\n* remote: do store the update_tips callback error value by @carlosmn in https://github.com/libgit2/libgit2/pull/6226\n* win32: `find_system_dirs` does not return `GIT_ENOTFOUND` by @ethomson in https://github.com/libgit2/libgit2/pull/6228\n* Some minor fixes for issues discovered by coverity by @ethomson in https://github.com/libgit2/libgit2/pull/6238\n* Fix a string concatenation bug when validating extensions by @bierbaum in https://github.com/libgit2/libgit2/pull/6246\n* fetch: support OID refspec without dst by @ethomson in https://github.com/libgit2/libgit2/pull/6251\n* Fix crash when regenerating a patch with unquoted spaces in filename by @jorio in https://github.com/libgit2/libgit2/pull/6244\n* midx: Fix an undefined behavior (left-shift signed overflow) by @lhchavez in https://github.com/libgit2/libgit2/pull/6260\n* Validate repository directory ownership by @ethomson in https://github.com/libgit2/libgit2/pull/6266\n* midx: fix large offset table check. by @ccstolley in https://github.com/libgit2/libgit2/pull/6309\n* midx: do not verify the checksum on load by @carlosmn in https://github.com/libgit2/libgit2/pull/6291\n* revparse: Remove error-prone, redundant test by @dongcarl in https://github.com/libgit2/libgit2/pull/6299\n* refs: fix missing error message by @zawata in https://github.com/libgit2/libgit2/pull/6305\n* CLI: progress updates by @ethomson in https://github.com/libgit2/libgit2/pull/6319\n* A couple of simplications around mwindow by @carlosmn in https://github.com/libgit2/libgit2/pull/6288\n* config: update config entry iteration lifecycle by @ethomson in https://github.com/libgit2/libgit2/pull/6320\n* repo: allow administrator to own the configuration by @ethomson in https://github.com/libgit2/libgit2/pull/6321\n* filter: Fix Segfault by @zawata in https://github.com/libgit2/libgit2/pull/6303\n* ntlmclient: LibreSSL 3.5 removed HMAC_CTX_cleanup by @vishwin in https://github.com/libgit2/libgit2/pull/6340\n* Fix internal git_sysdir_find* function usage within public git_config_find* functions by @kcsaul in https://github.com/libgit2/libgit2/pull/6335\n* fix interactive rebase detect. by @i-tengfei in https://github.com/libgit2/libgit2/pull/6334\n* cmake: drop posix dependency from pcre* detection by @jpalus in https://github.com/libgit2/libgit2/pull/6333\n* Fix erroneously lax configuration ownership checks by @ethomson in https://github.com/libgit2/libgit2/pull/6341\n* pack: don't pretend we support pack files v3 by @ethomson in https://github.com/libgit2/libgit2/pull/6347\n* Fix creation of branches and tags with invalid names by @lya001 in https://github.com/libgit2/libgit2/pull/6348\n### Security fixes\n* Fixes for CVE 2022-29187 by @ethomson in https://github.com/libgit2/libgit2/pull/6349\n* zlib: update bundled zlib to v1.2.12 by @ethomson in https://github.com/libgit2/libgit2/pull/6350\n### Code cleanups\n* sha256: refactoring in preparation for sha256 by @ethomson in https://github.com/libgit2/libgit2/pull/6265\n* remote: Delete a now-inexistent API declaration by @lhchavez in https://github.com/libgit2/libgit2/pull/6276\n* Fix missing include by @cschlack in https://github.com/libgit2/libgit2/pull/6277\n### Build and CI improvements\n* meta: show build status for v1.3 and v1.4 branches by @ethomson in https://github.com/libgit2/libgit2/pull/6216\n* cmake: Fix package name for system http-parser by @mgorny in https://github.com/libgit2/libgit2/pull/6217\n* meta: update version number to v1.5.0-alpha by @ethomson in https://github.com/libgit2/libgit2/pull/6220\n* cmake: export libraries needed to compile against libgit2 by @ethomson in https://github.com/libgit2/libgit2/pull/6239\n* clone: update bitbucket tests by @ethomson in https://github.com/libgit2/libgit2/pull/6252\n* diff: don't stat empty file on arm32 (flaky test) by @ethomson in https://github.com/libgit2/libgit2/pull/6259\n* tests: support flaky stat by @ethomson in https://github.com/libgit2/libgit2/pull/6262\n* Include test results data in CI by @ethomson in https://github.com/libgit2/libgit2/pull/6306\n* Add a .clang-format with our style by @ethomson in https://github.com/libgit2/libgit2/pull/6023\n* CI: limits actions scheduled workflows to the main repo by @ethomson in https://github.com/libgit2/libgit2/pull/6342\n* ci: update dockerfiles for mbedTLS new url by @ethomson in https://github.com/libgit2/libgit2/pull/6343\n### Documentation improvements\n* Add Pharo to language bindings by @theseion in https://github.com/libgit2/libgit2/pull/6310\n* Add link to Tcl bindings for libgit2 by @apnadkarni in https://github.com/libgit2/libgit2/pull/6318\n* fix couple of typos by @SkinnyMind in https://github.com/libgit2/libgit2/pull/6287\n* update documentation for default status options by @ethomson in https://github.com/libgit2/libgit2/pull/6322\n\n## New Contributors\n* @bierbaum made their first contribution in https://github.com/libgit2/libgit2/pull/6246\n* @dongcarl made their first contribution in https://github.com/libgit2/libgit2/pull/6299\n* @SkinnyMind made their first contribution in https://github.com/libgit2/libgit2/pull/6287\n* @zawata made their first contribution in https://github.com/libgit2/libgit2/pull/6305\n* @vishwin made their first contribution in https://github.com/libgit2/libgit2/pull/6340\n* @i-tengfei made their first contribution in https://github.com/libgit2/libgit2/pull/6334\n* @jpalus made their first contribution in https://github.com/libgit2/libgit2/pull/6333\n* @lya001 made their first contribution in https://github.com/libgit2/libgit2/pull/6348\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.4.0...v1.5.0\n\nv1.4\n----\n\nThis is release v1.4.0, \"Fisematenten\".  This release includes several new features and bugfixes, improves compatibility with git, and begins preparation for SHA256 support in a future release.\n\n## What's Changed\n### New features\n* diff: update rename limit to 1000 to match git's behavior by @ethomson in https://github.com/libgit2/libgit2/pull/6092\n* odb: support checking for object existence without refresh by @joshtriplett in https://github.com/libgit2/libgit2/pull/6107\n* object: provide a low-level mechanism to validate whether a raw object is valid (`git_object_rawcontent_is_valid`) by @ethomson in https://github.com/libgit2/libgit2/pull/6128\n* blob: provide a function to identify binary content by @ethomson in https://github.com/libgit2/libgit2/pull/6142\n* status: add `rename_threshold` to `git_status_options`. by @arroz in https://github.com/libgit2/libgit2/pull/6158\n* remote: support `http.followRedirects` (`false` and `initial`) and follow initial redirects by default by @ethomson in https://github.com/libgit2/libgit2/pull/6175\n* remote: support scp style paths with ports (`[git@github.com:22]:libgit2/libgit2`) by @ethomson in https://github.com/libgit2/libgit2/pull/6167\n* win32: update git for windows configuration file location compatibility by @csware in https://github.com/libgit2/libgit2/pull/6151 and @ethomson in https://github.com/libgit2/libgit2/pull/6180\n* refs: speed up packed reference lookups when packed refs are sorted by @ccstolley in https://github.com/libgit2/libgit2/pull/6138\n* merge: support zdiff3 conflict styles by @ethomson in https://github.com/libgit2/libgit2/pull/6195\n* remote: support fetching by object id (using \"+oid:ref\" refspec syntax) by @ethomson in https://github.com/libgit2/libgit2/pull/6203\n* merge: callers can specify virtual-base building behavior and to optionally accept conflict markers as a resolution by @boretrk in https://github.com/libgit2/libgit2/pull/6204\n\n### Bug fixes\n* Fix a gcc 11 warning in src/threadstate.c by @lhchavez in https://github.com/libgit2/libgit2/pull/6115\n* Fix a gcc 11 warning in src/thread.h by @lhchavez in https://github.com/libgit2/libgit2/pull/6116\n* cmake: re-enable WinHTTP by @ethomson in https://github.com/libgit2/libgit2/pull/6120\n* Fix repo init when template dir is non-existent by @ammgws in https://github.com/libgit2/libgit2/pull/6106\n* cmake: use project-specific root variable instead of CMAKE_SOURCE_DIR by @Qix- in https://github.com/libgit2/libgit2/pull/6146\n* Better revparse compatibility for at time notation by @yoichi in https://github.com/libgit2/libgit2/pull/6095\n* remotes: fix insteadOf/pushInsteadOf handling by @mkhl in https://github.com/libgit2/libgit2/pull/6101\n* git_commit_summary: ignore lines with spaces by @stforek in https://github.com/libgit2/libgit2/pull/6125\n* Config parsing by @csware in https://github.com/libgit2/libgit2/pull/6124\n* config: handle empty conditional in includeIf by @ethomson in https://github.com/libgit2/libgit2/pull/6165\n* #6154 git_status_list_new case insensitive fix by @arroz in https://github.com/libgit2/libgit2/pull/6159\n* futils_mktmp: don't use umask by @boretrk in https://github.com/libgit2/libgit2/pull/6178\n* revparse: support bare '@' by @ethomson in https://github.com/libgit2/libgit2/pull/6196\n* odb: check for write failures by @ethomson in https://github.com/libgit2/libgit2/pull/6206\n* push: Prepare pack before sending pack header. by @ccstolley in https://github.com/libgit2/libgit2/pull/6205\n* mktmp: improve our temp file creation by @ethomson in https://github.com/libgit2/libgit2/pull/6207\n* diff_file: fix crash if size of diffed file changes in workdir by @jorio in https://github.com/libgit2/libgit2/pull/6208\n* merge: comment conflicts lines in MERGE_MSG by @ethomson in https://github.com/libgit2/libgit2/pull/6197\n* Fix crashes in example programs on Windows (sprintf_s not compatible with snprintf) by @apnadkarni in https://github.com/libgit2/libgit2/pull/6212\n\n### Code cleanups\n* Introduce `git_remote_connect_options` by @ethomson in https://github.com/libgit2/libgit2/pull/6161\n* hash: separate hashes and git_oid by @ethomson in https://github.com/libgit2/libgit2/pull/6082\n* `git_buf`: now a public-only API (`git_str` is our internal API) by @ethomson in https://github.com/libgit2/libgit2/pull/6078\n* cmake: cleanups and consistency by @ethomson in https://github.com/libgit2/libgit2/pull/6084\n* path: refactor utility path functions by @ethomson in https://github.com/libgit2/libgit2/pull/6104\n* str: git_str_free is never a function by @ethomson in https://github.com/libgit2/libgit2/pull/6111\n* cmake refactorings by @ethomson in https://github.com/libgit2/libgit2/pull/6112\n* Add missing-declarations warning globally by @ethomson in https://github.com/libgit2/libgit2/pull/6113\n* cmake: further refactorings by @ethomson in https://github.com/libgit2/libgit2/pull/6114\n* tag: set validity to 0 by default by @ethomson in https://github.com/libgit2/libgit2/pull/6119\n* util: minor cleanup and refactoring to the date class by @ethomson in https://github.com/libgit2/libgit2/pull/6121\n* Minor code cleanups by @ethomson in https://github.com/libgit2/libgit2/pull/6122\n* Fix a long long that crept past by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/6094\n* remote: refactor insteadof application by @ethomson in https://github.com/libgit2/libgit2/pull/6147\n* ntmlclient: fix linking with libressl by @boretrk in https://github.com/libgit2/libgit2/pull/6157\n* c99: change single bit flags to unsigned by @boretrk in https://github.com/libgit2/libgit2/pull/6179\n* Fix typos by @rex4539 in https://github.com/libgit2/libgit2/pull/6164\n* diff_driver: split global_drivers array into separate elements by @boretrk in https://github.com/libgit2/libgit2/pull/6184\n* cmake: disable some gnu extensions by @boretrk in https://github.com/libgit2/libgit2/pull/6185\n* Disabling setting `CMAKE_FIND_LIBRARY_SUFFIXES` on Apple platforms. by @arroz in https://github.com/libgit2/libgit2/pull/6153\n* C90: add inline macro to xdiff and mbedtls by @boretrk in https://github.com/libgit2/libgit2/pull/6200\n* SHA256: early preparation by @ethomson in https://github.com/libgit2/libgit2/pull/6192\n\n### CI improvements\n* tests: rename test runner to `libgit2_tests`, build option to `BUILD_TESTS`. by @ethomson in https://github.com/libgit2/libgit2/pull/6083\n* ci: only update docs on push by @ethomson in https://github.com/libgit2/libgit2/pull/6108\n* Pedantic header test by @boretrk in https://github.com/libgit2/libgit2/pull/6086\n* ci: build with ssh on nightly by @ethomson in https://github.com/libgit2/libgit2/pull/6148\n* ci: improve the name in CI runs by @ethomson in https://github.com/libgit2/libgit2/pull/6198\n\n### Documentation improvements\n* Document that `git_odb` is thread-safe by @joshtriplett in https://github.com/libgit2/libgit2/pull/6109\n* Improve documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/6168\n\n### Other changes\n* libgit2_clar is now libgit2_tests by @mkhl in https://github.com/libgit2/libgit2/pull/6100\n* Remove PSGit from Language Bindings section of README by @cestrand in https://github.com/libgit2/libgit2/pull/6150\n* COPYING: remove regex copyright, add PCRE copyright by @ethomson in https://github.com/libgit2/libgit2/pull/6187\n* meta: add a release configuration file by @ethomson in https://github.com/libgit2/libgit2/pull/6211\n\n## New Contributors\n* @mkhl made their first contribution in https://github.com/libgit2/libgit2/pull/6100\n* @ammgws made their first contribution in https://github.com/libgit2/libgit2/pull/6106\n* @yoichi made their first contribution in https://github.com/libgit2/libgit2/pull/6095\n* @stforek made their first contribution in https://github.com/libgit2/libgit2/pull/6125\n* @cestrand made their first contribution in https://github.com/libgit2/libgit2/pull/6150\n* @rex4539 made their first contribution in https://github.com/libgit2/libgit2/pull/6164\n* @jorio made their first contribution in https://github.com/libgit2/libgit2/pull/6208\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.3.0...v1.4.0\n\nv1.3\n----\n\nThis is release v1.3.0, \"Zugunruhe\".  This release includes only minor new features that will be helpful for users to have an orderly transition to the v2.0 lineage.\n\n## New Features\n* Support custom git extensions by @ethomson in https://github.com/libgit2/libgit2/pull/6031\n* Introduce `git_email_create`; deprecate `git_diff_format_email` by @ethomson in https://github.com/libgit2/libgit2/pull/6061\n\n## Deprecated APIs\n* `git_oidarray_free` is deprecated; callers should use `git_oidarray_dispose`\n\n## Bug fixes\n* #6028: Check if `threadstate->error_t.message` is not `git_buf__initbuf` before freeing. by @arroz in https://github.com/libgit2/libgit2/pull/6029\n* remote: Mark `git_remote_name_is_valid` as `GIT_EXTERN` by @lhchavez in https://github.com/libgit2/libgit2/pull/6032\n* Fix config parsing for multiline with multiple quoted comment chars by @basile-henry in https://github.com/libgit2/libgit2/pull/6043\n* indexer: Avoid one `mmap(2)`/`munmap(2)` pair per `git_indexer_append` call by @lhchavez in https://github.com/libgit2/libgit2/pull/6039\n* merge: Check file mode when resolving renames by @ccstolley in https://github.com/libgit2/libgit2/pull/6060\n* Allow proxy options when connecting with a detached remote. by @lrm29 in https://github.com/libgit2/libgit2/pull/6058\n* win32: allow empty environment variables by @ethomson in https://github.com/libgit2/libgit2/pull/6063\n* Fixes for deprecated APIs by @ethomson in https://github.com/libgit2/libgit2/pull/6066\n* filter: use a `git_oid` in filter options, not a pointer by @ethomson in https://github.com/libgit2/libgit2/pull/6067\n* diff: update `GIT_DIFF_IGNORE_BLANK_LINES` by @ethomson in https://github.com/libgit2/libgit2/pull/6068 \n* Attribute lookups are always on relative paths by @ethomson in https://github.com/libgit2/libgit2/pull/6073\n* Handle long paths when querying attributes by @ethomson in https://github.com/libgit2/libgit2/pull/6075\n\n## Code cleanups\n* notes: use a buffer internally by @ethomson in https://github.com/libgit2/libgit2/pull/6047\n* Fix coding style for pointer by @punkymaniac in https://github.com/libgit2/libgit2/pull/6045\n* Use __typeof__ GNUC keyword for ISO C compatibility by @duncanthomson in https://github.com/libgit2/libgit2/pull/6041\n* Discover libssh2 without pkg-config by @stac47 in https://github.com/libgit2/libgit2/pull/6053\n* Longpath filter bug by @lrm29 in https://github.com/libgit2/libgit2/pull/6055\n* Add test to ensure empty proxy env behaves like unset env by @sathieu in https://github.com/libgit2/libgit2/pull/6052\n* Stdint header condition has been reverted. by @lolgear in https://github.com/libgit2/libgit2/pull/6020\n* buf: `common_prefix` takes a string array by @ethomson in https://github.com/libgit2/libgit2/pull/6077\n* oidarray: introduce `git_oidarray_dispose` by @ethomson in https://github.com/libgit2/libgit2/pull/6076\n* examples: Free the git_config and git_config_entry after use by @257 in https://github.com/libgit2/libgit2/pull/6071\n\n## CI Improvements\n* ci: pull libssh2 from www.libssh2.org by @ethomson in https://github.com/libgit2/libgit2/pull/6064\n\n## Documentation changes\n* Update README.md by @shijinglu in https://github.com/libgit2/libgit2/pull/6050\n\n## New Contributors\n* @basile-henry made their first contribution in https://github.com/libgit2/libgit2/pull/6043\n* @duncanthomson made their first contribution in https://github.com/libgit2/libgit2/pull/6041\n* @stac47 made their first contribution in https://github.com/libgit2/libgit2/pull/6053\n* @shijinglu made their first contribution in https://github.com/libgit2/libgit2/pull/6050\n* @ccstolley made their first contribution in https://github.com/libgit2/libgit2/pull/6060\n* @sathieu made their first contribution in https://github.com/libgit2/libgit2/pull/6052\n* @257 made their first contribution in https://github.com/libgit2/libgit2/pull/6071\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.2.0...v1.3.0\n\n---------------------------------------------------------------------\n\nv1.2\n-----\n\nThis is release v1.2.0, \"Absacker\".  This release includes many new features: in particular, support for commit graphs, multi-pack indexes, and `core.longpaths` support.\n\nThis is meant to be the final minor release in the v1 lineage.  v2.0 will be the next major release and will remove deprecated APIs and may include breaking changes.\n\n## Deprecated APIs\n\n* revspec: rename git_revparse_mode_t to git_revspec_t by @ethomson in https://github.com/libgit2/libgit2/pull/5786\n* tree: deprecate `git_treebuilder_write_with_buffer` by @ethomson in https://github.com/libgit2/libgit2/pull/5815\n* Deprecate `is_valid_name` functions; replace with `name_is_valid` functions by @ethomson in https://github.com/libgit2/libgit2/pull/5659\n* filter: stop taking git_buf as user input by @ethomson in https://github.com/libgit2/libgit2/pull/5859\n* remote: introduce remote_ready_cb, deprecate resolve_url callback by @ethomson in https://github.com/libgit2/libgit2/pull/6012\n* Introduce `create_commit_cb`, deprecate `signing_cb` by @ethomson in https://github.com/libgit2/libgit2/pull/6016\n* filter: filter drivers stop taking git_buf as user input by @ethomson in https://github.com/libgit2/libgit2/pull/6011\n* buf: deprecate public git_buf writing functions by @ethomson in https://github.com/libgit2/libgit2/pull/6017\n\n## New features\n\n* winhttp: support optional client cert by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5384\n* Add support for additional SSH hostkey types. by @arroz in https://github.com/libgit2/libgit2/pull/5750\n* Handle ipv6 addresses by @ethomson in https://github.com/libgit2/libgit2/pull/5741\n* zlib: Add support for building with Chromium's zlib implementation by @lhchavez in https://github.com/libgit2/libgit2/pull/5748\n* commit-graph: Introduce a parser for commit-graph files by @lhchavez in https://github.com/libgit2/libgit2/pull/5762\n* patch: add owner accessor by @KOLANICH in https://github.com/libgit2/libgit2/pull/5731\n* commit-graph: Support lookups of entries in a commit-graph by @lhchavez in https://github.com/libgit2/libgit2/pull/5763\n* commit-graph: Introduce `git_commit_graph_needs_refresh()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5764\n* Working directory path validation by @ethomson in https://github.com/libgit2/libgit2/pull/5823\n* Support `core.longpaths` on Windows by @ethomson in https://github.com/libgit2/libgit2/pull/5857\n* git_reference_create_matching: Treat all-zero OID as \"must be absent\" by @novalis in https://github.com/libgit2/libgit2/pull/5842\n* diff:add option to ignore blank line changes by @yuuri in https://github.com/libgit2/libgit2/pull/5853\n* [Submodule] Git submodule dup by @lolgear in https://github.com/libgit2/libgit2/pull/5890\n* commit-graph: Use the commit-graph in revwalks by @lhchavez in https://github.com/libgit2/libgit2/pull/5765\n* commit-graph: Introduce `git_commit_list_generation_cmp` by @lhchavez in https://github.com/libgit2/libgit2/pull/5766\n* graph: Create `git_graph_reachable_from_any()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5767\n* Support reading attributes from a specific commit by @ethomson in https://github.com/libgit2/libgit2/pull/5952\n* [Branch] Branch upstream with format by @lolgear in https://github.com/libgit2/libgit2/pull/5861\n* Dynamically load OpenSSL (optionally) by @ethomson in https://github.com/libgit2/libgit2/pull/5974\n* Set refs/remotes/origin/HEAD to default branch when branch is specified by @A-Ovchinnikov-mx in https://github.com/libgit2/libgit2/pull/6010\n* midx: Add a way to write multi-pack-index files by @lhchavez in https://github.com/libgit2/libgit2/pull/5404\n* Use error code GIT_EAUTH for authentication failures by @josharian in https://github.com/libgit2/libgit2/pull/5395\n* midx: Introduce git_odb_write_multi_pack_index() by @lhchavez in https://github.com/libgit2/libgit2/pull/5405\n* Checkout dry-run by @J0Nes90 in https://github.com/libgit2/libgit2/pull/5841\n* mbedTLS: Fix setting certificate directory by @mikezackles in https://github.com/libgit2/libgit2/pull/6004\n* remote: introduce remote_ready_cb, deprecate resolve_url callback by @ethomson in https://github.com/libgit2/libgit2/pull/6012\n* Introduce `create_commit_cb`, deprecate `signing_cb` by @ethomson in https://github.com/libgit2/libgit2/pull/6016\n* commit-graph: Add a way to write commit-graph files by @lhchavez in https://github.com/libgit2/libgit2/pull/5778\n\n## Bug fixes\n\n* Define `git___load` when building with `-DTHREADSAFE=OFF` by @lhchavez in https://github.com/libgit2/libgit2/pull/5664\n* Make the Windows leak detection more robust by @lhchavez in https://github.com/libgit2/libgit2/pull/5661\n* Refactor \"global\" state by @ethomson in https://github.com/libgit2/libgit2/pull/5546\n* threadstate: rename tlsdata when building w/o threads by @ethomson in https://github.com/libgit2/libgit2/pull/5668\n* Include `${MBEDTLS_INCLUDE_DIR}` when compiling `crypt_mbedtls.c` by @staticfloat in https://github.com/libgit2/libgit2/pull/5685\n* Fix the `-DTHREADSAFE=OFF` build by @lhchavez in https://github.com/libgit2/libgit2/pull/5690\n* Add missing worktree_dir check and test case by @rbmclean in https://github.com/libgit2/libgit2/pull/5692\n* msvc crtdbg -> win32 leakcheck by @ethomson in https://github.com/libgit2/libgit2/pull/5580\n* Introduce GIT_ASSERT macros by @ethomson in https://github.com/libgit2/libgit2/pull/5327\n* Also add the raw hostkey to `git_cert_hostkey` by @lhchavez in https://github.com/libgit2/libgit2/pull/5704\n* Make the odb race-free by @lhchavez in https://github.com/libgit2/libgit2/pull/5595\n* Make the pack and mwindow implementations data-race-free by @lhchavez in https://github.com/libgit2/libgit2/pull/5593\n* Thread-free implementation by @ethomson in https://github.com/libgit2/libgit2/pull/5719\n* Thread-local storage: a generic internal library (with no allocations) by @ethomson in https://github.com/libgit2/libgit2/pull/5720\n* Friendlier getting started in the lack of git_libgit2_init by @ethomson in https://github.com/libgit2/libgit2/pull/5578\n* Make git__strntol64() ~70%* faster by @lhchavez in https://github.com/libgit2/libgit2/pull/5735\n* Cache the parsed submodule config when diffing by @lhchavez in https://github.com/libgit2/libgit2/pull/5727\n* pack: continue zlib while we can make progress by @ethomson in https://github.com/libgit2/libgit2/pull/5740\n* Avoid using `__builtin_mul_overflow` with the clang+32-bit combo by @lhchavez in https://github.com/libgit2/libgit2/pull/5742\n* repository: use intptr_t's in the config map cache by @ethomson in https://github.com/libgit2/libgit2/pull/5746\n* Build with NO_MMAP by @0xdky in https://github.com/libgit2/libgit2/pull/5583\n* Add documentation for git_blob_filter_options.version by @JoshuaS3 in https://github.com/libgit2/libgit2/pull/5759\n* blob: fix name of `GIT_BLOB_FILTER_ATTRIBUTES_FROM_HEAD` by @ethomson in https://github.com/libgit2/libgit2/pull/5760\n* Cope with empty default branch by @ethomson in https://github.com/libgit2/libgit2/pull/5770\n* README: instructions for using libgit2 without compiling by @ethomson in https://github.com/libgit2/libgit2/pull/5772\n* Use `p_pwrite`/`p_pread` consistently throughout the codebase by @lhchavez in https://github.com/libgit2/libgit2/pull/5769\n* midx: Fix a bug in `git_midx_needs_refresh()` by @lhchavez in https://github.com/libgit2/libgit2/pull/5768\n* mwindow: Fix a bug in the LRU window finding code by @lhchavez in https://github.com/libgit2/libgit2/pull/5783\n* refdb_fs: Check git_sortedcache wlock/rlock errors by @mamapanda in https://github.com/libgit2/libgit2/pull/5800\n* index: Check git_vector_dup error in write_entries by @mamapanda in https://github.com/libgit2/libgit2/pull/5801\n* Fix documentation formating on repository.h by @punkymaniac in https://github.com/libgit2/libgit2/pull/5806\n* include: fix typos in comments by @tniessen in https://github.com/libgit2/libgit2/pull/5805\n* Fix some typos by @aaronfranke in https://github.com/libgit2/libgit2/pull/5797\n* Check git_signature_dup failure by @mamapanda in https://github.com/libgit2/libgit2/pull/5817\n* merge: Check insert_head_ids error in create_virtual_base by @mamapanda in https://github.com/libgit2/libgit2/pull/5818\n* winhttp: skip certificate check if unable to send request by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5814\n* Default to GIT_BRANCH_DEFAULT if init.defaultBranch is empty string by @ianhattendorf in https://github.com/libgit2/libgit2/pull/5832\n* Fix diff_entrycount -> diff_num_deltas doc typo by @mjsir911 in https://github.com/libgit2/libgit2/pull/5838\n* repo: specify init.defaultbranch is meant to be a branch name by @carlosmn in https://github.com/libgit2/libgit2/pull/5835\n* repo: remove an inappropriate use of PASSTHROUGH by @carlosmn in https://github.com/libgit2/libgit2/pull/5834\n* src: fix typos in header files by @tniessen in https://github.com/libgit2/libgit2/pull/5843\n* test: clean up memory leaks by @ethomson in https://github.com/libgit2/libgit2/pull/5858\n* buf: remove unnecessary buf_text namespace by @ethomson in https://github.com/libgit2/libgit2/pull/5860\n* Fix bug in git_diff_find_similar. by @staktrace in https://github.com/libgit2/libgit2/pull/5839\n* Fix issues with Proxy Authentication after httpclient refactor by @implausible in https://github.com/libgit2/libgit2/pull/5852\n* tests: clean up memory leak, fail on leak for win32 by @ethomson in https://github.com/libgit2/libgit2/pull/5892\n* Tolerate readlink size less than st_size by @dtolnay in https://github.com/libgit2/libgit2/pull/5900\n* Define WINHTTP_NO_CLIENT_CERT_CONTEXT if needed by @jacquesg in https://github.com/libgit2/libgit2/pull/5929\n* Update from regex to pcre licensing information in docs/contributing.md by @boretrk in https://github.com/libgit2/libgit2/pull/5916\n* Consider files executable only if the user can execute them by @novalis in https://github.com/libgit2/libgit2/pull/5915\n* git__timer: Limit ITimer usage to AmigaOS4 by @boretrk in https://github.com/libgit2/libgit2/pull/5936\n* Fix memory leak in git_smart__connect by @punkymaniac in https://github.com/libgit2/libgit2/pull/5908\n* config: fix included configs not refreshed more than once by @Batchyx in https://github.com/libgit2/libgit2/pull/5926\n* Fix wrong time_t used in function by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5938\n* fix check for ignoring of negate rules by @palmin in https://github.com/libgit2/libgit2/pull/5824\n* Make `FIND_PACKAGE(PythonInterp)` prefer `python3` by @lhchavez in https://github.com/libgit2/libgit2/pull/5913\n* git__timer: Allow compilation on systems without CLOCK_MONOTONIC by @boretrk in https://github.com/libgit2/libgit2/pull/5945\n* stdintification: use int64_t and INT64_C instead of long long by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5941\n* Optional stricter allocation checking (for `malloc(0)` cases) by @ethomson in https://github.com/libgit2/libgit2/pull/5951\n* Variadic arguments aren't in C89 by @NattyNarwhal in https://github.com/libgit2/libgit2/pull/5948\n* Fix typo in general.c by @Crayon2000 in https://github.com/libgit2/libgit2/pull/5954\n* common.h: use inline when compiling for C99 and later by @boretrk in https://github.com/libgit2/libgit2/pull/5953\n* Fix one memory leak in master by @lhchavez in https://github.com/libgit2/libgit2/pull/5957\n* tests: reset odb backend priority by @ethomson in https://github.com/libgit2/libgit2/pull/5961\n* cmake: extended futimens checking on macOS by @ethomson in https://github.com/libgit2/libgit2/pull/5962\n* amiga: use ';' as path list separator on AmigaOS by @boretrk in https://github.com/libgit2/libgit2/pull/5978\n* Respect the force flag on refspecs in git_remote_fetch by @alexjg in https://github.com/libgit2/libgit2/pull/5854\n* Fix LIBGIT2_FILENAME not being passed to the resource compiler by @jairbubbles in https://github.com/libgit2/libgit2/pull/5994\n* sha1dc: remove conditional for <sys/types.h> by @boretrk in https://github.com/libgit2/libgit2/pull/5997\n* openssl: don't fail when we can't customize allocators by @ethomson in https://github.com/libgit2/libgit2/pull/5999\n* C11 warnings by @boretrk in https://github.com/libgit2/libgit2/pull/6005\n* open: input validation for empty segments in path by @boretrk in https://github.com/libgit2/libgit2/pull/5950\n* Introduce GIT_WARN_UNUSED_RESULT by @lhchavez in https://github.com/libgit2/libgit2/pull/5802\n* GCC C11 warnings by @boretrk in https://github.com/libgit2/libgit2/pull/6006\n* array: check dereference from void * type by @boretrk in https://github.com/libgit2/libgit2/pull/6007\n* Homogenize semantics for atomic-related functions by @lhchavez in https://github.com/libgit2/libgit2/pull/5747\n* git_array_alloc: return objects of correct type by @boretrk in https://github.com/libgit2/libgit2/pull/6008\n* CMake. hash sha1 header has been added. by @lolgear in https://github.com/libgit2/libgit2/pull/6013\n* tests: change comments to c89 style by @boretrk in https://github.com/libgit2/libgit2/pull/6015\n* Set Host Header to match CONNECT authority target by @lollipopman in https://github.com/libgit2/libgit2/pull/6022\n* Fix worktree iteration when repository has no common directory by @kcsaul in https://github.com/libgit2/libgit2/pull/5943\n\n## Documentation improvements\n\n* Update README.md for additional Delphi bindings by @todaysoftware in https://github.com/libgit2/libgit2/pull/5831\n* Fix documentation formatting by @punkymaniac in https://github.com/libgit2/libgit2/pull/5850\n* docs: fix incorrect comment marker by @tiennou in https://github.com/libgit2/libgit2/pull/5897\n* Patch documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/5903\n* Fix misleading doc for `git_index_find` by @arxanas in https://github.com/libgit2/libgit2/pull/5910\n* docs: stop mentioning libgit2's \"master\" branch by @Batchyx in https://github.com/libgit2/libgit2/pull/5925\n* docs: fix some missing includes that cause Docurium to error out by @tiennou in https://github.com/libgit2/libgit2/pull/5917\n* Patch documentation by @punkymaniac in https://github.com/libgit2/libgit2/pull/5940\n\n## Development improvements\n\n* WIP: .devcontainer: settings for a codespace workflow by @ethomson in https://github.com/libgit2/libgit2/pull/5508\n\n## CI Improvements\n\n* Add a ThreadSanitizer build by @lhchavez in https://github.com/libgit2/libgit2/pull/5597\n* ci: more GitHub Actions by @ethomson in https://github.com/libgit2/libgit2/pull/5706\n* ci: run coverity in the nightly builds by @ethomson in https://github.com/libgit2/libgit2/pull/5707\n* ci: only report main branch in README status by @ethomson in https://github.com/libgit2/libgit2/pull/5708\n* Fix the `ENABLE_WERROR=ON` build in Groovy Gorilla (gcc 10.2) by @lhchavez in https://github.com/libgit2/libgit2/pull/5715\n* Re-enable the RC4 test by @carlosmn in https://github.com/libgit2/libgit2/pull/4418\n* ci: run codeql by @ethomson in https://github.com/libgit2/libgit2/pull/5709\n* github-actions: Also rename the main branch here by @lhchavez in https://github.com/libgit2/libgit2/pull/5771\n* ci: don't use ninja on macOS by @ethomson in https://github.com/libgit2/libgit2/pull/5780\n* ci: use GitHub for storing mingw-w64 build dependency by @ethomson in https://github.com/libgit2/libgit2/pull/5855\n* docker: remove the entrypoint by @ethomson in https://github.com/libgit2/libgit2/pull/5980\n* http: don't require a password by @ethomson in https://github.com/libgit2/libgit2/pull/5972\n* ci: update nightly to use source path by @ethomson in https://github.com/libgit2/libgit2/pull/5989\n* ci: add centos 7 and centos 8 by @ethomson in https://github.com/libgit2/libgit2/pull/5992\n* ci: update centos builds by @ethomson in https://github.com/libgit2/libgit2/pull/5995\n* ci: tag new containers with the latest tag by @ethomson in https://github.com/libgit2/libgit2/pull/6000\n\n## Dependency updates\n\n* ntlm: [ntlmclient](https://github.com/ethomson/ntlmclient) is now v0.9.1\n\n**Full Changelog**: https://github.com/libgit2/libgit2/compare/v1.1.0...v1.2.0\n\n---------------------------------------------------------------------\n\nv1.1\n----\n\nThis is release v1.1, \"Fernweh\".\n\n### Changes or improvements\n\n* Our bundled PCRE dependency has been updated to 8.44.\n\n* The `refs/remotes/origin/HEAD` file will be created at clone time to\n  point to the origin's default branch.\n\n* libgit2 now uses the `__atomic_` intrinsics instead of `__sync_`\n  intrinsics on supported gcc and clang versions.\n\n* The `init.defaultBranch` setting is now respected and `master` is\n  no longer the hardcoded as the default branch name.\n\n* Patch files that do not contain an `index` line can now be parsed.\n\n* Configuration files with multi-line values can now contain quotes\n  split across multiple lines.\n\n* Windows clients now attempt to use TLS1.3 when available.\n\n* Servers that request an upgrade to a newer HTTP version are\n  silently ignored instead of erroneously failing.\n\n* Users can pass `NULL` to the options argument to\n  `git_describe_commit`.\n\n* Clones and fetches of very large packfiles now succeeds on 32-bit\n  platforms.\n\n* Custom reference database backends can now handle the repository's\n  `HEAD` correctly.\n\n* Repositories with a large number of packfiles no longer exhaust the\n  number of file descriptors.\n\n* The test framework now supports TAP output when the `-t` flag is\n  specified.\n\n* The test framework can now specify an exact match to a test\n  function using a trailing `$`.\n\n* All checkout types support `GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH`.\n\n* `git_blame` now can ignore whitespace changes using the option\n  `GIT_BLAME_IGNORE_WHITESPACE`.\n\n* Several new examples have been created, including an examples for\n  commit, add and push.\n\n* Mode changes during rename are now supported in patch application.\n\n* `git_checkout_head` now correctly removes untracked files in a\n  subdirectory when the `FORCE | REMOVE_UNTRACKED` options are specified.\n\nv1.0.1\n------\n\nThis is a bugfix release with the following changes:\n\n- Calculating information about renamed files during merges is more\n  efficient because dissimilarity about files is now being cached and\n  no longer needs to be recomputed.\n  \n- The `git_worktree_prune_init_options` has been correctly restored for\n  backward compatibility.  In v1.0 it was incorrectly deprecated with a\n  typo.\n\n- The optional ntlmclient dependency now supports NetBSD.\n\n- A bug where attempting to stash on a bare repository may have failed\n  has been fixed.\n\n- Configuration files that are unreadable due to permissions are now\n  silently ignored, and treated as if they do not exist.  This matches\n  git's behavior; previously this case would have been an error.\n\n- v4 index files are now correctly written; previously we would read\n  them correctly but would not write the prefix-compression accurately,\n  causing corruption.\n\n- A bug where the smart HTTP transport could not read large data packets\n  has been fixed.  Previously, fetching from servers like Gerrit, that\n  sent large data packets, would error.\n\n---------------------------------------------------------------------\n\nv1.0\n----\n\nThis is release v1.0 \"Luftschloss\", which is the first stabe release of\nlibgit2. The API will stay compatible across all releases of the same major\nversion. This release includes bugfixes only and supersedes v0.99, which will\nstop being maintained. Both v0.27 and v0.28 stay supported in accordance with\nour release policy.\n\n### Changes or improvements\n\n- CMake was converted to make use of the GNUInstallDirs module for both our\n  pkgconfig and install targets in favor of our custom build options\n  `BIN_INSTALL_DIR`, `LIB_INSTALL_DIR` and `INCLUDE_INSTALL_DIR`. Instead, you\n  can now use CMakes standard variables `CMAKE_INSTALL_BINDIR`,\n  `CMAKE_INSTALL_LIBDIR` and `CMAKE_INSTALL_INCLUDEDIR`.\n\n- Some CMake build options accepted either a specific value or a boolean value\n  to disable the option altogether or use automatic detection. We only accepted\n  \"ON\" or \"OFF\", but none of the other values CMake recognizes as boolean. This\n  was aligned with CMake's understanding of booleans.\n\n- The installed pkgconfig file contained incorrect values for both `libdir` and\n  `includedir` variables.\n\n- If using pcre2 for regular expressions, then we incorrectly added \"pcre2\"\n  instead of \"pcre2-8\" to our pkgconfig dependencies, which was corrected.\n\n- Fixed building the bundled ntlmclient dependency on FreeBSD, OpenBSD and\n  SunOS.\n\n- When writing symlinks on Windows, we incorrectly handled relative symlink\n  targets, which was corrected.\n\n- When using the HTTP protocol via macOS' SecureTransport implementation, reads\n  could stall at the end of the session and only continue after a timeout of 60\n  seconds was reached.\n\n- The filesystem-based reference callback didn't corectly initialize the backend\n  version.\n\n- A segmentation fault was fixed when calling `git_blame_buffer()` for files\n  that were modified and added to the index.\n\n- A backwards-incompatible change was introduced when we moved some structures\n  from \"git2/credentials.h\" into \"git2/sys/credentials.h\". This was fixed in the\n  case where you do not use hard deprecation.\n\n- Improved error handling in various places.\n\n\nv0.99\n-----\n\nThis is v0.99 \"Torschlusspanik\".  This will be the last minor release\nbefore libgit2 v1.0.  We expect to only respond to bugs in this release,\nto stabilize it for next major release.\n\nIt contains significant refactorings, but is expected to be API-compatible\nwith v0.28.0.\n\n### Changes or improvements\n\n* When fetching from an anonymous remote using a URL with authentication\n  information provided in the URL (eg `https://foo:bar@example.com/repo`),\n  we would erroneously include the literal URL in the FETCH_HEAD file.\n  We now remove that to match git's behavior.\n\n* Some credential structures, enums and values have been renamed:\n  `git_cred` is now `git_credential`.  `git_credtype_t` is now\n  `git_credential_t`.  Functions and types beginning with\n  `git_cred_` now begin with `git_credential`, and constants beginning\n  with `GIT_CREDTYPE` now begin with `GIT_CREDENTIAL`.  The former names\n  are deprecated.\n\n* Several function signatures have been changed to return an `int` to\n  indicate error conditions.  We encourage you to check them for errors\n  in the standard way. \n\n  * `git_attr_cache_flush`\n  * `git_error_set_str`\n  * `git_index_name_clear`\n  * `git_index_reuc_clear`\n  * `git_libgit2_version`\n  * `git_mempack_reset`\n  * `git_oid_cpy`\n  * `git_oid_fmt`\n  * `git_oid_fromraw`\n  * `git_oid_nfmt`\n  * `git_oid_pathfmt`\n  * `git_remote_stop`\n  * `git_remote_disconnect`\n  * `git_repository__cleanup`\n  * `git_repository_set_config`\n  * `git_repository_set_index`\n  * `git_repository_set_odb`\n  * `git_repository_set_refdb`\n  * `git_revwalk_reset`\n  * `git_revwalk_simplify_first_parent`\n  * `git_revwalk_sorting`\n  * `git_treebuilder_clear`\n  * `git_treebuilder_filter`\n\n* The NTLM and Negotiate authentication mechanisms are now supported when\n  talking to git implementations hosted on Apache or nginx servers.\n\n* The `HEAD` symbolic reference can no longer be deleted.\n\n* `git_merge_driver_source_repo` no longer returns a `const git_repository *`,\n  it now returns a non-`const` `git_repository *`.\n\n* Relative symbolic links are now supported on Windows when `core.symlinks`\n  is enabled.\n\n* Servers that provide query parameters with a redirect are now supported.\n\n* `git_submodule_sync` will now resolve relative URLs.\n\n* When creating git endpoint URLs, double-slashes are no longer used when\n  the given git URL has a trailing slash.\n\n* On Windows, a `DllMain` function is no longer included and thread-local\n  storage has moved to fiber-local storage in order to prevent race\n  conditions during shutdown.\n\n* The tracing mechanism (`GIT_TRACE`) is now enabled by default and does\n  not need to be explicitly enabled in CMake.\n\n* The size of Git objects is now represented by `git_object_size_t`\n  instead of `off_t`.\n\n* Binary patches without data can now be parsed.\n\n* A configuration snapshot can now be created from another configuration\n  snapshot, not just a \"true\" configuration object.\n\n* The `git_commit_with_signature` API will now ensure that referenced\n  objects exist in the object database.\n\n* Stash messages containing newlines will now be replaced with spaces;\n  they will no longer be (erroneously) written to the repository.\n\n* `git_commit_create_with_signature` now verifies the commit information\n  to ensure that it points to a valid tree and valid parents.\n\n* `git_apply` has an option `GIT_APPLY_CHECK` that will only do a dry-run.\n  The index and working directory will remain unmodified, and application\n  will report if it would have worked.\n\n* Patches produced by Mercurial (those that lack some git extended headers)\n  can now be parsed and applied.\n\n* Reference locks are obeyed correctly on POSIX platforms, instead of\n  being removed.\n\n* Patches with empty new files can now be read and applied.\n\n* `git_apply_to_tree` can now correctly apply patches that add new files.\n\n* The program data configuration on Windows (`C:\\ProgramData\\Git\\config`)\n  must be owned by an administrator, a system account or the current user\n  to be read.\n\n* `git_blob_filtered_content` is now deprecated in favor of `git_blob_filter`.\n\n* Configuration files can now be included conditionally using the\n  `onbranch` conditional.\n\n* Checkout can now properly create and remove symbolic links to directories\n  on Windows.\n\n* Stash no longer recomputes trees when committing a worktree, for\n  improved performance.\n\n* Repository templates can now include a `HEAD` file to default the\n  initial default branch.\n\n* Some configuration structures, enums and values have been renamed:\n  `git_cvar_map` is now `git_configmap`, `git_cvar_t` is now\n  `git_configmap_t`, `GIT_CVAR_FALSE` is now `GIT_CONFIGMAP_FALSE`,\n  `GIT_CVAR_TRUE` is now `GIT_CONFIGMAP_TRUE`, `GIT_CVAR_INT32` is now\n  `GIT_CONFIGMAP_INT32`, and `GIT_CVAR_STRING` is now `GIT_CONFIGMAP_STRING`.\n  The former names are deprecated.\n\n* Repositories can now be created at the root of a Windows drive.\n\n* Configuration lookups are now more efficiently cached.\n\n* `git_commit_create_with_signature` now supports a `NULL` signature,\n  which will create a commit without adding a signature.\n\n* When a repository lacks an `info` \"common directory\", we will no\n  longer erroneously return `GIT_ENOTFOUND` for all attribute lookups.\n\n* Several attribute macros have been renamed: `GIT_ATTR_TRUE` is now\n  `GIT_ATTR_IS_TRUE`, `GIT_ATTR_FALSE` is now `GIT_ATTR_IS_FALSE`,\n  `GIT_ATTR_UNSPECIFIED` is now `GIT_ATTR_IS_UNSPECIFIED`.  The \n  attribute enum `git_attr_t` is now `git_attr_value_t` and its\n  values have been renamed: `GIT_ATTR_UNSPECIFIED_T` is now\n  `GIT_ATTR_VALUE_UNSPECIFIED`, `GIT_ATTR_TRUE_T` is now\n  `GIT_ATTR_VALUE_TRUE`, `GIT_ATTR_FALSE_T` is now `GIT_ATTR_VALUE_FALSE`,\n  and `GIT_ATTR_VALUE_T` is now `GIT_ATTR_VALUE_STRING`.  The\n  former names are deprecated.\n\n* `git_object__size` is now `git_object_size`.  The former name is\n  deprecated.\n\n* `git_tag_create_frombuffer` is now `git_tag_create_from_buffer`.  The\n  former name is deprecated.\n\n* Several blob creation functions have been renamed:\n  `git_blob_create_frombuffer` is now named `git_blob_create_from_buffer`,\n  `git_blob_create_fromdisk` is now named `git_blob_create_from_disk`,\n  `git_blob_create_fromworkdir` is now named `git_blob_create_from_workdir`,\n  `git_blob_create_fromstream` is now named `git_blob_create_from_stream`,\n  and `git_blob_create_fromstream_commit` is now named\n  `git_blob_create_from_stream_commit`.  The former names are deprecated.\n\n* The function `git_oid_iszero` is now named `git_oid_is_zero`.  The\n  former name is deprecated.\n\n* Pattern matching is now done using `wildmatch` instead of `fnmatch`\n  for compatibility with git.\n\n* The option initialization functions suffixed by `init_options` are now\n  suffixed with `options_init`.  (For example, `git_checkout_init_options`\n  is now `git_checkout_options_init`.)  The former names are deprecated.\n\n* NTLM2 authentication is now supported on non-Windows platforms.\n\n* The `git_cred_sign_callback` callback is now named `git_cred_sign_cb`.\n  The `git_cred_ssh_interactive_callback` callback is now named\n  `git_cred_ssh_interactive_cb`.\n\n* Ignore files now:\n\n  * honor escaped trailing whitespace.\n  * do not incorrectly negate sibling paths of a negated pattern.\n  * honor rules that stop ignoring files after a wildcard\n\n* Attribute files now:\n\n  * honor leading and trailing whitespace.\n  * treat paths beginning with `\\` as absolute only on Windows.\n  * properly handle escaped characters.\n  * stop reading macros defined in subdirectories\n\n* The C locale is now correctly used when parsing regular expressions.\n\n* The system PCRE2 or PCRE regular expression libraries are now used\n  when `regcomp_l` is not available on the system.  If none of these\n  are available on the system, an included version of PCRE is used.\n\n* Wildcards in reference specifications are now supported beyond simply\n  a bare wildcard (`*`) for compatibility with git.\n\n* When `git_ignore_path_is_ignored` is provided a path with a trailing\n  slash (eg, `dir/`), it will now treat it as a directory for the\n  purposes of ignore matching.\n\n* Patches that add or remove a file with a space in the path can now\n  be correctly parsed.\n\n* The `git_remote_completion_type` type is now `git_remote_completion_t`.\n  The former name is deprecated.\n\n* The `git_odb_backend_malloc` is now `git_odb_backend_data_alloc`.  The\n  former name is deprecated.\n\n* The `git_transfer_progress_cb` callback is now `git_indexer_progress_cb`\n  and the `git_transfer_progress` structure is now `git_indexer_progress`.\n  The former names are deprecated.\n\n* The example projects are now contained in a single `lg2` executable\n  for ease of use.\n\n* libgit2 now correctly handles more URLs, such as\n  `http://example.com:/repo.git` (colon but no port),\n  `http://example.com` (no path),\n  and `http://example.com:8080/` (path is /, nonstandard port).\n\n* A carefully constructed commit object with a very large number\n  of parents may lead to potential out-of-bounds writes or\n  potential denial of service.\n\n* The ProgramData configuration file is always read for compatibility\n  with Git for Windows and Portable Git installations.  The ProgramData\n  location is not necessarily writable only by administrators, so we\n  now ensure that the configuration file is owned by the administrator\n  or the current user.\n\n### API additions\n\n* The SSH host key now supports SHA-256 when `GIT_CERT_SSH_SHA256` is set.\n\n* The diff format option `GIT_DIFF_FORMAT_PATCH_ID` can now be used to\n  emit an output like `git patch-id`.\n\n* The `git_apply_options_init` function will initialize a\n  `git_apply_options` structure.\n\n* The remote callbacks structure adds a `git_url_resolve_cb` callback\n  that is invoked when connecting to a server, so that applications\n  may edit or replace the URL before connection.\n\n* The information about the original `HEAD` in a rebase operation is\n  available with `git_rebase_orig_head_name`.  Its ID is available with\n  `git_rebase_orig_head_id`.  The `onto` reference name is available with\n  `git_rebase_onto_name` and its ID is available with `git_rebase_onto_id`.\n\n* ODB backends can now free backend data when an error occurs during its\n  backend data creation using `git_odb_backend_data_free`.\n\n* Options may be specified to `git_repository_foreach_head` to control\n  its behavior: `GIT_REPOSITORY_FOREACH_HEAD_SKIP_REPO` will not skip\n  the main repository's HEAD reference, while\n  `GIT_REPOSITORY_FOREACH_HEAD_SKIP_WORKTREES` will now skip the\n  worktree HEAD references.\n\n* The `GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS` option can be specified to\n  `git_libgit2_opts()` to avoid looking for `.keep` files that correspond\n  to packfiles.  This setting can improve performance when packfiles are\n  stored on high-latency filesystems like network filesystems.\n\n* Blobs can now be filtered with `git_blob_filter`, which allows for\n  options to be set with `git_blob_filter_options`, including\n  `GIT_FILTER_NO_SYSTEM_ATTRIBUTES` to disable filtering with system-level\n  attributes in `/etc/gitattributes` and `GIT_ATTR_CHECK_INCLUDE_HEAD` to\n  enable filtering with `.gitattributes` files in the HEAD revision.\n\n### API removals\n\n* The unused `git_headlist_cb` function declaration was removed.\n\n* The unused `git_time_monotonic` API is removed.\n\n* The erroneously exported `inttypes.h` header was removed.\n\n# Security Fixes\n\n- CVE-2019-1348: the fast-import stream command \"feature\n  export-marks=path\" allows writing to arbitrary file paths. As\n  libgit2 does not offer any interface for fast-import, it is not\n  susceptible to this vulnerability.\n\n- CVE-2019-1349: by using NTFS 8.3 short names, backslashes or\n  alternate filesystreams, it is possible to cause submodules to\n  be written into pre-existing directories during a recursive\n  clone using git. As libgit2 rejects cloning into non-empty\n  directories by default, it is not susceptible to this\n  vulnerability.\n\n- CVE-2019-1350: recursive clones may lead to arbitrary remote\n  code executing due to improper quoting of command line\n  arguments. As libgit2 uses libssh2, which does not require us\n  to perform command line parsing, it is not susceptible to this\n  vulnerability.\n\n- CVE-2019-1351: Windows provides the ability to substitute\n  drive letters with arbitrary letters, including multi-byte\n  Unicode letters. To fix any potential issues arising from\n  interpreting such paths as relative paths, we have extended\n  detection of DOS drive prefixes to accomodate for such cases.\n\n- CVE-2019-1352: by using NTFS-style alternative file streams for\n  the \".git\" directory, it is possible to overwrite parts of the\n  repository. While this has been fixed in the past for Windows,\n  the same vulnerability may also exist on other systems that\n  write to NTFS filesystems. We now reject any paths starting\n  with \".git:\" on all systems.\n\n- CVE-2019-1353: by using NTFS-style 8.3 short names, it was\n  possible to write to the \".git\" directory and thus overwrite\n  parts of the repository, leading to possible remote code\n  execution. While this problem was already fixed in the past for\n  Windows, other systems accessing NTFS filesystems are\n  vulnerable to this issue too. We now enable NTFS protecions by\n  default on all systems to fix this attack vector.\n\n- CVE-2019-1354: on Windows, backslashes are not a valid part of\n  a filename but are instead interpreted as directory separators.\n  As other platforms allowed to use such paths, it was possible\n  to write such invalid entries into a Git repository and was\n  thus an attack vector to write into the \".git\" dierctory. We\n  now reject any entries starting with \".git\\\" on all systems.\n\n- CVE-2019-1387: it is possible to let a submodule's git\n  directory point into a sibling's submodule directory, which may\n  result in overwriting parts of the Git repository and thus lead\n  to arbitrary command execution. As libgit2 doesn't provide any\n  way to do submodule clones natively, it is not susceptible to\n  this vulnerability. Users of libgit2 that have implemented\n  recursive submodule clones manually are encouraged to review\n  their implementation for this vulnerability.\n\n### Breaking API changes\n\n* The \"private\" implementation details of the `git_cred` structure have been\n  moved to a dedicated `git2/sys/cred.h` header, to clarify that the underlying\n  structures are only provided for custom transport implementers.\n  The breaking change is that the `username` member of the underlying struct\n  is now hidden, and a new `git_cred_get_username` function has been provided.\n\n* Some errors of class `GIT_ERROR_NET` now have class `GIT_ERROR_HTTP`.\n  Most authentication failures now have error code `GIT_EAUTH` instead of `GIT_ERROR`.\n\n### Breaking CMake configuration changes\n\n* The CMake option to use a system http-parser library, instead of the\n  bundled dependency, has changed.  This is due to a deficiency in\n  http-parser that we have fixed in our implementation.  The bundled\n  library is now the default, but if you wish to force the use of the\n  system http-parser implementation despite incompatibilities, you can\n  specify `-DUSE_HTTP_PARSER=system` to CMake.\n\n* The interactions between `USE_HTTPS` and `SHA1_BACKEND` have been\n  streamlined. The detection was moved to a new `USE_SHA1`, modeled after\n  `USE_HTTPS`, which takes the values \"CollisionDetection/Backend/Generic\", to\n  better match how the \"hashing backend\" is selected, the default (ON) being\n  \"CollisionDetection\". If you were using `SHA1_BACKEND` previously, you'll\n  need to check the value you've used, or switch to the autodetection.\n\n### Authors\n\nThe following individuals provided changes that were included in this\nrelease:\n\n* Aaron Patterson\n* Alberto Fanjul\n* Anders Borum\n* Augie Fackler\n* Augustin Fabre\n* Ayush Shridhar\n* brian m. carlson\n* buddyspike\n* Carlos Mart\u00edn Nieto\n* cheese1\n* Dan Skorupski\n* Daniel Cohen Gindi\n* Dave Lee\n* David Brooks\n* David Turner\n* Denis Laxalde\n* Dhruva Krishnamurthy\n* Dominik Ritter\n* Drew DeVault\n* Edward Thomson\n* Eric Huss\n* Erik Aigner\n* Etienne Samson\n* Gregory Herrero\n* Heiko Voigt\n* Ian Hattendorf\n* Jacques Germishuys\n* Janardhan Pulivarthi\n* Jason Haslam\n* Johannes Schindelin\n* Jordan Wallet\n* Josh Bleecher Snyder\n* kas\n* kdj0c\n* Laurence McGlashan\n* lhchavez\n* Lukas Berk\n* Max Kostyukevich\n* Patrick Steinhardt\n* pcpthm\n* Remy Suen\n* Robert Coup\n* romkatv\n* Scott Furry\n* Sebastian Henke\n* Stefan Widgren\n* Steve King Jr\n* Sven Strickroth\n* Tobias Nie\u00dfen\n* Tyler Ang-Wanek\n* Tyler Wanek\n\n---------------------------------------------------------------------\n\nv0.28\n-----\n\n### Changes or improvements\n\n* The library is now always built with cdecl calling conventions on\n  Windows; the ability to build a stdcall library has been removed.\n\n* Reference log creation now honors `core.logallrefupdates=always`.\n\n* Fix some issues with the error-reporting in the OpenSSL backend.\n\n* HTTP proxy support is now builtin; libcurl is no longer used to support\n  proxies and is removed as a dependency.\n\n* Certificate and credential callbacks can now return `GIT_PASSTHROUGH`\n  to decline to act; libgit2 will behave as if there was no callback set\n  in the first place.\n\n* The line-ending filtering logic - when checking out files - has been\n  updated to match newer git (>= git 2.9) for proper interoperability.\n\n* Symbolic links are now supported on Windows when `core.symlinks` is set\n  to `true`.\n\n* Submodules with names which attempt to perform path traversal now have their\n  configuration ignored. Such names were blindly appended to the\n  `$GIT_DIR/modules` and a malicious name could lead to an attacker writing to\n  an arbitrary location. This matches git's handling of CVE-2018-11235.\n\n* Object validation is now performed during tree creation in the\n  `git_index_write_tree_to` API.\n\n* Configuration variable may now be specified on the same line as a section\n  header; previously this was erroneously a parser error.\n\n* When an HTTP server supports both NTLM and Negotiate authentication\n  mechanisms, we would previously fail to authenticate with any mechanism.\n\n* The `GIT_OPT_SET_PACK_MAX_OBJECTS` option can now set the maximum\n  number of objects allowed in a packfile being downloaded; this can help\n  limit the maximum memory used when fetching from an untrusted remote.\n\n* Line numbers in diffs loaded from patch files were not being populated;\n  they are now included in the results.\n\n* The repository's index is reloaded from disk at the beginning of\n  `git_merge` operations to ensure that it is up-to-date.\n\n* Mailmap handling APIs have been introduced, and the new commit APIs\n  `git_commit_committer_with_mailmap` and `git_commit_author_with_mailmap`\n  will use the mailmap to resolve the committer and author information.\n  In addition, blame will use the mailmap given when the\n  `GIT_BLAME_USE_MAILMAP` option.\n\n* Ignore handling for files in ignored folders would be ignored.\n\n* Worktrees can now be backed by bare repositories.\n\n* Trailing spaces are supported in `.gitignore` files, these spaces were\n  previously (and erroneously) treated as part of the pattern.\n\n* The library can now be built with mbedTLS support for HTTPS.\n\n* The diff status character 'T' will now be presented by the\n  `git_diff_status_char` API for diff entries that change type.\n\n* Revision walks previously would sometimes include commits that should\n  have been ignored; this is corrected.\n\n* Revision walks are now more efficient when the output is unsorted;\n  we now avoid walking all the way to the beginning of history unnecessarily.\n\n* Error-handling around index extension loading has been fixed. We were\n  previously always misreporting a truncated index (#4858).\n\n### API additions\n\n* The index may now be iterated atomically using `git_index_iterator`.\n\n* Remote objects can now be created with extended options using the\n  `git_remote_create_with_opts` API.\n\n* Diff objects can now be applied as changes to the working directory,\n  index or both, emulating the `git apply` command.  Additionally,\n  `git_apply_to_tree` can apply those changes to a tree object as a\n  fully in-memory operation.\n\n* You can now swap out memory allocators via the\n  `GIT_OPT_SET_ALLOCATOR` option with `git_libgit2_opts()`.\n\n* You can now ensure that functions do not discard unwritten changes to the\n  index via the `GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY` option to\n  `git_libgit2_opts()`.  This will cause functions that implicitly re-read\n  the index (eg, `git_checkout`) to fail if you have staged changes to the\n  index but you have not written the index to disk.  (Unless the checkout\n  has the FORCE flag specified.)\n\n  At present, this defaults to off, but we intend to enable this more\n  broadly in the future, as a warning or error.  We encourage you to\n  examine your code to ensure that you are not relying on the current\n  behavior that implicitly removes staged changes.\n\n* Reference specifications can be parsed from an arbitrary string with\n  the `git_refspec_parse` API.\n\n* You can now get the name and path of worktrees using the\n  `git_worktree_name` and `git_worktree_path` APIs, respectively.\n\n* The `ref` field has been added to `git_worktree_add_options` to enable\n  the creation of a worktree from a pre-existing branch.\n\n* It's now possible to analyze merge relationships between any two\n  references, not just against `HEAD`, using `git_merge_analysis_for_ref`.\n\n### API removals\n\n* The `git_buf_free` API is deprecated; it has been renamed to\n  `git_buf_dispose` for consistency.  The `git_buf_free` API will be\n  retained for backward compatibility for the foreseeable future.\n\n* The `git_otype` enumeration and its members are deprecated and have\n  been renamed for consistency.  The `GIT_OBJ_` enumeration values are\n  now prefixed with `GIT_OBJECT_`.  The old enumerations and macros\n  will be retained for backward compatibility for the foreseeable future.\n\n* Several index-related APIs have been renamed for consistency.  The\n  `GIT_IDXENTRY_` enumeration values and macros have been renamed to\n  be prefixed with `GIT_INDEX_ENTRY_`.  The `GIT_INDEXCAP` enumeration\n  values are now prefixed with `GIT_INDEX_CAPABILITY_`.  The old\n  enumerations and macros will be retained for backward compatibility\n  for the foreseeable future.\n\n* The error functions and enumeration values have been renamed for\n  consistency.  The `giterr_` functions and values prefix have been\n  renamed to be prefixed with `git_error_`; similarly, the `GITERR_`\n  constants have been renamed to be prefixed with `GIT_ERROR_`.\n  The old enumerations and macros will be retained for backward\n  compatibility for the foreseeable future.\n\n### Breaking API changes\n\n* The default checkout strategy changed from `DRY_RUN` to `SAFE` (#4531).\n\n* Adding a symlink as .gitmodules into the index from the workdir or checking\n  out such files is not allowed as this can make a Git implementation write\n  outside of the repository and bypass the fsck checks for CVE-2018-11235.\n\n---------------------------------------------------------------------\n\nv0.27\n---------\n\n### Changes or improvements\n\n* Improved `p_unlink` in `posix_w32.c` to try and make a file writable\n  before sleeping in the retry loop to prevent unnecessary calls to sleep.\n\n* The CMake build infrastructure has been improved to speed up building time.\n\n* A new CMake option \"-DUSE_HTTPS=<backend>\" makes it possible to explicitly\n  choose an HTTP backend.\n\n* A new CMake option \"-DSHA1_BACKEND=<backend>\" makes it possible to explicitly\n  choose an SHA1 backend. The collision-detecting backend is now the default.\n\n* A new CMake option \"-DUSE_BUNDLED_ZLIB\" makes it possible to explicitly use\n  the bundled zlib library.\n\n* A new CMake option \"-DENABLE_REPRODUCIBLE_BUILDS\" makes it possible to\n  generate a reproducible static archive. This requires support from your\n  toolchain.\n\n* The minimum required CMake version has been bumped to 2.8.11.\n\n* Writing to a configuration file now preserves the case of the key given by the\n  caller for the case-insensitive portions of the key (existing sections are\n  used even if they don't match).\n\n* We now support conditional includes in configuration files.\n\n* Fix for handling re-reading of configuration files with includes.\n\n* Fix for reading patches which contain exact renames only.\n\n* Fix for reading patches with whitespace in the compared files' paths.\n\n* We will now fill `FETCH_HEAD` from all passed refspecs instead of overwriting\n  with the last one.\n\n* There is a new diff option, `GIT_DIFF_INDENT_HEURISTIC` which activates a\n  heuristic which takes into account whitespace and indentation in order to\n  produce better diffs when dealing with ambiguous diff hunks.\n\n* Fix for pattern-based ignore rules where files ignored by a rule cannot be\n  un-ignored by another rule.\n\n* Sockets opened by libgit2 are now being closed on exec(3) if the platform\n  supports it.\n\n* Fix for peeling annotated tags from packed-refs files.\n\n* Fix reading huge loose objects from the object database.\n\n* Fix files not being treated as modified when only the file mode has changed.\n\n* We now explicitly reject adding submodules to the index via\n  `git_index_add_frombuffer`.\n\n* Fix handling of `GIT_DIFF_FIND_RENAMES_FROM_REWRITES` raising `SIGABRT` when\n  one file has been deleted and another file has been rewritten.\n\n* Fix for WinHTTP not properly handling NTLM and Negotiate challenges.\n\n* When using SSH-based transports, we now repeatedly ask for the passphrase to\n  decrypt the private key in case a wrong passphrase is being provided.\n\n* When generating conflict markers, they will now use the same line endings as\n  the rest of the file.\n\n### API additions\n\n* The `git_merge_file_options` structure now contains a new setting,\n  `marker_size`.  This allows users to set the size of markers that\n  delineate the sides of merged files in the output conflict file.\n  By default this is 7 (`GIT_MERGE_CONFLICT_MARKER_SIZE`), which\n  produces output markers like `<<<<<<<` and `>>>>>>>`.\n\n* `git_remote_create_detached()` creates a remote that is not associated\n  to any repository (and does not apply configuration like 'insteadof' rules).\n  This is mostly useful for e.g. emulating `git ls-remote` behavior.\n\n* `git_diff_patchid()` lets you generate patch IDs for diffs.\n\n* `git_status_options` now has an additional field `baseline` to allow creating\n  status lists against different trees.\n\n* New family of functions to allow creating notes for a specific notes commit\n  instead of for a notes reference.\n\n* New family of functions to allow parsing message trailers. This API is still\n  experimental and may change in future releases.\n\n### API removals\n\n### Breaking API changes\n\n* Signatures now distinguish between +0000 and -0000 UTC offsets.\n\n* The certificate check callback in the WinHTTP transport will now receive the\n  `message_cb_payload` instead of the `cred_acquire_payload`.\n\n* We are now reading symlinked directories under .git/refs.\n\n* We now refuse creating branches named \"HEAD\".\n\n* We now refuse reading and writing all-zero object IDs into the\n  object database.\n\n* We now read the effective user's configuration file instead of the real user's\n  configuration in case libgit2 runs as part of a setuid binary.\n\n* The `git_odb_open_rstream` function and its `readstream` callback in the\n  `git_odb_backend` interface have changed their signatures to allow providing\n  the object's size and type to the caller.\n\n---------------------------------------------------------------------\n    \nv0.26\n-----\n\n### Changes or improvements\n\n* Support for opening, creating and modifying worktrees.\n\n* We can now detect SHA1 collisions resulting from the SHAttered attack. These\n  checks can be enabled at build time via `-DUSE_SHA1DC`.\n\n* Fix for missing implementation of `git_merge_driver_source` getters.\n\n* Fix for installed pkg-config file being broken when the prefix contains\n  spaces.\n\n* We now detect when the hashsum of on-disk objects does not match their\n  expected hashsum.\n\n* We now support open-ended ranges (e.g. \"master..\", \"...master\") in our\n  revision range parsing code.\n\n* We now correctly compute ignores with leading \"/\" in subdirectories.\n\n* We now optionally call `fsync` on loose objects, packfiles and their indexes,\n  loose references and packed reference files.\n\n* We can now build against OpenSSL v1.1 and against LibreSSL.\n\n* `GIT_MERGE_OPTIONS_INIT` now includes a setting to perform rename detection.\n  This aligns this structure with the default by `git_merge` and\n  `git_merge_trees` when `NULL` was provided for the options.\n\n* Improvements for reading index v4 files.\n\n* Perform additional retries for filesystem operations on Windows when files\n  are temporarily locked by other processes.\n\n### API additions\n\n* New family of functions to handle worktrees:\n\n    * `git_worktree_list()` lets you look up worktrees for a repository.\n    * `git_worktree_lookup()` lets you get a specific worktree.\n    * `git_worktree_open_from_repository()` lets you get the associated worktree\n      of a repository.\n      a worktree.\n    * `git_worktree_add` lets you create new worktrees.\n    * `git_worktree_prune` lets you remove worktrees from disk.\n    * `git_worktree_lock()` and `git_worktree_unlock()` let you lock\n      respectively unlock a worktree.\n    * `git_repository_open_from_worktree()` lets you open a repository via\n    * `git_repository_head_for_worktree()` lets you get the current `HEAD` for a\n      linked worktree.\n    * `git_repository_head_detached_for_worktree()` lets you check whether a\n      linked worktree is in detached HEAD mode.\n\n* `git_repository_item_path()` lets you retrieve paths for various repository\n  files.\n\n* `git_repository_commondir()` lets you retrieve the common directory of a\n  repository.\n\n* `git_branch_is_checked_out()` allows you to check whether a branch is checked\n  out in a repository or any of its worktrees.\n\n* `git_repository_submodule_cache_all()` and\n  `git_repository_submodule_cache_clear()` functions allow you to prime or clear\n  the submodule cache of a repository.\n\n* You can disable strict hash verifications via the\n  `GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION` option with `git_libgit2_opts()`.\n\n* You can enable us calling `fsync` for various files inside the \".git\"\n  directory by setting the `GIT_OPT_ENABLE_FSYNC_GITDIR` option with\n  `git_libgit2_opts()`.\n\n* You can now enable \"offset deltas\" when creating packfiles and negotiating\n  packfiles with a remote server by setting `GIT_OPT_ENABLE_OFS_DELTA` option\n  with `GIT_libgit2_opts()`.\n\n* You can now set the default share mode on Windows for opening files using\n  `GIT_OPT_SET_WINDOWS_SHAREMODE` option with `git_libgit2_opts()`.\n  You can query the current share mode with `GIT_OPT_GET_WINDOWS_SHAREMODE`.\n\n* `git_transport_smart_proxy_options()' enables you to get the proxy options for\n  smart transports.\n\n* The `GIT_FILTER_INIT` macro and the `git_filter_init` function are provided\n  to initialize a `git_filter` structure.\n\n### Breaking API changes\n\n* `clone_checkout_strategy` has been removed from\n  `git_submodule_update_option`. The checkout strategy used to clone will\n  be the same strategy specified in `checkout_opts`.\n\nv0.25\n-------\n\n### Changes or improvements\n\n* Fix repository discovery with `git_repository_discover` and\n  `git_repository_open_ext` to match git's handling of a ceiling\n  directory at the current directory. git only checks ceiling\n  directories when its search ascends to a parent directory.  A ceiling\n  directory matching the starting directory will not prevent git from\n  finding a repository in the starting directory or a parent directory.\n\n* Do not fail when deleting remotes in the presence of broken\n  global configs which contain branches.\n\n* Support for reading and writing git index v4 files\n\n* Improve the performance of the revwalk and bring us closer to git's code.\n\n* The reference db has improved support for concurrency and returns `GIT_ELOCKED`\n  when an operation could not be performed due to locking.\n\n* Nanosecond resolution is now activated by default, following git's change to\n  do this.\n\n* We now restrict the set of ciphers we let OpenSSL use by default.\n\n* Users can now register their own merge drivers for use with `.gitattributes`.\n  The library also gained built-in support for the union merge driver.\n\n* The default for creating references is now to validate that the object does\n  exist.\n\n* Add `git_proxy_options` which is used by the different networking\n  implementations to let the caller specify the proxy settings instead of\n  relying on the environment variables.\n\n### API additions\n\n* You can now get the user-agent used by libgit2 using the\n  `GIT_OPT_GET_USER_AGENT` option with `git_libgit2_opts()`.\n  It is the counterpart to `GIT_OPT_SET_USER_AGENT`.\n\n* The `GIT_OPT_SET_SSL_CIPHERS` option for `git_libgit2_opts()` lets you specify\n  a custom list of ciphers to use for OpenSSL.\n\n* `git_commit_create_buffer()` creates a commit and writes it into a\n  user-provided buffer instead of writing it into the object db. Combine it with\n  `git_commit_create_with_signature()` in order to create a commit with a\n  cryptographic signature.\n\n* `git_blob_create_fromstream()` and\n  `git_blob_create_fromstream_commit()` allow you to create a blob by\n  writing into a stream. Useful when you do not know the final size or\n  want to copy the contents from another stream.\n\n* New flags for `git_repository_open_ext`:\n\n    * `GIT_REPOSITORY_OPEN_NO_DOTGIT` - Do not check for a repository by\n      appending `/.git` to the `start_path`; only open the repository if\n      `start_path` itself points to the git directory.\n    * `GIT_REPOSITORY_OPEN_FROM_ENV` - Find and open a git repository,\n      respecting the environment variables used by the git command-line\n      tools. If set, `git_repository_open_ext` will ignore the other\n      flags and the `ceiling_dirs` argument, and will allow a NULL\n      `path` to use `GIT_DIR` or search from the current directory. The\n      search for a repository will respect `$GIT_CEILING_DIRECTORIES`\n      and `$GIT_DISCOVERY_ACROSS_FILESYSTEM`.  The opened repository\n      will respect `$GIT_INDEX_FILE`, `$GIT_NAMESPACE`,\n      `$GIT_OBJECT_DIRECTORY`, and `$GIT_ALTERNATE_OBJECT_DIRECTORIES`.\n      In the future, this flag will also cause `git_repository_open_ext`\n      to respect `$GIT_WORK_TREE` and `$GIT_COMMON_DIR`; currently,\n      `git_repository_open_ext` with this flag will error out if either\n      `$GIT_WORK_TREE` or `$GIT_COMMON_DIR` is set.\n\n* `git_diff_from_buffer()` can create a `git_diff` object from the contents\n  of a git-style patch file.\n\n* `git_index_version()` and `git_index_set_version()` to get and set\n  the index version\n\n* `git_odb_expand_ids()` lets you check for the existence of multiple\n  objects at once.\n\n* The new `git_blob_dup()`, `git_commit_dup()`, `git_tag_dup()` and\n  `git_tree_dup()` functions provide type-specific wrappers for\n  `git_object_dup()` to reduce noise and increase type safety for callers.\n\n* `git_reference_dup()` lets you duplicate a reference to aid in ownership\n  management and cleanup.\n\n* `git_signature_from_buffer()` lets you create a signature from a string in the\n  format that appear in objects.\n\n* `git_tree_create_updated()` lets you create a tree based on another one\n  together with a list of updates. For the covered update cases, it's more\n  efficient than the `git_index` route.\n\n* `git_apply_patch()` applies hunks from a `git_patch` to a buffer.\n\n* `git_diff_to_buf()` lets you print an entire diff directory to a buffer,\n  similar to how `git_patch_to_buf()` works.\n\n* `git_proxy_init_options()` is added to initialize a `git_proxy_options`\n  structure at run-time.\n\n* `git_merge_driver_register()`, `git_merge_driver_unregister()` let you\n  register and unregister a custom merge driver to be used when `.gitattributes`\n  specifies it.\n\n* `git_merge_driver_lookup()` can be used to look up a merge driver by name.\n\n* `git_merge_driver_source_repo()`, `git_merge_driver_source_ancestor()`,\n  `git_merge_driver_source_ours()`, `git_merge_driver_source_theirs()`,\n  `git_merge_driver_source_file_options()` added as accessors to\n  `git_merge_driver_source`.\n\n### API removals\n\n* `git_blob_create_fromchunks()` has been removed in favour of\n  `git_blob_create_fromstream()`.\n\n### Breaking API changes\n\n* `git_packbuilder_object_count` and `git_packbuilder_written` now\n  return a `size_t` instead of a `uint32_t` for more thorough\n  compatibility with the rest of the library.\n\n* `git_packbuiler_progress` now provides explicitly sized `uint32_t`\n  values instead of `unsigned int`.\n\n* `git_diff_file` now includes an `id_abbrev` field that reflects the\n  number of nibbles set in the `id` field.\n\n* `git_odb_backend` now has a `freshen` function pointer.  This optional\n  function pointer is similar to the `exists` function, but it will update\n  a last-used marker.  For filesystem-based object databases, this updates\n  the timestamp of the file containing the object, to indicate \"freshness\".\n  If this is `NULL`, then it will not be called and the `exists` function\n  will be used instead.\n\n* `git_remote_connect()` now accepts `git_proxy_options` argument, and\n  `git_fetch_options` and `git_push_options` each have a `proxy_opts` field.\n\n* `git_merge_options` now provides a `default_driver` that can be used\n  to provide the name of a merge driver to be used to handle files changed\n  during a merge.\n\n---------------------------------------------------------------------\n\nv0.24\n-------\n\n### Changes or improvements\n\n* Custom merge drivers can now be registered, which allows callers to\n  configure callbacks to honor `merge=driver` configuration in\n  `.gitattributes`.\n\n* Custom filters can now be registered with wildcard attributes, for\n  example `filter=*`.  Consumers should examine the attributes parameter\n  of the `check` function for details.\n\n* Symlinks are now followed when locking a file, which can be\n  necessary when multiple worktrees share a base repository.\n\n* You can now set your own user-agent to be sent for HTTP requests by\n  using the `GIT_OPT_SET_USER_AGENT` with `git_libgit2_opts()`.\n\n* You can set custom HTTP header fields to be sent along with requests\n  by passing them in the fetch and push options.\n\n* Tree objects are now assumed to be sorted. If a tree is not\n  correctly formed, it will give bad results. This is the git approach\n  and cuts a significant amount of time when reading the trees.\n\n* Filter registration is now protected against concurrent\n  registration.\n\n* Filenames which are not valid on Windows in an index no longer cause\n  to fail to parse it on that OS.\n\n* Rebases can now be performed purely in-memory, without touching the\n  repository's workdir.\n\n* When adding objects to the index, or when creating new tree or commit\n  objects, the inputs are validated to ensure that the dependent objects\n  exist and are of the correct type.  This object validation can be\n  disabled with the GIT_OPT_ENABLE_STRICT_OBJECT_CREATION option.\n\n* The WinHTTP transport's handling of bad credentials now behaves like\n  the others, asking for credentials again.\n\n### API additions\n\n* `git_config_lock()` has been added, which allow for\n  transactional/atomic complex updates to the configuration, removing\n  the opportunity for concurrent operations and not committing any\n  changes until the unlock.\n\n* `git_diff_options` added a new callback `progress_cb` to report on the\n  progress of the diff as files are being compared. The documentation of\n  the existing callback `notify_cb` was updated to reflect that it only\n  gets called when new deltas are added to the diff.\n\n* `git_fetch_options` and `git_push_options` have gained a `custom_headers`\n  field to set the extra HTTP header fields to send.\n\n* `git_stream_register_tls()` lets you register a callback to be used\n  as the constructor for a TLS stream instead of the libgit2 built-in\n  one.\n\n* `git_commit_header_field()` allows you to look up a specific header\n  field in a commit.\n\n* `git_commit_extract_signature()` extracts the signature from a\n  commit and gives you both the signature and the signed data so you\n  can verify it.\n\n### API removals\n\n* No APIs were removed in this version.\n\n### Breaking API changes\n\n* The `git_merge_tree_flag_t` is now `git_merge_flag_t`.  Subsequently,\n  its members are no longer prefixed with `GIT_MERGE_TREE_FLAG` but are\n  now prefixed with `GIT_MERGE_FLAG`, and the `tree_flags` field of the\n  `git_merge_options` structure is now named `flags`.\n\n* The `git_merge_file_flags_t` enum is now `git_merge_file_flag_t` for\n  consistency with other enum type names.\n\n* `git_cert` descendent types now have a proper `parent` member\n\n* It is the responsibility of the refdb backend to decide what to do\n  with the reflog on ref deletion. The file-based backend must delete\n  it, a database-backed one may wish to archive it.\n\n* `git_config_backend` has gained two entries. `lock` and `unlock`\n  with which to implement the transactional/atomic semantics for the\n  configuration backend.\n\n* `git_index_add` and `git_index_conflict_add()` will now use the case\n  as provided by the caller on case insensitive systems.  Previous\n  versions would keep the case as it existed in the index.  This does\n  not affect the higher-level `git_index_add_bypath` or\n  `git_index_add_frombuffer` functions.\n\n* The `notify_payload` field of `git_diff_options` was renamed to `payload`\n  to reflect that it's also the payload for the new progress callback.\n\n* The `git_config_level_t` enum has gained a higher-priority value\n  `GIT_CONFIG_LEVEL_PROGRAMDATA` which represent a rough Windows equivalent\n  to the system level configuration.\n\n* `git_rebase_options` now has a `merge_options` field.\n\n* The index no longer performs locking itself. This is not something\n  users of the library should have been relying on as it's not part of\n  the concurrency guarantees.\n\n* `git_remote_connect()` now takes a `custom_headers` argument to set\n  the extra HTTP header fields to send.\n\n---------------------------------------------------------------------\n\nv0.23\n------\n\n### Changes or improvements\n\n* Patience and minimal diff drivers can now be used for merges.\n\n* Merges can now ignore whitespace changes.\n\n* Updated binary identification in CRLF filtering to avoid false positives in\n  UTF-8 files.\n\n* Rename and copy detection is enabled for small files.\n\n* Checkout can now handle an initial checkout of a repository, making\n  `GIT_CHECKOUT_SAFE_CREATE` unnecessary for users of clone.\n\n* The signature parameter in the ref-modifying functions has been\n  removed. Use `git_repository_set_ident()` and\n  `git_repository_ident()` to override the signature to be used.\n\n* The local transport now auto-scales the number of threads to use\n  when creating the packfile instead of sticking to one.\n\n* Reference renaming now uses the right id for the old value.\n\n* The annotated version of branch creation, HEAD detaching and reset\n  allow for specifying the expression from the user to be put into the\n  reflog.\n\n* `git_rebase_commit` now returns `GIT_EUNMERGED` when you attempt to\n  commit with unstaged changes.\n\n* On Mac OS X, we now use SecureTransport to provide the cryptographic\n  support for HTTPS connections insead of OpenSSL.\n\n* Checkout can now accept an index for the baseline computations via the\n  `baseline_index` member.\n\n* The configuration for fetching is no longer stored inside the\n  `git_remote` struct but has been moved to a `git_fetch_options`. The\n  remote functions now take these options or the callbacks instead of\n  setting them beforehand.\n\n* `git_submodule` instances are no longer cached or shared across\n  lookup. Each submodule represents the configuration at the time of\n  loading.\n\n* The index now uses diffs for `add_all()` and `update_all()` which\n  gives it a speed boost and closer semantics to git.\n\n* The ssh transport now reports the stderr output from the server as\n  the error message, which allows you to get the \"repository not\n  found\" messages.\n\n* `git_index_conflict_add()` will remove staged entries that exist for\n  conflicted paths.\n\n* The flags for a `git_diff_file` will now have the `GIT_DIFF_FLAG_EXISTS`\n  bit set when a file exists on that side of the diff.  This is useful\n  for understanding whether a side of the diff exists in the presence of\n  a conflict.\n\n* The constructor for a write-stream into the odb now takes\n  `git_off_t` instead of `size_t` for the size of the blob, which\n  allows putting large files into the odb on 32-bit systems.\n\n* The remote's push and pull URLs now honor the url.$URL.insteadOf\n  configuration. This allows modifying URL prefixes to a custom\n  value via gitconfig.\n\n* `git_diff_foreach`, `git_diff_blobs`, `git_diff_blob_to_buffer`,\n  and `git_diff_buffers` now accept a new binary callback of type\n  `git_diff_binary_cb` that includes the binary diff information.\n\n* The race condition mitigations described in `racy-git.txt` have been\n  implemented.\n\n* If libcurl is installed, we will use it to connect to HTTP(S)\n  servers.\n\n### API additions\n\n* The `git_merge_options` gained a `file_flags` member.\n\n* Parsing and retrieving a configuration value as a path is exposed\n  via `git_config_parse_path()` and `git_config_get_path()`\n  respectively.\n\n* `git_repository_set_ident()` and `git_repository_ident()` serve to\n  set and query which identity will be used when writing to the\n  reflog.\n\n* `git_config_entry_free()` frees a config entry.\n\n* `git_config_get_string_buf()` provides a way to safely retrieve a\n  string from a non-snapshot configuration.\n\n* `git_annotated_commit_from_revspec()` allows to get an annotated\n  commit from an extended sha synatx string.\n\n* `git_repository_set_head_detached_from_annotated()`,\n  `git_branch_create_from_annotated()` and\n  `git_reset_from_annotated()` allow for the caller to provide an\n  annotated commit through which they can control what expression is\n  put into the reflog as the source/target.\n\n* `git_index_add_frombuffer()` can now create a blob from memory\n  buffer and add it to the index which is attached to a repository.\n\n* The structure `git_fetch_options` has been added to determine the\n  runtime configuration for fetching, such as callbacks, pruning and\n  autotag behaviour. It has the runtime initializer\n  `git_fetch_init_options()`.\n\n* The enum `git_fetch_prune_t` has been added, letting you specify the\n  pruning behaviour for a fetch.\n\n* A push operation will notify the caller of what updates it indends\n  to perform on the remote, which provides similar information to\n  git's pre-push hook.\n\n* `git_stash_apply()` can now apply a stashed state from the stash list,\n  placing the data into the working directory and index.\n\n* `git_stash_pop()` will apply a stashed state (like `git_stash_apply()`)\n  but will remove the stashed state after a successful application.\n\n* A new error code `GIT_EEOF` indicates an early EOF from the\n  server. This typically indicates an error with the URL or\n  configuration of the server, and tools can use this to show messages\n  about failing to communicate with the server.\n\n* A new error code `GIT_EINVALID` indicates that an argument to a\n  function is invalid, or an invalid operation was requested.\n\n* `git_diff_index_to_workdir()` and `git_diff_tree_to_index()` will now\n  produce deltas of type `GIT_DELTA_CONFLICTED` to indicate that the index\n  side of the delta is a conflict.\n\n* The `git_status` family of functions will now produce status of type\n  `GIT_STATUS_CONFLICTED` to indicate that a conflict exists for that file\n  in the index.\n\n* `git_index_entry_is_conflict()` is a utility function to determine if\n  a given index entry has a non-zero stage entry, indicating that it is\n  one side of a conflict.\n\n* It is now possible to pass a keypair via a buffer instead of a\n  path. For this, `GIT_CREDTYPE_SSH_MEMORY` and\n  `git_cred_ssh_key_memory_new()` have been added.\n\n* `git_filter_list_contains` will indicate whether a particular\n  filter will be run in the given filter list.\n\n* `git_commit_header_field()` has been added, which allows retrieving\n  the contents of an arbitrary header field.\n\n* `git_submodule_set_branch()` allows to set the configured branch for\n  a submodule.\n\n### API removals\n\n* `git_remote_save()` and `git_remote_clear_refspecs()` have been\n  removed. Remote's configuration is changed via the configuration\n  directly or through a convenience function which performs changes to\n  the configuration directly.\n\n* `git_remote_set_callbacks()`, `git_remote_get_callbacks()` and\n  `git_remote_set_transport()` have been removed and the remote no\n  longer stores this configuration.\n\n* `git_remote_set_fetch_refpecs()` and\n  `git_remote_set_push_refspecs()` have been removed. There is no\n  longer a way to set the base refspecs at run-time.\n\n* `git_submodule_save()` has been removed. The submodules are no\n  longer configured via the objects.\n\n* `git_submodule_reload_all()` has been removed as we no longer cache\n  submodules.\n\n### Breaking API changes\n\n* `git_smart_subtransport_cb` now has a `param` parameter.\n\n* The `git_merge_options` structure member `flags` has been renamed\n  to `tree_flags`.\n\n* The `git_merge_file_options` structure member `flags` is now\n  an unsigned int. It was previously a `git_merge_file_flags_t`.\n\n* `GIT_CHECKOUT_SAFE_CREATE` has been removed.  Most users will generally\n  be able to switch to `GIT_CHECKOUT_SAFE`, but if you require missing\n  file handling during checkout, you may now use `GIT_CHECKOUT_SAFE |\n  GIT_CHECKOUT_RECREATE_MISSING`.\n\n* The `git_clone_options` and `git_submodule_update_options`\n  structures no longer have a `signature` field.\n\n* The following functions have removed the signature and/or log message\n  parameters in favour of git-emulating ones.\n\n    * `git_branch_create()`, `git_branch_move()`\n    * `git_rebase_init()`, `git_rebase_abort()`\n    * `git_reference_symbolic_create_matching()`,\n      `git_reference_symbolic_create()`, `git_reference_create()`,\n      `git_reference_create_matching()`,\n      `git_reference_symbolic_set_target()`,\n      `git_reference_set_target()`, `git_reference_rename()`\n    * `git_remote_update_tips()`, `git_remote_fetch()`, `git_remote_push()`\n    * `git_repository_set_head()`,\n      `git_repository_set_head_detached()`,\n      `git_repository_detach_head()`\n    * `git_reset()`\n\n* `git_config_get_entry()` now gives back a ref-counted\n  `git_config_entry`. You must free it when you no longer need it.\n\n* `git_config_get_string()` will return an error if used on a\n  non-snapshot configuration, as there can be no guarantee that the\n  returned pointer is valid.\n\n* `git_note_default_ref()` now uses a `git_buf` to return the string,\n  as the string is otherwise not guaranteed to stay allocated.\n\n* `git_rebase_operation_current()` will return `GIT_REBASE_NO_OPERATION`\n  if it is called immediately after creating a rebase session but before\n  you have applied the first patch.\n\n* `git_rebase_options` now contains a `git_checkout_options` struct\n  that will be used for functions that modify the working directory,\n  namely `git_rebase_init`, `git_rebase_next` and\n  `git_rebase_abort`.  As a result, `git_rebase_open` now also takes\n  a `git_rebase_options` and only the `git_rebase_init` and\n  `git_rebase_open` functions take a `git_rebase_options`, where they\n  will persist the options to subsequent `git_rebase` calls.\n\n* The `git_clone_options` struct now has fetch options in a\n  `fetch_opts` field instead of remote callbacks in\n  `remote_callbacks`.\n\n* The remote callbacks has gained a new member `push_negotiation`\n  which gets called before sending the update commands to the server.\n\n* The following functions no longer act on a remote instance but\n  change the repository's configuration. Their signatures have changed\n  accordingly:\n\n    * `git_remote_set_url()`, `git_remote_seturl()`\n    * `git_remote_add_fetch()`, `git_remote_add_push()` and\n    * `git_remote_set_autotag()`\n\n* `git_remote_connect()` and `git_remote_prune()` now take a pointer\n  to the callbacks.\n\n* `git_remote_fetch()` and `git_remote_download()` now take a pointer\n  to fetch options which determine the runtime configuration.\n\n* The `git_remote_autotag_option_t` values have been changed. It has\n  gained a `_UNSPECIFIED` default value to specify no override for the\n  configured setting.\n\n* `git_remote_update_tips()` now takes a pointer to the callbacks as\n  well as a boolean whether to write `FETCH_HEAD` and the autotag\n  setting.\n\n* `git_remote_create_anonymous()` no longer takes a fetch refspec as\n  url-only remotes cannot have configured refspecs.\n\n* The `git_submodule_update_options` struct now has fetch options in\n  the `fetch_opts` field instead of callbacks in the\n  `remote_callbacks` field.\n\n* The following functions no longer act on a submodule instance but\n  change the repository's configuration. Their signatures have changed\n  accordingly:\n\n    * `git_submodule_set_url()`, `git_submodule_set_ignore()`,\n      `git_submodule_set_update()`,\n      `git_submodule_set_fetch_recurse_submodules()`.\n\n* `git_submodule_status()` no longer takes a submodule instance but a\n  repsitory, a submodule name and an ignore setting.\n\n* The `push` function in the `git_transport` interface now takes a\n  pointer to the remote callbacks.\n\n* The `git_index_entry` struct's fields' types have been changed to\n  more accurately reflect what is in fact stored in the\n  index. Specifically, time and file size are 32 bits intead of 64, as\n  these values are truncated.\n\n* `GIT_EMERGECONFLICT` is now `GIT_ECONFLICT`, which more accurately\n  describes the nature of the error.\n\n* It is no longer allowed to call `git_buf_grow()` on buffers\n  borrowing the memory they point to.\n\n---------------------------------------------------------------------\n\nv0.22\n------\n\n### Changes or improvements\n\n* `git_signature_new()` now requires a non-empty email address.\n\n* Use CommonCrypto libraries for SHA-1 calculation on Mac OS X.\n\n* Disable SSL compression and SSLv2 and SSLv3 ciphers in favor of TLSv1\n  in OpenSSL.\n\n* The fetch behavior of remotes with autotag set to `GIT_REMOTE_DOWNLOAD_TAGS_ALL`\n  has been changed to match git 1.9.0 and later. In this mode, libgit2 now\n  fetches all tags in addition to whatever else needs to be fetched.\n\n* `git_checkout()` now handles case-changing renames correctly on\n  case-insensitive filesystems; for example renaming \"readme\" to \"README\".\n\n* The search for libssh2 is now done via pkg-config instead of a\n  custom search of a few directories.\n\n* Add support for core.protectHFS and core.protectNTFS. Add more\n  validation for filenames which we write such as references.\n\n* The local transport now generates textual progress output like\n  git-upload-pack does (\"counting objects\").\n\n* `git_checkout_index()` can now check out an in-memory index that is not\n  necessarily the repository's index, so you may check out an index\n  that was produced by git_merge and friends while retaining the cached\n  information.\n\n* Remove the default timeout for receiving / sending data over HTTP using\n  the WinHTTP transport layer.\n\n* Add SPNEGO (Kerberos) authentication using GSSAPI on Unix systems.\n\n* Provide built-in objects for the empty blob (e69de29) and empty\n  tree (4b825dc) objects.\n\n* The index' tree cache is now filled upon read-tree and write-tree\n  and the cache is written to disk.\n\n* LF -> CRLF filter refuses to handle mixed-EOL files\n\n* LF -> CRLF filter now runs when * text = auto (with Git for Windows 1.9.4)\n\n* File unlocks are atomic again via rename. Read-only files on Windows are\n  made read-write if necessary.\n\n* Share open packfiles across repositories to share descriptors and mmaps.\n\n* Use a map for the treebuilder, making insertion O(1)\n\n* The build system now accepts an option EMBED_SSH_PATH which when set\n  tells it to include a copy of libssh2 at the given location. This is\n  enabled for MSVC.\n\n* Add support for refspecs with the asterisk in the middle of a\n  pattern.\n\n* Fetching now performs opportunistic updates. To achieve this, we\n  introduce a difference between active and passive refspecs, which\n  make `git_remote_download()` and `git_remote_fetch()` to take a list of\n  resfpecs to be the active list, similarly to how git fetch accepts a\n  list on the command-line.\n\n* The THREADSAFE option to build libgit2 with threading support has\n  been flipped to be on by default.\n\n* The remote object has learnt to prune remote-tracking branches. If\n  the remote is configured to do so, this will happen via\n  `git_remote_fetch()`. You can also call `git_remote_prune()` after\n  connecting or fetching to perform the prune.\n\n\n### API additions\n\n* Introduce `git_buf_text_is_binary()` and `git_buf_text_contains_nul()` for\n  consumers to perform binary detection on a git_buf.\n\n* `git_branch_upstream_remote()` has been introduced to provide the\n  branch.<name>.remote configuration value.\n\n* Introduce `git_describe_commit()` and `git_describe_workdir()` to provide\n  a description of the current commit (and working tree, respectively)\n  based on the nearest tag or reference\n\n* Introduce `git_merge_bases()` and the `git_oidarray` type to expose all\n  merge bases between two commits.\n\n* Introduce `git_merge_bases_many()` to expose all merge bases between\n  multiple commits.\n\n* Introduce rebase functionality (using the merge algorithm only).\n  Introduce `git_rebase_init()` to begin a new rebase session,\n  `git_rebase_open()` to open an in-progress rebase session,\n  `git_rebase_commit()` to commit the current rebase operation,\n  `git_rebase_next()` to apply the next rebase operation,\n  `git_rebase_abort()` to abort an in-progress rebase and `git_rebase_finish()`\n  to complete a rebase operation.\n\n* Introduce `git_note_author()` and `git_note_committer()` to get the author\n  and committer information on a `git_note`, respectively.\n\n* A factory function for ssh has been added which allows to change the\n  path of the programs to execute for receive-pack and upload-pack on\n  the server, `git_transport_ssh_with_paths()`.\n\n* The ssh transport supports asking the remote host for accepted\n  credential types as well as multiple challeges using a single\n  connection. This requires to know which username you want to connect\n  as, so this introduces the USERNAME credential type which the ssh\n  transport will use to ask for the username.\n\n* The `GIT_EPEEL` error code has been introduced when we cannot peel a tag\n  to the requested object type; if the given object otherwise cannot be\n  peeled, `GIT_EINVALIDSPEC` is returned.\n\n* Introduce `GIT_REPOSITORY_INIT_RELATIVE_GITLINK` to use relative paths\n  when writing gitlinks, as is used by git core for submodules.\n\n* `git_remote_prune()` has been added. See above for description.\n\n\n* Introduce reference transactions, which allow multiple references to\n  be locked at the same time and updates be queued. This also allows\n  us to safely update a reflog with arbitrary contents, as we need to\n  do for stash.\n\n### API removals\n\n* `git_remote_supported_url()` and `git_remote_is_valid_url()` have been\n  removed as they have become essentially useless with rsync-style ssh paths.\n\n* `git_clone_into()` and `git_clone_local_into()` have been removed from the\n  public API in favour of `git_clone callbacks`.\n\n* The option to ignore certificate errors via `git_remote_cert_check()`\n  is no longer present. Instead, `git_remote_callbacks` has gained a new\n  entry which lets the user perform their own certificate checks.\n\n### Breaking API changes\n\n* `git_cherry_pick()` is now `git_cherrypick()`.\n\n* The `git_submodule_update()` function was renamed to\n  `git_submodule_update_strategy()`. `git_submodule_update()` is now used to\n  provide functionalty similar to \"git submodule update\".\n\n* `git_treebuilder_create()` was renamed to `git_treebuilder_new()` to better\n  reflect it being a constructor rather than something which writes to\n  disk.\n\n* `git_treebuilder_new()` (was `git_treebuilder_create()`) now takes a\n  repository so that it can query repository configuration.\n  Subsequently, `git_treebuilder_write()` no longer takes a repository.\n\n* `git_threads_init()` and `git_threads_shutdown()` have been renamed to\n  `git_libgit2_init()` and `git_libgit2_shutdown()` to better explain what\n  their purpose is, as it's grown to be more than just about threads.\n\n* `git_libgit2_init()` and `git_libgit2_shutdown()` now return the number of\n  initializations of the library, so consumers may schedule work on the\n  first initialization.\n\n* The `git_transport_register()` function no longer takes a priority and takes\n  a URL scheme name (eg \"http\") instead of a prefix like \"http://\"\n\n* `git_index_name_entrycount()` and `git_index_reuc_entrycount()` now\n  return size_t instead of unsigned int.\n\n* The `context_lines` and `interhunk_lines` fields in `git_diff`_options are\n  now `uint32_t` instead of `uint16_t`. This allows to set them to `UINT_MAX`,\n  in effect asking for \"infinite\" context e.g. to iterate over all the\n  unmodified lines of a diff.\n\n* `git_status_file()` now takes an exact path. Use `git_status_list_new()` if\n  pathspec searching is needed.\n\n* `git_note_create()` has changed the position of the notes reference\n  name to match `git_note_remove()`.\n\n* Rename `git_remote_load()` to `git_remote_lookup()` to bring it in line\n  with the rest of the lookup functions.\n\n* `git_remote_rename()` now takes the repository and the remote's\n  current name. Accepting a remote indicates we want to change it,\n  which we only did partially. It is much clearer if we accept a name\n  and no loaded objects are changed.\n\n* `git_remote_delete()` now accepts the repository and the remote's name\n  instead of a loaded remote.\n\n* `git_merge_head` is now `git_annotated_commit`, to better reflect its usage\n  for multiple functions (including rebase)\n\n* The `git_clone_options` struct no longer provides the `ignore_cert_errors` or\n  `remote_name` members for remote customization.\n\n  Instead, the `git_clone_options` struct has two new members, `remote_cb` and\n  `remote_cb_payload`, which allow the caller to completely override the remote\n  creation process. If needed, the caller can use this callback to give their\n  remote a name other than the default (origin) or disable cert checking.\n\n  The `remote_callbacks` member has been preserved for convenience, although it\n  is not used when a remote creation callback is supplied.\n\n* The `git_clone`_options struct now provides `repository_cb` and\n  `repository_cb_payload` to allow the user to create a repository with\n  custom options.\n\n* The `git_push` struct to perform a push has been replaced with\n  `git_remote_upload()`. The refspecs and options are passed as a\n  function argument. `git_push_update_tips()` is now also\n  `git_remote_update_tips()` and the callbacks are in the same struct as\n  the rest.\n\n* The `git_remote_set_transport()` function now sets a transport factory function,\n  rather than a pre-existing transport instance.\n\n* The `git_transport` structure definition has moved into the sys/transport.h\n  file.\n\n* libgit2 no longer automatically sets the OpenSSL locking\n  functions. This is not something which we can know to do. A\n  last-resort convenience function is provided in sys/openssl.h,\n  `git_openssl_set_locking()` which can be used to set the locking.\n\n* `git_reference_*()` functions use mmap() + binary search for packed\n  refs lookups when using the fs backend. Previously all entries were\n  read into a hashtable, which could be slow for repositories with a\n  large number of refs.\n", "/*\n * Copyright (C) the libgit2 contributors. All rights reserved.\n *\n * This file is part of libgit2, distributed under the GNU GPL v2 with\n * a Linking Exception. For full terms see the included COPYING file.\n */\n#ifndef INCLUDE_git_version_h__\n#define INCLUDE_git_version_h__\n\n/**\n * The version string for libgit2.  This string follows semantic\n * versioning (v2) guidelines.\n */\n#define LIBGIT2_VERSION        \"1.5.1\"\n\n/** The major version number for this version of libgit2. */\n#define LIBGIT2_VER_MAJOR      1\n\n/** The minor version number for this version of libgit2. */\n#define LIBGIT2_VER_MINOR      5\n\n/** The revision (\"teeny\") version number for this version of libgit2. */\n#define LIBGIT2_VER_REVISION   1\n\n/** The Windows DLL patch number for this version of libgit2. */\n#define LIBGIT2_VER_PATCH      0\n\n/**\n * The prerelease string for this version of libgit2.  For development\n * (nightly) builds, this will be \"alpha\".  For prereleases, this will be\n * a prerelease name like \"beta\" or \"rc1\".  For final releases, this will\n * be `NULL`.\n */\n#define LIBGIT2_VER_PRERELEASE NULL\n\n/** The library ABI soversion for this version of libgit2. */\n#define LIBGIT2_SOVERSION      \"1.5\"\n\n#endif\n", "{\n  \"name\": \"libgit2\",\n  \"version\": \"1.5.1\",\n  \"repo\": \"https://github.com/libgit2/libgit2\",\n  \"description\": \" A cross-platform, linkable library implementation of Git that you can use in your application.\",\n  \"install\": \"mkdir build && cd build && cmake .. && cmake --build .\"\n}\n", "/*\n * Copyright (C) the libgit2 contributors. All rights reserved.\n *\n * This file is part of libgit2, distributed under the GNU GPL v2 with\n * a Linking Exception. For full terms see the included COPYING file.\n */\n\n#include \"ssh.h\"\n\n#ifdef GIT_SSH\n#include <libssh2.h>\n#endif\n\n#include \"runtime.h\"\n#include \"net.h\"\n#include \"netops.h\"\n#include \"smart.h\"\n#include \"streams/socket.h\"\n\n#include \"git2/credential.h\"\n#include \"git2/sys/credential.h\"\n\n#ifdef GIT_SSH\n\n#define OWNING_SUBTRANSPORT(s) ((ssh_subtransport *)(s)->parent.subtransport)\n\nstatic const char cmd_uploadpack[] = \"git-upload-pack\";\nstatic const char cmd_receivepack[] = \"git-receive-pack\";\n\ntypedef struct {\n\tgit_smart_subtransport_stream parent;\n\tgit_stream *io;\n\tLIBSSH2_SESSION *session;\n\tLIBSSH2_CHANNEL *channel;\n\tconst char *cmd;\n\tgit_net_url url;\n\tunsigned sent_command : 1;\n} ssh_stream;\n\ntypedef struct {\n\tgit_smart_subtransport parent;\n\ttransport_smart *owner;\n\tssh_stream *current_stream;\n\tgit_credential *cred;\n\tchar *cmd_uploadpack;\n\tchar *cmd_receivepack;\n} ssh_subtransport;\n\nstatic int list_auth_methods(int *out, LIBSSH2_SESSION *session, const char *username);\n\nstatic void ssh_error(LIBSSH2_SESSION *session, const char *errmsg)\n{\n\tchar *ssherr;\n\tlibssh2_session_last_error(session, &ssherr, NULL, 0);\n\n\tgit_error_set(GIT_ERROR_SSH, \"%s: %s\", errmsg, ssherr);\n}\n\n/*\n * Create a git protocol request.\n *\n * For example: git-upload-pack '/libgit2/libgit2'\n */\nstatic int gen_proto(git_str *request, const char *cmd, git_net_url *url)\n{\n\tconst char *repo;\n\n\trepo = url->path;\n\n\tif (repo && repo[0] == '/' && repo[1] == '~')\n\t\trepo++;\n\n\tif (!repo || !repo[0]) {\n\t\tgit_error_set(GIT_ERROR_NET, \"malformed git protocol URL\");\n\t\treturn -1;\n\t}\n\n\tgit_str_puts(request, cmd);\n\tgit_str_puts(request, \" '\");\n\tgit_str_puts(request, repo);\n\tgit_str_puts(request, \"'\");\n\n\tif (git_str_oom(request))\n\t\treturn -1;\n\n\treturn 0;\n}\n\nstatic int send_command(ssh_stream *s)\n{\n\tint error;\n\tgit_str request = GIT_STR_INIT;\n\n\terror = gen_proto(&request, s->cmd, &s->url);\n\tif (error < 0)\n\t\tgoto cleanup;\n\n\terror = libssh2_channel_exec(s->channel, request.ptr);\n\tif (error < LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s->session, \"SSH could not execute request\");\n\t\tgoto cleanup;\n\t}\n\n\ts->sent_command = 1;\n\ncleanup:\n\tgit_str_dispose(&request);\n\treturn error;\n}\n\nstatic int ssh_stream_read(\n\tgit_smart_subtransport_stream *stream,\n\tchar *buffer,\n\tsize_t buf_size,\n\tsize_t *bytes_read)\n{\n\tint rc;\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\n\t*bytes_read = 0;\n\n\tif (!s->sent_command && send_command(s) < 0)\n\t\treturn -1;\n\n\tif ((rc = libssh2_channel_read(s->channel, buffer, buf_size)) < LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s->session, \"SSH could not read data\");\n\t\treturn -1;\n\t}\n\n\t/*\n\t * If we can't get anything out of stdout, it's typically a\n\t * not-found error, so read from stderr and signal EOF on\n\t * stderr.\n\t */\n\tif (rc == 0) {\n\t\tif ((rc = libssh2_channel_read_stderr(s->channel, buffer, buf_size)) > 0) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"%*s\", rc, buffer);\n\t\t\treturn GIT_EEOF;\n\t\t} else if (rc < LIBSSH2_ERROR_NONE) {\n\t\t\tssh_error(s->session, \"SSH could not read stderr\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t*bytes_read = rc;\n\n\treturn 0;\n}\n\nstatic int ssh_stream_write(\n\tgit_smart_subtransport_stream *stream,\n\tconst char *buffer,\n\tsize_t len)\n{\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\tsize_t off = 0;\n\tssize_t ret = 0;\n\n\tif (!s->sent_command && send_command(s) < 0)\n\t\treturn -1;\n\n\tdo {\n\t\tret = libssh2_channel_write(s->channel, buffer + off, len - off);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\n\t\toff += ret;\n\n\t} while (off < len);\n\n\tif (ret < 0) {\n\t\tssh_error(s->session, \"SSH could not write data\");\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic void ssh_stream_free(git_smart_subtransport_stream *stream)\n{\n\tssh_stream *s = GIT_CONTAINER_OF(stream, ssh_stream, parent);\n\tssh_subtransport *t;\n\n\tif (!stream)\n\t\treturn;\n\n\tt = OWNING_SUBTRANSPORT(s);\n\tt->current_stream = NULL;\n\n\tif (s->channel) {\n\t\tlibssh2_channel_close(s->channel);\n\t\tlibssh2_channel_free(s->channel);\n\t\ts->channel = NULL;\n\t}\n\n\tif (s->session) {\n\t\tlibssh2_session_disconnect(s->session, \"closing transport\");\n\t\tlibssh2_session_free(s->session);\n\t\ts->session = NULL;\n\t}\n\n\tif (s->io) {\n\t\tgit_stream_close(s->io);\n\t\tgit_stream_free(s->io);\n\t\ts->io = NULL;\n\t}\n\n\tgit_net_url_dispose(&s->url);\n\tgit__free(s);\n}\n\nstatic int ssh_stream_alloc(\n\tssh_subtransport *t,\n\tconst char *cmd,\n\tgit_smart_subtransport_stream **stream)\n{\n\tssh_stream *s;\n\n\tGIT_ASSERT_ARG(stream);\n\n\ts = git__calloc(sizeof(ssh_stream), 1);\n\tGIT_ERROR_CHECK_ALLOC(s);\n\n\ts->parent.subtransport = &t->parent;\n\ts->parent.read = ssh_stream_read;\n\ts->parent.write = ssh_stream_write;\n\ts->parent.free = ssh_stream_free;\n\n\ts->cmd = cmd;\n\n\t*stream = &s->parent;\n\treturn 0;\n}\n\nstatic int ssh_agent_auth(LIBSSH2_SESSION *session, git_credential_ssh_key *c) {\n\tint rc = LIBSSH2_ERROR_NONE;\n\n\tstruct libssh2_agent_publickey *curr, *prev = NULL;\n\n\tLIBSSH2_AGENT *agent = libssh2_agent_init(session);\n\n\tif (agent == NULL)\n\t\treturn -1;\n\n\trc = libssh2_agent_connect(agent);\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tgoto shutdown;\n\n\trc = libssh2_agent_list_identities(agent);\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tgoto shutdown;\n\n\twhile (1) {\n\t\trc = libssh2_agent_get_identity(agent, &curr, prev);\n\n\t\tif (rc < 0)\n\t\t\tgoto shutdown;\n\n\t\t/* rc is set to 1 whenever the ssh agent ran out of keys to check.\n\t\t * Set the error code to authentication failure rather than erroring\n\t\t * out with an untranslatable error code.\n\t\t */\n\t\tif (rc == 1) {\n\t\t\trc = LIBSSH2_ERROR_AUTHENTICATION_FAILED;\n\t\t\tgoto shutdown;\n\t\t}\n\n\t\trc = libssh2_agent_userauth(agent, c->username, curr);\n\n\t\tif (rc == 0)\n\t\t\tbreak;\n\n\t\tprev = curr;\n\t}\n\nshutdown:\n\n\tif (rc != LIBSSH2_ERROR_NONE)\n\t\tssh_error(session, \"error authenticating\");\n\n\tlibssh2_agent_disconnect(agent);\n\tlibssh2_agent_free(agent);\n\n\treturn rc;\n}\n\nstatic int _git_ssh_authenticate_session(\n\tLIBSSH2_SESSION *session,\n\tgit_credential *cred)\n{\n\tint rc;\n\n\tdo {\n\t\tgit_error_clear();\n\t\tswitch (cred->credtype) {\n\t\tcase GIT_CREDENTIAL_USERPASS_PLAINTEXT: {\n\t\t\tgit_credential_userpass_plaintext *c = (git_credential_userpass_plaintext *)cred;\n\t\t\trc = libssh2_userauth_password(session, c->username, c->password);\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_KEY: {\n\t\t\tgit_credential_ssh_key *c = (git_credential_ssh_key *)cred;\n\n\t\t\tif (c->privatekey)\n\t\t\t\trc = libssh2_userauth_publickey_fromfile(\n\t\t\t\t\tsession, c->username, c->publickey,\n\t\t\t\t\tc->privatekey, c->passphrase);\n\t\t\telse\n\t\t\t\trc = ssh_agent_auth(session, c);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_CUSTOM: {\n\t\t\tgit_credential_ssh_custom *c = (git_credential_ssh_custom *)cred;\n\n\t\t\trc = libssh2_userauth_publickey(\n\t\t\t\tsession, c->username, (const unsigned char *)c->publickey,\n\t\t\t\tc->publickey_len, c->sign_callback, &c->payload);\n\t\t\tbreak;\n\t\t}\n\t\tcase GIT_CREDENTIAL_SSH_INTERACTIVE: {\n\t\t\tvoid **abstract = libssh2_session_abstract(session);\n\t\t\tgit_credential_ssh_interactive *c = (git_credential_ssh_interactive *)cred;\n\n\t\t\t/* ideally, we should be able to set this by calling\n\t\t\t * libssh2_session_init_ex() instead of libssh2_session_init().\n\t\t\t * libssh2's API is inconsistent here i.e. libssh2_userauth_publickey()\n\t\t\t * allows you to pass the `abstract` as part of the call, whereas\n\t\t\t * libssh2_userauth_keyboard_interactive() does not!\n\t\t\t *\n\t\t\t * The only way to set the `abstract` pointer is by calling\n\t\t\t * libssh2_session_abstract(), which will replace the existing\n\t\t\t * pointer as is done below. This is safe for now (at time of writing),\n\t\t\t * but may not be valid in future.\n\t\t\t */\n\t\t\t*abstract = c->payload;\n\n\t\t\trc = libssh2_userauth_keyboard_interactive(\n\t\t\t\tsession, c->username, c->prompt_callback);\n\t\t\tbreak;\n\t\t}\n#ifdef GIT_SSH_MEMORY_CREDENTIALS\n\t\tcase GIT_CREDENTIAL_SSH_MEMORY: {\n\t\t\tgit_credential_ssh_key *c = (git_credential_ssh_key *)cred;\n\n\t\t\tGIT_ASSERT(c->username);\n\t\t\tGIT_ASSERT(c->privatekey);\n\n\t\t\trc = libssh2_userauth_publickey_frommemory(\n\t\t\t\tsession,\n\t\t\t\tc->username,\n\t\t\t\tstrlen(c->username),\n\t\t\t\tc->publickey,\n\t\t\t\tc->publickey ? strlen(c->publickey) : 0,\n\t\t\t\tc->privatekey,\n\t\t\t\tstrlen(c->privatekey),\n\t\t\t\tc->passphrase);\n\t\t\tbreak;\n\t\t}\n#endif\n\t\tdefault:\n\t\t\trc = LIBSSH2_ERROR_AUTHENTICATION_FAILED;\n\t\t}\n\t} while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);\n\n\tif (rc == LIBSSH2_ERROR_PASSWORD_EXPIRED ||\n\t\trc == LIBSSH2_ERROR_AUTHENTICATION_FAILED ||\n\t\trc == LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED)\n\t\t\treturn GIT_EAUTH;\n\n\tif (rc != LIBSSH2_ERROR_NONE) {\n\t\tif (!git_error_last())\n\t\t\tssh_error(session, \"Failed to authenticate SSH session\");\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int request_creds(git_credential **out, ssh_subtransport *t, const char *user, int auth_methods)\n{\n\tint error, no_callback = 0;\n\tgit_credential *cred = NULL;\n\n\tif (!t->owner->connect_opts.callbacks.credentials) {\n\t\tno_callback = 1;\n\t} else {\n\t\terror = t->owner->connect_opts.callbacks.credentials(\n\t\t\t&cred,\n\t\t\tt->owner->url,\n\t\t\tuser,\n\t\t\tauth_methods,\n\t\t\tt->owner->connect_opts.callbacks.payload);\n\n\t\tif (error == GIT_PASSTHROUGH) {\n\t\t\tno_callback = 1;\n\t\t} else if (error < 0) {\n\t\t\treturn error;\n\t\t} else if (!cred) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"callback failed to initialize SSH credentials\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (no_callback) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"authentication required but no callback set\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\tif (!(cred->credtype & auth_methods)) {\n\t\tcred->free(cred);\n\t\tgit_error_set(GIT_ERROR_SSH, \"authentication callback returned unsupported credentials type\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\t*out = cred;\n\n\treturn 0;\n}\n\n#define KNOWN_HOSTS_FILE \".ssh/known_hosts\"\n\n/*\n * Load the known_hosts file.\n *\n * Returns success but leaves the output NULL if we couldn't find the file.\n */\nstatic int load_known_hosts(LIBSSH2_KNOWNHOSTS **hosts, LIBSSH2_SESSION *session)\n{\n\tgit_str path = GIT_STR_INIT, home = GIT_STR_INIT;\n\tLIBSSH2_KNOWNHOSTS *known_hosts = NULL;\n\tint error;\n\n\tGIT_ASSERT_ARG(hosts);\n\n\tif ((error = git__getenv(&home, \"HOME\")) < 0)\n\t\treturn error;\n\n\tif ((error = git_str_joinpath(&path, git_str_cstr(&home), KNOWN_HOSTS_FILE)) < 0)\n\t\tgoto out;\n\n\tif ((known_hosts = libssh2_knownhost_init(session)) == NULL) {\n\t\tssh_error(session, \"error initializing known hosts\");\n\t\terror = -1;\n\t\tgoto out;\n\t}\n\n\t/*\n\t * Try to read the file and consider not finding it as not trusting the\n\t * host rather than an error.\n\t */\n\terror = libssh2_knownhost_readfile(known_hosts, git_str_cstr(&path), LIBSSH2_KNOWNHOST_FILE_OPENSSH);\n\tif (error == LIBSSH2_ERROR_FILE)\n\t\terror = 0;\n\tif (error < 0)\n\t\tssh_error(session, \"error reading known_hosts\");\n\nout:\n\t*hosts = known_hosts;\n\n\tgit_str_clear(&home);\n\tgit_str_clear(&path);\n\n\treturn error;\n}\n\nstatic const char *hostkey_type_to_string(int type)\n{\n\tswitch (type) {\n\tcase LIBSSH2_KNOWNHOST_KEY_SSHRSA:\n\t\treturn \"ssh-rsa\";\n\tcase LIBSSH2_KNOWNHOST_KEY_SSHDSS:\n\t\treturn \"ssh-dss\";\n#ifdef LIBSSH2_KNOWNHOST_KEY_ECDSA_256\n\tcase LIBSSH2_KNOWNHOST_KEY_ECDSA_256:\n\t\treturn \"ecdsa-sha2-nistp256\";\n\tcase LIBSSH2_KNOWNHOST_KEY_ECDSA_384:\n\t\treturn \"ecdsa-sha2-nistp384\";\n\tcase LIBSSH2_KNOWNHOST_KEY_ECDSA_521:\n\t\treturn \"ecdsa-sha2-nistp521\";\n#endif\n#ifdef LIBSSH2_KNOWNHOST_KEY_ED25519\n\tcase LIBSSH2_KNOWNHOST_KEY_ED25519:\n\t\treturn \"ssh-ed25519\";\n#endif\n\t}\n\n\treturn NULL;\n}\n\n/*\n * We figure out what kind of key we want to ask the remote for by trying to\n * look it up with a nonsense key and using that mismatch to figure out what key\n * we do have stored for the host.\n *\n * Returns the string to pass to libssh2_session_method_pref or NULL if we were\n * unable to find anything or an error happened.\n */\nstatic const char *find_hostkey_preference(LIBSSH2_KNOWNHOSTS *known_hosts, const char *hostname, int port)\n{\n\tstruct libssh2_knownhost *host = NULL;\n\t/* Specify no key type so we don't filter on that */\n\tint type = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;\n\tconst char key = '\\0';\n\tint error;\n\n\t/*\n\t * In case of mismatch, we can find the type of key from known_hosts in\n\t * the returned host's information as it means that an entry was found\n\t * but our nonsense key obviously didn't match.\n\t */\n\terror = libssh2_knownhost_checkp(known_hosts, hostname, port, &key, 1, type, &host);\n\tif (error == LIBSSH2_KNOWNHOST_CHECK_MISMATCH)\n\t\treturn hostkey_type_to_string(host->typemask & LIBSSH2_KNOWNHOST_KEY_MASK);\n\n\treturn NULL;\n}\n\nstatic int _git_ssh_session_create(\n\tLIBSSH2_SESSION **session,\n\tLIBSSH2_KNOWNHOSTS **hosts,\n\tconst char *hostname,\n\tint port,\n\tgit_stream *io)\n{\n\tint rc = 0;\n\tLIBSSH2_SESSION *s;\n\tLIBSSH2_KNOWNHOSTS *known_hosts;\n\tgit_socket_stream *socket = GIT_CONTAINER_OF(io, git_socket_stream, parent);\n\tconst char *keytype = NULL;\n\n\tGIT_ASSERT_ARG(session);\n\tGIT_ASSERT_ARG(hosts);\n\n\ts = libssh2_session_init();\n\tif (!s) {\n\t\tgit_error_set(GIT_ERROR_NET, \"failed to initialize SSH session\");\n\t\treturn -1;\n\t}\n\n\tif ((rc = load_known_hosts(&known_hosts, s)) < 0) {\n\t\tssh_error(s, \"error loading known_hosts\");\n\t\tlibssh2_session_free(s);\n\t\treturn -1;\n\t}\n\n\tif ((keytype = find_hostkey_preference(known_hosts, hostname, port)) != NULL) {\n\t\tdo {\n\t\t\trc = libssh2_session_method_pref(s, LIBSSH2_METHOD_HOSTKEY, keytype);\n\t\t} while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);\n\t\tif (rc != LIBSSH2_ERROR_NONE) {\n\t\t\tssh_error(s, \"failed to set hostkey preference\");\n\t\t\tgoto on_error;\n\t\t}\n\t}\n\n\n\tdo {\n\t\trc = libssh2_session_handshake(s, socket->s);\n\t} while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);\n\n\tif (rc != LIBSSH2_ERROR_NONE) {\n\t\tssh_error(s, \"failed to start SSH session\");\n\t\tgoto on_error;\n\t}\n\n\tlibssh2_session_set_blocking(s, 1);\n\n\t*session = s;\n\t*hosts = known_hosts;\n\n\treturn 0;\n\non_error:\n\tlibssh2_knownhost_free(known_hosts);\n\tlibssh2_session_free(s);\n\treturn -1;\n}\n\n\n/*\n * Returns the typemask argument to pass to libssh2_knownhost_check{,p} based on\n * the type of key that libssh2_session_hostkey returns.\n */\nstatic int fingerprint_type_mask(int keytype)\n{\n\tint mask = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;\n\treturn mask;\n\n\tswitch (keytype) {\n\tcase LIBSSH2_HOSTKEY_TYPE_RSA:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_SSHRSA;\n\t\tbreak;\n\tcase LIBSSH2_HOSTKEY_TYPE_DSS:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_SSHDSS;\n\t\tbreak;\n#ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256\n\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_256:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_256;\n\t\tbreak;\n\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_384:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_384;\n\t\tbreak;\n\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_521:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_521;\n\t\tbreak;\n#endif\n#ifdef LIBSSH2_HOSTKEY_TYPE_ED25519\n\tcase LIBSSH2_HOSTKEY_TYPE_ED25519:\n\t\tmask |= LIBSSH2_KNOWNHOST_KEY_ED25519;\n\t\tbreak;\n#endif\n\t}\n\n\treturn mask;\n}\n\n/*\n * Check the host against the user's known_hosts file.\n *\n * Returns 1/0 for valid/''not-valid or <0 for an error\n */\nstatic int check_against_known_hosts(\n\tLIBSSH2_SESSION *session,\n\tLIBSSH2_KNOWNHOSTS *known_hosts,\n\tconst char *hostname,\n\tint port,\n\tconst char *key,\n\tsize_t key_len,\n\tint key_type)\n{\n\tint check, typemask, ret = 0;\n\tstruct libssh2_knownhost *host = NULL;\n\n\tif (known_hosts == NULL)\n\t\treturn 0;\n\n\ttypemask = fingerprint_type_mask(key_type);\n\tcheck = libssh2_knownhost_checkp(known_hosts, hostname, port, key, key_len, typemask, &host);\n\tif (check == LIBSSH2_KNOWNHOST_CHECK_FAILURE) {\n\t\tssh_error(session, \"error checking for known host\");\n\t\treturn -1;\n\t}\n\n\tret = check == LIBSSH2_KNOWNHOST_CHECK_MATCH ? 1 : 0;\n\n\treturn ret;\n}\n\n/*\n * Perform the check for the session's certificate against known hosts if\n * possible and then ask the user if they have a callback.\n *\n * Returns 1/0 for valid/not-valid or <0 for an error\n */\nstatic int check_certificate(\n\tLIBSSH2_SESSION *session,\n\tLIBSSH2_KNOWNHOSTS *known_hosts,\n\tgit_transport_certificate_check_cb check_cb,\n\tvoid *check_cb_payload,\n\tconst char *host,\n\tint port)\n{\n\tgit_cert_hostkey cert = {{ 0 }};\n\tconst char *key;\n\tsize_t cert_len;\n\tint cert_type, cert_valid = 0, error = 0;\n\n\tif ((key = libssh2_session_hostkey(session, &cert_len, &cert_type)) == NULL) {\n\t\tssh_error(session, \"failed to retrieve hostkey\");\n\t\treturn -1;\n\t}\n\n\tif ((cert_valid = check_against_known_hosts(session, known_hosts, host, port, key, cert_len, cert_type)) < 0)\n\t\treturn -1;\n\n\tcert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;\n\tif (key != NULL) {\n\t\tcert.type |= GIT_CERT_SSH_RAW;\n\t\tcert.hostkey = key;\n\t\tcert.hostkey_len = cert_len;\n\t\tswitch (cert_type) {\n\t\tcase LIBSSH2_HOSTKEY_TYPE_RSA:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;\n\t\t\tbreak;\n\t\tcase LIBSSH2_HOSTKEY_TYPE_DSS:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;\n\t\t\tbreak;\n\n#ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256\n\t\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_256:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;\n\t\t\tbreak;\n\t\tcase LIBSSH2_HOSTKEY_TYPE_ECDSA_384:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;\n\t\t\tbreak;\n\t\tcase LIBSSH2_KNOWNHOST_KEY_ECDSA_521:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;\n\t\t\tbreak;\n#endif\n\n#ifdef LIBSSH2_HOSTKEY_TYPE_ED25519\n\t\tcase LIBSSH2_HOSTKEY_TYPE_ED25519:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;\n\t\t\tbreak;\n#endif\n\t\tdefault:\n\t\t\tcert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;\n\t\t}\n\t}\n\n#ifdef LIBSSH2_HOSTKEY_HASH_SHA256\n\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);\n\tif (key != NULL) {\n\t\tcert.type |= GIT_CERT_SSH_SHA256;\n\t\tmemcpy(&cert.hash_sha256, key, 32);\n\t}\n#endif\n\n\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);\n\tif (key != NULL) {\n\t\tcert.type |= GIT_CERT_SSH_SHA1;\n\t\tmemcpy(&cert.hash_sha1, key, 20);\n\t}\n\n\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);\n\tif (key != NULL) {\n\t\tcert.type |= GIT_CERT_SSH_MD5;\n\t\tmemcpy(&cert.hash_md5, key, 16);\n\t}\n\n\tif (cert.type == 0) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"unable to get the host key\");\n\t\treturn -1;\n\t}\n\n\tgit_error_clear();\n\terror = 0;\n\tif (!cert_valid) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"invalid or unknown remote ssh hostkey\");\n\t\terror = GIT_ECERTIFICATE;\n\t}\n\n\tif (check_cb != NULL) {\n\t\tgit_cert_hostkey *cert_ptr = &cert;\n\t\tgit_error_state previous_error = {0};\n\n\t\tgit_error_state_capture(&previous_error, error);\n\t\terror = check_cb((git_cert *) cert_ptr, cert_valid, host, check_cb_payload);\n\t\tif (error == GIT_PASSTHROUGH) {\n\t\t\terror = git_error_state_restore(&previous_error);\n\t\t} else if (error < 0 && !git_error_last()) {\n\t\t\tgit_error_set(GIT_ERROR_NET, \"user canceled hostkey check\");\n\t\t}\n\n\t\tgit_error_state_free(&previous_error);\n\t}\n\n\treturn error;\n}\n\n#define SSH_DEFAULT_PORT \"22\"\n\nstatic int _git_ssh_setup_conn(\n\tssh_subtransport *t,\n\tconst char *url,\n\tconst char *cmd,\n\tgit_smart_subtransport_stream **stream)\n{\n\tint auth_methods, error = 0, port;\n\tssh_stream *s;\n\tgit_credential *cred = NULL;\n\tLIBSSH2_SESSION *session=NULL;\n\tLIBSSH2_CHANNEL *channel=NULL;\n\tLIBSSH2_KNOWNHOSTS *known_hosts = NULL;\n\n\tt->current_stream = NULL;\n\n\t*stream = NULL;\n\tif (ssh_stream_alloc(t, cmd, stream) < 0)\n\t\treturn -1;\n\n\ts = (ssh_stream *)*stream;\n\ts->session = NULL;\n\ts->channel = NULL;\n\n\tif (git_net_str_is_url(url))\n\t\terror = git_net_url_parse(&s->url, url);\n\telse\n\t\terror = git_net_url_parse_scp(&s->url, url);\n\n\tif (error < 0)\n\t\tgoto done;\n\n\tif ((error = git_socket_stream_new(&s->io, s->url.host, s->url.port)) < 0 ||\n\t    (error = git_stream_connect(s->io)) < 0)\n\t\tgoto done;\n\n\t/*\n\t * Try to parse the port as a number, if we can't then fall back to\n\t * default. It would be nice if we could get the port that was resolved\n\t * as part of the stream connection, but that's not something that's\n\t * exposed.\n\t */\n\tif (git__strntol32(&port, s->url.port, strlen(s->url.port), NULL, 10) < 0)\n\t\tport = -1;\n\n\tif ((error = _git_ssh_session_create(&session, &known_hosts, s->url.host, port, s->io)) < 0)\n\t\tgoto done;\n\n\tif ((error = check_certificate(session, known_hosts, t->owner->connect_opts.callbacks.certificate_check, t->owner->connect_opts.callbacks.payload, s->url.host, port)) < 0)\n\t\tgoto done;\n\n\t/* we need the username to ask for auth methods */\n\tif (!s->url.username) {\n\t\tif ((error = request_creds(&cred, t, NULL, GIT_CREDENTIAL_USERNAME)) < 0)\n\t\t\tgoto done;\n\n\t\ts->url.username = git__strdup(((git_credential_username *) cred)->username);\n\t\tcred->free(cred);\n\t\tcred = NULL;\n\t\tif (!s->url.username)\n\t\t\tgoto done;\n\t} else if (s->url.username && s->url.password) {\n\t\tif ((error = git_credential_userpass_plaintext_new(&cred, s->url.username, s->url.password)) < 0)\n\t\t\tgoto done;\n\t}\n\n\tif ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)\n\t\tgoto done;\n\n\terror = GIT_EAUTH;\n\t/* if we already have something to try */\n\tif (cred && auth_methods & cred->credtype)\n\t\terror = _git_ssh_authenticate_session(session, cred);\n\n\twhile (error == GIT_EAUTH) {\n\t\tif (cred) {\n\t\t\tcred->free(cred);\n\t\t\tcred = NULL;\n\t\t}\n\n\t\tif ((error = request_creds(&cred, t, s->url.username, auth_methods)) < 0)\n\t\t\tgoto done;\n\n\t\tif (strcmp(s->url.username, git_credential_get_username(cred))) {\n\t\t\tgit_error_set(GIT_ERROR_SSH, \"username does not match previous request\");\n\t\t\terror = -1;\n\t\t\tgoto done;\n\t\t}\n\n\t\terror = _git_ssh_authenticate_session(session, cred);\n\n\t\tif (error == GIT_EAUTH) {\n\t\t\t/* refresh auth methods */\n\t\t\tif ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)\n\t\t\t\tgoto done;\n\t\t\telse\n\t\t\t\terror = GIT_EAUTH;\n\t\t}\n\t}\n\n\tif (error < 0)\n\t\tgoto done;\n\n\tchannel = libssh2_channel_open_session(session);\n\tif (!channel) {\n\t\terror = -1;\n\t\tssh_error(session, \"Failed to open SSH channel\");\n\t\tgoto done;\n\t}\n\n\tlibssh2_channel_set_blocking(channel, 1);\n\n\ts->session = session;\n\ts->channel = channel;\n\n\tt->current_stream = s;\n\ndone:\n\tif (error < 0) {\n\t\tssh_stream_free(*stream);\n\n\t\tif (known_hosts)\n\t\t\tlibssh2_knownhost_free(known_hosts);\n\t\tif (session)\n\t\t\tlibssh2_session_free(session);\n\t}\n\n\tif (cred)\n\t\tcred->free(cred);\n\n\treturn error;\n}\n\nstatic int ssh_uploadpack_ls(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tconst char *cmd = t->cmd_uploadpack ? t->cmd_uploadpack : cmd_uploadpack;\n\n\treturn _git_ssh_setup_conn(t, url, cmd, stream);\n}\n\nstatic int ssh_uploadpack(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tGIT_UNUSED(url);\n\n\tif (t->current_stream) {\n\t\t*stream = &t->current_stream->parent;\n\t\treturn 0;\n\t}\n\n\tgit_error_set(GIT_ERROR_NET, \"must call UPLOADPACK_LS before UPLOADPACK\");\n\treturn -1;\n}\n\nstatic int ssh_receivepack_ls(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tconst char *cmd = t->cmd_receivepack ? t->cmd_receivepack : cmd_receivepack;\n\n\n\treturn _git_ssh_setup_conn(t, url, cmd, stream);\n}\n\nstatic int ssh_receivepack(\n\tssh_subtransport *t,\n\tconst char *url,\n\tgit_smart_subtransport_stream **stream)\n{\n\tGIT_UNUSED(url);\n\n\tif (t->current_stream) {\n\t\t*stream = &t->current_stream->parent;\n\t\treturn 0;\n\t}\n\n\tgit_error_set(GIT_ERROR_NET, \"must call RECEIVEPACK_LS before RECEIVEPACK\");\n\treturn -1;\n}\n\nstatic int _ssh_action(\n\tgit_smart_subtransport_stream **stream,\n\tgit_smart_subtransport *subtransport,\n\tconst char *url,\n\tgit_smart_service_t action)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tswitch (action) {\n\t\tcase GIT_SERVICE_UPLOADPACK_LS:\n\t\t\treturn ssh_uploadpack_ls(t, url, stream);\n\n\t\tcase GIT_SERVICE_UPLOADPACK:\n\t\t\treturn ssh_uploadpack(t, url, stream);\n\n\t\tcase GIT_SERVICE_RECEIVEPACK_LS:\n\t\t\treturn ssh_receivepack_ls(t, url, stream);\n\n\t\tcase GIT_SERVICE_RECEIVEPACK:\n\t\t\treturn ssh_receivepack(t, url, stream);\n\t}\n\n\t*stream = NULL;\n\treturn -1;\n}\n\nstatic int _ssh_close(git_smart_subtransport *subtransport)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tGIT_ASSERT(!t->current_stream);\n\n\tGIT_UNUSED(t);\n\n\treturn 0;\n}\n\nstatic void _ssh_free(git_smart_subtransport *subtransport)\n{\n\tssh_subtransport *t = GIT_CONTAINER_OF(subtransport, ssh_subtransport, parent);\n\n\tgit__free(t->cmd_uploadpack);\n\tgit__free(t->cmd_receivepack);\n\tgit__free(t);\n}\n\n#define SSH_AUTH_PUBLICKEY \"publickey\"\n#define SSH_AUTH_PASSWORD \"password\"\n#define SSH_AUTH_KEYBOARD_INTERACTIVE \"keyboard-interactive\"\n\nstatic int list_auth_methods(int *out, LIBSSH2_SESSION *session, const char *username)\n{\n\tconst char *list, *ptr;\n\n\t*out = 0;\n\n\tlist = libssh2_userauth_list(session, username, strlen(username));\n\n\t/* either error, or the remote accepts NONE auth, which is bizarre, let's punt */\n\tif (list == NULL && !libssh2_userauth_authenticated(session)) {\n\t\tssh_error(session, \"Failed to retrieve list of SSH authentication methods\");\n\t\treturn GIT_EAUTH;\n\t}\n\n\tptr = list;\n\twhile (ptr) {\n\t\tif (*ptr == ',')\n\t\t\tptr++;\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_PUBLICKEY)) {\n\t\t\t*out |= GIT_CREDENTIAL_SSH_KEY;\n\t\t\t*out |= GIT_CREDENTIAL_SSH_CUSTOM;\n#ifdef GIT_SSH_MEMORY_CREDENTIALS\n\t\t\t*out |= GIT_CREDENTIAL_SSH_MEMORY;\n#endif\n\t\t\tptr += strlen(SSH_AUTH_PUBLICKEY);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_PASSWORD)) {\n\t\t\t*out |= GIT_CREDENTIAL_USERPASS_PLAINTEXT;\n\t\t\tptr += strlen(SSH_AUTH_PASSWORD);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!git__prefixcmp(ptr, SSH_AUTH_KEYBOARD_INTERACTIVE)) {\n\t\t\t*out |= GIT_CREDENTIAL_SSH_INTERACTIVE;\n\t\t\tptr += strlen(SSH_AUTH_KEYBOARD_INTERACTIVE);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Skip it if we don't know it */\n\t\tptr = strchr(ptr, ',');\n\t}\n\n\treturn 0;\n}\n#endif\n\nint git_smart_subtransport_ssh(\n\tgit_smart_subtransport **out, git_transport *owner, void *param)\n{\n#ifdef GIT_SSH\n\tssh_subtransport *t;\n\n\tGIT_ASSERT_ARG(out);\n\n\tGIT_UNUSED(param);\n\n\tt = git__calloc(sizeof(ssh_subtransport), 1);\n\tGIT_ERROR_CHECK_ALLOC(t);\n\n\tt->owner = (transport_smart *)owner;\n\tt->parent.action = _ssh_action;\n\tt->parent.close = _ssh_close;\n\tt->parent.free = _ssh_free;\n\n\t*out = (git_smart_subtransport *) t;\n\treturn 0;\n#else\n\tGIT_UNUSED(owner);\n\tGIT_UNUSED(param);\n\n\tGIT_ASSERT_ARG(out);\n\t*out = NULL;\n\n\tgit_error_set(GIT_ERROR_INVALID, \"cannot create SSH transport. Library was built without SSH support\");\n\treturn -1;\n#endif\n}\n\nint git_transport_ssh_with_paths(git_transport **out, git_remote *owner, void *payload)\n{\n#ifdef GIT_SSH\n\tgit_strarray *paths = (git_strarray *) payload;\n\tgit_transport *transport;\n\ttransport_smart *smart;\n\tssh_subtransport *t;\n\tint error;\n\tgit_smart_subtransport_definition ssh_definition = {\n\t\tgit_smart_subtransport_ssh,\n\t\t0, /* no RPC */\n\t\tNULL,\n\t};\n\n\tif (paths->count != 2) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"invalid ssh paths, must be two strings\");\n\t\treturn GIT_EINVALIDSPEC;\n\t}\n\n\tif ((error = git_transport_smart(&transport, owner, &ssh_definition)) < 0)\n\t\treturn error;\n\n\tsmart = (transport_smart *) transport;\n\tt = (ssh_subtransport *) smart->wrapped;\n\n\tt->cmd_uploadpack = git__strdup(paths->strings[0]);\n\tGIT_ERROR_CHECK_ALLOC(t->cmd_uploadpack);\n\tt->cmd_receivepack = git__strdup(paths->strings[1]);\n\tGIT_ERROR_CHECK_ALLOC(t->cmd_receivepack);\n\n\t*out = transport;\n\treturn 0;\n#else\n\tGIT_UNUSED(owner);\n\tGIT_UNUSED(payload);\n\n\tGIT_ASSERT_ARG(out);\n\t*out = NULL;\n\n\tgit_error_set(GIT_ERROR_INVALID, \"cannot create SSH transport. Library was built without SSH support\");\n\treturn -1;\n#endif\n}\n\n#ifdef GIT_SSH\nstatic void shutdown_ssh(void)\n{\n    libssh2_exit();\n}\n#endif\n\nint git_transport_ssh_global_init(void)\n{\n#ifdef GIT_SSH\n\tif (libssh2_init(0) < 0) {\n\t\tgit_error_set(GIT_ERROR_SSH, \"unable to initialize libssh2\");\n\t\treturn -1;\n\t}\n\n\treturn git_runtime_shutdown_register(shutdown_ssh);\n\n#else\n\n\t/* Nothing to initialize */\n\treturn 0;\n\n#endif\n}\n", "# tests: the unit and integration tests for libgit2\n\nset(Python_ADDITIONAL_VERSIONS 3 2.7)\nfind_package(PythonInterp)\n\nif(NOT PYTHONINTERP_FOUND)\n\tmessage(FATAL_ERROR \"Could not find a python interpreter, which is needed to build the tests. \"\n\t                     \"Make sure python is available, or pass -DBUILD_TESTS=OFF to skip building the tests\")\nENDIF()\n\nset(CLAR_PATH \"${PROJECT_SOURCE_DIR}/tests/clar\")\nset(CLAR_FIXTURES \"${PROJECT_SOURCE_DIR}/tests/resources/\")\nset(TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\")\nadd_definitions(-DCLAR_FIXTURE_PATH=\\\"${CLAR_FIXTURES}\\\")\nadd_definitions(-DCLAR_TMPDIR=\\\"libgit2_tests\\\")\nadd_definitions(-DCLAR_WIN32_LONGPATHS)\nadd_definitions(-D_FILE_OFFSET_BITS=64)\n\n# Ensure that we do not use deprecated functions internally\nadd_definitions(-DGIT_DEPRECATE_HARD)\n\nset(TEST_INCLUDES \"${CLAR_PATH}\" \"${TEST_PATH}\" \"${CMAKE_CURRENT_BINARY_DIR}\")\nfile(GLOB_RECURSE SRC_TEST ${TEST_PATH}/*/*.c ${TEST_PATH}/*/*.h)\nfile(GLOB_RECURSE SRC_CLAR ${CLAR_PATH}/*.c ${CLAR_PATH}/*.h)\n\nif(MSVC_IDE)\n\tlist(APPEND SRC_TEST \"precompiled.c\")\nendif()\n\nadd_custom_command(\n\tOUTPUT ${CMAKE_CURRENT_BINARY_DIR}/clar.suite ${CMAKE_CURRENT_BINARY_DIR}/clar_suite.h\n\tCOMMAND ${PYTHON_EXECUTABLE} ${CLAR_PATH}/generate.py -o \"${CMAKE_CURRENT_BINARY_DIR}\" -f -xonline -xstress -xperf .\n\tDEPENDS ${SRC_TEST}\n\tWORKING_DIRECTORY ${TEST_PATH}\n)\n\nset_source_files_properties(\n\t${CLAR_PATH}/clar.c\n\tPROPERTIES OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/clar.suite)\n\nadd_executable(libgit2_tests ${SRC_CLAR} ${SRC_TEST} ${LIBGIT2_OBJECTS})\n\nset_target_properties(libgit2_tests PROPERTIES C_STANDARD 90)\nset_target_properties(libgit2_tests PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})\n\ntarget_include_directories(libgit2_tests PRIVATE ${TEST_INCLUDES} ${LIBGIT2_INCLUDES} ${LIBGIT2_DEPENDENCY_INCLUDES})\ntarget_include_directories(libgit2_tests SYSTEM PRIVATE ${LIBGIT2_SYSTEM_INCLUDES})\ntarget_link_libraries(libgit2_tests ${LIBGIT2_SYSTEM_LIBS})\n\nide_split_sources(libgit2_tests)\n\n#\n# Old versions of gcc require us to declare our test functions; don't do\n# this on newer compilers to avoid unnecessary recompilation.\n#\nif(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)\n\ttarget_compile_options(libgit2_tests PRIVATE -include \"clar_suite.h\")\nendif()\n\nif(MSVC_IDE)\n\t# Precompiled headers\n\tset_target_properties(libgit2_tests PROPERTIES COMPILE_FLAGS \"/Yuprecompiled.h /FIprecompiled.h\")\n\tset_source_files_properties(\"precompiled.c\" COMPILE_FLAGS \"/Ycprecompiled.h\")\nendif()\n\ninclude(AddClarTest)\nadd_clar_test(libgit2_tests offline             -v -xonline)\nadd_clar_test(libgit2_tests invasive            -v -score::ftruncate -sfilter::stream::bigfile -sodb::largefiles -siterator::workdir::filesystem_gunk -srepo::init -srepo::init::at_filesystem_root)\nadd_clar_test(libgit2_tests online              -v -sonline -xonline::customcert -xonline::clone::ssh_auth_methods)\nadd_clar_test(libgit2_tests online_customcert   -v -sonline::customcert)\nadd_clar_test(libgit2_tests gitdaemon           -v -sonline::push)\nadd_clar_test(libgit2_tests ssh                 -v -sonline::push -sonline::clone::ssh_cert -sonline::clone::ssh_with_paths -sonline::clone::path_whitespace_ssh -sonline::clone::ssh_auth_methods)\nadd_clar_test(libgit2_tests proxy               -v -sonline::clone::proxy)\nadd_clar_test(libgit2_tests auth_clone          -v -sonline::clone::cred)\nadd_clar_test(libgit2_tests auth_clone_and_push -v -sonline::clone::push -sonline::push)\n"], "filenames": ["CMakeLists.txt", "ci/test.sh", "docs/changelog.md", "include/git2/version.h", "package.json", "src/libgit2/transports/ssh.c", "tests/libgit2/CMakeLists.txt"], "buggy_code_start_loc": [9, 146, 0, 14, 3, 423, 69], "buggy_code_end_loc": [10, 146, 0, 24, 4, 653, 73], "fixing_code_start_loc": [9, 147, 1, 14, 3, 424, 69], "fixing_code_end_loc": [10, 152, 12, 24, 4, 889, 73], "type": "CWE-347", "message": "libgit2 is a cross-platform, linkable library implementation of Git. When using an SSH remote with the optional libssh2 backend, libgit2 does not perform certificate checking by default. Prior versions of libgit2 require the caller to set the `certificate_check` field of libgit2's `git_remote_callbacks` structure - if a certificate check callback is not set, libgit2 does not perform any certificate checking. This means that by default - without configuring a certificate check callback, clients will not perform validation on the server SSH keys and may be subject to a man-in-the-middle attack. Users are encouraged to upgrade to v1.4.5 or v1.5.1. Users unable to upgrade should ensure that all relevant certificates are manually checked.", "other": {"cve": {"id": "CVE-2023-22742", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-20T23:15:10.307", "lastModified": "2023-01-30T20:53:47.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "libgit2 is a cross-platform, linkable library implementation of Git. When using an SSH remote with the optional libssh2 backend, libgit2 does not perform certificate checking by default. Prior versions of libgit2 require the caller to set the `certificate_check` field of libgit2's `git_remote_callbacks` structure - if a certificate check callback is not set, libgit2 does not perform any certificate checking. This means that by default - without configuring a certificate check callback, clients will not perform validation on the server SSH keys and may be subject to a man-in-the-middle attack. Users are encouraged to upgrade to v1.4.5 or v1.5.1. Users unable to upgrade should ensure that all relevant certificates are manually checked."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-347"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libgit2:libgit2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.5", "matchCriteriaId": "211986E1-A66C-4735-8B6B-668FC843933C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:libgit2:libgit2:1.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "B2042615-3246-4D57-9182-2FAFE3397667"}]}]}], "references": [{"url": "https://github.com/libgit2/libgit2/commit/42e5db98b963ae503229c63e44e06e439df50e56", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/libgit2/libgit2/commit/cd6f679af401eda1f172402006ef8265f8bd58ea", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/libgit2/libgit2/releases/tag/v1.4.5", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/libgit2/libgit2/releases/tag/v1.5.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.libssh2.org", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/libgit2/libgit2/commit/42e5db98b963ae503229c63e44e06e439df50e56"}}