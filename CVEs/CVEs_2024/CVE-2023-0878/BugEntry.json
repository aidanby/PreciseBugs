{"buggy_code": ["import { joinURL } from 'ufo'\nimport { useNuxtApp, useRuntimeConfig } from '../nuxt'\nimport { useHead } from './head'\n\ninterface LoadPayloadOptions {\n  fresh?: boolean\n  hash?: string\n}\n\nexport function loadPayload (url: string, opts: LoadPayloadOptions = {}) {\n  if (process.server) { return null }\n  const payloadURL = _getPayloadURL(url, opts)\n  const nuxtApp = useNuxtApp()\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {}\n  if (cache[url]) {\n    return cache[url]\n  }\n  cache[url] = _importPayload(payloadURL).then((payload) => {\n    if (!payload) {\n      delete cache[url]\n      return null\n    }\n    return payload\n  })\n  return cache[url]\n}\n\nexport function preloadPayload (url: string, opts: LoadPayloadOptions = {}) {\n  const payloadURL = _getPayloadURL(url, opts)\n  useHead({\n    link: [\n      { rel: 'modulepreload', href: payloadURL }\n    ]\n  })\n}\n\n// --- Internal ---\n\nfunction _getPayloadURL (url: string, opts: LoadPayloadOptions = {}) {\n  const u = new URL(url, 'http://localhost')\n  if (u.search) {\n    throw new Error('Payload URL cannot contain search params: ' + url)\n  }\n  if (u.host !== 'localhost') {\n    throw new Error('Payload URL cannot contain host: ' + url)\n  }\n  const hash = opts.hash || (opts.fresh ? Date.now() : '')\n  return joinURL(useRuntimeConfig().app.baseURL, u.pathname, hash ? `_payload.${hash}.js` : '_payload.js')\n}\n\nasync function _importPayload (payloadURL: string) {\n  if (process.server) { return null }\n  const res = await import(/* webpackIgnore: true */ /* @vite-ignore */ payloadURL).catch((err) => {\n    console.warn('[nuxt] Cannot load payload ', payloadURL, err)\n  })\n  return res?.default || null\n}\n\nexport function isPrerendered () {\n  // Note: Alternative for server is checking x-nitro-prerender header\n  const nuxtApp = useNuxtApp()\n  return !!nuxtApp.payload.prerenderedAt\n}\n"], "fixing_code": ["import { joinURL, hasProtocol } from 'ufo'\nimport { useNuxtApp, useRuntimeConfig } from '../nuxt'\nimport { useHead } from './head'\n\ninterface LoadPayloadOptions {\n  fresh?: boolean\n  hash?: string\n}\n\nexport function loadPayload (url: string, opts: LoadPayloadOptions = {}) {\n  if (process.server) { return null }\n  const payloadURL = _getPayloadURL(url, opts)\n  const nuxtApp = useNuxtApp()\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {}\n  if (cache[url]) {\n    return cache[url]\n  }\n  cache[url] = _importPayload(payloadURL).then((payload) => {\n    if (!payload) {\n      delete cache[url]\n      return null\n    }\n    return payload\n  })\n  return cache[url]\n}\n\nexport function preloadPayload (url: string, opts: LoadPayloadOptions = {}) {\n  const payloadURL = _getPayloadURL(url, opts)\n  useHead({\n    link: [\n      { rel: 'modulepreload', href: payloadURL }\n    ]\n  })\n}\n\n// --- Internal ---\n\nfunction _getPayloadURL (url: string, opts: LoadPayloadOptions = {}) {\n  if (hasProtocol(url, true)) {\n    throw new Error('Payload URL must not include hostname: ' + url)\n  }\n  const u = new URL(url, 'http://localhost')\n  if (u.search) {\n    throw new Error('Payload URL cannot contain search params: ' + url)\n  }\n  const hash = opts.hash || (opts.fresh ? Date.now() : '')\n  return joinURL(useRuntimeConfig().app.baseURL, u.pathname, hash ? `_payload.${hash}.js` : '_payload.js')\n}\n\nasync function _importPayload (payloadURL: string) {\n  if (process.server) { return null }\n  const res = await import(/* webpackIgnore: true */ /* @vite-ignore */ payloadURL).catch((err) => {\n    console.warn('[nuxt] Cannot load payload ', payloadURL, err)\n  })\n  return res?.default || null\n}\n\nexport function isPrerendered () {\n  // Note: Alternative for server is checking x-nitro-prerender header\n  const nuxtApp = useNuxtApp()\n  return !!nuxtApp.payload.prerenderedAt\n}\n"], "filenames": ["packages/nuxt/src/app/composables/payload.ts"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [46], "fixing_code_start_loc": [1], "fixing_code_end_loc": [45], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository nuxt/framework prior to 3.2.1.", "other": {"cve": {"id": "CVE-2023-0878", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-17T01:15:10.773", "lastModified": "2023-02-25T03:38:28.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository nuxt/framework prior to 3.2.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nuxt:nuxt:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.1", "matchCriteriaId": "0E2B4BF4-D2FA-4A64-AB16-70716FD55D73"}]}]}], "references": [{"url": "https://github.com/nuxt/framework/commit/7aa35ff958eec0c7d071d3fcd481db57281dbcd9", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/a892caf7-b8c2-4638-8cee-eb779d51066a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nuxt/framework/commit/7aa35ff958eec0c7d071d3fcd481db57281dbcd9"}}