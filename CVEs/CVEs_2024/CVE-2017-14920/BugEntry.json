{"buggy_code": ["/**\n * EGroupware eTemplate2 - JS Widget base class\n *\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Andreas St\u00f6ckel\n * @copyright Stylite 2011\n * @version $Id$\n */\n\n/*egw:uses\n\t/vendor/bower-asset/jquery/dist/jquery.js;\n\tlib/tooltip;\n\tet2_core_DOMWidget;\n*/\n\n/**\n * Class which manages the DOM node itself. The simpleWidget class is derrived\n * from et2_DOMWidget and implements the getDOMNode function. A setDOMNode\n * function is provided, which attatches the given node to the DOM if possible.\n *\n * @augments et2_DOMWidget\n */\nvar et2_baseWidget = (function(){ \"use strict\"; return et2_DOMWidget.extend(et2_IAligned,\n{\n\tattributes: {\n\t\t\"statustext\": {\n\t\t\t\"name\": \"Tooltip\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Tooltip which is shown for this element\",\n\t\t\t\"translate\": true\n\t\t},\n\t\t\"align\": {\n\t\t\t\"name\": \"Align\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"default\": \"left\",\n\t\t\t\"description\": \"Position of this element in the parent hbox\"\n\t\t},\n\t\t\"onclick\": {\n\t\t\t\"name\": \"onclick\",\n\t\t\t\"type\": \"js\",\n\t\t\t\"default\": et2_no_init,\n\t\t\t\"description\": \"JS code which is executed when the element is clicked.\"\n\t\t}\n\t},\n\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2BaseWidget\n\t */\n\tinit: function() {\n\t\tthis.align = \"left\";\n\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.node = null;\n\t\tthis.statustext = \"\";\n\t\tthis._messageDiv = null;\n\t\tthis._tooltipElem = null;\n\t},\n\n\tdestroy: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.node = null;\n\t\tthis._messageDiv = null;\n\t},\n\n\t/**\n\t * The setMessage function can be used to attach a small message box to the\n\t * widget. This is e.g. used to display validation errors or success messages\n\t *\n\t * @param _text is the text which should be displayed as a message\n\t * @param _type is an css class which is attached to the message box.\n\t * \tCurrently available are \"hint\", \"success\" and \"validation_error\", defaults\n\t * \tto \"hint\"\n\t * @param _floating if true, the object will be in one row with the element,\n\t * \tdefaults to true\n\t * @param _prepend if set, the message is displayed behind the widget node\n\t * \tinstead of before. Defaults to false.\n\t */\n\tshowMessage: function(_text, _type, _floating, _prepend) {\n\n\t\t// Preset the parameters\n\t\tif (typeof _type == \"undefined\")\n\t\t{\n\t\t\t_type = \"hint\";\n\t\t}\n\n\t\tif (typeof _floating == \"undefined\")\n\t\t{\n\t\t\t_floating = true;\n\t\t}\n\n\t\tif (typeof _prepend == \"undefined\")\n\t\t{\n\t\t\t_prepend = false;\n\t\t}\n\n\t\tvar surr = this.getSurroundings();\n\n\t\t// Remove the message div from the surroundings before creating a new\n\t\t// one\n\t\tthis.hideMessage(false, true);\n\n\t\t// Create the message div and add it to the \"surroundings\" manager\n\t\tthis._messageDiv = jQuery(document.createElement(\"div\"))\n\t\t\t.addClass(\"message\")\n\t\t\t.addClass(_type)\n\t\t\t.addClass(_floating ? \"floating\" : \"\")\n\t\t\t.text(_text.valueOf() + \"\");\n\n\t\t// Decide whether to prepend or append the div\n\t\tif (_prepend)\n\t\t{\n\t\t\tsurr.prependDOMNode(this._messageDiv[0]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsurr.appendDOMNode(this._messageDiv[0]);\n\t\t}\n\n\t\tsurr.update();\n\t},\n\n\t/**\n\t * The hideMessage function can be used to hide a previously shown message.\n\t *\n\t * @param _fade if true, the message div will fade out, otherwise the message\n\t * \tdiv is removed immediately. Defaults to true.\n\t * @param _noUpdate is used internally to prevent an update of the surroundings\n\t * \tmanager.\n\t */\n\thideMessage: function(_fade, _noUpdate) {\n\t\tif (typeof _fade == \"undefined\")\n\t\t{\n\t\t\t_fade = true;\n\t\t}\n\n\t\tif (typeof _noUpdate == \"undefined\")\n\t\t{\n\t\t\t_noUpdate = false;\n\t\t}\n\n\t\t// Remove the message from the surroundings manager and remove the\n\t\t// reference to it\n\t\tif (this._messageDiv != null)\n\t\t{\n\t\t\tvar surr = this.getSurroundings();\n\t\t\tvar self = this;\n\t\t\tvar messageDiv = this._messageDiv;\n\t\t\tself._messageDiv = null;\n\n\t\t\tvar _done = function() {\n\t\t\t\tsurr.removeDOMNode(messageDiv[0]);\n\n\t\t\t\t// Update the surroundings manager\n\t\t\t\tif (!_noUpdate)\n\t\t\t\t{\n\t\t\t\t\tsurr.update();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Either fade out or directly call the function which removes the div\n\t\t\tif (_fade)\n\t\t\t{\n\t\t\t\tmessageDiv.fadeOut(\"fast\", _done);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_done();\n\t\t\t}\n\t\t}\n\t},\n\n\tdetachFromDOM: function() {\n\t\t// Detach this node from the tooltip node\n\t\tif (this._tooltipElem)\n\t\t{\n\t\t\tthis.egw().tooltipUnbind(this._tooltipElem);\n\t\t\tthis._tooltipElem = null;\n\t\t}\n\n\t\t// Remove the binding to the click handler\n\t\tif (this.node)\n\t\t{\n\t\t\tjQuery(this.node).unbind(\"click.et2_baseWidget\");\n\t\t}\n\n\t\tthis._super.apply(this, arguments);\n\t},\n\n\tattachToDOM: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Add the binding for the click handler\n\t\tif (this.node)\n\t\t{\n\t\t\tjQuery(this.node).bind(\"click.et2_baseWidget\", this, function(e) {\n\t\t\t\treturn e.data.click.call(e.data, e, this);\n\t\t\t});\n\t\t\tif (typeof this.onclick == 'function') jQuery(this.node).addClass('et2_clickable');\n\t\t}\n\n\t\t// Update the statustext\n\t\tthis.set_statustext(this.statustext);\n\t},\n\n\tsetDOMNode: function(_node) {\n\t\tif (_node != this.node)\n\t\t{\n\t\t\t// Deatch the old node from the DOM\n\t\t\tthis.detachFromDOM();\n\n\t\t\t// Set the new DOM-Node\n\t\t\tthis.node = _node;\n\n\t\t\t// Attatch the DOM-Node to the tree\n\t\t\treturn this.attachToDOM();\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tgetDOMNode: function() {\n\t\treturn this.node;\n\t},\n\n\tgetTooltipElement: function() {\n\t\treturn this.getDOMNode(this);\n\t},\n\n\t/**\n\t * Click handler calling custom handler set via onclick attribute to this.onclick\n\t *\n\t * @param _ev\n\t * @returns\n\t */\n\tclick: function(_ev) {\n\t\tif(typeof this.onclick == 'function')\n\t\t{\n\t\t\t// Make sure function gets a reference to the widget, splice it in as 2. argument if not\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif(args.indexOf(this) == -1) args.splice(1, 0, this);\n\n\t\t\treturn this.onclick.apply(this, args);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tset_statustext: function(_value) {\n\t\t// Tooltip should not be shown in mobile view\n\t\tif (egwIsMobile()) return;\n\t\t// Don't execute the code below, if no tooltip will be attached/detached\n\t\tif (_value == \"\" && !this._tooltipElem)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.statustext = _value;\n\n\t\t//Get the domnode the tooltip should be attached to\n\t\tvar elem = jQuery(this.getTooltipElement());\n\n\t\tif (elem)\n\t\t{\n\t\t\t//If a tooltip is already attached to the element, remove it first\n\t\t\tif (this._tooltipElem)\n\t\t\t{\n\t\t\t\tthis.egw().tooltipUnbind(this._tooltipElem);\n\t\t\t\tthis._tooltipElem = null;\n\t\t\t}\n\n\t\t\tif (_value && _value != '')\n\t\t\t{\n\t\t\t\tthis.egw().tooltipBind(elem, _value);\n\t\t\t\tthis._tooltipElem = elem;\n\t\t\t}\n\t\t}\n\t},\n\n\tset_align: function(_value) {\n\t\tthis.align = _value;\n\t},\n\n\tget_align: function(_value) {\n\t\treturn this.align;\n\t}\n\n});}).call(this);\n\n/**\n * Simple container object\n *\n * @augments et2_baseWidget\n */\nvar et2_container = (function(){ \"use strict\"; return et2_baseWidget.extend(\n{\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_container\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.setDOMNode(document.createElement(\"div\"));\n\t},\n\n\t/**\n\t * The destroy function destroys all children of the widget, removes itself\n\t * from the parents children list.\n\t * Overriden to not try to remove self from parent, as that's not possible.\n\t */\n\tdestroy: function() {\n\t\t// Call the destructor of all children\n\t\tfor (var i = this._children.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis._children[i].free();\n\t\t}\n\n\t\t// Free the array managers if they belong to this widget\n\t\tfor (var key in this._mgrs)\n\t\t{\n\t\t\tif (this._mgrs[key] && this._mgrs[key].owner == this)\n\t\t\t{\n\t\t\t\tthis._mgrs[key].free();\n\t\t\t}\n\t\t}\n\t}\n});}).call(this);\n\n/**\n * Container object for not-yet supported widgets\n *\n * @augments et2_baseWidget\n */\nvar et2_placeholder = (function(){ \"use strict\"; return et2_baseWidget.extend([et2_IDetachedDOM],\n{\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_placeholder\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// The attrNodes object will hold the DOM nodes which represent the\n\t\t// values of this object\n\t\tthis.attrNodes = {};\n\n\t\tthis.visible = false;\n\n\t\t// Create the placeholder div\n\t\tthis.placeDiv = jQuery(document.createElement(\"span\"))\n\t\t\t.addClass(\"et2_placeholder\");\n\n\t\tvar headerNode = jQuery(document.createElement(\"span\"))\n\t\t\t.text(this._type || \"\")\n\t\t\t.addClass(\"et2_caption\")\n\t\t\t.appendTo(this.placeDiv);\n\n\t\tvar attrsCntr = jQuery(document.createElement(\"span\"))\n\t\t\t.appendTo(this.placeDiv)\n\t\t\t.hide();\n\n\t\theaderNode.click(this, function(e) {\n\t\t\te.data.visible = !e.data.visible;\n\t\t\tif (e.data.visible)\n\t\t\t{\n\t\t\t\tattrsCntr.show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tattrsCntr.hide();\n\t\t\t}\n\t\t});\n\n\t\tfor (var key in this.options)\n\t\t{\n\t\t\tif (typeof this.options[key] != \"undefined\")\n\t\t\t{\n\t\t\t\tif (typeof this.attrNodes[key] == \"undefined\")\n\t\t\t\t{\n\t\t\t\t\tthis.attrNodes[key] = jQuery(document.createElement(\"span\"))\n\t\t\t\t\t\t.addClass(\"et2_attr\");\n\t\t\t\t\tattrsCntr.append(this.attrNodes[key]);\n\t\t\t\t}\n\n\t\t\t\tthis.attrNodes[key].text(key + \"=\" + this.options[key]);\n\t\t\t}\n\t\t}\n\n\t\tthis.setDOMNode(this.placeDiv[0]);\n\t},\n\n\tgetDetachedAttributes: function(_attrs) {\n\t\t_attrs.push(\"value\");\n\t},\n\n\tgetDetachedNodes: function() {\n\t\treturn [this.placeDiv[0]];\n\t},\n\n\tsetDetachedAttributes: function(_nodes, _values) {\n\t\tthis.placeDiv = jQuery(_nodes[0]);\n\t}\n});}).call(this);\n\n", "/**\n * EGroupware clientside API object\n *\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Andreas St\u00f6ckel (as AT stylite.de)\n * @author Ralf Becker <RalfBecker@outdoor-training.de>\n * @version $Id$\n */\n\n/*egw:uses\n\tvendor.bower-asset.jquery.dist.jquery;\n\tegw_core;\n*/\n\n/**\n *\n * @param {string} _app application name object is instanciated for\n * @param {object} _wnd window object is instanciated for\n */\negw.extend('tooltip', egw.MODULE_WND_LOCAL, function(_app, _wnd)\n{\n\t\"use strict\";\n\n\tvar tooltip_div = null;\n\tvar current_elem = null;\n\n\tvar time_delta = 100;\n\tvar show_delta = 0;\n\tvar show_delay = 200;\n\n\tvar x = 0;\n\tvar y = 0;\n\n\t/**\n\t * Removes the tooltip_div from the DOM if it does exist.\n\t */\n\tfunction hide()\n\t{\n\t\tif (tooltip_div != null)\n\t\t{\n\t\t\ttooltip_div.remove();\n\t\t\ttooltip_div = null;\n\t\t}\n\t}\n\n\t/**\n\t * Shows the tooltip at the current cursor position.\n\t */\n\tfunction show()\n\t{\n\t\tif (tooltip_div && typeof x !== 'undefined' && typeof y !== 'undefined')\n\t\t{\n\t\t\t//Calculate the cursor_rectangle - this is a space the tooltip might\n\t\t\t//not overlap with\n\t\t\tvar cursor_rect = {\n\t\t\t\tleft: (x - 8),\n\t\t\t\ttop: (y - 8),\n\t\t\t\tright: (x + 8),\n\t\t\t\tbottom: (y + 8)\n\t\t\t};\n\n\t\t\t//Calculate how much space is left on each side of the rectangle\n\t\t\tvar window_width = jQuery(_wnd.document).width();\n\t\t\tvar window_height = jQuery(_wnd.document).height();\n\t\t\tvar space_left = {\n\t\t\t\tleft: (cursor_rect.left),\n\t\t\t\ttop: (cursor_rect.top),\n\t\t\t\tright: (window_width - cursor_rect.right),\n\t\t\t\tbottom: (window_height - cursor_rect.bottom)\n\t\t\t};\n\n\t\t\t//Get the width and the height of the tooltip\n\t\t\tvar tooltip_width = tooltip_div.width();\n\t\t\tif (tooltip_width > 300) tooltip_width = 300;\n\t\t\tvar tooltip_height = tooltip_div.height();\n\n\t\t\tif (space_left.right < tooltip_width) {\n\t\t\t\ttooltip_div.css('left', Math.max(0,cursor_rect.left - tooltip_width));\n\t\t\t} else if (space_left.left >= tooltip_width) {\n\t\t\t\ttooltip_div.css('left', cursor_rect.right);\n\t\t\t} else\t{\n\t\t\t\ttooltip_div.css('left', cursor_rect.right);\n\t\t\t\ttooltip_div.css('max-width', space_left.right);\n\t\t\t}\n\n\t\t\t// tooltip does fit neither above nor below: put him vertical centered left or right of cursor\n\t\t\tif (space_left.bottom < tooltip_height && space_left.top < tooltip_height) {\n\t\t\t\tif (tooltip_height > window_height-20) {\n\t\t\t\t\ttooltip_div.css('max-height', tooltip_height=window_height-20);\n\t\t\t\t}\n\t\t\t\ttooltip_div.css('top', (window_height-tooltip_height)/2);\n\t\t\t} else if (space_left.bottom < tooltip_height) {\n\t\t\t\ttooltip_div.css('top', cursor_rect.top - tooltip_height);\n\t\t\t} else {\n\t\t\t\ttooltip_div.css('top', cursor_rect.bottom);\n\t\t\t}\n\n\t\t\ttooltip_div.fadeIn(100);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the tooltip_div with the given text.\n\t *\n\t * @param {string} _html\n\t */\n\tfunction prepare(_html)\n\t{\n\t\t// Free and null the old tooltip_div\n\t\thide();\n\n\t\t//Generate the tooltip div, set it's text and append it to the body tag\n\t\ttooltip_div = jQuery(_wnd.document.createElement('div'));\n\t\ttooltip_div.hide();\n\t\ttooltip_div.append(_html);\n\t\ttooltip_div.addClass(\"egw_tooltip\");\n\t\tjQuery(_wnd.document.body).append(tooltip_div);\n\n\t\t//The tooltip should automatically hide when the mouse comes over it\n\t\ttooltip_div.mouseenter(function() {\n\t\t\t\thide();\n\t\t});\n\t}\n\n\t/**\n\t * showTooltipTimeout is used to prepare showing the tooltip.\n\t */\n\tfunction showTooltipTimeout()\n\t{\n\t\tif (current_elem != null)\n\t\t{\n\t\t\tshow_delta += time_delta;\n\t\t\tif (show_delta < show_delay)\n\t\t\t{\n\t\t\t\t//Repeat the call of timeout\n\t\t\t\t_wnd.setTimeout(showTooltipTimeout, time_delta);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tshow_delta = 0;\n\t\t\t\tshow();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\t/**\n\t\t * Binds a tooltip to the given DOM-Node with the given html.\n\t\t * It is important to remove all tooltips from all elements which are\n\t\t * no longer needed, in order to prevent memory leaks.\n\t\t *\n\t\t * @param _elem is the element to which the tooltip should get bound. It\n\t\t * \thas to be a jQuery node.\n\t\t * @param _html is the html code which should be shown as tooltip.\n\t\t */\n\t\ttooltipBind: function(_elem, _html) {\n\t\t\tif (_html != '')\n\t\t\t{\n\t\t\t\t_elem.bind('mouseenter.tooltip', function(e) {\n\t\t\t\t\tif (_elem != current_elem)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Prepare the tooltip\n\t\t\t\t\t\tprepare(_html);\n\n\t\t\t\t\t\t// Set the current element the mouse is over and\n\t\t\t\t\t\t// initialize the position variables\n\t\t\t\t\t\tcurrent_elem = _elem;\n\t\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\t\tx = e.clientX;\n\t\t\t\t\t\ty = e.clientY;\n\n\t\t\t\t\t\t// Create the timeout for showing the timeout\n\t\t\t\t\t\t_wnd.setTimeout(showTooltipTimeout, time_delta);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\t_elem.bind('mouseleave.tooltip', function() {\n\t\t\t\t\tcurrent_elem = null;\n\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\tif (tooltip_div)\n\t\t\t\t\t{\n\t\t\t\t\t\ttooltip_div.fadeOut(100);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t_elem.bind('mousemove.tooltip', function(e) {\n\t\t\t\t\t//Calculate the distance the mouse took since the last call of mousemove\n\t\t\t\t\tvar dx = x - e.clientX;\n\t\t\t\t\tvar dy = y - e.clientY;\n\t\t\t\t\tvar movedist = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\t\t//Block appereance of the tooltip on fast movements (with small movedistances)\n\t\t\t\t\tif (movedist > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tx = e.clientX;\n\t\t\t\t\ty = e.clientY;\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Unbinds the tooltip from the given DOM-Node.\n\t\t *\n\t\t * @param _elem is the element from which the tooltip should get\n\t\t * removed. _elem has to be a jQuery node.\n\t\t */\n\t\ttooltipUnbind: function(_elem) {\n\t\t\tif (current_elem == _elem)\n\t\t\t{\n\t\t\t\thide();\n\t\t\t\tcurrent_elem = null;\n\t\t\t}\n\n\t\t\t// Unbind all \"tooltip\" events from the given element\n\t\t\t_elem.unbind('.tooltip');\n\t\t}\n\t};\n\n});\n\n", "/*\n * Egroupware Calendar event widget\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Nathan Gray\n * @version $Id$\n */\n\n\n/*egw:uses\n\t/etemplate/js/et2_core_valueWidget;\n*/\n\n/**\n * Class for a single event, displayed in either the timegrid or planner view\n *\n * It is possible to directly provide all information directly, but calendar\n * uses egw.data for caching, so ID is all that is needed.\n *\n * Note that there are several pieces of information that have 'ID' in them:\n * - row_id - used by both et2_calendar_event and the nextmatch to uniquely\n *\tidentify a particular entry or entry ocurrence\n * - id - Recurring events may have their recurrence as a timestamp after their ID,\n *\tsuch as '194:1453318200', or not.  It's usually (always?) the same as row ID.\n * - app_id - the ID according to the source application.  For calendar, this\n *\tis the same as ID (but always with the recurrence), for other apps this is\n *\tusually just an integer.  With app_id and app, you should be able to call\n *\tegw.open() and get the specific entry.\n * - Events from other apps will have their app name prepended to their ID, such\n *\tas 'infolog123', so app_id and id will be different for these events\n * - Cache ID is the same as other apps, and looks like 'calendar::<row_id>'\n * - The DOM ID for the containing div is event_<row_id>\n *\n * Events are expected to be added to either et2_calendar_daycol or\n * et2_calendar_planner_row rather than either et2_calendar_timegrid or\n * et2_calendar_planner directly.\n *\n *\n * @augments et2_valueWidget\n */\nvar et2_calendar_event = (function(){ \"use strict\"; return et2_valueWidget.extend([et2_IDetachedDOM],\n{\n\n\tattributes: {\n\t\t\"value\": {\n\t\t\ttype: \"any\",\n\t\t\tdefault: et2_no_init\n\t\t},\n\t\t\"onclick\": {\n\t\t\t\"description\": \"JS code which is executed when the element is clicked. \" +\n\t\t\t\t\"If no handler is provided, or the handler returns true and the event is not read-only, the \" +\n\t\t\t\t\"event will be opened according to calendar settings.\"\n\t\t}\n\t},\n\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_calendar_daycol\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tvar event = this;\n\n\t\t// Main container\n\t\tthis.div = jQuery(document.createElement(\"div\"))\n\t\t\t.addClass(\"calendar_calEvent\")\n\t\t\t.addClass(this.options.class)\n\t\t\t.css('width',this.options.width)\n\t\t\t.on('mouseenter', function() {\n\t\t\t\t// Bind actions on first mouseover for faster creation\n\t\t\t\tif(event._need_actions_linked)\n\t\t\t\t{\n\t\t\t\t\tevent._copy_parent_actions();\n\t\t\t\t}\n\t\t\t\t// Tooltip\n\t\t\t\tif(!event._tooltipElem)\n\t\t\t\t{\n\t\t\t\t\tevent.set_statustext(event._tooltip());\n\t\t\t\t\treturn event.div.trigger('mouseenter');\n\t\t\t\t}\n\t\t\t\t// Hacky to remove egw's tooltip border and let the mouse in\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\tjQuery('body .egw_tooltip')\n\t\t\t\t\t\t.css('border','none')\n\t\t\t\t\t\t.on('mouseenter', function() {\n\t\t\t\t\t\t\tevent.div.off('mouseleave.tooltip');\n\t\t\t\t\t\t\tjQuery('body.egw_tooltip').remove();\n\t\t\t\t\t\t\tjQuery('body').append(this);\n\t\t\t\t\t\t\tjQuery(this).stop(true).fadeTo(400, 1)\n\t\t\t\t\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\t\t\t\t\tjQuery(this).fadeOut('400', function() {\n\t\t\t\t\t\t\t\t\t\tjQuery(this).remove();\n\t\t\t\t\t\t\t\t\t\t// Set up to work again\n\t\t\t\t\t\t\t\t\t\tevent.set_statustext(event._tooltip());\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t},105);\n\t\t\t});\n\t\tthis.title = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventHeader\")\n\t\t\t.appendTo(this.div);\n\t\tthis.body = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventBody\")\n\t\t\t.appendTo(this.div);\n\t\tthis.icons = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventIcons\")\n\t\t\t.appendTo(this.title);\n\n\t\tthis.setDOMNode(this.div[0]);\n\n\t\tthis._need_actions_linked = false;\n\t},\n\n\tdoLoadingFinished: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Already know what is needed to hook to cache\n\t\tif(this.options.value && this.options.value.row_id)\n\t\t{\n\t\t\tegw.dataRegisterUID(\n\t\t\t\t'calendar::'+this.options.value.row_id,\n\t\t\t\tthis._UID_callback,\n\t\t\t\tthis,\n\t\t\t\tthis.getInstanceManager().execId,\n\t\t\t\tthis.id\n\t\t\t);\n\t\t}\n\t\treturn true;\n\t},\n\n\tdestroy: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.remove();\n\t\t\tthis._actionObject = null;\n\t\t}\n\n\t\tthis.div.off();\n\t\tthis.title.remove();\n\t\tthis.title = null;\n\t\tthis.body.remove();\n\t\tthis.body = null;\n\t\tthis.icons = null;\n\t\tthis.div.remove();\n\t\tthis.div = null;\n\n\t\tjQuery('body.egw_tooltip').remove();\n\n\t\t// Unregister, or we'll continue to be notified...\n\t\tif(this.options.value)\n\t\t{\n\t\t\tvar old_app_id = this.options.value.row_id;\n\t\t\tegw.dataUnregisterUID('calendar::'+old_app_id,false,this);\n\t\t}\n\t},\n\n\tset_value: function(_value) {\n\t\t// Un-register for updates\n\t\tif(this.options.value)\n\t\t{\n\t\t\tvar old_id = this.options.value.row_id;\n\t\t\tif(!_value || !_value.row_id || old_id !== _value.row_id)\n\t\t\t{\n\t\t\t\tegw.dataUnregisterUID('calendar::'+old_id,false,this);\n\t\t\t}\n\t\t}\n\t\tthis.options.value = _value;\n\n\t\t// Register for updates\n\t\tvar id = this.options.value.row_id;\n\t\tif(!old_id || old_id !== id)\n\t\t{\n\t\t\tegw.dataRegisterUID('calendar::'+id, this._UID_callback ,this,this.getInstanceManager().execId,this.id);\n\t\t}\n\t\tif(_value && !egw.dataHasUID('calendar::'+id))\n\t\t{\n\t\t\tegw.dataStoreUID('calendar::'+id, _value);\n\t\t}\n\t},\n\n\t/**\n\t * Callback for changes in cached data\n\t */\n\t_UID_callback: function _UID_callback(event) {\n\t\t// Copy to avoid changes, which may cause nm problems\n\t\tvar value = event === null ? null : jQuery.extend({},event);\n\n\t\t// Make sure id is a string, check values\n\t\tif(value)\n\t\t{\n\t\t\tthis._values_check(value);\n\t\t}\n\n\t\t// Check for changing days in the grid view\n\t\tif(!this._sameday_check(value))\n\t\t{\n\t\t\t// May need to update parent to remove out-of-view events\n\t\t\tvar parent = this._parent;\n\t\t\tthis._parent.removeChild(this);\n\t\t\tif(event === null && parent && parent._out_of_view)\n\t\t\t{\n\t\t\t\tparent._out_of_view();\n\t\t\t}\n\t\t\t\n\t\t\t// This should now cease to exist, as new events have been created\n\t\t\tthis.free();\n\t\t\treturn;\n\t\t}\n\n\t\t// Copy to avoid changes, which may cause nm problems\n\t\tthis.options.value = jQuery.extend({},value);\n\n\t\tif(this._parent.options.date)\n\t\t{\n\t\t\tthis.options.value.date = this._parent.options.date;\n\t\t}\n\n\t\t// Let parent position\n\t\tthis._parent.position_event(this);\n\n\t\t// Parent may remove this if the date isn't the same\n\t\tif(this._parent)\n\t\t{\n\t\t\tthis._update();\n\t\t}\n\t},\n\n\t/**\n\t * Draw the event\n\t */\n\t_update: function() {\n\n\t\t// Update to reflect new information\n\t\tvar event = this.options.value;\n\n\t\tvar id = event.row_id ? event.row_id : event.id + (event.recur_type ? ':'+event.recur_date : '');\n\t\tvar formatted_start = event.start.toJSON();\n\n\t\tthis.set_id('event_' + id);\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.id = 'calendar::' + id;\n\t\t}\n\n\t\tthis._need_actions_linked = true;\n\n\t\t// Make sure category stuff is there\n\t\t// Fake it to use the cache / call - if already there, these will return\n\t\t// immediately.\n\t\tvar im = this.getInstanceManager();\n\t\tet2_selectbox.cat_options({\n\t\t\t_type:'select-cat',\n\t\t\tgetInstanceManager: function() {return im}\n\t\t}, {application:event.app||'calendar'});\n\n\t\t// Get CSS too\n\t\tegw.includeCSS('/api/categories.php?app='+event.app);\n\n\t\t// Need cleaning? (DnD helper removes content)\n\t\tif(!this.div.has(this.title).length)\n\t\t{\n\t\t\tthis.div\n\t\t\t\t.empty()\n\t\t\t\t.append(this.title)\n\t\t\t\t.append(this.body);\n\t\t}\n\t\tif(!this._parent.options.readonly && !this.options.readonly && this.div.droppable('instance'))\n\t\t{\n\t\t\tthis.div\n\t\t\t\t// Let timegrid always get the drag\n\t\t\t\t.droppable('option','greedy',false);\n\t\t}\n\t\t// DOM nodes\n\t\tthis.div\n\t\t\t// Set full day flag\n\t\t\t.attr('data-full_day', event.whole_day)\n\n\t\t\t// Put everything we need for basic interaction here, so it's available immediately\n\t\t\t.attr('data-id', event.id)\n\t\t\t.attr('data-app', event.app || 'calendar')\n\t\t\t.attr('data-app_id', event.app_id)\n\t\t\t.attr('data-start', formatted_start)\n\t\t\t.attr('data-owner', event.owner)\n\t\t\t.attr('data-recur_type', event.recur_type)\n\t\t\t.attr('data-resize', event.whole_day ? 'WD' : '' + (event.recur_type ? 'S':''))\n\t\t\t.attr('data-priority', event.priority)\n\t\t\t// Remove any category classes\n\t\t\t.removeClass(function(index, css) {\n\t\t\t\treturn (css.match (/(^|\\s)cat_\\S+/g) || []).join(' ');\n\t\t\t})\n\t\t\t// Remove any status classes\n\t\t\t.removeClass(function(index, css) {\n\t\t\t\treturn (css.match(/calendar_calEvent\\S+/g) || []).join(' ');\n\t\t\t})\n\t\t\t.removeClass('calendar_calEventSmall')\n\t\t\t.addClass(event.class)\n\t\t\t.toggleClass('calendar_calEventPrivate', typeof event.private !== 'undefined' && event.private);\n\t\tthis.options.class = event.class;\n\t\tvar status_class = this._status_class();\n\n\t\t// Add category classes, if real categories are set\n\t\tif(event.category && event.category != '0')\n\t\t{\n\t\t\tvar cats = event.category.split(',');\n\t\t\tfor(var i = 0; i < cats.length; i++)\n\t\t\t{\n\t\t\t\tthis.div.addClass('cat_' + cats[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.div.toggleClass('calendar_calEventUnknown', event.participants[egw.user('account_id')] ? event.participants[egw.user('account_id')][0] === 'U' : false);\n\t\tthis.div.addClass(status_class);\n\n\t\tthis.body.toggleClass('calendar_calEventBodySmall', event.whole_day_on_top || false);\n\n\t\t// Header\n\t\tvar title = !event.is_private ? egw.htmlspecialchars(event['title']) : egw.lang('private');\n\n\t\tthis.title\n\t\t\t.html('<span class=\"calendar_calTimespan\">'+this._get_timespan(event) + '<br /></span>')\n\t\t\t.append('<span class=\"calendar_calEventTitle\">'+title+'</span>')\n\n\t\t// Colors - don't make them transparent if there is no color\n\t\tif(jQuery.Color(\"rgba(0,0,0,0)\").toRgbaString() != jQuery.Color(this.div,'background-color').toRgbaString())\n\t\t{\n\t\t\t// Most statuses use colored borders\n\t\t\tthis.div.css('border-color',status_class === 'calendar_calEventAllAccepted' ? this.div.css('background-color') : '');\n\t\t}\n\n\t\tthis.icons.appendTo(this.title)\n\t\t\t.html(this._icons());\n\n\t\t// Body\n\t\tif(event.whole_day_on_top)\n\t\t{\n\t\t\tthis.body.html(title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar start_time = jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\tthis.body\n\t\t\t\t.html('<span class=\"calendar_calEventTitle\">'+title+'</span>')\n\t\t\t\t.append('<span class=\"calendar_calTimespan\">'+start_time + '</span>');\n\t\t\tif(this.options.value.description.trim())\n\t\t\t{\n\t\t\t\tthis.body\n\t\t\t\t\t.append('<p>'+egw.htmlspecialchars(this.options.value.description)+'</p>');\n\t\t\t}\n\t\t}\n\n\t\t// Clear tooltip for regeneration\n\t\tthis.set_statustext('');\n\n\t\t// Height specific section\n\t\t// This can take an unreasonable amount of time if parent is hidden\n\t\tif(this._parent.div.is(':visible'))\n\t\t{\n\t\t\tthis._small_size();\n\t\t}\n\t},\n\n\t/**\n\t * Calculate display variants for when event is too short for full display\n\t *\n\t * Display is based on the number of visible lines, calculated off the header\n\t * height:\n\t * 1 - show just the event title, with ellipsis\n\t * 2 - Show timespan and title, with ellipsis\n\t * > 4 - Show description as well, truncated to fit\n\t */\n\t_small_size: function() {\n\n\t\tif(this.options.value.whole_day_on_top) return;\n\n\t\t// Skip for planner view, it's always small\n\t\tif(this._parent && this._parent.instanceOf(et2_calendar_planner_row)) return;\n\n\t\t// Pre-calculation reset\n\t\tthis.div.removeClass('calendar_calEventSmall');\n\t\tthis.body.css('height', 'auto');\n\n\t\tvar line_height = parseFloat(this.div.css('line-height'));\n\t\tvar visible_lines = Math.floor(this.div.innerHeight() / line_height);\n\n\t\tif(!this.title.height())\n\t\t{\n\t\t\t// Handle sizing while hidden, such as when calendar is not the active tab\n\t\t\tvisible_lines = Math.floor(egw.getHiddenDimensions(this.div).h / egw.getHiddenDimensions(this.title).h);\n\t\t}\n\t\tvisible_lines = Math.max(1,visible_lines);\n\n\t\tif(this.getParent() && this.getParent().instanceOf(et2_calendar_daycol))\n\t\t{\n\t\t\tthis.div.toggleClass('calendar_calEventSmall',visible_lines < 4);\n\t\t\tthis.div\n\t\t\t\t.attr('data-visible_lines', visible_lines);\n\t\t}\n\t\telse if (this.getParent() && this.getParent().instanceOf(et2_calendar_planner_row))\n\t\t{\n\t\t\t// Less than 8 hours is small\n\t\t\tthis.div.toggleClass('calendar_calEventSmall',this.options.value.end.valueOf() - this.options.value.start.valueOf() < 28800000);\n\t\t}\n\n\n\t\tif(this.body.height() > this.div.height() - this.title.height() && visible_lines >= 4)\n\t\t{\n\t\t\tthis.body.css('height', Math.floor((visible_lines-1)*line_height - this.title.height()) + 'px');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.body.css('height', '');\n\t\t}\n\t},\n\n\t/**\n\t * Examines the participants & returns CSS classname for status\n\t *\n\t * @returns {String}\n\t */\n\t_status_class: function() {\n\t\tvar status_class = 'calendar_calEventAllAccepted';\n\t\tfor(var id in this.options.value.participants)\n\t\t{\n\t\t\tvar status = this.options.value.participants[id];\n\n\t\t\tstatus = et2_calendar_event.split_status(status);\n\n\t\t\tswitch (status)\n\t\t\t{\n\t\t\t\tcase 'A':\n\t\t\t\tcase '':\t// app without status\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\tstatus_class = 'calendar_calEventSomeUnknown';\n\t\t\t\t\treturn status_class;\t// break for\n\t\t\t\tdefault:\n\t\t\t\t\tstatus_class = 'calendar_calEventAllAnswered';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn status_class;\n\t},\n\n\t/**\n\t * Create tooltip shown on hover\n\t *\n\t * @return {String}\n\t */\n\t_tooltip: function() {\n\t\tif(!this.div || !this.options.value || !this.options.value.app_id) return '';\n\n\t\tvar border = this.div.css('borderTopColor');\n\t\tvar bg_color = this.div.css('background-color');\n\t\tvar header_color = this.title.css('color');\n\t\tvar timespan = this._get_timespan(this.options.value);\n\n\t\tthis._parent.date_helper.set_value(this.options.value.start.valueOf ? new Date(this.options.value.start) : this.options.value.start);\n\t\tvar start = this._parent.date_helper.input_date.val();\n\t\tthis._parent.date_helper.set_value(this.options.value.end.valueOf ? new Date(this.options.value.end) : this.options.value.end);\n\t\tvar end = this._parent.date_helper.input_date.val();\n\n\t\tvar times = !this.options.value.multiday ?\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('Time')+'</span>:' + timespan :\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('Start') + '</span>:' +start+ ' ' +\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('End') + '</span>:' + end;\n\t\tvar cat_label = '';\n\t\tif(this.options.value.category)\n\t\t{\n\t\t\tvar cat = et2_createWidget('select-cat',{'readonly':true},this);\n\t\t\tcat.set_value(this.options.value.category);\n\t\t\tcat_label = this.options.value.category.indexOf(',') <= 0 ? cat.span.text() : [];\n\t\t\tif(typeof cat_label != 'string')\n\t\t\t{\n\t\t\t\tcat.span.children().each(function() {\n\t\t\t\t\tcat_label.push(jQuery(this).text());\n\t\t\t\t});\n\t\t\t\tcat_label = cat_label.join(', ');\n\t\t\t}\n\t\t\tcat.destroy();\n\t\t}\n\t\tvar participants = '';\n\t\tif(this.options.value.participant_types[''])\n\t\t{\n\t\t\tparticipants += this.options.value.participant_types[''].join(\"<br />\");\n\t\t}\n\t\tfor(var type_name in this.options.value.participant_types)\n\t\t{\n\t\t\tif(type_name)\n\t\t\t{\n\t\t\t\tparticipants += '</p><p><span class=\"calendar_calEventLabel\">'+type_name+'</span>:<br />';\n\t\t\t\tparticipants += this.options.value.participant_types[type_name].join(\"<br />\");\n\t\t\t}\n\t\t}\n\n\t\treturn '<div class=\"calendar_calEventTooltip ' + this._status_class() +' '+ this.options.class +\n\t\t\t'\" style=\"border-color: '+border+'; background-color: '+bg_color+';\">'+\n\t\t\t'<div class=\"calendar_calEventHeaderSmall\">'+\n\t\t\t\t'<font style=\"color:'+header_color+'\">'+timespan+'</font>'+\n\t\t\t\tthis.icons[0].outerHTML+\n\t\t\t'</div>'+\n\t\t\t'<div class=\"calendar_calEventBody\">'+\n\t\t\t\t'<p style=\"margin: 0px;\">'+\n\t\t\t\t'<span class=\"calendar_calEventTitle\">'+egw.htmlspecialchars(this.options.value.title)+'</span><br>'+\n\t\t\t\tegw.htmlspecialchars(this.options.value.description)+'</p>'+\n\t\t\t\t'<p style=\"margin: 2px 0px;\">'+times+'</p>'+\n\t\t\t\t(this.options.value.location ? '<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Location') + '</span>:' + \n\t\t\t\tegw.htmlspecialchars(this.options.value.location)+'</p>' : '')+\n\t\t\t\t(cat_label ? '<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Category') + '</span>:' + cat_label +'</p>' : '')+\n\t\t\t\t'<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Participants')+'</span>:<br />'+\n\t\t\t\t\tparticipants + '</p>'+ this._participant_summary(this.options.value.participants) +\n\t\t\t'</div>'+\n\t\t'</div>';\n\t},\n\n\t/**\n\t * Generate participant summary line\n\t *\n\t * @returns {String}\n\t */\n\t_participant_summary: function(participants)\n\t{\n\t\tif( Object.keys(this.options.value.participants).length < 2)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tvar participant_status = {A: 0, R: 0, T: 0, U: 0, D: 0};\n\t\tvar status_label = {A: 'accepted', R: 'rejected', T: 'tentative', U: 'unknown', D: 'delegated'};\n\t\tvar participant_summary = Object.keys(this.options.value.participants).length + ' ' + this.egw().lang('Participants')+': ';\n\t\tvar status_totals = [];\n\n\t\tfor(var id in this.options.value.participants)\n\t\t{\n\t\t\tvar status = this.options.value.participants[id].substr(0,1);\n\t\t\tparticipant_status[status]++;\n\t\t}\n\t\tfor(var status in participant_status)\n\t\t{\n\t\t\tif(participant_status[status] > 0)\n\t\t\t{\n\t\t\t\tstatus_totals.push(participant_status[status] + ' ' + this.egw().lang(status_label[status]));\n\t\t\t}\n\t\t}\n\t\treturn participant_summary + status_totals.join(', ');\n\t},\n\n\t/**\n\t * Get actual icons from list\n\t * @returns {undefined}\n\t */\n\t_icons: function() {\n\t\tvar icons = [];\n\n\t\tif(this.options.value.is_private)\n\t\t{\n\t\t\t// Hide everything\n\t\t\ticons.push('<img src=\"'+this.egw().image('private','calendar')+'\"/>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(this.options.value.app !== 'calendar')\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('navbar',this.options.value.app)+'\" title=\"'+this.egw().lang(this.options.value.app)+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.priority == 3)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('high','calendar')+'\" title=\"'+this.egw().lang('high priority')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.public == '0')\n\t\t\t{\n\t\t\t\t// Show private flag\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('private','calendar')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value['recur_type'])\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('recur','calendar')+'\" title=\"'+this.egw().lang('recurring event')+'\"/>');\n\t\t\t}\n\t\t\t// icons for single user, multiple users or group(s) and resources\n\t\t\tvar single = '<img src=\"'+this.egw().image('single','calendar')+'\" title=\"'+'\"/>';\n\t\t\tvar multiple = '<img src=\"'+this.egw().image('users','calendar')+'\" title=\"'+'\"/>';\n\t\t\tfor(var uid in this.options.value['participants'])\n\t\t\t{\n\t\t\t\tif(Object.keys(this.options.value.participants).length == 1 && !isNaN(uid))\n\t\t\t\t{\n\t\t\t\t\ticons.push(single);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!isNaN(uid) && icons.indexOf(multiple) === -1)\n\t\t\t\t{\n\t\t\t\t\ticons.push(multiple);\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * TODO: resource icons\n\t\t\t\telseif(!isset($icons[$uid[0]]) && isset($this->bo->resources[$uid[0]]) && isset($this->bo->resources[$uid[0]]['icon']))\n\t\t\t\t{\n\t\t\t\t \t$icons[$uid[0]] = html::image($this->bo->resources[$uid[0]]['app'],\n\t\t\t\t \t\t($this->bo->resources[$uid[0]]['icon'] ? $this->bo->resources[$uid[0]]['icon'] : 'navbar'),\n\t\t\t\t \t\tlang($this->bo->resources[$uid[0]]['app']),\n\t\t\t\t \t\t'width=\"16px\" height=\"16px\"');\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\n\t\t\tif(this.options.value.non_blocking)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('nonblocking','calendar')+'\" title=\"'+this.egw().lang('non blocking')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.alarm && !jQuery.isEmptyObject(this.options.value.alarm) && !this.options.value.is_private)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('alarm','calendar')+'\" title=\"'+this.egw().lang('alarm')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.participants[egw.user('account_id')] && this.options.value.participants[egw.user('account_id')][0] == 'U')\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('needs-action','calendar')+'\" title=\"'+this.egw().lang('Needs action')+'\"/>');\n\t\t\t}\n\t\t}\n\t\treturn icons;\n\t},\n\n\t/**\n\t * Get a text representation of the timespan of the event.  Either start\n\t * - end, or 'all day'\n\t *\n\t * @param {Object} event Event to get the timespan for\n\t * @param {number} event.start_m Event start, in minutes from midnight\n\t * @param {number} event.end_m Event end, in minutes from midnight\n\t *\n\t * @return {string} Timespan\n\t */\n\t_get_timespan: function(event) {\n\t\tvar timespan = '';\n\t\tif (event['start_m'] === 0 && event['end_m'] >= 24*60-1)\n\t\t{\n\t\t\tif (event['end_m'] > 24*60)\n\t\t\t{\n\t\t\t\ttimespan = jQuery.datepicker.formatTime(\n\t\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t\t{\n\t\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\t\tseconds: 0,\n\t\t\t\t\t\ttimezone: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t\t).trim()+' - '+jQuery.datepicker.formatTime(\n\t\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t\t{\n\t\t\t\t\t\thour: event.end_m / 60,\n\t\t\t\t\t\tminute: event.end_m % 60,\n\t\t\t\t\t\tseconds: 0,\n\t\t\t\t\t\ttimezone: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t\t).trim();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttimespan = this.egw().lang('Whole day');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar duration = event.multiday ?\n\t\t\t\t(event.end - event.start) / 60000 :\n\t\t\t\t(event.end_m - event.start_m);\n\t\t\tduration = Math.floor(duration/60) + this.egw().lang('h')+(duration%60 ? duration%60 : '');\n\n\t\t\ttimespan = jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\ttimespan += ' - ' + jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.end_m / 60,\n\t\t\t\t\tminute: event.end_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\ttimespan += ': ' + duration;\n\t\t}\n\t\treturn timespan;\n\t},\n\n\t/**\n\t * Make sure event data has all proper values, and format them as expected\n\t * @param {Object} event\n\t */\n\t_values_check: function _values_check(event)\n\t{\n\t\t// Make sure ID is a string\n\t\tif(event.id)\n\t\t{\n\t\t\tevent.id = ''+event.id;\n\t\t}\n\n\t\t// Use dates as objects\n\t\tif(typeof event.start !== 'object')\n\t\t{\n\t\t\tthis._parent.date_helper.set_value(event.start);\n\t\t\tevent.start = new Date(this._parent.date_helper.getValue());\n\t\t}\n\t\tif(typeof event.end !== 'object')\n\t\t{\n\t\t\tthis._parent.date_helper.set_value(event.end);\n\t\t\tevent.end = new Date(this._parent.date_helper.getValue());\n\t\t}\n\n\t\t// We need minutes for durations\n\t\tif(typeof event.start_m === 'undefined')\n\t\t{\n\t\t\tevent.start_m = event.start.getUTCHours() * 60 + event.start.getUTCMinutes();\n\t\t\tevent.end_m = event.end.getUTCHours() * 60 + event.end.getUTCMinutes();\n\t\t}\n\t\tif(typeof event.multiday === 'undefined')\n\t\t{\n\t\t\tevent.multiday = (event.start.getUTCFullYear() !== event.end.getUTCFullYear() ||\n\t\t\t\tevent.start.getUTCMonth() !== event.end.getUTCMonth() ||\n\t\t\t\tevent.start.getUTCDate() != event.end.getUTCDate());\n\t\t}\n\t\tif(!event.start.getUTCHours() && !event.start.getUTCMinutes() && event.end.getUTCHours() == 23 && event.end.getUTCMinutes() == 59)\n\t\t{\n\t\t\tevent.whole_day_on_top = (event.non_blocking && event.non_blocking != '0');\n\t\t}\n\t},\n\n\t/**\n\t * Check to see if the provided event information is for the same date as\n\t * what we're currently expecting, and that it has not been changed.\n\t *\n\t * If the date has changed, we adjust the associated daywise caches to move\n\t * the event's ID to where it should be.  This check allows us to be more\n\t * directly reliant on the data cache, and less on any other control logic\n\t * elsewhere first.\n\t *\n\t * @param {Object} event Map of event data from cache\n\t * @param {string} event.date For non-recurring, single day events, this is\n\t *\tthe date the event is on.\n\t * @param {string} event.start Start of the event (used for multi-day events)\n\t * @param {string} event.end End of the event (used for multi-day events)\n\t *\n\t * @return {Boolean} Provided event data is for the same date\n\t */\n\t_sameday_check: function(event)\n\t{\n\t\t// Event somehow got orphaned, or deleted\n\t\tif(!this._parent || event === null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// Also check participants against owner\n\t\tvar owner_match = et2_calendar_event.owner_check(event, this._parent);\n\n\t\t// Simple, same day\n\t\tif(owner_match && this.options.value.date && event.date == this.options.value.date)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t// Multi-day non-recurring event spans days - date does not match\n\t\tvar event_start = new Date(event.start);\n\t\tvar event_end = new Date(event.end);\n\t\tif(owner_match && this._parent.date >= event_start && this._parent.date <= event_end)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t// Delete all old actions\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.clear();\n\t\t\tthis._actionObject.unregisterActions();\n\t\t\tthis._actionObject = null;\n\t\t}\n\n\t\t// Update daywise caches\n\t\tvar new_cache_id = app.classes.calendar._daywise_cache_id(event.date,this._parent.options.owner);\n\t\tvar new_daywise = egw.dataGetUIDdata(new_cache_id);\n\t\tnew_daywise = new_daywise && new_daywise.data ? new_daywise.data : [];\n\t\tvar old_cache_id = false;\n\t\tif(this.options.value && this.options.value.date)\n\t\t{\n\t\t\told_cache_id = app.classes.calendar._daywise_cache_id(this.options.value.date,this._parent.options.owner);\n\t\t}\n\n\t\tif(new_cache_id != old_cache_id)\n\t\t{\n\t\t\tvar old_daywise = egw.dataGetUIDdata(old_cache_id);\n\t\t\told_daywise = old_daywise && old_daywise.data ? old_daywise.data : [];\n\t\t\told_daywise.splice(old_daywise.indexOf(this.options.value.row_id),1);\n\t\t\tegw.dataStoreUID(old_cache_id,old_daywise);\n\n\t\t\tif (new_daywise.indexOf(event.row_id) < 0)\n\t\t\t{\n\t\t\t\tnew_daywise.push(event.row_id);\n\t\t\t}\n\t\t\tif(new_daywise.data !== null)\n\t\t\t{\n\t\t\t\tegw.dataStoreUID(new_cache_id,new_daywise);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tattachToDOM: function()\n\t{\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Remove the binding for the click handler, unless there's something\n\t\t// custom here.\n\t\tif (!this.onclick)\n\t\t{\n\t\t\tjQuery(this.node).off(\"click\");\n\t\t}\n\t},\n\n\t/**\n\t * Click handler calling custom handler set via onclick attribute to this.onclick.\n\t * All other handling is done by the timegrid widget.\n\t *\n\t * @param {Event} _ev\n\t * @returns {boolean}\n\t */\n\tclick: function(_ev) {\n\t\tvar result = true;\n\t\tif(typeof this.onclick == 'function')\n\t\t{\n\t\t\t// Make sure function gets a reference to the widget, splice it in as 2. argument if not\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif(args.indexOf(this) == -1) args.splice(1, 0, this);\n\n\t\t\tresult = this.onclick.apply(this, args);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Show the recur prompt for this event\n\t *\n\t * Calls et2_calendar_event.recur_prompt with this event's value.\n\t *\n\t * @param {et2_calendar_event~prompt_callback} callback\n\t * @param {Object} [extra_data]\n\t */\n\trecur_prompt: function(callback, extra_data)\n\t{\n\t\tet2_calendar_event.recur_prompt(this.options.value,callback,extra_data);\n\t},\n\n\t/**\n\t * Show the series split prompt for this event\n\t *\n\t * Calls et2_calendar_event.series_split_prompt with this event's value.\n\t *\n\t * @param {et2_calendar_event~prompt_callback} callback\n\t */\n\tseries_split_prompt: function(callback)\n\t{\n\t\tet2_calendar_event.series_split_prompt(this.options.value,this.options.value.recur_date, callback);\n\t},\n\n\t/**\n\t * Copy the actions set on the parent, apply them to self\n\t *\n\t * This can take a while to do, so we try to do it only when needed - on mouseover\n\t */\n\t_copy_parent_actions: function()\n\t{\n\t\t// Copy actions set in parent\n\t\tif(!this.options.readonly && !this._parent.options.readonly)\n\t\t{\n\t\t\tvar action_parent = this;\n\t\t\twhile(action_parent != null && !action_parent.options.actions &&\n\t\t\t\t!action_parent.instanceOf(et2_container)\n\t\t\t)\n\t\t\t{\n\t\t\t\taction_parent = action_parent.getParent();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis._link_actions(action_parent.options.actions||{});\n\t\t\t\tthis._need_actions_linked = false;\n\t\t\t} catch (e) {\n\t\t\t\t// something went wrong, but keep quiet about it\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Link the actions to the DOM nodes / widget bits.\n\t *\n\t * @param {object} actions {ID: {attributes..}+} map of egw action information\n\t */\n\t_link_actions: function(actions)\n\t{\n\t\tif(!this._actionObject)\n\t\t{\n\t\t\t// Get the top level element - timegrid or so\n\t\t\tvar objectManager = this.getParent()._actionObject || this.getParent().getParent()._actionObject ||\n\t\t\t   egw_getAppObjectManager(true).getObjectById(this._parent._parent._parent.id) || egw_getAppObjectManager(true);\n\t\t\tthis._actionObject = objectManager.getObjectById('calendar::'+this.options.value.row_id);\n\t\t}\n\n\t\tif (this._actionObject == null) {\n\t\t\t// Add a new container to the object manager which will hold the widget\n\t\t\t// objects\n\t\t\tthis._actionObject = objectManager.insertObject(false, new egwActionObject(\n\t\t\t\t'calendar::'+this.options.value.row_id, objectManager, new et2_event_action_object_impl(this,this.getDOMNode()),\n\t\t\t\tthis._actionManager || objectManager.manager.getActionById('calendar::'+this.options.value.row_id) || objectManager.manager\n\t\t\t));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._actionObject.setAOI(new et2_event_action_object_impl(this, this.getDOMNode()));\n\t\t}\n\n\t\t// Delete all old objects\n\t\tthis._actionObject.clear();\n\t\tthis._actionObject.unregisterActions();\n\n\t\t// Go over the widget & add links - this is where we decide which actions are\n\t\t// 'allowed' for this widget at this time\n\t\tvar action_links = this._get_action_links(actions);\n\t\taction_links.push('egw_link_drag');\n\t\taction_links.push('egw_link_drop');\n\t\tif(this._actionObject.parent.getActionLink('invite'))\n\t\t{\n\t\t\taction_links.push('invite');\n\t\t}\n\t\tthis._actionObject.updateActionLinks(action_links);\n\t},\n\n\t/**\n\t * Code for implementing et2_IDetachedDOM\n\t *\n\t * @param {array} _attrs array to add further attributes to\n\t */\n\tgetDetachedAttributes: function(_attrs) {\n\n\t},\n\n\tgetDetachedNodes: function() {\n\t\treturn [this.getDOMNode()];\n\t},\n\n\tsetDetachedAttributes: function(_nodes, _values) {\n\n\t},\n});}).call(this);\net2_register_widget(et2_calendar_event, [\"calendar-event\"]);\n\n// Static class stuff\n/**\n * Check event owner against a parent object\n *\n * As an event is edited, its participants may change.  Also, as the state\n * changes we may change which events are displayed and show the same event\n * in several places for different users.  Here we check the event participants\n * against an owner value (which may be an array) to see if the event should be\n * displayed or included.\n *\n * @param {Object} event - Event information\n * @param {et2_widget_daycol|et2_widget_planner_row} parent - potential parent object\n *\tthat has an owner option\n * @param {boolean} owner_too - Include the event owner in consideration, or only\n *\tevent participants\n *\n * @return {boolean} Should the event be displayed\n */\net2_calendar_event.owner_check = function owner_check(event, parent, owner_too)\n{\n\tvar owner_match = true;\n\tif(typeof owner_too === 'undefined' && app.calendar.state.status_filter)\n\t{\n\t\towner_too = app.calendar.state.status_filter === 'owner';\n\t}\n\tvar options = false;\n\tif(app.calendar && app.calendar.sidebox_et2 && app.calendar.sidebox_et2.getWidgetById('owner'))\n\t{\n\t\toptions = app.calendar.sidebox_et2.getWidgetById('owner').taglist.getSelection();\n\t}\n\telse\n\t{\n\t\toptions = parent.getArrayMgr(\"sel_options\").getRoot().getEntry('owner');\n\t}\n\tif(event.participants && typeof parent.options.owner != 'undefined' && parent.options.owner.length > 0)\n\t{\n\t\tvar parent_owner = jQuery.extend([], typeof parent.options.owner !== 'object' ?\n\t\t\t[parent.options.owner] :\n\t\t\tparent.options.owner);\n\t\towner_match = false;\n\t\tvar length = parent_owner.length;\n\t\tfor(var i = 0; i < length; i++ )\n\t\t{\n\t\t\t// Handle grouped resources like mailing lists, they won't match so\n\t\t\t// we need the list - pull it from sidebox owner\n\t\t\tif(isNaN(parent_owner[i]) && options && options.find)\n\t\t\t{\n\t\t\t\tvar resource = options.find(function(element) {return element.id == parent_owner[i];}) || {};\n\t\t\t\tif(resource && resource.resources)\n\t\t\t\t{\n\t\t\t\t\tparent_owner.splice(i,1);\n\t\t\t\t\tparent_owner = parent_owner.concat(resource.resources);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parseInt(parent_owner[i]) < 0)\n\t\t\t{\n\t\t\t\t// Add in groups, if we can get them (this is syncronous)\n\t\t\t\tegw.accountData(parent_owner[i],'account_id',true,function(members) {\n\t\t\t\t\tparent_owner = parent_owner.concat(Object.keys(members));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tvar participants = jQuery.extend([],Object.keys(event.participants));\n\t\tfor(var i = 0; i < participants.length; i++ )\n\t\t{\n\t\t\tvar id = participants[i];\n\t\t\t// Expand group invitations\n\t\t\tif (parseInt(id) < 0)\n\t\t\t{\n\t\t\t\t// Add in groups, if we can get them (this is syncronous)\n\t\t\t\tegw.accountData(id,'account_id',true,function(members) {\n\t\t\t\t\tparticipants = participants.concat(Object.keys(members));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif(parent.options.owner == id ||\n\t\t\t\tparent_owner.indexOf &&\n\t\t\t\tparent_owner.indexOf(id) >= 0)\n\t\t\t{\n\t\t\t\towner_match = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(owner_too && !owner_match)\n\t{\n\t\towner_match = (parent.options.owner == event.owner ||\n\t\t\tparent_owner.indexOf &&\n\t\t\tparent_owner.indexOf(event.owner) >= 0);\n\t}\n\treturn owner_match;\n};\n\n/**\n * @callback et2_calendar_event~prompt_callback\n * @param {string} button_id - One of ok, exception, series, single or cancel\n *\tdepending on which buttons are on the prompt\n * @param {Object} event_data - Event information - whatever you passed in to\n *\tthe prompt.\n */\n/**\n * Recur prompt\n * If the event is recurring, asks the user if they want to edit the event as\n * an exception, or change the whole series.  Then the callback is called.\n *\n * If callback is not provided, egw.open() will be used to open an edit dialog.\n *\n * If you call this on a single (non-recurring) event, the callback will be\n * executed immediately, with the passed button_id as 'single'.\n *\n * @param {Object} event_data - Event information\n * @param {string} event_data.id - Unique ID for the event, possibly with a\n *\ttimestamp\n * @param {string|Date} event_data.start - Start date/time for the event\n * @param {number} event_data.recur_type - Recur type, or 0 for a non-recurring event\n * @param {et2_calendar_event~prompt_callback} [callback] - Callback is\n *\tcalled with the button (exception, series, single or cancel) and the event\n *\tdata.\n * @param {Object} [extra_data] - Additional data passed to the callback, used\n *\tas extra parameters for default callback\n *\n * @augments {et2_calendar_event}\n */\net2_calendar_event.recur_prompt = function(event_data, callback, extra_data)\n{\n\tvar edit_id = event_data.app_id;\n\tvar edit_date = event_data.start;\n\n\t// seems window.opener somehow in certian conditions could be from different origin\n\t// we try to catch the exception and in this case retrive the egw object from current window.\n\ttry {\n\t\tvar egw = this.egw ? (typeof this.egw == 'function' ? this.egw() : this.egw) : window.opener && typeof window.opener.egw != 'undefined' ? window.opener.egw('calendar'):window.egw('calendar');\n\t}\n\tcatch(e){\n\t\tvar egw = window.egw('calendar');\n\t}\n\n\tvar that = this;\n\n\tvar extra_params = extra_data && typeof extra_data == 'object' ? extra_data : {};\n\textra_params.date = edit_date.toJSON ? edit_date.toJSON() : edit_date;\n\tif(typeof callback != 'function')\n\t{\n\t\tcallback = function(_button_id)\n\t\t{\n\t\t\tswitch(_button_id)\n\t\t\t{\n\t\t\t\tcase 'exception':\n\t\t\t\t\textra_params.exception = '1';\n\t\t\t\t\tegw.open(edit_id, event_data.app||'calendar', 'edit', extra_params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'series':\n\t\t\t\tcase 'single':\n\t\t\t\t\tegw.open(edit_id, event_data.app||'calendar', 'edit', extra_params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cancel':\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\tif(parseInt(event_data.recur_type))\n\t{\n\t\tvar buttons = [\n\t\t\t{text: egw.lang(\"Edit exception\"), id: \"exception\", class: \"ui-priority-primary\", \"default\": true},\n\t\t\t{text: egw.lang(\"Edit series\"), id:\"series\"},\n\t\t\t{text: egw.lang(\"Cancel\"), id:\"cancel\"}\n\t\t];\n\t\tet2_dialog.show_dialog(\n\t\t\tfunction(button_id) {callback.call(that, button_id, event_data);},\n\t\t\t(!event_data.is_private ? event_data['title'] : egw.lang('private')) + \"\\n\" +\n\t\t\tegw.lang(\"Do you want to edit this event as an exception or the whole series?\"),\n\t\t\tegw.lang(\"This event is part of a series\"), {}, buttons, et2_dialog.QUESTION_MESSAGE\n\t\t);\n\t}\n\telse\n\t{\n\t\tcallback.call(this,'single',event_data);\n\t}\n};\n\n/**\n * Split series prompt\n *\n * If the event is recurring and the user adjusts the time or duration, we may need\n * to split the series, ending the current one and creating a new one with the changes.\n * This prompts the user if they really want to do that.\n *\n * There is no default callback, and nothing happens if you call this on a\n * single (non-recurring) event\n *\n * @param {Object} event_data - Event information\n * @param {string} event_data.id - Unique ID for the event, possibly with a timestamp\n * @param {string|Date} instance_date - The date of the edited instance of the event\n * @param {et2_calendar_event~prompt_callback} callback - Callback is\n *\tcalled with the button (ok or cancel) and the event data.\n * @augments {et2_calendar_event}\n */\net2_calendar_event.series_split_prompt = function(event_data, instance_date, callback)\n{\n\t// seems window.opener somehow in certian conditions could be from different origin\n\t// we try to catch the exception and in this case retrive the egw object from current window.\n\ttry {\n\t\tvar egw = this.egw ? (typeof this.egw == 'function' ? this.egw() : this.egw) : window.opener && typeof window.opener.egw != 'undefined' ? window.opener.egw('calendar'):window.egw('calendar');\n\t}\n\tcatch(e){\n\t\tvar egw = window.egw('calendar');\n\t}\n\n\tvar that = this;\n\n\tif(typeof instance_date == 'string')\n\t{\n\t\tinstance_date = new Date(instance_date);\n\t}\n\n\t// Check for modifying a series that started before today\n\tvar tempDate = new Date();\n\tvar today = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate(),tempDate.getHours(),-tempDate.getTimezoneOffset(),tempDate.getSeconds());\n\tvar termination_date = instance_date < today ? egw.lang('today') : date(egw.preference('dateformat'),instance_date);\n\n\tif(parseInt(event_data.recur_type))\n\t{\n\t\tet2_dialog.show_dialog(\n\t\t\tfunction(button_id) {callback.call(that, button_id, event_data);},\n\t\t\t(!event_data.is_private ? event_data['title'] : egw.lang('private')) + \"\\n\" +\n\t\t\tegw.lang(\"Do you really want to change the start of this series? If you do, the original series will be terminated as of %1 and a new series for the future reflecting your changes will be created.\", termination_date),\n\t\t\tegw.lang(\"This event is part of a series\"), {}, et2_dialog.BUTTONS_OK_CANCEL , et2_dialog.WARNING_MESSAGE\n\t\t);\n\t}\n};\n\net2_calendar_event.drag_helper = function(event,ui) {\n\tui.helper.width(ui.width());\n};\n/**\n* splits the combined status, quantity and role\n*\n* @param {string} status - combined value, O: status letter: U, T, A, R\n* @param {int} [quantity] - quantity\n* @param {string} [role]\n* @return string status U, T, A or R, same as $status parameter on return\n*/\net2_calendar_event.split_status = function(status,quantity,role)\n{\n\tquantity = 1;\n\trole = 'REQ-PARTICIPANT';\n\t//error_log(__METHOD__.__LINE__.array2string($status));\n\tvar matches = null;\n\tif (typeof status === 'string' && status.length > 1)\n\t{\n\t\tmatches = status.match(/^.([0-9]*)(.*)$/gi);\n\t}\n\tif(matches)\n\t{\n\t\tif (parseInt(matches[1]) > 0) quantity = parseInt(matches[1]);\n\t\tif (matches[2]) role = matches[2];\n\t\tstatus = status[0];\n\t}\n\telse if (status === true)\n\t{\n\t\tstatus = 'U';\n\t}\n\treturn status;\n}\n\n/**\n * The egw_action system requires an egwActionObjectInterface Interface implementation\n * to tie actions to DOM nodes.  I'm not sure if we need this.\n *\n * The class extension is different than the widgets\n *\n * @param {et2_DOMWidget} widget\n * @param {Object} node\n *\n */\nfunction et2_event_action_object_impl(widget, node)\n{\n\tvar aoi = new et2_action_object_impl(widget, node);\n\n// _outerCall may be used to determine, whether the state change has been\n// evoked from the outside and the stateChangeCallback has to be called\n// or not.\n\taoi.doSetState = function(_state, _outerCall) {\n\t};\n\n\treturn aoi;\n};\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE overlay PUBLIC \"-//EGroupware GmbH//eTemplate 2//EN\" \"http://www.egroupware.org/etemplate2.dtd\">\n<!-- $Id$ -->\n<overlay>\n\t<template id=\"calendar.conflicts\" template=\"\" lang=\"\" group=\"0\" version=\"1.0.1.001\">\n\t\t<description value=\"Scheduling conflict\" class=\"calendar_size120b\"/>\n\t\t<box class=\"calendar_conflicts\">\n\t\t\t<grid>\n\t\t\t\t<columns>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t</columns>\n\t\t\t\t<rows>\n\t\t\t\t\t<row valign=\"top\">\n\t\t\t\t\t\t<image src=\"conflicts[$row][icon_participants]\" statustext=\"@conflicts[$row][tooltip_participants]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<image src=\"conflicts[$row][icon_recur]\" label=\"@conflicts[$row][text_recur]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<description id=\"conflicts[$row][time]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<vbox statustext=\"conflict[$row][tooltip]\" orient=\",0,0\">\n\t\t\t\t\t\t\t<description id=\"conflicts[$row][title]\" no_lang=\"1\" options=\"b\"/>\n\t\t\t\t\t\t\t<description id=\"conflicts[$row][conflicting_participants]\" no_lang=\"1\"/>\n\t\t\t\t\t\t</vbox>\n\t\t\t\t\t</row>\n\t\t\t\t</rows>\n\t\t\t</grid>\n\t\t</box>\n\t\t<hbox>\n\t\t\t<button label=\"Ignore conflict\" id=\"button[ignore]\" statustext=\"Saves the event ignoring the conflict\"/>\n\t\t\t<button id=\"button[reedit]\" label=\"Re-Edit event\" statustext=\"Allows to edit the event again\"/>\n\t\t\t<button label=\"Freetime search\" id=\"button[freetime]\" statustext=\"Find free timeslots where the selected participants are availible for the given timespan\"/>\n\t\t</hbox>\n\t</template>\n</overlay>\n"], "fixing_code": ["/**\n * EGroupware eTemplate2 - JS Widget base class\n *\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Andreas St\u00f6ckel\n * @copyright Stylite 2011\n * @version $Id$\n */\n\n/*egw:uses\n\t/vendor/bower-asset/jquery/dist/jquery.js;\n\tlib/tooltip;\n\tet2_core_DOMWidget;\n*/\n\n/**\n * Class which manages the DOM node itself. The simpleWidget class is derrived\n * from et2_DOMWidget and implements the getDOMNode function. A setDOMNode\n * function is provided, which attatches the given node to the DOM if possible.\n *\n * @augments et2_DOMWidget\n */\nvar et2_baseWidget = (function(){ \"use strict\"; return et2_DOMWidget.extend(et2_IAligned,\n{\n\tattributes: {\n\t\t\"statustext\": {\n\t\t\t\"name\": \"Tooltip\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Tooltip which is shown for this element\",\n\t\t\t\"translate\": true\n\t\t},\n\t\t\"statustext_html\": {\n\t\t\t\"name\": \"Tooltip is html\",\n\t\t\t\"type\": \"boolean\",\n\t\t\t\"description\": \"Flag to allow html content in tooltip\",\n\t\t\t\"default\": false\n\t\t},\n\t\t\"align\": {\n\t\t\t\"name\": \"Align\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"default\": \"left\",\n\t\t\t\"description\": \"Position of this element in the parent hbox\"\n\t\t},\n\t\t\"onclick\": {\n\t\t\t\"name\": \"onclick\",\n\t\t\t\"type\": \"js\",\n\t\t\t\"default\": et2_no_init,\n\t\t\t\"description\": \"JS code which is executed when the element is clicked.\"\n\t\t}\n\t},\n\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2BaseWidget\n\t */\n\tinit: function() {\n\t\tthis.align = \"left\";\n\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.node = null;\n\t\tthis.statustext = \"\";\n\t\tthis._messageDiv = null;\n\t\tthis._tooltipElem = null;\n\t},\n\n\tdestroy: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.node = null;\n\t\tthis._messageDiv = null;\n\t},\n\n\t/**\n\t * The setMessage function can be used to attach a small message box to the\n\t * widget. This is e.g. used to display validation errors or success messages\n\t *\n\t * @param _text is the text which should be displayed as a message\n\t * @param _type is an css class which is attached to the message box.\n\t * \tCurrently available are \"hint\", \"success\" and \"validation_error\", defaults\n\t * \tto \"hint\"\n\t * @param _floating if true, the object will be in one row with the element,\n\t * \tdefaults to true\n\t * @param _prepend if set, the message is displayed behind the widget node\n\t * \tinstead of before. Defaults to false.\n\t */\n\tshowMessage: function(_text, _type, _floating, _prepend) {\n\n\t\t// Preset the parameters\n\t\tif (typeof _type == \"undefined\")\n\t\t{\n\t\t\t_type = \"hint\";\n\t\t}\n\n\t\tif (typeof _floating == \"undefined\")\n\t\t{\n\t\t\t_floating = true;\n\t\t}\n\n\t\tif (typeof _prepend == \"undefined\")\n\t\t{\n\t\t\t_prepend = false;\n\t\t}\n\n\t\tvar surr = this.getSurroundings();\n\n\t\t// Remove the message div from the surroundings before creating a new\n\t\t// one\n\t\tthis.hideMessage(false, true);\n\n\t\t// Create the message div and add it to the \"surroundings\" manager\n\t\tthis._messageDiv = jQuery(document.createElement(\"div\"))\n\t\t\t.addClass(\"message\")\n\t\t\t.addClass(_type)\n\t\t\t.addClass(_floating ? \"floating\" : \"\")\n\t\t\t.text(_text.valueOf() + \"\");\n\n\t\t// Decide whether to prepend or append the div\n\t\tif (_prepend)\n\t\t{\n\t\t\tsurr.prependDOMNode(this._messageDiv[0]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsurr.appendDOMNode(this._messageDiv[0]);\n\t\t}\n\n\t\tsurr.update();\n\t},\n\n\t/**\n\t * The hideMessage function can be used to hide a previously shown message.\n\t *\n\t * @param _fade if true, the message div will fade out, otherwise the message\n\t * \tdiv is removed immediately. Defaults to true.\n\t * @param _noUpdate is used internally to prevent an update of the surroundings\n\t * \tmanager.\n\t */\n\thideMessage: function(_fade, _noUpdate) {\n\t\tif (typeof _fade == \"undefined\")\n\t\t{\n\t\t\t_fade = true;\n\t\t}\n\n\t\tif (typeof _noUpdate == \"undefined\")\n\t\t{\n\t\t\t_noUpdate = false;\n\t\t}\n\n\t\t// Remove the message from the surroundings manager and remove the\n\t\t// reference to it\n\t\tif (this._messageDiv != null)\n\t\t{\n\t\t\tvar surr = this.getSurroundings();\n\t\t\tvar self = this;\n\t\t\tvar messageDiv = this._messageDiv;\n\t\t\tself._messageDiv = null;\n\n\t\t\tvar _done = function() {\n\t\t\t\tsurr.removeDOMNode(messageDiv[0]);\n\n\t\t\t\t// Update the surroundings manager\n\t\t\t\tif (!_noUpdate)\n\t\t\t\t{\n\t\t\t\t\tsurr.update();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Either fade out or directly call the function which removes the div\n\t\t\tif (_fade)\n\t\t\t{\n\t\t\t\tmessageDiv.fadeOut(\"fast\", _done);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_done();\n\t\t\t}\n\t\t}\n\t},\n\n\tdetachFromDOM: function() {\n\t\t// Detach this node from the tooltip node\n\t\tif (this._tooltipElem)\n\t\t{\n\t\t\tthis.egw().tooltipUnbind(this._tooltipElem);\n\t\t\tthis._tooltipElem = null;\n\t\t}\n\n\t\t// Remove the binding to the click handler\n\t\tif (this.node)\n\t\t{\n\t\t\tjQuery(this.node).unbind(\"click.et2_baseWidget\");\n\t\t}\n\n\t\tthis._super.apply(this, arguments);\n\t},\n\n\tattachToDOM: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Add the binding for the click handler\n\t\tif (this.node)\n\t\t{\n\t\t\tjQuery(this.node).bind(\"click.et2_baseWidget\", this, function(e) {\n\t\t\t\treturn e.data.click.call(e.data, e, this);\n\t\t\t});\n\t\t\tif (typeof this.onclick == 'function') jQuery(this.node).addClass('et2_clickable');\n\t\t}\n\n\t\t// Update the statustext\n\t\tthis.set_statustext(this.statustext);\n\t},\n\n\tsetDOMNode: function(_node) {\n\t\tif (_node != this.node)\n\t\t{\n\t\t\t// Deatch the old node from the DOM\n\t\t\tthis.detachFromDOM();\n\n\t\t\t// Set the new DOM-Node\n\t\t\tthis.node = _node;\n\n\t\t\t// Attatch the DOM-Node to the tree\n\t\t\treturn this.attachToDOM();\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tgetDOMNode: function() {\n\t\treturn this.node;\n\t},\n\n\tgetTooltipElement: function() {\n\t\treturn this.getDOMNode(this);\n\t},\n\n\t/**\n\t * Click handler calling custom handler set via onclick attribute to this.onclick\n\t *\n\t * @param _ev\n\t * @returns\n\t */\n\tclick: function(_ev) {\n\t\tif(typeof this.onclick == 'function')\n\t\t{\n\t\t\t// Make sure function gets a reference to the widget, splice it in as 2. argument if not\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif(args.indexOf(this) == -1) args.splice(1, 0, this);\n\n\t\t\treturn this.onclick.apply(this, args);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tset_statustext: function(_value) {\n\t\t// Tooltip should not be shown in mobile view\n\t\tif (egwIsMobile()) return;\n\t\t// Don't execute the code below, if no tooltip will be attached/detached\n\t\tif (_value == \"\" && !this._tooltipElem)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.statustext = _value;\n\n\t\t//Get the domnode the tooltip should be attached to\n\t\tvar elem = jQuery(this.getTooltipElement());\n\n\t\tif (elem)\n\t\t{\n\t\t\t//If a tooltip is already attached to the element, remove it first\n\t\t\tif (this._tooltipElem)\n\t\t\t{\n\t\t\t\tthis.egw().tooltipUnbind(this._tooltipElem);\n\t\t\t\tthis._tooltipElem = null;\n\t\t\t}\n\n\t\t\tif (_value && _value != '')\n\t\t\t{\n\t\t\t\tthis.egw().tooltipBind(elem, _value, this.options.statustext_html);\n\t\t\t\tthis._tooltipElem = elem;\n\t\t\t}\n\t\t}\n\t},\n\n\tset_align: function(_value) {\n\t\tthis.align = _value;\n\t},\n\n\tget_align: function(_value) {\n\t\treturn this.align;\n\t}\n\n});}).call(this);\n\n/**\n * Simple container object\n *\n * @augments et2_baseWidget\n */\nvar et2_container = (function(){ \"use strict\"; return et2_baseWidget.extend(\n{\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_container\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tthis.setDOMNode(document.createElement(\"div\"));\n\t},\n\n\t/**\n\t * The destroy function destroys all children of the widget, removes itself\n\t * from the parents children list.\n\t * Overriden to not try to remove self from parent, as that's not possible.\n\t */\n\tdestroy: function() {\n\t\t// Call the destructor of all children\n\t\tfor (var i = this._children.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis._children[i].free();\n\t\t}\n\n\t\t// Free the array managers if they belong to this widget\n\t\tfor (var key in this._mgrs)\n\t\t{\n\t\t\tif (this._mgrs[key] && this._mgrs[key].owner == this)\n\t\t\t{\n\t\t\t\tthis._mgrs[key].free();\n\t\t\t}\n\t\t}\n\t}\n});}).call(this);\n\n/**\n * Container object for not-yet supported widgets\n *\n * @augments et2_baseWidget\n */\nvar et2_placeholder = (function(){ \"use strict\"; return et2_baseWidget.extend([et2_IDetachedDOM],\n{\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_placeholder\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// The attrNodes object will hold the DOM nodes which represent the\n\t\t// values of this object\n\t\tthis.attrNodes = {};\n\n\t\tthis.visible = false;\n\n\t\t// Create the placeholder div\n\t\tthis.placeDiv = jQuery(document.createElement(\"span\"))\n\t\t\t.addClass(\"et2_placeholder\");\n\n\t\tvar headerNode = jQuery(document.createElement(\"span\"))\n\t\t\t.text(this._type || \"\")\n\t\t\t.addClass(\"et2_caption\")\n\t\t\t.appendTo(this.placeDiv);\n\n\t\tvar attrsCntr = jQuery(document.createElement(\"span\"))\n\t\t\t.appendTo(this.placeDiv)\n\t\t\t.hide();\n\n\t\theaderNode.click(this, function(e) {\n\t\t\te.data.visible = !e.data.visible;\n\t\t\tif (e.data.visible)\n\t\t\t{\n\t\t\t\tattrsCntr.show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tattrsCntr.hide();\n\t\t\t}\n\t\t});\n\n\t\tfor (var key in this.options)\n\t\t{\n\t\t\tif (typeof this.options[key] != \"undefined\")\n\t\t\t{\n\t\t\t\tif (typeof this.attrNodes[key] == \"undefined\")\n\t\t\t\t{\n\t\t\t\t\tthis.attrNodes[key] = jQuery(document.createElement(\"span\"))\n\t\t\t\t\t\t.addClass(\"et2_attr\");\n\t\t\t\t\tattrsCntr.append(this.attrNodes[key]);\n\t\t\t\t}\n\n\t\t\t\tthis.attrNodes[key].text(key + \"=\" + this.options[key]);\n\t\t\t}\n\t\t}\n\n\t\tthis.setDOMNode(this.placeDiv[0]);\n\t},\n\n\tgetDetachedAttributes: function(_attrs) {\n\t\t_attrs.push(\"value\");\n\t},\n\n\tgetDetachedNodes: function() {\n\t\treturn [this.placeDiv[0]];\n\t},\n\n\tsetDetachedAttributes: function(_nodes, _values) {\n\t\tthis.placeDiv = jQuery(_nodes[0]);\n\t}\n});}).call(this);\n\n", "/**\n * EGroupware clientside API object\n *\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Andreas St\u00f6ckel (as AT stylite.de)\n * @author Ralf Becker <RalfBecker@outdoor-training.de>\n * @version $Id$\n */\n\n/*egw:uses\n\tvendor.bower-asset.jquery.dist.jquery;\n\tegw_core;\n*/\n\n/**\n *\n * @param {string} _app application name object is instanciated for\n * @param {object} _wnd window object is instanciated for\n */\negw.extend('tooltip', egw.MODULE_WND_LOCAL, function(_app, _wnd)\n{\n\t\"use strict\";\n\n\tvar tooltip_div = null;\n\tvar current_elem = null;\n\n\tvar time_delta = 100;\n\tvar show_delta = 0;\n\tvar show_delay = 200;\n\n\tvar x = 0;\n\tvar y = 0;\n\n\t/**\n\t * Removes the tooltip_div from the DOM if it does exist.\n\t */\n\tfunction hide()\n\t{\n\t\tif (tooltip_div != null)\n\t\t{\n\t\t\ttooltip_div.remove();\n\t\t\ttooltip_div = null;\n\t\t}\n\t}\n\n\t/**\n\t * Shows the tooltip at the current cursor position.\n\t */\n\tfunction show()\n\t{\n\t\tif (tooltip_div && typeof x !== 'undefined' && typeof y !== 'undefined')\n\t\t{\n\t\t\t//Calculate the cursor_rectangle - this is a space the tooltip might\n\t\t\t//not overlap with\n\t\t\tvar cursor_rect = {\n\t\t\t\tleft: (x - 8),\n\t\t\t\ttop: (y - 8),\n\t\t\t\tright: (x + 8),\n\t\t\t\tbottom: (y + 8)\n\t\t\t};\n\n\t\t\t//Calculate how much space is left on each side of the rectangle\n\t\t\tvar window_width = jQuery(_wnd.document).width();\n\t\t\tvar window_height = jQuery(_wnd.document).height();\n\t\t\tvar space_left = {\n\t\t\t\tleft: (cursor_rect.left),\n\t\t\t\ttop: (cursor_rect.top),\n\t\t\t\tright: (window_width - cursor_rect.right),\n\t\t\t\tbottom: (window_height - cursor_rect.bottom)\n\t\t\t};\n\n\t\t\t//Get the width and the height of the tooltip\n\t\t\tvar tooltip_width = tooltip_div.width();\n\t\t\tif (tooltip_width > 300) tooltip_width = 300;\n\t\t\tvar tooltip_height = tooltip_div.height();\n\n\t\t\tif (space_left.right < tooltip_width) {\n\t\t\t\ttooltip_div.css('left', Math.max(0,cursor_rect.left - tooltip_width));\n\t\t\t} else if (space_left.left >= tooltip_width) {\n\t\t\t\ttooltip_div.css('left', cursor_rect.right);\n\t\t\t} else\t{\n\t\t\t\ttooltip_div.css('left', cursor_rect.right);\n\t\t\t\ttooltip_div.css('max-width', space_left.right);\n\t\t\t}\n\n\t\t\t// tooltip does fit neither above nor below: put him vertical centered left or right of cursor\n\t\t\tif (space_left.bottom < tooltip_height && space_left.top < tooltip_height) {\n\t\t\t\tif (tooltip_height > window_height-20) {\n\t\t\t\t\ttooltip_div.css('max-height', tooltip_height=window_height-20);\n\t\t\t\t}\n\t\t\t\ttooltip_div.css('top', (window_height-tooltip_height)/2);\n\t\t\t} else if (space_left.bottom < tooltip_height) {\n\t\t\t\ttooltip_div.css('top', cursor_rect.top - tooltip_height);\n\t\t\t} else {\n\t\t\t\ttooltip_div.css('top', cursor_rect.bottom);\n\t\t\t}\n\n\t\t\ttooltip_div.fadeIn(100);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the tooltip_div with the given text.\n\t *\n\t * @param {string} _html\n\t * @param {boolean} _isHtml if set to true content gets appended as html\n\t */\n\tfunction prepare(_html, _isHtml)\n\t{\n\t\t// Free and null the old tooltip_div\n\t\thide();\n\n\t\t//Generate the tooltip div, set it's text and append it to the body tag\n\t\ttooltip_div = jQuery(_wnd.document.createElement('div'));\n\t\ttooltip_div.hide();\n\t\tif (_isHtml)\n\t\t{\n\t\t\ttooltip_div.append(_html);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttooltip_div.text(_html)\n\t\t}\n\t\ttooltip_div.addClass(\"egw_tooltip\");\n\t\tjQuery(_wnd.document.body).append(tooltip_div);\n\n\t\t//The tooltip should automatically hide when the mouse comes over it\n\t\ttooltip_div.mouseenter(function() {\n\t\t\t\thide();\n\t\t});\n\t}\n\n\t/**\n\t * showTooltipTimeout is used to prepare showing the tooltip.\n\t */\n\tfunction showTooltipTimeout()\n\t{\n\t\tif (current_elem != null)\n\t\t{\n\t\t\tshow_delta += time_delta;\n\t\t\tif (show_delta < show_delay)\n\t\t\t{\n\t\t\t\t//Repeat the call of timeout\n\t\t\t\t_wnd.setTimeout(showTooltipTimeout, time_delta);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tshow_delta = 0;\n\t\t\t\tshow();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\t/**\n\t\t * Binds a tooltip to the given DOM-Node with the given html.\n\t\t * It is important to remove all tooltips from all elements which are\n\t\t * no longer needed, in order to prevent memory leaks.\n\t\t *\n\t\t * @param _elem is the element to which the tooltip should get bound. It\n\t\t * \thas to be a jQuery node.\n\t\t * @param _html is the html code which should be shown as tooltip.\n\t\t */\n\t\ttooltipBind: function(_elem, _html, _isHtml) {\n\t\t\tif (_html != '')\n\t\t\t{\n\t\t\t\t_elem.bind('mouseenter.tooltip', function(e) {\n\t\t\t\t\tif (_elem != current_elem)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Prepare the tooltip\n\t\t\t\t\t\tprepare(_html, _isHtml);\n\n\t\t\t\t\t\t// Set the current element the mouse is over and\n\t\t\t\t\t\t// initialize the position variables\n\t\t\t\t\t\tcurrent_elem = _elem;\n\t\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\t\tx = e.clientX;\n\t\t\t\t\t\ty = e.clientY;\n\n\t\t\t\t\t\t// Create the timeout for showing the timeout\n\t\t\t\t\t\t_wnd.setTimeout(showTooltipTimeout, time_delta);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\t_elem.bind('mouseleave.tooltip', function() {\n\t\t\t\t\tcurrent_elem = null;\n\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\tif (tooltip_div)\n\t\t\t\t\t{\n\t\t\t\t\t\ttooltip_div.fadeOut(100);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t_elem.bind('mousemove.tooltip', function(e) {\n\t\t\t\t\t//Calculate the distance the mouse took since the last call of mousemove\n\t\t\t\t\tvar dx = x - e.clientX;\n\t\t\t\t\tvar dy = y - e.clientY;\n\t\t\t\t\tvar movedist = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\t\t//Block appereance of the tooltip on fast movements (with small movedistances)\n\t\t\t\t\tif (movedist > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tshow_delta = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tx = e.clientX;\n\t\t\t\t\ty = e.clientY;\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Unbinds the tooltip from the given DOM-Node.\n\t\t *\n\t\t * @param _elem is the element from which the tooltip should get\n\t\t * removed. _elem has to be a jQuery node.\n\t\t */\n\t\ttooltipUnbind: function(_elem) {\n\t\t\tif (current_elem == _elem)\n\t\t\t{\n\t\t\t\thide();\n\t\t\t\tcurrent_elem = null;\n\t\t\t}\n\n\t\t\t// Unbind all \"tooltip\" events from the given element\n\t\t\t_elem.unbind('.tooltip');\n\t\t}\n\t};\n\n});\n\n", "/*\n * Egroupware Calendar event widget\n * @license http://opensource.org/licenses/gpl-license.php GPL - GNU General Public License\n * @package etemplate\n * @subpackage api\n * @link http://www.egroupware.org\n * @author Nathan Gray\n * @version $Id$\n */\n\n\n/*egw:uses\n\t/etemplate/js/et2_core_valueWidget;\n*/\n\n/**\n * Class for a single event, displayed in either the timegrid or planner view\n *\n * It is possible to directly provide all information directly, but calendar\n * uses egw.data for caching, so ID is all that is needed.\n *\n * Note that there are several pieces of information that have 'ID' in them:\n * - row_id - used by both et2_calendar_event and the nextmatch to uniquely\n *\tidentify a particular entry or entry ocurrence\n * - id - Recurring events may have their recurrence as a timestamp after their ID,\n *\tsuch as '194:1453318200', or not.  It's usually (always?) the same as row ID.\n * - app_id - the ID according to the source application.  For calendar, this\n *\tis the same as ID (but always with the recurrence), for other apps this is\n *\tusually just an integer.  With app_id and app, you should be able to call\n *\tegw.open() and get the specific entry.\n * - Events from other apps will have their app name prepended to their ID, such\n *\tas 'infolog123', so app_id and id will be different for these events\n * - Cache ID is the same as other apps, and looks like 'calendar::<row_id>'\n * - The DOM ID for the containing div is event_<row_id>\n *\n * Events are expected to be added to either et2_calendar_daycol or\n * et2_calendar_planner_row rather than either et2_calendar_timegrid or\n * et2_calendar_planner directly.\n *\n *\n * @augments et2_valueWidget\n */\nvar et2_calendar_event = (function(){ \"use strict\"; return et2_valueWidget.extend([et2_IDetachedDOM],\n{\n\n\tattributes: {\n\t\t\"value\": {\n\t\t\ttype: \"any\",\n\t\t\tdefault: et2_no_init\n\t\t},\n\t\t\"onclick\": {\n\t\t\t\"description\": \"JS code which is executed when the element is clicked. \" +\n\t\t\t\t\"If no handler is provided, or the handler returns true and the event is not read-only, the \" +\n\t\t\t\t\"event will be opened according to calendar settings.\"\n\t\t}\n\t},\n\n\t/**\n\t * Constructor\n\t *\n\t * @memberOf et2_calendar_daycol\n\t */\n\tinit: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tvar event = this;\n\n\t\t// Main container\n\t\tthis.div = jQuery(document.createElement(\"div\"))\n\t\t\t.addClass(\"calendar_calEvent\")\n\t\t\t.addClass(this.options.class)\n\t\t\t.css('width',this.options.width)\n\t\t\t.on('mouseenter', function() {\n\t\t\t\t// Bind actions on first mouseover for faster creation\n\t\t\t\tif(event._need_actions_linked)\n\t\t\t\t{\n\t\t\t\t\tevent._copy_parent_actions();\n\t\t\t\t}\n\t\t\t\t// Tooltip\n\t\t\t\tif(!event._tooltipElem)\n\t\t\t\t{\n\t\t\t\t\tevent.options.statustext_html = true;\n\t\t\t\t\tevent.set_statustext(event._tooltip());\n\t\t\t\t\treturn event.div.trigger('mouseenter');\n\t\t\t\t}\n\t\t\t\t// Hacky to remove egw's tooltip border and let the mouse in\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\tjQuery('body .egw_tooltip')\n\t\t\t\t\t\t.css('border','none')\n\t\t\t\t\t\t.on('mouseenter', function() {\n\t\t\t\t\t\t\tevent.div.off('mouseleave.tooltip');\n\t\t\t\t\t\t\tjQuery('body.egw_tooltip').remove();\n\t\t\t\t\t\t\tjQuery('body').append(this);\n\t\t\t\t\t\t\tjQuery(this).stop(true).fadeTo(400, 1)\n\t\t\t\t\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\t\t\t\t\tjQuery(this).fadeOut('400', function() {\n\t\t\t\t\t\t\t\t\t\tjQuery(this).remove();\n\t\t\t\t\t\t\t\t\t\t// Set up to work again\n\t\t\t\t\t\t\t\t\t\tevent.set_statustext(event._tooltip());\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t},105);\n\t\t\t});\n\t\tthis.title = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventHeader\")\n\t\t\t.appendTo(this.div);\n\t\tthis.body = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventBody\")\n\t\t\t.appendTo(this.div);\n\t\tthis.icons = jQuery(document.createElement('div'))\n\t\t\t.addClass(\"calendar_calEventIcons\")\n\t\t\t.appendTo(this.title);\n\n\t\tthis.setDOMNode(this.div[0]);\n\n\t\tthis._need_actions_linked = false;\n\t},\n\n\tdoLoadingFinished: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Already know what is needed to hook to cache\n\t\tif(this.options.value && this.options.value.row_id)\n\t\t{\n\t\t\tegw.dataRegisterUID(\n\t\t\t\t'calendar::'+this.options.value.row_id,\n\t\t\t\tthis._UID_callback,\n\t\t\t\tthis,\n\t\t\t\tthis.getInstanceManager().execId,\n\t\t\t\tthis.id\n\t\t\t);\n\t\t}\n\t\treturn true;\n\t},\n\n\tdestroy: function() {\n\t\tthis._super.apply(this, arguments);\n\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.remove();\n\t\t\tthis._actionObject = null;\n\t\t}\n\n\t\tthis.div.off();\n\t\tthis.title.remove();\n\t\tthis.title = null;\n\t\tthis.body.remove();\n\t\tthis.body = null;\n\t\tthis.icons = null;\n\t\tthis.div.remove();\n\t\tthis.div = null;\n\n\t\tjQuery('body.egw_tooltip').remove();\n\n\t\t// Unregister, or we'll continue to be notified...\n\t\tif(this.options.value)\n\t\t{\n\t\t\tvar old_app_id = this.options.value.row_id;\n\t\t\tegw.dataUnregisterUID('calendar::'+old_app_id,false,this);\n\t\t}\n\t},\n\n\tset_value: function(_value) {\n\t\t// Un-register for updates\n\t\tif(this.options.value)\n\t\t{\n\t\t\tvar old_id = this.options.value.row_id;\n\t\t\tif(!_value || !_value.row_id || old_id !== _value.row_id)\n\t\t\t{\n\t\t\t\tegw.dataUnregisterUID('calendar::'+old_id,false,this);\n\t\t\t}\n\t\t}\n\t\tthis.options.value = _value;\n\n\t\t// Register for updates\n\t\tvar id = this.options.value.row_id;\n\t\tif(!old_id || old_id !== id)\n\t\t{\n\t\t\tegw.dataRegisterUID('calendar::'+id, this._UID_callback ,this,this.getInstanceManager().execId,this.id);\n\t\t}\n\t\tif(_value && !egw.dataHasUID('calendar::'+id))\n\t\t{\n\t\t\tegw.dataStoreUID('calendar::'+id, _value);\n\t\t}\n\t},\n\n\t/**\n\t * Callback for changes in cached data\n\t */\n\t_UID_callback: function _UID_callback(event) {\n\t\t// Copy to avoid changes, which may cause nm problems\n\t\tvar value = event === null ? null : jQuery.extend({},event);\n\n\t\t// Make sure id is a string, check values\n\t\tif(value)\n\t\t{\n\t\t\tthis._values_check(value);\n\t\t}\n\n\t\t// Check for changing days in the grid view\n\t\tif(!this._sameday_check(value))\n\t\t{\n\t\t\t// May need to update parent to remove out-of-view events\n\t\t\tvar parent = this._parent;\n\t\t\tthis._parent.removeChild(this);\n\t\t\tif(event === null && parent && parent._out_of_view)\n\t\t\t{\n\t\t\t\tparent._out_of_view();\n\t\t\t}\n\n\t\t\t// This should now cease to exist, as new events have been created\n\t\t\tthis.free();\n\t\t\treturn;\n\t\t}\n\n\t\t// Copy to avoid changes, which may cause nm problems\n\t\tthis.options.value = jQuery.extend({},value);\n\n\t\tif(this._parent.options.date)\n\t\t{\n\t\t\tthis.options.value.date = this._parent.options.date;\n\t\t}\n\n\t\t// Let parent position\n\t\tthis._parent.position_event(this);\n\n\t\t// Parent may remove this if the date isn't the same\n\t\tif(this._parent)\n\t\t{\n\t\t\tthis._update();\n\t\t}\n\t},\n\n\t/**\n\t * Draw the event\n\t */\n\t_update: function() {\n\n\t\t// Update to reflect new information\n\t\tvar event = this.options.value;\n\n\t\tvar id = event.row_id ? event.row_id : event.id + (event.recur_type ? ':'+event.recur_date : '');\n\t\tvar formatted_start = event.start.toJSON();\n\n\t\tthis.set_id('event_' + id);\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.id = 'calendar::' + id;\n\t\t}\n\n\t\tthis._need_actions_linked = true;\n\n\t\t// Make sure category stuff is there\n\t\t// Fake it to use the cache / call - if already there, these will return\n\t\t// immediately.\n\t\tvar im = this.getInstanceManager();\n\t\tet2_selectbox.cat_options({\n\t\t\t_type:'select-cat',\n\t\t\tgetInstanceManager: function() {return im}\n\t\t}, {application:event.app||'calendar'});\n\n\t\t// Get CSS too\n\t\tegw.includeCSS('/api/categories.php?app='+event.app);\n\n\t\t// Need cleaning? (DnD helper removes content)\n\t\tif(!this.div.has(this.title).length)\n\t\t{\n\t\t\tthis.div\n\t\t\t\t.empty()\n\t\t\t\t.append(this.title)\n\t\t\t\t.append(this.body);\n\t\t}\n\t\tif(!this._parent.options.readonly && !this.options.readonly && this.div.droppable('instance'))\n\t\t{\n\t\t\tthis.div\n\t\t\t\t// Let timegrid always get the drag\n\t\t\t\t.droppable('option','greedy',false);\n\t\t}\n\t\t// DOM nodes\n\t\tthis.div\n\t\t\t// Set full day flag\n\t\t\t.attr('data-full_day', event.whole_day)\n\n\t\t\t// Put everything we need for basic interaction here, so it's available immediately\n\t\t\t.attr('data-id', event.id)\n\t\t\t.attr('data-app', event.app || 'calendar')\n\t\t\t.attr('data-app_id', event.app_id)\n\t\t\t.attr('data-start', formatted_start)\n\t\t\t.attr('data-owner', event.owner)\n\t\t\t.attr('data-recur_type', event.recur_type)\n\t\t\t.attr('data-resize', event.whole_day ? 'WD' : '' + (event.recur_type ? 'S':''))\n\t\t\t.attr('data-priority', event.priority)\n\t\t\t// Remove any category classes\n\t\t\t.removeClass(function(index, css) {\n\t\t\t\treturn (css.match (/(^|\\s)cat_\\S+/g) || []).join(' ');\n\t\t\t})\n\t\t\t// Remove any status classes\n\t\t\t.removeClass(function(index, css) {\n\t\t\t\treturn (css.match(/calendar_calEvent\\S+/g) || []).join(' ');\n\t\t\t})\n\t\t\t.removeClass('calendar_calEventSmall')\n\t\t\t.addClass(event.class)\n\t\t\t.toggleClass('calendar_calEventPrivate', typeof event.private !== 'undefined' && event.private);\n\t\tthis.options.class = event.class;\n\t\tvar status_class = this._status_class();\n\n\t\t// Add category classes, if real categories are set\n\t\tif(event.category && event.category != '0')\n\t\t{\n\t\t\tvar cats = event.category.split(',');\n\t\t\tfor(var i = 0; i < cats.length; i++)\n\t\t\t{\n\t\t\t\tthis.div.addClass('cat_' + cats[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.div.toggleClass('calendar_calEventUnknown', event.participants[egw.user('account_id')] ? event.participants[egw.user('account_id')][0] === 'U' : false);\n\t\tthis.div.addClass(status_class);\n\n\t\tthis.body.toggleClass('calendar_calEventBodySmall', event.whole_day_on_top || false);\n\n\t\t// Header\n\t\tvar title = !event.is_private ? egw.htmlspecialchars(event['title']) : egw.lang('private');\n\n\t\tthis.title\n\t\t\t.html('<span class=\"calendar_calTimespan\">'+this._get_timespan(event) + '<br /></span>')\n\t\t\t.append('<span class=\"calendar_calEventTitle\">'+title+'</span>')\n\n\t\t// Colors - don't make them transparent if there is no color\n\t\tif(jQuery.Color(\"rgba(0,0,0,0)\").toRgbaString() != jQuery.Color(this.div,'background-color').toRgbaString())\n\t\t{\n\t\t\t// Most statuses use colored borders\n\t\t\tthis.div.css('border-color',status_class === 'calendar_calEventAllAccepted' ? this.div.css('background-color') : '');\n\t\t}\n\n\t\tthis.icons.appendTo(this.title)\n\t\t\t.html(this._icons());\n\n\t\t// Body\n\t\tif(event.whole_day_on_top)\n\t\t{\n\t\t\tthis.body.html(title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar start_time = jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\tthis.body\n\t\t\t\t.html('<span class=\"calendar_calEventTitle\">'+title+'</span>')\n\t\t\t\t.append('<span class=\"calendar_calTimespan\">'+start_time + '</span>');\n\t\t\tif(this.options.value.description.trim())\n\t\t\t{\n\t\t\t\tthis.body\n\t\t\t\t\t.append('<p>'+egw.htmlspecialchars(this.options.value.description)+'</p>');\n\t\t\t}\n\t\t}\n\n\t\t// Clear tooltip for regeneration\n\t\tthis.set_statustext('');\n\n\t\t// Height specific section\n\t\t// This can take an unreasonable amount of time if parent is hidden\n\t\tif(this._parent.div.is(':visible'))\n\t\t{\n\t\t\tthis._small_size();\n\t\t}\n\t},\n\n\t/**\n\t * Calculate display variants for when event is too short for full display\n\t *\n\t * Display is based on the number of visible lines, calculated off the header\n\t * height:\n\t * 1 - show just the event title, with ellipsis\n\t * 2 - Show timespan and title, with ellipsis\n\t * > 4 - Show description as well, truncated to fit\n\t */\n\t_small_size: function() {\n\n\t\tif(this.options.value.whole_day_on_top) return;\n\n\t\t// Skip for planner view, it's always small\n\t\tif(this._parent && this._parent.instanceOf(et2_calendar_planner_row)) return;\n\n\t\t// Pre-calculation reset\n\t\tthis.div.removeClass('calendar_calEventSmall');\n\t\tthis.body.css('height', 'auto');\n\n\t\tvar line_height = parseFloat(this.div.css('line-height'));\n\t\tvar visible_lines = Math.floor(this.div.innerHeight() / line_height);\n\n\t\tif(!this.title.height())\n\t\t{\n\t\t\t// Handle sizing while hidden, such as when calendar is not the active tab\n\t\t\tvisible_lines = Math.floor(egw.getHiddenDimensions(this.div).h / egw.getHiddenDimensions(this.title).h);\n\t\t}\n\t\tvisible_lines = Math.max(1,visible_lines);\n\n\t\tif(this.getParent() && this.getParent().instanceOf(et2_calendar_daycol))\n\t\t{\n\t\t\tthis.div.toggleClass('calendar_calEventSmall',visible_lines < 4);\n\t\t\tthis.div\n\t\t\t\t.attr('data-visible_lines', visible_lines);\n\t\t}\n\t\telse if (this.getParent() && this.getParent().instanceOf(et2_calendar_planner_row))\n\t\t{\n\t\t\t// Less than 8 hours is small\n\t\t\tthis.div.toggleClass('calendar_calEventSmall',this.options.value.end.valueOf() - this.options.value.start.valueOf() < 28800000);\n\t\t}\n\n\n\t\tif(this.body.height() > this.div.height() - this.title.height() && visible_lines >= 4)\n\t\t{\n\t\t\tthis.body.css('height', Math.floor((visible_lines-1)*line_height - this.title.height()) + 'px');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.body.css('height', '');\n\t\t}\n\t},\n\n\t/**\n\t * Examines the participants & returns CSS classname for status\n\t *\n\t * @returns {String}\n\t */\n\t_status_class: function() {\n\t\tvar status_class = 'calendar_calEventAllAccepted';\n\t\tfor(var id in this.options.value.participants)\n\t\t{\n\t\t\tvar status = this.options.value.participants[id];\n\n\t\t\tstatus = et2_calendar_event.split_status(status);\n\n\t\t\tswitch (status)\n\t\t\t{\n\t\t\t\tcase 'A':\n\t\t\t\tcase '':\t// app without status\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\tstatus_class = 'calendar_calEventSomeUnknown';\n\t\t\t\t\treturn status_class;\t// break for\n\t\t\t\tdefault:\n\t\t\t\t\tstatus_class = 'calendar_calEventAllAnswered';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn status_class;\n\t},\n\n\t/**\n\t * Create tooltip shown on hover\n\t *\n\t * @return {String}\n\t */\n\t_tooltip: function() {\n\t\tif(!this.div || !this.options.value || !this.options.value.app_id) return '';\n\n\t\tvar border = this.div.css('borderTopColor');\n\t\tvar bg_color = this.div.css('background-color');\n\t\tvar header_color = this.title.css('color');\n\t\tvar timespan = this._get_timespan(this.options.value);\n\n\t\tthis._parent.date_helper.set_value(this.options.value.start.valueOf ? new Date(this.options.value.start) : this.options.value.start);\n\t\tvar start = this._parent.date_helper.input_date.val();\n\t\tthis._parent.date_helper.set_value(this.options.value.end.valueOf ? new Date(this.options.value.end) : this.options.value.end);\n\t\tvar end = this._parent.date_helper.input_date.val();\n\n\t\tvar times = !this.options.value.multiday ?\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('Time')+'</span>:' + timespan :\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('Start') + '</span>:' +start+ ' ' +\n\t\t\t'<span class=\"calendar_calEventLabel\">'+this.egw().lang('End') + '</span>:' + end;\n\t\tvar cat_label = '';\n\t\tif(this.options.value.category)\n\t\t{\n\t\t\tvar cat = et2_createWidget('select-cat',{'readonly':true},this);\n\t\t\tcat.set_value(this.options.value.category);\n\t\t\tcat_label = this.options.value.category.indexOf(',') <= 0 ? cat.span.text() : [];\n\t\t\tif(typeof cat_label != 'string')\n\t\t\t{\n\t\t\t\tcat.span.children().each(function() {\n\t\t\t\t\tcat_label.push(jQuery(this).text());\n\t\t\t\t});\n\t\t\t\tcat_label = cat_label.join(', ');\n\t\t\t}\n\t\t\tcat.destroy();\n\t\t}\n\t\tvar participants = '';\n\t\tif(this.options.value.participant_types[''])\n\t\t{\n\t\t\tparticipants += this.options.value.participant_types[''].join(\"<br />\");\n\t\t}\n\t\tfor(var type_name in this.options.value.participant_types)\n\t\t{\n\t\t\tif(type_name)\n\t\t\t{\n\t\t\t\tparticipants += '</p><p><span class=\"calendar_calEventLabel\">'+type_name+'</span>:<br />';\n\t\t\t\tparticipants += this.options.value.participant_types[type_name].join(\"<br />\");\n\t\t\t}\n\t\t}\n\n\t\treturn '<div class=\"calendar_calEventTooltip ' + this._status_class() +' '+ this.options.class +\n\t\t\t'\" style=\"border-color: '+border+'; background-color: '+bg_color+';\">'+\n\t\t\t'<div class=\"calendar_calEventHeaderSmall\">'+\n\t\t\t\t'<font style=\"color:'+header_color+'\">'+timespan+'</font>'+\n\t\t\t\tthis.icons[0].outerHTML+\n\t\t\t'</div>'+\n\t\t\t'<div class=\"calendar_calEventBody\">'+\n\t\t\t\t'<p style=\"margin: 0px;\">'+\n\t\t\t\t'<span class=\"calendar_calEventTitle\">'+egw.htmlspecialchars(this.options.value.title)+'</span><br>'+\n\t\t\t\tegw.htmlspecialchars(this.options.value.description)+'</p>'+\n\t\t\t\t'<p style=\"margin: 2px 0px;\">'+times+'</p>'+\n\t\t\t\t(this.options.value.location ? '<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Location') + '</span>:' +\n\t\t\t\tegw.htmlspecialchars(this.options.value.location)+'</p>' : '')+\n\t\t\t\t(cat_label ? '<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Category') + '</span>:' + cat_label +'</p>' : '')+\n\t\t\t\t'<p><span class=\"calendar_calEventLabel\">'+this.egw().lang('Participants')+'</span>:<br />'+\n\t\t\t\t\tparticipants + '</p>'+ this._participant_summary(this.options.value.participants) +\n\t\t\t'</div>'+\n\t\t'</div>';\n\t},\n\n\t/**\n\t * Generate participant summary line\n\t *\n\t * @returns {String}\n\t */\n\t_participant_summary: function(participants)\n\t{\n\t\tif( Object.keys(this.options.value.participants).length < 2)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tvar participant_status = {A: 0, R: 0, T: 0, U: 0, D: 0};\n\t\tvar status_label = {A: 'accepted', R: 'rejected', T: 'tentative', U: 'unknown', D: 'delegated'};\n\t\tvar participant_summary = Object.keys(this.options.value.participants).length + ' ' + this.egw().lang('Participants')+': ';\n\t\tvar status_totals = [];\n\n\t\tfor(var id in this.options.value.participants)\n\t\t{\n\t\t\tvar status = this.options.value.participants[id].substr(0,1);\n\t\t\tparticipant_status[status]++;\n\t\t}\n\t\tfor(var status in participant_status)\n\t\t{\n\t\t\tif(participant_status[status] > 0)\n\t\t\t{\n\t\t\t\tstatus_totals.push(participant_status[status] + ' ' + this.egw().lang(status_label[status]));\n\t\t\t}\n\t\t}\n\t\treturn participant_summary + status_totals.join(', ');\n\t},\n\n\t/**\n\t * Get actual icons from list\n\t * @returns {undefined}\n\t */\n\t_icons: function() {\n\t\tvar icons = [];\n\n\t\tif(this.options.value.is_private)\n\t\t{\n\t\t\t// Hide everything\n\t\t\ticons.push('<img src=\"'+this.egw().image('private','calendar')+'\"/>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(this.options.value.app !== 'calendar')\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('navbar',this.options.value.app)+'\" title=\"'+this.egw().lang(this.options.value.app)+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.priority == 3)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('high','calendar')+'\" title=\"'+this.egw().lang('high priority')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.public == '0')\n\t\t\t{\n\t\t\t\t// Show private flag\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('private','calendar')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value['recur_type'])\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('recur','calendar')+'\" title=\"'+this.egw().lang('recurring event')+'\"/>');\n\t\t\t}\n\t\t\t// icons for single user, multiple users or group(s) and resources\n\t\t\tvar single = '<img src=\"'+this.egw().image('single','calendar')+'\" title=\"'+'\"/>';\n\t\t\tvar multiple = '<img src=\"'+this.egw().image('users','calendar')+'\" title=\"'+'\"/>';\n\t\t\tfor(var uid in this.options.value['participants'])\n\t\t\t{\n\t\t\t\tif(Object.keys(this.options.value.participants).length == 1 && !isNaN(uid))\n\t\t\t\t{\n\t\t\t\t\ticons.push(single);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!isNaN(uid) && icons.indexOf(multiple) === -1)\n\t\t\t\t{\n\t\t\t\t\ticons.push(multiple);\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * TODO: resource icons\n\t\t\t\telseif(!isset($icons[$uid[0]]) && isset($this->bo->resources[$uid[0]]) && isset($this->bo->resources[$uid[0]]['icon']))\n\t\t\t\t{\n\t\t\t\t \t$icons[$uid[0]] = html::image($this->bo->resources[$uid[0]]['app'],\n\t\t\t\t \t\t($this->bo->resources[$uid[0]]['icon'] ? $this->bo->resources[$uid[0]]['icon'] : 'navbar'),\n\t\t\t\t \t\tlang($this->bo->resources[$uid[0]]['app']),\n\t\t\t\t \t\t'width=\"16px\" height=\"16px\"');\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\n\t\t\tif(this.options.value.non_blocking)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('nonblocking','calendar')+'\" title=\"'+this.egw().lang('non blocking')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.alarm && !jQuery.isEmptyObject(this.options.value.alarm) && !this.options.value.is_private)\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('alarm','calendar')+'\" title=\"'+this.egw().lang('alarm')+'\"/>');\n\t\t\t}\n\t\t\tif(this.options.value.participants[egw.user('account_id')] && this.options.value.participants[egw.user('account_id')][0] == 'U')\n\t\t\t{\n\t\t\t\ticons.push('<img src=\"'+this.egw().image('needs-action','calendar')+'\" title=\"'+this.egw().lang('Needs action')+'\"/>');\n\t\t\t}\n\t\t}\n\t\treturn icons;\n\t},\n\n\t/**\n\t * Get a text representation of the timespan of the event.  Either start\n\t * - end, or 'all day'\n\t *\n\t * @param {Object} event Event to get the timespan for\n\t * @param {number} event.start_m Event start, in minutes from midnight\n\t * @param {number} event.end_m Event end, in minutes from midnight\n\t *\n\t * @return {string} Timespan\n\t */\n\t_get_timespan: function(event) {\n\t\tvar timespan = '';\n\t\tif (event['start_m'] === 0 && event['end_m'] >= 24*60-1)\n\t\t{\n\t\t\tif (event['end_m'] > 24*60)\n\t\t\t{\n\t\t\t\ttimespan = jQuery.datepicker.formatTime(\n\t\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t\t{\n\t\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\t\tseconds: 0,\n\t\t\t\t\t\ttimezone: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t\t).trim()+' - '+jQuery.datepicker.formatTime(\n\t\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t\t{\n\t\t\t\t\t\thour: event.end_m / 60,\n\t\t\t\t\t\tminute: event.end_m % 60,\n\t\t\t\t\t\tseconds: 0,\n\t\t\t\t\t\ttimezone: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t\t).trim();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttimespan = this.egw().lang('Whole day');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar duration = event.multiday ?\n\t\t\t\t(event.end - event.start) / 60000 :\n\t\t\t\t(event.end_m - event.start_m);\n\t\t\tduration = Math.floor(duration/60) + this.egw().lang('h')+(duration%60 ? duration%60 : '');\n\n\t\t\ttimespan = jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.start_m / 60,\n\t\t\t\t\tminute: event.start_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\ttimespan += ' - ' + jQuery.datepicker.formatTime(\n\t\t\t\tegw.preference(\"timeformat\") === \"12\" ? \"h:mmtt\" : \"HH:mm\",\n\t\t\t\t{\n\t\t\t\t\thour: event.end_m / 60,\n\t\t\t\t\tminute: event.end_m % 60,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t\ttimezone: 0\n\t\t\t\t},\n\t\t\t\t{\"ampm\": (egw.preference(\"timeformat\") === \"12\")}\n\t\t\t).trim();\n\n\t\t\ttimespan += ': ' + duration;\n\t\t}\n\t\treturn timespan;\n\t},\n\n\t/**\n\t * Make sure event data has all proper values, and format them as expected\n\t * @param {Object} event\n\t */\n\t_values_check: function _values_check(event)\n\t{\n\t\t// Make sure ID is a string\n\t\tif(event.id)\n\t\t{\n\t\t\tevent.id = ''+event.id;\n\t\t}\n\n\t\t// Use dates as objects\n\t\tif(typeof event.start !== 'object')\n\t\t{\n\t\t\tthis._parent.date_helper.set_value(event.start);\n\t\t\tevent.start = new Date(this._parent.date_helper.getValue());\n\t\t}\n\t\tif(typeof event.end !== 'object')\n\t\t{\n\t\t\tthis._parent.date_helper.set_value(event.end);\n\t\t\tevent.end = new Date(this._parent.date_helper.getValue());\n\t\t}\n\n\t\t// We need minutes for durations\n\t\tif(typeof event.start_m === 'undefined')\n\t\t{\n\t\t\tevent.start_m = event.start.getUTCHours() * 60 + event.start.getUTCMinutes();\n\t\t\tevent.end_m = event.end.getUTCHours() * 60 + event.end.getUTCMinutes();\n\t\t}\n\t\tif(typeof event.multiday === 'undefined')\n\t\t{\n\t\t\tevent.multiday = (event.start.getUTCFullYear() !== event.end.getUTCFullYear() ||\n\t\t\t\tevent.start.getUTCMonth() !== event.end.getUTCMonth() ||\n\t\t\t\tevent.start.getUTCDate() != event.end.getUTCDate());\n\t\t}\n\t\tif(!event.start.getUTCHours() && !event.start.getUTCMinutes() && event.end.getUTCHours() == 23 && event.end.getUTCMinutes() == 59)\n\t\t{\n\t\t\tevent.whole_day_on_top = (event.non_blocking && event.non_blocking != '0');\n\t\t}\n\t},\n\n\t/**\n\t * Check to see if the provided event information is for the same date as\n\t * what we're currently expecting, and that it has not been changed.\n\t *\n\t * If the date has changed, we adjust the associated daywise caches to move\n\t * the event's ID to where it should be.  This check allows us to be more\n\t * directly reliant on the data cache, and less on any other control logic\n\t * elsewhere first.\n\t *\n\t * @param {Object} event Map of event data from cache\n\t * @param {string} event.date For non-recurring, single day events, this is\n\t *\tthe date the event is on.\n\t * @param {string} event.start Start of the event (used for multi-day events)\n\t * @param {string} event.end End of the event (used for multi-day events)\n\t *\n\t * @return {Boolean} Provided event data is for the same date\n\t */\n\t_sameday_check: function(event)\n\t{\n\t\t// Event somehow got orphaned, or deleted\n\t\tif(!this._parent || event === null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// Also check participants against owner\n\t\tvar owner_match = et2_calendar_event.owner_check(event, this._parent);\n\n\t\t// Simple, same day\n\t\tif(owner_match && this.options.value.date && event.date == this.options.value.date)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t// Multi-day non-recurring event spans days - date does not match\n\t\tvar event_start = new Date(event.start);\n\t\tvar event_end = new Date(event.end);\n\t\tif(owner_match && this._parent.date >= event_start && this._parent.date <= event_end)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t// Delete all old actions\n\t\tif(this._actionObject)\n\t\t{\n\t\t\tthis._actionObject.clear();\n\t\t\tthis._actionObject.unregisterActions();\n\t\t\tthis._actionObject = null;\n\t\t}\n\n\t\t// Update daywise caches\n\t\tvar new_cache_id = app.classes.calendar._daywise_cache_id(event.date,this._parent.options.owner);\n\t\tvar new_daywise = egw.dataGetUIDdata(new_cache_id);\n\t\tnew_daywise = new_daywise && new_daywise.data ? new_daywise.data : [];\n\t\tvar old_cache_id = false;\n\t\tif(this.options.value && this.options.value.date)\n\t\t{\n\t\t\told_cache_id = app.classes.calendar._daywise_cache_id(this.options.value.date,this._parent.options.owner);\n\t\t}\n\n\t\tif(new_cache_id != old_cache_id)\n\t\t{\n\t\t\tvar old_daywise = egw.dataGetUIDdata(old_cache_id);\n\t\t\told_daywise = old_daywise && old_daywise.data ? old_daywise.data : [];\n\t\t\told_daywise.splice(old_daywise.indexOf(this.options.value.row_id),1);\n\t\t\tegw.dataStoreUID(old_cache_id,old_daywise);\n\n\t\t\tif (new_daywise.indexOf(event.row_id) < 0)\n\t\t\t{\n\t\t\t\tnew_daywise.push(event.row_id);\n\t\t\t}\n\t\t\tif(new_daywise.data !== null)\n\t\t\t{\n\t\t\t\tegw.dataStoreUID(new_cache_id,new_daywise);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tattachToDOM: function()\n\t{\n\t\tthis._super.apply(this, arguments);\n\n\t\t// Remove the binding for the click handler, unless there's something\n\t\t// custom here.\n\t\tif (!this.onclick)\n\t\t{\n\t\t\tjQuery(this.node).off(\"click\");\n\t\t}\n\t},\n\n\t/**\n\t * Click handler calling custom handler set via onclick attribute to this.onclick.\n\t * All other handling is done by the timegrid widget.\n\t *\n\t * @param {Event} _ev\n\t * @returns {boolean}\n\t */\n\tclick: function(_ev) {\n\t\tvar result = true;\n\t\tif(typeof this.onclick == 'function')\n\t\t{\n\t\t\t// Make sure function gets a reference to the widget, splice it in as 2. argument if not\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif(args.indexOf(this) == -1) args.splice(1, 0, this);\n\n\t\t\tresult = this.onclick.apply(this, args);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Show the recur prompt for this event\n\t *\n\t * Calls et2_calendar_event.recur_prompt with this event's value.\n\t *\n\t * @param {et2_calendar_event~prompt_callback} callback\n\t * @param {Object} [extra_data]\n\t */\n\trecur_prompt: function(callback, extra_data)\n\t{\n\t\tet2_calendar_event.recur_prompt(this.options.value,callback,extra_data);\n\t},\n\n\t/**\n\t * Show the series split prompt for this event\n\t *\n\t * Calls et2_calendar_event.series_split_prompt with this event's value.\n\t *\n\t * @param {et2_calendar_event~prompt_callback} callback\n\t */\n\tseries_split_prompt: function(callback)\n\t{\n\t\tet2_calendar_event.series_split_prompt(this.options.value,this.options.value.recur_date, callback);\n\t},\n\n\t/**\n\t * Copy the actions set on the parent, apply them to self\n\t *\n\t * This can take a while to do, so we try to do it only when needed - on mouseover\n\t */\n\t_copy_parent_actions: function()\n\t{\n\t\t// Copy actions set in parent\n\t\tif(!this.options.readonly && !this._parent.options.readonly)\n\t\t{\n\t\t\tvar action_parent = this;\n\t\t\twhile(action_parent != null && !action_parent.options.actions &&\n\t\t\t\t!action_parent.instanceOf(et2_container)\n\t\t\t)\n\t\t\t{\n\t\t\t\taction_parent = action_parent.getParent();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis._link_actions(action_parent.options.actions||{});\n\t\t\t\tthis._need_actions_linked = false;\n\t\t\t} catch (e) {\n\t\t\t\t// something went wrong, but keep quiet about it\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Link the actions to the DOM nodes / widget bits.\n\t *\n\t * @param {object} actions {ID: {attributes..}+} map of egw action information\n\t */\n\t_link_actions: function(actions)\n\t{\n\t\tif(!this._actionObject)\n\t\t{\n\t\t\t// Get the top level element - timegrid or so\n\t\t\tvar objectManager = this.getParent()._actionObject || this.getParent().getParent()._actionObject ||\n\t\t\t   egw_getAppObjectManager(true).getObjectById(this._parent._parent._parent.id) || egw_getAppObjectManager(true);\n\t\t\tthis._actionObject = objectManager.getObjectById('calendar::'+this.options.value.row_id);\n\t\t}\n\n\t\tif (this._actionObject == null) {\n\t\t\t// Add a new container to the object manager which will hold the widget\n\t\t\t// objects\n\t\t\tthis._actionObject = objectManager.insertObject(false, new egwActionObject(\n\t\t\t\t'calendar::'+this.options.value.row_id, objectManager, new et2_event_action_object_impl(this,this.getDOMNode()),\n\t\t\t\tthis._actionManager || objectManager.manager.getActionById('calendar::'+this.options.value.row_id) || objectManager.manager\n\t\t\t));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._actionObject.setAOI(new et2_event_action_object_impl(this, this.getDOMNode()));\n\t\t}\n\n\t\t// Delete all old objects\n\t\tthis._actionObject.clear();\n\t\tthis._actionObject.unregisterActions();\n\n\t\t// Go over the widget & add links - this is where we decide which actions are\n\t\t// 'allowed' for this widget at this time\n\t\tvar action_links = this._get_action_links(actions);\n\t\taction_links.push('egw_link_drag');\n\t\taction_links.push('egw_link_drop');\n\t\tif(this._actionObject.parent.getActionLink('invite'))\n\t\t{\n\t\t\taction_links.push('invite');\n\t\t}\n\t\tthis._actionObject.updateActionLinks(action_links);\n\t},\n\n\t/**\n\t * Code for implementing et2_IDetachedDOM\n\t *\n\t * @param {array} _attrs array to add further attributes to\n\t */\n\tgetDetachedAttributes: function(_attrs) {\n\n\t},\n\n\tgetDetachedNodes: function() {\n\t\treturn [this.getDOMNode()];\n\t},\n\n\tsetDetachedAttributes: function(_nodes, _values) {\n\n\t},\n});}).call(this);\net2_register_widget(et2_calendar_event, [\"calendar-event\"]);\n\n// Static class stuff\n/**\n * Check event owner against a parent object\n *\n * As an event is edited, its participants may change.  Also, as the state\n * changes we may change which events are displayed and show the same event\n * in several places for different users.  Here we check the event participants\n * against an owner value (which may be an array) to see if the event should be\n * displayed or included.\n *\n * @param {Object} event - Event information\n * @param {et2_widget_daycol|et2_widget_planner_row} parent - potential parent object\n *\tthat has an owner option\n * @param {boolean} owner_too - Include the event owner in consideration, or only\n *\tevent participants\n *\n * @return {boolean} Should the event be displayed\n */\net2_calendar_event.owner_check = function owner_check(event, parent, owner_too)\n{\n\tvar owner_match = true;\n\tif(typeof owner_too === 'undefined' && app.calendar.state.status_filter)\n\t{\n\t\towner_too = app.calendar.state.status_filter === 'owner';\n\t}\n\tvar options = false;\n\tif(app.calendar && app.calendar.sidebox_et2 && app.calendar.sidebox_et2.getWidgetById('owner'))\n\t{\n\t\toptions = app.calendar.sidebox_et2.getWidgetById('owner').taglist.getSelection();\n\t}\n\telse\n\t{\n\t\toptions = parent.getArrayMgr(\"sel_options\").getRoot().getEntry('owner');\n\t}\n\tif(event.participants && typeof parent.options.owner != 'undefined' && parent.options.owner.length > 0)\n\t{\n\t\tvar parent_owner = jQuery.extend([], typeof parent.options.owner !== 'object' ?\n\t\t\t[parent.options.owner] :\n\t\t\tparent.options.owner);\n\t\towner_match = false;\n\t\tvar length = parent_owner.length;\n\t\tfor(var i = 0; i < length; i++ )\n\t\t{\n\t\t\t// Handle grouped resources like mailing lists, they won't match so\n\t\t\t// we need the list - pull it from sidebox owner\n\t\t\tif(isNaN(parent_owner[i]) && options && options.find)\n\t\t\t{\n\t\t\t\tvar resource = options.find(function(element) {return element.id == parent_owner[i];}) || {};\n\t\t\t\tif(resource && resource.resources)\n\t\t\t\t{\n\t\t\t\t\tparent_owner.splice(i,1);\n\t\t\t\t\tparent_owner = parent_owner.concat(resource.resources);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parseInt(parent_owner[i]) < 0)\n\t\t\t{\n\t\t\t\t// Add in groups, if we can get them (this is syncronous)\n\t\t\t\tegw.accountData(parent_owner[i],'account_id',true,function(members) {\n\t\t\t\t\tparent_owner = parent_owner.concat(Object.keys(members));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tvar participants = jQuery.extend([],Object.keys(event.participants));\n\t\tfor(var i = 0; i < participants.length; i++ )\n\t\t{\n\t\t\tvar id = participants[i];\n\t\t\t// Expand group invitations\n\t\t\tif (parseInt(id) < 0)\n\t\t\t{\n\t\t\t\t// Add in groups, if we can get them (this is syncronous)\n\t\t\t\tegw.accountData(id,'account_id',true,function(members) {\n\t\t\t\t\tparticipants = participants.concat(Object.keys(members));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif(parent.options.owner == id ||\n\t\t\t\tparent_owner.indexOf &&\n\t\t\t\tparent_owner.indexOf(id) >= 0)\n\t\t\t{\n\t\t\t\towner_match = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(owner_too && !owner_match)\n\t{\n\t\towner_match = (parent.options.owner == event.owner ||\n\t\t\tparent_owner.indexOf &&\n\t\t\tparent_owner.indexOf(event.owner) >= 0);\n\t}\n\treturn owner_match;\n};\n\n/**\n * @callback et2_calendar_event~prompt_callback\n * @param {string} button_id - One of ok, exception, series, single or cancel\n *\tdepending on which buttons are on the prompt\n * @param {Object} event_data - Event information - whatever you passed in to\n *\tthe prompt.\n */\n/**\n * Recur prompt\n * If the event is recurring, asks the user if they want to edit the event as\n * an exception, or change the whole series.  Then the callback is called.\n *\n * If callback is not provided, egw.open() will be used to open an edit dialog.\n *\n * If you call this on a single (non-recurring) event, the callback will be\n * executed immediately, with the passed button_id as 'single'.\n *\n * @param {Object} event_data - Event information\n * @param {string} event_data.id - Unique ID for the event, possibly with a\n *\ttimestamp\n * @param {string|Date} event_data.start - Start date/time for the event\n * @param {number} event_data.recur_type - Recur type, or 0 for a non-recurring event\n * @param {et2_calendar_event~prompt_callback} [callback] - Callback is\n *\tcalled with the button (exception, series, single or cancel) and the event\n *\tdata.\n * @param {Object} [extra_data] - Additional data passed to the callback, used\n *\tas extra parameters for default callback\n *\n * @augments {et2_calendar_event}\n */\net2_calendar_event.recur_prompt = function(event_data, callback, extra_data)\n{\n\tvar edit_id = event_data.app_id;\n\tvar edit_date = event_data.start;\n\n\t// seems window.opener somehow in certian conditions could be from different origin\n\t// we try to catch the exception and in this case retrive the egw object from current window.\n\ttry {\n\t\tvar egw = this.egw ? (typeof this.egw == 'function' ? this.egw() : this.egw) : window.opener && typeof window.opener.egw != 'undefined' ? window.opener.egw('calendar'):window.egw('calendar');\n\t}\n\tcatch(e){\n\t\tvar egw = window.egw('calendar');\n\t}\n\n\tvar that = this;\n\n\tvar extra_params = extra_data && typeof extra_data == 'object' ? extra_data : {};\n\textra_params.date = edit_date.toJSON ? edit_date.toJSON() : edit_date;\n\tif(typeof callback != 'function')\n\t{\n\t\tcallback = function(_button_id)\n\t\t{\n\t\t\tswitch(_button_id)\n\t\t\t{\n\t\t\t\tcase 'exception':\n\t\t\t\t\textra_params.exception = '1';\n\t\t\t\t\tegw.open(edit_id, event_data.app||'calendar', 'edit', extra_params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'series':\n\t\t\t\tcase 'single':\n\t\t\t\t\tegw.open(edit_id, event_data.app||'calendar', 'edit', extra_params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cancel':\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\tif(parseInt(event_data.recur_type))\n\t{\n\t\tvar buttons = [\n\t\t\t{text: egw.lang(\"Edit exception\"), id: \"exception\", class: \"ui-priority-primary\", \"default\": true},\n\t\t\t{text: egw.lang(\"Edit series\"), id:\"series\"},\n\t\t\t{text: egw.lang(\"Cancel\"), id:\"cancel\"}\n\t\t];\n\t\tet2_dialog.show_dialog(\n\t\t\tfunction(button_id) {callback.call(that, button_id, event_data);},\n\t\t\t(!event_data.is_private ? event_data['title'] : egw.lang('private')) + \"\\n\" +\n\t\t\tegw.lang(\"Do you want to edit this event as an exception or the whole series?\"),\n\t\t\tegw.lang(\"This event is part of a series\"), {}, buttons, et2_dialog.QUESTION_MESSAGE\n\t\t);\n\t}\n\telse\n\t{\n\t\tcallback.call(this,'single',event_data);\n\t}\n};\n\n/**\n * Split series prompt\n *\n * If the event is recurring and the user adjusts the time or duration, we may need\n * to split the series, ending the current one and creating a new one with the changes.\n * This prompts the user if they really want to do that.\n *\n * There is no default callback, and nothing happens if you call this on a\n * single (non-recurring) event\n *\n * @param {Object} event_data - Event information\n * @param {string} event_data.id - Unique ID for the event, possibly with a timestamp\n * @param {string|Date} instance_date - The date of the edited instance of the event\n * @param {et2_calendar_event~prompt_callback} callback - Callback is\n *\tcalled with the button (ok or cancel) and the event data.\n * @augments {et2_calendar_event}\n */\net2_calendar_event.series_split_prompt = function(event_data, instance_date, callback)\n{\n\t// seems window.opener somehow in certian conditions could be from different origin\n\t// we try to catch the exception and in this case retrive the egw object from current window.\n\ttry {\n\t\tvar egw = this.egw ? (typeof this.egw == 'function' ? this.egw() : this.egw) : window.opener && typeof window.opener.egw != 'undefined' ? window.opener.egw('calendar'):window.egw('calendar');\n\t}\n\tcatch(e){\n\t\tvar egw = window.egw('calendar');\n\t}\n\n\tvar that = this;\n\n\tif(typeof instance_date == 'string')\n\t{\n\t\tinstance_date = new Date(instance_date);\n\t}\n\n\t// Check for modifying a series that started before today\n\tvar tempDate = new Date();\n\tvar today = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate(),tempDate.getHours(),-tempDate.getTimezoneOffset(),tempDate.getSeconds());\n\tvar termination_date = instance_date < today ? egw.lang('today') : date(egw.preference('dateformat'),instance_date);\n\n\tif(parseInt(event_data.recur_type))\n\t{\n\t\tet2_dialog.show_dialog(\n\t\t\tfunction(button_id) {callback.call(that, button_id, event_data);},\n\t\t\t(!event_data.is_private ? event_data['title'] : egw.lang('private')) + \"\\n\" +\n\t\t\tegw.lang(\"Do you really want to change the start of this series? If you do, the original series will be terminated as of %1 and a new series for the future reflecting your changes will be created.\", termination_date),\n\t\t\tegw.lang(\"This event is part of a series\"), {}, et2_dialog.BUTTONS_OK_CANCEL , et2_dialog.WARNING_MESSAGE\n\t\t);\n\t}\n};\n\net2_calendar_event.drag_helper = function(event,ui) {\n\tui.helper.width(ui.width());\n};\n/**\n* splits the combined status, quantity and role\n*\n* @param {string} status - combined value, O: status letter: U, T, A, R\n* @param {int} [quantity] - quantity\n* @param {string} [role]\n* @return string status U, T, A or R, same as $status parameter on return\n*/\net2_calendar_event.split_status = function(status,quantity,role)\n{\n\tquantity = 1;\n\trole = 'REQ-PARTICIPANT';\n\t//error_log(__METHOD__.__LINE__.array2string($status));\n\tvar matches = null;\n\tif (typeof status === 'string' && status.length > 1)\n\t{\n\t\tmatches = status.match(/^.([0-9]*)(.*)$/gi);\n\t}\n\tif(matches)\n\t{\n\t\tif (parseInt(matches[1]) > 0) quantity = parseInt(matches[1]);\n\t\tif (matches[2]) role = matches[2];\n\t\tstatus = status[0];\n\t}\n\telse if (status === true)\n\t{\n\t\tstatus = 'U';\n\t}\n\treturn status;\n}\n\n/**\n * The egw_action system requires an egwActionObjectInterface Interface implementation\n * to tie actions to DOM nodes.  I'm not sure if we need this.\n *\n * The class extension is different than the widgets\n *\n * @param {et2_DOMWidget} widget\n * @param {Object} node\n *\n */\nfunction et2_event_action_object_impl(widget, node)\n{\n\tvar aoi = new et2_action_object_impl(widget, node);\n\n// _outerCall may be used to determine, whether the state change has been\n// evoked from the outside and the stateChangeCallback has to be called\n// or not.\n\taoi.doSetState = function(_state, _outerCall) {\n\t};\n\n\treturn aoi;\n};\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE overlay PUBLIC \"-//EGroupware GmbH//eTemplate 2//EN\" \"http://www.egroupware.org/etemplate2.dtd\">\n<!-- $Id$ -->\n<overlay>\n\t<template id=\"calendar.conflicts\" template=\"\" lang=\"\" group=\"0\" version=\"1.0.1.001\">\n\t\t<description value=\"Scheduling conflict\" class=\"calendar_size120b\"/>\n\t\t<box class=\"calendar_conflicts\">\n\t\t\t<grid>\n\t\t\t\t<columns>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t\t<column/>\n\t\t\t\t</columns>\n\t\t\t\t<rows>\n\t\t\t\t\t<row valign=\"top\">\n\t\t\t\t\t\t<image src=\"conflicts[$row][icon_participants]\" statustext_html=\"true\" statustext=\"@conflicts[$row][tooltip_participants]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<image src=\"conflicts[$row][icon_recur]\" label=\"@conflicts[$row][text_recur]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<description id=\"conflicts[$row][time]\" no_lang=\"1\"/>\n\t\t\t\t\t\t<vbox statustext=\"conflict[$row][tooltip]\" statustext_html=\"true\" orient=\",0,0\">\n\t\t\t\t\t\t\t<description id=\"conflicts[$row][title]\" no_lang=\"1\" options=\"b\"/>\n\t\t\t\t\t\t\t<description id=\"conflicts[$row][conflicting_participants]\" no_lang=\"1\"/>\n\t\t\t\t\t\t</vbox>\n\t\t\t\t\t</row>\n\t\t\t\t</rows>\n\t\t\t</grid>\n\t\t</box>\n\t\t<hbox>\n\t\t\t<button label=\"Ignore conflict\" id=\"button[ignore]\" statustext=\"Saves the event ignoring the conflict\"/>\n\t\t\t<button id=\"button[reedit]\" label=\"Re-Edit event\" statustext=\"Allows to edit the event again\"/>\n\t\t\t<button label=\"Freetime search\" id=\"button[freetime]\" statustext=\"Find free timeslots where the selected participants are availible for the given timespan\"/>\n\t\t</hbox>\n\t</template>\n</overlay>\n"], "filenames": ["api/js/etemplate/et2_core_baseWidget.js", "api/js/jsapi/egw_tooltip.js", "calendar/js/et2_widget_event.js", "calendar/templates/default/conflicts.xet"], "buggy_code_start_loc": [34, 109, 81, 17], "buggy_code_end_loc": [281, 167, 918, 21], "fixing_code_start_loc": [35, 109, 82, 17], "fixing_code_end_loc": [287, 175, 919, 21], "type": "CWE-79", "message": "Stored XSS vulnerability in eGroupware Community Edition before 16.1.20170922 allows an unauthenticated remote attacker to inject JavaScript via the User-Agent HTTP header, which is mishandled during rendering by the application administrator.", "other": {"cve": {"id": "CVE-2017-14920", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-30T01:29:01.867", "lastModified": "2017-10-05T18:17:15.333", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS vulnerability in eGroupware Community Edition before 16.1.20170922 allows an unauthenticated remote attacker to inject JavaScript via the User-Agent HTTP header, which is mishandled during rendering by the application administrator."}, {"lang": "es", "value": "Una vulnerabilidad de Cross-Site Scripting (XSS) persistente en las versiones anteriores a 16.1.20170922 de eGroupware Community Edition permite que un atacante remoto sin autenticar inyecte c\u00f3digo JavaScript mediante la cabecera HTTP User-Agent, la cual no se gestiona correctamente durante el renderizado por parte del administrador de la aplicaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:egroupware:egroupware:*:*:*:*:community:*:*:*", "versionEndIncluding": "16.1.20170703", "matchCriteriaId": "D9A5A866-ADA0-41C9-A509-057CB2FAC05B"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/09/28/12", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Third Party Advisory", "Patch"]}, {"url": "https://github.com/EGroupware/egroupware/commit/0ececf8c78f1c3f9ba15465f53a682dd7d89529f", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/EGroupware/egroupware/commit/0ececf8c78f1c3f9ba15465f53a682dd7d89529f"}}