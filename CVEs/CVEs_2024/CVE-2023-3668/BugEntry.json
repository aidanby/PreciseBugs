{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\nif ($userinfo['change_serversettings'] == '1') {\n\tif ($action == 'setconfigured') {\n\t\tSettings::Set('panel.is_configured', '1', true);\n\t\tResponse::redirectTo('admin_configfiles.php');\n\t}\n\n\t// get distro from URL param\n\t$distribution = Request::any('distribution');\n\t$reselect = Request::any('reselect', 0);\n\n\t// check for possible setting\n\tif (empty($distribution)) {\n\t\t$distribution = Settings::Get('system.distribution') ?? \"\";\n\t}\n\tif ($reselect == 1) {\n\t\t$distribution = '';\n\t}\n\n\t$distributions_select = [];\n\n\t$services = [];\n\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\n\tif (!empty($distribution)) {\n\t\tif (!file_exists($config_dir . '/' . $distribution . \".xml\")) {\n\t\t\tResponse::dynamicError(\"Unknown distribution\");\n\t\t}\n\n\t\t// update setting if different\n\t\tif ($distribution != Settings::Get('system.distribution')) {\n\t\t\tSettings::Set('system.distribution', $distribution);\n\t\t}\n\n\t\t// create configparser object\n\t\t$configfiles = new ConfigParser($config_dir . '/' . $distribution . \".xml\");\n\n\t\t// get distro-info\n\t\t$dist_display = $configfiles->getCompleteDistroName();\n\n\t\t// get all the services from the distro\n\t\t$services = $configfiles->getServices();\n\t} else {\n\t\t// show list of available distro's\n\t\t$distros = glob($config_dir . '*.xml');\n\t\t// read in all the distros\n\t\tforeach ($distros as $_distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($_distribution);\n\t\t\t// store in tmp array\n\t\t\t$distributions_select[str_replace(\".xml\", \"\", strtolower(basename($_distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\n\t\t// sort by distribution name\n\t\tasort($distributions_select);\n\t}\n\n\tif ($distribution != \"\" && isset($_POST['finish'])) {\n\t\tunset($_POST['finish']);\n\t\tunset($_POST['csrf_token']);\n\t\t$params = $_POST;\n\t\t$params['distro'] = $distribution;\n\t\t$params['system'] = [];\n\t\tforeach ($_POST['system'] as $sysdaemon) {\n\t\t\t$params['system'][] = $sysdaemon;\n\t\t}\n\t\t$params_content = json_encode($params);\n\t\t$params_filename = FileDir::makeCorrectFile(Froxlor::getInstallDir() . 'install/' . Froxlor::genSessionId() . '.json');\n\t\tfile_put_contents($params_filename, $params_content);\n\n\t\tUI::twigBuffer('settings/configuration-final.html.twig', [\n\t\t\t'distribution' => $distribution,\n\t\t\t// alert\n\t\t\t'type' => 'info',\n\t\t\t'alert_msg' => lng('admin.configfiles.finishnote'),\n\t\t\t'basedir' => Froxlor::getInstallDir(),\n\t\t\t'params_filename' => $params_filename\n\t\t]);\n\t} else {\n\t\tif (!empty($distribution)) {\n\t\t\t// show available services to configure\n\t\t\t$fields = $services;\n\t\t\t$link_params = ['section' => 'configfiles', 'distribution' => $distribution];\n\t\t\tUI::twigBuffer('settings/configuration.html.twig', [\n\t\t\t\t'action' => $linker->getLink($link_params),\n\t\t\t\t'fields' => $fields,\n\t\t\t\t'distribution' => $distribution\n\t\t\t]);\n\t\t} else {\n\t\t\t$cfg_formfield = [\n\t\t\t\t'config' => [\n\t\t\t\t\t'title' => lng('admin.configfiles.serverconfiguration'),\n\t\t\t\t\t'image' => 'fa-solid fa-wrench',\n\t\t\t\t\t'description' => lng('admin.configfiles.description'),\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_config' => [\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'distribution' => [\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $distributions_select,\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.configfiles.distribution'),\n\t\t\t\t\t\t\t\t\t'selected' => Settings::Get('system.distribution') ?? ''\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t'buttons' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\n\t\t\tUI::twigBuffer('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'configfiles']),\n\t\t\t\t'formdata' => $cfg_formfield['config'],\n\t\t\t\t'actions_links' => (int)Settings::Get('panel.is_configured') == 0 ? [\n\t\t\t\t\t[\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'configfiles',\n\t\t\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t\t\t'action' => 'setconfigured'\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.ihave_configured'),\n\t\t\t\t\t\t'class' => 'btn-outline-warning',\n\t\t\t\t\t\t'icon' => 'fa-solid fa-circle-check'\n\t\t\t\t\t]\n\t\t\t\t] : [],\n\t\t\t\t// alert\n\t\t\t\t'type' => 'warning',\n\t\t\t\t'alert_msg' => lng('panel.settings_before_configuration') . ((int)Settings::Get('panel.is_configured') == 1 ? '<br><br>' . lng('panel.system_is_configured') : '')\n\t\t\t]);\n\t\t}\n\t}\n\n\tUI::twigOutputBuffer();\n} else {\n\tResponse::redirectTo('admin_index.php');\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\nif ($userinfo['change_serversettings'] == '1') {\n\tif ($action == 'setconfigured') {\n\t\tSettings::Set('panel.is_configured', '1', true);\n\t\tResponse::redirectTo('admin_configfiles.php');\n\t}\n\n\t// get distro from URL param\n\t$distribution = Request::any('distribution');\n\t$reselect = Request::any('reselect', 0);\n\n\t// check for possible setting\n\tif (empty($distribution)) {\n\t\t$distribution = Settings::Get('system.distribution') ?? \"\";\n\t}\n\tif ($reselect == 1) {\n\t\t$distribution = '';\n\t}\n\n\t$distributions_select = [];\n\n\t$services = [];\n\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\n\tif (!empty($distribution)) {\n\t\tif (!file_exists($config_dir . '/' . $distribution . \".xml\")) {\n\t\t\tResponse::dynamicError(\"Unknown distribution\");\n\t\t}\n\n\t\t// update setting if different\n\t\tif ($distribution != Settings::Get('system.distribution')) {\n\t\t\tSettings::Set('system.distribution', $distribution);\n\t\t}\n\n\t\t// create configparser object\n\t\t$configfiles = new ConfigParser($config_dir . '/' . $distribution . \".xml\");\n\n\t\t// get distro-info\n\t\t$dist_display = $configfiles->getCompleteDistroName();\n\n\t\t// get all the services from the distro\n\t\t$services = $configfiles->getServices();\n\t} else {\n\t\t// show list of available distro's\n\t\t$distros = glob($config_dir . '*.xml');\n\t\t// read in all the distros\n\t\tforeach ($distros as $_distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($_distribution);\n\t\t\t// store in tmp array\n\t\t\t$distributions_select[str_replace(\".xml\", \"\", strtolower(basename($_distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\n\t\t// sort by distribution name\n\t\tasort($distributions_select);\n\t}\n\n\tif ($distribution != \"\" && isset($_POST['finish'])) {\n\t\t$valid_keys = ['http', 'dns', 'smtp', 'mail', 'ftp', 'system', 'distro'];\n\t\tunset($_POST['finish']);\n\t\tunset($_POST['csrf_token']);\n\t\t$params = $_POST;\n\t\t$params['distro'] = $distribution;\n\t\t$params['system'] = [];\n\t\tforeach ($_POST['system'] as $sysdaemon) {\n\t\t\t$params['system'][] = $sysdaemon;\n\t\t}\n\t\t// validate params\n\t\tforeach ($params as $key => $value) {\n\t\t\tif (!in_array($key, $valid_keys)) {\n\t\t\t\tunset($params[$key]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!is_array($value)) {\n\t\t\t\t$params[$key] = Validate::validate($value, $key);\n\t\t\t} else {\n\t\t\t\tforeach ($value as $subkey => $subvalue) {\n\t\t\t\t\t$params[$key][$subkey] = Validate::validate($subvalue, $key.'.'.$subkey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$params_content = json_encode($params);\n\t\t$params_filename = FileDir::makeCorrectFile(Froxlor::getInstallDir() . 'install/' . Froxlor::genSessionId() . '.json');\n\t\tfile_put_contents($params_filename, $params_content);\n\n\t\tUI::twigBuffer('settings/configuration-final.html.twig', [\n\t\t\t'distribution' => $distribution,\n\t\t\t// alert\n\t\t\t'type' => 'info',\n\t\t\t'alert_msg' => lng('admin.configfiles.finishnote'),\n\t\t\t'basedir' => Froxlor::getInstallDir(),\n\t\t\t'params_filename' => $params_filename\n\t\t]);\n\t} else {\n\t\tif (!empty($distribution)) {\n\t\t\t// show available services to configure\n\t\t\t$fields = $services;\n\t\t\t$link_params = ['section' => 'configfiles', 'distribution' => $distribution];\n\t\t\tUI::twigBuffer('settings/configuration.html.twig', [\n\t\t\t\t'action' => $linker->getLink($link_params),\n\t\t\t\t'fields' => $fields,\n\t\t\t\t'distribution' => $distribution\n\t\t\t]);\n\t\t} else {\n\t\t\t$cfg_formfield = [\n\t\t\t\t'config' => [\n\t\t\t\t\t'title' => lng('admin.configfiles.serverconfiguration'),\n\t\t\t\t\t'image' => 'fa-solid fa-wrench',\n\t\t\t\t\t'description' => lng('admin.configfiles.description'),\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_config' => [\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'distribution' => [\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $distributions_select,\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.configfiles.distribution'),\n\t\t\t\t\t\t\t\t\t'selected' => Settings::Get('system.distribution') ?? ''\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t'buttons' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\n\t\t\tUI::twigBuffer('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'configfiles']),\n\t\t\t\t'formdata' => $cfg_formfield['config'],\n\t\t\t\t'actions_links' => (int)Settings::Get('panel.is_configured') == 0 ? [\n\t\t\t\t\t[\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'configfiles',\n\t\t\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t\t\t'action' => 'setconfigured'\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.ihave_configured'),\n\t\t\t\t\t\t'class' => 'btn-outline-warning',\n\t\t\t\t\t\t'icon' => 'fa-solid fa-circle-check'\n\t\t\t\t\t]\n\t\t\t\t] : [],\n\t\t\t\t// alert\n\t\t\t\t'type' => 'warning',\n\t\t\t\t'alert_msg' => lng('panel.settings_before_configuration') . ((int)Settings::Get('panel.is_configured') == 1 ? '<br><br>' . lng('panel.system_is_configured') : '')\n\t\t\t]);\n\t\t}\n\t}\n\n\tUI::twigOutputBuffer();\n} else {\n\tResponse::redirectTo('admin_index.php');\n}\n"], "filenames": ["admin_configfiles.php"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [100], "fixing_code_start_loc": [36], "fixing_code_end_loc": [117], "type": "CWE-116", "message": "Improper Encoding or Escaping of Output in GitHub repository froxlor/froxlor prior to 2.0.21.", "other": {"cve": {"id": "CVE-2023-3668", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-14T01:15:08.763", "lastModified": "2023-07-27T12:17:44.780", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Encoding or Escaping of Output in GitHub repository froxlor/froxlor prior to 2.0.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.21", "matchCriteriaId": "A014E71B-9FB8-4832-B008-67E2F7743883"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/03b5a921ff308eeab21bf9d240f27783c8591965", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/df8cccf4-a340-440e-a7e0-1b42e757d66e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/03b5a921ff308eeab21bf9d240f27783c8591965"}}