{"buggy_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Mail\\Service;\n\nuse Shopware\\Core\\DevOps\\Environment\\EnvironmentHelper;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Mailer\\Transport;\nuse Symfony\\Component\\Mailer\\Transport\\Dsn;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransport;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\n\nclass MailerTransportFactory extends Transport\n{\n    private SystemConfigService $configService;\n\n    public function __construct(iterable $factories, SystemConfigService $configService)\n    {\n        parent::__construct($factories);\n        $this->configService = $configService;\n    }\n\n    public function fromString(string $dsn): TransportInterface\n    {\n        return $this->create();\n    }\n\n    public function create(?SystemConfigService $configService = null): TransportInterface\n    {\n        if ($configService === null) {\n            $configService = $this->configService;\n        }\n\n        $emailAgent = $configService->getString('core.mailerSettings.emailAgent');\n\n        if ($emailAgent === '') {\n            $mailerUrl = (string) EnvironmentHelper::getVariable('MAILER_URL', '');\n            if ($mailerUrl !== '') {\n                try {\n                    return parent::fromString($mailerUrl);\n                } catch (\\Throwable $e) {\n                    // Mailer Url not valid. Use standard sendmail\n                }\n            }\n            $dsn = new Dsn(\n                'sendmail',\n                'default'\n            );\n\n            return $this->fromDsnObject($dsn);\n        }\n\n        switch ($emailAgent) {\n            case 'smtp':\n                return $this->createSmtpTransport($configService);\n            case 'local':\n                return new SendmailTransport('/usr/sbin/sendmail ' . ($configService->getString('core.mailerSettings.sendMailOptions') ?: '-bs'));\n            default:\n                throw new \\RuntimeException(sprintf('Invalid mail agent given \"%s\"', $emailAgent));\n        }\n    }\n\n    protected function createSmtpTransport(SystemConfigService $configService): TransportInterface\n    {\n        $dsn = new Dsn(\n            $this->getEncryption($configService) === 'ssl' ? 'smtps' : 'smtp',\n            $configService->getString('core.mailerSettings.host'),\n            $configService->getString('core.mailerSettings.username'),\n            $configService->getString('core.mailerSettings.password'),\n            $configService->getInt('core.mailerSettings.port'),\n            $this->getEncryption($configService) !== null ? [] : ['verify_peer' => 0]\n        );\n\n        return $this->fromDsnObject($dsn);\n    }\n\n    private function getEncryption(SystemConfigService $configService): ?string\n    {\n        $encryption = $configService->getString('core.mailerSettings.encryption');\n\n        switch ($encryption) {\n            case 'ssl':\n                return 'ssl';\n            case 'tls':\n                return 'tls';\n            default:\n                return null;\n        }\n    }\n}\n", "<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Test\\MailTemplate\\Service;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransport;\nuse Symfony\\Component\\Mailer\\Transport\\Smtp\\EsmtpTransport;\n\nclass MailerTransportFactoryTest extends TestCase\n{\n    use IntegrationTestBehaviour;\n\n    public function testFactoryWithoutConfig(): void\n    {\n        $original = new EsmtpTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        $before = $_SERVER['MAILER_URL'] ?? 'null://localhost';\n\n        $_SERVER['MAILER_URL'] = 'smtp://example.com:1025';\n\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => null,\n            ])\n        );\n\n        $_SERVER['MAILER_URL'] = $before;\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n\n    public function testFactoryWithLocal(): void\n    {\n        $original = new SendmailTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => 'local',\n                'core.mailerSettings.sendMailOptions' => null,\n            ])\n        );\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n\n    public function testFactoryWithConfig(): void\n    {\n        $original = new EsmtpTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        /** @var EsmtpTransport $mailer */\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => 'smtp',\n                'core.mailerSettings.host' => 'localhost',\n                'core.mailerSettings.port' => '225',\n                'core.mailerSettings.username' => 'root',\n                'core.mailerSettings.password' => 'root',\n                'core.mailerSettings.encryption' => 'ssl',\n                'core.mailerSettings.authenticationMethod' => 'cram-md5',\n            ])\n        );\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n}\n\nclass ConfigService extends SystemConfigService\n{\n    private $config;\n\n    public function __construct($config)\n    {\n        $this->config = $config;\n    }\n\n    public function get(string $key, ?string $salesChannelId = null)\n    {\n        return $this->config[$key];\n    }\n}\n"], "fixing_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Mail\\Service;\n\nuse Shopware\\Core\\DevOps\\Environment\\EnvironmentHelper;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Mailer\\Transport;\nuse Symfony\\Component\\Mailer\\Transport\\Dsn;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransport;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\n\nclass MailerTransportFactory extends Transport\n{\n    private SystemConfigService $configService;\n\n    public function __construct(iterable $factories, SystemConfigService $configService)\n    {\n        parent::__construct($factories);\n        $this->configService = $configService;\n    }\n\n    public function fromString(string $dsn): TransportInterface\n    {\n        return $this->create();\n    }\n\n    public function create(?SystemConfigService $configService = null): TransportInterface\n    {\n        if ($configService === null) {\n            $configService = $this->configService;\n        }\n\n        $emailAgent = $configService->getString('core.mailerSettings.emailAgent');\n\n        if ($emailAgent === '') {\n            $mailerUrl = (string) EnvironmentHelper::getVariable('MAILER_URL', '');\n            if ($mailerUrl !== '') {\n                try {\n                    return parent::fromString($mailerUrl);\n                } catch (\\Throwable $e) {\n                    // Mailer Url not valid. Use standard sendmail\n                }\n            }\n            $dsn = new Dsn(\n                'sendmail',\n                'default'\n            );\n\n            return $this->fromDsnObject($dsn);\n        }\n\n        switch ($emailAgent) {\n            case 'smtp':\n                return $this->createSmtpTransport($configService);\n            case 'local':\n                return new SendmailTransport($this->getSendMailCommandLineArgument($configService));\n            default:\n                throw new \\RuntimeException(sprintf('Invalid mail agent given \"%s\"', $emailAgent));\n        }\n    }\n\n    protected function createSmtpTransport(SystemConfigService $configService): TransportInterface\n    {\n        $dsn = new Dsn(\n            $this->getEncryption($configService) === 'ssl' ? 'smtps' : 'smtp',\n            $configService->getString('core.mailerSettings.host'),\n            $configService->getString('core.mailerSettings.username'),\n            $configService->getString('core.mailerSettings.password'),\n            $configService->getInt('core.mailerSettings.port'),\n            $this->getEncryption($configService) !== null ? [] : ['verify_peer' => 0]\n        );\n\n        return $this->fromDsnObject($dsn);\n    }\n\n    private function getEncryption(SystemConfigService $configService): ?string\n    {\n        $encryption = $configService->getString('core.mailerSettings.encryption');\n\n        switch ($encryption) {\n            case 'ssl':\n                return 'ssl';\n            case 'tls':\n                return 'tls';\n            default:\n                return null;\n        }\n    }\n\n    private function getSendMailCommandLineArgument(SystemConfigService $configService): string\n    {\n        $command = '/usr/sbin/sendmail ';\n\n        $option = $configService->getString('core.mailerSettings.sendMailOptions');\n\n        if ($option === '') {\n            $option = '-t';\n        }\n\n        if ($option !== '-bs' && $option !== '-t') {\n            throw new \\RuntimeException(sprintf('Given sendmail option \"%s\" is invalid', $option));\n        }\n\n        return $command . $option;\n    }\n}\n", "<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Test\\MailTemplate\\Service;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransport;\nuse Symfony\\Component\\Mailer\\Transport\\Smtp\\EsmtpTransport;\n\nclass MailerTransportFactoryTest extends TestCase\n{\n    use IntegrationTestBehaviour;\n\n    public function testFactoryWithoutConfig(): void\n    {\n        $original = new EsmtpTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        $before = $_SERVER['MAILER_URL'] ?? 'null://localhost';\n\n        $_SERVER['MAILER_URL'] = 'smtp://example.com:1025';\n\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => null,\n            ])\n        );\n\n        $_SERVER['MAILER_URL'] = $before;\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n\n    public function testFactoryWithLocal(): void\n    {\n        $original = new SendmailTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => 'local',\n                'core.mailerSettings.sendMailOptions' => null,\n            ])\n        );\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n\n    public function testFactoryWithConfig(): void\n    {\n        $original = new EsmtpTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        /** @var EsmtpTransport $mailer */\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => 'smtp',\n                'core.mailerSettings.host' => 'localhost',\n                'core.mailerSettings.port' => '225',\n                'core.mailerSettings.username' => 'root',\n                'core.mailerSettings.password' => 'root',\n                'core.mailerSettings.encryption' => 'ssl',\n                'core.mailerSettings.authenticationMethod' => 'cram-md5',\n            ])\n        );\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n\n    public function testFactoryWithLocalAndInvalidConfig(): void\n    {\n        $original = new SendmailTransport();\n\n        $factory = $this->getContainer()->get('mailer.transport_factory');\n\n        static::expectException(\\RuntimeException::class);\n        static::expectExceptionMessage('Given sendmail option \"-t && echo bla\" is invalid');\n\n        $mailer = $factory->create(\n            new ConfigService([\n                'core.mailerSettings.emailAgent' => 'local',\n                'core.mailerSettings.sendMailOptions' => '-t && echo bla',\n            ])\n        );\n\n        static::assertEquals(\\get_class($original), \\get_class($mailer));\n    }\n}\n\nclass ConfigService extends SystemConfigService\n{\n    private $config;\n\n    public function __construct($config)\n    {\n        $this->config = $config;\n    }\n\n    public function get(string $key, ?string $salesChannelId = null)\n    {\n        return $this->config[$key];\n    }\n}\n"], "filenames": ["src/Core/Content/Mail/Service/MailerTransportFactory.php", "src/Core/Content/Test/MailTemplate/Service/MailerTransportFactoryTest.php"], "buggy_code_start_loc": [56, 72], "buggy_code_end_loc": [88, 72], "fixing_code_start_loc": [56, 73], "fixing_code_end_loc": [106, 92], "type": "CWE-78", "message": "Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a command injection vulnerability in mail agent settings. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.", "other": {"cve": {"id": "CVE-2021-37708", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-16T20:15:48.647", "lastModified": "2022-10-25T16:06:09.783", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a command injection vulnerability in mail agent settings. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin."}, {"lang": "es", "value": "Shopware es una plataforma de comercio electr\u00f3nico de c\u00f3digo abierto. Versiones anteriores a 6.4.3.1, contienen una vulnerabilidad de inyecci\u00f3n de comandos en la configuraci\u00f3n del agente de correo. Versi\u00f3n 6.4.3.1 contiene un parche. Como soluci\u00f3n para las versiones anteriores de 6.1, 6.2 y 6.3, las medidas de seguridad correspondientes tambi\u00e9n est\u00e1n disponibles por medio de un plugin."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.1.0", "versionEndExcluding": "6.4.3.1", "matchCriteriaId": "1F2C185B-D9D1-420C-8F6A-F22DEEFECD9E"}]}]}], "references": [{"url": "https://github.com/shopware/platform/commit/82d8d1995f6ce9054323b2c3522b1b3cf04853aa", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/platform/security/advisories/GHSA-xh55-2fqp-p775", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/platform/commit/82d8d1995f6ce9054323b2c3522b1b3cf04853aa"}}