{"buggy_code": ["/* -*- C++ -*-\n * Copyright 2019-2020 LibRaw LLC (info@libraw.org)\n *\n LibRaw uses code from dcraw.c -- Dave Coffin's raw photo decoder,\n dcraw.c is copyright 1997-2018 by Dave Coffin, dcoffin a cybercom o net.\n LibRaw do not use RESTRICTED code from dcraw.c\n\n LibRaw is free software; you can redistribute it and/or modify\n it under the terms of the one of two licenses as you choose:\n\n1. GNU LESSER GENERAL PUBLIC LICENSE version 2.1\n   (See file LICENSE.LGPL provided in LibRaw distribution archive for details).\n\n2. COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n   (See file LICENSE.CDDL provided in LibRaw distribution archive for details).\n\n */\n\n#include \"../../internal/dcraw_defs.h\"\n#include \"../../internal/libraw_cameraids.h\"\n\n// clang-format on\nstatic const struct\n{\n    const int CorpId;\n    const char *CorpName;\n} CorpTable[] = {\n    {LIBRAW_CAMERAMAKER_Agfa,           \"AgfaPhoto\"},\n    {LIBRAW_CAMERAMAKER_Apple,          \"Apple\"},\n    {LIBRAW_CAMERAMAKER_Broadcom,       \"Broadcom\"},\n    {LIBRAW_CAMERAMAKER_Canon,          \"Canon\"},\n    {LIBRAW_CAMERAMAKER_Casio,          \"Casio\"},\n    {LIBRAW_CAMERAMAKER_CINE,           \"CINE\"},\n    {LIBRAW_CAMERAMAKER_Epson,          \"Epson\"},\n    {LIBRAW_CAMERAMAKER_Fujifilm,       \"Fujifilm\"},\n    {LIBRAW_CAMERAMAKER_Mamiya,         \"Mamiya\"},\n    {LIBRAW_CAMERAMAKER_Motorola,       \"Motorola\"},\n    {LIBRAW_CAMERAMAKER_Kodak,          \"Kodak\"},\n    {LIBRAW_CAMERAMAKER_Konica,         \"Konica\"},\n    {LIBRAW_CAMERAMAKER_Minolta,        \"Minolta\"},\n    {LIBRAW_CAMERAMAKER_Leica,          \"Leica\"},\n    {LIBRAW_CAMERAMAKER_Nikon,          \"Nikon\"},\n    {LIBRAW_CAMERAMAKER_Nokia,          \"Nokia\"},\n    {LIBRAW_CAMERAMAKER_Olympus,        \"Olympus\"},\n    {LIBRAW_CAMERAMAKER_Ricoh,          \"Ricoh\"},\n    {LIBRAW_CAMERAMAKER_Pentax,         \"Pentax\"},\n    {LIBRAW_CAMERAMAKER_PhaseOne,       \"Phase One\"},\n    {LIBRAW_CAMERAMAKER_PhaseOne,       \"PhaseOne\"},\n    {LIBRAW_CAMERAMAKER_Samsung,        \"Samsung\"},\n    {LIBRAW_CAMERAMAKER_Sigma,          \"Sigma\"},\n    {LIBRAW_CAMERAMAKER_Sinar,          \"Sinar\"},\n    {LIBRAW_CAMERAMAKER_Sony,           \"Sony\"},\n    {LIBRAW_CAMERAMAKER_YI,             \"YI\"},\n    // add corp. names below\n    {LIBRAW_CAMERAMAKER_Alcatel,        \"Alcatel\"},\n    {LIBRAW_CAMERAMAKER_Aptina,         \"Aptina\"},\n    {LIBRAW_CAMERAMAKER_AVT,            \"AVT\"},\n    {LIBRAW_CAMERAMAKER_Baumer,         \"Baumer\"},\n    {LIBRAW_CAMERAMAKER_Clauss,         \"Clauss\"},\n    {LIBRAW_CAMERAMAKER_Contax,         \"Contax\"},\n    {LIBRAW_CAMERAMAKER_Creative,       \"Creative\"},\n    {LIBRAW_CAMERAMAKER_DJI,            \"DJI\"},\n    {LIBRAW_CAMERAMAKER_Foculus,        \"Foculus\"},\n    {LIBRAW_CAMERAMAKER_Generic,        \"Generic\"},\n    {LIBRAW_CAMERAMAKER_Gione,          \"Gione\"},\n    {LIBRAW_CAMERAMAKER_GITUP,          \"GITUP\"},\n    {LIBRAW_CAMERAMAKER_Hasselblad,     \"Hasselblad\"},\n    {LIBRAW_CAMERAMAKER_HTC,            \"HTC\"},\n    {LIBRAW_CAMERAMAKER_I_Mobile,       \"I_Mobile\"},\n    {LIBRAW_CAMERAMAKER_Imacon,         \"Imacon\"},\n    {LIBRAW_CAMERAMAKER_JK_Imaging,     \"JK Imaging\"}, // Kodak\n    {LIBRAW_CAMERAMAKER_Leaf,           \"Leaf\"},\n    {LIBRAW_CAMERAMAKER_Lenovo,         \"Lenovo\"},\n    {LIBRAW_CAMERAMAKER_LG,             \"LG\"},\n    {LIBRAW_CAMERAMAKER_Logitech,       \"Logitech\"},\n    {LIBRAW_CAMERAMAKER_Matrix,         \"Matrix\"},\n    {LIBRAW_CAMERAMAKER_Meizu,          \"Meizu\"},\n    {LIBRAW_CAMERAMAKER_Micron,         \"Micron\"},\n    {LIBRAW_CAMERAMAKER_NGM,            \"NGM\"},\n    {LIBRAW_CAMERAMAKER_OmniVison,      \"OmniVison\"},\n    {LIBRAW_CAMERAMAKER_Panasonic,      \"Panasonic\"},\n    {LIBRAW_CAMERAMAKER_Photron,        \"Photron\"},\n    {LIBRAW_CAMERAMAKER_Pixelink,       \"Pixelink\"},\n    {LIBRAW_CAMERAMAKER_Polaroid,       \"Polaroid\"},\n    {LIBRAW_CAMERAMAKER_Rollei,         \"Rollei\"},\n    {LIBRAW_CAMERAMAKER_RoverShot,      \"RoverShot\"},\n    {LIBRAW_CAMERAMAKER_SMaL,           \"SMaL\"},\n    {LIBRAW_CAMERAMAKER_ST_Micro,       \"ST Micro\"},\n    {LIBRAW_CAMERAMAKER_THL,            \"THL\"},\n    {LIBRAW_CAMERAMAKER_Xiaomi,         \"Xiaomi\"},\n    {LIBRAW_CAMERAMAKER_XIAOYI,         \"Xiayi\"},\n    {LIBRAW_CAMERAMAKER_Yuneec,         \"Yuneec\"},\n    {LIBRAW_CAMERAMAKER_DXO,            \"DxO\"},\n    {LIBRAW_CAMERAMAKER_RED,            \"Red\"},\n    {LIBRAW_CAMERAMAKER_PhotoControl,   \"Photo Control\"},\n    {LIBRAW_CAMERAMAKER_Google,         \"Google\"},\n    {LIBRAW_CAMERAMAKER_GoPro,          \"GoPro\"},\n    {LIBRAW_CAMERAMAKER_Parrot,         \"Parrot\"},\n    {LIBRAW_CAMERAMAKER_Zeiss,          \"Zeiss\"}\n};\n// clang-format on\n\nint LibRaw::setMakeFromIndex(unsigned makei)\n{\n\tif (makei <= LIBRAW_CAMERAMAKER_Unknown || makei >= LIBRAW_CAMERAMAKER_TheLastOne) return 0;\n\n\tfor (int i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n\t\tif ((unsigned)CorpTable[i].CorpId == makei)\n\t\t{\n\t\t\tstrcpy(normalized_make, CorpTable[i].CorpName);\n\t\t\tmaker_index = makei;\n\t\t\treturn 1;\n\t\t}\n\treturn 0;\n}\n\nconst char *LibRaw::cameramakeridx2maker(unsigned maker)\n{\n    for (int i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n        if((unsigned)CorpTable[i].CorpId == maker)\n            return CorpTable[i].CorpName;\n    return 0;\n}\n\n\nvoid LibRaw::fixupArri()\n{\n    struct alist_t\n    {\n        const char *a_model;\n        const char *a_software;\n        ushort a_width,a_height;\n        int a_black;\n        unsigned a_filters;\n        float a_aspect;\n    }\n    alist[] =\n    {\n        {\"ALEXA65\", \"Alexa65  XT\", 6560 ,3100, 256,0x49494949,1.f},\n\n        {\"ALEXALF\", \"Alexa LF Plus W\", 3840 ,2160, 256,0x49494949,1.0f },\n        {\"ALEXALF\", \"Alexa LF Plus W\", 4448 ,1856, 256,0x49494949,0.75f },\n        {\"ALEXALF\", \"Alexa LF Plus W\", 4448 ,3096, 256,0x49494949,1.f },\n\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 2880 ,1620, 256,0x61616161,.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 3168 ,1782, 256,0x61616161,0.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 3424 ,2202, 256,0x61616161,1.f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 2592 ,2160, 256,0x61616161,1.12f},\n\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2592 ,2160, 256,0x61616161,1.12f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2880 ,2160, 256,0x61616161,1.f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2880 ,1620, 256,0x61616161,0.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 3424 ,2202, 256,0x61616161,1.f},\n    };\n    for(int i = 0; i < int(sizeof(alist)/sizeof(alist[0])); i++)\n        if(!strncasecmp(model,alist[i].a_model,strlen(alist[i].a_model)) && software\n            && !strncasecmp(software,alist[i].a_software,strlen(alist[i].a_software))\n            && width == alist[i].a_width && height == alist[i].a_height)\n        {\n            filters = alist[i].a_filters;\n            black = alist[i].a_black;\n            pixel_aspect = alist[i].a_aspect;\n            strcpy(model,software);\n            software[0]=0;\n            return;\n        }\n}\n\n/*\n   Identify which camera created this file, and set global variables\n   accordingly.\n */\nvoid LibRaw::identify()\n{\n  // clang-format off\n  static const ushort canon[][11] = {\n      // raw_width, raw_height, left_margin, top_margin, width_decrement,\n      // height_decrement, mask01, mask03, mask11,\n\t  // mask13, CFA_filters.\n\t  { 1944, 1416, 0, 0, 48, 0 }, // 00 \"PowerShot Pro90 IS\"\n\t  { 2144, 1560, 4, 8, 52, 2, 0, 0, 0, 25 }, // 01 \"PowerShot S30\", \"PowerShot G1\"\n\t  { 2224, 1456, 48, 6, 0, 2 }, // 02 \"EOS D30\"\n\t  { 2376, 1728, 12, 6, 52, 2 }, // 03 \"PowerShot G2\", \"PowerShot S40\", \"PowerShot G3\", \"PowerShot S45\"\n\t  { 2672, 1968, 12, 6, 44, 2 }, // 04 \"PowerShot G5\", \"PowerShot S50\", \"PowerShot S60\"\n\t  { 3152, 2068, 64, 12, 0, 0, 16 }, // 05 \"EOS D60\", \"EOS 10D\", \"EOS 300D\"\n\t  { 3160, 2344, 44, 12, 4, 4 }, // 06 \"PowerShot G6\", \"PowerShot S70\"\n\t  { 3344, 2484, 4, 6, 52, 6 }, // 07 \"PowerShot Pro1\"\n\t  { 3516, 2328, 42, 14, 0, 0 }, // 08 \"EOS 350D\"\n\t  { 3596, 2360, 74, 12, 0, 0 }, // 09 \"EOS-1D Mark II\", \"EOS 20D\", \"EOS-1D Mark II N\", \"EOS 30D\"\n\t  { 3744, 2784, 52, 12, 8, 12 }, // 10 \"PowerShot G11\", \"PowerShot S90\", \"PowerShot G12\", \"PowerShot S95\"\n\t  { 3944, 2622, 30, 18, 6, 2 }, // 11 \"EOS 40D\"\n\t  { 3948, 2622, 42, 18, 0, 2 }, // 12 \"EOS 400D\", \"EOS 1000D\"\n\t  { 3984, 2622, 76, 20, 0, 2, 14 }, // 13 \"EOS-1D Mark III\"\n\t  { 4032, 2656, 112, 44, 10, 0 }, // 14 APS-C crop mode: \"EOS 6D Mark II\"??, \"EOS RP\"\n\t  { 4104, 3048, 48, 12, 24, 12 }, // 15 \"PowerShot G9\"\n\t  { 4116, 2178, 4, 2, 0, 0 },  // 16 ??\n\t  { 4152, 2772, 192, 12, 0, 0 }, // 17 \"PowerShot SX1 IS\"\n\t  { 4160, 3124, 104, 11, 8, 65 }, // 18 \"PowerShot S100 (new)\", \"PowerShot S100V\", \"PowerShot G15\", \"PowerShot S110 (new)\"\n\t  { 4176, 3062, 96, 17, 8, 0, 0, 16, 0, 7, 0x49 }, // 19 \"PowerShot SX50 HS\"\n\t  { 4192, 3062, 96, 17, 24, 0, 0, 16, 0, 0, 0x49 }, // 20 \"PowerShot G16\", \"PowerShot S120\"\n\t  { 4312, 2876, 22, 18, 0, 2 }, // 21 \"EOS 450D\"\n\t  { 4352, 2850, 144, 46, 0, 0 }, // 22 APS-C crop mode: \"EOS R\"\n\t  { 4352, 2874, 62, 18, 0, 0 }, // 23 \"EOS 1100D\"\n\t  { 4476, 2954, 90, 34, 0, 0 }, // 24 \"EOS 5D\"\n\t  { 4480, 3348, 12, 10, 36, 12, 0, 0, 0, 18, 0x49 }, // 25 \"PowerShot G10\"\n\t  { 4480, 3366, 80, 50, 0, 0 }, // 26 \"PowerShot G1 X Mark II\"\n\t  { 4496, 3366, 80, 50, 12, 0 }, // 27 \"PowerShot G1 X\"\n\t  { 4768, 3516, 96, 16, 0, 0, 0, 16 }, // 28 \"PowerShot SX60 HS\"\n\t  { 4832, 3204, 62, 26, 0, 0 }, // 29 \"EOS 500D\"\n\t  { 4832, 3228, 62, 51, 0, 0 }, // 30 \"EOS 50D\"\n\t  { 5108, 3349, 98, 13, 0, 0 }, // 31 \"EOS-1Ds Mark II\"\n\t  { 5120, 3318, 142, 45, 62, 0 }, // 32  \"EOS-1D Mark IV\"\n\t  { 5280, 3528, 72, 52, 0, 0 }, // 33 \"EOS M10\", \"EOS 650D\", \"EOS 700D\", \"EOS M\", \"EOS 100D\", \"EOS M2\"\n\t  { 5344, 3516, 142, 51, 0, 0 }, // 34 \"EOS 550D\", \"EOS 600D\", \"EOS 60D\", \"EOS 1200D\", \"EOS 1300D\", \"EOS 3000D\"\n\t  { 5344, 3584, 126, 100, 0, 2 }, // 35 \"EOS-1D X\", \"EOS-1D C\"\n\t  { 5344, 3950, 98, 18, 0, 0, 0, 24, 0, 0 }, // 36 \"PowerShot SX70 HS\"\n\t  { 5360, 3516, 158, 51, 0, 0 }, // 37 \"EOS 7D\"\n\t  { 5568, 3708, 72, 38, 0, 0 }, // 38; \"EOS 7D Mark II\", \"EOS 6D\", \"EOS 70D\", \"EOS-1D X MARK II\"\n\t  { 5632, 3710, 96, 17, 0, 0, 0, 16, 0, 0, 0x49 }, // 39 \"PowerShot G7 X\", \"PowerShot G3 X\", \"PowerShot G9 X\", \"PowerShot G5 X\", \"PowerShot G7 X Mark II\", \"PowerShot G9 X Mark II\"\n\t  { 5712, 3774, 62, 20, 10, 2 }, // 40 \"EOS-1Ds Mark III\"\n\t  { 5792, 3804, 158, 51, 0, 0 }, // 41 \"EOS 5D Mark II\"\n\t  { 5920, 3950, 122, 80, 2, 0 }, // 42 \"EOS 5D Mark III\"\n\t  { 6096, 4051, 76, 35, 0, 0 }, // 43 \"EOS 1500D\"\n\t  { 6096, 4056, 72, 34, 0, 0 }, // 44 \"EOS M3\", \"EOS 760D\", \"EOS 750D\"\n\t  { 6288, 4056, 264, 36, 0, 0 }, // 45 \"EOS M5\", \"EOS M100\", \"EOS M6\", \"PowerShot G1 X Mark III\", \"EOS 80D\", \"EOS 800D\", \"EOS 77D\", \"EOS 200D\", \"EOS 250D\", \"EOS M50\"\n\t  { 6384, 4224, 120, 44, 0, 0 }, // 46 \"EOS 6D Mark II\", \"EOS RP\"\n\t  { 6880, 4544, 136, 42, 0, 0 }, // 47 \"EOS 5D Mark IV\"\n\t  { 6888, 4546, 146, 48, 0, 0 }, // 48 \"EOS R\"\n\t  { 7128, 4732, 144, 72, 0, 0 }, // 49 \"EOS M6 II\", \"EOS 90D\"\n\t  { 8896, 5920, 160, 64, 0, 0 }, // 50 \"EOS 5DS\", \"EOS 5DS R\"\n  };\n\n  static const libraw_custom_camera_t const_table[] = {\n\t  { 786432, 1024, 768, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-080C\" },\n\t  { 1447680, 1392, 1040, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-145C\" },\n\t  { 1920000, 1600, 1200, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-201C\" },\n\t  { 5067304, 2588, 1958, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-510C\" },\n\t  { 5067316, 2588, 1958, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-510C\", 12 },\n\t  { 10134608, 2588, 1958, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-510C\" },\n\t  { 10134620, 2588, 1958, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-510C\", 12 },\n\t  { 16157136, 3272, 2469, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-810C\" },\n\t  { 15980544, 3264, 2448, 0, 0, 0, 0, 8, 0x61, 0, 1, \"AgfaPhoto\", \"DC-833m\" },\n\t  { 9631728, 2532, 1902, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Alcatel\", \"5035D\" },\n\t  { 31850496, 4608, 3456, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"GIT2 4:3\" },\n\t  { 23887872, 4608, 2592, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"GIT2 16:9\" },\n\t  { 32257024, 4624, 3488, 8, 2, 16, 2, 0, 0x94, 0, 0, \"GITUP\", \"GIT2P 4:3\" },\n\t  { 24192768, 4624, 2616, 8, 2, 16, 2, 0, 0x94, 0, 0, \"GITUP\", \"GIT2P 16:9\" },\n\t  { 18016000, 4000, 2252, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"G3DUO 16:9\" },\n\t  //          {24000000, 4000, 3000, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\",\n      //          \"G3DUO 4:3\"}, // Conflict w/ Samsung WB550\n\n      //   Android Raw dumps id start\n      //   File Size in bytes Horizontal Res Vertical Flag then bayer order eg\n      //   0x16 bbgr 0x94 rggb\n\t  { 1540857, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"Samsung\", \"S3\" },\n\t  { 2658304, 1212, 1096, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3FrontMipi\" },\n\t  { 2842624, 1296, 1096, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3FrontQCOM\" },\n\t  { 2969600, 1976, 1200, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"MI3wMipi\" },\n\t  { 3170304, 1976, 1200, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"MI3wQCOM\" },\n\t  { 3763584, 1584, 1184, 0, 0, 0, 0, 96, 0x61, 0, 0, \"I_Mobile\", \"I_StyleQ6\" },\n\t  { 5107712, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"UltraPixel1\" },\n\t  { 5382640, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"UltraPixel2\" },\n\t  { 5664912, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 5664912, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 5364240, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 6299648, 2592, 1944, 0, 0, 0, 0, 1, 0x16, 0, 0, \"OmniVisi\", \"OV5648\" },\n\t  { 6721536, 2592, 1944, 0, 0, 0, 0, 0, 0x16, 0, 0, \"OmniVisi\", \"OV56482\" },\n\t  { 6746112, 2592, 1944, 0, 0, 0, 0, 0, 0x16, 0, 0, \"HTC\", \"OneSV\" },\n\t  { 9631728, 2532, 1902, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Sony\", \"5mp\" },\n\t  { 9830400, 2560, 1920, 0, 0, 0, 0, 96, 0x61, 0, 0, \"NGM\", \"ForwardArt\" },\n\t  { 10186752, 3264, 2448, 0, 0, 0, 0, 1, 0x94, 0, 0, \"Sony\", \"IMX219-mipi 8mp\" },\n\t  { 10223360, 2608, 1944, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Sony\", \"IMX\" },\n\t  { 10782464, 3282, 2448, 0, 0, 0, 0, 0, 0x16, 0, 0, \"HTC\", \"MyTouch4GSlide\" },\n\t  { 10788864, 3282, 2448, 0, 0, 0, 0, 0, 0x16, 0, 0, \"Xperia\", \"L\" },\n\t  { 15967488, 3264, 2446, 0, 0, 0, 0, 96, 0x16, 0, 0, \"OmniVison\", \"OV8850\" },\n\t  { 16224256, 4208, 3082, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3MipiL\" },\n\t  { 16424960, 4208, 3120, 0, 0, 0, 0, 1, 0x16, 0, 0, \"IMX135\", \"MipiL\" },\n\t  { 17326080, 4164, 3120, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3LQCom\" },\n\t  { 17522688, 4212, 3120, 0, 0, 0, 0, 0, 0x16, 0, 0, \"Sony\", \"IMX135-QCOM\" },\n\t  { 19906560, 4608, 3456, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Gione\", \"E7mipi\" },\n\t  { 19976192, 5312, 2988, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G4\" },\n\t  { 20389888, 4632, 3480, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"RedmiNote3Pro\" },\n\t  { 20500480, 4656, 3496, 0, 0, 0, 0, 1, 0x94, 0, 0, \"Sony\", \"IMX298-mipi 16mp\" },\n\t  { 21233664, 4608, 3456, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Gione\", \"E7qcom\" },\n\t  { 26023936, 4192, 3104, 0, 0, 0, 0, 96, 0x94, 0, 0, \"THL\", \"5000\" },\n\t  { 26257920, 4208, 3120, 0, 0, 0, 0, 96, 0x94, 0, 0, \"Sony\", \"IMX214\" },\n\t  { 26357760, 4224, 3120, 0, 0, 0, 0, 96, 0x61, 0, 0, \"OV\", \"13860\" },\n\t  { 41312256, 5248, 3936, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Meizu\", \"MX4\" },\n\t  { 42923008, 5344, 4016, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Sony\", \"IMX230\" },\n      //   Android Raw dumps id end\n\t  { 20137344, 3664, 2748, 0, 0, 0, 0, 0x40, 0x49, 0, 0, \"Aptina\", \"MT9J003\", 0xffff },\n\t  { 2868726, 1384, 1036, 0, 0, 0, 0, 64, 0x49, 0, 8, \"Baumer\", \"TXG14\", 1078 },\n\t  { 5298000, 2400, 1766, 12, 12, 44, 2, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SD300\" }, // chdk hack\n\t  { 6553440, 2664, 1968, 4, 4, 44, 4, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A460\" }, // chdk hack\n\t  { 6573120, 2672, 1968, 12, 8, 44, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A610\" }, // chdk hack\n\t  { 6653280, 2672, 1992, 10, 6, 42, 2, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A530\" }, // chdk hack\n\t  { 7710960, 2888, 2136, 44, 8, 4, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot S3 IS\" }, // chdk hack\n\t  { 9219600, 3152, 2340, 36, 12, 4, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A620\" }, // chdk hack\n\t  { 9243240, 3152, 2346, 12, 7, 44, 13, 40, 0x49, 0, 2, \"Canon\", \"PowerShot A470\" }, // chdk hack\n\t  { 10341600, 3336, 2480, 6, 5, 32, 3, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A720 IS\" }, // chdk hack\n\t  { 10383120, 3344, 2484, 12, 6, 44, 6, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A630\" }, // chdk hack\n\t  { 12945240, 3736, 2772, 12, 6, 52, 6, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A640\" }, // chdk hack\n\t  { 15636240, 4104, 3048, 48, 12, 24, 12, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A650\" }, // chdk hack\n\t  { 15467760, 3720, 2772, 6, 12, 30, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX110 IS\" }, // chdk hack\n\t  { 15534576, 3728, 2778, 12, 9, 44, 9, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX120 IS\" }, // chdk hack\n\t  { 18653760, 4080, 3048, 24, 12, 24, 12, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX20 IS\" }, // chdk hack\n\t  { 18763488, 4104, 3048, 10, 22, 82, 22, 8, 0x49, 0, 0, \"Canon\", \"PowerShot D10\" }, // ? chdk hack ?\n\t  { 19131120, 4168, 3060, 92, 16, 4, 1, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX220 HS\" }, // chdk hack\n\t  { 21936096, 4464, 3276, 25, 10, 73, 12, 40, 0x16, 0, 2, \"Canon\", \"PowerShot SX30 IS\" }, // chdk hack\n\t  { 24724224, 4704, 3504, 8, 16, 56, 8, 40, 0x49, 0, 2, \"Canon\", \"PowerShot A3300 IS\" }, // chdk hack\n\t  { 30858240, 5248, 3920, 8, 16, 56, 16, 40, 0x94, 0, 2, \"Canon\", \"IXUS 160\" }, // chdk hack\n\t  { 1976352, 1632, 1211, 0, 2, 0, 1, 0, 0x94, 0, 1, \"Casio\", \"QV-2000UX\" },\n\t  { 3217760, 2080, 1547, 0, 0, 10, 1, 0, 0x94, 0, 1, \"Casio\", \"QV-3*00EX\" },\n\t  { 6218368, 2585, 1924, 0, 0, 9, 0, 0, 0x94, 0, 1, \"Casio\", \"QV-5700\" },\n\t  { 7816704, 2867, 2181, 0, 0, 34, 36, 0, 0x16, 0, 1, \"Casio\", \"EX-Z60\" },\n\t  { 2937856, 1621, 1208, 0, 0, 1, 0, 0, 0x94, 7, 13, \"Casio\", \"EX-S20\" },\n\t  { 4948608, 2090, 1578, 0, 0, 32, 34, 0, 0x94, 7, 1, \"Casio\", \"EX-S100\" },\n\t  { 6054400, 2346, 1720, 2, 0, 32, 0, 0, 0x94, 7, 1, \"Casio\", \"QV-R41\" },\n\t  { 7426656, 2568, 1928, 0, 0, 0, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-P505\" },\n\t  { 7530816, 2602, 1929, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Casio\", \"QV-R51\" },\n\t  { 7542528, 2602, 1932, 0, 0, 32, 0, 0, 0x94, 7, 1, \"Casio\", \"EX-Z50\" },\n\t  { 7562048, 2602, 1937, 0, 0, 25, 0, 0, 0x16, 7, 1, \"Casio\", \"EX-Z500\" },\n\t  { 7753344, 2602, 1986, 0, 0, 32, 26, 0, 0x94, 7, 1, \"Casio\", \"EX-Z55\" },\n\t  { 9313536, 2858, 2172, 0, 0, 14, 30, 0, 0x94, 7, 1, \"Casio\", \"EX-P600\" },\n\t  { 10834368, 3114, 2319, 0, 0, 27, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z750\" },\n\t  { 10843712, 3114, 2321, 0, 0, 25, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z75\" },\n\t  { 10979200, 3114, 2350, 0, 0, 32, 32, 0, 0x94, 7, 1, \"Casio\", \"EX-P700\" },\n\t  { 12310144, 3285, 2498, 0, 0, 6, 30, 0, 0x94, 0, 1, \"Casio\", \"EX-Z850\" },\n\t  { 12489984, 3328, 2502, 0, 0, 47, 35, 0, 0x94, 0, 1, \"Casio\", \"EX-Z8\" },\n\t  { 15499264, 3754, 2752, 0, 0, 82, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z1050\" },\n\t  { 18702336, 4096, 3044, 0, 0, 24, 0, 80, 0x94, 7, 1, \"Casio\", \"EX-ZR100\" },\n\t  { 7684000, 2260, 1700, 0, 0, 0, 0, 13, 0x94, 0, 1, \"Casio\", \"QV-4000\" },\n\t  { 787456, 1024, 769, 0, 1, 0, 0, 0, 0x49, 0, 0, \"Creative\", \"PC-CAM 600\" },\n\t  { 28829184, 4384, 3288, 0, 0, 0, 0, 36, 0x61, 0, 0, \"DJI\" },\n\t  { 15151104, 4608, 3288, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Matrix\" },\n\t  { 3840000, 1600, 1200, 0, 0, 0, 0, 65, 0x49, 0, 0, \"Foculus\", \"531C\" },\n\t  { 307200, 640, 480, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Generic\" },\n\t  { 62464, 256, 244, 1, 1, 6, 1, 0, 0x8d, 0, 0, \"Kodak\", \"DC20\" },\n\t  { 124928, 512, 244, 1, 1, 10, 1, 0, 0x8d, 0, 0, \"Kodak\", \"DC20\" },\n\t  { 1652736, 1536, 1076, 0, 52, 0, 0, 0, 0x61, 0, 0, \"Kodak\", \"DCS200\" },\n\t  { 4159302, 2338, 1779, 1, 33, 1, 2, 0, 0x94, 0, 0, \"Kodak\", \"C330\" },\n\t  { 4162462, 2338, 1779, 1, 33, 1, 2, 0, 0x94, 0, 0, \"Kodak\", \"C330\", 3160 },\n\t  { 2247168, 1232, 912, 0, 0, 16, 0, 0, 0x00, 0, 0, \"Kodak\", \"C330\" },\n\t  { 3370752, 1232, 912, 0, 0, 16, 0, 0, 0x00, 0, 0, \"Kodak\", \"C330\" },\n\t  { 6163328, 2864, 2152, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Kodak\", \"C603\" },\n\t  { 6166488, 2864, 2152, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Kodak\", \"C603\", 3160 },\n\t  { 460800, 640, 480, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"C603\" },\n\t  { 9116448, 2848, 2134, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"C603\" },\n\t  { 12241200, 4040, 3030, 2, 0, 0, 13, 0, 0x49, 0, 0, \"Kodak\", \"12MP\" },\n\t  { 12272756, 4040, 3030, 2, 0, 0, 13, 0, 0x49, 0, 0, \"Kodak\", \"12MP\", 31556 },\n\t  { 18000000, 4000, 3000, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"12MP\" },\n\t  { 614400, 640, 480, 0, 3, 0, 0, 64, 0x94, 0, 0, \"Kodak\", \"KAI-0340\" },\n\t  { 15360000, 3200, 2400, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Lenovo\", \"A820\" },\n\t  { 3884928, 1608, 1207, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Micron\", \"2010\", 3212 },\n\t  { 1138688, 1534, 986, 0, 0, 0, 0, 0, 0x61, 0, 0, \"Minolta\", \"RD175\", 513 },\n\t  { 1581060, 1305, 969, 0, 0, 18, 6, 6, 0x1e, 4, 1, \"Nikon\", \"E900\" }, // \"diag raw\" hack\n\t  { 2465792, 1638, 1204, 0, 0, 22, 1, 6, 0x4b, 5, 1, \"Nikon\", \"E950\" }, // \"diag raw\" hack; possibly also Nikon E700, E800, E775;\n\t                                                                        // Olympus C-2020Z\n\t  { 2940928, 1616, 1213, 0, 0, 0, 7, 30, 0x94, 0, 1, \"Nikon\", \"E2100\" }, // \"diag raw\" hack; also Nikon E2500\n\t  { 4771840, 2064, 1541, 0, 0, 0, 1, 6, 0xe1, 0, 1, \"Nikon\", \"E990\" }, // \"diag raw\" hack; possibly also Nikon E880, E885, E995;\n\t                                                                       // Olympus C-3030Z\n\t  { 4775936, 2064, 1542, 0, 0, 0, 0, 30, 0x94, 0, 1, \"Nikon\", \"E3700\" }, // \"diag raw\" hack; Nikon E3100, E3200, E3500;\n\t                                                                         // Pentax \"Optio 33WR\"; possibly also Olympus C-740UZ\n\t  { 5865472, 2288, 1709, 0, 0, 0, 1, 6, 0xb4, 0, 1, \"Nikon\", \"E4500\" }, // \"diag raw\" hack; possibly also Olympus C-4040Z\n\t  { 5869568, 2288, 1710, 0, 0, 0, 0, 6, 0x16, 0, 1, \"Nikon\", \"E4300\" }, // \"diag raw\" hack; also Minolta \"DiMAGE Z2\"\n\t  { 7438336, 2576, 1925, 0, 0, 0, 1, 6, 0xb4, 0, 1, \"Nikon\", \"E5000\" }, // also Nikon E5700\n\t  { 8998912, 2832, 2118, 0, 0, 0, 0, 30, 0x94, 7, 1, \"Nikon\", \"COOLPIX S6\" }, // \"diag raw\" hack\n\t  { 5939200, 2304, 1718, 0, 0, 0, 0, 30, 0x16, 0, 0, \"Olympus\", \"C-770UZ\" }, // possibly also Olympus C-4100Z, C-765UZ\n\t  { 3178560, 2064, 1540, 0, 0, 0, 0, 0, 0x94, 0, 1, \"Pentax\", \"Optio S V1.01\" },\n\t  { 4841984, 2090, 1544, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Pentax\", \"Optio S\" },\n\t  { 6114240, 2346, 1737, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Pentax\", \"Optio S4\" },\n\t  { 10702848, 3072, 2322, 0, 0, 0, 21, 30, 0x94, 0, 1, \"Pentax\", \"Optio 750Z\" },\n\t  { 4147200, 1920, 1080, 0, 0, 0, 0, 0, 0x49, 0, 0, \"Photron\", \"BC2-HD\" },\n\t  { 4151666, 1920, 1080, 0, 0, 0, 0, 0, 0x49, 0, 0, \"Photron\", \"BC2-HD\", 8 },\n\t  { 13248000, 2208, 3000, 0, 0, 0, 0, 13, 0x61, 0, 0, \"Pixelink\", \"A782\" },\n\t  { 6291456, 2048, 1536, 0, 0, 0, 0, 96, 0x61, 0, 0, \"RoverShot\", \"3320AF\" },\n\t  { 311696, 644, 484, 0, 0, 0, 0, 0, 0x16, 0, 8, \"ST Micro\", \"STV680 VGA\" },\n\t  { 16098048, 3288, 2448, 0, 0, 24, 0, 9, 0x94, 0, 1, \"Samsung\", \"S85\" }, // hack\n\t  { 16215552, 3312, 2448, 0, 0, 48, 0, 9, 0x94, 0, 1, \"Samsung\", \"S85\" }, // hack\n\t  { 20487168, 3648, 2808, 0, 0, 0, 0, 13, 0x94, 5, 1, \"Samsung\", \"WB550\" },\n\t  { 24000000, 4000, 3000, 0, 0, 0, 0, 13, 0x94, 5, 1, \"Samsung\", \"WB550\" },\n\t  { 12582980, 3072, 2048, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 23; same res. as Leaf Volare & Cantare\n\t  { 33292868, 4080, 4080, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 44\n\t  { 44390468, 4080, 5440, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 54\n\t  { 1409024, 1376, 1024, 0, 0, 1, 0, 0, 0x49, 0, 0, \"Sony\", \"XCD-SX910CR\" },\n\t  { 2818048, 1376, 1024, 0, 0, 1, 0, 97, 0x49, 0, 0, \"Sony\", \"XCD-SX910CR\" },\n  };\n\n  libraw_custom_camera_t\n      table[64 + sizeof(const_table) / sizeof(const_table[0])];\n\n\n  // clang-format on\n\n  char head[64] = {0}, *cp;\n  int hlen, fsize, flen, zero_fsize = 1, i, c;\n  struct jhead jh;\n\n  unsigned camera_count =\n      parse_custom_cameras(64, table, imgdata.params.custom_camera_strings);\n  for (int q = 0; q < int(sizeof(const_table) / sizeof(const_table[0])); q++)\n    memmove(&table[q + camera_count], &const_table[q], sizeof(const_table[0]));\n  camera_count += sizeof(const_table) / sizeof(const_table[0]);\n\n  tiff_flip = flip = filters = UINT_MAX; /* unknown */\n  raw_height = raw_width = fuji_width = fuji_layout = cr2_slice[0] = 0;\n  maximum = height = width = top_margin = left_margin = 0;\n  cdesc[0] = desc[0] = artist[0] = make[0] = model[0] = model2[0] = 0;\n  iso_speed = shutter = aperture = focal_len = 0;\n  unique_id = 0ULL;\n  tiff_nifds = 0;\n  is_NikonTransfer = 0;\n  is_Sony = 0;\n  is_pana_raw = 0;\n  maker_index = LIBRAW_CAMERAMAKER_Unknown;\n  is_4K_RAFdata = 0;\n  FujiCropMode = 0;\n  is_PentaxRicohMakernotes = 0;\n  normalized_model[0] = 0;\n  normalized_make[0] = 0;\n  CM_found = 0;\n  memset(tiff_ifd, 0, sizeof tiff_ifd);\n  libraw_internal_data.unpacker_data.crx_track_selected = -1;\n  libraw_internal_data.unpacker_data.CR3_CTMDtag = 0;\n  imgdata.makernotes.hasselblad.nIFD_CM[0] =\n    imgdata.makernotes.hasselblad.nIFD_CM[1] = -1;\n  imgdata.makernotes.kodak.ISOCalibrationGain = 1.0f;\n  imCommon.CameraTemperature = imCommon.SensorTemperature =\n      imCommon.SensorTemperature2 = imCommon.LensTemperature =\n          imCommon.AmbientTemperature = imCommon.BatteryTemperature =\n              imCommon.exifAmbientTemperature = -1000.0f;\n\n  imgdata.color.ExifColorSpace = LIBRAW_COLORSPACE_Unknown;\n  for (i = 0; i < LIBRAW_IFD_MAXCOUNT; i++)\n  {\n    tiff_ifd[i].dng_color[0].illuminant = tiff_ifd[i].dng_color[1].illuminant =\n        0xffff;\n    for (int c = 0; c < 4; c++)\n      tiff_ifd[i].dng_levels.analogbalance[c] = 1.0f;\n  }\n\n  memset(gpsdata, 0, sizeof gpsdata);\n  memset(cblack, 0, sizeof cblack);\n  memset(white, 0, sizeof white);\n  memset(mask, 0, sizeof mask);\n  thumb_offset = thumb_length = thumb_width = thumb_height = 0;\n  load_raw = thumb_load_raw = 0;\n  write_thumb = &LibRaw::jpeg_thumb;\n  data_offset = meta_offset = meta_length = tiff_bps = tiff_compress = 0;\n  kodak_cbpp = zero_after_ff = dng_version = load_flags = 0;\n  timestamp = shot_order = tiff_samples = black = is_foveon = 0;\n  mix_green = profile_length = data_error = zero_is_bad = 0;\n  pixel_aspect = is_raw = raw_color = 1;\n  tile_width = tile_length = 0;\n  metadata_blocks = 0;\n\n  for (i = 0; i < 4; i++)\n  {\n    cam_mul[i] = i == 1;\n    pre_mul[i] = i < 3;\n    FORC3 cmatrix[c][i] = 0;\n    FORC3 rgb_cam[c][i] = c == i;\n  }\n  colors = 3;\n  for (i = 0; i < 0x10000; i++)\n    curve[i] = i;\n\n  order = get2();\n  hlen = get4();\n  fseek(ifp, 0, SEEK_SET);\n\n  if (fread(head, 1, 64, ifp) < 64)\n    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n  libraw_internal_data.unpacker_data.lenRAFData =\n      libraw_internal_data.unpacker_data.posRAFData = 0;\n\n  fseek(ifp, 0, SEEK_END);\n  flen = fsize = ftell(ifp);\n  if ((cp = (char *)memmem(head, 32, (char *)\"MMMM\", 4)) ||\n      (cp = (char *)memmem(head, 32, (char *)\"IIII\", 4)))\n  {\n    parse_phase_one(cp - head);\n    if (cp - head && parse_tiff(0))\n      apply_tiff();\n  }\n  else if (order == 0x4949 || order == 0x4d4d)\n  {\n    if (!memcmp(head + 6, \"HEAPCCDR\", 8))\n    {\n      data_offset = hlen;\n      parse_ciff(hlen, flen - hlen, 0);\n      load_raw = &LibRaw::canon_load_raw;\n    }\n    else if (parse_tiff(0))\n      apply_tiff();\n  }\n  else if (!memcmp(head, \"\\xff\\xd8\\xff\\xe1\", 4) && !memcmp(head + 6, \"Exif\", 4))\n  {\n    fseek(ifp, 4, SEEK_SET);\n    data_offset = 4 + get2();\n    fseek(ifp, data_offset, SEEK_SET);\n    if (fgetc(ifp) != 0xff)\n      parse_tiff(12);\n    thumb_offset = 0;\n  }\n  else if (!memcmp(head + 25, \"ARECOYK\", 7)) // 'KYOCERA' right-to-left\n  {\n    strcpy(make, \"Contax\");\n    strcpy(model, \"N Digital\");\n    parse_kyocera();\n  }\n  else if (!strcmp(head, \"PXN\"))\n  {\n    strcpy(make, \"Logitech\");\n    strcpy(model, \"Fotoman Pixtura\");\n  }\n  else if (!strcmp(head, \"qktk\"))\n  {\n    strcpy(make, \"Apple\");\n    strcpy(model, \"QuickTake 100\");\n    load_raw = &LibRaw::quicktake_100_load_raw;\n  }\n  else if (!strcmp(head, \"qktn\"))\n  {\n    strcpy(make, \"Apple\");\n    strcpy(model, \"QuickTake 150\");\n    load_raw = &LibRaw::kodak_radc_load_raw;\n  }\n  else if (!memcmp(head, \"FUJIFILM\", 8))\n  {\n    memcpy(imFuji.SerialSignature, head + 0x10, 0x0c);\n    imFuji.SerialSignature[0x0c] = 0;\n    strncpy(model, head + 0x1c, 0x20);\n    model[0x20] = 0;\n    memcpy(model2, head + 0x3c, 4);\n    model2[4] = 0;\n    strcpy(imFuji.RAFVersion, model2);\n    fseek(ifp, 84, SEEK_SET);\n    thumb_offset = get4();\n    thumb_length = get4();\n    fseek(ifp, 92, SEEK_SET);\n    parse_fuji(get4());\n    if (thumb_offset > 120)\n    {\n      fseek(ifp, 120, SEEK_SET);\n      is_raw += (i = get4()) ? 1 : 0;\n      if (is_raw == 2 && shot_select)\n        parse_fuji(i);\n    }\n    load_raw = &LibRaw::unpacked_load_raw;\n    fseek(ifp, 100 + 28 * (shot_select > 0), SEEK_SET);\n    parse_tiff(data_offset = get4());\n    parse_tiff(thumb_offset + 12);\n    apply_tiff();\n  }\n  else if (!memcmp(head, \"RIFF\", 4))\n  {\n    fseek(ifp, 0, SEEK_SET);\n    parse_riff();\n  }\n  else if (!memcmp(head + 4, \"ftypqt   \", 9))\n  {\n    fseek(ifp, 0, SEEK_SET);\n    parse_qt(fsize);\n    is_raw = 0;\n  }\n  else if (!memcmp(head, \"\\0\\001\\0\\001\\0@\", 6))\n  {\n    fseek(ifp, 6, SEEK_SET);\n    fread(make, 1, 8, ifp);\n    fread(model, 1, 8, ifp);\n    fread(model2, 1, 16, ifp);\n    data_offset = get2();\n    get2();\n    raw_width = get2();\n    raw_height = get2();\n    load_raw = &LibRaw::nokia_load_raw;\n    filters = 0x61616161;\n  }\n  else if (!memcmp(head, \"NOKIARAW\", 8))\n  {\n    strcpy(make, \"NOKIA\");\n    order = 0x4949;\n    fseek(ifp, 300, SEEK_SET);\n    data_offset = get4();\n    i = get4(); // bytes count\n    width = get2();\n    height = get2();\n\n    // Data integrity check\n    if (width < 1 || width > 16000 || height < 1 || height > 16000 ||\n        i < (width * height) || i > (2 * width * height))\n      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n\n    switch (tiff_bps = i * 8 / (width * height))\n    {\n    case 8:\n      load_raw = &LibRaw::eight_bit_load_raw;\n      break;\n    case 10:\n      load_raw = &LibRaw::nokia_load_raw;\n      break;\n    case 0:\n      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n      break;\n    }\n    raw_height = height + (top_margin = i / (width * tiff_bps / 8) - height);\n    mask[0][3] = 1;\n    filters = 0x61616161;\n  }\n  else if (!memcmp(head, \"ARRI\", 4))\n  {\n    order = 0x4949;\n    fseek(ifp, 20, SEEK_SET);\n    width = get4();\n    height = get4();\n    strcpy(make, \"ARRI\");\n    fseek(ifp, 668, SEEK_SET);\n    fread(model, 1, 64, ifp);\n    model[63] = 0;\n    fseek(ifp, 760, SEEK_SET);\n    fread(software, 1, 64, ifp);\n    if((unsigned char)software[0] == 0xff) software[0] = 0;\n    software[63] = 0;\n    data_offset = 4096;\n    load_raw = &LibRaw::packed_load_raw;\n    load_flags = 88;\n    filters = 0x61616161;\n    fixupArri();\n  }\n  else if (!memcmp(head, \"XPDS\", 4))\n  {\n    order = 0x4949;\n    fseek(ifp, 0x800, SEEK_SET);\n    fread(make, 1, 41, ifp);\n    raw_height = get2();\n    raw_width = get2();\n    fseek(ifp, 56, SEEK_CUR);\n    fread(model, 1, 30, ifp);\n    data_offset = 0x10000;\n    load_raw = &LibRaw::canon_rmf_load_raw;\n    gamma_curve(0, 12.25, 1, 1023);\n  }\n  else if (!memcmp(head + 4, \"RED1\", 4))\n  {\n    strcpy(make, \"Red\");\n    strcpy(model, \"One\");\n    parse_redcine();\n    load_raw = &LibRaw::redcine_load_raw;\n    gamma_curve(1 / 2.4, 12.92, 1, 4095);\n    filters = 0x49494949;\n  }\n  else if (!memcmp(head, \"DSC-Image\", 9))\n    parse_rollei();\n  else if (!memcmp(head, \"PWAD\", 4))\n    parse_sinar_ia();\n  else if (!memcmp(head, \"\\0MRM\", 4))\n    parse_minolta(0);\n  else if (!memcmp(head, \"FOVb\", 4))\n  {\n    parse_x3f(); /* Does nothing if USE_X3FTOOLS is not defined */\n  }\n  else if (!memcmp(head, \"CI\", 2))\n    parse_cine();\n#ifdef USE_6BY9RPI\n  else if (!memcmp(head, \"BRCM\", 4)) {\n\tfseek(ifp, 0, SEEK_SET);\n\tstrcpy(make, \"RaspberryPi\");\n\tstrcpy(model, \"Pi\");\n\tparse_raspberrypi();\n\t}\n#endif\n  else if (!memcmp(head + 4, \"ftypcrx \", 8))\n  {\n    int err;\n    unsigned long long szAtomList;\n    short nesting = -1;\n    short nTrack = -1;\n    short TrackType;\n    char AtomNameStack[128];\n    strcpy(make, \"Canon\");\n\n    szAtomList = ifp->size();\n    err = parseCR3(0ULL, szAtomList, nesting, AtomNameStack, nTrack, TrackType);\n    if ((err == 0 || err == -14) &&\n        nTrack >= 0) // no error, or too deep nesting\n      selectCRXTrack(nTrack);\n  }\n\n  if (make[0] == 0)\n    for (zero_fsize = i = 0; i < (int)camera_count; i++)\n      if (fsize == (int)table[i].fsize)\n      {\n        strcpy(make, table[i].t_make);\n        strcpy(model, table[i].t_model);\n        flip = table[i].flags >> 2;\n        zero_is_bad = table[i].flags & 2;\n        data_offset = table[i].offset == 0xffff ? 0 : table[i].offset;\n        raw_width = table[i].rw;\n        raw_height = table[i].rh;\n        left_margin = table[i].lm;\n        top_margin = table[i].tm;\n        width = raw_width - left_margin - table[i].rm;\n        height = raw_height - top_margin - table[i].bm;\n        filters = 0x1010101U * table[i].cf;\n        colors = 4 - !((filters & filters >> 1) & 0x5555);\n        load_flags = table[i].lf & 0xff;\n        if (table[i].lf & 0x100) /* Monochrome sensor dump */\n        {\n          colors = 1;\n          filters = 0;\n        }\n        switch (tiff_bps = (fsize - data_offset) * 8 / (raw_width * raw_height))\n        {\n        case 6:\n          load_raw = &LibRaw::minolta_rd175_load_raw;\n          ilm.CameraMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 8:\n          load_raw = &LibRaw::eight_bit_load_raw;\n          break;\n        case 10:\n          if ((fsize - data_offset) / raw_height * 3 >= raw_width * 4)\n          {\n            load_raw = &LibRaw::android_loose_load_raw;\n            break;\n          }\n          else if (load_flags & 1)\n          {\n            load_raw = &LibRaw::android_tight_load_raw;\n            break;\n          }\n        case 12:\n          load_flags |= 128;\n          load_raw = &LibRaw::packed_load_raw;\n          break;\n        case 16:\n          order = 0x4949 | 0x404 * (load_flags & 1);\n          tiff_bps -= load_flags >> 4;\n          tiff_bps -= load_flags = load_flags >> 1 & 7;\n          load_raw = table[i].offset == 0xffff\n                         ? &LibRaw::unpacked_load_raw_reversed\n                         : &LibRaw::unpacked_load_raw;\n        }\n        maximum = (1 << tiff_bps) - (1 << table[i].max);\n        break;\n      }\n  if (zero_fsize)\n    fsize = 0;\n  if (make[0] == 0)\n    parse_smal(0, flen);\n  if (make[0] == 0)\n  {\n    parse_jpeg(0);\n#ifdef USE_6BY9RPI\n\tif (!(strncmp(model, \"ov\", 2) && strncmp(model, \"RP_\", 3))) {\n\t\t//Assume that this isn't a raw unless the header can be found\n\t\tis_raw = 0;\n\n\t\tif (!strncasecmp(model, \"RP_imx\", 6)) {\n\t\t\tconst long offsets[] = {\n\t\t\t\t//IMX219 offsets\n\t\t\t\t10270208, //8MPix 3280x2464\n\t\t\t\t2678784,  //1920x1080\n\t\t\t\t2628608,  //1640x1232\n\t\t\t\t1963008,  //1640x922\n\t\t\t\t1233920,  //1280x720\n\t\t\t\t445440,   //640x480\n\t\t\t\t-1        //Marker for end of table\n\t\t\t};\n\t\t\tint offset_idx;\n\t\t\tfor (offset_idx = 0; offsets[offset_idx] != -1; offset_idx++) {\n\t\t\t\tif (!fseek(ifp, -offsets[offset_idx], SEEK_END) &&\n\t\t\t\t\tfread(head, 1, 32, ifp) && !strncmp(head, \"BRCM\", 4)) {\n\n\t\t\t\t\tfseek(ifp, -32, SEEK_CUR);\n\t\t\t\t\tstrcpy(make, \"SonyRPF\");\n\t\t\t\t\tparse_raspberrypi();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (!strncasecmp(model, \"RP_OV\", 5) || !strncasecmp(model, \"ov5647\", 6)) {\n\t\t\tconst long offsets[] = {\n\t\t\t\t\t6404096,  //5MPix 2592x1944\n\t\t\t\t\t2717696,  //1920x1080\n\t\t\t\t\t1625600,  //1296x972\n\t\t\t\t\t1233920,  //1296x730\n\t\t\t\t\t445440,   //640x480\n\t\t\t\t\t-1        //Marker for end of table\n\t\t\t};\n\t\t\tint offset_idx;\n\t\t\tfor (offset_idx = 0; offsets[offset_idx] != -1; offset_idx++) {\n\t\t\t\tif (!fseek(ifp, -offsets[offset_idx], SEEK_END) &&\n\t\t\t\t\tfread(head, 1, 32, ifp) && !strncmp(head, \"BRCM\", 4)) {\n\t\t\t\t\tfseek(ifp, -32, SEEK_CUR);\n\t\t\t\t\tstrcpy(make, \"OmniVision\");\n\t\t\t\t\twidth = raw_width;\n\t\t\t\t\t//Defaults\n\t\t\t\t\traw_width = 2611;\n\t\t\t\t\tfilters = 0x16161616;\n\t\t\t\t\tparse_raspberrypi();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t  }\n\t}// else is_raw = 0;\n#else\n    fseek(ifp, 0, SEEK_END);\n    int sz = ftell(ifp);\n    if (!strncmp(model, \"RP_imx219\", 9) && sz >= 0x9cb600 &&\n        !fseek(ifp, -0x9cb600, SEEK_END) && fread(head, 1, 0x20, ifp) &&\n        !strncmp(head, \"BRCM\", 4))\n    {\n      strcpy(make, \"Broadcom\");\n      strcpy(model, \"RPi IMX219\");\n      if (raw_height > raw_width)\n        flip = 5;\n      data_offset = ftell(ifp) + 0x8000 - 0x20;\n      parse_broadcom();\n      black = 66;\n      maximum = 0x3ff;\n      load_raw = &LibRaw::broadcom_load_raw;\n      thumb_offset = 0;\n      thumb_length = sz - 0x9cb600 - 1;\n    }\n    else if (!(strncmp(model, \"ov5647\", 6) && strncmp(model, \"RP_OV5647\", 9)) &&\n             sz >= 0x61b800 && !fseek(ifp, -0x61b800, SEEK_END) &&\n             fread(head, 1, 0x20, ifp) && !strncmp(head, \"BRCM\", 4))\n    {\n      strcpy(make, \"Broadcom\");\n      if (!strncmp(model, \"ov5647\", 6))\n        strcpy(model, \"RPi OV5647 v.1\");\n      else\n        strcpy(model, \"RPi OV5647 v.2\");\n      if (raw_height > raw_width)\n        flip = 5;\n      data_offset = ftell(ifp) + 0x8000 - 0x20;\n      parse_broadcom();\n      black = 16;\n      maximum = 0x3ff;\n      load_raw = &LibRaw::broadcom_load_raw;\n      thumb_offset = 0;\n      thumb_length = sz - 0x61b800 - 1;\n    }\n    else\n      is_raw = 0;\n#endif\n  }\n\n  // make sure strings are terminated\n  desc[511] = artist[63] = make[63] = model[63] = model2[63] = 0;\n\n  for (i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n  {\n    if (strcasestr(make, CorpTable[i].CorpName))\n    { /* Simplify company names */\n      maker_index = CorpTable[i].CorpId;\n      strcpy(make, CorpTable[i].CorpName);\n    }\n  }\n\n  if ((makeIs(LIBRAW_CAMERAMAKER_Kodak) || makeIs(LIBRAW_CAMERAMAKER_Leica)) &&\n      ((cp = strcasestr(model, \" DIGITAL CAMERA\")) ||\n       (cp = strstr(model, \"FILE VERSION\")))) {\n    *cp = 0;\n  } else if (makeIs(LIBRAW_CAMERAMAKER_Ricoh) && !strncasecmp(model, \"PENTAX\", 6)) {\n    maker_index = LIBRAW_CAMERAMAKER_Pentax;\n    strcpy(make, \"Pentax\");\n  } else if (makeIs(LIBRAW_CAMERAMAKER_JK_Imaging) && !strncasecmp(model, \"Kodak\", 5)) {\n    maker_index = LIBRAW_CAMERAMAKER_Kodak;\n    strcpy(make, \"Kodak\");\n  }\n\n  remove_trailing_spaces(make, sizeof(make));\n  remove_trailing_spaces(model, sizeof(model));\n\n  i = strbuflen(make); /* Remove make from model */\n  if (!strncasecmp(model, make, i) && model[i++] == ' ')\n    memmove(model, model + i, 64 - i);\n\n  if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm) && !strncmp(model, \"FinePix\", 7)) {\n    memmove(model, model + 7, strlen(model) - 6);\n    if (model[0] == ' ') {\n      memmove(model, model + 1, strlen(model));\n    }\n  } else if ((makeIs(LIBRAW_CAMERAMAKER_Kodak) || makeIs(LIBRAW_CAMERAMAKER_Konica)) &&\n           !strncmp(model, \"Digital Camera \", 15)) {\n    memmove(model, model + 15, strlen(model) - 14);\n  }\n\n  desc[511] = artist[63] = make[63] = model[63] = model2[63] = 0;\n  if (!is_raw)\n    goto notraw;\n\n  if (!height)\n    height = raw_height;\n  if (!width)\n    width = raw_width;\n\n  identify_finetune_pentax();\n\n\n  if (dng_version)\n  {\n    if (filters == UINT_MAX)\n      filters = 0;\n    if (!filters)\n      colors = tiff_samples;\n    switch (tiff_compress)\n    {\n    case 0: // Compression not set, assuming uncompressed\n    case 1:\n#ifdef USE_DNGSDK\n      // Uncompressed float\n      if (load_raw != &LibRaw::float_dng_load_raw_placeholder)\n#endif\n        load_raw = &LibRaw::packed_dng_load_raw;\n      break;\n    case 7:\n      load_raw = &LibRaw::lossless_dng_load_raw;\n      break;\n    case 8:\n      load_raw = &LibRaw::deflate_dng_load_raw;\n      break;\n#ifdef USE_GPRSDK\n    case 9:\n        load_raw = &LibRaw::vc5_dng_load_raw_placeholder;\n        break;\n#endif\n    case 34892:\n      load_raw = &LibRaw::lossy_dng_load_raw;\n      break;\n    default:\n      load_raw = 0;\n    }\n    GetNormalizedModel();\n    if (makeIs(LIBRAW_CAMERAMAKER_Olympus) &&\n        (OlyID == OlyID_STYLUS_1) && // don't use normalized_model below, it is 'Stylus 1'\n        (strchr(model+6, 's') ||\n         strchr(model+6, 'S')))\n    {\n      width -= 16;\n    }\n    goto dng_skip;\n  }\n\n  if (makeIs(LIBRAW_CAMERAMAKER_Canon) && !fsize && tiff_bps != 15)\n  {\n      bool fromtable = false;\n    if (!load_raw)\n      load_raw = &LibRaw::lossless_jpeg_load_raw;\n    for (i = 0; i < int(sizeof canon / sizeof *canon); i++)\n      if (raw_width == canon[i][0] && raw_height == canon[i][1])\n      {\n        width = raw_width - (left_margin = canon[i][2]);\n        height = raw_height - (top_margin = canon[i][3]);\n        width -= canon[i][4];\n        height -= canon[i][5];\n        mask[0][1] = canon[i][6];\n        mask[0][3] = -canon[i][7];\n        mask[1][1] = canon[i][8];\n        mask[1][3] = -canon[i][9];\n        if (canon[i][10])\n          filters = canon[i][10] * 0x01010101U;\n        fromtable = true;\n      }\n    if ((unique_id | 0x20000ULL) ==\n        0x2720000ULL) // \"PowerShot G11\", \"PowerShot S90\": 0x2700000, 0x2720000\n                      // possibly \"PowerShot SX120 IS\" (if not chdk hack?): 0x2710000\n    {\n      left_margin = 8;\n      top_margin = 16;\n    }\n    if(!fromtable && imgdata.makernotes.canon.AverageBlackLevel) // not known, but metadata known\n    {\n        FORC4 cblack[c] = imgdata.makernotes.canon.ChannelBlackLevel[c];\n        black = cblack[4] = cblack[5] = 0;\n        // Prevent automatic BL calculation\n        mask[0][3] = 1;\n        mask[0][1] = 2;\n\n        if(imgdata.makernotes.canon.SensorWidth == raw_width\n            && imgdata.makernotes.canon.SensorHeight == raw_height)\n        {\n            left_margin = (imgdata.makernotes.canon.SensorLeftBorder+1) & 0xfffe; // round to 2\n            width = imgdata.makernotes.canon.SensorRightBorder - left_margin;\n            top_margin = (imgdata.makernotes.canon.SensorTopBorder +1)  & 0xfffe;\n            height = imgdata.makernotes.canon.SensorBottomBorder - top_margin;\n        }\n    }\n  }\n\n  identify_finetune_by_filesize(fsize);\n\n  if (!strcmp(model, \"KAI-0340\") && find_green(16, 16, 3840, 5120) < 25)\n  {\n    height = 480;\n    top_margin = filters = 0;\n    strcpy(model, \"C603\");\n  }\n\n  GetNormalizedModel();\n\n  identify_finetune_dcr(head, fsize, flen);\n\n  /* Early reject for damaged images */\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 4 || colors > 4 ||\n      colors < 1\n      /* alloc in unpack() may be fooled by size adjust */\n      || ((int)width + (int)left_margin > 65535) ||\n      ((int)height + (int)top_margin > 65535))\n  {\n    is_raw = 0;\n    RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n    return;\n  }\n  if (!model[0])\n  {\n    sprintf(model, \"%dx%d\", width, height);\n    strcpy(normalized_model, model);\n  }\n\n  if (!(imgdata.params.raw_processing_options &\n        LIBRAW_PROCESSING_ZEROFILTERS_FOR_MONOCHROMETIFFS) &&\n      (filters == UINT_MAX)) // Default dcraw behaviour\n    filters = 0x94949494;\n  else if (filters == UINT_MAX)\n  {\n    if (tiff_nifds > 0 && tiff_samples == 1)\n    {\n      colors = 1;\n      filters = 0;\n    }\n    else\n      filters = 0x94949494;\n  }\n\n  if (thumb_offset && !thumb_height)\n  {\n    fseek(ifp, thumb_offset, SEEK_SET);\n    if (ljpeg_start(&jh, 1))\n    {\n      thumb_width = jh.wide;\n      thumb_height = jh.high;\n    }\n  }\n\ndng_skip:\n  if (dng_version)\n\t  identify_process_dng_fields();\n\n  /* Early reject for damaged images again (after dng fields processing) */\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 4 || colors > 4 || colors < 1)\n  {\n    is_raw = 0;\n    RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n    return;\n  }\n  {\n    // Check cam_mul range\n    int cmul_ok = 1;\n    FORCC if (cam_mul[c] <= 0.001f) cmul_ok = 0;\n    ;\n\n    if (cmul_ok)\n    {\n      double cmin = cam_mul[0], cmax;\n      double cnorm[4];\n      FORCC cmin = MIN(cmin, cam_mul[c]);\n      FORCC cnorm[c] = cam_mul[c] / cmin;\n      cmax = cmin = cnorm[0];\n      FORCC\n      {\n        cmin = MIN(cmin, cnorm[c]);\n        cmax = MIN(cmax, cnorm[c]);\n      }\n      if (cmin <= 0.01f || cmax > 100.f)\n        cmul_ok = false;\n    }\n    if (!cmul_ok)\n    {\n      if (cam_mul[0] > 0)\n        cam_mul[0] = 0;\n      cam_mul[3] = 0;\n    }\n  }\n  if ((use_camera_matrix & (((use_camera_wb || dng_version)?0:1) | 0x2)) &&\n      cmatrix[0][0] > 0.125)\n  {\n    memcpy(rgb_cam, cmatrix, sizeof cmatrix);\n    raw_color = 0;\n  }\n  if (raw_color && !CM_found)\n    CM_found = adobe_coeff(maker_index, normalized_model);\n  else if ((imgdata.color.cam_xyz[0][0] < 0.01) && !CM_found)\n    CM_found = adobe_coeff(maker_index, normalized_model, 1);\n\n  if (load_raw == &LibRaw::kodak_radc_load_raw)\n    if ((raw_color) && !CM_found)\n\t\tCM_found = adobe_coeff(LIBRAW_CAMERAMAKER_Apple, \"Quicktake\");\n\n  if ((maker_index != LIBRAW_CAMERAMAKER_Unknown) && normalized_model[0])\n    SetStandardIlluminants (maker_index, normalized_model);\n\n  // Clear erorneus fuji_width if not set through parse_fuji or for DNG\n  if (fuji_width && !dng_version &&\n      !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED))\n    fuji_width = 0;\n\n  if (fuji_width)\n  {\n    fuji_width = width >> !fuji_layout;\n    filters = fuji_width & 1 ? 0x94949494 : 0x49494949;\n    width = (height >> fuji_layout) + fuji_width;\n    height = width - 1;\n    pixel_aspect = 1;\n  }\n  else\n  {\n    if (raw_height < height)\n      raw_height = height;\n    if (raw_width < width)\n      raw_width = width;\n  }\n  if (!tiff_bps)\n    tiff_bps = 12;\n  if (!maximum)\n  {\n    maximum = (1 << tiff_bps) - 1;\n    if (maximum < 0x10000 && curve[maximum] > 0 &&\n        load_raw == &LibRaw::sony_arw2_load_raw)\n      maximum = curve[maximum];\n  }\n  if (maximum > 0xffff)\n    maximum = 0xffff;\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 6 || colors > 4)\n    is_raw = 0;\n\n  if (raw_width < 22 || raw_width > 64000 || raw_height < 22 ||\n      pixel_aspect < 0.1 || pixel_aspect > 10. ||\n      raw_height > 64000)\n    is_raw = 0;\n\n#ifdef NO_JASPER\n  if (load_raw == &LibRaw::redcine_load_raw)\n  {\n    is_raw = 0;\n    imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;\n  }\n#endif\n#ifdef NO_JPEG\n  if (load_raw == &LibRaw::kodak_jpeg_load_raw ||\n      load_raw == &LibRaw::lossy_dng_load_raw)\n  {\n    is_raw = 0;\n    imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;\n  }\n#endif\n  if (!cdesc[0])\n    strcpy(cdesc, colors == 3 ? \"RGBG\" : \"GMCY\");\n  if (!raw_height)\n    raw_height = height;\n  if (!raw_width)\n    raw_width = width;\n  if (filters > 999 && colors == 3)\n    filters |= ((filters >> 2 & 0x22222222) | (filters << 2 & 0x88888888)) &\n               filters << 1;\nnotraw:\n  if (flip == (int)UINT_MAX)\n    flip = tiff_flip;\n  if (flip == (int)UINT_MAX)\n    flip = 0;\n\n  // Convert from degrees to bit-field if needed\n  if (flip > 89 || flip < -89)\n  {\n    switch ((flip + 3600) % 360)\n    {\n    case 270:\n      flip = 5;\n      break;\n    case 180:\n      flip = 3;\n      break;\n    case 90:\n      flip = 6;\n      break;\n    }\n  }\n\n  if (pana_bpp)\n    imgdata.color.raw_bps = pana_bpp;\n  else if ((load_raw == &LibRaw::phase_one_load_raw) ||\n           (load_raw == &LibRaw::phase_one_load_raw_c))\n    imgdata.color.raw_bps = ph1.format;\n  else\n    imgdata.color.raw_bps = tiff_bps;\n\n  RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n}\n\nvoid LibRaw::identify_process_dng_fields()\n{\n\tif (!dng_version) return;\n\tint c;\n\t{\n\t\t/* copy DNG data from per-IFD field to color.dng */\n\t\tint iifd = find_ifd_by_offset(data_offset);\n\t\tint pifd = find_ifd_by_offset(thumb_offset);\n\n#define CFAROUND(value, filters)                                               \\\n  filters ? (filters >= 1000 ? ((value + 1) / 2) * 2 : ((value + 5) / 6) * 6)  \\\n          : value\n\n#define IFDCOLORINDEX(ifd, subset, bit)                                        \\\n  (tiff_ifd[ifd].dng_color[subset].parsedfields & bit)                         \\\n      ? ifd                                                                    \\\n      : ((tiff_ifd[0].dng_color[subset].parsedfields & bit) ? 0 : -1)\n\n#define IFDLEVELINDEX(ifd, bit)                                                \\\n  (tiff_ifd[ifd].dng_levels.parsedfields & bit)                                \\\n      ? ifd                                                                    \\\n      : ((tiff_ifd[0].dng_levels.parsedfields & bit) ? 0 : -1)\n\n#define COPYARR(to, from) memmove(&to, &from, sizeof(from))\n\n\t\tif (iifd < (int)tiff_nifds && iifd >= 0)\n\t\t{\n\t\t\tint sidx;\n\t\t\t// Per field, not per structure\n\t\t\tif (!(imgdata.params.raw_processing_options &\n\t\t\t\tLIBRAW_PROCESSING_DONT_CHECK_DNG_ILLUMINANT))\n\t\t\t{\n\t\t\t\tint illidx[2], cmidx[2], calidx[2], abidx;\n\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t{\n\t\t\t\t\tillidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_ILLUMINANT);\n\t\t\t\t\tcmidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_COLORMATRIX);\n\t\t\t\t\tcalidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_CALIBRATION);\n\t\t\t\t}\n\t\t\t\tabidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ANALOGBALANCE);\n\t\t\t\t// Data found, all in same ifd, illuminants are inited\n\t\t\t\tif (illidx[0] >= 0 && illidx[0] < (int)tiff_nifds &&\n\t\t\t\t\tillidx[0] == illidx[1] && illidx[0] == cmidx[0] &&\n\t\t\t\t\tillidx[0] == cmidx[1] &&\n\t\t\t\t\ttiff_ifd[illidx[0]].dng_color[0].illuminant > 0 &&\n\t\t\t\t\ttiff_ifd[illidx[0]].dng_color[1].illuminant > 0)\n\t\t\t\t{\n\t\t\t\t\tsidx = illidx[0]; // => selected IFD\n\t\t\t\t\tdouble cc[4][4], cm[4][3], cam_xyz[4][3];\n\t\t\t\t\t// CM -> Color Matrix\n\t\t\t\t\t// CC -> Camera calibration\n\t\t\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t\t\t\t\tcc[j][i] = i == j;\n\t\t\t\t\tint colidx = -1;\n\n\t\t\t\t\t// IS D65 here?\n\t\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (tiff_ifd[sidx].dng_color[i].illuminant == LIBRAW_WBI_D65)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolidx = i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Other daylight-type ill\n\t\t\t\t\tif (colidx < 0)\n\t\t\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ill = tiff_ifd[sidx].dng_color[i].illuminant;\n\t\t\t\t\t\t\tif (ill == LIBRAW_WBI_Daylight || ill == LIBRAW_WBI_D55 ||\n\t\t\t\t\t\t\t\till == LIBRAW_WBI_D75 || ill == LIBRAW_WBI_D50 ||\n\t\t\t\t\t\t\t\till == LIBRAW_WBI_Flash)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolidx = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tif (colidx >= 0) // Selected\n\t\t\t\t\t{\n\t\t\t\t\t\t// Init camera matrix from DNG\n\t\t\t\t\t\tFORCC for (int j = 0; j < 3; j++) cm[c][j] =\n\t\t\t\t\t\t\ttiff_ifd[sidx].dng_color[colidx].colormatrix[c][j];\n\n\t\t\t\t\t\tif (calidx[colidx] == sidx)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (int i = 0; i < colors; i++)\n\t\t\t\t\t\t\t\tFORCC\n\t\t\t\t\t\t\t\tcc[i][c] = tiff_ifd[sidx].dng_color[colidx].calibration[i][c];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (abidx == sidx)\n\t\t\t\t\t\t\tfor (int i = 0; i < colors; i++)\n\t\t\t\t\t\t\t\tFORCC cc[i][c] *= tiff_ifd[sidx].dng_levels.analogbalance[i];\n\t\t\t\t\t\tint j;\n\t\t\t\t\t\tFORCC for (int i = 0; i < 3; i++) for (cam_xyz[c][i] = j = 0;\n\t\t\t\t\t\t\tj < colors; j++)\n\t\t\t\t\t\t\tcam_xyz[c][i] +=\n\t\t\t\t\t\t\tcc[c][j] * cm[j][i]; // add AsShotXY later * xyz[i];\n\t\t\t\t\t\tcam_xyz_coeff(cmatrix, cam_xyz);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbool noFujiDNGCrop = makeIs(LIBRAW_CAMERAMAKER_Fujifilm)\n\t\t\t\t&& (!strcmp(normalized_model, \"S3Pro\")\n\t\t\t\t\t|| !strcmp(normalized_model, \"S5Pro\")\n\t\t\t\t\t|| !strcmp(normalized_model, \"S2Pro\"));\n\n\t\t\tif (!noFujiDNGCrop &&\n\t\t\t\t(imgdata.params.raw_processing_options &LIBRAW_PROCESSING_USE_DNG_DEFAULT_CROP))\n\t\t\t{\n\t\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_CROPORIGIN);\n\t\t\t\tint sidx2 = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_CROPSIZE);\n\t\t\t\tif (sidx >= 0 && sidx == sidx2 &&\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.default_crop[2] > 0 &&\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.default_crop[3] > 0)\n\t\t\t\t{\n\t\t\t\t\tint lm = tiff_ifd[sidx].dng_levels.default_crop[0];\n\t\t\t\t\tint lmm = CFAROUND(lm, filters);\n\t\t\t\t\tint tm = tiff_ifd[sidx].dng_levels.default_crop[1];\n\t\t\t\t\tint tmm = CFAROUND(tm, filters);\n\t\t\t\t\tint ww = tiff_ifd[sidx].dng_levels.default_crop[2];\n\t\t\t\t\tint hh = tiff_ifd[sidx].dng_levels.default_crop[3];\n\t\t\t\t\tif (lmm > lm)\n\t\t\t\t\t\tww -= (lmm - lm);\n\t\t\t\t\tif (tmm > tm)\n\t\t\t\t\t\thh -= (tmm - tm);\n\t\t\t\t\tif (left_margin + lm + ww <= raw_width &&\n\t\t\t\t\t\ttop_margin + tm + hh <= raw_height)\n\t\t\t\t\t{\n\t\t\t\t\t\tleft_margin += lmm;\n\t\t\t\t\t\ttop_margin += tmm;\n\t\t\t\t\t\twidth = ww;\n\t\t\t\t\t\theight = hh;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(imgdata.color.dng_color[0].parsedfields &\n\t\t\t\tLIBRAW_DNGFM_FORWARDMATRIX)) // Not set already (Leica makernotes)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, 0, LIBRAW_DNGFM_FORWARDMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[0].forwardmatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[0].forwardmatrix);\n\t\t\t}\n\t\t\tif (!(imgdata.color.dng_color[1].parsedfields &\n\t\t\t\tLIBRAW_DNGFM_FORWARDMATRIX)) // Not set already (Leica makernotes)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, 1, LIBRAW_DNGFM_FORWARDMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[1].forwardmatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[1].forwardmatrix);\n\t\t\t}\n\t\t\tfor (int ss = 0; ss < 2; ss++)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_COLORMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[ss].colormatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].colormatrix);\n\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_CALIBRATION);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[ss].calibration,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].calibration);\n\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_ILLUMINANT);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\timgdata.color.dng_color[ss].illuminant =\n\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].illuminant;\n\t\t\t}\n\t\t\t// Levels\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ANALOGBALANCE);\n\t\t\tif (sidx >= 0)\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.analogbalance,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.analogbalance);\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_BASELINEEXPOSURE);\n\t\t\tif (sidx >= 0)\n\t\t\t\timgdata.color.dng_levels.baseline_exposure =\n\t\t\t\ttiff_ifd[sidx].dng_levels.baseline_exposure;\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_WHITE);\n\t\t\tif (sidx >= 0 && tiff_ifd[sidx].dng_levels.dng_whitelevel[0])\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_whitelevel,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_whitelevel);\n\t\t\telse if (tiff_ifd[iifd].sample_format <= 2 && tiff_ifd[iifd].bps > 0 && tiff_ifd[iifd].bps < 32)\n\t\t\t\tFORC4\n\t\t\t\timgdata.color.dng_levels.dng_whitelevel[c] = (1 << tiff_ifd[iifd].bps) - 1;\n\n\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ASSHOTNEUTRAL);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.asshotneutral,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.asshotneutral);\n\t\t\t\tif (imgdata.color.dng_levels.asshotneutral[0])\n\t\t\t\t{\n\t\t\t\t\tcam_mul[3] = 0;\n\t\t\t\t\tFORCC\n\t\t\t\t\t\tif (fabs(imgdata.color.dng_levels.asshotneutral[c]) > 0.0001)\n\t\t\t\t\t\t\tcam_mul[c] = 1 / imgdata.color.dng_levels.asshotneutral[c];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_BLACK);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\timgdata.color.dng_levels.dng_fblack =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_fblack;\n\t\t\t\timgdata.color.dng_levels.dng_black =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_black;\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_cblack,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_cblack);\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_fcblack,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_fcblack);\n\t\t\t}\n\n\n\t\t\tif (pifd >= 0)\n\t\t\t{\n\t\t\t\tsidx = IFDLEVELINDEX(pifd, LIBRAW_DNGFM_PREVIEWCS);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\timgdata.color.dng_levels.preview_colorspace =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.preview_colorspace;\n\t\t\t}\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_OPCODE2);\n\t\t\tif (sidx >= 0)\n\t\t\t\tmeta_offset = tiff_ifd[sidx].opcode2_offset;\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_LINTABLE);\n\t\t\tINT64 linoff = -1;\n\t\t\tint linlen = 0;\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\tlinoff = tiff_ifd[sidx].lineartable_offset;\n\t\t\t\tlinlen = tiff_ifd[sidx].lineartable_len;\n\t\t\t}\n\n\t\t\tif (linoff >= 0 && linlen > 0)\n\t\t\t{\n\t\t\t\tINT64 pos = ftell(ifp);\n\t\t\t\tfseek(ifp, linoff, SEEK_SET);\n\t\t\t\tlinear_table(linlen);\n\t\t\t\tfseek(ifp, pos, SEEK_SET);\n\t\t\t}\n\t\t\t// Need to add curve too\n\t\t}\n\t\t/* Copy DNG black level to LibRaw's */\n\t\tif (load_raw == &LibRaw::lossy_dng_load_raw)\n\t\t{\n\t\t\tmaximum = 0xffff;\n\t\t\tFORC4 imgdata.color.linear_max[c] = imgdata.color.dng_levels.dng_whitelevel[c] = 0xffff;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaximum = imgdata.color.dng_levels.dng_whitelevel[0];\n\t\t}\n\t\tblack = imgdata.color.dng_levels.dng_black;\n\n\t\tif (tiff_samples == 2 && imgdata.color.dng_levels.dng_cblack[4] * imgdata.color.dng_levels.dng_cblack[5] * tiff_samples\n\t\t\t== imgdata.color.dng_levels.dng_cblack[LIBRAW_CBLACK_SIZE - 1])\n\t\t{\n\t\t\tunsigned ff = filters;\n\t\t\tif (filters > 999 && colors == 3)\n\t\t\t\tfilters |= ((filters >> 2 & 0x22222222) | (filters << 2 & 0x88888888)) &\n\t\t\t\tfilters << 1;\n\n\t\t\t/* Special case, Fuji SuperCCD dng */\n\t\t\tint csum[4] = { 0,0,0,0 }, ccount[4] = { 0,0,0,0 };\n\t\t\tint i = 6 + shot_select;\n\t\t\tfor (unsigned row = 0; row < imgdata.color.dng_levels.dng_cblack[4]; row++)\n\t\t\t\tfor (unsigned col = 0; col < imgdata.color.dng_levels.dng_cblack[5]; col++)\n\t\t\t\t{\n\t\t\t\t\tcsum[FC(row, col)] += imgdata.color.dng_levels.dng_cblack[i];\n\t\t\t\t\tccount[FC(row, col)]++;\n\t\t\t\t\ti += tiff_samples;\n\t\t\t\t}\n\t\t\tfor (int c = 0; c < 4; c++)\n\t\t\t\tif (ccount[c])\n\t\t\t\t\timgdata.color.dng_levels.dng_cblack[c] += csum[c] / ccount[c];\n\t\t\timgdata.color.dng_levels.dng_cblack[4] = imgdata.color.dng_levels.dng_cblack[5] = 0;\n\t\t\tfilters = ff;\n\t\t}\n\t\telse if (tiff_samples > 2 && tiff_samples <= 4 && imgdata.color.dng_levels.dng_cblack[4] * imgdata.color.dng_levels.dng_cblack[5] * tiff_samples\n\t\t\t== imgdata.color.dng_levels.dng_cblack[LIBRAW_CBLACK_SIZE - 1])\n\t\t{\n\t\t\t/* Special case, per_channel blacks in RepeatDim, average for per-channel */\n\t\t\tint csum[4] = { 0,0,0,0 }, ccount[4] = { 0,0,0,0 };\n\t\t\tint i = 6;\n\t\t\tfor (unsigned row = 0; row < imgdata.color.dng_levels.dng_cblack[4]; row++)\n\t\t\t\tfor (unsigned col = 0; col < imgdata.color.dng_levels.dng_cblack[5]; col++)\n\t\t\t\t\tfor (unsigned c = 0; c < tiff_samples; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcsum[c] += imgdata.color.dng_levels.dng_cblack[i];\n\t\t\t\t\t\tccount[c]++;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\tfor (int c = 0; c < 4; c++)\n\t\t\t\tif (ccount[c])\n\t\t\t\t\timgdata.color.dng_levels.dng_cblack[c] += csum[c] / ccount[c];\n\t\t\timgdata.color.dng_levels.dng_cblack[4] = imgdata.color.dng_levels.dng_cblack[5] = 0;\n\t\t}\n\n\t\tmemmove(cblack, imgdata.color.dng_levels.dng_cblack, sizeof(cblack));\n\n\t\tif (iifd < (int)tiff_nifds && iifd >= 0)\n\t\t{\n\t\t\tint sidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_LINEARRESPONSELIMIT);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\timgdata.color.dng_levels.LinearResponseLimit =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.LinearResponseLimit;\n\t\t\t\tif (imgdata.color.dng_levels.LinearResponseLimit > 0.1 &&\n\t\t\t\t\timgdata.color.dng_levels.LinearResponseLimit <= 1.0)\n\t\t\t\t{\n\t\t\t\t\t// And approx promote it to linear_max:\n\t\t\t\t\tint bl4 = 0, bl64 = 0;\n\t\t\t\t\tfor (int chan = 0; chan < colors && chan < 4; chan++)\n\t\t\t\t\t\tbl4 += cblack[chan];\n\t\t\t\t\tbl4 /= LIM(colors, 1, 4);\n\n\t\t\t\t\tif (cblack[4] * cblack[5] > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tunsigned cnt = 0;\n\t\t\t\t\t\tfor (unsigned c = 0; c < 4096 && c < cblack[4] * cblack[5]; c++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbl64 += cblack[c + 6];\n\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbl64 /= LIM(cnt, 1, 4096);\n\t\t\t\t\t}\n\t\t\t\t\tint rblack = black + bl4 + bl64;\n\t\t\t\t\tfor (int chan = 0; chan < colors && chan < 4; chan++)\n\t\t\t\t\t\timgdata.color.linear_max[chan] =\n\t\t\t\t\t\t(maximum - rblack) *\n\t\t\t\t\t\timgdata.color.dng_levels.LinearResponseLimit +\n\t\t\t\t\t\trblack;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid LibRaw::identify_finetune_pentax()\n{\n\tif (makeIs(LIBRAW_CAMERAMAKER_Pentax) ||\n\t\tmakeIs(LIBRAW_CAMERAMAKER_Samsung)) {\n\t\tif (height == 2624 &&\n\t\t\twidth == 3936) // Pentax K10D, Samsung GX10;\n\t\t{\n\t\t\theight = 2616;\n\t\t\twidth = 3896;\n\t\t}\n\t\tif (height == 3136 &&\n\t\t\twidth == 4864) // Pentax K20D, Samsung GX20;\n\t\t{\n\t\t\theight = 3124;\n\t\t\twidth = 4688;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t}\n\n\tif (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {\n\t\tif ((width == 4352) &&\n\t\t\t((unique_id == PentaxID_K_r) ||\n\t\t\t(unique_id == PentaxID_K_x)))\n\t\t{\n\t\t\twidth = 4309;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif ((width >= 4960) &&\n\t\t\t((unique_id == PentaxID_K_5) ||\n\t\t\t(unique_id == PentaxID_K_5_II) ||\n\t\t\t\t(unique_id == PentaxID_K_5_II_s)))\n\t\t{\n\t\t\tleft_margin = 10;\n\t\t\twidth = 4950;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_70))\n\t\t{\n\t\t\theight = 4016;\n\t\t\ttop_margin = 32;\n\t\t\twidth = 6020;\n\t\t\tleft_margin = 60;\n\t\t}\n\t\tif ((width == 4736) && (unique_id == PentaxID_K_7))\n\t\t{\n\t\t\theight = 3122;\n\t\t\twidth = 4684;\n\t\t\tfilters = 0x16161616;\n\t\t\ttop_margin = 2;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_3_II))\n\t\t{\n\t\t\tleft_margin = 4;\n\t\t\twidth = 6040;\n\t\t}\n\t\tif ((width == 6112) && (unique_id == PentaxID_KP))\n\t\t{\n\t\t\t// From DNG, maybe too strict\n\t\t\tleft_margin = 54;\n\t\t\ttop_margin = 28;\n\t\t\twidth = 6028;\n\t\t\theight = raw_height - top_margin;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_3))\n\t\t{\n\t\t\tleft_margin = 4;\n\t\t\twidth = 6040;\n\t\t}\n\t\tif ((width == 7424) && (unique_id == PentaxID_645D))\n\t\t{\n\t\t\theight = 5502;\n\t\t\twidth = 7328;\n\t\t\tfilters = 0x61616161;\n\t\t\ttop_margin = 29;\n\t\t\tleft_margin = 48;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Ricoh) &&\n\t\t(height == 3014) && (width == 4096))  // Ricoh GX200\n\t\twidth = 4014;\n}\n\nvoid LibRaw::identify_finetune_by_filesize(int fsize)\n{\n\n\tif (fsize == 4771840)\n\t{ // hack Nikon 3mpix: E880, E885, E990, E995;\n\t  // Olympus C-3030Z\n\t\tif (!timestamp && nikon_e995())\n\t\t\tstrcpy(model, \"E995\");\n\t}\n\telse if (fsize == 2940928)\n\t{ // hack Nikon 2mpix: E2100, E2500\n\t\tif (!timestamp && !nikon_e2100())\n\t\t\tstrcpy(model, \"E2500\");\n\t}\n\telse if (fsize == 4775936)\n\t{ // hack Nikon 3mpix: E3100, E3200, E3500, E3700;\n\t  // Pentax \"Optio 33WR\";\n\t  // Olympus C-740UZ\n\t\tif (!timestamp)\n\t\t\tnikon_3700();\n\t}\n\telse if (fsize == 5869568)\n\t{ // hack Nikon 4mpix: E4300;\n\t  // hack Minolta \"DiMAGE Z2\"\n\t\tif (!timestamp && minolta_z2())\n\t\t{\n\t\t\tmaker_index = LIBRAW_CAMERAMAKER_Minolta;\n\t\t\tstrcpy(make, \"Minolta\");\n\t\t\tstrcpy(model, \"DiMAGE Z2\");\n\t\t}\n\t}\n}\n\nvoid LibRaw::identify_finetune_dcr(char head[64], int fsize, int flen)\n{\n\tstatic const short pana[][6] = {\n\t\t// raw_width, raw_height, left_margin, top_margin, width_increment,\n\t\t// height_increment\n\t\t{3130, 1743, 4, 0, -6, 0},      /* 00 */\n\t\t{3130, 2055, 4, 0, -6, 0},      /* 01 */\n\t\t{3130, 2319, 4, 0, -6, 0},      /* 02 DMC-FZ8 */\n\t\t{3170, 2103, 18, 0, -42, 20},   /* 03 */\n\t\t{3170, 2367, 18, 13, -42, -21}, /* 04 */\n\t\t{3177, 2367, 0, 0, -1, 0},      /* 05 DMC-L1 */\n\t\t{3304, 2458, 0, 0, -1, 0},      /* 06 DMC-FZ30 */\n\t\t{3330, 2463, 9, 0, -5, 0},      /* 07 DMC-FZ18 */\n\t\t{3330, 2479, 9, 0, -17, 4},     /* 08 */\n\t\t{3370, 1899, 15, 0, -44, 20},   /* 09 */\n\t\t{3370, 2235, 15, 0, -44, 20},   /* 10 */\n\t\t{3370, 2511, 15, 10, -44, -21}, /* 11 */\n\t\t{3690, 2751, 3, 0, -8, -3},     /* 12 DMC-FZ50 */\n\t\t{3710, 2751, 0, 0, -3, 0},      /* 13 DMC-L10 */\n\t\t{3724, 2450, 0, 0, 0, -2},      /* 14 */\n\t\t{3770, 2487, 17, 0, -44, 19},   /* 15 */\n\t\t{3770, 2799, 17, 15, -44, -19}, /* 16 */\n\t\t{3880, 2170, 6, 0, -6, 0},      /* 17 DMC-LX1 */\n\t\t{4060, 3018, 0, 0, 0, -2},      /* 18 DMC-FZ35, DMC-FZ38 */\n\t\t{4290, 2391, 3, 0, -8, -1},     /* 19 DMC-LX2 */\n\t\t{4330, 2439, 17, 15, -44, -19}, /* 20 \"D-LUX 3\" */\n\t\t{4508, 2962, 0, 0, -3, -4},     /* 21 */\n\t\t{4508, 3330, 0, 0, -3, -6},     /* 22 */\n\t\t{10480, 7794, 0, 0, -2, 0},     /* 23: G9 in high-res */\n\t};\n\tint i,c;\n\tstruct jhead jh;\n\n\tif (makeIs(LIBRAW_CAMERAMAKER_Canon) && !tiff_flip && imCanon.MakernotesFlip)\n\t{\n\t\ttiff_flip = imCanon.MakernotesFlip;\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Nikon))\n\t{\n\t\tif (!load_raw)\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\tif (model[0] == 'E') // Nikon E8800, E8700, E8400, E5700, E5400, E5000,\n\t\t\t\t\t\t\t // others are diag hacks?\n\t\t\tload_flags |= !data_offset << 2 | 2;\n\t}\n\t/* Set parameters based on camera name (for non-DNG files). */\n\n\t/* Always 512 for arw2_load_raw */\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sony) &&\n\t\t(raw_width > 3888) && !black && !cblack[0])\n\t{\n\t\tblack = (load_raw == &LibRaw::sony_arw2_load_raw)\n\t\t\t? 512\n\t\t\t: (128 << (tiff_bps - 12));\n\t}\n\n\tif (is_foveon) {\n\t\tif (height * 2 < width)\n\t\t\tpixel_aspect = 0.5;\n\t\tif (height > width)\n\t\t\tpixel_aspect = 2;\n\t\tfilters = 0;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {\n\t\tif ((unique_id == PentaxID_K_1) ||\n\t\t\t(unique_id == PentaxID_K_1_Mark_II)) {\n\t\t\ttop_margin = 18;\n\t\t\theight = raw_height - top_margin;\n\t\t\tif (raw_width == 7392) {\n\t\t\t\tleft_margin = 6;\n\t\t\t\twidth = 7376;\n\t\t\t}\n\n\t\t}\n\t\telse if (unique_id == PentaxID_Optio_S_V101) { // (fsize == 3178560)\n\t\t\tcam_mul[0] *= 4;\n\t\t\tcam_mul[2] *= 4;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_Optio_33WR) { // (fsize == 4775936)\n\t\t\tflip = 1;\n\t\t\tfilters = 0x16161616;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_staristD) {\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tdata_error = -1;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_staristDS) {\n\t\t\theight -= 2;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Canon)) {\n\t\tif (tiff_bps == 15) { // Canon sRAW\n\t\t\tif (width == 3344)\n\t\t\t\twidth = 3272;\n\t\t\telse if (width == 3872)\n\t\t\t\twidth = 3866;\n\n\t\t\tif (height > width) {\n\t\t\t\tSWAP(height, width);\n\t\t\t\tSWAP(raw_height, raw_width);\n\t\t\t}\n\t\t\tif (width == 7200 &&\n\t\t\t\theight == 3888) { // Canon EOS 5DS (R);\n\t\t\t\traw_width = width = 6480;\n\t\t\t\traw_height = height = 4320;\n\t\t\t}\n\t\t\tfilters = 0;\n\t\t\ttiff_samples = colors = 3;\n\t\t\tload_raw = &LibRaw::canon_sraw_load_raw;\n\t\t}\n\n\t\tif (!strcmp(normalized_model, \"PowerShot 600\")) {\n\t\t\theight = 613;\n\t\t\twidth = 854;\n\t\t\traw_width = 896;\n\t\t\tcolors = 4;\n\t\t\tfilters = 0xe1e4e1e4;\n\t\t\tload_raw = &LibRaw::canon_600_load_raw;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A5\") ||\n\t\t\t!strcmp(normalized_model, \"PowerShot A5 Zoom\")) {\n\t\t\theight = 773;\n\t\t\twidth = 960;\n\t\t\traw_width = 992;\n\t\t\tpixel_aspect = 256 / 235.0;\n\t\t\tfilters = 0x1e4e1e4e;\n\t\t\tgoto canon_a5;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A50\")) {\n\t\t\theight = 968;\n\t\t\twidth = 1290;\n\t\t\traw_width = 1320;\n\t\t\tfilters = 0x1b4e4b1e;\n\t\t\tgoto canon_a5;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot Pro70\")) {\n\t\t\theight = 1024;\n\t\t\twidth = 1552;\n\t\t\tfilters = 0x1e4b4e1b;\n\t\tcanon_a5:\n\t\t\tcolors = 4;\n\t\t\ttiff_bps = 10;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t\tload_flags = 40;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot Pro90 IS\") ||\n\t\t\t!strcmp(normalized_model, \"PowerShot G1\")) {\n\t\t\tcolors = 4;\n\t\t\tfilters = 0xb4b4b4b4;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A610\")) { // chdk hack\n\t\t\tif (canon_s2is())\n\t\t\t\tstrcpy(model + 10, \"S2 IS\"); // chdk hack\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot SX220 HS\")) { // chdk hack\n\t\t\tmask[1][3] = -4;\n\t\t\ttop_margin = 16;\n\t\t\tleft_margin = 92;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot S120\")) { // chdk hack\n\t\t\traw_width = 4192;\n\t\t\traw_height = 3062;\n\t\t\twidth = 4022;\n\t\t\theight = 3016;\n\t\t\tmask[0][0] = top_margin = 31;\n\t\t\tmask[0][2] = top_margin + height;\n\t\t\tleft_margin = 120;\n\t\t\tmask[0][1] = 23;\n\t\t\tmask[0][3] = 72;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot G16\")) {\n\t\t\tmask[0][0] = 0;\n\t\t\tmask[0][2] = 80;\n\t\t\tmask[0][1] = 0;\n\t\t\tmask[0][3] = 16;\n\t\t\ttop_margin = 29;\n\t\t\tleft_margin = 120;\n\t\t\twidth = raw_width - left_margin - 48;\n\t\t\theight = raw_height - top_margin - 14;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot SX50 HS\")) {\n\t\t\ttop_margin = 17;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Nikon)) {\n\t\tif (!strcmp(model, \"D1\"))\n\t\t{\n\t\t\timgdata.other.analogbalance[0] = cam_mul[0];\n\t\t\timgdata.other.analogbalance[2] = cam_mul[2];\n\t\t\timgdata.other.analogbalance[1] = imgdata.other.analogbalance[3] =\n\t\t\t\tcam_mul[1];\n\t\t\tcam_mul[0] = cam_mul[1] = cam_mul[2] = 1.0f;\n\t\t}\n\n\t\telse if (!strcmp(model, \"D1X\"))\n\t\t{\n\t\t\twidth -= 4;\n\t\t\tpixel_aspect = 0.5;\n\t\t}\n\t\telse if (!strcmp(model, \"D40X\") ||\n\t\t\t!strcmp(model, \"D60\") ||\n\t\t\t!strcmp(model, \"D80\") ||\n\t\t\t!strcmp(model, \"D3000\"))\n\t\t{\n\t\t\theight -= 3;\n\t\t\twidth -= 4;\n\t\t}\n\t\telse if (!strcmp(model, \"D3\") ||\n\t\t\t!strcmp(model, \"D3S\") ||\n\t\t\t!strcmp(model, \"D700\"))\n\t\t{\n\t\t\twidth -= 4;\n\t\t\tleft_margin = 2;\n\t\t}\n\t\telse if (!strcmp(model, \"D3100\"))\n\t\t{\n\t\t\twidth -= 28;\n\t\t\tleft_margin = 6;\n\t\t}\n\t\telse if (!strcmp(model, \"D5000\") ||\n\t\t\t!strcmp(model, \"D90\"))\n\t\t{\n\t\t\twidth -= 42;\n\t\t}\n\t\telse if (!strcmp(model, \"D5100\") ||\n\t\t\t!strcmp(model, \"D7000\") ||\n\t\t\t!strcmp(model, \"COOLPIX A\"))\n\t\t{\n\t\t\twidth -= 44;\n\t\t}\n\t\telse if (!strcmp(model, \"D3200\") ||\n\t\t\t!strcmp(model, \"D600\") ||\n\t\t\t!strcmp(model, \"D610\") ||\n\t\t\t!strncmp(model, \"D800\", 4)) // Nikons: D800, D800E\n\t\t{\n\t\t\twidth -= 46;\n\t\t}\n\t\telse if (!strcmp(model, \"D4\") ||\n\t\t\t!strcmp(model, \"Df\"))\n\t\t{\n\t\t\twidth -= 52;\n\t\t\tleft_margin = 2;\n\t\t}\n\t\telse if (!strcmp(model, \"D500\"))\n\t\t{\n\t\t\t// Empty - to avoid width-1 below\n\t\t}\n\t\telse if (!strncmp(model, \"D40\", 3) ||\n\t\t\t!strncmp(model, \"D50\", 3) ||\n\t\t\t!strncmp(model, \"D70\", 3))\n\t\t{\n\t\t\twidth--;\n\t\t}\n\t\telse if (!strcmp(model, \"D100\"))\n\t\t{\n\t\t\tif (load_flags) // compressed NEF\n\t\t\t\traw_width = (width += 3) + 3;\n\t\t}\n\t\telse if (!strcmp(model, \"D200\"))\n\t\t{\n\t\t\tleft_margin = 1;\n\t\t\twidth -= 4;\n\t\t\tfilters = 0x94949494;\n\t\t}\n\t\telse if (!strncmp(model, \"D2H\", 3)) // Nikons: D2H, D2Hs\n\t\t{\n\t\t\tleft_margin = 6;\n\t\t\twidth -= 14;\n\t\t}\n\t\telse if (!strncmp(model, \"D2X\", 3)) // Nikons: D2X, D2Xs\n\t\t{\n\t\t\tif (width == 3264) // in-camera Hi-speed crop: On\n\t\t\t\twidth -= 32;\n\t\t\telse\n\t\t\t\twidth -= 8;\n\t\t}\n\t\telse if (!strncmp(model, \"D300\", 4)) // Nikons: D300, D300s\n\t\t{\n\t\t\twidth -= 32;\n\t\t}\n\t\telse if (raw_width == 4032) // Nikon \"COOLPIX P7700\", \"COOLPIX P7800\",\n\t\t\t\t\t\t\t\t\t// \"COOLPIX P330\", \"COOLPIX P340\"\n\t\t{\n\t\t\tif (!strcmp(normalized_model, \"COOLPIX P7700\"))\n\t\t\t{\n\t\t\t\tmaximum = 65504;\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t\telse if (!strcmp(normalized_model, \"COOLPIX P7800\"))\n\t\t\t{\n\t\t\t\tmaximum = 65504;\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"COOLPIX P340\"))\n\t\t\t{\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t}\n\t\telse if (!strncmp(model, \"COOLPIX P\", 9) &&\n\t\t\traw_width != 4032) // Nikon \"COOLPIX P1000\", \"COOLPIX P6000\",\n\t\t\t\t\t\t\t   // \"COOLPIX P7000\", \"COOLPIX P7100\"\n\t\t{\n\t\t\tload_flags = 24;\n\t\t\tfilters = 0x94949494;\n\t\t\t/* the following 'if' is most probably obsolete, because we now read black\n\t\t\t * level from metadata */\n\t\t\tif ((model[9] == '7') && /* P7000, P7100 */\n\t\t\t\t((iso_speed >= 400) || (iso_speed == 0)) &&\n\t\t\t\t!strstr(software, \"V1.2\")) /* v. 1.2 seen for P7000 only */\n\t\t\t\tblack = 255;\n\t\t}\n\t\telse if (!strncmp(model, \"COOLPIX B700\", 12))\n\t\t{\n\t\t\tload_flags = 24;\n\t\t}\n\t\telse if (!strncmp(model, \"1 \",\n\t\t\t2)) // Nikons: \"1 AW1\", \"1 J1\", \"1 J2\", \"1 J3\", \"1 J4\",\n\t\t\t\t// \"1 J5\", \"1 S1\", \"1 S2\", \"1 V1\", \"1 V2\", \"1 V3\"\n\t\t{\n\t\t\theight -= 2;\n\t\t}\n\t\telse if (fsize == 1581060) // hack Nikon 1mpix: E900\n\t\t{\n\t\t\tsimple_coeff(3);\n\t\t\tpre_mul[0] = 1.2085;\n\t\t\tpre_mul[1] = 1.0943;\n\t\t\tpre_mul[3] = 1.1103;\n\t\t}\n\t\telse if ((fsize == 4771840) &&  // hack Nikon 3mpix: E880, E885, E990\n\t\t\tstrcmp(model, \"E995\")) // but not E995\n\t\t{\n\t\t\tfilters = 0xb4b4b4b4;\n\t\t\tsimple_coeff(3);\n\t\t\tpre_mul[0] = 1.196;\n\t\t\tpre_mul[1] = 1.246;\n\t\t\tpre_mul[2] = 1.018;\n\t\t}\n\t\telse if ((fsize == 4775936) && // hack Nikon 3mpix: E3100, E3200, E3500\n\t\t\t(atoi(model + 1) < 3700)) // but not E3700;\n\t\t{\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (fsize == 5869568) // hack Nikon 4mpix: E4300;\n\t\t{\n\t\t\tload_flags = 6;\n\t\t}\n\t\telse if (!strcmp(model, \"E2500\"))\n\t\t{\n\t\t\theight -= 2;\n\t\t\tload_flags = 6;\n\t\t\tcolors = 4;\n\t\t\tfilters = 0x4b4b4b4b;\n\t\t}\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Olympus)) {\n\t\tif (OlyID == OlyID_C_740UZ) { // (fsize == 4775936)\n\t\t\ti = find_green(12, 32, 1188864, 3576832);\n\t\t\tc = find_green(12, 32, 2383920, 2387016);\n\t\t\tif (abs(i) < abs(c)) {\n\t\t\t\tSWAP(i, c);\n\t\t\t\tload_flags = 24;\n\t\t\t}\n\t\t\tif (i < 0)\n\t\t\t\tfilters = 0x61616161;\n\t\t}\n\t\telse if (OlyID == OlyID_C_770UZ) {\n\t\t\theight = 1718;\n\t\t\twidth = 2304;\n\t\t\tfilters = 0x16161616;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t\tload_flags = 30;\n\t\t}\n\t\telse {\n\t\t\theight += height & 1;\n\t\t\tif (exif_cfa)\n\t\t\t\tfilters = exif_cfa;\n\n\t\t\tif (width == 4100) // Olympus E-PL2, E-PL1, E-P2, E-P1, E-620, E-600, E-5, E-30;\n\t\t\t\twidth -= 4;\n\n\t\t\tif (width == 4080) // Olympus E-PM1, E-PL3, E-P3;\n\t\t\t\twidth -= 24;\n\n\t\t\tif (width == 10400) // Olympus PEN-F, E-M1-II, E-M1-III, E-M1X\n\t\t\t\twidth -= 12;\n\n\t\t\tif (width == 8200) // E-M1-III in 50Mp mode, E-M1X\n\t\t\t\twidth -= 30;\n\n\t\t\tif (width == 9280) { // Olympus E-M5 Mark II;\n\t\t\t\twidth -= 6;\n\t\t\t\theight -= 6;\n\t\t\t}\n\n\t\t\tif (load_raw == &LibRaw::unpacked_load_raw)\n\t\t\t\tload_flags = 4;\n\t\t\ttiff_bps = 12;\n\t\t\tif ((OlyID == OlyID_E_300) ||\n\t\t\t\t(OlyID == OlyID_E_500)) {\n\t\t\t\twidth -= 20;\n\t\t\t\tif (load_raw == &LibRaw::unpacked_load_raw) {\n\t\t\t\t\tmaximum = 0xfc3;\n\t\t\t\t\tmemset(cblack, 0, sizeof cblack);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_STYLUS_1) {\n\t\t\t\twidth -= 16;\n\t\t\t\tmaximum = 0xfff;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_E_330) {\n\t\t\t\twidth -= 30;\n\t\t\t\tif (load_raw == &LibRaw::unpacked_load_raw)\n\t\t\t\t\tmaximum = 0xf79;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_SP_550UZ) {\n\t\t\t\tthumb_length = flen - (thumb_offset = 0xa39800);\n\t\t\t\tthumb_height = 480;\n\t\t\t\tthumb_width = 640;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_TG_4) {\n\t\t\t\twidth -= 16;\n\n\t\t\t}\n\t\t\telse if ((OlyID == OlyID_TG_5) ||\n\t\t\t\t(OlyID == OlyID_TG_6)) {\n\t\t\t\twidth -= 26;\n\t\t\t}\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_RoverShot) &&\n\t\t(fsize == 6291456)) { // RoverShot 3320AF\n\t\tfseek(ifp, 0x300000, SEEK_SET);\n\t\tif ((order = guess_byte_order(0x10000)) == 0x4d4d)\n\t\t{\n\t\t\theight -= (top_margin = 16);\n\t\t\twidth -= (left_margin = 28);\n\t\t\tmaximum = 0xf5c0;\n\t\t\tstrcpy(make, \"ISG\");\n\t\t\tmodel[0] = 0;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm)) {\n\t\tif (!strcmp(model, \"S2Pro\"))\n\t\t{\n\t\t\theight = 2144;\n\t\t\twidth = 2880;\n\t\t\tflip = 6;\n\t\t}\n\t\telse if (load_raw != &LibRaw::packed_load_raw && strncmp(model, \"X-\", 2) &&\n\t\t\tfilters >= 1000) // Bayer and not an X-model\n\t\t\tmaximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;\n\n\t\tif (FujiCropMode == 1)\n\t\t{ // FF crop on GFX\n\t\t\twidth = raw_width;\n\t\t\theight = raw_height;\n\t\t}\n\t\telse if (FujiCropMode == 4)\n\t\t{ /* electronic shutter, high speed mode (1.25x crop) */\n\t\t\theight = raw_height;\n\t\t}\n\n\t\ttop_margin = (raw_height >= height) ? (raw_height - height) >> 2 << 1 : 0;\n\t\tleft_margin = (raw_width >= width) ? (raw_width - width) >> 2 << 1 : 0;\n\n\t\tif (!strcmp(model, \"X-T3\") || !strcmp(model, \"X-T4\") || !strcmp(model, \"X100V\") || !strcmp(model, \"X-T30\") || !strcmp(model, \"X-Pro3\"))\n\t\t{\n\t\t\ttop_margin = 0;\n\t\t\tif (FujiCropMode == 0)\n\t\t\t{\n\t\t\t\ttop_margin = 6;\n\t\t\t\theight = 4170;\n\t\t\t\tleft_margin = 0;\n\t\t\t\twidth = 6246;\n\t\t\t}\n\t\t\telse if (FujiCropMode == 4)\n\t\t\t{ /* electronic shutter, high speed mode (1.25x crop) */\n\t\t\t\tleft_margin = 624;\n\t\t\t\twidth = 5004;\n\t\t\t}\n\t\t}\n\n\t\tif (width == 2848 || // Fujifilm X-S1, X10, XF1\n\t\t\twidth == 3664)   // Fujifilm \"HS10 HS11\"\n\t\t\tfilters = 0x16161616;\n\n\t\tif (width == 4032 || // Fujifilm X20, X30, XQ1, XQ2\n\t\t\twidth == 4952)   // Fujifilm X-A1, X-A2, X-E1, X-M1, X-Pro1\n\t\t\tleft_margin = 0;\n\n\t\tif (width == 3328 &&\n\t\t\t(width -= 66)) // Fujifilm F550EXR, F600EXR, F770EXR, F800EXR, F900EXR,\n\t\t\t\t\t\t   // HS20EXR, HS30EXR, HS33EXR, HS50EXR\n\t\t\tleft_margin = 34;\n\n\t\tif (width == 4936) // Fujifilm X-E2S, X-E2, X-T10, X-T1, X100S, X100T, X70\n\t\t\tleft_margin = 4;\n\n\t\tif (width == 6032) // Fujifilm X100F, X-T2, X-T20, X-Pro2, X-H1, X-E3\n\t\t\tleft_margin = 0;\n\n\t\tif (!strcmp(normalized_model, \"DBP for GX680\"))\n\t\t{\n\t\t\t/*\n\t\t\t7712 2752 -> 5504 3856\n\t\t\t*/\n\n\t\t\t/*\n\t\t\twidth = 688;\n\t\t\theight = 30848;\n\t\t\traw_width = 688;\n\t\t\traw_height = 30848;\n\t\t\t*/\n\n\t\t\traw_width = 5504;\n\t\t\traw_height = 3856;\n\t\t\tleft_margin = 32;\n\t\t\ttop_margin = 8;\n\t\t\twidth = raw_width - left_margin - 32;\n\t\t\theight = raw_height - top_margin - 8;\n\n\t\t\tload_raw = &LibRaw::unpacked_load_raw_FujiDBP;\n\t\t\t//  maximum = 0x0fff;\n\t\t\tfilters = 0x16161616;\n\t\t\tload_flags = 0;\n\t\t\tflip = 6;\n\t\t}\n\n\t\tif (!strcmp(model, \"HS50EXR\") || !strcmp(model, \"F900EXR\"))\n\t\t{\n\t\t\twidth += 2;\n\t\t\tleft_margin = 0;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif (!strncmp(model, \"GFX 50\", 6))\n\t\t{\n\t\t\tleft_margin = 0;\n\t\t\ttop_margin = 0;\n\t\t}\n\t\tif (!strncmp(model, \"GFX 100\", 7))\n\t\t{\n\t\t\tleft_margin = 0;\n\t\t\twidth = raw_width - 146;\n\t\t\theight = raw_height - (top_margin = 2);\n\t\t\tif (tiff_bps == 16)\n\t\t\t\tmaximum = 0xffff;\n\t\t}\n\t\tif (!strcmp(normalized_model, \"S5100\"))\n\t\t{\n\t\t\theight -= (top_margin = 6);\n\t\t}\n\t\tif (fuji_layout)\n\t\t\traw_width *= is_raw;\n\t\tif (filters == 9)\n\t\t\tFORC(36)\n\t\t\t((char *)xtrans)[c] =\n\t\t\txtrans_abs[(c / 6 + top_margin) % 6][(c + left_margin) % 6];\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Konica)) {\n\t\tif (!strcmp(model, \"KD-400Z\")) {\n\t\t\theight = 1712;\n\t\t\twidth = 2312;\n\t\t\traw_width = 2336;\n\t\t\tgoto konica_400z;\n\t\t}\n\t\telse if (!strcmp(model, \"KD-510Z\")) {\n\t\t\tgoto konica_510z;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Minolta)) {\n\t\tif (fsize == 5869568) { // hack Minolta \"DiMAGE Z2\"\n\t\t\tload_flags = 30;\n\t\t}\n\n\t\tif (!load_raw && (maximum = 0xfff))\n\t\t{\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t}\n\t\tif (!strncmp(model, \"DiMAGE A\",\n\t\t\t8)) // Minolta \"DiMAGE A1\", \"DiMAGE A2\", \"DiMAGE A200\"\n\t\t{\n\t\t\tif (!strcmp(model, \"DiMAGE A200\"))\n\t\t\t\tfilters = 0x49494949;\n\t\t\ttiff_bps = 12;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t}\n\t\telse if (!strncmp(normalized_model, \"DG-\", 3))\n\t\t{\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t}\n\t\telse if (!strncmp(model, \"DiMAGE G\",\n\t\t\t8)) // hack Minolta \"DiMAGE G400\", \"DiMAGE G500\",\n\t\t\t\t// \"DiMAGE G530\", \"DiMAGE G600\"\n\t\t{\n\t\t\tif (model[8] == '4') // DiMAGE G400\n\t\t\t{\n\t\t\t\theight = 1716;\n\t\t\t\twidth = 2304;\n\t\t\t}\n\t\t\telse if (model[8] == '5') // DiMAGE G500 / G530\n\t\t\t{\n\t\t\tkonica_510z:\n\t\t\t\theight = 1956;\n\t\t\t\twidth = 2607;\n\t\t\t\traw_width = 2624;\n\t\t\t}\n\t\t\telse if (model[8] == '6') // DiMAGE G600\n\t\t\t{\n\t\t\t\theight = 2136;\n\t\t\t\twidth = 2848;\n\t\t\t}\n\t\t\tdata_offset += 14;\n\t\t\tfilters = 0x61616161;\n\t\tkonica_400z:\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tmaximum = 0x3df;\n\t\t\torder = 0x4d4d;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Samsung)) {\n\t\tif (raw_width == 4704) // Samsung NX100, NX10, NX11,\n\t\t{\n\t\t\theight -= top_margin = 8;\n\t\t\twidth -= 2 * (left_margin = 8);\n\t\t\tload_flags = 32;\n\t\t}\n\t\telse if (!strcmp(model, \"NX3000\")) // Samsung NX3000; raw_width: 5600\n\t\t{\n\t\t\ttop_margin = 38;\n\t\t\tleft_margin = 92;\n\t\t\twidth = 5456;\n\t\t\theight = 3634;\n\t\t\tfilters = 0x61616161;\n\t\t\tcolors = 3;\n\t\t}\n\t\telse if (raw_height == 3714) // Samsung NX2000, NX300M, NX300, NX30, EK-GN120\n\t\t{\n\t\t\theight -= top_margin = 18;\n\t\t\tleft_margin = raw_width - (width = 5536);\n\t\t\tif (raw_width != 5600)\n\t\t\t\tleft_margin = top_margin = 0;\n\t\t\tfilters = 0x61616161;\n\t\t\tcolors = 3;\n\t\t}\n\t\telse if (raw_width == 5632) // Samsung NX1000, NX200, NX20, NX210\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight = 3694;\n\t\t\ttop_margin = 2;\n\t\t\twidth = 5574 - (left_margin = 32 + tiff_bps);\n\t\t\tif (tiff_bps == 12)\n\t\t\t\tload_flags = 80;\n\t\t}\n\t\telse if (raw_width == 5664) // Samsung \"NX mini\"\n\t\t{\n\t\t\theight -= top_margin = 17;\n\t\t\tleft_margin = 96;\n\t\t\twidth = 5544;\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (raw_width == 6496) // Samsung NX1, NX500\n\t\t{\n\t\t\tfilters = 0x61616161;\n\t\t\tif (!black && !cblack[0] && !cblack[1] && !cblack[2] && !cblack[3])\n\t\t\t\tblack = 1 << (tiff_bps - 7);\n\t\t}\n\t\telse if (!strcmp(model, \"EX1\")) // Samsung EX1; raw_width: 3688\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight -= 20;\n\t\t\ttop_margin = 2;\n\t\t\tif ((width -= 6) > 3682)\n\t\t\t{\n\t\t\t\theight -= 10;\n\t\t\t\twidth -= 46;\n\t\t\t\ttop_margin = 8;\n\t\t\t}\n\t\t}\n\t\telse if (!strcmp(model, \"WB2000\")) // Samsung WB2000; raw_width: 3728\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight -= 3;\n\t\t\ttop_margin = 2;\n\t\t\tif ((width -= 10) > 3718)\n\t\t\t{\n\t\t\t\theight -= 28;\n\t\t\t\twidth -= 56;\n\t\t\t\ttop_margin = 8;\n\t\t\t}\n\t\t}\n\t\telse if (!strcmp(model, \"WB550\")) // Samsung WB550; raw_width: 4000\n\t\t{\n\t\t\torder = 0x4949;\n\t\t}\n\t\telse if (!strcmp(model, \"EX2F\")) // Samsung EX2F; raw_width: 4176\n\t\t{\n\t\t\theight = 3030;\n\t\t\twidth = 4040;\n\t\t\ttop_margin = 15;\n\t\t\tleft_margin = 24;\n\t\t\torder = 0x4949;\n\t\t\tfilters = 0x49494949;\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t}\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_ST_Micro) && !strcmp(model, \"STV680 VGA\"))\n\t{\n\t\tblack = 16;\n\t}\n\telse if (!strcmp(model, \"N95\"))\n\t{\n\t\theight = raw_height - (top_margin = 2);\n\t}\n\telse if (!strcmp(model, \"640x480\"))\n\t{\n\t\tgamma_curve(0.45, 4.5, 1, 255);\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Hasselblad))\n\t{\n\t\tif (load_raw == &LibRaw::lossless_jpeg_load_raw)\n\t\t\tload_raw = &LibRaw::hasselblad_load_raw;\n\n\t\tif ((imHassy.SensorCode == 4) && !strncmp(model, \"V96C\", 4)) { // Hasselblad V96C\n\t\t\tstrcpy(model, \"V96C\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= (top_margin = 6);\n\t\t\twidth -= (left_margin = 3) + 7;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 9) && imHassy.uncropped) { // various Hasselblad '-39'\n\t\t\theight = 5444;\n\t\t\twidth = 7248;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 7;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 13) && imHassy.uncropped) { // Hasselblad H4D-40, H5D-40\n\t\t\theight -= 84;\n\t\t\twidth -= 82;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 41;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 11) && imHassy.uncropped) { // Hasselblad H5D-50\n\t\t\theight -= 84;\n\t\t\twidth -= 82;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 41;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 15) &&\n\t\t\t!imHassy.SensorSubCode && // Hasselblad H5D-50c\n\t\t\timHassy.uncropped) {\n\t\t\tleft_margin = 52;\n\t\t\ttop_margin = 100;\n\t\t\twidth = 8272;\n\t\t\theight = 6200;\n\t\t\tblack = 256;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 15) &&\n\t\t\t(imHassy.SensorSubCode == 2) && // various Hasselblad X1D cameras\n\t\t\timHassy.uncropped) {\n\t\t\ttop_margin = 96;\n\t\t\theight -= 96;\n\t\t\tleft_margin = 48;\n\t\t\twidth -= 106;\n\t\t\tmaximum = 0xffff;\n\t\t\ttiff_bps = 16;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 12) && imHassy.uncropped) { // Hasselblad H4D-60\n\t\t\tif (black > 500) { // (imHassy.format == LIBRAW_HF_FFF)\n\t\t\t\ttop_margin = 12;\n\t\t\t\tleft_margin = 44;\n\t\t\t\twidth = 8956;\n\t\t\t\theight = 6708;\n\t\t\t\tmemset(cblack, 0, sizeof(cblack));\n\t\t\t\tblack = 512;\n\t\t\t}\n\t\t\telse { // (imHassy.format == LIBRAW_HF_3FR)\n\t\t\t\ttop_margin = 8;\n\t\t\t\tleft_margin = 40;\n\t\t\t\twidth = 8964;\n\t\t\t\theight = 6716;\n\t\t\t\tblack += load_flags = 256;\n\t\t\t\tmaximum = 0x8101;\n\t\t\t}\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 17) && imHassy.uncropped) { // Hasselblad H6D-100c, A6D-100c\n\t\t\tleft_margin = 64;\n\t\t\twidth = 11608;\n\t\t\ttop_margin = 108;\n\t\t\theight = raw_height - top_margin;\n\t\t}\n\n\t\tif (tiff_samples > 1)\n\t\t{\n\t\t\tis_raw = tiff_samples + 1;\n\t\t\tif (!shot_select && !half_size)\n\t\t\t\tfilters = 0;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sinar))\n\t{\n\t\tif (!load_raw)\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tif (is_raw > 1 && !shot_select)\n\t\t\tfilters = 0;\n\t\tmaximum = 0x3fff;\n\t}\n\n\tif (load_raw == &LibRaw::sinar_4shot_load_raw)\n\t{\n\t\tif (is_raw > 1 && !shot_select)\n\t\t\tfilters = 0;\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Leaf))\n\t{\n\t\tmaximum = 0x3fff;\n\t\tfseek(ifp, data_offset, SEEK_SET);\n\t\tif (ljpeg_start(&jh, 1) && jh.bits == 15)\n\t\t\tmaximum = 0x1fff;\n\t\tif (tiff_samples > 1)\n\t\t\tfilters = 0;\n\t\tif (tiff_samples > 1 || tile_length < raw_height)\n\t\t{\n\t\t\tload_raw = &LibRaw::leaf_hdr_load_raw;\n\t\t\traw_width = tile_width;\n\t\t}\n\t\tif ((width | height) == 2048)\n\t\t{\n\t\t\tif (tiff_samples == 1)\n\t\t\t{\n\t\t\t\tfilters = 1;\n\t\t\t\tstrcpy(cdesc, \"RBTG\");\n\t\t\t\tstrcpy(model, \"CatchLight\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t\ttop_margin = 8;\n\t\t\t\tleft_margin = 18;\n\t\t\t\theight = 2032;\n\t\t\t\twidth = 2016;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(model, \"DCB2\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t\ttop_margin = 10;\n\t\t\t\tleft_margin = 16;\n\t\t\t\theight = 2028;\n\t\t\t\twidth = 2022;\n\t\t\t}\n\t\t}\n\t\telse if (width + height == 3144 + 2060)\n\t\t{\n\t\t\tif (!model[0])\n\t\t\t{\n\t\t\t\tstrcpy(model, \"Cantare\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t}\n\t\t\tif (width > height)\n\t\t\t{\n\t\t\t\ttop_margin = 6;\n\t\t\t\tleft_margin = 32;\n\t\t\t\theight = 2048;\n\t\t\t\twidth = 3072;\n\t\t\t\tfilters = 0x61616161;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft_margin = 6;\n\t\t\t\ttop_margin = 32;\n\t\t\t\twidth = 2048;\n\t\t\t\theight = 3072;\n\t\t\t\tfilters = 0x16161616;\n\t\t\t}\n\t\t\tif (!cam_mul[0] || model[0] == 'V')\n\t\t\t\tfilters = 0;\n\t\t\telse\n\t\t\t\tis_raw = tiff_samples;\n\t\t}\n\t\telse if (width == 2116) // Leaf \"Valeo 6\"\n\t\t{\n\t\t\tstrcpy(model, \"Valeo 6\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= 2 * (top_margin = 30);\n\t\t\twidth -= 2 * (left_margin = 55);\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (width == 3171) // Leaf \"Valeo 6\"\n\t\t{\n\t\t\tstrcpy(model, \"Valeo 6\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= 2 * (top_margin = 24);\n\t\t\twidth -= 2 * (left_margin = 24);\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Panasonic))\n\t{\n\t\tif (raw_width > 0 &&\n\t\t\t((flen - data_offset) / (raw_width * 8 / 7) == raw_height))\n\t\t\tload_raw = &LibRaw::panasonic_load_raw;\n\t\tif (!load_raw)\n\t\t{\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tload_flags = 4;\n\t\t}\n\t\tzero_is_bad = 1;\n\t\tif ((height += 12) > raw_height)\n\t\t\theight = raw_height;\n\t\tfor (i = 0; i < int(sizeof pana / sizeof *pana); i++)\n\t\t\tif (raw_width == pana[i][0] && raw_height == pana[i][1])\n\t\t\t{\n\t\t\t\tleft_margin = pana[i][2];\n\t\t\t\ttop_margin = pana[i][3];\n\t\t\t\twidth += pana[i][4];\n\t\t\t\theight += pana[i][5];\n\t\t\t}\n\t\tif (!tiff_bps && pana_bpp >= 12 && pana_bpp <= 14)\n\t\t\ttiff_bps = pana_bpp;\n\n\t\tfilters = 0x01010101U *\n\t\t\t(uchar) \"\\x94\\x61\\x49\\x16\"[((filters - 1) ^ (left_margin & 1) ^\n\t\t\t(top_margin << 1)) &\n\t\t\t3];\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Contax) &&\n\t\t!strcmp(model, \"N Digital\")) {\n\t\theight = 2047;\n\t\twidth = 3072;\n\t\tfilters = 0x61616161;\n\t\tdata_offset = 0x1a00;\n\t\tload_raw = &LibRaw::packed_load_raw;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sony)) {\n\t\tif (!strcmp(model, \"DSC-F828\")) { // Sony DSC-F828\n\t\t\twidth = 3288;\n\t\t\tleft_margin = 5;\n\t\t\tmask[1][3] = -17;\n\t\t\tdata_offset = 862144;\n\t\t\tload_raw = &LibRaw::sony_load_raw;\n\t\t\tfilters = 0x9c9c9c9c;\n\t\t\tcolors = 4;\n\t\t\tstrcpy(cdesc, \"RGBE\");\n\n\t\t}\n\t\telse if (!strcmp(model, \"DSC-V3\")) { // Sony DSC-V3\n\t\t\twidth = 3109;\n\t\t\tleft_margin = 59;\n\t\t\tmask[0][1] = 9;\n\t\t\tdata_offset = 787392;\n\t\t\tload_raw = &LibRaw::sony_load_raw;\n\n\t\t}\n\t\telse if (raw_width == 3984) { // Sony DSC-R1;\n\t\t\twidth = 3925;\n\t\t\torder = 0x4d4d;\n\n\t\t}\n\t\telse if (raw_width == 4288) { // Sony ILCE-7S, ILCE-7SM2, DSLR-A700, DSLR-A500;\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (raw_width == 4600) { // Sony DSLR-A290, DSLR-A350, DSLR-A380;\n\t\t\tif (!strcmp(model, \"DSLR-A350\"))\n\t\t\t\theight -= 4;\n\t\t\tblack = 0;\n\n\t\t}\n\t\telse if (raw_width == 4928) {\n\t\t\t// Sony DSLR-A580, NEX-C3, SLT-A35, DSC-HX99, SLT-A55,\n\t\t\t// NEX-5N, SLT-A37, SLT-A57, NEX-F3, NEX-6, NEX-5R, NEX-3N, NEX-5T;\n\t\t\tif (height < 3280)\n\t\t\t\twidth -= 8;\n\n\t\t}\n\t\telse if (raw_width == 5504) {\n\t\t\t// Sony ILCE-3000, SLT-A58, DSC-RX100M3, ILCE-QX1,\n\t\t\t// DSC-RX10M4, DSC-RX100M6, DSC-RX100, DSC-RX100M2, DSC-RX10,\n\t\t\t// ILCE-5000, DSC-RX100M4, DSC-RX10M2, DSC-RX10M3,\n\t\t\t// DSC-RX100M5, DSC-RX100M5A;\n\t\t\twidth -= height > 3664 ? 8 : 32;\n\n\t\t}\n\t\telse if (raw_width == 6048) {\n\t\t\t// Sony SLT-A65, DSC-RX1, SLT-A77, DSC-RX1, ILCA-77M2,\n\t\t\t// ILCE-7M3, NEX-7, SLT-A99, ILCE-7, DSC-RX1R, ILCE-6000,\n\t\t\t// ILCE-5100, ILCE-7M2, ILCA-68, ILCE-6300, ILCE-9,\n\t\t\t// ILCE-6500, ILCE-6400;\n\t\t\twidth -= 24;\n\t\t\tif (strstr(normalized_model, \"RX1\") ||\n\t\t\t\tstrstr(normalized_model, \"A99\"))\n\t\t\t\twidth -= 6;\n\n\t\t}\n\t\telse if (raw_width == 7392) { // Sony ILCE-7R;\n\t\t\twidth -= 30;\n\n\t\t}\n\t\telse if (raw_width == 8000) {\n\t\t\t// Sony ILCE-7RM2, ILCE-7RM2, ILCE-7RM3, DSC-RX1RM2, ILCA-99M2;\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (raw_width == 9600) { // Sony ILCE-7RM4\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (!strcmp(model, \"DSLR-A100\")) {\n\t\t\tif (width == 3880) {\n\t\t\t\theight--;\n\t\t\t\twidth = ++raw_width;\n\t\t\t}\n\t\t\telse {\n\t\t\t\theight -= 4;\n\t\t\t\twidth -= 4;\n\t\t\t\torder = 0x4d4d;\n\t\t\t\tload_flags = 2;\n\t\t\t}\n\t\t\tfilters = 0x61616161;\n\t\t}\n\t}\n\n\telse if (!strcmp(model, \"PIXL\")) {\n\t\theight -= top_margin = 4;\n\t\twidth -= left_margin = 32;\n\t\tgamma_curve(0, 7, 1, 255);\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Kodak)) {\n\n\t\tif (!strncasecmp(model, \"EasyShare\", 9)) {\n\t\t\tdata_offset = data_offset < 0x15000 ? 0x15000 : 0x17000;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\n\t\t}\n\t\telse if (!strcmp(model, \"C603\") ||\n\t\t\t!strcmp(model, \"C330\") ||\n\t\t\t!strcmp(model, \"12MP\")) {\n\t\t\torder = 0x4949;\n\t\t\tif (filters && data_offset) {\n\t\t\t\tfseek(ifp, data_offset < 4096 ? 168 : 5252, SEEK_SET);\n\t\t\t\tread_shorts(curve, 256);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgamma_curve(0, 3.875, 1, 255);\n\n\t\t\tload_raw = filters ? &LibRaw::eight_bit_load_raw\n\t\t\t\t: strcmp(model, \"C330\") ? &LibRaw::kodak_c603_load_raw\n\t\t\t\t: &LibRaw::kodak_c330_load_raw;\n\t\t\tload_flags = tiff_bps > 16;\n\t\t\ttiff_bps = 8;\n\n\t\t}\n\t\telse {\n\t\t\tif (!strncmp(model, \"NC2000\", 6) ||\n\t\t\t\t!strncmp(model, \"EOSDCS\", 6) ||\n\t\t\t\t!strncmp(model, \"DCS4\", 4)) {\n\t\t\t\twidth -= 4;\n\t\t\t\tleft_margin = 2;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DCS660M\")) {\n\t\t\t\tblack = 214;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"EOS D2000C\")) {\n\t\t\t\tfilters = 0x61616161;\n\t\t\t\tif (!black) black = curve[200];\n\t\t\t}\n\n\t\t\tif (filters == UINT_MAX) filters = 0x61616161;\n\n\t\t\tif (!strcmp(model + 4, \"20X\"))\n\t\t\t\tstrcpy(cdesc, \"MYCY\");\n\t\t\tif (!strcmp(model, \"DC25\")) {\n\t\t\t\tdata_offset = 15424;\n\t\t\t}\n\n\t\t\tif (!strncmp(model, \"DC2\", 3)) {\n\t\t\t\traw_height = 2 + (height = 242);\n\t\t\t\tif (!strncmp(model, \"DC290\", 5))\n\t\t\t\t\tiso_speed = 100;\n\t\t\t\tif (!strncmp(model, \"DC280\", 5))\n\t\t\t\t\tiso_speed = 70;\n\t\t\t\tif (flen < 100000) {\n\t\t\t\t\traw_width = 256;\n\t\t\t\t\twidth = 249;\n\t\t\t\t\tpixel_aspect = (4.0 * height) / (3.0 * width);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\traw_width = 512;\n\t\t\t\t\twidth = 501;\n\t\t\t\t\tpixel_aspect = (493.0 * height) / (373.0 * width);\n\t\t\t\t}\n\t\t\t\ttop_margin = left_margin = 1;\n\t\t\t\tcolors = 4;\n\t\t\t\tfilters = 0x8d8d8d8d;\n\t\t\t\tsimple_coeff(1);\n\t\t\t\tpre_mul[1] = 1.179;\n\t\t\t\tpre_mul[2] = 1.209;\n\t\t\t\tpre_mul[3] = 1.036;\n\t\t\t\tload_raw = &LibRaw::eight_bit_load_raw;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC40\")) {\n\t\t\t\theight = 512;\n\t\t\t\twidth = 768;\n\t\t\t\tdata_offset = 1152;\n\t\t\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\t\t\ttiff_bps = 12;\n\t\t\t\tFORC4 cam_mul[c] = 1.0f;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC50\")) {\n\t\t\t\theight = 512;\n\t\t\t\twidth = 768;\n\t\t\t\tiso_speed = 84;\n\t\t\t\tdata_offset = 19712;\n\t\t\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\t\t\tFORC4 cam_mul[c] = 1.0f;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC120\")) {\n\t\t\t\traw_height = height = 976;\n\t\t\t\traw_width = width = 848;\n\t\t\t\tiso_speed = 160;\n\t\t\t\tpixel_aspect = height / 0.75 / width;\n\t\t\t\tload_raw = tiff_compress == 7 ? &LibRaw::kodak_jpeg_load_raw\n\t\t\t\t\t: &LibRaw::kodak_dc120_load_raw;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DCS200\")) {\n\t\t\t\tthumb_height = 128;\n\t\t\t\tthumb_width = 192;\n\t\t\t\tthumb_offset = 6144;\n\t\t\t\tthumb_misc = 360;\n\t\t\t\tiso_speed = 140;\n\t\t\t\twrite_thumb = &LibRaw::layer_thumb;\n\t\t\t\tblack = 17;\n\t\t\t}\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Logitech) &&\n\t\t!strcmp(model, \"Fotoman Pixtura\")) {\n\t\theight = 512;\n\t\twidth = 768;\n\t\tdata_offset = 3632;\n\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\tfilters = 0x61616161;\n\t\tsimple_coeff(2);\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Apple) &&\n\t\t!strncmp(model, \"QuickTake\", 9)) {\n\t\tif (head[5])\n\t\t\tstrcpy(model + 10, \"200\");\n\t\tfseek(ifp, 544, SEEK_SET);\n\t\theight = get2();\n\t\twidth = get2();\n\t\tdata_offset = (get4(), get2()) == 30 ? 738 : 736;\n\t\tif (height > width) {\n\t\t\tSWAP(height, width);\n\t\t\tfseek(ifp, data_offset - 6, SEEK_SET);\n\t\t\tflip = ~get2() & 3 ? 5 : 6;\n\t\t}\n\t\tfilters = 0x61616161;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Rollei) &&\n\t\t!load_raw) {\n\t\tswitch (raw_width) {\n\t\tcase 1316: // Rollei d530flex\n\t\t\theight = 1030;\n\t\t\twidth = 1300;\n\t\t\ttop_margin = 1;\n\t\t\tleft_margin = 6;\n\t\t\tbreak;\n\t\tcase 2568:\n\t\t\theight = 1960;\n\t\t\twidth = 2560;\n\t\t\ttop_margin = 2;\n\t\t\tleft_margin = 8;\n\t\t}\n\t\tfilters = 0x16161616;\n\t\tload_raw = &LibRaw::rollei_load_raw;\n\n\t}\n\telse if (!strcmp(model, \"GRAS-50S5C\")) {\n\t\theight = 2048;\n\t\twidth = 2440;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x49494949;\n\t\torder = 0x4949;\n\t\tmaximum = 0xfffC;\n\n\t}\n\telse if (!strcmp(model, \"BB-500CL\")) {\n\t\theight = 2058;\n\t\twidth = 2448;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x3fff;\n\n\t}\n\telse if (!strcmp(model, \"BB-500GE\")) {\n\t\theight = 2058;\n\t\twidth = 2456;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x3fff;\n\n\t}\n\telse if (!strcmp(model, \"SVS625CL\")) {\n\t\theight = 2050;\n\t\twidth = 2448;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x0fff;\n\t}\n}\n"], "fixing_code": ["/* -*- C++ -*-\n * Copyright 2019-2020 LibRaw LLC (info@libraw.org)\n *\n LibRaw uses code from dcraw.c -- Dave Coffin's raw photo decoder,\n dcraw.c is copyright 1997-2018 by Dave Coffin, dcoffin a cybercom o net.\n LibRaw do not use RESTRICTED code from dcraw.c\n\n LibRaw is free software; you can redistribute it and/or modify\n it under the terms of the one of two licenses as you choose:\n\n1. GNU LESSER GENERAL PUBLIC LICENSE version 2.1\n   (See file LICENSE.LGPL provided in LibRaw distribution archive for details).\n\n2. COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n   (See file LICENSE.CDDL provided in LibRaw distribution archive for details).\n\n */\n\n#include \"../../internal/dcraw_defs.h\"\n#include \"../../internal/libraw_cameraids.h\"\n\n// clang-format on\nstatic const struct\n{\n    const int CorpId;\n    const char *CorpName;\n} CorpTable[] = {\n    {LIBRAW_CAMERAMAKER_Agfa,           \"AgfaPhoto\"},\n    {LIBRAW_CAMERAMAKER_Apple,          \"Apple\"},\n    {LIBRAW_CAMERAMAKER_Broadcom,       \"Broadcom\"},\n    {LIBRAW_CAMERAMAKER_Canon,          \"Canon\"},\n    {LIBRAW_CAMERAMAKER_Casio,          \"Casio\"},\n    {LIBRAW_CAMERAMAKER_CINE,           \"CINE\"},\n    {LIBRAW_CAMERAMAKER_Epson,          \"Epson\"},\n    {LIBRAW_CAMERAMAKER_Fujifilm,       \"Fujifilm\"},\n    {LIBRAW_CAMERAMAKER_Mamiya,         \"Mamiya\"},\n    {LIBRAW_CAMERAMAKER_Motorola,       \"Motorola\"},\n    {LIBRAW_CAMERAMAKER_Kodak,          \"Kodak\"},\n    {LIBRAW_CAMERAMAKER_Konica,         \"Konica\"},\n    {LIBRAW_CAMERAMAKER_Minolta,        \"Minolta\"},\n    {LIBRAW_CAMERAMAKER_Leica,          \"Leica\"},\n    {LIBRAW_CAMERAMAKER_Nikon,          \"Nikon\"},\n    {LIBRAW_CAMERAMAKER_Nokia,          \"Nokia\"},\n    {LIBRAW_CAMERAMAKER_Olympus,        \"Olympus\"},\n    {LIBRAW_CAMERAMAKER_Ricoh,          \"Ricoh\"},\n    {LIBRAW_CAMERAMAKER_Pentax,         \"Pentax\"},\n    {LIBRAW_CAMERAMAKER_PhaseOne,       \"Phase One\"},\n    {LIBRAW_CAMERAMAKER_PhaseOne,       \"PhaseOne\"},\n    {LIBRAW_CAMERAMAKER_Samsung,        \"Samsung\"},\n    {LIBRAW_CAMERAMAKER_Sigma,          \"Sigma\"},\n    {LIBRAW_CAMERAMAKER_Sinar,          \"Sinar\"},\n    {LIBRAW_CAMERAMAKER_Sony,           \"Sony\"},\n    {LIBRAW_CAMERAMAKER_YI,             \"YI\"},\n    // add corp. names below\n    {LIBRAW_CAMERAMAKER_Alcatel,        \"Alcatel\"},\n    {LIBRAW_CAMERAMAKER_Aptina,         \"Aptina\"},\n    {LIBRAW_CAMERAMAKER_AVT,            \"AVT\"},\n    {LIBRAW_CAMERAMAKER_Baumer,         \"Baumer\"},\n    {LIBRAW_CAMERAMAKER_Clauss,         \"Clauss\"},\n    {LIBRAW_CAMERAMAKER_Contax,         \"Contax\"},\n    {LIBRAW_CAMERAMAKER_Creative,       \"Creative\"},\n    {LIBRAW_CAMERAMAKER_DJI,            \"DJI\"},\n    {LIBRAW_CAMERAMAKER_Foculus,        \"Foculus\"},\n    {LIBRAW_CAMERAMAKER_Generic,        \"Generic\"},\n    {LIBRAW_CAMERAMAKER_Gione,          \"Gione\"},\n    {LIBRAW_CAMERAMAKER_GITUP,          \"GITUP\"},\n    {LIBRAW_CAMERAMAKER_Hasselblad,     \"Hasselblad\"},\n    {LIBRAW_CAMERAMAKER_HTC,            \"HTC\"},\n    {LIBRAW_CAMERAMAKER_I_Mobile,       \"I_Mobile\"},\n    {LIBRAW_CAMERAMAKER_Imacon,         \"Imacon\"},\n    {LIBRAW_CAMERAMAKER_JK_Imaging,     \"JK Imaging\"}, // Kodak\n    {LIBRAW_CAMERAMAKER_Leaf,           \"Leaf\"},\n    {LIBRAW_CAMERAMAKER_Lenovo,         \"Lenovo\"},\n    {LIBRAW_CAMERAMAKER_LG,             \"LG\"},\n    {LIBRAW_CAMERAMAKER_Logitech,       \"Logitech\"},\n    {LIBRAW_CAMERAMAKER_Matrix,         \"Matrix\"},\n    {LIBRAW_CAMERAMAKER_Meizu,          \"Meizu\"},\n    {LIBRAW_CAMERAMAKER_Micron,         \"Micron\"},\n    {LIBRAW_CAMERAMAKER_NGM,            \"NGM\"},\n    {LIBRAW_CAMERAMAKER_OmniVison,      \"OmniVison\"},\n    {LIBRAW_CAMERAMAKER_Panasonic,      \"Panasonic\"},\n    {LIBRAW_CAMERAMAKER_Photron,        \"Photron\"},\n    {LIBRAW_CAMERAMAKER_Pixelink,       \"Pixelink\"},\n    {LIBRAW_CAMERAMAKER_Polaroid,       \"Polaroid\"},\n    {LIBRAW_CAMERAMAKER_Rollei,         \"Rollei\"},\n    {LIBRAW_CAMERAMAKER_RoverShot,      \"RoverShot\"},\n    {LIBRAW_CAMERAMAKER_SMaL,           \"SMaL\"},\n    {LIBRAW_CAMERAMAKER_ST_Micro,       \"ST Micro\"},\n    {LIBRAW_CAMERAMAKER_THL,            \"THL\"},\n    {LIBRAW_CAMERAMAKER_Xiaomi,         \"Xiaomi\"},\n    {LIBRAW_CAMERAMAKER_XIAOYI,         \"Xiayi\"},\n    {LIBRAW_CAMERAMAKER_Yuneec,         \"Yuneec\"},\n    {LIBRAW_CAMERAMAKER_DXO,            \"DxO\"},\n    {LIBRAW_CAMERAMAKER_RED,            \"Red\"},\n    {LIBRAW_CAMERAMAKER_PhotoControl,   \"Photo Control\"},\n    {LIBRAW_CAMERAMAKER_Google,         \"Google\"},\n    {LIBRAW_CAMERAMAKER_GoPro,          \"GoPro\"},\n    {LIBRAW_CAMERAMAKER_Parrot,         \"Parrot\"},\n    {LIBRAW_CAMERAMAKER_Zeiss,          \"Zeiss\"}\n};\n// clang-format on\n\nint LibRaw::setMakeFromIndex(unsigned makei)\n{\n\tif (makei <= LIBRAW_CAMERAMAKER_Unknown || makei >= LIBRAW_CAMERAMAKER_TheLastOne) return 0;\n\n\tfor (int i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n\t\tif ((unsigned)CorpTable[i].CorpId == makei)\n\t\t{\n\t\t\tstrcpy(normalized_make, CorpTable[i].CorpName);\n\t\t\tmaker_index = makei;\n\t\t\treturn 1;\n\t\t}\n\treturn 0;\n}\n\nconst char *LibRaw::cameramakeridx2maker(unsigned maker)\n{\n    for (int i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n        if((unsigned)CorpTable[i].CorpId == maker)\n            return CorpTable[i].CorpName;\n    return 0;\n}\n\n\nvoid LibRaw::fixupArri()\n{\n    struct alist_t\n    {\n        const char *a_model;\n        const char *a_software;\n        ushort a_width,a_height;\n        int a_black;\n        unsigned a_filters;\n        float a_aspect;\n    }\n    alist[] =\n    {\n        {\"ALEXA65\", \"Alexa65  XT\", 6560 ,3100, 256,0x49494949,1.f},\n\n        {\"ALEXALF\", \"Alexa LF Plus W\", 3840 ,2160, 256,0x49494949,1.0f },\n        {\"ALEXALF\", \"Alexa LF Plus W\", 4448 ,1856, 256,0x49494949,0.75f },\n        {\"ALEXALF\", \"Alexa LF Plus W\", 4448 ,3096, 256,0x49494949,1.f },\n\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 2880 ,1620, 256,0x61616161,.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 3168 ,1782, 256,0x61616161,0.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 3424 ,2202, 256,0x61616161,1.f},\n        {\"ALEXA\", \"Alexa Plus 4:3 SXT\", 2592 ,2160, 256,0x61616161,1.12f},\n\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2592 ,2160, 256,0x61616161,1.12f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2880 ,2160, 256,0x61616161,1.f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 2880 ,1620, 256,0x61616161,0.75f},\n        {\"ALEXA\", \"Alexa Plus 4:3 XT\", 3424 ,2202, 256,0x61616161,1.f},\n    };\n    for(int i = 0; i < int(sizeof(alist)/sizeof(alist[0])); i++)\n        if(!strncasecmp(model,alist[i].a_model,strlen(alist[i].a_model)) && software\n            && !strncasecmp(software,alist[i].a_software,strlen(alist[i].a_software))\n            && width == alist[i].a_width && height == alist[i].a_height)\n        {\n            filters = alist[i].a_filters;\n            black = alist[i].a_black;\n            pixel_aspect = alist[i].a_aspect;\n            strcpy(model,software);\n            software[0]=0;\n            return;\n        }\n}\n\n/*\n   Identify which camera created this file, and set global variables\n   accordingly.\n */\nvoid LibRaw::identify()\n{\n  // clang-format off\n  static const ushort canon[][11] = {\n      // raw_width, raw_height, left_margin, top_margin, width_decrement,\n      // height_decrement, mask01, mask03, mask11,\n\t  // mask13, CFA_filters.\n\t  { 1944, 1416, 0, 0, 48, 0 }, // 00 \"PowerShot Pro90 IS\"\n\t  { 2144, 1560, 4, 8, 52, 2, 0, 0, 0, 25 }, // 01 \"PowerShot S30\", \"PowerShot G1\"\n\t  { 2224, 1456, 48, 6, 0, 2 }, // 02 \"EOS D30\"\n\t  { 2376, 1728, 12, 6, 52, 2 }, // 03 \"PowerShot G2\", \"PowerShot S40\", \"PowerShot G3\", \"PowerShot S45\"\n\t  { 2672, 1968, 12, 6, 44, 2 }, // 04 \"PowerShot G5\", \"PowerShot S50\", \"PowerShot S60\"\n\t  { 3152, 2068, 64, 12, 0, 0, 16 }, // 05 \"EOS D60\", \"EOS 10D\", \"EOS 300D\"\n\t  { 3160, 2344, 44, 12, 4, 4 }, // 06 \"PowerShot G6\", \"PowerShot S70\"\n\t  { 3344, 2484, 4, 6, 52, 6 }, // 07 \"PowerShot Pro1\"\n\t  { 3516, 2328, 42, 14, 0, 0 }, // 08 \"EOS 350D\"\n\t  { 3596, 2360, 74, 12, 0, 0 }, // 09 \"EOS-1D Mark II\", \"EOS 20D\", \"EOS-1D Mark II N\", \"EOS 30D\"\n\t  { 3744, 2784, 52, 12, 8, 12 }, // 10 \"PowerShot G11\", \"PowerShot S90\", \"PowerShot G12\", \"PowerShot S95\"\n\t  { 3944, 2622, 30, 18, 6, 2 }, // 11 \"EOS 40D\"\n\t  { 3948, 2622, 42, 18, 0, 2 }, // 12 \"EOS 400D\", \"EOS 1000D\"\n\t  { 3984, 2622, 76, 20, 0, 2, 14 }, // 13 \"EOS-1D Mark III\"\n\t  { 4032, 2656, 112, 44, 10, 0 }, // 14 APS-C crop mode: \"EOS 6D Mark II\"??, \"EOS RP\"\n\t  { 4104, 3048, 48, 12, 24, 12 }, // 15 \"PowerShot G9\"\n\t  { 4116, 2178, 4, 2, 0, 0 },  // 16 ??\n\t  { 4152, 2772, 192, 12, 0, 0 }, // 17 \"PowerShot SX1 IS\"\n\t  { 4160, 3124, 104, 11, 8, 65 }, // 18 \"PowerShot S100 (new)\", \"PowerShot S100V\", \"PowerShot G15\", \"PowerShot S110 (new)\"\n\t  { 4176, 3062, 96, 17, 8, 0, 0, 16, 0, 7, 0x49 }, // 19 \"PowerShot SX50 HS\"\n\t  { 4192, 3062, 96, 17, 24, 0, 0, 16, 0, 0, 0x49 }, // 20 \"PowerShot G16\", \"PowerShot S120\"\n\t  { 4312, 2876, 22, 18, 0, 2 }, // 21 \"EOS 450D\"\n\t  { 4352, 2850, 144, 46, 0, 0 }, // 22 APS-C crop mode: \"EOS R\"\n\t  { 4352, 2874, 62, 18, 0, 0 }, // 23 \"EOS 1100D\"\n\t  { 4476, 2954, 90, 34, 0, 0 }, // 24 \"EOS 5D\"\n\t  { 4480, 3348, 12, 10, 36, 12, 0, 0, 0, 18, 0x49 }, // 25 \"PowerShot G10\"\n\t  { 4480, 3366, 80, 50, 0, 0 }, // 26 \"PowerShot G1 X Mark II\"\n\t  { 4496, 3366, 80, 50, 12, 0 }, // 27 \"PowerShot G1 X\"\n\t  { 4768, 3516, 96, 16, 0, 0, 0, 16 }, // 28 \"PowerShot SX60 HS\"\n\t  { 4832, 3204, 62, 26, 0, 0 }, // 29 \"EOS 500D\"\n\t  { 4832, 3228, 62, 51, 0, 0 }, // 30 \"EOS 50D\"\n\t  { 5108, 3349, 98, 13, 0, 0 }, // 31 \"EOS-1Ds Mark II\"\n\t  { 5120, 3318, 142, 45, 62, 0 }, // 32  \"EOS-1D Mark IV\"\n\t  { 5280, 3528, 72, 52, 0, 0 }, // 33 \"EOS M10\", \"EOS 650D\", \"EOS 700D\", \"EOS M\", \"EOS 100D\", \"EOS M2\"\n\t  { 5344, 3516, 142, 51, 0, 0 }, // 34 \"EOS 550D\", \"EOS 600D\", \"EOS 60D\", \"EOS 1200D\", \"EOS 1300D\", \"EOS 3000D\"\n\t  { 5344, 3584, 126, 100, 0, 2 }, // 35 \"EOS-1D X\", \"EOS-1D C\"\n\t  { 5344, 3950, 98, 18, 0, 0, 0, 24, 0, 0 }, // 36 \"PowerShot SX70 HS\"\n\t  { 5360, 3516, 158, 51, 0, 0 }, // 37 \"EOS 7D\"\n\t  { 5568, 3708, 72, 38, 0, 0 }, // 38; \"EOS 7D Mark II\", \"EOS 6D\", \"EOS 70D\", \"EOS-1D X MARK II\"\n\t  { 5632, 3710, 96, 17, 0, 0, 0, 16, 0, 0, 0x49 }, // 39 \"PowerShot G7 X\", \"PowerShot G3 X\", \"PowerShot G9 X\", \"PowerShot G5 X\", \"PowerShot G7 X Mark II\", \"PowerShot G9 X Mark II\"\n\t  { 5712, 3774, 62, 20, 10, 2 }, // 40 \"EOS-1Ds Mark III\"\n\t  { 5792, 3804, 158, 51, 0, 0 }, // 41 \"EOS 5D Mark II\"\n\t  { 5920, 3950, 122, 80, 2, 0 }, // 42 \"EOS 5D Mark III\"\n\t  { 6096, 4051, 76, 35, 0, 0 }, // 43 \"EOS 1500D\"\n\t  { 6096, 4056, 72, 34, 0, 0 }, // 44 \"EOS M3\", \"EOS 760D\", \"EOS 750D\"\n\t  { 6288, 4056, 264, 36, 0, 0 }, // 45 \"EOS M5\", \"EOS M100\", \"EOS M6\", \"PowerShot G1 X Mark III\", \"EOS 80D\", \"EOS 800D\", \"EOS 77D\", \"EOS 200D\", \"EOS 250D\", \"EOS M50\"\n\t  { 6384, 4224, 120, 44, 0, 0 }, // 46 \"EOS 6D Mark II\", \"EOS RP\"\n\t  { 6880, 4544, 136, 42, 0, 0 }, // 47 \"EOS 5D Mark IV\"\n\t  { 6888, 4546, 146, 48, 0, 0 }, // 48 \"EOS R\"\n\t  { 7128, 4732, 144, 72, 0, 0 }, // 49 \"EOS M6 II\", \"EOS 90D\"\n\t  { 8896, 5920, 160, 64, 0, 0 }, // 50 \"EOS 5DS\", \"EOS 5DS R\"\n  };\n\n  static const libraw_custom_camera_t const_table[] = {\n\t  { 786432, 1024, 768, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-080C\" },\n\t  { 1447680, 1392, 1040, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-145C\" },\n\t  { 1920000, 1600, 1200, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-201C\" },\n\t  { 5067304, 2588, 1958, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-510C\" },\n\t  { 5067316, 2588, 1958, 0, 0, 0, 0, 0, 0x94, 0, 0, \"AVT\", \"F-510C\", 12 },\n\t  { 10134608, 2588, 1958, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-510C\" },\n\t  { 10134620, 2588, 1958, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-510C\", 12 },\n\t  { 16157136, 3272, 2469, 0, 0, 0, 0, 9, 0x94, 0, 0, \"AVT\", \"F-810C\" },\n\t  { 15980544, 3264, 2448, 0, 0, 0, 0, 8, 0x61, 0, 1, \"AgfaPhoto\", \"DC-833m\" },\n\t  { 9631728, 2532, 1902, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Alcatel\", \"5035D\" },\n\t  { 31850496, 4608, 3456, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"GIT2 4:3\" },\n\t  { 23887872, 4608, 2592, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"GIT2 16:9\" },\n\t  { 32257024, 4624, 3488, 8, 2, 16, 2, 0, 0x94, 0, 0, \"GITUP\", \"GIT2P 4:3\" },\n\t  { 24192768, 4624, 2616, 8, 2, 16, 2, 0, 0x94, 0, 0, \"GITUP\", \"GIT2P 16:9\" },\n\t  { 18016000, 4000, 2252, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\", \"G3DUO 16:9\" },\n\t  //          {24000000, 4000, 3000, 0, 0, 0, 0, 0, 0x94, 0, 0, \"GITUP\",\n      //          \"G3DUO 4:3\"}, // Conflict w/ Samsung WB550\n\n      //   Android Raw dumps id start\n      //   File Size in bytes Horizontal Res Vertical Flag then bayer order eg\n      //   0x16 bbgr 0x94 rggb\n\t  { 1540857, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"Samsung\", \"S3\" },\n\t  { 2658304, 1212, 1096, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3FrontMipi\" },\n\t  { 2842624, 1296, 1096, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3FrontQCOM\" },\n\t  { 2969600, 1976, 1200, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"MI3wMipi\" },\n\t  { 3170304, 1976, 1200, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"MI3wQCOM\" },\n\t  { 3763584, 1584, 1184, 0, 0, 0, 0, 96, 0x61, 0, 0, \"I_Mobile\", \"I_StyleQ6\" },\n\t  { 5107712, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"UltraPixel1\" },\n\t  { 5382640, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"UltraPixel2\" },\n\t  { 5664912, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 5664912, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 5364240, 2688, 1520, 0, 0, 0, 0, 1, 0x61, 0, 0, \"OmniVisi\", \"4688\" },\n\t  { 6299648, 2592, 1944, 0, 0, 0, 0, 1, 0x16, 0, 0, \"OmniVisi\", \"OV5648\" },\n\t  { 6721536, 2592, 1944, 0, 0, 0, 0, 0, 0x16, 0, 0, \"OmniVisi\", \"OV56482\" },\n\t  { 6746112, 2592, 1944, 0, 0, 0, 0, 0, 0x16, 0, 0, \"HTC\", \"OneSV\" },\n\t  { 9631728, 2532, 1902, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Sony\", \"5mp\" },\n\t  { 9830400, 2560, 1920, 0, 0, 0, 0, 96, 0x61, 0, 0, \"NGM\", \"ForwardArt\" },\n\t  { 10186752, 3264, 2448, 0, 0, 0, 0, 1, 0x94, 0, 0, \"Sony\", \"IMX219-mipi 8mp\" },\n\t  { 10223360, 2608, 1944, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Sony\", \"IMX\" },\n\t  { 10782464, 3282, 2448, 0, 0, 0, 0, 0, 0x16, 0, 0, \"HTC\", \"MyTouch4GSlide\" },\n\t  { 10788864, 3282, 2448, 0, 0, 0, 0, 0, 0x16, 0, 0, \"Xperia\", \"L\" },\n\t  { 15967488, 3264, 2446, 0, 0, 0, 0, 96, 0x16, 0, 0, \"OmniVison\", \"OV8850\" },\n\t  { 16224256, 4208, 3082, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3MipiL\" },\n\t  { 16424960, 4208, 3120, 0, 0, 0, 0, 1, 0x16, 0, 0, \"IMX135\", \"MipiL\" },\n\t  { 17326080, 4164, 3120, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G3LQCom\" },\n\t  { 17522688, 4212, 3120, 0, 0, 0, 0, 0, 0x16, 0, 0, \"Sony\", \"IMX135-QCOM\" },\n\t  { 19906560, 4608, 3456, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Gione\", \"E7mipi\" },\n\t  { 19976192, 5312, 2988, 0, 0, 0, 0, 1, 0x16, 0, 0, \"LG\", \"G4\" },\n\t  { 20389888, 4632, 3480, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Xiaomi\", \"RedmiNote3Pro\" },\n\t  { 20500480, 4656, 3496, 0, 0, 0, 0, 1, 0x94, 0, 0, \"Sony\", \"IMX298-mipi 16mp\" },\n\t  { 21233664, 4608, 3456, 0, 0, 0, 0, 1, 0x16, 0, 0, \"Gione\", \"E7qcom\" },\n\t  { 26023936, 4192, 3104, 0, 0, 0, 0, 96, 0x94, 0, 0, \"THL\", \"5000\" },\n\t  { 26257920, 4208, 3120, 0, 0, 0, 0, 96, 0x94, 0, 0, \"Sony\", \"IMX214\" },\n\t  { 26357760, 4224, 3120, 0, 0, 0, 0, 96, 0x61, 0, 0, \"OV\", \"13860\" },\n\t  { 41312256, 5248, 3936, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Meizu\", \"MX4\" },\n\t  { 42923008, 5344, 4016, 0, 0, 0, 0, 96, 0x61, 0, 0, \"Sony\", \"IMX230\" },\n      //   Android Raw dumps id end\n\t  { 20137344, 3664, 2748, 0, 0, 0, 0, 0x40, 0x49, 0, 0, \"Aptina\", \"MT9J003\", 0xffff },\n\t  { 2868726, 1384, 1036, 0, 0, 0, 0, 64, 0x49, 0, 8, \"Baumer\", \"TXG14\", 1078 },\n\t  { 5298000, 2400, 1766, 12, 12, 44, 2, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SD300\" }, // chdk hack\n\t  { 6553440, 2664, 1968, 4, 4, 44, 4, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A460\" }, // chdk hack\n\t  { 6573120, 2672, 1968, 12, 8, 44, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A610\" }, // chdk hack\n\t  { 6653280, 2672, 1992, 10, 6, 42, 2, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A530\" }, // chdk hack\n\t  { 7710960, 2888, 2136, 44, 8, 4, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot S3 IS\" }, // chdk hack\n\t  { 9219600, 3152, 2340, 36, 12, 4, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A620\" }, // chdk hack\n\t  { 9243240, 3152, 2346, 12, 7, 44, 13, 40, 0x49, 0, 2, \"Canon\", \"PowerShot A470\" }, // chdk hack\n\t  { 10341600, 3336, 2480, 6, 5, 32, 3, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A720 IS\" }, // chdk hack\n\t  { 10383120, 3344, 2484, 12, 6, 44, 6, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A630\" }, // chdk hack\n\t  { 12945240, 3736, 2772, 12, 6, 52, 6, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A640\" }, // chdk hack\n\t  { 15636240, 4104, 3048, 48, 12, 24, 12, 40, 0x94, 0, 2, \"Canon\", \"PowerShot A650\" }, // chdk hack\n\t  { 15467760, 3720, 2772, 6, 12, 30, 0, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX110 IS\" }, // chdk hack\n\t  { 15534576, 3728, 2778, 12, 9, 44, 9, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX120 IS\" }, // chdk hack\n\t  { 18653760, 4080, 3048, 24, 12, 24, 12, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX20 IS\" }, // chdk hack\n\t  { 18763488, 4104, 3048, 10, 22, 82, 22, 8, 0x49, 0, 0, \"Canon\", \"PowerShot D10\" }, // ? chdk hack ?\n\t  { 19131120, 4168, 3060, 92, 16, 4, 1, 40, 0x94, 0, 2, \"Canon\", \"PowerShot SX220 HS\" }, // chdk hack\n\t  { 21936096, 4464, 3276, 25, 10, 73, 12, 40, 0x16, 0, 2, \"Canon\", \"PowerShot SX30 IS\" }, // chdk hack\n\t  { 24724224, 4704, 3504, 8, 16, 56, 8, 40, 0x49, 0, 2, \"Canon\", \"PowerShot A3300 IS\" }, // chdk hack\n\t  { 30858240, 5248, 3920, 8, 16, 56, 16, 40, 0x94, 0, 2, \"Canon\", \"IXUS 160\" }, // chdk hack\n\t  { 1976352, 1632, 1211, 0, 2, 0, 1, 0, 0x94, 0, 1, \"Casio\", \"QV-2000UX\" },\n\t  { 3217760, 2080, 1547, 0, 0, 10, 1, 0, 0x94, 0, 1, \"Casio\", \"QV-3*00EX\" },\n\t  { 6218368, 2585, 1924, 0, 0, 9, 0, 0, 0x94, 0, 1, \"Casio\", \"QV-5700\" },\n\t  { 7816704, 2867, 2181, 0, 0, 34, 36, 0, 0x16, 0, 1, \"Casio\", \"EX-Z60\" },\n\t  { 2937856, 1621, 1208, 0, 0, 1, 0, 0, 0x94, 7, 13, \"Casio\", \"EX-S20\" },\n\t  { 4948608, 2090, 1578, 0, 0, 32, 34, 0, 0x94, 7, 1, \"Casio\", \"EX-S100\" },\n\t  { 6054400, 2346, 1720, 2, 0, 32, 0, 0, 0x94, 7, 1, \"Casio\", \"QV-R41\" },\n\t  { 7426656, 2568, 1928, 0, 0, 0, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-P505\" },\n\t  { 7530816, 2602, 1929, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Casio\", \"QV-R51\" },\n\t  { 7542528, 2602, 1932, 0, 0, 32, 0, 0, 0x94, 7, 1, \"Casio\", \"EX-Z50\" },\n\t  { 7562048, 2602, 1937, 0, 0, 25, 0, 0, 0x16, 7, 1, \"Casio\", \"EX-Z500\" },\n\t  { 7753344, 2602, 1986, 0, 0, 32, 26, 0, 0x94, 7, 1, \"Casio\", \"EX-Z55\" },\n\t  { 9313536, 2858, 2172, 0, 0, 14, 30, 0, 0x94, 7, 1, \"Casio\", \"EX-P600\" },\n\t  { 10834368, 3114, 2319, 0, 0, 27, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z750\" },\n\t  { 10843712, 3114, 2321, 0, 0, 25, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z75\" },\n\t  { 10979200, 3114, 2350, 0, 0, 32, 32, 0, 0x94, 7, 1, \"Casio\", \"EX-P700\" },\n\t  { 12310144, 3285, 2498, 0, 0, 6, 30, 0, 0x94, 0, 1, \"Casio\", \"EX-Z850\" },\n\t  { 12489984, 3328, 2502, 0, 0, 47, 35, 0, 0x94, 0, 1, \"Casio\", \"EX-Z8\" },\n\t  { 15499264, 3754, 2752, 0, 0, 82, 0, 0, 0x94, 0, 1, \"Casio\", \"EX-Z1050\" },\n\t  { 18702336, 4096, 3044, 0, 0, 24, 0, 80, 0x94, 7, 1, \"Casio\", \"EX-ZR100\" },\n\t  { 7684000, 2260, 1700, 0, 0, 0, 0, 13, 0x94, 0, 1, \"Casio\", \"QV-4000\" },\n\t  { 787456, 1024, 769, 0, 1, 0, 0, 0, 0x49, 0, 0, \"Creative\", \"PC-CAM 600\" },\n\t  { 28829184, 4384, 3288, 0, 0, 0, 0, 36, 0x61, 0, 0, \"DJI\" },\n\t  { 15151104, 4608, 3288, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Matrix\" },\n\t  { 3840000, 1600, 1200, 0, 0, 0, 0, 65, 0x49, 0, 0, \"Foculus\", \"531C\" },\n\t  { 307200, 640, 480, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Generic\" },\n\t  { 62464, 256, 244, 1, 1, 6, 1, 0, 0x8d, 0, 0, \"Kodak\", \"DC20\" },\n\t  { 124928, 512, 244, 1, 1, 10, 1, 0, 0x8d, 0, 0, \"Kodak\", \"DC20\" },\n\t  { 1652736, 1536, 1076, 0, 52, 0, 0, 0, 0x61, 0, 0, \"Kodak\", \"DCS200\" },\n\t  { 4159302, 2338, 1779, 1, 33, 1, 2, 0, 0x94, 0, 0, \"Kodak\", \"C330\" },\n\t  { 4162462, 2338, 1779, 1, 33, 1, 2, 0, 0x94, 0, 0, \"Kodak\", \"C330\", 3160 },\n\t  { 2247168, 1232, 912, 0, 0, 16, 0, 0, 0x00, 0, 0, \"Kodak\", \"C330\" },\n\t  { 3370752, 1232, 912, 0, 0, 16, 0, 0, 0x00, 0, 0, \"Kodak\", \"C330\" },\n\t  { 6163328, 2864, 2152, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Kodak\", \"C603\" },\n\t  { 6166488, 2864, 2152, 0, 0, 0, 0, 0, 0x94, 0, 0, \"Kodak\", \"C603\", 3160 },\n\t  { 460800, 640, 480, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"C603\" },\n\t  { 9116448, 2848, 2134, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"C603\" },\n\t  { 12241200, 4040, 3030, 2, 0, 0, 13, 0, 0x49, 0, 0, \"Kodak\", \"12MP\" },\n\t  { 12272756, 4040, 3030, 2, 0, 0, 13, 0, 0x49, 0, 0, \"Kodak\", \"12MP\", 31556 },\n\t  { 18000000, 4000, 3000, 0, 0, 0, 0, 0, 0x00, 0, 0, \"Kodak\", \"12MP\" },\n\t  { 614400, 640, 480, 0, 3, 0, 0, 64, 0x94, 0, 0, \"Kodak\", \"KAI-0340\" },\n\t  { 15360000, 3200, 2400, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Lenovo\", \"A820\" },\n\t  { 3884928, 1608, 1207, 0, 0, 0, 0, 96, 0x16, 0, 0, \"Micron\", \"2010\", 3212 },\n\t  { 1138688, 1534, 986, 0, 0, 0, 0, 0, 0x61, 0, 0, \"Minolta\", \"RD175\", 513 },\n\t  { 1581060, 1305, 969, 0, 0, 18, 6, 6, 0x1e, 4, 1, \"Nikon\", \"E900\" }, // \"diag raw\" hack\n\t  { 2465792, 1638, 1204, 0, 0, 22, 1, 6, 0x4b, 5, 1, \"Nikon\", \"E950\" }, // \"diag raw\" hack; possibly also Nikon E700, E800, E775;\n\t                                                                        // Olympus C-2020Z\n\t  { 2940928, 1616, 1213, 0, 0, 0, 7, 30, 0x94, 0, 1, \"Nikon\", \"E2100\" }, // \"diag raw\" hack; also Nikon E2500\n\t  { 4771840, 2064, 1541, 0, 0, 0, 1, 6, 0xe1, 0, 1, \"Nikon\", \"E990\" }, // \"diag raw\" hack; possibly also Nikon E880, E885, E995;\n\t                                                                       // Olympus C-3030Z\n\t  { 4775936, 2064, 1542, 0, 0, 0, 0, 30, 0x94, 0, 1, \"Nikon\", \"E3700\" }, // \"diag raw\" hack; Nikon E3100, E3200, E3500;\n\t                                                                         // Pentax \"Optio 33WR\"; possibly also Olympus C-740UZ\n\t  { 5865472, 2288, 1709, 0, 0, 0, 1, 6, 0xb4, 0, 1, \"Nikon\", \"E4500\" }, // \"diag raw\" hack; possibly also Olympus C-4040Z\n\t  { 5869568, 2288, 1710, 0, 0, 0, 0, 6, 0x16, 0, 1, \"Nikon\", \"E4300\" }, // \"diag raw\" hack; also Minolta \"DiMAGE Z2\"\n\t  { 7438336, 2576, 1925, 0, 0, 0, 1, 6, 0xb4, 0, 1, \"Nikon\", \"E5000\" }, // also Nikon E5700\n\t  { 8998912, 2832, 2118, 0, 0, 0, 0, 30, 0x94, 7, 1, \"Nikon\", \"COOLPIX S6\" }, // \"diag raw\" hack\n\t  { 5939200, 2304, 1718, 0, 0, 0, 0, 30, 0x16, 0, 0, \"Olympus\", \"C-770UZ\" }, // possibly also Olympus C-4100Z, C-765UZ\n\t  { 3178560, 2064, 1540, 0, 0, 0, 0, 0, 0x94, 0, 1, \"Pentax\", \"Optio S V1.01\" },\n\t  { 4841984, 2090, 1544, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Pentax\", \"Optio S\" },\n\t  { 6114240, 2346, 1737, 0, 0, 22, 0, 0, 0x94, 7, 1, \"Pentax\", \"Optio S4\" },\n\t  { 10702848, 3072, 2322, 0, 0, 0, 21, 30, 0x94, 0, 1, \"Pentax\", \"Optio 750Z\" },\n\t  { 4147200, 1920, 1080, 0, 0, 0, 0, 0, 0x49, 0, 0, \"Photron\", \"BC2-HD\" },\n\t  { 4151666, 1920, 1080, 0, 0, 0, 0, 0, 0x49, 0, 0, \"Photron\", \"BC2-HD\", 8 },\n\t  { 13248000, 2208, 3000, 0, 0, 0, 0, 13, 0x61, 0, 0, \"Pixelink\", \"A782\" },\n\t  { 6291456, 2048, 1536, 0, 0, 0, 0, 96, 0x61, 0, 0, \"RoverShot\", \"3320AF\" },\n\t  { 311696, 644, 484, 0, 0, 0, 0, 0, 0x16, 0, 8, \"ST Micro\", \"STV680 VGA\" },\n\t  { 16098048, 3288, 2448, 0, 0, 24, 0, 9, 0x94, 0, 1, \"Samsung\", \"S85\" }, // hack\n\t  { 16215552, 3312, 2448, 0, 0, 48, 0, 9, 0x94, 0, 1, \"Samsung\", \"S85\" }, // hack\n\t  { 20487168, 3648, 2808, 0, 0, 0, 0, 13, 0x94, 5, 1, \"Samsung\", \"WB550\" },\n\t  { 24000000, 4000, 3000, 0, 0, 0, 0, 13, 0x94, 5, 1, \"Samsung\", \"WB550\" },\n\t  { 12582980, 3072, 2048, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 23; same res. as Leaf Volare & Cantare\n\t  { 33292868, 4080, 4080, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 44\n\t  { 44390468, 4080, 5440, 0, 0, 0, 0, 33, 0x61, 0, 0, \"Sinar\", \"\", 68 }, // Sinarback 54\n\t  { 1409024, 1376, 1024, 0, 0, 1, 0, 0, 0x49, 0, 0, \"Sony\", \"XCD-SX910CR\" },\n\t  { 2818048, 1376, 1024, 0, 0, 1, 0, 97, 0x49, 0, 0, \"Sony\", \"XCD-SX910CR\" },\n  };\n\n  libraw_custom_camera_t\n      table[64 + sizeof(const_table) / sizeof(const_table[0])];\n\n\n  // clang-format on\n\n  char head[64] = {0}, *cp;\n  int hlen, fsize, flen, zero_fsize = 1, i, c;\n  struct jhead jh;\n\n  unsigned camera_count =\n      parse_custom_cameras(64, table, imgdata.params.custom_camera_strings);\n  for (int q = 0; q < int(sizeof(const_table) / sizeof(const_table[0])); q++)\n    memmove(&table[q + camera_count], &const_table[q], sizeof(const_table[0]));\n  camera_count += sizeof(const_table) / sizeof(const_table[0]);\n\n  tiff_flip = flip = filters = UINT_MAX; /* unknown */\n  raw_height = raw_width = fuji_width = fuji_layout = cr2_slice[0] = 0;\n  maximum = height = width = top_margin = left_margin = 0;\n  cdesc[0] = desc[0] = artist[0] = make[0] = model[0] = model2[0] = 0;\n  iso_speed = shutter = aperture = focal_len = 0;\n  unique_id = 0ULL;\n  tiff_nifds = 0;\n  is_NikonTransfer = 0;\n  is_Sony = 0;\n  is_pana_raw = 0;\n  maker_index = LIBRAW_CAMERAMAKER_Unknown;\n  is_4K_RAFdata = 0;\n  FujiCropMode = 0;\n  is_PentaxRicohMakernotes = 0;\n  normalized_model[0] = 0;\n  normalized_make[0] = 0;\n  CM_found = 0;\n  memset(tiff_ifd, 0, sizeof tiff_ifd);\n  libraw_internal_data.unpacker_data.crx_track_selected = -1;\n  libraw_internal_data.unpacker_data.CR3_CTMDtag = 0;\n  imgdata.makernotes.hasselblad.nIFD_CM[0] =\n    imgdata.makernotes.hasselblad.nIFD_CM[1] = -1;\n  imgdata.makernotes.kodak.ISOCalibrationGain = 1.0f;\n  imCommon.CameraTemperature = imCommon.SensorTemperature =\n      imCommon.SensorTemperature2 = imCommon.LensTemperature =\n          imCommon.AmbientTemperature = imCommon.BatteryTemperature =\n              imCommon.exifAmbientTemperature = -1000.0f;\n\n  imgdata.color.ExifColorSpace = LIBRAW_COLORSPACE_Unknown;\n  for (i = 0; i < LIBRAW_IFD_MAXCOUNT; i++)\n  {\n    tiff_ifd[i].dng_color[0].illuminant = tiff_ifd[i].dng_color[1].illuminant =\n        0xffff;\n    for (int c = 0; c < 4; c++)\n      tiff_ifd[i].dng_levels.analogbalance[c] = 1.0f;\n  }\n\n  memset(gpsdata, 0, sizeof gpsdata);\n  memset(cblack, 0, sizeof cblack);\n  memset(white, 0, sizeof white);\n  memset(mask, 0, sizeof mask);\n  thumb_offset = thumb_length = thumb_width = thumb_height = 0;\n  load_raw = thumb_load_raw = 0;\n  write_thumb = &LibRaw::jpeg_thumb;\n  data_offset = meta_offset = meta_length = tiff_bps = tiff_compress = 0;\n  kodak_cbpp = zero_after_ff = dng_version = load_flags = 0;\n  timestamp = shot_order = tiff_samples = black = is_foveon = 0;\n  mix_green = profile_length = data_error = zero_is_bad = 0;\n  pixel_aspect = is_raw = raw_color = 1;\n  tile_width = tile_length = 0;\n  metadata_blocks = 0;\n\n  for (i = 0; i < 4; i++)\n  {\n    cam_mul[i] = i == 1;\n    pre_mul[i] = i < 3;\n    FORC3 cmatrix[c][i] = 0;\n    FORC3 rgb_cam[c][i] = c == i;\n  }\n  colors = 3;\n  for (i = 0; i < 0x10000; i++)\n    curve[i] = i;\n\n  order = get2();\n  hlen = get4();\n  fseek(ifp, 0, SEEK_SET);\n\n  if (fread(head, 1, 64, ifp) < 64)\n    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n  libraw_internal_data.unpacker_data.lenRAFData =\n      libraw_internal_data.unpacker_data.posRAFData = 0;\n\n  fseek(ifp, 0, SEEK_END);\n  flen = fsize = ftell(ifp);\n  if ((cp = (char *)memmem(head, 32, (char *)\"MMMM\", 4)) ||\n      (cp = (char *)memmem(head, 32, (char *)\"IIII\", 4)))\n  {\n    parse_phase_one(cp - head);\n    if (cp - head && parse_tiff(0))\n      apply_tiff();\n  }\n  else if (order == 0x4949 || order == 0x4d4d)\n  {\n    if (!memcmp(head + 6, \"HEAPCCDR\", 8))\n    {\n      data_offset = hlen;\n      parse_ciff(hlen, flen - hlen, 0);\n      load_raw = &LibRaw::canon_load_raw;\n    }\n    else if (parse_tiff(0))\n      apply_tiff();\n  }\n  else if (!memcmp(head, \"\\xff\\xd8\\xff\\xe1\", 4) && !memcmp(head + 6, \"Exif\", 4))\n  {\n    fseek(ifp, 4, SEEK_SET);\n    data_offset = 4 + get2();\n    fseek(ifp, data_offset, SEEK_SET);\n    if (fgetc(ifp) != 0xff)\n      parse_tiff(12);\n    thumb_offset = 0;\n  }\n  else if (!memcmp(head + 25, \"ARECOYK\", 7)) // 'KYOCERA' right-to-left\n  {\n    strcpy(make, \"Contax\");\n    strcpy(model, \"N Digital\");\n    parse_kyocera();\n  }\n  else if (!strcmp(head, \"PXN\"))\n  {\n    strcpy(make, \"Logitech\");\n    strcpy(model, \"Fotoman Pixtura\");\n  }\n  else if (!strcmp(head, \"qktk\"))\n  {\n    strcpy(make, \"Apple\");\n    strcpy(model, \"QuickTake 100\");\n    load_raw = &LibRaw::quicktake_100_load_raw;\n  }\n  else if (!strcmp(head, \"qktn\"))\n  {\n    strcpy(make, \"Apple\");\n    strcpy(model, \"QuickTake 150\");\n    load_raw = &LibRaw::kodak_radc_load_raw;\n  }\n  else if (!memcmp(head, \"FUJIFILM\", 8))\n  {\n    memcpy(imFuji.SerialSignature, head + 0x10, 0x0c);\n    imFuji.SerialSignature[0x0c] = 0;\n    strncpy(model, head + 0x1c, 0x20);\n    model[0x20] = 0;\n    memcpy(model2, head + 0x3c, 4);\n    model2[4] = 0;\n    strcpy(imFuji.RAFVersion, model2);\n    fseek(ifp, 84, SEEK_SET);\n    thumb_offset = get4();\n    thumb_length = get4();\n    fseek(ifp, 92, SEEK_SET);\n    parse_fuji(get4());\n    if (thumb_offset > 120)\n    {\n      fseek(ifp, 120, SEEK_SET);\n      is_raw += (i = get4()) ? 1 : 0;\n      if (is_raw == 2 && shot_select)\n        parse_fuji(i);\n    }\n    load_raw = &LibRaw::unpacked_load_raw;\n    fseek(ifp, 100 + 28 * (shot_select > 0), SEEK_SET);\n    parse_tiff(data_offset = get4());\n    parse_tiff(thumb_offset + 12);\n    apply_tiff();\n  }\n  else if (!memcmp(head, \"RIFF\", 4))\n  {\n    fseek(ifp, 0, SEEK_SET);\n    parse_riff();\n  }\n  else if (!memcmp(head + 4, \"ftypqt   \", 9))\n  {\n    fseek(ifp, 0, SEEK_SET);\n    parse_qt(fsize);\n    is_raw = 0;\n  }\n  else if (!memcmp(head, \"\\0\\001\\0\\001\\0@\", 6))\n  {\n    fseek(ifp, 6, SEEK_SET);\n    fread(make, 1, 8, ifp);\n    fread(model, 1, 8, ifp);\n    fread(model2, 1, 16, ifp);\n    data_offset = get2();\n    get2();\n    raw_width = get2();\n    raw_height = get2();\n    load_raw = &LibRaw::nokia_load_raw;\n    filters = 0x61616161;\n  }\n  else if (!memcmp(head, \"NOKIARAW\", 8))\n  {\n    strcpy(make, \"NOKIA\");\n    order = 0x4949;\n    fseek(ifp, 300, SEEK_SET);\n    data_offset = get4();\n    i = get4(); // bytes count\n    width = get2();\n    height = get2();\n\n    // Data integrity check\n    if (width < 1 || width > 16000 || height < 1 || height > 16000 ||\n        i < (width * height) || i > (2 * width * height))\n      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n\n    switch (tiff_bps = i * 8 / (width * height))\n    {\n    case 8:\n      load_raw = &LibRaw::eight_bit_load_raw;\n      break;\n    case 10:\n      load_raw = &LibRaw::nokia_load_raw;\n      break;\n    case 0:\n      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n      break;\n    }\n    raw_height = height + (top_margin = i / (width * tiff_bps / 8) - height);\n    mask[0][3] = 1;\n    filters = 0x61616161;\n  }\n  else if (!memcmp(head, \"ARRI\", 4))\n  {\n    order = 0x4949;\n    fseek(ifp, 20, SEEK_SET);\n    width = get4();\n    height = get4();\n    strcpy(make, \"ARRI\");\n    fseek(ifp, 668, SEEK_SET);\n    fread(model, 1, 64, ifp);\n    model[63] = 0;\n    fseek(ifp, 760, SEEK_SET);\n    fread(software, 1, 64, ifp);\n    if((unsigned char)software[0] == 0xff) software[0] = 0;\n    software[63] = 0;\n    data_offset = 4096;\n    load_raw = &LibRaw::packed_load_raw;\n    load_flags = 88;\n    filters = 0x61616161;\n    fixupArri();\n  }\n  else if (!memcmp(head, \"XPDS\", 4))\n  {\n    order = 0x4949;\n    fseek(ifp, 0x800, SEEK_SET);\n    fread(make, 1, 41, ifp);\n    raw_height = get2();\n    raw_width = get2();\n    fseek(ifp, 56, SEEK_CUR);\n    fread(model, 1, 30, ifp);\n    data_offset = 0x10000;\n    load_raw = &LibRaw::canon_rmf_load_raw;\n    gamma_curve(0, 12.25, 1, 1023);\n  }\n  else if (!memcmp(head + 4, \"RED1\", 4))\n  {\n    strcpy(make, \"Red\");\n    strcpy(model, \"One\");\n    parse_redcine();\n    load_raw = &LibRaw::redcine_load_raw;\n    gamma_curve(1 / 2.4, 12.92, 1, 4095);\n    filters = 0x49494949;\n  }\n  else if (!memcmp(head, \"DSC-Image\", 9))\n    parse_rollei();\n  else if (!memcmp(head, \"PWAD\", 4))\n    parse_sinar_ia();\n  else if (!memcmp(head, \"\\0MRM\", 4))\n    parse_minolta(0);\n  else if (!memcmp(head, \"FOVb\", 4))\n  {\n    parse_x3f(); /* Does nothing if USE_X3FTOOLS is not defined */\n  }\n  else if (!memcmp(head, \"CI\", 2))\n    parse_cine();\n#ifdef USE_6BY9RPI\n  else if (!memcmp(head, \"BRCM\", 4)) {\n\tfseek(ifp, 0, SEEK_SET);\n\tstrcpy(make, \"RaspberryPi\");\n\tstrcpy(model, \"Pi\");\n\tparse_raspberrypi();\n\t}\n#endif\n  else if (!memcmp(head + 4, \"ftypcrx \", 8))\n  {\n    int err;\n    unsigned long long szAtomList;\n    short nesting = -1;\n    short nTrack = -1;\n    short TrackType;\n    char AtomNameStack[128];\n    strcpy(make, \"Canon\");\n\n    szAtomList = ifp->size();\n    err = parseCR3(0ULL, szAtomList, nesting, AtomNameStack, nTrack, TrackType);\n    if ((err == 0 || err == -14) &&\n        nTrack >= 0) // no error, or too deep nesting\n      selectCRXTrack(nTrack);\n  }\n\n  if (make[0] == 0)\n    for (zero_fsize = i = 0; i < (int)camera_count; i++)\n      if (fsize == (int)table[i].fsize)\n      {\n        strcpy(make, table[i].t_make);\n        strcpy(model, table[i].t_model);\n        flip = table[i].flags >> 2;\n        zero_is_bad = table[i].flags & 2;\n        data_offset = table[i].offset == 0xffff ? 0 : table[i].offset;\n        raw_width = table[i].rw;\n        raw_height = table[i].rh;\n        left_margin = table[i].lm;\n        top_margin = table[i].tm;\n        width = raw_width - left_margin - table[i].rm;\n        height = raw_height - top_margin - table[i].bm;\n        filters = 0x1010101U * table[i].cf;\n        colors = 4 - !((filters & filters >> 1) & 0x5555);\n        load_flags = table[i].lf & 0xff;\n        if (table[i].lf & 0x100) /* Monochrome sensor dump */\n        {\n          colors = 1;\n          filters = 0;\n        }\n        switch (tiff_bps = (fsize - data_offset) * 8 / (raw_width * raw_height))\n        {\n        case 6:\n          load_raw = &LibRaw::minolta_rd175_load_raw;\n          ilm.CameraMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 8:\n          load_raw = &LibRaw::eight_bit_load_raw;\n          break;\n        case 10:\n          if ((fsize - data_offset) / raw_height * 3 >= raw_width * 4)\n          {\n            load_raw = &LibRaw::android_loose_load_raw;\n            break;\n          }\n          else if (load_flags & 1)\n          {\n            load_raw = &LibRaw::android_tight_load_raw;\n            break;\n          }\n        case 12:\n          load_flags |= 128;\n          load_raw = &LibRaw::packed_load_raw;\n          break;\n        case 16:\n          order = 0x4949 | 0x404 * (load_flags & 1);\n          tiff_bps -= load_flags >> 4;\n          tiff_bps -= load_flags = load_flags >> 1 & 7;\n          load_raw = table[i].offset == 0xffff\n                         ? &LibRaw::unpacked_load_raw_reversed\n                         : &LibRaw::unpacked_load_raw;\n        }\n        maximum = (1 << tiff_bps) - (1 << table[i].max);\n        break;\n      }\n  if (zero_fsize)\n    fsize = 0;\n  if (make[0] == 0)\n    parse_smal(0, flen);\n  if (make[0] == 0)\n  {\n    parse_jpeg(0);\n#ifdef USE_6BY9RPI\n\tif (!(strncmp(model, \"ov\", 2) && strncmp(model, \"RP_\", 3))) {\n\t\t//Assume that this isn't a raw unless the header can be found\n\t\tis_raw = 0;\n\n\t\tif (!strncasecmp(model, \"RP_imx\", 6)) {\n\t\t\tconst long offsets[] = {\n\t\t\t\t//IMX219 offsets\n\t\t\t\t10270208, //8MPix 3280x2464\n\t\t\t\t2678784,  //1920x1080\n\t\t\t\t2628608,  //1640x1232\n\t\t\t\t1963008,  //1640x922\n\t\t\t\t1233920,  //1280x720\n\t\t\t\t445440,   //640x480\n\t\t\t\t-1        //Marker for end of table\n\t\t\t};\n\t\t\tint offset_idx;\n\t\t\tfor (offset_idx = 0; offsets[offset_idx] != -1; offset_idx++) {\n\t\t\t\tif (!fseek(ifp, -offsets[offset_idx], SEEK_END) &&\n\t\t\t\t\tfread(head, 1, 32, ifp) && !strncmp(head, \"BRCM\", 4)) {\n\n\t\t\t\t\tfseek(ifp, -32, SEEK_CUR);\n\t\t\t\t\tstrcpy(make, \"SonyRPF\");\n\t\t\t\t\tparse_raspberrypi();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (!strncasecmp(model, \"RP_OV\", 5) || !strncasecmp(model, \"ov5647\", 6)) {\n\t\t\tconst long offsets[] = {\n\t\t\t\t\t6404096,  //5MPix 2592x1944\n\t\t\t\t\t2717696,  //1920x1080\n\t\t\t\t\t1625600,  //1296x972\n\t\t\t\t\t1233920,  //1296x730\n\t\t\t\t\t445440,   //640x480\n\t\t\t\t\t-1        //Marker for end of table\n\t\t\t};\n\t\t\tint offset_idx;\n\t\t\tfor (offset_idx = 0; offsets[offset_idx] != -1; offset_idx++) {\n\t\t\t\tif (!fseek(ifp, -offsets[offset_idx], SEEK_END) &&\n\t\t\t\t\tfread(head, 1, 32, ifp) && !strncmp(head, \"BRCM\", 4)) {\n\t\t\t\t\tfseek(ifp, -32, SEEK_CUR);\n\t\t\t\t\tstrcpy(make, \"OmniVision\");\n\t\t\t\t\twidth = raw_width;\n\t\t\t\t\t//Defaults\n\t\t\t\t\traw_width = 2611;\n\t\t\t\t\tfilters = 0x16161616;\n\t\t\t\t\tparse_raspberrypi();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t  }\n\t}// else is_raw = 0;\n#else\n    fseek(ifp, 0, SEEK_END);\n    int sz = ftell(ifp);\n    if (!strncmp(model, \"RP_imx219\", 9) && sz >= 0x9cb600 &&\n        !fseek(ifp, -0x9cb600, SEEK_END) && fread(head, 1, 0x20, ifp) &&\n        !strncmp(head, \"BRCM\", 4))\n    {\n      strcpy(make, \"Broadcom\");\n      strcpy(model, \"RPi IMX219\");\n      if (raw_height > raw_width)\n        flip = 5;\n      data_offset = ftell(ifp) + 0x8000 - 0x20;\n      parse_broadcom();\n      black = 66;\n      maximum = 0x3ff;\n      load_raw = &LibRaw::broadcom_load_raw;\n      thumb_offset = 0;\n      thumb_length = sz - 0x9cb600 - 1;\n    }\n    else if (!(strncmp(model, \"ov5647\", 6) && strncmp(model, \"RP_OV5647\", 9)) &&\n             sz >= 0x61b800 && !fseek(ifp, -0x61b800, SEEK_END) &&\n             fread(head, 1, 0x20, ifp) && !strncmp(head, \"BRCM\", 4))\n    {\n      strcpy(make, \"Broadcom\");\n      if (!strncmp(model, \"ov5647\", 6))\n        strcpy(model, \"RPi OV5647 v.1\");\n      else\n        strcpy(model, \"RPi OV5647 v.2\");\n      if (raw_height > raw_width)\n        flip = 5;\n      data_offset = ftell(ifp) + 0x8000 - 0x20;\n      parse_broadcom();\n      black = 16;\n      maximum = 0x3ff;\n      load_raw = &LibRaw::broadcom_load_raw;\n      thumb_offset = 0;\n      thumb_length = sz - 0x61b800 - 1;\n    }\n    else\n      is_raw = 0;\n#endif\n  }\n\n  // make sure strings are terminated\n  desc[511] = artist[63] = make[63] = model[63] = model2[63] = 0;\n\n  for (i = 0; i < int(sizeof CorpTable / sizeof *CorpTable); i++)\n  {\n    if (strcasestr(make, CorpTable[i].CorpName))\n    { /* Simplify company names */\n      maker_index = CorpTable[i].CorpId;\n      strcpy(make, CorpTable[i].CorpName);\n    }\n  }\n\n  if ((makeIs(LIBRAW_CAMERAMAKER_Kodak) || makeIs(LIBRAW_CAMERAMAKER_Leica)) &&\n      ((cp = strcasestr(model, \" DIGITAL CAMERA\")) ||\n       (cp = strstr(model, \"FILE VERSION\")))) {\n    *cp = 0;\n  } else if (makeIs(LIBRAW_CAMERAMAKER_Ricoh) && !strncasecmp(model, \"PENTAX\", 6)) {\n    maker_index = LIBRAW_CAMERAMAKER_Pentax;\n    strcpy(make, \"Pentax\");\n  } else if (makeIs(LIBRAW_CAMERAMAKER_JK_Imaging) && !strncasecmp(model, \"Kodak\", 5)) {\n    maker_index = LIBRAW_CAMERAMAKER_Kodak;\n    strcpy(make, \"Kodak\");\n  }\n\n  remove_trailing_spaces(make, sizeof(make));\n  remove_trailing_spaces(model, sizeof(model));\n\n  i = strbuflen(make); /* Remove make from model */\n  if (!strncasecmp(model, make, i) && model[i++] == ' ')\n    memmove(model, model + i, 64 - i);\n\n  if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm) && !strncmp(model, \"FinePix\", 7)) {\n    memmove(model, model + 7, strlen(model) - 6);\n    if (model[0] == ' ') {\n      memmove(model, model + 1, strlen(model));\n    }\n  } else if ((makeIs(LIBRAW_CAMERAMAKER_Kodak) || makeIs(LIBRAW_CAMERAMAKER_Konica)) &&\n           !strncmp(model, \"Digital Camera \", 15)) {\n    memmove(model, model + 15, strlen(model) - 14);\n  }\n\n  desc[511] = artist[63] = make[63] = model[63] = model2[63] = 0;\n  if (!is_raw)\n    goto notraw;\n\n  if (!height)\n    height = raw_height;\n  if (!width)\n    width = raw_width;\n\n  identify_finetune_pentax();\n\n\n  if (dng_version)\n  {\n    if (filters == UINT_MAX)\n      filters = 0;\n    if (!filters)\n      colors = tiff_samples;\n    switch (tiff_compress)\n    {\n    case 0: // Compression not set, assuming uncompressed\n    case 1:\n#ifdef USE_DNGSDK\n      // Uncompressed float\n      if (load_raw != &LibRaw::float_dng_load_raw_placeholder)\n#endif\n        load_raw = &LibRaw::packed_dng_load_raw;\n      break;\n    case 7:\n      load_raw = &LibRaw::lossless_dng_load_raw;\n      break;\n    case 8:\n      load_raw = &LibRaw::deflate_dng_load_raw;\n      break;\n#ifdef USE_GPRSDK\n    case 9:\n        load_raw = &LibRaw::vc5_dng_load_raw_placeholder;\n        break;\n#endif\n    case 34892:\n      load_raw = &LibRaw::lossy_dng_load_raw;\n      break;\n    default:\n      load_raw = 0;\n    }\n    GetNormalizedModel();\n    if (makeIs(LIBRAW_CAMERAMAKER_Olympus) &&\n        (OlyID == OlyID_STYLUS_1) && // don't use normalized_model below, it is 'Stylus 1'\n        (strchr(model+6, 's') ||\n         strchr(model+6, 'S')))\n    {\n      width -= 16;\n    }\n    goto dng_skip;\n  }\n\n  if (makeIs(LIBRAW_CAMERAMAKER_Canon) && !fsize && tiff_bps != 15)\n  {\n      bool fromtable = false;\n    if (!load_raw)\n      load_raw = &LibRaw::lossless_jpeg_load_raw;\n    for (i = 0; i < int(sizeof canon / sizeof *canon); i++)\n      if (raw_width == canon[i][0] && raw_height == canon[i][1])\n      {\n        width = raw_width - (left_margin = canon[i][2]);\n        height = raw_height - (top_margin = canon[i][3]);\n        width -= canon[i][4];\n        height -= canon[i][5];\n        mask[0][1] = canon[i][6];\n        mask[0][3] = -canon[i][7];\n        mask[1][1] = canon[i][8];\n        mask[1][3] = -canon[i][9];\n        if (canon[i][10])\n          filters = canon[i][10] * 0x01010101U;\n        fromtable = true;\n      }\n    if ((unique_id | 0x20000ULL) ==\n        0x2720000ULL) // \"PowerShot G11\", \"PowerShot S90\": 0x2700000, 0x2720000\n                      // possibly \"PowerShot SX120 IS\" (if not chdk hack?): 0x2710000\n    {\n      left_margin = 8;\n      top_margin = 16;\n    }\n    if(!fromtable && imgdata.makernotes.canon.AverageBlackLevel) // not known, but metadata known\n    {\n        FORC4 cblack[c] = imgdata.makernotes.canon.ChannelBlackLevel[c];\n        black = cblack[4] = cblack[5] = 0;\n        // Prevent automatic BL calculation\n        mask[0][3] = 1;\n        mask[0][1] = 2;\n\n        if(imgdata.makernotes.canon.SensorWidth == raw_width\n            && imgdata.makernotes.canon.SensorHeight == raw_height)\n        {\n            left_margin = (imgdata.makernotes.canon.SensorLeftBorder+1) & 0xfffe; // round to 2\n            width = imgdata.makernotes.canon.SensorRightBorder - left_margin;\n            top_margin = (imgdata.makernotes.canon.SensorTopBorder +1)  & 0xfffe;\n            height = imgdata.makernotes.canon.SensorBottomBorder - top_margin;\n        }\n    }\n  }\n\n  identify_finetune_by_filesize(fsize);\n\n  if (!strcmp(model, \"KAI-0340\") && find_green(16, 16, 3840, 5120) < 25)\n  {\n    height = 480;\n    top_margin = filters = 0;\n    strcpy(model, \"C603\");\n  }\n\n  GetNormalizedModel();\n\n  identify_finetune_dcr(head, fsize, flen);\n\n  /* Early reject for damaged images */\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 4 || colors > 4 ||\n      colors < 1\n      /* alloc in unpack() may be fooled by size adjust */\n      || ((int)width + (int)left_margin > 65535) ||\n      ((int)height + (int)top_margin > 65535))\n  {\n    is_raw = 0;\n    RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n    return;\n  }\n  if (!model[0])\n  {\n    sprintf(model, \"%dx%d\", width, height);\n    strcpy(normalized_model, model);\n  }\n\n  if (!(imgdata.params.raw_processing_options &\n        LIBRAW_PROCESSING_ZEROFILTERS_FOR_MONOCHROMETIFFS) &&\n      (filters == UINT_MAX)) // Default dcraw behaviour\n    filters = 0x94949494;\n  else if (filters == UINT_MAX)\n  {\n    if (tiff_nifds > 0 && tiff_samples == 1)\n    {\n      colors = 1;\n      filters = 0;\n    }\n    else\n      filters = 0x94949494;\n  }\n\n  if (thumb_offset && !thumb_height)\n  {\n    fseek(ifp, thumb_offset, SEEK_SET);\n    if (ljpeg_start(&jh, 1))\n    {\n      thumb_width = jh.wide;\n      thumb_height = jh.high;\n    }\n  }\n\ndng_skip:\n  if (dng_version)\n\t  identify_process_dng_fields();\n\n  /* Early reject for damaged images again (after dng fields processing) */\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 4 || colors > 4 || colors < 1)\n  {\n    is_raw = 0;\n    RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n    return;\n  }\n  {\n    // Check cam_mul range\n    int cmul_ok = 1;\n    FORCC if (cam_mul[c] <= 0.001f) cmul_ok = 0;\n    ;\n\n    if (cmul_ok)\n    {\n      double cmin = cam_mul[0], cmax;\n      double cnorm[4];\n      FORCC cmin = MIN(cmin, cam_mul[c]);\n      FORCC cnorm[c] = cam_mul[c] / cmin;\n      cmax = cmin = cnorm[0];\n      FORCC\n      {\n        cmin = MIN(cmin, cnorm[c]);\n        cmax = MIN(cmax, cnorm[c]);\n      }\n      if (cmin <= 0.01f || cmax > 100.f)\n        cmul_ok = false;\n    }\n    if (!cmul_ok)\n    {\n      if (cam_mul[0] > 0)\n        cam_mul[0] = 0;\n      cam_mul[3] = 0;\n    }\n  }\n  if ((use_camera_matrix & (((use_camera_wb || dng_version)?0:1) | 0x2)) &&\n      cmatrix[0][0] > 0.125)\n  {\n    memcpy(rgb_cam, cmatrix, sizeof cmatrix);\n    raw_color = 0;\n  }\n  if (raw_color && !CM_found)\n    CM_found = adobe_coeff(maker_index, normalized_model);\n  else if ((imgdata.color.cam_xyz[0][0] < 0.01) && !CM_found)\n    CM_found = adobe_coeff(maker_index, normalized_model, 1);\n\n  if (load_raw == &LibRaw::kodak_radc_load_raw)\n    if ((raw_color) && !CM_found)\n\t\tCM_found = adobe_coeff(LIBRAW_CAMERAMAKER_Apple, \"Quicktake\");\n\n  if ((maker_index != LIBRAW_CAMERAMAKER_Unknown) && normalized_model[0])\n    SetStandardIlluminants (maker_index, normalized_model);\n\n  // Clear erorneus fuji_width if not set through parse_fuji or for DNG\n  if (fuji_width && !dng_version &&\n      !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED))\n    fuji_width = 0;\n\n  if (fuji_width)\n  {\n    fuji_width = width >> !fuji_layout;\n    filters = fuji_width & 1 ? 0x94949494 : 0x49494949;\n    width = (height >> fuji_layout) + fuji_width;\n    height = width - 1;\n    pixel_aspect = 1;\n  }\n  else\n  {\n    if (raw_height < height)\n      raw_height = height;\n    if (raw_width < width)\n      raw_width = width;\n  }\n  if (!tiff_bps)\n    tiff_bps = 12;\n  if (!maximum)\n  {\n    maximum = (1 << tiff_bps) - 1;\n    if (maximum < 0x10000 && curve[maximum] > 0 &&\n        load_raw == &LibRaw::sony_arw2_load_raw)\n      maximum = curve[maximum];\n  }\n  if (maximum > 0xffff)\n    maximum = 0xffff;\n  if (!load_raw || height < 22 || width < 22 ||\n      (tiff_bps > 16 &&\n       (load_raw != &LibRaw::deflate_dng_load_raw &&\n        load_raw != &LibRaw::float_dng_load_raw_placeholder)) ||\n      tiff_samples > 6 || colors > 4)\n    is_raw = 0;\n\n  if (raw_width < 22 || raw_width > 64000 || raw_height < 22 ||\n      pixel_aspect < 0.1 || pixel_aspect > 10. ||\n      raw_height > 64000)\n    is_raw = 0;\n\n#ifdef NO_JASPER\n  if (load_raw == &LibRaw::redcine_load_raw)\n  {\n    is_raw = 0;\n    imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;\n  }\n#endif\n#ifdef NO_JPEG\n  if (load_raw == &LibRaw::kodak_jpeg_load_raw ||\n      load_raw == &LibRaw::lossy_dng_load_raw)\n  {\n    is_raw = 0;\n    imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;\n  }\n#endif\n  if (!cdesc[0])\n    strcpy(cdesc, colors == 3 ? \"RGBG\" : \"GMCY\");\n  if (!raw_height)\n    raw_height = height;\n  if (!raw_width)\n    raw_width = width;\n  if (filters > 999 && colors == 3)\n    filters |= ((filters >> 2 & 0x22222222) | (filters << 2 & 0x88888888)) &\n               filters << 1;\nnotraw:\n  if (flip == (int)UINT_MAX)\n    flip = tiff_flip;\n  if (flip == (int)UINT_MAX)\n    flip = 0;\n\n  // Convert from degrees to bit-field if needed\n  if (flip > 89 || flip < -89)\n  {\n    switch ((flip + 3600) % 360)\n    {\n    case 270:\n      flip = 5;\n      break;\n    case 180:\n      flip = 3;\n      break;\n    case 90:\n      flip = 6;\n      break;\n    }\n  }\n\n  if (pana_bpp)\n    imgdata.color.raw_bps = pana_bpp;\n  else if ((load_raw == &LibRaw::phase_one_load_raw) ||\n           (load_raw == &LibRaw::phase_one_load_raw_c))\n    imgdata.color.raw_bps = ph1.format;\n  else\n    imgdata.color.raw_bps = tiff_bps;\n\n  RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY, 1, 2);\n}\n\nvoid LibRaw::identify_process_dng_fields()\n{\n\tif (!dng_version) return;\n\tint c;\n\t{\n\t\t/* copy DNG data from per-IFD field to color.dng */\n\t\tint iifd = find_ifd_by_offset(data_offset);\n\t\tint pifd = find_ifd_by_offset(thumb_offset);\n\n#define CFAROUND(value, filters)                                               \\\n  filters ? (filters >= 1000 ? ((value + 1) / 2) * 2 : ((value + 5) / 6) * 6)  \\\n          : value\n\n#define IFDCOLORINDEX(ifd, subset, bit)                                        \\\n  (tiff_ifd[ifd].dng_color[subset].parsedfields & bit)                         \\\n      ? ifd                                                                    \\\n      : ((tiff_ifd[0].dng_color[subset].parsedfields & bit) ? 0 : -1)\n\n#define IFDLEVELINDEX(ifd, bit)                                                \\\n  (tiff_ifd[ifd].dng_levels.parsedfields & bit)                                \\\n      ? ifd                                                                    \\\n      : ((tiff_ifd[0].dng_levels.parsedfields & bit) ? 0 : -1)\n\n#define COPYARR(to, from) memmove(&to, &from, sizeof(from))\n\n\t\tif (iifd < (int)tiff_nifds && iifd >= 0)\n\t\t{\n\t\t\tint sidx;\n\t\t\t// Per field, not per structure\n\t\t\tif (!(imgdata.params.raw_processing_options &\n\t\t\t\tLIBRAW_PROCESSING_DONT_CHECK_DNG_ILLUMINANT))\n\t\t\t{\n\t\t\t\tint illidx[2], cmidx[2], calidx[2], abidx;\n\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t{\n\t\t\t\t\tillidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_ILLUMINANT);\n\t\t\t\t\tcmidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_COLORMATRIX);\n\t\t\t\t\tcalidx[i] = IFDCOLORINDEX(iifd, i, LIBRAW_DNGFM_CALIBRATION);\n\t\t\t\t}\n\t\t\t\tabidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ANALOGBALANCE);\n\t\t\t\t// Data found, all in same ifd, illuminants are inited\n\t\t\t\tif (illidx[0] >= 0 && illidx[0] < (int)tiff_nifds &&\n\t\t\t\t\tillidx[0] == illidx[1] && illidx[0] == cmidx[0] &&\n\t\t\t\t\tillidx[0] == cmidx[1] &&\n\t\t\t\t\ttiff_ifd[illidx[0]].dng_color[0].illuminant > 0 &&\n\t\t\t\t\ttiff_ifd[illidx[0]].dng_color[1].illuminant > 0)\n\t\t\t\t{\n\t\t\t\t\tsidx = illidx[0]; // => selected IFD\n\t\t\t\t\tdouble cc[4][4], cm[4][3], cam_xyz[4][3];\n\t\t\t\t\t// CM -> Color Matrix\n\t\t\t\t\t// CC -> Camera calibration\n\t\t\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t\t\t\t\tcc[j][i] = i == j;\n\t\t\t\t\tint colidx = -1;\n\n\t\t\t\t\t// IS D65 here?\n\t\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (tiff_ifd[sidx].dng_color[i].illuminant == LIBRAW_WBI_D65)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolidx = i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Other daylight-type ill\n\t\t\t\t\tif (colidx < 0)\n\t\t\t\t\t\tfor (int i = 0; i < 2; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ill = tiff_ifd[sidx].dng_color[i].illuminant;\n\t\t\t\t\t\t\tif (ill == LIBRAW_WBI_Daylight || ill == LIBRAW_WBI_D55 ||\n\t\t\t\t\t\t\t\till == LIBRAW_WBI_D75 || ill == LIBRAW_WBI_D50 ||\n\t\t\t\t\t\t\t\till == LIBRAW_WBI_Flash)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolidx = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tif (colidx >= 0) // Selected\n\t\t\t\t\t{\n\t\t\t\t\t\t// Init camera matrix from DNG\n\t\t\t\t\t\tFORCC for (int j = 0; j < 3; j++) cm[c][j] =\n\t\t\t\t\t\t\ttiff_ifd[sidx].dng_color[colidx].colormatrix[c][j];\n\n\t\t\t\t\t\tif (calidx[colidx] == sidx)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (int i = 0; i < colors && i < 4; i++)\n\t\t\t\t\t\t\t\tFORCC\n\t\t\t\t\t\t\t\tcc[i][c] = tiff_ifd[sidx].dng_color[colidx].calibration[i][c];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (abidx == sidx)\n\t\t\t\t\t\t\tfor (int i = 0; i < colors && i < 4; i++)\n\t\t\t\t\t\t\t\tFORCC cc[i][c] *= tiff_ifd[sidx].dng_levels.analogbalance[i];\n\t\t\t\t\t\tint j;\n\t\t\t\t\t\tFORCC for (int i = 0; i < 3; i++) \n                            for (cam_xyz[c][i] = j = 0; j < colors && j < 4; j++)\n\t\t\t\t\t\t\t    cam_xyz[c][i] +=\n\t\t\t\t\t\t\t        cc[c][j] * cm[j][i]; // add AsShotXY later * xyz[i];\n\t\t\t\t\t\tcam_xyz_coeff(cmatrix, cam_xyz);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbool noFujiDNGCrop = makeIs(LIBRAW_CAMERAMAKER_Fujifilm)\n\t\t\t\t&& (!strcmp(normalized_model, \"S3Pro\")\n\t\t\t\t\t|| !strcmp(normalized_model, \"S5Pro\")\n\t\t\t\t\t|| !strcmp(normalized_model, \"S2Pro\"));\n\n\t\t\tif (!noFujiDNGCrop &&\n\t\t\t\t(imgdata.params.raw_processing_options &LIBRAW_PROCESSING_USE_DNG_DEFAULT_CROP))\n\t\t\t{\n\t\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_CROPORIGIN);\n\t\t\t\tint sidx2 = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_CROPSIZE);\n\t\t\t\tif (sidx >= 0 && sidx == sidx2 &&\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.default_crop[2] > 0 &&\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.default_crop[3] > 0)\n\t\t\t\t{\n\t\t\t\t\tint lm = tiff_ifd[sidx].dng_levels.default_crop[0];\n\t\t\t\t\tint lmm = CFAROUND(lm, filters);\n\t\t\t\t\tint tm = tiff_ifd[sidx].dng_levels.default_crop[1];\n\t\t\t\t\tint tmm = CFAROUND(tm, filters);\n\t\t\t\t\tint ww = tiff_ifd[sidx].dng_levels.default_crop[2];\n\t\t\t\t\tint hh = tiff_ifd[sidx].dng_levels.default_crop[3];\n\t\t\t\t\tif (lmm > lm)\n\t\t\t\t\t\tww -= (lmm - lm);\n\t\t\t\t\tif (tmm > tm)\n\t\t\t\t\t\thh -= (tmm - tm);\n\t\t\t\t\tif (left_margin + lm + ww <= raw_width &&\n\t\t\t\t\t\ttop_margin + tm + hh <= raw_height)\n\t\t\t\t\t{\n\t\t\t\t\t\tleft_margin += lmm;\n\t\t\t\t\t\ttop_margin += tmm;\n\t\t\t\t\t\twidth = ww;\n\t\t\t\t\t\theight = hh;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(imgdata.color.dng_color[0].parsedfields &\n\t\t\t\tLIBRAW_DNGFM_FORWARDMATRIX)) // Not set already (Leica makernotes)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, 0, LIBRAW_DNGFM_FORWARDMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[0].forwardmatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[0].forwardmatrix);\n\t\t\t}\n\t\t\tif (!(imgdata.color.dng_color[1].parsedfields &\n\t\t\t\tLIBRAW_DNGFM_FORWARDMATRIX)) // Not set already (Leica makernotes)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, 1, LIBRAW_DNGFM_FORWARDMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[1].forwardmatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[1].forwardmatrix);\n\t\t\t}\n\t\t\tfor (int ss = 0; ss < 2; ss++)\n\t\t\t{\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_COLORMATRIX);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[ss].colormatrix,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].colormatrix);\n\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_CALIBRATION);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\tCOPYARR(imgdata.color.dng_color[ss].calibration,\n\t\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].calibration);\n\n\t\t\t\tsidx = IFDCOLORINDEX(iifd, ss, LIBRAW_DNGFM_ILLUMINANT);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\timgdata.color.dng_color[ss].illuminant =\n\t\t\t\t\ttiff_ifd[sidx].dng_color[ss].illuminant;\n\t\t\t}\n\t\t\t// Levels\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ANALOGBALANCE);\n\t\t\tif (sidx >= 0)\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.analogbalance,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.analogbalance);\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_BASELINEEXPOSURE);\n\t\t\tif (sidx >= 0)\n\t\t\t\timgdata.color.dng_levels.baseline_exposure =\n\t\t\t\ttiff_ifd[sidx].dng_levels.baseline_exposure;\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_WHITE);\n\t\t\tif (sidx >= 0 && tiff_ifd[sidx].dng_levels.dng_whitelevel[0])\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_whitelevel,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_whitelevel);\n\t\t\telse if (tiff_ifd[iifd].sample_format <= 2 && tiff_ifd[iifd].bps > 0 && tiff_ifd[iifd].bps < 32)\n\t\t\t\tFORC4\n\t\t\t\timgdata.color.dng_levels.dng_whitelevel[c] = (1 << tiff_ifd[iifd].bps) - 1;\n\n\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_ASSHOTNEUTRAL);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.asshotneutral,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.asshotneutral);\n\t\t\t\tif (imgdata.color.dng_levels.asshotneutral[0])\n\t\t\t\t{\n\t\t\t\t\tcam_mul[3] = 0;\n\t\t\t\t\tFORCC\n\t\t\t\t\t\tif (fabs(imgdata.color.dng_levels.asshotneutral[c]) > 0.0001)\n\t\t\t\t\t\t\tcam_mul[c] = 1 / imgdata.color.dng_levels.asshotneutral[c];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_BLACK);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\timgdata.color.dng_levels.dng_fblack =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_fblack;\n\t\t\t\timgdata.color.dng_levels.dng_black =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_black;\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_cblack,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_cblack);\n\t\t\t\tCOPYARR(imgdata.color.dng_levels.dng_fcblack,\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.dng_fcblack);\n\t\t\t}\n\n\n\t\t\tif (pifd >= 0)\n\t\t\t{\n\t\t\t\tsidx = IFDLEVELINDEX(pifd, LIBRAW_DNGFM_PREVIEWCS);\n\t\t\t\tif (sidx >= 0)\n\t\t\t\t\timgdata.color.dng_levels.preview_colorspace =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.preview_colorspace;\n\t\t\t}\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_OPCODE2);\n\t\t\tif (sidx >= 0)\n\t\t\t\tmeta_offset = tiff_ifd[sidx].opcode2_offset;\n\n\t\t\tsidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_LINTABLE);\n\t\t\tINT64 linoff = -1;\n\t\t\tint linlen = 0;\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\tlinoff = tiff_ifd[sidx].lineartable_offset;\n\t\t\t\tlinlen = tiff_ifd[sidx].lineartable_len;\n\t\t\t}\n\n\t\t\tif (linoff >= 0 && linlen > 0)\n\t\t\t{\n\t\t\t\tINT64 pos = ftell(ifp);\n\t\t\t\tfseek(ifp, linoff, SEEK_SET);\n\t\t\t\tlinear_table(linlen);\n\t\t\t\tfseek(ifp, pos, SEEK_SET);\n\t\t\t}\n\t\t\t// Need to add curve too\n\t\t}\n\t\t/* Copy DNG black level to LibRaw's */\n\t\tif (load_raw == &LibRaw::lossy_dng_load_raw)\n\t\t{\n\t\t\tmaximum = 0xffff;\n\t\t\tFORC4 imgdata.color.linear_max[c] = imgdata.color.dng_levels.dng_whitelevel[c] = 0xffff;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaximum = imgdata.color.dng_levels.dng_whitelevel[0];\n\t\t}\n\t\tblack = imgdata.color.dng_levels.dng_black;\n\n\t\tif (tiff_samples == 2 && imgdata.color.dng_levels.dng_cblack[4] * imgdata.color.dng_levels.dng_cblack[5] * tiff_samples\n\t\t\t== imgdata.color.dng_levels.dng_cblack[LIBRAW_CBLACK_SIZE - 1])\n\t\t{\n\t\t\tunsigned ff = filters;\n\t\t\tif (filters > 999 && colors == 3)\n\t\t\t\tfilters |= ((filters >> 2 & 0x22222222) | (filters << 2 & 0x88888888)) &\n\t\t\t\tfilters << 1;\n\n\t\t\t/* Special case, Fuji SuperCCD dng */\n\t\t\tint csum[4] = { 0,0,0,0 }, ccount[4] = { 0,0,0,0 };\n\t\t\tint i = 6 + shot_select;\n\t\t\tfor (unsigned row = 0; row < imgdata.color.dng_levels.dng_cblack[4]; row++)\n\t\t\t\tfor (unsigned col = 0; col < imgdata.color.dng_levels.dng_cblack[5]; col++)\n\t\t\t\t{\n\t\t\t\t\tcsum[FC(row, col)] += imgdata.color.dng_levels.dng_cblack[i];\n\t\t\t\t\tccount[FC(row, col)]++;\n\t\t\t\t\ti += tiff_samples;\n\t\t\t\t}\n\t\t\tfor (int c = 0; c < 4; c++)\n\t\t\t\tif (ccount[c])\n\t\t\t\t\timgdata.color.dng_levels.dng_cblack[c] += csum[c] / ccount[c];\n\t\t\timgdata.color.dng_levels.dng_cblack[4] = imgdata.color.dng_levels.dng_cblack[5] = 0;\n\t\t\tfilters = ff;\n\t\t}\n\t\telse if (tiff_samples > 2 && tiff_samples <= 4 && imgdata.color.dng_levels.dng_cblack[4] * imgdata.color.dng_levels.dng_cblack[5] * tiff_samples\n\t\t\t== imgdata.color.dng_levels.dng_cblack[LIBRAW_CBLACK_SIZE - 1])\n\t\t{\n\t\t\t/* Special case, per_channel blacks in RepeatDim, average for per-channel */\n\t\t\tint csum[4] = { 0,0,0,0 }, ccount[4] = { 0,0,0,0 };\n\t\t\tint i = 6;\n\t\t\tfor (unsigned row = 0; row < imgdata.color.dng_levels.dng_cblack[4]; row++)\n\t\t\t\tfor (unsigned col = 0; col < imgdata.color.dng_levels.dng_cblack[5]; col++)\n\t\t\t\t\tfor (unsigned c = 0; c < tiff_samples && c < 4; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcsum[c] += imgdata.color.dng_levels.dng_cblack[i];\n\t\t\t\t\t\tccount[c]++;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\tfor (int c = 0; c < 4; c++)\n\t\t\t\tif (ccount[c])\n\t\t\t\t\timgdata.color.dng_levels.dng_cblack[c] += csum[c] / ccount[c];\n\t\t\timgdata.color.dng_levels.dng_cblack[4] = imgdata.color.dng_levels.dng_cblack[5] = 0;\n\t\t}\n\n\t\tmemmove(cblack, imgdata.color.dng_levels.dng_cblack, sizeof(cblack));\n\n\t\tif (iifd < (int)tiff_nifds && iifd >= 0)\n\t\t{\n\t\t\tint sidx = IFDLEVELINDEX(iifd, LIBRAW_DNGFM_LINEARRESPONSELIMIT);\n\t\t\tif (sidx >= 0)\n\t\t\t{\n\t\t\t\timgdata.color.dng_levels.LinearResponseLimit =\n\t\t\t\t\ttiff_ifd[sidx].dng_levels.LinearResponseLimit;\n\t\t\t\tif (imgdata.color.dng_levels.LinearResponseLimit > 0.1 &&\n\t\t\t\t\timgdata.color.dng_levels.LinearResponseLimit <= 1.0)\n\t\t\t\t{\n\t\t\t\t\t// And approx promote it to linear_max:\n\t\t\t\t\tint bl4 = 0, bl64 = 0;\n\t\t\t\t\tfor (int chan = 0; chan < colors && chan < 4; chan++)\n\t\t\t\t\t\tbl4 += cblack[chan];\n\t\t\t\t\tbl4 /= LIM(colors, 1, 4);\n\n\t\t\t\t\tif (cblack[4] * cblack[5] > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tunsigned cnt = 0;\n\t\t\t\t\t\tfor (unsigned c = 0; c < 4096 && c < cblack[4] * cblack[5]; c++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbl64 += cblack[c + 6];\n\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbl64 /= LIM(cnt, 1, 4096);\n\t\t\t\t\t}\n\t\t\t\t\tint rblack = black + bl4 + bl64;\n\t\t\t\t\tfor (int chan = 0; chan < colors && chan < 4; chan++)\n\t\t\t\t\t\timgdata.color.linear_max[chan] =\n\t\t\t\t\t\t(maximum - rblack) *\n\t\t\t\t\t\timgdata.color.dng_levels.LinearResponseLimit +\n\t\t\t\t\t\trblack;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid LibRaw::identify_finetune_pentax()\n{\n\tif (makeIs(LIBRAW_CAMERAMAKER_Pentax) ||\n\t\tmakeIs(LIBRAW_CAMERAMAKER_Samsung)) {\n\t\tif (height == 2624 &&\n\t\t\twidth == 3936) // Pentax K10D, Samsung GX10;\n\t\t{\n\t\t\theight = 2616;\n\t\t\twidth = 3896;\n\t\t}\n\t\tif (height == 3136 &&\n\t\t\twidth == 4864) // Pentax K20D, Samsung GX20;\n\t\t{\n\t\t\theight = 3124;\n\t\t\twidth = 4688;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t}\n\n\tif (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {\n\t\tif ((width == 4352) &&\n\t\t\t((unique_id == PentaxID_K_r) ||\n\t\t\t(unique_id == PentaxID_K_x)))\n\t\t{\n\t\t\twidth = 4309;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif ((width >= 4960) &&\n\t\t\t((unique_id == PentaxID_K_5) ||\n\t\t\t(unique_id == PentaxID_K_5_II) ||\n\t\t\t\t(unique_id == PentaxID_K_5_II_s)))\n\t\t{\n\t\t\tleft_margin = 10;\n\t\t\twidth = 4950;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_70))\n\t\t{\n\t\t\theight = 4016;\n\t\t\ttop_margin = 32;\n\t\t\twidth = 6020;\n\t\t\tleft_margin = 60;\n\t\t}\n\t\tif ((width == 4736) && (unique_id == PentaxID_K_7))\n\t\t{\n\t\t\theight = 3122;\n\t\t\twidth = 4684;\n\t\t\tfilters = 0x16161616;\n\t\t\ttop_margin = 2;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_3_II))\n\t\t{\n\t\t\tleft_margin = 4;\n\t\t\twidth = 6040;\n\t\t}\n\t\tif ((width == 6112) && (unique_id == PentaxID_KP))\n\t\t{\n\t\t\t// From DNG, maybe too strict\n\t\t\tleft_margin = 54;\n\t\t\ttop_margin = 28;\n\t\t\twidth = 6028;\n\t\t\theight = raw_height - top_margin;\n\t\t}\n\t\tif ((width == 6080) && (unique_id == PentaxID_K_3))\n\t\t{\n\t\t\tleft_margin = 4;\n\t\t\twidth = 6040;\n\t\t}\n\t\tif ((width == 7424) && (unique_id == PentaxID_645D))\n\t\t{\n\t\t\theight = 5502;\n\t\t\twidth = 7328;\n\t\t\tfilters = 0x61616161;\n\t\t\ttop_margin = 29;\n\t\t\tleft_margin = 48;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Ricoh) &&\n\t\t(height == 3014) && (width == 4096))  // Ricoh GX200\n\t\twidth = 4014;\n}\n\nvoid LibRaw::identify_finetune_by_filesize(int fsize)\n{\n\n\tif (fsize == 4771840)\n\t{ // hack Nikon 3mpix: E880, E885, E990, E995;\n\t  // Olympus C-3030Z\n\t\tif (!timestamp && nikon_e995())\n\t\t\tstrcpy(model, \"E995\");\n\t}\n\telse if (fsize == 2940928)\n\t{ // hack Nikon 2mpix: E2100, E2500\n\t\tif (!timestamp && !nikon_e2100())\n\t\t\tstrcpy(model, \"E2500\");\n\t}\n\telse if (fsize == 4775936)\n\t{ // hack Nikon 3mpix: E3100, E3200, E3500, E3700;\n\t  // Pentax \"Optio 33WR\";\n\t  // Olympus C-740UZ\n\t\tif (!timestamp)\n\t\t\tnikon_3700();\n\t}\n\telse if (fsize == 5869568)\n\t{ // hack Nikon 4mpix: E4300;\n\t  // hack Minolta \"DiMAGE Z2\"\n\t\tif (!timestamp && minolta_z2())\n\t\t{\n\t\t\tmaker_index = LIBRAW_CAMERAMAKER_Minolta;\n\t\t\tstrcpy(make, \"Minolta\");\n\t\t\tstrcpy(model, \"DiMAGE Z2\");\n\t\t}\n\t}\n}\n\nvoid LibRaw::identify_finetune_dcr(char head[64], int fsize, int flen)\n{\n\tstatic const short pana[][6] = {\n\t\t// raw_width, raw_height, left_margin, top_margin, width_increment,\n\t\t// height_increment\n\t\t{3130, 1743, 4, 0, -6, 0},      /* 00 */\n\t\t{3130, 2055, 4, 0, -6, 0},      /* 01 */\n\t\t{3130, 2319, 4, 0, -6, 0},      /* 02 DMC-FZ8 */\n\t\t{3170, 2103, 18, 0, -42, 20},   /* 03 */\n\t\t{3170, 2367, 18, 13, -42, -21}, /* 04 */\n\t\t{3177, 2367, 0, 0, -1, 0},      /* 05 DMC-L1 */\n\t\t{3304, 2458, 0, 0, -1, 0},      /* 06 DMC-FZ30 */\n\t\t{3330, 2463, 9, 0, -5, 0},      /* 07 DMC-FZ18 */\n\t\t{3330, 2479, 9, 0, -17, 4},     /* 08 */\n\t\t{3370, 1899, 15, 0, -44, 20},   /* 09 */\n\t\t{3370, 2235, 15, 0, -44, 20},   /* 10 */\n\t\t{3370, 2511, 15, 10, -44, -21}, /* 11 */\n\t\t{3690, 2751, 3, 0, -8, -3},     /* 12 DMC-FZ50 */\n\t\t{3710, 2751, 0, 0, -3, 0},      /* 13 DMC-L10 */\n\t\t{3724, 2450, 0, 0, 0, -2},      /* 14 */\n\t\t{3770, 2487, 17, 0, -44, 19},   /* 15 */\n\t\t{3770, 2799, 17, 15, -44, -19}, /* 16 */\n\t\t{3880, 2170, 6, 0, -6, 0},      /* 17 DMC-LX1 */\n\t\t{4060, 3018, 0, 0, 0, -2},      /* 18 DMC-FZ35, DMC-FZ38 */\n\t\t{4290, 2391, 3, 0, -8, -1},     /* 19 DMC-LX2 */\n\t\t{4330, 2439, 17, 15, -44, -19}, /* 20 \"D-LUX 3\" */\n\t\t{4508, 2962, 0, 0, -3, -4},     /* 21 */\n\t\t{4508, 3330, 0, 0, -3, -6},     /* 22 */\n\t\t{10480, 7794, 0, 0, -2, 0},     /* 23: G9 in high-res */\n\t};\n\tint i,c;\n\tstruct jhead jh;\n\n\tif (makeIs(LIBRAW_CAMERAMAKER_Canon) && !tiff_flip && imCanon.MakernotesFlip)\n\t{\n\t\ttiff_flip = imCanon.MakernotesFlip;\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Nikon))\n\t{\n\t\tif (!load_raw)\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\tif (model[0] == 'E') // Nikon E8800, E8700, E8400, E5700, E5400, E5000,\n\t\t\t\t\t\t\t // others are diag hacks?\n\t\t\tload_flags |= !data_offset << 2 | 2;\n\t}\n\t/* Set parameters based on camera name (for non-DNG files). */\n\n\t/* Always 512 for arw2_load_raw */\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sony) &&\n\t\t(raw_width > 3888) && !black && !cblack[0])\n\t{\n\t\tblack = (load_raw == &LibRaw::sony_arw2_load_raw)\n\t\t\t? 512\n\t\t\t: (128 << (tiff_bps - 12));\n\t}\n\n\tif (is_foveon) {\n\t\tif (height * 2 < width)\n\t\t\tpixel_aspect = 0.5;\n\t\tif (height > width)\n\t\t\tpixel_aspect = 2;\n\t\tfilters = 0;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {\n\t\tif ((unique_id == PentaxID_K_1) ||\n\t\t\t(unique_id == PentaxID_K_1_Mark_II)) {\n\t\t\ttop_margin = 18;\n\t\t\theight = raw_height - top_margin;\n\t\t\tif (raw_width == 7392) {\n\t\t\t\tleft_margin = 6;\n\t\t\t\twidth = 7376;\n\t\t\t}\n\n\t\t}\n\t\telse if (unique_id == PentaxID_Optio_S_V101) { // (fsize == 3178560)\n\t\t\tcam_mul[0] *= 4;\n\t\t\tcam_mul[2] *= 4;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_Optio_33WR) { // (fsize == 4775936)\n\t\t\tflip = 1;\n\t\t\tfilters = 0x16161616;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_staristD) {\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tdata_error = -1;\n\n\t\t}\n\t\telse if (unique_id == PentaxID_staristDS) {\n\t\t\theight -= 2;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Canon)) {\n\t\tif (tiff_bps == 15) { // Canon sRAW\n\t\t\tif (width == 3344)\n\t\t\t\twidth = 3272;\n\t\t\telse if (width == 3872)\n\t\t\t\twidth = 3866;\n\n\t\t\tif (height > width) {\n\t\t\t\tSWAP(height, width);\n\t\t\t\tSWAP(raw_height, raw_width);\n\t\t\t}\n\t\t\tif (width == 7200 &&\n\t\t\t\theight == 3888) { // Canon EOS 5DS (R);\n\t\t\t\traw_width = width = 6480;\n\t\t\t\traw_height = height = 4320;\n\t\t\t}\n\t\t\tfilters = 0;\n\t\t\ttiff_samples = colors = 3;\n\t\t\tload_raw = &LibRaw::canon_sraw_load_raw;\n\t\t}\n\n\t\tif (!strcmp(normalized_model, \"PowerShot 600\")) {\n\t\t\theight = 613;\n\t\t\twidth = 854;\n\t\t\traw_width = 896;\n\t\t\tcolors = 4;\n\t\t\tfilters = 0xe1e4e1e4;\n\t\t\tload_raw = &LibRaw::canon_600_load_raw;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A5\") ||\n\t\t\t!strcmp(normalized_model, \"PowerShot A5 Zoom\")) {\n\t\t\theight = 773;\n\t\t\twidth = 960;\n\t\t\traw_width = 992;\n\t\t\tpixel_aspect = 256 / 235.0;\n\t\t\tfilters = 0x1e4e1e4e;\n\t\t\tgoto canon_a5;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A50\")) {\n\t\t\theight = 968;\n\t\t\twidth = 1290;\n\t\t\traw_width = 1320;\n\t\t\tfilters = 0x1b4e4b1e;\n\t\t\tgoto canon_a5;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot Pro70\")) {\n\t\t\theight = 1024;\n\t\t\twidth = 1552;\n\t\t\tfilters = 0x1e4b4e1b;\n\t\tcanon_a5:\n\t\t\tcolors = 4;\n\t\t\ttiff_bps = 10;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t\tload_flags = 40;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot Pro90 IS\") ||\n\t\t\t!strcmp(normalized_model, \"PowerShot G1\")) {\n\t\t\tcolors = 4;\n\t\t\tfilters = 0xb4b4b4b4;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot A610\")) { // chdk hack\n\t\t\tif (canon_s2is())\n\t\t\t\tstrcpy(model + 10, \"S2 IS\"); // chdk hack\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot SX220 HS\")) { // chdk hack\n\t\t\tmask[1][3] = -4;\n\t\t\ttop_margin = 16;\n\t\t\tleft_margin = 92;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot S120\")) { // chdk hack\n\t\t\traw_width = 4192;\n\t\t\traw_height = 3062;\n\t\t\twidth = 4022;\n\t\t\theight = 3016;\n\t\t\tmask[0][0] = top_margin = 31;\n\t\t\tmask[0][2] = top_margin + height;\n\t\t\tleft_margin = 120;\n\t\t\tmask[0][1] = 23;\n\t\t\tmask[0][3] = 72;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot G16\")) {\n\t\t\tmask[0][0] = 0;\n\t\t\tmask[0][2] = 80;\n\t\t\tmask[0][1] = 0;\n\t\t\tmask[0][3] = 16;\n\t\t\ttop_margin = 29;\n\t\t\tleft_margin = 120;\n\t\t\twidth = raw_width - left_margin - 48;\n\t\t\theight = raw_height - top_margin - 14;\n\n\t\t}\n\t\telse if (!strcmp(normalized_model, \"PowerShot SX50 HS\")) {\n\t\t\ttop_margin = 17;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Nikon)) {\n\t\tif (!strcmp(model, \"D1\"))\n\t\t{\n\t\t\timgdata.other.analogbalance[0] = cam_mul[0];\n\t\t\timgdata.other.analogbalance[2] = cam_mul[2];\n\t\t\timgdata.other.analogbalance[1] = imgdata.other.analogbalance[3] =\n\t\t\t\tcam_mul[1];\n\t\t\tcam_mul[0] = cam_mul[1] = cam_mul[2] = 1.0f;\n\t\t}\n\n\t\telse if (!strcmp(model, \"D1X\"))\n\t\t{\n\t\t\twidth -= 4;\n\t\t\tpixel_aspect = 0.5;\n\t\t}\n\t\telse if (!strcmp(model, \"D40X\") ||\n\t\t\t!strcmp(model, \"D60\") ||\n\t\t\t!strcmp(model, \"D80\") ||\n\t\t\t!strcmp(model, \"D3000\"))\n\t\t{\n\t\t\theight -= 3;\n\t\t\twidth -= 4;\n\t\t}\n\t\telse if (!strcmp(model, \"D3\") ||\n\t\t\t!strcmp(model, \"D3S\") ||\n\t\t\t!strcmp(model, \"D700\"))\n\t\t{\n\t\t\twidth -= 4;\n\t\t\tleft_margin = 2;\n\t\t}\n\t\telse if (!strcmp(model, \"D3100\"))\n\t\t{\n\t\t\twidth -= 28;\n\t\t\tleft_margin = 6;\n\t\t}\n\t\telse if (!strcmp(model, \"D5000\") ||\n\t\t\t!strcmp(model, \"D90\"))\n\t\t{\n\t\t\twidth -= 42;\n\t\t}\n\t\telse if (!strcmp(model, \"D5100\") ||\n\t\t\t!strcmp(model, \"D7000\") ||\n\t\t\t!strcmp(model, \"COOLPIX A\"))\n\t\t{\n\t\t\twidth -= 44;\n\t\t}\n\t\telse if (!strcmp(model, \"D3200\") ||\n\t\t\t!strcmp(model, \"D600\") ||\n\t\t\t!strcmp(model, \"D610\") ||\n\t\t\t!strncmp(model, \"D800\", 4)) // Nikons: D800, D800E\n\t\t{\n\t\t\twidth -= 46;\n\t\t}\n\t\telse if (!strcmp(model, \"D4\") ||\n\t\t\t!strcmp(model, \"Df\"))\n\t\t{\n\t\t\twidth -= 52;\n\t\t\tleft_margin = 2;\n\t\t}\n\t\telse if (!strcmp(model, \"D500\"))\n\t\t{\n\t\t\t// Empty - to avoid width-1 below\n\t\t}\n\t\telse if (!strncmp(model, \"D40\", 3) ||\n\t\t\t!strncmp(model, \"D50\", 3) ||\n\t\t\t!strncmp(model, \"D70\", 3))\n\t\t{\n\t\t\twidth--;\n\t\t}\n\t\telse if (!strcmp(model, \"D100\"))\n\t\t{\n\t\t\tif (load_flags) // compressed NEF\n\t\t\t\traw_width = (width += 3) + 3;\n\t\t}\n\t\telse if (!strcmp(model, \"D200\"))\n\t\t{\n\t\t\tleft_margin = 1;\n\t\t\twidth -= 4;\n\t\t\tfilters = 0x94949494;\n\t\t}\n\t\telse if (!strncmp(model, \"D2H\", 3)) // Nikons: D2H, D2Hs\n\t\t{\n\t\t\tleft_margin = 6;\n\t\t\twidth -= 14;\n\t\t}\n\t\telse if (!strncmp(model, \"D2X\", 3)) // Nikons: D2X, D2Xs\n\t\t{\n\t\t\tif (width == 3264) // in-camera Hi-speed crop: On\n\t\t\t\twidth -= 32;\n\t\t\telse\n\t\t\t\twidth -= 8;\n\t\t}\n\t\telse if (!strncmp(model, \"D300\", 4)) // Nikons: D300, D300s\n\t\t{\n\t\t\twidth -= 32;\n\t\t}\n\t\telse if (raw_width == 4032) // Nikon \"COOLPIX P7700\", \"COOLPIX P7800\",\n\t\t\t\t\t\t\t\t\t// \"COOLPIX P330\", \"COOLPIX P340\"\n\t\t{\n\t\t\tif (!strcmp(normalized_model, \"COOLPIX P7700\"))\n\t\t\t{\n\t\t\t\tmaximum = 65504;\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t\telse if (!strcmp(normalized_model, \"COOLPIX P7800\"))\n\t\t\t{\n\t\t\t\tmaximum = 65504;\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"COOLPIX P340\"))\n\t\t\t{\n\t\t\t\tload_flags = 0;\n\t\t\t}\n\t\t}\n\t\telse if (!strncmp(model, \"COOLPIX P\", 9) &&\n\t\t\traw_width != 4032) // Nikon \"COOLPIX P1000\", \"COOLPIX P6000\",\n\t\t\t\t\t\t\t   // \"COOLPIX P7000\", \"COOLPIX P7100\"\n\t\t{\n\t\t\tload_flags = 24;\n\t\t\tfilters = 0x94949494;\n\t\t\t/* the following 'if' is most probably obsolete, because we now read black\n\t\t\t * level from metadata */\n\t\t\tif ((model[9] == '7') && /* P7000, P7100 */\n\t\t\t\t((iso_speed >= 400) || (iso_speed == 0)) &&\n\t\t\t\t!strstr(software, \"V1.2\")) /* v. 1.2 seen for P7000 only */\n\t\t\t\tblack = 255;\n\t\t}\n\t\telse if (!strncmp(model, \"COOLPIX B700\", 12))\n\t\t{\n\t\t\tload_flags = 24;\n\t\t}\n\t\telse if (!strncmp(model, \"1 \",\n\t\t\t2)) // Nikons: \"1 AW1\", \"1 J1\", \"1 J2\", \"1 J3\", \"1 J4\",\n\t\t\t\t// \"1 J5\", \"1 S1\", \"1 S2\", \"1 V1\", \"1 V2\", \"1 V3\"\n\t\t{\n\t\t\theight -= 2;\n\t\t}\n\t\telse if (fsize == 1581060) // hack Nikon 1mpix: E900\n\t\t{\n\t\t\tsimple_coeff(3);\n\t\t\tpre_mul[0] = 1.2085;\n\t\t\tpre_mul[1] = 1.0943;\n\t\t\tpre_mul[3] = 1.1103;\n\t\t}\n\t\telse if ((fsize == 4771840) &&  // hack Nikon 3mpix: E880, E885, E990\n\t\t\tstrcmp(model, \"E995\")) // but not E995\n\t\t{\n\t\t\tfilters = 0xb4b4b4b4;\n\t\t\tsimple_coeff(3);\n\t\t\tpre_mul[0] = 1.196;\n\t\t\tpre_mul[1] = 1.246;\n\t\t\tpre_mul[2] = 1.018;\n\t\t}\n\t\telse if ((fsize == 4775936) && // hack Nikon 3mpix: E3100, E3200, E3500\n\t\t\t(atoi(model + 1) < 3700)) // but not E3700;\n\t\t{\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (fsize == 5869568) // hack Nikon 4mpix: E4300;\n\t\t{\n\t\t\tload_flags = 6;\n\t\t}\n\t\telse if (!strcmp(model, \"E2500\"))\n\t\t{\n\t\t\theight -= 2;\n\t\t\tload_flags = 6;\n\t\t\tcolors = 4;\n\t\t\tfilters = 0x4b4b4b4b;\n\t\t}\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Olympus)) {\n\t\tif (OlyID == OlyID_C_740UZ) { // (fsize == 4775936)\n\t\t\ti = find_green(12, 32, 1188864, 3576832);\n\t\t\tc = find_green(12, 32, 2383920, 2387016);\n\t\t\tif (abs(i) < abs(c)) {\n\t\t\t\tSWAP(i, c);\n\t\t\t\tload_flags = 24;\n\t\t\t}\n\t\t\tif (i < 0)\n\t\t\t\tfilters = 0x61616161;\n\t\t}\n\t\telse if (OlyID == OlyID_C_770UZ) {\n\t\t\theight = 1718;\n\t\t\twidth = 2304;\n\t\t\tfilters = 0x16161616;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t\tload_flags = 30;\n\t\t}\n\t\telse {\n\t\t\theight += height & 1;\n\t\t\tif (exif_cfa)\n\t\t\t\tfilters = exif_cfa;\n\n\t\t\tif (width == 4100) // Olympus E-PL2, E-PL1, E-P2, E-P1, E-620, E-600, E-5, E-30;\n\t\t\t\twidth -= 4;\n\n\t\t\tif (width == 4080) // Olympus E-PM1, E-PL3, E-P3;\n\t\t\t\twidth -= 24;\n\n\t\t\tif (width == 10400) // Olympus PEN-F, E-M1-II, E-M1-III, E-M1X\n\t\t\t\twidth -= 12;\n\n\t\t\tif (width == 8200) // E-M1-III in 50Mp mode, E-M1X\n\t\t\t\twidth -= 30;\n\n\t\t\tif (width == 9280) { // Olympus E-M5 Mark II;\n\t\t\t\twidth -= 6;\n\t\t\t\theight -= 6;\n\t\t\t}\n\n\t\t\tif (load_raw == &LibRaw::unpacked_load_raw)\n\t\t\t\tload_flags = 4;\n\t\t\ttiff_bps = 12;\n\t\t\tif ((OlyID == OlyID_E_300) ||\n\t\t\t\t(OlyID == OlyID_E_500)) {\n\t\t\t\twidth -= 20;\n\t\t\t\tif (load_raw == &LibRaw::unpacked_load_raw) {\n\t\t\t\t\tmaximum = 0xfc3;\n\t\t\t\t\tmemset(cblack, 0, sizeof cblack);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_STYLUS_1) {\n\t\t\t\twidth -= 16;\n\t\t\t\tmaximum = 0xfff;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_E_330) {\n\t\t\t\twidth -= 30;\n\t\t\t\tif (load_raw == &LibRaw::unpacked_load_raw)\n\t\t\t\t\tmaximum = 0xf79;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_SP_550UZ) {\n\t\t\t\tthumb_length = flen - (thumb_offset = 0xa39800);\n\t\t\t\tthumb_height = 480;\n\t\t\t\tthumb_width = 640;\n\n\t\t\t}\n\t\t\telse if (OlyID == OlyID_TG_4) {\n\t\t\t\twidth -= 16;\n\n\t\t\t}\n\t\t\telse if ((OlyID == OlyID_TG_5) ||\n\t\t\t\t(OlyID == OlyID_TG_6)) {\n\t\t\t\twidth -= 26;\n\t\t\t}\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_RoverShot) &&\n\t\t(fsize == 6291456)) { // RoverShot 3320AF\n\t\tfseek(ifp, 0x300000, SEEK_SET);\n\t\tif ((order = guess_byte_order(0x10000)) == 0x4d4d)\n\t\t{\n\t\t\theight -= (top_margin = 16);\n\t\t\twidth -= (left_margin = 28);\n\t\t\tmaximum = 0xf5c0;\n\t\t\tstrcpy(make, \"ISG\");\n\t\t\tmodel[0] = 0;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm)) {\n\t\tif (!strcmp(model, \"S2Pro\"))\n\t\t{\n\t\t\theight = 2144;\n\t\t\twidth = 2880;\n\t\t\tflip = 6;\n\t\t}\n\t\telse if (load_raw != &LibRaw::packed_load_raw && strncmp(model, \"X-\", 2) &&\n\t\t\tfilters >= 1000) // Bayer and not an X-model\n\t\t\tmaximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;\n\n\t\tif (FujiCropMode == 1)\n\t\t{ // FF crop on GFX\n\t\t\twidth = raw_width;\n\t\t\theight = raw_height;\n\t\t}\n\t\telse if (FujiCropMode == 4)\n\t\t{ /* electronic shutter, high speed mode (1.25x crop) */\n\t\t\theight = raw_height;\n\t\t}\n\n\t\ttop_margin = (raw_height >= height) ? (raw_height - height) >> 2 << 1 : 0;\n\t\tleft_margin = (raw_width >= width) ? (raw_width - width) >> 2 << 1 : 0;\n\n\t\tif (!strcmp(model, \"X-T3\") || !strcmp(model, \"X-T4\") || !strcmp(model, \"X100V\") || !strcmp(model, \"X-T30\") || !strcmp(model, \"X-Pro3\"))\n\t\t{\n\t\t\ttop_margin = 0;\n\t\t\tif (FujiCropMode == 0)\n\t\t\t{\n\t\t\t\ttop_margin = 6;\n\t\t\t\theight = 4170;\n\t\t\t\tleft_margin = 0;\n\t\t\t\twidth = 6246;\n\t\t\t}\n\t\t\telse if (FujiCropMode == 4)\n\t\t\t{ /* electronic shutter, high speed mode (1.25x crop) */\n\t\t\t\tleft_margin = 624;\n\t\t\t\twidth = 5004;\n\t\t\t}\n\t\t}\n\n\t\tif (width == 2848 || // Fujifilm X-S1, X10, XF1\n\t\t\twidth == 3664)   // Fujifilm \"HS10 HS11\"\n\t\t\tfilters = 0x16161616;\n\n\t\tif (width == 4032 || // Fujifilm X20, X30, XQ1, XQ2\n\t\t\twidth == 4952)   // Fujifilm X-A1, X-A2, X-E1, X-M1, X-Pro1\n\t\t\tleft_margin = 0;\n\n\t\tif (width == 3328 &&\n\t\t\t(width -= 66)) // Fujifilm F550EXR, F600EXR, F770EXR, F800EXR, F900EXR,\n\t\t\t\t\t\t   // HS20EXR, HS30EXR, HS33EXR, HS50EXR\n\t\t\tleft_margin = 34;\n\n\t\tif (width == 4936) // Fujifilm X-E2S, X-E2, X-T10, X-T1, X100S, X100T, X70\n\t\t\tleft_margin = 4;\n\n\t\tif (width == 6032) // Fujifilm X100F, X-T2, X-T20, X-Pro2, X-H1, X-E3\n\t\t\tleft_margin = 0;\n\n\t\tif (!strcmp(normalized_model, \"DBP for GX680\"))\n\t\t{\n\t\t\t/*\n\t\t\t7712 2752 -> 5504 3856\n\t\t\t*/\n\n\t\t\t/*\n\t\t\twidth = 688;\n\t\t\theight = 30848;\n\t\t\traw_width = 688;\n\t\t\traw_height = 30848;\n\t\t\t*/\n\n\t\t\traw_width = 5504;\n\t\t\traw_height = 3856;\n\t\t\tleft_margin = 32;\n\t\t\ttop_margin = 8;\n\t\t\twidth = raw_width - left_margin - 32;\n\t\t\theight = raw_height - top_margin - 8;\n\n\t\t\tload_raw = &LibRaw::unpacked_load_raw_FujiDBP;\n\t\t\t//  maximum = 0x0fff;\n\t\t\tfilters = 0x16161616;\n\t\t\tload_flags = 0;\n\t\t\tflip = 6;\n\t\t}\n\n\t\tif (!strcmp(model, \"HS50EXR\") || !strcmp(model, \"F900EXR\"))\n\t\t{\n\t\t\twidth += 2;\n\t\t\tleft_margin = 0;\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t\tif (!strncmp(model, \"GFX 50\", 6))\n\t\t{\n\t\t\tleft_margin = 0;\n\t\t\ttop_margin = 0;\n\t\t}\n\t\tif (!strncmp(model, \"GFX 100\", 7))\n\t\t{\n\t\t\tleft_margin = 0;\n\t\t\twidth = raw_width - 146;\n\t\t\theight = raw_height - (top_margin = 2);\n\t\t\tif (tiff_bps == 16)\n\t\t\t\tmaximum = 0xffff;\n\t\t}\n\t\tif (!strcmp(normalized_model, \"S5100\"))\n\t\t{\n\t\t\theight -= (top_margin = 6);\n\t\t}\n\t\tif (fuji_layout)\n\t\t\traw_width *= is_raw;\n\t\tif (filters == 9)\n\t\t\tFORC(36)\n\t\t\t((char *)xtrans)[c] =\n\t\t\txtrans_abs[(c / 6 + top_margin) % 6][(c + left_margin) % 6];\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Konica)) {\n\t\tif (!strcmp(model, \"KD-400Z\")) {\n\t\t\theight = 1712;\n\t\t\twidth = 2312;\n\t\t\traw_width = 2336;\n\t\t\tgoto konica_400z;\n\t\t}\n\t\telse if (!strcmp(model, \"KD-510Z\")) {\n\t\t\tgoto konica_510z;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Minolta)) {\n\t\tif (fsize == 5869568) { // hack Minolta \"DiMAGE Z2\"\n\t\t\tload_flags = 30;\n\t\t}\n\n\t\tif (!load_raw && (maximum = 0xfff))\n\t\t{\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t}\n\t\tif (!strncmp(model, \"DiMAGE A\",\n\t\t\t8)) // Minolta \"DiMAGE A1\", \"DiMAGE A2\", \"DiMAGE A200\"\n\t\t{\n\t\t\tif (!strcmp(model, \"DiMAGE A200\"))\n\t\t\t\tfilters = 0x49494949;\n\t\t\ttiff_bps = 12;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t}\n\t\telse if (!strncmp(normalized_model, \"DG-\", 3))\n\t\t{\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\t\t}\n\t\telse if (!strncmp(model, \"DiMAGE G\",\n\t\t\t8)) // hack Minolta \"DiMAGE G400\", \"DiMAGE G500\",\n\t\t\t\t// \"DiMAGE G530\", \"DiMAGE G600\"\n\t\t{\n\t\t\tif (model[8] == '4') // DiMAGE G400\n\t\t\t{\n\t\t\t\theight = 1716;\n\t\t\t\twidth = 2304;\n\t\t\t}\n\t\t\telse if (model[8] == '5') // DiMAGE G500 / G530\n\t\t\t{\n\t\t\tkonica_510z:\n\t\t\t\theight = 1956;\n\t\t\t\twidth = 2607;\n\t\t\t\traw_width = 2624;\n\t\t\t}\n\t\t\telse if (model[8] == '6') // DiMAGE G600\n\t\t\t{\n\t\t\t\theight = 2136;\n\t\t\t\twidth = 2848;\n\t\t\t}\n\t\t\tdata_offset += 14;\n\t\t\tfilters = 0x61616161;\n\t\tkonica_400z:\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tmaximum = 0x3df;\n\t\t\torder = 0x4d4d;\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Samsung)) {\n\t\tif (raw_width == 4704) // Samsung NX100, NX10, NX11,\n\t\t{\n\t\t\theight -= top_margin = 8;\n\t\t\twidth -= 2 * (left_margin = 8);\n\t\t\tload_flags = 32;\n\t\t}\n\t\telse if (!strcmp(model, \"NX3000\")) // Samsung NX3000; raw_width: 5600\n\t\t{\n\t\t\ttop_margin = 38;\n\t\t\tleft_margin = 92;\n\t\t\twidth = 5456;\n\t\t\theight = 3634;\n\t\t\tfilters = 0x61616161;\n\t\t\tcolors = 3;\n\t\t}\n\t\telse if (raw_height == 3714) // Samsung NX2000, NX300M, NX300, NX30, EK-GN120\n\t\t{\n\t\t\theight -= top_margin = 18;\n\t\t\tleft_margin = raw_width - (width = 5536);\n\t\t\tif (raw_width != 5600)\n\t\t\t\tleft_margin = top_margin = 0;\n\t\t\tfilters = 0x61616161;\n\t\t\tcolors = 3;\n\t\t}\n\t\telse if (raw_width == 5632) // Samsung NX1000, NX200, NX20, NX210\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight = 3694;\n\t\t\ttop_margin = 2;\n\t\t\twidth = 5574 - (left_margin = 32 + tiff_bps);\n\t\t\tif (tiff_bps == 12)\n\t\t\t\tload_flags = 80;\n\t\t}\n\t\telse if (raw_width == 5664) // Samsung \"NX mini\"\n\t\t{\n\t\t\theight -= top_margin = 17;\n\t\t\tleft_margin = 96;\n\t\t\twidth = 5544;\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (raw_width == 6496) // Samsung NX1, NX500\n\t\t{\n\t\t\tfilters = 0x61616161;\n\t\t\tif (!black && !cblack[0] && !cblack[1] && !cblack[2] && !cblack[3])\n\t\t\t\tblack = 1 << (tiff_bps - 7);\n\t\t}\n\t\telse if (!strcmp(model, \"EX1\")) // Samsung EX1; raw_width: 3688\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight -= 20;\n\t\t\ttop_margin = 2;\n\t\t\tif ((width -= 6) > 3682)\n\t\t\t{\n\t\t\t\theight -= 10;\n\t\t\t\twidth -= 46;\n\t\t\t\ttop_margin = 8;\n\t\t\t}\n\t\t}\n\t\telse if (!strcmp(model, \"WB2000\")) // Samsung WB2000; raw_width: 3728\n\t\t{\n\t\t\torder = 0x4949;\n\t\t\theight -= 3;\n\t\t\ttop_margin = 2;\n\t\t\tif ((width -= 10) > 3718)\n\t\t\t{\n\t\t\t\theight -= 28;\n\t\t\t\twidth -= 56;\n\t\t\t\ttop_margin = 8;\n\t\t\t}\n\t\t}\n\t\telse if (!strcmp(model, \"WB550\")) // Samsung WB550; raw_width: 4000\n\t\t{\n\t\t\torder = 0x4949;\n\t\t}\n\t\telse if (!strcmp(model, \"EX2F\")) // Samsung EX2F; raw_width: 4176\n\t\t{\n\t\t\theight = 3030;\n\t\t\twidth = 4040;\n\t\t\ttop_margin = 15;\n\t\t\tleft_margin = 24;\n\t\t\torder = 0x4949;\n\t\t\tfilters = 0x49494949;\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t}\n\t}\n\n\telse if (makeIs(LIBRAW_CAMERAMAKER_ST_Micro) && !strcmp(model, \"STV680 VGA\"))\n\t{\n\t\tblack = 16;\n\t}\n\telse if (!strcmp(model, \"N95\"))\n\t{\n\t\theight = raw_height - (top_margin = 2);\n\t}\n\telse if (!strcmp(model, \"640x480\"))\n\t{\n\t\tgamma_curve(0.45, 4.5, 1, 255);\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Hasselblad))\n\t{\n\t\tif (load_raw == &LibRaw::lossless_jpeg_load_raw)\n\t\t\tload_raw = &LibRaw::hasselblad_load_raw;\n\n\t\tif ((imHassy.SensorCode == 4) && !strncmp(model, \"V96C\", 4)) { // Hasselblad V96C\n\t\t\tstrcpy(model, \"V96C\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= (top_margin = 6);\n\t\t\twidth -= (left_margin = 3) + 7;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 9) && imHassy.uncropped) { // various Hasselblad '-39'\n\t\t\theight = 5444;\n\t\t\twidth = 7248;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 7;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 13) && imHassy.uncropped) { // Hasselblad H4D-40, H5D-40\n\t\t\theight -= 84;\n\t\t\twidth -= 82;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 41;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 11) && imHassy.uncropped) { // Hasselblad H5D-50\n\t\t\theight -= 84;\n\t\t\twidth -= 82;\n\t\t\ttop_margin = 4;\n\t\t\tleft_margin = 41;\n\t\t\tfilters = 0x61616161;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 15) &&\n\t\t\t!imHassy.SensorSubCode && // Hasselblad H5D-50c\n\t\t\timHassy.uncropped) {\n\t\t\tleft_margin = 52;\n\t\t\ttop_margin = 100;\n\t\t\twidth = 8272;\n\t\t\theight = 6200;\n\t\t\tblack = 256;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 15) &&\n\t\t\t(imHassy.SensorSubCode == 2) && // various Hasselblad X1D cameras\n\t\t\timHassy.uncropped) {\n\t\t\ttop_margin = 96;\n\t\t\theight -= 96;\n\t\t\tleft_margin = 48;\n\t\t\twidth -= 106;\n\t\t\tmaximum = 0xffff;\n\t\t\ttiff_bps = 16;\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 12) && imHassy.uncropped) { // Hasselblad H4D-60\n\t\t\tif (black > 500) { // (imHassy.format == LIBRAW_HF_FFF)\n\t\t\t\ttop_margin = 12;\n\t\t\t\tleft_margin = 44;\n\t\t\t\twidth = 8956;\n\t\t\t\theight = 6708;\n\t\t\t\tmemset(cblack, 0, sizeof(cblack));\n\t\t\t\tblack = 512;\n\t\t\t}\n\t\t\telse { // (imHassy.format == LIBRAW_HF_3FR)\n\t\t\t\ttop_margin = 8;\n\t\t\t\tleft_margin = 40;\n\t\t\t\twidth = 8964;\n\t\t\t\theight = 6716;\n\t\t\t\tblack += load_flags = 256;\n\t\t\t\tmaximum = 0x8101;\n\t\t\t}\n\n\t\t}\n\t\telse if ((imHassy.SensorCode == 17) && imHassy.uncropped) { // Hasselblad H6D-100c, A6D-100c\n\t\t\tleft_margin = 64;\n\t\t\twidth = 11608;\n\t\t\ttop_margin = 108;\n\t\t\theight = raw_height - top_margin;\n\t\t}\n\n\t\tif (tiff_samples > 1)\n\t\t{\n\t\t\tis_raw = tiff_samples + 1;\n\t\t\tif (!shot_select && !half_size)\n\t\t\t\tfilters = 0;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sinar))\n\t{\n\t\tif (!load_raw)\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tif (is_raw > 1 && !shot_select)\n\t\t\tfilters = 0;\n\t\tmaximum = 0x3fff;\n\t}\n\n\tif (load_raw == &LibRaw::sinar_4shot_load_raw)\n\t{\n\t\tif (is_raw > 1 && !shot_select)\n\t\t\tfilters = 0;\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Leaf))\n\t{\n\t\tmaximum = 0x3fff;\n\t\tfseek(ifp, data_offset, SEEK_SET);\n\t\tif (ljpeg_start(&jh, 1) && jh.bits == 15)\n\t\t\tmaximum = 0x1fff;\n\t\tif (tiff_samples > 1)\n\t\t\tfilters = 0;\n\t\tif (tiff_samples > 1 || tile_length < raw_height)\n\t\t{\n\t\t\tload_raw = &LibRaw::leaf_hdr_load_raw;\n\t\t\traw_width = tile_width;\n\t\t}\n\t\tif ((width | height) == 2048)\n\t\t{\n\t\t\tif (tiff_samples == 1)\n\t\t\t{\n\t\t\t\tfilters = 1;\n\t\t\t\tstrcpy(cdesc, \"RBTG\");\n\t\t\t\tstrcpy(model, \"CatchLight\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t\ttop_margin = 8;\n\t\t\t\tleft_margin = 18;\n\t\t\t\theight = 2032;\n\t\t\t\twidth = 2016;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(model, \"DCB2\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t\ttop_margin = 10;\n\t\t\t\tleft_margin = 16;\n\t\t\t\theight = 2028;\n\t\t\t\twidth = 2022;\n\t\t\t}\n\t\t}\n\t\telse if (width + height == 3144 + 2060)\n\t\t{\n\t\t\tif (!model[0])\n\t\t\t{\n\t\t\t\tstrcpy(model, \"Cantare\");\n\t\t\t\tstrcpy(normalized_model, model);\n\t\t\t}\n\t\t\tif (width > height)\n\t\t\t{\n\t\t\t\ttop_margin = 6;\n\t\t\t\tleft_margin = 32;\n\t\t\t\theight = 2048;\n\t\t\t\twidth = 3072;\n\t\t\t\tfilters = 0x61616161;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft_margin = 6;\n\t\t\t\ttop_margin = 32;\n\t\t\t\twidth = 2048;\n\t\t\t\theight = 3072;\n\t\t\t\tfilters = 0x16161616;\n\t\t\t}\n\t\t\tif (!cam_mul[0] || model[0] == 'V')\n\t\t\t\tfilters = 0;\n\t\t\telse\n\t\t\t\tis_raw = tiff_samples;\n\t\t}\n\t\telse if (width == 2116) // Leaf \"Valeo 6\"\n\t\t{\n\t\t\tstrcpy(model, \"Valeo 6\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= 2 * (top_margin = 30);\n\t\t\twidth -= 2 * (left_margin = 55);\n\t\t\tfilters = 0x49494949;\n\t\t}\n\t\telse if (width == 3171) // Leaf \"Valeo 6\"\n\t\t{\n\t\t\tstrcpy(model, \"Valeo 6\");\n\t\t\tstrcpy(normalized_model, model);\n\t\t\theight -= 2 * (top_margin = 24);\n\t\t\twidth -= 2 * (left_margin = 24);\n\t\t\tfilters = 0x16161616;\n\t\t}\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Panasonic))\n\t{\n\t\tif (raw_width > 0 &&\n\t\t\t((flen - data_offset) / (raw_width * 8 / 7) == raw_height))\n\t\t\tload_raw = &LibRaw::panasonic_load_raw;\n\t\tif (!load_raw)\n\t\t{\n\t\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\t\tload_flags = 4;\n\t\t}\n\t\tzero_is_bad = 1;\n\t\tif ((height += 12) > raw_height)\n\t\t\theight = raw_height;\n\t\tfor (i = 0; i < int(sizeof pana / sizeof *pana); i++)\n\t\t\tif (raw_width == pana[i][0] && raw_height == pana[i][1])\n\t\t\t{\n\t\t\t\tleft_margin = pana[i][2];\n\t\t\t\ttop_margin = pana[i][3];\n\t\t\t\twidth += pana[i][4];\n\t\t\t\theight += pana[i][5];\n\t\t\t}\n\t\tif (!tiff_bps && pana_bpp >= 12 && pana_bpp <= 14)\n\t\t\ttiff_bps = pana_bpp;\n\n\t\tfilters = 0x01010101U *\n\t\t\t(uchar) \"\\x94\\x61\\x49\\x16\"[((filters - 1) ^ (left_margin & 1) ^\n\t\t\t(top_margin << 1)) &\n\t\t\t3];\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Contax) &&\n\t\t!strcmp(model, \"N Digital\")) {\n\t\theight = 2047;\n\t\twidth = 3072;\n\t\tfilters = 0x61616161;\n\t\tdata_offset = 0x1a00;\n\t\tload_raw = &LibRaw::packed_load_raw;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Sony)) {\n\t\tif (!strcmp(model, \"DSC-F828\")) { // Sony DSC-F828\n\t\t\twidth = 3288;\n\t\t\tleft_margin = 5;\n\t\t\tmask[1][3] = -17;\n\t\t\tdata_offset = 862144;\n\t\t\tload_raw = &LibRaw::sony_load_raw;\n\t\t\tfilters = 0x9c9c9c9c;\n\t\t\tcolors = 4;\n\t\t\tstrcpy(cdesc, \"RGBE\");\n\n\t\t}\n\t\telse if (!strcmp(model, \"DSC-V3\")) { // Sony DSC-V3\n\t\t\twidth = 3109;\n\t\t\tleft_margin = 59;\n\t\t\tmask[0][1] = 9;\n\t\t\tdata_offset = 787392;\n\t\t\tload_raw = &LibRaw::sony_load_raw;\n\n\t\t}\n\t\telse if (raw_width == 3984) { // Sony DSC-R1;\n\t\t\twidth = 3925;\n\t\t\torder = 0x4d4d;\n\n\t\t}\n\t\telse if (raw_width == 4288) { // Sony ILCE-7S, ILCE-7SM2, DSLR-A700, DSLR-A500;\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (raw_width == 4600) { // Sony DSLR-A290, DSLR-A350, DSLR-A380;\n\t\t\tif (!strcmp(model, \"DSLR-A350\"))\n\t\t\t\theight -= 4;\n\t\t\tblack = 0;\n\n\t\t}\n\t\telse if (raw_width == 4928) {\n\t\t\t// Sony DSLR-A580, NEX-C3, SLT-A35, DSC-HX99, SLT-A55,\n\t\t\t// NEX-5N, SLT-A37, SLT-A57, NEX-F3, NEX-6, NEX-5R, NEX-3N, NEX-5T;\n\t\t\tif (height < 3280)\n\t\t\t\twidth -= 8;\n\n\t\t}\n\t\telse if (raw_width == 5504) {\n\t\t\t// Sony ILCE-3000, SLT-A58, DSC-RX100M3, ILCE-QX1,\n\t\t\t// DSC-RX10M4, DSC-RX100M6, DSC-RX100, DSC-RX100M2, DSC-RX10,\n\t\t\t// ILCE-5000, DSC-RX100M4, DSC-RX10M2, DSC-RX10M3,\n\t\t\t// DSC-RX100M5, DSC-RX100M5A;\n\t\t\twidth -= height > 3664 ? 8 : 32;\n\n\t\t}\n\t\telse if (raw_width == 6048) {\n\t\t\t// Sony SLT-A65, DSC-RX1, SLT-A77, DSC-RX1, ILCA-77M2,\n\t\t\t// ILCE-7M3, NEX-7, SLT-A99, ILCE-7, DSC-RX1R, ILCE-6000,\n\t\t\t// ILCE-5100, ILCE-7M2, ILCA-68, ILCE-6300, ILCE-9,\n\t\t\t// ILCE-6500, ILCE-6400;\n\t\t\twidth -= 24;\n\t\t\tif (strstr(normalized_model, \"RX1\") ||\n\t\t\t\tstrstr(normalized_model, \"A99\"))\n\t\t\t\twidth -= 6;\n\n\t\t}\n\t\telse if (raw_width == 7392) { // Sony ILCE-7R;\n\t\t\twidth -= 30;\n\n\t\t}\n\t\telse if (raw_width == 8000) {\n\t\t\t// Sony ILCE-7RM2, ILCE-7RM2, ILCE-7RM3, DSC-RX1RM2, ILCA-99M2;\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (raw_width == 9600) { // Sony ILCE-7RM4\n\t\t\twidth -= 32;\n\n\t\t}\n\t\telse if (!strcmp(model, \"DSLR-A100\")) {\n\t\t\tif (width == 3880) {\n\t\t\t\theight--;\n\t\t\t\twidth = ++raw_width;\n\t\t\t}\n\t\t\telse {\n\t\t\t\theight -= 4;\n\t\t\t\twidth -= 4;\n\t\t\t\torder = 0x4d4d;\n\t\t\t\tload_flags = 2;\n\t\t\t}\n\t\t\tfilters = 0x61616161;\n\t\t}\n\t}\n\n\telse if (!strcmp(model, \"PIXL\")) {\n\t\theight -= top_margin = 4;\n\t\twidth -= left_margin = 32;\n\t\tgamma_curve(0, 7, 1, 255);\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Kodak)) {\n\n\t\tif (!strncasecmp(model, \"EasyShare\", 9)) {\n\t\t\tdata_offset = data_offset < 0x15000 ? 0x15000 : 0x17000;\n\t\t\tload_raw = &LibRaw::packed_load_raw;\n\n\t\t}\n\t\telse if (!strcmp(model, \"C603\") ||\n\t\t\t!strcmp(model, \"C330\") ||\n\t\t\t!strcmp(model, \"12MP\")) {\n\t\t\torder = 0x4949;\n\t\t\tif (filters && data_offset) {\n\t\t\t\tfseek(ifp, data_offset < 4096 ? 168 : 5252, SEEK_SET);\n\t\t\t\tread_shorts(curve, 256);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgamma_curve(0, 3.875, 1, 255);\n\n\t\t\tload_raw = filters ? &LibRaw::eight_bit_load_raw\n\t\t\t\t: strcmp(model, \"C330\") ? &LibRaw::kodak_c603_load_raw\n\t\t\t\t: &LibRaw::kodak_c330_load_raw;\n\t\t\tload_flags = tiff_bps > 16;\n\t\t\ttiff_bps = 8;\n\n\t\t}\n\t\telse {\n\t\t\tif (!strncmp(model, \"NC2000\", 6) ||\n\t\t\t\t!strncmp(model, \"EOSDCS\", 6) ||\n\t\t\t\t!strncmp(model, \"DCS4\", 4)) {\n\t\t\t\twidth -= 4;\n\t\t\t\tleft_margin = 2;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DCS660M\")) {\n\t\t\t\tblack = 214;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"EOS D2000C\")) {\n\t\t\t\tfilters = 0x61616161;\n\t\t\t\tif (!black) black = curve[200];\n\t\t\t}\n\n\t\t\tif (filters == UINT_MAX) filters = 0x61616161;\n\n\t\t\tif (!strcmp(model + 4, \"20X\"))\n\t\t\t\tstrcpy(cdesc, \"MYCY\");\n\t\t\tif (!strcmp(model, \"DC25\")) {\n\t\t\t\tdata_offset = 15424;\n\t\t\t}\n\n\t\t\tif (!strncmp(model, \"DC2\", 3)) {\n\t\t\t\traw_height = 2 + (height = 242);\n\t\t\t\tif (!strncmp(model, \"DC290\", 5))\n\t\t\t\t\tiso_speed = 100;\n\t\t\t\tif (!strncmp(model, \"DC280\", 5))\n\t\t\t\t\tiso_speed = 70;\n\t\t\t\tif (flen < 100000) {\n\t\t\t\t\traw_width = 256;\n\t\t\t\t\twidth = 249;\n\t\t\t\t\tpixel_aspect = (4.0 * height) / (3.0 * width);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\traw_width = 512;\n\t\t\t\t\twidth = 501;\n\t\t\t\t\tpixel_aspect = (493.0 * height) / (373.0 * width);\n\t\t\t\t}\n\t\t\t\ttop_margin = left_margin = 1;\n\t\t\t\tcolors = 4;\n\t\t\t\tfilters = 0x8d8d8d8d;\n\t\t\t\tsimple_coeff(1);\n\t\t\t\tpre_mul[1] = 1.179;\n\t\t\t\tpre_mul[2] = 1.209;\n\t\t\t\tpre_mul[3] = 1.036;\n\t\t\t\tload_raw = &LibRaw::eight_bit_load_raw;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC40\")) {\n\t\t\t\theight = 512;\n\t\t\t\twidth = 768;\n\t\t\t\tdata_offset = 1152;\n\t\t\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\t\t\ttiff_bps = 12;\n\t\t\t\tFORC4 cam_mul[c] = 1.0f;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC50\")) {\n\t\t\t\theight = 512;\n\t\t\t\twidth = 768;\n\t\t\t\tiso_speed = 84;\n\t\t\t\tdata_offset = 19712;\n\t\t\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\t\t\tFORC4 cam_mul[c] = 1.0f;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DC120\")) {\n\t\t\t\traw_height = height = 976;\n\t\t\t\traw_width = width = 848;\n\t\t\t\tiso_speed = 160;\n\t\t\t\tpixel_aspect = height / 0.75 / width;\n\t\t\t\tload_raw = tiff_compress == 7 ? &LibRaw::kodak_jpeg_load_raw\n\t\t\t\t\t: &LibRaw::kodak_dc120_load_raw;\n\n\t\t\t}\n\t\t\telse if (!strcmp(model, \"DCS200\")) {\n\t\t\t\tthumb_height = 128;\n\t\t\t\tthumb_width = 192;\n\t\t\t\tthumb_offset = 6144;\n\t\t\t\tthumb_misc = 360;\n\t\t\t\tiso_speed = 140;\n\t\t\t\twrite_thumb = &LibRaw::layer_thumb;\n\t\t\t\tblack = 17;\n\t\t\t}\n\t\t}\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Logitech) &&\n\t\t!strcmp(model, \"Fotoman Pixtura\")) {\n\t\theight = 512;\n\t\twidth = 768;\n\t\tdata_offset = 3632;\n\t\tload_raw = &LibRaw::kodak_radc_load_raw;\n\t\tfilters = 0x61616161;\n\t\tsimple_coeff(2);\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Apple) &&\n\t\t!strncmp(model, \"QuickTake\", 9)) {\n\t\tif (head[5])\n\t\t\tstrcpy(model + 10, \"200\");\n\t\tfseek(ifp, 544, SEEK_SET);\n\t\theight = get2();\n\t\twidth = get2();\n\t\tdata_offset = (get4(), get2()) == 30 ? 738 : 736;\n\t\tif (height > width) {\n\t\t\tSWAP(height, width);\n\t\t\tfseek(ifp, data_offset - 6, SEEK_SET);\n\t\t\tflip = ~get2() & 3 ? 5 : 6;\n\t\t}\n\t\tfilters = 0x61616161;\n\n\t}\n\telse if (makeIs(LIBRAW_CAMERAMAKER_Rollei) &&\n\t\t!load_raw) {\n\t\tswitch (raw_width) {\n\t\tcase 1316: // Rollei d530flex\n\t\t\theight = 1030;\n\t\t\twidth = 1300;\n\t\t\ttop_margin = 1;\n\t\t\tleft_margin = 6;\n\t\t\tbreak;\n\t\tcase 2568:\n\t\t\theight = 1960;\n\t\t\twidth = 2560;\n\t\t\ttop_margin = 2;\n\t\t\tleft_margin = 8;\n\t\t}\n\t\tfilters = 0x16161616;\n\t\tload_raw = &LibRaw::rollei_load_raw;\n\n\t}\n\telse if (!strcmp(model, \"GRAS-50S5C\")) {\n\t\theight = 2048;\n\t\twidth = 2440;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x49494949;\n\t\torder = 0x4949;\n\t\tmaximum = 0xfffC;\n\n\t}\n\telse if (!strcmp(model, \"BB-500CL\")) {\n\t\theight = 2058;\n\t\twidth = 2448;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x3fff;\n\n\t}\n\telse if (!strcmp(model, \"BB-500GE\")) {\n\t\theight = 2058;\n\t\twidth = 2456;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x3fff;\n\n\t}\n\telse if (!strcmp(model, \"SVS625CL\")) {\n\t\theight = 2050;\n\t\twidth = 2448;\n\t\tload_raw = &LibRaw::unpacked_load_raw;\n\t\tdata_offset = 0;\n\t\tfilters = 0x94949494;\n\t\torder = 0x4949;\n\t\tmaximum = 0x0fff;\n\t}\n}\n"], "filenames": ["src/metadata/identify.cpp"], "buggy_code_start_loc": [1302], "buggy_code_end_loc": [1509], "fixing_code_start_loc": [1302], "fixing_code_end_loc": [1509], "type": "CWE-787", "message": "Libraw before 0.20.1 has a stack buffer overflow via LibRaw::identify_process_dng_fields in identify.cpp.", "other": {"cve": {"id": "CVE-2020-24870", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-02T16:15:08.287", "lastModified": "2022-12-09T18:25:34.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Libraw before 0.20.1 has a stack buffer overflow via LibRaw::identify_process_dng_fields in identify.cpp."}, {"lang": "es", "value": "Libraw versiones anteriores a 0.20.1, tiene un desbordamiento del b\u00fafer de lapila por medio de la funci\u00f3n LibRaw::identify_process_dng_fields en el archivo identify.cpp"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.20.1", "matchCriteriaId": "496898A6-5B52-4DDA-8671-83014BAD5FC5"}]}]}], "references": [{"url": "https://github.com/LibRaw/LibRaw/commit/4feaed4dea636cee4fee010f615881ccf76a096d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/LibRaw/LibRaw/issues/330", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-07", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LibRaw/LibRaw/commit/4feaed4dea636cee4fee010f615881ccf76a096d"}}