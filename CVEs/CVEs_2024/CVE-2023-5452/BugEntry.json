{"buggy_code": ["<?php\nnamespace App\\Http\\Transformers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Actionlog;\nuse App\\Models\\CustomField;\nuse App\\Models\\Setting;\nuse App\\Models\\Company;\nuse App\\Models\\Supplier;\nuse App\\Models\\Location;\nuse App\\Models\\AssetModel;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass ActionlogsTransformer\n{\n\n    public function transformActionlogs (Collection $actionlogs, $total)\n    {\n        $array = array();\n        $settings = Setting::getSettings();\n        foreach ($actionlogs as $actionlog) {\n            $array[] = self::transformActionlog($actionlog, $settings);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n    private function clean_field($value)\n    {\n        // This object stuff is weird, and is used to make up for the fact that\n        // older data can get strangely formatted if an asset existed,\n        // then a new custom field is added, and the asset is saved again.\n        // It can result in funnily-formatted strings like:\n        //\n        // {\"_snipeit_right_sized_fault_tolerant_localareanetwo_1\":\n        // {\"old\":null,\"new\":{\"value\":\"1579490695972\",\"_snipeit_new_field_2\":2,\"_snipeit_new_field_3\":\"Monday, 20 January 2020 2:24:55 PM\"}}\n        // so we have to walk down that next level\n        if(is_object($value) && isset($value->value)) {\n            return $this->clean_field($value->value);\n        }\n        return is_scalar($value) || is_null($value) ? e($value) : e(json_encode($value));\n    }\n\n    public function transformActionlog (Actionlog $actionlog, $settings = null)\n    {\n        $icon = $actionlog->present()->icon();\n        $custom_fields = CustomField::all();\n\n        if ($actionlog->filename!='') {\n            $icon =  Helper::filetype_icon($actionlog->filename);\n        }\n\n        // This is necessary since we can't escape special characters within a JSON object\n        if (($actionlog->log_meta) && ($actionlog->log_meta!='')) {\n            $meta_array = json_decode($actionlog->log_meta);\n\n            $clean_meta = [];\n\n            if ($meta_array) {\n\n                foreach ($meta_array as $fieldname => $fieldata) {\n\n                    $clean_meta[$fieldname]['old'] = $this->clean_field($fieldata->old);\n                    $clean_meta[$fieldname]['new'] = $this->clean_field($fieldata->new);\n\n                    // this is a custom field\n                    if (str_starts_with($fieldname, '_snipeit_')) {\n                        \n                        foreach ($custom_fields as $custom_field) {\n\n                            if ($custom_field->db_column == $fieldname) {\n\n                                if ($custom_field->field_encrypted == '1') {\n                                    $clean_meta[$fieldname]['old'] = \"************\";\n                                    $clean_meta[$fieldname]['new'] = \"************\";\n                                }\n\n                            }\n\n                        }\n                    }\n\n                }\n\n            }\n            $clean_meta= $this->changedInfo($clean_meta);\n        }\n\n        $file_url = '';\n        if($actionlog->filename!='') {\n            if ($actionlog->action_type == 'accepted') {\n                $file_url = route('log.storedeula.download', ['filename' => $actionlog->filename]);\n            } else {\n                if ($actionlog->item) {\n                    if ($actionlog->itemType() == 'asset') {\n                        $file_url = route('show/assetfile', ['assetId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    } elseif ($actionlog->itemType() == 'license') {\n                        $file_url = route('show.licensefile', ['licenseId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    } elseif ($actionlog->itemType() == 'user') {\n                        $file_url = route('show/userfile', ['userId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    }\n                }\n            }\n        }\n\n        $array = [\n            'id'          => (int) $actionlog->id,\n            'icon'          => $icon,\n            'file' => ($actionlog->filename!='')\n                ?\n                [\n                    'url' => $file_url,\n                    'filename' => $actionlog->filename,\n                    'inlineable' => (bool) Helper::show_file_inline($actionlog->filename),\n                ] : null,\n\n            'item' => ($actionlog->item) ? [\n                'id' => (int) $actionlog->item->id,\n                'name' => ($actionlog->itemType()=='user') ? e($actionlog->item->getFullNameAttribute()) : e($actionlog->item->getDisplayNameAttribute()),\n                'type' => e($actionlog->itemType()),\n                'serial' =>e($actionlog->item->serial) ? e($actionlog->item->serial) : null\n            ] : null,\n            'location' => ($actionlog->location) ? [\n                'id' => (int) $actionlog->location->id,\n                'name' => e($actionlog->location->name),\n            ] : null,\n            'created_at'    => Helper::getFormattedDateObject($actionlog->created_at, 'datetime'),\n            'updated_at'    => Helper::getFormattedDateObject($actionlog->updated_at, 'datetime'),\n            'next_audit_date' => ($actionlog->itemType()=='asset') ? Helper::getFormattedDateObject($actionlog->calcNextAuditDate(null, $actionlog->item), 'date'): null,\n            'days_to_next_audit' => $actionlog->daysUntilNextAudit($settings->audit_interval, $actionlog->item),\n            'action_type'   => $actionlog->present()->actionType(),\n            'admin' => ($actionlog->admin) ? [\n                'id' => (int) $actionlog->admin->id,\n                'name' => e($actionlog->admin->getFullNameAttribute()),\n                'first_name'=> e($actionlog->admin->first_name),\n                'last_name'=> e($actionlog->admin->last_name)\n            ] : null,\n            'target' => ($actionlog->target) ? [\n                'id' => (int) $actionlog->target->id,\n                'name' => ($actionlog->targetType()=='user') ? e($actionlog->target->getFullNameAttribute()) : e($actionlog->target->getDisplayNameAttribute()),\n                'type' => e($actionlog->targetType()),\n            ] : null,\n\n            'note'          => ($actionlog->note) ? Helper::parseEscapedMarkedownInline($actionlog->note): null,\n            'signature_file'   => ($actionlog->accept_signature) ? route('log.signature.view', ['filename' => $actionlog->accept_signature ]) : null,\n            'log_meta'          => ((isset($clean_meta)) && (is_array($clean_meta))) ? $clean_meta: null,\n            'action_date'   => ($actionlog->action_date) ? Helper::getFormattedDateObject($actionlog->action_date, 'datetime'): Helper::getFormattedDateObject($actionlog->created_at, 'datetime'),\n        ];\n\n//        \\Log::info(\"Clean Meta is: \".print_r($clean_meta,true));\n        //dd($array);\n\n        return $array;\n    }\n\n\n\n    public function transformCheckedoutActionlog (Collection $accessories_users, $total)\n    {\n\n        $array = array();\n        foreach ($accessories_users as $user) {\n            $array[] = (new UsersTransformer)->transformUser($user);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n    /**\n     * This takes the ids of the changed attributes and returns the names instead for the history view of an Asset\n     *\n     * @param  array $clean_meta\n     * @return array\n     */\n\n    public function changedInfo(array $clean_meta)\n    {   $location = Location::withTrashed()->get();\n        $supplier = Supplier::withTrashed()->get();\n        $model = AssetModel::withTrashed()->get();\n        $company = Company::get();\n\n\n        if(array_key_exists('rtd_location_id',$clean_meta)) {\n            $clean_meta['rtd_location_id']['old'] = $clean_meta['rtd_location_id']['old'] ? \"[id: \".$clean_meta['rtd_location_id']['old'].\"] \". $location->find($clean_meta['rtd_location_id']['old'])->name : trans('general.unassigned');\n            $clean_meta['rtd_location_id']['new'] = $clean_meta['rtd_location_id']['new'] ? \"[id: \".$clean_meta['rtd_location_id']['new'].\"] \". $location->find($clean_meta['rtd_location_id']['new'])->name : trans('general.unassigned');\n            $clean_meta['Default Location'] = $clean_meta['rtd_location_id'];\n            unset($clean_meta['rtd_location_id']);\n        }\n        if(array_key_exists('location_id', $clean_meta)) {\n            $clean_meta['location_id']['old'] = $clean_meta['location_id']['old'] ? \"[id: \".$clean_meta['location_id']['old'].\"] \".$location->find($clean_meta['location_id']['old'])->name : trans('general.unassigned');\n            $clean_meta['location_id']['new'] = $clean_meta['location_id']['new'] ? \"[id: \".$clean_meta['location_id']['new'].\"] \".$location->find($clean_meta['location_id']['new'])->name : trans('general.unassigned');\n            $clean_meta['Current Location'] = $clean_meta['location_id'];\n            unset($clean_meta['location_id']);\n        }\n        if(array_key_exists('model_id', $clean_meta)) {\n\n            $oldModel = $model->find($clean_meta['model_id']['old']);\n            $oldModelName = $oldModel->name ?? trans('admin/models/message.deleted');\n\n            $newModel = $model->find($clean_meta['model_id']['new']);\n            $newModelName = $newModel->name ?? trans('admin/models/message.deleted');\n\n            $clean_meta['model_id']['old'] = \"[id: \".$clean_meta['model_id']['old'].\"] \".$oldModelName;\n            $clean_meta['model_id']['new'] = \"[id: \".$clean_meta['model_id']['new'].\"] \".$newModelName; /** model is required at asset creation */\n\n            $clean_meta['Model'] = $clean_meta['model_id'];\n            unset($clean_meta['model_id']);\n        }\n        if(array_key_exists('company_id', $clean_meta)) {\n\n            $oldCompany = $company->find($clean_meta['company_id']['old']);\n            $oldCompanyName = $oldCompany->name ?? trans('admin/companies/message.deleted');\n\n            $newCompany = $company->find($clean_meta['company_id']['new']);\n            $newCompanyName = $newCompany->name ?? trans('admin/companies/message.deleted');\n\n            $clean_meta['company_id']['old'] = $clean_meta['company_id']['old'] ? \"[id: \".$clean_meta['company_id']['old'].\"] \". $oldCompanyName : trans('general.unassigned');\n            $clean_meta['company_id']['new'] = $clean_meta['company_id']['new'] ? \"[id: \".$clean_meta['company_id']['new'].\"] \". $newCompanyName : trans('general.unassigned');\n            $clean_meta['Company'] = $clean_meta['company_id'];\n            unset($clean_meta['company_id']);\n        }\n        if(array_key_exists('supplier_id', $clean_meta)) {\n\n            $oldSupplier = $supplier->find($clean_meta['supplier_id']['old']);\n            $oldSupplierName = $oldSupplier->name ?? trans('admin/suppliers/message.deleted');\n\n            $newSupplier = $supplier->find($clean_meta['supplier_id']['new']);\n            $newSupplierName = $newSupplier->name ?? trans('admin/suppliers/message.deleted');\n\n            $clean_meta['supplier_id']['old'] = $clean_meta['supplier_id']['old'] ? \"[id: \".$clean_meta['supplier_id']['old'].\"] \". $oldSupplierName : trans('general.unassigned');\n            $clean_meta['supplier_id']['new'] = $clean_meta['supplier_id']['new'] ? \"[id: \".$clean_meta['supplier_id']['new'].\"] \". $newSupplierName : trans('general.unassigned');\n            $clean_meta['Supplier'] = $clean_meta['supplier_id'];\n            unset($clean_meta['supplier_id']);\n        }\n        if(array_key_exists('asset_eol_date', $clean_meta)) {\n            $clean_meta['EOL date'] = $clean_meta['asset_eol_date'];\n            unset($clean_meta['asset_eol_date']);\n        }\n\n        return $clean_meta;\n\n    }\n\n\n\n}"], "fixing_code": ["<?php\nnamespace App\\Http\\Transformers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Actionlog;\nuse App\\Models\\CustomField;\nuse App\\Models\\Setting;\nuse App\\Models\\Company;\nuse App\\Models\\Supplier;\nuse App\\Models\\Location;\nuse App\\Models\\AssetModel;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass ActionlogsTransformer\n{\n\n    public function transformActionlogs (Collection $actionlogs, $total)\n    {\n        $array = array();\n        $settings = Setting::getSettings();\n        foreach ($actionlogs as $actionlog) {\n            $array[] = self::transformActionlog($actionlog, $settings);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n    private function clean_field($value)\n    {\n        // This object stuff is weird, and is used to make up for the fact that\n        // older data can get strangely formatted if an asset existed,\n        // then a new custom field is added, and the asset is saved again.\n        // It can result in funnily-formatted strings like:\n        //\n        // {\"_snipeit_right_sized_fault_tolerant_localareanetwo_1\":\n        // {\"old\":null,\"new\":{\"value\":\"1579490695972\",\"_snipeit_new_field_2\":2,\"_snipeit_new_field_3\":\"Monday, 20 January 2020 2:24:55 PM\"}}\n        // so we have to walk down that next level\n        if(is_object($value) && isset($value->value)) {\n            return $this->clean_field($value->value);\n        }\n        return is_scalar($value) || is_null($value) ? e($value) : e(json_encode($value));\n    }\n\n    public function transformActionlog (Actionlog $actionlog, $settings = null)\n    {\n        $icon = $actionlog->present()->icon();\n        $custom_fields = CustomField::all();\n\n        if ($actionlog->filename!='') {\n            $icon =  Helper::filetype_icon($actionlog->filename);\n        }\n\n        // This is necessary since we can't escape special characters within a JSON object\n        if (($actionlog->log_meta) && ($actionlog->log_meta!='')) {\n            $meta_array = json_decode($actionlog->log_meta);\n\n            $clean_meta = [];\n\n            if ($meta_array) {\n\n                foreach ($meta_array as $fieldname => $fieldata) {\n\n                    $clean_meta[$fieldname]['old'] = $this->clean_field($fieldata->old);\n                    $clean_meta[$fieldname]['new'] = $this->clean_field($fieldata->new);\n\n                    // this is a custom field\n                    if (str_starts_with($fieldname, '_snipeit_')) {\n                        \n                        foreach ($custom_fields as $custom_field) {\n\n                            if ($custom_field->db_column == $fieldname) {\n\n                                if ($custom_field->field_encrypted == '1') {\n                                    $clean_meta[$fieldname]['old'] = \"************\";\n                                    $clean_meta[$fieldname]['new'] = \"************\";\n                                }\n\n                            }\n\n                        }\n                    }\n\n                }\n\n            }\n            $clean_meta= $this->changedInfo($clean_meta);\n        }\n\n        $file_url = '';\n        if($actionlog->filename!='') {\n            if ($actionlog->action_type == 'accepted') {\n                $file_url = route('log.storedeula.download', ['filename' => $actionlog->filename]);\n            } else {\n                if ($actionlog->item) {\n                    if ($actionlog->itemType() == 'asset') {\n                        $file_url = route('show/assetfile', ['assetId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    } elseif ($actionlog->itemType() == 'license') {\n                        $file_url = route('show.licensefile', ['licenseId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    } elseif ($actionlog->itemType() == 'user') {\n                        $file_url = route('show/userfile', ['userId' => $actionlog->item->id, 'fileId' => $actionlog->id]);\n                    }\n                }\n            }\n        }\n\n        $array = [\n            'id'          => (int) $actionlog->id,\n            'icon'          => $icon,\n            'file' => ($actionlog->filename!='')\n                ?\n                [\n                    'url' => $file_url,\n                    'filename' => $actionlog->filename,\n                    'inlineable' => (bool) Helper::show_file_inline($actionlog->filename),\n                ] : null,\n\n            'item' => ($actionlog->item) ? [\n                'id' => (int) $actionlog->item->id,\n                'name' => ($actionlog->itemType()=='user') ? e($actionlog->item->getFullNameAttribute()) : e($actionlog->item->getDisplayNameAttribute()),\n                'type' => e($actionlog->itemType()),\n                'serial' =>e($actionlog->item->serial) ? e($actionlog->item->serial) : null\n            ] : null,\n            'location' => ($actionlog->location) ? [\n                'id' => (int) $actionlog->location->id,\n                'name' => e($actionlog->location->name),\n            ] : null,\n            'created_at'    => Helper::getFormattedDateObject($actionlog->created_at, 'datetime'),\n            'updated_at'    => Helper::getFormattedDateObject($actionlog->updated_at, 'datetime'),\n            'next_audit_date' => ($actionlog->itemType()=='asset') ? Helper::getFormattedDateObject($actionlog->calcNextAuditDate(null, $actionlog->item), 'date'): null,\n            'days_to_next_audit' => $actionlog->daysUntilNextAudit($settings->audit_interval, $actionlog->item),\n            'action_type'   => $actionlog->present()->actionType(),\n            'admin' => ($actionlog->admin) ? [\n                'id' => (int) $actionlog->admin->id,\n                'name' => e($actionlog->admin->getFullNameAttribute()),\n                'first_name'=> e($actionlog->admin->first_name),\n                'last_name'=> e($actionlog->admin->last_name)\n            ] : null,\n            'target' => ($actionlog->target) ? [\n                'id' => (int) $actionlog->target->id,\n                'name' => ($actionlog->targetType()=='user') ? e($actionlog->target->getFullNameAttribute()) : e($actionlog->target->getDisplayNameAttribute()),\n                'type' => e($actionlog->targetType()),\n            ] : null,\n\n            'note'          => ($actionlog->note) ? Helper::parseEscapedMarkedownInline($actionlog->note): null,\n            'signature_file'   => ($actionlog->accept_signature) ? route('log.signature.view', ['filename' => $actionlog->accept_signature ]) : null,\n            'log_meta'          => ((isset($clean_meta)) && (is_array($clean_meta))) ? $clean_meta: null,\n            'action_date'   => ($actionlog->action_date) ? Helper::getFormattedDateObject($actionlog->action_date, 'datetime'): Helper::getFormattedDateObject($actionlog->created_at, 'datetime'),\n        ];\n\n//        \\Log::info(\"Clean Meta is: \".print_r($clean_meta,true));\n        //dd($array);\n\n        return $array;\n    }\n\n\n\n    public function transformCheckedoutActionlog (Collection $accessories_users, $total)\n    {\n\n        $array = array();\n        foreach ($accessories_users as $user) {\n            $array[] = (new UsersTransformer)->transformUser($user);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n    /**\n     * This takes the ids of the changed attributes and returns the names instead for the history view of an Asset\n     *\n     * @param  array $clean_meta\n     * @return array\n     */\n\n    public function changedInfo(array $clean_meta)\n    {   $location = Location::withTrashed()->get();\n        $supplier = Supplier::withTrashed()->get();\n        $model = AssetModel::withTrashed()->get();\n        $company = Company::get();\n\n\n        if(array_key_exists('rtd_location_id',$clean_meta)) {\n            $clean_meta['rtd_location_id']['old'] = $clean_meta['rtd_location_id']['old'] ? \"[id: \".$clean_meta['rtd_location_id']['old'].\"] \". e($location->find($clean_meta['rtd_location_id']['old'])->name) : trans('general.unassigned');\n            $clean_meta['rtd_location_id']['new'] = $clean_meta['rtd_location_id']['new'] ? \"[id: \".$clean_meta['rtd_location_id']['new'].\"] \". e($location->find($clean_meta['rtd_location_id']['new'])->name) : trans('general.unassigned');\n            $clean_meta['Default Location'] = $clean_meta['rtd_location_id'];\n            unset($clean_meta['rtd_location_id']);\n        }\n\n        if (array_key_exists('location_id', $clean_meta)) {\n            $clean_meta['location_id']['old'] = $clean_meta['location_id']['old'] ? \"[id: \".$clean_meta['location_id']['old'].\"] \".e($location->find($clean_meta['location_id']['old'])->name): trans('general.unassigned');\n            $clean_meta['location_id']['new'] = $clean_meta['location_id']['new'] ? \"[id: \".$clean_meta['location_id']['new'].\"] \".e($location->find($clean_meta['location_id']['new'])->name) : trans('general.unassigned');\n            $clean_meta['Current Location'] = $clean_meta['location_id'];\n            unset($clean_meta['location_id']);\n        }\n\n        if(array_key_exists('model_id', $clean_meta)) {\n\n            $oldModel = $model->find($clean_meta['model_id']['old']);\n            $oldModelName = $oldModel ? e($oldModel->name) : trans('admin/models/message.deleted');\n\n            $newModel = $model->find($clean_meta['model_id']['new']);\n            $newModelName = $newModel ? e($newModel->name) : trans('admin/models/message.deleted');\n\n            $clean_meta['model_id']['old'] = \"[id: \".$clean_meta['model_id']['old'].\"] \".$oldModelName;\n            $clean_meta['model_id']['new'] = \"[id: \".$clean_meta['model_id']['new'].\"] \".$newModelName; /** model is required at asset creation */\n\n            $clean_meta['Model'] = $clean_meta['model_id'];\n            unset($clean_meta['model_id']);\n        }\n        if(array_key_exists('company_id', $clean_meta)) {\n\n            $oldCompany = $company->find($clean_meta['company_id']['old']);\n            $oldCompanyName = $oldCompany ? e($oldCompany->name) : trans('admin/company/message.deleted');\n\n            $newCompany = $company->find($clean_meta['company_id']['new']);\n            $newCompanyName = $newCompany ? e($newCompany->name) : trans('admin/company/message.deleted');\n\n            $clean_meta['company_id']['old'] = $clean_meta['company_id']['old'] ? \"[id: \".$clean_meta['company_id']['old'].\"] \". $oldCompanyName : trans('general.unassigned');\n            $clean_meta['company_id']['new'] = $clean_meta['company_id']['new'] ? \"[id: \".$clean_meta['company_id']['new'].\"] \". $newCompanyName : trans('general.unassigned');\n            $clean_meta['Company'] = $clean_meta['company_id'];\n            unset($clean_meta['company_id']);\n        }\n        if(array_key_exists('supplier_id', $clean_meta)) {\n\n            $oldSupplier = $supplier->find($clean_meta['supplier_id']['old']);\n            $oldSupplierName = $oldSupplier ? e($oldSupplier->name) : trans('admin/suppliers/message.deleted');\n\n            $newSupplier = $supplier->find($clean_meta['supplier_id']['new']);\n            $newSupplierName = $newSupplier ? e($newSupplier->name) : trans('admin/suppliers/message.deleted');\n\n            $clean_meta['supplier_id']['old'] = $clean_meta['supplier_id']['old'] ? \"[id: \".$clean_meta['supplier_id']['old'].\"] \". $oldSupplierName : trans('general.unassigned');\n            $clean_meta['supplier_id']['new'] = $clean_meta['supplier_id']['new'] ? \"[id: \".$clean_meta['supplier_id']['new'].\"] \". $newSupplierName : trans('general.unassigned');\n            $clean_meta['Supplier'] = $clean_meta['supplier_id'];\n            unset($clean_meta['supplier_id']);\n        }\n        if(array_key_exists('asset_eol_date', $clean_meta)) {\n            $clean_meta['EOL date'] = $clean_meta['asset_eol_date'];\n            unset($clean_meta['asset_eol_date']);\n        }\n\n        return $clean_meta;\n\n    }\n\n\n\n}"], "filenames": ["app/Http/Transformers/ActionlogsTransformer.php"], "buggy_code_start_loc": [181], "buggy_code_end_loc": [226], "fixing_code_start_loc": [181], "fixing_code_end_loc": [228], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository snipe/snipe-it prior to v6.2.2.", "other": {"cve": {"id": "CVE-2023-5452", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-06T20:15:11.380", "lastModified": "2023-10-10T19:34:10.860", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository snipe/snipe-it prior to v6.2.2."}, {"lang": "es", "value": "Cross-Site Scripting (XSS) - Almacenado en el repositorio de GitHub snipe/snipe-it antes de v6.2.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.2.2", "matchCriteriaId": "DB26EBCA-1F26-4FDE-A448-47EB776E72AE"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/eea2eabaeef16fc8f3a1d61b19c06e9fc8ed942a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d6ed5ac1-2ad6-45fd-9492-979820bf60c8", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/eea2eabaeef16fc8f3a1d61b19c06e9fc8ed942a"}}