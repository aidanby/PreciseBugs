{"buggy_code": ["import loadScript from \"discourse/lib/load-script\";\nimport { apiInitializer } from \"discourse/lib/api\";\nimport discourseDebounce from \"discourse-common/lib/debounce\";\n\nasync function applyMermaid(element, key = \"composer\") {\n  const mermaids = element.querySelectorAll(\"pre[data-code-wrap=mermaid]\");\n\n  if (!mermaids.length) {\n    return;\n  }\n\n  await loadScript(settings.theme_uploads_local.mermaid_js);\n\n  window.mermaid.initialize({\n    startOnLoad: false,\n    theme:\n      getComputedStyle(document.body)\n        .getPropertyValue(\"--scheme-type\")\n        .trim() === \"dark\"\n        ? \"dark\"\n        : \"default\",\n  });\n\n  mermaids.forEach((mermaid) => {\n    if (mermaid.dataset.processed) {\n      return;\n    }\n\n    const spinner = document.createElement(\"div\");\n    spinner.classList.add(\"spinner\");\n\n    if (mermaid.dataset.codeHeight && key !== \"composer\") {\n      mermaid.style.height = `${mermaid.dataset.codeHeight}px`;\n    }\n\n    mermaid.append(spinner);\n  });\n\n  mermaids.forEach((mermaid, index) => {\n    const code = mermaid.querySelector(\"code\");\n\n    if (!code) {\n      return;\n    }\n\n    try {\n      if (window.mermaid.parse(code.textContent || \"\")) {\n        window.mermaid.mermaidAPI.render(\n          `mermaid_${index}_${key}`,\n          code.textContent || \"\",\n          (svg) => {\n            mermaid.innerHTML = svg;\n          }\n        );\n      }\n    } catch (e) {\n      mermaid.innerHTML = `<span class=\"mermaid-error\">${e?.str || e}</span>`;\n    } finally {\n      mermaid.dataset.processed = true;\n      mermaid.querySelector(\".spinner\")?.remove();\n    }\n\n    if (key === \"composer\") {\n      discourseDebounce(updateMarkdownHeight, mermaid, index, 500);\n    }\n  });\n}\n\nfunction updateMarkdownHeight(mermaid, index) {\n  let height = parseInt(mermaid.getBoundingClientRect().height);\n  let calculatedHeight = parseInt(mermaid.dataset.calculatedHeight);\n\n  if (height === 0) {\n    return;\n  }\n\n  if (height !== calculatedHeight) {\n    mermaid.dataset.calculatedHeight = height;\n    // TODO: an API to grab the composer vs leaning on hunting through HTML\n    // would be better\n    let composer = document.getElementsByClassName(\"d-editor-input\")[0];\n\n    let split = composer.value.split(\"\\n\");\n\n    let n = 0;\n    for (let i = 0; i < split.length; i++) {\n      if (split[i].match(/```mermaid((\\s*)|.*auto)$/)) {\n        if (n === index) {\n          split[i] = \"```mermaid height=\" + height + \",auto\";\n        }\n        n += 1;\n      }\n    }\n\n    let joined = split.join(\"\\n\");\n\n    if (joined !== composer.value) {\n      let restorePosStart = composer.selectionStart;\n      let restorePosEnd = composer.selectionEnd;\n\n      composer.value = joined;\n\n      if (restorePosStart) {\n        composer.selectionStart = restorePosStart;\n        composer.selectionEnd = restorePosEnd;\n      }\n    }\n  }\n}\n\nexport default apiInitializer(\"0.11.1\", (api) => {\n  api.addToolbarPopupMenuOptionsCallback(() => {\n    return {\n      action: \"insertMermaidSample\",\n      icon: \"project-diagram\",\n      label: themePrefix(\"insert_mermaid_sample\"),\n    };\n  });\n\n  // this is a hack as applySurround expects a top level\n  // composer key, not possible from a theme\n  window.I18n.translations[\n    window.I18n.locale\n  ].js.composer.mermaid_sample = `    flowchart\n         A --> B`;\n\n  api.modifyClass(\"controller:composer\", {\n    pluginId: \"discourse-mermaid-theme-component\",\n    actions: {\n      insertMermaidSample() {\n        this.toolbarEvent.applySurround(\n          \"\\n```mermaid\\n\",\n          \"\\n```\\n\",\n          \"mermaid_sample\",\n          { multiline: false }\n        );\n      },\n    },\n  });\n\n  if (api.decorateChatMessage) {\n    api.decorateChatMessage((element) => {\n      applyMermaid(element, `chat_message_${element.id}`);\n    });\n  }\n\n  api.decorateCookedElement(\n    async (elem, helper) => {\n      const id = helper ? `post_${helper.getModel().id}` : \"composer\";\n      applyMermaid(elem, id);\n    },\n    { id: \"discourse-mermaid-theme-component\" }\n  );\n});\n", "{\n  \"author\": \"joffreyjaffeux\",\n  \"license\": \"MIT\",\n  \"version\": \"1.0.0\",\n  \"repository\": \"https://github.com/discourse/discourse-mermaid-theme-component\",\n  \"devDependencies\": {\n    \"eslint-config-discourse\": \"^1.1.8\"\n  }\n}\n"], "fixing_code": ["import loadScript from \"discourse/lib/load-script\";\nimport { apiInitializer } from \"discourse/lib/api\";\nimport discourseDebounce from \"discourse-common/lib/debounce\";\n\nasync function applyMermaid(element, key = \"composer\") {\n  const mermaids = element.querySelectorAll(\"pre[data-code-wrap=mermaid]\");\n\n  if (!mermaids.length) {\n    return;\n  }\n\n  await loadScript(settings.theme_uploads_local.mermaid_js);\n\n  window.mermaid.initialize({\n    startOnLoad: false,\n    theme:\n      getComputedStyle(document.body)\n        .getPropertyValue(\"--scheme-type\")\n        .trim() === \"dark\"\n        ? \"dark\"\n        : \"default\",\n  });\n\n  mermaids.forEach((mermaid) => {\n    if (mermaid.dataset.processed) {\n      return;\n    }\n\n    const spinner = document.createElement(\"div\");\n    spinner.classList.add(\"spinner\");\n\n    if (mermaid.dataset.codeHeight && key !== \"composer\") {\n      mermaid.style.height = `${mermaid.dataset.codeHeight}px`;\n    }\n\n    mermaid.append(spinner);\n  });\n\n  mermaids.forEach((mermaid, index) => {\n    const code = mermaid.querySelector(\"code\");\n\n    if (!code) {\n      return;\n    }\n\n    try {\n      if (window.mermaid.parse(code.textContent || \"\")) {\n        window.mermaid.mermaidAPI.render(\n          `mermaid_${index}_${key}`,\n          code.textContent || \"\",\n          (svg) => {\n            mermaid.innerHTML = svg;\n          }\n        );\n      }\n    } catch (e) {\n      mermaid.innerText = e?.text || e;\n    } finally {\n      mermaid.dataset.processed = true;\n      mermaid.querySelector(\".spinner\")?.remove();\n    }\n\n    if (key === \"composer\") {\n      discourseDebounce(updateMarkdownHeight, mermaid, index, 500);\n    }\n  });\n}\n\nfunction updateMarkdownHeight(mermaid, index) {\n  let height = parseInt(mermaid.getBoundingClientRect().height);\n  let calculatedHeight = parseInt(mermaid.dataset.calculatedHeight);\n\n  if (height === 0) {\n    return;\n  }\n\n  if (height !== calculatedHeight) {\n    mermaid.dataset.calculatedHeight = height;\n    // TODO: an API to grab the composer vs leaning on hunting through HTML\n    // would be better\n    let composer = document.getElementsByClassName(\"d-editor-input\")[0];\n\n    let split = composer.value.split(\"\\n\");\n\n    let n = 0;\n    for (let i = 0; i < split.length; i++) {\n      if (split[i].match(/```mermaid((\\s*)|.*auto)$/)) {\n        if (n === index) {\n          split[i] = \"```mermaid height=\" + height + \",auto\";\n        }\n        n += 1;\n      }\n    }\n\n    let joined = split.join(\"\\n\");\n\n    if (joined !== composer.value) {\n      let restorePosStart = composer.selectionStart;\n      let restorePosEnd = composer.selectionEnd;\n\n      composer.value = joined;\n\n      if (restorePosStart) {\n        composer.selectionStart = restorePosStart;\n        composer.selectionEnd = restorePosEnd;\n      }\n    }\n  }\n}\n\nexport default apiInitializer(\"0.11.1\", (api) => {\n  api.addToolbarPopupMenuOptionsCallback(() => {\n    return {\n      action: \"insertMermaidSample\",\n      icon: \"project-diagram\",\n      label: themePrefix(\"insert_mermaid_sample\"),\n    };\n  });\n\n  // this is a hack as applySurround expects a top level\n  // composer key, not possible from a theme\n  window.I18n.translations[\n    window.I18n.locale\n  ].js.composer.mermaid_sample = `    flowchart\n         A --> B`;\n\n  api.modifyClass(\"controller:composer\", {\n    pluginId: \"discourse-mermaid-theme-component\",\n    actions: {\n      insertMermaidSample() {\n        this.toolbarEvent.applySurround(\n          \"\\n```mermaid\\n\",\n          \"\\n```\\n\",\n          \"mermaid_sample\",\n          { multiline: false }\n        );\n      },\n    },\n  });\n\n  if (api.decorateChatMessage) {\n    api.decorateChatMessage((element) => {\n      applyMermaid(element, `chat_message_${element.id}`);\n    });\n  }\n\n  api.decorateCookedElement(\n    async (elem, helper) => {\n      const id = helper ? `post_${helper.getModel().id}` : \"composer\";\n      applyMermaid(elem, id);\n    },\n    { id: \"discourse-mermaid-theme-component\" }\n  );\n});\n", "{\n  \"author\": \"joffreyjaffeux\",\n  \"license\": \"MIT\",\n  \"version\": \"1.1.0\",\n  \"repository\": \"https://github.com/discourse/discourse-mermaid-theme-component\",\n  \"devDependencies\": {\n    \"eslint-config-discourse\": \"^1.1.8\"\n  }\n}\n"], "filenames": ["javascripts/discourse/api-initializers/discourse-mermaid-theme-component.js", "package.json"], "buggy_code_start_loc": [57, 4], "buggy_code_end_loc": [58, 5], "fixing_code_start_loc": [57, 4], "fixing_code_end_loc": [58, 5], "type": "CWE-79", "message": "Discourse Mermaid (discourse-mermaid-theme-component) allows users of Discourse, open-source forum software, to create graphs using the Mermaid syntax. Users of discourse-mermaid-theme-component version 1.0.0 who can create posts are able to inject arbitrary HTML on that post. The issue has been fixed on the `main` branch of the GitHub repository, with 1.1.0 named as a patched version. Admins can update the theme component through the admin UI. As a workaround, admins can temporarily disable discourse-mermaid-theme-component.", "other": {"cve": {"id": "CVE-2022-46180", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-04T17:15:08.847", "lastModified": "2023-01-10T19:43:11.093", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse Mermaid (discourse-mermaid-theme-component) allows users of Discourse, open-source forum software, to create graphs using the Mermaid syntax. Users of discourse-mermaid-theme-component version 1.0.0 who can create posts are able to inject arbitrary HTML on that post. The issue has been fixed on the `main` branch of the GitHub repository, with 1.1.0 named as a patched version. Admins can update the theme component through the admin UI. As a workaround, admins can temporarily disable discourse-mermaid-theme-component."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:mermaid:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.1.0", "matchCriteriaId": "A55534C3-7CBF-403E-BEE4-8B9A1A5E8639"}]}]}], "references": [{"url": "https://github.com/discourse/discourse-mermaid-theme-component/commit/c10bc4a08bf865cee20e5d5dffba535762813f0f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse-mermaid-theme-component/pull/14", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse-mermaid-theme-component/security/advisories/GHSA-8437-hgcm-p3q3", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse-mermaid-theme-component/commit/c10bc4a08bf865cee20e5d5dffba535762813f0f"}}