{"buggy_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2018 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Sabre\\VObject;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Exception\\PasswordTooWeakException;\n\nclass User extends CommonDBTM {\n\n   // From CommonDBTM\n   public $dohistory         = true;\n   public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n                                     'publicbookmarkorder', 'privatebookmarkorder'];\n\n   // NAME FIRSTNAME ORDER TYPE\n   const REALNAME_BEFORE   = 0;\n   const FIRSTNAME_BEFORE  = 1;\n\n   const IMPORTEXTAUTHUSERS  = 1024;\n   const READAUTHENT         = 2048;\n   const UPDATEAUTHENT       = 4096;\n\n   static $rightname = 'user';\n\n   private $entities = null;\n\n\n   static function getTypeName($nb = 0) {\n      return _n('User', 'Users', $nb);\n   }\n\n   static function getMenuShorcut() {\n      return 'u';\n   }\n\n   static function getAdditionalMenuOptions() {\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n         return [\n            'ldap' => [\n               'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n               'page'  => '/front/ldap.php',\n            ],\n         ];\n      }\n      return false;\n   }\n\n\n   function canViewItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canCreateItem() {\n\n      // Will be created from form, with selected entity/profile\n      if (isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n          && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n          && isset($this->input['_entities_id'])\n          && Session::haveAccessToEntity($this->input['_entities_id'])) {\n         return true;\n      }\n      // Will be created with default value\n      if (Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n          || (Profile::getDefault() > 0)) {\n         return true;\n      }\n\n      if (($_SESSION['glpiactive_entity'] > 0)\n          && (Profile::getDefault() == 0)) {\n         echo \"<div class='tab_cadre_fixe warning'>\".\n                __('You must define a default profile to create a new user').\"</div>\";\n      }\n\n      return false;\n   }\n\n\n   function canUpdateItem() {\n\n      $entities = Profile_User::getUserEntities($this->fields['id'], false);\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($entities)) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canDeleteItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToAllOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canPurgeItem() {\n      return $this->canDeleteItem();\n   }\n\n\n   function isEntityAssign() {\n      // glpi_users.entities_id is only a pref.\n      return false;\n   }\n\n\n   /**\n    * Compute preferences for the current user mixing config and user data.\n    *\n    * @return void\n    */\n   function computePreferences() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id'])) {\n         foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (is_null($this->fields[$f]) || !Session::haveRight('personalization', UPDATE)) {\n               $this->fields[$f] = $CFG_GLPI[$f];\n            }\n         }\n      }\n      /// Specific case for show_count_on_tabs : global config can forbid\n      if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n         $this->fields['show_count_on_tabs'] = 0;\n      }\n   }\n\n\n   /**\n    * Load minimal session for user.\n    *\n    * @param integer $entities_id  Entity to use\n    * @param boolean $is_recursive Whether to load entities recursivly or not\n    *\n    * @return void\n    *\n    * @since 0.83.7\n    */\n   function loadMinimalSession($entities_id, $is_recursive) {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n         Session::destroy();\n         Session::start();\n         $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n         $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n         $_SESSION[\"glpiactive_entity\"]           = $entities_id;\n         $_SESSION[\"glpiactive_entity_recursive\"] = $is_recursive;\n         if ($is_recursive) {\n            $entities = getSonsOf(\"glpi_entities\", $entities_id);\n         } else {\n            $entities = [$entities_id];\n         }\n         $_SESSION['glpiactiveentities']        = $entities;\n         $_SESSION['glpiactiveentities_string'] = \"'\".implode(\"', '\", $entities).\"'\";\n         $this->computePreferences();\n         foreach ($CFG_GLPI['user_pref_field'] as $field) {\n            if (isset($this->fields[$field])) {\n               $_SESSION[\"glpi$field\"] = $this->fields[$field];\n            }\n         }\n         Session::loadGroups();\n         Session::loadLanguage();\n      }\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $ong    = [];\n            $ong[1] = __('Used items');\n            $ong[2] = __('Managed items');\n            return $ong;\n\n         case 'Preference' :\n            return __('Main');\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $item->showItems($tabnum==2);\n            return true;\n\n         case 'Preference' :\n            $user = new self();\n            $user->showMyForm($CFG_GLPI['root_doc'].\"/front/preference.php\",\n                              Session::getLoginUserID());\n            return true;\n      }\n      return false;\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addStandardTab('Profile_User', $ong, $options);\n      $this->addStandardTab('Group_User', $ong, $options);\n      $this->addStandardTab('Config', $ong, $options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('Ticket', $ong, $options);\n      $this->addStandardTab('Item_Problem', $ong, $options);\n      $this->addStandardTab('Change_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      $this->addStandardTab('Reservation', $ong, $options);\n      $this->addStandardTab('Auth', $ong, $options);\n      $this->addStandardTab('Link', $ong, $options);\n      $this->addStandardTab('Certificate_Item', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function post_getEmpty() {\n      global $CFG_GLPI;\n\n      $this->fields[\"is_active\"] = 1;\n      if (isset($CFG_GLPI[\"language\"])) {\n         $this->fields['language'] = $CFG_GLPI[\"language\"];\n      } else {\n         $this->fields['language'] = \"en_GB\";\n      }\n   }\n\n   static public function unsetUndisclosedFields(&$fields) {\n      unset($fields['password']);\n   }\n\n   function pre_deleteItem() {\n      global $DB;\n\n      $entities = $this->getEntities();\n      $view_all = Session::canViewAllEntities();\n      // Have right on all entities ?\n      $all      = true;\n      if (!$view_all) {\n         foreach ($entities as $ent) {\n            if (!Session::haveAccessToEntity($ent)) {\n               $all = false;\n            }\n         }\n      }\n      if ($all) { // Mark as deleted\n         return true;\n      }\n      // only delete profile\n      foreach ($entities as $ent) {\n         if (Session::haveAccessToEntity($ent)) {\n            $all   = false;\n            $DB->delete(\n               'glpi_profiles_users', [\n                  'users_id'     => $this->fields['id'],\n                  'entities_id'  => $ent\n               ]\n            );\n         }\n         return false;\n      }\n   }\n\n\n   function cleanDBonPurge() {\n\n      global $DB;\n\n      // ObjectLock does not extends CommonDBConnexity\n      $ol = new ObjectLock();\n      $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Reminder does not extends CommonDBConnexity\n      $r = new Reminder();\n      $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Delete private bookmark\n      $ss = new SavedSearch();\n      $ss->deleteByCriteria(\n         [\n            'users_id'   => $this->fields['id'],\n            'is_private' => 1,\n         ]\n      );\n\n      // Set no user to public bookmark\n      $DB->update(\n         SavedSearch::getTable(), [\n            'users_id' => 0\n         ], [\n            'users_id' => $this->fields['id']\n         ]\n      );\n\n      // Set no user to consumables\n      $DB->update(\n         'glpi_consumables', [\n            'items_id' => 0,\n            'itemtype' => 'NULL',\n            'date_out' => 'NULL'\n         ], [\n            'items_id' => $this->fields['id'],\n            'itemtype' => 'User'\n         ]\n      );\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Certificate_Item::class,\n            Change_User::class,\n            Group_User::class,\n            KnowbaseItem_User::class,\n            Problem_User::class,\n            Profile_User::class,\n            ProjectTaskTeam::class,\n            ProjectTeam::class,\n            Reminder_User::class,\n            RSSFeed_User::class,\n            SavedSearch_User::class,\n            Ticket_User::class,\n            UserEmail::class,\n         ]\n      );\n\n      if ($this->fields['id'] > 0) { // Security\n         // DisplayPreference does not extends CommonDBConnexity\n         $dp = new DisplayPreference();\n         $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n      }\n\n      $this->dropPictureFiles($this->fields['picture']);\n\n      // Ticket rules use various _users_id_*\n      Rule::cleanForItemAction($this, '_users_id%');\n      Rule::cleanForItemCriteria($this, '_users_id%');\n   }\n\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string $name Login of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyName($name) {\n      return $this->getFromDBByCrit(['name' => $name]);\n   }\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string  $name     Login of the user\n    * @param integer $authtype Auth type (see Auth constants)\n    * @param integer $auths_id ID of auth server\n    *\n    * @return boolean\n    */\n   function getFromDBbyNameAndAuth($name, $authtype, $auths_id) {\n      return $this->getFromDBByCrit([\n         'name'     => $name,\n         'authtype' => $authtype,\n         'auths_id' => $auths_id\n         ]);\n   }\n\n   /**\n    * Retrieve a user from the database using value of the sync field.\n    *\n    * @param string $value Value of the sync field\n    *\n    * @return boolean\n    */\n   function getFromDBbySyncField($value) {\n      return $this->getFromDBByCrit(['sync_field' => $value]);\n   }\n\n   /**\n    * Retrieve a user from the database using it's dn.\n    *\n    * @since 0.84\n    *\n    * @param string $user_dn dn of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyDn($user_dn) {\n      return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its email.\n    *\n    * @since 9.3 Can pass condition as a parameter\n    *\n    * @param string $email     user email\n    * @param array  $condition add condition\n    *\n    * @return boolean\n    */\n   function getFromDBbyEmail($email, $condition = []) {\n      global $DB;\n\n      $crit = [\n         'SELECT'    => $this->getTable() . '.id',\n         'FROM'      => $this->getTable(),\n         'LEFT JOIN'  => [\n            'glpi_useremails' => [\n               'FKEY' => [\n                  $this->getTable() => 'id',\n                  'glpi_useremails' => 'users_id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_useremails.email' => $email] + $condition\n      ];\n\n      $iter = $DB->request($crit);\n      if ($iter->numrows()==1) {\n         $row = $iter->next();\n         return $this->getFromDB($row['id']);\n      }\n      return false;\n   }\n\n\n   /**\n    * Get the default email of the user.\n    *\n    * @return string\n    */\n   function getDefaultEmail() {\n\n      if (!isset($this->fields['id'])) {\n         return '';\n      }\n\n      return UserEmail::getDefaultForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Get all emails of the user.\n    *\n    * @return string[]\n    */\n   function getAllEmails() {\n\n      if (!isset($this->fields['id'])) {\n         return [];\n      }\n      return UserEmail::getAllForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Check if the email is attached to the current user.\n    *\n    * @param string $email\n    *\n    * @return boolean\n    */\n   function isEmail($email) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return UserEmail::isEmailForUser($this->fields['id'], $email);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its personal token.\n    *\n    * @param string $token user token\n    * @param string $field the field storing the token\n    *\n    * @return boolean\n    */\n   function getFromDBbyToken($token, $field = 'personal_token') {\n      $fields = ['personal_token', 'api_token'];\n      if (!in_array($field, $fields)) {\n         Toolbox::logWarning('User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'');\n         return false;\n      }\n\n      return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $DB;\n\n      if (isset($input['_stop_import'])) {\n         return false;\n      }\n\n      if (!Auth::isValidLogin($input['name'])) {\n         Session::addMessageAfterRedirect(__('The login is not valid. Unable to add the user.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (!isset($input[\"authtype\"])) {\n         $input[\"authtype\"] = Auth::DB_GLPI;\n      }\n\n      if (!isset($input[\"auths_id\"])) {\n         $input[\"auths_id\"] = 0;\n      }\n\n      // Check if user does not exists\n      $iterator = $DB->request([\n         'FROM'   => $this->getTable(),\n         'WHERE'  => [\n            'name'      => $input['name'],\n            'authtype'  => $input['authtype'],\n            'auths_id'  => $input['auths_id']\n         ],\n         'LIMIT'  => 1\n      ]);\n\n      if (count($iterator)) {\n         Session::addMessageAfterRedirect(__('Unable to add. The user already exists.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (isset($input[\"password2\"])) {\n         if (empty($input[\"password\"])) {\n            unset ($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               if (Config::validatePassword($input[\"password\"])) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n      }\n\n      if (isset($input[\"_extauth\"])) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Force DB default values : not really needed\n      if (!isset($input[\"is_active\"])) {\n         $input[\"is_active\"] = 1;\n      }\n\n      if (!isset($input[\"is_deleted\"])) {\n         $input[\"is_deleted\"] = 0;\n      }\n\n      if (!isset($input[\"entities_id\"])) {\n         $input[\"entities_id\"] = 0;\n      }\n\n      if (!isset($input[\"profiles_id\"])) {\n         $input[\"profiles_id\"] = 0;\n      }\n\n      return $input;\n   }\n\n\n   function post_addItem() {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n\n      $rulesplayed = $this->applyRightRules();\n      $picture     = $this->syncLdapPhoto();\n\n      //add picture in user fields\n      if (!empty($picture)) {\n         $this->update(['id'      => $this->fields['id'],\n                             'picture' => $picture]);\n      }\n\n      // Add default profile\n      if (!$rulesplayed) {\n         $affectation = [];\n         if (isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n            $profile                   = $this->input['_profiles_id'];\n            // Choosen in form, so not dynamic\n            $affectation['is_dynamic'] = 0;\n         } else {\n            $profile                   = Profile::getDefault();\n            // Default right as dynamic. If dynamic rights are set it will disappear.\n            $affectation['is_dynamic'] = 1;\n         }\n\n         if ($profile) {\n            if (isset($this->input[\"_entities_id\"])) {\n               // entities_id (user's pref) always set in prepareInputForAdd\n               // use _entities_id for default right\n               $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n\n            } else if (isset($_SESSION['glpiactive_entity'])) {\n               $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n\n            } else {\n               $affectation[\"entities_id\"] = 0;\n            }\n            if (isset($this->input[\"_is_recursive\"])) {\n               $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n            } else {\n               $affectation[\"is_recursive\"] = 0;\n            }\n\n            $affectation[\"profiles_id\"]  = $profile;\n            $affectation[\"users_id\"]     = $this->fields[\"id\"];\n            $right                       = new Profile_User();\n            $right->add($affectation);\n         }\n      }\n   }\n\n\n   function prepareInputForUpdate($input) {\n      global $CFG_GLPI;\n\n      //picture manually uploaded by user\n      if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n         self::dropPictureFiles($this->fields['picture']);\n         $input['picture'] = 'NULL';\n      } else {\n         $newPicture = false;\n         if (!isAPI()) {\n            if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n               $input[\"_picture\"] = $input[\"_picture\"][0];\n            }\n         }\n         if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n            $newPicture = true;\n         }\n         if ($newPicture) {\n            $fullpath = GLPI_TMP_DIR.\"/\".$input[\"_picture\"];\n            if (toolbox::getMime($fullpath, 'image')) {\n               // Unlink old picture (clean on changing format)\n               self::dropPictureFiles($this->fields['picture']);\n               // Move uploaded file\n               $filename     = uniqid($this->fields['id'].'_');\n               $sub          = substr($filename, -2); /* 2 hex digit */\n               $tmp          = explode(\".\", $input[\"_picture\"]);\n               $extension    = Toolbox::strtolower(array_pop($tmp));\n               @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n               $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n               self::dropPictureFiles($filename.\".\".$extension);\n\n               if (Document::isImage($input[\"_picture\"])\n                   && Document::renameForce($fullpath, $picture_path)) {\n                  Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                  // For display\n                  $input['picture'] = \"$sub/${filename}.$extension\";\n\n                  //prepare a thumbnail\n                  $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                  Toolbox::resizePicture($picture_path, $thumb_path);\n               } else {\n                  Session::addMessageAfterRedirect(__('Potential upload attack or file too large. Moving temporary file failed.'),\n                        false, ERROR);\n               }\n            } else {\n               Session::addMessageAfterRedirect(__('The file is not an image file.'),\n                     false, ERROR);\n            }\n         } else {\n            //ldap jpegphoto synchronisation.\n            $picture = $this->syncLdapPhoto();\n            if (!empty($picture)) {\n               $input['picture'] = $picture;\n            }\n         }\n      }\n\n      if (isset($input[\"password2\"])) {\n         // Empty : do not update\n         if (empty($input[\"password\"])) {\n            unset($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               // Check right : my password of user with lesser rights\n               if (isset($input['id']) && Config::validatePassword($input[\"password\"])\n                   && (($input['id'] == Session::getLoginUserID())\n                       || $this->currentUserHaveMoreRightThan($input['id'])\n                       || (($input['password_forget_token'] == $this->fields['password_forget_token']) // Permit to change password with token and email\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)\n                           && $this->isEmail($input['email'])))) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n\n      } else if (isset($input[\"password\"])) { // From login\n         unset($input[\"password\"]);\n      }\n\n      // blank password when authtype changes\n      if (isset($input[\"authtype\"])\n          && $input[\"authtype\"] != Auth::DB_GLPI\n          && $input[\"authtype\"] != $this->getField('authtype')) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Update User in the database\n      if (!isset($input[\"id\"])\n          && isset($input[\"name\"])) {\n         if ($this->getFromDBbyName($input[\"name\"])) {\n            $input[\"id\"] = $this->fields[\"id\"];\n         }\n      }\n\n      if (isset($input[\"entities_id\"])\n          && (Session::getLoginUserID() === $input['id'])) {\n         $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n      }\n\n      // Security on default profile update\n      if (isset($input['profiles_id'])) {\n         if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n            unset($input['profiles_id']);\n         }\n      }\n\n      // Security on default entity  update\n      if (isset($input['entities_id'])) {\n         if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n            unset($input['entities_id']);\n         }\n      }\n\n      // Security on default group  update\n      if (isset($input['groups_id'])\n         && !Group_User::isUserInGroup($input['id'], $input['groups_id'])) {\n            unset($input['groups_id']);\n      }\n\n      if (isset($input['_reset_personal_token'])\n          && $input['_reset_personal_token']) {\n         $input['personal_token']      = self::getUniqueToken('personal_token');\n         $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      if (isset($input['_reset_api_token'])\n          && $input['_reset_api_token']) {\n         $input['api_token']      = self::getUniqueToken('api_token');\n         $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      // Manage preferences fields\n      if (Session::getLoginUserID() === $input['id']) {\n         if (isset($input['use_mode'])\n             && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])) {\n            $_SESSION['glpi_use_mode'] = $input['use_mode'];\n            //Session::loadLanguage();\n         }\n      }\n\n      foreach ($CFG_GLPI['user_pref_field'] as $f) {\n         if (isset($input[$f])) {\n            if (Session::getLoginUserID() === $input['id']) {\n               if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                  $_SESSION[\"glpi$f\"] = $input[$f];\n                  // reinit translations\n                  if ($f == 'language') {\n                     $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                     unset($_SESSION['glpimenu']);\n                  }\n               }\n            }\n            if ($input[$f] == $CFG_GLPI[$f]) {\n               $input[$f] = \"NULL\";\n            }\n         }\n      }\n\n      if (isset($input['language']) && GLPI_DEMO_MODE) {\n         unset($input['language']);\n      }\n      return $input;\n   }\n\n\n   function post_updateItem($history = 1) {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n      $this->applyRightRules();\n   }\n\n\n\n   /**\n    * Apply rules to determine dynamic rights of the user.\n    *\n    * @return boolean true if rules are applied, false otherwise\n    */\n   function applyRightRules() {\n\n      $return = false;\n\n      if ((isset($this->fields['_ruleright_process'])\n           || isset($this->input['_ruleright_process'])) // Add after a getFromLDAP\n          && isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || ($this->fields[\"authtype\"] == Auth::MAIL)\n              || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n         $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n         if (isset($this->fields[\"id\"])\n             && ($this->fields[\"id\"] > 0)\n             && isset($this->input[\"_ldap_rules\"])\n             && count($this->input[\"_ldap_rules\"])) {\n\n            //and add/update/delete only if it's necessary !\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n               $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n            } else {\n               $entities_rules = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n               $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n            } else {\n               $entities = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n               $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n            } else {\n               $rights = [];\n            }\n\n            $retrieved_dynamic_profiles = [];\n\n            //For each affectation -> write it in DB\n            foreach ($entities_rules as $entity) {\n               //Multiple entities assignation\n               if (is_array($entity[0])) {\n                  foreach ($entity[0] as $ent) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $ent,\n                        'profiles_id'  => $entity[1],\n                        'is_recursive' => $entity[2],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               } else {\n                  $retrieved_dynamic_profiles[] = [\n                     'entities_id'  => $entity[0],\n                     'profiles_id'  => $entity[1],\n                     'is_recursive' => $entity[2],\n                     'users_id'     => $this->fields['id'],\n                     'is_dynamic'   => 1,\n                  ];\n               }\n            }\n\n            if ((count($entities) > 0)\n                && (count($rights) == 0)) {\n               if ($def_prof = Profile::getDefault()) {\n                  $rights[] = $def_prof;\n               }\n            }\n\n            if ((count($rights) > 0)\n                && (count($entities) > 0)) {\n               foreach ($rights as $right) {\n                  foreach ($entities as $entity) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $entity[0],\n                        'profiles_id'  => $right,\n                        'is_recursive' => $entity[1],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               }\n            }\n\n            // Compare retrived profiles to existing ones : clean arrays to do purge and add\n            if (count($retrieved_dynamic_profiles)) {\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $found = false;\n\n                  foreach ($dynamic_profiles as $keydb => $db_profile) {\n                     // Found existing profile : unset values in array\n                     if (!$found\n                         && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                         && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                         && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])) {\n\n                        unset($retrieved_dynamic_profiles[$keyretr]);\n                        unset($dynamic_profiles[$keydb]);\n                     }\n                  }\n               }\n            }\n\n            // Add new dynamic profiles\n            if (count($retrieved_dynamic_profiles)) {\n               $right = new Profile_User();\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $right->add($retr_profile);\n               }\n            }\n\n            //Unset all the temporary tables\n            unset($this->input[\"_ldap_rules\"]);\n\n            $return = true;\n         }\n\n         // Delete old dynamic profiles\n         if (count($dynamic_profiles)) {\n            $right = new Profile_User();\n            foreach ($dynamic_profiles as $keydb => $db_profile) {\n               $right->delete($db_profile);\n            }\n         }\n\n      }\n      return $return;\n   }\n\n\n   /**\n    * Synchronise LDAP group of the user.\n    *\n    * @return void\n    */\n   function syncLdapGroups() {\n      global $DB;\n\n      // input[\"_groups\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_groups\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)) {\n               // Clean groups\n               $this->input[\"_groups\"] = array_unique ($this->input[\"_groups\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT'    => [\n                     'glpi_groups_users.id',\n                     'glpi_groups_users.groups_id',\n                     'glpi_groups_users.is_dynamic'\n                  ],\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_groups'  => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'groups_id',\n                           'glpi_groups'        => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.users_id' => $this->fields['id']\n                  ]\n               ]);\n\n               $groupuser = new Group_User();\n               while ($data =  $iterator->next()) {\n\n                  if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_groups\"][array_search($data[\"groups_id\"],\n                           $this->input[\"_groups\"])]);\n\n                  } else if ($data['is_dynamic']) {\n                     $groupuser->delete(['id' => $data[\"id\"]]);\n                  }\n               }\n\n               //If the user needs to be added to one group or more\n               if (count($this->input[\"_groups\"]) > 0) {\n                  foreach ($this->input[\"_groups\"] as $group) {\n                     $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                           'groups_id'  => $group,\n                                           'is_dynamic' => 1]);\n                  }\n                  unset ($this->input[\"_groups\"]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Synchronize picture (photo) of the user.\n    *\n    * @since 0.85\n    *\n    * @return string|boolean Filename to be stored in user picture field, false if no picture found\n    */\n   function syncLdapPhoto() {\n\n      if (isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            //connect ldap server\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n               $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n               //get picture fields\n               $picture_field = $config_ldap->fields['picture_field'];\n               if (empty($picture_field)) {\n                  return false;\n               }\n\n               //get picture content in ldap\n               $info = AuthLdap::getUserByDn($ds, $this->fields['user_dn'],\n                                             [$picture_field], false);\n\n               //getUserByDn returns an array. If the picture is empty,\n               //$info[$picture_field][0] is null\n               if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                  return \"\";\n               }\n               //prepare paths\n               $img       = array_pop($info[$picture_field]);\n               $filename  = uniqid($this->fields['id'].'_');\n               $sub       = substr($filename, -2); /* 2 hex digit */\n               $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n               if (array_key_exists('picture', $this->fields)) {\n                  $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n               } else {\n                  $oldfile = null;\n               }\n\n               // update picture if not exist or changed\n               if (empty($this->fields[\"picture\"])\n                   || !file_exists($oldfile)\n                   || sha1_file($oldfile) !== sha1($img)) {\n                  if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                     mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                  }\n\n                  //save picture\n                  $outjpeg = fopen($file, 'wb');\n                  fwrite($outjpeg, $img);\n                  fclose ($outjpeg);\n\n                  //save thumbnail\n                  $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                  Toolbox::resizePicture($file, $thumb);\n\n                  return \"$sub/${filename}.jpg\";\n               }\n               return $this->fields[\"picture\"];\n            }\n         }\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Update emails of the user.\n    * Uses _useremails set from UI, not _emails set from LDAP.\n    *\n    * @return void\n    */\n   function updateUserEmails() {\n      // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n      $userUpdated = false;\n\n      if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n         $useremail = new UserEmail();\n         foreach ($this->input['_useremails'] as $id => $email) {\n            $email = trim($email);\n\n            // existing email\n            if ($id > 0) {\n               $params = ['id' => $id];\n\n               // empty email : delete\n               if (strlen($email) == 0) {\n                  $deleted = $useremail->delete($params);\n                  $userUpdated = $userUpdated || $deleted;\n\n               } else { // Update email\n                  $params['email'] = $email;\n                  $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                  $existingUserEmail = new UserEmail();\n                  $existingUserEmail->getFromDB($id);\n                  if ($params['email'] == $existingUserEmail->fields['email']\n                      && $params['is_default'] == $existingUserEmail->fields['is_default']) {\n                     // Do not update if email has not changed\n                     continue;\n                  }\n\n                  $updated = $useremail->update($params);\n                  $userUpdated = $userUpdated || $updated;\n               }\n\n            } else { // New email\n               $email_input = ['email'    => $email,\n                               'users_id' => $this->fields['id']];\n               if (isset($this->input['_default_email'])\n                   && ($this->input['_default_email'] == $id)) {\n                  $email_input['is_default'] = 1;\n               } else {\n                  $email_input['is_default'] = 0;\n               }\n               $added = $useremail->add($email_input);\n               $userUpdated = $userUpdated || $added;\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n\n   /**\n    * Synchronise Dynamics emails of the user.\n    * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n    *\n    * @return void\n    */\n   function syncDynamicEmails() {\n      global $DB;\n\n      $userUpdated = false;\n\n      // input[\"_emails\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_emails\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)\n                || $this->fields[\"authtype\"] == Auth::EXTERNAL) {\n               // Clean emails\n               $this->input[\"_emails\"] = array_unique ($this->input[\"_emails\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT' => [\n                     'id',\n                     'users_id',\n                     'email',\n                     'is_dynamic'\n                  ],\n                  'FROM'   => 'glpi_useremails',\n                  'WHERE'  => ['users_id' => $this->fields['id']]\n               ]);\n\n               $useremail = new UserEmail();\n               while ($data = $iterator->next()) {\n                  $i = array_search($data[\"email\"], $this->input[\"_emails\"]);\n                  if ($i !== false) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_emails\"][$i]);\n                  } else if ($data['is_dynamic']) {\n                     // Delete not found email\n                     $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                     $userUpdated = $userUpdated || $deleted;\n                  }\n               }\n\n               //If the email need to be added\n               if (count($this->input[\"_emails\"]) > 0) {\n                  foreach ($this->input[\"_emails\"] as $email) {\n                     $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                               'email'      => $email,\n                                               'is_dynamic' => 1]);\n                     $userUpdated = $userUpdated || $added;\n                  }\n                  unset ($this->input[\"_emails\"]);\n               }\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n   function getRawName() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n         //getRawName should not add ID\n         $bkp_conf = $CFG_GLPI['is_ids_visible'];\n         $CFG_GLPI['is_ids_visible'] = 0;\n         $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n         $_SESSION[\"glpiis_ids_visible\"] = 0;\n         $name = formatUserName($this->fields[\"id\"],\n                               $this->fields[\"name\"],\n                               (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                               (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : ''));\n\n         $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n         $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n         return $name;\n      }\n      return '';\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the User.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User login\n    *\n    * @return string|boolean Basedn of the user / false if not found\n    */\n   private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // Search in DB the ldap_field we need to search for in LDAP\n      $iterator = $DB->request([\n         'SELECT DISTINCT' => 'ldap_field',\n         'FROM'            => 'glpi_groups',\n         'WHERE'           => ['NOT' => ['ldap_field' => '']],\n         'ORDER'           => 'ldap_field'\n      ]);\n      $group_fields = [];\n\n      while ($data = $iterator->next()) {\n         $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n      }\n      if (count($group_fields)) {\n         //Need to sort the array because edirectory don't like it!\n         sort($group_fields);\n\n         // If the groups must be retrieve from the ldap user object\n         $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n         $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         for ($i=0; $i < $v['count']; $i++) {\n            //Try to find is DN in present and needed: if yes, then extract only the OU from it\n            if ((($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                && isset($v[$i]['dn'])) {\n\n               $v[$i]['ou'] = [];\n               for ($tmp=$v[$i]['dn']; count($tmptab = explode(',', $tmp, 2))==2; $tmp=$tmptab[1]) {\n                  $v[$i]['ou'][] = $tmptab[1];\n               }\n\n               // Search in DB for group with ldap_group_dn\n               if (($ldap_method[\"group_field\"] == 'dn')\n                   && (count($v[$i]['ou']) > 0)) {\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n\n               // searching with ldap_field='OU' and ldap_value is also possible\n               $v[$i]['ou']['count'] = count($v[$i]['ou']);\n            }\n\n            // For each attribute retrieve from LDAP, search in the DB\n            foreach ($group_fields as $field) {\n               if (isset($v[$i][$field])\n                   && isset($v[$i][$field]['count'])\n                   && ($v[$i][$field]['count'] > 0)) {\n\n                  unset($v[$i][$field]['count']);\n                  $lgroups = [];\n                  foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                     $lgroups[] = [\n                        new \\QueryExpression($DB::quoteValue($lgroup).\n                                             \" LIKE \".\n                                             $DB::quoteName('ldap_value'))\n                     ];\n                  }\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => [\n                        'ldap_field' => $field,\n                        'OR'         => $lgroups\n                     ]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n            }\n         } // for each ldapresult\n      } // count($group_fields)\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the Groups.\n    *\n    * @param resource $ldap_connection    LDAP connection\n    * @param array    $ldap_method        LDAP method\n    * @param string   $userdn             Basedn of the user\n    * @param string   $login              User login\n    *\n    * @return boolean true if search is applicable, false otherwise\n    */\n   private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // No group_member_field : unable to get group\n      if (empty($ldap_method[\"group_member_field\"])) {\n         return false;\n      }\n\n      if ($ldap_method[\"use_dn\"]) {\n         $user_tmp = $userdn;\n      } else {\n         //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n         $user_tmp = $login;\n      }\n\n      $v = $this->ldap_get_user_groups($ldap_connection, $ldap_method[\"basedn\"],\n                                       $user_tmp,\n                                       $ldap_method[\"group_condition\"],\n                                       $ldap_method[\"group_member_field\"],\n                                       $ldap_method[\"use_dn\"],\n                                       $ldap_method[\"login_field\"]);\n      foreach ($v as $result) {\n         if (isset($result[$ldap_method[\"group_member_field\"]])\n             && is_array($result[$ldap_method[\"group_member_field\"]])\n             && (count($result[$ldap_method[\"group_member_field\"]]) > 0)) {\n\n             $iterator = $DB->request([\n               'SELECT' => 'id',\n               'FROM'   => 'glpi_groups',\n               'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n             ]);\n\n            while ($group = $iterator->next()) {\n               $this->fields[\"_groups\"][] = $group['id'];\n            }\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from LDAP.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User Login\n    * @param boolean  $import          true for import, false for update\n    *\n    * @return boolean true if found / false if not\n    */\n   function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true) {\n      global $DB, $CFG_GLPI;\n\n      // we prevent some delay...\n      if (empty($ldap_method[\"host\"])) {\n         return false;\n      }\n\n      if (is_resource($ldap_connection)) {\n         //Set all the search fields\n         $this->fields['password'] = \"\";\n\n         $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n         //Hook to allow plugin to request more attributes from ldap\n         $fields = Plugin::doHookFunction(\"retrieve_more_field_from_ldap\", $fields);\n\n         $fields  = array_filter($fields);\n         $f       = self::getLdapFieldNames($fields);\n\n         $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n         $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         if (!is_array($v)\n             || ( count($v) == 0)\n             || empty($v[0][$fields['name']][0])) {\n            return false;\n         }\n\n         //Store user's dn\n         $this->fields['user_dn']    = addslashes($userdn);\n         //Store date_sync\n         $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n         // Empty array to ensure than syncDynamicEmails will be done\n         $this->fields[\"_emails\"]    = [];\n         // force authtype as we retrieve this user by ldap (we could have login with SSO)\n         $this->fields[\"authtype\"] = Auth::LDAP;\n\n         foreach ($fields as $k => $e) {\n            $val = AuthLDAP::getFieldValue(\n               [$e => self::getLdapFieldValue($e, $v)],\n               $e\n            );\n            if (empty($val)) {\n               switch ($k) {\n                  case \"language\" :\n                     // Not set value : managed but user class\n                     break;\n\n                  case \"usertitles_id\" :\n                  case \"usercategories_id\" :\n                  case 'locations_id' :\n                  case 'users_id_supervisor' :\n                     $this->fields[$k] = 0;\n                     break;\n\n                  default :\n                     $this->fields[$k] = \"\";\n               }\n\n            } else {\n               $val = Toolbox::addslashes_deep($val);\n               switch ($k) {\n                  case \"email1\" :\n                  case \"email2\" :\n                  case \"email3\" :\n                  case \"email4\" :\n                     // Manage multivaluable fields\n                     if (!empty($v[0][$e])) {\n                        foreach ($v[0][$e] as $km => $m) {\n                           if (!preg_match('/count/', $km)) {\n                              $this->fields[\"_emails\"][] = addslashes($m);\n                           }\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                     }\n                     break;\n\n                  case \"language\" :\n                     $language = Config::getLanguage($val);\n                     if ($language != '') {\n                        $this->fields[$k] = $language;\n                     }\n                     break;\n\n                  case \"usertitles_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                     break;\n\n                  case 'locations_id' :\n                     // use import to build the location tree\n                     $this->fields[$k] = Dropdown::import('Location',\n                                                          ['completename' => $val,\n                                                           'entities_id'  => 0,\n                                                           'is_recursive' => 1]);\n                    break;\n\n                  case \"usercategories_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                     break;\n\n                  case 'users_id_supervisor':\n                     $this->fields[$k] = self::getIdByField('user_dn', $val);\n                     break;\n\n                  default :\n                     $this->fields[$k] = $val;\n               }\n            }\n         }\n\n         // Empty array to ensure than syncLdapGroups will be done\n         $this->fields[\"_groups\"] = [];\n\n         ///The groups are retrieved by looking into an ldap user object\n         if (($ldap_method[\"group_search_type\"] == 0)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///The groups are retrived by looking into an ldap group object\n         if (($ldap_method[\"group_search_type\"] == 1)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///Only process rules if working on the master database\n         if (!$DB->isSlave()) {\n            //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            //Process affectation rules :\n            //we don't care about the function's return because all\n            //the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n               $groups = $this->fields[\"_groups\"];\n            } else {\n               $groups = [];\n            }\n\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields),\n                                                   ['type'        => 'LDAP',\n                                                         'ldap_server' => $ldap_method[\"id\"],\n                                                         'connection'  => $ldap_connection,\n                                                         'userdn'      => $userdn,\n                                                         'login'       => $this->fields['name'],\n                                                         'mail_email'  => $this->fields['_emails']]);\n\n            $this->fields['_ruleright_process'] = true;\n\n            //If rule  action is ignore import\n            if ($import\n                && isset($this->fields[\"_stop_import\"])) {\n               return false;\n            }\n            //or no rights found & do not import users with no rights\n            if ($import\n                && !$CFG_GLPI[\"use_noright_users_add\"]) {\n               $ok = false;\n               if (isset($this->fields[\"_ldap_rules\"])\n                   && count($this->fields[\"_ldap_rules\"])) {\n                  if (isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                      && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                     $ok = true;\n                  }\n                  if (!$ok) {\n                     $entity_count = 0;\n                     $right_count  = 0;\n                     if (Profile::getDefault()) {\n                        $right_count++;\n                     }\n                     if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                        $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                     }\n                     if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                        $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                     }\n                     if ($entity_count && $right_count) {\n                        $ok = true;\n                     }\n                  }\n               }\n               if (!$ok) {\n                  $this->fields[\"_stop_import\"] = true;\n                  return false;\n               }\n            }\n\n            // Add ldap result to data send to the hook\n            $this->fields['_ldap_result'] = $v;\n            $this->fields['_ldap_conn']   = $ldap_connection;\n            //Hook to retrieve more information for ldap\n            $this->fields = Plugin::doHookFunction(\"retrieve_more_data_from_ldap\", $this->fields);\n            unset($this->fields['_ldap_result']);\n         }\n         return true;\n      }\n      return false;\n\n   } // getFromLDAP()\n\n\n   /**\n    * Get all groups a user belongs to.\n    *\n    * @param resource $ds                 ldap connection\n    * @param string   $ldap_base_dn       Basedn used\n    * @param string   $user_dn            Basedn of the user\n    * @param string   $group_condition    group search condition\n    * @param string   $group_member_field group field member in a user object\n    * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n    * @param string   $login_field        user login field\n    *\n    * @return array Groups of the user located in [0][$group_member_field] in returned array\n    */\n   function ldap_get_user_groups($ds, $ldap_base_dn, $user_dn, $group_condition,\n                                 $group_member_field, $use_dn, $login_field) {\n\n      $groups     = [];\n      $listgroups = [];\n\n      //User dn may contain ( or ), need to espace it!\n      $user_dn = str_replace([\"(\", \")\", \"\\,\", \"\\+\"], [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n                             $user_dn);\n\n      //Only retrive cn and member attributes from groups\n      $attrs = ['dn'];\n\n      if (!$use_dn) {\n         $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n      } else {\n         $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n      }\n\n      //Perform the search\n      $filter = Toolbox::unclean_cross_side_scripting_deep($filter);\n      $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n      //Get the result of the search as an array\n      $info = AuthLDAP::get_entries_clean($ds, $sr);\n      //Browse all the groups\n      for ($i = 0; $i < count($info); $i++) {\n         //Get the cn of the group and add it to the list of groups\n         if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n            $listgroups[$i] = $info[$i][\"dn\"];\n         }\n      }\n\n      //Create an array with the list of groups of the user\n      $groups[0][$group_member_field] = $listgroups;\n      //Return the groups of the user\n      return $groups;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from IMAP.\n    *\n    * @param array  $mail_method  mail method description array\n    * @param string $name         login of the user\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromIMAP(array $mail_method, $name) {\n      global $DB;\n\n      // we prevent some delay..\n      if (empty($mail_method[\"host\"])) {\n         return false;\n      }\n\n      // some defaults...\n      $this->fields['password']  = \"\";\n      // Empty array to ensure than syncDynamicEmails will be done\n      $this->fields[\"_emails\"]   = [];\n      $email                     = '';\n      if (strpos($name, \"@\")) {\n         $email = $name;\n      } else {\n         $email = $name . \"@\" . $mail_method[\"host\"];\n      }\n      $this->fields[\"_emails\"][] = $email;\n\n      $this->fields['name']      = $name;\n      //Store date_sync\n      $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n      // force authtype as we retrieve this user by imap (we could have login with SSO)\n      $this->fields[\"authtype\"] = Auth::MAIL;\n\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         //Process affectation rules :\n         //we don't care about the function's return because all the datas are stored in session temporary\n         if (isset($this->fields[\"_groups\"])) {\n            $groups = $this->fields[\"_groups\"];\n         } else {\n            $groups = [];\n         }\n         $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields),\n                                                ['type'        => 'MAIL',\n                                                      'mail_server' => $mail_method[\"id\"],\n                                                      'login'       => $name,\n                                                      'email'       => $email]);\n         $this->fields['_ruleright_process'] = true;\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from the SSO server.\n    *\n    * @since 0.84\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromSSO() {\n      global $DB, $CFG_GLPI;\n\n      $a_field = [];\n      foreach ($CFG_GLPI as $key=>$value) {\n         if (!is_array($value) && !empty($value)\n             && strstr($key, \"_ssofield\")) {\n            $key = str_replace('_ssofield', '', $key);\n            $a_field[$key] = $value;\n         }\n      }\n\n      if (count($a_field) == 0) {\n         return true;\n      }\n      $this->fields['_ruleright_process'] = true;\n      foreach ($a_field as $field=>$value) {\n         if (!isset($_SERVER[$value])\n             || empty($_SERVER[$value])) {\n\n            switch ($field) {\n               case \"title\" :\n                  $this->fields['usertitles_id'] = 0;\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id'] = 0;\n                  break;\n\n               default :\n                  $this->fields[$field] = \"\";\n            }\n\n         } else {\n            switch ($field) {\n               case \"email1\" :\n               case \"email2\" :\n               case \"email3\" :\n               case \"email4\" :\n                  // Manage multivaluable fields\n                  if (!preg_match('/count/', $_SERVER[$value])) {\n                     $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                  }\n                  // Only get them once if duplicated\n                  $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                  break;\n\n               case \"language\" :\n                  $language = Config::getLanguage($_SERVER[$value]);\n                  if ($language != '') {\n                     $this->fields[$field] = $language;\n                  }\n                  break;\n\n               case \"title\" :\n                  $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                  break;\n\n               default :\n                  $this->fields[$field] = $_SERVER[$value];\n                  break;\n\n            }\n         }\n      }\n       ///Only process rules if working on the master database\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields),\n                                                ['type'   => 'SSO',\n                                                      'email'  => $this->fields[\"_emails\"],\n                                                      'login'  => $this->fields[\"name\"]]);\n\n         //If rule  action is ignore import\n         if (isset($this->fields[\"_stop_import\"])) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Blank passwords field of a user in the DB.\n    * Needed for external auth users.\n    *\n    * @return void\n    */\n   function blankPassword() {\n      global $DB;\n\n      if (!empty($this->fields[\"name\"])) {\n         $DB->update(\n            $this->getTable(), [\n               'password' => ''\n            ], [\n               'name' => $this->fields['name']\n            ]\n         );\n      }\n   }\n\n\n   /**\n    * Print a good title for user pages.\n    *\n    * @return void\n    */\n   function title() {\n      global $CFG_GLPI;\n\n      $buttons = [];\n      $title   = self::getTypeName(Session::getPluralNumber());\n\n      if (static::canCreate()) {\n         $buttons[\"user.form.php\"] = __('Add user...');\n         $title                    = \"\";\n\n         if (Auth::useAuthExt()\n             && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            // This requires write access because don't use entity config.\n            $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = __('... From an external source');\n         }\n      }\n      if (Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n         && (static::canCreate() || static::canUpdate())) {\n         if (AuthLdap::useAuthLdap()) {\n            $buttons[\"ldap.php\"] = __('LDAP directory link');\n         }\n      }\n      Html::displayTitle($CFG_GLPI[\"root_doc\"] . \"/pics/users.png\", self::getTypeName(Session::getPluralNumber()), $title,\n                         $buttons);\n   }\n\n\n   /**\n    * Check if current user have more right than the specified one.\n    *\n    * @param integer $ID ID of the user\n    *\n    * @return boolean\n    */\n   function currentUserHaveMoreRightThan($ID) {\n\n      $user_prof = Profile_User::getUserProfiles($ID);\n      return Profile::currentUserHaveMoreRightThan($user_prof);\n   }\n\n\n   /**\n    * Print the user form.\n    *\n    * @param integer $ID    ID of the user\n    * @param array $options Options\n    *     - string   target        Form target\n    *     - boolean  withtemplate  Template or basic item\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showForm($ID, array $options = []) {\n      global $CFG_GLPI;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID()) && !self::canView()) {\n         return false;\n      }\n\n      $this->initForm($ID, $options);\n\n      $ismyself = $ID == Session::getLoginUserID();\n      $higherrights = $this->currentUserHaveMoreRightThan($ID);\n      if ($ID) {\n         $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n      } else {\n         // can edit on creation form\n         $caneditpassword = true;\n      }\n\n      $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n      $formtitle = $this->getTypeName(1);\n\n      if ($ID > 0) {\n         $formtitle .= \"<a class='pointer far fa-address-card' target='_blank' href='\".$CFG_GLPI[\"root_doc\"].\n                       User::getFormURLWithID($ID).\"&amp;getvcard=1' title='\".__s('Download user VCard').\n                       \"'><span class='sr-only'>\". __('Vcard').\"</span></a>\";\n      }\n\n      $options['formtitle']   = $formtitle;\n      $options['formoptions'] = \" enctype='multipart/form-data'\";\n      $this->showFormHeader($options);\n      $rand = mt_rand();\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n      if ($this->fields[\"name\"] == \"\" ||\n          !empty($this->fields[\"password\"])\n          || ($this->fields[\"authtype\"] == Auth::DB_GLPI) ) {\n         //display login field for new records, or if this is not external auth\n         echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      } else {\n         echo \"<td class='b'>\" . $this->fields[\"name\"];\n         echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      }\n\n      if (!empty($this->fields[\"name\"])) {\n         echo \"<td rowspan='4'>\" . __('Picture') . \"</td>\";\n         echo \"<td rowspan='4'>\";\n         echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n         echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n         // echo \"<img src='\".self::getURLForPicture($this->fields[\"picture\"]).\"' class='user_picture'/>\";\n         echo \"</div>\";\n         $full_picture = \"<div class='user_picture_border'>\";\n         $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                            User::getURLForPicture($this->fields['picture']).\"'>\";\n         $full_picture .= \"</div>\";\n\n         Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n         echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n         echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\".__('Clear');\n         echo \"</td>\";\n      } else {\n         echo \"<td rowspan='4'></td>\";\n         echo \"<td rowspan='4'></td>\";\n      }\n      echo \"</tr>\";\n\n      //If it's an external auth, check if the sync_field must be displayed\n      if ($extauth\n         && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n         $syncrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n         if (self::canUpdate()\n             && (!$extauth || empty($ID))) {\n                Html::autocompletionTextField($this, \"sync_field\", ['rand' => $syncrand]);\n         } else {\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n         }\n         echo \"</td></tr>\";\n      } else {\n         echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n      }\n\n      $surnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n      echo \"</td></tr>\";\n\n      $firstnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n      echo \"</td></tr>\";\n\n      //do some rights verification\n      if (self::canUpdate()\n          && (!$extauth || empty($ID))\n          && $caneditpassword) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password'>\" . __('Password').\"</label></td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='off' onkeyup=\\\"return passwordCheck();\\\"></td>\";\n         echo \"<td rowspan='2'>\";\n         if ($CFG_GLPI[\"use_password_security\"]) {\n            echo __('Password security policy');\n         }\n         echo \"</td>\";\n         echo \"<td rowspan='2'>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n         echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='off'>\";\n         echo \"</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!GLPI_DEMO_MODE) {\n         $activerand = mt_rand();\n         echo \"<td><label for='dropdown_is_active$activerand'>\".__('Active').\"</label></td><td>\";\n         Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'></td>\";\n      }\n      echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n      UserEmail::showAddEmailButton($this);\n      echo \"</td><td>\";\n      UserEmail::showForUser($this);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if (!GLPI_DEMO_MODE) {\n         $sincerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='showdate$sincerand'>\".__('Valid since').\"</label></td><td>\";\n         Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                'rand'        => $sincerand,\n                                                'timestep'    => 1,\n                                                'maybeempty'  => true]);\n         echo \"</td>\";\n\n         $untilrand = mt_rand();\n         echo \"<td><label for='showdate$untilrand'>\".__('Valid until').\"</label></td><td>\";\n         Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                              'rand'        => $untilrand,\n                                              'timestep'    => 1,\n                                              'maybeempty'  => true]);\n         echo \"</td></tr>\";\n      }\n\n      $phonerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone$phonerand'>\" .  __('Phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n      echo \"</td>\";\n      //Authentications information : auth method used and server used\n      //don't display is creation of a new user'\n      if (!empty($ID)) {\n         if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n            echo \"<td>\" . __('Authentication') . \"</td><td>\";\n            echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n            if (!empty($this->fields[\"date_sync\"])) {\n               //TRANS: %s is the date of last sync\n               echo '<br>'.sprintf(__('Last synchronization on %s'),\n                                   HTML::convDateTime($this->fields[\"date_sync\"]));\n            }\n            if (!empty($this->fields[\"user_dn\"])) {\n               //TRANS: %s is the user dn\n               echo '<br>'.sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n            }\n            if ($this->fields['is_deleted_ldap']) {\n               echo '<br>'.__('User missing in LDAP directory');\n            }\n\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n      } else {\n         echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n      }\n\n      echo \"</tr>\";\n\n      $mobilerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n      echo \"</td>\";\n      $catrand = mt_rand();\n      echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . __('Category') . \"</label></td><td>\";\n      UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n      echo \"</td></tr>\";\n\n      $phone2rand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n      echo \"</td>\";\n      echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n      echo \"<td class='center middle' rowspan='4'>\";\n      echo \"<textarea cols='45' rows='6' id='comment' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      $admnumrand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n      echo \"</td></tr>\";\n\n      $titlerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n      UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!empty($ID)) {\n         $locrand = mt_rand();\n         echo \"<td><label for='dropdown_locations_id$locrand'>\" . __('Location') . \"</label></td><td>\";\n         $entities = $this->getEntities();\n         if (count($entities) <= 0) {\n            $entities = -1;\n         }\n         Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n         echo \"</td>\";\n      }\n      echo \"</tr>\";\n\n      if (empty($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<th colspan='2'>\"._n('Authorization', 'Authorizations', 1).\"</th>\";\n         $recurrand = mt_rand();\n         echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n         Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n         echo \"</td></tr>\";\n         $profilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  __('Profile') . \"</label></td><td>\";\n         Profile::dropdownUnder(['name'  => '_profiles_id',\n                                 'rand'  => $profilerand,\n                                 'value' => Profile::getDefault()]);\n\n         $entrand = mt_rand();\n         echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  __('Entity') . \"</label></td><td>\";\n         Entity::dropdown(['name'                => '_entities_id',\n                           'display_emptychoice' => false,\n                           'rand'                => $entrand,\n                           'entity'              => $_SESSION['glpiactiveentities']]);\n         echo \"</td></tr>\";\n      } else {\n         if ($higherrights || $ismyself) {\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n            $options   = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                         Profile_User::getUserProfiles($this->fields['id']));\n\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n         }\n         if ($higherrights) {\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n            echo \"</td></tr>\";\n\n            $grouprand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n            $options = [];\n            foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n               $options[$group['id']] = $group['completename'];\n            }\n\n            Dropdown::showFromArray(\"groups_id\", $options,\n                                    ['value'               => $this->fields[\"groups_id\"],\n                                     'rand'                => $grouprand,\n                                     'display_emptychoice' => true]);\n\n            echo \"</td>\";\n            $userrand = mt_rand();\n            echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n            User::dropdown(['name'   => 'users_id_supervisor',\n                            'value'  => $this->fields[\"users_id_supervisor\"],\n                            'rand'   => $userrand,\n                            'entity' => $_SESSION[\"glpiactive_entity\"],\n                            'right'  => 'all']);\n            echo \"</td></tr>\";\n         }\n\n         if ($this->can($ID, UPDATE)) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_personal_token', [\n                                    'value'    => $this->fields[\"personal_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_api_token', [\n                                    'value'    => $this->fields[\"api_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2' class='center'>\";\n         if ($this->fields[\"last_login\"]) {\n            printf(__('Last login on %s'), HTML::convDateTime($this->fields[\"last_login\"]));\n         }\n         echo \"</td><td colspan='2'class='center'>\";\n\n         echo \"</td></tr>\";\n      }\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /** Print the user personnal information for check.\n    *\n    * @param integer $userid ID of the user\n    *\n    * @return void|boolean false if user is not the current user, otherwise print form\n    *\n    * @since 0.84\n    */\n   static function showPersonalInformation($userid) {\n      global $CFG_GLPI;\n\n      $user = new self();\n      if (!$user->can($userid, READ)\n          && ($userid != Session::getLoginUserID())) {\n         return false;\n      }\n      echo \"<table class='tab_glpi left' width='100%'>\";\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b' width='20%'>\";\n      echo __('Name');\n      echo \"</td><td width='30%'>\";\n      echo getUserName($userid);\n      echo \"</td>\";\n      echo \"<td class='b'  width='20%'>\";\n      echo __('Phone');\n      echo \"</td><td width='30%'>\";\n      echo $user->getField('phone');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Phone 2');\n      echo \"</td><td>\";\n      echo $user->getField('phone2');\n      echo \"</td>\";\n      echo \"<td class='b'>\";\n      echo __('Mobile phone');\n      echo \"</td><td>\";\n      echo $user->getField('mobile');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Email');\n      echo \"</td><td>\";\n      echo $user->getDefaultEmail();\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Location');\n      echo \"</td><td>\";\n      echo Dropdown::getDropdownName('glpi_locations', $user->getField('locations_id'));\n      echo \"</td>\";\n      echo \"<td colspan='2' class='center'>\";\n      if ($userid == Session::getLoginUserID()) {\n         echo \"<a href='\".$CFG_GLPI['root_doc'].\"/front/preference.php' class='vsubmit'>\".\n               __('Edit').\"</a>\";\n      } else {\n         echo \"&nbsp;\";\n      }\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Print the user preference form.\n    *\n    * @param string  $target Form target\n    * @param integer $ID     ID of the user\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showMyForm($target, $ID) {\n      global $CFG_GLPI;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID())\n          && !$this->currentUserHaveMoreRightThan($ID)) {\n         return false;\n      }\n      if ($this->getFromDB($ID)) {\n         $rand     = mt_rand();\n         $authtype = $this->getAuthMethodsByID();\n\n         $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n         // No autocopletion :\n         $save_autocompletion                 = $CFG_GLPI[\"use_ajax_autocompletion\"];\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = false;\n\n         echo \"<div class='center'>\";\n         echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\".$target.\"' autocomplete='off'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n         echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n         echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n         echo \"</th></tr>\";\n\n         $surnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['realname_field'])\n             && !empty($authtype['realname_field'])) {\n\n            echo $this->fields[\"realname\"];\n         } else {\n            Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n         }\n         echo \"</td>\";\n\n         if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='4'>\" . __('Picture') . \"</td>\";\n            echo \"<td rowspan='4'>\";\n            echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n            echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                   User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n            echo \"</div>\";\n            $full_picture  = \"<div class='user_picture_border'>\";\n            $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                              User::getURLForPicture($this->fields['picture']).\"'>\";\n            $full_picture .= \"</div>\";\n\n            Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n            echo \"&nbsp;\";\n            Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n            echo \"&nbsp;\".__('Clear');\n\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n         $firstnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['firstname_field'])\n             && !empty($authtype['firstname_field'])) {\n\n            echo $this->fields[\"firstname\"];\n         } else {\n            Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n         }\n         echo \"</td></tr>\";\n\n         if ($extauth\n            && $this->fields['auths_id']\n               && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n            echo \"</td></tr>\";\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         if (!GLPI_DEMO_MODE) {\n            $langrand = mt_rand();\n            echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n            // Language is stored as null in DB if value is same as the global config.\n            $language = $this->fields[\"language\"];\n            if (null === $this->fields[\"language\"]) {\n               $language = $CFG_GLPI['language'];\n            }\n            Dropdown::showLanguages(\n               \"language\",\n               [\n                  'rand'  => $langrand,\n                  'value' => $language,\n               ]\n            );\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         //do some rights verification\n         if (!$extauth\n             && Session::haveRight(\"password_update\", \"1\")) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='off' onkeyup=\\\"return passwordCheck();\\\">\";\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            if ($CFG_GLPI[\"use_password_security\"]) {\n               echo __('Password security policy');\n            }\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            Config::displayPasswordSecurityChecks();\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='off'>\";\n            echo \"</td></tr>\";\n\n         }\n\n         $phonerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  __('Phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone_field']) && !empty($authtype['phone_field'])) {\n            echo $this->fields[\"phone\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n         }\n         echo \"</td>\";\n         echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n         UserEmail::showAddEmailButton($this);\n         echo \"</td><td>\";\n         UserEmail::showForUser($this);\n         echo \"</td>\";\n         echo \"</tr>\";\n\n         $mobilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])) {\n            echo $this->fields[\"mobile\"];\n         } else {\n            Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n         }\n         echo \"</td>\";\n\n         if (count($_SESSION['glpiprofiles']) >1) {\n            $profilerand = mt_rand();\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n            $options = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                       Profile_User::getUserProfiles($this->fields['id']));\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         $phone2rand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])) {\n            echo $this->fields[\"phone2\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n         }\n         echo \"</td>\";\n\n         $entities = $this->getEntities();\n         if (!GLPI_DEMO_MODE\n             && (count($_SESSION['glpiactiveentities']) > 1)) {\n            $entrand = mt_rand();\n            echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n            Entity::dropdown(['value'  => $this->fields['entities_id'],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         $admnumrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])) {\n            echo $this->fields[\"registration_number\"];\n         } else {\n            Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n         }\n         echo \"</td><td colspan='2'></td></tr>\";\n\n         $locrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . __('Location') . \"</label></td><td>\";\n         Location::dropdown(['value'  => $this->fields['locations_id'],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n\n         if (Config::canUpdate()) {\n            $moderand = mt_rand();\n            echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n            $modes = [\n               Session::NORMAL_MODE => __('Normal'),\n               Session::DEBUG_MODE  => __('Debug'),\n            ];\n            Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"Personal token\");\n         echo \"</td><td colspan='2'>\";\n\n         if (!empty($this->fields[\"personal_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_personal_token', [\n                                 'value'    => $this->fields[\"personal_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_personal_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"API token\");\n         echo \"</td><td colspan='2'>\";\n         if (!empty($this->fields[\"api_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_api_token', [\n                                 'value'    => $this->fields[\"api_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_api_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n         echo \"<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = $save_autocompletion;\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Get all the authentication method parameters for the current user.\n    *\n    * @return array\n    */\n   function getAuthMethodsByID() {\n      return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n   }\n\n\n   function pre_updateInDB() {\n      global $DB;\n\n      if (($key = array_search('name', $this->updates)) !== false) {\n         /// Check if user does not exists\n         $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'name'   => $this->input['name'],\n               'id'     => ['<>', $this->input['id']]\n            ]\n         ]);\n\n         if (count($iterator)) {\n            //To display a message\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('Unable to update login. A user already exists.'),\n                                             false, ERROR);\n         }\n\n         if (!Auth::isValidLogin($this->input['name'])) {\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('The login is not valid. Unable to update login.'),\n                                             false, ERROR);\n         }\n\n      }\n\n      /// Security system except for login update\n      if (Session::getLoginUserID()\n          && !Session::haveRight(\"user\", UPDATE)\n          && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")) {\n\n         if (Session::getLoginUserID() === $this->input['id']) {\n            if (isset($this->fields[\"authtype\"])) {\n\n               // extauth ldap case\n               if ($_SESSION[\"glpiextauth\"]\n                   && (($this->fields[\"authtype\"] == Auth::LDAP)\n                       || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n                  $authtype = Auth::getMethodsByID($this->fields[\"authtype\"],\n                                                   $this->fields[\"auths_id\"]);\n                  if (count($authtype)) {\n                     $fields = AuthLDAP::getSyncFields($authtype);\n                     foreach ($fields as $key => $val) {\n                        if (!empty($val)\n                            && (($key2 = array_search($key, $this->updates)) !== false)) {\n\n                           unset ($this->updates[$key2]);\n                           unset($this->oldvalues[$key]);\n\n                        }\n                     }\n                  }\n               }\n\n               if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n                  unset ($this->updates[$key]);\n                  unset($this->oldvalues['is_active']);\n               }\n\n               if (($key = array_search(\"comment\", $this->updates)) !== false) {\n                  unset ($this->updates[$key]);\n                  unset($this->oldvalues['comment']);\n               }\n            }\n         }\n      }\n   }\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n      if ($isadmin) {\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = __('Associate to a group');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a group');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = __('Associate to a profile');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a profile');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'change_group_user']\n                                                         = __(\"Move to group\");\n      }\n\n      if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         $prefix                                    = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n         $actions[$prefix.'change_authtype']        = _x('button', 'Change the authentication method');\n         $actions[$prefix.'force_user_ldap_update'] = __('Force synchronization');\n      }\n      return $actions;\n   }\n\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n      global $CFG_GLPI;\n\n      switch ($ma->getAction()) {\n         case 'change_authtype' :\n            $rand             = Auth::dropdown(['name' => 'authtype']);\n            $paramsmassaction = ['authtype' => '__VALUE__'];\n            Ajax::updateItemOnSelectEvent(\"dropdown_authtype$rand\", \"show_massiveaction_field\",\n                                          $CFG_GLPI[\"root_doc\"].\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                                          $paramsmassaction);\n            echo \"<span id='show_massiveaction_field'><br><br>\";\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']).\"</span>\";\n            return true;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'force_user_ldap_update' :\n            foreach ($ids as $id) {\n               if ($item->can($id, UPDATE)) {\n                  if (($item->fields[\"authtype\"] == Auth::LDAP)\n                      || ($item->fields[\"authtype\"] == Auth::EXTERNAL)) {\n                     if (AuthLdap::forceOneUserSynchronization($item, false)) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                  }\n               } else {\n                  $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                  $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n               }\n            }\n            return;\n\n         case 'change_authtype' :\n            $input = $ma->getInput();\n            if (!isset($input[\"authtype\"])\n                || !isset($input[\"auths_id\"])) {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n               return;\n            }\n            if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n               if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n               } else {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               }\n            } else {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      // forcegroup by on name set force group by for all items\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Login'),\n         'datatype'           => 'itemlink',\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '34',\n         'table'              => $this->getTable(),\n         'field'              => 'realname',\n         'name'               => __('Last name'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'firstname',\n         'name'               => __('First name'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => 'glpi_useremails',\n         'field'              => 'email',\n         'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n         'datatype'           => 'email',\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ],\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '150',\n         'table'              => $this->getTable(),\n         'field'              => 'picture',\n         'name'               => __('Picture'),\n         'datatype'           => 'specific',\n         'nosearch'           => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '28',\n         'table'              => $this->getTable(),\n         'field'              => 'sync_field',\n         'name'               => __('Synchronization field'),\n         'massiveaction'      => false,\n         'datatype'           => 'string'\n      ];\n\n      $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_active',\n         'name'               => __('Active'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'phone',\n         'name'               => __('Phone'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'phone2',\n         'name'               => __('Phone 2'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'mobile',\n         'name'               => __('Mobile phone'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '13',\n         'table'              => 'glpi_groups',\n         'field'              => 'completename',\n         'name'               => _n('Group', 'Groups', Session::getPluralNumber()),\n         'forcegroupby'       => true,\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_groups_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '14',\n         'table'              => $this->getTable(),\n         'field'              => 'last_login',\n         'name'               => __('Last login'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '15',\n         'table'              => $this->getTable(),\n         'field'              => 'authtype',\n         'name'               => __('Authentication'),\n         'massiveaction'      => false,\n         'datatype'           => 'specific',\n         'searchtype'         => 'equals',\n         'additionalfields'   => [\n            '0'                  => 'auths_id'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '30',\n         'table'              => 'glpi_authldaps',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('LDAP directory for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n             'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::LDAP\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '31',\n         'table'              => 'glpi_authmails',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('Email server for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::MAIL\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'language',\n         'name'               => __('Language'),\n         'datatype'           => 'language',\n         'display_emptychoice' => true,\n         'emptylabel'         => 'Default value'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => sprintf(__('%1$s (%2$s)'), _n('Profile', 'Profiles', Session::getPluralNumber()),\n                                                 _n('Entity', 'Entities', 1)),\n         'forcegroupby'       => true,\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '21',\n         'table'              => $this->getTable(),\n         'field'              => 'user_dn',\n         'name'               => __('User DN'),\n         'massiveaction'      => false,\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '22',\n         'table'              => $this->getTable(),\n         'field'              => 'registration_number',\n         'name'               => __('Administrative number'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '23',\n         'table'              => $this->getTable(),\n         'field'              => 'date_sync',\n         'datatype'           => 'datetime',\n         'name'               => __('Last synchronization'),\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '24',\n         'table'              => $this->getTable(),\n         'field'              => 'is_deleted_ldap',\n         'name'               => __('Deleted user in LDAP directory'),\n         'datatype'           => 'bool',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '80',\n         'table'              => 'glpi_entities',\n         'linkfield'          => 'entities_id',\n         'field'              => 'completename',\n         'name'               => sprintf(__('%1$s (%2$s)'), _n('Entity', 'Entities', Session::getPluralNumber()),\n                                                 _n('Profile', 'Profiles', 1)),\n         'forcegroupby'       => true,\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '81',\n         'table'              => 'glpi_usertitles',\n         'field'              => 'name',\n         'name'               => __('Title'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '82',\n         'table'              => 'glpi_usercategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '79',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => __('Default profile'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '77',\n         'table'              => 'glpi_entities',\n         'field'              => 'name',\n         'massiveaction'      => true,\n         'name'               => __('Default entity'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '62',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Begin date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '63',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('End date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '60',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets as requester'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = ' . CommonITILActor::REQUESTER\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '61',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of written tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child',\n            'linkfield'          => 'users_id_recipient'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '64',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of assigned tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = '.CommonITILActor::ASSIGN\n               ]\n            ]\n         ]\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'authtype':\n            $auths_id = 0;\n            if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n               $auths_id = $values['auths_id'];\n            }\n            return Auth::getMethodName($values[$field], $auths_id);\n         case 'picture':\n            if (isset($options['html']) && $options['html']) {\n               return Html::image(self::getThumbnailURLForPicture($values['picture']),\n                                  ['class' => 'user_picture_small', 'alt' => __('Picture')]);\n            }\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n      switch ($field) {\n         case 'authtype' :\n            $options['name'] = $name;\n            $options['value'] = $values[$field];\n            return Auth::dropdown($options);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   /**\n    * Get all groups where the current user have delegating.\n    *\n    * @since 0.83\n    *\n    * @param integer|string $entities_id ID of the entity to restrict\n    *\n    * @return integer[]\n    */\n   static function getDelegateGroupsForUser($entities_id = '') {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT DISTINCT' => 'glpi_groups_users.groups_id',\n         'FROM'            => 'glpi_groups_users',\n         'INNER JOIN'      => [\n            'glpi_groups'  => [\n               'FKEY'   => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'           => [\n            'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n            'glpi_groups_users.is_userdelegate' => 1\n         ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n      ]);\n\n      $groups = [];\n      while ($data = $iterator->next()) {\n         $groups[$data['groups_id']] = $data['groups_id'];\n      }\n      return $groups;\n   }\n\n\n   /**\n    * Execute the query to select box with all glpi users where select key = name\n    *\n    * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n    *\n    * @param boolean         $count            true if execute an count(*) (true by default)\n    * @param string|string[] $right            limit user who have specific right (default 'all')\n    * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n    * @param integer         $value            default value (default 0)\n    * @param integer[]       $used             Already used items ID: not to display in dropdown\n    * @param string          $search           pattern (default '')\n    * @param integer         $start            start LIMIT value (default 0)\n    * @param integer         $limit            limit LIMIT value (default -1 no limit)\n    * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n    *\n    * @return mysqli_result|boolean\n    */\n   static function getSqlSearchResult ($count = true, $right = \"all\", $entity_restrict = -1, $value = 0,\n                                       array $used = [], $search = '', $start = 0, $limit = -1,\n                                       $inactive_deleted = 0) {\n      global $DB;\n\n      // No entity define : use active ones\n      if ($entity_restrict < 0) {\n         $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n      }\n\n      $joinprofile      = false;\n      $joinprofileright = false;\n      $WHERE = [];\n\n      switch ($right) {\n         case \"interface\" :\n            $joinprofile = true;\n            $WHERE = [\n               'glpi_profiles.interface' => 'central'\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         case \"id\" :\n            $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n            break;\n\n         case \"delegate\" :\n            $groups = self::getDelegateGroupsForUser($entity_restrict);\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                     $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n            break;\n\n         case \"groups\" :\n            $groups = [];\n            if (isset($_SESSION['glpigroups'])) {\n               $groups = $_SESSION['glpigroups'];\n            }\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                  $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n\n            break;\n\n         case \"all\" :\n            $WHERE = [\n               'glpi_users.id' => ['>', 0]\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         default :\n            $joinprofile = true;\n            $joinprofileright = true;\n            if (!is_array($right)) {\n               $right = [$right];\n            }\n            $forcecentral = true;\n\n            $ORWHERE = [];\n            foreach ($right as $r) {\n               switch ($r) {\n                  case  'own_ticket' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticket',\n                           'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_ticket_validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'  => 'ticketvalidation',\n                           'OR'                       => [\n                              'glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST],\n                              'glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_request' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_incident' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::CREATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'see_project' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'project',\n                           'glpi_profilerights.rights'   => ['&', Project::READMY]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'faq' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'knowbase',\n                           'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n\n                  default :\n                     // Check read or active for rights\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => $r,\n                           'glpi_profilerights.rights'   => [\n                              '&',\n                              READ | CREATE | UPDATE | DELETE | PURGE\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n               }\n               if (in_array($r, Profile::$helpdesk_rights)) {\n                  $forcecentral = false;\n               }\n            }\n\n            if (count($ORWHERE)) {\n               $WHERE[] = ['OR' => $ORWHERE];\n            }\n\n            if ($forcecentral) {\n               $WHERE['glpi_profiles.interface'] = 'central';\n            }\n      }\n\n      if (!$inactive_deleted) {\n         $WHERE = array_merge(\n            $WHERE, [\n               'glpi_users.is_deleted' => 0,\n               'glpi_users.is_active'  => 1,\n               [\n                  'OR' => [\n                     ['glpi_users.begin_date' => null],\n                     ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ],\n               [\n                  'OR' => [\n                     ['glpi_users.end_date' => null],\n                     ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ]\n\n            ]\n         );\n      }\n\n      if ((is_numeric($value) && $value)\n          || count($used)) {\n\n         $WHERE[] = [\n            'NOT' => [\n               'glpi_users.id' => $used\n            ]\n         ];\n      }\n\n      $criteria = [\n         'FROM'            => 'glpi_users',\n         'LEFT JOIN'       => [\n            'glpi_useremails'       => [\n               'ON' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ],\n            'glpi_profiles_users'   => [\n               'ON' => [\n                  'glpi_profiles_users'   => 'users_id',\n                  'glpi_users'            => 'id'\n               ]\n            ]\n         ]\n      ];\n      if ($count) {\n         $criteria['COUNT DISTINCT'] = 'glpi_users.*';\n      } else {\n         $criteria['SELECT DISTINCT'] = 'glpi_users.*';\n      }\n\n      if ($joinprofile) {\n         $criteria['LEFT JOIN']['glpi_profiles'] = [\n            'ON' => [\n               'glpi_profiles_users'   => 'profiles_id',\n               'glpi_profiles'         => 'id'\n            ]\n         ];\n         if ($joinprofileright) {\n            $criteria['LEFT JOIN']['glpi_profilerights'] = [\n               'ON' => [\n                  'glpi_profilerights' => 'profiles_id',\n                  'glpi_profiles'      => 'id'\n               ]\n            ];\n         }\n      }\n\n      if (!$count) {\n         if ((strlen($search) > 0)) {\n            $txt_search = Search::makeTextSearchValue($search);\n            $concat = new \\QueryExpression(\n               \"CONCAT(\n                  glpi_users.realname,\n                  glpi_users.firstname,\n                  glpi_users.firstname\n               ) LIKE '$txt_search'\"\n            );\n            $WHERE[] = [\n               'OR' => [\n                  'glpi_users.name'       => ['LIKE', $txt_search],\n                  'glpi_users.realname'   => ['LIKE', $txt_search],\n                  'glpi_users.firstname'  => ['LIKE', $txt_search],\n                  'glpi_users.phone'      => ['LIKE', $txt_search],\n                  'glpi_useremails.email' => ['LIKE', $txt_search],\n                  $concat\n               ]\n            ];\n         }\n\n         if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n            $criteria['ORDERBY'] = [\n               'glpi_users.firstname',\n               'glpi_users.realname',\n               'glpi_users.name'\n            ];\n         } else {\n            $criteria['ORDERBY'] = [\n               'glpi_users.realname',\n               'glpi_users.firstname',\n               'glpi_users.name'\n            ];\n         }\n\n         if ($limit > 0) {\n            $criteria['LIMIT'] = $limit;\n            $criteria['START'] = $start;\n         }\n      }\n      $criteria['WHERE'] = $WHERE;\n      return $DB->request($criteria);\n   }\n\n\n   /**\n    * Make a select box with all glpi users where select key = name\n    *\n    * @param $options array of possible options:\n    *    - name             : string / name of the select (default is users_id)\n    *    - value\n    *    - right            : string / limit user who have specific right :\n    *                             id -> only current user (default case);\n    *                             interface -> central;\n    *                             all -> all users;\n    *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n    *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n    *    - entity           : integer or array / restrict to a defined entity or array of entities\n    *                          (default -1 : no restriction)\n    *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n    *                          only available if entity is a single value not an array(default false)\n    *    - all              : Nobody or All display for none selected\n    *                             all=0 (default) -> Nobody\n    *                             all=1 -> All\n    *                             all=-1-> nothing\n    *    - rand             : integer / already computed rand value\n    *    - toupdate         : array / Update a specific item on select change on dropdown\n    *                          (need value_fieldname, to_update, url\n    *                          (see Ajax::updateItemOnSelectEvent for information)\n    *                          and may have moreparams)\n    *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n    *    - ldap_import\n    *    - on_change        : string / value to transmit to \"onChange\"\n    *    - display          : boolean / display or get string (default true)\n    *    - width            : specific width needed (default 80%)\n    *    - specific_tags    : array of HTML5 tags to add to the field\n    *    - url              : url of the ajax php code which should return the json data to show in\n    *                         the dropdown (default /ajax/getDropdownUsers.php)\n    *    - inactive_deleted : retreive also inactive or deleted users\n    *\n    * @return integer|string Random value if displayed, string otherwise\n    */\n   static function dropdown($options = []) {\n      global $CFG_GLPI;\n\n      // Default values\n      $p = [\n         'name'             => 'users_id',\n         'value'            => '',\n         'right'            => 'id',\n         'all'              => 0,\n         'on_change'        => '',\n         'comments'         => 1,\n         'width'            => '80%',\n         'entity'           => -1,\n         'entity_sons'      => false,\n         'used'             => [],\n         'ldap_import'      => false,\n         'toupdate'         => '',\n         'rand'             => mt_rand(),\n         'display'          => true,\n         '_user_index'      => 0,\n         'specific_tags'    => [],\n         'url'              => $CFG_GLPI['root_doc'].\"/ajax/getDropdownUsers.php\",\n         'inactive_deleted' => 0,\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      // check default value (in case of multiple observers)\n      if (is_array($p['value'])) {\n         $p['value'] = $p['value'][$p['_user_index']];\n      }\n\n      // Check default value for dropdown : need to be a numeric\n      if ((strlen($p['value']) == 0) || !is_numeric($p['value'])) {\n         $p['value'] = 0;\n      }\n\n      $output = '';\n      if (!($p['entity'] < 0) && $p['entity_sons']) {\n         if (is_array($p['entity'])) {\n            $output .= \"entity_sons options is not available with array of entity\";\n         } else {\n            $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n         }\n      }\n\n      // Make a select box with all glpi users\n      $user = getUserName($p['value'], 2);\n\n      $view_users = self::canView();\n\n      if (!empty($p['value']) && ($p['value'] > 0)) {\n          $default = $user[\"name\"];\n      } else {\n         if ($p['all']) {\n            $default = __('All');\n         } else {\n            $default = Dropdown::EMPTY_VALUE;\n         }\n      }\n      $field_id = Html::cleanId(\"dropdown_\".$p['name'].$p['rand']);\n      $param    = ['value'               => $p['value'],\n                        'valuename'           => $default,\n                        'width'               => $p['width'],\n                        'all'                 => $p['all'],\n                        'right'               => $p['right'],\n                        'on_change'           => $p['on_change'],\n                        'used'                => $p['used'],\n                        'inactive_deleted'    => $p['inactive_deleted'],\n                        'entity_restrict'     => (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity']),\n                        'specific_tags'       => $p['specific_tags']];\n\n      $output   = Html::jsAjaxDropdown($p['name'], $field_id,\n                                       $p['url'],\n                                       $param);\n\n      // Display comment\n      if ($p['comments']) {\n         $comment_id = Html::cleanId(\"comment_\".$p['name'].$p['rand']);\n         $link_id = Html::cleanId(\"comment_link_\".$p[\"name\"].$p['rand']);\n         if (!$view_users) {\n            $user[\"link\"] = '';\n         } else if (empty($user[\"link\"])) {\n            $user[\"link\"] = $CFG_GLPI['root_doc'].\"/front/user.php\";\n         }\n\n         if (empty($user['comment'])) {\n            $user['comment'] = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  self::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($user[\"comment\"],\n                                      ['contentid' => $comment_id,\n                                            'display'   => false,\n                                            'link'      => $user[\"link\"],\n                                            'linkid'    => $link_id]);\n\n         $paramscomment = ['value' => '__VALUE__',\n                                'table' => \"glpi_users\"];\n\n         if ($view_users) {\n            $paramscomment['withlink'] = $link_id;\n         }\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n          && $p['ldap_import']\n          && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])) {\n\n         $output .= \"<span title=\\\"\".__s('Import a user').\"\\\" class='fa fa-plus pointer'\".\n                     \" onClick=\\\"\".Html::jsGetElementbyID('userimport'.$p['rand']).\".dialog('open');\\\">\n                     <span class='sr-only'>\" . __s('Import a user') . \"</span></span>\";\n         $output .= Ajax::createIframeModalWindow('userimport'.$p['rand'],\n                                                  $CFG_GLPI[\"root_doc\"].\n                                                      \"/front/ldap.import.php?entity=\".\n                                                      $_SESSION['glpiactive_entity'],\n                                                  ['title'   => __('Import a user'),\n                                                        'display' => false]);\n      }\n\n      if ($p['display']) {\n         echo $output;\n         return $p['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Show simple add user form for external auth.\n    *\n    * @return void|boolean false if user does not have rights to import users from external sources,\n    *    print form otherwise\n    */\n   static function showAddExtAuthForm() {\n\n      if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n         return false;\n      }\n\n      echo \"<div class='center'>\\n\";\n      echo \"<form method='post' action='\".Toolbox::getItemTypeFormURL('User').\"'>\\n\";\n\n      echo \"<table class='tab_cadre'>\\n\";\n      echo \"<tr><th colspan='4'>\".__('Automatically add a user of an external source').\"</th></tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Login').\"</td>\\n\";\n      echo \"<td><input type='text' name='login'></td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\".__s('Import from directories').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\".__s('Import from other sources').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\\n\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\\n\";\n   }\n\n\n   /**\n    * Change auth method for given users.\n    *\n    * @param integer[] $IDs      IDs of users\n    * @param integer   $authtype Auth type (see Auth constants)\n    * @param integer   $server   ID of auth server\n    *\n    * @return boolean\n    */\n   static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1) {\n      global $DB;\n\n      if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         return false;\n      }\n\n      if (!empty($IDs)\n          && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])) {\n\n         $result = $DB->update(\n            self::getTable(), [\n               'authtype'        => $authtype,\n               'auths_id'        => $server,\n               'password'        => '',\n               'is_deleted_ldap' => 0\n            ], [\n               'id' => $IDs\n            ]\n         );\n         if ($result) {\n            foreach ($IDs as $ID) {\n               $changes = [\n                  0,\n                  '',\n                  addslashes(\n                     sprintf(\n                        __('%1$s: %2$s'),\n                        __('Update authentification method to'),\n                        Auth::getMethodName($authtype, $server)\n                     )\n                  )\n               ];\n               Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n            }\n\n            return true;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    * Generate vcard for the current user.\n    *\n    * @return void\n    */\n   function generateVcard() {\n\n      // prepare properties for the Vcard\n      if (!empty($this->fields[\"realname\"])\n          || !empty($this->fields[\"firstname\"])) {\n         $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n      } else {\n         $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n      }\n\n      // create vcard\n      $vcard = new VObject\\Component\\VCard([\n         'N'     => $name,\n         'EMAIL' => $this->getDefaultEmail(),\n         'NOTE'  => $this->fields[\"comment\"],\n      ]);\n      $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n      $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n      $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n      // send the  VCard\n      $output   = $vcard->serialize();\n      $filename = implode(\"_\", array_filter($name)).\".vcf\";\n\n      @Header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n      @Header(\"Content-Length: \".Toolbox::strlen($output));\n      @Header(\"Connection: close\");\n      @Header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n      echo $output;\n   }\n\n\n   /**\n    * Show items of the current user.\n    *\n    * @param boolean $tech false to display items owned by user, true to display items managed by user\n    *\n    * @return void\n    */\n   function showItems($tech) {\n      global $DB, $CFG_GLPI;\n\n      $ID = $this->getField('id');\n\n      if ($tech) {\n         $type_user   = $CFG_GLPI['linkuser_tech_types'];\n         $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n         $field_user  = 'users_id_tech';\n         $field_group = 'groups_id_tech';\n      } else {\n         $type_user   = $CFG_GLPI['linkuser_types'];\n         $type_group  = $CFG_GLPI['linkgroup_types'];\n         $field_user  = 'users_id';\n         $field_group = 'groups_id';\n      }\n\n      $group_where = \"\";\n      $groups      = [];\n\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'glpi_groups_users.groups_id',\n            'glpi_groups.name'\n         ],\n         'FROM'      => 'glpi_groups_users',\n         'LEFT JOIN' => [\n            'glpi_groups' => [\n               'FKEY' => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n      ]);\n      $number = count($iterator);\n\n      $group_where = [];\n      while ($data = $iterator->next()) {\n         $group_where[$field_group][] = $data['groups_id'];\n         $groups[$data[\"groups_id\"]] = $data[\"name\"];\n      }\n\n      echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n      $header = \"<tr><th>\".__('Type').\"</th>\";\n      $header .= \"<th>\".__('Entity').\"</th>\";\n      $header .= \"<th>\".__('Name').\"</th>\";\n      $header .= \"<th>\".__('Serial number').\"</th>\";\n      $header .= \"<th>\".__('Inventory number').\"</th>\";\n      $header .= \"<th>\".__('Status').\"</th>\";\n      $header .= \"<th>&nbsp;</th></tr>\";\n      echo $header;\n\n      foreach ($type_user as $itemtype) {\n         if (!($item = getItemForItemtype($itemtype))) {\n            continue;\n         }\n         if ($item->canView()) {\n            $itemtable = getTableForItemType($itemtype);\n            $iterator_params = [\n               'FROM'   => $itemtable,\n               'WHERE'  => [$field_user => $ID]\n            ];\n\n            if ($item->maybeTemplate()) {\n               $iterator_params['WHERE']['is_template'] = 0;\n            }\n            if ($item->maybeDeleted()) {\n               $iterator_params['WHERE']['is_deleted'] = 0;\n            }\n\n            $item_iterator = $DB->request($iterator_params);\n\n            $type_name = $item->getTypeName();\n\n            while ($data = $item_iterator->next()) {\n               $cansee = $item->can($data[\"id\"], READ);\n               $link   = $data[\"name\"];\n               if ($cansee) {\n                  $link_item = $item::getFormURLWithID($data['id']);\n                  if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                     $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                  }\n                  $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n               }\n               $linktype = \"\";\n               if ($data[$field_user] == $ID) {\n                  $linktype = self::getTypeName(1);\n               }\n               echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n               echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                     $data[\"entities_id\"]).\"</td>\";\n               echo \"<td class='center'>$link</td>\";\n               echo \"<td class='center'>\";\n               if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                  echo $data[\"serial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                  echo $data[\"otherserial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"states_id\"])) {\n                  echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n               } else {\n                  echo '&nbsp;';\n               }\n\n               echo \"</td><td class='center'>$linktype</td></tr>\";\n            }\n         }\n      }\n      if ($number) {\n         echo $header;\n      }\n      echo \"</table></div>\";\n\n      if (count($group_where)) {\n         echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n         $header = \"<tr>\".\n               \"<th>\".__('Type').\"</th>\".\n               \"<th>\".__('Entity').\"</th>\".\n               \"<th>\".__('Name').\"</th>\".\n               \"<th>\".__('Serial number').\"</th>\".\n               \"<th>\".__('Inventory number').\"</th>\".\n               \"<th>\".__('Status').\"</th>\".\n               \"<th>&nbsp;</th></tr>\";\n         echo $header;\n         $nb = 0;\n         foreach ($type_group as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n               continue;\n            }\n            if ($item->canView() && $item->isField($field_group)) {\n               $itemtable = getTableForItemType($itemtype);\n               $iterator_params = [\n                  'FROM'   => $itemtable,\n                  'WHERE'  => ['OR' => $group_where]\n               ];\n\n               if ($item->maybeTemplate()) {\n                  $iterator_params['WHERE']['is_template'] = 0;\n               }\n               if ($item->maybeDeleted()) {\n                  $iterator_params['WHERE']['is_deleted'] = 0;\n               }\n\n               $group_iterator = $DB->request($iterator_params);\n\n               $type_name = $item->getTypeName();\n\n               while ($data = $group_iterator->next()) {\n                  $nb++;\n                  $cansee = $item->can($data[\"id\"], READ);\n                  $link   = $data[\"name\"];\n                  if ($cansee) {\n                     $link_item = $item::getFormURLWithID($data['id']);\n                     if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                        $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                     }\n                     $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n                  }\n                  $linktype = \"\";\n                  if (isset($groups[$data[$field_group]])) {\n                     $linktype = sprintf(__('%1$s = %2$s'), _n('Group', 'Groups', 1),\n                                          $groups[$data[$field_group]]);\n                  }\n                  echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                  echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                        $data[\"entities_id\"]);\n                  echo \"</td><td class='center'>$link</td>\";\n                  echo \"<td class='center'>\";\n                  if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                     echo $data[\"serial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                     echo $data[\"otherserial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"states_id\"])) {\n                     echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                  } else {\n                     echo '&nbsp;';\n                  }\n\n                  echo \"</td><td class='center'>$linktype</td></tr>\";\n               }\n            }\n         }\n         if ($nb) {\n            echo $header;\n         }\n         echo \"</table></div>\";\n      }\n   }\n\n\n   /**\n    * Get user by email, importing it from LDAP if not existing.\n    *\n    * @param string $email\n    *\n    * @return integer ID of user, 0 if not found nor imported\n    */\n   static function getOrImportByEmail($email = '') {\n      global $DB, $CFG_GLPI;\n\n      $iterator = $DB->request([\n         'SELECT'    => 'users_id AS id',\n         'FROM'      => 'glpi_useremails',\n         'LEFT JOIN' => [\n            'glpi_users' => [\n               'FKEY' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            'glpi_useremails.email' => $DB->escape(stripslashes($email))\n         ],\n         'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n      ]);\n\n      //User still exists in DB\n      if (count($iterator)) {\n         $result = $iterator->next();\n         return $result['id'];\n      } else {\n         if ($CFG_GLPI[\"is_users_auto_add\"]) {\n            //Get all ldap servers with email field configured\n            $ldaps = AuthLdap::getServersWithImportByEmailActive();\n            //Try to find the user by his email on each ldap server\n\n            foreach ($ldaps as $ldap) {\n               $params = [\n                  'method' => AuthLdap::IDENTIFIER_EMAIL,\n                  'value'  => $email,\n               ];\n               $res = AuthLdap::ldapImportUserByServerId($params,\n                                                         AuthLdap::ACTION_IMPORT,\n                                                         $ldap);\n\n               if (isset($res['id'])) {\n                  return $res['id'];\n               }\n            }\n         }\n      }\n      return 0;\n   }\n\n\n   /**\n    * Handle user deleted in LDAP using configured policy.\n    *\n    * @param integer $users_id\n    *\n    * @return void\n    */\n   static function manageDeletedUserInLdap($users_id) {\n      global $CFG_GLPI;\n\n      //The only case where users_id can be null if when a user has been imported into GLPI\n      //it's dn still exists, but doesn't match the connection filter anymore\n      //In this case, do not try to process the user\n      if (!$users_id) {\n         return;\n      }\n\n      //User is present in DB but not in the directory : it's been deleted in LDAP\n      $tmp = [\n         'id'              => $users_id,\n         'is_deleted_ldap' => 1,\n      ];\n      $myuser = new self();\n      $myuser->getFromDB($users_id);\n\n      //User is already considered as delete from ldap\n      if ($myuser->fields['is_deleted_ldap'] == 1) {\n         return;\n      }\n\n      switch ($CFG_GLPI['user_deleted_ldap']) {\n         //DO nothing\n         default :\n         case AuthLDAP::DELETED_USER_PRESERVE:\n            $myuser->update($tmp);\n            break;\n\n         //Put user in trashbin\n         case AuthLDAP::DELETED_USER_DELETE:\n            $myuser->delete($tmp);\n            break;\n\n         //Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user\n         case AuthLDAP::DELETED_USER_DISABLE:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user+ Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            break;\n\n      }\n      /*\n      $changes[0] = '0';\n      $changes[1] = '';\n      $changes[2] = __('Deleted user in LDAP directory');\n      Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n   }\n\n   /**\n    * Get user ID from its name.\n    *\n    * @param string $name User name\n    *\n    * @return integer\n    */\n   static function getIdByName($name) {\n      return self::getIdByField('name', $name);\n   }\n\n\n   /**\n    * Get user ID from a field\n    *\n    * @since 0.84\n    *\n    * @param string $field Field name\n    * @param string $value Field value\n    *\n    * @return integer\n    */\n   static function getIdByField($field, $value) {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => [$field => addslashes($value)]\n      ]);\n\n      if (count($iterator) == 1) {\n         $row = $iterator->next();\n         return (int)$row['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * Show new password form of password recovery process.\n    *\n    * @param $token\n    *\n    * @return void\n    */\n   static function showPasswordForgetChangeForm($token) {\n      global $CFG_GLPI, $DB;\n\n      // Verif token.\n      $token_ok = false;\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'password_forget_token'       => $token,\n            new \\QueryExpression('NOW() < ADDDATE(password_forget_token_date, INTERVAL 1 DAY))')\n         ]\n      ]);\n\n      if (count($iterator) == 1) {\n         $token_ok = true;\n      }\n      echo \"<div class='center'>\";\n\n      if ($token_ok) {\n         echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n                \"/front/lostpassword.php'>\";\n         echo \"<table class='tab_cadre'>\";\n         echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2'>\". __('Please confirm your email address and enter your new password.').\n              \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . _n('Email', 'Emails', 1).\"</td>\";\n         echo \"<td><input type='text' name='email' value='' size='60'></td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password').\"</td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='off' onkeyup=\\\"return passwordCheck();\\\">\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password confirmation').\"</td>\";\n         echo \"<td><input type='password' name='password2' value='' size='20' autocomplete='off'>\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Password security policy').\"</td>\";\n         echo \"<td>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2 center'><td colspan='2'>\";\n         echo \"<input type='hidden' name='password_forget_token' value='$token'>\";\n         echo \"<input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n\n      } else {\n         echo __('Your password reset request has expired or is invalid. Please renew it.');\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Show request form of password recovery process.\n    *\n    * @return void\n    */\n   static function showPasswordForgetRequestForm() {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n             \"/front/lostpassword.php'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td colspan='2'>\" .\n            __('Please enter your email address. An email will be sent to you and you will be able to choose a new password.').\n           \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_2 center'>\";\n      echo \"<td><input type='text' size='60' name='email' value=''></td>\";\n      echo \"<td><input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n      echo \"</td></tr>\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Handle password recovery form submission.\n    *\n    * @param array $input\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if password successfully changed, false otherwise\n    */\n   public function updateForgottenPassword(array $input) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n      if ($this->getFromDBbyEmail($input['email'], $condition)) {\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                        -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)) {\n\n               $input['id'] = $this->fields['id'];\n               Config::validatePassword($input[\"password\"], false); // Throws exception if password is invalid\n               if (!$this->update($input)) {\n                  return false;\n               }\n               $input2 = [\n                  'password_forget_token'      => '',\n                  'password_forget_token_date' => null,\n                  'id'                         => $this->fields['id']\n               ];\n               $this->update($input2);\n               return true;\n\n            } else {\n               throw new ForgetPasswordException(__('Your password reset request has expired or is invalid. Please renew it.'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      } else {\n         throw new ForgetPasswordException(__('Email address not found.'));\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Displays password recovery result.\n    *\n    * @param array $input\n    *\n    * @return void\n    */\n   public function showUpdateForgottenPassword(array $input) {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      try {\n         if (!$this->updateForgottenPassword($input)) {\n            Html::displayMessageAfterRedirect();\n         } else {\n            echo __('Reset password successful.');\n         }\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n      } catch (PasswordTooWeakException $e) {\n         // Force display on error\n         foreach ($e->getMessages() as $message) {\n            Session::addMessageAfterRedirect($message);\n         }\n         Html::displayMessageAfterRedirect();\n      }\n\n      echo \"<br>\";\n      echo \"<a href=\\\"\".$CFG_GLPI['root_doc'].\"/index.php\\\">\".__s('Back').\"</a>\";\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Send password recovery for a user and display result message.\n    *\n    * @param string $email email of the user\n    *\n    * @return void\n    */\n   public function showForgetPassword($email) {\n\n      echo \"<div class='center'>\";\n      try {\n         $this->forgetPassword($email);\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n         return;\n      }\n      echo __('An email has been sent to your email address. The email contains information for reset your password.');\n   }\n\n   /**\n    * Send password recovery email for a user.\n    *\n    * @param string $email\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if notification successfully created, false if user not found\n    */\n   public function forgetPassword($email) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n\n      if ($this->getFromDBbyEmail($email, $condition)) {\n\n         // Send token if auth DB or not external auth defined\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (NotificationMailing::isUserAddressValid($email)) {\n               $input = [\n                  'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n                  'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n                  'id'                         => $this->fields['id'],\n               ];\n               $this->update($input);\n               // Notication on root entity (glpi_users.entities_id is only a pref)\n               NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n               QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n               return true;\n            } else {\n               throw new ForgetPasswordException(__('Invalid email address'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      }\n\n      throw new ForgetPasswordException(__('Email address not found.'));\n   }\n\n\n   /**\n    * Display information from LDAP server for user.\n    *\n    * @return void\n    */\n   private function showLdapDebug() {\n\n      if ($this->fields['authtype'] != Auth::LDAP) {\n         return false;\n      }\n      echo \"<div class='spaced'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='4'>\".__('LDAP directory').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_2'><td>\".__('User DN').\"</td>\";\n      echo \"<td>\".$this->fields['user_dn'].\"</td></tr>\\n\";\n\n      if ($this->fields['user_dn']) {\n         echo \"<tr class='tab_bg_2'><td>\".__('User information').\"</td><td>\";\n         $config_ldap = new AuthLDAP();\n         $ds          = false;\n\n         if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n            $ds = $config_ldap->connect();\n         }\n\n         if ($ds) {\n            $info = AuthLdap::getUserByDn($ds, $this->fields['user_dn'],\n                                          ['*', 'createTimeStamp', 'modifyTimestamp']);\n            if (is_array($info)) {\n               Html::printCleanArray($info);\n            } else {\n               echo __('No item to display');\n            }\n\n         } else {\n            echo __('Connection failed');\n         }\n\n         echo \"</td></tr>\\n\";\n      }\n\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display debug information for current object.\n    *\n    * @return void\n    */\n   function showDebug() {\n\n      NotificationEvent::debugEvent($this);\n      $this->showLdapDebug();\n   }\n\n   function getUnicityFieldsToDisplayInErrorMessage() {\n\n      return ['id'          => __('ID'),\n                   'entities_id' => __('Entity')];\n   }\n\n\n   function getUnallowedFieldsForUnicity() {\n\n      return array_merge(parent::getUnallowedFieldsForUnicity(),\n                         ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']);\n   }\n\n\n   /**\n    * Get a unique generated token.\n    *\n    * @param string $field Field storing the token\n    *\n    * @return string\n    */\n   static function getUniqueToken($field = 'personal_token') {\n      global $DB;\n\n      $ok = false;\n      do {\n         $key    = Toolbox::getRandomString(40);\n         $row = $DB->request([\n            'COUNT'  => 'cpt',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $key]\n         ])->next();\n\n         if ($row['cpt'] == 0) {\n            return $key;\n         }\n      } while (!$ok);\n\n   }\n\n\n   /**\n    * Get token of a user. If not exists generate it.\n    *\n    * @param integer $ID    User ID\n    * @param string  $field Field storing the token\n    *\n    * @return string|boolean User token, false if user does not exist\n    */\n   static function getToken($ID, $field = 'personal_token') {\n\n      $user = new self();\n      if ($user->getFromDB($ID)) {\n         return $user->getAuthToken($field);\n      }\n\n      return false;\n   }\n\n   /**\n    * Get token of a user. If it does not exists  then generate it.\n    *\n    * @since 9.4\n    *\n    * @param string $field the field storing the token\n    *\n    * @return string|false token or false in case of error\n    */\n   public function getAuthToken($field = 'personal_token') {\n      global $DB;\n\n      if ($this->isNewItem()) {\n         return false;\n      }\n\n      if (!empty($this->fields[$field])) {\n         return $this->fields[$field];\n      }\n      $token = self::getUniqueToken($field);\n      $this->update(['id'             => $this->getID(),\n                     $field           => $token,\n                     $field . \"_date\" => $_SESSION['glpi_currenttime']]);\n      return $this->fields[$field];\n   }\n\n\n   /**\n    * Get name of users using default passwords\n    *\n    * @return string[]\n    */\n   static function checkDefaultPasswords() {\n      global $DB;\n\n      $passwords = ['glpi'      => 'glpi',\n                         'tech'      => 'tech',\n                         'normal'    => 'normal',\n                         'post-only' => 'postonly'];\n      $default_password_set = [];\n\n      $crit = ['FIELDS'     => ['name', 'password'],\n                    'is_active'  => 1,\n                    'is_deleted' => 0,\n                    'name'       => array_keys($passwords)];\n\n      foreach ($DB->request('glpi_users', $crit) as $data) {\n         if (Auth::checkPassword($passwords[$data['name']], $data['password'])) {\n            $default_password_set[] = $data['name'];\n         }\n      }\n\n      return $default_password_set;\n   }\n\n\n   /**\n    * Get picture URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      if (!empty($picture)) {\n         return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/$picture\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture.png\";\n   }\n\n\n   /**\n    * Get thumbnail URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getThumbnailURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      if (!empty($picture)) {\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) ==2) {\n            return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/\".$tmp[0].\n                   \"_min.\".$tmp[1];\n         }\n         return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n\n   }\n\n\n   /**\n    * Drop existing files for user picture.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return void\n    */\n   static function dropPictureFiles($picture) {\n\n      if (!empty($picture)) {\n         // unlink main file\n         if (file_exists(GLPI_PICTURE_DIR.\"/$picture\")) {\n            @unlink(GLPI_DOC_DIR.\"/_pictures/$picture\");\n         }\n         // unlink Thunmnail\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) == 2) {\n            if (file_exists(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1])) {\n               @unlink(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1]);\n            }\n         }\n      }\n   }\n\n   function getRights($interface = 'central') {\n\n      $values = parent::getRights();\n      //TRANS: short for : Add users from an external source\n      $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n                                                'long'  => __('Add users from an external source')];\n       //TRANS: short for : Read method for user authentication and synchronization\n      $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n                                                'long'  => __('Read user authentication and synchronization method')];\n      //TRANS: short for : Update method for user authentication and synchronization\n      $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n                                                'long'  => __('Update method for user authentication and synchronization')];\n\n      return $values;\n   }\n\n\n   /**\n    * Retrieve the list of LDAP field names from a list of fields\n    * allow pattern substitution, e.g. %{name}.\n    *\n    * @since 9.1\n    *\n    * @param string[] $map array of fields\n    *\n    * @return string[]\n    */\n   private static function getLdapFieldNames(array $map) {\n\n      $ret =  [];\n      foreach ($map as $v) {\n         /** @var array $reg */\n         if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n            // e.g. \"%{country} > %{city} > %{site}\"\n            foreach ($reg [1] as $f) {\n               $ret [] = $f;\n            }\n         } else {\n            // single field name\n            $ret [] = $v;\n         }\n      }\n      return $ret;\n   }\n\n\n   /**\n    * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n    *\n    * @since 9.1\n    *\n    * @param string $map String with field format\n    * @param array  $res LDAP result\n    *\n    * @return string\n    */\n   private static function getLdapFieldValue($map, array $res) {\n\n      $map = Toolbox::unclean_cross_side_scripting_deep($map);\n      $ret = preg_replace_callback('/%{(.*)}/U',\n                                    function ($matches) use ($res) {\n                                       return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n                                    }, $map );\n\n      return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n   }\n\n   /**\n    * Get/Print the switch language form.\n    *\n    * @param boolean $display Whether to display or return output\n    * @param array   $options Options\n    *    - string   value       Selected language value\n    *    - boolean  showbutton  Whether to display or not submit button\n    *\n    * @return void|string Nothing if displayed, string to display otherwise\n    */\n   function showSwitchLangForm($display = true, array $options = []) {\n\n      $params = [\n         'value'        => $_SESSION[\"glpilanguage\"],\n         'display'      => false,\n         'showbutton'   => true\n      ];\n\n      foreach ($options as $key => $value) {\n         $params[$key] = $value;\n      }\n\n      $out = '';\n      $out .= \"<form method='post' name='switchlang' action='\".User::getFormURL().\"' autocomplete='off'>\";\n      $out .= \"<p class='center'>\";\n      $out .= Dropdown::showLanguages(\"language\", $params);\n      if ($params['showbutton'] === true) {\n         $out .= \"&nbsp;<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n      }\n      $out .= \"</p>\";\n      $out .= Html::closeForm(false);\n\n      if ($display === true) {\n         echo $out;\n      } else {\n         return $out;\n      }\n   }\n\n   /**\n    * Get list of entities ids for current user.\n    *\n    * @return integer[]\n    */\n   private function getEntities() {\n      //get user entities\n      if ($this->entities == null) {\n         $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n      }\n      return $this->entities;\n   }\n}\n"], "fixing_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2018 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Sabre\\VObject;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Exception\\PasswordTooWeakException;\n\nclass User extends CommonDBTM {\n\n   // From CommonDBTM\n   public $dohistory         = true;\n   public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n                                     'publicbookmarkorder', 'privatebookmarkorder'];\n\n   // NAME FIRSTNAME ORDER TYPE\n   const REALNAME_BEFORE   = 0;\n   const FIRSTNAME_BEFORE  = 1;\n\n   const IMPORTEXTAUTHUSERS  = 1024;\n   const READAUTHENT         = 2048;\n   const UPDATEAUTHENT       = 4096;\n\n   static $rightname = 'user';\n\n   private $entities = null;\n\n\n   static function getTypeName($nb = 0) {\n      return _n('User', 'Users', $nb);\n   }\n\n   static function getMenuShorcut() {\n      return 'u';\n   }\n\n   static function getAdditionalMenuOptions() {\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n         return [\n            'ldap' => [\n               'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n               'page'  => '/front/ldap.php',\n            ],\n         ];\n      }\n      return false;\n   }\n\n\n   function canViewItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canCreateItem() {\n\n      // Will be created from form, with selected entity/profile\n      if (isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n          && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n          && isset($this->input['_entities_id'])\n          && Session::haveAccessToEntity($this->input['_entities_id'])) {\n         return true;\n      }\n      // Will be created with default value\n      if (Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n          || (Profile::getDefault() > 0)) {\n         return true;\n      }\n\n      if (($_SESSION['glpiactive_entity'] > 0)\n          && (Profile::getDefault() == 0)) {\n         echo \"<div class='tab_cadre_fixe warning'>\".\n                __('You must define a default profile to create a new user').\"</div>\";\n      }\n\n      return false;\n   }\n\n\n   function canUpdateItem() {\n\n      $entities = Profile_User::getUserEntities($this->fields['id'], false);\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($entities)) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canDeleteItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToAllOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canPurgeItem() {\n      return $this->canDeleteItem();\n   }\n\n\n   function isEntityAssign() {\n      // glpi_users.entities_id is only a pref.\n      return false;\n   }\n\n\n   /**\n    * Compute preferences for the current user mixing config and user data.\n    *\n    * @return void\n    */\n   function computePreferences() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id'])) {\n         foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (is_null($this->fields[$f]) || !Session::haveRight('personalization', UPDATE)) {\n               $this->fields[$f] = $CFG_GLPI[$f];\n            }\n         }\n      }\n      /// Specific case for show_count_on_tabs : global config can forbid\n      if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n         $this->fields['show_count_on_tabs'] = 0;\n      }\n   }\n\n\n   /**\n    * Load minimal session for user.\n    *\n    * @param integer $entities_id  Entity to use\n    * @param boolean $is_recursive Whether to load entities recursivly or not\n    *\n    * @return void\n    *\n    * @since 0.83.7\n    */\n   function loadMinimalSession($entities_id, $is_recursive) {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n         Session::destroy();\n         Session::start();\n         $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n         $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n         $_SESSION[\"glpiactive_entity\"]           = $entities_id;\n         $_SESSION[\"glpiactive_entity_recursive\"] = $is_recursive;\n         if ($is_recursive) {\n            $entities = getSonsOf(\"glpi_entities\", $entities_id);\n         } else {\n            $entities = [$entities_id];\n         }\n         $_SESSION['glpiactiveentities']        = $entities;\n         $_SESSION['glpiactiveentities_string'] = \"'\".implode(\"', '\", $entities).\"'\";\n         $this->computePreferences();\n         foreach ($CFG_GLPI['user_pref_field'] as $field) {\n            if (isset($this->fields[$field])) {\n               $_SESSION[\"glpi$field\"] = $this->fields[$field];\n            }\n         }\n         Session::loadGroups();\n         Session::loadLanguage();\n      }\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $ong    = [];\n            $ong[1] = __('Used items');\n            $ong[2] = __('Managed items');\n            return $ong;\n\n         case 'Preference' :\n            return __('Main');\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $item->showItems($tabnum==2);\n            return true;\n\n         case 'Preference' :\n            $user = new self();\n            $user->showMyForm($CFG_GLPI['root_doc'].\"/front/preference.php\",\n                              Session::getLoginUserID());\n            return true;\n      }\n      return false;\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addStandardTab('Profile_User', $ong, $options);\n      $this->addStandardTab('Group_User', $ong, $options);\n      $this->addStandardTab('Config', $ong, $options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('Ticket', $ong, $options);\n      $this->addStandardTab('Item_Problem', $ong, $options);\n      $this->addStandardTab('Change_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      $this->addStandardTab('Reservation', $ong, $options);\n      $this->addStandardTab('Auth', $ong, $options);\n      $this->addStandardTab('Link', $ong, $options);\n      $this->addStandardTab('Certificate_Item', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function post_getEmpty() {\n      global $CFG_GLPI;\n\n      $this->fields[\"is_active\"] = 1;\n      if (isset($CFG_GLPI[\"language\"])) {\n         $this->fields['language'] = $CFG_GLPI[\"language\"];\n      } else {\n         $this->fields['language'] = \"en_GB\";\n      }\n   }\n\n   static public function unsetUndisclosedFields(&$fields) {\n      unset($fields['password']);\n   }\n\n   function pre_deleteItem() {\n      global $DB;\n\n      $entities = $this->getEntities();\n      $view_all = Session::canViewAllEntities();\n      // Have right on all entities ?\n      $all      = true;\n      if (!$view_all) {\n         foreach ($entities as $ent) {\n            if (!Session::haveAccessToEntity($ent)) {\n               $all = false;\n            }\n         }\n      }\n      if ($all) { // Mark as deleted\n         return true;\n      }\n      // only delete profile\n      foreach ($entities as $ent) {\n         if (Session::haveAccessToEntity($ent)) {\n            $all   = false;\n            $DB->delete(\n               'glpi_profiles_users', [\n                  'users_id'     => $this->fields['id'],\n                  'entities_id'  => $ent\n               ]\n            );\n         }\n         return false;\n      }\n   }\n\n\n   function cleanDBonPurge() {\n\n      global $DB;\n\n      // ObjectLock does not extends CommonDBConnexity\n      $ol = new ObjectLock();\n      $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Reminder does not extends CommonDBConnexity\n      $r = new Reminder();\n      $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Delete private bookmark\n      $ss = new SavedSearch();\n      $ss->deleteByCriteria(\n         [\n            'users_id'   => $this->fields['id'],\n            'is_private' => 1,\n         ]\n      );\n\n      // Set no user to public bookmark\n      $DB->update(\n         SavedSearch::getTable(), [\n            'users_id' => 0\n         ], [\n            'users_id' => $this->fields['id']\n         ]\n      );\n\n      // Set no user to consumables\n      $DB->update(\n         'glpi_consumables', [\n            'items_id' => 0,\n            'itemtype' => 'NULL',\n            'date_out' => 'NULL'\n         ], [\n            'items_id' => $this->fields['id'],\n            'itemtype' => 'User'\n         ]\n      );\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Certificate_Item::class,\n            Change_User::class,\n            Group_User::class,\n            KnowbaseItem_User::class,\n            Problem_User::class,\n            Profile_User::class,\n            ProjectTaskTeam::class,\n            ProjectTeam::class,\n            Reminder_User::class,\n            RSSFeed_User::class,\n            SavedSearch_User::class,\n            Ticket_User::class,\n            UserEmail::class,\n         ]\n      );\n\n      if ($this->fields['id'] > 0) { // Security\n         // DisplayPreference does not extends CommonDBConnexity\n         $dp = new DisplayPreference();\n         $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n      }\n\n      $this->dropPictureFiles($this->fields['picture']);\n\n      // Ticket rules use various _users_id_*\n      Rule::cleanForItemAction($this, '_users_id%');\n      Rule::cleanForItemCriteria($this, '_users_id%');\n   }\n\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string $name Login of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyName($name) {\n      return $this->getFromDBByCrit(['name' => $name]);\n   }\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string  $name     Login of the user\n    * @param integer $authtype Auth type (see Auth constants)\n    * @param integer $auths_id ID of auth server\n    *\n    * @return boolean\n    */\n   function getFromDBbyNameAndAuth($name, $authtype, $auths_id) {\n      return $this->getFromDBByCrit([\n         'name'     => $name,\n         'authtype' => $authtype,\n         'auths_id' => $auths_id\n         ]);\n   }\n\n   /**\n    * Retrieve a user from the database using value of the sync field.\n    *\n    * @param string $value Value of the sync field\n    *\n    * @return boolean\n    */\n   function getFromDBbySyncField($value) {\n      return $this->getFromDBByCrit(['sync_field' => $value]);\n   }\n\n   /**\n    * Retrieve a user from the database using it's dn.\n    *\n    * @since 0.84\n    *\n    * @param string $user_dn dn of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyDn($user_dn) {\n      return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its email.\n    *\n    * @since 9.3 Can pass condition as a parameter\n    *\n    * @param string $email     user email\n    * @param array  $condition add condition\n    *\n    * @return boolean\n    */\n   function getFromDBbyEmail($email, $condition = []) {\n      global $DB;\n\n      $crit = [\n         'SELECT'    => $this->getTable() . '.id',\n         'FROM'      => $this->getTable(),\n         'LEFT JOIN'  => [\n            'glpi_useremails' => [\n               'FKEY' => [\n                  $this->getTable() => 'id',\n                  'glpi_useremails' => 'users_id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_useremails.email' => $email] + $condition\n      ];\n\n      $iter = $DB->request($crit);\n      if ($iter->numrows()==1) {\n         $row = $iter->next();\n         return $this->getFromDB($row['id']);\n      }\n      return false;\n   }\n\n\n   /**\n    * Get the default email of the user.\n    *\n    * @return string\n    */\n   function getDefaultEmail() {\n\n      if (!isset($this->fields['id'])) {\n         return '';\n      }\n\n      return UserEmail::getDefaultForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Get all emails of the user.\n    *\n    * @return string[]\n    */\n   function getAllEmails() {\n\n      if (!isset($this->fields['id'])) {\n         return [];\n      }\n      return UserEmail::getAllForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Check if the email is attached to the current user.\n    *\n    * @param string $email\n    *\n    * @return boolean\n    */\n   function isEmail($email) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return UserEmail::isEmailForUser($this->fields['id'], $email);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its personal token.\n    *\n    * @param string $token user token\n    * @param string $field the field storing the token\n    *\n    * @return boolean\n    */\n   function getFromDBbyToken($token, $field = 'personal_token') {\n      $fields = ['personal_token', 'api_token'];\n      if (!in_array($field, $fields)) {\n         Toolbox::logWarning('User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'');\n         return false;\n      }\n\n      return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $DB;\n\n      if (isset($input['_stop_import'])) {\n         return false;\n      }\n\n      if (!Auth::isValidLogin($input['name'])) {\n         Session::addMessageAfterRedirect(__('The login is not valid. Unable to add the user.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (!isset($input[\"authtype\"])) {\n         $input[\"authtype\"] = Auth::DB_GLPI;\n      }\n\n      if (!isset($input[\"auths_id\"])) {\n         $input[\"auths_id\"] = 0;\n      }\n\n      // Check if user does not exists\n      $iterator = $DB->request([\n         'FROM'   => $this->getTable(),\n         'WHERE'  => [\n            'name'      => $input['name'],\n            'authtype'  => $input['authtype'],\n            'auths_id'  => $input['auths_id']\n         ],\n         'LIMIT'  => 1\n      ]);\n\n      if (count($iterator)) {\n         Session::addMessageAfterRedirect(__('Unable to add. The user already exists.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (isset($input[\"password2\"])) {\n         if (empty($input[\"password\"])) {\n            unset ($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               if (Config::validatePassword($input[\"password\"])) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n      }\n\n      if (isset($input[\"_extauth\"])) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Force DB default values : not really needed\n      if (!isset($input[\"is_active\"])) {\n         $input[\"is_active\"] = 1;\n      }\n\n      if (!isset($input[\"is_deleted\"])) {\n         $input[\"is_deleted\"] = 0;\n      }\n\n      if (!isset($input[\"entities_id\"])) {\n         $input[\"entities_id\"] = 0;\n      }\n\n      if (!isset($input[\"profiles_id\"])) {\n         $input[\"profiles_id\"] = 0;\n      }\n\n      return $input;\n   }\n\n\n   function post_addItem() {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n\n      $rulesplayed = $this->applyRightRules();\n      $picture     = $this->syncLdapPhoto();\n\n      //add picture in user fields\n      if (!empty($picture)) {\n         $this->update(['id'      => $this->fields['id'],\n                             'picture' => $picture]);\n      }\n\n      // Add default profile\n      if (!$rulesplayed) {\n         $affectation = [];\n         if (isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n            $profile                   = $this->input['_profiles_id'];\n            // Choosen in form, so not dynamic\n            $affectation['is_dynamic'] = 0;\n         } else {\n            $profile                   = Profile::getDefault();\n            // Default right as dynamic. If dynamic rights are set it will disappear.\n            $affectation['is_dynamic'] = 1;\n         }\n\n         if ($profile) {\n            if (isset($this->input[\"_entities_id\"])) {\n               // entities_id (user's pref) always set in prepareInputForAdd\n               // use _entities_id for default right\n               $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n\n            } else if (isset($_SESSION['glpiactive_entity'])) {\n               $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n\n            } else {\n               $affectation[\"entities_id\"] = 0;\n            }\n            if (isset($this->input[\"_is_recursive\"])) {\n               $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n            } else {\n               $affectation[\"is_recursive\"] = 0;\n            }\n\n            $affectation[\"profiles_id\"]  = $profile;\n            $affectation[\"users_id\"]     = $this->fields[\"id\"];\n            $right                       = new Profile_User();\n            $right->add($affectation);\n         }\n      }\n   }\n\n\n   function prepareInputForUpdate($input) {\n      global $CFG_GLPI;\n\n      //picture manually uploaded by user\n      if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n         self::dropPictureFiles($this->fields['picture']);\n         $input['picture'] = 'NULL';\n      } else {\n         $newPicture = false;\n         if (!isAPI()) {\n            if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n               $input[\"_picture\"] = $input[\"_picture\"][0];\n            }\n         }\n         if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n            $newPicture = true;\n         }\n         if ($newPicture) {\n            $fullpath = GLPI_TMP_DIR.\"/\".$input[\"_picture\"];\n            if (toolbox::getMime($fullpath, 'image')) {\n               // Unlink old picture (clean on changing format)\n               self::dropPictureFiles($this->fields['picture']);\n               // Move uploaded file\n               $filename     = uniqid($this->fields['id'].'_');\n               $sub          = substr($filename, -2); /* 2 hex digit */\n               $tmp          = explode(\".\", $input[\"_picture\"]);\n               $extension    = Toolbox::strtolower(array_pop($tmp));\n               @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n               $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n               self::dropPictureFiles($filename.\".\".$extension);\n\n               if (Document::isImage($input[\"_picture\"])\n                   && Document::renameForce($fullpath, $picture_path)) {\n                  Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                  // For display\n                  $input['picture'] = \"$sub/${filename}.$extension\";\n\n                  //prepare a thumbnail\n                  $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                  Toolbox::resizePicture($picture_path, $thumb_path);\n               } else {\n                  Session::addMessageAfterRedirect(__('Potential upload attack or file too large. Moving temporary file failed.'),\n                        false, ERROR);\n               }\n            } else {\n               Session::addMessageAfterRedirect(__('The file is not an image file.'),\n                     false, ERROR);\n            }\n         } else {\n            //ldap jpegphoto synchronisation.\n            $picture = $this->syncLdapPhoto();\n            if (!empty($picture)) {\n               $input['picture'] = $picture;\n            }\n         }\n      }\n\n      if (isset($input[\"password2\"])) {\n         // Empty : do not update\n         if (empty($input[\"password\"])) {\n            unset($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               // Check right : my password of user with lesser rights\n               if (isset($input['id']) && Config::validatePassword($input[\"password\"])\n                   && (($input['id'] == Session::getLoginUserID())\n                       || $this->currentUserHaveMoreRightThan($input['id'])\n                       || (($input['password_forget_token'] == $this->fields['password_forget_token']) // Permit to change password with token and email\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)\n                           && $this->isEmail($input['email'])))) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n\n      } else if (isset($input[\"password\"])) { // From login\n         unset($input[\"password\"]);\n      }\n\n      // blank password when authtype changes\n      if (isset($input[\"authtype\"])\n          && $input[\"authtype\"] != Auth::DB_GLPI\n          && $input[\"authtype\"] != $this->getField('authtype')) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Update User in the database\n      if (!isset($input[\"id\"])\n          && isset($input[\"name\"])) {\n         if ($this->getFromDBbyName($input[\"name\"])) {\n            $input[\"id\"] = $this->fields[\"id\"];\n         }\n      }\n\n      if (isset($input[\"entities_id\"])\n          && (Session::getLoginUserID() === $input['id'])) {\n         $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n      }\n\n      // Security on default profile update\n      if (isset($input['profiles_id'])) {\n         if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n            unset($input['profiles_id']);\n         }\n      }\n\n      // Security on default entity  update\n      if (isset($input['entities_id'])) {\n         if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n            unset($input['entities_id']);\n         }\n      }\n\n      // Security on default group  update\n      if (isset($input['groups_id'])\n         && !Group_User::isUserInGroup($input['id'], $input['groups_id'])) {\n            unset($input['groups_id']);\n      }\n\n      if (isset($input['_reset_personal_token'])\n          && $input['_reset_personal_token']) {\n         $input['personal_token']      = self::getUniqueToken('personal_token');\n         $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      if (isset($input['_reset_api_token'])\n          && $input['_reset_api_token']) {\n         $input['api_token']      = self::getUniqueToken('api_token');\n         $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      // Manage preferences fields\n      if (Session::getLoginUserID() === $input['id']) {\n         if (isset($input['use_mode'])\n             && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])) {\n            $_SESSION['glpi_use_mode'] = $input['use_mode'];\n            //Session::loadLanguage();\n         }\n      }\n\n      foreach ($CFG_GLPI['user_pref_field'] as $f) {\n         if (isset($input[$f])) {\n            if (Session::getLoginUserID() === $input['id']) {\n               if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                  $_SESSION[\"glpi$f\"] = $input[$f];\n                  // reinit translations\n                  if ($f == 'language') {\n                     $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                     unset($_SESSION['glpimenu']);\n                  }\n               }\n            }\n            if ($input[$f] == $CFG_GLPI[$f]) {\n               $input[$f] = \"NULL\";\n            }\n         }\n      }\n\n      if (isset($input['language']) && GLPI_DEMO_MODE) {\n         unset($input['language']);\n      }\n      return $input;\n   }\n\n\n   function post_updateItem($history = 1) {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n      $this->applyRightRules();\n   }\n\n\n\n   /**\n    * Apply rules to determine dynamic rights of the user.\n    *\n    * @return boolean true if rules are applied, false otherwise\n    */\n   function applyRightRules() {\n\n      $return = false;\n\n      if ((isset($this->fields['_ruleright_process'])\n           || isset($this->input['_ruleright_process'])) // Add after a getFromLDAP\n          && isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || ($this->fields[\"authtype\"] == Auth::MAIL)\n              || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n         $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n         if (isset($this->fields[\"id\"])\n             && ($this->fields[\"id\"] > 0)\n             && isset($this->input[\"_ldap_rules\"])\n             && count($this->input[\"_ldap_rules\"])) {\n\n            //and add/update/delete only if it's necessary !\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n               $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n            } else {\n               $entities_rules = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n               $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n            } else {\n               $entities = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n               $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n            } else {\n               $rights = [];\n            }\n\n            $retrieved_dynamic_profiles = [];\n\n            //For each affectation -> write it in DB\n            foreach ($entities_rules as $entity) {\n               //Multiple entities assignation\n               if (is_array($entity[0])) {\n                  foreach ($entity[0] as $ent) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $ent,\n                        'profiles_id'  => $entity[1],\n                        'is_recursive' => $entity[2],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               } else {\n                  $retrieved_dynamic_profiles[] = [\n                     'entities_id'  => $entity[0],\n                     'profiles_id'  => $entity[1],\n                     'is_recursive' => $entity[2],\n                     'users_id'     => $this->fields['id'],\n                     'is_dynamic'   => 1,\n                  ];\n               }\n            }\n\n            if ((count($entities) > 0)\n                && (count($rights) == 0)) {\n               if ($def_prof = Profile::getDefault()) {\n                  $rights[] = $def_prof;\n               }\n            }\n\n            if ((count($rights) > 0)\n                && (count($entities) > 0)) {\n               foreach ($rights as $right) {\n                  foreach ($entities as $entity) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $entity[0],\n                        'profiles_id'  => $right,\n                        'is_recursive' => $entity[1],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               }\n            }\n\n            // Compare retrived profiles to existing ones : clean arrays to do purge and add\n            if (count($retrieved_dynamic_profiles)) {\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $found = false;\n\n                  foreach ($dynamic_profiles as $keydb => $db_profile) {\n                     // Found existing profile : unset values in array\n                     if (!$found\n                         && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                         && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                         && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])) {\n\n                        unset($retrieved_dynamic_profiles[$keyretr]);\n                        unset($dynamic_profiles[$keydb]);\n                     }\n                  }\n               }\n            }\n\n            // Add new dynamic profiles\n            if (count($retrieved_dynamic_profiles)) {\n               $right = new Profile_User();\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $right->add($retr_profile);\n               }\n            }\n\n            //Unset all the temporary tables\n            unset($this->input[\"_ldap_rules\"]);\n\n            $return = true;\n         }\n\n         // Delete old dynamic profiles\n         if (count($dynamic_profiles)) {\n            $right = new Profile_User();\n            foreach ($dynamic_profiles as $keydb => $db_profile) {\n               $right->delete($db_profile);\n            }\n         }\n\n      }\n      return $return;\n   }\n\n\n   /**\n    * Synchronise LDAP group of the user.\n    *\n    * @return void\n    */\n   function syncLdapGroups() {\n      global $DB;\n\n      // input[\"_groups\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_groups\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)) {\n               // Clean groups\n               $this->input[\"_groups\"] = array_unique ($this->input[\"_groups\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT'    => [\n                     'glpi_groups_users.id',\n                     'glpi_groups_users.groups_id',\n                     'glpi_groups_users.is_dynamic'\n                  ],\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_groups'  => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'groups_id',\n                           'glpi_groups'        => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.users_id' => $this->fields['id']\n                  ]\n               ]);\n\n               $groupuser = new Group_User();\n               while ($data =  $iterator->next()) {\n\n                  if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_groups\"][array_search($data[\"groups_id\"],\n                           $this->input[\"_groups\"])]);\n\n                  } else if ($data['is_dynamic']) {\n                     $groupuser->delete(['id' => $data[\"id\"]]);\n                  }\n               }\n\n               //If the user needs to be added to one group or more\n               if (count($this->input[\"_groups\"]) > 0) {\n                  foreach ($this->input[\"_groups\"] as $group) {\n                     $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                           'groups_id'  => $group,\n                                           'is_dynamic' => 1]);\n                  }\n                  unset ($this->input[\"_groups\"]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Synchronize picture (photo) of the user.\n    *\n    * @since 0.85\n    *\n    * @return string|boolean Filename to be stored in user picture field, false if no picture found\n    */\n   function syncLdapPhoto() {\n\n      if (isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            //connect ldap server\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n               $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n               //get picture fields\n               $picture_field = $config_ldap->fields['picture_field'];\n               if (empty($picture_field)) {\n                  return false;\n               }\n\n               //get picture content in ldap\n               $info = AuthLdap::getUserByDn($ds, $this->fields['user_dn'],\n                                             [$picture_field], false);\n\n               //getUserByDn returns an array. If the picture is empty,\n               //$info[$picture_field][0] is null\n               if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                  return \"\";\n               }\n               //prepare paths\n               $img       = array_pop($info[$picture_field]);\n               $filename  = uniqid($this->fields['id'].'_');\n               $sub       = substr($filename, -2); /* 2 hex digit */\n               $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n               if (array_key_exists('picture', $this->fields)) {\n                  $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n               } else {\n                  $oldfile = null;\n               }\n\n               // update picture if not exist or changed\n               if (empty($this->fields[\"picture\"])\n                   || !file_exists($oldfile)\n                   || sha1_file($oldfile) !== sha1($img)) {\n                  if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                     mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                  }\n\n                  //save picture\n                  $outjpeg = fopen($file, 'wb');\n                  fwrite($outjpeg, $img);\n                  fclose ($outjpeg);\n\n                  //save thumbnail\n                  $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                  Toolbox::resizePicture($file, $thumb);\n\n                  return \"$sub/${filename}.jpg\";\n               }\n               return $this->fields[\"picture\"];\n            }\n         }\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Update emails of the user.\n    * Uses _useremails set from UI, not _emails set from LDAP.\n    *\n    * @return void\n    */\n   function updateUserEmails() {\n      // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n      $userUpdated = false;\n\n      if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n         $useremail = new UserEmail();\n         foreach ($this->input['_useremails'] as $id => $email) {\n            $email = trim($email);\n\n            // existing email\n            if ($id > 0) {\n               $params = ['id' => $id];\n\n               // empty email : delete\n               if (strlen($email) == 0) {\n                  $deleted = $useremail->delete($params);\n                  $userUpdated = $userUpdated || $deleted;\n\n               } else { // Update email\n                  $params['email'] = $email;\n                  $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                  $existingUserEmail = new UserEmail();\n                  $existingUserEmail->getFromDB($id);\n                  if ($params['email'] == $existingUserEmail->fields['email']\n                      && $params['is_default'] == $existingUserEmail->fields['is_default']) {\n                     // Do not update if email has not changed\n                     continue;\n                  }\n\n                  $updated = $useremail->update($params);\n                  $userUpdated = $userUpdated || $updated;\n               }\n\n            } else { // New email\n               $email_input = ['email'    => $email,\n                               'users_id' => $this->fields['id']];\n               if (isset($this->input['_default_email'])\n                   && ($this->input['_default_email'] == $id)) {\n                  $email_input['is_default'] = 1;\n               } else {\n                  $email_input['is_default'] = 0;\n               }\n               $added = $useremail->add($email_input);\n               $userUpdated = $userUpdated || $added;\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n\n   /**\n    * Synchronise Dynamics emails of the user.\n    * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n    *\n    * @return void\n    */\n   function syncDynamicEmails() {\n      global $DB;\n\n      $userUpdated = false;\n\n      // input[\"_emails\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_emails\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)\n                || $this->fields[\"authtype\"] == Auth::EXTERNAL) {\n               // Clean emails\n               $this->input[\"_emails\"] = array_unique ($this->input[\"_emails\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT' => [\n                     'id',\n                     'users_id',\n                     'email',\n                     'is_dynamic'\n                  ],\n                  'FROM'   => 'glpi_useremails',\n                  'WHERE'  => ['users_id' => $this->fields['id']]\n               ]);\n\n               $useremail = new UserEmail();\n               while ($data = $iterator->next()) {\n                  $i = array_search($data[\"email\"], $this->input[\"_emails\"]);\n                  if ($i !== false) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_emails\"][$i]);\n                  } else if ($data['is_dynamic']) {\n                     // Delete not found email\n                     $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                     $userUpdated = $userUpdated || $deleted;\n                  }\n               }\n\n               //If the email need to be added\n               if (count($this->input[\"_emails\"]) > 0) {\n                  foreach ($this->input[\"_emails\"] as $email) {\n                     $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                               'email'      => $email,\n                                               'is_dynamic' => 1]);\n                     $userUpdated = $userUpdated || $added;\n                  }\n                  unset ($this->input[\"_emails\"]);\n               }\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n   function getRawName() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n         //getRawName should not add ID\n         $bkp_conf = $CFG_GLPI['is_ids_visible'];\n         $CFG_GLPI['is_ids_visible'] = 0;\n         $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n         $_SESSION[\"glpiis_ids_visible\"] = 0;\n         $name = formatUserName($this->fields[\"id\"],\n                               $this->fields[\"name\"],\n                               (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                               (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : ''));\n\n         $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n         $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n         return $name;\n      }\n      return '';\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the User.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User login\n    *\n    * @return string|boolean Basedn of the user / false if not found\n    */\n   private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // Search in DB the ldap_field we need to search for in LDAP\n      $iterator = $DB->request([\n         'SELECT DISTINCT' => 'ldap_field',\n         'FROM'            => 'glpi_groups',\n         'WHERE'           => ['NOT' => ['ldap_field' => '']],\n         'ORDER'           => 'ldap_field'\n      ]);\n      $group_fields = [];\n\n      while ($data = $iterator->next()) {\n         $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n      }\n      if (count($group_fields)) {\n         //Need to sort the array because edirectory don't like it!\n         sort($group_fields);\n\n         // If the groups must be retrieve from the ldap user object\n         $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n         $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         for ($i=0; $i < $v['count']; $i++) {\n            //Try to find is DN in present and needed: if yes, then extract only the OU from it\n            if ((($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                && isset($v[$i]['dn'])) {\n\n               $v[$i]['ou'] = [];\n               for ($tmp=$v[$i]['dn']; count($tmptab = explode(',', $tmp, 2))==2; $tmp=$tmptab[1]) {\n                  $v[$i]['ou'][] = $tmptab[1];\n               }\n\n               // Search in DB for group with ldap_group_dn\n               if (($ldap_method[\"group_field\"] == 'dn')\n                   && (count($v[$i]['ou']) > 0)) {\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n\n               // searching with ldap_field='OU' and ldap_value is also possible\n               $v[$i]['ou']['count'] = count($v[$i]['ou']);\n            }\n\n            // For each attribute retrieve from LDAP, search in the DB\n            foreach ($group_fields as $field) {\n               if (isset($v[$i][$field])\n                   && isset($v[$i][$field]['count'])\n                   && ($v[$i][$field]['count'] > 0)) {\n\n                  unset($v[$i][$field]['count']);\n                  $lgroups = [];\n                  foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                     $lgroups[] = [\n                        new \\QueryExpression($DB::quoteValue($lgroup).\n                                             \" LIKE \".\n                                             $DB::quoteName('ldap_value'))\n                     ];\n                  }\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => [\n                        'ldap_field' => $field,\n                        'OR'         => $lgroups\n                     ]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n            }\n         } // for each ldapresult\n      } // count($group_fields)\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the Groups.\n    *\n    * @param resource $ldap_connection    LDAP connection\n    * @param array    $ldap_method        LDAP method\n    * @param string   $userdn             Basedn of the user\n    * @param string   $login              User login\n    *\n    * @return boolean true if search is applicable, false otherwise\n    */\n   private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // No group_member_field : unable to get group\n      if (empty($ldap_method[\"group_member_field\"])) {\n         return false;\n      }\n\n      if ($ldap_method[\"use_dn\"]) {\n         $user_tmp = $userdn;\n      } else {\n         //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n         $user_tmp = $login;\n      }\n\n      $v = $this->ldap_get_user_groups($ldap_connection, $ldap_method[\"basedn\"],\n                                       $user_tmp,\n                                       $ldap_method[\"group_condition\"],\n                                       $ldap_method[\"group_member_field\"],\n                                       $ldap_method[\"use_dn\"],\n                                       $ldap_method[\"login_field\"]);\n      foreach ($v as $result) {\n         if (isset($result[$ldap_method[\"group_member_field\"]])\n             && is_array($result[$ldap_method[\"group_member_field\"]])\n             && (count($result[$ldap_method[\"group_member_field\"]]) > 0)) {\n\n             $iterator = $DB->request([\n               'SELECT' => 'id',\n               'FROM'   => 'glpi_groups',\n               'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n             ]);\n\n            while ($group = $iterator->next()) {\n               $this->fields[\"_groups\"][] = $group['id'];\n            }\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from LDAP.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User Login\n    * @param boolean  $import          true for import, false for update\n    *\n    * @return boolean true if found / false if not\n    */\n   function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true) {\n      global $DB, $CFG_GLPI;\n\n      // we prevent some delay...\n      if (empty($ldap_method[\"host\"])) {\n         return false;\n      }\n\n      if (is_resource($ldap_connection)) {\n         //Set all the search fields\n         $this->fields['password'] = \"\";\n\n         $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n         //Hook to allow plugin to request more attributes from ldap\n         $fields = Plugin::doHookFunction(\"retrieve_more_field_from_ldap\", $fields);\n\n         $fields  = array_filter($fields);\n         $f       = self::getLdapFieldNames($fields);\n\n         $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n         $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         if (!is_array($v)\n             || ( count($v) == 0)\n             || empty($v[0][$fields['name']][0])) {\n            return false;\n         }\n\n         //Store user's dn\n         $this->fields['user_dn']    = addslashes($userdn);\n         //Store date_sync\n         $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n         // Empty array to ensure than syncDynamicEmails will be done\n         $this->fields[\"_emails\"]    = [];\n         // force authtype as we retrieve this user by ldap (we could have login with SSO)\n         $this->fields[\"authtype\"] = Auth::LDAP;\n\n         foreach ($fields as $k => $e) {\n            $val = AuthLDAP::getFieldValue(\n               [$e => self::getLdapFieldValue($e, $v)],\n               $e\n            );\n            if (empty($val)) {\n               switch ($k) {\n                  case \"language\" :\n                     // Not set value : managed but user class\n                     break;\n\n                  case \"usertitles_id\" :\n                  case \"usercategories_id\" :\n                  case 'locations_id' :\n                  case 'users_id_supervisor' :\n                     $this->fields[$k] = 0;\n                     break;\n\n                  default :\n                     $this->fields[$k] = \"\";\n               }\n\n            } else {\n               $val = Toolbox::addslashes_deep($val);\n               switch ($k) {\n                  case \"email1\" :\n                  case \"email2\" :\n                  case \"email3\" :\n                  case \"email4\" :\n                     // Manage multivaluable fields\n                     if (!empty($v[0][$e])) {\n                        foreach ($v[0][$e] as $km => $m) {\n                           if (!preg_match('/count/', $km)) {\n                              $this->fields[\"_emails\"][] = addslashes($m);\n                           }\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                     }\n                     break;\n\n                  case \"language\" :\n                     $language = Config::getLanguage($val);\n                     if ($language != '') {\n                        $this->fields[$k] = $language;\n                     }\n                     break;\n\n                  case \"usertitles_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                     break;\n\n                  case 'locations_id' :\n                     // use import to build the location tree\n                     $this->fields[$k] = Dropdown::import('Location',\n                                                          ['completename' => $val,\n                                                           'entities_id'  => 0,\n                                                           'is_recursive' => 1]);\n                    break;\n\n                  case \"usercategories_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                     break;\n\n                  case 'users_id_supervisor':\n                     $this->fields[$k] = self::getIdByField('user_dn', $val);\n                     break;\n\n                  default :\n                     $this->fields[$k] = $val;\n               }\n            }\n         }\n\n         // Empty array to ensure than syncLdapGroups will be done\n         $this->fields[\"_groups\"] = [];\n\n         ///The groups are retrieved by looking into an ldap user object\n         if (($ldap_method[\"group_search_type\"] == 0)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///The groups are retrived by looking into an ldap group object\n         if (($ldap_method[\"group_search_type\"] == 1)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///Only process rules if working on the master database\n         if (!$DB->isSlave()) {\n            //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            //Process affectation rules :\n            //we don't care about the function's return because all\n            //the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n               $groups = $this->fields[\"_groups\"];\n            } else {\n               $groups = [];\n            }\n\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields),\n                                                   ['type'        => 'LDAP',\n                                                         'ldap_server' => $ldap_method[\"id\"],\n                                                         'connection'  => $ldap_connection,\n                                                         'userdn'      => $userdn,\n                                                         'login'       => $this->fields['name'],\n                                                         'mail_email'  => $this->fields['_emails']]);\n\n            $this->fields['_ruleright_process'] = true;\n\n            //If rule  action is ignore import\n            if ($import\n                && isset($this->fields[\"_stop_import\"])) {\n               return false;\n            }\n            //or no rights found & do not import users with no rights\n            if ($import\n                && !$CFG_GLPI[\"use_noright_users_add\"]) {\n               $ok = false;\n               if (isset($this->fields[\"_ldap_rules\"])\n                   && count($this->fields[\"_ldap_rules\"])) {\n                  if (isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                      && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                     $ok = true;\n                  }\n                  if (!$ok) {\n                     $entity_count = 0;\n                     $right_count  = 0;\n                     if (Profile::getDefault()) {\n                        $right_count++;\n                     }\n                     if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                        $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                     }\n                     if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                        $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                     }\n                     if ($entity_count && $right_count) {\n                        $ok = true;\n                     }\n                  }\n               }\n               if (!$ok) {\n                  $this->fields[\"_stop_import\"] = true;\n                  return false;\n               }\n            }\n\n            // Add ldap result to data send to the hook\n            $this->fields['_ldap_result'] = $v;\n            $this->fields['_ldap_conn']   = $ldap_connection;\n            //Hook to retrieve more information for ldap\n            $this->fields = Plugin::doHookFunction(\"retrieve_more_data_from_ldap\", $this->fields);\n            unset($this->fields['_ldap_result']);\n         }\n         return true;\n      }\n      return false;\n\n   } // getFromLDAP()\n\n\n   /**\n    * Get all groups a user belongs to.\n    *\n    * @param resource $ds                 ldap connection\n    * @param string   $ldap_base_dn       Basedn used\n    * @param string   $user_dn            Basedn of the user\n    * @param string   $group_condition    group search condition\n    * @param string   $group_member_field group field member in a user object\n    * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n    * @param string   $login_field        user login field\n    *\n    * @return array Groups of the user located in [0][$group_member_field] in returned array\n    */\n   function ldap_get_user_groups($ds, $ldap_base_dn, $user_dn, $group_condition,\n                                 $group_member_field, $use_dn, $login_field) {\n\n      $groups     = [];\n      $listgroups = [];\n\n      //User dn may contain ( or ), need to espace it!\n      $user_dn = str_replace([\"(\", \")\", \"\\,\", \"\\+\"], [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n                             $user_dn);\n\n      //Only retrive cn and member attributes from groups\n      $attrs = ['dn'];\n\n      if (!$use_dn) {\n         $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n      } else {\n         $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n      }\n\n      //Perform the search\n      $filter = Toolbox::unclean_cross_side_scripting_deep($filter);\n      $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n      //Get the result of the search as an array\n      $info = AuthLDAP::get_entries_clean($ds, $sr);\n      //Browse all the groups\n      for ($i = 0; $i < count($info); $i++) {\n         //Get the cn of the group and add it to the list of groups\n         if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n            $listgroups[$i] = $info[$i][\"dn\"];\n         }\n      }\n\n      //Create an array with the list of groups of the user\n      $groups[0][$group_member_field] = $listgroups;\n      //Return the groups of the user\n      return $groups;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from IMAP.\n    *\n    * @param array  $mail_method  mail method description array\n    * @param string $name         login of the user\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromIMAP(array $mail_method, $name) {\n      global $DB;\n\n      // we prevent some delay..\n      if (empty($mail_method[\"host\"])) {\n         return false;\n      }\n\n      // some defaults...\n      $this->fields['password']  = \"\";\n      // Empty array to ensure than syncDynamicEmails will be done\n      $this->fields[\"_emails\"]   = [];\n      $email                     = '';\n      if (strpos($name, \"@\")) {\n         $email = $name;\n      } else {\n         $email = $name . \"@\" . $mail_method[\"host\"];\n      }\n      $this->fields[\"_emails\"][] = $email;\n\n      $this->fields['name']      = $name;\n      //Store date_sync\n      $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n      // force authtype as we retrieve this user by imap (we could have login with SSO)\n      $this->fields[\"authtype\"] = Auth::MAIL;\n\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         //Process affectation rules :\n         //we don't care about the function's return because all the datas are stored in session temporary\n         if (isset($this->fields[\"_groups\"])) {\n            $groups = $this->fields[\"_groups\"];\n         } else {\n            $groups = [];\n         }\n         $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields),\n                                                ['type'        => 'MAIL',\n                                                      'mail_server' => $mail_method[\"id\"],\n                                                      'login'       => $name,\n                                                      'email'       => $email]);\n         $this->fields['_ruleright_process'] = true;\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from the SSO server.\n    *\n    * @since 0.84\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromSSO() {\n      global $DB, $CFG_GLPI;\n\n      $a_field = [];\n      foreach ($CFG_GLPI as $key=>$value) {\n         if (!is_array($value) && !empty($value)\n             && strstr($key, \"_ssofield\")) {\n            $key = str_replace('_ssofield', '', $key);\n            $a_field[$key] = $value;\n         }\n      }\n\n      if (count($a_field) == 0) {\n         return true;\n      }\n      $this->fields['_ruleright_process'] = true;\n      foreach ($a_field as $field=>$value) {\n         if (!isset($_SERVER[$value])\n             || empty($_SERVER[$value])) {\n\n            switch ($field) {\n               case \"title\" :\n                  $this->fields['usertitles_id'] = 0;\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id'] = 0;\n                  break;\n\n               default :\n                  $this->fields[$field] = \"\";\n            }\n\n         } else {\n            switch ($field) {\n               case \"email1\" :\n               case \"email2\" :\n               case \"email3\" :\n               case \"email4\" :\n                  // Manage multivaluable fields\n                  if (!preg_match('/count/', $_SERVER[$value])) {\n                     $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                  }\n                  // Only get them once if duplicated\n                  $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                  break;\n\n               case \"language\" :\n                  $language = Config::getLanguage($_SERVER[$value]);\n                  if ($language != '') {\n                     $this->fields[$field] = $language;\n                  }\n                  break;\n\n               case \"title\" :\n                  $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                  break;\n\n               default :\n                  $this->fields[$field] = $_SERVER[$value];\n                  break;\n\n            }\n         }\n      }\n       ///Only process rules if working on the master database\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields),\n                                                ['type'   => 'SSO',\n                                                      'email'  => $this->fields[\"_emails\"],\n                                                      'login'  => $this->fields[\"name\"]]);\n\n         //If rule  action is ignore import\n         if (isset($this->fields[\"_stop_import\"])) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Blank passwords field of a user in the DB.\n    * Needed for external auth users.\n    *\n    * @return void\n    */\n   function blankPassword() {\n      global $DB;\n\n      if (!empty($this->fields[\"name\"])) {\n         $DB->update(\n            $this->getTable(), [\n               'password' => ''\n            ], [\n               'name' => $this->fields['name']\n            ]\n         );\n      }\n   }\n\n\n   /**\n    * Print a good title for user pages.\n    *\n    * @return void\n    */\n   function title() {\n      global $CFG_GLPI;\n\n      $buttons = [];\n      $title   = self::getTypeName(Session::getPluralNumber());\n\n      if (static::canCreate()) {\n         $buttons[\"user.form.php\"] = __('Add user...');\n         $title                    = \"\";\n\n         if (Auth::useAuthExt()\n             && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            // This requires write access because don't use entity config.\n            $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = __('... From an external source');\n         }\n      }\n      if (Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n         && (static::canCreate() || static::canUpdate())) {\n         if (AuthLdap::useAuthLdap()) {\n            $buttons[\"ldap.php\"] = __('LDAP directory link');\n         }\n      }\n      Html::displayTitle($CFG_GLPI[\"root_doc\"] . \"/pics/users.png\", self::getTypeName(Session::getPluralNumber()), $title,\n                         $buttons);\n   }\n\n\n   /**\n    * Check if current user have more right than the specified one.\n    *\n    * @param integer $ID ID of the user\n    *\n    * @return boolean\n    */\n   function currentUserHaveMoreRightThan($ID) {\n\n      $user_prof = Profile_User::getUserProfiles($ID);\n      return Profile::currentUserHaveMoreRightThan($user_prof);\n   }\n\n\n   /**\n    * Print the user form.\n    *\n    * @param integer $ID    ID of the user\n    * @param array $options Options\n    *     - string   target        Form target\n    *     - boolean  withtemplate  Template or basic item\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showForm($ID, array $options = []) {\n      global $CFG_GLPI;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID()) && !self::canView()) {\n         return false;\n      }\n\n      $this->initForm($ID, $options);\n\n      $ismyself = $ID == Session::getLoginUserID();\n      $higherrights = $this->currentUserHaveMoreRightThan($ID);\n      if ($ID) {\n         $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n      } else {\n         // can edit on creation form\n         $caneditpassword = true;\n      }\n\n      $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n      $formtitle = $this->getTypeName(1);\n\n      if ($ID > 0) {\n         $formtitle .= \"<a class='pointer far fa-address-card' target='_blank' href='\".$CFG_GLPI[\"root_doc\"].\n                       User::getFormURLWithID($ID).\"&amp;getvcard=1' title='\".__s('Download user VCard').\n                       \"'><span class='sr-only'>\". __('Vcard').\"</span></a>\";\n      }\n\n      $options['formtitle']   = $formtitle;\n      $options['formoptions'] = \" enctype='multipart/form-data'\";\n      $this->showFormHeader($options);\n      $rand = mt_rand();\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n      if ($this->fields[\"name\"] == \"\" ||\n          !empty($this->fields[\"password\"])\n          || ($this->fields[\"authtype\"] == Auth::DB_GLPI) ) {\n         //display login field for new records, or if this is not external auth\n         echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      } else {\n         echo \"<td class='b'>\" . $this->fields[\"name\"];\n         echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      }\n\n      if (!empty($this->fields[\"name\"])) {\n         echo \"<td rowspan='4'>\" . __('Picture') . \"</td>\";\n         echo \"<td rowspan='4'>\";\n         echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n         echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n         // echo \"<img src='\".self::getURLForPicture($this->fields[\"picture\"]).\"' class='user_picture'/>\";\n         echo \"</div>\";\n         $full_picture = \"<div class='user_picture_border'>\";\n         $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                            User::getURLForPicture($this->fields['picture']).\"'>\";\n         $full_picture .= \"</div>\";\n\n         Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n         echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n         echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\".__('Clear');\n         echo \"</td>\";\n      } else {\n         echo \"<td rowspan='4'></td>\";\n         echo \"<td rowspan='4'></td>\";\n      }\n      echo \"</tr>\";\n\n      //If it's an external auth, check if the sync_field must be displayed\n      if ($extauth\n         && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n         $syncrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n         if (self::canUpdate()\n             && (!$extauth || empty($ID))) {\n                Html::autocompletionTextField($this, \"sync_field\", ['rand' => $syncrand]);\n         } else {\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n         }\n         echo \"</td></tr>\";\n      } else {\n         echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n      }\n\n      $surnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n      echo \"</td></tr>\";\n\n      $firstnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n      echo \"</td></tr>\";\n\n      //do some rights verification\n      if (self::canUpdate()\n          && (!$extauth || empty($ID))\n          && $caneditpassword) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password'>\" . __('Password').\"</label></td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='off' onkeyup=\\\"return passwordCheck();\\\"></td>\";\n         echo \"<td rowspan='2'>\";\n         if ($CFG_GLPI[\"use_password_security\"]) {\n            echo __('Password security policy');\n         }\n         echo \"</td>\";\n         echo \"<td rowspan='2'>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n         echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='off'>\";\n         echo \"</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!GLPI_DEMO_MODE) {\n         $activerand = mt_rand();\n         echo \"<td><label for='dropdown_is_active$activerand'>\".__('Active').\"</label></td><td>\";\n         Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'></td>\";\n      }\n      echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n      UserEmail::showAddEmailButton($this);\n      echo \"</td><td>\";\n      UserEmail::showForUser($this);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if (!GLPI_DEMO_MODE) {\n         $sincerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='showdate$sincerand'>\".__('Valid since').\"</label></td><td>\";\n         Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                'rand'        => $sincerand,\n                                                'timestep'    => 1,\n                                                'maybeempty'  => true]);\n         echo \"</td>\";\n\n         $untilrand = mt_rand();\n         echo \"<td><label for='showdate$untilrand'>\".__('Valid until').\"</label></td><td>\";\n         Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                              'rand'        => $untilrand,\n                                              'timestep'    => 1,\n                                              'maybeempty'  => true]);\n         echo \"</td></tr>\";\n      }\n\n      $phonerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone$phonerand'>\" .  __('Phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n      echo \"</td>\";\n      //Authentications information : auth method used and server used\n      //don't display is creation of a new user'\n      if (!empty($ID)) {\n         if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n            echo \"<td>\" . __('Authentication') . \"</td><td>\";\n            echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n            if (!empty($this->fields[\"date_sync\"])) {\n               //TRANS: %s is the date of last sync\n               echo '<br>'.sprintf(__('Last synchronization on %s'),\n                                   HTML::convDateTime($this->fields[\"date_sync\"]));\n            }\n            if (!empty($this->fields[\"user_dn\"])) {\n               //TRANS: %s is the user dn\n               echo '<br>'.sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n            }\n            if ($this->fields['is_deleted_ldap']) {\n               echo '<br>'.__('User missing in LDAP directory');\n            }\n\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n      } else {\n         echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n      }\n\n      echo \"</tr>\";\n\n      $mobilerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n      echo \"</td>\";\n      $catrand = mt_rand();\n      echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . __('Category') . \"</label></td><td>\";\n      UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n      echo \"</td></tr>\";\n\n      $phone2rand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n      echo \"</td>\";\n      echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n      echo \"<td class='center middle' rowspan='4'>\";\n      echo \"<textarea cols='45' rows='6' id='comment' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      $admnumrand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n      echo \"</td></tr>\";\n\n      $titlerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n      UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!empty($ID)) {\n         $locrand = mt_rand();\n         echo \"<td><label for='dropdown_locations_id$locrand'>\" . __('Location') . \"</label></td><td>\";\n         $entities = $this->getEntities();\n         if (count($entities) <= 0) {\n            $entities = -1;\n         }\n         Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n         echo \"</td>\";\n      }\n      echo \"</tr>\";\n\n      if (empty($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<th colspan='2'>\"._n('Authorization', 'Authorizations', 1).\"</th>\";\n         $recurrand = mt_rand();\n         echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n         Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n         echo \"</td></tr>\";\n         $profilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  __('Profile') . \"</label></td><td>\";\n         Profile::dropdownUnder(['name'  => '_profiles_id',\n                                 'rand'  => $profilerand,\n                                 'value' => Profile::getDefault()]);\n\n         $entrand = mt_rand();\n         echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  __('Entity') . \"</label></td><td>\";\n         Entity::dropdown(['name'                => '_entities_id',\n                           'display_emptychoice' => false,\n                           'rand'                => $entrand,\n                           'entity'              => $_SESSION['glpiactiveentities']]);\n         echo \"</td></tr>\";\n      } else {\n         if ($higherrights || $ismyself) {\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n            $options   = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                         Profile_User::getUserProfiles($this->fields['id']));\n\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n         }\n         if ($higherrights) {\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n            echo \"</td></tr>\";\n\n            $grouprand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n            $options = [];\n            foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n               $options[$group['id']] = $group['completename'];\n            }\n\n            Dropdown::showFromArray(\"groups_id\", $options,\n                                    ['value'               => $this->fields[\"groups_id\"],\n                                     'rand'                => $grouprand,\n                                     'display_emptychoice' => true]);\n\n            echo \"</td>\";\n            $userrand = mt_rand();\n            echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n            User::dropdown(['name'   => 'users_id_supervisor',\n                            'value'  => $this->fields[\"users_id_supervisor\"],\n                            'rand'   => $userrand,\n                            'entity' => $_SESSION[\"glpiactive_entity\"],\n                            'right'  => 'all']);\n            echo \"</td></tr>\";\n         }\n\n         if ($this->can($ID, UPDATE)) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_personal_token', [\n                                    'value'    => $this->fields[\"personal_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_api_token', [\n                                    'value'    => $this->fields[\"api_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2' class='center'>\";\n         if ($this->fields[\"last_login\"]) {\n            printf(__('Last login on %s'), HTML::convDateTime($this->fields[\"last_login\"]));\n         }\n         echo \"</td><td colspan='2'class='center'>\";\n\n         echo \"</td></tr>\";\n      }\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /** Print the user personnal information for check.\n    *\n    * @param integer $userid ID of the user\n    *\n    * @return void|boolean false if user is not the current user, otherwise print form\n    *\n    * @since 0.84\n    */\n   static function showPersonalInformation($userid) {\n      global $CFG_GLPI;\n\n      $user = new self();\n      if (!$user->can($userid, READ)\n          && ($userid != Session::getLoginUserID())) {\n         return false;\n      }\n      echo \"<table class='tab_glpi left' width='100%'>\";\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b' width='20%'>\";\n      echo __('Name');\n      echo \"</td><td width='30%'>\";\n      echo getUserName($userid);\n      echo \"</td>\";\n      echo \"<td class='b'  width='20%'>\";\n      echo __('Phone');\n      echo \"</td><td width='30%'>\";\n      echo $user->getField('phone');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Phone 2');\n      echo \"</td><td>\";\n      echo $user->getField('phone2');\n      echo \"</td>\";\n      echo \"<td class='b'>\";\n      echo __('Mobile phone');\n      echo \"</td><td>\";\n      echo $user->getField('mobile');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Email');\n      echo \"</td><td>\";\n      echo $user->getDefaultEmail();\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Location');\n      echo \"</td><td>\";\n      echo Dropdown::getDropdownName('glpi_locations', $user->getField('locations_id'));\n      echo \"</td>\";\n      echo \"<td colspan='2' class='center'>\";\n      if ($userid == Session::getLoginUserID()) {\n         echo \"<a href='\".$CFG_GLPI['root_doc'].\"/front/preference.php' class='vsubmit'>\".\n               __('Edit').\"</a>\";\n      } else {\n         echo \"&nbsp;\";\n      }\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Print the user preference form.\n    *\n    * @param string  $target Form target\n    * @param integer $ID     ID of the user\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showMyForm($target, $ID) {\n      global $CFG_GLPI;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID())\n          && !$this->currentUserHaveMoreRightThan($ID)) {\n         return false;\n      }\n      if ($this->getFromDB($ID)) {\n         $rand     = mt_rand();\n         $authtype = $this->getAuthMethodsByID();\n\n         $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n         // No autocopletion :\n         $save_autocompletion                 = $CFG_GLPI[\"use_ajax_autocompletion\"];\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = false;\n\n         echo \"<div class='center'>\";\n         echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\".$target.\"' autocomplete='off'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n         echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n         echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n         echo \"</th></tr>\";\n\n         $surnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['realname_field'])\n             && !empty($authtype['realname_field'])) {\n\n            echo $this->fields[\"realname\"];\n         } else {\n            Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n         }\n         echo \"</td>\";\n\n         if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='4'>\" . __('Picture') . \"</td>\";\n            echo \"<td rowspan='4'>\";\n            echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n            echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                   User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n            echo \"</div>\";\n            $full_picture  = \"<div class='user_picture_border'>\";\n            $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                              User::getURLForPicture($this->fields['picture']).\"'>\";\n            $full_picture .= \"</div>\";\n\n            Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n            echo \"&nbsp;\";\n            Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n            echo \"&nbsp;\".__('Clear');\n\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n         $firstnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['firstname_field'])\n             && !empty($authtype['firstname_field'])) {\n\n            echo $this->fields[\"firstname\"];\n         } else {\n            Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n         }\n         echo \"</td></tr>\";\n\n         if ($extauth\n            && $this->fields['auths_id']\n               && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n            echo \"</td></tr>\";\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         if (!GLPI_DEMO_MODE) {\n            $langrand = mt_rand();\n            echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n            // Language is stored as null in DB if value is same as the global config.\n            $language = $this->fields[\"language\"];\n            if (null === $this->fields[\"language\"]) {\n               $language = $CFG_GLPI['language'];\n            }\n            Dropdown::showLanguages(\n               \"language\",\n               [\n                  'rand'  => $langrand,\n                  'value' => $language,\n               ]\n            );\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         //do some rights verification\n         if (!$extauth\n             && Session::haveRight(\"password_update\", \"1\")) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='off' onkeyup=\\\"return passwordCheck();\\\">\";\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            if ($CFG_GLPI[\"use_password_security\"]) {\n               echo __('Password security policy');\n            }\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            Config::displayPasswordSecurityChecks();\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='off'>\";\n            echo \"</td></tr>\";\n\n         }\n\n         $phonerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  __('Phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone_field']) && !empty($authtype['phone_field'])) {\n            echo $this->fields[\"phone\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n         }\n         echo \"</td>\";\n         echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n         UserEmail::showAddEmailButton($this);\n         echo \"</td><td>\";\n         UserEmail::showForUser($this);\n         echo \"</td>\";\n         echo \"</tr>\";\n\n         $mobilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])) {\n            echo $this->fields[\"mobile\"];\n         } else {\n            Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n         }\n         echo \"</td>\";\n\n         if (count($_SESSION['glpiprofiles']) >1) {\n            $profilerand = mt_rand();\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n            $options = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                       Profile_User::getUserProfiles($this->fields['id']));\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         $phone2rand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])) {\n            echo $this->fields[\"phone2\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n         }\n         echo \"</td>\";\n\n         $entities = $this->getEntities();\n         if (!GLPI_DEMO_MODE\n             && (count($_SESSION['glpiactiveentities']) > 1)) {\n            $entrand = mt_rand();\n            echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n            Entity::dropdown(['value'  => $this->fields['entities_id'],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         $admnumrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])) {\n            echo $this->fields[\"registration_number\"];\n         } else {\n            Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n         }\n         echo \"</td><td colspan='2'></td></tr>\";\n\n         $locrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . __('Location') . \"</label></td><td>\";\n         Location::dropdown(['value'  => $this->fields['locations_id'],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n\n         if (Config::canUpdate()) {\n            $moderand = mt_rand();\n            echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n            $modes = [\n               Session::NORMAL_MODE => __('Normal'),\n               Session::DEBUG_MODE  => __('Debug'),\n            ];\n            Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"Personal token\");\n         echo \"</td><td colspan='2'>\";\n\n         if (!empty($this->fields[\"personal_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_personal_token', [\n                                 'value'    => $this->fields[\"personal_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_personal_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"API token\");\n         echo \"</td><td colspan='2'>\";\n         if (!empty($this->fields[\"api_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_api_token', [\n                                 'value'    => $this->fields[\"api_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_api_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n         echo \"<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = $save_autocompletion;\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Get all the authentication method parameters for the current user.\n    *\n    * @return array\n    */\n   function getAuthMethodsByID() {\n      return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n   }\n\n\n   function pre_updateInDB() {\n      global $DB;\n\n      if (($key = array_search('name', $this->updates)) !== false) {\n         /// Check if user does not exists\n         $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'name'   => $this->input['name'],\n               'id'     => ['<>', $this->input['id']]\n            ]\n         ]);\n\n         if (count($iterator)) {\n            //To display a message\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('Unable to update login. A user already exists.'),\n                                             false, ERROR);\n         }\n\n         if (!Auth::isValidLogin($this->input['name'])) {\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('The login is not valid. Unable to update login.'),\n                                             false, ERROR);\n         }\n\n      }\n\n      /// Security system except for login update\n      if (Session::getLoginUserID()\n          && !Session::haveRight(\"user\", UPDATE)\n          && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")) {\n\n         if (Session::getLoginUserID() === $this->input['id']) {\n            if (isset($this->fields[\"authtype\"])) {\n\n               // extauth ldap case\n               if ($_SESSION[\"glpiextauth\"]\n                   && (($this->fields[\"authtype\"] == Auth::LDAP)\n                       || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n                  $authtype = Auth::getMethodsByID($this->fields[\"authtype\"],\n                                                   $this->fields[\"auths_id\"]);\n                  if (count($authtype)) {\n                     $fields = AuthLDAP::getSyncFields($authtype);\n                     foreach ($fields as $key => $val) {\n                        if (!empty($val)\n                            && (($key2 = array_search($key, $this->updates)) !== false)) {\n\n                           unset ($this->updates[$key2]);\n                           unset($this->oldvalues[$key]);\n\n                        }\n                     }\n                  }\n               }\n\n               if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n                  unset ($this->updates[$key]);\n                  unset($this->oldvalues['is_active']);\n               }\n\n               if (($key = array_search(\"comment\", $this->updates)) !== false) {\n                  unset ($this->updates[$key]);\n                  unset($this->oldvalues['comment']);\n               }\n            }\n         }\n      }\n   }\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n      if ($isadmin) {\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = __('Associate to a group');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a group');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = __('Associate to a profile');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a profile');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'change_group_user']\n                                                         = __(\"Move to group\");\n      }\n\n      if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         $prefix                                    = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n         $actions[$prefix.'change_authtype']        = _x('button', 'Change the authentication method');\n         $actions[$prefix.'force_user_ldap_update'] = __('Force synchronization');\n      }\n      return $actions;\n   }\n\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n      global $CFG_GLPI;\n\n      switch ($ma->getAction()) {\n         case 'change_authtype' :\n            $rand             = Auth::dropdown(['name' => 'authtype']);\n            $paramsmassaction = ['authtype' => '__VALUE__'];\n            Ajax::updateItemOnSelectEvent(\"dropdown_authtype$rand\", \"show_massiveaction_field\",\n                                          $CFG_GLPI[\"root_doc\"].\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                                          $paramsmassaction);\n            echo \"<span id='show_massiveaction_field'><br><br>\";\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']).\"</span>\";\n            return true;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'force_user_ldap_update' :\n            foreach ($ids as $id) {\n               if ($item->can($id, UPDATE)) {\n                  if (($item->fields[\"authtype\"] == Auth::LDAP)\n                      || ($item->fields[\"authtype\"] == Auth::EXTERNAL)) {\n                     if (AuthLdap::forceOneUserSynchronization($item, false)) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                  }\n               } else {\n                  $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                  $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n               }\n            }\n            return;\n\n         case 'change_authtype' :\n            $input = $ma->getInput();\n            if (!isset($input[\"authtype\"])\n                || !isset($input[\"auths_id\"])) {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n               return;\n            }\n            if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n               if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n               } else {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               }\n            } else {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      // forcegroup by on name set force group by for all items\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Login'),\n         'datatype'           => 'itemlink',\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '34',\n         'table'              => $this->getTable(),\n         'field'              => 'realname',\n         'name'               => __('Last name'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'firstname',\n         'name'               => __('First name'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => 'glpi_useremails',\n         'field'              => 'email',\n         'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n         'datatype'           => 'email',\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ],\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '150',\n         'table'              => $this->getTable(),\n         'field'              => 'picture',\n         'name'               => __('Picture'),\n         'datatype'           => 'specific',\n         'nosearch'           => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '28',\n         'table'              => $this->getTable(),\n         'field'              => 'sync_field',\n         'name'               => __('Synchronization field'),\n         'massiveaction'      => false,\n         'datatype'           => 'string'\n      ];\n\n      $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_active',\n         'name'               => __('Active'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'phone',\n         'name'               => __('Phone'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'phone2',\n         'name'               => __('Phone 2'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'mobile',\n         'name'               => __('Mobile phone'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '13',\n         'table'              => 'glpi_groups',\n         'field'              => 'completename',\n         'name'               => _n('Group', 'Groups', Session::getPluralNumber()),\n         'forcegroupby'       => true,\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_groups_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '14',\n         'table'              => $this->getTable(),\n         'field'              => 'last_login',\n         'name'               => __('Last login'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '15',\n         'table'              => $this->getTable(),\n         'field'              => 'authtype',\n         'name'               => __('Authentication'),\n         'massiveaction'      => false,\n         'datatype'           => 'specific',\n         'searchtype'         => 'equals',\n         'additionalfields'   => [\n            '0'                  => 'auths_id'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '30',\n         'table'              => 'glpi_authldaps',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('LDAP directory for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n             'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::LDAP\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '31',\n         'table'              => 'glpi_authmails',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('Email server for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::MAIL\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'language',\n         'name'               => __('Language'),\n         'datatype'           => 'language',\n         'display_emptychoice' => true,\n         'emptylabel'         => 'Default value'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => sprintf(__('%1$s (%2$s)'), _n('Profile', 'Profiles', Session::getPluralNumber()),\n                                                 _n('Entity', 'Entities', 1)),\n         'forcegroupby'       => true,\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '21',\n         'table'              => $this->getTable(),\n         'field'              => 'user_dn',\n         'name'               => __('User DN'),\n         'massiveaction'      => false,\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '22',\n         'table'              => $this->getTable(),\n         'field'              => 'registration_number',\n         'name'               => __('Administrative number'),\n         'datatype'           => 'string'\n      ];\n\n      $tab[] = [\n         'id'                 => '23',\n         'table'              => $this->getTable(),\n         'field'              => 'date_sync',\n         'datatype'           => 'datetime',\n         'name'               => __('Last synchronization'),\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '24',\n         'table'              => $this->getTable(),\n         'field'              => 'is_deleted_ldap',\n         'name'               => __('Deleted user in LDAP directory'),\n         'datatype'           => 'bool',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '80',\n         'table'              => 'glpi_entities',\n         'linkfield'          => 'entities_id',\n         'field'              => 'completename',\n         'name'               => sprintf(__('%1$s (%2$s)'), _n('Entity', 'Entities', Session::getPluralNumber()),\n                                                 _n('Profile', 'Profiles', 1)),\n         'forcegroupby'       => true,\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '81',\n         'table'              => 'glpi_usertitles',\n         'field'              => 'name',\n         'name'               => __('Title'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '82',\n         'table'              => 'glpi_usercategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '79',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => __('Default profile'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '77',\n         'table'              => 'glpi_entities',\n         'field'              => 'name',\n         'massiveaction'      => true,\n         'name'               => __('Default entity'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '62',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Begin date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '63',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('End date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '60',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets as requester'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = ' . CommonITILActor::REQUESTER\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '61',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of written tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child',\n            'linkfield'          => 'users_id_recipient'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '64',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of assigned tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = '.CommonITILActor::ASSIGN\n               ]\n            ]\n         ]\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'authtype':\n            $auths_id = 0;\n            if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n               $auths_id = $values['auths_id'];\n            }\n            return Auth::getMethodName($values[$field], $auths_id);\n         case 'picture':\n            if (isset($options['html']) && $options['html']) {\n               return Html::image(self::getThumbnailURLForPicture($values['picture']),\n                                  ['class' => 'user_picture_small', 'alt' => __('Picture')]);\n            }\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n      switch ($field) {\n         case 'authtype' :\n            $options['name'] = $name;\n            $options['value'] = $values[$field];\n            return Auth::dropdown($options);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   /**\n    * Get all groups where the current user have delegating.\n    *\n    * @since 0.83\n    *\n    * @param integer|string $entities_id ID of the entity to restrict\n    *\n    * @return integer[]\n    */\n   static function getDelegateGroupsForUser($entities_id = '') {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT DISTINCT' => 'glpi_groups_users.groups_id',\n         'FROM'            => 'glpi_groups_users',\n         'INNER JOIN'      => [\n            'glpi_groups'  => [\n               'FKEY'   => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'           => [\n            'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n            'glpi_groups_users.is_userdelegate' => 1\n         ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n      ]);\n\n      $groups = [];\n      while ($data = $iterator->next()) {\n         $groups[$data['groups_id']] = $data['groups_id'];\n      }\n      return $groups;\n   }\n\n\n   /**\n    * Execute the query to select box with all glpi users where select key = name\n    *\n    * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n    *\n    * @param boolean         $count            true if execute an count(*) (true by default)\n    * @param string|string[] $right            limit user who have specific right (default 'all')\n    * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n    * @param integer         $value            default value (default 0)\n    * @param integer[]       $used             Already used items ID: not to display in dropdown\n    * @param string          $search           pattern (default '')\n    * @param integer         $start            start LIMIT value (default 0)\n    * @param integer         $limit            limit LIMIT value (default -1 no limit)\n    * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n    *\n    * @return mysqli_result|boolean\n    */\n   static function getSqlSearchResult ($count = true, $right = \"all\", $entity_restrict = -1, $value = 0,\n                                       array $used = [], $search = '', $start = 0, $limit = -1,\n                                       $inactive_deleted = 0) {\n      global $DB;\n\n      // No entity define : use active ones\n      if ($entity_restrict < 0) {\n         $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n      }\n\n      $joinprofile      = false;\n      $joinprofileright = false;\n      $WHERE = [];\n\n      switch ($right) {\n         case \"interface\" :\n            $joinprofile = true;\n            $WHERE = [\n               'glpi_profiles.interface' => 'central'\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         case \"id\" :\n            $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n            break;\n\n         case \"delegate\" :\n            $groups = self::getDelegateGroupsForUser($entity_restrict);\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                     $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n            break;\n\n         case \"groups\" :\n            $groups = [];\n            if (isset($_SESSION['glpigroups'])) {\n               $groups = $_SESSION['glpigroups'];\n            }\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                  $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n\n            break;\n\n         case \"all\" :\n            $WHERE = [\n               'glpi_users.id' => ['>', 0]\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         default :\n            $joinprofile = true;\n            $joinprofileright = true;\n            if (!is_array($right)) {\n               $right = [$right];\n            }\n            $forcecentral = true;\n\n            $ORWHERE = [];\n            foreach ($right as $r) {\n               switch ($r) {\n                  case  'own_ticket' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticket',\n                           'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_ticket_validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'  => 'ticketvalidation',\n                           'OR'                       => [\n                              'glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST],\n                              'glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_request' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_incident' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_validate' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::CREATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'see_project' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'project',\n                           'glpi_profilerights.rights'   => ['&', Project::READMY]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'faq' :\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => 'knowbase',\n                           'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n\n                  default :\n                     // Check read or active for rights\n                     $ORWHERE[] = [\n                        'AND' => [\n                           'glpi_profilerights.name'     => $r,\n                           'glpi_profilerights.rights'   => [\n                              '&',\n                              READ | CREATE | UPDATE | DELETE | PURGE\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n               }\n               if (in_array($r, Profile::$helpdesk_rights)) {\n                  $forcecentral = false;\n               }\n            }\n\n            if (count($ORWHERE)) {\n               $WHERE[] = ['OR' => $ORWHERE];\n            }\n\n            if ($forcecentral) {\n               $WHERE['glpi_profiles.interface'] = 'central';\n            }\n      }\n\n      if (!$inactive_deleted) {\n         $WHERE = array_merge(\n            $WHERE, [\n               'glpi_users.is_deleted' => 0,\n               'glpi_users.is_active'  => 1,\n               [\n                  'OR' => [\n                     ['glpi_users.begin_date' => null],\n                     ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ],\n               [\n                  'OR' => [\n                     ['glpi_users.end_date' => null],\n                     ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ]\n\n            ]\n         );\n      }\n\n      if ((is_numeric($value) && $value)\n          || count($used)) {\n\n         $WHERE[] = [\n            'NOT' => [\n               'glpi_users.id' => $used\n            ]\n         ];\n      }\n\n      $criteria = [\n         'FROM'            => 'glpi_users',\n         'LEFT JOIN'       => [\n            'glpi_useremails'       => [\n               'ON' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ],\n            'glpi_profiles_users'   => [\n               'ON' => [\n                  'glpi_profiles_users'   => 'users_id',\n                  'glpi_users'            => 'id'\n               ]\n            ]\n         ]\n      ];\n      if ($count) {\n         $criteria['COUNT DISTINCT'] = 'glpi_users.*';\n      } else {\n         $criteria['SELECT DISTINCT'] = 'glpi_users.*';\n      }\n\n      if ($joinprofile) {\n         $criteria['LEFT JOIN']['glpi_profiles'] = [\n            'ON' => [\n               'glpi_profiles_users'   => 'profiles_id',\n               'glpi_profiles'         => 'id'\n            ]\n         ];\n         if ($joinprofileright) {\n            $criteria['LEFT JOIN']['glpi_profilerights'] = [\n               'ON' => [\n                  'glpi_profilerights' => 'profiles_id',\n                  'glpi_profiles'      => 'id'\n               ]\n            ];\n         }\n      }\n\n      if (!$count) {\n         if ((strlen($search) > 0)) {\n            $txt_search = Search::makeTextSearchValue($search);\n            $concat = new \\QueryExpression(\n               \"CONCAT(\n                  glpi_users.realname,\n                  glpi_users.firstname,\n                  glpi_users.firstname\n               ) LIKE '$txt_search'\"\n            );\n            $WHERE[] = [\n               'OR' => [\n                  'glpi_users.name'       => ['LIKE', $txt_search],\n                  'glpi_users.realname'   => ['LIKE', $txt_search],\n                  'glpi_users.firstname'  => ['LIKE', $txt_search],\n                  'glpi_users.phone'      => ['LIKE', $txt_search],\n                  'glpi_useremails.email' => ['LIKE', $txt_search],\n                  $concat\n               ]\n            ];\n         }\n\n         if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n            $criteria['ORDERBY'] = [\n               'glpi_users.firstname',\n               'glpi_users.realname',\n               'glpi_users.name'\n            ];\n         } else {\n            $criteria['ORDERBY'] = [\n               'glpi_users.realname',\n               'glpi_users.firstname',\n               'glpi_users.name'\n            ];\n         }\n\n         if ($limit > 0) {\n            $criteria['LIMIT'] = $limit;\n            $criteria['START'] = $start;\n         }\n      }\n      $criteria['WHERE'] = $WHERE;\n      return $DB->request($criteria);\n   }\n\n\n   /**\n    * Make a select box with all glpi users where select key = name\n    *\n    * @param $options array of possible options:\n    *    - name             : string / name of the select (default is users_id)\n    *    - value\n    *    - right            : string / limit user who have specific right :\n    *                             id -> only current user (default case);\n    *                             interface -> central;\n    *                             all -> all users;\n    *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n    *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n    *    - entity           : integer or array / restrict to a defined entity or array of entities\n    *                          (default -1 : no restriction)\n    *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n    *                          only available if entity is a single value not an array(default false)\n    *    - all              : Nobody or All display for none selected\n    *                             all=0 (default) -> Nobody\n    *                             all=1 -> All\n    *                             all=-1-> nothing\n    *    - rand             : integer / already computed rand value\n    *    - toupdate         : array / Update a specific item on select change on dropdown\n    *                          (need value_fieldname, to_update, url\n    *                          (see Ajax::updateItemOnSelectEvent for information)\n    *                          and may have moreparams)\n    *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n    *    - ldap_import\n    *    - on_change        : string / value to transmit to \"onChange\"\n    *    - display          : boolean / display or get string (default true)\n    *    - width            : specific width needed (default 80%)\n    *    - specific_tags    : array of HTML5 tags to add to the field\n    *    - url              : url of the ajax php code which should return the json data to show in\n    *                         the dropdown (default /ajax/getDropdownUsers.php)\n    *    - inactive_deleted : retreive also inactive or deleted users\n    *\n    * @return integer|string Random value if displayed, string otherwise\n    */\n   static function dropdown($options = []) {\n      global $CFG_GLPI;\n\n      // Default values\n      $p = [\n         'name'             => 'users_id',\n         'value'            => '',\n         'right'            => 'id',\n         'all'              => 0,\n         'on_change'        => '',\n         'comments'         => 1,\n         'width'            => '80%',\n         'entity'           => -1,\n         'entity_sons'      => false,\n         'used'             => [],\n         'ldap_import'      => false,\n         'toupdate'         => '',\n         'rand'             => mt_rand(),\n         'display'          => true,\n         '_user_index'      => 0,\n         'specific_tags'    => [],\n         'url'              => $CFG_GLPI['root_doc'].\"/ajax/getDropdownUsers.php\",\n         'inactive_deleted' => 0,\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      // check default value (in case of multiple observers)\n      if (is_array($p['value'])) {\n         $p['value'] = $p['value'][$p['_user_index']];\n      }\n\n      // Check default value for dropdown : need to be a numeric\n      if ((strlen($p['value']) == 0) || !is_numeric($p['value'])) {\n         $p['value'] = 0;\n      }\n\n      $output = '';\n      if (!($p['entity'] < 0) && $p['entity_sons']) {\n         if (is_array($p['entity'])) {\n            $output .= \"entity_sons options is not available with array of entity\";\n         } else {\n            $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n         }\n      }\n\n      // Make a select box with all glpi users\n      $user = getUserName($p['value'], 2);\n\n      $view_users = self::canView();\n\n      if (!empty($p['value']) && ($p['value'] > 0)) {\n          $default = $user[\"name\"];\n      } else {\n         if ($p['all']) {\n            $default = __('All');\n         } else {\n            $default = Dropdown::EMPTY_VALUE;\n         }\n      }\n      $field_id = Html::cleanId(\"dropdown_\".$p['name'].$p['rand']);\n      $param    = ['value'               => $p['value'],\n                        'valuename'           => $default,\n                        'width'               => $p['width'],\n                        'all'                 => $p['all'],\n                        'right'               => $p['right'],\n                        'on_change'           => $p['on_change'],\n                        'used'                => $p['used'],\n                        'inactive_deleted'    => $p['inactive_deleted'],\n                        'entity_restrict'     => (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity']),\n                        'specific_tags'       => $p['specific_tags']];\n\n      $output   = Html::jsAjaxDropdown($p['name'], $field_id,\n                                       $p['url'],\n                                       $param);\n\n      // Display comment\n      if ($p['comments']) {\n         $comment_id = Html::cleanId(\"comment_\".$p['name'].$p['rand']);\n         $link_id = Html::cleanId(\"comment_link_\".$p[\"name\"].$p['rand']);\n         if (!$view_users) {\n            $user[\"link\"] = '';\n         } else if (empty($user[\"link\"])) {\n            $user[\"link\"] = $CFG_GLPI['root_doc'].\"/front/user.php\";\n         }\n\n         if (empty($user['comment'])) {\n            $user['comment'] = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  self::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($user[\"comment\"],\n                                      ['contentid' => $comment_id,\n                                            'display'   => false,\n                                            'link'      => $user[\"link\"],\n                                            'linkid'    => $link_id]);\n\n         $paramscomment = ['value' => '__VALUE__',\n                                'table' => \"glpi_users\"];\n\n         if ($view_users) {\n            $paramscomment['withlink'] = $link_id;\n         }\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n          && $p['ldap_import']\n          && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])) {\n\n         $output .= \"<span title=\\\"\".__s('Import a user').\"\\\" class='fa fa-plus pointer'\".\n                     \" onClick=\\\"\".Html::jsGetElementbyID('userimport'.$p['rand']).\".dialog('open');\\\">\n                     <span class='sr-only'>\" . __s('Import a user') . \"</span></span>\";\n         $output .= Ajax::createIframeModalWindow('userimport'.$p['rand'],\n                                                  $CFG_GLPI[\"root_doc\"].\n                                                      \"/front/ldap.import.php?entity=\".\n                                                      $_SESSION['glpiactive_entity'],\n                                                  ['title'   => __('Import a user'),\n                                                        'display' => false]);\n      }\n\n      if ($p['display']) {\n         echo $output;\n         return $p['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Show simple add user form for external auth.\n    *\n    * @return void|boolean false if user does not have rights to import users from external sources,\n    *    print form otherwise\n    */\n   static function showAddExtAuthForm() {\n\n      if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n         return false;\n      }\n\n      echo \"<div class='center'>\\n\";\n      echo \"<form method='post' action='\".Toolbox::getItemTypeFormURL('User').\"'>\\n\";\n\n      echo \"<table class='tab_cadre'>\\n\";\n      echo \"<tr><th colspan='4'>\".__('Automatically add a user of an external source').\"</th></tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Login').\"</td>\\n\";\n      echo \"<td><input type='text' name='login'></td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\".__s('Import from directories').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\".__s('Import from other sources').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\\n\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\\n\";\n   }\n\n\n   /**\n    * Change auth method for given users.\n    *\n    * @param integer[] $IDs      IDs of users\n    * @param integer   $authtype Auth type (see Auth constants)\n    * @param integer   $server   ID of auth server\n    *\n    * @return boolean\n    */\n   static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1) {\n      global $DB;\n\n      if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         return false;\n      }\n\n      if (!empty($IDs)\n          && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])) {\n\n         $result = $DB->update(\n            self::getTable(), [\n               'authtype'        => $authtype,\n               'auths_id'        => $server,\n               'password'        => '',\n               'is_deleted_ldap' => 0\n            ], [\n               'id' => $IDs\n            ]\n         );\n         if ($result) {\n            foreach ($IDs as $ID) {\n               $changes = [\n                  0,\n                  '',\n                  addslashes(\n                     sprintf(\n                        __('%1$s: %2$s'),\n                        __('Update authentification method to'),\n                        Auth::getMethodName($authtype, $server)\n                     )\n                  )\n               ];\n               Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n            }\n\n            return true;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    * Generate vcard for the current user.\n    *\n    * @return void\n    */\n   function generateVcard() {\n\n      // prepare properties for the Vcard\n      if (!empty($this->fields[\"realname\"])\n          || !empty($this->fields[\"firstname\"])) {\n         $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n      } else {\n         $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n      }\n\n      // create vcard\n      $vcard = new VObject\\Component\\VCard([\n         'N'     => $name,\n         'EMAIL' => $this->getDefaultEmail(),\n         'NOTE'  => $this->fields[\"comment\"],\n      ]);\n      $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n      $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n      $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n      // send the  VCard\n      $output   = $vcard->serialize();\n      $filename = implode(\"_\", array_filter($name)).\".vcf\";\n\n      @Header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n      @Header(\"Content-Length: \".Toolbox::strlen($output));\n      @Header(\"Connection: close\");\n      @Header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n      echo $output;\n   }\n\n\n   /**\n    * Show items of the current user.\n    *\n    * @param boolean $tech false to display items owned by user, true to display items managed by user\n    *\n    * @return void\n    */\n   function showItems($tech) {\n      global $DB, $CFG_GLPI;\n\n      $ID = $this->getField('id');\n\n      if ($tech) {\n         $type_user   = $CFG_GLPI['linkuser_tech_types'];\n         $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n         $field_user  = 'users_id_tech';\n         $field_group = 'groups_id_tech';\n      } else {\n         $type_user   = $CFG_GLPI['linkuser_types'];\n         $type_group  = $CFG_GLPI['linkgroup_types'];\n         $field_user  = 'users_id';\n         $field_group = 'groups_id';\n      }\n\n      $group_where = \"\";\n      $groups      = [];\n\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'glpi_groups_users.groups_id',\n            'glpi_groups.name'\n         ],\n         'FROM'      => 'glpi_groups_users',\n         'LEFT JOIN' => [\n            'glpi_groups' => [\n               'FKEY' => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n      ]);\n      $number = count($iterator);\n\n      $group_where = [];\n      while ($data = $iterator->next()) {\n         $group_where[$field_group][] = $data['groups_id'];\n         $groups[$data[\"groups_id\"]] = $data[\"name\"];\n      }\n\n      echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n      $header = \"<tr><th>\".__('Type').\"</th>\";\n      $header .= \"<th>\".__('Entity').\"</th>\";\n      $header .= \"<th>\".__('Name').\"</th>\";\n      $header .= \"<th>\".__('Serial number').\"</th>\";\n      $header .= \"<th>\".__('Inventory number').\"</th>\";\n      $header .= \"<th>\".__('Status').\"</th>\";\n      $header .= \"<th>&nbsp;</th></tr>\";\n      echo $header;\n\n      foreach ($type_user as $itemtype) {\n         if (!($item = getItemForItemtype($itemtype))) {\n            continue;\n         }\n         if ($item->canView()) {\n            $itemtable = getTableForItemType($itemtype);\n            $iterator_params = [\n               'FROM'   => $itemtable,\n               'WHERE'  => [$field_user => $ID]\n            ];\n\n            if ($item->maybeTemplate()) {\n               $iterator_params['WHERE']['is_template'] = 0;\n            }\n            if ($item->maybeDeleted()) {\n               $iterator_params['WHERE']['is_deleted'] = 0;\n            }\n\n            $item_iterator = $DB->request($iterator_params);\n\n            $type_name = $item->getTypeName();\n\n            while ($data = $item_iterator->next()) {\n               $cansee = $item->can($data[\"id\"], READ);\n               $link   = $data[\"name\"];\n               if ($cansee) {\n                  $link_item = $item::getFormURLWithID($data['id']);\n                  if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                     $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                  }\n                  $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n               }\n               $linktype = \"\";\n               if ($data[$field_user] == $ID) {\n                  $linktype = self::getTypeName(1);\n               }\n               echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n               echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                     $data[\"entities_id\"]).\"</td>\";\n               echo \"<td class='center'>$link</td>\";\n               echo \"<td class='center'>\";\n               if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                  echo $data[\"serial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                  echo $data[\"otherserial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"states_id\"])) {\n                  echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n               } else {\n                  echo '&nbsp;';\n               }\n\n               echo \"</td><td class='center'>$linktype</td></tr>\";\n            }\n         }\n      }\n      if ($number) {\n         echo $header;\n      }\n      echo \"</table></div>\";\n\n      if (count($group_where)) {\n         echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n         $header = \"<tr>\".\n               \"<th>\".__('Type').\"</th>\".\n               \"<th>\".__('Entity').\"</th>\".\n               \"<th>\".__('Name').\"</th>\".\n               \"<th>\".__('Serial number').\"</th>\".\n               \"<th>\".__('Inventory number').\"</th>\".\n               \"<th>\".__('Status').\"</th>\".\n               \"<th>&nbsp;</th></tr>\";\n         echo $header;\n         $nb = 0;\n         foreach ($type_group as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n               continue;\n            }\n            if ($item->canView() && $item->isField($field_group)) {\n               $itemtable = getTableForItemType($itemtype);\n               $iterator_params = [\n                  'FROM'   => $itemtable,\n                  'WHERE'  => ['OR' => $group_where]\n               ];\n\n               if ($item->maybeTemplate()) {\n                  $iterator_params['WHERE']['is_template'] = 0;\n               }\n               if ($item->maybeDeleted()) {\n                  $iterator_params['WHERE']['is_deleted'] = 0;\n               }\n\n               $group_iterator = $DB->request($iterator_params);\n\n               $type_name = $item->getTypeName();\n\n               while ($data = $group_iterator->next()) {\n                  $nb++;\n                  $cansee = $item->can($data[\"id\"], READ);\n                  $link   = $data[\"name\"];\n                  if ($cansee) {\n                     $link_item = $item::getFormURLWithID($data['id']);\n                     if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                        $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                     }\n                     $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n                  }\n                  $linktype = \"\";\n                  if (isset($groups[$data[$field_group]])) {\n                     $linktype = sprintf(__('%1$s = %2$s'), _n('Group', 'Groups', 1),\n                                          $groups[$data[$field_group]]);\n                  }\n                  echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                  echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                        $data[\"entities_id\"]);\n                  echo \"</td><td class='center'>$link</td>\";\n                  echo \"<td class='center'>\";\n                  if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                     echo $data[\"serial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                     echo $data[\"otherserial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"states_id\"])) {\n                     echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                  } else {\n                     echo '&nbsp;';\n                  }\n\n                  echo \"</td><td class='center'>$linktype</td></tr>\";\n               }\n            }\n         }\n         if ($nb) {\n            echo $header;\n         }\n         echo \"</table></div>\";\n      }\n   }\n\n\n   /**\n    * Get user by email, importing it from LDAP if not existing.\n    *\n    * @param string $email\n    *\n    * @return integer ID of user, 0 if not found nor imported\n    */\n   static function getOrImportByEmail($email = '') {\n      global $DB, $CFG_GLPI;\n\n      $iterator = $DB->request([\n         'SELECT'    => 'users_id AS id',\n         'FROM'      => 'glpi_useremails',\n         'LEFT JOIN' => [\n            'glpi_users' => [\n               'FKEY' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            'glpi_useremails.email' => $DB->escape(stripslashes($email))\n         ],\n         'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n      ]);\n\n      //User still exists in DB\n      if (count($iterator)) {\n         $result = $iterator->next();\n         return $result['id'];\n      } else {\n         if ($CFG_GLPI[\"is_users_auto_add\"]) {\n            //Get all ldap servers with email field configured\n            $ldaps = AuthLdap::getServersWithImportByEmailActive();\n            //Try to find the user by his email on each ldap server\n\n            foreach ($ldaps as $ldap) {\n               $params = [\n                  'method' => AuthLdap::IDENTIFIER_EMAIL,\n                  'value'  => $email,\n               ];\n               $res = AuthLdap::ldapImportUserByServerId($params,\n                                                         AuthLdap::ACTION_IMPORT,\n                                                         $ldap);\n\n               if (isset($res['id'])) {\n                  return $res['id'];\n               }\n            }\n         }\n      }\n      return 0;\n   }\n\n\n   /**\n    * Handle user deleted in LDAP using configured policy.\n    *\n    * @param integer $users_id\n    *\n    * @return void\n    */\n   static function manageDeletedUserInLdap($users_id) {\n      global $CFG_GLPI;\n\n      //The only case where users_id can be null if when a user has been imported into GLPI\n      //it's dn still exists, but doesn't match the connection filter anymore\n      //In this case, do not try to process the user\n      if (!$users_id) {\n         return;\n      }\n\n      //User is present in DB but not in the directory : it's been deleted in LDAP\n      $tmp = [\n         'id'              => $users_id,\n         'is_deleted_ldap' => 1,\n      ];\n      $myuser = new self();\n      $myuser->getFromDB($users_id);\n\n      //User is already considered as delete from ldap\n      if ($myuser->fields['is_deleted_ldap'] == 1) {\n         return;\n      }\n\n      switch ($CFG_GLPI['user_deleted_ldap']) {\n         //DO nothing\n         default :\n         case AuthLDAP::DELETED_USER_PRESERVE:\n            $myuser->update($tmp);\n            break;\n\n         //Put user in trashbin\n         case AuthLDAP::DELETED_USER_DELETE:\n            $myuser->delete($tmp);\n            break;\n\n         //Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user\n         case AuthLDAP::DELETED_USER_DISABLE:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user+ Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            break;\n\n      }\n      /*\n      $changes[0] = '0';\n      $changes[1] = '';\n      $changes[2] = __('Deleted user in LDAP directory');\n      Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n   }\n\n   /**\n    * Get user ID from its name.\n    *\n    * @param string $name User name\n    *\n    * @return integer\n    */\n   static function getIdByName($name) {\n      return self::getIdByField('name', $name);\n   }\n\n\n   /**\n    * Get user ID from a field\n    *\n    * @since 0.84\n    *\n    * @param string $field Field name\n    * @param string $value Field value\n    *\n    * @return integer\n    */\n   static function getIdByField($field, $value) {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => [$field => addslashes($value)]\n      ]);\n\n      if (count($iterator) == 1) {\n         $row = $iterator->next();\n         return (int)$row['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * Show new password form of password recovery process.\n    *\n    * @param $token\n    *\n    * @return void\n    */\n   static function showPasswordForgetChangeForm($token) {\n      global $CFG_GLPI, $DB;\n\n      // Verif token.\n      $token_ok = false;\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'password_forget_token'       => $token,\n            new \\QueryExpression('NOW() < ADDDATE(' . $DB->quoteName('password_forget_token_date') . ', INTERVAL 1 DAY)')\n         ]\n      ]);\n\n      if (count($iterator) == 1) {\n         $token_ok = true;\n      }\n      echo \"<div class='center'>\";\n\n      if ($token_ok) {\n         echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n                \"/front/lostpassword.php'>\";\n         echo \"<table class='tab_cadre'>\";\n         echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2'>\". __('Please confirm your email address and enter your new password.').\n              \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . _n('Email', 'Emails', 1).\"</td>\";\n         echo \"<td><input type='text' name='email' value='' size='60'></td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password').\"</td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='off' onkeyup=\\\"return passwordCheck();\\\">\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password confirmation').\"</td>\";\n         echo \"<td><input type='password' name='password2' value='' size='20' autocomplete='off'>\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Password security policy').\"</td>\";\n         echo \"<td>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2 center'><td colspan='2'>\";\n         echo \"<input type='hidden' name='password_forget_token' value='$token'>\";\n         echo \"<input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n\n      } else {\n         echo __('Your password reset request has expired or is invalid. Please renew it.');\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Show request form of password recovery process.\n    *\n    * @return void\n    */\n   static function showPasswordForgetRequestForm() {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n             \"/front/lostpassword.php'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td colspan='2'>\" .\n            __('Please enter your email address. An email will be sent to you and you will be able to choose a new password.').\n           \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_2 center'>\";\n      echo \"<td><input type='text' size='60' name='email' value=''></td>\";\n      echo \"<td><input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n      echo \"</td></tr>\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Handle password recovery form submission.\n    *\n    * @param array $input\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if password successfully changed, false otherwise\n    */\n   public function updateForgottenPassword(array $input) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n      if ($this->getFromDBbyEmail($input['email'], $condition)) {\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                        -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)) {\n\n               $input['id'] = $this->fields['id'];\n               Config::validatePassword($input[\"password\"], false); // Throws exception if password is invalid\n               if (!$this->update($input)) {\n                  return false;\n               }\n               $input2 = [\n                  'password_forget_token'      => '',\n                  'password_forget_token_date' => null,\n                  'id'                         => $this->fields['id']\n               ];\n               $this->update($input2);\n               return true;\n\n            } else {\n               throw new ForgetPasswordException(__('Your password reset request has expired or is invalid. Please renew it.'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      } else {\n         throw new ForgetPasswordException(__('Email address not found.'));\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Displays password recovery result.\n    *\n    * @param array $input\n    *\n    * @return void\n    */\n   public function showUpdateForgottenPassword(array $input) {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      try {\n         if (!$this->updateForgottenPassword($input)) {\n            Html::displayMessageAfterRedirect();\n         } else {\n            echo __('Reset password successful.');\n         }\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n      } catch (PasswordTooWeakException $e) {\n         // Force display on error\n         foreach ($e->getMessages() as $message) {\n            Session::addMessageAfterRedirect($message);\n         }\n         Html::displayMessageAfterRedirect();\n      }\n\n      echo \"<br>\";\n      echo \"<a href=\\\"\".$CFG_GLPI['root_doc'].\"/index.php\\\">\".__s('Back').\"</a>\";\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Send password recovery for a user and display result message.\n    *\n    * @param string $email email of the user\n    *\n    * @return void\n    */\n   public function showForgetPassword($email) {\n\n      echo \"<div class='center'>\";\n      try {\n         $this->forgetPassword($email);\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n         return;\n      }\n      echo __('An email has been sent to your email address. The email contains information for reset your password.');\n   }\n\n   /**\n    * Send password recovery email for a user.\n    *\n    * @param string $email\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if notification successfully created, false if user not found\n    */\n   public function forgetPassword($email) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n\n      if ($this->getFromDBbyEmail($email, $condition)) {\n\n         // Send token if auth DB or not external auth defined\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (NotificationMailing::isUserAddressValid($email)) {\n               $input = [\n                  'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n                  'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n                  'id'                         => $this->fields['id'],\n               ];\n               $this->update($input);\n               // Notication on root entity (glpi_users.entities_id is only a pref)\n               NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n               QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n               return true;\n            } else {\n               throw new ForgetPasswordException(__('Invalid email address'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      }\n\n      throw new ForgetPasswordException(__('Email address not found.'));\n   }\n\n\n   /**\n    * Display information from LDAP server for user.\n    *\n    * @return void\n    */\n   private function showLdapDebug() {\n\n      if ($this->fields['authtype'] != Auth::LDAP) {\n         return false;\n      }\n      echo \"<div class='spaced'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='4'>\".__('LDAP directory').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_2'><td>\".__('User DN').\"</td>\";\n      echo \"<td>\".$this->fields['user_dn'].\"</td></tr>\\n\";\n\n      if ($this->fields['user_dn']) {\n         echo \"<tr class='tab_bg_2'><td>\".__('User information').\"</td><td>\";\n         $config_ldap = new AuthLDAP();\n         $ds          = false;\n\n         if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n            $ds = $config_ldap->connect();\n         }\n\n         if ($ds) {\n            $info = AuthLdap::getUserByDn($ds, $this->fields['user_dn'],\n                                          ['*', 'createTimeStamp', 'modifyTimestamp']);\n            if (is_array($info)) {\n               Html::printCleanArray($info);\n            } else {\n               echo __('No item to display');\n            }\n\n         } else {\n            echo __('Connection failed');\n         }\n\n         echo \"</td></tr>\\n\";\n      }\n\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display debug information for current object.\n    *\n    * @return void\n    */\n   function showDebug() {\n\n      NotificationEvent::debugEvent($this);\n      $this->showLdapDebug();\n   }\n\n   function getUnicityFieldsToDisplayInErrorMessage() {\n\n      return ['id'          => __('ID'),\n                   'entities_id' => __('Entity')];\n   }\n\n\n   function getUnallowedFieldsForUnicity() {\n\n      return array_merge(parent::getUnallowedFieldsForUnicity(),\n                         ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']);\n   }\n\n\n   /**\n    * Get a unique generated token.\n    *\n    * @param string $field Field storing the token\n    *\n    * @return string\n    */\n   static function getUniqueToken($field = 'personal_token') {\n      global $DB;\n\n      $ok = false;\n      do {\n         $key    = Toolbox::getRandomString(40);\n         $row = $DB->request([\n            'COUNT'  => 'cpt',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $key]\n         ])->next();\n\n         if ($row['cpt'] == 0) {\n            return $key;\n         }\n      } while (!$ok);\n\n   }\n\n\n   /**\n    * Get token of a user. If not exists generate it.\n    *\n    * @param integer $ID    User ID\n    * @param string  $field Field storing the token\n    *\n    * @return string|boolean User token, false if user does not exist\n    */\n   static function getToken($ID, $field = 'personal_token') {\n\n      $user = new self();\n      if ($user->getFromDB($ID)) {\n         return $user->getAuthToken($field);\n      }\n\n      return false;\n   }\n\n   /**\n    * Get token of a user. If it does not exists  then generate it.\n    *\n    * @since 9.4\n    *\n    * @param string $field the field storing the token\n    *\n    * @return string|false token or false in case of error\n    */\n   public function getAuthToken($field = 'personal_token') {\n      global $DB;\n\n      if ($this->isNewItem()) {\n         return false;\n      }\n\n      if (!empty($this->fields[$field])) {\n         return $this->fields[$field];\n      }\n      $token = self::getUniqueToken($field);\n      $this->update(['id'             => $this->getID(),\n                     $field           => $token,\n                     $field . \"_date\" => $_SESSION['glpi_currenttime']]);\n      return $this->fields[$field];\n   }\n\n\n   /**\n    * Get name of users using default passwords\n    *\n    * @return string[]\n    */\n   static function checkDefaultPasswords() {\n      global $DB;\n\n      $passwords = ['glpi'      => 'glpi',\n                         'tech'      => 'tech',\n                         'normal'    => 'normal',\n                         'post-only' => 'postonly'];\n      $default_password_set = [];\n\n      $crit = ['FIELDS'     => ['name', 'password'],\n                    'is_active'  => 1,\n                    'is_deleted' => 0,\n                    'name'       => array_keys($passwords)];\n\n      foreach ($DB->request('glpi_users', $crit) as $data) {\n         if (Auth::checkPassword($passwords[$data['name']], $data['password'])) {\n            $default_password_set[] = $data['name'];\n         }\n      }\n\n      return $default_password_set;\n   }\n\n\n   /**\n    * Get picture URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      if (!empty($picture)) {\n         return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/$picture\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture.png\";\n   }\n\n\n   /**\n    * Get thumbnail URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getThumbnailURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      if (!empty($picture)) {\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) ==2) {\n            return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/\".$tmp[0].\n                   \"_min.\".$tmp[1];\n         }\n         return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n\n   }\n\n\n   /**\n    * Drop existing files for user picture.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return void\n    */\n   static function dropPictureFiles($picture) {\n\n      if (!empty($picture)) {\n         // unlink main file\n         if (file_exists(GLPI_PICTURE_DIR.\"/$picture\")) {\n            @unlink(GLPI_DOC_DIR.\"/_pictures/$picture\");\n         }\n         // unlink Thunmnail\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) == 2) {\n            if (file_exists(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1])) {\n               @unlink(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1]);\n            }\n         }\n      }\n   }\n\n   function getRights($interface = 'central') {\n\n      $values = parent::getRights();\n      //TRANS: short for : Add users from an external source\n      $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n                                                'long'  => __('Add users from an external source')];\n       //TRANS: short for : Read method for user authentication and synchronization\n      $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n                                                'long'  => __('Read user authentication and synchronization method')];\n      //TRANS: short for : Update method for user authentication and synchronization\n      $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n                                                'long'  => __('Update method for user authentication and synchronization')];\n\n      return $values;\n   }\n\n\n   /**\n    * Retrieve the list of LDAP field names from a list of fields\n    * allow pattern substitution, e.g. %{name}.\n    *\n    * @since 9.1\n    *\n    * @param string[] $map array of fields\n    *\n    * @return string[]\n    */\n   private static function getLdapFieldNames(array $map) {\n\n      $ret =  [];\n      foreach ($map as $v) {\n         /** @var array $reg */\n         if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n            // e.g. \"%{country} > %{city} > %{site}\"\n            foreach ($reg [1] as $f) {\n               $ret [] = $f;\n            }\n         } else {\n            // single field name\n            $ret [] = $v;\n         }\n      }\n      return $ret;\n   }\n\n\n   /**\n    * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n    *\n    * @since 9.1\n    *\n    * @param string $map String with field format\n    * @param array  $res LDAP result\n    *\n    * @return string\n    */\n   private static function getLdapFieldValue($map, array $res) {\n\n      $map = Toolbox::unclean_cross_side_scripting_deep($map);\n      $ret = preg_replace_callback('/%{(.*)}/U',\n                                    function ($matches) use ($res) {\n                                       return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n                                    }, $map );\n\n      return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n   }\n\n   /**\n    * Get/Print the switch language form.\n    *\n    * @param boolean $display Whether to display or return output\n    * @param array   $options Options\n    *    - string   value       Selected language value\n    *    - boolean  showbutton  Whether to display or not submit button\n    *\n    * @return void|string Nothing if displayed, string to display otherwise\n    */\n   function showSwitchLangForm($display = true, array $options = []) {\n\n      $params = [\n         'value'        => $_SESSION[\"glpilanguage\"],\n         'display'      => false,\n         'showbutton'   => true\n      ];\n\n      foreach ($options as $key => $value) {\n         $params[$key] = $value;\n      }\n\n      $out = '';\n      $out .= \"<form method='post' name='switchlang' action='\".User::getFormURL().\"' autocomplete='off'>\";\n      $out .= \"<p class='center'>\";\n      $out .= Dropdown::showLanguages(\"language\", $params);\n      if ($params['showbutton'] === true) {\n         $out .= \"&nbsp;<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n      }\n      $out .= \"</p>\";\n      $out .= Html::closeForm(false);\n\n      if ($display === true) {\n         echo $out;\n      } else {\n         return $out;\n      }\n   }\n\n   /**\n    * Get list of entities ids for current user.\n    *\n    * @return integer[]\n    */\n   private function getEntities() {\n      //get user entities\n      if ($this->entities == null) {\n         $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n      }\n      return $this->entities;\n   }\n}\n"], "filenames": ["inc/user.class.php"], "buggy_code_start_loc": [4395], "buggy_code_end_loc": [4396], "fixing_code_start_loc": [4395], "fixing_code_end_loc": [4396], "type": "CWE-640", "message": "An issue was discovered in GLPI before 9.4.1. After a successful password reset by a user, it is possible to change that user's password again during the next 24 hours without any information except the associated email address.", "other": {"cve": {"id": "CVE-2019-13240", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-10T14:15:11.793", "lastModified": "2019-07-17T14:12:39.453", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in GLPI before 9.4.1. After a successful password reset by a user, it is possible to change that user's password again during the next 24 hours without any information except the associated email address."}, {"lang": "es", "value": "Se detect\u00f3 un problema en GLPI versiones anteriores a 9.4.1. Despu\u00e9s de que un usuario haya restablecido con \u00e9xito la contrase\u00f1a, es posible cambiarla de nuevo durante las pr\u00f3ximas 24 horas sin ninguna informaci\u00f3n, excepto la direcci\u00f3n de correo electr\u00f3nico asociada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.4.1", "matchCriteriaId": "49F5CE77-0669-4846-93DE-D2454579E6A4"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/5da9f99b2d81713b1e36016b47ce656a33648bc7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/commit/86a43ae47b3dd844947f40a2ffcf1a36e53dbba6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/compare/1783b78...8e621f6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/9.4.1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.synacktiv.com/ressources/advisories/GLPI_9.4.0_unsafe_reset.pdf", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/5da9f99b2d81713b1e36016b47ce656a33648bc7"}}