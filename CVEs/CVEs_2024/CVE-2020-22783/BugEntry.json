{"buggy_code": ["/*\n * Stores session data in the database\n * Source; https://github.com/edy-b/SciFlowWriter/blob/develop/available_plugins/ep_sciflowwriter/db/DirtyStore.js\n * This is not used for authors that are created via the API at current\n *\n * RPB: this module was not migrated to Promises, because it is only used via\n *      express-session, which can't actually use promises anyway.\n */\n\nvar Store = require('ep_etherpad-lite/node_modules/express-session').Store,\n  db = require('ep_etherpad-lite/node/db/DB').db,\n  log4js = require('ep_etherpad-lite/node_modules/log4js'),\n  messageLogger = log4js.getLogger(\"SessionStore\");\n\nvar SessionStore = module.exports = function SessionStore() {};\n\nSessionStore.prototype.__proto__ = Store.prototype;\n\nSessionStore.prototype.get = function(sid, fn) {\n  messageLogger.debug('GET ' + sid);\n\n  var self = this;\n\n  db.get(\"sessionstorage:\" + sid, function(err, sess) {\n    if (sess) {\n      sess.cookie.expires = 'string' == typeof sess.cookie.expires ? new Date(sess.cookie.expires) : sess.cookie.expires;\n      if (!sess.cookie.expires || new Date() < sess.cookie.expires) {\n        fn(null, sess);\n      } else {\n        self.destroy(sid, fn);\n      }\n    } else {\n      fn();\n    }\n  });\n};\n\nSessionStore.prototype.set = function(sid, sess, fn) {\n  messageLogger.debug('SET ' + sid);\n\n  db.set(\"sessionstorage:\" + sid, sess);\n  if (fn) {\n    process.nextTick(fn);\n  }\n};\n\nSessionStore.prototype.destroy = function(sid, fn) {\n  messageLogger.debug('DESTROY ' + sid);\n\n  db.remove(\"sessionstorage:\" + sid);\n  if (fn) {\n    process.nextTick(fn);\n  }\n};\n\n/*\n * RPB: the following methods are optional requirements for a compatible session\n *      store for express-session, but in any case appear to depend on a\n *      non-existent feature of ueberdb2\n */\nif (db.forEach) {\n  SessionStore.prototype.all = function(fn) {\n    messageLogger.debug('ALL');\n\n    var sessions = [];\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        sessions.push(value);\n      }\n    });\n    fn(null, sessions);\n  };\n\n  SessionStore.prototype.clear = function(fn) {\n    messageLogger.debug('CLEAR');\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        db.remove(\"session:\" + key);\n      }\n    });\n    if (fn) fn();\n  };\n\n  SessionStore.prototype.length = function(fn) {\n    messageLogger.debug('LENGTH');\n\n    var i = 0;\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        i++;\n      }\n    });\n    fn(null, i);\n  }\n};\n"], "fixing_code": ["/*\n * Stores session data in the database\n * Source; https://github.com/edy-b/SciFlowWriter/blob/develop/available_plugins/ep_sciflowwriter/db/DirtyStore.js\n * This is not used for authors that are created via the API at current\n *\n * RPB: this module was not migrated to Promises, because it is only used via\n *      express-session, which can't actually use promises anyway.\n */\n\nvar Store = require('ep_etherpad-lite/node_modules/express-session').Store,\n  db = require('ep_etherpad-lite/node/db/DB').db,\n  log4js = require('ep_etherpad-lite/node_modules/log4js'),\n  messageLogger = log4js.getLogger(\"SessionStore\");\n\nvar SessionStore = module.exports = function SessionStore() {};\n\nSessionStore.prototype.__proto__ = Store.prototype;\n\nSessionStore.prototype.get = function(sid, fn) {\n  messageLogger.debug('GET ' + sid);\n\n  var self = this;\n\n  db.get(\"sessionstorage:\" + sid, function(err, sess) {\n    if (sess) {\n      sess.cookie.expires = 'string' == typeof sess.cookie.expires ? new Date(sess.cookie.expires) : sess.cookie.expires;\n      if (!sess.cookie.expires || new Date() < sess.cookie.expires) {\n        fn(null, sess);\n      } else {\n        self.destroy(sid, fn);\n      }\n    } else {\n      fn();\n    }\n  });\n};\n\nSessionStore.prototype.set = function(sid, sess, fn) {\n  messageLogger.debug('SET ' + sid);\n\n  // don't store passwords in DB\n  if (sess.user && sess.user.password) {\n    sess.user.password = \"PASSWORD_HIDDEN\";\n  }\n\n  db.set(\"sessionstorage:\" + sid, sess);\n  if (fn) {\n    process.nextTick(fn);\n  }\n};\n\nSessionStore.prototype.destroy = function(sid, fn) {\n  messageLogger.debug('DESTROY ' + sid);\n\n  db.remove(\"sessionstorage:\" + sid);\n  if (fn) {\n    process.nextTick(fn);\n  }\n};\n\n/*\n * RPB: the following methods are optional requirements for a compatible session\n *      store for express-session, but in any case appear to depend on a\n *      non-existent feature of ueberdb2\n */\nif (db.forEach) {\n  SessionStore.prototype.all = function(fn) {\n    messageLogger.debug('ALL');\n\n    var sessions = [];\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        sessions.push(value);\n      }\n    });\n    fn(null, sessions);\n  };\n\n  SessionStore.prototype.clear = function(fn) {\n    messageLogger.debug('CLEAR');\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        db.remove(\"session:\" + key);\n      }\n    });\n    if (fn) fn();\n  };\n\n  SessionStore.prototype.length = function(fn) {\n    messageLogger.debug('LENGTH');\n\n    var i = 0;\n\n    db.forEach(function(key, value) {\n      if (key.substr(0,15) === \"sessionstorage:\") {\n        i++;\n      }\n    });\n    fn(null, i);\n  }\n};\n"], "filenames": ["src/node/db/SessionStore.js"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [39], "fixing_code_start_loc": [40], "fixing_code_end_loc": [45], "type": "CWE-312", "message": "Etherpad <1.8.3 stored passwords used by users insecurely in the database and in log files. This affects every database backend supported by Etherpad.", "other": {"cve": {"id": "CVE-2020-22783", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-28T21:15:08.653", "lastModified": "2021-05-05T19:58:51.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Etherpad <1.8.3 stored passwords used by users insecurely in the database and in log files. This affects every database backend supported by Etherpad."}, {"lang": "es", "value": "Etherpad versiones anteriores a 1.8.3, almacen\u00f3 las contrase\u00f1as utilizadas por usuarios de forma no segura en la base de datos y en los archivos de registro.&#xa0;Esto afecta a todos los backend de bases de datos compatibles con Etherpad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-312"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:etherpad:etherpad:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.3", "matchCriteriaId": "BE027A22-DA83-430F-BF59-AABFA64B9532"}]}]}], "references": [{"url": "https://github.com/ether/etherpad-lite/commit/53f126082a8b3d094e48b159f0f0bc8a5db4b2f4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ether/etherpad-lite/issues/3421", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ether/etherpad-lite/commit/53f126082a8b3d094e48b159f0f0bc8a5db4b2f4"}}