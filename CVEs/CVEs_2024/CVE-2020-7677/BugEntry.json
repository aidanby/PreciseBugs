{"buggy_code": ["\nvar Promise = require('any-promise')\nvar assert = require('assert')\n\nmodule.exports = thenify\n\n/**\n * Turn async functions into promises\n *\n * @param {Function} $$__fn__$$\n * @return {Function}\n * @api public\n */\n\nfunction thenify($$__fn__$$, options) {\n  assert(typeof $$__fn__$$ === 'function')\n  return eval(createWrapper($$__fn__$$.name, options))\n}\n\n/**\n * Turn async functions into promises and backward compatible with callback\n *\n * @param {Function} $$__fn__$$\n * @return {Function}\n * @api public\n */\n\nthenify.withCallback = function ($$__fn__$$, options) {\n  assert(typeof $$__fn__$$ === 'function')\n  options = options || {}\n  options.withCallback = true\n  if (options.multiArgs === undefined) options.multiArgs = true\n  return eval(createWrapper($$__fn__$$.name, options))\n}\n\nfunction createCallback(resolve, reject, multiArgs) {\n  return function(err, value) {\n    if (err) return reject(err)\n    var length = arguments.length\n\n    if (length <= 2 || !multiArgs) return resolve(value)\n\n    if (Array.isArray(multiArgs)) {\n      var values = {}\n      for (var i = 1; i < length; i++) values[multiArgs[i - 1]] = arguments[i]\n      return resolve(values)\n    }\n\n    var values = new Array(length - 1)\n    for (var i = 1; i < length; ++i) values[i - 1] = arguments[i]\n    resolve(values)\n  }\n}\n\nfunction createWrapper(name, options) {\n  name = (name || '').replace(/\\s|bound(?!$)/g, '')\n  options = options || {}\n  // default to true\n  var multiArgs = options.multiArgs !== undefined ? options.multiArgs : true\n  multiArgs = 'var multiArgs = ' + JSON.stringify(multiArgs) + '\\n'\n\n  var withCallback = options.withCallback ?\n    'var lastType = typeof arguments[len - 1]\\n'\n    + 'if (lastType === \"function\") return $$__fn__$$.apply(self, arguments)\\n'\n   : ''\n\n  return '(function ' + name + '() {\\n'\n    + 'var self = this\\n'\n    + 'var len = arguments.length\\n'\n    + multiArgs\n    + withCallback\n    + 'var args = new Array(len + 1)\\n'\n    + 'for (var i = 0; i < len; ++i) args[i] = arguments[i]\\n'\n    + 'var lastIndex = i\\n'\n    + 'return new Promise(function (resolve, reject) {\\n'\n      + 'args[lastIndex] = createCallback(resolve, reject, multiArgs)\\n'\n      + '$$__fn__$$.apply(self, args)\\n'\n    + '})\\n'\n  + '})'\n}\n", "\nvar assert = require('assert')\n\nvar thenify = require('..')\n\nit('fn.name', function () {\n  function someCrazyName() {}\n\n  assert.equal('someCrazyName', thenify(someCrazyName).name)\n  assert.equal('someCrazyName', thenify(someCrazyName).name)\n  // In ES6 spec, functions can infer the name of an anonymous function from its syntactic position.\n  var noname = function () {}\n  var name = noname.name\n\n  assert.equal(name, thenify(noname).name)\n  assert.equal(name, thenify.withCallback(noname).name)\n})\n\nit('fn.name (bound function)', function () {\n  function bound() {}\n  assert.equal('bound', thenify(bound).name)\n  assert.equal('bound', thenify.withCallback(bound).name)\n\n  var noname = (function () {}).bind(this)\n  assert.equal('', thenify(noname).name)\n  assert.equal('', thenify.withCallback(noname).name)\n})\n\nit('fn(callback(err))', function () {\n  function fn(cb) {\n    setTimeout(function () {\n      cb(new Error('boom'))\n    }, 0)\n  }\n\n  return thenify(fn)().then(function () {\n    throw new Error('bang')\n  }).catch(function (err) {\n    assert.equal(err.message, 'boom')\n  })\n})\n\nit('fn(callback(null, value))', function () {\n  function fn(cb) {\n    cb(null, true)\n  }\n\n  return thenify(fn)().then(function (val) {\n    assert.equal(val, true)\n  })\n})\n\nit('fn(callback(null, values...))', function () {\n  function fn(cb) {\n    cb(null, 1, 2, 3)\n  }\n\n  return thenify(fn)().then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n\nit('fn(..args, callback())', function () {\n  function fn(a, b, c, cb) {\n    cb(null, a, b, c)\n  }\n\n  return thenify(fn)(1, 2, 3).then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n"], "fixing_code": ["\nvar Promise = require('any-promise')\nvar assert = require('assert')\n\nmodule.exports = thenify\n\n/**\n * Turn async functions into promises\n *\n * @param {Function} fn\n * @return {Function}\n * @api public\n */\n\nfunction thenify(fn, options) {\n  assert(typeof fn === 'function')\n  return createWrapper(fn, options)\n}\n\n/**\n * Turn async functions into promises and backward compatible with callback\n *\n * @param {Function} fn\n * @return {Function}\n * @api public\n */\n\nthenify.withCallback = function (fn, options) {\n  assert(typeof fn === 'function')\n  options = options || {}\n  options.withCallback = true\n  return createWrapper(fn, options)\n}\n\nfunction createCallback(resolve, reject, multiArgs) {\n  // default to true\n  if (multiArgs === undefined) multiArgs = true\n  return function(err, value) {\n    if (err) return reject(err)\n    var length = arguments.length\n\n    if (length <= 2 || !multiArgs) return resolve(value)\n\n    if (Array.isArray(multiArgs)) {\n      var values = {}\n      for (var i = 1; i < length; i++) values[multiArgs[i - 1]] = arguments[i]\n      return resolve(values)\n    }\n\n    var values = new Array(length - 1)\n    for (var i = 1; i < length; ++i) values[i - 1] = arguments[i]\n    resolve(values)\n  }\n}\n\nfunction createWrapper(fn, options) {\n  options = options || {}\n  var name = fn.name;\n  name = (name || '').replace(/\\s|bound(?!$)/g, '')\n  var newFn = function () {\n    var self = this\n    var len = arguments.length\n    if (options.withCallback) {\n      var lastType = typeof arguments[len - 1]\n      if (lastType === 'function') return fn.apply(self, arguments)\n    }\n    var args = new Array(len + 1)\n    for (var i = 0; i < len; ++i) args[i] = arguments[i]\n    var lastIndex = i\n    return new Promise(function (resolve, reject) {\n      args[lastIndex] = createCallback(resolve, reject, options.multiArgs)\n      fn.apply(self, args)\n    })\n  }\n  Object.defineProperty(newFn, 'name', { value: name })\n  return newFn\n}\n", "\nvar assert = require('assert')\n\nvar thenify = require('..')\n\nit('fn.name', function () {\n  function someCrazyName() {}\n\n  assert.equal('someCrazyName', thenify(someCrazyName).name)\n  assert.equal('someCrazyName', thenify(someCrazyName).name)\n  // In ES6 spec, functions can infer the name of an anonymous function from its syntactic position.\n  var noname = function () {}\n  var name = noname.name\n\n  assert.equal(name, thenify(noname).name)\n  assert.equal(name, thenify.withCallback(noname).name)\n})\n\nit('fn.name (bound function)', function () {\n  function bound() {}\n  assert.equal('bound', thenify(bound).name)\n  assert.equal('bound', thenify.withCallback(bound).name)\n\n  var noname = (function () {}).bind(this)\n  assert.equal('', thenify(noname).name)\n  assert.equal('', thenify.withCallback(noname).name)\n})\n\nit('fn(callback(err))', function () {\n  function fn(cb) {\n    setTimeout(function () {\n      cb(new Error('boom'))\n    }, 0)\n  }\n\n  return thenify(fn)().then(function () {\n    throw new Error('bang')\n  }).catch(function (err) {\n    assert.equal(err.message, 'boom')\n  })\n})\n\nit('fn(callback(null, value))', function () {\n  function fn(cb) {\n    cb(null, true)\n  }\n\n  return thenify(fn)().then(function (val) {\n    assert.equal(val, true)\n  })\n})\n\nit('fn(callback(null, values...))', function () {\n  function fn(cb) {\n    cb(null, 1, 2, 3)\n  }\n\n  return thenify(fn)().then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n\nit('fn(..args, callback())', function () {\n  function fn(a, b, c, cb) {\n    cb(null, a, b, c)\n  }\n\n  return thenify(fn)(1, 2, 3).then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n\nit('unicode function name', function () {\n  function \u4f60\u597d$hello_123(a, b, c, cb) {\n    cb(null, a, b, c)\n  }\n  var wrapper = thenify(\u4f60\u597d$hello_123)\n  assert.equal(wrapper.name, '\u4f60\u597d$hello_123')\n  wrapper(1, 2, 3).then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n\nit('invalid function name', function () {\n  function fn(a, b, c, cb) {\n    cb(null, a, b, c)\n  }\n\n  Object.defineProperty(fn, 'name', { value: 'fake(){a.b;})();(function(){//' })\n  var wrapper = thenify(fn)\n  assert.equal(wrapper.name, fn.name)\n  wrapper(1, 2, 3).then(function (values) {\n    assert.deepEqual(values, [1, 2, 3])\n  })\n})\n"], "filenames": ["index.js", "test/test.js"], "buggy_code_start_loc": [10, 71], "buggy_code_end_loc": [80, 71], "fixing_code_start_loc": [10, 72], "fixing_code_end_loc": [77, 96], "type": "NVD-CWE-noinfo", "message": "This affects the package thenify before 3.3.1. The name argument provided to the package can be controlled by users without any sanitization, and this is provided to the eval function without any sanitization.", "other": {"cve": {"id": "CVE-2020-7677", "sourceIdentifier": "report@snyk.io", "published": "2022-07-25T14:15:10.047", "lastModified": "2023-02-23T16:21:36.803", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package thenify before 3.3.1. The name argument provided to the package can be controlled by users without any sanitization, and this is provided to the eval function without any sanitization."}, {"lang": "es", "value": "Esto afecta al paquete thenify antes de la versi\u00f3n 3.3.1. El argumento del nombre proporcionado al paquete puede ser controlado por los usuarios sin ning\u00fan tipo de sanitizaci\u00f3n, y este es proporcionado a la funci\u00f3n eval sin ninguna sanitizaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thenify_project:thenify:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.3.1", "matchCriteriaId": "2074E478-8FB2-42A3-9E63-656E167713CF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}]}]}], "references": [{"url": "https://github.com/thenables/thenify/blob/master/index.js%23L17", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/thenables/thenify/commit/0d94a24eb933bc835d568f3009f4d269c4c4c17a", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/09/msg00039.html", "source": "report@snyk.io", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MTEUUTNIEBHGKUKKLNUZSV7IEP6IP3Q3/", "source": "report@snyk.io", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UM6XJ73Q3NAM5KSGCOKJ2ZIA6GUWUJLK/", "source": "report@snyk.io", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-572317", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-THENIFY-571690", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thenables/thenify/commit/0d94a24eb933bc835d568f3009f4d269c4c4c17a"}}