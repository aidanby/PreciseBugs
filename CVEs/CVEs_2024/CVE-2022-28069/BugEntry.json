{"buggy_code": ["/* radare - LGPL - Copyright 2015-2021 - pancake */\n\n#include <string.h>\n#include <r_types.h>\n#include <r_util.h>\n#include <r_lib.h>\n#include <r_asm.h>\n#include <r_anal.h>\n\n// XXX: this is just a PoC\n// XXX: do not hardcode size/type here, use proper decoding table\n// http://hotkosc.ru:8080/method-vax.doc\n\nstatic int vax_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\top->size = 1;\n\tif (len < 1) {\n\t\treturn -1;\n\t}\n\top->addr = addr;\n\top->type = R_ANAL_OP_TYPE_UNK;\n\tswitch (buf[0]) {\n\tcase 0x04:\n\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\tbreak;\n\tcase 0x2e:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\top->type = R_ANAL_OP_TYPE_SHL;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\top->type = R_ANAL_OP_TYPE_SUB; // dec\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t// op->type = R_ANAL_OP_TYPE_TRAP; // HALT\n\t\top->size = 1;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xac:\n\t\top->type = R_ANAL_OP_TYPE_XOR;\n\t\top->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\top->jump = op->addr + op->size + ((char)buf[1]);\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xd0: // mcoml\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xd4: // \n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xc2: // subl2 r0, r7\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xca: // bicl\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\tif (len > 2) {\n\t\t\top->jump = op->addr + op->size + ((buf[1] << 8) + buf[2]);\n\t\t\top->fail = op->addr + op->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\top->size = 8;\n\t\top->type = R_ANAL_OP_TYPE_DIV;\n\t\tbreak;\n\tcase 0x94: // movb\n\tcase 0x7d: // movb\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\top->size = 6;\n\t\top->type = R_ANAL_OP_TYPE_PUSH;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 3;\n\t\tbreak;\n\tcase 0x95: // tstb\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x40:\n\t\top->size = 5;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x9a:\n\t\top->size = 4;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x83:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\top->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xfb: // calls\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\top->size = 7;\n\t\t{\n\t\t\tint oa = 3;\n\t\t\tut32 delta = buf[oa];\n\t\t\tdelta |= (ut32)(buf[oa + 1]) << 8;\n\t\t\tdelta |= (ut32)(buf[oa + 2]) << 16;\n\t\t\tdelta |= (ut32)(buf[oa + 3]) << 24;\n\t\t\tdelta += op->size;\n\t\t\top->jump = op->addr + delta;\n\t\t}\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xff:\n\t\top->size = 2;\n\t\tbreak;\n\t}\n\treturn op->size;\n}\n\n// TODO: add the V vector instructions\nstatic char *get_reg_profile(RAnal *anal) {\n\tconst char *p =\n\t\t\"=PC\tr15\\n\"\n\t\t\"=SP\tr14\\n\"\n\t\t\"=BP\tr13\\n\"\n\t\t\"=R0\tr0\\n\"\n\t\t\"=SN\tr0\\n\" // XXX\n\t\t// stack\n\t\t\"=A0\tr1\\n\"\n\t\t\"=A1\tr2\\n\"\n\t\t\"=A2\tr3\\n\"\n\t\t\"=A3\tr4\\n\"\n\n\t\t\"gpr\tr0\t.32\t0\t0\\n\"\n\t\t\"gpr\tr1\t.32\t4\t0\\n\"\n\t\t\"gpr\tr2\t.32\t8\t0\\n\"\n\t\t\"gpr\tr3\t.32\t12\t0\\n\"\n\t\t\"gpr\tr4\t.32\t16\t0\\n\"\n\t\t\"gpr\tr5\t.32\t24\t0\\n\"\n\t\t\"gpr\tr6\t.32\t28\t0\\n\"\n\t\t\"gpr\tr7\t.32\t32\t0\\n\"\n\t\t\"gpr\tr8\t.32\t36\t0\\n\"\n\t\t\"gpr\tr9\t.32\t40\t0\\n\"\n\t\t\"gpr\tr10\t.32\t44\t0\\n\"\n\t\t\"gpr\tr11\t.32\t48\t0\\n\"\n\t\t\"gpr\tr12\t.32\t52\t0\\n\"\n\t\t\"gpr\tap\t.32\t52\t0\\n\"\n\t\t\"gpr\tr13\t.32\t56\t0\\n\"\n\t\t\"gpr\tfp\t.32\t56\t0\\n\"\n\t\t\"gpr\tr14\t.32\t60\t0\\n\"\n\t\t\"gpr\tsp\t.32\t60\t0\\n\"\n\t\t\"gpr\tr15\t.32\t64\t0\\n\"\n\t\t\"gpr\tpc\t.32\t64\t0\\n\"\n\t\t\"gpr\tps\t.32\t68\t0\\n\"\n\t;\n\treturn strdup (p);\n\t// return r_reg_set_profile_string (anal->reg, p);\n}\n\nstatic int archinfo(RAnal *anal, int q) {\n\tif (q == R_ANAL_ARCHINFO_DATA_ALIGN) {\n\t\treturn 1;\n\t}\n\tif (q == R_ANAL_ARCHINFO_ALIGN) {\n\t\treturn 1;\n\t}\n\tif (q == R_ANAL_ARCHINFO_MAX_OP_SIZE) {\n\t\treturn 56;\n\t}\n\tif (q == R_ANAL_ARCHINFO_MIN_OP_SIZE) {\n\t\treturn 1;\n\t}\n\treturn 1;\n}\n\nRAnalPlugin r_anal_plugin_vax = {\n\t.name = \"vax\",\n\t.desc = \"VAX code analysis plugin\",\n\t.license = \"MIT\",\n\t.arch = \"vax\",\n\t.esil = true,\n\t.bits = 32,\n\t.op = &vax_op,\n\t.get_reg_profile = &get_reg_profile,\n\t.archinfo = archinfo,\n};\n\n#ifndef R2_PLUGIN_INCORE\nR_API RLibStruct radare_plugin = {\n\t.type = R_LIB_TYPE_ANAL,\n\t.data = &r_anal_plugin_vax,\n\t.version = R2_VERSION\n};\n#endif\n"], "fixing_code": ["/* radare - LGPL - Copyright 2015-2021 - pancake */\n\n#include <string.h>\n#include <r_types.h>\n#include <r_util.h>\n#include <r_lib.h>\n#include <r_asm.h>\n#include <r_anal.h>\n\n// XXX: this is just a PoC\n// XXX: do not hardcode size/type here, use proper decoding table\n// http://hotkosc.ru:8080/method-vax.doc\n\nstatic int vax_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\top->size = 1;\n\tif (len < 1) {\n\t\treturn -1;\n\t}\n\top->addr = addr;\n\top->type = R_ANAL_OP_TYPE_UNK;\n\tswitch (buf[0]) {\n\tcase 0x04:\n\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\tbreak;\n\tcase 0x2e:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\top->type = R_ANAL_OP_TYPE_SHL;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\top->type = R_ANAL_OP_TYPE_SUB; // dec\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t// op->type = R_ANAL_OP_TYPE_TRAP; // HALT\n\t\top->size = 1;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xac:\n\t\top->type = R_ANAL_OP_TYPE_XOR;\n\t\top->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\top->jump = op->addr + op->size + ((char)buf[1]);\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xd0: // mcoml\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xd4: // \n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xc2: // subl2 r0, r7\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xca: // bicl\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\tif (len > 2) {\n\t\t\top->jump = op->addr + op->size + ((buf[1] << 8) + buf[2]);\n\t\t\top->fail = op->addr + op->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\top->size = 8;\n\t\top->type = R_ANAL_OP_TYPE_DIV;\n\t\tbreak;\n\tcase 0x94: // movb\n\tcase 0x7d: // movb\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\top->size = 6;\n\t\top->type = R_ANAL_OP_TYPE_PUSH;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 3;\n\t\tbreak;\n\tcase 0x95: // tstb\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x40:\n\t\top->size = 5;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x9a:\n\t\top->size = 4;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x83:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\top->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xfb: // calls\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\top->size = 7;\n\t\tif (len > 6) {\n\t\t\tint oa = 3;\n\t\t\tut32 delta = buf[oa];\n\t\t\tdelta |= (ut32)(buf[oa + 1]) << 8;\n\t\t\tdelta |= (ut32)(buf[oa + 2]) << 16;\n\t\t\tdelta |= (ut32)(buf[oa + 3]) << 24;\n\t\t\tdelta += op->size;\n\t\t\top->jump = op->addr + delta;\n\t\t}\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xff:\n\t\top->size = 2;\n\t\tbreak;\n\t}\n\treturn op->size;\n}\n\n// TODO: add the V vector instructions\nstatic char *get_reg_profile(RAnal *anal) {\n\tconst char *p =\n\t\t\"=PC\tr15\\n\"\n\t\t\"=SP\tr14\\n\"\n\t\t\"=BP\tr13\\n\"\n\t\t\"=R0\tr0\\n\"\n\t\t\"=SN\tr0\\n\" // XXX\n\t\t// stack\n\t\t\"=A0\tr1\\n\"\n\t\t\"=A1\tr2\\n\"\n\t\t\"=A2\tr3\\n\"\n\t\t\"=A3\tr4\\n\"\n\n\t\t\"gpr\tr0\t.32\t0\t0\\n\"\n\t\t\"gpr\tr1\t.32\t4\t0\\n\"\n\t\t\"gpr\tr2\t.32\t8\t0\\n\"\n\t\t\"gpr\tr3\t.32\t12\t0\\n\"\n\t\t\"gpr\tr4\t.32\t16\t0\\n\"\n\t\t\"gpr\tr5\t.32\t24\t0\\n\"\n\t\t\"gpr\tr6\t.32\t28\t0\\n\"\n\t\t\"gpr\tr7\t.32\t32\t0\\n\"\n\t\t\"gpr\tr8\t.32\t36\t0\\n\"\n\t\t\"gpr\tr9\t.32\t40\t0\\n\"\n\t\t\"gpr\tr10\t.32\t44\t0\\n\"\n\t\t\"gpr\tr11\t.32\t48\t0\\n\"\n\t\t\"gpr\tr12\t.32\t52\t0\\n\"\n\t\t\"gpr\tap\t.32\t52\t0\\n\"\n\t\t\"gpr\tr13\t.32\t56\t0\\n\"\n\t\t\"gpr\tfp\t.32\t56\t0\\n\"\n\t\t\"gpr\tr14\t.32\t60\t0\\n\"\n\t\t\"gpr\tsp\t.32\t60\t0\\n\"\n\t\t\"gpr\tr15\t.32\t64\t0\\n\"\n\t\t\"gpr\tpc\t.32\t64\t0\\n\"\n\t\t\"gpr\tps\t.32\t68\t0\\n\"\n\t;\n\treturn strdup (p);\n\t// return r_reg_set_profile_string (anal->reg, p);\n}\n\nstatic int archinfo(RAnal *anal, int q) {\n\tif (q == R_ANAL_ARCHINFO_DATA_ALIGN) {\n\t\treturn 1;\n\t}\n\tif (q == R_ANAL_ARCHINFO_ALIGN) {\n\t\treturn 1;\n\t}\n\tif (q == R_ANAL_ARCHINFO_MAX_OP_SIZE) {\n\t\treturn 56;\n\t}\n\tif (q == R_ANAL_ARCHINFO_MIN_OP_SIZE) {\n\t\treturn 1;\n\t}\n\treturn 1;\n}\n\nRAnalPlugin r_anal_plugin_vax = {\n\t.name = \"vax\",\n\t.desc = \"VAX code analysis plugin\",\n\t.license = \"MIT\",\n\t.arch = \"vax\",\n\t.esil = true,\n\t.bits = 32,\n\t.op = &vax_op,\n\t.get_reg_profile = &get_reg_profile,\n\t.archinfo = archinfo,\n};\n\n#ifndef R2_PLUGIN_INCORE\nR_API RLibStruct radare_plugin = {\n\t.type = R_LIB_TYPE_ANAL,\n\t.data = &r_anal_plugin_vax,\n\t.version = R2_VERSION\n};\n#endif\n"], "filenames": ["libr/anal/p/anal_vax.c"], "buggy_code_start_loc": [153], "buggy_code_end_loc": [154], "fixing_code_start_loc": [153], "fixing_code_end_loc": [154], "type": "CWE-787", "message": "A heap buffer overflow in vax_opfunction in radare2 5.4.2 and 5.4.0.", "other": {"cve": {"id": "CVE-2022-28069", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-22T19:16:22.513", "lastModified": "2023-08-24T22:03:46.670", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A heap buffer overflow in vax_opfunction in radare2 5.4.2 and 5.4.0."}, {"lang": "es", "value": "Un desbordamiento del buffer heap en la funci\u00f3n vax_op en radare2 5.4.2 y 5.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:5.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "834B6EB8-099A-469F-ADA3-183E51E43717"}, {"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:5.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "C9DEDA4E-172C-482D-8527-D9AEF8A1D7CC"}]}]}], "references": [{"url": "https://github.com/radareorg/radare2/commit/49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/radareorg/radare2/commit/49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a"}}