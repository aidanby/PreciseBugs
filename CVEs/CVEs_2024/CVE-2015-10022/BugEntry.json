{"buggy_code": ["#!/usr/bin/perl\n\nuse vars qw/$libpath/;\nuse FindBin qw($Bin);\nBEGIN { $libpath=\"$Bin\" };\nuse lib \"$libpath\";\nuse lib \"$libpath/../libs\";\n\nuse DB_File;\nuse DBI;\n$| = 1;\n\nmy %dbconfig = loadconfig(\"/etc/apache2/nlgiss2.config\");\n$site = $dbconfig{root};\nmy ($dbname, $dbhost, $dblogin, $dbpassword) = ($dbconfig{customdbname}, $dbconfig{dbhost}, $dbconfig{dblogin}, $dbconfig{dbpassword});\nmy $dbh = DBI->connect(\"dbi:Pg:dbname=$dbname;host=$dbhost\",$dblogin,$dbpassword,{AutoCommit=>1,RaiseError=>1,PrintError=>0});\n\nmy $sqlstructure = \"cbsnr, naam, year, code, indicator, value, amsterdam_code\";\nmy @stritems = split(/\\,\\s*/, $sqlstructure);\n$id = 0;\nforeach $item (@stritems)\n{\n   $structure{$item} = $id; \n   $id++;\n}\n\n$lineID = 0;\nwhile (<>)\n{\n    # OUTPUT INDUSTRY 3.01: Industrial output in rubles\n    my $str = $_;\n    # Prevention from sql injection\n    $sqlinjection = 0;\n    $sqlinjection++ if ($str=~/(drop\\s+all|drop\\s+table)/sxi);\n    $sqlinjection++ if ($str=~/(alter|create)\\s+table/sxi);\n    $sqlinjection++ if ($str=~/^select/sxi);\n    exit(0) if ($sqlinjection);\n    if ($str!~/^\\\".+?\\\"/)\n    {\n       $str = transform($str);\n    }\n    $str=~s/\\r|\\n//g;\n    $str.=\",\";\n    my $itemID = 0;\n    my %thisdata;\n    while ($str=~s/^\\\"(.*?)\\\"\\,//)\n    {\n\tmy $item = $1;\n\tunless ($lineID)\n\t{\n\t    $names{$itemID} = $item;\n\t}\n\telse\n\t{\n\t    $data{$lineID}{$names{$itemID}} = $item;\n\t    $thisdata{$lineID}{$names{$itemID}} = $item;\n\t}\n\t$itemID++;\n    }\n\n    unless ($lineID)\n    {\n\t%rnames = reverse %names;\n    }\n    else\n    {\n        unless ($rnames{'value'})\n        {\n\t    $values{$thisdata{$lineID}{'year'}}{$thisdata{$lineID}{'amsterdam_code'}}++;\n        }\n\n\t$topics{$thisdata{$lineID}{'code'}} = $thisdata{$lineID}{'indicator'};\n    }\n    $lineID++;\n}\n\n# Aggregation\nforeach $lineID (sort keys %data)\n{\n   %items = %{$data{$lineID}};\n   my ($code, $year) = ($items{'amsterdam_code'}, $items{'year'});\n   print \"I $code $year $values{$year}{$code}\\n\" if ($DEBUG);\n   foreach $name (sort keys %names)\n   {\n\tprint \"$names{$name};;$items{$name}\\n\" if ($DEBUG);\n   }\n\n   unless ($added{$year}{$code})\n   {\n      $sql = \"insert into datasets.data ($sqlstructure) values (\";\n      $items{'value'} = $values{$year}{$code} || '0';\n      foreach $item (@stritems)\n      {\n\t $var = $items{$item} || '0';\n\t $dbhitem = $dbh->quote($var);\n\t $sql.=\"$dbhitem,\"\n\t #print \"$item $items{$item}\\n\";\n      }\n\n      $sql=~s/\\,$//g;\n      $sql.=\");\";\n      #print \"$sql\\n\";\n      $dbh->do($sql);\n   }\n\n   $added{$year}{$code}++;\n   # $sql = \"insert into datasets.data (cbsnr, naam, year, code, indicator, value, amsterdam_code) values ('$cbsnr', $naamq, '$year', '$mcode', $indicator, '$items[$i]', '$acode');\";\n   #parser($str);\n}\n\nforeach $topic (sort %topics)\n{\n    if ($topics{$topic})\n    {\n       $name = $dbh->quote(\"$topics{$topic}\");\n       $insert = \"insert into datasets.topics (topic_name, topic_code, datatype, topic_root, description, topic_name_rus) values ($name, '$topic', '0', '0', ' ', ' ')\";\n       $dbh->do($insert);\n       #print \"$insert\\n\";\n    }\n}\n\nsub loadconfig\n{\n    my ($configfile, $DEBUG) = @_;\n    my %config;\n\n    open(conf, $configfile);\n    while (<conf>)\n    {\n        my $str = $_;\n        $str=~s/\\r|\\n//g;\n        my ($name, $value) = split(/\\s*\\=\\s*/, $str);\n        $config{$name} = $value;\n    }\n    close(conf);\n\n    return %config;\n}\n\nsub transform\n{\n   my ($str, $DEBUG) = @_;\n   $str=~s/\\r|\\n//g;\n   my @items = split(/\\,/, $str);\n   my $line;\n   foreach $item (@items)\n   {\n      $line.=\"\\\"$item\\\",\";\n   }\n   $line=~s/\\,$//g;\n\n   return $line;\n}\n"], "fixing_code": ["#!/usr/bin/perl\n\nuse vars qw/$libpath/;\nuse FindBin qw($Bin);\nBEGIN { $libpath=\"$Bin\" };\nuse lib \"$libpath\";\nuse lib \"$libpath/../libs\";\n\nuse DB_File;\nuse DBI;\n$| = 1;\n\nmy %dbconfig = loadconfig(\"/etc/apache2/nlgiss2.config\");\n$site = $dbconfig{root};\nmy ($dbname, $dbhost, $dblogin, $dbpassword) = ($dbconfig{customdbname}, $dbconfig{dbhost}, $dbconfig{dblogin}, $dbconfig{dbpassword});\nmy $dbh = DBI->connect(\"dbi:Pg:dbname=$dbname;host=$dbhost\",$dblogin,$dbpassword,{AutoCommit=>1,RaiseError=>1,PrintError=>0});\n\nmy $sqlstructure = \"cbsnr, naam, year, code, indicator, value, amsterdam_code\";\nmy @stritems = split(/\\,\\s*/, $sqlstructure);\n$id = 0;\nforeach $item (@stritems)\n{\n   $structure{$item} = $id; \n   $id++;\n}\n\n$lineID = 0;\nwhile (<>)\n{\n    # OUTPUT INDUSTRY 3.01: Industrial output in rubles\n    my $str = $_;\n    # Prevention from sql injection\n    $sqlinjection = 0;\n    $sqlinjection++ if ($str=~/(drop.+all|drop.+table)/sxi);\n    $sqlinjection++ if ($str=~/(alter|create).+table/sxi);\n    $sqlinjection++ if ($str=~/^select/sxi);\n    exit(0) if ($sqlinjection);\n    if ($str!~/^\\\".+?\\\"/)\n    {\n       $str = transform($str);\n    }\n    $str=~s/\\r|\\n//g;\n    $str.=\",\";\n    my $itemID = 0;\n    my %thisdata;\n    while ($str=~s/^\\\"(.*?)\\\"\\,//)\n    {\n\tmy $item = $1;\n\tunless ($lineID)\n\t{\n\t    $names{$itemID} = $item;\n\t}\n\telse\n\t{\n\t    $data{$lineID}{$names{$itemID}} = $item;\n\t    $thisdata{$lineID}{$names{$itemID}} = $item;\n\t}\n\t$itemID++;\n    }\n\n    unless ($lineID)\n    {\n\t%rnames = reverse %names;\n    }\n    else\n    {\n        unless ($rnames{'value'})\n        {\n\t    $values{$thisdata{$lineID}{'year'}}{$thisdata{$lineID}{'amsterdam_code'}}++;\n        }\n\n\t$topics{$thisdata{$lineID}{'code'}} = $thisdata{$lineID}{'indicator'};\n    }\n    $lineID++;\n}\n\n# Aggregation\nforeach $lineID (sort keys %data)\n{\n   %items = %{$data{$lineID}};\n   my ($code, $year) = ($items{'amsterdam_code'}, $items{'year'});\n   print \"I $code $year $values{$year}{$code}\\n\" if ($DEBUG);\n   foreach $name (sort keys %names)\n   {\n\tprint \"$names{$name};;$items{$name}\\n\" if ($DEBUG);\n   }\n\n   unless ($added{$year}{$code})\n   {\n      $sql = \"insert into datasets.data ($sqlstructure) values (\";\n      $items{'value'} = $values{$year}{$code} || '0';\n      foreach $item (@stritems)\n      {\n\t $var = $items{$item} || '0';\n\t $dbhitem = $dbh->quote($var);\n\t $sql.=\"$dbhitem,\"\n\t #print \"$item $items{$item}\\n\";\n      }\n\n      $sql=~s/\\,$//g;\n      $sql.=\");\";\n      #print \"$sql\\n\";\n      $dbh->do($sql);\n   }\n\n   $added{$year}{$code}++;\n   # $sql = \"insert into datasets.data (cbsnr, naam, year, code, indicator, value, amsterdam_code) values ('$cbsnr', $naamq, '$year', '$mcode', $indicator, '$items[$i]', '$acode');\";\n   #parser($str);\n}\n\nforeach $topic (sort %topics)\n{\n    if ($topics{$topic})\n    {\n       $name = $dbh->quote(\"$topics{$topic}\");\n       $insert = \"insert into datasets.topics (topic_name, topic_code, datatype, topic_root, description, topic_name_rus) values ($name, '$topic', '0', '0', ' ', ' ')\";\n       $dbh->do($insert);\n       #print \"$insert\\n\";\n    }\n}\n\nsub loadconfig\n{\n    my ($configfile, $DEBUG) = @_;\n    my %config;\n\n    open(conf, $configfile);\n    while (<conf>)\n    {\n        my $str = $_;\n        $str=~s/\\r|\\n//g;\n        my ($name, $value) = split(/\\s*\\=\\s*/, $str);\n        $config{$name} = $value;\n    }\n    close(conf);\n\n    return %config;\n}\n\nsub transform\n{\n   my ($str, $DEBUG) = @_;\n   $str=~s/\\r|\\n//g;\n   my @items = split(/\\,/, $str);\n   my $line;\n   foreach $item (@items)\n   {\n      $line.=\"\\\"$item\\\",\";\n   }\n   $line=~s/\\,$//g;\n\n   return $line;\n}\n"], "filenames": ["scripts/etl/custom_import.pl"], "buggy_code_start_loc": [34], "buggy_code_end_loc": [36], "fixing_code_start_loc": [34], "fixing_code_end_loc": [36], "type": "CWE-89", "message": "A vulnerability was found in IISH nlgis2. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file scripts/etl/custom_import.pl. The manipulation leads to sql injection. The name of the patch is 8bdb6fcf7209584eaf1232437f0f53e735b2b34c. It is recommended to apply a patch to fix this issue. The identifier VDB-217609 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10022", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T12:15:08.730", "lastModified": "2023-01-12T17:52:16.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in IISH nlgis2. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file scripts/etl/custom_import.pl. The manipulation leads to sql injection. The name of the patch is 8bdb6fcf7209584eaf1232437f0f53e735b2b34c. It is recommended to apply a patch to fix this issue. The identifier VDB-217609 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nlgis2_project:nlgis2:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-01-14", "matchCriteriaId": "9648F85F-A1F8-4627-A7BE-7A9879EE24FD"}]}]}], "references": [{"url": "https://github.com/IISH/nlgis2/commit/8bdb6fcf7209584eaf1232437f0f53e735b2b34c", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217609", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217609", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/IISH/nlgis2/commit/8bdb6fcf7209584eaf1232437f0f53e735b2b34c"}}