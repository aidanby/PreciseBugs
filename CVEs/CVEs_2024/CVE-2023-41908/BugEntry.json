{"buggy_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         0.10.8\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\n\n/*\n * Configure paths required to find CakePHP + general filepath constants\n */\nrequire __DIR__ . '/paths.php';\n\n/*\n * Bootstrap CakePHP.\n *\n * Does the various bits of setup that CakePHP needs to do.\n * This includes:\n *\n * - Registering the CakePHP autoloader.\n * - Setting the default application paths.\n */\nrequire CORE_PATH . 'config' . DS . 'bootstrap.php';\n\nuse Cake\\Cache\\Cache;\nuse Cake\\Core\\Configure;\nuse Cake\\Core\\Configure\\Engine\\PhpConfig;\nuse Cake\\Datasource\\ConnectionManager;\nuse Cake\\Error\\ErrorTrap;\nuse Cake\\Error\\ExceptionTrap;\nuse Cake\\Filesystem\\File;\nuse Cake\\Http\\ServerRequest;\nuse Cake\\Log\\Log;\nuse Cake\\Mailer\\Mailer;\nuse Cake\\Mailer\\TransportFactory;\nuse Cake\\Routing\\Router;\nuse Cake\\Utility\\Security;\n\n/*\n * See https://github.com/josegonzalez/php-dotenv for API details.\n *\n * Uncomment block of code below if you want to use `.env` file during development.\n * You should copy `config/.env.example` to `config/.env` and set/modify the\n * variables as required.\n *\n * The purpose of the .env file is to emulate the presence of the environment\n * variables like they would be present in production.\n *\n * If you use .env files, be careful to not commit them to source control to avoid\n * security risks. See https://github.com/josegonzalez/php-dotenv#general-security-information\n * for more information for recommended practices.\n*/\n// if (!env('APP_NAME') && file_exists(CONFIG . '.env')) {\n//     $dotenv = new \\josegonzalez\\Dotenv\\Loader([CONFIG . '.env']);\n//     $dotenv->parse()\n//         ->putenv()\n//         ->toEnv()\n//         ->toServer();\n// }\n\n/*\n * Read configuration file and inject configuration into various\n * CakePHP classes.\n *\n * By default there is only one configuration file. It is often a good\n * idea to create multiple configuration files, and separate the configuration\n * that changes from configuration that does not. This makes deployment simpler.\n */\ntry {\n    Configure::config('default', new PhpConfig());\n    Configure::load('app', 'default', false);\n} catch (\\Exception $e) {\n    exit($e->getMessage() . \"\\n\");\n}\n\n/*\n * Load an environment local configuration file to provide overrides to your configuration.\n * Notice: For security reasons app_local.php **should not** be included in your git repo.\n */\nif (file_exists(CONFIG . 'app_local.php')) {\n    Configure::load('app_local', 'default');\n    //Configure::load('cerebrate', 'default', true);\n    $settingsFile = new File(CONFIG . 'config.json');\n    if ($settingsFile->exists()) {\n        $settings = file_get_contents(CONFIG . 'config.json');\n        $settings = json_decode($settings, true);\n        foreach ($settings as $path => $setting) {\n            Configure::write($path, $setting);\n        }\n    }\n}\n\n/*\n * When debug = true the metadata cache should only last\n * for a short time.\n */\nif (Configure::read('debug')) {\n    Configure::write('Cache._cake_model_.duration', '+2 minutes');\n    Configure::write('Cache._cake_core_.duration', '+2 minutes');\n    // disable router cache during development\n    Configure::write('Cache._cake_routes_.duration', '+2 seconds');\n}\n\n/*\n * Set the default server timezone. Using UTC makes time calculations / conversions easier.\n * Check http://php.net/manual/en/timezones.php for list of valid timezone strings.\n */\ndate_default_timezone_set(Configure::read('App.defaultTimezone'));\n\n/*\n * Configure the mbstring extension to use the correct encoding.\n */\nmb_internal_encoding(Configure::read('App.encoding'));\n\n/*\n * Set the default locale. This controls how dates, number and currency is\n * formatted and sets the default language to use for translations.\n */\nini_set('intl.default_locale', Configure::read('App.defaultLocale'));\n\n/*\n * Register application error and exception handlers.\n */\n$isCli = PHP_SAPI === 'cli';\nif ($isCli) {\n    (new ErrorTrap(Configure::read('Error')))->register();\n} else {\n    (new ExceptionTrap(Configure::read('Error')))->register();\n}\n\n/*\n * Include the CLI bootstrap overrides.\n */\nif ($isCli) {\n    require __DIR__ . '/bootstrap_cli.php';\n}\n\n/*\n * Set the full base URL.\n * This URL is used as the base of all absolute links.\n */\n$fullBaseUrl = Configure::read('App.fullBaseUrl');\nif (!$fullBaseUrl) {\n    $s = null;\n    if (env('HTTPS')) {\n        $s = 's';\n    }\n\n    $httpHost = env('HTTP_HOST');\n    if (isset($httpHost)) {\n        $fullBaseUrl = 'http' . $s . '://' . $httpHost;\n    }\n    unset($httpHost, $s);\n}\nif ($fullBaseUrl) {\n    Router::fullBaseUrl($fullBaseUrl);\n}\nunset($fullBaseUrl);\n\nCache::setConfig(Configure::consume('Cache'));\nConnectionManager::setConfig(Configure::consume('Datasources'));\nTransportFactory::setConfig(Configure::consume('EmailTransport'));\nMailer::setConfig(Configure::consume('Email'));\nLog::setConfig(Configure::consume('Log'));\nSecurity::setSalt(Configure::consume('Security.salt'));\n\n/*\n * Setup detectors for mobile and tablet.\n */\nServerRequest::addDetector('mobile', function ($request) {\n    $detector = new \\Detection\\MobileDetect();\n\n    return $detector->isMobile();\n});\nServerRequest::addDetector('tablet', function ($request) {\n    $detector = new \\Detection\\MobileDetect();\n\n    return $detector->isTablet();\n});\n\n/*\n * You can set whether the ORM uses immutable or mutable Time types.\n * The default changed in 4.0 to immutable types. You can uncomment\n * below to switch back to mutable types.\n *\n * You can enable default locale format parsing by adding calls\n * to `useLocaleParser()`. This enables the automatic conversion of\n * locale specific date formats. For details see\n * @link https://book.cakephp.org/4/en/core-libraries/internationalization-and-localization.html#parsing-localized-datetime-data\n */\n// TypeFactory::build('time')\n//    ->useMutable();\n// TypeFactory::build('date')\n//    ->useMutable();\n// TypeFactory::build('datetime')\n//    ->useMutable();\n// TypeFactory::build('timestamp')\n//    ->useMutable();\n// TypeFactory::build('datetimefractional')\n//    ->useMutable();\n// TypeFactory::build('timestampfractional')\n//    ->useMutable();\n// TypeFactory::build('datetimetimezone')\n//    ->useMutable();\n// TypeFactory::build('timestamptimezone')\n//    ->useMutable();\n\n/*\n * Custom Inflector rules, can be set to correctly pluralize or singularize\n * table, model, controller names or whatever other string is passed to the\n * inflection functions.\n */\n//Inflector::rules('plural', ['/^(inflect)or$/i' => '\\1ables']);\n//Inflector::rules('irregular', ['red' => 'redlings']);\n//Inflector::rules('uninflected', ['dontinflectme']);\n//Inflector::rules('transliteration', ['/\u00e5/' => 'aa']);\n", "<?php\n/**\n * Routes configuration.\n *\n * In this file, you set up routes to your controllers and their actions.\n * Routes are very important mechanism that allows you to freely connect\n * different URLs to chosen controllers and their actions (functions).\n *\n * It's loaded within the context of `Application::routes()` method which\n * receives a `RouteBuilder` instance `$routes` as method argument.\n *\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\n\nuse Cake\\Http\\Middleware\\CsrfProtectionMiddleware;\nuse Cake\\Routing\\Route\\DashedRoute;\nuse Cake\\Routing\\RouteBuilder;\n\n/*\n * The default class to use for all routes\n *\n * The following route classes are supplied with CakePHP and are appropriate\n * to set as the default:\n *\n * - Route\n * - InflectedRoute\n * - DashedRoute\n *\n * If no call is made to `Router::defaultRouteClass()`, the class used is\n * `Route` (`Cake\\Routing\\Route\\Route`)\n *\n * Note that `Route` does not do any inflections on URLs which will result in\n * inconsistently cased URLs when used with `:plugin`, `:controller` and\n * `:action` markers.\n */\n/** @var \\Cake\\Routing\\RouteBuilder $routes */\n$routes->setRouteClass(DashedRoute::class);\n$routes->scope('/', function (RouteBuilder $builder) {\n    $builder->setExtensions(['json']);\n    // Register scoped middleware for in scopes.\n    $builder->registerMiddleware('csrf', new CsrfProtectionMiddleware([\n        'httponly' => true,\n    ]));\n    /*\n     * Apply a middleware to the current route scope.\n     * Requires middleware to be registered through `Application::routes()` with `registerMiddleware()`\n     * Dirty way of disabling the middleware if the AUTHORIZATION header is set\n     */\n     if (empty($_SERVER['HTTP_AUTHORIZATION'])) {\n         $builder->applyMiddleware('csrf');\n     }\n\n    /*\n     * Here, we are connecting '/' (base path) to a controller called 'Pages',\n     * its action called 'display', and we pass a param to select the view file\n     * to use (in this case, templates/Pages/home.php)...\n     */\n    $builder->connect('/', ['controller' => 'Instance', 'action' => 'home']);\n\n    /*\n     * ...and connect the rest of 'Pages' controller's URLs.\n     */\n    $builder->connect('/pages/*', ['controller' => 'Pages', 'action' => 'display']);\n\n    /*\n     * Connect catchall routes for all controllers.\n     *\n     * The `fallbacks` method is a shortcut for\n     *\n     * ```\n     * $builder->connect('/:controller', ['action' => 'index']);\n     * $builder->connect('/:controller/:action/*', []);\n     * ```\n     *\n     * You can remove these routes once you've connected the\n     * routes you want in your application.\n     */\n    $builder->fallbacks();\n});\n\n$routes->prefix('Open', function (RouteBuilder $routes) {\n    $routes->setExtensions(['json']);\n    $routes->fallbacks(DashedRoute::class);\n});\n\n/*\n * If you need a different set of middleware or none at all,\n * open new scope and define routes there.\n *\n * ```\n * $routes->scope('/api', function (RouteBuilder $builder) {\n *     // No $builder->applyMiddleware() here.\n *     // Connect API actions here.\n * });\n * ```\n */\n"], "fixing_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         0.10.8\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\n\n/*\n * Configure paths required to find CakePHP + general filepath constants\n */\nrequire __DIR__ . '/paths.php';\n\n/*\n * Bootstrap CakePHP.\n *\n * Does the various bits of setup that CakePHP needs to do.\n * This includes:\n *\n * - Registering the CakePHP autoloader.\n * - Setting the default application paths.\n */\nrequire CORE_PATH . 'config' . DS . 'bootstrap.php';\n\nuse Cake\\Cache\\Cache;\nuse Cake\\Core\\Configure;\nuse Cake\\Core\\Configure\\Engine\\PhpConfig;\nuse Cake\\Datasource\\ConnectionManager;\nuse Cake\\Error\\ErrorTrap;\nuse Cake\\Error\\ExceptionTrap;\nuse Cake\\Filesystem\\File;\nuse Cake\\Http\\ServerRequest;\nuse Cake\\Log\\Log;\nuse Cake\\Mailer\\Mailer;\nuse Cake\\Mailer\\TransportFactory;\nuse Cake\\Routing\\Router;\nuse Cake\\Utility\\Security;\n\n/*\n * See https://github.com/josegonzalez/php-dotenv for API details.\n *\n * Uncomment block of code below if you want to use `.env` file during development.\n * You should copy `config/.env.example` to `config/.env` and set/modify the\n * variables as required.\n *\n * The purpose of the .env file is to emulate the presence of the environment\n * variables like they would be present in production.\n *\n * If you use .env files, be careful to not commit them to source control to avoid\n * security risks. See https://github.com/josegonzalez/php-dotenv#general-security-information\n * for more information for recommended practices.\n*/\n// if (!env('APP_NAME') && file_exists(CONFIG . '.env')) {\n//     $dotenv = new \\josegonzalez\\Dotenv\\Loader([CONFIG . '.env']);\n//     $dotenv->parse()\n//         ->putenv()\n//         ->toEnv()\n//         ->toServer();\n// }\n\n/*\n * Read configuration file and inject configuration into various\n * CakePHP classes.\n *\n * By default there is only one configuration file. It is often a good\n * idea to create multiple configuration files, and separate the configuration\n * that changes from configuration that does not. This makes deployment simpler.\n */\ntry {\n    Configure::config('default', new PhpConfig());\n    Configure::load('app', 'default', false);\n} catch (\\Exception $e) {\n    exit($e->getMessage() . \"\\n\");\n}\n\n/*\n * Load an environment local configuration file to provide overrides to your configuration.\n * Notice: For security reasons app_local.php **should not** be included in your git repo.\n */\nif (file_exists(CONFIG . 'app_local.php')) {\n    Configure::load('app_local', 'default');\n    //Configure::load('cerebrate', 'default', true);\n    $settingsFile = new File(CONFIG . 'config.json');\n    if ($settingsFile->exists()) {\n        $settings = file_get_contents(CONFIG . 'config.json');\n        $settings = json_decode($settings, true);\n        foreach ($settings as $path => $setting) {\n            Configure::write($path, $setting);\n        }\n    }\n}\n\n/*\n * When debug = true the metadata cache should only last\n * for a short time.\n */\nif (Configure::read('debug')) {\n    Configure::write('Cache._cake_model_.duration', '+2 minutes');\n    Configure::write('Cache._cake_core_.duration', '+2 minutes');\n    // disable router cache during development\n    Configure::write('Cache._cake_routes_.duration', '+2 seconds');\n}\n\n/*\n * Set the default server timezone. Using UTC makes time calculations / conversions easier.\n * Check http://php.net/manual/en/timezones.php for list of valid timezone strings.\n */\ndate_default_timezone_set(Configure::read('App.defaultTimezone'));\n\n/*\n * Configure the mbstring extension to use the correct encoding.\n */\nmb_internal_encoding(Configure::read('App.encoding'));\n\n/*\n * Set the default locale. This controls how dates, number and currency is\n * formatted and sets the default language to use for translations.\n */\nini_set('intl.default_locale', Configure::read('App.defaultLocale'));\n\n/*\n * Register application error and exception handlers.\n */\n$isCli = PHP_SAPI === 'cli';\nif ($isCli) {\n    (new ErrorTrap(Configure::read('Error')))->register();\n} else {\n    (new ExceptionTrap(Configure::read('Error')))->register();\n}\n\n/*\n * Include the CLI bootstrap overrides.\n */\nif ($isCli) {\n    require __DIR__ . '/bootstrap_cli.php';\n}\n\n/*\n * Set the full base URL.\n * This URL is used as the base of all absolute links.\n */\n$fullBaseUrl = Configure::read('App.fullBaseUrl');\nif (!$fullBaseUrl) {\n    $s = null;\n    if (env('HTTPS')) {\n        $s = 's';\n    }\n\n    $httpHost = env('HTTP_HOST');\n    if (isset($httpHost)) {\n        $fullBaseUrl = 'http' . $s . '://' . $httpHost;\n    }\n    unset($httpHost, $s);\n}\nif ($fullBaseUrl) {\n    Router::fullBaseUrl($fullBaseUrl);\n}\nunset($fullBaseUrl);\n\nCache::setConfig(Configure::consume('Cache'));\nConnectionManager::setConfig(Configure::consume('Datasources'));\nTransportFactory::setConfig(Configure::consume('EmailTransport'));\nMailer::setConfig(Configure::consume('Email'));\nLog::setConfig(Configure::consume('Log'));\nSecurity::setSalt(Configure::consume('Security.salt'));\n\nConfigure::write('Session', [\n    'defaults' => 'php',\n    'ini' => [\n        'session.cookie_httponly' => true,\n        'session.cookie_secure' => true,\n    ]\n]);\n\n/*\n * Setup detectors for mobile and tablet.\n */\nServerRequest::addDetector('mobile', function ($request) {\n    $detector = new \\Detection\\MobileDetect();\n\n    return $detector->isMobile();\n});\nServerRequest::addDetector('tablet', function ($request) {\n    $detector = new \\Detection\\MobileDetect();\n\n    return $detector->isTablet();\n});\n\n/*\n * You can set whether the ORM uses immutable or mutable Time types.\n * The default changed in 4.0 to immutable types. You can uncomment\n * below to switch back to mutable types.\n *\n * You can enable default locale format parsing by adding calls\n * to `useLocaleParser()`. This enables the automatic conversion of\n * locale specific date formats. For details see\n * @link https://book.cakephp.org/4/en/core-libraries/internationalization-and-localization.html#parsing-localized-datetime-data\n */\n// TypeFactory::build('time')\n//    ->useMutable();\n// TypeFactory::build('date')\n//    ->useMutable();\n// TypeFactory::build('datetime')\n//    ->useMutable();\n// TypeFactory::build('timestamp')\n//    ->useMutable();\n// TypeFactory::build('datetimefractional')\n//    ->useMutable();\n// TypeFactory::build('timestampfractional')\n//    ->useMutable();\n// TypeFactory::build('datetimetimezone')\n//    ->useMutable();\n// TypeFactory::build('timestamptimezone')\n//    ->useMutable();\n\n/*\n * Custom Inflector rules, can be set to correctly pluralize or singularize\n * table, model, controller names or whatever other string is passed to the\n * inflection functions.\n */\n//Inflector::rules('plural', ['/^(inflect)or$/i' => '\\1ables']);\n//Inflector::rules('irregular', ['red' => 'redlings']);\n//Inflector::rules('uninflected', ['dontinflectme']);\n//Inflector::rules('transliteration', ['/\u00e5/' => 'aa']);\n", "<?php\n/**\n * Routes configuration.\n *\n * In this file, you set up routes to your controllers and their actions.\n * Routes are very important mechanism that allows you to freely connect\n * different URLs to chosen controllers and their actions (functions).\n *\n * It's loaded within the context of `Application::routes()` method which\n * receives a `RouteBuilder` instance `$routes` as method argument.\n *\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\n\nuse Cake\\Http\\Middleware\\CsrfProtectionMiddleware;\nuse Cake\\Routing\\Route\\DashedRoute;\nuse Cake\\Routing\\RouteBuilder;\n\n/*\n * The default class to use for all routes\n *\n * The following route classes are supplied with CakePHP and are appropriate\n * to set as the default:\n *\n * - Route\n * - InflectedRoute\n * - DashedRoute\n *\n * If no call is made to `Router::defaultRouteClass()`, the class used is\n * `Route` (`Cake\\Routing\\Route\\Route`)\n *\n * Note that `Route` does not do any inflections on URLs which will result in\n * inconsistently cased URLs when used with `:plugin`, `:controller` and\n * `:action` markers.\n */\n/** @var \\Cake\\Routing\\RouteBuilder $routes */\n$routes->setRouteClass(DashedRoute::class);\n$routes->scope('/', function (RouteBuilder $builder) {\n    $builder->setExtensions(['json']);\n    // Register scoped middleware for in scopes.\n    $builder->registerMiddleware('csrf', new CsrfProtectionMiddleware([\n        'httponly' => true,\n        'secure' => true,\n    ]));\n    /*\n     * Apply a middleware to the current route scope.\n     * Requires middleware to be registered through `Application::routes()` with `registerMiddleware()`\n     * Dirty way of disabling the middleware if the AUTHORIZATION header is set\n     */\n     if (empty($_SERVER['HTTP_AUTHORIZATION'])) {\n         $builder->applyMiddleware('csrf');\n     }\n\n    /*\n     * Here, we are connecting '/' (base path) to a controller called 'Pages',\n     * its action called 'display', and we pass a param to select the view file\n     * to use (in this case, templates/Pages/home.php)...\n     */\n    $builder->connect('/', ['controller' => 'Instance', 'action' => 'home']);\n\n    /*\n     * ...and connect the rest of 'Pages' controller's URLs.\n     */\n    $builder->connect('/pages/*', ['controller' => 'Pages', 'action' => 'display']);\n\n    /*\n     * Connect catchall routes for all controllers.\n     *\n     * The `fallbacks` method is a shortcut for\n     *\n     * ```\n     * $builder->connect('/:controller', ['action' => 'index']);\n     * $builder->connect('/:controller/:action/*', []);\n     * ```\n     *\n     * You can remove these routes once you've connected the\n     * routes you want in your application.\n     */\n    $builder->fallbacks();\n});\n\n$routes->prefix('Open', function (RouteBuilder $routes) {\n    $routes->setExtensions(['json']);\n    $routes->fallbacks(DashedRoute::class);\n});\n\n/*\n * If you need a different set of middleware or none at all,\n * open new scope and define routes there.\n *\n * ```\n * $routes->scope('/api', function (RouteBuilder $builder) {\n *     // No $builder->applyMiddleware() here.\n *     // Connect API actions here.\n * });\n * ```\n */\n"], "filenames": ["config/bootstrap.php", "config/routes.php"], "buggy_code_start_loc": [175, 51], "buggy_code_end_loc": [175, 51], "fixing_code_start_loc": [176, 52], "fixing_code_end_loc": [184, 53], "type": "CWE-862", "message": "Cerebrate before 1.15 lacks the Secure attribute for the session cookie.", "other": {"cve": {"id": "CVE-2023-41908", "sourceIdentifier": "cve@mitre.org", "published": "2023-09-05T07:15:14.810", "lastModified": "2023-09-08T14:26:28.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cerebrate before 1.15 lacks the Secure attribute for the session cookie."}, {"lang": "es", "value": "Cerebrate antes de la versi\u00f3n 1.15 carece del atributo \"Secure\" para la cookie de sesi\u00f3n. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.15", "matchCriteriaId": "DE11F1CF-0968-4E5C-B646-1F5C2BCB9B1E"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/9be81055651649658243b5aa274b175064bfc6db", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/cerebrate-project/cerebrate/compare/v1.14...v1.15", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/9be81055651649658243b5aa274b175064bfc6db"}}