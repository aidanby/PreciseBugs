{"buggy_code": ["<?php\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\n\n// TODO: @adunsulag move these into src/\nclass Controller extends Smarty\n{\n    public $template_mod;\n    public $_current_action;\n    public $_state;\n    public $_args = array();\n    protected $form = null;\n\n    public function __construct()\n    {\n         parent::__construct();\n         $this->template_mod = \"general\";\n         $this->_current_action = \"\";\n         $this->_state = true;\n         $this->setCompileDir($GLOBALS['OE_SITE_DIR'] . '/documents/smarty/main');\n         $this->setCompileCheck(true);\n         $this->setPluginsDir([__DIR__ . \"/../smarty/plugins\", $GLOBALS['vendor_dir'] . \"/smarty/smarty/libs/plugins\"]);\n         $this->assign(\"PROCESS\", \"true\");\n         $this->assign(\"HEADER\", \"<html><head></head><body>\");\n         $this->assign(\"FOOTER\", \"</body></html>\");\n         $this->assign(\"CONTROLLER\", \"controller.php?\");\n         $this->assign(\"CONTROLLER_THIS\", \"controller.php?\" . ($_SERVER['QUERY_STRING'] ?? ''));\n         $this->assign('GLOBALS', $GLOBALS);\n    }\n\n    public function set_current_action($action)\n    {\n         $this->_current_action = $action;\n    }\n\n    public function default_action()\n    {\n         echo \"<html><body></body></html>\";\n    }\n\n    public function process_action()\n    {\n         $this->default_action();\n    }\n\n    public function populate_object(&$obj)\n    {\n        if (!is_object($obj)) {\n            $this->function_argument_error();\n        }\n\n        foreach ($_POST as $varname => $var) {\n            $varname = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", $varname);\n            $func = \"set_\" . $varname;\n            if ((!(str_starts_with(\"_\", $varname))) && is_callable(array($obj,$func))) {\n                //echo \"c: $func on w: \"  . $var . \"<br />\";\n\n                $obj->$func($var, $_POST);\n            }\n        }\n\n            return true;\n    }\n\n    public function function_argument_error()\n    {\n         $this->display($GLOBALS['template_dir'] . \"error/\" . $this->template_mod . \"_function_argument.html\");\n         exit;\n    }\n\n    public function i_once($file)\n    {\n         return include_once($file);\n    }\n\n    public function act($qarray)\n    {\n        if ((array_key_first($qarray) ?? '') == 'practice_settings') {\n            if (!AclMain::aclCheckCore('admin', 'practice')) {\n                echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Practice Settings\")]);\n                exit;\n            }\n        }\n\n        if (isset($_GET['process'])) {\n            unset($_GET['process']);\n            unset($qarray['process']);\n            $_POST['process'] = \"true\";\n        }\n\n        $args = array_reverse(array_keys($qarray));\n        $c_name = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", array_pop($args));\n        $parts = explode(\"_\", $c_name);\n        $name = \"\";\n\n        foreach ($parts as $p) {\n            $name .= ucfirst($p);\n        }\n\n            $c_name = $name;\n            $c_action = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", array_pop($args));\n            $args = array_reverse($args);\n\n        if (!$this->i_once($GLOBALS['fileroot'] . \"/controllers/C_\" . $c_name . \".class.php\")) {\n            echo \"Unable to load controller $name\\n, please check the first argument supplied in the URL and try again\";\n            exit;\n        }\n\n            $obj_name = \"C_\" . $c_name;\n            $c_obj = new $obj_name();\n\n        if (empty($c_action)) {\n            $c_action = \"default\";\n        }\n\n            $c_obj->_current_action = $c_action;\n            $args_array = array();\n\n        foreach ($args as $arg) {\n            $arg = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", $arg);\n            //this is a workaround because call user func does funny things with passing args if they have no assigned value\n            //2013-02-10 EMR Direct: workaround modified since \"0\" is also considered empty;\n            if (empty($qarray[$arg]) && $qarray[$arg] != \"0\") {\n                //if argument is empty pass null as value\n                $args_array[] = null;\n            } else {\n                $args_array[] = $qarray[$arg];\n            }\n        }\n\n            $output = \"\";\n            //print_r($args_array);\n        // can no longer rely on is_callable since smarty 4 invokes a __call function deep within\n        //  its classes, thus is_callable() is always true. so need to do both the is_callable\n        //  and a method_exists() check.\n        if (isset($_POST['process']) && ($_POST['process'] == \"true\")) {\n            if (is_callable(array(&$c_obj, $c_action . \"_action_process\")) && method_exists($c_obj, $c_action . \"_action_process\")) {\n                //echo \"ca: \" . $c_action . \"_action_process\";\n                $output .= call_user_func_array(array(&$c_obj,$c_action . \"_action_process\"), $args_array);\n                if ($c_obj->_state == false) {\n                    return $output;\n                }\n            }\n\n            //echo \"ca: \" . $c_action . \"_action\";\n            $output .=  call_user_func_array(array(&$c_obj,$c_action . \"_action\"), $args_array);\n        } elseif (is_callable(array(&$c_obj, $c_action . \"_action\")) && method_exists($c_obj, $c_action . \"_action\")) {\n            //echo \"ca: \" . $c_action . \"_action\";\n            $output .=  call_user_func_array(array(&$c_obj,$c_action . \"_action\"), $args_array);\n        } else {\n            echo \"The action trying to be performed: \" . $c_action . \" does not exist controller: \" . $name;\n        }\n\n\n            return $output;\n    }\n\n    public function _link($action = \"default\", $inlining = false)\n    {\n         $url_parts = explode(\"&\", $_SERVER['REQUEST_URI']);\n         $link = array_shift($url_parts);\n         //print_r($url_parts);\n\n        if (strpos($url_parts[0], \"=\") === false) {\n            $inline_arg = $url_parts[0];\n            $url_parts[0] = $action;\n        } else {\n            array_unshift($url_parts, $action);\n        }\n\n        if ($inlining) {\n            $link .= \"&\" . urlencode($inline_arg);\n            $link .= \"&action=\" . urlencode($url_parts[0]);\n        } else {\n            $link .= \"&\" . urlencode($url_parts[0]);\n        }\n\n        foreach ($this->_args as $arg_name => $arg) {\n            $link .= \"&\" . urlencode($arg_name) . \"=\" . urlencode($arg);\n        }\n\n            $link .= \"&\";\n            return  $link;\n    }\n}\n"], "fixing_code": ["<?php\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\n\n// TODO: @adunsulag move these into src/\nclass Controller extends Smarty\n{\n    public $template_mod;\n    public $_current_action;\n    public $_state;\n    public $_args = array();\n    protected $form = null;\n\n    public function __construct()\n    {\n         parent::__construct();\n         $this->template_mod = \"general\";\n         $this->_current_action = \"\";\n         $this->_state = true;\n         $this->setCompileDir($GLOBALS['OE_SITE_DIR'] . '/documents/smarty/main');\n         $this->setCompileCheck(true);\n         $this->setPluginsDir([__DIR__ . \"/../smarty/plugins\", $GLOBALS['vendor_dir'] . \"/smarty/smarty/libs/plugins\"]);\n         $this->assign(\"PROCESS\", \"true\");\n         $this->assign(\"HEADER\", \"<html><head></head><body>\");\n         $this->assign(\"FOOTER\", \"</body></html>\");\n         $this->assign(\"CONTROLLER\", \"controller.php?\");\n         $this->assign(\"CONTROLLER_THIS\", \"controller.php?\" . ($_SERVER['QUERY_STRING'] ?? ''));\n         $this->assign('GLOBALS', $GLOBALS);\n    }\n\n    public function set_current_action($action)\n    {\n         $this->_current_action = $action;\n    }\n\n    public function default_action()\n    {\n         echo \"<html><body></body></html>\";\n    }\n\n    public function process_action()\n    {\n         $this->default_action();\n    }\n\n    public function populate_object(&$obj)\n    {\n        if (!is_object($obj)) {\n            $this->function_argument_error();\n        }\n\n        foreach ($_POST as $varname => $var) {\n            $varname = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", $varname);\n            $func = \"set_\" . $varname;\n            if ((!(str_starts_with(\"_\", $varname))) && is_callable(array($obj,$func))) {\n                //echo \"c: $func on w: \"  . $var . \"<br />\";\n\n                $obj->$func($var, $_POST);\n            }\n        }\n\n            return true;\n    }\n\n    public function function_argument_error()\n    {\n         $this->display($GLOBALS['template_dir'] . \"error/\" . $this->template_mod . \"_function_argument.html\");\n         exit;\n    }\n\n    public function i_once($file)\n    {\n         return include_once($file);\n    }\n\n    public function act($qarray)\n    {\n        if ((array_key_first($qarray) ?? '') == 'practice_settings') {\n            if (!AclMain::aclCheckCore('admin', 'practice')) {\n                echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Practice Settings\")]);\n                exit;\n            }\n        }\n\n        if ((array_key_first($qarray) ?? '') == 'prescription') {\n            if (!AclMain::aclCheckCore('patients', 'prescriptions')) {\n                echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Prescriptions\")]);\n                exit;\n            }\n        }\n\n        if (isset($_GET['process'])) {\n            unset($_GET['process']);\n            unset($qarray['process']);\n            $_POST['process'] = \"true\";\n        }\n\n        $args = array_reverse(array_keys($qarray));\n        $c_name = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", array_pop($args));\n        $parts = explode(\"_\", $c_name);\n        $name = \"\";\n\n        foreach ($parts as $p) {\n            $name .= ucfirst($p);\n        }\n\n            $c_name = $name;\n            $c_action = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", array_pop($args));\n            $args = array_reverse($args);\n\n        if (!$this->i_once($GLOBALS['fileroot'] . \"/controllers/C_\" . $c_name . \".class.php\")) {\n            echo \"Unable to load controller $name\\n, please check the first argument supplied in the URL and try again\";\n            exit;\n        }\n\n            $obj_name = \"C_\" . $c_name;\n            $c_obj = new $obj_name();\n\n        if (empty($c_action)) {\n            $c_action = \"default\";\n        }\n\n            $c_obj->_current_action = $c_action;\n            $args_array = array();\n\n        foreach ($args as $arg) {\n            $arg = preg_replace(\"/[^A-Za-z0-9_]/\", \"\", $arg);\n            //this is a workaround because call user func does funny things with passing args if they have no assigned value\n            //2013-02-10 EMR Direct: workaround modified since \"0\" is also considered empty;\n            if (empty($qarray[$arg]) && $qarray[$arg] != \"0\") {\n                //if argument is empty pass null as value\n                $args_array[] = null;\n            } else {\n                $args_array[] = $qarray[$arg];\n            }\n        }\n\n            $output = \"\";\n            //print_r($args_array);\n        // can no longer rely on is_callable since smarty 4 invokes a __call function deep within\n        //  its classes, thus is_callable() is always true. so need to do both the is_callable\n        //  and a method_exists() check.\n        if (isset($_POST['process']) && ($_POST['process'] == \"true\")) {\n            if (is_callable(array(&$c_obj, $c_action . \"_action_process\")) && method_exists($c_obj, $c_action . \"_action_process\")) {\n                //echo \"ca: \" . $c_action . \"_action_process\";\n                $output .= call_user_func_array(array(&$c_obj,$c_action . \"_action_process\"), $args_array);\n                if ($c_obj->_state == false) {\n                    return $output;\n                }\n            }\n\n            //echo \"ca: \" . $c_action . \"_action\";\n            $output .=  call_user_func_array(array(&$c_obj,$c_action . \"_action\"), $args_array);\n        } elseif (is_callable(array(&$c_obj, $c_action . \"_action\")) && method_exists($c_obj, $c_action . \"_action\")) {\n            //echo \"ca: \" . $c_action . \"_action\";\n            $output .=  call_user_func_array(array(&$c_obj,$c_action . \"_action\"), $args_array);\n        } else {\n            echo \"The action trying to be performed: \" . $c_action . \" does not exist controller: \" . $name;\n        }\n\n\n            return $output;\n    }\n\n    public function _link($action = \"default\", $inlining = false)\n    {\n         $url_parts = explode(\"&\", $_SERVER['REQUEST_URI']);\n         $link = array_shift($url_parts);\n         //print_r($url_parts);\n\n        if (strpos($url_parts[0], \"=\") === false) {\n            $inline_arg = $url_parts[0];\n            $url_parts[0] = $action;\n        } else {\n            array_unshift($url_parts, $action);\n        }\n\n        if ($inlining) {\n            $link .= \"&\" . urlencode($inline_arg);\n            $link .= \"&action=\" . urlencode($url_parts[0]);\n        } else {\n            $link .= \"&\" . urlencode($url_parts[0]);\n        }\n\n        foreach ($this->_args as $arg_name => $arg) {\n            $link .= \"&\" . urlencode($arg_name) . \"=\" . urlencode($arg);\n        }\n\n            $link .= \"&\";\n            return  $link;\n    }\n}\n"], "filenames": ["library/classes/Controller.class.php"], "buggy_code_start_loc": [81], "buggy_code_end_loc": [81], "fixing_code_start_loc": [82], "fixing_code_end_loc": [89], "type": "CWE-284", "message": "Improper Access Control in GitHub repository openemr/openemr prior to 7.0.1.", "other": {"cve": {"id": "CVE-2023-2946", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-27T23:15:09.217", "lastModified": "2023-06-01T03:46:57.990", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository openemr/openemr prior to 7.0.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.1", "matchCriteriaId": "30B2EE3F-FA55-46FB-BC32-B041753826A4"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/81832acc14207e577e76c4175967c99ae7e3d3f4", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e550f4b0-945c-4886-af7f-ee0dc30b2a08", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/81832acc14207e577e76c4175967c99ae7e3d3f4"}}