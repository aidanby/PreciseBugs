{"buggy_code": ["<?php\n/**\n * Copyright (c) 2012 Robin Appelman <icewind@owncloud.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n/**\n * User authentication via samba (smbclient)\n *\n * @category Apps\n * @package  UserExternal\n * @author   Robin Appelman <icewind@owncloud.com>\n * @license  http://www.gnu.org/licenses/agpl AGPL\n * @link     http://github.com/owncloud/apps\n */\nclass OC_User_SMB extends \\OCA\\user_external\\Base{\n\tprivate $host;\n\n\tconst SMBCLIENT = 'smbclient -L';\n\tconst LOGINERROR = 'NT_STATUS_LOGON_FAILURE';\n\n\t/**\n\t * Create new samba authentication provider\n\t *\n\t * @param string $host Hostname or IP of windows machine\n\t */\n\tpublic function __construct($host) {\n\t\tparent::__construct($host);\n\t\t$this->host=$host;\n\t}\n\n\t/**\n\t * Check if the password is correct without logging in the user\n\t *\n\t * @param string $uid      The username\n\t * @param string $password The password\n\t *\n\t * @return true/false\n\t */\n\tpublic function checkPassword($uid, $password) {\n\t\t$uidEscaped=escapeshellarg($uid);\n\t\t$password=escapeshellarg($password);\n\t\t$result=array();\n\t\t$command=self::SMBCLIENT.' '.escapeshellarg('//' . $this->host . '/dummy').' -U'.$uidEscaped.'%'.$password;\n\t\t$lastline = exec($command, $output, $retval);\n\t\tif ($retval === 127) {\n\t\t\tOCP\\Util::writeLog(\n\t\t\t\t'user_external', 'ERROR: smbclient executable missing',\n\t\t\t\tOCP\\Util::ERROR\n\t\t\t);\n\t\t\treturn false;\n\t\t} else if (strpos($lastline, self::LOGINERROR) !== false) {\n\t\t\t//normal login error\n\t\t\treturn false;\n\t\t} else if (strpos($lastline, 'NT_STATUS_BAD_NETWORK_NAME') !== false) {\n\t\t\t//login on minor error\n\t\t\tgoto login;\n\t\t} else if ($retval != 0) {\n\t\t\t//some other error\n\t\t\tOCP\\Util::writeLog(\n\t\t\t\t'user_external', 'ERROR: smbclient error: ' . trim($lastline),\n\t\t\t\tOCP\\Util::ERROR\n\t\t\t);\n\t\t\treturn false;\n\t\t} else {\n\t\t\tlogin:\n\t\t\t$this->storeUser($uid);\n\t\t\treturn $uid;\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) 2012 Robin Appelman <icewind@owncloud.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n/**\n * User authentication via samba (smbclient)\n *\n * @category Apps\n * @package  UserExternal\n * @author   Robin Appelman <icewind@owncloud.com>\n * @license  http://www.gnu.org/licenses/agpl AGPL\n * @link     http://github.com/owncloud/apps\n */\nclass OC_User_SMB extends \\OCA\\user_external\\Base{\n\tprivate $host;\n\n\tconst SMBCLIENT = 'smbclient -L';\n\tconst LOGINERROR = 'NT_STATUS_LOGON_FAILURE';\n\n\t/**\n\t * Create new samba authentication provider\n\t *\n\t * @param string $host Hostname or IP of windows machine\n\t */\n\tpublic function __construct($host) {\n\t\tparent::__construct($host);\n\t\t$this->host=$host;\n\t}\n\n\t/**\n\t * @param string $uid\n\t * @param string $password\n\t * @return bool\n\t */\n\tprivate function tryAuthentication($uid, $password) {\n\t\t$uidEscaped = escapeshellarg($uid);\n\t\t$password = escapeshellarg($password);\n\t\t$command = self::SMBCLIENT.' '.escapeshellarg('//' . $this->host . '/dummy').' -U'.$uidEscaped.'%'.$password;\n\t\t$lastline = exec($command, $output, $retval);\n\t\tif ($retval === 127) {\n\t\t\tOCP\\Util::writeLog(\n\t\t\t\t'user_external', 'ERROR: smbclient executable missing',\n\t\t\t\tOCP\\Util::ERROR\n\t\t\t);\n\t\t\treturn false;\n\t\t} else if (strpos($lastline, self::LOGINERROR) !== false) {\n\t\t\t//normal login error\n\t\t\treturn false;\n\t\t} else if (strpos($lastline, 'NT_STATUS_BAD_NETWORK_NAME') !== false) {\n\t\t\t//login on minor error\n\t\t\tgoto login;\n\t\t} else if ($retval != 0) {\n\t\t\t//some other error\n\t\t\tOCP\\Util::writeLog(\n\t\t\t\t'user_external', 'ERROR: smbclient error: ' . trim($lastline),\n\t\t\t\tOCP\\Util::ERROR\n\t\t\t);\n\t\t\treturn false;\n\t\t} else {\n\t\t\tlogin:\n\t\t\treturn $uid;\n\t\t}\n\t}\n\n\t/**\n\t * Check if the password is correct without logging in the user\n\t *\n\t * @param string $uid      The username\n\t * @param string $password The password\n\t *\n\t * @return true/false\n\t */\n\tpublic function checkPassword($uid, $password) {\n\t\t// Check with an invalid password, if the user authenticates then fail\n\t\t$attemptWithInvalidPassword = $this->tryAuthentication($uid, base64_encode($password));\n\t\tif(is_string($attemptWithInvalidPassword)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check with valid password\n\t\t$attemptWithValidPassword = $this->tryAuthentication($uid, $password);\n\t\tif(is_string($attemptWithValidPassword)) {\n\t\t\t$this->storeUser($uid);\n\t\t\treturn $uid;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n"], "filenames": ["user_external/lib/smb.php"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [73], "fixing_code_start_loc": [35], "fixing_code_end_loc": [95], "type": "CWE-287", "message": "Nextcloud Server before 9.0.54 and 10.0.1 & ownCloud Server before 9.1.2, 9.0.6, and 8.2.9 suffer from SMB User Authentication Bypass. Nextcloud/ownCloud include an optional and not by default enabled SMB authentication component that allows authenticating users against an SMB server. This backend is implemented in a way that tries to connect to a SMB server and if that succeeded consider the user logged-in. The backend did not properly take into account SMB servers that have any kind of anonymous auth configured. This is the default on SMB servers nowadays and allows an unauthenticated attacker to gain access to an account without valid credentials. Note: The SMB backend is disabled by default and requires manual configuration in the Nextcloud/ownCloud config file. If you have not configured the SMB backend then you're not affected by this vulnerability.", "other": {"cve": {"id": "CVE-2016-9463", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.933", "lastModified": "2019-10-09T23:20:28.990", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nextcloud Server before 9.0.54 and 10.0.1 & ownCloud Server before 9.1.2, 9.0.6, and 8.2.9 suffer from SMB User Authentication Bypass. Nextcloud/ownCloud include an optional and not by default enabled SMB authentication component that allows authenticating users against an SMB server. This backend is implemented in a way that tries to connect to a SMB server and if that succeeded consider the user logged-in. The backend did not properly take into account SMB servers that have any kind of anonymous auth configured. This is the default on SMB servers nowadays and allows an unauthenticated attacker to gain access to an account without valid credentials. Note: The SMB backend is disabled by default and requires manual configuration in the Nextcloud/ownCloud config file. If you have not configured the SMB backend then you're not affected by this vulnerability."}, {"lang": "es", "value": "Nextcloud Server en versiones anteriores a 9.0.54 y 10.0.1 y ownCloud Server en versiones anteirores a 9.1.2, 9.0.6 y 8.2.9 sufren de Bypass de autenticaci\u00f3n de usuario SMB. Nextcloud/ownCloud Incluye un componente de autenticaci\u00f3n SMB opcional y no predeterminado que permite autenticar a los usuarios en un servidor SMB. Este backend se implementa de una manera que intenta conectarse a un servidor SMB y si eso sucede considerar al usuario conectado. El backend no tom\u00f3 correctamente en cuenta los servidores SMB que tienen cualquier tipo de configuraci\u00f3n an\u00f3nima. Este es el valor predeterminado en los servidores SMB en la actualidad y permite a un atacante no autenticado acceder a una cuenta sin credenciales v\u00e1lidas. Nota: El servidor SMB est\u00e1 deshabilitado de forma predeterminada y requiere una configuraci\u00f3n manual en el archivo de configuraci\u00f3n Nextcloud/ownCloud. Si no has configurado el servidor SMB, no te ver\u00e1s afectado por esta vulnerabilidad."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-303"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.54", "matchCriteriaId": "D6E3F368-B854-430E-AB8F-496675C4E210"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.0.1", "matchCriteriaId": "8288B81D-CA35-46EB-A7E7-B60B193E3F81"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.2.0", "versionEndExcluding": "8.2.9", "matchCriteriaId": "D681D54F-2420-4791-98D3-74E8A2E5F919"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.0.4", "matchCriteriaId": "E4E30105-E26E-4913-8597-66C1C4ABA11B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.1.0", "versionEndExcluding": "9.1.2", "matchCriteriaId": "8E9501A9-E507-4A81-954B-D6D3223EE2F8"}]}]}], "references": [{"url": "https://github.com/nextcloud/apps/commit/b85ace6840b8a6704641086bc3b8eb8e81cb2274", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/apps/commit/decb91fd31f4ffab191cbf09ce4e5c55c67a4087", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/apps/commit/16cbccfc946c8711721fa684d78135ca1fb64791", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/apps/commit/5d47e7b52646cf79edadd78ce10c754290cbb732", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/apps/commit/a0e07b7ddd5a5fd850a6e07f8457d05b76a300b3", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/148151", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://nextcloud.com/security/advisory/?id=nc-sa-2016-006", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://owncloud.org/security/advisory/?id=oc-sa-2016-017", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://rhinosecuritylabs.com/2016/10/operation-ownedcloud-exploitation-post-exploitation-persistence/", "source": "support@hackerone.com", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/apps/commit/b85ace6840b8a6704641086bc3b8eb8e81cb2274"}}