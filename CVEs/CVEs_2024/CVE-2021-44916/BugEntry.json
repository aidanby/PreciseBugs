{"buggy_code": ["<?php\n/**\n#\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n\n* PHP version 5.3.3\n* @category  Helper\n* @package   Open-AudIT\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.2.0\n* @link      http://www.open-audit.org\n*/\n\nif (! defined('BASEPATH')) {\n     exit('No direct script access allowed');\n}\n\nif (! function_exists('output')) {\n    /**\n     * The standard log function for Open-AudIT. Writes logs to a text file in the desired format (json or syslog).\n     *\n     * @access    public\n     *\n     * @category  Function\n     *\n     * @author    Mark Unwin <marku@opmantek.com>\n     *\n     * @return NULL [logs the provided string to the log file]\n     */\n    function output()\n    {\n        $timer_start = microtime(true);\n        error_reporting(E_ALL);\n        $CI = & get_instance();\n\n        if ($CI->response->meta->id === 888888888888) {\n            $CI->response->meta->id = null;\n            unset($CI->response->data);\n            $CI->response->data = array();\n        }\n        if (!empty($CI->response->data) && count($CI->response->data) > 0) {\n            $CI->response->data = output_convert($CI->response->data);\n        }\n        if (empty($CI->response->data)) {\n            $CI->response->data = false;\n        }\n        if (!empty($CI->response->included) && $CI->response->meta->collection !== 'scripts') {\n            $CI->response->included = output_convert($CI->response->included);\n        }\n        create_links();\n        // if we have errors set, make sure we remove the data object / array\n        if (!empty($CI->response->errors) && count($CI->response->errors) > 0) {\n            if ($CI->response->meta->collection !== 'discoveries') {\n                unset($CI->response->data);\n            }\n        } else {\n            unset($CI->response->errors);\n        }\n\n        if ($CI->response->meta->collection === 'summaries' && $CI->response->meta->action === 'execute') {\n            unset($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array('name','count');\n        } else if ($CI->response->meta->collection === 'charts') {\n            // Do nothing\n        } else if ($CI->response->meta->collection === 'nmis') {\n            // Do nothing\n            if (empty($CI->response->meta->data_order)) {\n                $CI->response->meta->data_order = array();\n            }\n        } else {\n            unset($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array();\n\n            if (!empty($CI->response->data[0]->attributes)) {\n                foreach ($CI->response->data[0]->attributes as $key => $value) {\n                    if (strpos($key, '.') !== false or $CI->response->meta->collection === 'reports' or $CI->response->meta->collection === 'search' or $CI->response->meta->collection === 'help' or $CI->response->meta->collection === 'database') {\n                        $CI->response->meta->data_order[] = $key;\n                    } else {\n                        $table = $CI->response->meta->collection;\n                        if ($table === 'devices') {\n                            $table = 'system';\n                        }\n                        if ($CI->db->field_exists($key, $table)) {\n                            $CI->response->meta->data_order[] = $table . '.' . $key;\n                        } else {\n                            $CI->response->meta->data_order[] = $key;\n                        }\n                    }\n                }\n            }\n\n            if ($CI->response->meta->collection === 'devices' && $CI->response->meta->action === 'sub_resource_read') {\n                unset($CI->response->meta->data_order);\n                $CI->response->meta->data_order = array();\n                if (!empty($CI->response->data) && is_array($CI->response->data)) {\n                    foreach ($CI->response->data[0]->attributes as $key => $value) {\n                        $CI->response->meta->data_order[] = $key;\n                    }\n                }\n            }\n\n            $CI->response->meta->data_order = array_unique($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array_values($CI->response->meta->data_order);\n            // sort($CI->response->meta->data_order);\n        }\n\n        if ($CI->response->meta->format === 'screen' && $CI->response->meta->action === 'read' && $CI->m_users->get_user_permission('', $CI->response->meta->collection, 'u')) {\n            $CI->response->edit = true;\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'output_helper::output';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        if (!empty($CI->response->meta->debug) && $CI->response->meta->debug === true) {\n            $CI->response->meta->user = $CI->user;\n            $CI->response->meta->timing = $GLOBALS['timer_log'];\n            $CI->response->meta->time_end = microtime(true);\n            $CI->response->meta->time_elapsed = '';\n            if (!empty($CI->response->meta->time_end) && ! empty($CI->response->meta->time_start)) {\n                $CI->response->meta->time_elapsed = ($CI->response->meta->time_end - $CI->response->meta->time_start);\n            }\n        } else {\n            unset($CI->response->logs);\n            unset($CI->response->meta->internal);\n            unset($CI->response->meta->sql);\n            unset($CI->response->meta->time_start);\n            unset($CI->response->meta->time_end);\n            unset($CI->response->meta->time_elapsed);\n            unset($CI->response->meta->timing);\n        }\n\n        switch ($CI->response->meta->format) {\n            case 'screen':\n                output_screen($CI->response);\n                break;\n\n            case 'json_data':\n                output_json_data();\n                break;\n\n            case 'datatables':\n                output_datatables();\n                break;\n\n            case 'excel':\n                output_csv($CI->response);\n                break;\n\n            case 'csv':\n                output_csv($CI->response);\n                break;\n\n            case 'sql':\n                output_sql($CI->response);\n                break;\n\n            case 'highcharts':\n                output_highcharts($CI->response);\n                break;\n\n            case 'html':\n                output_html($CI->response);\n                break;\n\n            case 'table':\n                output_table($CI->response);\n                break;\n\n            case 'html_formatted':\n                output_html_formatted($CI->response);\n                break;\n\n            case 'table_formatted':\n                output_table_formatted($CI->response);\n                break;\n\n            case 'xml':\n                output_xml($CI->response);\n                break;\n\n            case 'json':\n                output_json($CI->response);\n                break;\n\n            case 'rss':\n                output_rss($CI->response);\n                break;\n\n            default:\n                output_screen($CI->response);\n                break;\n        }\n\n        $log = new stdClass();\n        $log->object = $CI->response->meta->collection;\n        $log->function = strtolower($CI->response->meta->collection) . '::' . strtolower($CI->response->meta->action);\n        $log->severity = 7;\n        if ($CI->response->meta->action === 'create' or $CI->response->meta->action === 'update' or $CI->response->meta->action === 'delete') {\n            $log->severity = 5;\n        }\n        $log->status = @$CI->response->meta->header;\n        $log->summary = 'finish';\n        $log->type = 'access';\n        $log->detail = json_encode($CI->response->meta);\n        stdLog($log);\n    }\n\n    /**\n     * [output_csv description]\n     * @return [type] [description]\n     */\n    function output_csv()\n    {\n        $CI = & get_instance();\n\n        if (!empty($CI->response->meta->heading)) {\n            $filename = $CI->response->meta->heading;\n        } else if (!empty($CI->response->meta->collection)) {\n            $filename = $CI->response->meta->collection;\n        } else {\n            $filename = 'openaudit';\n        }\n\n        $output_csv = '';\n\n        if ($CI->response->meta->collection === 'clouds' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->credentials = json_encode($CI->response->data[$i]->attributes->credentials);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'credentials' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->credentials = json_encode($CI->response->data[$i]->attributes->credentials);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'dashboards' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->options = json_encode($CI->response->data[$i]->attributes->options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'discoveries' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->scan_options = json_encode($CI->response->data[$i]->attributes->scan_options);\n                $CI->response->data[$i]->attributes->match_options = json_encode($CI->response->data[$i]->attributes->match_options);\n                $CI->response->data[$i]->attributes->command_options = json_encode($CI->response->data[$i]->attributes->command_options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'tasks' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->options = json_encode($CI->response->data[$i]->attributes->options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'queue') {\n            foreach ($CI->response->meta->data_order as $key => $value) {\n                if ($value === 'details') {\n                    unset($CI->response->meta->data_order[$key]);\n                }\n            }\n        }\n\n        $table = $CI->response->meta->collection;\n        if ($table === 'devices' or $table === 'queries') {\n            $table = 'system';\n        }\n\n        $CI->response->meta->data_order = array_values($CI->response->meta->data_order);\n\n        $csv_header = $CI->response->meta->data_order;\n\n        for ($i=0; $i < count($csv_header); $i++) {\n            if (stripos($csv_header[$i], $table.'.') === 0) {\n                $csv_header[$i] = str_ireplace($table.'.', '', $csv_header[$i]);\n            }\n        }\n\n        // Our header line\n        $output_csv = '\"' . implode('\",\"', $csv_header) . '\"' . \"\\n\";\n        // Each individual data line\n        $output_escape_csv = @$CI->config->config['output_escape_csv'];\n        if (!empty($CI->response->data)) {\n            foreach ($CI->response->data as $item) {\n                $line_array = array();\n                foreach ($CI->response->meta->data_order as $field) {\n                    $value = '';\n                    if (!empty($item->attributes->{$CI->response->meta->collection.'.'.$field})) {\n                        $value = $item->attributes->{$CI->response->meta->collection.'.'.$field};\n                    }\n                    if (!empty($item->attributes->$field)) {\n                        $value = $item->attributes->$field;\n                    }\n                    if (empty($value) && stripos($field, '.') !== false) {\n                        $temp = explode('.', $field);\n                        if (!empty($item->attributes->{$temp[1]})) {\n                            $value = $item->attributes->{$temp[1]};\n                        }\n                    }\n                    if (is_string($value) or is_int($value)) {\n                        $value = str_replace('\"', '\"\"', (string)$value);\n                    } else {\n                        $value = '';\n                    }\n                    if (!empty($output_escape_csv) && $output_escape_csv === 'y') {\n                        if (strpos($value, '=') === 0 or strpos($value, '+') === 0 or strpos($value, '-') === 0 or strpos($value, '@') === 0) {\n                            $value = \"'\" . $value;\n                        }\n                    }\n                    $line_array[] = $value;\n                }\n                $output_csv .= '\"' . implode('\",\"', $line_array) . '\"' . \"\\n\";\n                unset($line_array);\n            }\n        }\n\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            echo $output_csv;\n            header('Content-Type: text/csv');\n            header('Content-Disposition: attachment;filename=\"'.$filename.'.csv\"');\n            header('Cache-Control: max-age=0');\n        } else {\n            echo $output_csv;\n        }\n    }\n\n    function sql()\n    {\n        $CI = & get_instance();\n        echo \"<pre>\\n\";\n        print_r(json_encode($CI->response));\n        echo \"</pre>\";\n        exit();\n    }\n\n    function output_json()\n    {\n        $timer_start = microtime(true);\n        $CI = & get_instance();\n        $CI->output->enable_profiler(false);\n        header('Content-Type: application/json');\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            if (!empty($CI->response->meta->heading)) {\n                $filename = $CI->response->meta->heading;\n            } else if (!empty($CI->response->meta->collection)) {\n                $filename = $CI->response->meta->collection;\n            } else {\n                $filename = 'openaudit';\n            }\n            header('Content-Disposition: attachment;filename=\"'.$filename.'.json\"');\n            header('Cache-Control: max-age=0');\n        }\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        header($CI->response->meta->header);\n        echo json_encode($CI->response);\n    }\n\n    function output_json_data()\n    {\n        $CI = & get_instance();\n        $CI->output->enable_profiler(false);\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        header($CI->response->meta->header);\n        if (isset($CI->response->data)) {\n            echo json_encode($CI->response->data);\n        } else if (isset($CI->response->error)) {\n            echo json_encode($CI->response->error);\n        }\n    }\n\n    function output_highcharts($response)\n    {\n\n        # $CI = & get_instance();\n\n        switch ($response->included[0]->attributes->type) {\n            case 'line':\n                $response = highcharts_line($response);\n                break;\n\n            case 'pie':\n                $response = highcharts_pie($response);\n                break;\n\n            default:\n                # code...\n                break;\n        }\n\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        #echo str_replace('\"function(event){location.href = this.options.url;}\"', 'function(event){ location.href = this.options.url;},', json_encode($output, JSON_PRETTY_PRINT));;\n        echo json_encode($response, JSON_PRETTY_PRINT);\n    }\n\n    function highcharts_pie($response)\n    {\n        $output = new stdClass();\n\n        $output->title = new stdClass();\n        $output->title->text = $response->included[0]->attributes->name;\n\n        $output->chart = new stdClass();\n        $output->chart->type = $response->included[0]->attributes->type;\n        $output->chart->renderTo = 'widget_' . $response->included[0]->id;\n\n        $output->credits = false;\n\n        $output->exporting = new stdClass();\n        $output->exporting->enabled = false;\n\n        $output->plotOptions = new stdClass();\n\n        $output->plotOptions->pie = new stdClass();\n        $output->plotOptions->pie->allowPointSelect = true;\n        $output->plotOptions->pie->cursor = 'pointer';\n        $output->plotOptions->pie->dataLabels = new stdClass();\n        $output->plotOptions->pie->dataLabels->enabled = false;\n        $output->plotOptions->pie->dataLabels->format = '<b>{point.name}</b>: {point.percentage:.1f} %';\n        $output->plotOptions->pie->showInLegend = true;\n\n        $output->plotOptions->series = new stdClass();\n        $output->plotOptions->series->point = new stdClass();\n        $output->plotOptions->series->point->events = new stdClass();\n        $output->plotOptions->series->point->events->click = \"function(event){location.href = this.options.url;}\";\n\n        $output->subtitle = new stdClass();\n\n        $output->tooltip = new stdClass();\n        $output->tooltip->useHTML = true;\n        $output->tooltip->headerFormat = '<b>{point.key}</b><br />';\n        $output->tooltip->pointFormat = 'Percent: {point.percentage:.1f}%<br />Count: {point.y}';\n\n        $output->series = array();\n        $item = new stdClass();\n        $item->name = $response->included[0]->attributes->dataset_title;\n        $item->colorByPoint = true;\n        $item->data = array();\n        for ($i=0; $i<count($response->data); $i++) {\n            $slice = new stdClass();\n            $slice->name = $response->data[$i]->attributes->name;\n            if (empty($slice->name)) {\n                $slice->name = 'NoData';\n            }\n            $slice->y = intval($response->data[$i]->attributes->count);\n            # $slice->url = '../' . $response->data[$i]->attributes->link;\n            $slice->url = $response->data[$i]->attributes->link;\n            $item->data[] = $slice;\n        }\n        $output->series[] = $item;\n\n        unset($response->data);\n        $response->data = $output;\n        return $response;\n    }\n\n    function highcharts_line($response)\n    {\n        $output = new stdClass();\n        $output->title = new stdClass();\n        $output->title->text = $response->included[0]->attributes->name;\n\n        $output->chart = new stdClass();\n        $output->chart->type = $response->included[0]->attributes->type;\n        $output->chart->renderTo = 'widget_' . $response->included[0]->id;\n\n        $output->credits = false;\n\n        $output->exporting = new stdClass();\n        $output->exporting->enabled = false;\n\n        $output->plotOptions = new stdClass();\n\n        $output->plotOptions->line = new stdClass();\n        $output->plotOptions->line->lineWidth = 2;\n        $output->plotOptions->line->states = new stdClass();\n        $output->plotOptions->line->states->hover = new stdClass();\n        $output->plotOptions->line->states->hover->lineWidth = 3;\n\n        // the dots along the line at each point\n        $output->plotOptions->line->marker = new stdClass();\n        $output->plotOptions->line->marker->enabled = false;\n\n        // the value displayed along the line at each point\n        $output->plotOptions->line->dataLabels = new stdClass();\n        $output->plotOptions->line->dataLabels->enabled = false;\n\n        $output->plotOptions->series = new stdClass();\n        $output->plotOptions->series->point = new stdClass();\n        $output->plotOptions->series->point->events = new stdClass();\n        $output->plotOptions->series->point->events->click = \"function(event){location.href = this.options.url;}\";\n\n        $output->subtitle = new stdClass();\n\n        $output->tooltip = new stdClass();\n        $output->tooltip->headerFormat = '';\n        $output->tooltip->pointFormat = '{point.tooltip}<br />Count: <b>{point.y}</b>';\n\n        $output->xAxis = new stdCLass();\n        $output->xAxis->labels = new stdClass();\n        $output->xAxis->labels->step = 4;\n        $output->xAxis->categories = array();\n\n        $output->yAxis = new stdCLass();\n        $output->yAxis->title = new stdClass();\n        $output->yAxis->title->text = $response->included[0]->attributes->primary;\n\n        $output->series = array();\n        $dataset = new stdClass();\n        $dataset->name = $response->included[0]->attributes->dataset_title;\n        $dataset->color = '#333333';\n        $dataset->data = array();\n        $sub_title_text = '';\n        for ($i=0; $i<count($response->data); $i++) {\n            $item = new stdClass();\n            $item->y = intval($response->data[$i]->attributes->count);\n            # $item->url = '../' . str_replace('@date', $response->data[$i]->attributes->date, $response->included[0]->attributes->link);\n            $item->url = str_replace('@date', $response->data[$i]->attributes->date, $response->included[0]->attributes->link);\n            $item->tooltip = date_format(date_create($response->data[$i]->attributes->date), 'D, M j Y');\n            $dataset->data[] = $item;\n            if ($i === 0) {\n                $sub_title_text = date_format(date_create($response->data[$i]->attributes->date), 'D, M j') . ' to ';\n            }\n            if ($i === count($response->data)-1) {\n                $sub_title_text = $sub_title_text . date_format(date_create($response->data[$i]->attributes->date), 'D, M j Y' . '.');\n            }\n            $output->xAxis->categories[] = date_format(date_create($response->data[$i]->attributes->date), 'j M');\n        }\n        $output->series[] = $dataset;\n\n        $output->subtitle->text = $sub_title_text;\n\n        unset($response->data);\n        $response->data = $output;\n        return $response;\n    }\n\n    function icon($collection)\n    {\n        $icon = 'fa fa-refresh fa-spin fa-fw';\n        switch ($collection) {\n            case 'applications':\n                $icon = 'fa fa-snowflake-o';\n                break;\n\n            case 'attributes':\n                $icon = 'fa fa-list';\n                break;\n\n            case 'baselines':\n                $icon = 'fa fa-line-chart';\n                break;\n\n            case 'baselines_policies':\n                $icon = 'fa fa-area-chart';\n                break;\n\n            case 'buildings':\n                $icon = 'fa fa-building-o';\n                break;\n\n            case 'clouds':\n                $icon = 'fa fa-cloud';\n                break;\n\n            case 'clusters':\n                $icon = 'fa fa-cubes';\n                break;\n\n            case 'collectors':\n                $icon = 'fa fa-cogs';\n                break;\n\n            case 'configuration':\n                $icon = 'fa fa-sliders';\n                break;\n\n            case 'connections':\n                $icon = 'fa fa-link';\n                break;\n\n            case 'credentials':\n                $icon = 'fa fa-shield';\n                break;\n\n            case 'dashboards':\n                $icon = 'fa fa-dashboard';\n                break;\n\n            case 'database':\n                $icon = 'fa fa-database';\n                break;\n\n            case 'devices':\n                $icon = 'fa fa-desktop';\n                break;\n\n            case 'discoveries':\n                $icon = 'fa fa-binoculars';\n                break;\n\n            case 'discovery_scan_options':\n                $icon = 'fa fa-random';\n                break;\n\n            case 'fields':\n                $icon = 'fa fa-comments-o';\n                break;\n\n            case 'files':\n                $icon = 'fa fa-file-image-o';\n                break;\n\n            case 'floors':\n                $icon = 'fa fa-sort-numeric-desc';\n                break;\n\n            case 'groups':\n                $icon = 'fa fa-tags';\n                break;\n\n            case 'help':\n                $icon = 'fa fa-question';\n                break;\n\n            case 'integrations':\n                $icon = 'fa fa-exchange';\n                break;\n\n            case 'ldap_servers':\n                $icon = 'fa fa-address-card-o';\n                break;\n\n            case 'licenses':\n                $icon = 'fa fa-leanpub';\n                break;\n\n            case 'locations':\n                $icon = 'fa fa-building';\n                break;\n\n            case 'logs':\n                $icon = 'fa fa-bars';\n                break;\n\n            case 'maps':\n                $icon = 'fa fa-map-o';\n                break;\n\n            case 'networks':\n                $icon = 'fa fa-wifi';\n                break;\n\n            case 'orgs':\n                $icon = 'fa fa-bank';\n                break;\n\n            case 'queries':\n                $icon = 'fa fa-table';\n                break;\n\n            case 'rack_devices':\n                $icon = 'fa fa-desktop';\n                break;\n\n            case 'racks':\n                $icon = 'fa fa-film';\n                break;\n\n            case 'reports':\n                $icon = 'fa fa-table';\n                break;\n\n            case 'roles':\n                $icon = 'fa fa-lock';\n                break;\n\n            case 'rooms':\n                $icon = 'fa fa-plus-square-o';\n                break;\n\n            case 'rows':\n                $icon = 'fa fa-hashtag';\n                break;\n\n            case 'rules':\n                $icon = 'fa fa-map-signs';\n                break;\n\n            case 'scripts':\n                $icon = 'fa fa-code';\n                break;\n\n            case 'summaries':\n                $icon = 'fa fa-pie-chart';\n                break;\n\n            case 'tasks':\n                $icon = 'fa fa-clock-o';\n                break;\n\n            case 'users':\n                $icon = 'fa fa-users';\n                break;\n\n            case 'widgets':\n                $icon = 'fa fa-bar-chart';\n                break;\n\n            default:\n                $icon = 'fa fa-refresh fa-spin fa-fw';\n                break;\n        }\n        return $icon;\n    }\n\n    function output_screen()\n    {\n        $timer_start = microtime(true);\n        $CI = & get_instance();\n        if ($CI->response->meta->action === 'create' && $CI->response->meta->collection !== 'search') {\n            redirect($CI->response->meta->collection . '/' . $CI->response->meta->id);\n        }\n        header($CI->response->meta->header);\n        $CI->response->meta->icon = icon($CI->response->meta->collection);\n        $CI->response->queries = array();\n\n        $CI->response->orgs = $CI->m_orgs->collection($CI->user->id);\n\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10000\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered Today\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered Yesterday\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered in the Last 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered in the Last 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20000\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered Today\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered Yesterday\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered in the Last 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered in the Last 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 90 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30004\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 180 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n\n        if ($CI->config->config['internal_version'] >= 20170620) {\n            $CI->load->model('m_queries');\n            $result = $CI->m_queries->collection($CI->user->id);\n            $CI->response->included = array_merge($CI->response->included, $result);\n\n            $CI->load->model('m_summaries');\n            $result = $CI->m_summaries->collection($CI->user->id);\n            $CI->response->included = array_merge($CI->response->included, $result);\n        }\n\n        $CI->load->model('m_dashboards');\n        $result = @$CI->m_dashboards->collection($CI->user->id);\n        $CI->response->included = @array_merge($CI->response->included, $result);\n        $CI->response->dashboards = @array_merge($CI->response->included, $result);\n\n        $include = true;\n        if (is_array($CI->response->included)) {\n            foreach ($CI->response->included as $item) {\n                if (!empty($item->type) and $item->type == 'attributes') {\n                    $include = false;\n                }\n            }\n        }\n        if ($include and $CI->response->meta->collection !== 'attributes') {\n            if ($CI->db->table_exists('attributes')) {\n                $CI->load->model('m_attributes');\n                $attributes = $CI->m_attributes->collection($CI->user->id);\n                usort($attributes, \"sort_attributes\");\n                $CI->response->included = array_merge($CI->response->included, $attributes);\n            }\n        }\n\n        if (!empty($CI->response->errors) and $CI->response->meta->collection !== 'discoveries') {\n            unset($CI->response->data);\n            $CI->response->include = 'v_error';\n            $include = 'v_error';\n        } else {\n            if ($CI->response->meta->action === 'import_form') {\n                $CI->response->include = 'v_collection_import_form';\n            }\n            if (empty($CI->response->include)) {\n                $CI->response->include = 'v_' . $CI->response->meta->collection . '_' . $CI->response->meta->action;\n            }\n            $CI->response->heading = $CI->response->meta->heading;\n        }\n\n        if (empty($CI->response->meta->debug)) {\n            unset($CI->response->logs);\n        }\n\n        $CI->response = filter_response($CI->response);\n        $CI->load->view('v_template', $CI->response);\n    }\n\n    function filter_response(&$response)\n    {\n        if (is_array($response) or is_object($response)) {\n            foreach ($response as &$item) {\n                $item = filter_response($item);\n            }\n        } else if (is_string($response)) {\n            $response = htmlentities($response, ENT_QUOTES, 'UTF-8');\n            return $response;\n        } else {\n            return $response;\n        }\n        return($response);\n    }\n\n    function output_xml()\n    {\n        $CI = & get_instance();\n        $CI->load->helper('xml');\n        if (!empty($CI->response->meta->heading)) {\n            $filename = $CI->response->meta->heading;\n        } else if (!empty($CI->response->meta->collection)) {\n            $filename = $CI->response->meta->collection;\n        } else {\n            $filename = 'openaudit';\n        }\n        $output = \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\n\";\n        $output .= \"<\" . $CI->response->meta->collection . \">\\n\";\n        foreach ($CI->response->data as $details) {\n            $output .= \"\\t<item>\\n\";\n            foreach ($details->attributes as $attribute => $value) {\n                if (gettype($value) == 'string') {\n                    if (phpversion() >= 5.4) {\n                        $value = htmlspecialchars($value, ENT_XML1 | ENT_QUOTES, 'UTF-8');\n                    } else {\n                        $value = xml_convert($value);\n                    }\n                    $output .= \"\\t\\t<\".$attribute.'>'.trim($value).'</'.$attribute.\">\\n\";\n                }\n            }\n            $output .= \"\\t</item>\\n\";\n        }\n        $output .=  \"</\" . $CI->response->meta->collection . \">\\n\";\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/xml');\n            header('Content-Disposition: attachment;filename=\"' . $filename . '.xml\"');\n            header('Cache-Control: max-age=0');\n            echo $output;\n        } else {\n            echo \"<pre>\" . htmlentities($output) . \"</pre>\";\n        }\n    }\n\n    function output_convert($data)\n    {\n        $CI = & get_instance();\n        $CI->load->helper('network');\n        foreach ($data as $row) {\n            if (is_array($row)) {\n                $row = output_convert($row);\n            } elseif (is_object($row)) {\n                if (!empty($row->attributes)) {\n                    foreach ($row->attributes as $key => $value) {\n                        if (isset($key) && ($key === 'id' or $key === 'free' or $key === 'used' or $key === 'size' or $key === 'speed' or $key === 'total' or $key === 'col_order' or $key === 'access_level' or $key === 'count')) {\n                            $row->attributes->$key = intval($value);\n                        } elseif ((strrpos($key, '_id') === strlen($key)-3) or\n                                    (strrpos($key, '.id') === strlen($key)-3) or\n                                    (strrpos($key, '_count') === strlen($key)-6) or\n                                    (strrpos($key, '_percent') === strlen($key)-8) or\n                                    (strrpos($key, '_size') === strlen($key)-5)) {\n                            $row->attributes->$key = intval($value);\n                        } elseif ((strrpos($key, 'ip') === strlen($key)-2) or\n                                (strrpos($key, 'next_hop') === strlen($key)-8) or\n                                (strrpos($key, 'destination') === strlen($key)-11)) {\n                            $temp_name = $key . '_padded';\n                            $row->attributes->$temp_name = ip_address_from_db($value);\n                            $row->attributes->$temp_name = ip_address_to_db($row->attributes->$temp_name);\n                            $row->attributes->$key = ip_address_from_db($value);\n                            if ($row->attributes->$temp_name === $row->attributes->$key) {\n                                unset($row->attributes->$temp_name);\n                            }\n                        }\n                        if (strrpos($key, 'system_id') === strlen($key)-9) {\n                            $row->attributes->{'system.id'} = $value;\n                        }\n                        if (strrpos($key, 'org_id') === strlen($key)-6) {\n                            $row->attributes->{'orgs.id'} = $value;\n                        }\n                        if (strrpos($key, 'location_id') === strlen($key)-11) {\n                            $row->attributes->{'locations.id'} = $value;\n                        }\n                    }\n                }\n            }\n        }\n        return($data);\n    }\n\n    function create_url($query_parameters = null)\n    {\n        $CI = & get_instance();\n        $proto = 'http://';\n        if ($CI->config->config['is_ssl'] === true) {\n            $proto = 'https://';\n        }\n        $link = $proto . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'] . '?';\n        if (!empty($query_parameters)) {\n            for ($i=0; $i < count($query_parameters); $i++) {\n                if (!empty($query_parameters[$i]->name)) {\n                    if (empty($query_parameters[$i]->operator) or $query_parameters[$i]->operator == '=') {\n                        $query_parameters[$i]->operator = '';\n                    }\n                    $link .= urlencode($query_parameters[$i]->name) . '=' . $query_parameters[$i]->operator . urlencode($query_parameters[$i]->value) . '&';\n                }\n            }\n        }\n        $link = substr($link, 0, strlen($link)-1);\n        return $link;\n    }\n\n    function create_links()\n    {\n        $CI = & get_instance();\n        if (empty($CI->config->config['page_size'])) {\n            $CI->config->config['page_size'] = 1000;\n        }\n        $offset = '';\n        if ($CI->response->meta->total > 0 and $CI->response->meta->collection != 'charts') {\n            # next link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if (intval($CI->response->meta->total) > intval($CI->response->meta->filtered) and  (intval($CI->response->meta->offset)  <  intval($CI->response->meta->total))) {\n                $offset = intval($CI->response->meta->offset) + intval($CI->response->meta->limit);\n                $hit = false;\n                for ($i=0; $i < count($query_parameters); $i++) {\n                    if ($query_parameters[$i]->name == 'offset') {\n                        $query_parameters[$i]->value = $offset;\n                        $hit = true;\n                    }\n                }\n                if (!$hit) {\n                    $item = new stdClass();\n                    $item->name = 'offset';\n                    $item->value = $offset;\n                    $query_parameters[] = $item;\n                    unset($item);\n                }\n            }\n            $CI->response->links->next = create_url($query_parameters);\n            unset($query_parameters);\n\n            #prev link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if (!empty($CI->response->meta->offset)) {\n                $temp = intval($CI->response->meta->limit);\n                if (empty($temp)) {\n                    $temp = $CI->config->config['page_size'];\n                }\n                if ($temp < 0) {\n                    $temp = 0;\n                }\n                $offset = intval($CI->response->meta->offset - $temp);\n                if (!empty($offset)) {\n                    $hit = false;\n                    for ($i=0; $i < count($query_parameters); $i++) {\n                        if ($query_parameters[$i]->name == 'offset') {\n                            $query_parameters[$i]->value = $offset;\n                            $hit = true;\n                        }\n                    }\n                    if (!$hit) {\n                        $item = new stdClass();\n                        $item->name = 'offset';\n                        $item->value = $offset;\n                        $query_parameters[] = $item;\n                        unset($item);\n                    }\n                } else {\n                    for ($i=0; $i < count($query_parameters); $i++) {\n                        if ($query_parameters[$i]->name == 'offset') {\n                            unset($query_parameters[$i]);\n                        }\n                    }\n                }\n            }\n            $CI->response->links->prev = create_url($query_parameters);\n            unset($query_parameters);\n\n            # first link\n            $offset = 0;\n            $query_parameters = $CI->response->meta->query_parameters;\n            for ($i=0; $i < count($query_parameters); $i++) {\n                if ($query_parameters[$i]->name == 'offset') {\n                    unset($query_parameters[$i]);\n                }\n            }\n            $CI->response->links->first = create_url($query_parameters);\n            unset($query_parameters);\n\n            # last link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if ($CI->response->meta->total > $CI->response->meta->limit) {\n                $temp = intval($CI->response->meta->limit);\n                if (empty($temp)) {\n                    $temp = $CI->config->config['page_size'];\n                }\n                if ($temp < 0) {\n                    $temp = 0;\n                }\n                $offset = intval($CI->response->meta->total) - intval($temp);\n                $hit = false;\n                for ($i=0; $i < count($query_parameters); $i++) {\n                    if ($query_parameters[$i]->name == 'offset') {\n                        $query_parameters[$i]->value = $offset;\n                        $hit = true;\n                    }\n                }\n                if (!$hit) {\n                    $item = new stdClass();\n                    $item->name = 'offset';\n                    $item->value = $offset;\n                    $query_parameters[] = $item;\n                    unset($item);\n                }\n            }\n            $CI->response->links->last = create_url($query_parameters);\n            unset($query_parameters);\n        }\n    }\n\n    function output_html()\n    {\n        $CI = & get_instance();\n        $CI->response = filter_response($CI->response);\n        $table = \"<table><thead><tr>\";\n        // Our Headers\n        foreach ($CI->response->data[0]->attributes as $key => $value) {\n            if (stripos($key, '_padded') === false) {\n                $table .= \"<th>\" . $key . \"</th>\";\n            }\n        }\n        $table .= \"</tr></thead><tbody>\";\n        foreach ($CI->response->data as $item) {\n            $table .= \"<tr>\";\n            foreach ($item->attributes as $key => $value) {\n                if (stripos($key, '_padded') === false) {\n                    $table .= \"<td>\" . @$value . \"</td>\";\n                }\n            }\n            $table .= \"</tr>\";\n        }\n        $table .= \"</tbody></table>\";\n        echo $table;\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/html');\n            header('Content-Disposition: attachment;filename=\"'.$CI->response->meta->heading.'.html\"');\n            header('Cache-Control: max-age=0');\n        }\n    }\n\n    function output_table()\n    {\n        $CI = & get_instance();\n        $CI->response = filter_response($CI->response);\n        $table = \"<table><thead><tr>\";\n        // Our Headers\n        foreach ($CI->response->data[0]->attributes as $key => $value) {\n            if (stripos($key, '_padded') === false) {\n                $table .= \"<th>\" . $key . \"</th>\";\n            }\n        }\n        $table .= \"</tr></thead><tbody>\";\n        foreach ($CI->response->data as $item) {\n            $table .= \"<tr>\";\n            foreach ($item->attributes as $key => $value) {\n                if (stripos($key, '_padded') === false) {\n                    $table .= \"<td>\" . @$value . \"</td>\";\n                }\n            }\n            $table .= \"</tr>\";\n        }\n        $table .= \"</tbody></table>\";\n        echo $table;\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/html');\n            header('Content-Disposition: attachment;filename=\"'.$CI->response->meta->heading.'.html\"');\n            header('Cache-Control: max-age=0');\n        }\n    }\n\n    function sort_attributes($a, $b)\n    {\n        return strcmp(strtolower($a->attributes->name), strtolower($b->attributes->name));\n    }\n\n/* End of file output_helper.php */\n/* Location: ./system/application/helpers/output_helper.php */\n}\n"], "fixing_code": ["<?php\n/**\n#\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n\n* PHP version 5.3.3\n* @category  Helper\n* @package   Open-AudIT\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.2.0\n* @link      http://www.open-audit.org\n*/\n\nif (! defined('BASEPATH')) {\n     exit('No direct script access allowed');\n}\n\nif (! function_exists('output')) {\n    /**\n     * The standard log function for Open-AudIT. Writes logs to a text file in the desired format (json or syslog).\n     *\n     * @access    public\n     *\n     * @category  Function\n     *\n     * @author    Mark Unwin <marku@opmantek.com>\n     *\n     * @return NULL [logs the provided string to the log file]\n     */\n    function output()\n    {\n        $timer_start = microtime(true);\n        error_reporting(E_ALL);\n        $CI = & get_instance();\n\n        if ($CI->response->meta->id === 888888888888) {\n            $CI->response->meta->id = null;\n            unset($CI->response->data);\n            $CI->response->data = array();\n        }\n        if (!empty($CI->response->data) && count($CI->response->data) > 0) {\n            $CI->response->data = output_convert($CI->response->data);\n        }\n        if (empty($CI->response->data)) {\n            $CI->response->data = false;\n        }\n        if (!empty($CI->response->included) && $CI->response->meta->collection !== 'scripts') {\n            $CI->response->included = output_convert($CI->response->included);\n        }\n        create_links();\n        // if we have errors set, make sure we remove the data object / array\n        if (!empty($CI->response->errors) && count($CI->response->errors) > 0) {\n            if ($CI->response->meta->collection !== 'discoveries') {\n                unset($CI->response->data);\n            }\n        } else {\n            unset($CI->response->errors);\n        }\n\n        if ($CI->response->meta->collection === 'summaries' && $CI->response->meta->action === 'execute') {\n            unset($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array('name','count');\n        } else if ($CI->response->meta->collection === 'charts') {\n            // Do nothing\n        } else if ($CI->response->meta->collection === 'nmis') {\n            // Do nothing\n            if (empty($CI->response->meta->data_order)) {\n                $CI->response->meta->data_order = array();\n            }\n        } else {\n            unset($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array();\n\n            if (!empty($CI->response->data[0]->attributes)) {\n                foreach ($CI->response->data[0]->attributes as $key => $value) {\n                    if (strpos($key, '.') !== false or $CI->response->meta->collection === 'reports' or $CI->response->meta->collection === 'search' or $CI->response->meta->collection === 'help' or $CI->response->meta->collection === 'database') {\n                        $CI->response->meta->data_order[] = $key;\n                    } else {\n                        $table = $CI->response->meta->collection;\n                        if ($table === 'devices') {\n                            $table = 'system';\n                        }\n                        if ($CI->db->field_exists($key, $table)) {\n                            $CI->response->meta->data_order[] = $table . '.' . $key;\n                        } else {\n                            $CI->response->meta->data_order[] = $key;\n                        }\n                    }\n                }\n            }\n\n            if ($CI->response->meta->collection === 'devices' && $CI->response->meta->action === 'sub_resource_read') {\n                unset($CI->response->meta->data_order);\n                $CI->response->meta->data_order = array();\n                if (!empty($CI->response->data) && is_array($CI->response->data)) {\n                    foreach ($CI->response->data[0]->attributes as $key => $value) {\n                        $CI->response->meta->data_order[] = $key;\n                    }\n                }\n            }\n\n            $CI->response->meta->data_order = array_unique($CI->response->meta->data_order);\n            $CI->response->meta->data_order = array_values($CI->response->meta->data_order);\n            // sort($CI->response->meta->data_order);\n        }\n\n        if ($CI->response->meta->format === 'screen' && $CI->response->meta->action === 'read' && $CI->m_users->get_user_permission('', $CI->response->meta->collection, 'u')) {\n            $CI->response->edit = true;\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'output_helper::output';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        if (!empty($CI->response->meta->debug) && $CI->response->meta->debug === true) {\n            $CI->response->meta->user = $CI->user;\n            $CI->response->meta->timing = $GLOBALS['timer_log'];\n            $CI->response->meta->time_end = microtime(true);\n            $CI->response->meta->time_elapsed = '';\n            if (!empty($CI->response->meta->time_end) && ! empty($CI->response->meta->time_start)) {\n                $CI->response->meta->time_elapsed = ($CI->response->meta->time_end - $CI->response->meta->time_start);\n            }\n        } else {\n            unset($CI->response->logs);\n            unset($CI->response->meta->internal);\n            unset($CI->response->meta->sql);\n            unset($CI->response->meta->time_start);\n            unset($CI->response->meta->time_end);\n            unset($CI->response->meta->time_elapsed);\n            unset($CI->response->meta->timing);\n        }\n\n        switch ($CI->response->meta->format) {\n            case 'screen':\n                output_screen($CI->response);\n                break;\n\n            case 'json_data':\n                output_json_data();\n                break;\n\n            case 'datatables':\n                output_datatables();\n                break;\n\n            case 'excel':\n                output_csv($CI->response);\n                break;\n\n            case 'csv':\n                output_csv($CI->response);\n                break;\n\n            case 'sql':\n                output_sql($CI->response);\n                break;\n\n            case 'highcharts':\n                output_highcharts($CI->response);\n                break;\n\n            case 'html':\n                output_html($CI->response);\n                break;\n\n            case 'table':\n                output_table($CI->response);\n                break;\n\n            case 'html_formatted':\n                output_html_formatted($CI->response);\n                break;\n\n            case 'table_formatted':\n                output_table_formatted($CI->response);\n                break;\n\n            case 'xml':\n                output_xml($CI->response);\n                break;\n\n            case 'json':\n                output_json($CI->response);\n                break;\n\n            case 'rss':\n                output_rss($CI->response);\n                break;\n\n            default:\n                output_screen($CI->response);\n                break;\n        }\n\n        $log = new stdClass();\n        $log->object = $CI->response->meta->collection;\n        $log->function = strtolower($CI->response->meta->collection) . '::' . strtolower($CI->response->meta->action);\n        $log->severity = 7;\n        if ($CI->response->meta->action === 'create' or $CI->response->meta->action === 'update' or $CI->response->meta->action === 'delete') {\n            $log->severity = 5;\n        }\n        $log->status = @$CI->response->meta->header;\n        $log->summary = 'finish';\n        $log->type = 'access';\n        $log->detail = json_encode($CI->response->meta);\n        stdLog($log);\n    }\n\n    /**\n     * [output_csv description]\n     * @return [type] [description]\n     */\n    function output_csv()\n    {\n        $CI = & get_instance();\n\n        if (!empty($CI->response->meta->heading)) {\n            $filename = $CI->response->meta->heading;\n        } else if (!empty($CI->response->meta->collection)) {\n            $filename = $CI->response->meta->collection;\n        } else {\n            $filename = 'openaudit';\n        }\n\n        $output_csv = '';\n\n        if ($CI->response->meta->collection === 'clouds' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->credentials = json_encode($CI->response->data[$i]->attributes->credentials);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'credentials' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->credentials = json_encode($CI->response->data[$i]->attributes->credentials);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'dashboards' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->options = json_encode($CI->response->data[$i]->attributes->options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'discoveries' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->scan_options = json_encode($CI->response->data[$i]->attributes->scan_options);\n                $CI->response->data[$i]->attributes->match_options = json_encode($CI->response->data[$i]->attributes->match_options);\n                $CI->response->data[$i]->attributes->command_options = json_encode($CI->response->data[$i]->attributes->command_options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'tasks' and ! empty($CI->response->data)) {\n            for ($i=0; $i < count($CI->response->data); $i++) {\n                $CI->response->data[$i]->attributes->options = json_encode($CI->response->data[$i]->attributes->options);\n            }\n        }\n\n        if ($CI->response->meta->collection === 'queue') {\n            foreach ($CI->response->meta->data_order as $key => $value) {\n                if ($value === 'details') {\n                    unset($CI->response->meta->data_order[$key]);\n                }\n            }\n        }\n\n        $table = $CI->response->meta->collection;\n        if ($table === 'devices' or $table === 'queries') {\n            $table = 'system';\n        }\n\n        $CI->response->meta->data_order = array_values($CI->response->meta->data_order);\n\n        $csv_header = $CI->response->meta->data_order;\n\n        for ($i=0; $i < count($csv_header); $i++) {\n            if (stripos($csv_header[$i], $table.'.') === 0) {\n                $csv_header[$i] = str_ireplace($table.'.', '', $csv_header[$i]);\n            }\n        }\n\n        // Our header line\n        $output_csv = '\"' . implode('\",\"', $csv_header) . '\"' . \"\\n\";\n        // Each individual data line\n        $output_escape_csv = @$CI->config->config['output_escape_csv'];\n        if (!empty($CI->response->data)) {\n            foreach ($CI->response->data as $item) {\n                $line_array = array();\n                foreach ($CI->response->meta->data_order as $field) {\n                    $value = '';\n                    if (!empty($item->attributes->{$CI->response->meta->collection.'.'.$field})) {\n                        $value = $item->attributes->{$CI->response->meta->collection.'.'.$field};\n                    }\n                    if (!empty($item->attributes->$field)) {\n                        $value = $item->attributes->$field;\n                    }\n                    if (empty($value) && stripos($field, '.') !== false) {\n                        $temp = explode('.', $field);\n                        if (!empty($item->attributes->{$temp[1]})) {\n                            $value = $item->attributes->{$temp[1]};\n                        }\n                    }\n                    if (is_string($value) or is_int($value)) {\n                        $value = str_replace('\"', '\"\"', (string)$value);\n                    } else {\n                        $value = '';\n                    }\n                    if (!empty($output_escape_csv) && $output_escape_csv === 'y') {\n                        if (strpos($value, '=') === 0 or strpos($value, '+') === 0 or strpos($value, '-') === 0 or strpos($value, '@') === 0) {\n                            $value = \"'\" . $value;\n                        }\n                    }\n                    $line_array[] = $value;\n                }\n                $output_csv .= '\"' . implode('\",\"', $line_array) . '\"' . \"\\n\";\n                unset($line_array);\n            }\n        }\n\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            echo $output_csv;\n            header('Content-Type: text/csv');\n            header('Content-Disposition: attachment;filename=\"'.$filename.'.csv\"');\n            header('Cache-Control: max-age=0');\n        } else {\n            echo $output_csv;\n        }\n    }\n\n    function sql()\n    {\n        $CI = & get_instance();\n        echo \"<pre>\\n\";\n        print_r(json_encode($CI->response));\n        echo \"</pre>\";\n        exit();\n    }\n\n    function output_json()\n    {\n        $timer_start = microtime(true);\n        $CI = & get_instance();\n        $CI->output->enable_profiler(false);\n        header('Content-Type: application/json');\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            if (!empty($CI->response->meta->heading)) {\n                $filename = $CI->response->meta->heading;\n            } else if (!empty($CI->response->meta->collection)) {\n                $filename = $CI->response->meta->collection;\n            } else {\n                $filename = 'openaudit';\n            }\n            header('Content-Disposition: attachment;filename=\"'.$filename.'.json\"');\n            header('Cache-Control: max-age=0');\n        }\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        header($CI->response->meta->header);\n        echo json_encode($CI->response);\n    }\n\n    function output_json_data()\n    {\n        $CI = & get_instance();\n        $CI->output->enable_profiler(false);\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        header($CI->response->meta->header);\n        if (isset($CI->response->data)) {\n            echo json_encode($CI->response->data);\n        } else if (isset($CI->response->error)) {\n            echo json_encode($CI->response->error);\n        }\n    }\n\n    function output_highcharts($response)\n    {\n\n        # $CI = & get_instance();\n\n        switch ($response->included[0]->attributes->type) {\n            case 'line':\n                $response = highcharts_line($response);\n                break;\n\n            case 'pie':\n                $response = highcharts_pie($response);\n                break;\n\n            default:\n                # code...\n                break;\n        }\n\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        #echo str_replace('\"function(event){location.href = this.options.url;}\"', 'function(event){ location.href = this.options.url;},', json_encode($output, JSON_PRETTY_PRINT));;\n        echo json_encode($response, JSON_PRETTY_PRINT);\n    }\n\n    function highcharts_pie($response)\n    {\n        $output = new stdClass();\n\n        $output->title = new stdClass();\n        $output->title->text = $response->included[0]->attributes->name;\n\n        $output->chart = new stdClass();\n        $output->chart->type = $response->included[0]->attributes->type;\n        $output->chart->renderTo = 'widget_' . $response->included[0]->id;\n\n        $output->credits = false;\n\n        $output->exporting = new stdClass();\n        $output->exporting->enabled = false;\n\n        $output->plotOptions = new stdClass();\n\n        $output->plotOptions->pie = new stdClass();\n        $output->plotOptions->pie->allowPointSelect = true;\n        $output->plotOptions->pie->cursor = 'pointer';\n        $output->plotOptions->pie->dataLabels = new stdClass();\n        $output->plotOptions->pie->dataLabels->enabled = false;\n        $output->plotOptions->pie->dataLabels->format = '<b>{point.name}</b>: {point.percentage:.1f} %';\n        $output->plotOptions->pie->showInLegend = true;\n\n        $output->plotOptions->series = new stdClass();\n        $output->plotOptions->series->point = new stdClass();\n        $output->plotOptions->series->point->events = new stdClass();\n        $output->plotOptions->series->point->events->click = \"function(event){location.href = this.options.url;}\";\n\n        $output->subtitle = new stdClass();\n\n        $output->tooltip = new stdClass();\n        $output->tooltip->useHTML = true;\n        $output->tooltip->headerFormat = '<b>{point.key}</b><br />';\n        $output->tooltip->pointFormat = 'Percent: {point.percentage:.1f}%<br />Count: {point.y}';\n\n        $output->series = array();\n        $item = new stdClass();\n        $item->name = $response->included[0]->attributes->dataset_title;\n        $item->colorByPoint = true;\n        $item->data = array();\n        for ($i=0; $i<count($response->data); $i++) {\n            $slice = new stdClass();\n            $slice->name = $response->data[$i]->attributes->name;\n            if (empty($slice->name)) {\n                $slice->name = 'NoData';\n            }\n            $slice->y = intval($response->data[$i]->attributes->count);\n            # $slice->url = '../' . $response->data[$i]->attributes->link;\n            $slice->url = $response->data[$i]->attributes->link;\n            $item->data[] = $slice;\n        }\n        $output->series[] = $item;\n\n        unset($response->data);\n        $response->data = $output;\n        return $response;\n    }\n\n    function highcharts_line($response)\n    {\n        $output = new stdClass();\n        $output->title = new stdClass();\n        $output->title->text = $response->included[0]->attributes->name;\n\n        $output->chart = new stdClass();\n        $output->chart->type = $response->included[0]->attributes->type;\n        $output->chart->renderTo = 'widget_' . $response->included[0]->id;\n\n        $output->credits = false;\n\n        $output->exporting = new stdClass();\n        $output->exporting->enabled = false;\n\n        $output->plotOptions = new stdClass();\n\n        $output->plotOptions->line = new stdClass();\n        $output->plotOptions->line->lineWidth = 2;\n        $output->plotOptions->line->states = new stdClass();\n        $output->plotOptions->line->states->hover = new stdClass();\n        $output->plotOptions->line->states->hover->lineWidth = 3;\n\n        // the dots along the line at each point\n        $output->plotOptions->line->marker = new stdClass();\n        $output->plotOptions->line->marker->enabled = false;\n\n        // the value displayed along the line at each point\n        $output->plotOptions->line->dataLabels = new stdClass();\n        $output->plotOptions->line->dataLabels->enabled = false;\n\n        $output->plotOptions->series = new stdClass();\n        $output->plotOptions->series->point = new stdClass();\n        $output->plotOptions->series->point->events = new stdClass();\n        $output->plotOptions->series->point->events->click = \"function(event){location.href = this.options.url;}\";\n\n        $output->subtitle = new stdClass();\n\n        $output->tooltip = new stdClass();\n        $output->tooltip->headerFormat = '';\n        $output->tooltip->pointFormat = '{point.tooltip}<br />Count: <b>{point.y}</b>';\n\n        $output->xAxis = new stdCLass();\n        $output->xAxis->labels = new stdClass();\n        $output->xAxis->labels->step = 4;\n        $output->xAxis->categories = array();\n\n        $output->yAxis = new stdCLass();\n        $output->yAxis->title = new stdClass();\n        $output->yAxis->title->text = $response->included[0]->attributes->primary;\n\n        $output->series = array();\n        $dataset = new stdClass();\n        $dataset->name = $response->included[0]->attributes->dataset_title;\n        $dataset->color = '#333333';\n        $dataset->data = array();\n        $sub_title_text = '';\n        for ($i=0; $i<count($response->data); $i++) {\n            $item = new stdClass();\n            $item->y = intval($response->data[$i]->attributes->count);\n            # $item->url = '../' . str_replace('@date', $response->data[$i]->attributes->date, $response->included[0]->attributes->link);\n            $item->url = str_replace('@date', $response->data[$i]->attributes->date, $response->included[0]->attributes->link);\n            $item->tooltip = date_format(date_create($response->data[$i]->attributes->date), 'D, M j Y');\n            $dataset->data[] = $item;\n            if ($i === 0) {\n                $sub_title_text = date_format(date_create($response->data[$i]->attributes->date), 'D, M j') . ' to ';\n            }\n            if ($i === count($response->data)-1) {\n                $sub_title_text = $sub_title_text . date_format(date_create($response->data[$i]->attributes->date), 'D, M j Y' . '.');\n            }\n            $output->xAxis->categories[] = date_format(date_create($response->data[$i]->attributes->date), 'j M');\n        }\n        $output->series[] = $dataset;\n\n        $output->subtitle->text = $sub_title_text;\n\n        unset($response->data);\n        $response->data = $output;\n        return $response;\n    }\n\n    function icon($collection)\n    {\n        $icon = 'fa fa-refresh fa-spin fa-fw';\n        switch ($collection) {\n            case 'applications':\n                $icon = 'fa fa-snowflake-o';\n                break;\n\n            case 'attributes':\n                $icon = 'fa fa-list';\n                break;\n\n            case 'baselines':\n                $icon = 'fa fa-line-chart';\n                break;\n\n            case 'baselines_policies':\n                $icon = 'fa fa-area-chart';\n                break;\n\n            case 'buildings':\n                $icon = 'fa fa-building-o';\n                break;\n\n            case 'clouds':\n                $icon = 'fa fa-cloud';\n                break;\n\n            case 'clusters':\n                $icon = 'fa fa-cubes';\n                break;\n\n            case 'collectors':\n                $icon = 'fa fa-cogs';\n                break;\n\n            case 'configuration':\n                $icon = 'fa fa-sliders';\n                break;\n\n            case 'connections':\n                $icon = 'fa fa-link';\n                break;\n\n            case 'credentials':\n                $icon = 'fa fa-shield';\n                break;\n\n            case 'dashboards':\n                $icon = 'fa fa-dashboard';\n                break;\n\n            case 'database':\n                $icon = 'fa fa-database';\n                break;\n\n            case 'devices':\n                $icon = 'fa fa-desktop';\n                break;\n\n            case 'discoveries':\n                $icon = 'fa fa-binoculars';\n                break;\n\n            case 'discovery_scan_options':\n                $icon = 'fa fa-random';\n                break;\n\n            case 'fields':\n                $icon = 'fa fa-comments-o';\n                break;\n\n            case 'files':\n                $icon = 'fa fa-file-image-o';\n                break;\n\n            case 'floors':\n                $icon = 'fa fa-sort-numeric-desc';\n                break;\n\n            case 'groups':\n                $icon = 'fa fa-tags';\n                break;\n\n            case 'help':\n                $icon = 'fa fa-question';\n                break;\n\n            case 'integrations':\n                $icon = 'fa fa-exchange';\n                break;\n\n            case 'ldap_servers':\n                $icon = 'fa fa-address-card-o';\n                break;\n\n            case 'licenses':\n                $icon = 'fa fa-leanpub';\n                break;\n\n            case 'locations':\n                $icon = 'fa fa-building';\n                break;\n\n            case 'logs':\n                $icon = 'fa fa-bars';\n                break;\n\n            case 'maps':\n                $icon = 'fa fa-map-o';\n                break;\n\n            case 'networks':\n                $icon = 'fa fa-wifi';\n                break;\n\n            case 'orgs':\n                $icon = 'fa fa-bank';\n                break;\n\n            case 'queries':\n                $icon = 'fa fa-table';\n                break;\n\n            case 'rack_devices':\n                $icon = 'fa fa-desktop';\n                break;\n\n            case 'racks':\n                $icon = 'fa fa-film';\n                break;\n\n            case 'reports':\n                $icon = 'fa fa-table';\n                break;\n\n            case 'roles':\n                $icon = 'fa fa-lock';\n                break;\n\n            case 'rooms':\n                $icon = 'fa fa-plus-square-o';\n                break;\n\n            case 'rows':\n                $icon = 'fa fa-hashtag';\n                break;\n\n            case 'rules':\n                $icon = 'fa fa-map-signs';\n                break;\n\n            case 'scripts':\n                $icon = 'fa fa-code';\n                break;\n\n            case 'summaries':\n                $icon = 'fa fa-pie-chart';\n                break;\n\n            case 'tasks':\n                $icon = 'fa fa-clock-o';\n                break;\n\n            case 'users':\n                $icon = 'fa fa-users';\n                break;\n\n            case 'widgets':\n                $icon = 'fa fa-bar-chart';\n                break;\n\n            default:\n                $icon = 'fa fa-refresh fa-spin fa-fw';\n                break;\n        }\n        return $icon;\n    }\n\n    function output_screen()\n    {\n        $timer_start = microtime(true);\n        $CI = & get_instance();\n        if ($CI->response->meta->action === 'create' && $CI->response->meta->collection !== 'search') {\n            redirect($CI->response->meta->collection . '/' . $CI->response->meta->id);\n        }\n        header($CI->response->meta->header);\n        $CI->response->meta->icon = icon($CI->response->meta->collection);\n        $CI->response->queries = array();\n\n        $CI->response->orgs = $CI->m_orgs->collection($CI->user->id);\n\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10000\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered Today\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered Yesterday\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered in the Last 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"10003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/10003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"10003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Discovered in the Last 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20000\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered Today\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered Yesterday\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered in the Last 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"20003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/20003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"20003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Software Discovered in the Last 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30000\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30000\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30001\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 7 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30001\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30001\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30002\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 30 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30002\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30002\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30003\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 90 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n        $enterprise_report = new stdClass();\n        $enterprise_report->id =  \"30003\";\n        $enterprise_report->links = new stdClass();\n        $enterprise_report->links->self = \"/omk/oae/reports/30003\";\n        $enterprise_report->type = \"reports\";\n        $enterprise_report->attributes = new stdClass();\n        $enterprise_report->attributes->id = \"30004\";\n        $enterprise_report->attributes->description = \"\";\n        $enterprise_report->attributes->menu_category = \"Discovery\";\n        $enterprise_report->attributes->menu_display = \"y\";\n        $enterprise_report->attributes->name = \"Devices Not Seen for 180 Days\";\n        $CI->response->included[] = $enterprise_report;\n        unset($enterprise_report);\n\n        if ($CI->config->config['internal_version'] >= 20170620) {\n            $CI->load->model('m_queries');\n            $result = $CI->m_queries->collection($CI->user->id);\n            $CI->response->included = array_merge($CI->response->included, $result);\n\n            $CI->load->model('m_summaries');\n            $result = $CI->m_summaries->collection($CI->user->id);\n            $CI->response->included = array_merge($CI->response->included, $result);\n        }\n\n        $CI->load->model('m_dashboards');\n        $result = @$CI->m_dashboards->collection($CI->user->id);\n        $CI->response->included = @array_merge($CI->response->included, $result);\n        $CI->response->dashboards = @array_merge($CI->response->included, $result);\n\n        $include = true;\n        if (is_array($CI->response->included)) {\n            foreach ($CI->response->included as $item) {\n                if (!empty($item->type) and $item->type == 'attributes') {\n                    $include = false;\n                }\n            }\n        }\n        if ($include and $CI->response->meta->collection !== 'attributes') {\n            if ($CI->db->table_exists('attributes')) {\n                $CI->load->model('m_attributes');\n                $attributes = $CI->m_attributes->collection($CI->user->id);\n                usort($attributes, \"sort_attributes\");\n                $CI->response->included = array_merge($CI->response->included, $attributes);\n            }\n        }\n\n        if (!empty($CI->response->errors) and $CI->response->meta->collection !== 'discoveries') {\n            unset($CI->response->data);\n            $CI->response->include = 'v_error';\n            $include = 'v_error';\n        } else {\n            if ($CI->response->meta->action === 'import_form') {\n                $CI->response->include = 'v_collection_import_form';\n            }\n            if (empty($CI->response->include)) {\n                $CI->response->include = 'v_' . $CI->response->meta->collection . '_' . $CI->response->meta->action;\n            }\n            $CI->response->heading = $CI->response->meta->heading;\n        }\n\n        if (empty($CI->response->meta->debug)) {\n            unset($CI->response->logs);\n        }\n\n        $CI->response = filter_response($CI->response);\n        $CI->load->view('v_template', $CI->response);\n    }\n\n    function filter_response(&$response)\n    {\n        if (is_array($response) or is_object($response)) {\n            foreach ($response as &$item) {\n                $item = filter_response($item);\n            }\n        } else if (is_string($response)) {\n            $response = htmlentities($response, ENT_QUOTES, 'UTF-8');\n            return $response;\n        } else {\n            return $response;\n        }\n        return($response);\n    }\n\n    function output_xml()\n    {\n        $CI = & get_instance();\n        $CI->load->helper('xml');\n        if (!empty($CI->response->meta->heading)) {\n            $filename = $CI->response->meta->heading;\n        } else if (!empty($CI->response->meta->collection)) {\n            $filename = $CI->response->meta->collection;\n        } else {\n            $filename = 'openaudit';\n        }\n        $output = \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\n\";\n        $output .= \"<\" . $CI->response->meta->collection . \">\\n\";\n        foreach ($CI->response->data as $details) {\n            $output .= \"\\t<item>\\n\";\n            foreach ($details->attributes as $attribute => $value) {\n                if (gettype($value) == 'string') {\n                    if (phpversion() >= 5.4) {\n                        $value = htmlspecialchars($value, ENT_XML1 | ENT_QUOTES, 'UTF-8');\n                    } else {\n                        $value = xml_convert($value);\n                    }\n                    $output .= \"\\t\\t<\".$attribute.'>'.trim($value).'</'.$attribute.\">\\n\";\n                }\n            }\n            $output .= \"\\t</item>\\n\";\n        }\n        $output .=  \"</\" . $CI->response->meta->collection . \">\\n\";\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/xml');\n            header('Content-Disposition: attachment;filename=\"' . $filename . '.xml\"');\n            header('Cache-Control: max-age=0');\n            echo $output;\n        } else {\n            echo \"<pre>\" . htmlentities($output) . \"</pre>\";\n        }\n    }\n\n    function output_convert($data)\n    {\n        $CI = & get_instance();\n        $CI->load->helper('network');\n        foreach ($data as $row) {\n            if (is_array($row)) {\n                $row = output_convert($row);\n            } elseif (is_object($row)) {\n                if (!empty($row->attributes)) {\n                    foreach ($row->attributes as $key => $value) {\n                        if (isset($key) && ($key === 'id' or $key === 'free' or $key === 'used' or $key === 'size' or $key === 'speed' or $key === 'total' or $key === 'col_order' or $key === 'access_level' or $key === 'count')) {\n                            $row->attributes->$key = intval($value);\n                        } elseif ((strrpos($key, '_id') === strlen($key)-3) or\n                                    (strrpos($key, '.id') === strlen($key)-3) or\n                                    (strrpos($key, '_count') === strlen($key)-6) or\n                                    (strrpos($key, '_percent') === strlen($key)-8) or\n                                    (strrpos($key, '_size') === strlen($key)-5)) {\n                            $row->attributes->$key = intval($value);\n                        } elseif ((strrpos($key, 'ip') === strlen($key)-2) or\n                                (strrpos($key, 'next_hop') === strlen($key)-8) or\n                                (strrpos($key, 'destination') === strlen($key)-11)) {\n                            $temp_name = $key . '_padded';\n                            $row->attributes->$temp_name = ip_address_from_db($value);\n                            $row->attributes->$temp_name = ip_address_to_db($row->attributes->$temp_name);\n                            $row->attributes->$key = ip_address_from_db($value);\n                            if ($row->attributes->$temp_name === $row->attributes->$key) {\n                                unset($row->attributes->$temp_name);\n                            }\n                        }\n                        if (strrpos($key, 'system_id') === strlen($key)-9) {\n                            $row->attributes->{'system.id'} = $value;\n                        }\n                        if (strrpos($key, 'org_id') === strlen($key)-6) {\n                            $row->attributes->{'orgs.id'} = $value;\n                        }\n                        if (strrpos($key, 'location_id') === strlen($key)-11) {\n                            $row->attributes->{'locations.id'} = $value;\n                        }\n                    }\n                }\n            }\n        }\n        return($data);\n    }\n\n    function create_url($query_parameters = null)\n    {\n        $link = '?';\n        if (!empty($query_parameters)) {\n            for ($i=0; $i < count($query_parameters); $i++) {\n                if (!empty($query_parameters[$i]->name)) {\n                    if (empty($query_parameters[$i]->operator) or $query_parameters[$i]->operator == '=') {\n                        $query_parameters[$i]->operator = '';\n                    }\n                    $link .= urlencode($query_parameters[$i]->name) . '=' . $query_parameters[$i]->operator . urlencode($query_parameters[$i]->value) . '&';\n                }\n            }\n        }\n        $link = substr($link, 0, strlen($link)-1);\n        return $link;\n    }\n\n    function create_links()\n    {\n        $CI = & get_instance();\n        if (empty($CI->config->config['page_size'])) {\n            $CI->config->config['page_size'] = 1000;\n        }\n        $offset = '';\n        if ($CI->response->meta->total > 0 and $CI->response->meta->collection != 'charts') {\n            # next link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if (intval($CI->response->meta->total) > intval($CI->response->meta->filtered) and  (intval($CI->response->meta->offset)  <  intval($CI->response->meta->total))) {\n                $offset = intval($CI->response->meta->offset) + intval($CI->response->meta->limit);\n                $hit = false;\n                for ($i=0; $i < count($query_parameters); $i++) {\n                    if ($query_parameters[$i]->name == 'offset') {\n                        $query_parameters[$i]->value = $offset;\n                        $hit = true;\n                    }\n                }\n                if (!$hit) {\n                    $item = new stdClass();\n                    $item->name = 'offset';\n                    $item->value = $offset;\n                    $query_parameters[] = $item;\n                    unset($item);\n                }\n            }\n            $CI->response->links->next = create_url($query_parameters);\n            unset($query_parameters);\n\n            #prev link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if (!empty($CI->response->meta->offset)) {\n                $temp = intval($CI->response->meta->limit);\n                if (empty($temp)) {\n                    $temp = $CI->config->config['page_size'];\n                }\n                if ($temp < 0) {\n                    $temp = 0;\n                }\n                $offset = intval($CI->response->meta->offset - $temp);\n                if (!empty($offset)) {\n                    $hit = false;\n                    for ($i=0; $i < count($query_parameters); $i++) {\n                        if ($query_parameters[$i]->name == 'offset') {\n                            $query_parameters[$i]->value = $offset;\n                            $hit = true;\n                        }\n                    }\n                    if (!$hit) {\n                        $item = new stdClass();\n                        $item->name = 'offset';\n                        $item->value = $offset;\n                        $query_parameters[] = $item;\n                        unset($item);\n                    }\n                } else {\n                    for ($i=0; $i < count($query_parameters); $i++) {\n                        if ($query_parameters[$i]->name == 'offset') {\n                            unset($query_parameters[$i]);\n                        }\n                    }\n                }\n            }\n            $CI->response->links->prev = create_url($query_parameters);\n            unset($query_parameters);\n\n            # first link\n            $offset = 0;\n            $query_parameters = $CI->response->meta->query_parameters;\n            for ($i=0; $i < count($query_parameters); $i++) {\n                if ($query_parameters[$i]->name == 'offset') {\n                    unset($query_parameters[$i]);\n                }\n            }\n            $CI->response->links->first = create_url($query_parameters);\n            unset($query_parameters);\n\n            # last link\n            $query_parameters = $CI->response->meta->query_parameters;\n            if ($CI->response->meta->total > $CI->response->meta->limit) {\n                $temp = intval($CI->response->meta->limit);\n                if (empty($temp)) {\n                    $temp = $CI->config->config['page_size'];\n                }\n                if ($temp < 0) {\n                    $temp = 0;\n                }\n                $offset = intval($CI->response->meta->total) - intval($temp);\n                $hit = false;\n                for ($i=0; $i < count($query_parameters); $i++) {\n                    if ($query_parameters[$i]->name == 'offset') {\n                        $query_parameters[$i]->value = $offset;\n                        $hit = true;\n                    }\n                }\n                if (!$hit) {\n                    $item = new stdClass();\n                    $item->name = 'offset';\n                    $item->value = $offset;\n                    $query_parameters[] = $item;\n                    unset($item);\n                }\n            }\n            $CI->response->links->last = create_url($query_parameters);\n            unset($query_parameters);\n        }\n    }\n\n    function output_html()\n    {\n        $CI = & get_instance();\n        $CI->response = filter_response($CI->response);\n        $table = \"<table><thead><tr>\";\n        // Our Headers\n        foreach ($CI->response->data[0]->attributes as $key => $value) {\n            if (stripos($key, '_padded') === false) {\n                $table .= \"<th>\" . $key . \"</th>\";\n            }\n        }\n        $table .= \"</tr></thead><tbody>\";\n        foreach ($CI->response->data as $item) {\n            $table .= \"<tr>\";\n            foreach ($item->attributes as $key => $value) {\n                if (stripos($key, '_padded') === false) {\n                    $table .= \"<td>\" . @$value . \"</td>\";\n                }\n            }\n            $table .= \"</tr>\";\n        }\n        $table .= \"</tbody></table>\";\n        echo $table;\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/html');\n            header('Content-Disposition: attachment;filename=\"'.$CI->response->meta->heading.'.html\"');\n            header('Cache-Control: max-age=0');\n        }\n    }\n\n    function output_table()\n    {\n        $CI = & get_instance();\n        $CI->response = filter_response($CI->response);\n        $table = \"<table><thead><tr>\";\n        // Our Headers\n        foreach ($CI->response->data[0]->attributes as $key => $value) {\n            if (stripos($key, '_padded') === false) {\n                $table .= \"<th>\" . $key . \"</th>\";\n            }\n        }\n        $table .= \"</tr></thead><tbody>\";\n        foreach ($CI->response->data as $item) {\n            $table .= \"<tr>\";\n            foreach ($item->attributes as $key => $value) {\n                if (stripos($key, '_padded') === false) {\n                    $table .= \"<td>\" . @$value . \"</td>\";\n                }\n            }\n            $table .= \"</tr>\";\n        }\n        $table .= \"</tbody></table>\";\n        echo $table;\n        if ((string) $CI->config->config['download_reports'] === 'y') {\n            header('Content-Type: text/html');\n            header('Content-Disposition: attachment;filename=\"'.$CI->response->meta->heading.'.html\"');\n            header('Cache-Control: max-age=0');\n        }\n    }\n\n    function sort_attributes($a, $b)\n    {\n        return strcmp(strtolower($a->attributes->name), strtolower($b->attributes->name));\n    }\n\n/* End of file output_helper.php */\n/* Location: ./system/application/helpers/output_helper.php */\n}\n"], "filenames": ["code_igniter/application/helpers/output_helper.php"], "buggy_code_start_loc": [1079], "buggy_code_end_loc": [1085], "fixing_code_start_loc": [1079], "fixing_code_end_loc": [1080], "type": "CWE-79", "message": "Opmantek Open-AudIT Community 4.2.0 (Fixed in 4.3.0) is affected by a Cross Site Scripting (XSS) vulnerability. If a bad value is passed to the routine via a URL, malicious JavaScript code can be executed in the victim's browser.", "other": {"cve": {"id": "CVE-2021-44916", "sourceIdentifier": "cve@mitre.org", "published": "2021-12-20T12:15:07.487", "lastModified": "2022-02-28T15:22:10.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Opmantek Open-AudIT Community 4.2.0 (Fixed in 4.3.0) is affected by a Cross Site Scripting (XSS) vulnerability. If a bad value is passed to the routine via a URL, malicious JavaScript code can be executed in the victim's browser."}, {"lang": "es", "value": "Opmantek Open-AudIT Community versi\u00f3n 4.2.0 (Corregido en versi\u00f3n 4.3.0) est\u00e1 afectado por una vulnerabilidad de tipo Cross Site Scripting (XSS). Si es pasado un valor incorrecto a la rutina por medio de una URL, puede ejecutarse c\u00f3digo JavaScript malicioso en el navegador de la v\u00edctima"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opmantek:open-audit:*:*:*:*:community:*:*:*", "versionEndIncluding": "4.2.0", "matchCriteriaId": "05F28CBE-D612-4982-BAC4-2F080F9AA9C9"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/165502/Open-AudIT-Community-4.2.0-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://community.opmantek.com/display/OA/Errata+-+4.2.0+and+earlier+Javascript+vulnerability", "source": "cve@mitre.org", "tags": ["Mitigation", "Patch", "Vendor Advisory"]}, {"url": "https://community.opmantek.com/display/OA/Release+Notes+for+Open-AudIT+v4.3.0", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/Opmantek/open-audit/commit/e37b64bbd0219f03cb71cc1cd5bb010166a2b846", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Opmantek/open-audit/commit/e37b64bbd0219f03cb71cc1cd5bb010166a2b846"}}