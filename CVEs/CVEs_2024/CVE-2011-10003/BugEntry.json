{"buggy_code": ["<?php\r\n    /**\r\n     * @class DBCubrid\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief Cubrid DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1p1\r\n     *\r\n     * CUBRID2008 R1.3 \uc5d0 \ub300\uc751\ud558\ub3c4\ub85d \uc218\uc815 Prototype (prototype@cubrid.com) / 09.02.23\r\n     * 7.3 ~ 2008 R1.3 \uae4c\uc9c0 \ud14c\uc2a4\ud2b8 \uc644\ub8cc\ud568.\r\n     * \uae30\ubcf8 \ucffc\ub9ac\ub9cc \uc0ac\uc6a9\ud558\uc600\uae30\uc5d0 \ud2b9\ud654\ub41c \ud29c\ub2dd\uc774 \ud544\uc694\r\n     **/\r\n\r\n    class DBCubrid extends DB\r\n    {\r\n\r\n        /**\r\n         * @brief Cubrid DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $hostname = '127.0.0.1'; ///< hostname\r\n        var $userid = NULL; ///< user id\r\n        var $password = NULL; ///< password\r\n        var $database = NULL; ///< database\r\n        var $port = 33000; ///< db server port\r\n        var $prefix = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n        var $cutlen = 12000; ///< \ud050\ube0c\ub9ac\ub4dc\uc758 \ucd5c\ub300 \uc0c1\uc218 \ud06c\uae30(\uc2a4\ud2b8\ub9c1\uc774 \uc774\ubcf4\ub2e4 \ud06c\uba74 '...'+'...' \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\r\n        var $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief cubrid\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'numeric(20)',\r\n            'number' => 'integer',\r\n            'varchar' => 'character varying',\r\n            'char' => 'character',\r\n            'tinytext' => 'character varying(256)',\r\n            'text' => 'character varying(1073741823)',\r\n            'bigtext' => 'character varying(1073741823)',\r\n            'date' => 'character varying(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBCubrid()\r\n        {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBCubrid;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported()\r\n        {\r\n            if (!function_exists('cubrid_connect')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo()\r\n        {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->port = $db_info->db_port;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n\r\n            if (!substr($this->prefix, -1) != '_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect()\r\n        {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if (!$this->hostname || !$this->userid || !$this->password || !$this->database || !$this->port) return;\r\n\r\n            // \uc811\uc18d\uc2dc\ub3c4\r\n            $this->fd = @cubrid_connect ($this->hostname, $this->port, $this->database, $this->userid, $this->password);\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            if (!$this->fd) {\r\n                $this->setError (-1, 'database connect fail');\r\n                return $this->is_connected = false;\r\n            }\r\n\r\n            $this->is_connected = true;\r\n            $this->password = md5 ($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close()\r\n        {\r\n            if (!$this->isConnected ()) return;\r\n\r\n            @cubrid_commit ($this->fd);\r\n            @cubrid_disconnect ($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string)\r\n        {\r\n            if (!$this->fd) return $string;\r\n\r\n            if (version_compare (PHP_VERSION, \"5.9.0\", \"<\") &&\r\n              get_magic_quotes_gpc ()) {\r\n                $string = stripslashes (str_replace (\"\\\\\",\"\\\\\\\\\", $string));\r\n            }\r\n\r\n            if (!is_numeric ($string)) {\r\n            /*\r\n                if ($this->isConnected()) {\r\n                    $string = cubrid_real_escape_string($string);\r\n                }\r\n                else {\r\n                    $string = str_replace(\"'\",\"\\'\",$string);\r\n                }\r\n                */\r\n\r\n                $string = str_replace(\"'\",\"''\",$string);\r\n            }\r\n\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin()\r\n        {\r\n            if (!$this->isConnected () || $this->transaction_started) return;\r\n            $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback()\r\n        {\r\n            if (!$this->isConnected () || !$this->transaction_started) return;\r\n            @cubrid_rollback ($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit()\r\n        {\r\n            if (!$force && (!$this->isConnected () ||\r\n              !$this->transaction_started)) return;\r\n\r\n            @cubrid_commit($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query)\r\n        {\r\n            if (!$query || !$this->isConnected ()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart ($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @cubrid_execute ($this->fd, $query);\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if (cubrid_error_code ()) {\r\n                $code = cubrid_error_code ();\r\n                $msg = cubrid_error_msg ();\r\n\r\n                $this->setError ($code, $msg);\r\n            }\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish ();\r\n\r\n            // \uacb0\uacfc \ub9ac\ud134\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result)\r\n        {\r\n            if (!$this->isConnected() || $this->isError() || !$result) return;\r\n\r\n            $col_types = cubrid_column_types ($result);\r\n            $col_names = cubrid_column_names ($result);\r\n            $max = count ($col_types);\r\n\r\n            for ($count = 0; $count < $max; $count++) {\r\n                if (preg_match (\"/^char/\", $col_types[$count]) > 0) {\r\n                    $char_type_fields[] = $col_names[$count];\r\n                }\r\n            }\r\n\r\n            while ($tmp = cubrid_fetch ($result, CUBRID_OBJECT)) {\r\n                if (is_array ($char_type_fields)) {\r\n                    foreach ($char_type_fields as $val) {\r\n                        $tmp->{$val} = rtrim ($tmp->{$val});\r\n                    }\r\n                }\r\n\r\n                $output[] = $tmp;\r\n            }\r\n\r\n            unset ($char_type_fields);\r\n\r\n            if ($result) cubrid_close_request($result);\r\n\r\n            if (count ($output) == 1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence \uac12\uc744 return (cubrid\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence()\r\n        {\r\n            $this->_makeSequence();\r\n\r\n            $query = sprintf (\"select \\\"%ssequence\\\".\\\"nextval\\\" as \\\"seq\\\" from db_root\", $this->prefix);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n\r\n            return $output->seq;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc2dc sequence  \uac00 \uc5c6\uc744 \uacbd\uc6b0 \uc0dd\uc131\r\n         **/\r\n        function _makeSequence()\r\n        {\r\n            if($_GLOBALS['XE_EXISTS_SEQUENCE']) return;\r\n\r\n            // check cubrid serial\r\n            $query = sprintf('select count(*) as \"count\" from \"db_serial\" where name=\\'%ssequence\\'', $this->prefix);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n\r\n            // if do not create serial\r\n            if ($output->count == 0) {\r\n                $query = sprintf('select max(\"a\".\"srl\") as \"srl\" from '.\r\n                                 '( select max(\"document_srl\") as \"srl\" from '.\r\n                                 '\"%sdocuments\" UNION '.\r\n                                 'select max(\"comment_srl\") as \"srl\" from '.\r\n                                 '\"%scomments\" UNION '.\r\n                                 'select max(\"member_srl\") as \"srl\" from '.\r\n                                 '\"%smember\"'.\r\n                                  ') as \"a\"', $this->prefix, $this->prefix, $this->prefix);\r\n\r\n                $result = $this->_query($query);\r\n                $output = $this->_fetch($result);\r\n                $srl = $output->srl;\r\n                if ($srl < 1) {\r\n                    $start = 1;\r\n                }\r\n                else {\r\n                    $start = $srl + 1000000;\r\n                }\r\n\r\n                // create sequence\r\n                $query = sprintf('create serial \"%ssequence\" start with %s increment by 1 minvalue 1 maxvalue 10000000000000000000000000000000000000 nocycle;', $this->prefix, $start);\r\n                $this->_query($query);\r\n            }\r\n\r\n            $_GLOBALS['XE_EXISTS_SEQUENCE'] = true;\r\n        }\r\n\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists ($target_name)\r\n        {\r\n            if($target_name == 'sequence') {\r\n                $query = sprintf (\"select \\\"name\\\" from \\\"db_serial\\\" where \\\"name\\\" = '%s%s'\", $this->prefix, $target_name);\r\n            }\r\n            else {\r\n                $query = sprintf (\"select \\\"class_name\\\" from \\\"db_class\\\" where \\\"class_name\\\" = '%s%s'\", $this->prefix, $target_name);\r\n            }\r\n\r\n            $result = $this->_query ($query);\r\n            if (cubrid_num_rows($result) > 0) {\r\n                $output = true;\r\n            }\r\n            else {\r\n                $output = false;\r\n            }\r\n\r\n            if ($result) cubrid_close_request ($result);\r\n\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type = 'number', $size = '', $default = '', $notnull = false)\r\n        {\r\n            $type = strtoupper($this->column_type[$type]);\r\n            if ($type == 'INTEGER') $size = '';\r\n\r\n            $query = sprintf (\"alter class \\\"%s%s\\\" add \\\"%s\\\" \", $this->prefix, $table_name, $column_name);\r\n\r\n            if ($type == 'char' || $type == 'varchar') {\r\n                if ($size) $size = $size * 3;\r\n            }\r\n\r\n            if ($size) {\r\n                $query .= sprintf (\"%s(%s) \", $type, $size);\r\n            }\r\n            else {\r\n                $query .= sprintf (\"%s \", $type);\r\n            }\r\n\r\n            if ($default) {\r\n                if ($type == 'INTEGER' || $type == 'BIGINT' || $type=='INT') {\r\n                    $query .= sprintf (\"default %d \", $default);\r\n                }\r\n                else {\r\n                    $query .= sprintf (\"default '%s' \", $default);\r\n                }\r\n            }\r\n\r\n            if ($notnull) $query .= \"not null \";\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn ($table_name, $column_name)\r\n        {\r\n            $query = sprintf (\"alter class \\\"%s%s\\\" drop \\\"%s\\\" \", $this->prefix, $table_name, $column_name);\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists ($table_name, $column_name)\r\n        {\r\n            $query = sprintf (\"select \\\"attr_name\\\" from \\\"db_attribute\\\" where \".  \"\\\"attr_name\\\" ='%s' and \\\"class_name\\\" = '%s%s'\", $column_name, $this->prefix, $table_name);\r\n            $result = $this->_query ($query);\r\n\r\n            if (cubrid_num_rows ($result) > 0) $output = true;\r\n            else $output = false;\r\n\r\n            if ($result) cubrid_close_request ($result);\r\n\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex ($table_name, $index_name, $target_columns, $is_unique = false)\r\n        {\r\n            if (!is_array ($target_columns)) {\r\n                $target_columns = array ($target_columns);\r\n            }\r\n\r\n            $query = sprintf (\"create %s index \\\"%s\\\" on \\\"%s%s\\\" (%s);\", $is_unique?'unique':'', $this->prefix .$index_name, $this->prefix, $table_name, '\"'.implode('\",\"',$target_columns).'\"');\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex ($table_name, $index_name, $is_unique = false)\r\n        {\r\n            $query = sprintf (\"drop %s index \\\"%s\\\" on \\\"%s%s\\\"\", $is_unique?'unique':'', $this->prefix .$index_name, $this->prefix, $table_name);\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists ($table_name, $index_name)\r\n        {\r\n            $query = sprintf (\"select \\\"index_name\\\" from \\\"db_index\\\" where \".  \"\\\"class_name\\\" = '%s%s' and \\\"index_name\\\" = '%s' \", $this->prefix, $table_name, $this->prefix .$index_name);\r\n            $result = $this->_query ($query);\r\n\r\n            if ($this->isError ()) return false;\r\n\r\n            $output = $this->_fetch ($result);\r\n\r\n            if (!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml ($xml_doc)\r\n        {\r\n            return $this->_createTable ($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile ($file_name)\r\n        {\r\n            if (!file_exists ($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile ($file_name);\r\n\r\n            return $this->_createTable ($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create class query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, tinytext, text, bigtext, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable ($xml_doc)\r\n        {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n\r\n\t\t\t// if the table already exists exit function\r\n            if ($this->isTableExists($table_name)) return;\r\n\r\n            // \ub9cc\uc57d \ud14c\uc774\ube14 \uc774\ub984\uc774 sequence\ub77c\uba74 serial \uc0dd\uc131\r\n            if ($table_name == 'sequence') {\r\n                $query = sprintf ('create serial \"%s\" start with 1 increment by 1'.\r\n                                  ' minvalue 1 '.\r\n                                  'maxvalue 10000000000000000000000000000000000000'.  ' nocycle;', $this->prefix.$table_name);\r\n\r\n                return $this->_query($query);\r\n            }\r\n\r\n\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            $query = sprintf ('create class \"%s\";', $table_name);\r\n            $this->_query ($query);\r\n\r\n            if (!is_array ($xml_obj->table->column)) {\r\n                $columns[] = $xml_obj->table->column;\r\n            }\r\n            else {\r\n                $columns = $xml_obj->table->column;\r\n            }\r\n\r\n            $query = sprintf (\"alter class \\\"%s\\\" add attribute \", $table_name);\r\n\r\n            foreach ($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n\r\n                switch ($this->column_type[$type]) {\r\n                    case 'integer' :\r\n                        $size = null;\r\n                        break;\r\n                    case 'text' :\r\n                        $size = null;\r\n                        break;\r\n                }\r\n\r\n                if (isset ($default) && ($type == 'varchar' || $type == 'char' ||\r\n                  $type == 'text' || $type == 'tinytext' || $type == 'bigtext')) {\r\n                    $default = sprintf (\"'%s'\", $default);\r\n                }\r\n\r\n                if ($type == 'varchar' || $type == 'char') {\r\n                    if($size) $size = $size * 3;\r\n                }\r\n\r\n\r\n                $column_schema[] = sprintf ('\"%s\" %s%s %s %s',\r\n                                    $name,\r\n                                    $this->column_type[$type],\r\n                                    $size?'('.$size.')':'',\r\n                                    isset($default)?\"default \".$default:'',\r\n                                    $notnull?'not null':'');\r\n\r\n                if ($primary_key) {\r\n                    $primary_list[] = $name;\r\n                }\r\n                else if ($unique) {\r\n                    $unique_list[$unique][] = $name;\r\n                }\r\n                else if ($index) {\r\n                    $index_list[$index][] = $name;\r\n                }\r\n            }\r\n\r\n            $query .= implode (',', $column_schema).';';\r\n            $this->_query ($query);\r\n\r\n            if (count ($primary_list)) {\r\n                $query = sprintf (\"alter class \\\"%s\\\" add attribute constraint \".  \"\\\"pkey_%s\\\" PRIMARY KEY(%s);\", $table_name, $table_name, '\"'.implode('\",\"',$primary_list).'\"');\r\n                $this->_query ($query);\r\n            }\r\n\r\n            if (count ($unique_list)) {\r\n                foreach ($unique_list as $key => $val) {\r\n                    $query = sprintf (\"create unique index \\\"%s\\\" on \\\"%s\\\" \".  \"(%s);\", $this->prefix .$key, $table_name, '\"'.implode('\",\"', $val).'\"');\r\n                    $this->_query ($query);\r\n                }\r\n            }\r\n\r\n            if (count ($index_list)) {\r\n                foreach ($index_list as $key => $val) {\r\n                    $query = sprintf (\"create index \\\"%s\\\" on \\\"%s\\\" (%s);\", $this->prefix .$key, $table_name, '\"'.implode('\",\"',$val).'\"');\r\n                    $this->_query ($query);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition ($output)\r\n        {\r\n            if (!$output->conditions) return;\r\n            $condition = $this->_getCondition ($output->conditions, $output->column_type, $output);\r\n            if ($condition) $condition = ' where '.$condition;\r\n\r\n            return $condition;\r\n        }\r\n\r\n        function _getCondition ($conditions, $column_type, &$output)\r\n        {\r\n            $condition = '';\r\n\r\n            foreach ($conditions as $val) {\r\n                $sub_condition = '';\r\n\r\n                foreach ($val['condition'] as $v) {\r\n                    if (!isset ($v['value'])) continue;\r\n                    if ($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType ($column_type, $name);\r\n                    $pipe = $v['pipe'];\r\n                    $value = $this->getConditionValue ($name, $value, $operation, $type, $column_type);\r\n\r\n                    if (!$value) {\r\n                        $value = $v['value'];\r\n                        if (strpos ($value, '(')) {\r\n                            $valuetmp = $value;\r\n                        }\r\n                        elseif (strpos ($value, \".\") === false) {\r\n                            $valuetmp = $value;\r\n                        }\r\n                        else {\r\n                            $valuetmp = '\"'.str_replace('.', '\".\"', $value).'\"';\r\n                        }\r\n                    }\r\n                    else {\r\n                        $tmp = explode('.',$value);\r\n\r\n                        if (count($tmp)==2) {\r\n                            $table = $tmp[0];\r\n                            $column = $tmp[1];\r\n\r\n                            if ($column_type[$column] && (in_array ($table, $output->tables) ||\r\n                              array_key_exists($table, $output->tables))) {\r\n                                $valuetmp = sprintf('\"%s\".\"%s\"', $table, $column);\r\n                            }\r\n                            else {\r\n                                $valuetmp = $value;\r\n                            }\r\n                        }\r\n                        else {\r\n                            $valuetmp = $value;\r\n                        }\r\n                    }\r\n\r\n                    if (strpos ($name, '(') > 0) {\r\n                        $nametmp = $name;\r\n                    }\r\n                    elseif (strpos ($name, \".\") === false) {\r\n                        $nametmp = '\"'.$name.'\"';\r\n                    }\r\n                    else {\r\n                        $nametmp = '\"'.str_replace('.', '\".\"', $name).'\"';\r\n                    }\r\n                    $str = $this->getConditionPart ($nametmp, $valuetmp, $operation);\r\n                    if ($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .= $str;\r\n                }\r\n\r\n                if ($sub_condition) {\r\n                    if ($condition && $val['pipe']) {\r\n                        $condition .= ' '.$val['pipe'].' ';\r\n                    }\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\"';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac\r\n            foreach ($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                //if ($this->getColumnType ($output->column_type, $name) != 'number')\r\n                if ($output->column_type[$name] != 'number') {\r\n                    if (!is_null($value)) {\r\n                        $value = \"'\" . $this->addQuotes($value) .\"'\";\r\n                    }\r\n                    else {\r\n                        if ($val['notnull']=='notnull') {\r\n                            $value = \"''\";\r\n                        }\r\n                        else {\r\n                            //$value = 'null';\r\n                            $value = \"''\";\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = '\"'.$name.'\"';\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf (\"insert into %s (%s) values (%s);\", implode(',', $table_list), implode(',', $column_list), implode(',', $value_list));\r\n\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) {\r\n                @cubrid_commit ($this->fd);\r\n            }\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $key => $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\" as \"'.$key.'\"';\r\n            }\r\n\r\n            $check_click_count = true;\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac\r\n            foreach ($output->columns as $key => $val) {\r\n                if (!isset ($val['value'])) continue;\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                if (substr ($value, -2) != '+1' || $output->column_type[$name] != 'number') {\r\n                    $check_click_count = false;\r\n                }\r\n\r\n                for ($i = 0; $i < $key; $i++) {\r\n                    /* \ud55c\ubb38\uc7a5\uc5d0 \uac19\uc740 \uc18d\uc131\uc5d0 \ub300\ud55c \uc911\ubcf5 \uc124\uc815\uc740 \ud050\ube0c\ub9ac\ub4dc\uc5d0\uc11c\ub294 \ud5c8\uc6a9\uce58 \uc54a\uc74c */\r\n                    if ($output->columns[$i]['name'] == $name) break;\r\n                }\r\n                if ($i < $key) continue; // \uc911\ubcf5\uc774 \ubc1c\uacac\ub418\uba74 \uc774\ud6c4\uc758 \uc124\uc815\uc740 \ubb34\uc2dc\r\n\r\n                if (strpos ($name, '.') !== false && strpos ($value, '.') !== false) {\r\n                    $column_list[] = $name.' = '.$value;\r\n                }\r\n                else {\r\n                    if ($output->column_type[$name] != 'number') {\r\n                        $check_column = false;\r\n                        $value = \"'\".$this->addQuotes ($value).\"'\";\r\n                    }\r\n                    elseif (!$value || is_numeric ($value)) {\r\n                        $value = (int) $value;\r\n                    }\r\n\r\n                    $column_list[] = sprintf (\"\\\"%s\\\" = %s\", $name, $value);\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $check_click_count_condition = false;\r\n            if ($check_click_count) {\r\n                foreach ($output->conditions as $val) {\r\n                    if ($val['pipe'] == 'or') {\r\n                        $check_click_count_condition = false;\r\n                        break;\r\n                    }\r\n\r\n                    foreach ($val['condition'] as $v) {\r\n                        if ($v['operation'] == 'equal') {\r\n                            $check_click_count_condition = true;\r\n                        }\r\n                        else {\r\n                            if ($v['operation'] == 'in' && !strpos ($v['value'], ',')) {\r\n                                $check_click_count_condition = true;\r\n                            }\r\n                            else {\r\n                                $check_click_count_condition = false;\r\n                            }\r\n                        }\r\n\r\n                        if ($v['pipe'] == 'or') {\r\n                            $check_click_count_condition = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ($check_click_count&& $check_click_count_condition && count ($output->tables) == 1 && count ($output->conditions) > 0 && count ($output->groups) == 0 && count ($output->order) == 0) {\r\n                foreach ($output->columns as $v) {\r\n                    $incr_columns[] = 'incr(\"'.$v['name'].'\")';\r\n                }\r\n\r\n                $query = sprintf ('select %s from %s %s', join (',', $incr_columns), implode(',', $table_list), $condition);\r\n            }\r\n            else {\r\n                $query = sprintf (\"update %s set %s %s\", implode (',', $table_list), implode (',', $column_list), $condition);\r\n            }\r\n\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) @cubrid_commit ($this->fd);\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\"';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $query = sprintf (\"delete from %s %s\", implode (',',$table_list), $condition);\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) @cubrid_commit ($this->fd);\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array ();\r\n            foreach ($output->tables as $key => $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\" as \"'.$key.'\"';\r\n            }\r\n            $left_join = array ();\r\n            // why???\r\n            $left_tables = (array) $output->left_tables;\r\n\r\n            foreach ($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition ($output->left_conditions[$key], $output->column_type, $output);\r\n                if ($condition) {\r\n                    $left_join[] = $val.' \"'.$this->prefix.$output->_tables[$key].  '\" \"'.$key.'\" on ('.$condition.')';\r\n                }\r\n            }\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n                $output->columns = array(array('name'=>'*'));\r\n            }\r\n\r\n            $column_list = array ();\r\n            foreach ($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n\r\n                $click_count = '%s';\r\n                if ($val['click_count'] && count ($output->conditions) > 0) {\r\n                    $click_count = 'incr(%s)';\r\n                }\r\n\r\n                $alias = $val['alias'] ? sprintf ('\"%s\"', $val['alias']) : null;\r\n                $_alias = $val['alias'];\r\n\r\n                if ($name == '*') {\r\n                    $column_list[] = $name;\r\n                }\r\n                elseif (strpos ($name, '.') === false && strpos ($name, '(') === false) {\r\n                    $name = sprintf ($click_count,$name);\r\n                    if ($alias) {\r\n                        $column_list[$alias] = sprintf('\"%s\" as %s', $name, $alias);\r\n                    }\r\n                    else {\r\n                        $column_list[] = sprintf ('\"%s\"', $name);\r\n                    }\r\n                }\r\n                else {\r\n                    if (strpos ($name, '.') != false) {\r\n                        list ($prefix, $name) = explode('.', $name);\r\n                        if (($now_matchs = preg_match_all (\"/\\(/\", $prefix, $xtmp)) > 0) {\r\n                            if ($now_matchs == 1) {\r\n                                $tmpval = explode (\"(\", $prefix);\r\n                                $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                                $prefix = implode (\"(\", $tmpval);\r\n                                $tmpval = explode (\")\", $name);\r\n                                $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                                $name = implode (\")\", $tmpval);\r\n                            }\r\n                        }\r\n                        else {\r\n                            $prefix = sprintf ('\"%s\"', $prefix);\r\n                            $name = ($name == '*') ? $name : sprintf('\"%s\"',$name);\r\n                        }\r\n                        $xtmp = null;\r\n                        $now_matchs = null;\r\n                        if($alias) $column_list[$_alias] = sprintf ($click_count, sprintf ('%s.%s', $prefix, $name)) .  ($alias ? sprintf (' as %s',$alias) : '');\r\n                        else $column_list[] = sprintf ($click_count, sprintf ('%s.%s', $prefix, $name));\r\n                    }\r\n                    elseif (($now_matchs = preg_match_all (\"/\\(/\", $name, $xtmp)) > 0) {\r\n                        if ($now_matchs == 1 && preg_match (\"/[a-zA-Z0-9]*\\(\\*\\)/\", $name) < 1) {\r\n                            $open_pos = strpos ($name, \"(\");\r\n                            $close_pos = strpos ($name, \")\");\r\n\r\n                            if (preg_match (\"/,/\", $name)) {\r\n                                $tmp_func_name = sprintf ('%s', substr ($name, 0, $open_pos));\r\n                                $tmp_params = sprintf ('%s', substr ($name, $open_pos + 1, $close_pos - $open_pos - 1));\r\n                                $tmpval = null;\r\n                                $tmpval = explode (',', $tmp_params);\r\n\r\n                                foreach ($tmpval as $tmp_param) {\r\n                                    $tmp_param_list[] = (!is_numeric ($tmp_param)) ? sprintf ('\"%s\"', $tmp_param) : $tmp_param;\r\n                                }\r\n\r\n                                $tmpval = implode (',', $tmp_param_list);\r\n                                $name = sprintf ('%s(%s)', $tmp_func_name, $tmpval);\r\n                            }\r\n                            else {\r\n                                $name = sprintf ('%s(\"%s\")', substr ($name, 0, $open_pos), substr ($name, $open_pos + 1, $close_pos - $open_pos - 1));\r\n                            }\r\n                        }\r\n\r\n                        if($alias) $column_list[$_alias] = sprintf ($click_count, $name).  ($alias ? sprintf (' as %s', $alias) : '');\r\n                        else $column_list[] = sprintf ($click_count, $name);\r\n                    }\r\n                    else {\r\n                        if($alias) $column_list[$_alias] = sprintf($click_count, $name).  ($alias ? sprintf(' as %s',$alias) : '');\r\n                        else $column_list[] = sprintf($click_count, $name);\r\n                    }\r\n                }\r\n                $columns = implode (',', $column_list);\r\n            }\r\n\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $output->column_list = $column_list;\r\n            if ($output->list_count && $output->page) {\r\n                return ($this->_getNavigationData($table_list, $columns, $left_join, $condition, $output));\r\n            }\r\n\r\n            if ($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                //if(in_array('list_order', $conditions) || in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if ($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                //}\r\n            }\r\n\r\n\r\n            if (count ($output->groups)) {\r\n                foreach ($output->groups as $key => $value) {\r\n                    if (strpos ($value, '.')) {\r\n                        $tmp = explode ('.', $value);\r\n                        $tmp[0] = sprintf ('\"%s\"', $tmp[0]);\r\n                        $tmp[1] = sprintf ('\"%s\"', $tmp[1]);\r\n                        $value = implode ('.', $tmp);\r\n                    }\r\n                    elseif (strpos ($value, '(')) {\r\n                        $value = $value;\r\n                    }\r\n                    else {\r\n                        $value = sprintf ('\"%s\"', $value);\r\n                    }\r\n                    $output->groups[$key] = $value;\r\n\r\n\r\n                    if(count($output->arg_columns))\r\n                    {\r\n                        if($column_list[$value]) $output->arg_columns[] = $column_list[$value];\r\n                    }\r\n                }\r\n                $groupby_query = sprintf ('group by %s', implode(',', $output->groups));\r\n            }\r\n\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if ($output->list_count['value']) {\r\n                $start_count = 0;\r\n                $list_count = $output->list_count['value'];\r\n\r\n                if ($output->order) {\r\n                  foreach ($output->order as $val) {\r\n                      if (strpos ($val[0], '.')) {\r\n                          $tmpval = explode ('.', $val[0]);\r\n                          $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                          $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                          $val[0] = implode ('.', $tmpval);\r\n                      }\r\n                      elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                      elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                      else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                      $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                  }\r\n                  if (count($index_list))\r\n                      $orderby_query = ' order by '.implode(',', $index_list);\r\n                      $orderby_query = sprintf ('%s for orderby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                }\r\n                else {\r\n                    if (count ($output->groups)) {\r\n                        $orderby_query = sprintf ('%s having groupby_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                    else {\r\n                        if ($condition) {\r\n                            $orderby_query = sprintf ('%s and inst_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                        }\r\n                        else {\r\n                            $orderby_query = sprintf ('%s where inst_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if ($output->order) {\r\n                    foreach ($output->order as $val) {\r\n                        if (strpos ($val[0], '.')) {\r\n                            $tmpval = explode ('.', $val[0]);\r\n                            $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                            $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                            $val[0] = implode ('.', $tmpval);\r\n                        }\r\n                        elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                        elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                        else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                        $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\r\n                        if(count($output->arg_columns) && $column_list[$val]) $output->arg_columns[] = $column_list[$key];\r\n                    }\r\n\r\n                    if (count ($index_list)) {\r\n                        $orderby_query = ' order by '.implode(',', $index_list);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if(count($output->arg_columns))\r\n            {\r\n                $columns = array();\r\n                foreach($output->arg_columns as $col){\r\n                    if(strpos($col,'\"')===false && strpos($col,' ')===false) $columns[] = '\"'.$col.'\"';\r\n                    else $columns[] = $col;\r\n                }\r\n\r\n                $columns = join(',',$columns);\r\n            }\r\n\r\n            $query = sprintf (\"select %s from %s %s %s %s\", $columns, implode (',',$table_list), implode (' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n            if ($this->isError ()) return;\r\n            $data = $this->_fetch ($result);\r\n\r\n            $buff = new Object ();\r\n            $buff->data = $data;\r\n\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud604\uc7ac \uc2dc\uc810\uc758 Stack trace\ub97c \ubcf4\uc5ec\uc90c.\uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function backtrace ()\r\n        {\r\n            $output = \"<div style='text-align: left;'>\\n\";\r\n            $output .= \"<b>Backtrace:</b><br />\\n\";\r\n            $backtrace = debug_backtrace ();\r\n\r\n            foreach ($backtrace as $bt) {\r\n                $args = '';\r\n                foreach ($bt['args'] as $a) {\r\n                    if (!empty ($args)) {\r\n                        $args .= ', ';\r\n                    }\r\n                    switch (gettype ($a)) {\r\n                    case 'integer':\r\n                    case 'double':\r\n                        $args .= $a;\r\n                        break;\r\n                    case 'string':\r\n                        $a = htmlspecialchars (substr ($a, 0, 64)).\r\n                            ((strlen ($a) > 64) ? '...' : '');\r\n                        $args .= \"\\\"$a\\\"\";\r\n                        break;\r\n                    case 'array':\r\n                        $args .= 'Array ('. count ($a).')';\r\n                        break;\r\n                    case 'object':\r\n                        $args .= 'Object ('.get_class ($a).')';\r\n                        break;\r\n                    case 'resource':\r\n                        $args .= 'Resource ('.strstr ($a, '#').')';\r\n                        break;\r\n                    case 'boolean':\r\n                        $args .= $a ? 'True' : 'False';\r\n                        break;\r\n                    case 'NULL':\r\n                        $args .= 'Null';\r\n                        break;\r\n                    default:\r\n                        $args .= 'Unknown';\r\n                    }\r\n                }\r\n                $output .= \"<br />\\n\";\r\n                $output .= \"<b>file:</b> \".$bt['line'].\" - \".  $bt['file'].\"<br />\\n\";\r\n                $output .= \"<b>call:</b> \".$bt['class'].  $bt['type'].$bt['function'].$args.\"<br />\\n\";\r\n            }\r\n            $output .= \"</div>\\n\";\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData ($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once (_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n            $column_list = $output->column_list;\r\n\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $count_query = sprintf('select count(*) as \"count\" from %s %s %s', implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n            if (count($output->groups)) {\r\n                $count_query = sprintf('select count(*) as \"count\" from (%s) xet', $count_query);\r\n            }\r\n\r\n            $count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query($count_query);\r\n            $count_output = $this->_fetch($result);\r\n            $total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if (!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if (!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if (!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if ($total_count) {\r\n                $total_page = (int) (($total_count - 1) / $list_count) + 1;\r\n            }\r\n            else {\r\n                $total_page = 1;\r\n            }\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if ($page > $total_page) $page = $total_page;\r\n            $start_count = ($page - 1) * $list_count;\r\n\r\n            if ($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                //if(in_array('list_order', $conditions) || in_array('update_order', $conditions)) {\r\n                    foreach ($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                //}\r\n            }\r\n\r\n\r\n            if (count ($output->groups)) {\r\n                foreach ($output->groups as $key => $value) {\r\n                    if (strpos ($value, '.')) {\r\n                        $tmp = explode ('.', $value);\r\n                        $tmp[0] = sprintf ('\"%s\"', $tmp[0]);\r\n                        $tmp[1] = sprintf ('\"%s\"', $tmp[1]);\r\n                        $value = implode ('.', $tmp);\r\n                    }\r\n                    elseif (strpos ($value, '(')) $value = $value;\r\n                    else $value = sprintf ('\"%s\"', $value);\r\n                    $output->groups[$key] = $value;\r\n                }\r\n\r\n                $groupby_query = sprintf (' group by %s', implode (',', $output->groups));\r\n            }\r\n\r\n            if ($output->order) {\r\n                foreach ($output->order as $val) {\r\n                    if (strpos ($val[0], '.')) {\r\n                        $tmpval = explode ('.', $val[0]);\r\n                        $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                        $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                        $val[0] = implode ('.', $tmpval);\r\n                    }\r\n                    elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                    elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                    else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                    $index_list[] = sprintf ('%s %s', $val[0], $val[1]);\r\n                }\r\n\r\n                if (count ($index_list)) {\r\n                    $orderby_query = ' order by '.implode(',', $index_list);\r\n                }\r\n\r\n                $orderby_query = sprintf ('%s for orderby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n            }\r\n            else {\r\n                if (count($output->groups)) {\r\n                    $orderby_query = sprintf ('%s having groupby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                }\r\n                else {\r\n                    if ($condition) {\r\n                        $orderby_query = sprintf ('%s and inst_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                    else {\r\n                        $orderby_query = sprintf('%s where inst_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->arg_columns))\r\n            {\r\n                $columns = array();\r\n                foreach($output->arg_columns as $col){\r\n                    if(strpos($col,'\"')===false) $columns[] = '\"'.$col.'\"';\r\n                    else $columns[] = $col;\r\n                }\r\n\r\n                $columns = join(',',$columns);\r\n            }\r\n\r\n            $query = sprintf (\"select %s from %s %s %s %s\", $columns, implode (',',$table_list), implode (' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n\r\n            if ($this->isError ()) {\r\n                $buff = new Object ();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array ();\r\n\r\n                $buff->page_navigation = new PageHandler ($total_count, $total_page, $page, $page_count);\r\n\r\n                return $buff;\r\n            }\r\n\r\n            $virtual_no = $total_count - ($page - 1) * $list_count;\r\n            while ($tmp = cubrid_fetch ($result, CUBRID_OBJECT)) {\r\n                if ($tmp) {\r\n                    foreach ($tmp as $k => $v) {\r\n                        $tmp->{$k} = rtrim($v);\r\n                    }\r\n                }\r\n                $data[$virtual_no--] = $tmp;\r\n            }\r\n\r\n            $buff = new Object ();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler ($total_count, $total_page, $page, $page_count);\r\n\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBCubrid;\r\n?>\r\n", "<?php\r\n\r\n    /**\r\n     * @class DBMSSQL\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief MSSQL driver\ub85c \uc218\uc815 sol (sol@ngleader.com)\r\n     * @version 0.1\r\n     **/\r\n\r\n    class DBMssql extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n\t\tvar $conn\t\t= NULL;\r\n        var $database\t= NULL; ///< database\r\n        var $prefix\t\t= 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $param\t\t= array();\r\n\t\tvar $comment_syntax = '/* %s */';\r\n        \r\n        /**\r\n         * @brief mssql \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'bigint',\r\n            'number' => 'int',\r\n            'varchar' => 'varchar',\r\n            'char' => 'char',\r\n            'text' => 'text',\r\n            'bigtext' => 'text',\r\n            'date' => 'varchar(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBMssql() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBMssql;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if (!extension_loaded(\"sqlsrv\")) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->port = $db_info->db_port;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n\t\t\t\r\n\t\t\tif(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->hostname || !$this->database) return;\r\n\r\n\t\t\t//sqlsrv_configure( 'WarningsReturnAsErrors', 0 );\r\n\t\t\t//sqlsrv_configure( 'LogSeverity', SQLSRV_LOG_SEVERITY_ALL );\r\n\t\t\t//sqlsrv_configure( 'LogSubsystems', SQLSRV_LOG_SYSTEM_ALL );\r\n\r\n\t\t\t$this->conn = sqlsrv_connect( $this->hostname, \r\n\t\t\t\t\t\t\t\t\t\t\tarray( 'Database' => $this->database,'UID'=>$this->userid,'PWD'=>$this->password ));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t// \uc811\uc18d\uccb4\ud06c\r\n\t\t    if($this->conn){\r\n\t\t\t\t$this->is_connected = true;\r\n\t\t\t\t$this->password = md5($this->password);\r\n\t\t\t}else{\r\n\t\t\t\t$this->is_connected = false;\r\n\t\t\t}\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if($this->is_connected == false) return;\r\n\t\t\t\r\n            $this->commit();\r\n\t\t\tsqlsrv_close($this->conn);\r\n\t\t\t$this->conn = null;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            //if(!is_numeric($string)) $string = str_replace(\"'\",\"''\",$string);\r\n\t\t\t\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if($this->is_connected == false || $this->transaction_started) return;\r\n\t\t\tif(sqlsrv_begin_transaction( $this->conn ) === false) return;\r\n\t\t\t\r\n            $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if($this->is_connected == false || !$this->transaction_started) return;\r\n            \r\n\t\t\t$this->transaction_started = false;\r\n            sqlsrv_rollback( $this->conn );\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && ($this->is_connected == false || !$this->transaction_started)) return;\r\n\t\t\t\r\n            $this->transaction_started = false;\t\r\n            sqlsrv_commit( $this->conn );\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n\t\t\tif($this->is_connected == false || !$query) return;\r\n\r\n\t\t\t$_param = array();\r\n\t\t\t\r\n\t\t\tif(count($this->param)){\r\n\t\t\t\tforeach($this->param as $k => $o){\r\n\t\t\t\t\tif($o['type'] == 'number'){\r\n\t\t\t\t\t\t$_param[] = &$o['value'];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t$_param[] = array(&$o['value'], SQLSRV_PARAM_IN, SQLSRV_PHPTYPE_STRING('utf-8'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\t\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\t\t\t\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n\t\t\t$result = false;\r\n\t\t\tif(count($_param)){\r\n\t\t\t\t$result = @sqlsrv_query($this->conn, $query, $_param);\r\n\t\t\t}else{\r\n\t\t\t\t$result = @sqlsrv_query($this->conn, $query);\r\n\t\t\t}\r\n\r\n\t\t\t// \uc624\ub958 \uccb4\ud06c\r\n\t\t\tif(!$result) $this->setError(print_r(sqlsrv_errors(),true));\r\n\t\t\t\t\t\t\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish();\r\n\t\t\t$this->param = array();\r\n\r\n\t\t\treturn $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n\t\t\tif(!$this->isConnected() || $this->isError() || !$result) return;\r\n\t\t\t\r\n\t\t\t$c = sqlsrv_num_fields($result);\r\n\t\t\t$m = null;\r\n\t\t\t$output = array();\r\n\t\t\t\r\n\t\t\twhile(sqlsrv_fetch($result)){\r\n\t\t\t\tif(!$m) $m = sqlsrv_field_metadata($result);\r\n\t\t\t\tunset($row);\r\n\t\t\t\tfor($i=0;$i<$c;$i++){\r\n\t\t\t\t\t$row->{$m[$i]['Name']} = sqlsrv_get_field( $result, $i, SQLSRV_PHPTYPE_STRING( 'utf-8' )); \r\n\t\t\t\t}\r\n\t\t\t\t$output[] = $row;\r\n\t\t\t}\r\n\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (mssql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values (ident_incr('%ssequence'))\", $this->prefix, $this->prefix);\r\n\t\t\t$this->_query($query);\r\n\t\t\t\r\n            $query = sprintf(\"select ident_current('%ssequence')+1 as sequence\", $this->prefix);\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n\r\n\t\t\t\r\n            return $tmp->sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf(\"select name from sysobjects where name = '%s%s' and xtype='U'\", $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\t\t\t\r\n            $tmp = $this->_fetch($result);\r\n\t\t\t\r\n            if(!$tmp) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n\t\t\tif($this->isColumnExists($table_name, $column_name)) return;\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n\t\t\tif(!$this->isColumnExists($table_name, $column_name)) return;\r\n            $query = sprintf(\"alter table %s%s drop %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"select syscolumns.name as name from syscolumns, sysobjects where sysobjects.name = '%s%s' and sysobjects.id = syscolumns.id and syscolumns.name = '%s'\", $this->prefix, $table_name, $column_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $tmp = $this->_fetch($result);\r\n            if(!$tmp->name) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n\t\t\tif($this->isIndexExists($table_name, $index_name)) return;\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $query = sprintf(\"create %s index %s on %s%s (%s)\", $is_unique?'unique':'', $index_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n\t\t\tif(!$this->isIndexExists($table_name, $index_name)) return;\r\n            $query = sprintf(\"drop index %s%s.%s\", $this->prefix, $table_name, $index_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $query = sprintf(\"select sysindexes.name as name from sysindexes, sysobjects where sysobjects.name = '%s%s' and sysobjects.id = sysindexes.id and sysindexes.name = '%s'\", $this->prefix, $table_name, $index_name);\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $tmp = $this->_fetch($result);\r\n\r\n            if(!$tmp->name) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n\r\n            if($table_name == 'sequence') {\r\n                $table_name = $this->prefix.$table_name;\r\n                $query = sprintf('create table %s ( sequence int identity(1,1), seq int )', $table_name);\r\n                return $this->_query($query);\r\n            } else {\r\n                $table_name = $this->prefix.$table_name;\r\n\r\n                if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n                else $columns = $xml_obj->table->column;\r\n\r\n                foreach($columns as $column) {\r\n                    $name = $column->attrs->name;\r\n                    $type = $column->attrs->type;\r\n                    $size = $column->attrs->size;\r\n                    $notnull = $column->attrs->notnull;\r\n                    $primary_key = $column->attrs->primary_key;\r\n                    $index = $column->attrs->index;\r\n                    $unique = $column->attrs->unique;\r\n                    $default = $column->attrs->default;\r\n                    $auto_increment = $column->attrs->auto_increment;\r\n\r\n                    $column_schema[] = sprintf('[%s] %s%s %s %s %s %s',\r\n                    $name,\r\n                    $this->column_type[$type],\r\n                    !in_array($type,array('number','text'))&&$size?'('.$size.')':'',\r\n                    $primary_key?'primary key':'',\r\n                    isset($default)?\"default '\".$default.\"'\":'',\r\n                    $notnull?'not null':'null',\r\n                    $auto_increment?'identity(1,1)':''\r\n                    );\r\n\r\n                    if($unique) $unique_list[$unique][] = $name;\r\n                    else if($index) $index_list[$index][] = $name;\r\n                }\r\n\t\t\t\t\r\n                $schema = sprintf('create table [%s] (xe_seq int identity(1,1),%s%s)', $this->addQuotes($table_name), \"\\n\", implode($column_schema,\",\\n\"));\r\n                $output = $this->_query($schema);\r\n                if(!$output) return false;\r\n\t\t\t\t\r\n                if(count($unique_list)) {\r\n                    foreach($unique_list as $key => $val) {\r\n                        $query = sprintf(\"create unique index %s on %s (%s);\", $key, $table_name, '['.implode('],[',$val).']');\r\n                        $this->_query($query);\r\n                    }\r\n                }\r\n\r\n                if(count($index_list)) {\r\n                    foreach($index_list as $key => $val) {\r\n                        $query = sprintf(\"create index %s on %s (%s);\", $key, $table_name, '['.implode('],[',$val).']');\r\n                        $this->_query($query);\r\n                    }\r\n                }\r\n\t\t\t\treturn true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double'))) continue;\r\n\r\n                    $name = $v['column'];\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$name)) $name = preg_replace('/^substr\\(/i','substring(',$name);\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n\t\t\r\n\t\tfunction getConditionValue($name, $value, $operation, $type, $column_type) {\r\n\t\t\t\r\n\t\t\tif($type == 'number') {\r\n                if(strpos($value,',')===false && strpos($value,'(')===false){\r\n\t\t\t\t\r\n\t\t\t\t\tif(is_integer($value)){\r\n\t\t\t\t\t\t$this->param[] = array('type'=>'number','value'=>(int)$value);\r\n\t\t\t\t\t\treturn '?';\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treturn $value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }\r\n\r\n            if(strpos($name,'.')!==false&&strpos($value,'.')!==false) {\r\n                list($table_name, $column_name) = explode('.',$value);\r\n                if($column_type[$column_name]){\r\n\t\t\t\t\treturn $value;\r\n\t\t\t\t}\r\n            }\r\n\t\r\n            switch($operation) {\r\n                case 'like_prefix' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\r\n\t\t\t\t\t\t\t\r\n                        $value = \"? + '%'\";\r\n                    break;\r\n                case 'like_tail' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\t\t\r\n                        $value = \"'%' + ?\";\r\n                    break;\r\n                case 'like' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\r\n                        $value = \"'%' + ? + '%'\";\r\n                    break;\r\n                case 'notin' :\r\n\t\t\t\t\t\tpreg_match_all('/,?\\'([^\\']*)\\'/',$value,$match);\r\n\t\t\t\t\t\t$val = array();\r\n\t\t\t\t\t\tforeach($match[1] as $k => $v){\r\n\t\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>trim($v));\t\t\t\t\r\n\t\t\t\t\t\t\t$val[] ='?';\r\n\t\t\t\t\t\t}\r\n                        $value = join(',',$val);\r\n                    break;\r\n                case 'in' :\r\n                        preg_match_all('/,?\\'([^\\']*)\\'/',$value,$match);\r\n\t\t\t\t\t\t$val = array();\r\n\t\t\t\t\t\tforeach($match[1] as $k => $v){\r\n\t\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>trim($v));\t\t\t\t\r\n\t\t\t\t\t\t\t$val[] ='?';\r\n\t\t\t\t\t\t}\r\n                        $value = join(',',$val);\r\n                    break;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\t\t$value = '?';\r\n\t\t\t\t\tbreak;\r\n            }\r\n\r\n            return $value;\r\n        }\r\n\t\t\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n\t\t\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\t\t\t\t\r\n                if($output->column_type[$name]!='number') {\r\n                    $value = $this->addQuotes($value);\r\n\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t} elseif(is_numeric($value)){\r\n\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t$value = (int)$value;\r\n\t\t\t\t} elseif(!$value){\r\n\t\t\t\t\t$value = '';\r\n\t\t\t\t}\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\telse $value = (int)$value;\r\n\t\t\t\t\r\n                $column_list[] = '['.$name.']';\r\n\t\t\t\t$value_list[] = '?';\r\n\t\t\t\t\r\n                $this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\t\t\r\n\t\t    // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                if(!isset($val['value'])) continue;\r\n\t\t\t\t\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if(strpos($name,'.')!==false&&strpos($value,'.')!==false){\r\n\t\t\t\t\t$column_list[] = $name.' = '.$value;\r\n\t\t\t\t} else {\r\n                    if($output->column_type[$name]!='number'){\r\n\t\t\t\t\t\t$value = $this->addQuotes($value);\r\n\t\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = ?\",  $name);\r\n                    }elseif(!$value || is_numeric($value)){\r\n\t\t\t\t\t\t$value = (int)$value;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = ?\",  $name);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = %s\",  $name, $value);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"update %s set %s %s\", implode(',',$table_list), implode(',',$column_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.'] as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' ['.$this->prefix.$output->_tables[$key].'] as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) {\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\tif(preg_match('/^substr\\(/i',$name)) $name = preg_replace('/^substr\\(/i','substring(',$name);\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') {\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('[%s] as [%s]', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('[%s]',$name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as [%s]', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$columns = implode(',',$column_list);\r\n\r\n            $condition = $this->getCondition($output);\r\n\t\t\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t}\r\n\r\n            if($output->order && !preg_match('/count\\(\\*\\)/i',$columns) ) {\r\n                foreach($output->order as $key => $val) {\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$val[0])) $name = preg_replace('/^substr\\(/i','substring(',$val[0]);\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'[')===false && strpos($col,' ')==false) $columns[] = '['.$col.']'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"%s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('select top %d %s', $output->list_count['value'], $query);\r\n\t\t\telse $query = \"select \".$query;\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\t\t\t\t$count_condition = sprintf('%s group by %s', $condition, implode(', ', $output->groups));\r\n\t\t\t}else{\r\n\t\t\t\t$count_condition = $condition;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n\t\t\tif (count($output->groups)) $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n\t\t\t\r\n\t\t\t$param = $this->param;\r\n\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t\r\n\t\t\t$this->param = $param;\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            $conditions = $this->getConditionList($output);\r\n            if($output->order) {\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\t\t\t\r\n            // group by \uc808 \ucd94\uac00\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$group = sprintf('group by %s', implode(',',$output->groups));\r\n\t\t\t}\r\n\t\t\t\r\n            // order \uc808 \ucd94\uac00\r\n            $order_targets = array();\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$val[0])) $name = preg_replace('/^substr\\(/i','substring(',$val[0]);\r\n                    $order_targets[$val[0]] = $val[1];\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $order .= 'order by '.implode(',',$index_list);\r\n            }\r\n            if(!count($order_targets)) {\r\n                if(in_array('list_order',$conditions)) $order_targets['list_order'] = 'asc';\r\n                else $order_targets['xe_seq'] = 'desc';\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'[')===false && strpos($col,' ')==false) $columns[] = '['.$col.']'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            if($start_count<1) {\r\n                $query = sprintf('select top %d %s from %s %s %s %s %s', $list_count, $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n\r\n            } else {\r\n                foreach($order_targets as $k => $v) {\r\n\t\t\t\t\t$first_columns[] = sprintf('%s(%s) as %s', $v=='asc'?'max':'min', $k, $k);\r\n\t\t\t\t\t$first_sub_columns[] = $k;\r\n                }\r\n\t\t\t\t\r\n\t\t\t\t// 1\ucc28\ub85c order \ub300\uc0c1\uc5d0 \ud574\ub2f9 \ud558\ub294 \uac12\uc744 \uac00\uc838\uc634\r\n\t\t\t\t$param = $this->param;\r\n\t\t\t\t$first_query = sprintf(\"select %s from (select top %d %s from %s %s %s %s %s) xet\", implode(',',$first_columns),  $start_count, implode(',',$first_sub_columns), implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n\t\t\t\t$result = $this->_query($first_query);\r\n\t\t\t\t$this->param = $param;\r\n\t\t\t\t$tmp = $this->_fetch($result);\r\n\t\t\t\t\r\n\r\n\t\t\t\t\r\n\t\t\t\t// 1\ucc28\uc5d0\uc11c \ub098\uc628 \uac12\uc744 \uc774\uc6a9 \ub2e4\uc2dc \ucffc\ub9ac \uc2e4\ud589\r\n\t\t\t\t$sub_cond = array();\r\n                foreach($order_targets as $k => $v) {\r\n                    $sub_cond[] = sprintf(\"%s %s '%s'\", $k, $v=='asc'?'>':'<', $tmp->{$k});\r\n\t\t\t\t}\r\n\t\t\t\t$sub_condition = ' and( '.implode(' and ',$sub_cond).' )';\r\n\t\t\t\t\r\n\t\t\t\tif($condition) $condition .= $sub_condition;\r\n\t\t\t\telse $condition  = ' where '.$sub_condition;\r\n\t\t\t\t$query = sprintf('select top %d %s from %s %s %s %s %s', $list_count, $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n            }\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n\t\t\t\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n\t\t\t$virtual_no = $total_count - ($page-1)*$list_count;\r\n\t\t\t\r\n\t\t\t$output = $this->_fetch($result);\r\n\t\t\tif(!is_array($output)) $output = array($output);\r\n\r\n            foreach($output as $k => $v) {\r\n                $data[$virtual_no--] = $v;\r\n            }\r\n\t\t\t\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n\r\n    }\r\n\r\nreturn new DBMssql;\r\n?>\r\n", "<?php\r\n    /**\r\n     * @class DBMysql\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief MySQL DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1\r\n     *\r\n     * mysql handling class\r\n     **/\r\n\r\n    class DBMysql extends DB {\r\n\r\n        /**\r\n         * @brief Mysql DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $hostname = '127.0.0.1'; ///< hostname\r\n        var $userid   = NULL; ///< user id\r\n        var $password   = NULL; ///< password\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief mysql\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'bigint',\r\n            'number' => 'bigint',\r\n            'varchar' => 'varchar',\r\n            'char' => 'char',\r\n            'text' => 'text',\r\n            'bigtext' => 'longtext',\r\n            'date' => 'varchar(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBMysql() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\tfunction create() {\r\n\t\t\treturn new DBMysql;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if(!function_exists('mysql_connect')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->port = $db_info->db_port;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->hostname || !$this->userid || !$this->password || !$this->database) return;\r\n\r\n            if(strpos($this->hostname, ':')===false && $this->port) $this->hostname .= ':'.$this->port;\r\n\r\n            // \uc811\uc18d\uc2dc\ub3c4  \r\n            $this->fd = @mysql_connect($this->hostname, $this->userid, $this->password);\r\n            if(mysql_error()) {\r\n                $this->setError(mysql_errno(), mysql_error());\r\n                return;\r\n            }\r\n\r\n            // \ubc84\uc804 \ud655\uc778\ud6c4 4.1 \uc774\ud558\uba74 \uc624\ub958 \ud45c\uc2dc\r\n            if(mysql_get_server_info($this->fd)<\"4.1\") {\r\n                $this->setError(-1, \"XE cannot be installed under the version of mysql 4.1. Current mysql version is \".mysql_get_server_info());\r\n                return;\r\n            }\r\n\r\n            // db \uc120\ud0dd\r\n            @mysql_select_db($this->database, $this->fd);\r\n            if(mysql_error()) {\r\n                $this->setError(mysql_errno(), mysql_error());\r\n                return;\r\n            }\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n\r\n            // mysql\uc758 \uacbd\uc6b0 utf8\uc784\uc744 \uc9c0\uc815\r\n            $this->_query(\"set names 'utf8'\");\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->isConnected()) return;\r\n            @mysql_close($this->fd);\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = @mysql_escape_string($string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit() {\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n            if(!$this->isConnected()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @mysql_query($query, $this->fd);\r\n\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if(mysql_error($this->fd)) $this->setError(mysql_errno($this->fd), mysql_error($this->fd));\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish();\r\n\r\n            // \uacb0\uacfc \ub9ac\ud134\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n            if(!$this->isConnected() || $this->isError() || !$result) return;\r\n            while($tmp = $this->db_fetch_object($result)) {\r\n                $output[] = $tmp;\r\n            }\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (mysql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into `%ssequence` (seq) values ('0')\", $this->prefix);\r\n            $this->_query($query);\r\n            $sequence = $this->db_insert_id();\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  `%ssequence` where seq < %d\", $this->prefix, $sequence);\r\n              $this->_query($query);\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief mysql old password\ub97c \uac00\uc838\uc624\ub294 \ud568\uc218 (mysql\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function isValidOldPassword($password, $saved_password) {\r\n            $query = sprintf(\"select password('%s') as password, old_password('%s') as old_password\", $this->addQuotes($password), $this->addQuotes($password));\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n            if($tmp->password == $saved_password || $tmp->old_password == $saved_password) return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf(\"show tables like '%s%s'\", $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n            if(!$tmp) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table `%s%s` add `%s` \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table `%s%s` drop `%s` \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"show fields from `%s%s`\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $output = $this->_fetch($result);\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->Field);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $query = sprintf(\"alter table `%s%s` add %s index `%s` (%s);\", $this->prefix, $table_name, $is_unique?'unique':'', $index_name, implode(',',$target_columns));\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $query = sprintf(\"alter table `%s%s` drop index `%s`\", $this->prefix, $table_name, $index_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            //$query = sprintf(\"show indexes from %s%s where key_name = '%s' \", $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"show indexes from `%s%s`\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $output = $this->_fetch($result);\r\n            if(!$output) return;\r\n            if(!is_array($output)) $output = array($output);\r\n\r\n            for($i=0;$i<count($output);$i++) {\r\n                if($output[$i]->Key_name == $index_name) return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                $column_schema[] = sprintf('`%s` %s%s %s %s %s',\r\n                    $name,\r\n                    $this->column_type[$type],\r\n                    $size?'('.$size.')':'',\r\n                    isset($default)?\"default '\".$default.\"'\":'',\r\n                    $notnull?'not null':'',\r\n                    $auto_increment?'auto_increment':''\r\n                );\r\n\r\n                if($primary_key) $primary_list[] = $name;\r\n                else if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            if(count($primary_list)) {\r\n                $column_schema[] = sprintf(\"primary key (%s)\", '`'.implode($primary_list,'`,`').'`');\r\n            }\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $column_schema[] = sprintf(\"unique %s (%s)\", $key, '`'.implode($val,'`,`').'`');\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $column_schema[] = sprintf(\"index %s (%s)\", $key, '`'.implode($val,'`,`').'`');\r\n                }\r\n            }\r\n\r\n            $schema = sprintf('create table `%s` (%s%s) %s;', $this->addQuotes($table_name), \"\\n\", implode($column_schema,\",\\n\"), \"ENGINE = MYISAM  CHARACTER SET utf8 COLLATE utf8_general_ci\");\r\n\r\n            $output = $this->_query($schema);\r\n            if(!$output) return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'`';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                if($output->column_type[$name]!='number') {\r\n\r\n\t\t\t\t\tif(!is_null($value)){\r\n\t\t\t\t\t\t$value = \"'\" . $this->addQuotes($value) .\"'\";\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif($val['notnull']=='notnull') {\r\n\t\t\t\t\t\t\t$value = \"''\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//$value = 'null';\r\n\t\t\t\t\t\t\t$value = \"''\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t//elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = '`'.$name.'`';\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'` as '.$key;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                if(!isset($val['value'])) continue;\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                else {\r\n                    if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n                    elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n\r\n                    $column_list[] = sprintf(\"`%s` = %s\", $name, $value);\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"update %s set %s %s\", implode(',',$table_list), implode(',',$column_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'`';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'` as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' `'.$this->prefix.$output->_tables[$key].'` as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\t\t\t\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) \r\n\t\t\t{\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') \r\n\t\t\t\t{\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} \r\n\t\t\t\telse if(strpos($name,'.')===false && strpos($name,'(')===false) \r\n\t\t\t\t{\r\n\t\t\t\t\tif($alias)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$col = sprintf('`%s` as `%s`', $name, $alias);\r\n\t\t\t\t\t\t$column_list[$alias] = $col;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$column_list[] = sprintf('`%s`',$name);\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\tif($alias)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$col = sprintf('%s as `%s`', $name, $alias);\r\n\t\t\t\t\t\t$column_list[$alias] = $col;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$column_list[] = sprintf('%s',$name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$columns = implode(',',$column_list);\r\n\t\t\t$output->column_list = $column_list;\r\n            $condition = $this->getCondition($output);\r\n\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if(count($output->groups))\r\n\t\t\t{\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'`')===false && strpos($col,' ')==false) $columns[] = '`'.$col.'`'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            if(count($click_count) && count($output->conditions)){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n\t\t\t$count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n\t\t\t$count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n\t\t\tif (count($output->groups)) $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if(count($output->order)) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'`')===false && strpos($col,' ')==false) $columns[] = '`'.$col.'`'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n            $virtual_no = $total_count - ($page-1)*$list_count;\r\n\t\t\t$data = array();\r\n            while($tmp = $this->db_fetch_object($result)) {\r\n                $data[$virtual_no--] = $tmp;\r\n            }\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n\r\n\t\tfunction db_insert_id()\r\n\t\t{\r\n            return mysql_insert_id($this->fd);\r\n\t\t}\r\n\r\n\t\tfunction db_fetch_object(&$result)\r\n\t\t{\r\n\t\t\treturn mysql_fetch_object($result);\r\n\t\t}\r\n    }\r\n\r\nreturn new DBMysql;\r\n?>\r\n", "<?php\n/**\n * @class DBPostgreSQL\n * @author ioseph (ioseph@postgresql.kr) updated by yoonjong.joh@gmail.com\n * @brief MySQL DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\n * @version 0.2\n *\n * postgresql handling class\n * 2009.02.10  update \uc640 delete query\ub97c \uc2e4\ud589\ud560\ub54c table \uc774\ub984\uc5d0 alias \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uc5c6\uc570. \uc9c0\uc6d0 \uc548\ud568\n *             order by clause\ub97c \uc2e4\ud589\ud560\ub54c \ud568\uc218\ub97c \uc2e4\ud589 \ud558\ub294 \ubd80\ubd84\uc744 column alias\ub85c \ub300\uccb4.\n * 2009.02.11  dropColumn() function\uc774 \ucd94\uac00  \n * 2009.02.13  addColumn() \ud568\uc218 \ubcc0\uacbd\n **/\n\nclass DBPostgresql extends DB\n{\n\n    /**\n     * @brief PostgreSQL DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\n     **/\n    var $hostname = '127.0.0.1'; ///< hostname\n    var $userid = null; ///< user id\n    var $password = null; ///< password\n    var $database = null; ///< database\n    var $prefix = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE\uc124\uce58 \uac00\ub2a5)\n\tvar $comment_syntax = '/* %s */';\n\n    /**\n     * @brief postgresql\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\n     *\n     * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\n     * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\n     **/\n    var $column_type = array(\n        'bignumber' => 'bigint', \n        'number' => 'integer',\n        'varchar' => 'varchar', \n        'char' => 'char', \n        'text' => 'text', \n        'bigtext' => 'text',\n        'date' => 'varchar(14)', \n        'float' => 'real',\n    );\n\n    /**\n     * @brief constructor\n     **/\n    function DBPostgresql()\n    {\n        $this->_setDBInfo();\n        $this->_connect();\n    }\n\t\n\t/**\n\t * @brief create an instance of this class\n\t */\n\tfunction create()\n\t{\n\t\treturn new DBPostgresql;\n\t}\n\n    /**\n     * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\n     **/\n    function isSupported()\n    {\n        if (!function_exists('pg_connect'))\n            return false;\n        return true;\n    }\n\n    /**\n     * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\n     **/\n    function _setDBInfo()\n    {\n        $db_info = Context::getDBInfo();\n        $this->hostname = $db_info->db_hostname;\n        $this->port = $db_info->db_port;\n        $this->userid = $db_info->db_userid;\n        $this->password = $db_info->db_password;\n        $this->database = $db_info->db_database;\n        $this->prefix = $db_info->db_table_prefix;\n        if (!substr($this->prefix, -1) != '_')\n            $this->prefix .= '_';\n    }\n\n    /**\n     * @brief DB \uc811\uc18d\n     **/\n    function _connect()\n    {\n        // pg\uc6a9 connection string\n        $conn_string = \"\";\n\n        // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\n        if (!$this->hostname || !$this->userid || !$this->database)\n            return;\n\n        // connection string \ub9cc\ub4e4\uae30\n        $conn_string .= ($this->hostname) ? \" host=$this->hostname\" : \"\";\n        $conn_string .= ($this->userid) ? \" user=$this->userid\" : \"\";\n        $conn_string .= ($this->password) ? \" password=$this->password\" : \"\";\n        $conn_string .= ($this->database) ? \" dbname=$this->database\" : \"\";\n        $conn_string .= ($this->port) ? \" port=$this->port\" : \"\";\n\n        // \uc811\uc18d\uc2dc\ub3c4\n        $this->fd = @pg_connect($conn_string);\n        if (!$this->fd || pg_connection_status($this->fd) != PGSQL_CONNECTION_OK) {\n            $this->setError(-1, \"CONNECTION FAILURE\");\n            return;\n        }\n\n        // \uc811\uc18d\uccb4\ud06c\n        $this->is_connected = true;\n\t\t$this->password = md5($this->password);\n        // utf8\uc784\uc744 \uc9c0\uc815\n        //$this ->_query('set client_encoding to uhc');\n    }\n\n    /**\n     * @brief DB\uc811\uc18d \ud574\uc81c\n     **/\n    function close()\n    {\n        if (!$this->isConnected())\n            return;\n        @pg_close($this->fd);\n    }\n\n    /**\n     * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\n     **/\n    function addQuotes($string)\n    {\n        if (version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc())\n            $string = stripslashes(str_replace(\"\\\\\", \"\\\\\\\\\", $string));\n        if (!is_numeric($string))\n            $string = @pg_escape_string($string);\n        return $string;\n    }\n\n    /**\n     * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\n     **/\n    function begin()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'BEGIN'))\n            $this->transaction_started = true;\n    }\n\n    /**\n     * @brief \ub864\ubc31\n     **/\n    function rollback()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'ROLLBACK'))\n            $this->transaction_started = false;\n    }\n\n    /**\n     * @brief \ucee4\ubc0b\n     **/\n    function commit()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'COMMIT'))\n            $this->transaction_started = false;\n    }\n\n    /**\n     * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\n     *\n     * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\n     * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\n     *         rows\uc774\uba74 array object\\n\n     *         row\uc774\uba74 object\\n\n     *         return\\n\n     **/\n    function _query($query)\n    {\n        if (!$this->isConnected())\n            return;\n\n        /*\n        $l_query_array = explode(\" \", $query);\n        if ($l_query_array[0] = \"update\")\n        {\n        if (strtolower($l_query_array[2]) == \"as\")\n        {\n        $l_query_array[2] = \"\";\n        $l_query_array[3] = \"\";\n        $query = implode(\" \",$l_query_array);\n        }\n        }\n        else if ($l_query_array[0] = \"delete\") \n        {\n        if (strtolower($l_query_array[3]) == \"as\")\n        {\n        $l_query_array[3] = \"\";\n        $l_query_array[4] = \"\";            \n        $query = implode(\" \",$l_query_array);\n        }\n        }\n        */\n\n        // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\n        $this->actStart($query);\n        $arr = array('Hello', 'World!', 'Beautiful', 'Day!');\n\n\n        // \ucffc\ub9ac \ubb38 \uc2e4\ud589\n        $result = @pg_query($this->fd, $query);\n\n        // \uc624\ub958 \uccb4\ud06c\n        if (!$result) {\n            //              var_dump($l_query_array);\n            //var_dump($query);\n            //die(\"\\nin query statement\\n\");\n            //var_dump(debug_backtrace());\n            $this->setError(1, pg_last_error($this->fd));\n        }\n\n        // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\n        $this->actFinish();\n\n        // \uacb0\uacfc \ub9ac\ud134\n        return $result;\n    }\n\n    /**\n     * @brief \uacb0\uacfc\ub97c fetch\n     **/\n    function _fetch($result)\n    {\n        if (!$this->isConnected() || $this->isError() || !$result)\n            return;\n        while ($tmp = pg_fetch_object($result)) {\n            $output[] = $tmp;\n        }\n        if (count($output) == 1)\n            return $output[0];\n        return $output;\n    }\n\n    /**\n     * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (postgresql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\n     **/\n    function getNextSequence()\n    {\n        $query = sprintf(\"select nextval('%ssequence') as seq\", $this->prefix);\n        $result = $this->_query($query);\n        $tmp = $this->_fetch($result);\n        return $tmp->seq;\n    }\n\n    /**\n     * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\n     **/\n    function isTableExists($target_name)\n    {\n        if ($target_name == \"sequence\")\n            return true;\n        $query = sprintf(\"SELECT tablename FROM pg_tables WHERE tablename = '%s%s' AND schemaname = current_schema()\",\n            $this->prefix, $this->addQuotes($target_name));\n\n        $result = $this->_query($query);\n        $tmp = $this->_fetch($result);\n        if (!$tmp)\n            return false;\n        return true;\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\n     **/\n    function addColumn($table_name, $column_name, $type = 'number', $size = '', $default =\n        NULL, $notnull = false)\n    {\n        $type = $this->column_type[$type];\n        if (strtoupper($type) == 'INTEGER' || strtoupper($type) == 'BIGINT')\n            $size = '';\n\n        $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\n\n        if ($size)\n            $query .= sprintf(\" %s(%s) \", $type, $size);\n        else\n            $query .= sprintf(\" %s \", $type);\n\n        $this->_query($query);\n\n        if (isset($default)) {\n            $query = sprintf(\"alter table %s%s alter %s  set default '%s' \", $this->prefix, $table_name, $column_name, $default);\n            $this->_query($query);\n        }\n        if ($notnull) {\n            $query = sprintf(\"update %s%s set %s  = %s \", $this->prefix, $table_name, $column_name, $default);\n            $this->_query($query);              \n            $query = sprintf(\"alter table %s%s alter %s  set not null \", $this->prefix, $table_name, $column_name);\n            $this->_query($query);\n        }\n    }\n\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\n     **/\n    function isColumnExists($table_name, $column_name)\n    {\n        $query = sprintf(\"SELECT attname FROM pg_attribute WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = '%s%s') AND attname = '%s'\",\n            $this->prefix, strtolower($table_name), strtolower($column_name));\n\n        // $query = sprintf(\"select column_name from information_schema.columns where table_schema = current_schema() and table_name = '%s%s' and column_name = '%s'\", $this->prefix, $this->addQuotes($table_name), strtolower($column_name));\n        $result = $this->_query($query);\n        if ($this->isError()) {\n            return;\n        }\n        $output = $this->_fetch($result);\n        if ($output) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\n     * $target_columns = array(col1, col2)\n     * $is_unique? unique : none\n     **/\n    function addIndex($table_name, $index_name, $target_columns, $is_unique = false)\n    {\n        if (!is_array($target_columns))\n            $target_columns = array($target_columns);\n\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        $query = sprintf(\"create %s index %s on %s (%s);\", $is_unique ? 'unique' : '', $index_name,\n            $table_name, implode(',', $target_columns));\n        $this->_query($query);\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\n     **/\n    function dropColumn($table_name, $column_name)\n    {\n        $query = sprintf(\"alter table %s%s drop %s \", $this->prefix, $table_name, $column_name);\n        $this->_query($query);\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\n     **/\n    function dropIndex($table_name, $index_name, $is_unique = false)\n    {\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        $query = sprintf(\"drop index %s\", $index_name);\n        $this->_query($query);\n    }\n\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\n     **/\n    function isIndexExists($table_name, $index_name)\n    {\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        //$query = sprintf(\"show indexes from %s%s where key_name = '%s' \", $this->prefix, $table_name, $index_name);\n        $query = sprintf(\"select indexname from pg_indexes where schemaname = current_schema() and tablename = '%s' and indexname = '%s'\",\n            $table_name, strtolower($index_name));\n        $result = $this->_query($query);\n        if ($this->isError())\n            return;\n        $output = $this->_fetch($result);\n\n        if ($output) {\n            return true;\n        }\n        //                var_dump($query);\n        //                die(\" no index\");\n        return false;\n    }\n\n    /**\n     * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\n     **/\n    function createTableByXml($xml_doc)\n    {\n        return $this->_createTable($xml_doc);\n    }\n\n    /**\n     * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\n     **/\n    function createTableByXmlFile($file_name)\n    {\n        if (!file_exists($file_name))\n            return;\n        // xml \ud30c\uc77c\uc744 \uc77d\uc74c\n        $buff = FileHandler::readFile($file_name);\n        return $this->_createTable($buff);\n    }\n\n    /**\n     * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\n     *\n     * type : number, varchar, text, char, date, \\n\n     * opt : notnull, default, size\\n\n     * index : primary key, index, unique\\n\n     **/\n    function _createTable($xml_doc)\n    {\n        // xml parsing\n        $oXml = new XmlParser();\n        $xml_obj = $oXml->parse($xml_doc);\n\n        // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\n        $table_name = $xml_obj->table->attrs->name;\n\n        if ($table_name == 'sequence') {\n            $query = sprintf('create sequence %s', $this->prefix . $table_name);\n            return $this->_query($query);\n        }\n\n        if ($this->isTableExists($table_name))\n            return;\n        $table_name = $this->prefix . $table_name;\n\n        if (!is_array($xml_obj->table->column))\n            $columns[] = $xml_obj->table->column;\n        else\n            $columns = $xml_obj->table->column;\n\n        foreach ($columns as $column) {\n            $name = $column->attrs->name;\n            $type = $column->attrs->type;\n            $size = $column->attrs->size;\n            $notnull = $column->attrs->notnull;\n            $primary_key = $column->attrs->primary_key;\n            $index = $column->attrs->index;\n            $unique = $column->attrs->unique;\n            $default = $column->attrs->default;\n            $auto_increment = $column->attrs->auto_increment;\n\n            if ($type == \"bignumber\" || $type == \"number\")\n                $size = 0;\n\n            $column_schema[] = sprintf('%s %s%s %s %s', $name, $this->column_type[$type], $size ?\n                '(' . $size . ')' : '', isset($default) ? \"default '\" . $default . \"'\" : '', $notnull ?\n                'not null' : '');\n\n            if ($primary_key)\n                $primary_list[] = $name;\n            else\n                if ($unique)\n                    $unique_list[$unique][] = $name;\n                else\n                    if ($index)\n                        $index_list[$index][] = $name;\n        }\n\n        if (count($primary_list)) {\n            $column_schema[] = sprintf(\"primary key (%s)\", implode($primary_list, ','));\n        }\n\n        if (count($unique_list)) {\n            foreach ($unique_list as $key => $val) {\n                $column_schema[] = sprintf(\"unique (%s)\", implode($val, ','));\n            }\n        }\n\n\n        $schema = sprintf('create table %s (%s%s);', $this->addQuotes($table_name), \"\\n\",\n            implode($column_schema, \",\\n\"));\n\n        $output = $this->_query($schema);\n\n        if (count($index_list)) {\n            foreach ($index_list as $key => $val) {\n                if (!$this->isIndexExists($table_name, $key))\n                    $this->addIndex($table_name, $key, $val);\n            }\n        }\n\n        if (!$output)\n            return false;\n\n    }\n\n    /**\n     * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\n     **/\n    function getCondition($output)\n    {\n        if (!$output->conditions)\n            return;\n        $condition = $this->_getCondition($output->conditions, $output->column_type);\n        if ($condition)\n            $condition = ' where ' . $condition;\n        return $condition;\n    }\n\n    function getLeftCondition($conditions, $column_type)\n    {\n        return $this->_getCondition($conditions, $column_type);\n    }\n\n\n    function _getCondition($conditions, $column_type)\n    {\n        $condition = '';\n        foreach ($conditions as $val) {\n            $sub_condition = '';\n            foreach ($val['condition'] as $v) {\n                if (!isset($v['value']))\n                    continue;\n                if ($v['value'] === '')\n                    continue;\n                if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\n                    continue;\n\n                $name = $v['column'];\n                $operation = $v['operation'];\n                $value = $v['value'];\n                $type = $this->getColumnType($column_type, $name);\n                $pipe = $v['pipe'];\n\n                $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\n                if (!$value)\n                    $value = $v['value'];\n                $str = $this->getConditionPart($name, $value, $operation);\n                if ($sub_condition)\n                    $sub_condition .= ' ' . $pipe . ' ';\n                $sub_condition .= $str;\n            }\n            if ($sub_condition) {\n                if ($condition && $val['pipe'])\n                    $condition .= ' ' . $val['pipe'] . ' ';\n                $condition .= '(' . $sub_condition . ')';\n            }\n        }\n        return $condition;\n    }\n\n\n    /**\n     * @brief insertAct \ucc98\ub9ac\n     **/\n    function _executeInsertAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uceec\ub7fc \uc815\ub9ac\n        foreach ($output->columns as $key => $val) {\n            $name = $val['name'];\n            $value = $val['value'];\n            if ($output->column_type[$name] != 'number') {\n                $value = \"'\" . $this->addQuotes($value) . \"'\";\n                if (!$value)\n                    $value = 'null';\n            }\n\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\n\t\t\t// elseif (!$value || is_numeric($value)) $value = (int)$value;\n\t\t\telse $value = (int)$value;\n\n            $column_list[] = $name;\n            $value_list[] = $value;\n        }\n\n        $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',', $table_list),\n            implode(',', $column_list), implode(',', $value_list));\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief updateAct \ucc98\ub9ac\n     **/\n    function _executeUpdateAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            //$table_list[] = $this->prefix.$val.' as '.$key;\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uceec\ub7fc \uc815\ub9ac\n        foreach ($output->columns as $key => $val) {\n            if (!isset($val['value']))\n                continue;\n            $name = $val['name'];\n            $value = $val['value'];\n            if (strpos($name, '.') !== false && strpos($value, '.') !== false)\n                $column_list[] = $name . ' = ' . $value;\n            else {\n                if ($output->column_type[$name] != 'number')\n                    $value = \"'\" . $this->addQuotes($value) . \"'\";\n                elseif (!$value || is_numeric($value))\n                    $value = (int)$value;\n\n                $column_list[] = sprintf(\"%s = %s\", $name, $value);\n            }\n        }\n\n        // \uc870\uac74\uc808 \uc815\ub9ac\n        $condition = $this->getCondition($output);\n\n        $query = sprintf(\"update %s set %s %s\", implode(',', $table_list), implode(',',\n            $column_list), $condition);\n\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief deleteAct \ucc98\ub9ac\n     **/\n    function _executeDeleteAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uc870\uac74\uc808 \uc815\ub9ac\n        $condition = $this->getCondition($output);\n\n        $query = sprintf(\"delete from %s %s\", implode(',', $table_list), $condition);\n\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief selectAct \ucc98\ub9ac\n     *\n     * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\n     * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\n     **/\n    function _executeSelectAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        $table_list = array();\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val . ' as ' . $key;\n        }\n\n        $left_join = array();\n        // why???\n        $left_tables = (array )$output->left_tables;\n\n        foreach ($left_tables as $key => $val) {\n            $condition = $this->_getCondition($output->left_conditions[$key], $output->\n                column_type);\n            if ($condition) {\n                $left_join[] = $val . ' ' . $this->prefix . $output->_tables[$key] . ' as ' . $key .\n                    ' on (' . $condition . ')';\n            }\n        }\n\n\t\t$click_count = array();\n\t\tif(!$output->columns){\n\t\t\t$output->columns = array(array('name'=>'*'));\n\t\t}\n\n\t\t$column_list = array();\n\t\tforeach ($output->columns as $key => $val) {\n\t\t\t$name = $val['name'];\n\t\t\t$alias = $val['alias'];\n\t\t\tif($val['click_count']) $click_count[] = $val['name'];\n\n\t\t\tif (substr($name, -1) == '*') {\n\t\t\t\t$column_list[] = $name;\n\t\t\t} elseif (strpos($name, '.') === false && strpos($name, '(') === false) {\n\t\t\t\tif ($alias)\n\t\t\t\t\t$column_list[$alias] = sprintf('%s as %s', $name, $alias);\n\t\t\t\telse\n\t\t\t\t\t$column_list[] = sprintf('%s', $name);\n\t\t\t} else {\n\t\t\t\tif ($alias)\n\t\t\t\t\t$column_list[$alias] = sprintf('%s as %s', $name, $alias);\n\t\t\t\telse\n\t\t\t\t\t$column_list[] = sprintf('%s', $name);\n\t\t\t}\n\t\t}\n\t\t$columns = implode(',', $column_list);\n\n        $condition = $this->getCondition($output);\n\n\t\t$output->column_list = $column_list;\n        if ($output->list_count && $output->page)\n            return $this->_getNavigationData($table_list, $columns, $left_join, $condition,\n                $output);\n\n        // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\n        if ($output->order) {\n            $conditions = $this->getConditionList($output);\n            if (!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\n                foreach ($output->order as $key => $val) {\n                    $col = $val[0];\n                    if (!in_array($col, array('list_order', 'update_order')))\n                        continue;\n                    if ($condition)\n                        $condition .= sprintf(' and %s < 2100000000 ', $col);\n                    else\n                        $condition = sprintf(' where %s < 2100000000 ', $col);\n                }\n            }\n        }\n\n\n        if (count($output->groups)) {\n            /*\n            var_dump(\"= column output start = \");\n            var_dump(sizeof ($output->columns) . \" = end length == \");\n            var_dump($output->columns);\n            var_dump(\"= column output end = \" . \"\\n\");\n            var_dump($output->groups);\n            var_dump(\"=== \" . \"\\n\");\n            var_dump(debug_backtrace());\n            \n            foreach($output->columns as $key => $val) {\n            $name = $val['name'];\n            $alias = $val['alias'];\n            } */\n            $group_list = array();\n            foreach ($output->groups as $gkey => $gval) {\n                foreach ($output->columns as $key => $val) {\n                    $name = $val['name'];\n                    $alias = $val['alias'];\n                    if (trim($name) == trim($gval)) {\n                        $group_list[] = $alias;\n                        break;\n                    }\n                }\n\n\t\t\t\tif($column_list[$gval]) $output->arg_columns[] = $column_list[$gval];\n\n            }\n            $groupby_query = sprintf(' group by %s', implode(',', $group_list));\n            //             var_dump($query);\n        }\n\n        if ($output->order) {\n            foreach ($output->order as $key => $val) {\n                $index_list[] = sprintf('%s %s', $val[0], $val[1]);\n\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\n            }\n            if (count($index_list)) $orderby_query = ' order by ' . implode(',', $index_list);\n        }\n\n\t\tif(count($output->arg_columns))\n\t\t{\n\t\t\t$columns = join(',',$output->arg_columns);\n\t\t}\n\n        $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',', $table_list), implode(' ', $left_join), $condition, $groupby_query.$orderby_query);\n\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\n        $result = $this->_query($query);\n        if ($this->isError())\n            return;\n        \n        if(count($click_count)>0 && count($output->conditions)>0){\n            $_query = '';\n            foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\n            $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\n            $this->_query($_query);\n        }\n\n\n        $data = $this->_fetch($result);\n\n        $buff = new Object();\n        $buff->data = $data;\n        return $buff;\n    }\n\n    /**\n     * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\n     *\n     * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\n     **/\n    function _getNavigationData($table_list, $columns, $left_join, $condition, $output)\n    {\n        require_once (_XE_PATH_ . 'classes/page/PageHandler.class.php');\n\n\t\t$column_list = $output->column_list;\n        /*\n        // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\n        // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\n        //\n        $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\n        $total_count = $this->getCountCache($output->tables, $count_condition);\n        if ($total_count === false) {\n            $count_query = sprintf('select count(*) as count from %s %s %s', implode(', ', $table_list), implode(' ', $left_join), $count_condition);\n            if (count($output->groups))\n                $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\n            $result = $this->_query($count_query);\n            $count_output = $this->_fetch($result);\n            $total_count = (int)$count_output->count;\n            $this->putCountCache($output->tables, $count_condition, $total_count);\n        }\n        */\n\n        // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\n        $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',', $table_list), implode(' ', $left_join), $condition);\n\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\n\t\t$result = $this->_query($count_query);\n\t\t$count_output = $this->_fetch($result);\n\t\t$total_count = (int)$count_output->count;\n\n        $list_count = $output->list_count['value'];\n        if (!$list_count) $list_count = 20;\n        $page_count = $output->page_count['value'];\n        if (!$page_count) $page_count = 10;\n        $page = $output->page['value'];\n        if (!$page)\n            $page = 1;\n\n        // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\n        if ($total_count) $total_page = (int)(($total_count - 1) / $list_count) + 1;\n        else $total_page = 1;\n\n        // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\n        if ($page > $total_page) $page = $total_page;\n        $start_count = ($page - 1) * $list_count;\n\n        // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\n        if ($output->order) {\n            $conditions = $this->getConditionList($output);\n            if (!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\n                foreach ($output->order as $key => $val) {\n                    $col = $val[0];\n                    if (!in_array($col, array('list_order', 'update_order')))\n                        continue;\n                    if ($condition)\n                        $condition .= sprintf(' and %s < 2100000000 ', $col);\n                    else\n                        $condition = sprintf(' where %s < 2100000000 ', $col);\n                }\n            }\n        }\n\n        if (count($output->groups)) {\n            /*\n            var_dump(\"= column output start = \");\n            var_dump(sizeof ($output->columns) . \" = end length == \");\n            var_dump($output->columns);\n            var_dump(\"= column output end = \" . \"\\n\");\n            var_dump($output->groups);\n            var_dump(\"=== \" . \"\\n\");\n            var_dump(debug_backtrace());\n            \n            foreach($output->columns as $key => $val) {\n            $name = $val['name'];\n            $alias = $val['alias'];\n            } */\n            $group_list = array();\n            foreach ($output->groups as $gkey => $gval) {\n                foreach ($output->columns as $key => $val) {\n                    $name = $val['name'];\n                    $alias = $val['alias'];\n                    if (trim($name) == trim($gval)) {\n                        $group_list[] = $alias;\n                        break;\n                    }\n                }\n\n\t\t\t\tif($column_list[$gval]) $output->arg_columns[] = $column_list[$gval];\n\n            }\n            $groupby_query = sprintf(' group by %s', implode(',', $group_list));\n            //             var_dump($query);\n        }\n\n        if ($output->order) {\n            foreach ($output->order as $key => $val) {\n                $index_list[] = sprintf('%s %s', $val[0], $val[1]);\n\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\n            }\n            if (count($index_list)) $orderby_query = ' order by ' . implode(',', $index_list);\n        }\n\n\t\tif(count($output->arg_columns))\n\t\t{\n\t\t\t$columns = join(',',$output->arg_columns);\n\t\t}\n\n        $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',', $table_list), implode(' ', $left_join), $condition);\n        $query = sprintf('%s offset %d limit %d', $query, $start_count, $list_count);\n\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\n\n        $result = $this->_query($query);\n        if ($this->isError()) {\n            $buff = new Object();\n            $buff->total_count = 0;\n            $buff->total_page = 0;\n            $buff->page = 1;\n            $buff->data = array();\n\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\n            return $buff;\n        }\n\n        $virtual_no = $total_count - ($page - 1) * $list_count;\n        while ($tmp = pg_fetch_object($result)) {\n            $data[$virtual_no--] = $tmp;\n        }\n\n        $buff = new Object();\n        $buff->total_count = $total_count;\n        $buff->total_page = $total_page;\n        $buff->page = $page;\n        $buff->data = $data;\n\n        $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\n        return $buff;\n    }\n}\n\nreturn new DBPostgresql;\n?>\n", "<?php\r\n    /**\r\n     * @class DBSqlite2\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief SQLite ver 2.x \ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1\r\n     *\r\n     * sqlite handling class (sqlite ver 2.x)\r\n     **/\r\n\r\n    class DBSqlite2 extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE\uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief sqlite \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'INTEGER',\r\n            'number' => 'INTEGER',\r\n            'varchar' => 'VARHAR',\r\n            'char' => 'CHAR',\r\n            'text' => 'TEXT',\r\n            'bigtext' => 'TEXT',\r\n            'date' => 'VARCHAR(14)',\r\n            'float' => 'FLOAT',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBSqlite2() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBSqlite2;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if(!function_exists('sqlite_open')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->database) return;\r\n\r\n            // \ub370\uc774\ud130 \ubca0\uc774\uc2a4 \ud30c\uc77c \uc811\uc18d \uc2dc\ub3c4\r\n            $this->fd = sqlite_open($this->database, 0666, $error);\r\n            if(!file_exists($this->database) || $error) {\r\n                $this->setError(-1,$error);\r\n                $this->is_connected = false;\r\n                return;\r\n            }\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->isConnected()) return;\r\n            sqlite_close($this->fd);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if(!$this->is_connected || $this->transaction_started) return;\r\n            if($this->_query(\"BEGIN;\")) $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->_query(\"ROLLBACK;\");\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && (!$this->isConnected() || !$this->transaction_started)) return;\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->_query(\"COMMIT;\");\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = str_replace(\"'\",\"''\", $string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n            if(!$this->isConnected()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @sqlite_query($query, $this->fd);\r\n\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if(sqlite_last_error($this->fd)) $this->setError(sqlite_last_error($this->fd), sqlite_error_string(sqlite_last_error($this->fd)));\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc54c\ub9bc\r\n            $this->actFinish();\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n            if($this->isError() || !$result) return;\r\n\r\n            while($tmp = sqlite_fetch_array($result, SQLITE_ASSOC)) {\r\n                unset($obj);\r\n                foreach($tmp as $key => $val) {\r\n                    $pos = strpos($key, '.');\r\n                    if($pos) $key = substr($key, $pos+1);\r\n                    $obj->{$key} = $val;\r\n                }\r\n                $output[] = $obj;\r\n            }\r\n\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values ('')\", $this->prefix);\r\n            $this->_query($query);\r\n            $sequence = sqlite_last_insert_rowid($this->fd);\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  %ssequence where seq < %d\", $this->prefix, $sequence);\r\n              $this->_query($query);\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf('pragma table_info(%s%s)', $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\r\n            if(sqlite_num_rows($result)==0) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table %s%s drop column %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->name);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n\r\n            $query = sprintf('CREATE %s INDEX %s ON %s%s (%s)', $is_unique?'UNIQUE':'', $key_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"DROP INDEX %s\", $this->prefix, $table_name, $key_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"pragma index_info(%s)\", $key_name);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n            if(!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                if(strtoupper($this->column_type[$type])=='INTEGER') $size = '';\r\n                else $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                if($auto_increment) {\r\n                    $column_schema[] = sprintf('%s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                } else {\r\n                    $column_schema[] = sprintf('%s %s%s %s %s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $size?'('.$size.')':'',\r\n                        $notnull?'NOT NULL':'',\r\n                        $primary_key?'PRIMARY KEY':'',\r\n                        isset($default)?\"DEFAULT '\".$default.\"'\":'',\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                }\r\n\r\n                if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            $schema = sprintf('CREATE TABLE %s (%s%s) ;', $this->addQuotes($table_name),\" \", implode($column_schema,\", \"));\r\n            $this->_query($schema);\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $query = sprintf('CREATE UNIQUE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_query($query);\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $query = sprintf('CREATE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_query($query);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if($output->column_type[$name]!='number') {\r\n                    $value = \"'\".$this->addQuotes($value).\"'\";\r\n                    if(!$value) $value = 'null';\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t// elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = $name;\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            $table_count = count(array_values($output->tables));\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 1\uac1c\uc77c \uacbd\uc6b0\r\n            if($table_count == 1) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                list($target_table) = array_values($output->tables);\r\n                $target_table = $this->prefix.$target_table;\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                    else {\r\n                        if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n                        elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n\r\n                        $column_list[] = sprintf(\"%s = %s\", $name, $value);\r\n                    }\r\n                }\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n\r\n                $query = sprintf(\"update %s set %s %s\", $target_table, implode(',',$column_list), $condition);\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 2\uac1c\uc77c \uacbd\uc6b0 (sqlite\uc5d0\uc11c update \ud14c\uc774\ube14\uc744 1\uac1c \uc774\uc0c1 \uc9c0\uc815 \ubabb\ud574\uc11c \uc774\ub807\uac8c \uaf41\uc218\ub85c... \ub2e4\ub978 \ubc29\ubc95\uc774 \uc788\uc73c\ub824\ub098..)\r\n            } elseif($table_count == 2) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                foreach($output->tables as $key => $val) {\r\n                    $table_list[$val] = $this->prefix.$key;\r\n                }\r\n                list($source_table, $target_table) = array_values($table_list);\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n                foreach($table_list as $key => $val) {\r\n                    $condition = eregi_replace($key.'\\\\.', $val.'.', $condition);\r\n                }\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    list($s_prefix, $s_column) = explode('.',$name);\r\n                    list($t_prefix, $t_column) = explode('.',$value);\r\n\r\n                    $s_table = $table_list[$s_prefix];\r\n                    $t_table = $table_list[$t_prefix];\r\n                    $column_list[] = sprintf(' %s = (select %s from %s %s) ', $s_column, $t_column, $t_table, $condition);\r\n                }\r\n\r\n                $query = sprintf('update %s set %s where exists(select * from %s %s)', $source_table, implode(',', $column_list), $target_table, $condition);\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val.' as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' '.$this->prefix.$output->_tables[$key].' as '.$key  . ' on ' . $condition . '';\r\n                }\r\n            }\r\n\r\n            if(!$output->columns) {\r\n                $columns = '*';\r\n            } else {\r\n                $column_list = array();\r\n                foreach($output->columns as $key => $val) {\r\n                    $name = $val['name'];\r\n                    $alias = $val['alias'];\r\n                    if($val['click_count']) $click_count[] = $val['name'];\r\n\r\n                    if(substr($name,-1) == '*') {\r\n                        $column_list[] = $name;\r\n                    } elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n                        if($alias) $column_list[] = sprintf('%s as %s', $name, $alias);\r\n                        else $column_list[] = sprintf('%s',$name);\r\n                    } else {\r\n                        if($alias) $column_list[] = sprintf('%s as %s', $name, $alias);\r\n                        else $column_list[] = sprintf('%s',$name);\r\n                    }\r\n                }\r\n                $columns = implode(',',$column_list);\r\n            }\r\n\r\n            $condition = $this->getCondition($output);\r\n\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns,  $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\r\n            if(count($output->groups)) $query .= sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                }\r\n                if(count($index_list)) $query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n      function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n            /*\r\n            // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\r\n            // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\r\n            //\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $total_count = $this->getCountCache($output->tables, $count_condition);\r\n            if($total_count === false) {\r\n                $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n                if (count($output->groups))\r\n                    $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n                $result = $this->_query($count_query);\r\n                $count_output = $this->_fetch($result);\r\n                $total_count = (int)$count_output->count;\r\n                $this->putCountCache($output->tables, $count_condition, $total_count);\r\n            }\r\n            */\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n            $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',',$table_list), implode(' ',$left_join), $condition);\r\n\r\n\r\n            if(count($output->groups)) $query .= sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                }\r\n                if(count($index_list)) $query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n            if($result) {\r\n                $virtual_no = $total_count - ($page-1)*$list_count;\r\n                while($tmp = sqlite_fetch_array($result, SQLITE_ASSOC)) {\r\n                    unset($obj);\r\n                    foreach($tmp as $key => $val) {\r\n                        $pos = strpos($key, '.');\r\n                        if($pos) $key = substr($key, $pos+1);\r\n                        $obj->{$key} = $val;\r\n                    }\r\n                    $data[$virtual_no--] = $obj;\r\n                }\r\n            }\r\n\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBSqlite2;\r\n?>\r\n", "<?php\r\n    /**\r\n     * @class DBSqlite3_pdo\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief SQLite3\ub97c PDO\ub85c \uc774\uc6a9\ud558\uc5ec class\r\n     * @version 0.1\r\n     **/\r\n\r\n    class DBSqlite3_pdo extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * PDO \uc0ac\uc6a9\uc2dc \ud544\uc694\ud55c \ubcc0\uc218\ub4e4\r\n         **/\r\n        var $handler      = NULL;\r\n        var $stmt         = NULL;\r\n        var $bind_idx     = 0;\r\n        var $bind_vars    = array();\r\n\r\n        /**\r\n         * @brief sqlite3 \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'INTEGER',\r\n            'number'    => 'INTEGER',\r\n            'varchar'   => 'VARHAR',\r\n            'char'      => 'CHAR',\r\n            'text'      => 'TEXT',\r\n            'bigtext'   => 'TEXT',\r\n            'date'      => 'VARCHAR(14)',\r\n            'float'     => 'REAL',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBSqlite3_pdo() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBSqlite3_pdo;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            return class_exists('PDO');\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->database) return;\r\n\r\n            // \ub370\uc774\ud130 \ubca0\uc774\uc2a4 \ud30c\uc77c \uc811\uc18d \uc2dc\ub3c4\r\n\t\t\ttry {\r\n\t\t\t\t// PDO is only supported with PHP5,\r\n\t\t\t\t// so it is allowed to use try~catch statment in this class.\r\n\t\t\t\t$this->handler = new PDO('sqlite:'.$this->database);\r\n\t\t\t} catch (PDOException $e) {\r\n\t\t\t\t$this->setError(-1, 'Connection failed: '.$e->getMessage());\r\n\t\t\t\t$this->is_connected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->is_connected) return;\r\n            $this->commit();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if(!$this->is_connected || $this->transaction_started) return;\r\n            if($this->handler->beginTransaction()) $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->handler->rollBack();\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && (!$this->is_connected || !$this->transaction_started)) return;\r\n            $this->handler->commit();\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = str_replace(\"'\",\"''\",$string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 prepare\r\n         **/\r\n        function _prepare($query) {\r\n            if(!$this->is_connected) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            $this->stmt = $this->handler->prepare($query);\r\n\r\n            if($this->handler->errorCode() != '00000') {\r\n                $this->setError($this->handler->errorCode(), print_r($this->handler->errorInfo(),true));\r\n                $this->actFinish();\r\n            }\r\n            $this->bind_idx = 0;\r\n            $this->bind_vars = array();\r\n        }\r\n\r\n        /**\r\n         * @brief : stmt\uc5d0 binding params\r\n         **/\r\n        function _bind($val) {\r\n            if(!$this->is_connected || !$this->stmt) return;\r\n\r\n            $this->bind_idx ++;\r\n            $this->bind_vars[] = $val;\r\n            $this->stmt->bindParam($this->bind_idx, $val);\r\n        }\r\n\r\n        /**\r\n         * @brief : prepare\ub41c \ucffc\ub9ac\uc758 execute\r\n         **/\r\n        function _execute() {\r\n            if(!$this->is_connected || !$this->stmt) return;\r\n\r\n            $this->stmt->execute();\r\n\r\n            if($this->stmt->errorCode() === '00000') {\r\n                $output = null;\r\n                while($tmp = $this->stmt->fetch(PDO::FETCH_ASSOC)) {\r\n                    unset($obj);\r\n                    foreach($tmp as $key => $val) {\r\n                        $pos = strpos($key, '.');\r\n                        if($pos) $key = substr($key, $pos+1);\r\n                        $obj->{$key} = str_replace(\"''\",\"'\",$val);\r\n                    }\r\n                    $output[] = $obj;\r\n                }\r\n            } else {\r\n                $this->setError($this->stmt->errorCode(),print_r($this->stmt->errorInfo(),true));\r\n            }\r\n\r\n            $this->stmt = null;\r\n            $this->actFinish();\r\n\r\n            if(is_array($output) && count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values (NULL)\", $this->prefix);\r\n            $this->_prepare($query);\r\n            $result = $this->_execute();\r\n            $sequence = $this->handler->lastInsertId();\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  %ssequence where seq < %d\", $this->prefix, $sequence);\r\n              $this->_prepare($query);\r\n              $result = $this->_execute();\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf('pragma table_info(%s%s)', $this->prefix, $target_name);\r\n            $this->_prepare($query);\r\n            if(!$this->_execute()) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table %s%s drop column %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n            $this->_prepare($query);\r\n            $output = $this->_execute();\r\n\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->name);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n\r\n            $query = sprintf('CREATE %s INDEX %s ON %s%s (%s)', $is_unique?'UNIQUE':'', $key_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            $this->_prepare($query);\r\n            $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"DROP INDEX %s\", $this->prefix, $table_name, $key_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n\r\n            $query = sprintf(\"pragma index_info(%s)\", $key_name);\r\n            $this->_prepare($query);\r\n            $output = $this->_execute();\r\n            if(!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                if(strtoupper($this->column_type[$type])=='INTEGER') $size = '';\r\n                else $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                if($auto_increment) {\r\n                    $column_schema[] = sprintf('%s %s PRIMARY KEY %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                } else {\r\n                    $column_schema[] = sprintf('%s %s%s %s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $size?'('.$size.')':'',\r\n                        $notnull?'NOT NULL':'',\r\n                        $primary_key?'PRIMARY KEY':'',\r\n                        isset($default)?\"DEFAULT '\".$default.\"'\":''\r\n                    );\r\n                }\r\n\r\n                if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            $schema = sprintf('CREATE TABLE %s (%s%s) ;', $table_name,\" \", implode($column_schema,\", \"));\r\n            $this->_prepare($schema);\r\n            $this->_execute();\r\n            if($this->isError()) return;\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $query = sprintf('CREATE UNIQUE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_prepare($query);\r\n                    $this->_execute();\r\n                    if($this->isError()) $this->rollback();\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $query = sprintf('CREATE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_prepare($query);\r\n                    $this->_execute();\r\n                    if($this->isError()) $this->rollback();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                $key_list[] = $name;\r\n\r\n                if($output->column_type[$name]!='number') $val_list[] = $this->addQuotes($value);\r\n                else {\r\n\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n                    //if(!$value || is_numeric($value)) $value = (int)$value;\r\n                    $val_list[] = (int)$value;\r\n                }\r\n\r\n                $prepare_list[] = '?';\r\n            }\r\n\r\n            $query = sprintf(\"INSERT INTO %s (%s) VALUES (%s);\", implode(',',$table_list), implode(',',$key_list), implode(',',$prepare_list));\r\n\r\n            $this->_prepare($query);\r\n\r\n            $val_count = count($val_list);\r\n            for($i=0;$i<$val_count;$i++) $this->_bind($val_list[$i]);\r\n\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            $table_count = count(array_values($output->tables));\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 1\uac1c\uc77c \uacbd\uc6b0\r\n            if($table_count == 1) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                list($target_table) = array_values($output->tables);\r\n                $target_table = $this->prefix.$target_table;\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                    else {\r\n                        if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n                        elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n\r\n                        $column_list[] = sprintf(\"%s = %s\", $name, $value);\r\n                    }\r\n                }\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n\r\n                $query = sprintf(\"update %s set %s %s\", $target_table, implode(',',$column_list), $condition);\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 2\uac1c\uc77c \uacbd\uc6b0 (sqlite\uc5d0\uc11c update \ud14c\uc774\ube14\uc744 1\uac1c \uc774\uc0c1 \uc9c0\uc815 \ubabb\ud574\uc11c \uc774\ub807\uac8c \uaf41\uc218\ub85c... \ub2e4\ub978 \ubc29\ubc95\uc774 \uc788\uc73c\ub824\ub098..)\r\n            } elseif($table_count == 2) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                foreach($output->tables as $key => $val) {\r\n                    $table_list[$val] = $this->prefix.$key;\r\n                }\r\n                list($source_table, $target_table) = array_values($table_list);\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n                foreach($table_list as $key => $val) {\r\n                    $condition = eregi_replace($key.'\\\\.', $val.'.', $condition);\r\n                }\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    list($s_prefix, $s_column) = explode('.',$name);\r\n                    list($t_prefix, $t_column) = explode('.',$value);\r\n\r\n                    $s_table = $table_list[$s_prefix];\r\n                    $t_table = $table_list[$t_prefix];\r\n                    $column_list[] = sprintf(' %s = (select %s from %s %s) ', $s_column, $t_column, $t_table, $condition);\r\n                }\r\n\r\n                $query = sprintf('update %s set %s where exists(select * from %s %s)', $source_table, implode(',', $column_list), $target_table, $condition);\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val.' as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' '.$this->prefix.$output->_tables[$key].' as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) {\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') {\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as %s', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as %s', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$columns = implode(',',$column_list);\r\n\r\n            $condition = $this->getCondition($output);\r\n\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = join(',',$output->arg_columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $this->_prepare($query);\r\n            $data = $this->_execute();\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n            /*\r\n            // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\r\n            // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\r\n            //\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $total_count = $this->getCountCache($output->tables, $count_condition);\r\n            if($total_count === false) {\r\n                $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n                if (count($output->groups))\r\n                    $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n                $result = $this->_query($count_query);\r\n                $count_output = $this->_fetch($result);\r\n                $total_count = (int)$count_output->count;\r\n                $this->putCountCache($output->tables, $count_condition, $total_count);\r\n            }\r\n            */\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n            $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$this->_prepare($count_query);\r\n\t\t\t$count_output = $this->_execute();\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = join(',',$output->arg_columns);\r\n\t\t\t}\r\n\r\n            // return \uacb0\uacfc\ubb3c \uc0dd\uc131\r\n            $buff = new Object();\r\n            $buff->total_count = 0;\r\n            $buff->total_page = 0;\r\n            $buff->page = 1;\r\n            $buff->data = array();\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $this->_prepare($query);\r\n\r\n            if($this->isError()) {\r\n                $this->setError($this->handler->errorCode(), print_r($this->handler->errorInfo(),true));\r\n                $this->actFinish();\r\n                return $buff;\r\n            }\r\n\r\n            $this->stmt->execute();\r\n\r\n            if($this->stmt->errorCode() != '00000') {\r\n                $this->setError($this->stmt->errorCode(), print_r($this->stmt->errorInfo(),true));\r\n                $this->actFinish();\r\n                return $buff;\r\n            }\r\n\r\n            $output = null;\r\n            $virtual_no = $total_count - ($page-1)*$list_count;\r\n            while($tmp = $this->stmt->fetch(PDO::FETCH_ASSOC)) {\r\n                unset($obj);\r\n                foreach($tmp as $key => $val) {\r\n                    $pos = strpos($key, '.');\r\n                    if($pos) $key = substr($key, $pos+1);\r\n                    $obj->{$key} = $val;\r\n                }\r\n                $data[$virtual_no--] = $obj;\r\n            }\r\n\r\n            $this->stmt = null;\r\n            $this->actFinish();\r\n\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBSqlite3_pdo;\r\n?>\r\n"], "fixing_code": ["<?php\r\n    /**\r\n     * @class DBCubrid\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief Cubrid DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1p1\r\n     *\r\n     * CUBRID2008 R1.3 \uc5d0 \ub300\uc751\ud558\ub3c4\ub85d \uc218\uc815 Prototype (prototype@cubrid.com) / 09.02.23\r\n     * 7.3 ~ 2008 R1.3 \uae4c\uc9c0 \ud14c\uc2a4\ud2b8 \uc644\ub8cc\ud568.\r\n     * \uae30\ubcf8 \ucffc\ub9ac\ub9cc \uc0ac\uc6a9\ud558\uc600\uae30\uc5d0 \ud2b9\ud654\ub41c \ud29c\ub2dd\uc774 \ud544\uc694\r\n     **/\r\n\r\n    class DBCubrid extends DB\r\n    {\r\n\r\n        /**\r\n         * @brief Cubrid DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $hostname = '127.0.0.1'; ///< hostname\r\n        var $userid = NULL; ///< user id\r\n        var $password = NULL; ///< password\r\n        var $database = NULL; ///< database\r\n        var $port = 33000; ///< db server port\r\n        var $prefix = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n        var $cutlen = 12000; ///< \ud050\ube0c\ub9ac\ub4dc\uc758 \ucd5c\ub300 \uc0c1\uc218 \ud06c\uae30(\uc2a4\ud2b8\ub9c1\uc774 \uc774\ubcf4\ub2e4 \ud06c\uba74 '...'+'...' \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\r\n        var $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief cubrid\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'numeric(20)',\r\n            'number' => 'integer',\r\n            'varchar' => 'character varying',\r\n            'char' => 'character',\r\n            'tinytext' => 'character varying(256)',\r\n            'text' => 'character varying(1073741823)',\r\n            'bigtext' => 'character varying(1073741823)',\r\n            'date' => 'character varying(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBCubrid()\r\n        {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBCubrid;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported()\r\n        {\r\n            if (!function_exists('cubrid_connect')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo()\r\n        {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->port = $db_info->db_port;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n\r\n            if (!substr($this->prefix, -1) != '_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect()\r\n        {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if (!$this->hostname || !$this->userid || !$this->password || !$this->database || !$this->port) return;\r\n\r\n            // \uc811\uc18d\uc2dc\ub3c4\r\n            $this->fd = @cubrid_connect ($this->hostname, $this->port, $this->database, $this->userid, $this->password);\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            if (!$this->fd) {\r\n                $this->setError (-1, 'database connect fail');\r\n                return $this->is_connected = false;\r\n            }\r\n\r\n            $this->is_connected = true;\r\n            $this->password = md5 ($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close()\r\n        {\r\n            if (!$this->isConnected ()) return;\r\n\r\n            @cubrid_commit ($this->fd);\r\n            @cubrid_disconnect ($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string)\r\n        {\r\n            if (!$this->fd) return $string;\r\n\r\n            if (version_compare (PHP_VERSION, \"5.9.0\", \"<\") &&\r\n              get_magic_quotes_gpc ()) {\r\n                $string = stripslashes (str_replace (\"\\\\\",\"\\\\\\\\\", $string));\r\n            }\r\n\r\n            if (!is_numeric ($string)) {\r\n            /*\r\n                if ($this->isConnected()) {\r\n                    $string = cubrid_real_escape_string($string);\r\n                }\r\n                else {\r\n                    $string = str_replace(\"'\",\"\\'\",$string);\r\n                }\r\n                */\r\n\r\n                $string = str_replace(\"'\",\"''\",$string);\r\n            }\r\n\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin()\r\n        {\r\n            if (!$this->isConnected () || $this->transaction_started) return;\r\n            $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback()\r\n        {\r\n            if (!$this->isConnected () || !$this->transaction_started) return;\r\n            @cubrid_rollback ($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit()\r\n        {\r\n            if (!$force && (!$this->isConnected () ||\r\n              !$this->transaction_started)) return;\r\n\r\n            @cubrid_commit($this->fd);\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query)\r\n        {\r\n            if (!$query || !$this->isConnected ()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart ($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @cubrid_execute ($this->fd, $query);\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if (cubrid_error_code ()) {\r\n                $code = cubrid_error_code ();\r\n                $msg = cubrid_error_msg ();\r\n\r\n                $this->setError ($code, $msg);\r\n            }\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish ();\r\n\r\n            // \uacb0\uacfc \ub9ac\ud134\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result)\r\n        {\r\n            if (!$this->isConnected() || $this->isError() || !$result) return;\r\n\r\n            $col_types = cubrid_column_types ($result);\r\n            $col_names = cubrid_column_names ($result);\r\n            $max = count ($col_types);\r\n\r\n            for ($count = 0; $count < $max; $count++) {\r\n                if (preg_match (\"/^char/\", $col_types[$count]) > 0) {\r\n                    $char_type_fields[] = $col_names[$count];\r\n                }\r\n            }\r\n\r\n            while ($tmp = cubrid_fetch ($result, CUBRID_OBJECT)) {\r\n                if (is_array ($char_type_fields)) {\r\n                    foreach ($char_type_fields as $val) {\r\n                        $tmp->{$val} = rtrim ($tmp->{$val});\r\n                    }\r\n                }\r\n\r\n                $output[] = $tmp;\r\n            }\r\n\r\n            unset ($char_type_fields);\r\n\r\n            if ($result) cubrid_close_request($result);\r\n\r\n            if (count ($output) == 1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence \uac12\uc744 return (cubrid\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence()\r\n        {\r\n            $this->_makeSequence();\r\n\r\n            $query = sprintf (\"select \\\"%ssequence\\\".\\\"nextval\\\" as \\\"seq\\\" from db_root\", $this->prefix);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n\r\n            return $output->seq;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc2dc sequence  \uac00 \uc5c6\uc744 \uacbd\uc6b0 \uc0dd\uc131\r\n         **/\r\n        function _makeSequence()\r\n        {\r\n            if($_GLOBALS['XE_EXISTS_SEQUENCE']) return;\r\n\r\n            // check cubrid serial\r\n            $query = sprintf('select count(*) as \"count\" from \"db_serial\" where name=\\'%ssequence\\'', $this->prefix);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n\r\n            // if do not create serial\r\n            if ($output->count == 0) {\r\n                $query = sprintf('select max(\"a\".\"srl\") as \"srl\" from '.\r\n                                 '( select max(\"document_srl\") as \"srl\" from '.\r\n                                 '\"%sdocuments\" UNION '.\r\n                                 'select max(\"comment_srl\") as \"srl\" from '.\r\n                                 '\"%scomments\" UNION '.\r\n                                 'select max(\"member_srl\") as \"srl\" from '.\r\n                                 '\"%smember\"'.\r\n                                  ') as \"a\"', $this->prefix, $this->prefix, $this->prefix);\r\n\r\n                $result = $this->_query($query);\r\n                $output = $this->_fetch($result);\r\n                $srl = $output->srl;\r\n                if ($srl < 1) {\r\n                    $start = 1;\r\n                }\r\n                else {\r\n                    $start = $srl + 1000000;\r\n                }\r\n\r\n                // create sequence\r\n                $query = sprintf('create serial \"%ssequence\" start with %s increment by 1 minvalue 1 maxvalue 10000000000000000000000000000000000000 nocycle;', $this->prefix, $start);\r\n                $this->_query($query);\r\n            }\r\n\r\n            $_GLOBALS['XE_EXISTS_SEQUENCE'] = true;\r\n        }\r\n\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists ($target_name)\r\n        {\r\n            if($target_name == 'sequence') {\r\n                $query = sprintf (\"select \\\"name\\\" from \\\"db_serial\\\" where \\\"name\\\" = '%s%s'\", $this->prefix, $target_name);\r\n            }\r\n            else {\r\n                $query = sprintf (\"select \\\"class_name\\\" from \\\"db_class\\\" where \\\"class_name\\\" = '%s%s'\", $this->prefix, $target_name);\r\n            }\r\n\r\n            $result = $this->_query ($query);\r\n            if (cubrid_num_rows($result) > 0) {\r\n                $output = true;\r\n            }\r\n            else {\r\n                $output = false;\r\n            }\r\n\r\n            if ($result) cubrid_close_request ($result);\r\n\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type = 'number', $size = '', $default = '', $notnull = false)\r\n        {\r\n            $type = strtoupper($this->column_type[$type]);\r\n            if ($type == 'INTEGER') $size = '';\r\n\r\n            $query = sprintf (\"alter class \\\"%s%s\\\" add \\\"%s\\\" \", $this->prefix, $table_name, $column_name);\r\n\r\n            if ($type == 'char' || $type == 'varchar') {\r\n                if ($size) $size = $size * 3;\r\n            }\r\n\r\n            if ($size) {\r\n                $query .= sprintf (\"%s(%s) \", $type, $size);\r\n            }\r\n            else {\r\n                $query .= sprintf (\"%s \", $type);\r\n            }\r\n\r\n            if ($default) {\r\n                if ($type == 'INTEGER' || $type == 'BIGINT' || $type=='INT') {\r\n                    $query .= sprintf (\"default %d \", $default);\r\n                }\r\n                else {\r\n                    $query .= sprintf (\"default '%s' \", $default);\r\n                }\r\n            }\r\n\r\n            if ($notnull) $query .= \"not null \";\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn ($table_name, $column_name)\r\n        {\r\n            $query = sprintf (\"alter class \\\"%s%s\\\" drop \\\"%s\\\" \", $this->prefix, $table_name, $column_name);\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists ($table_name, $column_name)\r\n        {\r\n            $query = sprintf (\"select \\\"attr_name\\\" from \\\"db_attribute\\\" where \".  \"\\\"attr_name\\\" ='%s' and \\\"class_name\\\" = '%s%s'\", $column_name, $this->prefix, $table_name);\r\n            $result = $this->_query ($query);\r\n\r\n            if (cubrid_num_rows ($result) > 0) $output = true;\r\n            else $output = false;\r\n\r\n            if ($result) cubrid_close_request ($result);\r\n\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex ($table_name, $index_name, $target_columns, $is_unique = false)\r\n        {\r\n            if (!is_array ($target_columns)) {\r\n                $target_columns = array ($target_columns);\r\n            }\r\n\r\n            $query = sprintf (\"create %s index \\\"%s\\\" on \\\"%s%s\\\" (%s);\", $is_unique?'unique':'', $this->prefix .$index_name, $this->prefix, $table_name, '\"'.implode('\",\"',$target_columns).'\"');\r\n\r\n            $this->_query ($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex ($table_name, $index_name, $is_unique = false)\r\n        {\r\n            $query = sprintf (\"drop %s index \\\"%s\\\" on \\\"%s%s\\\"\", $is_unique?'unique':'', $this->prefix .$index_name, $this->prefix, $table_name);\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists ($table_name, $index_name)\r\n        {\r\n            $query = sprintf (\"select \\\"index_name\\\" from \\\"db_index\\\" where \".  \"\\\"class_name\\\" = '%s%s' and \\\"index_name\\\" = '%s' \", $this->prefix, $table_name, $this->prefix .$index_name);\r\n            $result = $this->_query ($query);\r\n\r\n            if ($this->isError ()) return false;\r\n\r\n            $output = $this->_fetch ($result);\r\n\r\n            if (!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml ($xml_doc)\r\n        {\r\n            return $this->_createTable ($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile ($file_name)\r\n        {\r\n            if (!file_exists ($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile ($file_name);\r\n\r\n            return $this->_createTable ($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create class query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, tinytext, text, bigtext, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable ($xml_doc)\r\n        {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n\r\n\t\t\t// if the table already exists exit function\r\n            if ($this->isTableExists($table_name)) return;\r\n\r\n            // \ub9cc\uc57d \ud14c\uc774\ube14 \uc774\ub984\uc774 sequence\ub77c\uba74 serial \uc0dd\uc131\r\n            if ($table_name == 'sequence') {\r\n                $query = sprintf ('create serial \"%s\" start with 1 increment by 1'.\r\n                                  ' minvalue 1 '.\r\n                                  'maxvalue 10000000000000000000000000000000000000'.  ' nocycle;', $this->prefix.$table_name);\r\n\r\n                return $this->_query($query);\r\n            }\r\n\r\n\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            $query = sprintf ('create class \"%s\";', $table_name);\r\n            $this->_query ($query);\r\n\r\n            if (!is_array ($xml_obj->table->column)) {\r\n                $columns[] = $xml_obj->table->column;\r\n            }\r\n            else {\r\n                $columns = $xml_obj->table->column;\r\n            }\r\n\r\n            $query = sprintf (\"alter class \\\"%s\\\" add attribute \", $table_name);\r\n\r\n            foreach ($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n\r\n                switch ($this->column_type[$type]) {\r\n                    case 'integer' :\r\n                        $size = null;\r\n                        break;\r\n                    case 'text' :\r\n                        $size = null;\r\n                        break;\r\n                }\r\n\r\n                if (isset ($default) && ($type == 'varchar' || $type == 'char' ||\r\n                  $type == 'text' || $type == 'tinytext' || $type == 'bigtext')) {\r\n                    $default = sprintf (\"'%s'\", $default);\r\n                }\r\n\r\n                if ($type == 'varchar' || $type == 'char') {\r\n                    if($size) $size = $size * 3;\r\n                }\r\n\r\n\r\n                $column_schema[] = sprintf ('\"%s\" %s%s %s %s',\r\n                                    $name,\r\n                                    $this->column_type[$type],\r\n                                    $size?'('.$size.')':'',\r\n                                    isset($default)?\"default \".$default:'',\r\n                                    $notnull?'not null':'');\r\n\r\n                if ($primary_key) {\r\n                    $primary_list[] = $name;\r\n                }\r\n                else if ($unique) {\r\n                    $unique_list[$unique][] = $name;\r\n                }\r\n                else if ($index) {\r\n                    $index_list[$index][] = $name;\r\n                }\r\n            }\r\n\r\n            $query .= implode (',', $column_schema).';';\r\n            $this->_query ($query);\r\n\r\n            if (count ($primary_list)) {\r\n                $query = sprintf (\"alter class \\\"%s\\\" add attribute constraint \".  \"\\\"pkey_%s\\\" PRIMARY KEY(%s);\", $table_name, $table_name, '\"'.implode('\",\"',$primary_list).'\"');\r\n                $this->_query ($query);\r\n            }\r\n\r\n            if (count ($unique_list)) {\r\n                foreach ($unique_list as $key => $val) {\r\n                    $query = sprintf (\"create unique index \\\"%s\\\" on \\\"%s\\\" \".  \"(%s);\", $this->prefix .$key, $table_name, '\"'.implode('\",\"', $val).'\"');\r\n                    $this->_query ($query);\r\n                }\r\n            }\r\n\r\n            if (count ($index_list)) {\r\n                foreach ($index_list as $key => $val) {\r\n                    $query = sprintf (\"create index \\\"%s\\\" on \\\"%s\\\" (%s);\", $this->prefix .$key, $table_name, '\"'.implode('\",\"',$val).'\"');\r\n                    $this->_query ($query);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition ($output)\r\n        {\r\n            if (!$output->conditions) return;\r\n            $condition = $this->_getCondition ($output->conditions, $output->column_type, $output);\r\n            if ($condition) $condition = ' where '.$condition;\r\n\r\n            return $condition;\r\n        }\r\n\r\n        function _getCondition ($conditions, $column_type, &$output)\r\n        {\r\n            $condition = '';\r\n\r\n            foreach ($conditions as $val) {\r\n                $sub_condition = '';\r\n\r\n                foreach ($val['condition'] as $v) {\r\n                    if (!isset ($v['value'])) continue;\r\n                    if ($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType ($column_type, $name);\r\n                    $pipe = $v['pipe'];\r\n                    $value = $this->getConditionValue ($name, $value, $operation, $type, $column_type);\r\n\r\n                    if (!$value) {\r\n                        $value = $v['value'];\r\n                        if (strpos ($value, '(')) {\r\n                            $valuetmp = $value;\r\n                        }\r\n                        elseif (strpos ($value, \".\") === false) {\r\n                            $valuetmp = $value;\r\n                        }\r\n                        else {\r\n                            $valuetmp = '\"'.str_replace('.', '\".\"', $value).'\"';\r\n                        }\r\n                    }\r\n                    else {\r\n                        $tmp = explode('.',$value);\r\n\r\n                        if (count($tmp)==2) {\r\n                            $table = $tmp[0];\r\n                            $column = $tmp[1];\r\n\r\n                            if ($column_type[$column] && (in_array ($table, $output->tables) ||\r\n                              array_key_exists($table, $output->tables))) {\r\n                                $valuetmp = sprintf('\"%s\".\"%s\"', $table, $column);\r\n                            }\r\n                            else {\r\n                                $valuetmp = $value;\r\n                            }\r\n                        }\r\n                        else {\r\n                            $valuetmp = $value;\r\n                        }\r\n                    }\r\n\r\n                    if (strpos ($name, '(') > 0) {\r\n                        $nametmp = $name;\r\n                    }\r\n                    elseif (strpos ($name, \".\") === false) {\r\n                        $nametmp = '\"'.$name.'\"';\r\n                    }\r\n                    else {\r\n                        $nametmp = '\"'.str_replace('.', '\".\"', $name).'\"';\r\n                    }\r\n                    $str = $this->getConditionPart ($nametmp, $valuetmp, $operation);\r\n                    if ($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .= $str;\r\n                }\r\n\r\n                if ($sub_condition) {\r\n                    if ($condition && $val['pipe']) {\r\n                        $condition .= ' '.$val['pipe'].' ';\r\n                    }\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\"';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac\r\n            foreach ($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                //if ($this->getColumnType ($output->column_type, $name) != 'number')\r\n                if ($output->column_type[$name] != 'number') {\r\n                    if (!is_null($value)) {\r\n                        $value = \"'\" . $this->addQuotes($value) .\"'\";\r\n                    }\r\n                    else {\r\n                        if ($val['notnull']=='notnull') {\r\n                            $value = \"''\";\r\n                        }\r\n                        else {\r\n                            //$value = 'null';\r\n                            $value = \"''\";\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = '\"'.$name.'\"';\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf (\"insert into %s (%s) values (%s);\", implode(',', $table_list), implode(',', $column_list), implode(',', $value_list));\r\n\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) {\r\n                @cubrid_commit ($this->fd);\r\n            }\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $key => $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\" as \"'.$key.'\"';\r\n            }\r\n\r\n            $check_click_count = true;\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac\r\n            foreach ($output->columns as $key => $val) {\r\n                if (!isset ($val['value'])) continue;\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                if (substr ($value, -2) != '+1' || $output->column_type[$name] != 'number') {\r\n                    $check_click_count = false;\r\n                }\r\n\r\n                for ($i = 0; $i < $key; $i++) {\r\n                    /* \ud55c\ubb38\uc7a5\uc5d0 \uac19\uc740 \uc18d\uc131\uc5d0 \ub300\ud55c \uc911\ubcf5 \uc124\uc815\uc740 \ud050\ube0c\ub9ac\ub4dc\uc5d0\uc11c\ub294 \ud5c8\uc6a9\uce58 \uc54a\uc74c */\r\n                    if ($output->columns[$i]['name'] == $name) break;\r\n                }\r\n                if ($i < $key) continue; // \uc911\ubcf5\uc774 \ubc1c\uacac\ub418\uba74 \uc774\ud6c4\uc758 \uc124\uc815\uc740 \ubb34\uc2dc\r\n\r\n                if (strpos ($name, '.') !== false && strpos ($value, '.') !== false) {\r\n                    $column_list[] = $name.' = '.$value;\r\n                }\r\n                else {\r\n                    if ($output->column_type[$name] != 'number') {\r\n                        $check_column = false;\r\n                        $value = \"'\".$this->addQuotes ($value).\"'\";\r\n                    }\r\n\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t\telse $value = (int)$value;\r\n\r\n                    $column_list[] = sprintf (\"\\\"%s\\\" = %s\", $name, $value);\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $check_click_count_condition = false;\r\n            if ($check_click_count) {\r\n                foreach ($output->conditions as $val) {\r\n                    if ($val['pipe'] == 'or') {\r\n                        $check_click_count_condition = false;\r\n                        break;\r\n                    }\r\n\r\n                    foreach ($val['condition'] as $v) {\r\n                        if ($v['operation'] == 'equal') {\r\n                            $check_click_count_condition = true;\r\n                        }\r\n                        else {\r\n                            if ($v['operation'] == 'in' && !strpos ($v['value'], ',')) {\r\n                                $check_click_count_condition = true;\r\n                            }\r\n                            else {\r\n                                $check_click_count_condition = false;\r\n                            }\r\n                        }\r\n\r\n                        if ($v['pipe'] == 'or') {\r\n                            $check_click_count_condition = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ($check_click_count&& $check_click_count_condition && count ($output->tables) == 1 && count ($output->conditions) > 0 && count ($output->groups) == 0 && count ($output->order) == 0) {\r\n                foreach ($output->columns as $v) {\r\n                    $incr_columns[] = 'incr(\"'.$v['name'].'\")';\r\n                }\r\n\r\n                $query = sprintf ('select %s from %s %s', join (',', $incr_columns), implode(',', $table_list), $condition);\r\n            }\r\n            else {\r\n                $query = sprintf (\"update %s set %s %s\", implode (',', $table_list), implode (',', $column_list), $condition);\r\n            }\r\n\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) @cubrid_commit ($this->fd);\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach ($output->tables as $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\"';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $query = sprintf (\"delete from %s %s\", implode (',',$table_list), $condition);\r\n            $result = $this->_query ($query);\r\n            if ($result && !$this->transaction_started) @cubrid_commit ($this->fd);\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct ($output)\r\n        {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array ();\r\n            foreach ($output->tables as $key => $val) {\r\n                $table_list[] = '\"'.$this->prefix.$val.'\" as \"'.$key.'\"';\r\n            }\r\n            $left_join = array ();\r\n            // why???\r\n            $left_tables = (array) $output->left_tables;\r\n\r\n            foreach ($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition ($output->left_conditions[$key], $output->column_type, $output);\r\n                if ($condition) {\r\n                    $left_join[] = $val.' \"'.$this->prefix.$output->_tables[$key].  '\" \"'.$key.'\" on ('.$condition.')';\r\n                }\r\n            }\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n                $output->columns = array(array('name'=>'*'));\r\n            }\r\n\r\n            $column_list = array ();\r\n            foreach ($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n\r\n                $click_count = '%s';\r\n                if ($val['click_count'] && count ($output->conditions) > 0) {\r\n                    $click_count = 'incr(%s)';\r\n                }\r\n\r\n                $alias = $val['alias'] ? sprintf ('\"%s\"', $val['alias']) : null;\r\n                $_alias = $val['alias'];\r\n\r\n                if ($name == '*') {\r\n                    $column_list[] = $name;\r\n                }\r\n                elseif (strpos ($name, '.') === false && strpos ($name, '(') === false) {\r\n                    $name = sprintf ($click_count,$name);\r\n                    if ($alias) {\r\n                        $column_list[$alias] = sprintf('\"%s\" as %s', $name, $alias);\r\n                    }\r\n                    else {\r\n                        $column_list[] = sprintf ('\"%s\"', $name);\r\n                    }\r\n                }\r\n                else {\r\n                    if (strpos ($name, '.') != false) {\r\n                        list ($prefix, $name) = explode('.', $name);\r\n                        if (($now_matchs = preg_match_all (\"/\\(/\", $prefix, $xtmp)) > 0) {\r\n                            if ($now_matchs == 1) {\r\n                                $tmpval = explode (\"(\", $prefix);\r\n                                $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                                $prefix = implode (\"(\", $tmpval);\r\n                                $tmpval = explode (\")\", $name);\r\n                                $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                                $name = implode (\")\", $tmpval);\r\n                            }\r\n                        }\r\n                        else {\r\n                            $prefix = sprintf ('\"%s\"', $prefix);\r\n                            $name = ($name == '*') ? $name : sprintf('\"%s\"',$name);\r\n                        }\r\n                        $xtmp = null;\r\n                        $now_matchs = null;\r\n                        if($alias) $column_list[$_alias] = sprintf ($click_count, sprintf ('%s.%s', $prefix, $name)) .  ($alias ? sprintf (' as %s',$alias) : '');\r\n                        else $column_list[] = sprintf ($click_count, sprintf ('%s.%s', $prefix, $name));\r\n                    }\r\n                    elseif (($now_matchs = preg_match_all (\"/\\(/\", $name, $xtmp)) > 0) {\r\n                        if ($now_matchs == 1 && preg_match (\"/[a-zA-Z0-9]*\\(\\*\\)/\", $name) < 1) {\r\n                            $open_pos = strpos ($name, \"(\");\r\n                            $close_pos = strpos ($name, \")\");\r\n\r\n                            if (preg_match (\"/,/\", $name)) {\r\n                                $tmp_func_name = sprintf ('%s', substr ($name, 0, $open_pos));\r\n                                $tmp_params = sprintf ('%s', substr ($name, $open_pos + 1, $close_pos - $open_pos - 1));\r\n                                $tmpval = null;\r\n                                $tmpval = explode (',', $tmp_params);\r\n\r\n                                foreach ($tmpval as $tmp_param) {\r\n                                    $tmp_param_list[] = (!is_numeric ($tmp_param)) ? sprintf ('\"%s\"', $tmp_param) : $tmp_param;\r\n                                }\r\n\r\n                                $tmpval = implode (',', $tmp_param_list);\r\n                                $name = sprintf ('%s(%s)', $tmp_func_name, $tmpval);\r\n                            }\r\n                            else {\r\n                                $name = sprintf ('%s(\"%s\")', substr ($name, 0, $open_pos), substr ($name, $open_pos + 1, $close_pos - $open_pos - 1));\r\n                            }\r\n                        }\r\n\r\n                        if($alias) $column_list[$_alias] = sprintf ($click_count, $name).  ($alias ? sprintf (' as %s', $alias) : '');\r\n                        else $column_list[] = sprintf ($click_count, $name);\r\n                    }\r\n                    else {\r\n                        if($alias) $column_list[$_alias] = sprintf($click_count, $name).  ($alias ? sprintf(' as %s',$alias) : '');\r\n                        else $column_list[] = sprintf($click_count, $name);\r\n                    }\r\n                }\r\n                $columns = implode (',', $column_list);\r\n            }\r\n\r\n            $condition = $this->getCondition ($output);\r\n\r\n            $output->column_list = $column_list;\r\n            if ($output->list_count && $output->page) {\r\n                return ($this->_getNavigationData($table_list, $columns, $left_join, $condition, $output));\r\n            }\r\n\r\n            if ($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                //if(in_array('list_order', $conditions) || in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if ($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                //}\r\n            }\r\n\r\n\r\n            if (count ($output->groups)) {\r\n                foreach ($output->groups as $key => $value) {\r\n                    if (strpos ($value, '.')) {\r\n                        $tmp = explode ('.', $value);\r\n                        $tmp[0] = sprintf ('\"%s\"', $tmp[0]);\r\n                        $tmp[1] = sprintf ('\"%s\"', $tmp[1]);\r\n                        $value = implode ('.', $tmp);\r\n                    }\r\n                    elseif (strpos ($value, '(')) {\r\n                        $value = $value;\r\n                    }\r\n                    else {\r\n                        $value = sprintf ('\"%s\"', $value);\r\n                    }\r\n                    $output->groups[$key] = $value;\r\n\r\n\r\n                    if(count($output->arg_columns))\r\n                    {\r\n                        if($column_list[$value]) $output->arg_columns[] = $column_list[$value];\r\n                    }\r\n                }\r\n                $groupby_query = sprintf ('group by %s', implode(',', $output->groups));\r\n            }\r\n\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if ($output->list_count['value']) {\r\n                $start_count = 0;\r\n                $list_count = $output->list_count['value'];\r\n\r\n                if ($output->order) {\r\n                  foreach ($output->order as $val) {\r\n                      if (strpos ($val[0], '.')) {\r\n                          $tmpval = explode ('.', $val[0]);\r\n                          $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                          $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                          $val[0] = implode ('.', $tmpval);\r\n                      }\r\n                      elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                      elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                      else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                      $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                  }\r\n                  if (count($index_list))\r\n                      $orderby_query = ' order by '.implode(',', $index_list);\r\n                      $orderby_query = sprintf ('%s for orderby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                }\r\n                else {\r\n                    if (count ($output->groups)) {\r\n                        $orderby_query = sprintf ('%s having groupby_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                    else {\r\n                        if ($condition) {\r\n                            $orderby_query = sprintf ('%s and inst_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                        }\r\n                        else {\r\n                            $orderby_query = sprintf ('%s where inst_num() between %d'.  ' and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if ($output->order) {\r\n                    foreach ($output->order as $val) {\r\n                        if (strpos ($val[0], '.')) {\r\n                            $tmpval = explode ('.', $val[0]);\r\n                            $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                            $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                            $val[0] = implode ('.', $tmpval);\r\n                        }\r\n                        elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                        elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                        else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                        $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\r\n                        if(count($output->arg_columns) && $column_list[$val]) $output->arg_columns[] = $column_list[$key];\r\n                    }\r\n\r\n                    if (count ($index_list)) {\r\n                        $orderby_query = ' order by '.implode(',', $index_list);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if(count($output->arg_columns))\r\n            {\r\n                $columns = array();\r\n                foreach($output->arg_columns as $col){\r\n                    if(strpos($col,'\"')===false && strpos($col,' ')===false) $columns[] = '\"'.$col.'\"';\r\n                    else $columns[] = $col;\r\n                }\r\n\r\n                $columns = join(',',$columns);\r\n            }\r\n\r\n            $query = sprintf (\"select %s from %s %s %s %s\", $columns, implode (',',$table_list), implode (' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n            if ($this->isError ()) return;\r\n            $data = $this->_fetch ($result);\r\n\r\n            $buff = new Object ();\r\n            $buff->data = $data;\r\n\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud604\uc7ac \uc2dc\uc810\uc758 Stack trace\ub97c \ubcf4\uc5ec\uc90c.\uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function backtrace ()\r\n        {\r\n            $output = \"<div style='text-align: left;'>\\n\";\r\n            $output .= \"<b>Backtrace:</b><br />\\n\";\r\n            $backtrace = debug_backtrace ();\r\n\r\n            foreach ($backtrace as $bt) {\r\n                $args = '';\r\n                foreach ($bt['args'] as $a) {\r\n                    if (!empty ($args)) {\r\n                        $args .= ', ';\r\n                    }\r\n                    switch (gettype ($a)) {\r\n                    case 'integer':\r\n                    case 'double':\r\n                        $args .= $a;\r\n                        break;\r\n                    case 'string':\r\n                        $a = htmlspecialchars (substr ($a, 0, 64)).\r\n                            ((strlen ($a) > 64) ? '...' : '');\r\n                        $args .= \"\\\"$a\\\"\";\r\n                        break;\r\n                    case 'array':\r\n                        $args .= 'Array ('. count ($a).')';\r\n                        break;\r\n                    case 'object':\r\n                        $args .= 'Object ('.get_class ($a).')';\r\n                        break;\r\n                    case 'resource':\r\n                        $args .= 'Resource ('.strstr ($a, '#').')';\r\n                        break;\r\n                    case 'boolean':\r\n                        $args .= $a ? 'True' : 'False';\r\n                        break;\r\n                    case 'NULL':\r\n                        $args .= 'Null';\r\n                        break;\r\n                    default:\r\n                        $args .= 'Unknown';\r\n                    }\r\n                }\r\n                $output .= \"<br />\\n\";\r\n                $output .= \"<b>file:</b> \".$bt['line'].\" - \".  $bt['file'].\"<br />\\n\";\r\n                $output .= \"<b>call:</b> \".$bt['class'].  $bt['type'].$bt['function'].$args.\"<br />\\n\";\r\n            }\r\n            $output .= \"</div>\\n\";\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData ($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once (_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n            $column_list = $output->column_list;\r\n\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $count_query = sprintf('select count(*) as \"count\" from %s %s %s', implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n            if (count($output->groups)) {\r\n                $count_query = sprintf('select count(*) as \"count\" from (%s) xet', $count_query);\r\n            }\r\n\r\n            $count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query($count_query);\r\n            $count_output = $this->_fetch($result);\r\n            $total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if (!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if (!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if (!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if ($total_count) {\r\n                $total_page = (int) (($total_count - 1) / $list_count) + 1;\r\n            }\r\n            else {\r\n                $total_page = 1;\r\n            }\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if ($page > $total_page) $page = $total_page;\r\n            $start_count = ($page - 1) * $list_count;\r\n\r\n            if ($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                //if(in_array('list_order', $conditions) || in_array('update_order', $conditions)) {\r\n                    foreach ($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                //}\r\n            }\r\n\r\n\r\n            if (count ($output->groups)) {\r\n                foreach ($output->groups as $key => $value) {\r\n                    if (strpos ($value, '.')) {\r\n                        $tmp = explode ('.', $value);\r\n                        $tmp[0] = sprintf ('\"%s\"', $tmp[0]);\r\n                        $tmp[1] = sprintf ('\"%s\"', $tmp[1]);\r\n                        $value = implode ('.', $tmp);\r\n                    }\r\n                    elseif (strpos ($value, '(')) $value = $value;\r\n                    else $value = sprintf ('\"%s\"', $value);\r\n                    $output->groups[$key] = $value;\r\n                }\r\n\r\n                $groupby_query = sprintf (' group by %s', implode (',', $output->groups));\r\n            }\r\n\r\n            if ($output->order) {\r\n                foreach ($output->order as $val) {\r\n                    if (strpos ($val[0], '.')) {\r\n                        $tmpval = explode ('.', $val[0]);\r\n                        $tmpval[0] = sprintf ('\"%s\"', $tmpval[0]);\r\n                        $tmpval[1] = sprintf ('\"%s\"', $tmpval[1]);\r\n                        $val[0] = implode ('.', $tmpval);\r\n                    }\r\n                    elseif (strpos ($val[0], '(')) $val[0] = $val[0];\r\n                    elseif ($val[0] == 'count') $val[0] = 'count (*)';\r\n                    else $val[0] = sprintf ('\"%s\"', $val[0]);\r\n                    $index_list[] = sprintf ('%s %s', $val[0], $val[1]);\r\n                }\r\n\r\n                if (count ($index_list)) {\r\n                    $orderby_query = ' order by '.implode(',', $index_list);\r\n                }\r\n\r\n                $orderby_query = sprintf ('%s for orderby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n            }\r\n            else {\r\n                if (count($output->groups)) {\r\n                    $orderby_query = sprintf ('%s having groupby_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                }\r\n                else {\r\n                    if ($condition) {\r\n                        $orderby_query = sprintf ('%s and inst_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                    else {\r\n                        $orderby_query = sprintf('%s where inst_num() between %d and %d', $orderby_query, $start_count + 1, $list_count + $start_count);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->arg_columns))\r\n            {\r\n                $columns = array();\r\n                foreach($output->arg_columns as $col){\r\n                    if(strpos($col,'\"')===false) $columns[] = '\"'.$col.'\"';\r\n                    else $columns[] = $col;\r\n                }\r\n\r\n                $columns = join(',',$columns);\r\n            }\r\n\r\n            $query = sprintf (\"select %s from %s %s %s %s\", $columns, implode (',',$table_list), implode (' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf (' '.$this->comment_syntax, $this->query_id):'';\r\n            $result = $this->_query ($query);\r\n\r\n            if ($this->isError ()) {\r\n                $buff = new Object ();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array ();\r\n\r\n                $buff->page_navigation = new PageHandler ($total_count, $total_page, $page, $page_count);\r\n\r\n                return $buff;\r\n            }\r\n\r\n            $virtual_no = $total_count - ($page - 1) * $list_count;\r\n            while ($tmp = cubrid_fetch ($result, CUBRID_OBJECT)) {\r\n                if ($tmp) {\r\n                    foreach ($tmp as $k => $v) {\r\n                        $tmp->{$k} = rtrim($v);\r\n                    }\r\n                }\r\n                $data[$virtual_no--] = $tmp;\r\n            }\r\n\r\n            $buff = new Object ();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler ($total_count, $total_page, $page, $page_count);\r\n\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBCubrid;\r\n?>\r\n", "<?php\r\n\r\n    /**\r\n     * @class DBMSSQL\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief MSSQL driver\ub85c \uc218\uc815 sol (sol@ngleader.com)\r\n     * @version 0.1\r\n     **/\r\n\r\n    class DBMssql extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n\t\tvar $conn\t\t= NULL;\r\n        var $database\t= NULL; ///< database\r\n        var $prefix\t\t= 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $param\t\t= array();\r\n\t\tvar $comment_syntax = '/* %s */';\r\n        \r\n        /**\r\n         * @brief mssql \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'bigint',\r\n            'number' => 'int',\r\n            'varchar' => 'varchar',\r\n            'char' => 'char',\r\n            'text' => 'text',\r\n            'bigtext' => 'text',\r\n            'date' => 'varchar(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBMssql() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBMssql;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if (!extension_loaded(\"sqlsrv\")) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->port = $db_info->db_port;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n\t\t\t\r\n\t\t\tif(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->hostname || !$this->database) return;\r\n\r\n\t\t\t//sqlsrv_configure( 'WarningsReturnAsErrors', 0 );\r\n\t\t\t//sqlsrv_configure( 'LogSeverity', SQLSRV_LOG_SEVERITY_ALL );\r\n\t\t\t//sqlsrv_configure( 'LogSubsystems', SQLSRV_LOG_SYSTEM_ALL );\r\n\r\n\t\t\t$this->conn = sqlsrv_connect( $this->hostname, \r\n\t\t\t\t\t\t\t\t\t\t\tarray( 'Database' => $this->database,'UID'=>$this->userid,'PWD'=>$this->password ));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t// \uc811\uc18d\uccb4\ud06c\r\n\t\t    if($this->conn){\r\n\t\t\t\t$this->is_connected = true;\r\n\t\t\t\t$this->password = md5($this->password);\r\n\t\t\t}else{\r\n\t\t\t\t$this->is_connected = false;\r\n\t\t\t}\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if($this->is_connected == false) return;\r\n\t\t\t\r\n            $this->commit();\r\n\t\t\tsqlsrv_close($this->conn);\r\n\t\t\t$this->conn = null;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            //if(!is_numeric($string)) $string = str_replace(\"'\",\"''\",$string);\r\n\t\t\t\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if($this->is_connected == false || $this->transaction_started) return;\r\n\t\t\tif(sqlsrv_begin_transaction( $this->conn ) === false) return;\r\n\t\t\t\r\n            $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if($this->is_connected == false || !$this->transaction_started) return;\r\n            \r\n\t\t\t$this->transaction_started = false;\r\n            sqlsrv_rollback( $this->conn );\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && ($this->is_connected == false || !$this->transaction_started)) return;\r\n\t\t\t\r\n            $this->transaction_started = false;\t\r\n            sqlsrv_commit( $this->conn );\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n\t\t\tif($this->is_connected == false || !$query) return;\r\n\r\n\t\t\t$_param = array();\r\n\t\t\t\r\n\t\t\tif(count($this->param)){\r\n\t\t\t\tforeach($this->param as $k => $o){\r\n\t\t\t\t\tif($o['type'] == 'number'){\r\n\t\t\t\t\t\t$_param[] = &$o['value'];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t$_param[] = array(&$o['value'], SQLSRV_PARAM_IN, SQLSRV_PHPTYPE_STRING('utf-8'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\t\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\t\t\t\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n\t\t\t$result = false;\r\n\t\t\tif(count($_param)){\r\n\t\t\t\t$result = @sqlsrv_query($this->conn, $query, $_param);\r\n\t\t\t}else{\r\n\t\t\t\t$result = @sqlsrv_query($this->conn, $query);\r\n\t\t\t}\r\n\r\n\t\t\t// \uc624\ub958 \uccb4\ud06c\r\n\t\t\tif(!$result) $this->setError(print_r(sqlsrv_errors(),true));\r\n\t\t\t\t\t\t\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish();\r\n\t\t\t$this->param = array();\r\n\r\n\t\t\treturn $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n\t\t\tif(!$this->isConnected() || $this->isError() || !$result) return;\r\n\t\t\t\r\n\t\t\t$c = sqlsrv_num_fields($result);\r\n\t\t\t$m = null;\r\n\t\t\t$output = array();\r\n\t\t\t\r\n\t\t\twhile(sqlsrv_fetch($result)){\r\n\t\t\t\tif(!$m) $m = sqlsrv_field_metadata($result);\r\n\t\t\t\tunset($row);\r\n\t\t\t\tfor($i=0;$i<$c;$i++){\r\n\t\t\t\t\t$row->{$m[$i]['Name']} = sqlsrv_get_field( $result, $i, SQLSRV_PHPTYPE_STRING( 'utf-8' )); \r\n\t\t\t\t}\r\n\t\t\t\t$output[] = $row;\r\n\t\t\t}\r\n\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (mssql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values (ident_incr('%ssequence'))\", $this->prefix, $this->prefix);\r\n\t\t\t$this->_query($query);\r\n\t\t\t\r\n            $query = sprintf(\"select ident_current('%ssequence')+1 as sequence\", $this->prefix);\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n\r\n\t\t\t\r\n            return $tmp->sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf(\"select name from sysobjects where name = '%s%s' and xtype='U'\", $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\t\t\t\r\n            $tmp = $this->_fetch($result);\r\n\t\t\t\r\n            if(!$tmp) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n\t\t\tif($this->isColumnExists($table_name, $column_name)) return;\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n\t\t\tif(!$this->isColumnExists($table_name, $column_name)) return;\r\n            $query = sprintf(\"alter table %s%s drop %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"select syscolumns.name as name from syscolumns, sysobjects where sysobjects.name = '%s%s' and sysobjects.id = syscolumns.id and syscolumns.name = '%s'\", $this->prefix, $table_name, $column_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $tmp = $this->_fetch($result);\r\n            if(!$tmp->name) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n\t\t\tif($this->isIndexExists($table_name, $index_name)) return;\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $query = sprintf(\"create %s index %s on %s%s (%s)\", $is_unique?'unique':'', $index_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n\t\t\tif(!$this->isIndexExists($table_name, $index_name)) return;\r\n            $query = sprintf(\"drop index %s%s.%s\", $this->prefix, $table_name, $index_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $query = sprintf(\"select sysindexes.name as name from sysindexes, sysobjects where sysobjects.name = '%s%s' and sysobjects.id = sysindexes.id and sysindexes.name = '%s'\", $this->prefix, $table_name, $index_name);\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $tmp = $this->_fetch($result);\r\n\r\n            if(!$tmp->name) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n\r\n            if($table_name == 'sequence') {\r\n                $table_name = $this->prefix.$table_name;\r\n                $query = sprintf('create table %s ( sequence int identity(1,1), seq int )', $table_name);\r\n                return $this->_query($query);\r\n            } else {\r\n                $table_name = $this->prefix.$table_name;\r\n\r\n                if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n                else $columns = $xml_obj->table->column;\r\n\r\n                foreach($columns as $column) {\r\n                    $name = $column->attrs->name;\r\n                    $type = $column->attrs->type;\r\n                    $size = $column->attrs->size;\r\n                    $notnull = $column->attrs->notnull;\r\n                    $primary_key = $column->attrs->primary_key;\r\n                    $index = $column->attrs->index;\r\n                    $unique = $column->attrs->unique;\r\n                    $default = $column->attrs->default;\r\n                    $auto_increment = $column->attrs->auto_increment;\r\n\r\n                    $column_schema[] = sprintf('[%s] %s%s %s %s %s %s',\r\n                    $name,\r\n                    $this->column_type[$type],\r\n                    !in_array($type,array('number','text'))&&$size?'('.$size.')':'',\r\n                    $primary_key?'primary key':'',\r\n                    isset($default)?\"default '\".$default.\"'\":'',\r\n                    $notnull?'not null':'null',\r\n                    $auto_increment?'identity(1,1)':''\r\n                    );\r\n\r\n                    if($unique) $unique_list[$unique][] = $name;\r\n                    else if($index) $index_list[$index][] = $name;\r\n                }\r\n\t\t\t\t\r\n                $schema = sprintf('create table [%s] (xe_seq int identity(1,1),%s%s)', $this->addQuotes($table_name), \"\\n\", implode($column_schema,\",\\n\"));\r\n                $output = $this->_query($schema);\r\n                if(!$output) return false;\r\n\t\t\t\t\r\n                if(count($unique_list)) {\r\n                    foreach($unique_list as $key => $val) {\r\n                        $query = sprintf(\"create unique index %s on %s (%s);\", $key, $table_name, '['.implode('],[',$val).']');\r\n                        $this->_query($query);\r\n                    }\r\n                }\r\n\r\n                if(count($index_list)) {\r\n                    foreach($index_list as $key => $val) {\r\n                        $query = sprintf(\"create index %s on %s (%s);\", $key, $table_name, '['.implode('],[',$val).']');\r\n                        $this->_query($query);\r\n                    }\r\n                }\r\n\t\t\t\treturn true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double'))) continue;\r\n\r\n                    $name = $v['column'];\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$name)) $name = preg_replace('/^substr\\(/i','substring(',$name);\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n\t\t\r\n\t\tfunction getConditionValue($name, $value, $operation, $type, $column_type) {\r\n\t\t\t\r\n\t\t\tif($type == 'number') {\r\n                if(strpos($value,',')===false && strpos($value,'(')===false){\r\n\t\t\t\t\r\n\t\t\t\t\tif(is_integer($value)){\r\n\t\t\t\t\t\t$this->param[] = array('type'=>'number','value'=>(int)$value);\r\n\t\t\t\t\t\treturn '?';\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treturn $value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }\r\n\r\n            if(strpos($name,'.')!==false&&strpos($value,'.')!==false) {\r\n                list($table_name, $column_name) = explode('.',$value);\r\n                if($column_type[$column_name]){\r\n\t\t\t\t\treturn $value;\r\n\t\t\t\t}\r\n            }\r\n\t\r\n            switch($operation) {\r\n                case 'like_prefix' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\r\n\t\t\t\t\t\t\t\r\n                        $value = \"? + '%'\";\r\n                    break;\r\n                case 'like_tail' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\t\t\r\n                        $value = \"'%' + ?\";\r\n                    break;\r\n                case 'like' :\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\r\n                        $value = \"'%' + ? + '%'\";\r\n                    break;\r\n                case 'notin' :\r\n\t\t\t\t\t\tpreg_match_all('/,?\\'([^\\']*)\\'/',$value,$match);\r\n\t\t\t\t\t\t$val = array();\r\n\t\t\t\t\t\tforeach($match[1] as $k => $v){\r\n\t\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>trim($v));\t\t\t\t\r\n\t\t\t\t\t\t\t$val[] ='?';\r\n\t\t\t\t\t\t}\r\n                        $value = join(',',$val);\r\n                    break;\r\n                case 'in' :\r\n                        preg_match_all('/,?\\'([^\\']*)\\'/',$value,$match);\r\n\t\t\t\t\t\t$val = array();\r\n\t\t\t\t\t\tforeach($match[1] as $k => $v){\r\n\t\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>trim($v));\t\t\t\t\r\n\t\t\t\t\t\t\t$val[] ='?';\r\n\t\t\t\t\t\t}\r\n                        $value = join(',',$val);\r\n                    break;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t\t$value = preg_replace('/(^\\'|\\'$){1}/','',$value);\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$column_type[$name],'value'=>$value);\t\t\t\t\r\n\t\t\t\t\t\t$value = '?';\r\n\t\t\t\t\tbreak;\r\n            }\r\n\r\n            return $value;\r\n        }\r\n\t\t\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n\t\t\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\t\t\t\t\r\n                if($output->column_type[$name]!='number') {\r\n                    $value = $this->addQuotes($value);\r\n\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t} elseif(is_numeric($value)){\r\n\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t$value = (int)$value;\r\n\t\t\t\t} elseif(!$value){\r\n\t\t\t\t\t$value = '';\r\n\t\t\t\t}\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\telse $value = (int)$value;\r\n\t\t\t\t\r\n                $column_list[] = '['.$name.']';\r\n\t\t\t\t$value_list[] = '?';\r\n\t\t\t\t\r\n                $this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\t\t\r\n\t\t    // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                if(!isset($val['value'])) continue;\r\n\t\t\t\t\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if(strpos($name,'.')!==false&&strpos($value,'.')!==false){\r\n\t\t\t\t\t$column_list[] = $name.' = '.$value;\r\n\t\t\t\t} else {\r\n                    if($output->column_type[$name]!='number'){\r\n\t\t\t\t\t\t$value = $this->addQuotes($value);\r\n\t\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = ?\",  $name);\r\n                    }elseif(!$value || is_numeric($value)){\r\n\t\t\t\t\t\t$value = (int)$value;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$this->param[] = array('type'=>$output->column_type[$name], 'value'=>$value);\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = ?\",  $name);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(!$value) $value = '';\r\n\t\t\t\t\t\t$column_list[] = sprintf(\"[%s] = %s\",  $name, $value);\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"update %s set %s %s\", implode(',',$table_list), implode(',',$column_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.']';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '['.$this->prefix.$val.'] as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' ['.$this->prefix.$output->_tables[$key].'] as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) {\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\tif(preg_match('/^substr\\(/i',$name)) $name = preg_replace('/^substr\\(/i','substring(',$name);\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') {\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('[%s] as [%s]', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('[%s]',$name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as [%s]', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$columns = implode(',',$column_list);\r\n\r\n            $condition = $this->getCondition($output);\r\n\t\t\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t}\r\n\r\n            if($output->order && !preg_match('/count\\(\\*\\)/i',$columns) ) {\r\n                foreach($output->order as $key => $val) {\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$val[0])) $name = preg_replace('/^substr\\(/i','substring(',$val[0]);\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'[')===false && strpos($col,' ')==false) $columns[] = '['.$col.']'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"%s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('select top %d %s', $output->list_count['value'], $query);\r\n\t\t\telse $query = \"select \".$query;\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\t\t\t\t$count_condition = sprintf('%s group by %s', $condition, implode(', ', $output->groups));\r\n\t\t\t}else{\r\n\t\t\t\t$count_condition = $condition;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n\t\t\tif (count($output->groups)) $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n\t\t\t\r\n\t\t\t$param = $this->param;\r\n\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t\r\n\t\t\t$this->param = $param;\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            $conditions = $this->getConditionList($output);\r\n            if($output->order) {\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\t\t\t\r\n            // group by \uc808 \ucd94\uac00\r\n\t\t\tif(count($output->groups)){\r\n\t\t\t\tforeach($output->groups as $k => $v ){\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$v)) $output->groups[$k] = preg_replace('/^substr\\(/i','substring(',$v);\r\n\t\t\t\t\tif($column_list[$v]) $output->arg_columns[] = $column_list[$v];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$group = sprintf('group by %s', implode(',',$output->groups));\r\n\t\t\t}\r\n\t\t\t\r\n            // order \uc808 \ucd94\uac00\r\n            $order_targets = array();\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n\t\t\t\t\tif(preg_match('/^substr\\(/i',$val[0])) $name = preg_replace('/^substr\\(/i','substring(',$val[0]);\r\n                    $order_targets[$val[0]] = $val[1];\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $order .= 'order by '.implode(',',$index_list);\r\n            }\r\n            if(!count($order_targets)) {\r\n                if(in_array('list_order',$conditions)) $order_targets['list_order'] = 'asc';\r\n                else $order_targets['xe_seq'] = 'desc';\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'[')===false && strpos($col,' ')==false) $columns[] = '['.$col.']'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            if($start_count<1) {\r\n                $query = sprintf('select top %d %s from %s %s %s %s %s', $list_count, $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n\r\n            } else {\r\n                foreach($order_targets as $k => $v) {\r\n\t\t\t\t\t$first_columns[] = sprintf('%s(%s) as %s', $v=='asc'?'max':'min', $k, $k);\r\n\t\t\t\t\t$first_sub_columns[] = $k;\r\n                }\r\n\t\t\t\t\r\n\t\t\t\t// 1\ucc28\ub85c order \ub300\uc0c1\uc5d0 \ud574\ub2f9 \ud558\ub294 \uac12\uc744 \uac00\uc838\uc634\r\n\t\t\t\t$param = $this->param;\r\n\t\t\t\t$first_query = sprintf(\"select %s from (select top %d %s from %s %s %s %s %s) xet\", implode(',',$first_columns),  $start_count, implode(',',$first_sub_columns), implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n\t\t\t\t$result = $this->_query($first_query);\r\n\t\t\t\t$this->param = $param;\r\n\t\t\t\t$tmp = $this->_fetch($result);\r\n\t\t\t\t\r\n\r\n\t\t\t\t\r\n\t\t\t\t// 1\ucc28\uc5d0\uc11c \ub098\uc628 \uac12\uc744 \uc774\uc6a9 \ub2e4\uc2dc \ucffc\ub9ac \uc2e4\ud589\r\n\t\t\t\t$sub_cond = array();\r\n                foreach($order_targets as $k => $v) {\r\n                    $sub_cond[] = sprintf(\"%s %s '%s'\", $k, $v=='asc'?'>':'<', $tmp->{$k});\r\n\t\t\t\t}\r\n\t\t\t\t$sub_condition = ' and( '.implode(' and ',$sub_cond).' )';\r\n\t\t\t\t\r\n\t\t\t\tif($condition) $condition .= $sub_condition;\r\n\t\t\t\telse $condition  = ' where '.$sub_condition;\r\n\t\t\t\t$query = sprintf('select top %d %s from %s %s %s %s %s', $list_count, $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $group, $order);\r\n            }\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n\t\t\t\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n\t\t\t$virtual_no = $total_count - ($page-1)*$list_count;\r\n\t\t\t\r\n\t\t\t$output = $this->_fetch($result);\r\n\t\t\tif(!is_array($output)) $output = array($output);\r\n\r\n            foreach($output as $k => $v) {\r\n                $data[$virtual_no--] = $v;\r\n            }\r\n\t\t\t\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n\r\n    }\r\n\r\nreturn new DBMssql;\r\n?>\r\n", "<?php\r\n    /**\r\n     * @class DBMysql\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief MySQL DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1\r\n     *\r\n     * mysql handling class\r\n     **/\r\n\r\n    class DBMysql extends DB {\r\n\r\n        /**\r\n         * @brief Mysql DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $hostname = '127.0.0.1'; ///< hostname\r\n        var $userid   = NULL; ///< user id\r\n        var $password   = NULL; ///< password\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief mysql\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'bigint',\r\n            'number' => 'bigint',\r\n            'varchar' => 'varchar',\r\n            'char' => 'char',\r\n            'text' => 'text',\r\n            'bigtext' => 'longtext',\r\n            'date' => 'varchar(14)',\r\n            'float' => 'float',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBMysql() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\tfunction create() {\r\n\t\t\treturn new DBMysql;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if(!function_exists('mysql_connect')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->hostname = $db_info->db_hostname;\r\n            $this->port = $db_info->db_port;\r\n            $this->userid   = $db_info->db_userid;\r\n            $this->password   = $db_info->db_password;\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->hostname || !$this->userid || !$this->password || !$this->database) return;\r\n\r\n            if(strpos($this->hostname, ':')===false && $this->port) $this->hostname .= ':'.$this->port;\r\n\r\n            // \uc811\uc18d\uc2dc\ub3c4  \r\n            $this->fd = @mysql_connect($this->hostname, $this->userid, $this->password);\r\n            if(mysql_error()) {\r\n                $this->setError(mysql_errno(), mysql_error());\r\n                return;\r\n            }\r\n\r\n            // \ubc84\uc804 \ud655\uc778\ud6c4 4.1 \uc774\ud558\uba74 \uc624\ub958 \ud45c\uc2dc\r\n            if(mysql_get_server_info($this->fd)<\"4.1\") {\r\n                $this->setError(-1, \"XE cannot be installed under the version of mysql 4.1. Current mysql version is \".mysql_get_server_info());\r\n                return;\r\n            }\r\n\r\n            // db \uc120\ud0dd\r\n            @mysql_select_db($this->database, $this->fd);\r\n            if(mysql_error()) {\r\n                $this->setError(mysql_errno(), mysql_error());\r\n                return;\r\n            }\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n\r\n            // mysql\uc758 \uacbd\uc6b0 utf8\uc784\uc744 \uc9c0\uc815\r\n            $this->_query(\"set names 'utf8'\");\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->isConnected()) return;\r\n            @mysql_close($this->fd);\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = @mysql_escape_string($string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit() {\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n            if(!$this->isConnected()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @mysql_query($query, $this->fd);\r\n\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if(mysql_error($this->fd)) $this->setError(mysql_errno($this->fd), mysql_error($this->fd));\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\r\n            $this->actFinish();\r\n\r\n            // \uacb0\uacfc \ub9ac\ud134\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n            if(!$this->isConnected() || $this->isError() || !$result) return;\r\n            while($tmp = $this->db_fetch_object($result)) {\r\n                $output[] = $tmp;\r\n            }\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (mysql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into `%ssequence` (seq) values ('0')\", $this->prefix);\r\n            $this->_query($query);\r\n            $sequence = $this->db_insert_id();\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  `%ssequence` where seq < %d\", $this->prefix, $sequence);\r\n              $this->_query($query);\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief mysql old password\ub97c \uac00\uc838\uc624\ub294 \ud568\uc218 (mysql\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\r\n         **/\r\n        function isValidOldPassword($password, $saved_password) {\r\n            $query = sprintf(\"select password('%s') as password, old_password('%s') as old_password\", $this->addQuotes($password), $this->addQuotes($password));\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n            if($tmp->password == $saved_password || $tmp->old_password == $saved_password) return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf(\"show tables like '%s%s'\", $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\r\n            $tmp = $this->_fetch($result);\r\n            if(!$tmp) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table `%s%s` add `%s` \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table `%s%s` drop `%s` \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"show fields from `%s%s`\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $output = $this->_fetch($result);\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->Field);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $query = sprintf(\"alter table `%s%s` add %s index `%s` (%s);\", $this->prefix, $table_name, $is_unique?'unique':'', $index_name, implode(',',$target_columns));\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $query = sprintf(\"alter table `%s%s` drop index `%s`\", $this->prefix, $table_name, $index_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            //$query = sprintf(\"show indexes from %s%s where key_name = '%s' \", $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"show indexes from `%s%s`\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            $output = $this->_fetch($result);\r\n            if(!$output) return;\r\n            if(!is_array($output)) $output = array($output);\r\n\r\n            for($i=0;$i<count($output);$i++) {\r\n                if($output[$i]->Key_name == $index_name) return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                $column_schema[] = sprintf('`%s` %s%s %s %s %s',\r\n                    $name,\r\n                    $this->column_type[$type],\r\n                    $size?'('.$size.')':'',\r\n                    isset($default)?\"default '\".$default.\"'\":'',\r\n                    $notnull?'not null':'',\r\n                    $auto_increment?'auto_increment':''\r\n                );\r\n\r\n                if($primary_key) $primary_list[] = $name;\r\n                else if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            if(count($primary_list)) {\r\n                $column_schema[] = sprintf(\"primary key (%s)\", '`'.implode($primary_list,'`,`').'`');\r\n            }\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $column_schema[] = sprintf(\"unique %s (%s)\", $key, '`'.implode($val,'`,`').'`');\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $column_schema[] = sprintf(\"index %s (%s)\", $key, '`'.implode($val,'`,`').'`');\r\n                }\r\n            }\r\n\r\n            $schema = sprintf('create table `%s` (%s%s) %s;', $this->addQuotes($table_name), \"\\n\", implode($column_schema,\",\\n\"), \"ENGINE = MYISAM  CHARACTER SET utf8 COLLATE utf8_general_ci\");\r\n\r\n            $output = $this->_query($schema);\r\n            if(!$output) return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'`';\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                if($output->column_type[$name]!='number') {\r\n\r\n\t\t\t\t\tif(!is_null($value)){\r\n\t\t\t\t\t\t$value = \"'\" . $this->addQuotes($value) .\"'\";\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif($val['notnull']=='notnull') {\r\n\t\t\t\t\t\t\t$value = \"''\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//$value = 'null';\r\n\t\t\t\t\t\t\t$value = \"''\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t//elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = '`'.$name.'`';\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'` as '.$key;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                if(!isset($val['value'])) continue;\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                else {\r\n                    if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n                \telse $value = (int)$value;\r\n\r\n                    $column_list[] = sprintf(\"`%s` = %s\", $name, $value);\r\n                }\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"update %s set %s %s\", implode(',',$table_list), implode(',',$column_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'`';\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = '`'.$this->prefix.$val.'` as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' `'.$this->prefix.$output->_tables[$key].'` as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\t\t\t\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) \r\n\t\t\t{\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') \r\n\t\t\t\t{\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} \r\n\t\t\t\telse if(strpos($name,'.')===false && strpos($name,'(')===false) \r\n\t\t\t\t{\r\n\t\t\t\t\tif($alias)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$col = sprintf('`%s` as `%s`', $name, $alias);\r\n\t\t\t\t\t\t$column_list[$alias] = $col;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$column_list[] = sprintf('`%s`',$name);\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\tif($alias)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$col = sprintf('%s as `%s`', $name, $alias);\r\n\t\t\t\t\t\t$column_list[$alias] = $col;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$column_list[] = sprintf('%s',$name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$columns = implode(',',$column_list);\r\n\t\t\t$output->column_list = $column_list;\r\n            $condition = $this->getCondition($output);\r\n\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if(count($output->groups))\r\n\t\t\t{\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'`')===false && strpos($col,' ')==false) $columns[] = '`'.$col.'`'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n            if(count($click_count) && count($output->conditions)){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n\t\t\t$count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n\t\t\t$count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n\t\t\tif (count($output->groups)) $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if(count($output->order)) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = array();\r\n\t\t\t\tforeach($output->arg_columns as $col){\r\n\t\t\t\t\tif(strpos($col,'`')===false && strpos($col,' ')==false) $columns[] = '`'.$col.'`'; \r\n\t\t\t\t\telse $columns[] = $col;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$columns = join(',',$columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list), implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n            $virtual_no = $total_count - ($page-1)*$list_count;\r\n\t\t\t$data = array();\r\n            while($tmp = $this->db_fetch_object($result)) {\r\n                $data[$virtual_no--] = $tmp;\r\n            }\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n\r\n\t\tfunction db_insert_id()\r\n\t\t{\r\n            return mysql_insert_id($this->fd);\r\n\t\t}\r\n\r\n\t\tfunction db_fetch_object(&$result)\r\n\t\t{\r\n\t\t\treturn mysql_fetch_object($result);\r\n\t\t}\r\n    }\r\n\r\nreturn new DBMysql;\r\n?>\r\n", "<?php\n/**\n * @class DBPostgreSQL\n * @author ioseph (ioseph@postgresql.kr) updated by yoonjong.joh@gmail.com\n * @brief MySQL DBMS\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\n * @version 0.2\n *\n * postgresql handling class\n * 2009.02.10  update \uc640 delete query\ub97c \uc2e4\ud589\ud560\ub54c table \uc774\ub984\uc5d0 alias \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uc5c6\uc570. \uc9c0\uc6d0 \uc548\ud568\n *             order by clause\ub97c \uc2e4\ud589\ud560\ub54c \ud568\uc218\ub97c \uc2e4\ud589 \ud558\ub294 \ubd80\ubd84\uc744 column alias\ub85c \ub300\uccb4.\n * 2009.02.11  dropColumn() function\uc774 \ucd94\uac00  \n * 2009.02.13  addColumn() \ud568\uc218 \ubcc0\uacbd\n **/\n\nclass DBPostgresql extends DB\n{\n\n    /**\n     * @brief PostgreSQL DB\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc815\ubcf4\n     **/\n    var $hostname = '127.0.0.1'; ///< hostname\n    var $userid = null; ///< user id\n    var $password = null; ///< password\n    var $database = null; ///< database\n    var $prefix = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE\uc124\uce58 \uac00\ub2a5)\n\tvar $comment_syntax = '/* %s */';\n\n    /**\n     * @brief postgresql\uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\n     *\n     * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\n     * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\n     **/\n    var $column_type = array(\n        'bignumber' => 'bigint', \n        'number' => 'integer',\n        'varchar' => 'varchar', \n        'char' => 'char', \n        'text' => 'text', \n        'bigtext' => 'text',\n        'date' => 'varchar(14)', \n        'float' => 'real',\n    );\n\n    /**\n     * @brief constructor\n     **/\n    function DBPostgresql()\n    {\n        $this->_setDBInfo();\n        $this->_connect();\n    }\n\t\n\t/**\n\t * @brief create an instance of this class\n\t */\n\tfunction create()\n\t{\n\t\treturn new DBPostgresql;\n\t}\n\n    /**\n     * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\n     **/\n    function isSupported()\n    {\n        if (!function_exists('pg_connect'))\n            return false;\n        return true;\n    }\n\n    /**\n     * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\n     **/\n    function _setDBInfo()\n    {\n        $db_info = Context::getDBInfo();\n        $this->hostname = $db_info->db_hostname;\n        $this->port = $db_info->db_port;\n        $this->userid = $db_info->db_userid;\n        $this->password = $db_info->db_password;\n        $this->database = $db_info->db_database;\n        $this->prefix = $db_info->db_table_prefix;\n        if (!substr($this->prefix, -1) != '_')\n            $this->prefix .= '_';\n    }\n\n    /**\n     * @brief DB \uc811\uc18d\n     **/\n    function _connect()\n    {\n        // pg\uc6a9 connection string\n        $conn_string = \"\";\n\n        // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\n        if (!$this->hostname || !$this->userid || !$this->database)\n            return;\n\n        // connection string \ub9cc\ub4e4\uae30\n        $conn_string .= ($this->hostname) ? \" host=$this->hostname\" : \"\";\n        $conn_string .= ($this->userid) ? \" user=$this->userid\" : \"\";\n        $conn_string .= ($this->password) ? \" password=$this->password\" : \"\";\n        $conn_string .= ($this->database) ? \" dbname=$this->database\" : \"\";\n        $conn_string .= ($this->port) ? \" port=$this->port\" : \"\";\n\n        // \uc811\uc18d\uc2dc\ub3c4\n        $this->fd = @pg_connect($conn_string);\n        if (!$this->fd || pg_connection_status($this->fd) != PGSQL_CONNECTION_OK) {\n            $this->setError(-1, \"CONNECTION FAILURE\");\n            return;\n        }\n\n        // \uc811\uc18d\uccb4\ud06c\n        $this->is_connected = true;\n\t\t$this->password = md5($this->password);\n        // utf8\uc784\uc744 \uc9c0\uc815\n        //$this ->_query('set client_encoding to uhc');\n    }\n\n    /**\n     * @brief DB\uc811\uc18d \ud574\uc81c\n     **/\n    function close()\n    {\n        if (!$this->isConnected())\n            return;\n        @pg_close($this->fd);\n    }\n\n    /**\n     * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\n     **/\n    function addQuotes($string)\n    {\n        if (version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc())\n            $string = stripslashes(str_replace(\"\\\\\", \"\\\\\\\\\", $string));\n        if (!is_numeric($string))\n            $string = @pg_escape_string($string);\n        return $string;\n    }\n\n    /**\n     * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\n     **/\n    function begin()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'BEGIN'))\n            $this->transaction_started = true;\n    }\n\n    /**\n     * @brief \ub864\ubc31\n     **/\n    function rollback()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'ROLLBACK'))\n            $this->transaction_started = false;\n    }\n\n    /**\n     * @brief \ucee4\ubc0b\n     **/\n    function commit()\n    {\n        if (!$this->isConnected() || $this->transaction_started == false)\n            return;\n        if ($this->_query($this->fd, 'COMMIT'))\n            $this->transaction_started = false;\n    }\n\n    /**\n     * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\n     *\n     * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\n     * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\n     *         rows\uc774\uba74 array object\\n\n     *         row\uc774\uba74 object\\n\n     *         return\\n\n     **/\n    function _query($query)\n    {\n        if (!$this->isConnected())\n            return;\n\n        /*\n        $l_query_array = explode(\" \", $query);\n        if ($l_query_array[0] = \"update\")\n        {\n        if (strtolower($l_query_array[2]) == \"as\")\n        {\n        $l_query_array[2] = \"\";\n        $l_query_array[3] = \"\";\n        $query = implode(\" \",$l_query_array);\n        }\n        }\n        else if ($l_query_array[0] = \"delete\") \n        {\n        if (strtolower($l_query_array[3]) == \"as\")\n        {\n        $l_query_array[3] = \"\";\n        $l_query_array[4] = \"\";            \n        $query = implode(\" \",$l_query_array);\n        }\n        }\n        */\n\n        // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\n        $this->actStart($query);\n        $arr = array('Hello', 'World!', 'Beautiful', 'Day!');\n\n\n        // \ucffc\ub9ac \ubb38 \uc2e4\ud589\n        $result = @pg_query($this->fd, $query);\n\n        // \uc624\ub958 \uccb4\ud06c\n        if (!$result) {\n            //              var_dump($l_query_array);\n            //var_dump($query);\n            //die(\"\\nin query statement\\n\");\n            //var_dump(debug_backtrace());\n            $this->setError(1, pg_last_error($this->fd));\n        }\n\n        // \ucffc\ub9ac \uc2e4\ud589 \uc885\ub8cc\ub97c \uc54c\ub9bc\n        $this->actFinish();\n\n        // \uacb0\uacfc \ub9ac\ud134\n        return $result;\n    }\n\n    /**\n     * @brief \uacb0\uacfc\ub97c fetch\n     **/\n    function _fetch($result)\n    {\n        if (!$this->isConnected() || $this->isError() || !$result)\n            return;\n        while ($tmp = pg_fetch_object($result)) {\n            $output[] = $tmp;\n        }\n        if (count($output) == 1)\n            return $output[0];\n        return $output;\n    }\n\n    /**\n     * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return (postgresql\uc758 auto_increment\ub294 sequence\ud14c\uc774\ube14\uc5d0\uc11c\ub9cc \uc0ac\uc6a9)\n     **/\n    function getNextSequence()\n    {\n        $query = sprintf(\"select nextval('%ssequence') as seq\", $this->prefix);\n        $result = $this->_query($query);\n        $tmp = $this->_fetch($result);\n        return $tmp->seq;\n    }\n\n    /**\n     * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\n     **/\n    function isTableExists($target_name)\n    {\n        if ($target_name == \"sequence\")\n            return true;\n        $query = sprintf(\"SELECT tablename FROM pg_tables WHERE tablename = '%s%s' AND schemaname = current_schema()\",\n            $this->prefix, $this->addQuotes($target_name));\n\n        $result = $this->_query($query);\n        $tmp = $this->_fetch($result);\n        if (!$tmp)\n            return false;\n        return true;\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\n     **/\n    function addColumn($table_name, $column_name, $type = 'number', $size = '', $default =\n        NULL, $notnull = false)\n    {\n        $type = $this->column_type[$type];\n        if (strtoupper($type) == 'INTEGER' || strtoupper($type) == 'BIGINT')\n            $size = '';\n\n        $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\n\n        if ($size)\n            $query .= sprintf(\" %s(%s) \", $type, $size);\n        else\n            $query .= sprintf(\" %s \", $type);\n\n        $this->_query($query);\n\n        if (isset($default)) {\n            $query = sprintf(\"alter table %s%s alter %s  set default '%s' \", $this->prefix, $table_name, $column_name, $default);\n            $this->_query($query);\n        }\n        if ($notnull) {\n            $query = sprintf(\"update %s%s set %s  = %s \", $this->prefix, $table_name, $column_name, $default);\n            $this->_query($query);              \n            $query = sprintf(\"alter table %s%s alter %s  set not null \", $this->prefix, $table_name, $column_name);\n            $this->_query($query);\n        }\n    }\n\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\n     **/\n    function isColumnExists($table_name, $column_name)\n    {\n        $query = sprintf(\"SELECT attname FROM pg_attribute WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = '%s%s') AND attname = '%s'\",\n            $this->prefix, strtolower($table_name), strtolower($column_name));\n\n        // $query = sprintf(\"select column_name from information_schema.columns where table_schema = current_schema() and table_name = '%s%s' and column_name = '%s'\", $this->prefix, $this->addQuotes($table_name), strtolower($column_name));\n        $result = $this->_query($query);\n        if ($this->isError()) {\n            return;\n        }\n        $output = $this->_fetch($result);\n        if ($output) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\n     * $target_columns = array(col1, col2)\n     * $is_unique? unique : none\n     **/\n    function addIndex($table_name, $index_name, $target_columns, $is_unique = false)\n    {\n        if (!is_array($target_columns))\n            $target_columns = array($target_columns);\n\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        $query = sprintf(\"create %s index %s on %s (%s);\", $is_unique ? 'unique' : '', $index_name,\n            $table_name, implode(',', $target_columns));\n        $this->_query($query);\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\n     **/\n    function dropColumn($table_name, $column_name)\n    {\n        $query = sprintf(\"alter table %s%s drop %s \", $this->prefix, $table_name, $column_name);\n        $this->_query($query);\n    }\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\n     **/\n    function dropIndex($table_name, $index_name, $is_unique = false)\n    {\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        $query = sprintf(\"drop index %s\", $index_name);\n        $this->_query($query);\n    }\n\n\n    /**\n     * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\n     **/\n    function isIndexExists($table_name, $index_name)\n    {\n        if (strpos($table_name, $this->prefix) === false)\n            $table_name = $this->prefix . $table_name;\n\n        // index_name\uc758 \uacbd\uc6b0 \uc55e\uc5d0 table\uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc11c \uc911\ubcf5\uc744 \ud53c\ud568\n        $index_name = $table_name . $index_name;\n\n        //$query = sprintf(\"show indexes from %s%s where key_name = '%s' \", $this->prefix, $table_name, $index_name);\n        $query = sprintf(\"select indexname from pg_indexes where schemaname = current_schema() and tablename = '%s' and indexname = '%s'\",\n            $table_name, strtolower($index_name));\n        $result = $this->_query($query);\n        if ($this->isError())\n            return;\n        $output = $this->_fetch($result);\n\n        if ($output) {\n            return true;\n        }\n        //                var_dump($query);\n        //                die(\" no index\");\n        return false;\n    }\n\n    /**\n     * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\n     **/\n    function createTableByXml($xml_doc)\n    {\n        return $this->_createTable($xml_doc);\n    }\n\n    /**\n     * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\n     **/\n    function createTableByXmlFile($file_name)\n    {\n        if (!file_exists($file_name))\n            return;\n        // xml \ud30c\uc77c\uc744 \uc77d\uc74c\n        $buff = FileHandler::readFile($file_name);\n        return $this->_createTable($buff);\n    }\n\n    /**\n     * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\n     *\n     * type : number, varchar, text, char, date, \\n\n     * opt : notnull, default, size\\n\n     * index : primary key, index, unique\\n\n     **/\n    function _createTable($xml_doc)\n    {\n        // xml parsing\n        $oXml = new XmlParser();\n        $xml_obj = $oXml->parse($xml_doc);\n\n        // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\n        $table_name = $xml_obj->table->attrs->name;\n\n        if ($table_name == 'sequence') {\n            $query = sprintf('create sequence %s', $this->prefix . $table_name);\n            return $this->_query($query);\n        }\n\n        if ($this->isTableExists($table_name))\n            return;\n        $table_name = $this->prefix . $table_name;\n\n        if (!is_array($xml_obj->table->column))\n            $columns[] = $xml_obj->table->column;\n        else\n            $columns = $xml_obj->table->column;\n\n        foreach ($columns as $column) {\n            $name = $column->attrs->name;\n            $type = $column->attrs->type;\n            $size = $column->attrs->size;\n            $notnull = $column->attrs->notnull;\n            $primary_key = $column->attrs->primary_key;\n            $index = $column->attrs->index;\n            $unique = $column->attrs->unique;\n            $default = $column->attrs->default;\n            $auto_increment = $column->attrs->auto_increment;\n\n            if ($type == \"bignumber\" || $type == \"number\")\n                $size = 0;\n\n            $column_schema[] = sprintf('%s %s%s %s %s', $name, $this->column_type[$type], $size ?\n                '(' . $size . ')' : '', isset($default) ? \"default '\" . $default . \"'\" : '', $notnull ?\n                'not null' : '');\n\n            if ($primary_key)\n                $primary_list[] = $name;\n            else\n                if ($unique)\n                    $unique_list[$unique][] = $name;\n                else\n                    if ($index)\n                        $index_list[$index][] = $name;\n        }\n\n        if (count($primary_list)) {\n            $column_schema[] = sprintf(\"primary key (%s)\", implode($primary_list, ','));\n        }\n\n        if (count($unique_list)) {\n            foreach ($unique_list as $key => $val) {\n                $column_schema[] = sprintf(\"unique (%s)\", implode($val, ','));\n            }\n        }\n\n\n        $schema = sprintf('create table %s (%s%s);', $this->addQuotes($table_name), \"\\n\",\n            implode($column_schema, \",\\n\"));\n\n        $output = $this->_query($schema);\n\n        if (count($index_list)) {\n            foreach ($index_list as $key => $val) {\n                if (!$this->isIndexExists($table_name, $key))\n                    $this->addIndex($table_name, $key, $val);\n            }\n        }\n\n        if (!$output)\n            return false;\n\n    }\n\n    /**\n     * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\n     **/\n    function getCondition($output)\n    {\n        if (!$output->conditions)\n            return;\n        $condition = $this->_getCondition($output->conditions, $output->column_type);\n        if ($condition)\n            $condition = ' where ' . $condition;\n        return $condition;\n    }\n\n    function getLeftCondition($conditions, $column_type)\n    {\n        return $this->_getCondition($conditions, $column_type);\n    }\n\n\n    function _getCondition($conditions, $column_type)\n    {\n        $condition = '';\n        foreach ($conditions as $val) {\n            $sub_condition = '';\n            foreach ($val['condition'] as $v) {\n                if (!isset($v['value']))\n                    continue;\n                if ($v['value'] === '')\n                    continue;\n                if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\n                    continue;\n\n                $name = $v['column'];\n                $operation = $v['operation'];\n                $value = $v['value'];\n                $type = $this->getColumnType($column_type, $name);\n                $pipe = $v['pipe'];\n\n                $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\n                if (!$value)\n                    $value = $v['value'];\n                $str = $this->getConditionPart($name, $value, $operation);\n                if ($sub_condition)\n                    $sub_condition .= ' ' . $pipe . ' ';\n                $sub_condition .= $str;\n            }\n            if ($sub_condition) {\n                if ($condition && $val['pipe'])\n                    $condition .= ' ' . $val['pipe'] . ' ';\n                $condition .= '(' . $sub_condition . ')';\n            }\n        }\n        return $condition;\n    }\n\n\n    /**\n     * @brief insertAct \ucc98\ub9ac\n     **/\n    function _executeInsertAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uceec\ub7fc \uc815\ub9ac\n        foreach ($output->columns as $key => $val) {\n            $name = $val['name'];\n            $value = $val['value'];\n            if ($output->column_type[$name] != 'number') {\n                $value = \"'\" . $this->addQuotes($value) . \"'\";\n                if (!$value)\n                    $value = 'null';\n            }\n\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\n\t\t\t// elseif (!$value || is_numeric($value)) $value = (int)$value;\n\t\t\telse $value = (int)$value;\n\n            $column_list[] = $name;\n            $value_list[] = $value;\n        }\n\n        $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',', $table_list),\n            implode(',', $column_list), implode(',', $value_list));\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief updateAct \ucc98\ub9ac\n     **/\n    function _executeUpdateAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            //$table_list[] = $this->prefix.$val.' as '.$key;\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uceec\ub7fc \uc815\ub9ac\n        foreach ($output->columns as $key => $val) {\n            if (!isset($val['value']))\n                continue;\n            $name = $val['name'];\n            $value = $val['value'];\n            if (strpos($name, '.') !== false && strpos($value, '.') !== false)\n                $column_list[] = $name . ' = ' . $value;\n            else {\n                if ($output->column_type[$name] != 'number')\n                    $value = \"'\" . $this->addQuotes($value) . \"'\";\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\n\t\t\t\telse $value = (int)$value;\n\n                $column_list[] = sprintf(\"%s = %s\", $name, $value);\n            }\n        }\n\n        // \uc870\uac74\uc808 \uc815\ub9ac\n        $condition = $this->getCondition($output);\n\n        $query = sprintf(\"update %s set %s %s\", implode(',', $table_list), implode(',',\n            $column_list), $condition);\n\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief deleteAct \ucc98\ub9ac\n     **/\n    function _executeDeleteAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val;\n        }\n\n        // \uc870\uac74\uc808 \uc815\ub9ac\n        $condition = $this->getCondition($output);\n\n        $query = sprintf(\"delete from %s %s\", implode(',', $table_list), $condition);\n\n        return $this->_query($query);\n    }\n\n    /**\n     * @brief selectAct \ucc98\ub9ac\n     *\n     * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\n     * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\n     **/\n    function _executeSelectAct($output)\n    {\n        // \ud14c\uc774\ube14 \uc815\ub9ac\n        $table_list = array();\n        foreach ($output->tables as $key => $val) {\n            $table_list[] = $this->prefix . $val . ' as ' . $key;\n        }\n\n        $left_join = array();\n        // why???\n        $left_tables = (array )$output->left_tables;\n\n        foreach ($left_tables as $key => $val) {\n            $condition = $this->_getCondition($output->left_conditions[$key], $output->\n                column_type);\n            if ($condition) {\n                $left_join[] = $val . ' ' . $this->prefix . $output->_tables[$key] . ' as ' . $key .\n                    ' on (' . $condition . ')';\n            }\n        }\n\n\t\t$click_count = array();\n\t\tif(!$output->columns){\n\t\t\t$output->columns = array(array('name'=>'*'));\n\t\t}\n\n\t\t$column_list = array();\n\t\tforeach ($output->columns as $key => $val) {\n\t\t\t$name = $val['name'];\n\t\t\t$alias = $val['alias'];\n\t\t\tif($val['click_count']) $click_count[] = $val['name'];\n\n\t\t\tif (substr($name, -1) == '*') {\n\t\t\t\t$column_list[] = $name;\n\t\t\t} elseif (strpos($name, '.') === false && strpos($name, '(') === false) {\n\t\t\t\tif ($alias)\n\t\t\t\t\t$column_list[$alias] = sprintf('%s as %s', $name, $alias);\n\t\t\t\telse\n\t\t\t\t\t$column_list[] = sprintf('%s', $name);\n\t\t\t} else {\n\t\t\t\tif ($alias)\n\t\t\t\t\t$column_list[$alias] = sprintf('%s as %s', $name, $alias);\n\t\t\t\telse\n\t\t\t\t\t$column_list[] = sprintf('%s', $name);\n\t\t\t}\n\t\t}\n\t\t$columns = implode(',', $column_list);\n\n        $condition = $this->getCondition($output);\n\n\t\t$output->column_list = $column_list;\n        if ($output->list_count && $output->page)\n            return $this->_getNavigationData($table_list, $columns, $left_join, $condition,\n                $output);\n\n        // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\n        if ($output->order) {\n            $conditions = $this->getConditionList($output);\n            if (!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\n                foreach ($output->order as $key => $val) {\n                    $col = $val[0];\n                    if (!in_array($col, array('list_order', 'update_order')))\n                        continue;\n                    if ($condition)\n                        $condition .= sprintf(' and %s < 2100000000 ', $col);\n                    else\n                        $condition = sprintf(' where %s < 2100000000 ', $col);\n                }\n            }\n        }\n\n\n        if (count($output->groups)) {\n            /*\n            var_dump(\"= column output start = \");\n            var_dump(sizeof ($output->columns) . \" = end length == \");\n            var_dump($output->columns);\n            var_dump(\"= column output end = \" . \"\\n\");\n            var_dump($output->groups);\n            var_dump(\"=== \" . \"\\n\");\n            var_dump(debug_backtrace());\n            \n            foreach($output->columns as $key => $val) {\n            $name = $val['name'];\n            $alias = $val['alias'];\n            } */\n            $group_list = array();\n            foreach ($output->groups as $gkey => $gval) {\n                foreach ($output->columns as $key => $val) {\n                    $name = $val['name'];\n                    $alias = $val['alias'];\n                    if (trim($name) == trim($gval)) {\n                        $group_list[] = $alias;\n                        break;\n                    }\n                }\n\n\t\t\t\tif($column_list[$gval]) $output->arg_columns[] = $column_list[$gval];\n\n            }\n            $groupby_query = sprintf(' group by %s', implode(',', $group_list));\n            //             var_dump($query);\n        }\n\n        if ($output->order) {\n            foreach ($output->order as $key => $val) {\n                $index_list[] = sprintf('%s %s', $val[0], $val[1]);\n\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\n            }\n            if (count($index_list)) $orderby_query = ' order by ' . implode(',', $index_list);\n        }\n\n\t\tif(count($output->arg_columns))\n\t\t{\n\t\t\t$columns = join(',',$output->arg_columns);\n\t\t}\n\n        $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',', $table_list), implode(' ', $left_join), $condition, $groupby_query.$orderby_query);\n\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\n        $result = $this->_query($query);\n        if ($this->isError())\n            return;\n        \n        if(count($click_count)>0 && count($output->conditions)>0){\n            $_query = '';\n            foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\n            $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\n            $this->_query($_query);\n        }\n\n\n        $data = $this->_fetch($result);\n\n        $buff = new Object();\n        $buff->data = $data;\n        return $buff;\n    }\n\n    /**\n     * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\n     *\n     * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\n     **/\n    function _getNavigationData($table_list, $columns, $left_join, $condition, $output)\n    {\n        require_once (_XE_PATH_ . 'classes/page/PageHandler.class.php');\n\n\t\t$column_list = $output->column_list;\n        /*\n        // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\n        // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\n        //\n        $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\n        $total_count = $this->getCountCache($output->tables, $count_condition);\n        if ($total_count === false) {\n            $count_query = sprintf('select count(*) as count from %s %s %s', implode(', ', $table_list), implode(' ', $left_join), $count_condition);\n            if (count($output->groups))\n                $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\n            $result = $this->_query($count_query);\n            $count_output = $this->_fetch($result);\n            $total_count = (int)$count_output->count;\n            $this->putCountCache($output->tables, $count_condition, $total_count);\n        }\n        */\n\n        // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\n        $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',', $table_list), implode(' ', $left_join), $condition);\n\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\n\t\t$result = $this->_query($count_query);\n\t\t$count_output = $this->_fetch($result);\n\t\t$total_count = (int)$count_output->count;\n\n        $list_count = $output->list_count['value'];\n        if (!$list_count) $list_count = 20;\n        $page_count = $output->page_count['value'];\n        if (!$page_count) $page_count = 10;\n        $page = $output->page['value'];\n        if (!$page)\n            $page = 1;\n\n        // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\n        if ($total_count) $total_page = (int)(($total_count - 1) / $list_count) + 1;\n        else $total_page = 1;\n\n        // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\n        if ($page > $total_page) $page = $total_page;\n        $start_count = ($page - 1) * $list_count;\n\n        // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\n        if ($output->order) {\n            $conditions = $this->getConditionList($output);\n            if (!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\n                foreach ($output->order as $key => $val) {\n                    $col = $val[0];\n                    if (!in_array($col, array('list_order', 'update_order')))\n                        continue;\n                    if ($condition)\n                        $condition .= sprintf(' and %s < 2100000000 ', $col);\n                    else\n                        $condition = sprintf(' where %s < 2100000000 ', $col);\n                }\n            }\n        }\n\n        if (count($output->groups)) {\n            /*\n            var_dump(\"= column output start = \");\n            var_dump(sizeof ($output->columns) . \" = end length == \");\n            var_dump($output->columns);\n            var_dump(\"= column output end = \" . \"\\n\");\n            var_dump($output->groups);\n            var_dump(\"=== \" . \"\\n\");\n            var_dump(debug_backtrace());\n            \n            foreach($output->columns as $key => $val) {\n            $name = $val['name'];\n            $alias = $val['alias'];\n            } */\n            $group_list = array();\n            foreach ($output->groups as $gkey => $gval) {\n                foreach ($output->columns as $key => $val) {\n                    $name = $val['name'];\n                    $alias = $val['alias'];\n                    if (trim($name) == trim($gval)) {\n                        $group_list[] = $alias;\n                        break;\n                    }\n                }\n\n\t\t\t\tif($column_list[$gval]) $output->arg_columns[] = $column_list[$gval];\n\n            }\n            $groupby_query = sprintf(' group by %s', implode(',', $group_list));\n            //             var_dump($query);\n        }\n\n        if ($output->order) {\n            foreach ($output->order as $key => $val) {\n                $index_list[] = sprintf('%s %s', $val[0], $val[1]);\n\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\n            }\n            if (count($index_list)) $orderby_query = ' order by ' . implode(',', $index_list);\n        }\n\n\t\tif(count($output->arg_columns))\n\t\t{\n\t\t\t$columns = join(',',$output->arg_columns);\n\t\t}\n\n        $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',', $table_list), implode(' ', $left_join), $condition);\n        $query = sprintf('%s offset %d limit %d', $query, $start_count, $list_count);\n\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\n\n        $result = $this->_query($query);\n        if ($this->isError()) {\n            $buff = new Object();\n            $buff->total_count = 0;\n            $buff->total_page = 0;\n            $buff->page = 1;\n            $buff->data = array();\n\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\n            return $buff;\n        }\n\n        $virtual_no = $total_count - ($page - 1) * $list_count;\n        while ($tmp = pg_fetch_object($result)) {\n            $data[$virtual_no--] = $tmp;\n        }\n\n        $buff = new Object();\n        $buff->total_count = $total_count;\n        $buff->total_page = $total_page;\n        $buff->page = $page;\n        $buff->data = $data;\n\n        $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\n        return $buff;\n    }\n}\n\nreturn new DBPostgresql;\n?>\n", "<?php\r\n    /**\r\n     * @class DBSqlite2\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief SQLite ver 2.x \ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c class\r\n     * @version 0.1\r\n     *\r\n     * sqlite handling class (sqlite ver 2.x)\r\n     **/\r\n\r\n    class DBSqlite2 extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE\uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * @brief sqlite \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'INTEGER',\r\n            'number' => 'INTEGER',\r\n            'varchar' => 'VARHAR',\r\n            'char' => 'CHAR',\r\n            'text' => 'TEXT',\r\n            'bigtext' => 'TEXT',\r\n            'date' => 'VARCHAR(14)',\r\n            'float' => 'FLOAT',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBSqlite2() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBSqlite2;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            if(!function_exists('sqlite_open')) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->database) return;\r\n\r\n            // \ub370\uc774\ud130 \ubca0\uc774\uc2a4 \ud30c\uc77c \uc811\uc18d \uc2dc\ub3c4\r\n            $this->fd = sqlite_open($this->database, 0666, $error);\r\n            if(!file_exists($this->database) || $error) {\r\n                $this->setError(-1,$error);\r\n                $this->is_connected = false;\r\n                return;\r\n            }\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->isConnected()) return;\r\n            sqlite_close($this->fd);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if(!$this->is_connected || $this->transaction_started) return;\r\n            if($this->_query(\"BEGIN;\")) $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->_query(\"ROLLBACK;\");\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && (!$this->isConnected() || !$this->transaction_started)) return;\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->_query(\"COMMIT;\");\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = str_replace(\"'\",\"''\", $string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 \uc2e4\ud589 \ubc0f \uacb0\uacfc\uc758 fetch \ucc98\ub9ac\r\n         *\r\n         * query : query\ubb38 \uc2e4\ud589\ud558\uace0 result return\\n\r\n         * fetch : reutrn \ub41c \uac12\uc774 \uc5c6\uc73c\uba74 NULL\\n\r\n         *         rows\uc774\uba74 array object\\n\r\n         *         row\uc774\uba74 object\\n\r\n         *         return\\n\r\n         **/\r\n        function _query($query) {\r\n            if(!$this->isConnected()) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            // \ucffc\ub9ac \ubb38 \uc2e4\ud589\r\n            $result = @sqlite_query($query, $this->fd);\r\n\r\n            // \uc624\ub958 \uccb4\ud06c\r\n            if(sqlite_last_error($this->fd)) $this->setError(sqlite_last_error($this->fd), sqlite_error_string(sqlite_last_error($this->fd)));\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589 \uc54c\ub9bc\r\n            $this->actFinish();\r\n\r\n            return $result;\r\n        }\r\n\r\n        /**\r\n         * @brief \uacb0\uacfc\ub97c fetch\r\n         **/\r\n        function _fetch($result) {\r\n            if($this->isError() || !$result) return;\r\n\r\n            while($tmp = sqlite_fetch_array($result, SQLITE_ASSOC)) {\r\n                unset($obj);\r\n                foreach($tmp as $key => $val) {\r\n                    $pos = strpos($key, '.');\r\n                    if($pos) $key = substr($key, $pos+1);\r\n                    $obj->{$key} = $val;\r\n                }\r\n                $output[] = $obj;\r\n            }\r\n\r\n            if(count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values ('')\", $this->prefix);\r\n            $this->_query($query);\r\n            $sequence = sqlite_last_insert_rowid($this->fd);\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  %ssequence where seq < %d\", $this->prefix, $sequence);\r\n              $this->_query($query);\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf('pragma table_info(%s%s)', $this->prefix, $this->addQuotes($target_name));\r\n            $result = $this->_query($query);\r\n            if(sqlite_num_rows($result)==0) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table %s%s drop column %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->name);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n\r\n            $query = sprintf('CREATE %s INDEX %s ON %s%s (%s)', $is_unique?'UNIQUE':'', $key_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"DROP INDEX %s\", $this->prefix, $table_name, $key_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"pragma index_info(%s)\", $key_name);\r\n            $result = $this->_query($query);\r\n            $output = $this->_fetch($result);\r\n            if(!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                if(strtoupper($this->column_type[$type])=='INTEGER') $size = '';\r\n                else $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                if($auto_increment) {\r\n                    $column_schema[] = sprintf('%s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                } else {\r\n                    $column_schema[] = sprintf('%s %s%s %s %s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $size?'('.$size.')':'',\r\n                        $notnull?'NOT NULL':'',\r\n                        $primary_key?'PRIMARY KEY':'',\r\n                        isset($default)?\"DEFAULT '\".$default.\"'\":'',\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                }\r\n\r\n                if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            $schema = sprintf('CREATE TABLE %s (%s%s) ;', $this->addQuotes($table_name),\" \", implode($column_schema,\", \"));\r\n            $this->_query($schema);\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $query = sprintf('CREATE UNIQUE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_query($query);\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $query = sprintf('CREATE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_query($query);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n                if($output->column_type[$name]!='number') {\r\n                    $value = \"'\".$this->addQuotes($value).\"'\";\r\n                    if(!$value) $value = 'null';\r\n                }\r\n\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t// elseif(!$value || is_numeric($value)) $value = (int)$value;\r\n                else $value = (int)$value;\r\n\r\n                $column_list[] = $name;\r\n                $value_list[] = $value;\r\n            }\r\n\r\n            $query = sprintf(\"insert into %s (%s) values (%s);\", implode(',',$table_list), implode(',',$column_list), implode(',', $value_list));\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            $table_count = count(array_values($output->tables));\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 1\uac1c\uc77c \uacbd\uc6b0\r\n            if($table_count == 1) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                list($target_table) = array_values($output->tables);\r\n                $target_table = $this->prefix.$target_table;\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                    else {\r\n                        if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n\t\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t\t\telse $value = (int)$value;\r\n\r\n                        $column_list[] = sprintf(\"%s = %s\", $name, $value);\r\n                    }\r\n                }\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n\r\n                $query = sprintf(\"update %s set %s %s\", $target_table, implode(',',$column_list), $condition);\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 2\uac1c\uc77c \uacbd\uc6b0 (sqlite\uc5d0\uc11c update \ud14c\uc774\ube14\uc744 1\uac1c \uc774\uc0c1 \uc9c0\uc815 \ubabb\ud574\uc11c \uc774\ub807\uac8c \uaf41\uc218\ub85c... \ub2e4\ub978 \ubc29\ubc95\uc774 \uc788\uc73c\ub824\ub098..)\r\n            } elseif($table_count == 2) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                foreach($output->tables as $key => $val) {\r\n                    $table_list[$val] = $this->prefix.$key;\r\n                }\r\n                list($source_table, $target_table) = array_values($table_list);\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n                foreach($table_list as $key => $val) {\r\n                    $condition = eregi_replace($key.'\\\\.', $val.'.', $condition);\r\n                }\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    list($s_prefix, $s_column) = explode('.',$name);\r\n                    list($t_prefix, $t_column) = explode('.',$value);\r\n\r\n                    $s_table = $table_list[$s_prefix];\r\n                    $t_table = $table_list[$t_prefix];\r\n                    $column_list[] = sprintf(' %s = (select %s from %s %s) ', $s_column, $t_column, $t_table, $condition);\r\n                }\r\n\r\n                $query = sprintf('update %s set %s where exists(select * from %s %s)', $source_table, implode(',', $column_list), $target_table, $condition);\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            return $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val.' as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' '.$this->prefix.$output->_tables[$key].' as '.$key  . ' on ' . $condition . '';\r\n                }\r\n            }\r\n\r\n            if(!$output->columns) {\r\n                $columns = '*';\r\n            } else {\r\n                $column_list = array();\r\n                foreach($output->columns as $key => $val) {\r\n                    $name = $val['name'];\r\n                    $alias = $val['alias'];\r\n                    if($val['click_count']) $click_count[] = $val['name'];\r\n\r\n                    if(substr($name,-1) == '*') {\r\n                        $column_list[] = $name;\r\n                    } elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n                        if($alias) $column_list[] = sprintf('%s as %s', $name, $alias);\r\n                        else $column_list[] = sprintf('%s',$name);\r\n                    } else {\r\n                        if($alias) $column_list[] = sprintf('%s as %s', $name, $alias);\r\n                        else $column_list[] = sprintf('%s',$name);\r\n                    }\r\n                }\r\n                $columns = implode(',',$column_list);\r\n            }\r\n\r\n            $condition = $this->getCondition($output);\r\n\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns,  $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\r\n            if(count($output->groups)) $query .= sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                }\r\n                if(count($index_list)) $query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $result = $this->_query($query);\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $data = $this->_fetch($result);\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n      function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n            /*\r\n            // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\r\n            // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\r\n            //\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $total_count = $this->getCountCache($output->tables, $count_condition);\r\n            if($total_count === false) {\r\n                $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n                if (count($output->groups))\r\n                    $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n                $result = $this->_query($count_query);\r\n                $count_output = $this->_fetch($result);\r\n                $total_count = (int)$count_output->count;\r\n                $this->putCountCache($output->tables, $count_condition, $total_count);\r\n            }\r\n            */\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n            $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$result = $this->_query($count_query);\r\n\t\t\t$count_output = $this->_fetch($result);\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            $query = sprintf(\"select %s from %s %s %s\", $columns, implode(',',$table_list), implode(' ',$left_join), $condition);\r\n\r\n\r\n            if(count($output->groups)) $query .= sprintf(' group by %s', implode(',',$output->groups));\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n                }\r\n                if(count($index_list)) $query .= ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $result = $this->_query($query);\r\n            if($this->isError()) {\r\n                $buff = new Object();\r\n                $buff->total_count = 0;\r\n                $buff->total_page = 0;\r\n                $buff->page = 1;\r\n                $buff->data = array();\r\n\r\n                $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n                return $buff;\r\n            }\r\n\r\n            if($result) {\r\n                $virtual_no = $total_count - ($page-1)*$list_count;\r\n                while($tmp = sqlite_fetch_array($result, SQLITE_ASSOC)) {\r\n                    unset($obj);\r\n                    foreach($tmp as $key => $val) {\r\n                        $pos = strpos($key, '.');\r\n                        if($pos) $key = substr($key, $pos+1);\r\n                        $obj->{$key} = $val;\r\n                    }\r\n                    $data[$virtual_no--] = $obj;\r\n                }\r\n            }\r\n\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBSqlite2;\r\n?>\r\n", "<?php\r\n    /**\r\n     * @class DBSqlite3_pdo\r\n     * @author NHN (developers@xpressengine.com)\r\n     * @brief SQLite3\ub97c PDO\ub85c \uc774\uc6a9\ud558\uc5ec class\r\n     * @version 0.1\r\n     **/\r\n\r\n    class DBSqlite3_pdo extends DB {\r\n\r\n        /**\r\n         * DB\ub97c \uc774\uc6a9\ud558\uae30 \uc704\ud55c \uc815\ubcf4\r\n         **/\r\n        var $database = NULL; ///< database\r\n        var $prefix   = 'xe'; ///< XE\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ud14c\uc774\ube14\ub4e4\uc758 prefix  (\ud55c DB\uc5d0\uc11c \uc5ec\ub7ec\uac1c\uc758 XE \uc124\uce58 \uac00\ub2a5)\r\n\t\tvar $comment_syntax = '/* %s */';\r\n\r\n        /**\r\n         * PDO \uc0ac\uc6a9\uc2dc \ud544\uc694\ud55c \ubcc0\uc218\ub4e4\r\n         **/\r\n        var $handler      = NULL;\r\n        var $stmt         = NULL;\r\n        var $bind_idx     = 0;\r\n        var $bind_vars    = array();\r\n\r\n        /**\r\n         * @brief sqlite3 \uc5d0\uc11c \uc0ac\uc6a9\ub420 column type\r\n         *\r\n         * column_type\uc740 schema/query xml\uc5d0\uc11c \uacf5\ud1b5 \uc120\uc5b8\ub41c type\uc744 \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\r\n         * \uac01 DBMS\uc5d0 \ub9de\uac8c replace \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\r\n         **/\r\n        var $column_type = array(\r\n            'bignumber' => 'INTEGER',\r\n            'number'    => 'INTEGER',\r\n            'varchar'   => 'VARHAR',\r\n            'char'      => 'CHAR',\r\n            'text'      => 'TEXT',\r\n            'bigtext'   => 'TEXT',\r\n            'date'      => 'VARCHAR(14)',\r\n            'float'     => 'REAL',\r\n        );\r\n\r\n        /**\r\n         * @brief constructor\r\n         **/\r\n        function DBSqlite3_pdo() {\r\n            $this->_setDBInfo();\r\n            $this->_connect();\r\n        }\r\n\t\t\r\n\t\t/**\r\n\t\t * @brief create an instance of this class\r\n\t\t */\r\n\t\tfunction create()\r\n\t\t{\r\n\t\t\treturn new DBSqlite3_pdo;\r\n\t\t}\r\n\r\n        /**\r\n         * @brief \uc124\uce58 \uac00\ub2a5 \uc5ec\ubd80\ub97c return\r\n         **/\r\n        function isSupported() {\r\n            return class_exists('PDO');\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc815\ubcf4 \uc124\uc815 \ubc0f connect/ close\r\n         **/\r\n        function _setDBInfo() {\r\n            $db_info = Context::getDBInfo();\r\n            $this->database = $db_info->db_database;\r\n            $this->prefix = $db_info->db_table_prefix;\r\n            if(!substr($this->prefix,-1)!='_') $this->prefix .= '_';\r\n        }\r\n\r\n        /**\r\n         * @brief DB \uc811\uc18d\r\n         **/\r\n        function _connect() {\r\n            // db \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \ubb34\uc2dc\r\n            if(!$this->database) return;\r\n\r\n            // \ub370\uc774\ud130 \ubca0\uc774\uc2a4 \ud30c\uc77c \uc811\uc18d \uc2dc\ub3c4\r\n\t\t\ttry {\r\n\t\t\t\t// PDO is only supported with PHP5,\r\n\t\t\t\t// so it is allowed to use try~catch statment in this class.\r\n\t\t\t\t$this->handler = new PDO('sqlite:'.$this->database);\r\n\t\t\t} catch (PDOException $e) {\r\n\t\t\t\t$this->setError(-1, 'Connection failed: '.$e->getMessage());\r\n\t\t\t\t$this->is_connected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            // \uc811\uc18d\uccb4\ud06c\r\n            $this->is_connected = true;\r\n\t\t\t$this->password = md5($this->password);\r\n        }\r\n\r\n        /**\r\n         * @brief DB\uc811\uc18d \ud574\uc81c\r\n         **/\r\n        function close() {\r\n            if(!$this->is_connected) return;\r\n            $this->commit();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\r\n         **/\r\n        function begin() {\r\n            if(!$this->is_connected || $this->transaction_started) return;\r\n            if($this->handler->beginTransaction()) $this->transaction_started = true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ub864\ubc31\r\n         **/\r\n        function rollback() {\r\n            if(!$this->is_connected || !$this->transaction_started) return;\r\n            $this->handler->rollBack();\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucee4\ubc0b\r\n         **/\r\n        function commit($force = false) {\r\n            if(!$force && (!$this->is_connected || !$this->transaction_started)) return;\r\n            $this->handler->commit();\r\n            $this->transaction_started = false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ucffc\ub9ac\uc5d0\uc11c \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4 \ubcc0\uc218\ub4e4\uc758 quotation \uc870\uc808\r\n         **/\r\n        function addQuotes($string) {\r\n            if(version_compare(PHP_VERSION, \"5.9.0\", \"<\") && get_magic_quotes_gpc()) $string = stripslashes(str_replace(\"\\\\\",\"\\\\\\\\\",$string));\r\n            if(!is_numeric($string)) $string = str_replace(\"'\",\"''\",$string);\r\n            return $string;\r\n        }\r\n\r\n        /**\r\n         * @brief : \ucffc\ub9ac\ubb38\uc758 prepare\r\n         **/\r\n        function _prepare($query) {\r\n            if(!$this->is_connected) return;\r\n\r\n            // \ucffc\ub9ac \uc2dc\uc791\uc744 \uc54c\ub9bc\r\n            $this->actStart($query);\r\n\r\n            $this->stmt = $this->handler->prepare($query);\r\n\r\n            if($this->handler->errorCode() != '00000') {\r\n                $this->setError($this->handler->errorCode(), print_r($this->handler->errorInfo(),true));\r\n                $this->actFinish();\r\n            }\r\n            $this->bind_idx = 0;\r\n            $this->bind_vars = array();\r\n        }\r\n\r\n        /**\r\n         * @brief : stmt\uc5d0 binding params\r\n         **/\r\n        function _bind($val) {\r\n            if(!$this->is_connected || !$this->stmt) return;\r\n\r\n            $this->bind_idx ++;\r\n            $this->bind_vars[] = $val;\r\n            $this->stmt->bindParam($this->bind_idx, $val);\r\n        }\r\n\r\n        /**\r\n         * @brief : prepare\ub41c \ucffc\ub9ac\uc758 execute\r\n         **/\r\n        function _execute() {\r\n            if(!$this->is_connected || !$this->stmt) return;\r\n\r\n            $this->stmt->execute();\r\n\r\n            if($this->stmt->errorCode() === '00000') {\r\n                $output = null;\r\n                while($tmp = $this->stmt->fetch(PDO::FETCH_ASSOC)) {\r\n                    unset($obj);\r\n                    foreach($tmp as $key => $val) {\r\n                        $pos = strpos($key, '.');\r\n                        if($pos) $key = substr($key, $pos+1);\r\n                        $obj->{$key} = str_replace(\"''\",\"'\",$val);\r\n                    }\r\n                    $output[] = $obj;\r\n                }\r\n            } else {\r\n                $this->setError($this->stmt->errorCode(),print_r($this->stmt->errorInfo(),true));\r\n            }\r\n\r\n            $this->stmt = null;\r\n            $this->actFinish();\r\n\r\n            if(is_array($output) && count($output)==1) return $output[0];\r\n            return $output;\r\n        }\r\n\r\n        /**\r\n         * @brief 1\uc529 \uc99d\uac00\ub418\ub294 sequence\uac12\uc744 return\r\n         **/\r\n        function getNextSequence() {\r\n            $query = sprintf(\"insert into %ssequence (seq) values (NULL)\", $this->prefix);\r\n            $this->_prepare($query);\r\n            $result = $this->_execute();\r\n            $sequence = $this->handler->lastInsertId();\r\n            if($sequence % 10000 == 0) {\r\n              $query = sprintf(\"delete from  %ssequence where seq < %d\", $this->prefix, $sequence);\r\n              $this->_prepare($query);\r\n              $result = $this->_execute();\r\n            }\r\n\r\n            return $sequence;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud14c\uc774\ube14 \uae30\uc0dd\uc131 \uc5ec\ubd80 return\r\n         **/\r\n        function isTableExists($target_name) {\r\n            $query = sprintf('pragma table_info(%s%s)', $this->prefix, $target_name);\r\n            $this->_prepare($query);\r\n            if(!$this->_execute()) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \ucd94\uac00\r\n         **/\r\n        function addColumn($table_name, $column_name, $type='number', $size='', $default = '', $notnull=false) {\r\n            $type = $this->column_type[$type];\r\n            if(strtoupper($type)=='INTEGER') $size = '';\r\n\r\n            $query = sprintf(\"alter table %s%s add %s \", $this->prefix, $table_name, $column_name);\r\n            if($size) $query .= sprintf(\" %s(%s) \", $type, $size);\r\n            else $query .= sprintf(\" %s \", $type);\r\n            if($default) $query .= sprintf(\" default '%s' \", $default);\r\n            if($notnull) $query .= \" not null \";\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 column \uc81c\uac70\r\n         **/\r\n        function dropColumn($table_name, $column_name) {\r\n            $query = sprintf(\"alter table %s%s drop column %s \", $this->prefix, $table_name, $column_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 column\uc758 \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isColumnExists($table_name, $column_name) {\r\n            $query = sprintf(\"pragma table_info(%s%s)\", $this->prefix, $table_name);\r\n            $this->_prepare($query);\r\n            $output = $this->_execute();\r\n\r\n            if($output) {\r\n                $column_name = strtolower($column_name);\r\n                foreach($output as $key => $val) {\r\n                    $name = strtolower($val->name);\r\n                    if($column_name == $name) return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc5d0 \ud2b9\uc815 \uc778\ub371\uc2a4 \ucd94\uac00\r\n         * $target_columns = array(col1, col2)\r\n         * $is_unique? unique : none\r\n         **/\r\n        function addIndex($table_name, $index_name, $target_columns, $is_unique = false) {\r\n            if(!is_array($target_columns)) $target_columns = array($target_columns);\r\n\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n\r\n            $query = sprintf('CREATE %s INDEX %s ON %s%s (%s)', $is_unique?'UNIQUE':'', $key_name, $this->prefix, $table_name, implode(',',$target_columns));\r\n            $this->_prepare($query);\r\n            $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 \ud2b9\uc815 \uc778\ub371\uc2a4 \uc0ad\uc81c\r\n         **/\r\n        function dropIndex($table_name, $index_name, $is_unique = false) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n            $query = sprintf(\"DROP INDEX %s\", $this->prefix, $table_name, $key_name);\r\n            $this->_query($query);\r\n        }\r\n\r\n        /**\r\n         * @brief \ud2b9\uc815 \ud14c\uc774\ube14\uc758 index \uc815\ubcf4\ub97c return\r\n         **/\r\n        function isIndexExists($table_name, $index_name) {\r\n            $key_name = sprintf('%s%s_%s', $this->prefix, $table_name, $index_name);\r\n\r\n            $query = sprintf(\"pragma index_info(%s)\", $key_name);\r\n            $this->_prepare($query);\r\n            $output = $this->_execute();\r\n            if(!$output) return false;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXml($xml_doc) {\r\n            return $this->_createTable($xml_doc);\r\n        }\r\n\r\n        /**\r\n         * @brief xml \uc744 \ubc1b\uc544\uc11c \ud14c\uc774\ube14\uc744 \uc0dd\uc131\r\n         **/\r\n        function createTableByXmlFile($file_name) {\r\n            if(!file_exists($file_name)) return;\r\n            // xml \ud30c\uc77c\uc744 \uc77d\uc74c\r\n            $buff = FileHandler::readFile($file_name);\r\n            return $this->_createTable($buff);\r\n        }\r\n\r\n        /**\r\n         * @brief schema xml\uc744 \uc774\uc6a9\ud558\uc5ec create table query\uc0dd\uc131\r\n         *\r\n         * type : number, varchar, text, char, date, \\n\r\n         * opt : notnull, default, size\\n\r\n         * index : primary key, index, unique\\n\r\n         **/\r\n        function _createTable($xml_doc) {\r\n            // xml parsing\r\n            $oXml = new XmlParser();\r\n            $xml_obj = $oXml->parse($xml_doc);\r\n\r\n            // \ud14c\uc774\ube14 \uc0dd\uc131 schema \uc791\uc131\r\n            $table_name = $xml_obj->table->attrs->name;\r\n            if($this->isTableExists($table_name)) return;\r\n            $table_name = $this->prefix.$table_name;\r\n\r\n            if(!is_array($xml_obj->table->column)) $columns[] = $xml_obj->table->column;\r\n            else $columns = $xml_obj->table->column;\r\n\r\n            foreach($columns as $column) {\r\n                $name = $column->attrs->name;\r\n                $type = $column->attrs->type;\r\n                if(strtoupper($this->column_type[$type])=='INTEGER') $size = '';\r\n                else $size = $column->attrs->size;\r\n                $notnull = $column->attrs->notnull;\r\n                $primary_key = $column->attrs->primary_key;\r\n                $index = $column->attrs->index;\r\n                $unique = $column->attrs->unique;\r\n                $default = $column->attrs->default;\r\n                $auto_increment = $column->attrs->auto_increment;\r\n\r\n                if($auto_increment) {\r\n                    $column_schema[] = sprintf('%s %s PRIMARY KEY %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $auto_increment?'AUTOINCREMENT':''\r\n                    );\r\n                } else {\r\n                    $column_schema[] = sprintf('%s %s%s %s %s %s',\r\n                        $name,\r\n                        $this->column_type[$type],\r\n                        $size?'('.$size.')':'',\r\n                        $notnull?'NOT NULL':'',\r\n                        $primary_key?'PRIMARY KEY':'',\r\n                        isset($default)?\"DEFAULT '\".$default.\"'\":''\r\n                    );\r\n                }\r\n\r\n                if($unique) $unique_list[$unique][] = $name;\r\n                else if($index) $index_list[$index][] = $name;\r\n            }\r\n\r\n            $schema = sprintf('CREATE TABLE %s (%s%s) ;', $table_name,\" \", implode($column_schema,\", \"));\r\n            $this->_prepare($schema);\r\n            $this->_execute();\r\n            if($this->isError()) return;\r\n\r\n            if(count($unique_list)) {\r\n                foreach($unique_list as $key => $val) {\r\n                    $query = sprintf('CREATE UNIQUE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_prepare($query);\r\n                    $this->_execute();\r\n                    if($this->isError()) $this->rollback();\r\n                }\r\n            }\r\n\r\n            if(count($index_list)) {\r\n                foreach($index_list as $key => $val) {\r\n                    $query = sprintf('CREATE INDEX %s_%s ON %s (%s)', $this->addQuotes($table_name), $key, $this->addQuotes($table_name), implode(',',$val));\r\n                    $this->_prepare($query);\r\n                    $this->_execute();\r\n                    if($this->isError()) $this->rollback();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @brief \uc870\uac74\ubb38 \uc791\uc131\ud558\uc5ec return\r\n         **/\r\n        function getCondition($output) {\r\n            if(!$output->conditions) return;\r\n            $condition = $this->_getCondition($output->conditions,$output->column_type);\r\n            if($condition) $condition = ' where '.$condition;\r\n            return $condition;\r\n        }\r\n\r\n        function getLeftCondition($conditions,$column_type){\r\n            return $this->_getCondition($conditions,$column_type);\r\n        }\r\n\r\n\r\n        function _getCondition($conditions,$column_type) {\r\n            $condition = '';\r\n            foreach($conditions as $val) {\r\n                $sub_condition = '';\r\n                foreach($val['condition'] as $v) {\r\n                    if(!isset($v['value'])) continue;\r\n                    if($v['value'] === '') continue;\r\n                    if(!in_array(gettype($v['value']), array('string', 'integer', 'double', 'array'))) continue;\r\n\r\n                    $name = $v['column'];\r\n                    $operation = $v['operation'];\r\n                    $value = $v['value'];\r\n                    $type = $this->getColumnType($column_type,$name);\r\n                    $pipe = $v['pipe'];\r\n\r\n                    $value = $this->getConditionValue($name, $value, $operation, $type, $column_type);\r\n                    if(!$value) $value = $v['value'];\r\n                    $str = $this->getConditionPart($name, $value, $operation);\r\n                    if($sub_condition) $sub_condition .= ' '.$pipe.' ';\r\n                    $sub_condition .=  $str;\r\n                }\r\n                if($sub_condition) {\r\n                    if($condition && $val['pipe']) $condition .= ' '.$val['pipe'].' ';\r\n                    $condition .= '('.$sub_condition.')';\r\n                }\r\n            }\r\n            return $condition;\r\n        }\r\n\r\n        /**\r\n         * @brief insertAct \ucc98\ub9ac\r\n         **/\r\n        function _executeInsertAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uceec\ub7fc \uc815\ub9ac \r\n            foreach($output->columns as $key => $val) {\r\n                $name = $val['name'];\r\n                $value = $val['value'];\r\n\r\n                $key_list[] = $name;\r\n\r\n                if($output->column_type[$name]!='number') $val_list[] = $this->addQuotes($value);\r\n                else {\r\n\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n                    //if(!$value || is_numeric($value)) $value = (int)$value;\r\n                    $val_list[] = (int)$value;\r\n                }\r\n\r\n                $prepare_list[] = '?';\r\n            }\r\n\r\n            $query = sprintf(\"INSERT INTO %s (%s) VALUES (%s);\", implode(',',$table_list), implode(',',$key_list), implode(',',$prepare_list));\r\n\r\n            $this->_prepare($query);\r\n\r\n            $val_count = count($val_list);\r\n            for($i=0;$i<$val_count;$i++) $this->_bind($val_list[$i]);\r\n\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief updateAct \ucc98\ub9ac\r\n         **/\r\n        function _executeUpdateAct($output) {\r\n            $table_count = count(array_values($output->tables));\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 1\uac1c\uc77c \uacbd\uc6b0\r\n            if($table_count == 1) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                list($target_table) = array_values($output->tables);\r\n                $target_table = $this->prefix.$target_table;\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    if(strpos($name,'.')!==false&&strpos($value,'.')!==false) $column_list[] = $name.' = '.$value;\r\n                    else {\r\n                        if($output->column_type[$name]!='number') $value = \"'\".$this->addQuotes($value).\"'\";\r\n\t\t\t\t\t\t// sql injection \ubb38\uc81c\ub85c xml \uc120\uc5b8\uc774 number\uc778 \uacbd\uc6b0\uc774\uba74\uc11c \ub118\uc5b4\uc628 \uac12\uc774 \uc22b\uc790\ud615\uc774 \uc544\ub2c8\uba74 \uc22b\uc790\ud615\uc73c\ub85c \uac15\uc81c \ud615\ubcc0\ud658\r\n\t\t\t\t\t\telse $value = (int)$value;\r\n\r\n                        $column_list[] = sprintf(\"%s = %s\", $name, $value);\r\n                    }\r\n                }\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n\r\n                $query = sprintf(\"update %s set %s %s\", $target_table, implode(',',$column_list), $condition);\r\n\r\n            // \ub300\uc0c1 \ud14c\uc774\ube14\uc774 2\uac1c\uc77c \uacbd\uc6b0 (sqlite\uc5d0\uc11c update \ud14c\uc774\ube14\uc744 1\uac1c \uc774\uc0c1 \uc9c0\uc815 \ubabb\ud574\uc11c \uc774\ub807\uac8c \uaf41\uc218\ub85c... \ub2e4\ub978 \ubc29\ubc95\uc774 \uc788\uc73c\ub824\ub098..)\r\n            } elseif($table_count == 2) {\r\n                // \ud14c\uc774\ube14 \uc815\ub9ac\r\n                foreach($output->tables as $key => $val) {\r\n                    $table_list[$val] = $this->prefix.$key;\r\n                }\r\n                list($source_table, $target_table) = array_values($table_list);\r\n\r\n                // \uc870\uac74\uc808 \uc815\ub9ac\r\n                $condition = $this->getCondition($output);\r\n                foreach($table_list as $key => $val) {\r\n                    $condition = eregi_replace($key.'\\\\.', $val.'.', $condition);\r\n                }\r\n\r\n                // \uceec\ub7fc \uc815\ub9ac \r\n                foreach($output->columns as $key => $val) {\r\n                    if(!isset($val['value'])) continue;\r\n                    $name = $val['name'];\r\n                    $value = $val['value'];\r\n                    list($s_prefix, $s_column) = explode('.',$name);\r\n                    list($t_prefix, $t_column) = explode('.',$value);\r\n\r\n                    $s_table = $table_list[$s_prefix];\r\n                    $t_table = $table_list[$t_prefix];\r\n                    $column_list[] = sprintf(' %s = (select %s from %s %s) ', $s_column, $t_column, $t_table, $condition);\r\n                }\r\n\r\n                $query = sprintf('update %s set %s where exists(select * from %s %s)', $source_table, implode(',', $column_list), $target_table, $condition);\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief deleteAct \ucc98\ub9ac\r\n         **/\r\n        function _executeDeleteAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val;\r\n            }\r\n\r\n            // \uc870\uac74\uc808 \uc815\ub9ac\r\n            $condition = $this->getCondition($output);\r\n\r\n            $query = sprintf(\"delete from %s %s\", implode(',',$table_list), $condition);\r\n\r\n            $this->_prepare($query);\r\n            return $this->_execute();\r\n        }\r\n\r\n        /**\r\n         * @brief selectAct \ucc98\ub9ac\r\n         *\r\n         * select\uc758 \uacbd\uc6b0 \ud2b9\uc815 \ud398\uc774\uc9c0\uc758 \ubaa9\ub85d\uc744 \uac00\uc838\uc624\ub294 \uac83\uc744 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\\n\r\n         * navigation\uc774\ub77c\ub294 method\ub97c \uc81c\uacf5\r\n         **/\r\n        function _executeSelectAct($output) {\r\n            // \ud14c\uc774\ube14 \uc815\ub9ac\r\n            $table_list = array();\r\n            foreach($output->tables as $key => $val) {\r\n                $table_list[] = $this->prefix.$val.' as '.$key;\r\n            }\r\n\r\n            $left_join = array();\r\n            // why???\r\n            $left_tables= (array)$output->left_tables;\r\n\r\n            foreach($left_tables as $key => $val) {\r\n                $condition = $this->_getCondition($output->left_conditions[$key],$output->column_type);\r\n                if($condition){\r\n                    $left_join[] = $val . ' '.$this->prefix.$output->_tables[$key].' as '.$key  . ' on (' . $condition . ')';\r\n                }\r\n            }\r\n\r\n\r\n            $click_count = array();\r\n            if(!$output->columns){\r\n\t\t\t\t$output->columns = array(array('name'=>'*'));\r\n\t\t\t}\r\n\r\n\t\t\t$column_list = array();\r\n\t\t\tforeach($output->columns as $key => $val) {\r\n\t\t\t\t$name = $val['name'];\r\n\t\t\t\t$alias = $val['alias'];\r\n\t\t\t\tif($val['click_count']) $click_count[] = $val['name'];\r\n\r\n\t\t\t\tif(substr($name,-1) == '*') {\r\n\t\t\t\t\t$column_list[] = $name;\r\n\t\t\t\t} elseif(strpos($name,'.')===false && strpos($name,'(')===false) {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as %s', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif($alias) $column_list[$alias] = sprintf('%s as %s', $name, $alias);\r\n\t\t\t\t\telse $column_list[] = sprintf('%s',$name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$columns = implode(',',$column_list);\r\n\r\n            $condition = $this->getCondition($output);\r\n\r\n\t\t\t$output->column_list = $column_list;\r\n            if($output->list_count && $output->page) return $this->_getNavigationData($table_list, $columns, $left_join, $condition, $output);\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = join(',',$output->arg_columns);\r\n\t\t\t}\r\n\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            // list_count\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc801\uc6a9\r\n            if($output->list_count['value']) $query = sprintf('%s limit %d', $query, $output->list_count['value']);\r\n\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n            $this->_prepare($query);\r\n            $data = $this->_execute();\r\n            if($this->isError()) return;\r\n\r\n            if(count($click_count)>0 && count($output->conditions)>0){\r\n                $_query = '';\r\n                foreach($click_count as $k => $c) $_query .= sprintf(',%s=%s+1 ',$c,$c);\r\n                $_query = sprintf('update %s set %s %s',implode(',',$table_list), substr($_query,1),  $condition);\r\n                $this->_query($_query);\r\n            }\r\n\r\n            $buff = new Object();\r\n            $buff->data = $data;\r\n            return $buff;\r\n        }\r\n\r\n        /**\r\n         * @brief query xml\uc5d0 navigation \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 \ud398\uc774\uc9d5 \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud55c\ub2e4\r\n         *\r\n         * \uadf8\ub2e5 \uc88b\uc9c0\ub294 \uc54a\uc740 \uad6c\uc870\uc774\uc9c0\ub9cc \ud3b8\ub9ac\ud558\ub2e4.. -_-;\r\n         **/\r\n        function _getNavigationData($table_list, $columns, $left_join, $condition, $output) {\r\n            require_once(_XE_PATH_.'classes/page/PageHandler.class.php');\r\n\r\n\t\t\t$column_list = $output->column_list;\r\n            /*\r\n            // group by \uc808\uc774 \ud3ec\ud568\ub41c SELECT \ucffc\ub9ac\uc758 \uc804\uccb4 \uac2f\uc218\ub97c \uad6c\ud558\uae30 \uc704\ud55c \uc218\uc815\r\n            // \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc774 \ud655\uc778\ub418\uba74 \uc8fc\uc11d\uc73c\ub85c \ub9c9\uc544\ub454 \ubd80\ubd84\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\r\n            //\r\n            $count_condition = count($output->groups) ? sprintf('%s group by %s', $condition, implode(', ', $output->groups)) : $condition;\r\n            $total_count = $this->getCountCache($output->tables, $count_condition);\r\n            if($total_count === false) {\r\n                $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(', ', $table_list), implode(' ', $left_join), $count_condition);\r\n                if (count($output->groups))\r\n                    $count_query = sprintf('select count(*) as count from (%s) xet', $count_query);\r\n                $result = $this->_query($count_query);\r\n                $count_output = $this->_fetch($result);\r\n                $total_count = (int)$count_output->count;\r\n                $this->putCountCache($output->tables, $count_condition, $total_count);\r\n            }\r\n            */\r\n\r\n            // \uc804\uccb4 \uac1c\uc218\ub97c \uad6c\ud568\r\n            $count_query = sprintf(\"select count(*) as count from %s %s %s\", implode(',',$table_list),implode(' ',$left_join), $condition);\r\n\t\t\t$count_query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id . ' count(*)'):'';\r\n\t\t\t$this->_prepare($count_query);\r\n\t\t\t$count_output = $this->_execute();\r\n\t\t\t$total_count = (int)$count_output->count;\r\n\r\n            $list_count = $output->list_count['value'];\r\n            if(!$list_count) $list_count = 20;\r\n            $page_count = $output->page_count['value'];\r\n            if(!$page_count) $page_count = 10;\r\n            $page = $output->page['value'];\r\n            if(!$page) $page = 1;\r\n\r\n            // \uc804\uccb4 \ud398\uc774\uc9c0\ub97c \uad6c\ud568\r\n            if($total_count) $total_page = (int)( ($total_count-1) / $list_count) + 1;\r\n            else $total_page = 1;\r\n\r\n            // \ud398\uc774\uc9c0 \ubcc0\uc218\ub97c \uccb4\ud06c\r\n            if($page > $total_page) $page = $total_page;\r\n            $start_count = ($page-1)*$list_count;\r\n\r\n            // list_order, update_order \ub85c \uc815\ub82c\uc2dc\uc5d0 \uc778\ub371\uc2a4 \uc0ac\uc6a9\uc744 \uc704\ud574 condition\uc5d0 \ucffc\ub9ac \ucd94\uac00\r\n            if($output->order) {\r\n                $conditions = $this->getConditionList($output);\r\n                if(!in_array('list_order', $conditions) && !in_array('update_order', $conditions)) {\r\n                    foreach($output->order as $key => $val) {\r\n                        $col = $val[0];\r\n                        if(!in_array($col, array('list_order','update_order'))) continue;\r\n                        if($condition) $condition .= sprintf(' and %s < 2100000000 ', $col);\r\n                        else $condition = sprintf(' where %s < 2100000000 ', $col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(count($output->groups)){\r\n\t\t\t\t$groupby_query = sprintf(' group by %s', implode(',',$output->groups));\r\n\t\t\t\tif(count($output->arg_columns))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($output->groups as $group)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif($column_list[$group]) $output->arg_columns[] = $column_list[$group];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if($output->order) {\r\n                foreach($output->order as $key => $val) {\r\n                    $index_list[] = sprintf('%s %s', $val[0], $val[1]);\r\n\t\t\t\t\tif(count($output->arg_columns) && $column_list[$val[0]]) $output->arg_columns[] = $column_list[$val[0]];\r\n                }\r\n                if(count($index_list)) $orderby_query = ' order by '.implode(',',$index_list);\r\n            }\r\n\r\n\t\t\tif(count($output->arg_columns))\r\n\t\t\t{\r\n\t\t\t\t$columns = join(',',$output->arg_columns);\r\n\t\t\t}\r\n\r\n            // return \uacb0\uacfc\ubb3c \uc0dd\uc131\r\n            $buff = new Object();\r\n            $buff->total_count = 0;\r\n            $buff->total_page = 0;\r\n            $buff->page = 1;\r\n            $buff->data = array();\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n\r\n            // \ucffc\ub9ac \uc2e4\ud589\r\n            $query = sprintf(\"select %s from %s %s %s %s\", $columns, implode(',',$table_list),implode(' ',$left_join), $condition, $groupby_query.$orderby_query);\r\n            $query = sprintf('%s limit %d, %d', $query, $start_count, $list_count);\r\n\t\t\t$query .= (__DEBUG_QUERY__&1 && $output->query_id)?sprintf(' '.$this->comment_syntax,$this->query_id):'';\r\n\r\n            $this->_prepare($query);\r\n\r\n            if($this->isError()) {\r\n                $this->setError($this->handler->errorCode(), print_r($this->handler->errorInfo(),true));\r\n                $this->actFinish();\r\n                return $buff;\r\n            }\r\n\r\n            $this->stmt->execute();\r\n\r\n            if($this->stmt->errorCode() != '00000') {\r\n                $this->setError($this->stmt->errorCode(), print_r($this->stmt->errorInfo(),true));\r\n                $this->actFinish();\r\n                return $buff;\r\n            }\r\n\r\n            $output = null;\r\n            $virtual_no = $total_count - ($page-1)*$list_count;\r\n            while($tmp = $this->stmt->fetch(PDO::FETCH_ASSOC)) {\r\n                unset($obj);\r\n                foreach($tmp as $key => $val) {\r\n                    $pos = strpos($key, '.');\r\n                    if($pos) $key = substr($key, $pos+1);\r\n                    $obj->{$key} = $val;\r\n                }\r\n                $data[$virtual_no--] = $obj;\r\n            }\r\n\r\n            $this->stmt = null;\r\n            $this->actFinish();\r\n\r\n            $buff = new Object();\r\n            $buff->total_count = $total_count;\r\n            $buff->total_page = $total_page;\r\n            $buff->page = $page;\r\n            $buff->data = $data;\r\n\r\n            $buff->page_navigation = new PageHandler($total_count, $total_page, $page, $page_count);\r\n            return $buff;\r\n        }\r\n    }\r\n\r\nreturn new DBSqlite3_pdo;\r\n?>\r\n"], "filenames": ["classes/db/DBCubrid.class.php", "classes/db/DBMssql.class.php", "classes/db/DBMysql.class.php", "classes/db/DBPostgresql.class.php", "classes/db/DBSqlite2.class.php", "classes/db/DBSqlite3_pdo.class.php"], "buggy_code_start_loc": [736, 598, 488, 620, 466, 503], "buggy_code_end_loc": [739, 600, 489, 622, 467, 504], "fixing_code_start_loc": [736, 597, 488, 620, 466, 503], "fixing_code_end_loc": [738, 597, 490, 622, 468, 505], "type": "CWE-89", "message": "A vulnerability was found in XpressEngine up to 1.4.4. It has been rated as critical. This issue affects some unknown processing of the component Update Query Handler. The manipulation leads to sql injection. Upgrading to version 1.4.5 is able to address this issue. The name of the patch is c6e94449f21256d6362450b29c7847305e756ad5. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220247.", "other": {"cve": {"id": "CVE-2011-10003", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-07T21:15:08.917", "lastModified": "2023-02-16T13:45:25.430", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in XpressEngine up to 1.4.4. It has been rated as critical. This issue affects some unknown processing of the component Update Query Handler. The manipulation leads to sql injection. Upgrading to version 1.4.5 is able to address this issue. The name of the patch is c6e94449f21256d6362450b29c7847305e756ad5. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220247."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xpressengine:xpressengine:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.5", "matchCriteriaId": "B74F676D-8ED3-4752-A253-30EEF17A7DFE"}]}]}], "references": [{"url": "https://github.com/haegyung/xe-core/commit/c6e94449f21256d6362450b29c7847305e756ad5", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.220247", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220247", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/haegyung/xe-core/commit/c6e94449f21256d6362450b29c7847305e756ad5"}}