{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#ifndef TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n#define TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n\n#include <numeric>\n#include <string>\n#include <vector>\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n// Transpose tensor 'in' into tensor 'out' according to dimension\n// permutation 'perm'.\n//\n// REQUIRES: in.dtype() == out->dtype()\n// REQUIRES: in.dims() == out->dims()\n// REQUIRES: in.dims() == perm.size()\n// REQUIRES: in.dim_size(perm[i]) == out->dim_size(i)\ntemplate <typename Device>\nStatus DoTranspose(const Device& device, const Tensor& in,\n                   const gtl::ArraySlice<int32> perm, Tensor* out);\n\n// Conjugate and transpose tensor 'in' into tensor 'out' according to dimension\n// permutation 'perm'.\n//\n// REQUIRES: in.dtype() == out->dtype()\n// REQUIRES: in.dims() == out->dims()\n// REQUIRES: in.dims() == perm.size()\n// REQUIRES: in.dim_size(perm[i]) == out->dim_size(i)\ntemplate <typename Device>\nStatus DoConjugateTranspose(const Device& device, const Tensor& in,\n                            const gtl::ArraySlice<int32> perm, Tensor* out);\n\n// Convenience versions of DoTranspose that only swap the last (inner) two\n// dimensions.\ntemplate <typename Device>\nStatus DoMatrixTranspose(const Device& device, const Tensor& in, Tensor* out);\n\n// Convenience versions of DoConjugateTranspose that only swap the last (inner)\n// two dimensions.\ntemplate <typename Device>\nStatus DoConjugateMatrixTranspose(const Device& device, const Tensor& in,\n                                  Tensor* out);\n\n// Primary device specific functor to be specialized for each device and type.\ntemplate <typename Device, typename T, bool conjugate = false>\nstruct Transpose {\n  static void run(const Device& d, const Tensor& in,\n                  const gtl::ArraySlice<int32> perm, Tensor* out);\n};\n\n// Implementation details.\nnamespace internal {\n\ntypedef gtl::InlinedVector<int64, 8> TransposeDimsVec;\ntypedef gtl::InlinedVector<int32, 8> TransposePermsVec;\n\n// Helper function that takes a tensor shape, a permutation, combines the\n// neighboring shapes if their indices in the permutation are consecutive.\n// The function outputs the combined shape and new permutation.\n// Example: Tensor shape {2, 3, 4, 5, 120} and permutation {0, 4, 1, 2, 3} will\n// produce new shape {2, 60, 120} and new permutation {0, 2, 1}.\ninline void ReduceTransposeDimensions(const TensorShape& shape,\n                                      gtl::ArraySlice<int32> perm,\n                                      TransposePermsVec* new_perm,\n                                      TransposeDimsVec* new_dims) {\n  CHECK_EQ(shape.dims(), perm.size());\n  if (shape.dims() == 1) {\n    // If input dimension is already 1, no need to reduce dimension.\n    new_perm->resize(1);\n    (*new_perm)[0] = perm[0];\n    (*new_dims)[0] = shape.dim_size(0);\n    return;\n  }\n  TransposePermsVec new_dim_position(shape.dims(), -1);\n  TransposeDimsVec combined_dims(shape.dims(), 0);\n  int cur_head = perm[0];\n  new_dim_position[cur_head] = 0;\n  combined_dims[0] = shape.dim_size(cur_head);\n  int dim_idx = 0;\n  for (int perm_idx = 1; perm_idx < shape.dims(); ++perm_idx) {\n    // If two indices in permutation are consecutive numbers, combine their\n    // dimensions.\n    if (cur_head + 1 == perm[perm_idx]) {\n      cur_head = perm[perm_idx];\n      combined_dims[dim_idx] *= shape.dim_size(cur_head);\n    } else {\n      // Else start a new dimension.\n      cur_head = perm[perm_idx];\n      dim_idx++;\n      new_dim_position[cur_head] = dim_idx;\n      combined_dims[dim_idx] = shape.dim_size(cur_head);\n    }\n  }\n  // Compact the new permutations and dimension sizes.\n  new_perm->resize(dim_idx + 1);\n  new_dims->resize(dim_idx + 1);\n  dim_idx = 0;\n  for (int i = 0; i < new_dim_position.size(); ++i) {\n    if (new_dim_position[i] >= 0) {\n      int new_perm_idx = new_dim_position[i];\n      (*new_perm)[dim_idx] = new_perm_idx;\n      (*new_dims)[dim_idx] = combined_dims[new_perm_idx];\n      dim_idx++;\n    }\n  }\n}\n\n// If all non-singleton dimensions remain in ascending order, the shuffled\n// singletons can be transposed by a reshape, saving a memory allocation & copy.\n// |permutation| must be a permutation of {0, .., input_shape.dims() - 1}.\n// That is, for all i, 0 <= perm[i] < input_shape.dims().\n// In practice, this is checked in TransposeOp::Compute prior to calling this\n// function, and the function sits here to facilitate unit testing.\ninline bool NonSingletonDimensionsAlign(const TensorShape& input_shape,\n                                        const std::vector<int32>& permutation) {\n  int last_nonsingleton_perm_dim = -1;\n  for (int perm_dim : permutation) {\n    if (input_shape.dim_size(perm_dim) == 1) {\n      continue;\n    }\n    if (perm_dim < last_nonsingleton_perm_dim) {\n      return false;\n    }\n    last_nonsingleton_perm_dim = perm_dim;\n  }\n  return true;\n}\n\n// Uses Eigen to transpose.\ntemplate <typename Device, typename T, int NDIMS>\nvoid TransposeUsingEigen(const Device& d, const Tensor& in,\n                         const gtl::ArraySlice<int32> perm, bool conjugate,\n                         Tensor* out) {\n  Eigen::array<int, NDIMS> p;\n  for (int i = 0; i < NDIMS; ++i) p[i] = perm[i];\n  auto x = typename TTypes<T, NDIMS>::ConstTensor(\n      reinterpret_cast<const T*>(in.tensor_data().data()),\n      in.shape().AsEigenDSizes<NDIMS>());\n  auto y = typename TTypes<T, NDIMS>::Tensor(\n      reinterpret_cast<T*>(const_cast<char*>(out->tensor_data().data())),\n      out->shape().AsEigenDSizes<NDIMS>());\n  if (conjugate) {\n    y.device(d) = x.conjugate().shuffle(p);\n  } else {\n    y.device(d) = x.shuffle(p);\n  }\n}\n\ntemplate <typename Device>\nStatus DoTransposeImpl(const Device& d, const Tensor& in,\n                       const gtl::ArraySlice<int32> perm, bool conjugate,\n                       Tensor* out) {\n  CHECK_GE(in.dims(), 2);\n  CHECK_EQ(in.dims(), out->dims());\n  CHECK_EQ(in.dims(), perm.size());\n  CHECK_EQ(in.dtype(), out->dtype());\n  switch (in.dtype()) {\n    case DT_BOOL:\n    case DT_INT8:\n    case DT_QINT8:\n    case DT_QUINT8:\n    case DT_UINT8:\n      Transpose<Device, uint8>::run(d, in, perm, out);\n      break;\n\n    case DT_BFLOAT16:\n    case DT_HALF:\n    case DT_INT16:\n    case DT_QINT16:\n    case DT_QUINT16:\n    case DT_UINT16:\n      Transpose<Device, uint16>::run(d, in, perm, out);\n      break;\n\n    case DT_FLOAT:\n    case DT_INT32:\n    case DT_QINT32:\n    case DT_UINT32:\n      Transpose<Device, uint32>::run(d, in, perm, out);\n      break;\n\n    case DT_DOUBLE:\n    case DT_INT64:\n    case DT_UINT64:\n      Transpose<Device, uint64>::run(d, in, perm, out);\n      break;\n\n    case DT_COMPLEX64:\n      if (conjugate) {\n#if defined(__ANDROID__) and !defined(__clang__)\n        // Workaround for GCC compiler bug in Android toolchain.\n        return errors::Unimplemented(\n            \"Conjugate transpose of complex64 not supported for GCC on \"\n            \"Android.\");\n#else\n        Transpose<Device, complex64, /*conjugate=*/true>::run(d, in, perm, out);\n#endif\n      } else {\n        Transpose<Device, uint64>::run(d, in, perm, out);\n      }\n      break;\n\n    case DT_COMPLEX128:\n      if (conjugate) {\n        Transpose<Device, complex128, /*conjugate=*/true>::run(d, in, perm,\n                                                               out);\n      } else {\n        Transpose<Device, complex128, /*conjugate=*/false>::run(d, in, perm,\n                                                                out);\n      }\n      break;\n\n    case DT_STRING:\n      Transpose<Device, tstring>::run(d, in, perm, out);\n      break;\n\n    default:\n      return errors::Unimplemented(\"Unsupported dtype on CPU: \", in.dtype());\n  }\n  return Status::OK();\n}\n\ntemplate <typename Device>\ninline Status DoMatrixTransposeImpl(const Device& device, const Tensor& in,\n                                    bool conjugate, Tensor* out) {\n  const int ndims = in.dims();\n  if (ndims == 0) return Status::OK();\n  TransposePermsVec perm(ndims);\n  std::iota(perm.begin(), perm.end(), 0);\n  std::swap(perm[ndims - 2], perm[ndims - 1]);\n  return DoTransposeImpl(device, in, perm, conjugate, out);\n}\n\n\n}  // namespace internal\n}  // namespace tensorflow\n\n#endif  // TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for Transpose op.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport itertools\n\nimport numpy as np\n\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_shape\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gradient_checker_v2\nfrom tensorflow.python.platform import test\n\n\nclass TransposeTest(test.TestCase):\n\n  def _np_transpose(self, x, perm):\n    ret = np.copy(x)\n    ret = ret.transpose(perm)\n    return ret\n\n  def _compareCpu(self, x, p, conjugate=False):\n    if p is None:\n      rank = x.ndim\n      perm = (rank - 1) - np.arange(rank)\n    else:\n      perm = p\n    np_ans = self._np_transpose(x, perm)\n    if conjugate:\n      np_ans = np.conj(np_ans)\n    with self.cached_session(use_gpu=False):\n      inx = ops.convert_to_tensor(x)\n      y = array_ops.transpose(inx, p, conjugate=conjugate)\n      tf_ans = self.evaluate(y)\n      self.assertShapeEqual(np_ans, y)\n      self.assertAllEqual(np_ans, tf_ans)\n\n      jacob_t = None\n      # Gradient check on CPU.\n      if x.dtype in [np.float32, np.complex64]:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-3, 1e-3)\n      elif x.dtype in [np.float64, np.complex128]:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-6, 1e-6)\n\n      return tf_ans, jacob_t\n\n  def _compareGpu(self, x, p, conjugate=False):\n    if p is None:\n      rank = x.ndim\n      perm = (rank - 1) - np.arange(rank)\n    else:\n      perm = p\n    np_ans = self._np_transpose(x, perm)\n    if conjugate:\n      np_ans = np.conj(np_ans)\n    with self.cached_session():\n      inx = ops.convert_to_tensor(x)\n      y = array_ops.transpose(inx, p, conjugate=conjugate)\n      tf_ans = self.evaluate(y)\n\n      self.assertAllEqual(np_ans, tf_ans)\n      self.assertShapeEqual(np_ans, y)\n\n      jacob_t = None\n      # Gradient check on GPU.\n      if x.dtype == np.float32:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-3, 1e-3)\n      elif x.dtype == np.float64:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-6, 1e-6)\n\n      return tf_ans, jacob_t\n\n  def _compare(self, x, use_gpu=False):\n    n = np.ndim(x)\n    # generate all permutations of [0, 1, ... n-1] in random order.\n    all_perm = np.random.permutation(\n        [p for p in itertools.permutations(range(n))]).astype(np.int32)\n    cs = [False, True] if x.dtype in [np.complex64, np.complex128] else [False]\n    for c in cs:\n      for p in all_perm[:2]:\n        self._compareCpu(x, p, conjugate=c)\n        if use_gpu:\n          self._compareGpu(x, p, conjugate=c)\n    # Test with an empty permutation\n    for c in cs:\n      self._compareCpu(x, None, conjugate=c)\n      if use_gpu:\n        self._compareGpu(x, None, conjugate=c)\n\n  def _compare_cpu_gpu(self, x):\n    n = np.ndim(x)\n    # generate all permutation of [0, 1, ... n-1] in random order,\n    # choose the first two.\n    perms = itertools.permutations(range(n))\n    for _ in range(2):\n      p = np.random.permutation(next(perms)).astype(np.int32) if n > 1 else None\n      tf_a_cpu, tf_g_cpu = self._compareCpu(x, p)\n      tf_a_gpu, tf_g_gpu = self._compareGpu(x, p)\n      assert tf_g_cpu is not None\n      assert tf_g_gpu is not None\n      if x.dtype == np.float32:\n        self.assertAllClose(tf_a_cpu, tf_a_gpu, 1e-3, 1e-3)\n        self.assertAllClose(tf_g_cpu, tf_g_gpu, 1e-3, 1e-3)\n      elif x.dtype == np.float64:\n        self.assertAllClose(tf_a_cpu, tf_a_gpu, 1e-6, 1e-6)\n        self.assertAllClose(tf_g_cpu, tf_g_gpu, 1e-6, 1e-6)\n\n  def _testBoth(self, x):\n    self._compare(x, use_gpu=False)\n    self._compare(x, use_gpu=True)\n\n  def testRank1(self):\n    self._compareCpu(np.arange(0., 2), [0])\n\n  def test1D(self):\n    vector = np.arange(0, 2).reshape((1, 1, 1, 2, 1))\n    self._compare(vector, use_gpu=False)\n    self._compare(vector, use_gpu=True)\n\n  def test5DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    large_shapes = [[4, 10, 10, 10, 3], [4, 10, 10, 10, 8], [4, 10, 10, 10, 13],\n                    [4, 3, 10, 10, 10], [4, 8, 10, 10, 10], [4, 13, 10, 10,\n                                                             10]] * 3\n    perms = [[0, 4, 1, 2, 3]] * 3 + [[0, 2, 3, 4, 1]] * 3 + [[\n        4, 1, 2, 3, 0\n    ]] * 6 + [[1, 2, 3, 4, 0]] * 6\n\n    datatypes = [np.int8, np.float16, np.float32, np.float64, np.complex128]\n    for datatype in datatypes:\n      for input_shape, perm in zip(large_shapes, perms):\n        with self.subTest(\n            datatype=datatype, input_shape=input_shape, perm=perm):\n          total_size = np.prod(input_shape)\n          inp = np.arange(\n              1, total_size + 1, dtype=datatype).reshape(input_shape)\n          np_ans = self._np_transpose(inp, perm)\n          with self.cached_session():\n            inx = ops.convert_to_tensor(inp)\n            y = array_ops.transpose(inx, perm)\n            tf_ans = self.evaluate(y)\n          self.assertAllEqual(np_ans, tf_ans)\n          self.assertShapeEqual(np_ans, y)\n\n  def test4DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    large_shapes = [[4, 10, 10, 3], [4, 10, 10, 8], [4, 10, 10, 13],\n                    [4, 3, 10, 10], [4, 8, 10, 10], [4, 13, 10, 10]] * 3\n    perms = [[0, 3, 1, 2]] * 3 + [[0, 2, 3, 1]] * 3 + [[3, 1, 2, 0]] * 6 + [[\n        1, 2, 3, 0\n    ]] * 3 + [[2, 3, 0, 1]] * 3\n\n    for input_shape, perm in zip(large_shapes, perms):\n      with self.subTest(input_shape=input_shape, perm=perm):\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n    # shapes related to Inception (taken from conv_ops_test.py)\n    inception_shapes = [[4, 5, 5, 124], [4, 8, 8, 38], [4, 8, 8, 38], [\n        4, 8, 8, 204\n    ], [4, 8, 8, 44], [4, 8, 8, 204], [4, 8, 8, 204], [4, 8, 8, 204], [\n        4, 8, 8, 176\n    ], [4, 8, 8, 176], [4, 8, 8, 176], [4, 8, 8, 176], [4, 17, 17, 19], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 124], [4, 17, 17, 12], [4, 17, 17, 124], [4, 17, 17, 22], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 19], [4, 17, 17, 121], [4, 17, 17, 121], [4, 17, 17, 22], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 19], [4, 17, 17, 115], [4, 17, 17, 115], [4, 17, 17, 19], [\n        4, 17, 17, 16\n    ], [4, 17, 17, 115], [4, 17, 17, 102], [4, 17, 17, 12], [4, 17, 17, 102], [\n        4, 17, 17, 12\n    ], [4, 17, 17, 102], [4, 17, 17, 12], [4, 17, 17, 76], [4, 17, 17, 12], [\n        4, 17, 17, 12\n    ], [4, 17, 17, 76], [4, 17, 17, 76], [4, 35, 35, 9], [4, 35, 35, 28], [\n        4, 35, 35, 6\n    ], [4, 35, 35, 28], [4, 35, 35, 25], [4, 35, 35, 4], [4, 35, 35, 25],\n                        [4, 35, 35, 9], [4, 35, 35, 19], [4, 35, 35, 19],\n                        [4, 35, 35, 19], [4, 73, 73, 6], [4, 73, 73,\n                                                          6], [4, 147, 147, 2]]\n    for input_shape in inception_shapes:\n      with self.subTest(input_shape=input_shape):\n        perm = [0, 3, 1, 2]\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n  def test3DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    datatypes = [np.int8, np.float16, np.float32, np.float64, np.complex128]\n    large_shapes = [[4, 1000, 3], [4, 1000, 8], [4, 1000, 13], [4, 3, 1000],\n                    [4, 8, 1000], [4, 13, 1000]] * 3\n    perms = [[0, 2, 1]] * 6 + [[2, 1, 0]] * 6 + [[1, 2, 0]] * 3 + [[2, 0, 1]\n                                                                  ] * 3\n    for datatype in datatypes:\n      for input_shape, perm in zip(large_shapes, perms):\n        with self.subTest(\n            datatype=datatype, input_shape=input_shape, perm=perm):\n          total_size = np.prod(input_shape)\n          inp = np.arange(\n              1, total_size + 1, dtype=datatype).reshape(input_shape)\n          np_ans = self._np_transpose(inp, perm)\n          with self.cached_session():\n            inx = ops.convert_to_tensor(inp)\n            y = array_ops.transpose(inx, perm)\n            tf_ans = self.evaluate(y)\n          self.assertAllEqual(np_ans, tf_ans)\n          self.assertShapeEqual(np_ans, y)\n\n  def testLargeSizeGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    large_shapes = [[1000000, 31, 3], [3, 1000000, 31], [3, 31, 1000000],\n                    [10000, 310, 3], [3, 10000, 310], [3, 310, 10000],\n                    [2, 1000, 1000], [1000, 2, 1000], [1000, 1000, 2]]\n    perms = [[0, 2, 1]] * 9\n\n    for input_shape, perm in zip(large_shapes, perms):\n      with self.subTest(input_shape=input_shape, perm=perm):\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n  def testRandomizedSmallDimLargeSizeGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    # Draw 10 random shapes with large dimension sizes.\n    # 40% prob to generate dim[0] size within [1, 2047]\n    # 40% prob to generate dim[0] size within [2048, 4095]\n    # 20% prob to generate dim[0] size within [4096, 100000]\n    # 50% prob to use dim[1] as the small dim (<16)\n    num_samples = 10\n    total_size = 500000\n    small_size_limit = 2048\n    large_size_limit = 95905\n    small_size_percentage = 0.4\n    medium_size_percentage = 0.4\n    large_size_percentage = 0.2\n    perms = [[0, 2, 1]] * num_samples\n    dim_zero_sizes = []\n    dim_zero_sizes += list(\n        np.random.randint(\n            small_size_limit, size=int(small_size_percentage * num_samples)) +\n        1)\n    dim_zero_sizes += list(\n        np.random.randint(\n            small_size_limit, size=int(medium_size_percentage * num_samples)) +\n        small_size_limit)\n    dim_zero_sizes += list(\n        np.random.randint(\n            large_size_limit, size=int(large_size_percentage * num_samples)) +\n        small_size_limit * 2)\n    input_shapes = []\n    small_dim_limit = 16\n    for dim_zero_size in dim_zero_sizes:\n      small_dim_size = np.random.randint(small_dim_limit - 1) + 1\n      large_dim_size = int(\n          total_size / dim_zero_size / small_dim_size) + small_dim_limit\n      input_shapes += ([[dim_zero_size, small_dim_size, large_dim_size]]\n                       if np.random.randint(2) else\n                       [[dim_zero_size, large_dim_size, small_dim_size]])\n\n    for input_shape, perm in zip(input_shapes, perms):\n      # generate input data with random ints from 0 to 9.\n      with self.subTest(input_shape=input_shape, perm=perm):\n        inp = np.random.randint(10, size=input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n        self._ClearCachedSession()\n\n  def testNop(self):\n    self._compareCpu(np.arange(0, 6).reshape([3, 2]).astype(np.float32), [0, 1])\n\n  def testSimple(self):\n    self._compareCpu(\n        np.arange(0, 8).reshape([2, 4]).astype(np.float32),\n        np.array([1, 0]).astype(np.int32))\n\n  def testPermType(self):\n    for perm_dtype in [np.int64, np.int32]:\n      with self.subTest(perm_dtype=perm_dtype):\n        x = np.arange(0, 8).reshape([2, 4]).astype(np.float32)\n        p = np.array([1, 0]).astype(perm_dtype)\n        np_ans = np.copy(x).transpose(p)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(x)\n          inp = constant_op.constant(p)\n          y = array_ops.transpose(inx, inp)\n          tf_ans = self.evaluate(y)\n          self.assertShapeEqual(np_ans, y)\n          self.assertAllEqual(np_ans, tf_ans)\n\n  def testHalf(self):\n    self._compare(np.arange(0, 21).reshape([3, 7]).astype(np.float16))\n    self._compare(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float16))\n    self._compare(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float16))\n\n  def testFloat(self):\n    self._compare_cpu_gpu(np.arange(0, 21).reshape([3, 7]).astype(np.float32))\n    self._compare_cpu_gpu(\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float32))\n    self._compare_cpu_gpu(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float32))\n\n  def testDouble(self):\n    self._compare_cpu_gpu(np.arange(0, 21).reshape([3, 7]).astype(np.float64))\n    self._compare_cpu_gpu(\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float64))\n    self._compare_cpu_gpu(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float64))\n\n  def testComplex64(self):\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 21).reshape([3, 7]).astype(np.complex64))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.complex64))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.complex64))\n\n  def testComplex128(self):\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 21).reshape([3, 7]).astype(np.complex128))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.complex128))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.complex128))\n\n  def testInt8(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int8))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int8))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int8))\n\n  def testInt16(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int16))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int16))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int16))\n\n  def testInt32(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int32))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int32))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int32))\n\n  def testInt64(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int64))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int64))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int64))\n\n  def testTranspose2DAuto(self):\n    x_np = [[1, 2, 3], [4, 5, 6]]\n    for use_gpu in [False, True]:\n      with self.subTest(use_gpu=use_gpu):\n        with self.cached_session(use_gpu=use_gpu):\n          x_tf = array_ops.transpose(x_np)\n          self.assertAllEqual(x_tf, [[1, 4], [2, 5], [3, 6]])\n\n  def testSingletonDims(self):\n    # A singleton dimension is a dimension i with shape[i] == 1. Such dimensions\n    # can be collapsed and expanded using reshape without changing the\n    # underlying data storage. If all non-singleton dimensions remain in\n    # ascending order, the shuffled singletons will be transposed by a reshape,\n    # saving a memory allocation & copy. Since this gets a special code-path in\n    # transpose_op.cc, we test that the codepath is exercised and the results\n    # are as expected; we do not test that we save the memory allocation and\n    # copy here.\n    for shape in [[2, 1, 2], [2, 1, 2, 1, 1, 2], [1, 2, 2, 1, 1, 1],\n                  [1, 1, 1, 2, 2, 2], [2, 2, 1, 1, 1]]:\n      with self.subTest(shape=shape):\n        self._compare_cpu_gpu(\n            np.arange(np.prod(shape)).reshape(shape).astype(np.float32))\n\n  def testTransposeShapes(self):\n    self.assertEqual([],\n                     array_ops.transpose(\n                         constant_op.constant(1, dtype=dtypes.int32,\n                                              shape=[])).get_shape().dims)\n    self.assertEqual([100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100])).get_shape().dims)\n    self.assertEqual([37, 100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100, 37])).get_shape().dims)\n    self.assertEqual([100, 37],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32, shape=[100, 37]),\n                         [0, 1]).get_shape().dims)\n    self.assertEqual([15, 37, 100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100, 37, 15])).get_shape().dims)\n    self.assertEqual([15, 100, 37],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32, shape=[100, 37, 15]),\n                         [2, 0, 1]).get_shape().dims)\n\n  def testTransposeDynamicShapes(self):\n    @def_function.function(input_signature=[\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n    ])\n    def transpose(x):\n      y = array_ops.transpose(x)\n      self.assertEqual(y.shape, tensor_shape.TensorShape(None))\n      return y\n\n    x = constant_op.constant([[1, 2, 3], [4, 5, 6]])  # Shape (2, 3)\n    expected_transpose = constant_op.constant([[1, 4], [2, 5],\n                                               [3, 6]])  # Shape (3, 2)\n    self.assertAllEqual(expected_transpose, transpose(x))\n\n    @def_function.function(input_signature=[\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n    ])\n    def transpose_with_perm(x, perm):\n      y = array_ops.transpose(x, perm)\n      self.assertEqual(y.shape, tensor_shape.TensorShape(None))\n      return y\n\n    self.assertAllEqual(x, transpose_with_perm(x, [0, 1]))\n\n  def testNullTensor(self):\n    with self.cached_session():\n      x = constant_op.constant([], dtype=dtypes.float32, shape=[1, 4, 0])\n      xt = array_ops.transpose(x, [0, 2, 1])\n      self.assertAllEqual(xt.shape, (1, 0, 4))\n\n  def testScalar(self):\n    with self.cached_session():\n      x = constant_op.constant(42, dtype=dtypes.float32, shape=[])\n      xt = array_ops.transpose(x)\n      self.assertAllEqual(xt, x)\n\n  def _testError(self, x, p, err):\n    with self.cached_session():\n      with self.assertRaisesOpError(err):\n        self.evaluate(array_ops.transpose(x, p))\n\n  def testError(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"must be rank 1\"):\n      array_ops.transpose(\n          np.arange(0., 30).reshape([2, 3, 5]), [[0, 1], [2, 3]])\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"3 is out of range\"):\n      array_ops.transpose(np.arange(0., 30).reshape([2, 3, 5]), [0, 1, 3])\n    self._testError(\n        np.arange(0., 30).reshape([2, 3, 5]), [0, 1, 1], \"2 is missing\")\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#ifndef TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n#define TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n\n#include <numeric>\n#include <string>\n#include <vector>\n\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n// Transpose tensor 'in' into tensor 'out' according to dimension\n// permutation 'perm'.\n//\n// REQUIRES: in.dtype() == out->dtype()\n// REQUIRES: in.dims() == out->dims()\n// REQUIRES: in.dims() == perm.size()\n// REQUIRES: in.dim_size(perm[i]) == out->dim_size(i)\ntemplate <typename Device>\nStatus DoTranspose(const Device& device, const Tensor& in,\n                   const gtl::ArraySlice<int32> perm, Tensor* out);\n\n// Conjugate and transpose tensor 'in' into tensor 'out' according to dimension\n// permutation 'perm'.\n//\n// REQUIRES: in.dtype() == out->dtype()\n// REQUIRES: in.dims() == out->dims()\n// REQUIRES: in.dims() == perm.size()\n// REQUIRES: in.dim_size(perm[i]) == out->dim_size(i)\ntemplate <typename Device>\nStatus DoConjugateTranspose(const Device& device, const Tensor& in,\n                            const gtl::ArraySlice<int32> perm, Tensor* out);\n\n// Convenience versions of DoTranspose that only swap the last (inner) two\n// dimensions.\ntemplate <typename Device>\nStatus DoMatrixTranspose(const Device& device, const Tensor& in, Tensor* out);\n\n// Convenience versions of DoConjugateTranspose that only swap the last (inner)\n// two dimensions.\ntemplate <typename Device>\nStatus DoConjugateMatrixTranspose(const Device& device, const Tensor& in,\n                                  Tensor* out);\n\n// Primary device specific functor to be specialized for each device and type.\ntemplate <typename Device, typename T, bool conjugate = false>\nstruct Transpose {\n  static void run(const Device& d, const Tensor& in,\n                  const gtl::ArraySlice<int32> perm, Tensor* out);\n};\n\n// Implementation details.\nnamespace internal {\n\ntypedef gtl::InlinedVector<int64, 8> TransposeDimsVec;\ntypedef gtl::InlinedVector<int32, 8> TransposePermsVec;\n\n// Helper function that takes a tensor shape, a permutation, combines the\n// neighboring shapes if their indices in the permutation are consecutive.\n// The function outputs the combined shape and new permutation.\n// Example: Tensor shape {2, 3, 4, 5, 120} and permutation {0, 4, 1, 2, 3} will\n// produce new shape {2, 60, 120} and new permutation {0, 2, 1}.\ninline void ReduceTransposeDimensions(const TensorShape& shape,\n                                      gtl::ArraySlice<int32> perm,\n                                      TransposePermsVec* new_perm,\n                                      TransposeDimsVec* new_dims) {\n  CHECK_EQ(shape.dims(), perm.size());\n  if (shape.dims() == 1) {\n    // If input dimension is already 1, no need to reduce dimension.\n    new_perm->resize(1);\n    (*new_perm)[0] = perm[0];\n    (*new_dims)[0] = shape.dim_size(0);\n    return;\n  }\n  TransposePermsVec new_dim_position(shape.dims(), -1);\n  TransposeDimsVec combined_dims(shape.dims(), 0);\n  int cur_head = perm[0];\n  new_dim_position[cur_head] = 0;\n  combined_dims[0] = shape.dim_size(cur_head);\n  int dim_idx = 0;\n  for (int perm_idx = 1; perm_idx < shape.dims(); ++perm_idx) {\n    // If two indices in permutation are consecutive numbers, combine their\n    // dimensions.\n    if (cur_head + 1 == perm[perm_idx]) {\n      cur_head = perm[perm_idx];\n      combined_dims[dim_idx] *= shape.dim_size(cur_head);\n    } else {\n      // Else start a new dimension.\n      cur_head = perm[perm_idx];\n      dim_idx++;\n      new_dim_position[cur_head] = dim_idx;\n      combined_dims[dim_idx] = shape.dim_size(cur_head);\n    }\n  }\n  // Compact the new permutations and dimension sizes.\n  new_perm->resize(dim_idx + 1);\n  new_dims->resize(dim_idx + 1);\n  dim_idx = 0;\n  for (int i = 0; i < new_dim_position.size(); ++i) {\n    if (new_dim_position[i] >= 0) {\n      int new_perm_idx = new_dim_position[i];\n      (*new_perm)[dim_idx] = new_perm_idx;\n      (*new_dims)[dim_idx] = combined_dims[new_perm_idx];\n      dim_idx++;\n    }\n  }\n}\n\n// If all non-singleton dimensions remain in ascending order, the shuffled\n// singletons can be transposed by a reshape, saving a memory allocation & copy.\n// |permutation| must be a permutation of {0, .., input_shape.dims() - 1}.\n// That is, for all i, 0 <= perm[i] < input_shape.dims().\n// In practice, this is checked in TransposeOp::Compute prior to calling this\n// function, and the function sits here to facilitate unit testing.\ninline bool NonSingletonDimensionsAlign(const TensorShape& input_shape,\n                                        const std::vector<int32>& permutation) {\n  int last_nonsingleton_perm_dim = -1;\n  for (int perm_dim : permutation) {\n    if (input_shape.dim_size(perm_dim) == 1) {\n      continue;\n    }\n    if (perm_dim < last_nonsingleton_perm_dim) {\n      return false;\n    }\n    last_nonsingleton_perm_dim = perm_dim;\n  }\n  return true;\n}\n\n// Uses Eigen to transpose.\ntemplate <typename Device, typename T, int NDIMS>\nvoid TransposeUsingEigen(const Device& d, const Tensor& in,\n                         const gtl::ArraySlice<int32> perm, bool conjugate,\n                         Tensor* out) {\n  Eigen::array<int, NDIMS> p;\n  for (int i = 0; i < NDIMS; ++i) p[i] = perm[i];\n  auto x = typename TTypes<T, NDIMS>::ConstTensor(\n      reinterpret_cast<const T*>(in.tensor_data().data()),\n      in.shape().AsEigenDSizes<NDIMS>());\n  auto y = typename TTypes<T, NDIMS>::Tensor(\n      reinterpret_cast<T*>(const_cast<char*>(out->tensor_data().data())),\n      out->shape().AsEigenDSizes<NDIMS>());\n  if (conjugate) {\n    y.device(d) = x.conjugate().shuffle(p);\n  } else {\n    y.device(d) = x.shuffle(p);\n  }\n}\n\ntemplate <typename Device>\nStatus DoTransposeImpl(const Device& d, const Tensor& in,\n                       const gtl::ArraySlice<int32> perm, bool conjugate,\n                       Tensor* out) {\n  CHECK_EQ(in.dims(), out->dims());\n  CHECK_EQ(in.dims(), perm.size());\n  CHECK_EQ(in.dtype(), out->dtype());\n  switch (in.dtype()) {\n    case DT_BOOL:\n    case DT_INT8:\n    case DT_QINT8:\n    case DT_QUINT8:\n    case DT_UINT8:\n      Transpose<Device, uint8>::run(d, in, perm, out);\n      break;\n\n    case DT_BFLOAT16:\n    case DT_HALF:\n    case DT_INT16:\n    case DT_QINT16:\n    case DT_QUINT16:\n    case DT_UINT16:\n      Transpose<Device, uint16>::run(d, in, perm, out);\n      break;\n\n    case DT_FLOAT:\n    case DT_INT32:\n    case DT_QINT32:\n    case DT_UINT32:\n      Transpose<Device, uint32>::run(d, in, perm, out);\n      break;\n\n    case DT_DOUBLE:\n    case DT_INT64:\n    case DT_UINT64:\n      Transpose<Device, uint64>::run(d, in, perm, out);\n      break;\n\n    case DT_COMPLEX64:\n      if (conjugate) {\n#if defined(__ANDROID__) and !defined(__clang__)\n        // Workaround for GCC compiler bug in Android toolchain.\n        return errors::Unimplemented(\n            \"Conjugate transpose of complex64 not supported for GCC on \"\n            \"Android.\");\n#else\n        Transpose<Device, complex64, /*conjugate=*/true>::run(d, in, perm, out);\n#endif\n      } else {\n        Transpose<Device, uint64>::run(d, in, perm, out);\n      }\n      break;\n\n    case DT_COMPLEX128:\n      if (conjugate) {\n        Transpose<Device, complex128, /*conjugate=*/true>::run(d, in, perm,\n                                                               out);\n      } else {\n        Transpose<Device, complex128, /*conjugate=*/false>::run(d, in, perm,\n                                                                out);\n      }\n      break;\n\n    case DT_STRING:\n      Transpose<Device, tstring>::run(d, in, perm, out);\n      break;\n\n    default:\n      return errors::Unimplemented(\"Unsupported dtype on CPU: \", in.dtype());\n  }\n  return Status::OK();\n}\n\ntemplate <typename Device>\ninline Status DoMatrixTransposeImpl(const Device& device, const Tensor& in,\n                                    bool conjugate, Tensor* out) {\n  const int ndims = in.dims();\n  if (ndims == 0) return Status::OK();\n  TransposePermsVec perm(ndims);\n  std::iota(perm.begin(), perm.end(), 0);\n  std::swap(perm[ndims - 2], perm[ndims - 1]);\n  return DoTransposeImpl(device, in, perm, conjugate, out);\n}\n\n}  // namespace internal\n}  // namespace tensorflow\n\n#endif  // TENSORFLOW_CORE_KERNELS_TRANSPOSE_FUNCTOR_H_\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for Transpose op.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport itertools\n\nimport numpy as np\n\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_shape\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gradient_checker_v2\nfrom tensorflow.python.platform import test\n\n\nclass TransposeTest(test.TestCase):\n\n  def _np_transpose(self, x, perm):\n    ret = np.copy(x)\n    ret = ret.transpose(perm)\n    return ret\n\n  def _compareCpu(self, x, p, conjugate=False):\n    if p is None:\n      rank = x.ndim\n      perm = (rank - 1) - np.arange(rank)\n    else:\n      perm = p\n    np_ans = self._np_transpose(x, perm)\n    if conjugate:\n      np_ans = np.conj(np_ans)\n    with self.cached_session(use_gpu=False):\n      inx = ops.convert_to_tensor(x)\n      y = array_ops.transpose(inx, p, conjugate=conjugate)\n      tf_ans = self.evaluate(y)\n      self.assertShapeEqual(np_ans, y)\n      self.assertAllEqual(np_ans, tf_ans)\n\n      jacob_t = None\n      # Gradient check on CPU.\n      if x.dtype in [np.float32, np.complex64]:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-3, 1e-3)\n      elif x.dtype in [np.float64, np.complex128]:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-6, 1e-6)\n\n      return tf_ans, jacob_t\n\n  def _compareGpu(self, x, p, conjugate=False):\n    if p is None:\n      rank = x.ndim\n      perm = (rank - 1) - np.arange(rank)\n    else:\n      perm = p\n    np_ans = self._np_transpose(x, perm)\n    if conjugate:\n      np_ans = np.conj(np_ans)\n    with self.cached_session():\n      inx = ops.convert_to_tensor(x)\n      y = array_ops.transpose(inx, p, conjugate=conjugate)\n      tf_ans = self.evaluate(y)\n\n      self.assertAllEqual(np_ans, tf_ans)\n      self.assertShapeEqual(np_ans, y)\n\n      jacob_t = None\n      # Gradient check on GPU.\n      if x.dtype == np.float32:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-3, 1e-3)\n      elif x.dtype == np.float64:\n        jacob_t, jacob_n = gradient_checker_v2.compute_gradient(\n            lambda x: array_ops.transpose(x, p, conjugate=conjugate), [inx])\n        self.assertAllClose(jacob_t, jacob_n, 1e-6, 1e-6)\n\n      return tf_ans, jacob_t\n\n  def _compare(self, x, use_gpu=False):\n    n = np.ndim(x)\n    # generate all permutations of [0, 1, ... n-1] in random order.\n    all_perm = np.random.permutation(\n        [p for p in itertools.permutations(range(n))]).astype(np.int32)\n    cs = [False, True] if x.dtype in [np.complex64, np.complex128] else [False]\n    for c in cs:\n      for p in all_perm[:2]:\n        self._compareCpu(x, p, conjugate=c)\n        if use_gpu:\n          self._compareGpu(x, p, conjugate=c)\n    # Test with an empty permutation\n    for c in cs:\n      self._compareCpu(x, None, conjugate=c)\n      if use_gpu:\n        self._compareGpu(x, None, conjugate=c)\n\n  def _compare_cpu_gpu(self, x):\n    n = np.ndim(x)\n    # generate all permutation of [0, 1, ... n-1] in random order,\n    # choose the first two.\n    perms = itertools.permutations(range(n))\n    for _ in range(2):\n      p = np.random.permutation(next(perms)).astype(np.int32) if n > 1 else None\n      tf_a_cpu, tf_g_cpu = self._compareCpu(x, p)\n      tf_a_gpu, tf_g_gpu = self._compareGpu(x, p)\n      assert tf_g_cpu is not None\n      assert tf_g_gpu is not None\n      if x.dtype == np.float32:\n        self.assertAllClose(tf_a_cpu, tf_a_gpu, 1e-3, 1e-3)\n        self.assertAllClose(tf_g_cpu, tf_g_gpu, 1e-3, 1e-3)\n      elif x.dtype == np.float64:\n        self.assertAllClose(tf_a_cpu, tf_a_gpu, 1e-6, 1e-6)\n        self.assertAllClose(tf_g_cpu, tf_g_gpu, 1e-6, 1e-6)\n\n  def _testBoth(self, x):\n    self._compare(x, use_gpu=False)\n    self._compare(x, use_gpu=True)\n\n  def testRank1(self):\n    self._compareCpu(np.arange(0., 2), [0])\n\n  def test1D(self):\n    vector = np.arange(0, 2).reshape((1, 1, 1, 2, 1))\n    self._compare(vector, use_gpu=False)\n    self._compare(vector, use_gpu=True)\n\n  def test5DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    large_shapes = [[4, 10, 10, 10, 3], [4, 10, 10, 10, 8], [4, 10, 10, 10, 13],\n                    [4, 3, 10, 10, 10], [4, 8, 10, 10, 10], [4, 13, 10, 10,\n                                                             10]] * 3\n    perms = [[0, 4, 1, 2, 3]] * 3 + [[0, 2, 3, 4, 1]] * 3 + [[\n        4, 1, 2, 3, 0\n    ]] * 6 + [[1, 2, 3, 4, 0]] * 6\n\n    datatypes = [np.int8, np.float16, np.float32, np.float64, np.complex128]\n    for datatype in datatypes:\n      for input_shape, perm in zip(large_shapes, perms):\n        with self.subTest(\n            datatype=datatype, input_shape=input_shape, perm=perm):\n          total_size = np.prod(input_shape)\n          inp = np.arange(\n              1, total_size + 1, dtype=datatype).reshape(input_shape)\n          np_ans = self._np_transpose(inp, perm)\n          with self.cached_session():\n            inx = ops.convert_to_tensor(inp)\n            y = array_ops.transpose(inx, perm)\n            tf_ans = self.evaluate(y)\n          self.assertAllEqual(np_ans, tf_ans)\n          self.assertShapeEqual(np_ans, y)\n\n  def test4DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    large_shapes = [[4, 10, 10, 3], [4, 10, 10, 8], [4, 10, 10, 13],\n                    [4, 3, 10, 10], [4, 8, 10, 10], [4, 13, 10, 10]] * 3\n    perms = [[0, 3, 1, 2]] * 3 + [[0, 2, 3, 1]] * 3 + [[3, 1, 2, 0]] * 6 + [[\n        1, 2, 3, 0\n    ]] * 3 + [[2, 3, 0, 1]] * 3\n\n    for input_shape, perm in zip(large_shapes, perms):\n      with self.subTest(input_shape=input_shape, perm=perm):\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n    # shapes related to Inception (taken from conv_ops_test.py)\n    inception_shapes = [[4, 5, 5, 124], [4, 8, 8, 38], [4, 8, 8, 38], [\n        4, 8, 8, 204\n    ], [4, 8, 8, 44], [4, 8, 8, 204], [4, 8, 8, 204], [4, 8, 8, 204], [\n        4, 8, 8, 176\n    ], [4, 8, 8, 176], [4, 8, 8, 176], [4, 8, 8, 176], [4, 17, 17, 19], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 124], [4, 17, 17, 12], [4, 17, 17, 124], [4, 17, 17, 22], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 19], [4, 17, 17, 121], [4, 17, 17, 121], [4, 17, 17, 22], [\n        4, 17, 17, 19\n    ], [4, 17, 17, 19], [4, 17, 17, 115], [4, 17, 17, 115], [4, 17, 17, 19], [\n        4, 17, 17, 16\n    ], [4, 17, 17, 115], [4, 17, 17, 102], [4, 17, 17, 12], [4, 17, 17, 102], [\n        4, 17, 17, 12\n    ], [4, 17, 17, 102], [4, 17, 17, 12], [4, 17, 17, 76], [4, 17, 17, 12], [\n        4, 17, 17, 12\n    ], [4, 17, 17, 76], [4, 17, 17, 76], [4, 35, 35, 9], [4, 35, 35, 28], [\n        4, 35, 35, 6\n    ], [4, 35, 35, 28], [4, 35, 35, 25], [4, 35, 35, 4], [4, 35, 35, 25],\n                        [4, 35, 35, 9], [4, 35, 35, 19], [4, 35, 35, 19],\n                        [4, 35, 35, 19], [4, 73, 73, 6], [4, 73, 73,\n                                                          6], [4, 147, 147, 2]]\n    for input_shape in inception_shapes:\n      with self.subTest(input_shape=input_shape):\n        perm = [0, 3, 1, 2]\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n  def test3DGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    datatypes = [np.int8, np.float16, np.float32, np.float64, np.complex128]\n    large_shapes = [[4, 1000, 3], [4, 1000, 8], [4, 1000, 13], [4, 3, 1000],\n                    [4, 8, 1000], [4, 13, 1000]] * 3\n    perms = [[0, 2, 1]] * 6 + [[2, 1, 0]] * 6 + [[1, 2, 0]] * 3 + [[2, 0, 1]\n                                                                  ] * 3\n    for datatype in datatypes:\n      for input_shape, perm in zip(large_shapes, perms):\n        with self.subTest(\n            datatype=datatype, input_shape=input_shape, perm=perm):\n          total_size = np.prod(input_shape)\n          inp = np.arange(\n              1, total_size + 1, dtype=datatype).reshape(input_shape)\n          np_ans = self._np_transpose(inp, perm)\n          with self.cached_session():\n            inx = ops.convert_to_tensor(inp)\n            y = array_ops.transpose(inx, perm)\n            tf_ans = self.evaluate(y)\n          self.assertAllEqual(np_ans, tf_ans)\n          self.assertShapeEqual(np_ans, y)\n\n  def testLargeSizeGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    large_shapes = [[1000000, 31, 3], [3, 1000000, 31], [3, 31, 1000000],\n                    [10000, 310, 3], [3, 10000, 310], [3, 310, 10000],\n                    [2, 1000, 1000], [1000, 2, 1000], [1000, 1000, 2]]\n    perms = [[0, 2, 1]] * 9\n\n    for input_shape, perm in zip(large_shapes, perms):\n      with self.subTest(input_shape=input_shape, perm=perm):\n        total_size = np.prod(input_shape)\n        inp = np.arange(\n            1, total_size + 1, dtype=np.float32).reshape(input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n\n  def testRandomizedSmallDimLargeSizeGPU(self):\n    # If no GPU available, skip the test\n    if not test.is_gpu_available(cuda_only=True):\n      return\n\n    # Draw 10 random shapes with large dimension sizes.\n    # 40% prob to generate dim[0] size within [1, 2047]\n    # 40% prob to generate dim[0] size within [2048, 4095]\n    # 20% prob to generate dim[0] size within [4096, 100000]\n    # 50% prob to use dim[1] as the small dim (<16)\n    num_samples = 10\n    total_size = 500000\n    small_size_limit = 2048\n    large_size_limit = 95905\n    small_size_percentage = 0.4\n    medium_size_percentage = 0.4\n    large_size_percentage = 0.2\n    perms = [[0, 2, 1]] * num_samples\n    dim_zero_sizes = []\n    dim_zero_sizes += list(\n        np.random.randint(\n            small_size_limit, size=int(small_size_percentage * num_samples)) +\n        1)\n    dim_zero_sizes += list(\n        np.random.randint(\n            small_size_limit, size=int(medium_size_percentage * num_samples)) +\n        small_size_limit)\n    dim_zero_sizes += list(\n        np.random.randint(\n            large_size_limit, size=int(large_size_percentage * num_samples)) +\n        small_size_limit * 2)\n    input_shapes = []\n    small_dim_limit = 16\n    for dim_zero_size in dim_zero_sizes:\n      small_dim_size = np.random.randint(small_dim_limit - 1) + 1\n      large_dim_size = int(\n          total_size / dim_zero_size / small_dim_size) + small_dim_limit\n      input_shapes += ([[dim_zero_size, small_dim_size, large_dim_size]]\n                       if np.random.randint(2) else\n                       [[dim_zero_size, large_dim_size, small_dim_size]])\n\n    for input_shape, perm in zip(input_shapes, perms):\n      # generate input data with random ints from 0 to 9.\n      with self.subTest(input_shape=input_shape, perm=perm):\n        inp = np.random.randint(10, size=input_shape)\n        np_ans = self._np_transpose(inp, perm)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(inp)\n          y = array_ops.transpose(inx, perm)\n          tf_ans = self.evaluate(y)\n        self.assertAllEqual(np_ans, tf_ans)\n        self.assertShapeEqual(np_ans, y)\n        self._ClearCachedSession()\n\n  def testNop(self):\n    self._compareCpu(np.arange(0, 6).reshape([3, 2]).astype(np.float32), [0, 1])\n\n  def testSimple(self):\n    self._compareCpu(\n        np.arange(0, 8).reshape([2, 4]).astype(np.float32),\n        np.array([1, 0]).astype(np.int32))\n\n  def testPermType(self):\n    for perm_dtype in [np.int64, np.int32]:\n      with self.subTest(perm_dtype=perm_dtype):\n        x = np.arange(0, 8).reshape([2, 4]).astype(np.float32)\n        p = np.array([1, 0]).astype(perm_dtype)\n        np_ans = np.copy(x).transpose(p)\n        with self.cached_session():\n          inx = ops.convert_to_tensor(x)\n          inp = constant_op.constant(p)\n          y = array_ops.transpose(inx, inp)\n          tf_ans = self.evaluate(y)\n          self.assertShapeEqual(np_ans, y)\n          self.assertAllEqual(np_ans, tf_ans)\n\n  def testHalf(self):\n    self._compare(np.arange(0, 21).reshape([3, 7]).astype(np.float16))\n    self._compare(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float16))\n    self._compare(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float16))\n\n  def testFloat(self):\n    self._compare_cpu_gpu(np.arange(0, 21).reshape([3, 7]).astype(np.float32))\n    self._compare_cpu_gpu(\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float32))\n    self._compare_cpu_gpu(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float32))\n\n  def testDouble(self):\n    self._compare_cpu_gpu(np.arange(0, 21).reshape([3, 7]).astype(np.float64))\n    self._compare_cpu_gpu(\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.float64))\n    self._compare_cpu_gpu(\n        np.arange(0, 16).reshape([1, 2, 1, 2, 1, 2, 1, 2]).astype(np.float64))\n\n  def testComplex64(self):\n    self._testBoth(np.array(np.complex(1, 2)).astype(np.complex64))\n    self._testBoth(np.complex(1, 2) * np.arange(0, 21).astype(np.complex64))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 21).reshape([3, 7]).astype(np.complex64))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.complex64))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.complex64))\n\n  def testComplex128(self):\n    self._testBoth(np.array(np.complex(1, 2)).astype(np.complex128))\n    self._testBoth(np.complex(1, 2) * np.arange(0, 21).astype(np.complex128))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 21).reshape([3, 7]).astype(np.complex128))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.complex128))\n    self._testBoth(\n        np.complex(1, 2) *\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.complex128))\n\n  def testInt8(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int8))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int8))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int8))\n\n  def testInt16(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int16))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int16))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int16))\n\n  def testInt32(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int32))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int32))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int32))\n\n  def testInt64(self):\n    self._testBoth(np.arange(0, 21).reshape([3, 7]).astype(np.int64))\n    self._testBoth(np.arange(0, 210).reshape([2, 3, 5, 7]).astype(np.int64))\n    self._testBoth(\n        np.arange(0, 1260).reshape([2, 3, 5, 7, 2, 3]).astype(np.int64))\n\n  def testTranspose2DAuto(self):\n    x_np = [[1, 2, 3], [4, 5, 6]]\n    for use_gpu in [False, True]:\n      with self.subTest(use_gpu=use_gpu):\n        with self.cached_session(use_gpu=use_gpu):\n          x_tf = array_ops.transpose(x_np)\n          self.assertAllEqual(x_tf, [[1, 4], [2, 5], [3, 6]])\n\n  def testSingletonDims(self):\n    # A singleton dimension is a dimension i with shape[i] == 1. Such dimensions\n    # can be collapsed and expanded using reshape without changing the\n    # underlying data storage. If all non-singleton dimensions remain in\n    # ascending order, the shuffled singletons will be transposed by a reshape,\n    # saving a memory allocation & copy. Since this gets a special code-path in\n    # transpose_op.cc, we test that the codepath is exercised and the results\n    # are as expected; we do not test that we save the memory allocation and\n    # copy here.\n    for shape in [[2, 1, 2], [2, 1, 2, 1, 1, 2], [1, 2, 2, 1, 1, 1],\n                  [1, 1, 1, 2, 2, 2], [2, 2, 1, 1, 1]]:\n      with self.subTest(shape=shape):\n        self._compare_cpu_gpu(\n            np.arange(np.prod(shape)).reshape(shape).astype(np.float32))\n\n  def testTransposeShapes(self):\n    self.assertEqual([],\n                     array_ops.transpose(\n                         constant_op.constant(1, dtype=dtypes.int32,\n                                              shape=[])).get_shape().dims)\n    self.assertEqual([100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100])).get_shape().dims)\n    self.assertEqual([37, 100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100, 37])).get_shape().dims)\n    self.assertEqual([100, 37],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32, shape=[100, 37]),\n                         [0, 1]).get_shape().dims)\n    self.assertEqual([15, 37, 100],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32,\n                             shape=[100, 37, 15])).get_shape().dims)\n    self.assertEqual([15, 100, 37],\n                     array_ops.transpose(\n                         constant_op.constant(\n                             1, dtype=dtypes.int32, shape=[100, 37, 15]),\n                         [2, 0, 1]).get_shape().dims)\n\n  def testTransposeDynamicShapes(self):\n    @def_function.function(input_signature=[\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n    ])\n    def transpose(x):\n      y = array_ops.transpose(x)\n      self.assertEqual(y.shape, tensor_shape.TensorShape(None))\n      return y\n\n    x = constant_op.constant([[1, 2, 3], [4, 5, 6]])  # Shape (2, 3)\n    expected_transpose = constant_op.constant([[1, 4], [2, 5],\n                                               [3, 6]])  # Shape (3, 2)\n    self.assertAllEqual(expected_transpose, transpose(x))\n\n    @def_function.function(input_signature=[\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n        tensor_spec.TensorSpec(shape=None, dtype=dtypes.int32),\n    ])\n    def transpose_with_perm(x, perm):\n      y = array_ops.transpose(x, perm)\n      self.assertEqual(y.shape, tensor_shape.TensorShape(None))\n      return y\n\n    self.assertAllEqual(x, transpose_with_perm(x, [0, 1]))\n\n  def testNullTensor(self):\n    with self.cached_session():\n      x = constant_op.constant([], dtype=dtypes.float32, shape=[1, 4, 0])\n      xt = array_ops.transpose(x, [0, 2, 1])\n      self.assertAllEqual(xt.shape, (1, 0, 4))\n\n  def testScalar(self):\n    with self.cached_session():\n      x = constant_op.constant(42, dtype=dtypes.float32, shape=[])\n      xt = array_ops.transpose(x)\n      self.assertAllEqual(xt, x)\n\n  def _testError(self, x, p, err):\n    with self.cached_session():\n      with self.assertRaisesOpError(err):\n        self.evaluate(array_ops.transpose(x, p))\n\n  def testError(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"must be rank 1\"):\n      array_ops.transpose(\n          np.arange(0., 30).reshape([2, 3, 5]), [[0, 1], [2, 3]])\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"3 is out of range\"):\n      array_ops.transpose(np.arange(0., 30).reshape([2, 3, 5]), [0, 1, 3])\n    self._testError(\n        np.arange(0., 30).reshape([2, 3, 5]), [0, 1, 1], \"2 is missing\")\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/transpose_functor.h", "tensorflow/python/kernel_tests/transpose_op_test.py"], "buggy_code_start_loc": [21, 381], "buggy_code_end_loc": [251, 392], "fixing_code_start_loc": [22, 382], "fixing_code_end_loc": [249, 397], "type": "CWE-755", "message": "TensorFlow is an end-to-end open source platform for machine learning. Passing a complex argument to `tf.transpose` at the same time as passing `conjugate=True` argument results in a crash. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29618", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:16.277", "lastModified": "2021-07-27T17:12:09.607", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. Passing a complex argument to `tf.transpose` at the same time as passing `conjugate=True` argument results in a crash. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;al pasar un argumento complejo a \"tf.transpose\" al mismo tiempo que pasan un argumento \"conjugate=True\" resulta en un bloqueo.&#xa0;La correcci\u00f3n ser\u00e1 inclu\u00edda en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-755"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/issues/42105", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "https://github.com/tensorflow/issues/46973", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xqfj-cr6q-pc8w", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88"}}