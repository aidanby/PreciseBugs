{"buggy_code": ["<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nif ( ! class_exists( 'WP_List_Table' ) )\n\trequire_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );\n\n\nclass AAL_Activity_Log_List_Table extends WP_List_Table {\n\t\n\tprotected $_roles = array();\n\t\n\tprotected $_caps = array();\n\t\n\tprotected $_allow_caps = array();\n\t\n\tprotected function _get_allow_caps() {\n\t\tif ( empty( $this->_allow_caps ) ) {\n\t\t\t$user = get_user_by( 'id', get_current_user_id() );\n\t\t\tif ( ! $user ) {\n\t\t\t\twp_die( 'Not allowed here.' );\n\t\t\t}\n\n\t\t\t$user_cap   = strtolower( key( $user->caps ) );\n\t\t\t$allow_caps = array();\n\n\t\t\tforeach ( $this->_caps as $key => $cap_allow ) {\n\t\t\t\tif ( $key === $user_cap ) {\n\t\t\t\t\t$allow_caps = array_merge( $allow_caps, $cap_allow );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO: Find better way to Multisite compatibility.\n\t\t\tif ( is_super_admin() || current_user_can( 'view_all_aryo_activity_log' ) ) {\n\t\t\t\t$allow_caps = $this->_caps['administrator'];\n\t\t\t}\n\n\t\t\tif ( empty( $allow_caps ) ) {\n\t\t\t\twp_die( 'Not allowed here.' );\n\t\t\t}\n\n\t\t\t$this->_allow_caps = array_unique( $allow_caps );\n\t\t}\n\t\treturn $this->_allow_caps;\n\t}\n\n\tprotected function _get_where_by_role() {\n\t\t$allow_modules = array();\n\n\t\tforeach ( $this->_roles as $key => $role ) {\n\t\t\tif ( current_user_can( $key ) || current_user_can( 'view_all_aryo_activity_log' ) ) {\n\t\t\t\t$allow_modules = array_merge( $allow_modules, $role );\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $allow_modules ) ) {\n\t\t\twp_die( 'Not allowed here.' );\n\t\t}\n\n\t\t$allow_modules = array_unique( $allow_modules );\n\n\t\t$where = array();\n\t\tforeach ( $allow_modules as $type )\n\t\t\t$where[] .= '`object_type` = \\'' . $type . '\\'';\n\t\t\n\t\t$where_caps = array();\n\t\tforeach ( $this->_get_allow_caps() as $cap )\n\t\t\t$where_caps[] .= '`user_caps` = \\'' . $cap . '\\'';\n\n\t\treturn 'AND (' . implode( ' OR ', $where ) . ') AND (' . implode( ' OR ', $where_caps ) . ')';\n\t}\n\t\n\tpublic function get_action_label( $action ) {\n\t\treturn ucwords( str_replace( '_', ' ', __( $action, 'aryo-activity-log' ) ) );\n\t}\n\n\tpublic function __construct( $args = array() ) {\n\t\tparent::__construct(\n\t\t\tarray(\n\t\t\t\t'singular'  => 'activity',\n\t\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t\t)\n\t\t);\n\t\t\n\t\t$this->_roles = apply_filters(\n\t\t\t'aal_init_roles',\n\t\t\tarray(\n\t\t\t\t// admin\n\t\t\t\t'manage_options' => array( 'Core', 'Export', 'Post', 'Taxonomy', 'User', 'Options', 'Attachment', 'Plugin', 'Widget', 'Theme', 'Menu', 'Comments' ),\n\t\t\t\t// editor\n\t\t\t\t'edit_pages'     => array( 'Post', 'Taxonomy', 'Attachment', 'Comments' ),\n\t\t\t)\n\t\t);\n\n\t\t$this->_caps = apply_filters(\n\t\t\t'aal_init_caps',\n\t\t\tarray(\n\t\t\t\t'administrator' => array( 'administrator', 'editor', 'author', 'guest' ),\n\t\t\t\t'editor'        => array( 'editor', 'author', 'guest' ),\n\t\t\t\t'author'        => array( 'author', 'guest' ),\n\t\t\t)\n\t\t);\n\n\t\tadd_screen_option(\n\t\t\t'per_page',\n\t\t\tarray(\n\t\t\t\t'default' => 50,\n\t\t\t\t'label'   => __( 'Activities', 'aryo-activity-log' ),\n\t\t\t\t'option'  => 'edit_aal_logs_per_page',\n\t\t\t)\n\t\t);\n\n\t\tadd_filter( 'set-screen-option', array( &$this, 'set_screen_option' ), 10, 3 );\n\t\tset_screen_options();\n\t}\n\n\tpublic function get_columns() {\n\t\t$columns = array(\n\t\t\t'date'        => __( 'Date', 'aryo-activity-log' ),\n\t\t\t'author'      => __( 'Author', 'aryo-activity-log' ),\n\t\t\t'ip'          => __( 'IP', 'aryo-activity-log' ),\n\t\t\t'type'        => __( 'Type', 'aryo-activity-log' ),\n\t\t\t'label'       => __( 'Label', 'aryo-activity-log' ),\n\t\t\t'action'      => __( 'Action', 'aryo-activity-log' ),\n\t\t\t'description' => __( 'Description', 'aryo-activity-log' ),\n\t\t);\n\n\t\treturn $columns;\n\t}\n\t\n\tpublic function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'ip' => 'hist_ip',\n\t\t\t'date' => array( 'hist_time', true ),\n\t\t);\n\t}\n\n\tpublic function column_default( $item, $column_name ) {\n\t\t$return = '';\n\t\t\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'action' :\n\t\t\t\t$return = $this->get_action_label( $item->action );\n\t\t\t\tbreak;\n\t\t\tcase 'date' :\n\t\t\t\t$return  = sprintf( '<strong>' . __( '%s ago', 'aryo-activity-log' ) . '</strong>', human_time_diff( $item->hist_time, current_time( 'timestamp' ) ) );\n\t\t\t\t$return .= '<br />' . date( 'd/m/Y', $item->hist_time );\n\t\t\t\t$return .= '<br />' . date( 'H:i:s', $item->hist_time );\n\t\t\t\tbreak;\n\t\t\tcase 'ip' :\n\t\t\t\t$return = $item->hist_ip;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tif ( isset( $item->$column_name ) )\n\t\t\t\t\t$return = $item->$column_name;\n\t\t}\n\n\t\t$return = apply_filters( 'aal_table_list_column_default', $return, $item, $column_name );\n\t\t\n\t\treturn $return;\n\t}\n\t\n\tpublic function column_author( $item ) {\n\t\tglobal $wp_roles;\n\t\t\n\t\tif ( ! empty( $item->user_id ) && 0 !== (int) $item->user_id ) {\n\t\t\t$user = get_user_by( 'id', $item->user_id );\n\t\t\tif ( $user instanceof WP_User && 0 !== $user->ID ) {\n\t\t\t\t//$user->display_name\n\t\t\t\treturn sprintf(\n\t\t\t\t\t'<a href=\"%s\">%s <span class=\"aal-author-name\">%s</span></a><br /><small>%s</small>',\n\t\t\t\t\tget_edit_user_link( $user->ID ),\n\t\t\t\t\tget_avatar( $user->ID, 40 ),\n\t\t\t\t\t$user->display_name,\n\t\t\t\t\tisset( $user->roles[0] ) && isset( $wp_roles->role_names[ $user->roles[0] ] ) ? $wp_roles->role_names[ $user->roles[0] ] : __( 'Unknown', 'aryo-activity-log' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn sprintf(\n\t\t\t'<span class=\"aal-author-name\">%s</span>',\n\t\t\t__( 'N/A', 'aryo-activity-log' )\n\t\t);\n\t}\n\n\tpublic function column_type( $item ) {\n\t\t$return = __( $item->object_type, 'aryo-activity-log' );\n\t\t\n\t\t$return = apply_filters( 'aal_table_list_column_type', $return, $item );\n\t\treturn $return;\n\t}\n\n\tpublic function column_label( $item ) {\n\t\t$return = '';\n\t\tif ( ! empty( $item->object_subtype ) ) {\n\t\t\t$pt     = get_post_type_object( $item->object_subtype );\n\t\t\t$return = ! empty( $pt->label ) ? $pt->label : $item->object_subtype;\n\t\t}\n\n\t\t$return = apply_filters( 'aal_table_list_column_label', $return, $item );\n\t\treturn $return;\n\t}\n\t\n\tpublic function column_description( $item ) {\n\t\t$return = $item->object_name;\n\t\t\n\t\tswitch ( $item->object_type ) {\n\t\t\tcase 'Post' :\n\t\t\t\t$return = sprintf( '<a href=\"%s\">%s</a>', get_edit_post_link( $item->object_id ), $item->object_name );\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Taxonomy' :\n\t\t\t\tif ( ! empty( $item->object_id ) )\n\t\t\t\t\t$return = sprintf( '<a href=\"%s\">%s</a>', get_edit_term_link( $item->object_id, $item->object_subtype ), $item->object_name );\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Comments' :\n\t\t\t\tif ( ! empty( $item->object_id ) && $comment = get_comment( $item->object_id ) ) {\n\t\t\t\t\t$return = sprintf( '<a href=\"%s\">%s #%d</a>', get_edit_comment_link( $item->object_id ), $item->object_name, $item->object_id );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Export' :\n\t\t\t\tif ( 'all' === $item->object_name ) {\n\t\t\t\t\t$return = __( 'All', 'aryo-activity-log' );\n\t\t\t\t} else {\n\t\t\t\t\t$pt     = get_post_type_object( $item->object_name );\n\t\t\t\t\t$return = ! empty( $pt->label ) ? $pt->label : $item->object_name;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'Options' :\n\t\t\tcase 'Core' :\n\t\t\t\t$return = __( $item->object_name, 'aryo-activity-log' );\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t$return = apply_filters( 'aal_table_list_column_description', $return, $item );\n\t\t\n\t\treturn $return;\n\t}\n\t\n\tpublic function display_tablenav( $which ) {\n\t\tif ( 'top' == $which ) {\n\t\t\t$this->search_box( __( 'Search', 'aryo-activity-log' ), 'aal-search' );\n\t\t}\n\t\t?>\n\t\t<div class=\"tablenav <?php echo esc_attr( $which ); ?>\">\n\t\t\t<?php\n\t\t\t$this->extra_tablenav( $which );\n\t\t\t$this->pagination( $which );\n\t\t\t?>\n\t\t\t<br class=\"clear\" />\n\t\t</div>\n\t\t<?php\n\t}\n\t\n\tpublic function extra_tablenav_footer() {\n\t\t/**\n\t\t * Filter list of record actions\n\t\t *\n\t\t * @return array Array items should represent action_id => 'Action Title'\n\t\t */\n\t\t$actions = apply_filters( 'aal_record_actions', array() );\n\t\t?>\n\t\t\t<?php if ( count( $actions ) > 1 ) : ?>\n\t\t\t<div class=\"alignleft actions recordactions\">\n\t\t\t\t<select name=\"aal-record-action\">\n\t\t\t\t\t<option value=\"\"><?php echo esc_attr__( 'Export File Format', 'aryo-activity-log' ); ?></option>\n\t\t\t\t\t<?php foreach ( $actions as $action_key => $action_title ) : ?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $action_key ); ?>\"><?php echo esc_html( $action_title ); ?></option>\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<?php else : \n\t\t\t\t$action_title = reset( $actions );\n\t\t\t\t$action_key = key( $actions );\n\t\t\t?>\n\t\t\t<input type=\"hidden\" name=\"aal-record-action\" value=\"<?php echo esc_attr( $action_key ); ?>\">\n\t\t\t<?php endif; ?>\n\t\t\t\n\t\t\t<button type=\"submit\" name=\"aal-record-actions-submit\" id=\"record-actions-submit\" class=\"button button-primary\" value=\"1\">\n\t\t\t\t<?php \n\t\t\t\t// Is result filtering enabled?\n\t\t\t\tif ( array_key_exists( 'aal-filter', $_GET ) ) {\n\t\t\t\t\techo sprintf( esc_html__( 'Export filtered records as %s', 'aryo-activity-log' ), $action_title );\n\t\t\t\t} else {\n\t\t\t\t\techo sprintf( esc_html__( 'Export as %s', 'aryo-activity-log' ), $action_title );\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</button>\n\t\t\t\n\t\t\t<?php wp_nonce_field( 'aal_actions_nonce', 'aal_actions_nonce' ); ?>\n\t\t<?php\n\t}\n\n\tpublic function extra_tablenav( $which ) {\n\t\tglobal $wpdb;\n\t\t\n\t\tif ( 'bottom' === $which ) {\n\t\t\t$this->extra_tablenav_footer();\n\t\t}\n\n\t\tif ( 'top' !== $which )\n\t\t\treturn;\n\n\t\techo '<div class=\"alignleft actions\">';\n\n\t\t$users = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `user_id` FROM `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `user_id`\n\t\t\t\tORDER BY `user_id`\n\t\t\t;'\n\t\t);\n\n\t\t$types = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `object_type` FROM `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `object_type`\n\t\t\t\tORDER BY `object_type`\n\t\t\t;'\n\t\t);\n\n\t\t// Make sure we get items for filter.\n\t\tif ( $users || $types ) {\n\t\t\tif ( ! isset( $_REQUEST['dateshow'] ) )\n\t\t\t\t$_REQUEST['dateshow'] = '';\n\n\t\t\t$date_options = array(\n\t\t\t\t'' => __( 'All Time', 'aryo-activity-log' ),\n\t\t\t\t'today' => __( 'Today', 'aryo-activity-log' ),\n\t\t\t\t'yesterday' => __( 'Yesterday', 'aryo-activity-log' ),\n\t\t\t\t'week' => __( 'Week', 'aryo-activity-log' ),\n\t\t\t\t'month' => __( 'Month', 'aryo-activity-log' ),\n\t\t\t);\n\t\t\techo '<select name=\"dateshow\" id=\"hs-filter-date\">';\n\t\t\tforeach ( $date_options as $key => $value )\n\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['dateshow'], $key, false ), $value );\n\t\t\techo '</select>';\n\n\t\t\tsubmit_button( __( 'Filter', 'aryo-activity-log' ), 'button', 'aal-filter', false, array( 'id' => 'activity-query-submit' ) );\n\t\t}\n\n\t\tif ( $users ) {\n\t\t\tif ( ! isset( $_REQUEST['capshow'] ) )\n\t\t\t\t$_REQUEST['capshow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $this->_get_allow_caps() as $cap ) {\n\t\t\t\t$output[ $cap ] = __( ucwords( $cap ), 'aryo-activity-log' );\n\t\t\t}\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo '<select name=\"capshow\" id=\"hs-filter-capshow\">';\n\t\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Roles', 'aryo-activity-log' ) );\n\t\t\t\tforeach ( $output as $key => $value ) {\n\t\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['capshow'], $key, false ), $value );\n\t\t\t\t}\n\t\t\t\techo '</select>';\n\t\t\t}\n\t\t\t\n\t\t\tif ( ! isset( $_REQUEST['usershow'] ) )\n\t\t\t\t$_REQUEST['usershow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $users as $_user ) {\n\t\t\t\tif ( 0 === (int) $_user->user_id ) {\n\t\t\t\t\t$output[0] = __( 'N/A', 'aryo-activity-log' );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$user = get_user_by( 'id', $_user->user_id );\n\t\t\t\tif ( $user )\n\t\t\t\t\t$output[ $user->ID ] = $user->user_nicename;\n\t\t\t}\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo '<select name=\"usershow\" id=\"hs-filter-usershow\">';\n\t\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Users', 'aryo-activity-log' ) );\n\t\t\t\tforeach ( $output as $key => $value ) {\n\t\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['usershow'], $key, false ), $value );\n\t\t\t\t}\n\t\t\t\techo '</select>';\n\t\t\t}\n\t\t}\n\n\t\tif ( $types ) {\n\t\t\tif ( ! isset( $_REQUEST['typeshow'] ) )\n\t\t\t\t$_REQUEST['typeshow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $types as $type )\n\t\t\t\t$output[] = sprintf( '<option value=\"%s\"%s>%s</option>', $type->object_type, selected( $_REQUEST['typeshow'], $type->object_type, false ), __( $type->object_type, 'aryo-activity-log' ) );\n\n\t\t\techo '<select name=\"typeshow\" id=\"hs-filter-typeshow\">';\n\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Types', 'aryo-activity-log' ) );\n\t\t\techo implode( '', $output );\n\t\t\techo '</select>';\n\t\t}\n\n\n\t\t$actions = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `action` FROM  `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `action`\n\t\t\t\tORDER BY `action`\n\t\t\t;'\n\t\t);\n\n\t\tif ( $actions ) {\n\t\t\tif ( ! isset( $_REQUEST['showaction'] ) )\n\t\t\t\t$_REQUEST['showaction'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $actions as $type )\n\t\t\t\t$output[] = sprintf( '<option value=\"%s\"%s>%s</option>', $type->action, selected( $_REQUEST['showaction'], $type->action, false ), $this->get_action_label( $type->action ) );\n\n\t\t\techo '<select name=\"showaction\" id=\"hs-filter-showaction\">';\n\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Actions', 'aryo-activity-log' ) );\n\t\t\techo implode( '', $output );\n\t\t\techo '</select>';\n\t\t}\n\n\t\techo '</div>';\n\t}\n\t\n\tpublic function prepare_items() {\n\t\tglobal $wpdb;\n\t\n\t\t$items_per_page        = $this->get_items_per_page( 'edit_aal_logs_per_page', 20 );\n\t\t$this->_column_headers = array( $this->get_columns(), get_hidden_columns( $this->screen ), $this->get_sortable_columns() );\n\t\t$where                 = ' WHERE 1 = 1';\n\n\t\tif ( ! isset( $_REQUEST['order'] ) || ! in_array( $_REQUEST['order'], array( 'desc', 'asc' ) ) ) {\n\t\t\t$_REQUEST['order'] = 'DESC';\n\t\t}\n\t\tif ( ! isset( $_REQUEST['orderby'] ) || ! in_array( $_REQUEST['orderby'], array( 'hist_time', 'hist_ip' ) ) ) {\n\t\t\t$_REQUEST['orderby'] = 'hist_time';\n\t\t}\n\t\t\n\t\tif ( ! empty( $_REQUEST['typeshow'] ) ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `object_type` = %s', $_REQUEST['typeshow'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['showaction'] ) && '' !== $_REQUEST['showaction'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `action` = %s', $_REQUEST['showaction'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['usershow'] ) && '' !== $_REQUEST['usershow'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `user_id` = %d', $_REQUEST['usershow'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['capshow'] ) && '' !== $_REQUEST['capshow'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `user_caps` = %s', strtolower( $_REQUEST['capshow'] ) );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['dateshow'] ) && in_array( $_REQUEST['dateshow'], array( 'today', 'yesterday', 'week', 'month' ) ) ) {\n\t\t\t$current_time = current_time( 'timestamp' );\n\n\t\t\t// Today\n\t\t\t$start_time = mktime( 0, 0, 0, date( 'm', $current_time ), date( 'd', $current_time ), date( 'Y', $current_time ) );;\n\t\t\t$end_time = mktime( 23, 59, 59, date( 'm', $current_time ), date( 'd', $current_time ), date( 'Y', $current_time ) );\n\t\t\t\n\t\t\tif ( 'yesterday' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( 'yesterday', $start_time );\n\t\t\t\t$end_time = mktime( 23, 59, 59, date( 'm', $start_time ), date( 'd', $start_time ), date( 'Y', $start_time ) );\n\t\t\t} elseif ( 'week' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( '-1 week', $start_time );\n\t\t\t} elseif ( 'month' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( '-1 month', $start_time );\n\t\t\t}\n\t\t\t\n\t\t\t$where .= $wpdb->prepare( ' AND `hist_time` > %d AND `hist_time` < %d', $start_time, $end_time );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['s'] ) ) {\n\t\t\t// Search only searches 'description' fields.\n\t\t\t$where .= $wpdb->prepare( ' AND `object_name` LIKE %s', '%' . $wpdb->esc_like( $_REQUEST['s'] ) . '%' );\n\t\t}\n\n\t\t$offset = ( $this->get_pagenum() - 1 ) * $items_per_page;\n\n\t\t\n\t\t$total_items = $wpdb->get_var(\n\t\t\t'SELECT COUNT(`histid`) FROM  `' . $wpdb->activity_log . '`\n\t\t\t\t' . $where . '\n\t\t\t\t\t' . $this->_get_where_by_role()\n\t\t);\n\n\t\t$items_orderby = filter_input( INPUT_GET, 'orderby', FILTER_SANITIZE_STRING );\n\t\tif ( empty( $items_orderby ) ) {\n\t\t\t$items_orderby = 'hist_time'; // Sort by time by default.\n\t\t}\n\n\t\t$items_order = strtoupper( $_REQUEST['order'] );\n\t\tif ( empty( $items_order ) || ! in_array( $items_order, array( 'DESC', 'ASC' ) ) ) {\n\t\t\t$items_order = 'DESC'; // Descending order by default.\n\t\t}\n\n\t\t$this->items = $wpdb->get_results( $wpdb->prepare(\n\t\t\t'SELECT * FROM `' . $wpdb->activity_log . '`\n\t\t\t\t' . $where . '\n\t\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\t\tORDER BY ' . $items_orderby . ' ' . $items_order . '\n\t\t\t\t\tLIMIT %d, %d;',\n\t\t\t$offset,\n\t\t\t$items_per_page\n\t\t) );\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $total_items,\n\t\t\t'per_page' => $items_per_page,\n\t\t\t'total_pages' => ceil( $total_items / $items_per_page ),\n\t\t) );\n\t}\n\t\n\tpublic function set_screen_option( $status, $option, $value ) {\n\t\tif ( 'edit_aal_logs_per_page' === $option )\n\t\t\treturn $value;\n\t\treturn $status;\n\t}\n\n\tpublic function search_box( $text, $input_id ) {\n\t\t$search_data = isset( $_REQUEST['s'] ) ? sanitize_text_field( $_REQUEST['s'] ) : '';\n\n\t\t$input_id = $input_id . '-search-input';\n\t\t?>\n\t\t<p class=\"search-box\">\n\t\t\t<label class=\"screen-reader-text\" for=\"<?php echo $input_id ?>\"><?php echo $text; ?>:</label>\n\t\t\t<input type=\"search\" id=\"<?php echo $input_id ?>\" name=\"s\" value=\"<?php echo esc_attr( $search_data ); ?>\" />\n\t\t\t<?php submit_button( $text, 'button', false, false, array('id' => 'search-submit') ); ?>\n\t\t</p>\n\t<?php\n\t}\n}\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Attachment extends AAL_Hook_Base {\n\n\tprotected function _add_log_attachment( $action, $attachment_id ) {\n\t\t$post = get_post( $attachment_id );\n\n\t\taal_insert_log( array(\n\t\t\t'action'         => $action,\n\t\t\t'object_type'    => 'Attachment',\n\t\t\t'object_subtype' => $post->post_type,\n\t\t\t'object_id'      => $attachment_id,\n\t\t\t'object_name'    => get_the_title( $post->ID ),\n\t\t) );\n\t}\n\n\tpublic function hooks_delete_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'deleted', $attachment_id );\n\t}\n\n\tpublic function hooks_edit_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'updated', $attachment_id );\n\t}\n\n\tpublic function hooks_add_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'added', $attachment_id );\n\t}\n\t\n\tpublic function __construct() {\n\t\tadd_action( 'add_attachment', array( &$this, 'hooks_add_attachment' ) );\n\t\tadd_action( 'edit_attachment', array( &$this, 'hooks_edit_attachment' ) );\n\t\tadd_action( 'delete_attachment', array( &$this, 'hooks_delete_attachment' ) );\n\t\t\n\t\tparent::__construct();\n\t}\n\n}", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Comments extends AAL_Hook_Base {\n\t\n\tprotected function _add_comment_log( $id, $action, $comment = null ) {\n\t\tif ( is_null( $comment ) )\n\t\t\t$comment = get_comment( $id );\n\t\t\n\t\taal_insert_log( array(\n\t\t\t'action'         => $action,\n\t\t\t'object_type'    => 'Comments',\n\t\t\t'object_subtype' => get_post_type( $comment->comment_post_ID ),\n\t\t\t'object_name'    => get_the_title( $comment->comment_post_ID ),\n\t\t\t'object_id'      => $id,\n\t\t) );\n\t}\n\t\n\tpublic function handle_comment_log( $comment_ID, $comment = null ) {\n\t\tif ( is_null( $comment ) )\n\t\t\t$comment = get_comment( $comment_ID );\n\t\t\n\t\t$action = 'created';\n\t\tswitch ( current_filter() ) {\n\t\t\tcase 'wp_insert_comment' :\n\t\t\t\t$action = 1 === (int) $comment->comment_approved ? 'approved' : 'pending';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'edit_comment' :\n\t\t\t\t$action = 'updated';\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete_comment' :\n\t\t\t\t$action = 'deleted';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'trash_comment' :\n\t\t\t\t$action = 'trashed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'untrash_comment' :\n\t\t\t\t$action = 'untrashed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'spam_comment' :\n\t\t\t\t$action = 'spammed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'unspam_comment' :\n\t\t\t\t$action = 'unspammed';\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t$this->_add_comment_log( $comment_ID, $action, $comment );\n\t}\n\n\tpublic function hooks_transition_comment_status( $new_status, $old_status, $comment ) {\n\t\t$this->_add_comment_log( $comment->comment_ID, $new_status, $comment );\n\t}\n\n\tpublic function __construct() {\n\t\tadd_action( 'wp_insert_comment', array( &$this, 'handle_comment_log' ), 10, 2 );\n\t\tadd_action( 'edit_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'trash_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'untrash_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'spam_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'unspam_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'delete_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'transition_comment_status', array( &$this, 'hooks_transition_comment_status' ), 10, 3 );\n\t\t\n\t\tparent::__construct();\n\t}\n\t\n}", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Posts extends AAL_Hook_Base {\n\t\n\tprotected function _draft_or_post_title( $post = 0 ) {\n\t\t$title = get_the_title( $post );\n\t\t\n\t\tif ( empty( $title ) )\n\t\t\t$title = __( '(no title)', 'aryo-activity-log' );\n\t\t\n\t\treturn $title;\n\t}\n\n\tpublic function hooks_transition_post_status( $new_status, $old_status, $post ) {\n\t\tif ( 'auto-draft' === $old_status && ( 'auto-draft' !== $new_status && 'inherit' !== $new_status ) ) {\n\t\t\t// page created\n\t\t\t$action = 'created';\n\t\t}\n\t\telseif ( 'auto-draft' === $new_status || ( 'new' === $old_status && 'inherit' === $new_status ) ) {\n\t\t\t// nvm.. ignore it.\n\t\t\treturn;\n\t\t}\n\t\telseif ( 'trash' === $new_status ) {\n\t\t\t// page was deleted.\n\t\t\t$action = 'trashed';\n\t\t}\n\t\telseif ( 'trash' === $old_status ) {\n\t\t\t$action = 'restored';\n\t\t}\n\t\telse {\n\t\t\t// page updated. I guess.\n\t\t\t$action = 'updated';\n\t\t}\n\n\t\tif ( wp_is_post_revision( $post->ID ) )\n\t\t\treturn;\n\n\t\t// Skip for menu items.\n\t\tif ( 'nav_menu_item' === get_post_type( $post->ID ) )\n\t\t\treturn;\n\n\t\taal_insert_log(\n\t\t\tarray(\n\t\t\t\t'action' => $action,\n\t\t\t\t'object_type' => 'Post',\n\t\t\t\t'object_subtype' => $post->post_type,\n\t\t\t\t'object_id' => $post->ID,\n\t\t\t\t'object_name' => $this->_draft_or_post_title( $post->ID ),\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic function hooks_delete_post( $post_id ) {\n\t\tif ( wp_is_post_revision( $post_id ) )\n\t\t\treturn;\n\n\t\t$post = get_post( $post_id );\n\n\t\tif ( in_array( $post->post_status, array( 'auto-draft', 'inherit' ) ) )\n\t\t\treturn;\n\n\t\t// Skip for menu items.\n\t\tif ( 'nav_menu_item' === get_post_type( $post->ID ) )\n\t\t\treturn;\n\n\t\taal_insert_log(\n\t\t\tarray(\n\t\t\t\t'action' => 'deleted',\n\t\t\t\t'object_type' => 'Post',\n\t\t\t\t'object_subtype' => $post->post_type,\n\t\t\t\t'object_id' => $post->ID,\n\t\t\t\t'object_name' => $this->_draft_or_post_title( $post->ID ),\n\t\t\t)\n\t\t);\n\t}\n\t\n\tpublic function __construct() {\n\t\tadd_action( 'transition_post_status', array( &$this, 'hooks_transition_post_status' ), 10, 3 );\n\t\tadd_action( 'delete_post', array( &$this, 'hooks_delete_post' ) );\n\t\t\n\t\tparent::__construct();\n\t}\n}\n"], "fixing_code": ["<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nif ( ! class_exists( 'WP_List_Table' ) )\n\trequire_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );\n\n\nclass AAL_Activity_Log_List_Table extends WP_List_Table {\n\t\n\tprotected $_roles = array();\n\t\n\tprotected $_caps = array();\n\t\n\tprotected $_allow_caps = array();\n\t\n\tprotected function _get_allow_caps() {\n\t\tif ( empty( $this->_allow_caps ) ) {\n\t\t\t$user = get_user_by( 'id', get_current_user_id() );\n\t\t\tif ( ! $user ) {\n\t\t\t\twp_die( 'Not allowed here.' );\n\t\t\t}\n\n\t\t\t$user_cap   = strtolower( key( $user->caps ) );\n\t\t\t$allow_caps = array();\n\n\t\t\tforeach ( $this->_caps as $key => $cap_allow ) {\n\t\t\t\tif ( $key === $user_cap ) {\n\t\t\t\t\t$allow_caps = array_merge( $allow_caps, $cap_allow );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO: Find better way to Multisite compatibility.\n\t\t\tif ( is_super_admin() || current_user_can( 'view_all_aryo_activity_log' ) ) {\n\t\t\t\t$allow_caps = $this->_caps['administrator'];\n\t\t\t}\n\n\t\t\tif ( empty( $allow_caps ) ) {\n\t\t\t\twp_die( 'Not allowed here.' );\n\t\t\t}\n\n\t\t\t$this->_allow_caps = array_unique( $allow_caps );\n\t\t}\n\t\treturn $this->_allow_caps;\n\t}\n\n\tprotected function _get_where_by_role() {\n\t\t$allow_modules = array();\n\n\t\tforeach ( $this->_roles as $key => $role ) {\n\t\t\tif ( current_user_can( $key ) || current_user_can( 'view_all_aryo_activity_log' ) ) {\n\t\t\t\t$allow_modules = array_merge( $allow_modules, $role );\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $allow_modules ) ) {\n\t\t\twp_die( 'Not allowed here.' );\n\t\t}\n\n\t\t$allow_modules = array_unique( $allow_modules );\n\n\t\t$where = array();\n\t\tforeach ( $allow_modules as $type )\n\t\t\t$where[] .= '`object_type` = \\'' . $type . '\\'';\n\t\t\n\t\t$where_caps = array();\n\t\tforeach ( $this->_get_allow_caps() as $cap )\n\t\t\t$where_caps[] .= '`user_caps` = \\'' . $cap . '\\'';\n\n\t\treturn 'AND (' . implode( ' OR ', $where ) . ') AND (' . implode( ' OR ', $where_caps ) . ')';\n\t}\n\t\n\tpublic function get_action_label( $action ) {\n\t\treturn ucwords( str_replace( '_', ' ', __( $action, 'aryo-activity-log' ) ) );\n\t}\n\n\tpublic function __construct( $args = array() ) {\n\t\tparent::__construct(\n\t\t\tarray(\n\t\t\t\t'singular'  => 'activity',\n\t\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t\t)\n\t\t);\n\t\t\n\t\t$this->_roles = apply_filters(\n\t\t\t'aal_init_roles',\n\t\t\tarray(\n\t\t\t\t// admin\n\t\t\t\t'manage_options' => array( 'Core', 'Export', 'Post', 'Taxonomy', 'User', 'Options', 'Attachment', 'Plugin', 'Widget', 'Theme', 'Menu', 'Comments' ),\n\t\t\t\t// editor\n\t\t\t\t'edit_pages'     => array( 'Post', 'Taxonomy', 'Attachment', 'Comments' ),\n\t\t\t)\n\t\t);\n\n\t\t$this->_caps = apply_filters(\n\t\t\t'aal_init_caps',\n\t\t\tarray(\n\t\t\t\t'administrator' => array( 'administrator', 'editor', 'author', 'guest' ),\n\t\t\t\t'editor'        => array( 'editor', 'author', 'guest' ),\n\t\t\t\t'author'        => array( 'author', 'guest' ),\n\t\t\t)\n\t\t);\n\n\t\tadd_screen_option(\n\t\t\t'per_page',\n\t\t\tarray(\n\t\t\t\t'default' => 50,\n\t\t\t\t'label'   => __( 'Activities', 'aryo-activity-log' ),\n\t\t\t\t'option'  => 'edit_aal_logs_per_page',\n\t\t\t)\n\t\t);\n\n\t\tadd_filter( 'set-screen-option', array( &$this, 'set_screen_option' ), 10, 3 );\n\t\tset_screen_options();\n\t}\n\n\tpublic function get_columns() {\n\t\t$columns = array(\n\t\t\t'date'        => __( 'Date', 'aryo-activity-log' ),\n\t\t\t'author'      => __( 'Author', 'aryo-activity-log' ),\n\t\t\t'ip'          => __( 'IP', 'aryo-activity-log' ),\n\t\t\t'type'        => __( 'Type', 'aryo-activity-log' ),\n\t\t\t'label'       => __( 'Label', 'aryo-activity-log' ),\n\t\t\t'action'      => __( 'Action', 'aryo-activity-log' ),\n\t\t\t'description' => __( 'Description', 'aryo-activity-log' ),\n\t\t);\n\n\t\treturn $columns;\n\t}\n\t\n\tpublic function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'ip' => 'hist_ip',\n\t\t\t'date' => array( 'hist_time', true ),\n\t\t);\n\t}\n\n\tpublic function column_default( $item, $column_name ) {\n\t\t$return = '';\n\t\t\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'action' :\n\t\t\t\t$return = $this->get_action_label( $item->action );\n\t\t\t\tbreak;\n\t\t\tcase 'date' :\n\t\t\t\t$return  = sprintf( '<strong>' . __( '%s ago', 'aryo-activity-log' ) . '</strong>', human_time_diff( $item->hist_time, current_time( 'timestamp' ) ) );\n\t\t\t\t$return .= '<br />' . date( 'd/m/Y', $item->hist_time );\n\t\t\t\t$return .= '<br />' . date( 'H:i:s', $item->hist_time );\n\t\t\t\tbreak;\n\t\t\tcase 'ip' :\n\t\t\t\t$return = $item->hist_ip;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tif ( isset( $item->$column_name ) )\n\t\t\t\t\t$return = $item->$column_name;\n\t\t}\n\n\t\t$return = apply_filters( 'aal_table_list_column_default', $return, $item, $column_name );\n\t\t\n\t\treturn $return;\n\t}\n\t\n\tpublic function column_author( $item ) {\n\t\tglobal $wp_roles;\n\t\t\n\t\tif ( ! empty( $item->user_id ) && 0 !== (int) $item->user_id ) {\n\t\t\t$user = get_user_by( 'id', $item->user_id );\n\t\t\tif ( $user instanceof WP_User && 0 !== $user->ID ) {\n\t\t\t\t//$user->display_name\n\t\t\t\treturn sprintf(\n\t\t\t\t\t'<a href=\"%s\">%s <span class=\"aal-author-name\">%s</span></a><br /><small>%s</small>',\n\t\t\t\t\tget_edit_user_link( $user->ID ),\n\t\t\t\t\tget_avatar( $user->ID, 40 ),\n\t\t\t\t\t$user->display_name,\n\t\t\t\t\tisset( $user->roles[0] ) && isset( $wp_roles->role_names[ $user->roles[0] ] ) ? $wp_roles->role_names[ $user->roles[0] ] : __( 'Unknown', 'aryo-activity-log' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn sprintf(\n\t\t\t'<span class=\"aal-author-name\">%s</span>',\n\t\t\t__( 'N/A', 'aryo-activity-log' )\n\t\t);\n\t}\n\n\tpublic function column_type( $item ) {\n\t\t$return = __( $item->object_type, 'aryo-activity-log' );\n\t\t\n\t\t$return = apply_filters( 'aal_table_list_column_type', $return, $item );\n\t\treturn $return;\n\t}\n\n\tpublic function column_label( $item ) {\n\t\t$return = '';\n\t\tif ( ! empty( $item->object_subtype ) ) {\n\t\t\t$pt     = get_post_type_object( $item->object_subtype );\n\t\t\t$return = ! empty( $pt->label ) ? $pt->label : $item->object_subtype;\n\t\t}\n\n\t\t$return = apply_filters( 'aal_table_list_column_label', $return, $item );\n\t\treturn $return;\n\t}\n\t\n\tpublic function column_description( $item ) {\n\t\t$return = esc_html( $item->object_name );\n\t\t\n\t\tswitch ( $item->object_type ) {\n\t\t\tcase 'Post' :\n\t\t\t\t$return = sprintf( '<a href=\"%s\">%s</a>', get_edit_post_link( $item->object_id ), esc_html( $item->object_name ) );\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Taxonomy' :\n\t\t\t\tif ( ! empty( $item->object_id ) )\n\t\t\t\t\t$return = sprintf( '<a href=\"%s\">%s</a>', get_edit_term_link( $item->object_id, $item->object_subtype ), esc_html( $item->object_name ) );\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Comments' :\n\t\t\t\tif ( ! empty( $item->object_id ) && $comment = get_comment( $item->object_id ) ) {\n\t\t\t\t\t$return = sprintf( '<a href=\"%s\">%s #%d</a>', get_edit_comment_link( $item->object_id ), $item->object_name, $item->object_id );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'Export' :\n\t\t\t\tif ( 'all' === $item->object_name ) {\n\t\t\t\t\t$return = __( 'All', 'aryo-activity-log' );\n\t\t\t\t} else {\n\t\t\t\t\t$pt = get_post_type_object( $item->object_name );\n\t\t\t\t\t$return = ! empty( $pt->label ) ? $pt->label : $item->object_name;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'Options' :\n\t\t\tcase 'Core' :\n\t\t\t\t$return = __( $item->object_name, 'aryo-activity-log' );\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t$return = apply_filters( 'aal_table_list_column_description', $return, $item );\n\t\t\n\t\treturn $return;\n\t}\n\t\n\tpublic function display_tablenav( $which ) {\n\t\tif ( 'top' == $which ) {\n\t\t\t$this->search_box( __( 'Search', 'aryo-activity-log' ), 'aal-search' );\n\t\t}\n\t\t?>\n\t\t<div class=\"tablenav <?php echo esc_attr( $which ); ?>\">\n\t\t\t<?php\n\t\t\t$this->extra_tablenav( $which );\n\t\t\t$this->pagination( $which );\n\t\t\t?>\n\t\t\t<br class=\"clear\" />\n\t\t</div>\n\t\t<?php\n\t}\n\t\n\tpublic function extra_tablenav_footer() {\n\t\t/**\n\t\t * Filter list of record actions\n\t\t *\n\t\t * @return array Array items should represent action_id => 'Action Title'\n\t\t */\n\t\t$actions = apply_filters( 'aal_record_actions', array() );\n\t\t?>\n\t\t\t<?php if ( count( $actions ) > 1 ) : ?>\n\t\t\t<div class=\"alignleft actions recordactions\">\n\t\t\t\t<select name=\"aal-record-action\">\n\t\t\t\t\t<option value=\"\"><?php echo esc_attr__( 'Export File Format', 'aryo-activity-log' ); ?></option>\n\t\t\t\t\t<?php foreach ( $actions as $action_key => $action_title ) : ?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $action_key ); ?>\"><?php echo esc_html( $action_title ); ?></option>\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<?php else : \n\t\t\t\t$action_title = reset( $actions );\n\t\t\t\t$action_key = key( $actions );\n\t\t\t?>\n\t\t\t<input type=\"hidden\" name=\"aal-record-action\" value=\"<?php echo esc_attr( $action_key ); ?>\">\n\t\t\t<?php endif; ?>\n\t\t\t\n\t\t\t<button type=\"submit\" name=\"aal-record-actions-submit\" id=\"record-actions-submit\" class=\"button button-primary\" value=\"1\">\n\t\t\t\t<?php \n\t\t\t\t// Is result filtering enabled?\n\t\t\t\tif ( array_key_exists( 'aal-filter', $_GET ) ) {\n\t\t\t\t\techo sprintf( esc_html__( 'Export filtered records as %s', 'aryo-activity-log' ), $action_title );\n\t\t\t\t} else {\n\t\t\t\t\techo sprintf( esc_html__( 'Export as %s', 'aryo-activity-log' ), $action_title );\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</button>\n\t\t\t\n\t\t\t<?php wp_nonce_field( 'aal_actions_nonce', 'aal_actions_nonce' ); ?>\n\t\t<?php\n\t}\n\n\tpublic function extra_tablenav( $which ) {\n\t\tglobal $wpdb;\n\t\t\n\t\tif ( 'bottom' === $which ) {\n\t\t\t$this->extra_tablenav_footer();\n\t\t}\n\n\t\tif ( 'top' !== $which )\n\t\t\treturn;\n\n\t\techo '<div class=\"alignleft actions\">';\n\n\t\t$users = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `user_id` FROM `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `user_id`\n\t\t\t\tORDER BY `user_id`\n\t\t\t;'\n\t\t);\n\n\t\t$types = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `object_type` FROM `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `object_type`\n\t\t\t\tORDER BY `object_type`\n\t\t\t;'\n\t\t);\n\n\t\t// Make sure we get items for filter.\n\t\tif ( $users || $types ) {\n\t\t\tif ( ! isset( $_REQUEST['dateshow'] ) )\n\t\t\t\t$_REQUEST['dateshow'] = '';\n\n\t\t\t$date_options = array(\n\t\t\t\t'' => __( 'All Time', 'aryo-activity-log' ),\n\t\t\t\t'today' => __( 'Today', 'aryo-activity-log' ),\n\t\t\t\t'yesterday' => __( 'Yesterday', 'aryo-activity-log' ),\n\t\t\t\t'week' => __( 'Week', 'aryo-activity-log' ),\n\t\t\t\t'month' => __( 'Month', 'aryo-activity-log' ),\n\t\t\t);\n\t\t\techo '<select name=\"dateshow\" id=\"hs-filter-date\">';\n\t\t\tforeach ( $date_options as $key => $value )\n\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['dateshow'], $key, false ), $value );\n\t\t\techo '</select>';\n\n\t\t\tsubmit_button( __( 'Filter', 'aryo-activity-log' ), 'button', 'aal-filter', false, array( 'id' => 'activity-query-submit' ) );\n\t\t}\n\n\t\tif ( $users ) {\n\t\t\tif ( ! isset( $_REQUEST['capshow'] ) )\n\t\t\t\t$_REQUEST['capshow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $this->_get_allow_caps() as $cap ) {\n\t\t\t\t$output[ $cap ] = __( ucwords( $cap ), 'aryo-activity-log' );\n\t\t\t}\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo '<select name=\"capshow\" id=\"hs-filter-capshow\">';\n\t\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Roles', 'aryo-activity-log' ) );\n\t\t\t\tforeach ( $output as $key => $value ) {\n\t\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['capshow'], $key, false ), $value );\n\t\t\t\t}\n\t\t\t\techo '</select>';\n\t\t\t}\n\t\t\t\n\t\t\tif ( ! isset( $_REQUEST['usershow'] ) )\n\t\t\t\t$_REQUEST['usershow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $users as $_user ) {\n\t\t\t\tif ( 0 === (int) $_user->user_id ) {\n\t\t\t\t\t$output[0] = __( 'N/A', 'aryo-activity-log' );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$user = get_user_by( 'id', $_user->user_id );\n\t\t\t\tif ( $user )\n\t\t\t\t\t$output[ $user->ID ] = $user->user_nicename;\n\t\t\t}\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo '<select name=\"usershow\" id=\"hs-filter-usershow\">';\n\t\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Users', 'aryo-activity-log' ) );\n\t\t\t\tforeach ( $output as $key => $value ) {\n\t\t\t\t\tprintf( '<option value=\"%s\"%s>%s</option>', $key, selected( $_REQUEST['usershow'], $key, false ), $value );\n\t\t\t\t}\n\t\t\t\techo '</select>';\n\t\t\t}\n\t\t}\n\n\t\tif ( $types ) {\n\t\t\tif ( ! isset( $_REQUEST['typeshow'] ) )\n\t\t\t\t$_REQUEST['typeshow'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $types as $type )\n\t\t\t\t$output[] = sprintf( '<option value=\"%s\"%s>%s</option>', $type->object_type, selected( $_REQUEST['typeshow'], $type->object_type, false ), __( $type->object_type, 'aryo-activity-log' ) );\n\n\t\t\techo '<select name=\"typeshow\" id=\"hs-filter-typeshow\">';\n\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Types', 'aryo-activity-log' ) );\n\t\t\techo implode( '', $output );\n\t\t\techo '</select>';\n\t\t}\n\n\n\t\t$actions = $wpdb->get_results(\n\t\t\t'SELECT DISTINCT `action` FROM  `' . $wpdb->activity_log . '`\n\t\t\t\tWHERE 1 = 1\n\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\tGROUP BY `action`\n\t\t\t\tORDER BY `action`\n\t\t\t;'\n\t\t);\n\n\t\tif ( $actions ) {\n\t\t\tif ( ! isset( $_REQUEST['showaction'] ) )\n\t\t\t\t$_REQUEST['showaction'] = '';\n\n\t\t\t$output = array();\n\t\t\tforeach ( $actions as $type )\n\t\t\t\t$output[] = sprintf( '<option value=\"%s\"%s>%s</option>', $type->action, selected( $_REQUEST['showaction'], $type->action, false ), $this->get_action_label( $type->action ) );\n\n\t\t\techo '<select name=\"showaction\" id=\"hs-filter-showaction\">';\n\t\t\tprintf( '<option value=\"\">%s</option>', __( 'All Actions', 'aryo-activity-log' ) );\n\t\t\techo implode( '', $output );\n\t\t\techo '</select>';\n\t\t}\n\n\t\techo '</div>';\n\t}\n\t\n\tpublic function prepare_items() {\n\t\tglobal $wpdb;\n\t\n\t\t$items_per_page        = $this->get_items_per_page( 'edit_aal_logs_per_page', 20 );\n\t\t$this->_column_headers = array( $this->get_columns(), get_hidden_columns( $this->screen ), $this->get_sortable_columns() );\n\t\t$where                 = ' WHERE 1 = 1';\n\n\t\tif ( ! isset( $_REQUEST['order'] ) || ! in_array( $_REQUEST['order'], array( 'desc', 'asc' ) ) ) {\n\t\t\t$_REQUEST['order'] = 'DESC';\n\t\t}\n\t\tif ( ! isset( $_REQUEST['orderby'] ) || ! in_array( $_REQUEST['orderby'], array( 'hist_time', 'hist_ip' ) ) ) {\n\t\t\t$_REQUEST['orderby'] = 'hist_time';\n\t\t}\n\t\t\n\t\tif ( ! empty( $_REQUEST['typeshow'] ) ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `object_type` = %s', $_REQUEST['typeshow'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['showaction'] ) && '' !== $_REQUEST['showaction'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `action` = %s', $_REQUEST['showaction'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['usershow'] ) && '' !== $_REQUEST['usershow'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `user_id` = %d', $_REQUEST['usershow'] );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['capshow'] ) && '' !== $_REQUEST['capshow'] ) {\n\t\t\t$where .= $wpdb->prepare( ' AND `user_caps` = %s', strtolower( $_REQUEST['capshow'] ) );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['dateshow'] ) && in_array( $_REQUEST['dateshow'], array( 'today', 'yesterday', 'week', 'month' ) ) ) {\n\t\t\t$current_time = current_time( 'timestamp' );\n\n\t\t\t// Today\n\t\t\t$start_time = mktime( 0, 0, 0, date( 'm', $current_time ), date( 'd', $current_time ), date( 'Y', $current_time ) );;\n\t\t\t$end_time = mktime( 23, 59, 59, date( 'm', $current_time ), date( 'd', $current_time ), date( 'Y', $current_time ) );\n\t\t\t\n\t\t\tif ( 'yesterday' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( 'yesterday', $start_time );\n\t\t\t\t$end_time = mktime( 23, 59, 59, date( 'm', $start_time ), date( 'd', $start_time ), date( 'Y', $start_time ) );\n\t\t\t} elseif ( 'week' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( '-1 week', $start_time );\n\t\t\t} elseif ( 'month' === $_REQUEST['dateshow'] ) {\n\t\t\t\t$start_time = strtotime( '-1 month', $start_time );\n\t\t\t}\n\t\t\t\n\t\t\t$where .= $wpdb->prepare( ' AND `hist_time` > %d AND `hist_time` < %d', $start_time, $end_time );\n\t\t}\n\n\t\tif ( isset( $_REQUEST['s'] ) ) {\n\t\t\t// Search only searches 'description' fields.\n\t\t\t$where .= $wpdb->prepare( ' AND `object_name` LIKE %s', '%' . $wpdb->esc_like( $_REQUEST['s'] ) . '%' );\n\t\t}\n\n\t\t$offset = ( $this->get_pagenum() - 1 ) * $items_per_page;\n\n\t\t\n\t\t$total_items = $wpdb->get_var(\n\t\t\t'SELECT COUNT(`histid`) FROM  `' . $wpdb->activity_log . '`\n\t\t\t\t' . $where . '\n\t\t\t\t\t' . $this->_get_where_by_role()\n\t\t);\n\n\t\t$items_orderby = filter_input( INPUT_GET, 'orderby', FILTER_SANITIZE_STRING );\n\t\tif ( empty( $items_orderby ) ) {\n\t\t\t$items_orderby = 'hist_time'; // Sort by time by default.\n\t\t}\n\n\t\t$items_order = strtoupper( $_REQUEST['order'] );\n\t\tif ( empty( $items_order ) || ! in_array( $items_order, array( 'DESC', 'ASC' ) ) ) {\n\t\t\t$items_order = 'DESC'; // Descending order by default.\n\t\t}\n\n\t\t$this->items = $wpdb->get_results( $wpdb->prepare(\n\t\t\t'SELECT * FROM `' . $wpdb->activity_log . '`\n\t\t\t\t' . $where . '\n\t\t\t\t\t' . $this->_get_where_by_role() . '\n\t\t\t\t\tORDER BY ' . $items_orderby . ' ' . $items_order . '\n\t\t\t\t\tLIMIT %d, %d;',\n\t\t\t$offset,\n\t\t\t$items_per_page\n\t\t) );\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $total_items,\n\t\t\t'per_page' => $items_per_page,\n\t\t\t'total_pages' => ceil( $total_items / $items_per_page ),\n\t\t) );\n\t}\n\t\n\tpublic function set_screen_option( $status, $option, $value ) {\n\t\tif ( 'edit_aal_logs_per_page' === $option )\n\t\t\treturn $value;\n\t\treturn $status;\n\t}\n\n\tpublic function search_box( $text, $input_id ) {\n\t\t$search_data = isset( $_REQUEST['s'] ) ? sanitize_text_field( $_REQUEST['s'] ) : '';\n\n\t\t$input_id = $input_id . '-search-input';\n\t\t?>\n\t\t<p class=\"search-box\">\n\t\t\t<label class=\"screen-reader-text\" for=\"<?php echo $input_id ?>\"><?php echo $text; ?>:</label>\n\t\t\t<input type=\"search\" id=\"<?php echo $input_id ?>\" name=\"s\" value=\"<?php echo esc_attr( $search_data ); ?>\" />\n\t\t\t<?php submit_button( $text, 'button', false, false, array('id' => 'search-submit') ); ?>\n\t\t</p>\n\t<?php\n\t}\n}\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Attachment extends AAL_Hook_Base {\n\n\tprotected function _add_log_attachment( $action, $attachment_id ) {\n\t\t$post = get_post( $attachment_id );\n\n\t\taal_insert_log( array(\n\t\t\t'action'         => $action,\n\t\t\t'object_type'    => 'Attachment',\n\t\t\t'object_subtype' => $post->post_type,\n\t\t\t'object_id'      => $attachment_id,\n\t\t\t'object_name'    => esc_html( get_the_title( $post->ID ) ),\n\t\t) );\n\t}\n\n\tpublic function hooks_delete_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'deleted', $attachment_id );\n\t}\n\n\tpublic function hooks_edit_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'updated', $attachment_id );\n\t}\n\n\tpublic function hooks_add_attachment( $attachment_id ) {\n\t\t$this->_add_log_attachment( 'added', $attachment_id );\n\t}\n\t\n\tpublic function __construct() {\n\t\tadd_action( 'add_attachment', array( &$this, 'hooks_add_attachment' ) );\n\t\tadd_action( 'edit_attachment', array( &$this, 'hooks_edit_attachment' ) );\n\t\tadd_action( 'delete_attachment', array( &$this, 'hooks_delete_attachment' ) );\n\t\t\n\t\tparent::__construct();\n\t}\n\n}\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Comments extends AAL_Hook_Base {\n\t\n\tprotected function _add_comment_log( $id, $action, $comment = null ) {\n\t\tif ( is_null( $comment ) )\n\t\t\t$comment = get_comment( $id );\n\t\t\n\t\taal_insert_log( array(\n\t\t\t'action'         => $action,\n\t\t\t'object_type'    => 'Comments',\n\t\t\t'object_subtype' => get_post_type( $comment->comment_post_ID ),\n\t\t\t'object_name'    => esc_html( get_the_title( $comment->comment_post_ID ) ),\n\t\t\t'object_id'      => $id,\n\t\t) );\n\t}\n\t\n\tpublic function handle_comment_log( $comment_ID, $comment = null ) {\n\t\tif ( is_null( $comment ) )\n\t\t\t$comment = get_comment( $comment_ID );\n\t\t\n\t\t$action = 'created';\n\t\tswitch ( current_filter() ) {\n\t\t\tcase 'wp_insert_comment' :\n\t\t\t\t$action = 1 === (int) $comment->comment_approved ? 'approved' : 'pending';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'edit_comment' :\n\t\t\t\t$action = 'updated';\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete_comment' :\n\t\t\t\t$action = 'deleted';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'trash_comment' :\n\t\t\t\t$action = 'trashed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'untrash_comment' :\n\t\t\t\t$action = 'untrashed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'spam_comment' :\n\t\t\t\t$action = 'spammed';\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'unspam_comment' :\n\t\t\t\t$action = 'unspammed';\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t$this->_add_comment_log( $comment_ID, $action, $comment );\n\t}\n\n\tpublic function hooks_transition_comment_status( $new_status, $old_status, $comment ) {\n\t\t$this->_add_comment_log( $comment->comment_ID, $new_status, $comment );\n\t}\n\n\tpublic function __construct() {\n\t\tadd_action( 'wp_insert_comment', array( &$this, 'handle_comment_log' ), 10, 2 );\n\t\tadd_action( 'edit_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'trash_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'untrash_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'spam_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'unspam_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'delete_comment', array( &$this, 'handle_comment_log' ) );\n\t\tadd_action( 'transition_comment_status', array( &$this, 'hooks_transition_comment_status' ), 10, 3 );\n\t\t\n\t\tparent::__construct();\n\t}\n\t\n}\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\nclass AAL_Hook_Posts extends AAL_Hook_Base {\n\t\n\tprotected function _draft_or_post_title( $post = 0 ) {\n\t\t$title = esc_html( get_the_title( $post ) );\n\t\t\n\t\tif ( empty( $title ) )\n\t\t\t$title = __( '(no title)', 'aryo-activity-log' );\n\t\t\n\t\treturn $title;\n\t}\n\n\tpublic function hooks_transition_post_status( $new_status, $old_status, $post ) {\n\t\tif ( 'auto-draft' === $old_status && ( 'auto-draft' !== $new_status && 'inherit' !== $new_status ) ) {\n\t\t\t// page created\n\t\t\t$action = 'created';\n\t\t}\n\t\telseif ( 'auto-draft' === $new_status || ( 'new' === $old_status && 'inherit' === $new_status ) ) {\n\t\t\t// nvm.. ignore it.\n\t\t\treturn;\n\t\t}\n\t\telseif ( 'trash' === $new_status ) {\n\t\t\t// page was deleted.\n\t\t\t$action = 'trashed';\n\t\t}\n\t\telseif ( 'trash' === $old_status ) {\n\t\t\t$action = 'restored';\n\t\t}\n\t\telse {\n\t\t\t// page updated. I guess.\n\t\t\t$action = 'updated';\n\t\t}\n\n\t\tif ( wp_is_post_revision( $post->ID ) )\n\t\t\treturn;\n\n\t\t// Skip for menu items.\n\t\tif ( 'nav_menu_item' === get_post_type( $post->ID ) )\n\t\t\treturn;\n\n\t\taal_insert_log(\n\t\t\tarray(\n\t\t\t\t'action' => $action,\n\t\t\t\t'object_type' => 'Post',\n\t\t\t\t'object_subtype' => $post->post_type,\n\t\t\t\t'object_id' => $post->ID,\n\t\t\t\t'object_name' => $this->_draft_or_post_title( $post->ID ),\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic function hooks_delete_post( $post_id ) {\n\t\tif ( wp_is_post_revision( $post_id ) )\n\t\t\treturn;\n\n\t\t$post = get_post( $post_id );\n\n\t\tif ( in_array( $post->post_status, array( 'auto-draft', 'inherit' ) ) )\n\t\t\treturn;\n\n\t\t// Skip for menu items.\n\t\tif ( 'nav_menu_item' === get_post_type( $post->ID ) )\n\t\t\treturn;\n\n\t\taal_insert_log(\n\t\t\tarray(\n\t\t\t\t'action' => 'deleted',\n\t\t\t\t'object_type' => 'Post',\n\t\t\t\t'object_subtype' => $post->post_type,\n\t\t\t\t'object_id' => $post->ID,\n\t\t\t\t'object_name' => $this->_draft_or_post_title( $post->ID ),\n\t\t\t)\n\t\t);\n\t}\n\t\n\tpublic function __construct() {\n\t\tadd_action( 'transition_post_status', array( &$this, 'hooks_transition_post_status' ), 10, 3 );\n\t\tadd_action( 'delete_post', array( &$this, 'hooks_delete_post' ) );\n\t\t\n\t\tparent::__construct();\n\t}\n}\n"], "filenames": ["classes/class-aal-activity-log-list-table.php", "hooks/class-aal-hook-attachment.php", "hooks/class-aal-hook-comments.php", "hooks/class-aal-hook-posts.php"], "buggy_code_start_loc": [205, 14, 14, 7], "buggy_code_end_loc": [228, 39, 75, 8], "fixing_code_start_loc": [205, 14, 14, 7], "fixing_code_end_loc": [228, 39, 75, 8], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in the Activity Log plugin before 2.4.1 for WordPress allow remote attackers to inject arbitrary JavaScript or HTML via a title that is not escaped.", "other": {"cve": {"id": "CVE-2018-8729", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-15T17:29:00.210", "lastModified": "2019-02-28T13:25:58.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in the Activity Log plugin before 2.4.1 for WordPress allow remote attackers to inject arbitrary JavaScript or HTML via a title that is not escaped."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades Cross-Site Scripting (XSS)  en el plugin Activity Log en versiones anteriores a la 2.4.1 para WordPress permiten que los atacantes remotos inyecten c\u00f3digo HTML o JavaScript arbitrario mediante un t\u00edtulo que no est\u00e1 escapado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:activity_log_project:activity_log:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "2.4.1", "matchCriteriaId": "DEC9B0E5-48E9-47E4-8A8E-452B771F507C"}]}]}], "references": [{"url": "https://github.com/pojome/activity-log/commit/950c46b2290c991187ff3471640e9688b16908fb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pojome/activity-log/commit/e7bcd12fcb0add82bed762a971f427a360664bd9", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "Patch", "Release Notes"]}, {"url": "https://plugins.trac.wordpress.org/changeset/1836276", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/plugins/aryo-activity-log/#developers", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/44437/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/pojome/activity-log/commit/950c46b2290c991187ff3471640e9688b16908fb"}}