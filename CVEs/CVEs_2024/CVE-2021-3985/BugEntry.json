{"buggy_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Twig\\Runtime;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Utils\\Markdown;\nuse Twig\\Extension\\RuntimeExtensionInterface;\n\nfinal class MarkdownExtension implements RuntimeExtensionInterface\n{\n    /**\n     * @var Markdown\n     */\n    private $markdown;\n    /**\n     * @var SystemConfiguration\n     */\n    private $configuration;\n    /**\n     * @var bool|null\n     */\n    private $markdownEnabled;\n\n    public function __construct(Markdown $parser, SystemConfiguration $configuration)\n    {\n        $this->markdown = $parser;\n        $this->configuration = $configuration;\n    }\n\n    private function isMarkdownEnabled(): bool\n    {\n        if (null === $this->markdownEnabled) {\n            $this->markdownEnabled = $this->configuration->isTimesheetMarkdownEnabled();\n        }\n\n        return $this->markdownEnabled;\n    }\n\n    /**\n     * Transforms the entities comment (customer, project, activity ...) into HTML.\n     *\n     * @param string|null $content\n     * @param bool $fullLength\n     * @return string\n     */\n    public function commentContent(?string $content, bool $fullLength = false): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        if (!$fullLength && \\strlen($content) > 101) {\n            $content = trim(substr($content, 0, 100)) . ' &hellip;';\n        }\n\n        if ($this->isMarkdownEnabled()) {\n            $content = $this->markdown->toHtml($content, false);\n        } elseif ($fullLength) {\n            $content = '<p>' . nl2br($content) . '</p>';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Transforms the entities comment (customer, project, activity ...) into a one-liner.\n     *\n     * @param string|null $content\n     * @param bool $fullLength\n     * @return string\n     */\n    public function commentOneLiner(?string $content, bool $fullLength = true): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        $addHellip = false;\n\n        if (!$fullLength && \\strlen($content) > 52) {\n            $content = trim(substr($content, 0, 50));\n            $addHellip = true;\n        }\n\n        $content = explode(PHP_EOL, $content);\n        $result = $content[0];\n\n        if (\\count($content) > 1 || $addHellip) {\n            $result .= ' &hellip;';\n        }\n\n        return $result;\n    }\n\n    /**\n     * Transforms the timesheet description content into HTML.\n     *\n     * @param string|null $content\n     * @return string\n     */\n    public function timesheetContent(?string $content): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        if ($this->isMarkdownEnabled()) {\n            return $this->markdown->toHtml($content, false);\n        }\n\n        return nl2br($content);\n    }\n\n    /**\n     * Transforms the given Markdown content into HTML\n     *\n     * @param string $content\n     * @return string\n     */\n    public function markdownToHtml(string $content): string\n    {\n        return $this->markdown->toHtml($content, false);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Utils;\n\n/**\n * A simple class to parse markdown syntax and return HTML.\n */\nfinal class Markdown\n{\n    /**\n     * @var ParsedownExtension\n     */\n    private $parser;\n\n    public function __construct()\n    {\n        $this->parser = new ParsedownExtension();\n        $this->parser->setUrlsLinked(true);\n        $this->parser->setBreaksEnabled(true);\n    }\n\n    /**\n     * @param string $text\n     * @param bool $safe\n     * @return string\n     */\n    public function toHtml(string $text, bool $safe = true): string\n    {\n        $this->parser->setSafeMode($safe);\n\n        return $this->parser->text($text);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Twig\\Runtime;\n\nuse App\\Configuration\\ConfigLoaderInterface;\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Twig\\Runtime\\MarkdownExtension;\nuse App\\Utils\\Markdown;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @covers \\App\\Twig\\Runtime\\MarkdownExtension\n */\nclass MarkdownExtensionTest extends TestCase\n{\n    public function testMarkdownToHtml()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals('<p><em>test</em></p>', $sut->markdownToHtml('*test*'));\n        $this->assertEquals('<p># foobar</p>', $sut->markdownToHtml('# foobar'));\n    }\n\n    public function testTimesheetContent()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => false]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"- test<br />\\n- foo\",\n            $sut->timesheetContent(\"- test\\n- foo\")\n        );\n        $this->assertEquals('', $sut->timesheetContent(null));\n        $this->assertEquals('', $sut->timesheetContent(''));\n\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<ul>\\n<li>test</li>\\n<li>foo</li>\\n</ul>\\n<p>foo <strong>bar</strong></p>\",\n            $sut->timesheetContent(\"- test\\n- foo\\n\\nfoo __bar__\")\n        );\n    }\n\n    public function testCommentContent()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => false]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<p>- test<br />\\n- foo</p>\",\n            $sut->commentContent(\"- test\\n- foo\", true)\n        );\n        $this->assertEquals(\n            \"- test\\n- foo\",\n            $sut->commentContent(\"- test\\n- foo\", false)\n        );\n\n        $loremIpsum = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.';\n\n        $this->assertEquals('', $sut->commentContent(null));\n        $this->assertEquals('', $sut->commentContent(''));\n        $this->assertEquals('<p>' . $loremIpsum . '</p>', $sut->commentContent($loremIpsum, true));\n        $this->assertEquals('Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut l &hellip;', $sut->commentContent($loremIpsum));\n\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<ul>\\n<li>test</li>\\n<li>foo</li>\\n</ul>\\n<p>foo <strong>bar</strong></p>\",\n            $sut->commentContent(\"- test\\n- foo\\n\\nfoo __bar__\")\n        );\n    }\n\n    public function testCommentOneLiner()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, []);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n\n        $loremIpsum = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.';\n\n        $this->assertEquals('', $sut->commentOneLiner(null));\n        $this->assertEquals('', $sut->commentOneLiner(''));\n        $this->assertEquals('', $sut->commentOneLiner(null, false));\n        $this->assertEquals('', $sut->commentOneLiner('', true));\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing &hellip;',\n            $sut->commentOneLiner($loremIpsum, false)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, [$loremIpsum, $loremIpsum, $loremIpsum]), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, [$loremIpsum, $loremIpsum, $loremIpsum]), false)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt']), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt', 'ssdf']), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt']))\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt', 'ssdf']))\n        );\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Utils;\n\nuse App\\Utils\\Markdown;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @covers \\App\\Utils\\Markdown\n * @covers \\App\\Utils\\ParsedownExtension\n */\nclass MarkdownTest extends TestCase\n{\n    public function testMarkdownToHtml()\n    {\n        $sut = new Markdown();\n        $this->assertEquals('<p><em>test</em></p>', $sut->toHtml('*test*'));\n        $this->assertEquals('<p># foobar</p>', $sut->toHtml('# foobar'));\n        $html = <<<'EOT'\n<p>foo bar</p>\n<ul>\n<li>sdfasdfasdf</li>\n<li>asdfasdfasdf</li>\n</ul>\n<p># test<br />\nasdfasdfa</p>\n<pre><code>ssdfsdf</code></pre>\n<p><a href=\"http://example.com/foo-bar.html\" target=\"_blank\">http://example.com/foo-bar.html</a><br />\n<a href=\"file:///home/kimai/images/beautiful-flower.png\" target=\"_blank\">file:///home/kimai/images/beautiful-flower.png</a></p>\n<p>sdfsdf <a href=\"#test-1\">asdfasdf</a> asdfasdf</p>\n<p># test<br />\naasdfasdf<br />\n1111<br />\n222</p>\nEOT;\n\n        $markdown = <<<EOT\nfoo bar\n\n- sdfasdfasdf\n- asdfasdfasdf\n\n# test\nasdfasdfa\n\n    ssdfsdf\n    \nhttp://example.com/foo-bar.html\nfile:///home/kimai/images/beautiful-flower.png\n\nsdfsdf [asdfasdf](#test-1) asdfasdf\n\n# test\naasdfasdf\n1111\n222\nEOT;\n        $this->assertEquals($html, $sut->toHtml($markdown));\n    }\n\n    public function testDuplicateIds()\n    {\n        $sut = new Markdown();\n\n        $html = <<<'EOT'\n<p># test<br />\n## test<br />\n### test<br />\n# test</p>\nEOT;\n\n        $markdown = <<<EOT\n# test\n## test\n### test\n# test\nEOT;\n        $this->assertEquals($html, $sut->toHtml($markdown));\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Twig\\Runtime;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Utils\\Markdown;\nuse Twig\\Extension\\RuntimeExtensionInterface;\n\nfinal class MarkdownExtension implements RuntimeExtensionInterface\n{\n    /**\n     * @var Markdown\n     */\n    private $markdown;\n    /**\n     * @var SystemConfiguration\n     */\n    private $configuration;\n    /**\n     * @var bool|null\n     */\n    private $markdownEnabled;\n\n    public function __construct(Markdown $parser, SystemConfiguration $configuration)\n    {\n        $this->markdown = $parser;\n        $this->configuration = $configuration;\n    }\n\n    private function isMarkdownEnabled(): bool\n    {\n        if (null === $this->markdownEnabled) {\n            $this->markdownEnabled = $this->configuration->isTimesheetMarkdownEnabled();\n        }\n\n        return $this->markdownEnabled;\n    }\n\n    /**\n     * Transforms the entities comment (customer, project, activity ...) into HTML.\n     *\n     * @param string|null $content\n     * @param bool $fullLength\n     * @return string\n     */\n    public function commentContent(?string $content, bool $fullLength = false): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        if (!$fullLength && \\strlen($content) > 101) {\n            $content = trim(substr($content, 0, 100)) . ' &hellip;';\n        }\n\n        if ($this->isMarkdownEnabled()) {\n            $content = $this->markdown->toHtml($content);\n        } elseif ($fullLength) {\n            $content = '<p>' . nl2br($content) . '</p>';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Transforms the entities comment (customer, project, activity ...) into a one-liner.\n     *\n     * @param string|null $content\n     * @param bool $fullLength\n     * @return string\n     */\n    public function commentOneLiner(?string $content, bool $fullLength = true): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        $addHellip = false;\n\n        if (!$fullLength && \\strlen($content) > 52) {\n            $content = trim(substr($content, 0, 50));\n            $addHellip = true;\n        }\n\n        $content = explode(PHP_EOL, $content);\n        $result = $content[0];\n\n        if (\\count($content) > 1 || $addHellip) {\n            $result .= ' &hellip;';\n        }\n\n        return $result;\n    }\n\n    /**\n     * Transforms the timesheet description content into HTML.\n     *\n     * @param string|null $content\n     * @return string\n     */\n    public function timesheetContent(?string $content): string\n    {\n        if (empty($content)) {\n            return '';\n        }\n\n        if ($this->isMarkdownEnabled()) {\n            return $this->markdown->toHtml($content);\n        }\n\n        return nl2br($content);\n    }\n\n    /**\n     * Transforms the given Markdown content into HTML\n     *\n     * @param string $content\n     * @return string\n     */\n    public function markdownToHtml(string $content): string\n    {\n        return $this->markdown->toHtml($content);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Utils;\n\n/**\n * A simple class to parse markdown syntax and return HTML.\n */\nfinal class Markdown\n{\n    /**\n     * @var ParsedownExtension\n     */\n    private $parser;\n\n    public function __construct()\n    {\n        $this->parser = new ParsedownExtension();\n        $this->parser->setUrlsLinked(true);\n        $this->parser->setBreaksEnabled(true);\n    }\n\n    /**\n     * @param string $text\n     * @param bool $safe\n     * @return string\n     */\n    public function toHtml(string $text, bool $safe = true): string\n    {\n        if ($safe !== true) {\n            @trigger_error('Only safe mode is supported in Markdown since 1.16.3 to prevent XSS attacks. Parameter $safe will be removed with 2.0', E_USER_DEPRECATED);\n        }\n\n        $this->parser->setSafeMode(true);\n        $this->parser->setMarkupEscaped(true);\n\n        return $this->parser->text($text);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Twig\\Runtime;\n\nuse App\\Configuration\\ConfigLoaderInterface;\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Twig\\Runtime\\MarkdownExtension;\nuse App\\Utils\\Markdown;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @covers \\App\\Twig\\Runtime\\MarkdownExtension\n */\nclass MarkdownExtensionTest extends TestCase\n{\n    public function testMarkdownToHtml()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals('<p><em>test</em></p>', $sut->markdownToHtml('*test*'));\n        $this->assertEquals('<p># foobar</p>', $sut->markdownToHtml('# foobar'));\n        $this->assertEquals(\n            '<p><a href=\"javascript%3Aalert(`XSS`)\">XSS</a></p>',\n            $sut->markdownToHtml('[XSS](javascript:alert(`XSS`))')\n        );\n    }\n\n    public function testTimesheetContent()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => false]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"- test<br />\\n- foo\",\n            $sut->timesheetContent(\"- test\\n- foo\")\n        );\n        $this->assertEquals('', $sut->timesheetContent(null));\n        $this->assertEquals('', $sut->timesheetContent(''));\n\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<ul>\\n<li>test</li>\\n<li>foo</li>\\n</ul>\\n<p>foo <strong>bar</strong></p>\",\n            $sut->timesheetContent(\"- test\\n- foo\\n\\nfoo __bar__\")\n        );\n        $this->assertEquals(\n            '<p><a href=\"javascript%3Aalert(`XSS`)\">XSS</a></p>',\n            $sut->timesheetContent('[XSS](javascript:alert(`XSS`))')\n        );\n    }\n\n    public function testCommentContent()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => false]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<p>- test<br />\\n- foo</p>\",\n            $sut->commentContent(\"- test\\n- foo\", true)\n        );\n        $this->assertEquals(\n            \"- test\\n- foo\",\n            $sut->commentContent(\"- test\\n- foo\", false)\n        );\n\n        $loremIpsum = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.';\n\n        $this->assertEquals('', $sut->commentContent(null));\n        $this->assertEquals('', $sut->commentContent(''));\n        $this->assertEquals('<p>' . $loremIpsum . '</p>', $sut->commentContent($loremIpsum, true));\n        $this->assertEquals('Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut l &hellip;', $sut->commentContent($loremIpsum));\n\n        $config = new SystemConfiguration($loader, ['timesheet' => ['markdown_content' => true]]);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n        $this->assertEquals(\n            \"<ul>\\n<li>test</li>\\n<li>foo</li>\\n</ul>\\n<p>foo <strong>bar</strong></p>\",\n            $sut->commentContent(\"- test\\n- foo\\n\\nfoo __bar__\")\n        );\n        $this->assertEquals(\n            '<p><a href=\"javascript%3Aalert(`XSS`)\">XSS</a></p>',\n            $sut->commentContent('[XSS](javascript:alert(`XSS`))')\n        );\n    }\n\n    public function testCommentOneLiner()\n    {\n        $loader = $this->createMock(ConfigLoaderInterface::class);\n        $config = new SystemConfiguration($loader, []);\n        $sut = new MarkdownExtension(new Markdown(), $config);\n\n        $loremIpsum = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.';\n\n        $this->assertEquals('', $sut->commentOneLiner(null));\n        $this->assertEquals('', $sut->commentOneLiner(''));\n        $this->assertEquals('', $sut->commentOneLiner(null, false));\n        $this->assertEquals('', $sut->commentOneLiner('', true));\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing &hellip;',\n            $sut->commentOneLiner($loremIpsum, false)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, [$loremIpsum, $loremIpsum, $loremIpsum]), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, [$loremIpsum, $loremIpsum, $loremIpsum]), false)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt']), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt', 'ssdf']), true)\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt']))\n        );\n\n        $this->assertEquals(\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt &hellip;',\n            $sut->commentOneLiner(implode(PHP_EOL, ['Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt', 'ssdf']))\n        );\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Utils;\n\nuse App\\Utils\\Markdown;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @covers \\App\\Utils\\Markdown\n * @covers \\App\\Utils\\ParsedownExtension\n */\nclass MarkdownTest extends TestCase\n{\n    public function testMarkdownToHtml()\n    {\n        $sut = new Markdown();\n        $this->assertEquals('<p><em>test</em></p>', $sut->toHtml('*test*'));\n        $this->assertEquals('<p># foobar</p>', $sut->toHtml('# foobar'));\n        $html = <<<'EOT'\n<p>foo bar</p>\n<ul>\n<li>sdfasdfasdf</li>\n<li>asdfasdfasdf</li>\n</ul>\n<p># test<br />\nasdfasdfa</p>\n<pre><code>ssdfsdf</code></pre>\n<p><a href=\"http://example.com/foo-bar.html\" target=\"_blank\">http://example.com/foo-bar.html</a><br />\n<a href=\"file:///home/kimai/images/beautiful-flower.png\" target=\"_blank\">file:///home/kimai/images/beautiful-flower.png</a></p>\n<p>sdfsdf <a href=\"#test-1\">asdfasdf</a> asdfasdf</p>\n<p># test<br />\naasdfasdf<br />\n1111<br />\n222</p>\nEOT;\n\n        $markdown = <<<EOT\nfoo bar\n\n- sdfasdfasdf\n- asdfasdfasdf\n\n# test\nasdfasdfa\n\n    ssdfsdf\n    \nhttp://example.com/foo-bar.html\nfile:///home/kimai/images/beautiful-flower.png\n\nsdfsdf [asdfasdf](#test-1) asdfasdf\n\n# test\naasdfasdf\n1111\n222\nEOT;\n        $this->assertEquals($html, $sut->toHtml($markdown));\n    }\n\n    public function testDuplicateIds()\n    {\n        $sut = new Markdown();\n\n        $html = <<<'EOT'\n<p># test<br />\n## test<br />\n### test<br />\n# test</p>\nEOT;\n\n        $markdown = <<<EOT\n# test\n## test\n### test\n# test\nEOT;\n        $this->assertEquals($html, $sut->toHtml($markdown));\n    }\n\n    public function testLinksAreSanitized()\n    {\n        $sut = new Markdown();\n\n        $html = <<<'EOT'\n<p><a href=\"javascript%3Aalert(`XSS`)\">XSS</a><br />\n<a href=\"javascript%3Aalert(&quot;XSS&quot;)\">XSS</a><br />\n<a href=\"javascript%3Aalert(&#039;XSS&#039;)\">XSS</a></p>\nEOT;\n\n        $markdown = <<<EOT\n[XSS](javascript:alert(`XSS`))\n[XSS](javascript:alert(\"XSS\"))\n[XSS](javascript:alert('XSS'))\nEOT;\n        $this->assertEquals($html, $sut->toHtml($markdown));\n    }\n}\n"], "filenames": ["src/Twig/Runtime/MarkdownExtension.php", "src/Utils/Markdown.php", "tests/Twig/Runtime/MarkdownExtensionTest.php", "tests/Utils/MarkdownTest.php"], "buggy_code_start_loc": [64, 36, 29, 86], "buggy_code_end_loc": [130, 37, 77, 86], "fixing_code_start_loc": [64, 36, 30, 87], "fixing_code_end_loc": [130, 42, 90, 105], "type": "CWE-79", "message": "kimai2 is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3985", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-01T11:15:07.867", "lastModified": "2021-12-02T18:45:37.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "kimai2 is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "kimai2 es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kimai:kimai2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.3", "matchCriteriaId": "2711BADB-88EE-4582-8542-3A61AC85F4DF"}]}]}], "references": [{"url": "https://github.com/kevinpapst/kimai2/commit/76e09447c85e762882126b49626a4fe4d93fe8b5", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/89d6c3de-efbd-4354-8cc8-46e999e4c5a4", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kevinpapst/kimai2/commit/76e09447c85e762882126b49626a4fe4d93fe8b5"}}