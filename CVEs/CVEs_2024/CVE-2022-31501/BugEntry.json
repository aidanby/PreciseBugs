{"buggy_code": ["import os\nimport attr\nimport re\nimport ast\nimport errno\nimport datetime\nimport subprocess\nfrom subprocess import DEVNULL, PIPE, STDOUT\nfrom typing import List\n\nfrom flask import redirect, request, url_for, current_app, abort, flash, send_file\nfrom flask_babelplus import gettext as _\nfrom flask_allows import Permission\nfrom flask_login import current_user\nfrom flask_sqlalchemy import Pagination\nfrom flask.views import MethodView\nfrom flaskbb.utils.helpers import FlashAndRedirect\nfrom flaskbb.display.navigation import NavigationLink\nfrom flaskbb.extensions import allows, db, celery\nfrom flaskbb.user.models import User, Group\nfrom flaskbb.forum.models import Post\n\nfrom hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm\nfrom hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional, CanAccessServerHubManagement\nfrom hub.models import DiscordUser, DiscordUserRole, DiscordRole, HubLog\nfrom hub.utils import hub_current_server\nfrom hub.gameserver_models import game_models, ErroBan\n\nfrom flaskbb.utils.helpers import (\n    render_template,\n)\n\n\nclass FlashAndRedirectToHub(object):\n    def __init__(self, message, level):\n        self._message = message\n        self._level = level\n\n    def __call__(self, *a, **k):\n        flash(self._message, self._level)\n        return redirect(url_for(\"hub.index\", server=hub_current_server.id))\n\n\ndef LogAction(user, message):\n    log_entry = HubLog()\n    log_entry.user = user\n    log_entry.message = message\n    log_entry.server_id = hub_current_server.id\n    log_entry.save()\n\n\ndef datetime_tag():\n    return datetime.datetime.now().strftime(\"[%d.%m.%Y %H:%M:%S]\\t\")\n\n\n@celery.task\ndef run_console_script_async(script, task_name=None, output_file_path=\"\"):\n    proc = subprocess.Popen(script, shell=True, stdout=PIPE, stderr=STDOUT, text=True, bufsize=1)\n\n    if not task_name or not output_file_path:\n        return\n\n    if not os.path.exists(os.path.dirname(output_file_path)):\n        try:\n            os.makedirs(os.path.dirname(output_file_path))\n        except OSError as exc:  # Guard against race condition\n            if exc.errno != errno.EEXIST:\n                raise\n    output_file = open(output_file_path, \"a+\", buffering=1)\n\n    output_file.write(\"\\n-------------------\\n\")\n    output_file.write(datetime_tag() + task_name + \" script:\\n\")\n    for script_line in script.split('\\n'):\n        output_file.write(datetime_tag() + \"> \" + script_line + \"\\n\")\n\n    output_file.write(datetime_tag() + task_name + \" started:\\n\")\n    for line in proc.stdout:\n        output_file.write(datetime_tag() + line)\n    output_file.write(datetime_tag() + task_name + \" finished\\n\")\n\n\nclass ServerControl(MethodView):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to use server controls\"),\n                level=\"danger\"\n            )\n        )\n    ]\n    _action = \"made unknown action with\"\n\n    def _report(self, user):\n        LogAction(user, self._action + \" server\")\n\n\nclass StartServer(ServerControl):\n    _action = \"started\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl start \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\nclass StopServer(ServerControl):\n    _action = \"stopped\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl stop \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\nclass RestartServer(ServerControl):\n    _action = \"restarted\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl restart \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\ndef get_update_log_path(server_id):\n    return \"logs/\" + server_id + \"/update.log\"\n\n\nclass UpdateServer(ServerControl):\n    _action = \"updated\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        update_script = \\\n            '''\n                cd {path}\n                git fetch origin {branch}\n                git checkout -f FETCH_HEAD\n                {dreammaker} -clean {dme}\n            '''.format(\n                path=hub_current_server.path,\n                branch=hub_current_server.branch_name,\n                dreammaker=hub_current_server.dream_maker_binary,\n                dme=hub_current_server.dme_name\n            )\n\n        output_file = get_update_log_path(hub_current_server.id)\n        result = run_console_script_async.delay(update_script, \"Update\", output_file)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"UpdateLogs\"))\n\n\nclass Hub(MethodView):\n    def _get_server_status(self):\n        command = \"systemctl status \" + hub_current_server.service_name\n        result = subprocess.run(command, stdout=DEVNULL, shell=True)\n        if not result.returncode:\n            status = \"online\"\n        else:\n            status = \"offline\"\n        return status\n\n    def __get_actions(self, server_status):\n        actions = []\n\n        if Permission(CanAccessServerHubAdditional()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.control\",\n                    name=_(\"Control\"),\n                    icon=\"fa fa-tablet\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        if Permission(CanAccessServerHubAdditional()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.configs\",\n                    name=_(\"Configs\"),\n                    icon=\"fa fa-wrench\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        if Permission(CanAccessServerHub()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.gamelogs\",\n                    name=_(\"Game Logs\"),\n                    icon=\"fa fa-file\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        actions.append(\n            NavigationLink(\n                endpoint=\"hub.bans\",\n                name=_(\"Bans\"),\n                icon=\"fa fa-wheelchair-alt\",\n                urlforkwargs={\"server\": hub_current_server.id},\n            )\n        )\n\n        if Permission(CanAccessServerHub()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.connections\",\n                    name=_(\"Connections\"),\n                    icon=\"fa fa-sign-in\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                )\n            )\n\n        if Permission(CanAccessServerHubManagement()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.team\",\n                    name=_(\"Team\"),\n                    icon=\"fa fa-group\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        return actions\n\n    def get_args(self):\n        status = self._get_server_status()\n        return {\n            \"server\": hub_current_server,\n            \"server_status\": status,\n            \"actions\": self.__get_actions(server_status=status)\n        }\n\n    def get(self):\n        return render_template(\"hub/server/index.html\", **self.get_args())\n\n\ndef get_server_log_file_path(server):\n    log_file_path = \"logs/\" + server.id + \"/server.log\"\n\n    script = '''\n            rm {log_file}\n            journalctl --unit={unit} -n 500 --no-pager >> {log_file}\n        '''.format(\n            unit=server.service_name,\n            log_file=log_file_path)\n    subprocess.run(script, shell=True)\n    return log_file_path\n\n\nclass ControlView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access this page\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def get(self):\n        view = \"HubLogs\"\n        if \"view\" in request.args:\n            view = request.args[\"view\"]\n\n        logs = []\n        if view == \"HubLogs\":\n            logs = db.session.query(HubLog) \\\n                .filter(HubLog.server_id == hub_current_server.id) \\\n                .order_by(HubLog.id.desc()) \\\n                .limit(100) \\\n                .all()\n        elif view == \"UpdateLogs\":\n            update_log_path = get_update_log_path(hub_current_server.id)\n            logs = open(update_log_path, 'r').read().split(\"\\n\")[-500:]\n        elif view == \"ServerLogs\":\n            server_log_path = get_server_log_file_path(hub_current_server)\n            logs = open(server_log_path, 'r').read().split(\"\\n\")[-500:]\n\n        return render_template(\"hub/server/control.html\", **self.get_args(), view=view, logs=logs)\n\n\nclass ConfigsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        for server in servers:\n            if server.id == server_id:\n                config_folder_entries = [os.path.join(server.configs_path, f) for f in os.listdir(server.configs_path)]\n                config_files = [f for f in config_folder_entries if os.path.isfile(f)]\n\n                config_files_names = [os.path.split(f)[1] for f in config_files]\n                config_files_names = [f for f in config_files_names if f not in server.configs_exclude]\n                config_files_names.sort()\n\n                return render_template(\"hub/server/configs.html\", **self.get_args(), configs=config_files_names)\n\n        return render_template(\"hub/server/configs.html\", **self.get_args())\n\n\nclass ConfigEditView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        config_name = request.args[\"config_name\"]\n\n        servers = current_app.config[\"BYOND_SERVERS\"]\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        form = self.form()\n        with open(os.path.join(server.configs_path, config_name)) as f:\n            form.content.data = f.read()\n\n        return render_template(\"hub/server/config_edit.html\", **self.get_args(), config_name=config_name, form=form)\n\n    def post(self):\n        server_id = request.args[\"server\"]\n        config_name = request.args[\"config_name\"]\n\n        servers = current_app.config[\"BYOND_SERVERS\"]\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        form = self.form()\n        if form.validate_on_submit():\n            with open(os.path.join(server.configs_path, config_name), \"w\") as f:\n                f.write(form.content.data)\n                LogAction(current_user, 'updated server\\'s config file \"{}\"'.format(config_name))\n                flash(\"Configuration file was saved!\")\n\n        return render_template(\"hub/server/config_edit.html\", **self.get_args(), config_name=config_name, form=form)\n\n    def form(self):\n        return ConfigEditForm()\n\n\nclass LogsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    # returns list [{\"name\": name, \"url\": url)]\n    @staticmethod\n    def get_title_parent_folders(server_id, root_path, current_path):\n        folders = []\n\n        path = current_path\n        while root_path != path:\n            name = os.path.split(path)[1]\n            url = url_for(\"hub.gamelogs\", server=server_id, path=os.path.relpath(path, root_path))\n            folders.insert(0, {\"name\": name, \"url\": url})\n            path = os.path.dirname(path)\n\n        name = \"logs\"\n        url = url_for(\"hub.gamelogs\", server=server_id)\n        folders.insert(0, {\"name\": name, \"url\": url})\n\n        if len(folders):\n            folders[-1][\"url\"] = None\n\n        return folders\n\n    def get(self, **kwargs):\n        server_id = request.args[\"server\"]\n        path = None\n        if \"path\" in request.args:\n            path = request.args[\"path\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        current_path = server.logs_path\n        if path:\n            current_path = os.path.realpath(os.path.join(current_path, path))\n            if not current_path.startswith(server.logs_path + os.sep):\n                abort(404)\n\n        title_parent_folders = self.get_title_parent_folders(server_id, server.logs_path, current_path)\n\n        logs_folder_entries = [os.path.join(current_path, f) for f in os.listdir(current_path)]\n        entries = {}\n\n        for entry in logs_folder_entries:\n            entry_pure = os.path.split(entry)[1]\n            if os.path.isfile(entry):\n                entries[entry_pure] = url_for(\"hub.download_gamelog\", server=server_id, path=os.path.relpath(entry, server.logs_path))\n            else:\n                lll = os.path.relpath(entry, server.logs_path)\n                entries[entry_pure] = url_for(\"hub.gamelogs\", server=server_id, path=os.path.relpath(entry, server.logs_path))\n\n        return render_template(\n            \"hub/server/gamelogs.html\",\n            **self.get_args(),\n            entries=sorted(entries.items()),\n            title_parent_folders=title_parent_folders\n        )\n\n\nclass LogDownload(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        path = request.args[\"path\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        assert path\n        assert server_id\n\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        file_path = os.path.join(server.logs_path, path)\n        return send_file(file_path, as_attachment=True)\n\n\nclass TeamView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubManagement(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access the server team view\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def __add_group_to_user(self, user_discord_id):\n        roles = DiscordRole.query\\\n            .join(DiscordUserRole)\\\n            .join(DiscordUser)\\\n            .filter(DiscordUser.id == user_discord_id)\\\n            .all()\n\n        user = User.query.filter(User.discord == user_discord_id).first()\n        for role in roles:\n            if role.id in hub_current_server.discord_role_to_group:\n                group_id = hub_current_server.discord_role_to_group[role.id]\n                group = Group.query.filter(Group.id == group_id).first()\n                if not user:\n                    discord_user = DiscordUser.query.filter(DiscordUser.id == user_discord_id).first()\n                    assert discord_user\n                    user = User(discord=user_discord_id, display_name=discord_user.pure_name, activated=True)\n                    user.primary_group = group\n                else:\n                    last_group = user.primary_group\n                    user.primary_group = group\n                    user.add_to_group(last_group)\n\n                user.save()\n                LogAction(current_user, \"added user {name} (discord: {discord_id}) to group {group}\".format(\n                    name=user.display_name,\n                    discord_id=user_discord_id,\n                    group=group.name\n                ))\n                flash(\"User {} was added to group {}\".format(user.display_name, group.name))\n                return True\n\n        flash(\"Failed to find appropriate group for user {}\".format(user.display_name), \"danger\")\n        return False\n\n    def __remove_group_from_user(self, user_discord_id):\n        user = User.query.filter(User.discord == user_discord_id).first()\n        assert user.primary_group.id in hub_current_server.discord_role_to_group.values()\n\n        removed_group = user.primary_group\n\n        secondary_groups = user.secondary_groups.all()\n        if len(secondary_groups):\n            user.primary_group = secondary_groups[0]\n        else:\n            user.primary_group = Group.get_member_group()\n        user.save()\n        LogAction(current_user, \"removed user {name} (discord: {discord_id}) from group {group}\".format(\n            name=user.display_name,\n            discord_id=user_discord_id,\n            group=removed_group.name\n        ))\n        flash(\"User {} was removed from group {}\".format(user.display_name, removed_group.name))\n\n    def get(self):\n        if \"user_to_add\" in request.args:\n            self.__add_group_to_user(request.args[\"user_to_add\"])\n            return redirect(url_for(\"hub.team\", server=hub_current_server.id))\n\n        if \"user_to_remove_group\" in request.args:\n            self.__remove_group_from_user(request.args[\"user_to_remove_group\"])\n            return redirect(url_for(\"hub.team\", server=hub_current_server.id))\n\n        @attr.s\n        class TeamMember:\n            id = attr.ib()\n            username = attr.ib()\n            group = attr.ib(default=\"\")\n            discord_role = attr.ib(default=\"\")\n            url = attr.ib(default=\"\")\n            remove_group_url = attr.ib(default=\"\")\n\n        members = []\n        for user in User.query.all():\n            if Permission(CanAccessServerHub(), identity=user):\n                new_member = TeamMember(\n                        id=user.discord,\n                        username=user.display_name,\n                        group=user.primary_group.name,\n                        url=user.url)\n\n                if user.primary_group.id in hub_current_server.discord_role_to_group.values():\n                    new_member.remove_group_url = \\\n                        url_for(\"hub.team\", server=hub_current_server.id, user_to_remove_group=user.discord)\n\n                members.append(new_member)\n\n        discord_users_with_pedalique_role = db.session.query(DiscordUser)\\\n            .join(DiscordUserRole)\\\n            .join(DiscordRole)\\\n            .filter(DiscordUserRole.role.in_(hub_current_server.discord_full_access_titles))\\\n            .distinct(DiscordUser.id)\\\n            .add_entity(DiscordRole)\\\n            .all()\n\n        members_from_discord = []\n        for discord_user, discord_role in discord_users_with_pedalique_role:\n            found = False\n            for member in members:\n                if member.id == discord_user.id:\n                    member.discord_role = discord_role.title\n                    found = True\n                    break\n            if not found:\n                members_from_discord.append(TeamMember(id=discord_user.id, username=discord_user.pure_name, discord_role=discord_role.title))\n\n        return render_template(\n            \"hub/server/team.html\",\n            **self.get_args(),\n            members=members + members_from_discord\n        )\n\n\ndef bans_records_from_db_records(bans_records: List[ErroBan]):\n    bans = list()\n    for ban in bans_records:\n        ban_record = ban.get_ban_record()\n\n        description = ban_record.bantype\n        if ban_record.bantype == \"tempban\" or ban_record.bantype == \"job_tempban\":\n            description = str(int((ban_record.expiration_time - ban_record.bantime).total_seconds() / 60)) + \"m\"\n        elif ban_record.bantype == \"permaban\" or ban_record.bantype == \"job_permaban\":\n            description = \"Permaban\"\n\n        if ban_record.bantype == \"job_tempban\" or ban_record.bantype == \"job_permaban\":\n            description += \", Job: \" + ban_record.role\n\n        ban_record.desc = description\n\n        bans.append(ban_record)\n\n    return bans\n\n\nclass BansView(Hub):\n    def get(self):\n        page = request.args.get('page', 1, type=int)\n        search = request.args.get('search')\n\n        server_ban = game_models[hub_current_server.id][\"ErroBan\"]\n        query = server_ban.query \\\n            .order_by(server_ban.id.desc())\n\n        form = BanSearchForm()\n\n        if search is not None:\n            search = ast.literal_eval(search)\n            if not search[\"text\"]:\n                abort(404)\n\n            form.searchText.data = search[\"text\"]\n\n            if search[\"type\"] == \"ckey\":\n                query = query.filter(server_ban.ckey == search[\"text\"])\n                form.searchType.data = \"Ckey\"\n            elif search[\"type\"] == \"admin\":\n                query = query.filter(server_ban.a_ckey == search[\"text\"])\n                form.searchType.data = \"Admin\"\n            elif search[\"type\"] == \"reason\":\n                query = query.filter(server_ban.reason.contains(search[\"text\"]))\n                form.searchType.data = \"Reason\"\n            else:\n                abort(404)\n\n        bans_records_page: Pagination = query.paginate(page, 50)\n        bans = bans_records_from_db_records(bans_records_page.items)\n        return render_template(\n            \"hub/server/bans.html\",\n            **self.get_args(),\n            bans=bans,\n            page=bans_records_page,\n            form=form,\n            search=search)\n\n    def post(self):\n        form = BanSearchForm()\n\n        search = None\n        if form.validate_on_submit() and form.searchText.data:\n            if form.searchType.data == \"Ckey\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"ckey\", \"text\": ckey}\n            elif form.searchType.data == \"Admin\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"admin\", \"text\": ckey}\n            elif form.searchType.data == \"Reason\":\n                search = {\"type\": \"reason\", \"text\": form.searchText.data}\n\n        return redirect(url_for(\"hub.bans\", server=hub_current_server.id, search=search))\n\n\nclass ConnectionsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        page = request.args.get('page', 1, type=int)\n        search = request.args.get('search')\n\n        connection_model = game_models[hub_current_server.id][\"Connection\"]\n        query = connection_model.query.order_by(connection_model.id.desc())\n\n        form = ConnectionSearchForm()\n\n        if search is not None:\n            search = ast.literal_eval(search)\n            if not search[\"text\"]:\n                abort(404)\n\n            form.searchText.data = search[\"text\"]\n\n            if search[\"type\"] == \"ckey\":\n                query = query.filter(connection_model.ckey == search[\"text\"])\n                form.searchType.data = \"Ckey\"\n            elif search[\"type\"] == \"cid\":\n                query = query.filter(connection_model.computerid == search[\"text\"])\n                form.searchType.data = \"Computer ID\"\n            elif search[\"type\"] == \"ip\":\n                query = query.filter(connection_model.ip.like(search[\"text\"]))\n                form.searchType.data = \"IP\"\n            else:\n                abort(404)\n\n        connections_records_page: Pagination = query.paginate(page, 50)\n        connections = [c.get_record() for c in connections_records_page.items]\n\n        return render_template(\n            \"hub/server/connections.html\",\n            **self.get_args(),\n            connections=connections,\n            page=connections_records_page,\n            form=form,\n            search=search)\n\n    def post(self):\n        form = ConnectionSearchForm()\n\n        search = None\n        if form.validate_on_submit() and form.searchText.data:\n            if form.searchType.data == \"Ckey\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"ckey\", \"text\": ckey}\n            elif form.searchType.data == \"Computer ID\":\n                computerId = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"cid\", \"text\": computerId}\n            elif form.searchType.data == \"IP\":\n                search = {\"type\": \"ip\", \"text\": form.searchText.data}\n\n        return redirect(url_for(\"hub.connections\", server=hub_current_server.id, search=search))\n"], "fixing_code": ["import os\nimport attr\nimport re\nimport ast\nimport errno\nimport datetime\nimport subprocess\nfrom subprocess import DEVNULL, PIPE, STDOUT\nfrom typing import List\n\nfrom flask import redirect, request, url_for, current_app, abort, flash, send_file\nfrom flask_babelplus import gettext as _\nfrom flask_allows import Permission\nfrom flask_login import current_user\nfrom flask_sqlalchemy import Pagination\nfrom flask.views import MethodView\nfrom flaskbb.utils.helpers import FlashAndRedirect\nfrom flaskbb.display.navigation import NavigationLink\nfrom flaskbb.extensions import allows, db, celery\nfrom flaskbb.user.models import User, Group\nfrom flaskbb.forum.models import Post\nfrom werkzeug.utils import safe_join \n\n\nfrom hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm\nfrom hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional, CanAccessServerHubManagement\nfrom hub.models import DiscordUser, DiscordUserRole, DiscordRole, HubLog\nfrom hub.utils import hub_current_server\nfrom hub.gameserver_models import game_models, ErroBan\n\nfrom flaskbb.utils.helpers import (\n    render_template,\n)\n\n\nclass FlashAndRedirectToHub(object):\n    def __init__(self, message, level):\n        self._message = message\n        self._level = level\n\n    def __call__(self, *a, **k):\n        flash(self._message, self._level)\n        return redirect(url_for(\"hub.index\", server=hub_current_server.id))\n\n\ndef LogAction(user, message):\n    log_entry = HubLog()\n    log_entry.user = user\n    log_entry.message = message\n    log_entry.server_id = hub_current_server.id\n    log_entry.save()\n\n\ndef datetime_tag():\n    return datetime.datetime.now().strftime(\"[%d.%m.%Y %H:%M:%S]\\t\")\n\n\n@celery.task\ndef run_console_script_async(script, task_name=None, output_file_path=\"\"):\n    proc = subprocess.Popen(script, shell=True, stdout=PIPE, stderr=STDOUT, text=True, bufsize=1)\n\n    if not task_name or not output_file_path:\n        return\n\n    if not os.path.exists(os.path.dirname(output_file_path)):\n        try:\n            os.makedirs(os.path.dirname(output_file_path))\n        except OSError as exc:  # Guard against race condition\n            if exc.errno != errno.EEXIST:\n                raise\n    output_file = open(output_file_path, \"a+\", buffering=1)\n\n    output_file.write(\"\\n-------------------\\n\")\n    output_file.write(datetime_tag() + task_name + \" script:\\n\")\n    for script_line in script.split('\\n'):\n        output_file.write(datetime_tag() + \"> \" + script_line + \"\\n\")\n\n    output_file.write(datetime_tag() + task_name + \" started:\\n\")\n    for line in proc.stdout:\n        output_file.write(datetime_tag() + line)\n    output_file.write(datetime_tag() + task_name + \" finished\\n\")\n\n\nclass ServerControl(MethodView):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to use server controls\"),\n                level=\"danger\"\n            )\n        )\n    ]\n    _action = \"made unknown action with\"\n\n    def _report(self, user):\n        LogAction(user, self._action + \" server\")\n\n\nclass StartServer(ServerControl):\n    _action = \"started\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl start \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\nclass StopServer(ServerControl):\n    _action = \"stopped\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl stop \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\nclass RestartServer(ServerControl):\n    _action = \"restarted\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        command = \"sudo systemctl restart \" + hub_current_server.service_name\n        run_console_script_async.delay(command)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"HubLogs\"))\n\n\ndef get_update_log_path(server_id):\n    return \"logs/\" + server_id + \"/update.log\"\n\n\nclass UpdateServer(ServerControl):\n    _action = \"updated\"\n\n    def post(self):\n        if not hub_current_server:\n            abort(404)\n\n        update_script = \\\n            '''\n                cd {path}\n                git fetch origin {branch}\n                git checkout -f FETCH_HEAD\n                {dreammaker} -clean {dme}\n            '''.format(\n                path=hub_current_server.path,\n                branch=hub_current_server.branch_name,\n                dreammaker=hub_current_server.dream_maker_binary,\n                dme=hub_current_server.dme_name\n            )\n\n        output_file = get_update_log_path(hub_current_server.id)\n        result = run_console_script_async.delay(update_script, \"Update\", output_file)\n        self._report(current_user)\n        return redirect(url_for(\"hub.control\", server=hub_current_server.id, view=\"UpdateLogs\"))\n\n\nclass Hub(MethodView):\n    def _get_server_status(self):\n        command = \"systemctl status \" + hub_current_server.service_name\n        result = subprocess.run(command, stdout=DEVNULL, shell=True)\n        if not result.returncode:\n            status = \"online\"\n        else:\n            status = \"offline\"\n        return status\n\n    def __get_actions(self, server_status):\n        actions = []\n\n        if Permission(CanAccessServerHubAdditional()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.control\",\n                    name=_(\"Control\"),\n                    icon=\"fa fa-tablet\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        if Permission(CanAccessServerHubAdditional()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.configs\",\n                    name=_(\"Configs\"),\n                    icon=\"fa fa-wrench\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        if Permission(CanAccessServerHub()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.gamelogs\",\n                    name=_(\"Game Logs\"),\n                    icon=\"fa fa-file\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        actions.append(\n            NavigationLink(\n                endpoint=\"hub.bans\",\n                name=_(\"Bans\"),\n                icon=\"fa fa-wheelchair-alt\",\n                urlforkwargs={\"server\": hub_current_server.id},\n            )\n        )\n\n        if Permission(CanAccessServerHub()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.connections\",\n                    name=_(\"Connections\"),\n                    icon=\"fa fa-sign-in\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                )\n            )\n\n        if Permission(CanAccessServerHubManagement()):\n            actions.append(\n                NavigationLink(\n                    endpoint=\"hub.team\",\n                    name=_(\"Team\"),\n                    icon=\"fa fa-group\",\n                    urlforkwargs={\"server\": hub_current_server.id},\n                ))\n\n        return actions\n\n    def get_args(self):\n        status = self._get_server_status()\n        return {\n            \"server\": hub_current_server,\n            \"server_status\": status,\n            \"actions\": self.__get_actions(server_status=status)\n        }\n\n    def get(self):\n        return render_template(\"hub/server/index.html\", **self.get_args())\n\n\ndef get_server_log_file_path(server):\n    log_file_path = \"logs/\" + server.id + \"/server.log\"\n\n    script = '''\n            rm {log_file}\n            journalctl --unit={unit} -n 500 --no-pager >> {log_file}\n        '''.format(\n            unit=server.service_name,\n            log_file=log_file_path)\n    subprocess.run(script, shell=True)\n    return log_file_path\n\n\nclass ControlView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access this page\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def get(self):\n        view = \"HubLogs\"\n        if \"view\" in request.args:\n            view = request.args[\"view\"]\n\n        logs = []\n        if view == \"HubLogs\":\n            logs = db.session.query(HubLog) \\\n                .filter(HubLog.server_id == hub_current_server.id) \\\n                .order_by(HubLog.id.desc()) \\\n                .limit(100) \\\n                .all()\n        elif view == \"UpdateLogs\":\n            update_log_path = get_update_log_path(hub_current_server.id)\n            logs = open(update_log_path, 'r').read().split(\"\\n\")[-500:]\n        elif view == \"ServerLogs\":\n            server_log_path = get_server_log_file_path(hub_current_server)\n            logs = open(server_log_path, 'r').read().split(\"\\n\")[-500:]\n\n        return render_template(\"hub/server/control.html\", **self.get_args(), view=view, logs=logs)\n\n\nclass ConfigsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        for server in servers:\n            if server.id == server_id:\n                config_folder_entries = [os.path.join(server.configs_path, f) for f in os.listdir(server.configs_path)]\n                config_files = [f for f in config_folder_entries if os.path.isfile(f)]\n\n                config_files_names = [os.path.split(f)[1] for f in config_files]\n                config_files_names = [f for f in config_files_names if f not in server.configs_exclude]\n                config_files_names.sort()\n\n                return render_template(\"hub/server/configs.html\", **self.get_args(), configs=config_files_names)\n\n        return render_template(\"hub/server/configs.html\", **self.get_args())\n\n\nclass ConfigEditView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubAdditional(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        config_name = request.args[\"config_name\"]\n\n        servers = current_app.config[\"BYOND_SERVERS\"]\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        form = self.form()\n        with open(os.path.join(server.configs_path, config_name)) as f:\n            form.content.data = f.read()\n\n        return render_template(\"hub/server/config_edit.html\", **self.get_args(), config_name=config_name, form=form)\n\n    def post(self):\n        server_id = request.args[\"server\"]\n        config_name = request.args[\"config_name\"]\n\n        servers = current_app.config[\"BYOND_SERVERS\"]\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        form = self.form()\n        if form.validate_on_submit():\n            with open(os.path.join(server.configs_path, config_name), \"w\") as f:\n                f.write(form.content.data)\n                LogAction(current_user, 'updated server\\'s config file \"{}\"'.format(config_name))\n                flash(\"Configuration file was saved!\")\n\n        return render_template(\"hub/server/config_edit.html\", **self.get_args(), config_name=config_name, form=form)\n\n    def form(self):\n        return ConfigEditForm()\n\n\nclass LogsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    # returns list [{\"name\": name, \"url\": url)]\n    @staticmethod\n    def get_title_parent_folders(server_id, root_path, current_path):\n        folders = []\n\n        path = current_path\n        while root_path != path:\n            name = os.path.split(path)[1]\n            url = url_for(\"hub.gamelogs\", server=server_id, path=os.path.relpath(path, root_path))\n            folders.insert(0, {\"name\": name, \"url\": url})\n            path = os.path.dirname(path)\n\n        name = \"logs\"\n        url = url_for(\"hub.gamelogs\", server=server_id)\n        folders.insert(0, {\"name\": name, \"url\": url})\n\n        if len(folders):\n            folders[-1][\"url\"] = None\n\n        return folders\n\n    def get(self, **kwargs):\n        server_id = request.args[\"server\"]\n        path = None\n        if \"path\" in request.args:\n            path = request.args[\"path\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        current_path = server.logs_path\n        if path:\n            current_path = os.path.realpath(os.path.join(current_path, path))\n            if not current_path.startswith(server.logs_path + os.sep):\n                abort(404)\n\n        title_parent_folders = self.get_title_parent_folders(server_id, server.logs_path, current_path)\n\n        logs_folder_entries = [os.path.join(current_path, f) for f in os.listdir(current_path)]\n        entries = {}\n\n        for entry in logs_folder_entries:\n            entry_pure = os.path.split(entry)[1]\n            if os.path.isfile(entry):\n                entries[entry_pure] = url_for(\"hub.download_gamelog\", server=server_id, path=os.path.relpath(entry, server.logs_path))\n            else:\n                lll = os.path.relpath(entry, server.logs_path)\n                entries[entry_pure] = url_for(\"hub.gamelogs\", server=server_id, path=os.path.relpath(entry, server.logs_path))\n\n        return render_template(\n            \"hub/server/gamelogs.html\",\n            **self.get_args(),\n            entries=sorted(entries.items()),\n            title_parent_folders=title_parent_folders\n        )\n\n\nclass LogDownload(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        server_id = request.args[\"server\"]\n        path = request.args[\"path\"]\n        servers = current_app.config[\"BYOND_SERVERS\"]\n\n        assert path\n        assert server_id\n\n        server = None\n\n        for srv in servers:\n            if srv.id == server_id:\n                server = srv\n                break\n\n        if server is None:\n            abort(404)\n\n        file_path = safe_join(server.logs_path, path)\n        return send_file(file_path, as_attachment=True)\n\n\nclass TeamView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHubManagement(),\n            on_fail=FlashAndRedirectToHub(\n                message=_(\"You are not allowed to access the server team view\"),\n                level=\"danger\"\n            )\n        )\n    ]\n\n    def __add_group_to_user(self, user_discord_id):\n        roles = DiscordRole.query\\\n            .join(DiscordUserRole)\\\n            .join(DiscordUser)\\\n            .filter(DiscordUser.id == user_discord_id)\\\n            .all()\n\n        user = User.query.filter(User.discord == user_discord_id).first()\n        for role in roles:\n            if role.id in hub_current_server.discord_role_to_group:\n                group_id = hub_current_server.discord_role_to_group[role.id]\n                group = Group.query.filter(Group.id == group_id).first()\n                if not user:\n                    discord_user = DiscordUser.query.filter(DiscordUser.id == user_discord_id).first()\n                    assert discord_user\n                    user = User(discord=user_discord_id, display_name=discord_user.pure_name, activated=True)\n                    user.primary_group = group\n                else:\n                    last_group = user.primary_group\n                    user.primary_group = group\n                    user.add_to_group(last_group)\n\n                user.save()\n                LogAction(current_user, \"added user {name} (discord: {discord_id}) to group {group}\".format(\n                    name=user.display_name,\n                    discord_id=user_discord_id,\n                    group=group.name\n                ))\n                flash(\"User {} was added to group {}\".format(user.display_name, group.name))\n                return True\n\n        flash(\"Failed to find appropriate group for user {}\".format(user.display_name), \"danger\")\n        return False\n\n    def __remove_group_from_user(self, user_discord_id):\n        user = User.query.filter(User.discord == user_discord_id).first()\n        assert user.primary_group.id in hub_current_server.discord_role_to_group.values()\n\n        removed_group = user.primary_group\n\n        secondary_groups = user.secondary_groups.all()\n        if len(secondary_groups):\n            user.primary_group = secondary_groups[0]\n        else:\n            user.primary_group = Group.get_member_group()\n        user.save()\n        LogAction(current_user, \"removed user {name} (discord: {discord_id}) from group {group}\".format(\n            name=user.display_name,\n            discord_id=user_discord_id,\n            group=removed_group.name\n        ))\n        flash(\"User {} was removed from group {}\".format(user.display_name, removed_group.name))\n\n    def get(self):\n        if \"user_to_add\" in request.args:\n            self.__add_group_to_user(request.args[\"user_to_add\"])\n            return redirect(url_for(\"hub.team\", server=hub_current_server.id))\n\n        if \"user_to_remove_group\" in request.args:\n            self.__remove_group_from_user(request.args[\"user_to_remove_group\"])\n            return redirect(url_for(\"hub.team\", server=hub_current_server.id))\n\n        @attr.s\n        class TeamMember:\n            id = attr.ib()\n            username = attr.ib()\n            group = attr.ib(default=\"\")\n            discord_role = attr.ib(default=\"\")\n            url = attr.ib(default=\"\")\n            remove_group_url = attr.ib(default=\"\")\n\n        members = []\n        for user in User.query.all():\n            if Permission(CanAccessServerHub(), identity=user):\n                new_member = TeamMember(\n                        id=user.discord,\n                        username=user.display_name,\n                        group=user.primary_group.name,\n                        url=user.url)\n\n                if user.primary_group.id in hub_current_server.discord_role_to_group.values():\n                    new_member.remove_group_url = \\\n                        url_for(\"hub.team\", server=hub_current_server.id, user_to_remove_group=user.discord)\n\n                members.append(new_member)\n\n        discord_users_with_pedalique_role = db.session.query(DiscordUser)\\\n            .join(DiscordUserRole)\\\n            .join(DiscordRole)\\\n            .filter(DiscordUserRole.role.in_(hub_current_server.discord_full_access_titles))\\\n            .distinct(DiscordUser.id)\\\n            .add_entity(DiscordRole)\\\n            .all()\n\n        members_from_discord = []\n        for discord_user, discord_role in discord_users_with_pedalique_role:\n            found = False\n            for member in members:\n                if member.id == discord_user.id:\n                    member.discord_role = discord_role.title\n                    found = True\n                    break\n            if not found:\n                members_from_discord.append(TeamMember(id=discord_user.id, username=discord_user.pure_name, discord_role=discord_role.title))\n\n        return render_template(\n            \"hub/server/team.html\",\n            **self.get_args(),\n            members=members + members_from_discord\n        )\n\n\ndef bans_records_from_db_records(bans_records: List[ErroBan]):\n    bans = list()\n    for ban in bans_records:\n        ban_record = ban.get_ban_record()\n\n        description = ban_record.bantype\n        if ban_record.bantype == \"tempban\" or ban_record.bantype == \"job_tempban\":\n            description = str(int((ban_record.expiration_time - ban_record.bantime).total_seconds() / 60)) + \"m\"\n        elif ban_record.bantype == \"permaban\" or ban_record.bantype == \"job_permaban\":\n            description = \"Permaban\"\n\n        if ban_record.bantype == \"job_tempban\" or ban_record.bantype == \"job_permaban\":\n            description += \", Job: \" + ban_record.role\n\n        ban_record.desc = description\n\n        bans.append(ban_record)\n\n    return bans\n\n\nclass BansView(Hub):\n    def get(self):\n        page = request.args.get('page', 1, type=int)\n        search = request.args.get('search')\n\n        server_ban = game_models[hub_current_server.id][\"ErroBan\"]\n        query = server_ban.query \\\n            .order_by(server_ban.id.desc())\n\n        form = BanSearchForm()\n\n        if search is not None:\n            search = ast.literal_eval(search)\n            if not search[\"text\"]:\n                abort(404)\n\n            form.searchText.data = search[\"text\"]\n\n            if search[\"type\"] == \"ckey\":\n                query = query.filter(server_ban.ckey == search[\"text\"])\n                form.searchType.data = \"Ckey\"\n            elif search[\"type\"] == \"admin\":\n                query = query.filter(server_ban.a_ckey == search[\"text\"])\n                form.searchType.data = \"Admin\"\n            elif search[\"type\"] == \"reason\":\n                query = query.filter(server_ban.reason.contains(search[\"text\"]))\n                form.searchType.data = \"Reason\"\n            else:\n                abort(404)\n\n        bans_records_page: Pagination = query.paginate(page, 50)\n        bans = bans_records_from_db_records(bans_records_page.items)\n        return render_template(\n            \"hub/server/bans.html\",\n            **self.get_args(),\n            bans=bans,\n            page=bans_records_page,\n            form=form,\n            search=search)\n\n    def post(self):\n        form = BanSearchForm()\n\n        search = None\n        if form.validate_on_submit() and form.searchText.data:\n            if form.searchType.data == \"Ckey\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"ckey\", \"text\": ckey}\n            elif form.searchType.data == \"Admin\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"admin\", \"text\": ckey}\n            elif form.searchType.data == \"Reason\":\n                search = {\"type\": \"reason\", \"text\": form.searchText.data}\n\n        return redirect(url_for(\"hub.bans\", server=hub_current_server.id, search=search))\n\n\nclass ConnectionsView(Hub):\n    decorators = [\n        allows.requires(\n            CanAccessServerHub(),\n            on_fail=FlashAndRedirect(\n                message=_(\"You are not allowed to access the hub\"),\n                level=\"danger\",\n                endpoint=\"forum.index\"\n            )\n        )\n    ]\n\n    def get(self):\n        page = request.args.get('page', 1, type=int)\n        search = request.args.get('search')\n\n        connection_model = game_models[hub_current_server.id][\"Connection\"]\n        query = connection_model.query.order_by(connection_model.id.desc())\n\n        form = ConnectionSearchForm()\n\n        if search is not None:\n            search = ast.literal_eval(search)\n            if not search[\"text\"]:\n                abort(404)\n\n            form.searchText.data = search[\"text\"]\n\n            if search[\"type\"] == \"ckey\":\n                query = query.filter(connection_model.ckey == search[\"text\"])\n                form.searchType.data = \"Ckey\"\n            elif search[\"type\"] == \"cid\":\n                query = query.filter(connection_model.computerid == search[\"text\"])\n                form.searchType.data = \"Computer ID\"\n            elif search[\"type\"] == \"ip\":\n                query = query.filter(connection_model.ip.like(search[\"text\"]))\n                form.searchType.data = \"IP\"\n            else:\n                abort(404)\n\n        connections_records_page: Pagination = query.paginate(page, 50)\n        connections = [c.get_record() for c in connections_records_page.items]\n\n        return render_template(\n            \"hub/server/connections.html\",\n            **self.get_args(),\n            connections=connections,\n            page=connections_records_page,\n            form=form,\n            search=search)\n\n    def post(self):\n        form = ConnectionSearchForm()\n\n        search = None\n        if form.validate_on_submit() and form.searchText.data:\n            if form.searchType.data == \"Ckey\":\n                ckey = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"ckey\", \"text\": ckey}\n            elif form.searchType.data == \"Computer ID\":\n                computerId = re.sub(r'[^\\w\\d]', '', form.searchText.data)\n                search = {\"type\": \"cid\", \"text\": computerId}\n            elif form.searchType.data == \"IP\":\n                search = {\"type\": \"ip\", \"text\": form.searchText.data}\n\n        return redirect(url_for(\"hub.connections\", server=hub_current_server.id, search=search))\n"], "filenames": ["modules/hub/hub/views.py"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [493], "fixing_code_start_loc": [22], "fixing_code_end_loc": [495], "type": "CWE-22", "message": "The ChaoticOnyx/OnyxForum repository before 2022-05-04 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.", "other": {"cve": {"id": "CVE-2022-31501", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-11T01:15:08.040", "lastModified": "2022-07-15T12:08:59.270", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The ChaoticOnyx/OnyxForum repository before 2022-05-04 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely."}, {"lang": "es", "value": "El repositorio ChaoticOnyx/OnyxForum versiones anteriores a 04-05-2022 en GitHub, permite un salto de ruta absoluto porque la funci\u00f3n send_file de Flask es usada de forma no segura"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onyxforum_project:onyxforum:*:*:*:*:*:*:*:*", "versionEndIncluding": "2022-05-04", "matchCriteriaId": "20DBF704-0F43-41D2-B854-46441B0944D3"}]}]}], "references": [{"url": "https://github.com/ChaoticOnyx/OnyxForum/commit/f25543dfc62a9694d7e4f67eebfa45e3de916053", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/github/securitylab/issues/669#issuecomment-1117265726", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ChaoticOnyx/OnyxForum/commit/f25543dfc62a9694d7e4f67eebfa45e3de916053"}}