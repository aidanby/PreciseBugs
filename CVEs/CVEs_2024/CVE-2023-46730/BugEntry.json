{"buggy_code": ["<?php\nuse go\\core\\App;\nuse go\\core\\jmap\\State;\nuse go\\core\\fs\\Blob;\nuse go\\core\\http\\Client;\nuse go\\core\\http\\Response;\nuse go\\core\\http\\Request;\n\nrequire(\"../vendor/autoload.php\");\n\nApp::get();\nif(Request::get()->getMethod() == 'OPTIONS') {\n\tResponse::get()->output();\n\texit();\n}\n\ntry {\n//Create the app with the database connection\n\tApp::get()->setAuthState(new State());\n\tif (!App::get()->getAuthState()->isAuthenticated()) {\n\t\tResponse::get()->setStatus(401, 'Created');\n\t\tthrow new \\go\\core\\http\\Exception(401);\n\t}\n\n\tif (isset($_GET['url'])) {\n\t\t$tmpFile = \\go\\core\\fs\\File::tempFile('tmp');\n\n\t\ttry {\n\t\t\t$httpClient = new Client();\n\t\t\t$response = $httpClient->download($_GET['url'], $tmpFile);\n\n\t\t\t$blob = Blob::fromTmp($tmpFile);\n\t\t\t$blob->name = $response['name'];\n\t\t\t$blob->type = $response['type'];\n\t\t} catch(\\Exception $e) {\n\t\t\tthrow new \\Exception(\"Failed to download from given URL \" .  $_GET['url']);\n\t\t}\n\n\t} else {\n\n\t\t//raise max_execution_time for calculating hash of large files\n\t\tini_set('max_execution_time', 300);\n\n\t\t$filename = Request::get()->getHeader('X-File-Name');\n\t\t$filename = Request::headerDecode($filename);\n\t\t$tmpFile = \\go\\core\\fs\\File::tempFile($filename);\n\n\t\t$input = fopen('php://input', \"r\");\n\t\t$fp = $tmpFile->open(\"w+\");\n\t\twhile ($data = fread($input, 4096)) { // 4kb at the time\n\t\t\tfwrite($fp, $data);\n\t\t}\n\t\tfclose($fp);\n\t\tfclose($input);\n\n\t\tif (\\go\\core\\jmap\\Capabilities::get()->maxSizeUpload && $tmpFile->getSize() > \\go\\core\\jmap\\Capabilities::get()->maxSizeUpload) {\n\t\t\t$tmpFile->delete();\n\t\t\tResponse::get()->setStatus(413);\n\t\t\tResponse::get()->output([\n\t\t\t\t\"error\" => \"File exceeds maximum size of \" . \\go\\core\\jmap\\Capabilities::get()->maxSizeUpload . \" bytes\"\n\t\t\t]);\n\t\t\texit();\n\t\t}\n\n\t\t$blob = Blob::fromTmp($tmpFile);\n\t\t$blob->name = $filename;\n\t\tif (Request::get()->getHeader('X-File-LastModified') == null) {\n\t\t\t$blob->modifiedAt = new \\go\\core\\util\\DateTime();\n\t\t} else {\n\t\t\t$blob->modifiedAt = new \\go\\core\\util\\DateTime('@' . Request::get()->getHeader('X-File-LastModified'));\n\t\t}\n\t}\n\n\n\tif ($blob->save()) {\n\t\tResponse::get()->setStatus(201, 'Created');\n\t\t$response = $blob->toArray();\n\t\t$response['blobId'] = $blob->id; //deprecated\n\t\tResponse::get()->output($response);\n\t} else {\n\n\t\tthrow new Exception(\"Could not save file: \". $blob->getValidationErrorsAsString());\n\t}\n}\ncatch(\\Exception $e) {\n\n\t\\go\\core\\ErrorHandler::logException($e);\n\n\tResponse::get()->setStatus(500, \"Upload failed\");\n\tResponse::get()->setContentType(\"application/problem+json\");\n\n\t$response = [\n\t\t\"title\" => \"Upload failed\",\n\t\t\"detail\" => $e->getMessage(),\n\t\t\"status\" => 500\n\t];\n\n\tif(go()->getDebugger()->enabled) {\n\t\t$response['debug'] = go()->getDebugger()->getEntries();\n\t}\n\n\tResponse::get()->output($response);\n}", "<?php\nnamespace go\\core\\model;\n\nuse Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException;\nuse Exception;\nuse go\\core;\nuse go\\core\\exception\\Forbidden;\nuse go\\core\\jmap\\Request as JmapRequest;\nuse go\\core\\util\\Crypt;\nuse go\\modules\\business\\license\\model\\License;\nuse go\\modules\\community\\addressbook\\model\\AddressBook;\n\nclass Settings extends core\\Settings {\n\n\tuse core\\validate\\ValidationTrait;\n\n\t/**\n\t * @throws Exception\n\t */\n\tprotected function __construct() {\n\t\tparent::__construct();\n\t\t\n\t\t$save = false;\n\t\t\n\t\tif(!isset($this->URL)) {\n\t\t\t$this->URL = $this->detectURL();\t\n\t\t\t$save = true;\n\t\t}\n\t\t\n\t\tif(!isset($this->language)) {\n\t\t\t$this->language = $this->getDefaultLanguage();\n\t\t\t$save = true;\n\t\t}\n\t\t\n\t\tif($save) {\n\t\t\ttry {\n\t\t\t\t$this->save();\n\t\t\t}catch(Exception $e) {\n\t\t\t\t\n\t\t\t\t//ignore error on install because core module is not there yet\n\t\t\t\tif(!core\\Installer::isInProgress()) {\n\t\t\t\t\tthrow $e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function hasLanguage(string $lang): bool\n\t{\n\t\treturn core\\Environment::get()->getInstallFolder()->getFile('go/modules/core/language/'.$lang.'.php')->exists();\n\t}\n\t\n\tprivate function getDefaultLanguage() {\t\t\n\t\t//can't use Language here because an infinite loop will occur as it depends on this model.\n\t\tif(isset($_GET['SET_LANGUAGE']) && $this->hasLanguage($_GET['SET_LANGUAGE'])) {\n\t\t\treturn $_GET['SET_LANGUAGE'];\n\t\t}\n\t\t\n\t\t$browserLanguages= JmapRequest::get()->getAcceptLanguages();\n\t\tforeach($browserLanguages as $lang){\n\t\t\t$lang = str_replace('-','_',explode(';', $lang)[0]);\n\t\t\tif($this->hasLanguage($lang)){\n\t\t\t\treturn $lang;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"en\";\n\t}\n\t\n\t\n\t/**\n\t * Auto detects URL to Group-Office if we're running in a webserver\n\t * \n\t * @return string\n\t */\n\tprivate function detectURL(): ?string\n\t{\n\n\t\t//check if this is ran on a webserver\n\t\tif(!isset($_SERVER['REQUEST_METHOD'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$path = dirname($_SERVER['SCRIPT_NAME']); // /index.php or /install/*.php\n\n\t\tif(basename($path) == 'install') {\n\t\t\t$path = dirname($path);\n\t\t}\n\n\t\t$url = JmapRequest::get()->isHttps() ? 'https://' : 'http://';\n\t\t$url .= JmapRequest::get()->getHost(false) . $path;\n\t\t\n\t\treturn $url;\n\t}\n\n\tconst SMTP_ENCRYPTION_TLS = 'tls';\n\tconst SMTP_ENCRYPTION_SSL = 'ssl';\n\t\n\t/**\n\t * System default language ISO code\n\t * \n\t * @var string  eg. \"en\"\n\t */\n\tpublic $language;\n\t\n\t/**\n\t * The title of the Group-Office environment\n\t * \n\t * @var string\n\t */\n\tpublic $title = 'Group-Office';\n\t\n\t\n\t/**\n\t * The e-mail address for sending out system messages.\n\t * \n\t * @var string\n\t */\n\tpublic $systemEmail = 'admin@intermesh.dev';\n\t\n\t\n\t/**\n\t * SMTP host name\n\t * \n\t * @var string\n\t */\n\tpublic $smtpHost = 'localhost';\n\t\n\t/**\n\t * SMTP port\n\t * \n\t * @var string\n\t */\n\tpublic $smtpPort = 587;\n\t\n\t/**\n\t * SMTP username\n\t * @var string\n\t */\n\tpublic $smtpUsername = null;\n\t\n\t/**\n\t * SMTP Password\n\t * \n\t * @var string\n\t */\n\tprotected $smtpPassword = null;\n\n\t/**\n\t * Global SMTP timeout value in seconds\n\t *\n\t * Also used for the e-mail module.\n\t *\n\t * @var int\n\t */\n\tpublic $smtpTimeout = 30;\n\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function decryptSmtpPassword(): ?string\n\t{\n\t\treturn $this->smtpPassword ? Crypt::decrypt($this->smtpPassword) : null;\n\t}\n\n\t/**\n\t * @throws EnvironmentIsBrokenException\n\t */\n\tpublic function setSmtpPassword(?string $value) {\n\t\t$this->smtpPassword = empty($value) ? null : Crypt::encrypt($value);\n\t}\n\t\n\t\n\tprotected $locale;\n\n\t/**\n\t * Get locale for the system. We need a UTF8 locale so command line functions\n\t * work with UTF8.\n\t *\n\t * initialized in old framework GO.php. What should we do with it later?\n\t *\n\t * @return string\n\t * @throws Forbidden\n\t */\n\tpublic function getLocale(): string\n\t{\n\n\t\tif(go()->getInstaller()->isInProgress()) {\n\t\t\treturn 'C.UTF-8';\n\t\t}\n\t\t\n\t\tif(isset($this->locale)) {\n\t\t\treturn $this->locale;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\texec('locale -a', $output);\n\n\t\t\tif(isset($output) && is_array($output)){\n\t\t\t\tforeach($output as $locale){\n\t\t\t\t\tif(stripos($locale,'utf')!==false){\n\t\t\t\t\t\t$this->locale = $locale;\t\t\t\t\t\t\n\t\t\t\t\t\t$this->save();\t\t\t\t\t\t\n\t\t\t\t\t\treturn $this->locale;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(Exception $e) {\n\t\t\tgo()->debug(\"Could not determine locale\");\n\t\t}\n\n\t\t//This locale is often installed so try to fallback on C.UTF8\n\t\t$this->locale = \"C.UTF8\";\n\t\t$this->save();\t\t\n\t\t\n\t\treturn $this->locale;\n\t}\n\t\n\tpublic function setLocale($locale) {\n\t\t$this->locale = $locale;\n\t}\n\n\t/**\n\t * @throws Forbidden\n\t */\n\tpublic function resetLocale(): string\n\t{\n\t\t$this->locale = null;\n\t\treturn $this->getLocale();\n\t}\n\n\t/**\n\t * Encryption to use for SMTP\n\t * @var string|bool\n\t */\n\tpublic $smtpEncryption = self::SMTP_ENCRYPTION_TLS;\n\t\n\t/**\n\t * Set to false to ignore certificate errors. \n\t * \n\t * @var boolean\n\t */\n\tpublic $smtpEncryptionVerifyCertificate = true;\n\t\n\t/**\n\t * When maintenance mode is enabled, only admin users can login.\n\t * @var boolean \n\t */\n\tpublic $maintenanceMode = false;\n\n\t/**\n\t * When true the user interface will show a confirm dialog before moving item with drag and drop\n\t * @var bool\n\t */\n\tpublic $defaultConfirmOnMove = false;\n\t\n\t\n\t/**\n\t * Enable HTML message that will show on the login screen.\n\t * \n\t * @var string \n\t */\n\tpublic $loginMessageEnabled = false;\n\t\n\t/**\n\t * HTML message that will show on the login screen.\n\t * \n\t * @var string \n\t */\n\tpublic $loginMessage = null;\n\t\n\t\n\t/**\n\t * Minimum password length\n\t * \n\t * @var int\n\t */\n\tpublic $passwordMinLength = 6;\n\n\n\t/**\n\t * Number of seconds to auto logout the user if inactive.\n\t * Also disables the \"remember login\" feature as it would make no sense.\n\t * @var int\n\t */\n\tpublic $logoutWhenInactive = 0;\n\t\n\t\n\t/**\n\t * Default domain name to append to username for authentication\n\t * \n\t * @var string\n\t */\n\tpublic $defaultAuthenticationDomain;\n\n\t/**\n\t * An alternative URL to handle lost passwords\n\t *\n\t * @var string\n\t */\n\tpublic $lostPasswordURL;\n\t\n\t\n\t/**\n\t * The full URL to Group-Office. With trailing /.\n\t * \n\t * eg. https://my.groupoffice.net/\n\t * \n\t * @var string \n\t */\n\tpublic $URL;\n\n\t/**\n\t * @var string\n\t */\n\tprotected $corsAllowOrigin = \"\";\n\n\tpublic function setCorsAllowOrigin($origins) {\n\t\tif(empty($origins)) {\n\t\t\t$this->corsAllowOrigin = \"\";\n\t\t} else{\n\t\t\t$origins = array_map(function($host) {\n\t\t\t\treturn rtrim($host, '/');\n\t\t\t}, $origins);\n\n\t\t\t$this->corsAllowOrigin = implode(\" \", $origins);\n\t\t}\n\t}\n\n\tpublic function getCorsAllowOrigin() : array {\n\t\treturn empty($this->corsAllowOrigin) ? [] : explode(\" \", $this->corsAllowOrigin);\n\t}\n\n\n\t/**\n\t * Allow registration via the auth.php endpoint\n\t *\n\t * @var bool\n\t */\n\tpublic $allowRegistration = false;\n\n\n\t/**\n\t * Keep log in core_change for this number of days.\n\t * \n\t * When a client has not logged in for this period the sync data will be deleted and resynchronized.\n\t * \n\t * @var int\n\t */\n\tpublic $syncChangesMaxAge = 30;\n\t\n\t/**\n\t * This variable is checked against the code version.\n\t * If it doesn't match /install/upgrade.php will be executed.\n\t * \n\t * @var string\n\t */\n\tpublic $databaseVersion;\n\n\n\t/**\n\t * Time the db cache was cleared. The client will invalidate it's indexeddb cache when this changes.\n\t * @var int\n\t */\n\tpublic $cacheClearedAt;\n\t\n\t/**\n\t * Primary color in html notation 000000;\n\t * \n\t * @var string\n\t */\n\tpublic $primaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $secondaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $tertiaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $accentColor;\n\t\n\t/**\n\t * Blob ID for the logo\n\t * \n\t * @var string\n\t */\n\tpublic $logoId;\n\n\t\n\t/**\n\t * Get's the transparent color based on the primary color.\n\t * \n\t * @return ?string\n\t */\n\tpublic function getPrimaryColorTransparent(): ?string\n\t{\n\t\tif(!isset($this->primaryColor)) {\n\t\t\treturn null;\n\t\t}\n\t\tlist($r, $g, $b) = sscanf($this->primaryColor, \"%02x%02x%02x\");\n\t\t\n\t\treturn \"rgba($r, $g, $b, .16)\";\n\t}\n\t\n\t/**\n\t * Default time zone for users\n\t * \n\t * @var string\n\t */\n\tpublic $defaultTimezone = \"Europe/Amsterdam\";\n\t\n\t/**\n\t * Default date format for users\n\t * \n\t * @link https://secure.php.net/manual/en/function.date.php\n\t * @var string\n\t */\n\tpublic $defaultDateFormat = \"d-m-Y\";\n\t\n\t/**\n\t * Default time format for users\n\t * \n\t * @link https://secure.php.net/manual/en/function.date.php\n\t * @var string \n\t */\n\tpublic $defaultTimeFormat = \"G:i\";\n\t\n\t/**\n\t * Default currency\n\t * @var string\n\t */\n\tpublic $defaultCurrency = \"\u20ac\";\n\t\n\t/**\n\t * Default first week day\n\t * \n\t * 0 = sunday\n\t * 1 = monday\n\t * \n\t * @var int \n\t */\n\tpublic $defaultFirstWeekday = 1;\n\t\n\t\n\t/**\n\t * The default address book for new users\n\t * @var int \n\t */\n\tpublic $userAddressBookId = null;\n\n\n\tprivate $userAddressBook;\n\n\t/**\n\t * @return AddressBook\n\t * @throws Exception\n\t */\n\tpublic function userAddressBook(): ?AddressBook\n\t{\n\t\tif(!Module::findByName('community', 'addressbook')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif(isset($this->userAddressBook)) {\n\t\t\treturn $this->userAddressBook;\n\t\t}\n\t\t\n\t\tif(isset($this->userAddressBookId)) {\n\t\t\t$this->userAddressBook = AddressBook::findById($this->userAddressBookId);\n\t\t} else{\n\t\t\t$this->userAddressBook = null;\n\t\t}\n\n\t\tif(!$this->userAddressBook) {\n\t\t\tgo()->getDbConnection()->beginTransaction();\n\t\t\t$this->userAddressBook = new AddressBook();\n\t\t\t$this->userAddressBook->name = go()->t(\"Users\");\n\n\t\t\tif(!$this->userAddressBook->save()) {\n\t\t\t\tthrow new Exception(\"Could not save address book\");\n\t\t\t}\n\t\t\t$this->userAddressBookId = $this->userAddressBook->id;\n\n\t\t\t//Share users address book with internal\n\t\t\t$this->userAddressBook->findAcl()->addGroup(Group::ID_INTERNAL)->save();\n\t\t\tif(!$this->save()) {\n\t\t\t\tthrow new Exception(\"Could not save core settings\");\n\t\t\t}\n\t\t\tgo()->getDbConnection()->commit();\n\t\t}\n\n\t\treturn $this->userAddressBook;\n\t}\n\n\t/**\n\t * When archiving a user, move profile user\n\t *\n\t * @return AddressBook | null\n\t * @throws Exception\n\t */\n\n\tpublic function archivedUsersAddressBook()\n\t{\n\t\tif(!Module::findByName('community', 'addressbook')) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$ab = isset($this->archivedUsersAddressBook) ? AddressBook::findById($this->archivedUsersAddressBook) : null;\n\n\t\tif (!$ab) {\n\t\t\tgo()->getDbConnection()->beginTransaction();\n\t\t\t$ab = new AddressBook();\n\t\t\t$ab->name = go()->t(\"Archived users\");\n\t\t\tif(!$ab->save()) {\n\t\t\t\tthrow new Exception(\"Could not save address book\");\n\t\t\t}\n\t\t\t$this->archivedUsersAddressBook = $ab->id;\n\n\t\t\t//Share users address book with admins only\n\t\t\t$ab->findAcl()->addGroup(Group::ID_ADMINS)->save();\n\t\t\tif(!$this->save()) {\n\t\t\t\tthrow new Exception(\"Could not save core settings\");\n\t\t\t}\n\t\t\tgo()->getDbConnection()->commit();\n\t\t}\n\n\t\treturn $ab;\n\t}\n\n\t\n\t\n\t/**\n\t * Default list separator for import and export\n\t * \n\t * @var string\n\t */\n\tpublic $defaultListSeparator = ';';\n\t\n\t/**\n\t * Default text separator for import and export\n\t * \n\t * @var string\n\t */\n\tpublic $defaultTextSeparator = '\"';\n\t\n\t/**\n\t * Default thousands separator for numbers\n\t * @var string\n\t */\n\tpublic $defaultThousandSeparator = '.';\n\t\n\t/**\n\t * Default decimal separator for numbers\n\t * \n\t * @var string\n\t */\n\tpublic $defaultDecimalSeparator = ',';\t\n\t\n\t/**\n\t * Default setting for users to have short date and times in lists.\n\t * @var boolean\n\t */\n\tpublic $defaultShortDateInList = true;\n\n\n\t/**\n\t * License for Group-Office\n\t *\n\t * @var string\n\t */\n\tpublic $license = null;\n\n\t/**\n\t * Set to true when the license dialog has been presented and the user denied.\n\t *\n\t * @var bool\n\t */\n\tpublic $licenseDenied = false;\n\n\n\t/**\n\t * Set to true when the welcome dialog has been presented and the user denied.\n\t *\n\t * @var bool\n\t */\n\tpublic $welcomeShown = false;\n\n\n\t/**\n\t *\n\t * @var bool\n\t */\n\tpublic $demoDataAsked = false;\n\n\n\tprivate $defaultGroups;\n\t\n\t/**\n\t * New users will be member of these groups\n\t * \n\t * @return int[]\n\t */\n\tpublic function getDefaultGroups(): array\n\t{\n\t\tif(!isset($this->defaultGroups)) {\n\t\t\t$this->defaultGroups = array_map(\"intval\", (new core\\db\\Query)\n\t\t\t\t->selectSingleValue('groupId')\n\t\t\t\t->from(\"core_group_default_group\")\n\t\t\t\t->all());\n\n\t\t\tgo()->getCache()->set(static::class, $this);\n\t\t}\n\n\t\treturn $this->defaultGroups;\n\n\t}\n\n\t/**\n\t * Set default groups for new groups\n\t *\n\t * @param array $groups eg [['groupId' => 1]]\n\t * @throws Exception\n\t */\n\tpublic function setDefaultGroups(array $groups) {\n\t\t\n\t\tgo()->getDbConnection()->exec(\"TRUNCATE TABLE core_group_default_group\");\n\t\t\n\t\tforeach($groups as $groupId) {\n\t\t\tif(!go()->getDbConnection()->insert(\"core_group_default_group\", ['groupId' => $groupId])->execute()) {\n\t\t\t\tthrow new Exception(\"Could not save group id \".$groupId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// SYNCHRONISATION SETTINGS\n\t/**\n\t * when true user will get popup to allow its own device.\n\t */\n\tpublic $activeSyncEnable2FA = false;\n\t/**\n\t * When false administrator has to enable each new device\n\t */\n\tpublic $activeSyncCanConnect = true;\n\t\n\t\n\tpublic function save(): bool\n\t{\n\t\tif(!$this->validate()){\n\t\t\treturn false;\n\t\t}\n\n\t\tif(isset($this->logoId)) {\n\t\t\t//todo settings should have real columns with real keys?\n\t\t\t$blob = core\\fs\\Blob::findById($this->logoId);\n\t\t\tif($blob && isset($blob->staleAt)) {\n\t\t\t\t$blob->staleAt = null;\n\t\t\t\t$blob->save();\n\t\t\t}\n\t\t}\n\t\t\n\t\t//for old framework config caching in GO\\Base\\Config\n\t\tif(isset($_SESSION)) {\n\t\t\tunset($_SESSION['GO_SESSION']['newconfig']);\n\t\t}\n\t\t\n\t\t//Make sure URL has trailing slash\n\t\tif(isset($this->URL)) {\n\t\t\t$this->URL = rtrim($this->URL, '/ ').'/';\n\t\t}\n\n\t\tif($this->isModified('maintenanceMode') && $this->maintenanceMode) {\n\t\t\tToken::logoutEveryoneButAdmins();\n\t\t}\n\t\t\n\t\treturn parent::save();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprotected function internalValidate()\n\t{\n\t\tif($this->isModified('license')) {\n\t\t\tif(isset($this->license)) {\n\t\t\t\t$data = License::getLicenseData();\n\t\t\t\tif (!$data) {\n\t\t\t\t\tthrow new Exception(\"License data was corrupted\");\n\t\t\t\t}\n\n\t\t\t\t// force validation because the license was just replaced\n\t\t\t\tif (!License::validate($data, true)) {\n\t\t\t\t\tthrow new Exception(License::$validationError);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(go()->getInstaller()->disableUnavailableModules()){\n\t\t\t\tgo()->rebuildCache();\n\t\t\t}\n\t\t}\n\t}\n}\n", "/**\n * File upload field\n * \n * @example\n * ```\n * this.avatarComp = new go.form.FileField({\n * \t\t\thideLabel: true,\n * \t\t\tbuttonOnly: true,\n * \t\t\tname: 'photoBlobId',\n * \t\t\theight: dp(120),\n * \t\t\tcls: \"avatar\",\n * \t\t\tautoUpload: true,\n * \t\t\tbuttonCfg: {\n * \t\t\t\ttext: '',\n * \t\t\t\twidth: dp(120)\n * \t\t\t},\n * \t\t\tsetValue: function (val) {\n * \t\t\t\tif (this.rendered && !Ext.isEmpty(val)) {\n * \t\t\t\t\tthis.wrap.setStyle('background-image', 'url(' + go.Jmap.downloadUrl(val) + ')');\n * \t\t\t\t}\n * \t\t\t\tgo.form.FileField.prototype.setValue.call(this, val);\n * \t\t\t},\n * \t\t\taccept: 'image/*'\n * \t\t});\n *  * ```\n * \n */\ngo.form.ImageField = Ext.extend(Ext.BoxComponent, {\n\n\t/**\n\t * @cfg {Object} buttonCfg A standard {@link Ext.Button} config object.\n\t */\n\n\t// private\n\treadOnly: true,\n\n\t/**\n\t * @hide\n\t * @method autoSize\n\t */\n\tautoSize: Ext.emptyFn,\n\n\tcls: 'avatar',\n\n\tstyle: \"cursor: pointer\",\n\n\thideLabel: true,\n\n\tautoUpload: false,\n\n\taccept: '*/*',\n\n\tvalue: null,\n\n\t// private\n\tinitComponent: function () {\n\t\tgo.form.ImageField.superclass.initComponent.call(this);\n\n\t\tthis.height= dp(120);\n\t\tthis.width= dp(120);\n\n\t\tthis.menu = new Ext.menu.Menu({\n\t\t\titems: [{\n\n\t\t\t\ticonCls: 'ic-computer',\n\t\t\t\ttext: t(\"Upload\"),\n\t\t\t\thandler: function () {\n\t\t\t\t\tgo.util.openFileDialog({\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\taccept: \"image/*\",\n\t\t\t\t\t\tdirectory: false,\n\t\t\t\t\t\tautoUpload: true,\n\t\t\t\t\t\tlisteners: {\n\t\t\t\t\t\t\tupload: function (response) {\n\t\t\t\t\t\t\t\tthis.setValue(response.blobId);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscope: this\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tscope: this\n\t\t\t}, {\n\t\t\t\ticonCls: 'ic-link',\n\t\t\t\ttext: t(\"From URL\"),\n\t\t\t\thandler: function () {\n\t\t\t\t\tExt.MessageBox.prompt(t(\"Set Image From URL\"), t(\"Enter URL\"), function(btn, url) {\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(btn != \"ok\" || !url) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tExt.Ajax.request({\n\t\t\t\t\t\t\turl: go.User.uploadUrl + \"?url=\" + encodeURIComponent(url),\n\t\t\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\t\t\tsuccess: function(response) {\n\t\t\t\t\t\t\t\tdata = Ext.decode(response.responseText);\n\t\t\t\t\t\t\t\tthis.setValue(data.blobId);\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscope: this\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}, this);\n\t\t\t\t},\n\t\t\t\tscope: this\n\t\t\t},\n\t\t\t{\n\t\t\t\ticonCls: 'ic-delete',\n\t\t\t\ttext: t(\"Clear\"),\n\t\t\t\thandler: function () {\n\t\t\t\t\tthis.setValue(null);\n\t\t\t\t},\n\t\t\t\tscope: this\n\t\t\t}\n\t\t\t]\n\t\t});\n\t},\n\n\t// private\n\tonRender: function (ct, position) {\n\t\tgo.form.ImageField.superclass.onRender.call(this, ct, position);\n\n\t\tthis.getEl().on('click', this.onClick, this);\n\t},\n\n\tonClick: function (e) {\n\t\tvar XY = new Array(e.getPageX(), e.getPageY());\n\t\tthis.menu.showAt(XY);\n\t},\n\n\tname: null,\n\n\tisFormField: true,\n\tgetName: function () {\n\t\treturn this.name;\n\t},\n\n\treset: function () {\n\t\tthis.value = null;\n\t},\n\n\tisDirty: function () {\n\t\treturn this.originalValue != this.value;\n\t},\n\n\tsetValue: function (value) {\n\t\tthis.value = value;\n\n\t\tif (this.rendered) {\n\t\t\tif (!Ext.isEmpty(value)) {\n\t\t\t\tthis.el.setStyle('background-image', 'url(' + go.Jmap.thumbUrl(value, {w: 120, h: 120, zc: 1})  + ')');\n\t\t\t} else {\n\t\t\t\tthis.el.setStyle('background-image', null);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetValue: function () {\n\t\treturn this.value;\n\t},\n\tmarkInvalid: function (msg) {\n\t\tthis.getEl().addClass('x-form-invalid');\n\t\tExt.form.MessageTargets.qtip.mark(this, msg);\n\t},\n\tclearInvalid: function () {\n\t\tthis.getEl().removeClass('x-form-invalid');\n\t\tExt.form.MessageTargets.qtip.clear(this);\n\t},\n\n\tvalidate: function() {\n\t\treturn true;\n\t},\n\n\tisValid: function(preventMark) {\n\t\treturn true;\n\t}\n\n});\n\nExt.reg('imagefield', go.form.ImageField);\n", "<?php\n\nnamespace go\\core\\webclient;\n\nuse go\\core\\App;\nuse go\\core\\Environment;\nuse go\\core\\fs\\File;\nuse go\\core\\jmap\\Request;\nuse go\\core\\model\\Module;\nuse go\\core\\SingletonTrait;\n\nclass Extjs3 {\n\n\tuse SingletonTrait;\n\n\n\t\n\tpublic function flushCache() {\n\t\treturn App::get()->getDataFolder()->getFolder('cache/clientscripts')->delete();\n\t}\n\n\tprivate $cssFile;\n\n\t/**\n\t * \n\t * @param string $theme\n\t * @return File\n\t */\n\tpublic function getCSSFile($theme = 'Paper') {\n\n\t\tif(isset($this->cssFile)) {\n\t\t\treturn $this->cssFile;\n\t\t}\n\n\t\t$cacheFile = go()->getDataFolder()->getFile('cache/clientscripts/' . $theme . '/style.css');\n\t\t$debug = go()->getDebugger()->enabled && $cacheFile->exists();\n\t\tif ($debug || !$cacheFile->exists()) {\n\t\t\t$modules = Module::getInstalled(['id', 'name', 'package']);\n\t\t\t$css = \"\";\n\t\t\t$modifiedAt = null;\n\t\t\tforeach ($modules as $module) {\n\n\t\t\t\tif (isset($module->package)) {\n\n          $folder = $module->module()->getFolder();\n\n          $file = $folder->getFile('views/extjs3/themes/' . $theme . '/style.css');\n          if ($file->exists()) {\n            $css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n            if($debug && $file->getModifiedAt() > $modifiedAt) {\n            \t$modifiedAt = $file->getModifiedAt();\n            }\n            continue;\n          }\n\n\n\t\t\t\t\t$file = $folder->getFile('views/extjs3/themes/default/style.css');\n\t\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n\t\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$file = $folder->getFile('views/goui/dist/style.css');\n\t\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n\t\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t//old path\n\t\t\t\t$folder = Environment::get()->getInstallFolder()->getFolder('modules/' . $module->name);\n\t\t\t\t$file = $folder->getFile('themes/Default/style.css');\n\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$file = $folder->getFile('themes/' . $theme . '/style.css');\n\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$debug || $modifiedAt > $cacheFile->getModifiedAt()) {\n\t\t\t\t$cacheFile->putContents($css);\n\t\t\t}\n\t\t}\n\t\t$this->cssFile = $cacheFile;\n\t\treturn $cacheFile;\n\t}\n\t\n\t\n\tprivate function replaceCssUrl($css, File $file){\n\t\t\n\t\t$baseurl = str_replace(Environment::get()->getInstallFolder()->getPath() . '/', $this->getRelativeUrl(), $file->getFolder()->getPath()).'/';\n\t\t\n\t\t$css = preg_replace_callback('/url[\\s]*\\(([^\\)]*)\\)/iU', \n\t\t\tfunction($matches) use($baseurl) { \n\t\t\t\treturn 'url('.$baseurl.trim(stripslashes($matches[1]),'\\'\" ').')';\n\t\t\t}, $css);\n\n\t\t$css = str_replace(\"sourceMappingURL=\", \"sourceMappingURL=\".$baseurl, $css);\n\n\t\treturn $css;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * @return File\n\t */\n\tpublic function getLanguageJS() {\n\t\t\n\t\t$iso = \\go()->getLanguage()->getIsoCode();\n\t\n\t\t\n\t\t$cacheFile = go()->getDataFolder()->getFile('cache/clientscripts/lang_'.$iso.'.js');\n\n\t\tif (!$cacheFile->exists()) {\n\n\t\t\t$str = \"var GO = GO || {};\\n\";\n\n\t\t\t$extjsLang = \\go()->getLanguage()->t(\"extjs_lang\");\n\t\t\tif ($extjsLang == 'extjs_lang') {\n\t\t\t\t// We save ISO region codes lower case, Ext requires upper case.\n\t\t\t\t$arIsoParts = explode('_', $iso);\n\t\t\t\tif (isset($arIsoParts[1])) {\n\t\t\t\t\t$arIsoParts[1] = strtoupper($arIsoParts[1]);\n\t\t\t\t}\n\t\t\t\t$extjsLang = implode('_', $arIsoParts);\n\t\t\t}\n\n\t\t\t$viewRoot = Environment::get()->getInstallFolder()->getFolder('views/Extjs3');\n\n\t\t\t$extLang = $viewRoot->getFile('javascript/ext-locale/ext-lang-' . $extjsLang . '.js');\n\t\t\tif ($extLang->exists()) {\n\t\t\t\t$str .= $extLang->getContents();\n\t\t\t}\n\n\t\t\trequire(Environment::get()->getInstallFolder()->getFile('language/languages.php'));\n\t\t\t$str .= \"GO.Languages=[];\\n\";\n\n\t\t\tforeach ($languages as $code => $name) {\n\t\t\t\t$str .= 'GO.Languages.push([\"' . $code . '\",\"' . $name . '\"]);' . \"\\n\";\n\t\t\t}\n\n\t\t\t//Put all lang vars in js\t\t\n\t\t\t$l = \\go()->getLanguage()->getAllLanguage();\n\t\t\t$l['iso'] = $iso;\n\n\t\t\t$str .= 'GO.lang = ' . json_encode($l) . \";\\n\";\n\t\t\t\n\t\t\t$str .= \"GO.lang.holidaySets = \" . json_encode(\\GO\\Base\\Model\\Holiday::getAvailableHolidayFiles()) .\";\\n\";\n\t\t\t\n\t\t\t$cacheFile->putContents($str);\n\t\t}\n\t\t\n\t\treturn $cacheFile;\n\t}\n\n\tprivate $baseUrl;\n\n\t/**\n\t * Get URL to webclient\n\t *\n\t * @return string\n\t */\n\tpublic function getBaseUrl() {\n\n\t\tif(isset($this->baseUrl)) {\n\t\t\treturn $this->baseUrl;\n\t\t}\n\n\t\t$this->baseUrl = Request::get()->isHttps() ? 'https://' : 'http://';\n\t\t$this->baseUrl .= Request::get()->getHost(false) . $this->getRelativeUrl();\n\n\t\treturn $this->baseUrl;\n\t}\n\n\t/**\n\t * Get relative URL to webclient.\n\t *\n\t * @return string eg. /groupofice/\n\t */\n\tpublic function getRelativeUrl() {\n\t\t$path = dirname($_SERVER['SCRIPT_NAME']); // /index.php or /install/*.php\n\t\t$firstParent = basename($path);\n\t\tif($firstParent == 'install' || $firstParent == 'api') {\n\t\t\t$path = dirname($path);\n\t\t}\n\n\t\tif($firstParent == 'Extjs3') {\n\t\t\t$path = dirname($path, 2);\n\t\t}\n\n\t\treturn rtrim($path, '/') . '/';\n\t}\n\n\tpublic function getBasePath() {\n\t\treturn go()->getEnvironment()->getInstallPath();\n\t}\n\n\t/**\n\t * Get available theme names as array\n\t *\n\t * @return string[]\n\t */\n\tpublic function getThemes() {\n\t\t$themes = go()->getCache()->get(\"themes\");\n\t\tif($themes == null) {\n\t\t\t$themes = [];\n\t\t\t$themeFolders = go()->getEnvironment()->getInstallFolder()->getFolder('views/Extjs3/themes')->getFolders();\n\t\t\tforeach($themeFolders as $themeFolder) {\n\t\t\t\t$themes[] = $themeFolder->getName();\n\t\t\t}\n\n\t\t\tgo()->getCache()->set(\"themes\", $themes);\n\t\t}\n\n\t\treturn $themes;\n\t}\n\n\tprivate $theme;\n\n\tpublic function getTheme() {\n\t\tif(!isset($this->theme)) {\n\t\t\tif(go()->getAuthState() && go()->getAuthState()->isAuthenticated()) {\n\t\t\t\t$this->theme = go()->getAuthState()->getUser(['theme'])->theme;\n\t\t\t\tif(!file_exists(\\GO::view()->getPath().'themes/'.$this->theme.'/Layout.php')){\n\t\t\t\t\t$this->theme = 'Paper';\n\t\t\t\t}\n\t\t\t} else{\n\t\t\t\t$this->theme = 'Paper';\n\t\t\t}\n\t\t}\n\n\t\treturn $this->theme;\n\t}\n\n\tpublic function getThemePath() {\n\t\treturn $this->getBasePath() . '/views/Extjs3/themes/' . $this->getTheme() . '/';\n\t}\n\n\tpublic function getThemeUrl() {\n\t\t$relativeUrl = $this->getRelativeUrl();\n\t\tif(strpos($relativeUrl, \"/modules/\") > -1) {\n\t\t\treturn '/views/Extjs3/themes/' . $this->getTheme() . '/';\n\t\t}\n\t\treturn $relativeUrl . 'views/Extjs3/themes/' . $this->getTheme() . '/';\n\t}\n\n\tpublic function renderPage($html, $title = null) {\n\t\t$themePath = $this->getThemePath();\n\t\trequire($themePath . 'pageHeader.php');\n\t\techo $html;\n\t\trequire($themePath . 'pageFooter.php');\n\t}\n\n}\n"], "fixing_code": ["<?php\nuse go\\core\\App;\nuse go\\core\\jmap\\State;\nuse go\\core\\fs\\Blob;\nuse go\\core\\http\\Client;\nuse go\\core\\http\\Response;\nuse go\\core\\http\\Request;\n\nrequire(\"../vendor/autoload.php\");\n\nApp::get();\nif(Request::get()->getMethod() == 'OPTIONS') {\n\tResponse::get()->output();\n\texit();\n}\n\ntry {\n//Create the app with the database connection\n\tApp::get()->setAuthState(new State());\n\tif (!App::get()->getAuthState()->isAuthenticated()) {\n\t\tResponse::get()->setStatus(401, 'Created');\n\t\tthrow new \\go\\core\\http\\Exception(401);\n\t}\n\n\t//raise max_execution_time for calculating hash of large files\n\tini_set('max_execution_time', 300);\n\n\t$filename = Request::get()->getHeader('X-File-Name');\n\t$filename = Request::headerDecode($filename);\n\t$tmpFile = \\go\\core\\fs\\File::tempFile($filename);\n\n\t$input = fopen('php://input', \"r\");\n\t$fp = $tmpFile->open(\"w+\");\n\twhile ($data = fread($input, 4096)) { // 4kb at the time\n\t\tfwrite($fp, $data);\n\t}\n\tfclose($fp);\n\tfclose($input);\n\n\tif (\\go\\core\\jmap\\Capabilities::get()->maxSizeUpload && $tmpFile->getSize() > \\go\\core\\jmap\\Capabilities::get()->maxSizeUpload) {\n\t\t$tmpFile->delete();\n\t\tResponse::get()->setStatus(413);\n\t\tResponse::get()->output([\n\t\t\t\"error\" => \"File exceeds maximum size of \" . \\go\\core\\jmap\\Capabilities::get()->maxSizeUpload . \" bytes\"\n\t\t]);\n\t\texit();\n\t}\n\n\t$blob = Blob::fromTmp($tmpFile);\n\t$blob->name = $filename;\n\tif (Request::get()->getHeader('X-File-LastModified') == null) {\n\t\t$blob->modifiedAt = new \\go\\core\\util\\DateTime();\n\t} else {\n\t\t$blob->modifiedAt = new \\go\\core\\util\\DateTime('@' . Request::get()->getHeader('X-File-LastModified'));\n\t}\n\n\tif ($blob->save()) {\n\t\tResponse::get()->setStatus(201, 'Created');\n\t\t$response = $blob->toArray();\n\t\t$response['blobId'] = $blob->id; //deprecated\n\t\tResponse::get()->output($response);\n\t} else {\n\n\t\tthrow new Exception(\"Could not save file: \". $blob->getValidationErrorsAsString());\n\t}\n}\ncatch(\\Exception $e) {\n\n\t\\go\\core\\ErrorHandler::logException($e);\n\n\tResponse::get()->setStatus(500, \"Upload failed\");\n\tResponse::get()->setContentType(\"application/problem+json\");\n\n\t$response = [\n\t\t\"title\" => \"Upload failed\",\n\t\t\"detail\" => $e->getMessage(),\n\t\t\"status\" => 500\n\t];\n\n\tif(go()->getDebugger()->enabled) {\n\t\t$response['debug'] = go()->getDebugger()->getEntries();\n\t}\n\n\tResponse::get()->output($response);\n}", "<?php\nnamespace go\\core\\model;\n\nuse Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException;\nuse Exception;\nuse go\\core;\nuse go\\core\\exception\\Forbidden;\nuse go\\core\\jmap\\Request as JmapRequest;\nuse go\\core\\util\\Crypt;\nuse go\\modules\\business\\license\\model\\License;\nuse go\\modules\\community\\addressbook\\model\\AddressBook;\n\nclass Settings extends core\\Settings {\n\n\tuse core\\validate\\ValidationTrait;\n\n\t/**\n\t * @throws Exception\n\t */\n\tprotected function __construct() {\n\t\tparent::__construct();\n\t\t\n\t\t$save = false;\n\t\t\n\t\tif(!isset($this->URL)) {\n\t\t\t$this->URL = $this->detectURL();\t\n\t\t\t$save = true;\n\t\t}\n\t\t\n\t\tif(!isset($this->language)) {\n\t\t\t$this->language = $this->getDefaultLanguage();\n\t\t\t$save = true;\n\t\t}\n\t\t\n\t\tif($save) {\n\t\t\ttry {\n\t\t\t\t$this->save();\n\t\t\t}catch(Exception $e) {\n\t\t\t\t\n\t\t\t\t//ignore error on install because core module is not there yet\n\t\t\t\tif(!core\\Installer::isInProgress()) {\n\t\t\t\t\tthrow $e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function hasLanguage(string $lang): bool\n\t{\n\t\treturn core\\Environment::get()->getInstallFolder()->getFile('go/modules/core/language/'.$lang.'.php')->exists();\n\t}\n\t\n\tprivate function getDefaultLanguage() {\t\t\n\t\t//can't use Language here because an infinite loop will occur as it depends on this model.\n\t\tif(isset($_GET['SET_LANGUAGE']) && $this->hasLanguage($_GET['SET_LANGUAGE'])) {\n\t\t\treturn $_GET['SET_LANGUAGE'];\n\t\t}\n\t\t\n\t\t$browserLanguages= JmapRequest::get()->getAcceptLanguages();\n\t\tforeach($browserLanguages as $lang){\n\t\t\t$lang = str_replace('-','_',explode(';', $lang)[0]);\n\t\t\tif($this->hasLanguage($lang)){\n\t\t\t\treturn $lang;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"en\";\n\t}\n\t\n\t\n\t/**\n\t * Auto detects URL to Group-Office if we're running in a webserver\n\t * \n\t * @return string\n\t */\n\tprivate function detectURL(): ?string\n\t{\n\n\t\t//check if this is ran on a webserver\n\t\tif(!isset($_SERVER['REQUEST_METHOD'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$path = dirname($_SERVER['SCRIPT_NAME']); // /index.php or /install/*.php\n\n\t\tif(basename($path) == 'install') {\n\t\t\t$path = dirname($path);\n\t\t}\n\n\t\t$url = JmapRequest::get()->isHttps() ? 'https://' : 'http://';\n\t\t$url .= JmapRequest::get()->getHost(false) . $path;\n\t\t\n\t\treturn $url;\n\t}\n\n\tconst SMTP_ENCRYPTION_TLS = 'tls';\n\tconst SMTP_ENCRYPTION_SSL = 'ssl';\n\t\n\t/**\n\t * System default language ISO code\n\t * \n\t * @var string  eg. \"en\"\n\t */\n\tpublic $language;\n\t\n\t/**\n\t * The title of the Group-Office environment\n\t * \n\t * @var string\n\t */\n\tpublic $title = 'Group-Office';\n\t\n\t\n\t/**\n\t * The e-mail address for sending out system messages.\n\t * \n\t * @var string\n\t */\n\tpublic $systemEmail = 'admin@intermesh.dev';\n\t\n\t\n\t/**\n\t * SMTP host name\n\t * \n\t * @var string\n\t */\n\tpublic $smtpHost = 'localhost';\n\t\n\t/**\n\t * SMTP port\n\t * \n\t * @var string\n\t */\n\tpublic $smtpPort = 587;\n\t\n\t/**\n\t * SMTP username\n\t * @var string\n\t */\n\tpublic $smtpUsername = null;\n\t\n\t/**\n\t * SMTP Password\n\t * \n\t * @var string\n\t */\n\tprotected $smtpPassword = null;\n\n\t/**\n\t * Global SMTP timeout value in seconds\n\t *\n\t * Also used for the e-mail module.\n\t *\n\t * @var int\n\t */\n\tpublic $smtpTimeout = 30;\n\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function decryptSmtpPassword(): ?string\n\t{\n\t\treturn $this->smtpPassword ? Crypt::decrypt($this->smtpPassword) : null;\n\t}\n\n\t/**\n\t * @throws EnvironmentIsBrokenException\n\t */\n\tpublic function setSmtpPassword(?string $value) {\n\t\t$this->smtpPassword = empty($value) ? null : Crypt::encrypt($value);\n\t}\n\t\n\t\n\tprotected $locale;\n\n\t/**\n\t * Get locale for the system. We need a UTF8 locale so command line functions\n\t * work with UTF8.\n\t *\n\t * initialized in old framework GO.php. What should we do with it later?\n\t *\n\t * @return string\n\t * @throws Forbidden\n\t */\n\tpublic function getLocale(): string\n\t{\n\n\t\tif(go()->getInstaller()->isInProgress()) {\n\t\t\treturn 'C.UTF-8';\n\t\t}\n\t\t\n\t\tif(isset($this->locale)) {\n\t\t\treturn $this->locale;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\texec('locale -a', $output);\n\n\t\t\tif(isset($output) && is_array($output)){\n\t\t\t\tforeach($output as $locale){\n\t\t\t\t\tif(stripos($locale,'utf')!==false){\n\t\t\t\t\t\t$this->locale = $locale;\t\t\t\t\t\t\n\t\t\t\t\t\t$this->save();\t\t\t\t\t\t\n\t\t\t\t\t\treturn $this->locale;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(Exception $e) {\n\t\t\tgo()->debug(\"Could not determine locale\");\n\t\t}\n\n\t\t//This locale is often installed so try to fallback on C.UTF8\n\t\t$this->locale = \"C.UTF8\";\n\t\t$this->save();\t\t\n\t\t\n\t\treturn $this->locale;\n\t}\n\t\n\tpublic function setLocale($locale) {\n\t\t$this->locale = $locale;\n\t}\n\n\t/**\n\t * @throws Forbidden\n\t */\n\tpublic function resetLocale(): string\n\t{\n\t\t$this->locale = null;\n\t\treturn $this->getLocale();\n\t}\n\n\t/**\n\t * Encryption to use for SMTP\n\t * @var string|bool\n\t */\n\tpublic $smtpEncryption = self::SMTP_ENCRYPTION_TLS;\n\t\n\t/**\n\t * Set to false to ignore certificate errors. \n\t * \n\t * @var boolean\n\t */\n\tpublic $smtpEncryptionVerifyCertificate = true;\n\t\n\t/**\n\t * When maintenance mode is enabled, only admin users can login.\n\t * @var boolean \n\t */\n\tpublic $maintenanceMode = false;\n\n\t/**\n\t * When true the user interface will show a confirm dialog before moving item with drag and drop\n\t * @var bool\n\t */\n\tpublic $defaultConfirmOnMove = false;\n\t\n\t\n\t/**\n\t * Enable HTML message that will show on the login screen.\n\t * \n\t * @var string \n\t */\n\tpublic $loginMessageEnabled = false;\n\t\n\t/**\n\t * HTML message that will show on the login screen.\n\t * \n\t * @var string \n\t */\n\tpublic $loginMessage = null;\n\t\n\t\n\t/**\n\t * Minimum password length\n\t * \n\t * @var int\n\t */\n\tpublic $passwordMinLength = 6;\n\n\n\t/**\n\t * Number of seconds to auto logout the user if inactive.\n\t * Also disables the \"remember login\" feature as it would make no sense.\n\t * @var int\n\t */\n\tpublic $logoutWhenInactive = 0;\n\t\n\t\n\t/**\n\t * Default domain name to append to username for authentication\n\t * \n\t * @var string\n\t */\n\tpublic $defaultAuthenticationDomain;\n\n\t/**\n\t * An alternative URL to handle lost passwords\n\t *\n\t * @var string\n\t */\n\tpublic $lostPasswordURL;\n\t\n\t\n\t/**\n\t * The full URL to Group-Office. With trailing /.\n\t * \n\t * eg. https://my.groupoffice.net/\n\t *\n\t * Alternatively to generate a URL based on the request you can use:\n\t *\n\t * @example\n\t * ```\n\t * Extjs3::get()->getBaseUrl();\n\t * ```\n\t *\n\t * @var string\n\t */\n\tpublic $URL;\n\n\t/**\n\t * @var string\n\t */\n\tprotected $corsAllowOrigin = \"\";\n\n\tpublic function setCorsAllowOrigin($origins) {\n\t\tif(empty($origins)) {\n\t\t\t$this->corsAllowOrigin = \"\";\n\t\t} else{\n\t\t\t$origins = array_map(function($host) {\n\t\t\t\treturn rtrim($host, '/');\n\t\t\t}, $origins);\n\n\t\t\t$this->corsAllowOrigin = implode(\" \", $origins);\n\t\t}\n\t}\n\n\tpublic function getCorsAllowOrigin() : array {\n\t\treturn empty($this->corsAllowOrigin) ? [] : explode(\" \", $this->corsAllowOrigin);\n\t}\n\n\n\t/**\n\t * Allow registration via the auth.php endpoint\n\t *\n\t * @var bool\n\t */\n\tpublic $allowRegistration = false;\n\n\n\t/**\n\t * Keep log in core_change for this number of days.\n\t * \n\t * When a client has not logged in for this period the sync data will be deleted and resynchronized.\n\t * \n\t * @var int\n\t */\n\tpublic $syncChangesMaxAge = 30;\n\t\n\t/**\n\t * This variable is checked against the code version.\n\t * If it doesn't match /install/upgrade.php will be executed.\n\t * \n\t * @var string\n\t */\n\tpublic $databaseVersion;\n\n\n\t/**\n\t * Time the db cache was cleared. The client will invalidate it's indexeddb cache when this changes.\n\t * @var int\n\t */\n\tpublic $cacheClearedAt;\n\t\n\t/**\n\t * Primary color in html notation 000000;\n\t * \n\t * @var string\n\t */\n\tpublic $primaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $secondaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $tertiaryColor;\n\n\t/**\n\t * Secondary color in html notation 000000;\n\t *\n\t * @var string\n\t */\n\tpublic $accentColor;\n\t\n\t/**\n\t * Blob ID for the logo\n\t * \n\t * @var string\n\t */\n\tpublic $logoId;\n\n\t\n\t/**\n\t * Get's the transparent color based on the primary color.\n\t * \n\t * @return ?string\n\t */\n\tpublic function getPrimaryColorTransparent(): ?string\n\t{\n\t\tif(!isset($this->primaryColor)) {\n\t\t\treturn null;\n\t\t}\n\t\tlist($r, $g, $b) = sscanf($this->primaryColor, \"%02x%02x%02x\");\n\t\t\n\t\treturn \"rgba($r, $g, $b, .16)\";\n\t}\n\t\n\t/**\n\t * Default time zone for users\n\t * \n\t * @var string\n\t */\n\tpublic $defaultTimezone = \"Europe/Amsterdam\";\n\t\n\t/**\n\t * Default date format for users\n\t * \n\t * @link https://secure.php.net/manual/en/function.date.php\n\t * @var string\n\t */\n\tpublic $defaultDateFormat = \"d-m-Y\";\n\t\n\t/**\n\t * Default time format for users\n\t * \n\t * @link https://secure.php.net/manual/en/function.date.php\n\t * @var string \n\t */\n\tpublic $defaultTimeFormat = \"G:i\";\n\t\n\t/**\n\t * Default currency\n\t * @var string\n\t */\n\tpublic $defaultCurrency = \"\u20ac\";\n\t\n\t/**\n\t * Default first week day\n\t * \n\t * 0 = sunday\n\t * 1 = monday\n\t * \n\t * @var int \n\t */\n\tpublic $defaultFirstWeekday = 1;\n\t\n\t\n\t/**\n\t * The default address book for new users\n\t * @var int \n\t */\n\tpublic $userAddressBookId = null;\n\n\n\tprivate $userAddressBook;\n\n\t/**\n\t * @return AddressBook\n\t * @throws Exception\n\t */\n\tpublic function userAddressBook(): ?AddressBook\n\t{\n\t\tif(!Module::findByName('community', 'addressbook')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif(isset($this->userAddressBook)) {\n\t\t\treturn $this->userAddressBook;\n\t\t}\n\t\t\n\t\tif(isset($this->userAddressBookId)) {\n\t\t\t$this->userAddressBook = AddressBook::findById($this->userAddressBookId);\n\t\t} else{\n\t\t\t$this->userAddressBook = null;\n\t\t}\n\n\t\tif(!$this->userAddressBook) {\n\t\t\tgo()->getDbConnection()->beginTransaction();\n\t\t\t$this->userAddressBook = new AddressBook();\n\t\t\t$this->userAddressBook->name = go()->t(\"Users\");\n\n\t\t\tif(!$this->userAddressBook->save()) {\n\t\t\t\tthrow new Exception(\"Could not save address book\");\n\t\t\t}\n\t\t\t$this->userAddressBookId = $this->userAddressBook->id;\n\n\t\t\t//Share users address book with internal\n\t\t\t$this->userAddressBook->findAcl()->addGroup(Group::ID_INTERNAL)->save();\n\t\t\tif(!$this->save()) {\n\t\t\t\tthrow new Exception(\"Could not save core settings\");\n\t\t\t}\n\t\t\tgo()->getDbConnection()->commit();\n\t\t}\n\n\t\treturn $this->userAddressBook;\n\t}\n\n\t/**\n\t * When archiving a user, move profile user\n\t *\n\t * @return AddressBook | null\n\t * @throws Exception\n\t */\n\n\tpublic function archivedUsersAddressBook()\n\t{\n\t\tif(!Module::findByName('community', 'addressbook')) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$ab = isset($this->archivedUsersAddressBook) ? AddressBook::findById($this->archivedUsersAddressBook) : null;\n\n\t\tif (!$ab) {\n\t\t\tgo()->getDbConnection()->beginTransaction();\n\t\t\t$ab = new AddressBook();\n\t\t\t$ab->name = go()->t(\"Archived users\");\n\t\t\tif(!$ab->save()) {\n\t\t\t\tthrow new Exception(\"Could not save address book\");\n\t\t\t}\n\t\t\t$this->archivedUsersAddressBook = $ab->id;\n\n\t\t\t//Share users address book with admins only\n\t\t\t$ab->findAcl()->addGroup(Group::ID_ADMINS)->save();\n\t\t\tif(!$this->save()) {\n\t\t\t\tthrow new Exception(\"Could not save core settings\");\n\t\t\t}\n\t\t\tgo()->getDbConnection()->commit();\n\t\t}\n\n\t\treturn $ab;\n\t}\n\n\t\n\t\n\t/**\n\t * Default list separator for import and export\n\t * \n\t * @var string\n\t */\n\tpublic $defaultListSeparator = ';';\n\t\n\t/**\n\t * Default text separator for import and export\n\t * \n\t * @var string\n\t */\n\tpublic $defaultTextSeparator = '\"';\n\t\n\t/**\n\t * Default thousands separator for numbers\n\t * @var string\n\t */\n\tpublic $defaultThousandSeparator = '.';\n\t\n\t/**\n\t * Default decimal separator for numbers\n\t * \n\t * @var string\n\t */\n\tpublic $defaultDecimalSeparator = ',';\t\n\t\n\t/**\n\t * Default setting for users to have short date and times in lists.\n\t * @var boolean\n\t */\n\tpublic $defaultShortDateInList = true;\n\n\n\t/**\n\t * License for Group-Office\n\t *\n\t * @var string\n\t */\n\tpublic $license = null;\n\n\t/**\n\t * Set to true when the license dialog has been presented and the user denied.\n\t *\n\t * @var bool\n\t */\n\tpublic $licenseDenied = false;\n\n\n\t/**\n\t * Set to true when the welcome dialog has been presented and the user denied.\n\t *\n\t * @var bool\n\t */\n\tpublic $welcomeShown = false;\n\n\n\t/**\n\t *\n\t * @var bool\n\t */\n\tpublic $demoDataAsked = false;\n\n\n\tprivate $defaultGroups;\n\t\n\t/**\n\t * New users will be member of these groups\n\t * \n\t * @return int[]\n\t */\n\tpublic function getDefaultGroups(): array\n\t{\n\t\tif(!isset($this->defaultGroups)) {\n\t\t\t$this->defaultGroups = array_map(\"intval\", (new core\\db\\Query)\n\t\t\t\t->selectSingleValue('groupId')\n\t\t\t\t->from(\"core_group_default_group\")\n\t\t\t\t->all());\n\n\t\t\tgo()->getCache()->set(static::class, $this);\n\t\t}\n\n\t\treturn $this->defaultGroups;\n\n\t}\n\n\t/**\n\t * Set default groups for new groups\n\t *\n\t * @param array $groups eg [['groupId' => 1]]\n\t * @throws Exception\n\t */\n\tpublic function setDefaultGroups(array $groups) {\n\t\t\n\t\tgo()->getDbConnection()->exec(\"TRUNCATE TABLE core_group_default_group\");\n\t\t\n\t\tforeach($groups as $groupId) {\n\t\t\tif(!go()->getDbConnection()->insert(\"core_group_default_group\", ['groupId' => $groupId])->execute()) {\n\t\t\t\tthrow new Exception(\"Could not save group id \".$groupId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// SYNCHRONISATION SETTINGS\n\t/**\n\t * when true user will get popup to allow its own device.\n\t */\n\tpublic $activeSyncEnable2FA = false;\n\t/**\n\t * When false administrator has to enable each new device\n\t */\n\tpublic $activeSyncCanConnect = true;\n\t\n\t\n\tpublic function save(): bool\n\t{\n\t\tif(!$this->validate()){\n\t\t\treturn false;\n\t\t}\n\n\t\tif(isset($this->logoId)) {\n\t\t\t//todo settings should have real columns with real keys?\n\t\t\t$blob = core\\fs\\Blob::findById($this->logoId);\n\t\t\tif($blob && isset($blob->staleAt)) {\n\t\t\t\t$blob->staleAt = null;\n\t\t\t\t$blob->save();\n\t\t\t}\n\t\t}\n\t\t\n\t\t//for old framework config caching in GO\\Base\\Config\n\t\tif(isset($_SESSION)) {\n\t\t\tunset($_SESSION['GO_SESSION']['newconfig']);\n\t\t}\n\t\t\n\t\t//Make sure URL has trailing slash\n\t\tif(isset($this->URL)) {\n\t\t\t$this->URL = rtrim($this->URL, '/ ').'/';\n\t\t}\n\n\t\tif($this->isModified('maintenanceMode') && $this->maintenanceMode) {\n\t\t\tToken::logoutEveryoneButAdmins();\n\t\t}\n\t\t\n\t\treturn parent::save();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprotected function internalValidate()\n\t{\n\t\tif($this->isModified('license')) {\n\t\t\tif(isset($this->license)) {\n\t\t\t\t$data = License::getLicenseData();\n\t\t\t\tif (!$data) {\n\t\t\t\t\tthrow new Exception(\"License data was corrupted\");\n\t\t\t\t}\n\n\t\t\t\t// force validation because the license was just replaced\n\t\t\t\tif (!License::validate($data, true)) {\n\t\t\t\t\tthrow new Exception(License::$validationError);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(go()->getInstaller()->disableUnavailableModules()){\n\t\t\t\tgo()->rebuildCache();\n\t\t\t}\n\t\t}\n\t}\n}\n", "/**\n * File upload field\n * \n * @example\n * ```\n * this.avatarComp = new go.form.FileField({\n * \t\t\thideLabel: true,\n * \t\t\tbuttonOnly: true,\n * \t\t\tname: 'photoBlobId',\n * \t\t\theight: dp(120),\n * \t\t\tcls: \"avatar\",\n * \t\t\tautoUpload: true,\n * \t\t\tbuttonCfg: {\n * \t\t\t\ttext: '',\n * \t\t\t\twidth: dp(120)\n * \t\t\t},\n * \t\t\tsetValue: function (val) {\n * \t\t\t\tif (this.rendered && !Ext.isEmpty(val)) {\n * \t\t\t\t\tthis.wrap.setStyle('background-image', 'url(' + go.Jmap.downloadUrl(val) + ')');\n * \t\t\t\t}\n * \t\t\t\tgo.form.FileField.prototype.setValue.call(this, val);\n * \t\t\t},\n * \t\t\taccept: 'image/*'\n * \t\t});\n *  * ```\n * \n */\ngo.form.ImageField = Ext.extend(Ext.BoxComponent, {\n\n\t/**\n\t * @cfg {Object} buttonCfg A standard {@link Ext.Button} config object.\n\t */\n\n\t// private\n\treadOnly: true,\n\n\t/**\n\t * @hide\n\t * @method autoSize\n\t */\n\tautoSize: Ext.emptyFn,\n\n\tcls: 'avatar',\n\n\tstyle: \"cursor: pointer\",\n\n\thideLabel: true,\n\n\tautoUpload: false,\n\n\taccept: '*/*',\n\n\tvalue: null,\n\n\t// private\n\tinitComponent: function () {\n\t\tgo.form.ImageField.superclass.initComponent.call(this);\n\n\t\tthis.height= dp(120);\n\t\tthis.width= dp(120);\n\n\t\tthis.menu = new Ext.menu.Menu({\n\t\t\titems: [{\n\n\t\t\t\ticonCls: 'ic-computer',\n\t\t\t\ttext: t(\"Upload\"),\n\t\t\t\thandler: function () {\n\t\t\t\t\tgo.util.openFileDialog({\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\taccept: \"image/*\",\n\t\t\t\t\t\tdirectory: false,\n\t\t\t\t\t\tautoUpload: true,\n\t\t\t\t\t\tlisteners: {\n\t\t\t\t\t\t\tupload: function (response) {\n\t\t\t\t\t\t\t\tthis.setValue(response.blobId);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscope: this\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tscope: this\n\t\t\t},\n\t\t\t{\n\t\t\t\ticonCls: 'ic-delete',\n\t\t\t\ttext: t(\"Clear\"),\n\t\t\t\thandler: function () {\n\t\t\t\t\tthis.setValue(null);\n\t\t\t\t},\n\t\t\t\tscope: this\n\t\t\t}\n\t\t\t]\n\t\t});\n\t},\n\n\t// private\n\tonRender: function (ct, position) {\n\t\tgo.form.ImageField.superclass.onRender.call(this, ct, position);\n\n\t\tthis.getEl().on('click', this.onClick, this);\n\t},\n\n\tonClick: function (e) {\n\t\tvar XY = new Array(e.getPageX(), e.getPageY());\n\t\tthis.menu.showAt(XY);\n\t},\n\n\tname: null,\n\n\tisFormField: true,\n\tgetName: function () {\n\t\treturn this.name;\n\t},\n\n\treset: function () {\n\t\tthis.value = null;\n\t},\n\n\tisDirty: function () {\n\t\treturn this.originalValue != this.value;\n\t},\n\n\tsetValue: function (value) {\n\t\tthis.value = value;\n\n\t\tif (this.rendered) {\n\t\t\tif (!Ext.isEmpty(value)) {\n\t\t\t\tthis.el.setStyle('background-image', 'url(' + go.Jmap.thumbUrl(value, {w: 120, h: 120, zc: 1})  + ')');\n\t\t\t} else {\n\t\t\t\tthis.el.setStyle('background-image', null);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetValue: function () {\n\t\treturn this.value;\n\t},\n\tmarkInvalid: function (msg) {\n\t\tthis.getEl().addClass('x-form-invalid');\n\t\tExt.form.MessageTargets.qtip.mark(this, msg);\n\t},\n\tclearInvalid: function () {\n\t\tthis.getEl().removeClass('x-form-invalid');\n\t\tExt.form.MessageTargets.qtip.clear(this);\n\t},\n\n\tvalidate: function() {\n\t\treturn true;\n\t},\n\n\tisValid: function(preventMark) {\n\t\treturn true;\n\t}\n\n});\n\nExt.reg('imagefield', go.form.ImageField);\n", "<?php\n\nnamespace go\\core\\webclient;\n\nuse go\\core\\App;\nuse go\\core\\Environment;\nuse go\\core\\fs\\File;\nuse go\\core\\jmap\\Request;\nuse go\\core\\model\\Module;\nuse go\\core\\SingletonTrait;\n\nclass Extjs3 {\n\n\tuse SingletonTrait;\n\n\n\t\n\tpublic function flushCache() {\n\t\treturn App::get()->getDataFolder()->getFolder('cache/clientscripts')->delete();\n\t}\n\n\tprivate $cssFile;\n\n\t/**\n\t * \n\t * @param string $theme\n\t * @return File\n\t */\n\tpublic function getCSSFile($theme = 'Paper') {\n\n\t\tif(isset($this->cssFile)) {\n\t\t\treturn $this->cssFile;\n\t\t}\n\n\t\t$cacheFile = go()->getDataFolder()->getFile('cache/clientscripts/' . $theme . '/style.css');\n\t\t$debug = go()->getDebugger()->enabled && $cacheFile->exists();\n\t\tif ($debug || !$cacheFile->exists()) {\n\t\t\t$modules = Module::getInstalled(['id', 'name', 'package']);\n\t\t\t$css = \"\";\n\t\t\t$modifiedAt = null;\n\t\t\tforeach ($modules as $module) {\n\n\t\t\t\tif (isset($module->package)) {\n\n          $folder = $module->module()->getFolder();\n\n          $file = $folder->getFile('views/extjs3/themes/' . $theme . '/style.css');\n          if ($file->exists()) {\n            $css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n            if($debug && $file->getModifiedAt() > $modifiedAt) {\n            \t$modifiedAt = $file->getModifiedAt();\n            }\n            continue;\n          }\n\n\n\t\t\t\t\t$file = $folder->getFile('views/extjs3/themes/default/style.css');\n\t\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n\t\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$file = $folder->getFile('views/goui/dist/style.css');\n\t\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\n\t\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t//old path\n\t\t\t\t$folder = Environment::get()->getInstallFolder()->getFolder('modules/' . $module->name);\n\t\t\t\t$file = $folder->getFile('themes/Default/style.css');\n\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$file = $folder->getFile('themes/' . $theme . '/style.css');\n\t\t\t\tif ($file->exists()) {\n\t\t\t\t\t$css .= $this->replaceCssUrl($file->getContents(),$file).\"\\n\";\n\t\t\t\t\tif($debug && $file->getModifiedAt() > $modifiedAt) {\n\t\t\t\t\t\t$modifiedAt = $file->getModifiedAt();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$debug || $modifiedAt > $cacheFile->getModifiedAt()) {\n\t\t\t\t$cacheFile->putContents($css);\n\t\t\t}\n\t\t}\n\t\t$this->cssFile = $cacheFile;\n\t\treturn $cacheFile;\n\t}\n\t\n\t\n\tprivate function replaceCssUrl($css, File $file){\n\t\t\n\t\t$baseurl = str_replace(Environment::get()->getInstallFolder()->getPath() . '/', $this->getRelativeUrl(), $file->getFolder()->getPath()).'/';\n\t\t\n\t\t$css = preg_replace_callback('/url[\\s]*\\(([^\\)]*)\\)/iU', \n\t\t\tfunction($matches) use($baseurl) { \n\t\t\t\treturn 'url('.$baseurl.trim(stripslashes($matches[1]),'\\'\" ').')';\n\t\t\t}, $css);\n\n\t\t$css = str_replace(\"sourceMappingURL=\", \"sourceMappingURL=\".$baseurl, $css);\n\n\t\treturn $css;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * @return File\n\t */\n\tpublic function getLanguageJS() {\n\t\t\n\t\t$iso = \\go()->getLanguage()->getIsoCode();\n\t\n\t\t\n\t\t$cacheFile = go()->getDataFolder()->getFile('cache/clientscripts/lang_'.$iso.'.js');\n\n\t\tif (!$cacheFile->exists()) {\n\n\t\t\t$str = \"var GO = GO || {};\\n\";\n\n\t\t\t$extjsLang = \\go()->getLanguage()->t(\"extjs_lang\");\n\t\t\tif ($extjsLang == 'extjs_lang') {\n\t\t\t\t// We save ISO region codes lower case, Ext requires upper case.\n\t\t\t\t$arIsoParts = explode('_', $iso);\n\t\t\t\tif (isset($arIsoParts[1])) {\n\t\t\t\t\t$arIsoParts[1] = strtoupper($arIsoParts[1]);\n\t\t\t\t}\n\t\t\t\t$extjsLang = implode('_', $arIsoParts);\n\t\t\t}\n\n\t\t\t$viewRoot = Environment::get()->getInstallFolder()->getFolder('views/Extjs3');\n\n\t\t\t$extLang = $viewRoot->getFile('javascript/ext-locale/ext-lang-' . $extjsLang . '.js');\n\t\t\tif ($extLang->exists()) {\n\t\t\t\t$str .= $extLang->getContents();\n\t\t\t}\n\n\t\t\trequire(Environment::get()->getInstallFolder()->getFile('language/languages.php'));\n\t\t\t$str .= \"GO.Languages=[];\\n\";\n\n\t\t\tforeach ($languages as $code => $name) {\n\t\t\t\t$str .= 'GO.Languages.push([\"' . $code . '\",\"' . $name . '\"]);' . \"\\n\";\n\t\t\t}\n\n\t\t\t//Put all lang vars in js\t\t\n\t\t\t$l = \\go()->getLanguage()->getAllLanguage();\n\t\t\t$l['iso'] = $iso;\n\n\t\t\t$str .= 'GO.lang = ' . json_encode($l) . \";\\n\";\n\t\t\t\n\t\t\t$str .= \"GO.lang.holidaySets = \" . json_encode(\\GO\\Base\\Model\\Holiday::getAvailableHolidayFiles()) .\";\\n\";\n\t\t\t\n\t\t\t$cacheFile->putContents($str);\n\t\t}\n\t\t\n\t\treturn $cacheFile;\n\t}\n\n\tprivate $baseUrl;\n\n\t/**\n\t * Get URL to webclient\n\t *\n\t * eg. https://groupoffice.example.com/groupoffice/\n\t *\n\t * @return string\n\t */\n\tpublic function getBaseUrl() {\n\n\t\tif(isset($this->baseUrl)) {\n\t\t\treturn $this->baseUrl;\n\t\t}\n\n\t\t$this->baseUrl = Request::get()->isHttps() ? 'https://' : 'http://';\n\t\t$this->baseUrl .= Request::get()->getHost(false) . $this->getRelativeUrl();\n\n\t\treturn $this->baseUrl;\n\t}\n\n\t/**\n\t * Get relative URL to webclient.\n\t *\n\t * @return string eg. /groupofice/\n\t */\n\tpublic function getRelativeUrl() {\n\t\t$path = dirname($_SERVER['SCRIPT_NAME']); // /index.php or /install/*.php\n\t\t$firstParent = basename($path);\n\t\tif($firstParent == 'install' || $firstParent == 'api') {\n\t\t\t$path = dirname($path);\n\t\t}\n\n\t\tif($firstParent == 'Extjs3') {\n\t\t\t$path = dirname($path, 2);\n\t\t}\n\n\t\treturn rtrim($path, '/') . '/';\n\t}\n\n\tpublic function getBasePath() {\n\t\treturn go()->getEnvironment()->getInstallPath();\n\t}\n\n\t/**\n\t * Get available theme names as array\n\t *\n\t * @return string[]\n\t */\n\tpublic function getThemes() {\n\t\t$themes = go()->getCache()->get(\"themes\");\n\t\tif($themes == null) {\n\t\t\t$themes = [];\n\t\t\t$themeFolders = go()->getEnvironment()->getInstallFolder()->getFolder('views/Extjs3/themes')->getFolders();\n\t\t\tforeach($themeFolders as $themeFolder) {\n\t\t\t\t$themes[] = $themeFolder->getName();\n\t\t\t}\n\n\t\t\tgo()->getCache()->set(\"themes\", $themes);\n\t\t}\n\n\t\treturn $themes;\n\t}\n\n\tprivate $theme;\n\n\tpublic function getTheme() {\n\t\tif(!isset($this->theme)) {\n\t\t\tif(go()->getAuthState() && go()->getAuthState()->isAuthenticated()) {\n\t\t\t\t$this->theme = go()->getAuthState()->getUser(['theme'])->theme;\n\t\t\t\tif(!file_exists(\\GO::view()->getPath().'themes/'.$this->theme.'/Layout.php')){\n\t\t\t\t\t$this->theme = 'Paper';\n\t\t\t\t}\n\t\t\t} else{\n\t\t\t\t$this->theme = 'Paper';\n\t\t\t}\n\t\t}\n\n\t\treturn $this->theme;\n\t}\n\n\tpublic function getThemePath() {\n\t\treturn $this->getBasePath() . '/views/Extjs3/themes/' . $this->getTheme() . '/';\n\t}\n\n\tpublic function getThemeUrl() {\n\t\t$relativeUrl = $this->getRelativeUrl();\n\t\tif(strpos($relativeUrl, \"/modules/\") > -1) {\n\t\t\treturn '/views/Extjs3/themes/' . $this->getTheme() . '/';\n\t\t}\n\t\treturn $relativeUrl . 'views/Extjs3/themes/' . $this->getTheme() . '/';\n\t}\n\n\tpublic function renderPage($html, $title = null) {\n\t\t$themePath = $this->getThemePath();\n\t\trequire($themePath . 'pageHeader.php');\n\t\techo $html;\n\t\trequire($themePath . 'pageFooter.php');\n\t}\n\n}\n"], "filenames": ["www/api/upload.php", "www/go/core/model/Settings.php", "www/go/core/views/extjs3/form/ImageField.js", "www/go/core/webclient/Extjs3.php"], "buggy_code_start_loc": [25, 309, 82, 181], "buggy_code_end_loc": [73, 311, 107, 181], "fixing_code_start_loc": [25, 309, 81, 182], "fixing_code_end_loc": [56, 318, 81, 184], "type": "CWE-918", "message": "Group-Office is an enterprise CRM and groupware tool. In affected versions there is full Server-Side Request Forgery (SSRF) vulnerability in the /api/upload.php endpoint. The /api/upload.php endpoint does not filter URLs which allows a malicious user to cause the server to make resource requests to untrusted domains. Note that protocols like file:// can also be used to access the server disk. The request result (on success) can then be retrieved using /api/download.php. This issue has been addressed in versions 6.8.15, 6.7.54, and 6.6.177. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-46730", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-07T18:15:08.973", "lastModified": "2023-11-14T20:08:38.190", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Group-Office is an enterprise CRM and groupware tool. In affected versions there is full Server-Side Request Forgery (SSRF) vulnerability in the /api/upload.php endpoint. The /api/upload.php endpoint does not filter URLs which allows a malicious user to cause the server to make resource requests to untrusted domains. Note that protocols like file:// can also be used to access the server disk. The request result (on success) can then be retrieved using /api/download.php. This issue has been addressed in versions 6.8.15, 6.7.54, and 6.6.177. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Group-Office es una herramienta de software colaborativo y CRM empresarial. En las versiones afectadas hay una vulnerabilidad completa de Server-Side Request Forgery (SSRF) en el endpoint /api/upload.php. El endpoint /api/upload.php no filtra las URL, lo que permite que un usuario malintencionado haga que el servidor realice solicitudes de recursos a dominios que no son de confianza. Tenga en cuenta que protocolos como file:// tambi\u00e9n se pueden utilizar para acceder al disco del servidor. El resultado de la solicitud (en caso de \u00e9xito) se puede recuperar usando /api/download.php. Este problema se solucion\u00f3 en las versiones 6.8.15, 6.7.54 y 6.6.177. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:group-office:group_office:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.3.1", "versionEndExcluding": "6.6.177", "matchCriteriaId": "358DA8A0-B9ED-4A34-9137-FF09D7AFD94D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:group-office:group_office:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.7.0", "versionEndExcluding": "6.7.54", "matchCriteriaId": "5C2230FE-1533-4B8A-9C5B-771DFBD0C492"}, {"vulnerable": true, "criteria": "cpe:2.3:a:group-office:group_office:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.8.0", "versionEndExcluding": "6.8.15", "matchCriteriaId": "84304CD1-C71F-481B-9C4A-16157206A677"}]}]}], "references": [{"url": "https://github.com/Intermesh/groupoffice/commit/99205535e8cec6592fd7f1469837926f27c72d50", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Intermesh/groupoffice/security/advisories/GHSA-vw6c-h82w-mvfv", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Intermesh/groupoffice/commit/99205535e8cec6592fd7f1469837926f27c72d50"}}