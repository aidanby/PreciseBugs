{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('AuditLog', 'Model');\n\n/**\n * @property AuditLog $AuditLog\n */\nclass AuditLogsController extends AppController\n{\n    public $components = [\n        'RequestHandler',\n    ];\n\n    /** @var array */\n    private $actions;\n\n    /** @var string[] */\n    private $models = [\n        'Attribute',\n        'Allowedlist',\n        'AuthKey',\n        'Cerebrate',\n        'CorrelationExclusion',\n        'Event',\n        'EventBlocklist',\n        'EventReport',\n        'Feed',\n        'DecayingModel',\n        'Object',\n        'ObjectTemplate',\n        'Organisation',\n        'OrgBlocklist',\n        'Post',\n        'Regexp',\n        'Role',\n        'Server',\n        'ShadowAttribute',\n        'SharingGroup',\n        'SystemSetting',\n        'Tag',\n        'TagCollection',\n        'TagCollectionTag',\n        'Task',\n        'Taxonomy',\n        'Template',\n        'Thread',\n        'User',\n        'UserSetting',\n        'Galaxy',\n        'GalaxyCluster',\n        'GalaxyClusterBlocklist',\n        'GalaxyClusterRelation',\n        'News',\n        'Warninglist',\n        'Workflow',\n        'WorkflowBlueprint',\n    ];\n\n    public $paginate = [\n        'recursive' => -1,\n        'limit' => 60,\n        'fields' => ['id', 'created', 'user_id', 'org_id', 'action', 'model', 'model_id', 'model_title', 'event_id', 'change'],\n        'contain' => [\n            'User' => ['fields' => ['id', 'email', 'org_id']],\n            'Organisation' => ['fields' => ['id', 'name', 'uuid']],\n        ],\n        'order' => [\n            'AuditLog.id' => 'DESC'\n        ],\n    ];\n\n    public function __construct($request = null, $response = null)\n    {\n        parent::__construct($request, $response);\n        $this->actions = [\n            AuditLog::ACTION_ADD => __('Add'),\n            AuditLog::ACTION_EDIT => __('Edit'),\n            AuditLog::ACTION_SOFT_DELETE => __('Soft delete'),\n            AuditLog::ACTION_DELETE => __('Delete'),\n            AuditLog::ACTION_UNDELETE => __('Undelete'),\n            AuditLog::ACTION_TAG => __('Tag'),\n            AuditLog::ACTION_TAG_LOCAL => __('Tag'),\n            AuditLog::ACTION_REMOVE_TAG => __('Remove tag'),\n            AuditLog::ACTION_REMOVE_TAG_LOCAL => __('Remove tag'),\n            AuditLog::ACTION_GALAXY => __('Galaxy cluster'),\n            AuditLog::ACTION_GALAXY_LOCAL => __('Galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY => __('Remove galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY_LOCAL => __('Remove galaxy cluster'),\n            AuditLog::ACTION_PUBLISH => __('Publish'),\n            AuditLog::ACTION_PUBLISH_SIGHTINGS => __('Publish sightings'),\n        ];\n    }\n\n    public function admin_index()\n    {\n        $this->paginate['fields'][] = 'ip';\n        $this->paginate['fields'][] = 'request_type';\n        $this->paginate['fields'][] = 'authkey_id';\n\n        if ($this->_isRest()) {\n            $this->paginate['fields'][] = 'request_id';\n        }\n        if (!Configure::read('MISP.log_new_audit')) {\n            $this->Flash->warning(__(\"Audit log is not enabled. See 'MISP.log_new_audit' in the Server Settings. (Administration -> Server Settings -> MISP tab)\"));\n        }\n        $params = $this->IndexFilter->harvestParameters([\n            'ip',\n            'user',\n            'request_id',\n            'authkey_id',\n            'model',\n            'model_id',\n            'event_id',\n            'model_title',\n            'action',\n            'org',\n            'created',\n            'request_type',\n        ]);\n\n        $this->paginate['conditions'] = $this->__searchConditions($params);\n        $list = $this->paginate();\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($list, 'json');\n        }\n\n        $list = $this->__appendModelLinks($list);\n        foreach ($list as $k => $item) {\n            $list[$k]['AuditLog']['action_human'] =  $this->actions[$item['AuditLog']['action']];\n        }\n\n        $this->set('list', $list);\n        $this->set('actions', [\n            AuditLog::ACTION_ADD => __('Add'),\n            AuditLog::ACTION_EDIT => __('Edit'),\n            AuditLog::ACTION_SOFT_DELETE => __('Soft delete'),\n            AuditLog::ACTION_DELETE => __('Delete'),\n            AuditLog::ACTION_UNDELETE => __('Undelete'),\n            AuditLog::ACTION_TAG . '||' . AuditLog::ACTION_TAG_LOCAL => __('Tag'),\n            AuditLog::ACTION_REMOVE_TAG . '||' . AuditLog::ACTION_REMOVE_TAG_LOCAL => __('Remove tag'),\n            AuditLog::ACTION_GALAXY . '||' . AuditLog::ACTION_GALAXY_LOCAL  => __('Galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY . '||' . AuditLog::ACTION_REMOVE_GALAXY_LOCAL => __('Remove galaxy cluster'),\n            AuditLog::ACTION_PUBLISH => __('Publish'),\n            AuditLog::ACTION_PUBLISH_SIGHTINGS => $this->actions[AuditLog::ACTION_PUBLISH_SIGHTINGS],\n        ]);\n        $models = $this->models;\n        sort($models);\n        $this->set('models', $models);\n        $this->set('title_for_layout', __('Audit logs'));\n    }\n\n    public function eventIndex($eventId, $org = null)\n    {\n        $event = $this->AuditLog->Event->fetchSimpleEvent($this->Auth->user(), $eventId);\n        if (empty($event)) {\n            throw new NotFoundException('Invalid event.');\n        }\n\n        $this->paginate['conditions'] = $this->__createEventIndexConditions($event);\n        $this->set('passedArgsArray', ['eventId' => $eventId, 'org' => $org]);\n\n        $params = $this->IndexFilter->harvestParameters(['created', 'org']);\n        if ($org) {\n            $params['org'] = $org;\n        }\n        $this->paginate['conditions'][] = $this->__searchConditions($params);\n\n        $list = $this->paginate();\n\n        if (!$this->_isSiteAdmin()) {\n            // Remove all user info about users from different org\n            $orgUserIds = $this->User->find('column', [\n                'conditions' => ['User.org_id' => $this->Auth->user('org_id')],\n                'fields' => ['User.id'],\n            ]);\n            foreach ($list as $k => $item) {\n                if ($item['AuditLog']['user_id'] == 0) {\n                    continue;\n                }\n                if (!in_array($item['User']['id'], $orgUserIds)) {\n                    unset($list[$k]['User']);\n                    unset($list[$k]['AuditLog']['user_id']);\n                }\n            }\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($list, 'json');\n        }\n\n        foreach ($list as $k => $item) {\n            $list[$k]['AuditLog']['action_human'] = $this->actions[$item['AuditLog']['action']];\n        }\n\n        $this->set('data', $list);\n        $this->set('event', $event);\n        $this->set('mayModify', $this->__canModifyEvent($event));\n        $this->set('menuData', [\n            'menuList' => 'event',\n            'menuItem' => 'eventLog'\n        ]);\n    }\n\n    public function fullChange($id)\n    {\n        $log = $this->AuditLog->find('first', [\n            'conditions' => ['id' => $id],\n            'recursive' => -1,\n            'fields' => ['change', 'action'],\n        ]);\n        if (empty($log)) {\n            throw new Exception('Log not found.');\n        }\n        $this->set('log', $log);\n    }\n\n    public function returnDates($org = 'all')\n    {\n        $user = $this->_closeSession();\n        if (!$user['Role']['perm_sharing_group'] && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            if ($org !== 'all' && $org !== $user['Organisation']['name']) {\n                throw new MethodNotAllowedException('Invalid organisation.');\n            }\n        }\n\n        $data = $this->AuditLog->returnDates($org);\n        return $this->RestResponse->viewData($data, $this->response->type());\n    }\n\n    /**\n     * @return array\n     */\n    private function __searchConditions(array $params)\n    {\n        $qbRules = [];\n        foreach ($params as $key => $value) {\n            if ($key === 'model' && strpos($value, ':') !== false) {\n                $parts = explode(':', $value);\n                $qbRules[] = [\n                    'id' => 'model',\n                    'value' => $parts[0],\n                ];\n                $qbRules[] = [\n                    'id' => 'model_id',\n                    'value' => $parts[1],\n                ];\n            } elseif ($key === 'created') {\n                $qbRules[] = [\n                    'id' => $key,\n                    'operator' => is_array($value) ? 'between' : 'greater_or_equal',\n                    'value' => $value,\n                ];\n            } else {\n                if (is_array($value)) {\n                    $value = implode('||', $value);\n                }\n                $qbRules[] = [\n                    'id' => $key,\n                    'value' => $value,\n                ];\n            }\n        }\n        $this->set('qbRules', $qbRules);\n\n        $conditions = [];\n        if (isset($params['user'])) {\n            if (strtoupper($params['user']) === 'SYSTEM') {\n                $conditions['AuditLog.user_id'] = 0;\n            } else if (is_numeric($params['user'])) {\n                $conditions['AuditLog.user_id'] = $params['user'];\n            } else {\n                $user = $this->User->find('first', [\n                    'conditions' => ['User.email' => $params['user']],\n                    'fields' => ['id'],\n                ]);\n                if (!empty($user)) {\n                    $conditions['AuditLog.user_id'] = $user['User']['id'];\n                } else {\n                    $conditions['AuditLog.user_id'] = -1;\n                }\n            }\n        }\n        if (isset($params['ip'])) {\n            $conditions['AuditLog.ip'] = inet_pton($params['ip']);\n        }\n        if (isset($params['authkey_id'])) {\n            $conditions['AuditLog.authkey_id'] = $params['authkey_id'];\n        }\n        if (isset($params['request_id'])) {\n            $conditions['AuditLog.request_id'] = $params['request_id'];\n        }\n        if (isset($params['request_type'])) {\n            $conditions['AuditLog.request_type'] = $params['request_type'];\n        }\n        if (isset($params['model'])) {\n            $conditions['AuditLog.model'] = $params['model'];\n        }\n        if (isset($params['model_id'])) {\n            $conditions['AuditLog.model_id'] = $params['model_id'];\n        }\n        if (isset($params['event_id'])) {\n            $conditions['AuditLog.event_id'] = $params['event_id'];\n        }\n        if (isset($params['model_title'])) {\n            $conditions['AuditLog.model_title LIKE'] = '%' . $params['model_title'] . '%';\n        }\n        if (isset($params['action'])) {\n            $conditions['AuditLog.action'] = $params['action'];\n        }\n        if (isset($params['org'])) {\n            if (is_numeric($params['org'])) {\n                $conditions['AuditLog.org_id'] = $params['org'];\n            } else {\n                $org = $this->AuditLog->Organisation->fetchOrg($params['org']);\n                if ($org) {\n                    $conditions['AuditLog.org_id'] = $org['id'];\n                } else {\n                    $conditions['AuditLog.org_id'] = -1;\n                }\n            }\n        }\n        if (isset($params['created'])) {\n            $tempData = is_array($params['created']) ? $params['created'] : [$params['created']];\n            foreach ($tempData as $k => $v) {\n                $tempData[$k] = $this->AuditLog->resolveTimeDelta($v);\n            }\n            if (count($tempData) === 1) {\n                $conditions['AuditLog.created >='] = date(\"Y-m-d H:i:s\", $tempData[0]);\n            } else {\n                if ($tempData[0] < $tempData[1]) {\n                    $temp = $tempData[1];\n                    $tempData[1] = $tempData[0];\n                    $tempData[0] = $temp;\n                }\n                $conditions['AND'][] = ['AuditLog.created <=' => date(\"Y-m-d H:i:s\", $tempData[0])];\n                $conditions['AND'][] = ['AuditLog.created >=' => date(\"Y-m-d H:i:s\", $tempData[1])];\n            }\n        }\n        return $conditions;\n    }\n\n    /**\n     * Create conditions that will include just events parts that user can see.\n     * @param array $event\n     * @return array\n     */\n    private function __createEventIndexConditions(array $event)\n    {\n        if ($this->_isSiteAdmin() || $event['Event']['orgc_id'] == $this->Auth->user('org_id')) {\n            // Site admins and event owners can see all changes\n            return ['event_id' => $event['Event']['id']];\n        }\n\n        $event = $this->AuditLog->Event->fetchEvent($this->Auth->user(), [\n            'eventid' => $event['Event']['id'],\n            'sgReferenceOnly' => 1,\n            'deleted' => [0, 1],\n            'deleted_proposals' => 1,\n            'noSightings' => true,\n            'includeEventCorrelations' => false,\n            'excludeGalaxy' => true,\n        ])[0];\n\n        $attributeIds = [];\n        $objectIds = [];\n        $proposalIds = array_column($event['ShadowAttribute'], 'id');\n        $objectReferenceId = [];\n        foreach ($event['Attribute'] as $aa) {\n            $attributeIds[] = $aa['id'];\n            if (!empty($aa['ShadowAttribute'])) {\n                foreach ($aa['ShadowAttribute'] as $sa) {\n                    $proposalIds[] = $sa['id'];\n                }\n            }\n        }\n        unset($event['Attribute']);\n        foreach ($event['Object'] as $ob) {\n            foreach ($ob['Attribute'] as $aa) {\n                $attributeIds[] = $aa['id'];\n                if (!empty($aa['ShadowAttribute'])) {\n                    foreach ($aa['ShadowAttribute'] as $sa) {\n                        $proposalIds[] = $sa['id'];\n                    }\n                }\n            }\n            foreach ($ob['ObjectReference'] as $or) {\n                $objectReferenceId[] = $or['id'];\n            }\n            $objectIds[] = $ob['id'];\n        }\n        unset($event['Object']);\n\n        $conditions = [];\n        $conditions['AND']['event_id'] = $event['Event']['id'];\n        $conditions['AND']['OR'][] = ['model' => 'Event'];\n\n        $parts = [\n            'Attribute' => $attributeIds,\n            'ShadowAttribute' => $proposalIds,\n            'Object' => $objectIds,\n            'ObjectReference' => $objectReferenceId,\n            'EventReport' => array_column($event['EventReport'], 'id'),\n        ];\n\n        foreach ($parts as $model => $modelIds) {\n            if (!empty($modelIds)) {\n                $conditions['AND']['OR'][] = [\n                    'AND' => [\n                        'model' => $model,\n                        'model_id' => $modelIds,\n                    ],\n                ];\n            }\n        }\n\n        return $conditions;\n    }\n\n    /**\n     * Generate link to model view if exists and use has permission to access it.\n     * @param array $auditLogs\n     * @return array\n     */\n    private function __appendModelLinks(array $auditLogs)\n    {\n        $models = [];\n        foreach ($auditLogs as $auditLog) {\n            if (isset($models[$auditLog['AuditLog']['model']])) {\n                $models[$auditLog['AuditLog']['model']][] = $auditLog['AuditLog']['model_id'];\n            } else {\n                $models[$auditLog['AuditLog']['model']] = [$auditLog['AuditLog']['model_id']];\n            }\n        }\n\n        $eventIds = isset($models['Event']) ? $models['Event'] : [];\n\n        if (isset($models['ObjectReference'])) {\n            $this->loadModel('ObjectReference');\n            $objectReferences = $this->ObjectReference->find('list', [\n                'conditions' => ['ObjectReference.id' => array_unique($models['ObjectReference'])],\n                'fields' => ['ObjectReference.id', 'ObjectReference.object_id'],\n            ]);\n        }\n\n        if (isset($models['Object']) || isset($objectReferences)) {\n            $objectIds = array_unique(array_merge(\n                isset($models['Object']) ? $models['Object'] : [],\n                isset($objectReferences) ? array_values($objectReferences) : []\n            ));\n            $this->loadModel('MispObject');\n            $conditions = $this->MispObject->buildConditions($this->Auth->user());\n            $conditions['Object.id'] = $objectIds;\n            $objects = $this->MispObject->find('all', [\n                'conditions' => $conditions,\n                'contain' => ['Event'],\n                'fields' => ['Object.id', 'Object.event_id', 'Object.uuid', 'Object.deleted'],\n            ]);\n            $objects = array_column(array_column($objects, 'Object'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($objects, 'event_id'));\n        }\n\n        if (isset($models['Attribute'])) {\n            $this->loadModel('Attribute');\n            $attributes = $this->Attribute->fetchAttributesSimple($this->Auth->user(), [\n                'conditions' => ['Attribute.id' => array_unique($models['Attribute'])],\n                'fields' => ['Attribute.id', 'Attribute.event_id', 'Attribute.uuid', 'Attribute.deleted'],\n            ]);\n            $attributes = array_column(array_column($attributes, 'Attribute'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($attributes, 'event_id'));\n        }\n\n        if (isset($models['ShadowAttribute'])) {\n            $this->loadModel('ShadowAttribute');\n            $conditions = $this->ShadowAttribute->buildConditions($this->Auth->user());\n            $conditions['AND'][] = ['ShadowAttribute.id' => array_unique($models['ShadowAttribute'])];\n            $shadowAttributes = $this->ShadowAttribute->find('all', [\n                'conditions' => $conditions,\n                'fields' => ['ShadowAttribute.id', 'ShadowAttribute.event_id', 'ShadowAttribute.uuid', 'ShadowAttribute.deleted'],\n                'contain' => ['Event', 'Attribute'],\n            ]);\n            $shadowAttributes = array_column(array_column($shadowAttributes, 'ShadowAttribute'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($shadowAttributes, 'event_id'));\n        }\n\n        if (!empty($eventIds)) {\n            $this->loadModel('Event');\n            $conditions = $this->Event->createEventConditions($this->Auth->user());\n            $conditions['Event.id'] = array_unique($eventIds);\n            $events = $this->Event->find('list', [\n                'conditions' => $conditions,\n                'fields' => ['Event.id', 'Event.info'],\n            ]);\n        }\n\n        $links = [\n            'ObjectTemplate' => 'objectTemplates',\n            'AuthKey' => 'auth_keys',\n            'GalaxyCluster' => 'galaxy_clusters',\n            'Galaxy' => 'galaxies',\n            'Organisation' => 'organisation',\n            'Warninglist' => 'warninglists',\n            'User' => 'admin/users',\n            'Role' => 'roles',\n            'EventReport' => 'eventReports',\n            'SharingGroup' => 'sharing_groups',\n            'Taxonomy' => 'taxonomies',\n        ];\n\n        $existingObjects = [];\n        foreach ($links as $modelName => $foo) {\n            if (isset($models[$modelName])) {\n                $this->loadModel($modelName);\n                $data = $this->{$modelName}->find('column', [\n                    'conditions' => ['id' => array_unique($models[$modelName])],\n                    'fields' => ['id'],\n                ]);\n                $existingObjects[$modelName] = array_flip($data);\n            }\n        }\n\n        foreach ($auditLogs as $k => $auditLog) {\n            $auditLog = $auditLog['AuditLog'];\n            $modelId = (int)$auditLog['model_id'];\n            $url = null;\n            $eventInfo = null;\n            switch ($auditLog['model']) {\n                case 'Event':\n                    if (isset($events[$modelId])) {\n                        $url = '/events/view/' . $modelId;\n                        $eventInfo = $events[$modelId];\n                    }\n                    break;\n                case 'ObjectReference':\n                    if (isset($objectReferences[$modelId]) && isset($objects[$objectReferences[$modelId]])) {\n                        $url = '/events/view/' . $objects[$objectReferences[$modelId]]['event_id'] . '/focus:' . $objects[$objectReferences[$modelId]]['uuid'];\n                        if ($objects[$objectReferences[$modelId]]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$objects[$objectReferences[$modelId]]['event_id']])) {\n                            $eventInfo = $events[$objects[$objectReferences[$modelId]]['event_id']];\n                        }\n                    }\n                    break;\n                case 'Object':\n                    if (isset($objects[$modelId])) {\n                        $url = '/events/view/' . $objects[$modelId]['event_id'] . '/focus:' . $objects[$modelId]['uuid'];\n                        if ($objects[$modelId]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$objects[$modelId]['event_id']])) {\n                            $eventInfo = $events[$objects[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                case 'Attribute':\n                    if (isset($attributes[$modelId])) {\n                        $url = '/events/view/' . $attributes[$modelId]['event_id'] . '/focus:' . $attributes[$modelId]['uuid'];\n                        if ($attributes[$modelId]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$attributes[$modelId]['event_id']])) {\n                            $eventInfo = $events[$attributes[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                case 'ShadowAttribute':\n                    if (isset($shadowAttributes[$modelId])) {\n                        $url = '/events/view/' . $shadowAttributes[$modelId]['event_id'] . '/focus:' . $shadowAttributes[$modelId]['uuid'];\n                        if (isset($events[$shadowAttributes[$modelId]['event_id']])) {\n                            $eventInfo = $events[$shadowAttributes[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                default:\n                    if (isset($existingObjects[$auditLog['model']][$modelId])) {\n                        $url = '/' . $links[$auditLog['model']] . '/view/' . $modelId;\n                    } else {\n                        continue 2;\n                    }\n            }\n            if ($url) {\n                $auditLogs[$k]['AuditLog']['model_link'] = $this->baseurl . $url;\n            }\n            if ($eventInfo) {\n                $auditLogs[$k]['AuditLog']['event_info'] = $eventInfo;\n            }\n        }\n\n        return $auditLogs;\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('AuditLog', 'Model');\n\n/**\n * @property AuditLog $AuditLog\n */\nclass AuditLogsController extends AppController\n{\n    public $components = [\n        'RequestHandler',\n    ];\n\n    /** @var array */\n    private $actions;\n\n    /** @var string[] */\n    private $models = [\n        'Attribute',\n        'Allowedlist',\n        'AuthKey',\n        'Cerebrate',\n        'CorrelationExclusion',\n        'Event',\n        'EventBlocklist',\n        'EventReport',\n        'Feed',\n        'DecayingModel',\n        'Object',\n        'ObjectTemplate',\n        'Organisation',\n        'OrgBlocklist',\n        'Post',\n        'Regexp',\n        'Role',\n        'Server',\n        'ShadowAttribute',\n        'SharingGroup',\n        'SystemSetting',\n        'Tag',\n        'TagCollection',\n        'TagCollectionTag',\n        'Task',\n        'Taxonomy',\n        'Template',\n        'Thread',\n        'User',\n        'UserSetting',\n        'Galaxy',\n        'GalaxyCluster',\n        'GalaxyClusterBlocklist',\n        'GalaxyClusterRelation',\n        'News',\n        'Warninglist',\n        'Workflow',\n        'WorkflowBlueprint',\n    ];\n\n    public $paginate = [\n        'recursive' => -1,\n        'limit' => 60,\n        'fields' => ['id', 'created', 'user_id', 'org_id', 'action', 'model', 'model_id', 'model_title', 'event_id', 'change'],\n        'contain' => [\n            'User' => ['fields' => ['id', 'email', 'org_id']],\n            'Organisation' => ['fields' => ['id', 'name', 'uuid']],\n        ],\n        'order' => [\n            'AuditLog.id' => 'DESC'\n        ],\n    ];\n\n    public function __construct($request = null, $response = null)\n    {\n        parent::__construct($request, $response);\n        $this->actions = [\n            AuditLog::ACTION_ADD => __('Add'),\n            AuditLog::ACTION_EDIT => __('Edit'),\n            AuditLog::ACTION_SOFT_DELETE => __('Soft delete'),\n            AuditLog::ACTION_DELETE => __('Delete'),\n            AuditLog::ACTION_UNDELETE => __('Undelete'),\n            AuditLog::ACTION_TAG => __('Tag'),\n            AuditLog::ACTION_TAG_LOCAL => __('Tag'),\n            AuditLog::ACTION_REMOVE_TAG => __('Remove tag'),\n            AuditLog::ACTION_REMOVE_TAG_LOCAL => __('Remove tag'),\n            AuditLog::ACTION_GALAXY => __('Galaxy cluster'),\n            AuditLog::ACTION_GALAXY_LOCAL => __('Galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY => __('Remove galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY_LOCAL => __('Remove galaxy cluster'),\n            AuditLog::ACTION_PUBLISH => __('Publish'),\n            AuditLog::ACTION_PUBLISH_SIGHTINGS => __('Publish sightings'),\n        ];\n    }\n\n    private function __applyAuditACL(array $user)\n    {\n        $acl = [];\n        if (empty($user['Role']['perm_site_admin'])) {\n            if (!empty($user['Role']['perm_admin'])) {\n                // ORG admins can see their own org info\n                $acl = ['AuditLog.org_id' => $user['org_id']];\n            } else {\n                // users can see their own info\n                $acl = ['AuditLog.user_id' => $user['id']];\n            }\n        }\n        return $acl;\n    }\n\n    public function admin_index()\n    {\n        $this->paginate['fields'][] = 'ip';\n        $this->paginate['fields'][] = 'request_type';\n        $this->paginate['fields'][] = 'authkey_id';\n\n        if ($this->_isRest()) {\n            $this->paginate['fields'][] = 'request_id';\n        }\n        if (!Configure::read('MISP.log_new_audit')) {\n            $this->Flash->warning(__(\"Audit log is not enabled. See 'MISP.log_new_audit' in the Server Settings. (Administration -> Server Settings -> MISP tab)\"));\n        }\n        $params = $this->IndexFilter->harvestParameters([\n            'ip',\n            'user',\n            'request_id',\n            'authkey_id',\n            'model',\n            'model_id',\n            'event_id',\n            'model_title',\n            'action',\n            'org',\n            'created',\n            'request_type',\n        ]);\n\n        $this->paginate['conditions'] = $this->__searchConditions($params);\n        $acl = $this->__applyAuditACL($this->Auth->user());\n        if ($acl) {\n            $this->paginate['conditions']['AND'][] = $acl;\n        }\n        $list = $this->paginate();\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($list, 'json');\n        }\n\n        $list = $this->__appendModelLinks($list);\n        foreach ($list as $k => $item) {\n            $list[$k]['AuditLog']['action_human'] =  $this->actions[$item['AuditLog']['action']];\n        }\n\n        $this->set('list', $list);\n        $this->set('actions', [\n            AuditLog::ACTION_ADD => __('Add'),\n            AuditLog::ACTION_EDIT => __('Edit'),\n            AuditLog::ACTION_SOFT_DELETE => __('Soft delete'),\n            AuditLog::ACTION_DELETE => __('Delete'),\n            AuditLog::ACTION_UNDELETE => __('Undelete'),\n            AuditLog::ACTION_TAG . '||' . AuditLog::ACTION_TAG_LOCAL => __('Tag'),\n            AuditLog::ACTION_REMOVE_TAG . '||' . AuditLog::ACTION_REMOVE_TAG_LOCAL => __('Remove tag'),\n            AuditLog::ACTION_GALAXY . '||' . AuditLog::ACTION_GALAXY_LOCAL  => __('Galaxy cluster'),\n            AuditLog::ACTION_REMOVE_GALAXY . '||' . AuditLog::ACTION_REMOVE_GALAXY_LOCAL => __('Remove galaxy cluster'),\n            AuditLog::ACTION_PUBLISH => __('Publish'),\n            AuditLog::ACTION_PUBLISH_SIGHTINGS => $this->actions[AuditLog::ACTION_PUBLISH_SIGHTINGS],\n        ]);\n        $models = $this->models;\n        sort($models);\n        $this->set('models', $models);\n        $this->set('title_for_layout', __('Audit logs'));\n    }\n\n    public function eventIndex($eventId, $org = null)\n    {\n        $event = $this->AuditLog->Event->fetchSimpleEvent($this->Auth->user(), $eventId);\n        if (empty($event)) {\n            throw new NotFoundException('Invalid event.');\n        }\n        $this->paginate['conditions'] = $this->__createEventIndexConditions($event);\n        $this->set('passedArgsArray', ['eventId' => $eventId, 'org' => $org]);\n\n        $params = $this->IndexFilter->harvestParameters(['created', 'org']);\n        if ($org) {\n            $params['org'] = $org;\n        }\n        $this->paginate['conditions'][] = $this->__searchConditions($params);\n\n        $list = $this->paginate();\n\n        if (!$this->_isSiteAdmin()) {\n            // Remove all user info about users from different org\n            $orgUserIds = $this->User->find('column', [\n                'conditions' => ['User.org_id' => $this->Auth->user('org_id')],\n                'fields' => ['User.id'],\n            ]);\n            foreach ($list as $k => $item) {\n                if ($item['AuditLog']['user_id'] == 0) {\n                    continue;\n                }\n                if (!in_array($item['User']['id'], $orgUserIds)) {\n                    unset($list[$k]['User']);\n                    unset($list[$k]['AuditLog']['user_id']);\n                }\n            }\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($list, 'json');\n        }\n\n        foreach ($list as $k => $item) {\n            $list[$k]['AuditLog']['action_human'] = $this->actions[$item['AuditLog']['action']];\n        }\n\n        $this->set('data', $list);\n        $this->set('event', $event);\n        $this->set('mayModify', $this->__canModifyEvent($event));\n        $this->set('menuData', [\n            'menuList' => 'event',\n            'menuItem' => 'eventLog'\n        ]);\n    }\n\n    public function fullChange($id)\n    {\n        $log = $this->AuditLog->find('first', [\n            'conditions' => ['id' => $id],\n            'recursive' => -1,\n            'fields' => ['change', 'action'],\n        ]);\n        if (empty($log)) {\n            throw new Exception('Log not found.');\n        }\n        $this->set('log', $log);\n    }\n\n    public function returnDates($org = 'all')\n    {\n        $user = $this->_closeSession();\n        if (!$user['Role']['perm_sharing_group'] && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            if ($org !== 'all' && $org !== $user['Organisation']['name']) {\n                throw new MethodNotAllowedException('Invalid organisation.');\n            }\n        }\n\n        $data = $this->AuditLog->returnDates($org);\n        return $this->RestResponse->viewData($data, $this->response->type());\n    }\n\n    /**\n     * @return array\n     */\n    private function __searchConditions(array $params)\n    {\n        $conditions = [];\n        $qbRules = [];\n        foreach ($params as $key => $value) {\n            if ($key === 'model' && strpos($value, ':') !== false) {\n                $parts = explode(':', $value);\n                $qbRules[] = [\n                    'id' => 'model',\n                    'value' => $parts[0],\n                ];\n                $qbRules[] = [\n                    'id' => 'model_id',\n                    'value' => $parts[1],\n                ];\n            } elseif ($key === 'created') {\n                $qbRules[] = [\n                    'id' => $key,\n                    'operator' => is_array($value) ? 'between' : 'greater_or_equal',\n                    'value' => $value,\n                ];\n            } else {\n                if (is_array($value)) {\n                    $value = implode('||', $value);\n                }\n                $qbRules[] = [\n                    'id' => $key,\n                    'value' => $value,\n                ];\n            }\n        }\n        $this->set('qbRules', $qbRules);\n\n        if (isset($params['user'])) {\n            if (strtoupper($params['user']) === 'SYSTEM') {\n                $conditions['AuditLog.user_id'] = 0;\n            } else if (is_numeric($params['user'])) {\n                $conditions['AuditLog.user_id'] = $params['user'];\n            } else {\n                $user = $this->User->find('first', [\n                    'conditions' => ['User.email' => $params['user']],\n                    'fields' => ['id'],\n                ]);\n                if (!empty($user)) {\n                    $conditions['AuditLog.user_id'] = $user['User']['id'];\n                } else {\n                    $conditions['AuditLog.user_id'] = -1;\n                }\n            }\n        }\n        if (isset($params['ip'])) {\n            $conditions['AuditLog.ip'] = inet_pton($params['ip']);\n        }\n        if (isset($params['authkey_id'])) {\n            $conditions['AuditLog.authkey_id'] = $params['authkey_id'];\n        }\n        if (isset($params['request_id'])) {\n            $conditions['AuditLog.request_id'] = $params['request_id'];\n        }\n        if (isset($params['request_type'])) {\n            $conditions['AuditLog.request_type'] = $params['request_type'];\n        }\n        if (isset($params['model'])) {\n            $conditions['AuditLog.model'] = $params['model'];\n        }\n        if (isset($params['model_id'])) {\n            $conditions['AuditLog.model_id'] = $params['model_id'];\n        }\n        if (isset($params['event_id'])) {\n            $conditions['AuditLog.event_id'] = $params['event_id'];\n        }\n        if (isset($params['model_title'])) {\n            $conditions['AuditLog.model_title LIKE'] = '%' . $params['model_title'] . '%';\n        }\n        if (isset($params['action'])) {\n            $conditions['AuditLog.action'] = $params['action'];\n        }\n        if (isset($params['org'])) {\n            if (is_numeric($params['org'])) {\n                $conditions['AuditLog.org_id'] = $params['org'];\n            } else {\n                $org = $this->AuditLog->Organisation->fetchOrg($params['org']);\n                if ($org) {\n                    $conditions['AuditLog.org_id'] = $org['id'];\n                } else {\n                    $conditions['AuditLog.org_id'] = -1;\n                }\n            }\n        }\n        if (isset($params['created'])) {\n            $tempData = is_array($params['created']) ? $params['created'] : [$params['created']];\n            foreach ($tempData as $k => $v) {\n                $tempData[$k] = $this->AuditLog->resolveTimeDelta($v);\n            }\n            if (count($tempData) === 1) {\n                $conditions['AuditLog.created >='] = date(\"Y-m-d H:i:s\", $tempData[0]);\n            } else {\n                if ($tempData[0] < $tempData[1]) {\n                    $temp = $tempData[1];\n                    $tempData[1] = $tempData[0];\n                    $tempData[0] = $temp;\n                }\n                $conditions['AND'][] = ['AuditLog.created <=' => date(\"Y-m-d H:i:s\", $tempData[0])];\n                $conditions['AND'][] = ['AuditLog.created >=' => date(\"Y-m-d H:i:s\", $tempData[1])];\n            }\n        }\n        return $conditions;\n    }\n\n    /**\n     * Create conditions that will include just events parts that user can see.\n     * @param array $event\n     * @return array\n     */\n    private function __createEventIndexConditions(array $event)\n    {\n        if ($this->_isSiteAdmin() || $event['Event']['orgc_id'] == $this->Auth->user('org_id')) {\n            // Site admins and event owners can see all changes\n            return ['event_id' => $event['Event']['id']];\n        }\n        $event = $this->AuditLog->Event->fetchEvent($this->Auth->user(), [\n            'eventid' => $event['Event']['id'],\n            'sgReferenceOnly' => 1,\n            'deleted' => [0, 1],\n            'deleted_proposals' => 1,\n            'noSightings' => true,\n            'includeEventCorrelations' => false,\n            'excludeGalaxy' => true,\n        ])[0];\n        $attributeIds = [];\n        $objectIds = [];\n        $proposalIds = array_column($event['ShadowAttribute'], 'id');\n        $objectReferenceId = [];\n        foreach ($event['Attribute'] as $aa) {\n            $attributeIds[] = $aa['id'];\n            if (!empty($aa['ShadowAttribute'])) {\n                foreach ($aa['ShadowAttribute'] as $sa) {\n                    $proposalIds[] = $sa['id'];\n                }\n            }\n        }\n        unset($event['Attribute']);\n        foreach ($event['Object'] as $ob) {\n            foreach ($ob['Attribute'] as $aa) {\n                $attributeIds[] = $aa['id'];\n                if (!empty($aa['ShadowAttribute'])) {\n                    foreach ($aa['ShadowAttribute'] as $sa) {\n                        $proposalIds[] = $sa['id'];\n                    }\n                }\n            }\n            foreach ($ob['ObjectReference'] as $or) {\n                $objectReferenceId[] = $or['id'];\n            }\n            $objectIds[] = $ob['id'];\n        }\n        unset($event['Object']);\n\n        $conditions = [];\n        $conditions['AND']['event_id'] = $event['Event']['id'];\n        $conditions['AND']['OR'][] = ['model' => 'Event'];\n\n        $parts = [\n            'Attribute' => $attributeIds,\n            'ShadowAttribute' => $proposalIds,\n            'Object' => $objectIds,\n            'ObjectReference' => $objectReferenceId,\n            'EventReport' => array_column($event['EventReport'], 'id'),\n        ];\n\n        foreach ($parts as $model => $modelIds) {\n            if (!empty($modelIds)) {\n                $conditions['AND']['OR'][] = [\n                    'AND' => [\n                        'model' => $model,\n                        'model_id' => $modelIds,\n                    ],\n                ];\n            }\n        }\n\n        return $conditions;\n    }\n\n    /**\n     * Generate link to model view if exists and use has permission to access it.\n     * @param array $auditLogs\n     * @return array\n     */\n    private function __appendModelLinks(array $auditLogs)\n    {\n        $models = [];\n        foreach ($auditLogs as $auditLog) {\n            if (isset($models[$auditLog['AuditLog']['model']])) {\n                $models[$auditLog['AuditLog']['model']][] = $auditLog['AuditLog']['model_id'];\n            } else {\n                $models[$auditLog['AuditLog']['model']] = [$auditLog['AuditLog']['model_id']];\n            }\n        }\n\n        $eventIds = isset($models['Event']) ? $models['Event'] : [];\n\n        if (isset($models['ObjectReference'])) {\n            $this->loadModel('ObjectReference');\n            $objectReferences = $this->ObjectReference->find('list', [\n                'conditions' => ['ObjectReference.id' => array_unique($models['ObjectReference'])],\n                'fields' => ['ObjectReference.id', 'ObjectReference.object_id'],\n            ]);\n        }\n\n        if (isset($models['Object']) || isset($objectReferences)) {\n            $objectIds = array_unique(array_merge(\n                isset($models['Object']) ? $models['Object'] : [],\n                isset($objectReferences) ? array_values($objectReferences) : []\n            ));\n            $this->loadModel('MispObject');\n            $conditions = $this->MispObject->buildConditions($this->Auth->user());\n            $conditions['Object.id'] = $objectIds;\n            $objects = $this->MispObject->find('all', [\n                'conditions' => $conditions,\n                'contain' => ['Event'],\n                'fields' => ['Object.id', 'Object.event_id', 'Object.uuid', 'Object.deleted'],\n            ]);\n            $objects = array_column(array_column($objects, 'Object'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($objects, 'event_id'));\n        }\n\n        if (isset($models['Attribute'])) {\n            $this->loadModel('Attribute');\n            $attributes = $this->Attribute->fetchAttributesSimple($this->Auth->user(), [\n                'conditions' => ['Attribute.id' => array_unique($models['Attribute'])],\n                'fields' => ['Attribute.id', 'Attribute.event_id', 'Attribute.uuid', 'Attribute.deleted'],\n            ]);\n            $attributes = array_column(array_column($attributes, 'Attribute'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($attributes, 'event_id'));\n        }\n\n        if (isset($models['ShadowAttribute'])) {\n            $this->loadModel('ShadowAttribute');\n            $conditions = $this->ShadowAttribute->buildConditions($this->Auth->user());\n            $conditions['AND'][] = ['ShadowAttribute.id' => array_unique($models['ShadowAttribute'])];\n            $shadowAttributes = $this->ShadowAttribute->find('all', [\n                'conditions' => $conditions,\n                'fields' => ['ShadowAttribute.id', 'ShadowAttribute.event_id', 'ShadowAttribute.uuid', 'ShadowAttribute.deleted'],\n                'contain' => ['Event', 'Attribute'],\n            ]);\n            $shadowAttributes = array_column(array_column($shadowAttributes, 'ShadowAttribute'), null, 'id');\n            $eventIds = array_merge($eventIds, array_column($shadowAttributes, 'event_id'));\n        }\n\n        if (!empty($eventIds)) {\n            $this->loadModel('Event');\n            $conditions = $this->Event->createEventConditions($this->Auth->user());\n            $conditions['Event.id'] = array_unique($eventIds);\n            $events = $this->Event->find('list', [\n                'conditions' => $conditions,\n                'fields' => ['Event.id', 'Event.info'],\n            ]);\n        }\n\n        $links = [\n            'ObjectTemplate' => 'objectTemplates',\n            'AuthKey' => 'auth_keys',\n            'GalaxyCluster' => 'galaxy_clusters',\n            'Galaxy' => 'galaxies',\n            'Organisation' => 'organisation',\n            'Warninglist' => 'warninglists',\n            'User' => 'admin/users',\n            'Role' => 'roles',\n            'EventReport' => 'eventReports',\n            'SharingGroup' => 'sharing_groups',\n            'Taxonomy' => 'taxonomies',\n        ];\n\n        $existingObjects = [];\n        foreach ($links as $modelName => $foo) {\n            if (isset($models[$modelName])) {\n                $this->loadModel($modelName);\n                $data = $this->{$modelName}->find('column', [\n                    'conditions' => ['id' => array_unique($models[$modelName])],\n                    'fields' => ['id'],\n                ]);\n                $existingObjects[$modelName] = array_flip($data);\n            }\n        }\n\n        foreach ($auditLogs as $k => $auditLog) {\n            $auditLog = $auditLog['AuditLog'];\n            $modelId = (int)$auditLog['model_id'];\n            $url = null;\n            $eventInfo = null;\n            switch ($auditLog['model']) {\n                case 'Event':\n                    if (isset($events[$modelId])) {\n                        $url = '/events/view/' . $modelId;\n                        $eventInfo = $events[$modelId];\n                    }\n                    break;\n                case 'ObjectReference':\n                    if (isset($objectReferences[$modelId]) && isset($objects[$objectReferences[$modelId]])) {\n                        $url = '/events/view/' . $objects[$objectReferences[$modelId]]['event_id'] . '/focus:' . $objects[$objectReferences[$modelId]]['uuid'];\n                        if ($objects[$objectReferences[$modelId]]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$objects[$objectReferences[$modelId]]['event_id']])) {\n                            $eventInfo = $events[$objects[$objectReferences[$modelId]]['event_id']];\n                        }\n                    }\n                    break;\n                case 'Object':\n                    if (isset($objects[$modelId])) {\n                        $url = '/events/view/' . $objects[$modelId]['event_id'] . '/focus:' . $objects[$modelId]['uuid'];\n                        if ($objects[$modelId]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$objects[$modelId]['event_id']])) {\n                            $eventInfo = $events[$objects[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                case 'Attribute':\n                    if (isset($attributes[$modelId])) {\n                        $url = '/events/view/' . $attributes[$modelId]['event_id'] . '/focus:' . $attributes[$modelId]['uuid'];\n                        if ($attributes[$modelId]['deleted']) {\n                            $url .= '/deleted:2';\n                        }\n                        if (isset($events[$attributes[$modelId]['event_id']])) {\n                            $eventInfo = $events[$attributes[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                case 'ShadowAttribute':\n                    if (isset($shadowAttributes[$modelId])) {\n                        $url = '/events/view/' . $shadowAttributes[$modelId]['event_id'] . '/focus:' . $shadowAttributes[$modelId]['uuid'];\n                        if (isset($events[$shadowAttributes[$modelId]['event_id']])) {\n                            $eventInfo = $events[$shadowAttributes[$modelId]['event_id']];\n                        }\n                    }\n                    break;\n                default:\n                    if (isset($existingObjects[$auditLog['model']][$modelId])) {\n                        $url = '/' . $links[$auditLog['model']] . '/view/' . $modelId;\n                    } else {\n                        continue 2;\n                    }\n            }\n            if ($url) {\n                $auditLogs[$k]['AuditLog']['model_link'] = $this->baseurl . $url;\n            }\n            if ($eventInfo) {\n                $auditLogs[$k]['AuditLog']['event_info'] = $eventInfo;\n            }\n        }\n\n        return $auditLogs;\n    }\n}\n"], "filenames": ["app/Controller/AuditLogsController.php"], "buggy_code_start_loc": [93], "buggy_code_end_loc": [365], "fixing_code_start_loc": [94], "fixing_code_end_loc": [380], "type": "NVD-CWE-noinfo", "message": "app/Controller/AuditLogsController.php in MISP before 2.4.182 mishandles ACLs for audit logs.", "other": {"cve": {"id": "CVE-2023-50918", "sourceIdentifier": "cve@mitre.org", "published": "2023-12-15T18:15:07.723", "lastModified": "2023-12-19T17:18:38.713", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "app/Controller/AuditLogsController.php in MISP before 2.4.182 mishandles ACLs for audit logs."}, {"lang": "es", "value": "app/Controller/AuditLogsController.php en MISP anterior a 2.4.182 maneja mal las ACL para los registros de auditor\u00eda."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.182", "matchCriteriaId": "AAC65444-AE99-4A5A-8BD0-C305F956C0ED"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/92888b1376246c0f20c256aaa3c57b6f12115fa1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.181...v2.4.182", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/92888b1376246c0f20c256aaa3c57b6f12115fa1"}}