{"buggy_code": ["// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar mixertest = null;\nvar opaqueId = \"audiobridgetest-\"+Janus.randomString(12);\n\nvar spinner = null;\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar stereo = false;\nif(getQueryStringValue(\"stereo\") !== \"\")\n\tstereo = (getQueryStringValue(\"stereo\") === \"true\");\nvar mygroup = null;\t// Forwarding group, if required by the room\nif(getQueryStringValue(\"group\") !== \"\")\n\tmygroup = getQueryStringValue(\"group\");\nvar myusername = null;\nvar myid = null;\nvar webrtcUp = false;\nvar audioenabled = false;\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to AudioBridge plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.audiobridge\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tmixertest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + mixertest.getPlugin() + \", id=\" + mixertest.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#audiojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"audiobridge\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Successfully joined, negotiate WebRTC now\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"id\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!webrtcUp) {\n\t\t\t\t\t\t\t\t\t\t\t\t\twebrtcUp = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Publish our stream\n\t\t\t\t\t\t\t\t\t\t\t\t\tmixertest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: false },\t// This is an audio only room\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", muted: false };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any room participant?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"roomchanged\") {\n\t\t\t\t\t\t\t\t\t\t\t// The user switched to a different room\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Moved to room \" + msg[\"room\"] + \", new ID: \" + myid);\n\t\t\t\t\t\t\t\t\t\t\t// Any room participant?\n\t\t\t\t\t\t\t\t\t\t\t$('#list').empty();\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 485) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.audiobridge.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the participants has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Participant left: \" + leaving + \" (we have \" + $('#rp'+leaving).length + \" elements with ID #rp\" +leaving + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t$('#rp'+leaving).remove();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tmixertest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t// We're not going to attach the local audio stream\n\t\t\t\t\t\t\t\t\t$('#audiojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#roomaudio').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#mixedaudio').append('<audio class=\"rounded centered\" id=\"roomaudio\" width=\"100%\" height=\"100%\" autoplay/>');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#roomaudio').get(0), stream);\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t// Mute button\n\t\t\t\t\t\t\t\t\taudioenabled = true;\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\taudioenabled = !audioenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(audioenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Mute\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Unmute\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: { request: \"configure\", muted: !audioenabled }});\n\t\t\t\t\t\t\t\t\t\t}).removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t// Spatial position, if enabled\n\t\t\t\t\t\t\t\t\t$('#position').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.prompt(\"Insert new spatial position: [0-100] (0=left, 50=center, 100=right)\", function(result) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = parseInt(result);\n\t\t\t\t\t\t\t\t\t\t\t\tif(isNaN(spatial) || spatial < 0 || spatial > 100) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Invalid value\");\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: { request: \"configure\", spatial_position: spatial }});\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\twebrtcUp = false;\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#participant').empty().hide();\n\t\t\t\t\t\t\t\t\t$('#list').empty();\n\t\t\t\t\t\t\t\t\t$('#mixedaudio').empty();\n\t\t\t\t\t\t\t\t\t$('#room').hide();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = { request: \"join\", room: myroom, display: username };\n\t\tmyusername = username;\n\t\t// Check if we need to join using G.711 instead of (default) Opus\n\t\tif(acodec === 'opus' || acodec === 'pcmu' || acodec === 'pcma')\n\t\t\tregister.codec = acodec;\n\t\t// If the room uses forwarding groups, this is how we state ours\n\t\tif(mygroup)\n\t\t\tregister[\"group\"] = mygroup;\n\t\t// Send the message\n\t\tmixertest.send({ message: register });\n\t}\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar recordplay = null;\nvar opaqueId = \"recordplaytest-\"+Janus.randomString(12);\n\nvar spinner = null;\nvar bandwidth = 1024 * 1024;\n\nvar myname = null;\nvar recording = false;\nvar playing = false;\nvar recordingId = null;\nvar selectedRecording = null;\nvar selectedRecordingInfo = null;\n\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar vcodec = (getQueryStringValue(\"vcodec\") !== \"\" ? getQueryStringValue(\"vcodec\") : null);\nvar vprofile = (getQueryStringValue(\"vprofile\") !== \"\" ? getQueryStringValue(\"vprofile\") : null);\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar recordData = (getQueryStringValue(\"data\") !== \"\" ? getQueryStringValue(\"data\") : null);\nif(recordData !== \"text\" && recordData !== \"binary\")\n\trecordData = null;\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to Record&Play plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.recordplay\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\trecordplay = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + recordplay.getPlugin() + \", id=\" + recordplay.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the name prompt\n\t\t\t\t\t\t\t\t\t$('#recordplay').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"  -- Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().unblock();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"status\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar event = result[\"status\"];\n\t\t\t\t\t\t\t\t\t\t\tif(event === 'preparing' || event === 'refreshing') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Preparing the recording playout\");\n\t\t\t\t\t\t\t\t\t\t\t\trecordplay.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false, data: true },\t// We want recvonly audio/video\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"start\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecordplay.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tif(result[\"warning\"])\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(result[\"warning\"]);\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'recording') {\n\t\t\t\t\t\t\t\t\t\t\t\t// Got an ANSWER to our recording OFFER\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep)\n\t\t\t\t\t\t\t\t\t\t\t\t\trecordplay.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\tvar id = result[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif(id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"The ID of the current recording is \" + id);\n\t\t\t\t\t\t\t\t\t\t\t\t\trecordingId = id;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'playing') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Playout has started!\");\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'stopped') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Session has stopped!\");\n\t\t\t\t\t\t\t\t\t\t\t\tvar id = result[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif(recordingId) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(recordingId !== id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"Not a stop to our recording?\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Recording completed! Check the list of recordings to replay it.\");\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(selectedRecording) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(selectedRecording !== id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"Not a stop to our playout?\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t\t\t\trecordingId = null;\n\t\t\t\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t\t\t\trecordplay.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// FIXME Error?\n\t\t\t\t\t\t\t\t\t\tvar error = msg[\"error\"];\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(error);\n\t\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t\trecordplay.hangup();\n\t\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tif(playing === true)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#videotitle').html(\"Recording...\");\n\t\t\t\t\t\t\t\t\t$('#stop').unbind('click').click(stop);\n\t\t\t\t\t\t\t\t\t$('#video').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#thevideo').length === 0)\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered\" id=\"thevideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#thevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#thevideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(recordplay.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\trecordplay.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videobox .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videobox .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tif(playing === false)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tif($('#thevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videotitle').html(selectedRecordingInfo);\n\t\t\t\t\t\t\t\t\t\t$('#stop').unbind('click').click(stop);\n\t\t\t\t\t\t\t\t\t\t$('#video').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered hide\" id=\"thevideo\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t\t\t\t\t\t// No remote video yet\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t\t\t\t\t\tif(spinner == null) {\n\t\t\t\t\t\t\t\t\t\t\tvar target = document.getElementById('videobox');\n\t\t\t\t\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif($('#curres').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"label label-primary\" id=\"curres' +'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"label label-info\" id=\"curbw' +'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t\t\t\t\t\t\t$(\"#video\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').text(width + 'x' + height);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\trecordplay.bitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\t\tvar bitrate = recordplay.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curbw').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t\tvar video = $('#thevideo').get(0);\n\t\t\t\t\t\t\t\t\t\t\t\tvar width = video.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\tvar height = video.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').text(width + 'x' + height);\n\t\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#thevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide');\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#thevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videobox .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videobox .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#datafield').parent().removeClass('hide');\n\t\t\t\t\t\t\t\t\tif(playing === false) {\n\t\t\t\t\t\t\t\t\t\t// We're recording, use this field to send data\n\t\t\t\t\t\t\t\t\t\t$('#datafield').attr('placeholder', 'Write a message to record');\n\t\t\t\t\t\t\t\t\t\t$('#datafield').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\tif(playing === true)\n\t\t\t\t\t\t\t\t\t\t$('#datafield').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\tif(recordplay.bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(recordplay.bitrateTimer);\n\t\t\t\t\t\t\t\t\tdelete recordplay.bitrateTimer;\n\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t$('#datafield').attr('disabled', true).attr('placeholder', '').val('');\n\t\t\t\t\t\t\t\t\t$('#datafield').parent().addClass('hide');\n\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction sendData() {\n\tvar data = $('#datafield').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\trecordplay.data({\n\t\ttext: data,\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datafield').val(''); },\n\t});\n}\n\nfunction updateRecsList() {\n\t$('#list').unbind('click');\n\t$('#update-list').addClass('fa-spin');\n\tvar body = { request: \"list\" };\n\tJanus.debug(\"Sending message:\", body);\n\trecordplay.send({ message: body, success: function(result) {\n\t\tsetTimeout(function() {\n\t\t\t$('#list').click(updateRecsList);\n\t\t\t$('#update-list').removeClass('fa-spin');\n\t\t}, 500);\n\t\tif(!result) {\n\t\t\tbootbox.alert(\"Got no response to our query for available recordings\");\n\t\t\treturn;\n\t\t}\n\t\tif(result[\"list\"]) {\n\t\t\t$('#recslist').empty();\n\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\tvar list = result[\"list\"];\n\t\t\tlist.sort(function(a, b) {return (a[\"date\"] < b[\"date\"]) ? 1 : ((b[\"date\"] < a[\"date\"]) ? -1 : 0);} );\n\t\t\tJanus.debug(\"Got a list of available recordings:\", list);\n\t\t\tfor(var mp in list) {\n\t\t\t\tJanus.debug(\"  >> [\" + list[mp][\"id\"] + \"] \" + list[mp][\"name\"] + \" (\" + list[mp][\"date\"] + \")\");\n\t\t\t\t$('#recslist').append(\"<li><a href='#' id='\" + list[mp][\"id\"] + \"'>\" + list[mp][\"name\"] + \" [\" + list[mp][\"date\"] + \"]\" + \"</a></li>\");\n\t\t\t}\n\t\t\t$('#recslist a').unbind('click').click(function() {\n\t\t\t\tselectedRecording = $(this).attr(\"id\");\n\t\t\t\tselectedRecordingInfo = $(this).text();\n\t\t\t\t$('#recset').html($(this).html()).parent().removeClass('open');\n\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\t}});\n}\n\nfunction startRecording() {\n\tif(recording)\n\t\treturn;\n\t// Start a recording\n\trecording = true;\n\tplaying = false;\n\tbootbox.prompt(\"Insert a name for the recording (e.g., John Smith says hello)\", function(result) {\n\t\tif(!result) {\n\t\t\trecording = false;\n\t\t\treturn;\n\t\t}\n\t\tmyname = result;\n\t\t$('#record').unbind('click').attr('disabled', true);\n\t\t$('#play').unbind('click').attr('disabled', true);\n\t\t$('#list').unbind('click').attr('disabled', true);\n\t\t$('#recset').attr('disabled', true);\n\t\t$('#recslist').attr('disabled', true);\n\t\t$('#pause-resume').removeClass('hide');\n\n\t\t// bitrate and keyframe interval can be set at any time:\n\t\t// before, after, during recording\n\t\trecordplay.send({\n\t\t\tmessage: {\n\t\t\t\trequest: 'configure',\n\t\t\t\t'video-bitrate-max': bandwidth,\t\t// a quarter megabit\n\t\t\t\t'video-keyframe-interval': 15000\t// 15 seconds\n\t\t\t}\n\t\t});\n\n\t\trecordplay.createOffer(\n\t\t\t{\n\t\t\t\t// By default, it's sendrecv for audio and video... no datachannels,\n\t\t\t\t// unless we've passed the query string argument to record those too\n\t\t\t\tmedia: { data: (recordData != null) },\n\t\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\t\tsimulcast: doSimulcast,\n\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\tvar body = { request: \"record\", name: myname };\n\t\t\t\t\t// We can try and force a specific codec, by telling the plugin what we'd prefer\n\t\t\t\t\t// For simplicity, you can set it via a query string (e.g., ?vcodec=vp9)\n\t\t\t\t\tif(acodec)\n\t\t\t\t\t\tbody[\"audiocodec\"] = acodec;\n\t\t\t\t\tif(vcodec)\n\t\t\t\t\t\tbody[\"videocodec\"] = vcodec;\n\t\t\t\t\t// For the codecs that support them (VP9 and H.264) you can specify a codec\n\t\t\t\t\t// profile as well (e.g., ?vprofile=2 for VP9, or ?vprofile=42e01f for H.264)\n\t\t\t\t\tif(vprofile)\n\t\t\t\t\t\tbody[\"videoprofile\"] = vprofile;\n\t\t\t\t\t// If we're going to send binary data, let's tell the plugin\n\t\t\t\t\tif(recordData === \"binary\")\n\t\t\t\t\t\tbody[\"textdata\"] = false;\n\t\t\t\t\trecordplay.send({ message: body, jsep: jsep });\n\t\t\t\t},\n\t\t\t\terror: function(error) {\n\t\t\t\t\tJanus.error(\"WebRTC error...\", error);\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\trecordplay.hangup();\n\t\t\t\t}\n\t\t\t});\n\t\t$('#pause-resume').unbind('click').on('click', function() {\n\t\t\tif($(this).text() === 'Pause') {\n\t\t\t\trecordplay.send({message: {request: 'pause'}});\n\t\t\t\t$(this).text('Resume');\n\t\t\t} else {\n\t\t\t\trecordplay.send({message: {request: 'resume'}});\n\t\t\t\t$(this).text('Pause');\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction startPlayout() {\n\tif(playing)\n\t\treturn;\n\t// Start a playout\n\trecording = false;\n\tplaying = true;\n\tif(!selectedRecording) {\n\t\tplaying = false;\n\t\treturn;\n\t}\n\t$('#record').unbind('click').attr('disabled', true);\n\t$('#play').unbind('click').attr('disabled', true);\n\t$('#list').unbind('click').attr('disabled', true);\n\t$('#recset').attr('disabled', true);\n\t$('#recslist').attr('disabled', true);\n\t$('#pause-resume').addClass('hide');\n\tvar play = { request: \"play\", id: parseInt(selectedRecording) };\n\trecordplay.send({ message: play });\n}\n\nfunction stop() {\n\t// Stop a recording/playout\n\t$('#stop').unbind('click');\n\tvar stop = { request: \"stop\" };\n\trecordplay.send({ message: stop });\n\trecordplay.hangup();\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\n\nvar janus = null;\nvar screentest = null;\nvar opaqueId = \"screensharingtest-\"+Janus.randomString(12);\n\nvar myusername = null;\nvar myid = null;\n\nvar capture = null;\nvar role = null;\nvar room = null;\nvar source = null;\n\nvar spinner = null;\n\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tscreentest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + screentest.getPlugin() + \", id=\" + screentest.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#screenmenu').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#createnow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#create').click(preShareScreen);\n\t\t\t\t\t\t\t\t\t$('#joinnow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#join').click(joinScreen);\n\t\t\t\t\t\t\t\t\t$('#desc').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa'\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().unblock();\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Your screen sharing session just started: pass the <b>\" + room + \"</b> session identifier to those who want to attend.\");\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Your screen sharing session just stopped.\", function() {\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t$('#session').html(room);\n\t\t\t\t\t\t\t\t\t\t\t$('#title').html(msg[\"description\"]);\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tif(role === \"publisher\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// This is our session, publish our stream\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Negotiating WebRTC stream for our screen (capture \" + capture + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Safari expects a user gesture to share the screen: see issue #2455\n\t\t\t\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Safari requires a user gesture before the screen can be shared: close this dialog to do that. See issue #2455 for more details\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: capture, audioSend: true, videoRecv: false},\t// Screen sharing Publishers are sendonly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", audio: true, video: true };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Other browsers should be fine, we try to call getDisplayMedia directly\n\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: capture, audioSend: true, videoRecv: false},\t// Screen sharing Publishers are sendonly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", audio: true, video: true };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t// We're just watching a session, any feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(role === \"listener\" && msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display);\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tif(role === \"listener\" && msg[\"leaving\"] === source) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The screen sharing session is over, the publisher left\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tscreentest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#screenmenu').hide();\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#screenvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered\" id=\"screenvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#screenvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tif(screentest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tscreentest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#screencapture').empty();\n\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#room').hide();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnterShare(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tpreShareScreen();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction preShareScreen() {\n\tif(!Janus.isExtensionEnabled()) {\n\t\tbootbox.alert(\"You're using Chrome but don't have the screensharing extension installed: click <b><a href='https://chrome.google.com/webstore/detail/janus-webrtc-screensharin/hapfgfdkleiggjjpfpenajgdnfckjpaj' target='_blank'>here</a></b> to do so\", function() {\n\t\t\twindow.location.reload();\n\t\t});\n\t\treturn;\n\t}\n\t// Create a new room\n\t$('#desc').attr('disabled', true);\n\t$('#create').attr('disabled', true).unbind('click');\n\t$('#roomid').attr('disabled', true);\n\t$('#join').attr('disabled', true).unbind('click');\n\tif($('#desc').val() === \"\") {\n\t\tbootbox.alert(\"Please insert a description for the room\");\n\t\t$('#desc').removeAttr('disabled', true);\n\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t$('#roomid').removeAttr('disabled', true);\n\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\treturn;\n\t}\n\tcapture = \"screen\";\n\tif(navigator.mozGetUserMedia) {\n\t\t// Firefox needs a different constraint for screen and window sharing\n\t\tbootbox.dialog({\n\t\t\ttitle: \"Share whole screen or a window?\",\n\t\t\tmessage: \"Firefox handles screensharing in a different way: are you going to share the whole screen, or would you rather pick a single window/application to share instead?\",\n\t\t\tbuttons: {\n\t\t\t\tscreen: {\n\t\t\t\t\tlabel: \"Share screen\",\n\t\t\t\t\tclassName: \"btn-primary\",\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\tcapture = \"screen\";\n\t\t\t\t\t\tshareScreen();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twindow: {\n\t\t\t\t\tlabel: \"Pick a window\",\n\t\t\t\t\tclassName: \"btn-success\",\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\tcapture = \"window\";\n\t\t\t\t\t\tshareScreen();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonEscape: function() {\n\t\t\t\t$('#desc').removeAttr('disabled', true);\n\t\t\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t\t\t$('#roomid').removeAttr('disabled', true);\n\t\t\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tshareScreen();\n\t}\n}\n\nfunction shareScreen() {\n\t// Create a new room\n\tvar desc = $('#desc').val();\n\trole = \"publisher\";\n\tvar create = {\n\t\trequest: \"create\",\n\t\tdescription: desc,\n\t\tbitrate: 500000,\n\t\tpublishers: 1\n\t};\n\tscreentest.send({ message: create, success: function(result) {\n\t\tvar event = result[\"videoroom\"];\n\t\tJanus.debug(\"Event: \" + event);\n\t\tif(event) {\n\t\t\t// Our own screen sharing session has been created, join it\n\t\t\troom = result[\"room\"];\n\t\t\tJanus.log(\"Screen sharing session created: \" + room);\n\t\t\tmyusername = randomString(12);\n\t\t\tvar register = {\n\t\t\t\trequest: \"join\",\n\t\t\t\troom: room,\n\t\t\t\tptype: \"publisher\",\n\t\t\t\tdisplay: myusername\n\t\t\t};\n\t\t\tscreentest.send({ message: register });\n\t\t}\n\t}});\n}\n\nfunction checkEnterJoin(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tjoinScreen();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction joinScreen() {\n\t// Join an existing screen sharing session\n\t$('#desc').attr('disabled', true);\n\t$('#create').attr('disabled', true).unbind('click');\n\t$('#roomid').attr('disabled', true);\n\t$('#join').attr('disabled', true).unbind('click');\n\tvar roomid = $('#roomid').val();\n\tif(isNaN(roomid)) {\n\t\tbootbox.alert(\"Session identifiers are numeric only\");\n\t\t$('#desc').removeAttr('disabled', true);\n\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t$('#roomid').removeAttr('disabled', true);\n\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\treturn;\n\t}\n\troom = parseInt(roomid);\n\trole = \"listener\";\n\tmyusername = randomString(12);\n\tvar register = {\n\t\trequest: \"join\",\n\t\troom: room,\n\t\tptype: \"publisher\",\n\t\tdisplay: myusername\n\t};\n\tscreentest.send({ message: register });\n}\n\nfunction newRemoteFeed(id, display) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a listener\n\tsource = id;\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar listen = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: room,\n\t\t\t\t\tptype: \"listener\",\n\t\t\t\t\tfeed: id\n\t\t\t\t};\n\t\t\t\tremoteFeed.send({ message: listen });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (listener) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tif(!spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('#screencapture');\n\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + id + \" (\" + display + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#screenmenu').hide();\n\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: room };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tif($('#screenvideo').length === 0) {\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered hide\" id=\"screenvideo\" width=\"100%\" height=\"100%\" playsinline/>');\n\t\t\t\t\t$('#screenvideo').get(0).volume = 0;\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#screenvideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t$('#screenvideo').removeClass('hide');\n\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#screenvideo').get(0), stream);\n\t\t\t\t$(\"#screenvideo\").get(0).play();\n\t\t\t\t$(\"#screenvideo\").get(0).volume = 1;\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\tif(spinner)\n\t\t\t\t\tspinner.stop();\n\t\t\t\tspinner = null;\n\t\t\t}\n\t\t});\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar streaming = null;\nvar opaqueId = \"streamingtest-\"+Janus.randomString(12);\n\nvar bitrateTimer = null;\nvar spinner = null;\n\nvar simulcastStarted = false, svcStarted = false;\n\nvar selectedStream = null;\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to Streaming plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.streaming\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tstreaming = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + streaming.getPlugin() + \", id=\" + streaming.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup streaming session\n\t\t\t\t\t\t\t\t\t$('#update-streams').click(updateStreamsList);\n\t\t\t\t\t\t\t\t\tupdateStreamsList();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t\t$('#streamslist').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t$('#watch').attr('disabled', true).unbind('click');\n\t\t\t\t\t\t\t\t\t\t\t$('#start').attr('disabled', true).html(\"Bye\").unbind('click');\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin... \", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"status\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar status = result[\"status\"];\n\t\t\t\t\t\t\t\t\t\t\tif(status === 'starting')\n\t\t\t\t\t\t\t\t\t\t\t\t$('#status').removeClass('hide').text(\"Starting, please wait...\").show();\n\t\t\t\t\t\t\t\t\t\t\telse if(status === 'started')\n\t\t\t\t\t\t\t\t\t\t\t\t$('#status').removeClass('hide').text(\"Started\").show();\n\t\t\t\t\t\t\t\t\t\t\telse if(status === 'stopped')\n\t\t\t\t\t\t\t\t\t\t\t\tstopStream();\n\t\t\t\t\t\t\t\t\t\t} else if(msg[\"streaming\"] === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Is simulcast in place?\n\t\t\t\t\t\t\t\t\t\t\tvar substream = result[\"substream\"];\n\t\t\t\t\t\t\t\t\t\t\tvar temporal = result[\"temporal\"];\n\t\t\t\t\t\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!simulcastStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcastStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\taddSimulcastButtons();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\tupdateSimulcastButtons(substream, temporal);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Is VP9/SVC in place?\n\t\t\t\t\t\t\t\t\t\t\tvar spatial = result[\"spatial_layer\"];\n\t\t\t\t\t\t\t\t\t\t\ttemporal = result[\"temporal_layer\"];\n\t\t\t\t\t\t\t\t\t\t\tif((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!svcStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsvcStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\taddSvcButtons();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\tupdateSvcButtons(spatial, temporal);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\tstopStream();\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tvar stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1);\n\t\t\t\t\t\t\t\t\t\t// Offer from the plugin, let's answer\n\t\t\t\t\t\t\t\t\t\tstreaming.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t// We want recvonly audio/video and, if negotiated, datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false, data: true },\n\t\t\t\t\t\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"start\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\tstreaming.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#watch').html(\"Stop\").removeAttr('disabled').click(stopStream);\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#remotevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#stream').append('<video class=\"rounded centered hide\" id=\"remotevideo\" width=\"100%\" height=\"100%\" playsinline/>');\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').get(0).volume = 0;\n\t\t\t\t\t\t\t\t\t\t// Show the stream and hide the spinner when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0)\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#remotevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").get(0).play();\n\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").get(0).volume = 1;\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#stream .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#stream').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#stream .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif(videoTracks && videoTracks.length &&\n\t\t\t\t\t\t\t\t\t\t\t(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" ||\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\")) {\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\tvar bitrate = streaming.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#stream').append(\n\t\t\t\t\t\t\t\t\t\t'<input class=\"form-control\" type=\"text\" id=\"datarecv\" disabled></input>'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t$('#datarecv').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#remotevideo').remove();\n\t\t\t\t\t\t\t\t\t$('#datarecv').remove();\n\t\t\t\t\t\t\t\t\t$('.no-video-container').remove();\n\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t$('#simulcast').remove();\n\t\t\t\t\t\t\t\t\t$('#metadata').empty();\n\t\t\t\t\t\t\t\t\t$('#info').addClass('hide').hide();\n\t\t\t\t\t\t\t\t\tsimulcastStarted = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction updateStreamsList() {\n\t$('#update-streams').unbind('click').addClass('fa-spin');\n\tvar body = { request: \"list\" };\n\tJanus.debug(\"Sending message:\", body);\n\tstreaming.send({ message: body, success: function(result) {\n\t\tsetTimeout(function() {\n\t\t\t$('#update-streams').removeClass('fa-spin').click(updateStreamsList);\n\t\t}, 500);\n\t\tif(!result) {\n\t\t\tbootbox.alert(\"Got no response to our query for available streams\");\n\t\t\treturn;\n\t\t}\n\t\tif(result[\"list\"]) {\n\t\t\t$('#streams').removeClass('hide').show();\n\t\t\t$('#streamslist').empty();\n\t\t\t$('#watch').attr('disabled', true).unbind('click');\n\t\t\tvar list = result[\"list\"];\n\t\t\tJanus.log(\"Got a list of available streams\");\n\t\t\tif(list && Array.isArray(list)) {\n\t\t\t\tlist.sort(function(a, b) {\n\t\t\t\t\tif(!a || a.id < (b ? b.id : 0))\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\tif(!b || b.id < (a ? a.id : 0))\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\t\t\tJanus.debug(list);\n\t\t\tfor(var mp in list) {\n\t\t\t\tJanus.debug(\"  >> [\" + list[mp][\"id\"] + \"] \" + list[mp][\"description\"] + \" (\" + list[mp][\"type\"] + \")\");\n\t\t\t\t$('#streamslist').append(\"<li><a href='#' id='\" + list[mp][\"id\"] + \"'>\" + list[mp][\"description\"] + \" (\" + list[mp][\"type\"] + \")\" + \"</a></li>\");\n\t\t\t}\n\t\t\t$('#streamslist a').unbind('click').click(function() {\n\t\t\t\tselectedStream = $(this).attr(\"id\");\n\t\t\t\t$('#streamset').html($(this).html()).parent().removeClass('open');\n\t\t\t\treturn false;\n\n\t\t\t});\n\t\t\t$('#watch').removeAttr('disabled').unbind('click').click(startStream);\n\t\t}\n\t}});\n}\n\nfunction getStreamInfo() {\n\t$('#metadata').empty();\n\t$('#info').addClass('hide').hide();\n\tif(!selectedStream)\n\t\treturn;\n\t// Send a request for more info on the mountpoint we subscribed to\n\tvar body = { request: \"info\", id: parseInt(selectedStream) || selectedStream };\n\tstreaming.send({ message: body, success: function(result) {\n\t\tif(result && result.info && result.info.metadata) {\n\t\t\t$('#metadata').html(result.info.metadata);\n\t\t\t$('#info').removeClass('hide').show();\n\t\t}\n\t}});\n}\n\nfunction startStream() {\n\tJanus.log(\"Selected video id #\" + selectedStream);\n\tif(!selectedStream) {\n\t\tbootbox.alert(\"Select a stream from the list\");\n\t\treturn;\n\t}\n\t$('#streamset').attr('disabled', true);\n\t$('#streamslist').attr('disabled', true);\n\t$('#watch').attr('disabled', true).unbind('click');\n\tvar body = { request: \"watch\", id: parseInt(selectedStream) || selectedStream};\n\tstreaming.send({ message: body });\n\t// No remote video yet\n\t$('#stream').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\tif(spinner == null) {\n\t\tvar target = document.getElementById('stream');\n\t\tspinner = new Spinner({top:100}).spin(target);\n\t} else {\n\t\tspinner.spin();\n\t}\n\t// Get some more info for the mountpoint to display, if any\n\tgetStreamInfo();\n}\n\nfunction stopStream() {\n\t$('#watch').attr('disabled', true).unbind('click');\n\tvar body = { request: \"stop\" };\n\tstreaming.send({ message: body });\n\tstreaming.hangup();\n\t$('#streamset').removeAttr('disabled');\n\t$('#streamslist').removeAttr('disabled');\n\t$('#watch').html(\"Watch or Listen\").removeAttr('disabled').unbind('click').click(startStream);\n\t$('#status').empty().hide();\n\t$('#bitrate').attr('disabled', true);\n\t$('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n\t$('#curbitrate').hide();\n\tif(bitrateTimer)\n\t\tclearInterval(bitrateTimer);\n\tbitrateTimer = null;\n\t$('#curres').empty().hide();\n\t$('#simulcast').remove();\n\tsimulcastStarted = false;\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons() {\n\t$('#curres').parent().append(\n\t\t'<div id=\"simulcast\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>');\n\t// Enable the simulcast selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 1 }});\n\t\t});\n\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 2 }});\n\t\t});\n\t$('#tl-0').parent().removeClass('hide');\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(substream, temporal) {\n\t// Check the substream\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n\n// Helpers to create SVC-related UI for a new viewer\nfunction addSvcButtons() {\n\tif($('#svc').length > 0)\n\t\treturn;\n\t$('#curres').parent().append(\n\t\t'<div id=\"svc\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal resolution\" style=\"width: 50%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to low resolution\" style=\"width: 50%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2 (high FPS)\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1 (medium FPS)\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0 (low FPS)\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\t// Enable the SVC selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (low resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", spatial_layer: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (normal resolution)\", null, {timeOut: 2000});\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", spatial_layer: 1 }});\n\t\t});\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 2 }});\n\t\t});\n}\n\nfunction updateSvcButtons(spatial, temporal) {\n\t// Check the spatial layer\n\tif(spatial === 0) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (lower resolution)\", null, {timeOut: 2000});\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(spatial === 1) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (normal resolution)\", null, {timeOut: 2000});\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar textroom = null;\nvar opaqueId = \"textroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar participants = {}\nvar transactions = {}\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to TextRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.textroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\ttextroom = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + textroom.getPlugin() + \", id=\" + textroom.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup the DataChannel\n\t\t\t\t\t\t\t\t\tvar body = { request: \"setup\" };\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Sending message:\", body);\n\t\t\t\t\t\t\t\t\ttextroom.send({ message: body });\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t// Answer\n\t\t\t\t\t\t\t\t\t\ttextroom.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audio: false, video: false, data: true },\t// We only use datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"ack\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\ttextroom.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t// Prompt for a display name to join the default room\n\t\t\t\t\t\t\t\t\t$('#roomjoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t//~ $('#datarecv').val(data);\n\t\t\t\t\t\t\t\t\tvar json = JSON.parse(data);\n\t\t\t\t\t\t\t\t\tvar transaction = json[\"transaction\"];\n\t\t\t\t\t\t\t\t\tif(transactions[transaction]) {\n\t\t\t\t\t\t\t\t\t\t// Someone was waiting for this\n\t\t\t\t\t\t\t\t\t\ttransactions[transaction](json);\n\t\t\t\t\t\t\t\t\t\tdelete transactions[transaction];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar what = json[\"textroom\"];\n\t\t\t\t\t\t\t\t\tif(what === \"message\") {\n\t\t\t\t\t\t\t\t\t\t// Incoming message: public or private?\n\t\t\t\t\t\t\t\t\t\tvar msg = json[\"text\"];\n\t\t\t\t\t\t\t\t\t\tmsg = msg.replace(new RegExp('<', 'g'), '&lt');\n\t\t\t\t\t\t\t\t\t\tmsg = msg.replace(new RegExp('>', 'g'), '&gt');\n\t\t\t\t\t\t\t\t\t\tvar from = json[\"from\"];\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\tvar whisper = json[\"whisper\"];\n\t\t\t\t\t\t\t\t\t\tif(whisper === true) {\n\t\t\t\t\t\t\t\t\t\t\t// Private message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <b>[whisper from ' + participants[from] + ']</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Public message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p>[' + dateString + '] <b>' + participants[from] + ':</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"announcement\") {\n\t\t\t\t\t\t\t\t\t\t// Room announcement\n\t\t\t\t\t\t\t\t\t\tvar msg = json[\"text\"];\n\t\t\t\t\t\t\t\t\t\tmsg = msg.replace(new RegExp('<', 'g'), '&lt');\n\t\t\t\t\t\t\t\t\t\tmsg = msg.replace(new RegExp('>', 'g'), '&gt');\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <i>' + msg + '</i>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"join\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody joined\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar display = json[\"display\"];\n\t\t\t\t\t\t\t\t\t\tparticipants[username] = display ? display : username;\n\t\t\t\t\t\t\t\t\t\tif(username !== myid && $('#rp' + username).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + username + '\" class=\"list-group-item\">' + participants[username] + '</li>');\n\t\t\t\t\t\t\t\t\t\t\t$('#rp' + username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' joined</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"leave\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody left\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' left</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t} else if(what === \"kicked\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody was kicked\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' was kicked from the room</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t\tif(username === myid) {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"You have been kicked from the room\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\tif(json[\"room\"] !== myroom)\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t// Room was destroyed, goodbye!\n\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#datasend').attr('disabled', true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tmyid = randomString(12);\n\t\tvar transaction = randomString(12);\n\t\tvar register = {\n\t\t\ttextroom: \"join\",\n\t\t\ttransaction: transaction,\n\t\t\troom: myroom,\n\t\t\tusername: myid,\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = username;\n\t\ttransactions[transaction] = function(response) {\n\t\t\tif(response[\"textroom\"] === \"error\") {\n\t\t\t\t// Something went wrong\n\t\t\t\tif(response[\"error_code\"] === 417) {\n\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.textroom.jcfg</code> \" +\n\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(response[\"error\"]);\n\t\t\t\t}\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We're in\n\t\t\t$('#roomjoin').hide();\n\t\t\t$('#room').removeClass('hide').show();\n\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t$('#chatroom').css('height', ($(window).height()-420)+\"px\");\n\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t// Any participants already in?\n\t\t\tconsole.log(\"Participants:\", response.participants);\n\t\t\tif(response.participants && response.participants.length > 0) {\n\t\t\t\tfor(var i in response.participants) {\n\t\t\t\t\tvar p = response.participants[i];\n\t\t\t\t\tparticipants[p.username] = p.display ? p.display : p.username;\n\t\t\t\t\tif(p.username !== myid && $('#rp' + p.username).length === 0) {\n\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t$('#list').append('<li id=\"rp' + p.username + '\" class=\"list-group-item\">' + participants[p.username] + '</li>');\n\t\t\t\t\t\t$('#rp' + p.username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[p.username] + ' joined</i></p>');\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttextroom.data({\n\t\t\ttext: JSON.stringify(register),\n\t\t\terror: function(reason) {\n\t\t\t\tbootbox.alert(reason);\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction sendPrivateMsg(username) {\n\tvar display = participants[username];\n\tif(!display)\n\t\treturn;\n\tbootbox.prompt(\"Private message to \" + display, function(result) {\n\t\tif(result && result !== \"\") {\n\t\t\tvar message = {\n\t\t\t\ttextroom: \"message\",\n\t\t\t\ttransaction: randomString(12),\n\t\t\t\troom: myroom,\n\t\t\t\tto: username,\n\t\t\t\ttext: result\n\t\t\t};\n\t\t\ttextroom.data({\n\t\t\t\ttext: JSON.stringify(message),\n\t\t\t\terror: function(reason) { bootbox.alert(reason); },\n\t\t\t\tsuccess: function() {\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + getDateString() + '] <b>[whisper to ' + display + ']</b> ' + result);\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\tvar message = {\n\t\ttextroom: \"message\",\n\t\ttransaction: randomString(12),\n\t\troom: myroom,\n \t\ttext: data,\n\t};\n\t// Note: messages are always acknowledged by default. This means that you'll\n\t// always receive a confirmation back that the message has been received by the\n\t// server and forwarded to the recipients. If you do not want this to happen,\n\t// just add an ack:false property to the message above, and server won't send\n\t// you a response (meaning you just have to hope it succeeded).\n\ttextroom.data({\n\t\ttext: JSON.stringify(message),\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); }\n\t});\n}\n\n// Helper to format times\nfunction getDateString(jsonDate) {\n\tvar when = new Date();\n\tif(jsonDate) {\n\t\twhen = new Date(Date.parse(jsonDate));\n\t}\n\tvar dateString =\n\t\t\t(\"0\" + when.getUTCHours()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCMinutes()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCSeconds()).slice(-2);\n\treturn dateString;\n}\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar videocall = null;\nvar opaqueId = \"videocalltest-\"+Janus.randomString(12);\n\nvar bitrateTimer = null;\nvar spinner = null;\n\nvar audioenabled = false;\nvar videoenabled = false;\n\nvar myusername = null;\nvar yourusername = null;\n\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar simulcastStarted = false;\n\n$(document).ready(function() {\n\t// Initialize the library (console debug enabled)\n\tJanus.init({debug: true, callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoCall plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videocall\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tvideocall = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + videocall.getPlugin() + \", id=\" + videocall.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videocall').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#login').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"  -- Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().unblock();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"list\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar list = result[\"list\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of registered peers:\", list);\n\t\t\t\t\t\t\t\t\t\t\tfor(var mp in list) {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + list[mp] + \"]\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(result[\"event\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar event = result[\"event\"];\n\t\t\t\t\t\t\t\t\t\t\tif(event === 'registered') {\n\t\t\t\t\t\t\t\t\t\t\t\tmyusername = result[\"username\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully registered as \" + myusername + \"!\");\n\t\t\t\t\t\t\t\t\t\t\t\t$('#youok').removeClass('hide').show().html(\"Registered as '\" + myusername + \"'\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Get a list of available peers, just for fun\n\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"list\" }});\n\t\t\t\t\t\t\t\t\t\t\t\t// Enable buttons to call now\n\t\t\t\t\t\t\t\t\t\t\t\t$('#phone').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').focus();\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'calling') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Waiting for the peer to answer...\");\n\t\t\t\t\t\t\t\t\t\t\t\t// TODO Any ringtone?\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Waiting for the peer to answer...\");\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'incomingcall') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Incoming call from \" + result[\"username\"] + \"!\");\n\t\t\t\t\t\t\t\t\t\t\t\tyourusername = result[\"username\"];\n\t\t\t\t\t\t\t\t\t\t\t\t// Notify user\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tincoming = bootbox.dialog({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: \"Incoming call from \" + yourusername + \"!\",\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: \"Incoming call\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tcloseButton: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttons: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Answer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"btn-success\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincoming = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').val(result[\"username\"]).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No media provided: by default, it's sendrecv for audio and video\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { data: true },\t// Let's negotiate data channels as well\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcast: doSimulcast,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"accept\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Hangup')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doHangup);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdanger: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Decline\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"btn-danger\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoHangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'accepted') {\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tvar peer = result[\"username\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif(!peer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Call started!\");\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(peer + \" accepted the call!\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tyourusername = peer;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// Video call can start\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep)\n\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Hangup')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doHangup);\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'update') {\n\t\t\t\t\t\t\t\t\t\t\t\t// An 'update' event may be used to provide renegotiation attempts\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(jsep.type === \"answer\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { data: true },\t// Let's negotiate data channels as well\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"set\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'hangup') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Call hung up by \" + result[\"username\"] + \" (\" + result[\"reason\"] + \")!\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Reset status\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tvideocall.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === \"simulcast\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// Is simulcast in place?\n\t\t\t\t\t\t\t\t\t\t\t\tvar substream = result[\"substream\"];\n\t\t\t\t\t\t\t\t\t\t\t\tvar temporal = result[\"temporal\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(!simulcastStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcastStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taddSimulcastButtons(result[\"videocodec\"] === \"vp8\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateSimulcastButtons(substream, temporal);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// FIXME Error?\n\t\t\t\t\t\t\t\t\t\tvar error = msg[\"error\"];\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(error);\n\t\t\t\t\t\t\t\t\t\tif(error.indexOf(\"already taken\") > 0) {\n\t\t\t\t\t\t\t\t\t\t\t// FIXME Use status codes...\n\t\t\t\t\t\t\t\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t\t\t\t\t\t\t\t$('#register').removeAttr('disabled').unbind('click').click(registerUsername);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// TODO Reset status\n\t\t\t\t\t\t\t\t\t\tvideocall.hangup();\n\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0)\n\t\t\t\t\t\t\t\t\t\t$('#videoleft').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(videocall.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tvideocall.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t// No remote video yet\n\t\t\t\t\t\t\t\t\t\t$('#videoright').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t\t\t\t\t\tif(spinner == null) {\n\t\t\t\t\t\t\t\t\t\t\tvar target = document.getElementById('videoright');\n\t\t\t\t\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videoleft .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videoleft').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videoleft .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#remotevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#videoright').append('<video class=\"rounded centered hide\" id=\"remotevideo\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$('#callee').removeClass('hide').html(yourusername).show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#remotevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videoright .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videoright').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videoright .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t// Enable audio/video buttons and bitrate limiter\n\t\t\t\t\t\t\t\t\taudioenabled = true;\n\t\t\t\t\t\t\t\t\tvideoenabled = true;\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Disable audio\").removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').removeAttr('disabled').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\taudioenabled = !audioenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(audioenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Disable audio\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Enable audio\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", audio: audioenabled }});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Disable video\").removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').removeAttr('disabled').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\tvideoenabled = !videoenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(videoenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Disable video\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Enable video\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", video: videoenabled }});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrateset').html(\"Bandwidth\");\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click').removeAttr('disabled').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html()).parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\tvar bitrate = videocall.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t$('#datarecv').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#myvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#remotevideo').remove();\n\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('.no-video-container').remove();\n\t\t\t\t\t\t\t\t\t$('#callee').empty().hide();\n\t\t\t\t\t\t\t\t\tyourusername = null;\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\tsimulcastStarted = false;\n\t\t\t\t\t\t\t\t\t$('#simulcast').remove();\n\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'peer')\n\t\t\tdoCall();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\t// Try a registration\n\t$('#username').attr('disabled', true);\n\t$('#register').attr('disabled', true).unbind('click');\n\tvar username = $('#username').val();\n\tif(username === \"\") {\n\t\tbootbox.alert(\"Insert a username to register (e.g., pippo)\");\n\t\t$('#username').removeAttr('disabled');\n\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\treturn;\n\t}\n\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\tbootbox.alert('Input is not alphanumeric');\n\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\treturn;\n\t}\n\tvar register = { request: \"register\", username: username };\n\tvideocall.send({ message: register });\n}\n\nfunction doCall() {\n\t// Call someone\n\t$('#peer').attr('disabled', true);\n\t$('#call').attr('disabled', true).unbind('click');\n\tvar username = $('#peer').val();\n\tif(username === \"\") {\n\t\tbootbox.alert(\"Insert a username to call (e.g., pluto)\");\n\t\t$('#peer').removeAttr('disabled');\n\t\t$('#call').removeAttr('disabled').click(doCall);\n\t\treturn;\n\t}\n\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\tbootbox.alert('Input is not alphanumeric');\n\t\t$('#peer').removeAttr('disabled').val(\"\");\n\t\t$('#call').removeAttr('disabled').click(doCall);\n\t\treturn;\n\t}\n\t// Call this user\n\tvideocall.createOffer(\n\t\t{\n\t\t\t// By default, it's sendrecv for audio and video...\n\t\t\tmedia: { data: true },\t// ... let's negotiate data channels as well\n\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\tsimulcast: doSimulcast,\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\tvar body = { request: \"call\", username: $('#peer').val() };\n\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error...\", error);\n\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t}\n\t\t});\n}\n\nfunction doHangup() {\n\t// Hangup a call\n\t$('#call').attr('disabled', true).unbind('click');\n\tvar hangup = { request: \"hangup\" };\n\tvideocall.send({ message: hangup });\n\tvideocall.hangup();\n\tyourusername = null;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel to your peer');\n\t\treturn;\n\t}\n\tvideocall.data({\n\t\ttext: data,\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); },\n\t});\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons(temporal) {\n\t$('#curres').parent().append(\n\t\t'<div id=\"simulcast\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>');\n\tif(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n\t\t// Chromium-based browsers only have two temporal layers\n\t\t$('#tl-2').remove();\n\t\t$('#tl-1').css('width', '50%');\n\t\t$('#tl-0').css('width', '50%');\n\t}\n\t// Enable the simulcast selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 1 }});\n\t\t});\n\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 2 }});\n\t\t});\n\tif(!temporal)\t// No temporal layer support\n\t\treturn;\n\t$('#tl-0').parent().removeClass('hide');\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(substream, temporal) {\n\t// Check the substream\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar sfutest = null;\nvar opaqueId = \"videoroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar mystream = null;\n// We use this other ID just to map our subscriptions to us\nvar mypvtid = null;\n\nvar feeds = [];\nvar bitrateTimer = [];\n\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar vcodec = (getQueryStringValue(\"vcodec\") !== \"\" ? getQueryStringValue(\"vcodec\") : null);\nvar doDtx = (getQueryStringValue(\"dtx\") === \"yes\" || getQueryStringValue(\"dtx\") === \"true\");\nvar subscriber_mode = (getQueryStringValue(\"subscriber-mode\") === \"yes\" || getQueryStringValue(\"subscriber-mode\") === \"true\");\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tsfutest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + sfutest.getPlugin() + \", id=\" + sfutest.getId() + \")\");\n\t\t\t\t\t\t\t\t\tJanus.log(\"  -- This is a publisher/manager\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\tif(!on)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t$('#publish').remove();\n\t\t\t\t\t\t\t\t\t// This controls allows us to override the global room bitrate cap\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrate a').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html() + '<span class=\"caret\"></span>').parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tsfutest.send({ message: { request: \"configure\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tmypvtid = msg[\"private_id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tif(subscriber_mode) {\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tpublishOwnFeed(true);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == leaving) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"unpublished\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has unpublished?\n\t\t\t\t\t\t\t\t\t\t\t\tvar unpublished = msg[\"unpublished\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + unpublished);\n\t\t\t\t\t\t\t\t\t\t\t\tif(unpublished === 'ok') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// That's us\n\t\t\t\t\t\t\t\t\t\t\t\t\tsfutest.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == unpublished) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 426) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.videoroom.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tsfutest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t// Check if any of the media we wanted to publish has\n\t\t\t\t\t\t\t\t\t\t// been rejected (e.g., wrong or unsupported codec)\n\t\t\t\t\t\t\t\t\t\tvar audio = msg[\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n\t\t\t\t\t\t\t\t\t\t\t// Audio has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our audio stream has been rejected, viewers won't hear us\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tvar video = msg[\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n\t\t\t\t\t\t\t\t\t\t\t// Video has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our video stream has been rejected, viewers won't see us\");\n\t\t\t\t\t\t\t\t\t\t\t// Hide the webcam video\n\t\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\tmystream = stream;\n\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t\t// Add a 'mute' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"mute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</button>');\n\t\t\t\t\t\t\t\t\t\t$('#mute').click(toggleMute);\n\t\t\t\t\t\t\t\t\t\t// Add an 'unpublish' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"unpublish\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\">Unpublish</button>');\n\t\t\t\t\t\t\t\t\t\t$('#unpublish').click(unpublishOwnFeed);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$('#publisher').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(sfutest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tsfutest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videolocal .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n\t\t\t\t\t\t\t\t\tmystream = null;\n\t\t\t\t\t\t\t\t\t$('#videolocal').html('<button id=\"publish\" class=\"btn btn-primary\">Publish</button>');\n\t\t\t\t\t\t\t\t\t$('#publish').click(function() { publishOwnFeed(true); });\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().addClass('hide');\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = {\n\t\t\trequest: \"join\",\n\t\t\troom: myroom,\n\t\t\tptype: \"publisher\",\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = username;\n\t\tsfutest.send({ message: register });\n\t}\n}\n\nfunction publishOwnFeed(useAudio) {\n\t// Publish our stream\n\t$('#publish').attr('disabled', true).unbind('click');\n\tsfutest.createOffer(\n\t\t{\n\t\t\t// Add data:true here if you want to publish datachannels as well\n\t\t\tmedia: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: true },\t// Publishers are sendonly\n\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\tsimulcast: doSimulcast,\n\t\t\tsimulcast2: doSimulcast2,\n\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t// If DTX is enabled, munge the SDP\n\t\t\t\tif(doDtx) {\n\t\t\t\t\tjsep.sdp = jsep.sdp\n\t\t\t\t\t\t.replace(\"useinbandfec=1\", \"useinbandfec=1;usedtx=1\")\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\tvar publish = { request: \"configure\", audio: useAudio, video: true };\n\t\t\t\t// You can force a specific codec to use when publishing by using the\n\t\t\t\t// audiocodec and videocodec properties, for instance:\n\t\t\t\t// \t\tpublish[\"audiocodec\"] = \"opus\"\n\t\t\t\t// to force Opus as the audio codec to use, or:\n\t\t\t\t// \t\tpublish[\"videocodec\"] = \"vp9\"\n\t\t\t\t// to force VP9 as the videocodec to use. In both case, though, forcing\n\t\t\t\t// a codec will only work if: (1) the codec is actually in the SDP (and\n\t\t\t\t// so the browser supports it), and (2) the codec is in the list of\n\t\t\t\t// allowed codecs in a room. With respect to the point (2) above,\n\t\t\t\t// refer to the text in janus.plugin.videoroom.jcfg for more details.\n\t\t\t\t// We allow people to specify a codec via query string, for demo purposes\n\t\t\t\tif(acodec)\n\t\t\t\t\tpublish[\"audiocodec\"] = acodec;\n\t\t\t\tif(vcodec)\n\t\t\t\t\tpublish[\"videocodec\"] = vcodec;\n\t\t\t\tsfutest.send({ message: publish, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\tif(useAudio) {\n\t\t\t\t\t publishOwnFeed(false);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t$('#publish').removeAttr('disabled').click(function() { publishOwnFeed(true); });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction toggleMute() {\n\tvar muted = sfutest.isAudioMuted();\n\tJanus.log((muted ? \"Unmuting\" : \"Muting\") + \" local stream...\");\n\tif(muted)\n\t\tsfutest.unmuteAudio();\n\telse\n\t\tsfutest.muteAudio();\n\tmuted = sfutest.isAudioMuted();\n\t$('#mute').html(muted ? \"Unmute\" : \"Mute\");\n}\n\nfunction unpublishOwnFeed() {\n\t// Unpublish our stream\n\t$('#unpublish').attr('disabled', true).unbind('click');\n\tvar unpublish = { request: \"unpublish\" };\n\tsfutest.send({ message: unpublish });\n}\n\nfunction newRemoteFeed(id, display, audio, video) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tremoteFeed.simulcastStarted = false;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar subscribe = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: myroom,\n\t\t\t\t\tptype: \"subscriber\",\n\t\t\t\t\tfeed: id,\n\t\t\t\t\tprivate_id: mypvtid\n\t\t\t\t};\n\t\t\t\t// In case you don't want to receive audio, video or data, even if the\n\t\t\t\t// publisher is sending them, set the 'offer_audio', 'offer_video' or\n\t\t\t\t// 'offer_data' properties to false (they're true by default), e.g.:\n\t\t\t\t// \t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t// For example, if the publisher is VP8 and this is Safari, let's avoid video\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\" &&\n\t\t\t\t\t\t(video === \"vp9\" || (video === \"vp8\" && !Janus.safariVp8))) {\n\t\t\t\t\tif(video)\n\t\t\t\t\t\tvideo = video.toUpperCase()\n\t\t\t\t\ttoastr.warning(\"Publisher is using \" + video + \", but Safari doesn't support it: disabling video\");\n\t\t\t\t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t}\n\t\t\t\tremoteFeed.videoCodec = video;\n\t\t\t\tremoteFeed.send({ message: subscribe });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (subscriber) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t} else if(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tfor(var i=1;i<6;i++) {\n\t\t\t\t\t\t\tif(!feeds[i]) {\n\t\t\t\t\t\t\t\tfeeds[i] = remoteFeed;\n\t\t\t\t\t\t\t\tremoteFeed.rfindex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoteFeed.rfid = msg[\"id\"];\n\t\t\t\t\t\tremoteFeed.rfdisplay = msg[\"display\"];\n\t\t\t\t\t\tif(!remoteFeed.spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('videoremote'+remoteFeed.rfindex);\n\t\t\t\t\t\t\tremoteFeed.spinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoteFeed.spinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t// Check if we got a simulcast-related event from this publisher\n\t\t\t\t\t\tvar substream = msg[\"substream\"];\n\t\t\t\t\t\tvar temporal = msg[\"temporal\"];\n\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\tif(!remoteFeed.simulcastStarted) {\n\t\t\t\t\t\t\t\tremoteFeed.simulcastStarted = true;\n\t\t\t\t\t\t\t\t// Add some new buttons\n\t\t\t\t\t\t\t\taddSimulcastButtons(remoteFeed.rfindex, remoteFeed.videoCodec === \"vp8\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\tupdateSimulcastButtons(remoteFeed.rfindex, substream, temporal);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\tvar stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t// Add data:true here if you want to subscribe to datachannels as well\n\t\t\t\t\t\t\t// (obviously only works if the publisher offered them in the first place)\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: myroom };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\ticeState: function(state) {\n\t\t\t\tJanus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n\t\t\t},\n\t\t\twebrtcState: function(on) {\n\t\t\t\tJanus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tJanus.debug(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n\t\t\t\tvar addButtons = false;\n\t\t\t\tif($('#remotevideo'+remoteFeed.rfindex).length === 0) {\n\t\t\t\t\taddButtons = true;\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t'<span class=\"label label-primary hide\" id=\"curres'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t'<span class=\"label label-info hide\" id=\"curbitrate'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#remotevideo\"+remoteFeed.rfindex).bind(\"playing\", function () {\n\t\t\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#remotevideo'+remoteFeed.rfindex).get(0), stream);\n\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t// No remote video\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).hide();\n\t\t\t\t\tif($('#videoremote'+remoteFeed.rfindex + ' .no-video-container').length === 0) {\n\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex+ ' .no-video-container').remove();\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t}\n\t\t\t\tif(!addButtons)\n\t\t\t\t\treturn;\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\tbitrateTimer[remoteFeed.rfindex] = setInterval(function() {\n\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\tvar bitrate = remoteFeed.getBitrate();\n\t\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).text(bitrate);\n\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t}, 1000);\n\t\t\t\t}\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#novideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curres'+remoteFeed.rfindex).remove();\n\t\t\t\tif(bitrateTimer[remoteFeed.rfindex])\n\t\t\t\t\tclearInterval(bitrateTimer[remoteFeed.rfindex]);\n\t\t\t\tbitrateTimer[remoteFeed.rfindex] = null;\n\t\t\t\tremoteFeed.simulcastStarted = false;\n\t\t\t\t$('#simulcast'+remoteFeed.rfindex).remove();\n\t\t\t}\n\t\t});\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons(feed, temporal) {\n\tvar index = feed;\n\t$('#remote'+index).parent().append(\n\t\t'<div id=\"simulcast'+index+'\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\tif(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n\t\t// Chromium-based browsers only have two temporal layers\n\t\t$('#tl'+index+'-2').remove();\n\t\t$('#tl'+index+'-1').css('width', '50%');\n\t\t$('#tl'+index+'-0').css('width', '50%');\n\t}\n\t// Enable the simulcast selection buttons\n\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 0 }});\n\t\t});\n\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 1 }});\n\t\t});\n\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 2 }});\n\t\t});\n\tif(!temporal)\t// No temporal layer support\n\t\treturn;\n\t$('#tl' + index + '-0').parent().removeClass('hide');\n\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 0 }});\n\t\t});\n\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 1 }});\n\t\t});\n\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(feed, substream, temporal) {\n\t// Check the substream\n\tvar index = feed;\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar sfutest = null;\nvar opaqueId = \"videoroomtest-\"+Janus.randomString(12);\n\nvar myroom = 5678;\t// VP9 SVC demo room\nvar myusername = null;\nvar myid = null;\nvar mystream = null;\n// We use this other ID just to map our subscriptions to us\nvar mypvtid = null;\n\nvar feeds = [];\nvar bitrateTimer = [];\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tsfutest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + sfutest.getPlugin() + \", id=\" + sfutest.getId() + \")\");\n\t\t\t\t\t\t\t\t\tJanus.log(\"  -- This is a publisher/manager\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\tif(!on)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t$('#publish').remove();\n\t\t\t\t\t\t\t\t\t// This controls allows us to override the global room bitrate cap\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrate a').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html() + '<span class=\"caret\"></span>').parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tsfutest.send({ message: { request: \"configure\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tmypvtid = msg[\"private_id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tpublishOwnFeed(true);\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == leaving) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"unpublished\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has unpublished?\n\t\t\t\t\t\t\t\t\t\t\t\tvar unpublished = msg[\"unpublished\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + unpublished);\n\t\t\t\t\t\t\t\t\t\t\t\tif(unpublished === 'ok') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// That's us\n\t\t\t\t\t\t\t\t\t\t\t\t\tsfutest.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == unpublished) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 426) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses for testing VP9 SVC) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.videoroom.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tsfutest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t// Check if any of the media we wanted to publish has\n\t\t\t\t\t\t\t\t\t\t// been rejected (e.g., wrong or unsupported codec)\n\t\t\t\t\t\t\t\t\t\tvar audio = msg[\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n\t\t\t\t\t\t\t\t\t\t\t// Audio has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our audio stream has been rejected, viewers won't hear us\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tvar video = msg[\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n\t\t\t\t\t\t\t\t\t\t\t// Video has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our video stream has been rejected, viewers won't see us\");\n\t\t\t\t\t\t\t\t\t\t\t// Hide the webcam video\n\t\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\tmystream = stream;\n\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t\t// Add a 'mute' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"mute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</button>');\n\t\t\t\t\t\t\t\t\t\t$('#mute').click(toggleMute);\n\t\t\t\t\t\t\t\t\t\t// Add an 'unpublish' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"unpublish\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\">Unpublish</button>');\n\t\t\t\t\t\t\t\t\t\t$('#unpublish').click(unpublishOwnFeed);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$('#publisher').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(sfutest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tsfutest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videolocal .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n\t\t\t\t\t\t\t\t\tmystream = null;\n\t\t\t\t\t\t\t\t\t$('#videolocal').html('<button id=\"publish\" class=\"btn btn-primary\">Publish</button>');\n\t\t\t\t\t\t\t\t\t$('#publish').click(function() { publishOwnFeed(true); });\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().addClass('hide');\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = {\n\t\t\trequest: \"join\",\n\t\t\troom: myroom,\n\t\t\tptype: \"publisher\",\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = username;\n\t\tsfutest.send({ message: register });\n\t}\n}\n\nfunction publishOwnFeed(useAudio) {\n\t// Publish our stream\n\t$('#publish').attr('disabled', true).unbind('click');\n\tsfutest.createOffer(\n\t\t{\n\t\t\t// Add data:true here if you want to publish datachannels as well\n\t\t\tmedia: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: true },\t// Publishers are sendonly\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\tvar publish = { request: \"configure\", audio: useAudio, video: true };\n\t\t\t\t// We're testing VP9 SVC, so just to make sure, let's force VP9\n\t\t\t\tpublish[\"videocodec\"] = \"vp9\"\n\t\t\t\tsfutest.send({ message: publish, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\tif(useAudio) {\n\t\t\t\t\t publishOwnFeed(false);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t$('#publish').removeAttr('disabled').click(function() { publishOwnFeed(true); });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction toggleMute() {\n\tvar muted = sfutest.isAudioMuted();\n\tJanus.log((muted ? \"Unmuting\" : \"Muting\") + \" local stream...\");\n\tif(muted)\n\t\tsfutest.unmuteAudio();\n\telse\n\t\tsfutest.muteAudio();\n\tmuted = sfutest.isAudioMuted();\n\t$('#mute').html(muted ? \"Unmute\" : \"Mute\");\n}\n\nfunction unpublishOwnFeed() {\n\t// Unpublish our stream\n\t$('#unpublish').attr('disabled', true).unbind('click');\n\tvar unpublish = { request: \"unpublish\" };\n\tsfutest.send({ message: unpublish });\n}\n\nfunction newRemoteFeed(id, display, audio, video) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar subscribe = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: myroom,\n\t\t\t\t\tptype: \"subscriber\",\n\t\t\t\t\tfeed: id,\n\t\t\t\t\tprivate_id: mypvtid\n\t\t\t\t};\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t// Safari doesn't support VP9\n\t\t\t\t\tif(video)\n\t\t\t\t\t\tvideo = video.toUpperCase()\n\t\t\t\t\ttoastr.warning(\"Publisher is using \" + video + \", but Safari doesn't support it: disabling video\");\n\t\t\t\t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t}\n\t\t\t\tremoteFeed.videoCodec = video;\n\t\t\t\tremoteFeed.send({ message: subscribe });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (subscriber) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t} else if(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tfor(var i=1;i<6;i++) {\n\t\t\t\t\t\t\tif(!feeds[i]) {\n\t\t\t\t\t\t\t\tfeeds[i] = remoteFeed;\n\t\t\t\t\t\t\t\tremoteFeed.rfindex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoteFeed.rfid = msg[\"id\"];\n\t\t\t\t\t\tremoteFeed.rfdisplay = msg[\"display\"];\n\t\t\t\t\t\tif(!remoteFeed.spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('videoremote'+remoteFeed.rfindex);\n\t\t\t\t\t\t\tremoteFeed.spinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoteFeed.spinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t// Check if we got an event on a SVC-related event from this publisher\n\t\t\t\t\t\tvar spatial = msg[\"spatial_layer\"];\n\t\t\t\t\t\tvar temporal = msg[\"temporal_layer\"];\n\t\t\t\t\t\tif((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\tif(!remoteFeed.svcStarted) {\n\t\t\t\t\t\t\t\tremoteFeed.svcStarted = true;\n\t\t\t\t\t\t\t\t// Add some new buttons\n\t\t\t\t\t\t\t\taddSvcButtons(remoteFeed.rfindex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\tupdateSvcButtons(remoteFeed.rfindex, spatial, temporal);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t// Add data:true here if you want to subscribe to datachannels as well\n\t\t\t\t\t\t\t// (obviously only works if the publisher offered them in the first place)\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: myroom };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\ticeState: function(state) {\n\t\t\t\tJanus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n\t\t\t},\n\t\t\twebrtcState: function(on) {\n\t\t\t\tJanus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tJanus.debug(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n\t\t\t\tvar addButtons = false;\n\t\t\t\tif($('#remotevideo'+remoteFeed.rfindex).length === 0) {\n\t\t\t\t\taddButtons = true;\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t'<span class=\"label label-primary hide\" id=\"curres'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t'<span class=\"label label-info hide\" id=\"curbitrate'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#remotevideo\"+remoteFeed.rfindex).bind(\"playing\", function () {\n\t\t\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#remotevideo'+remoteFeed.rfindex).get(0), stream);\n\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t// No remote video\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).hide();\n\t\t\t\t\tif($('#videoremote'+remoteFeed.rfindex + ' .no-video-container').length === 0) {\n\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex+ ' .no-video-container').remove();\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t}\n\t\t\t\tif(!addButtons)\n\t\t\t\t\treturn;\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\tbitrateTimer[remoteFeed.rfindex] = setInterval(function() {\n\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\tvar bitrate = remoteFeed.getBitrate();\n\t\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).text(bitrate);\n\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t}, 1000);\n\t\t\t\t}\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#novideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curres'+remoteFeed.rfindex).remove();\n\t\t\t\tif(bitrateTimer[remoteFeed.rfindex])\n\t\t\t\t\tclearInterval(bitrateTimer[remoteFeed.rfindex]);\n\t\t\t\tbitrateTimer[remoteFeed.rfindex] = null;\n\t\t\t\t$('#sl'+remoteFeed.rfindex+'-1').unbind('click');\n\t\t\t\t$('#sl'+remoteFeed.rfindex+'-0').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-2').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-1').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-0').unbind('click');\n\t\t\t\t$('#layers'+remoteFeed.rfindex).addClass('hide');\n\t\t\t}\n\t\t});\n}\n\n// Helpers to create SVC-related UI for a new viewer\nfunction addSvcButtons(feed) {\n\tvar index = feed;\n\t$('#remote'+index).parent().append(\n\t\t'<div id=\"layers'+index+'\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to high resolution\" style=\"width: 34%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal resolution\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to low resolution\" style=\"width: 33%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2 (high FPS)\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1 (medium FPS)\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0 (low FPS)\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\t// Enable the VP9 SVC selection buttons\n\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (low resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 0 }});\n\t\t});\n\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (normal resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 1 }});\n\t\t});\n\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (high resolution)\", null, {timeOut: 2000});\n\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 2 }});\n\t\t});\n\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 0 }});\n\t\t});\n\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 1 }});\n\t\t});\n\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 2 }});\n\t\t});\n}\n\nfunction updateSvcButtons(feed, spatial, temporal) {\n\t// Check the spatial layer\n\tvar index = feed;\n\tif(spatial === 0) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (lower resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(spatial === 1) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (normal resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(spatial === 2) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (high resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n"], "fixing_code": ["// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar mixertest = null;\nvar opaqueId = \"audiobridgetest-\"+Janus.randomString(12);\n\nvar spinner = null;\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar stereo = false;\nif(getQueryStringValue(\"stereo\") !== \"\")\n\tstereo = (getQueryStringValue(\"stereo\") === \"true\");\nvar mygroup = null;\t// Forwarding group, if required by the room\nif(getQueryStringValue(\"group\") !== \"\")\n\tmygroup = getQueryStringValue(\"group\");\nvar myusername = null;\nvar myid = null;\nvar webrtcUp = false;\nvar audioenabled = false;\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to AudioBridge plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.audiobridge\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tmixertest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + mixertest.getPlugin() + \", id=\" + mixertest.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#audiojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"audiobridge\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Successfully joined, negotiate WebRTC now\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"id\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!webrtcUp) {\n\t\t\t\t\t\t\t\t\t\t\t\t\twebrtcUp = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Publish our stream\n\t\t\t\t\t\t\t\t\t\t\t\t\tmixertest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: false },\t// This is an audio only room\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", muted: false };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any room participant?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = escapeXmlTags(list[f][\"display\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"roomchanged\") {\n\t\t\t\t\t\t\t\t\t\t\t// The user switched to a different room\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Moved to room \" + msg[\"room\"] + \", new ID: \" + myid);\n\t\t\t\t\t\t\t\t\t\t\t// Any room participant?\n\t\t\t\t\t\t\t\t\t\t\t$('#list').empty();\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = escapeXmlTags(list[f][\"display\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"participants\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"participants\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of participants:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = escapeXmlTags(list[f][\"display\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar setup = list[f][\"setup\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar muted = list[f][\"muted\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = list[f][\"spatial_position\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tif($('#rp' + id).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar slider = '';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider = '<span>[L <input id=\"sp' + id + '\" type=\"text\" style=\"width: 10%;\"/> R] </span>';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + id +'\" class=\"list-group-item\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tslider +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"absetup fa fa-chain-broken\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider({ min: 0, max: 100, step: 1, value: 50, handle: 'triangle', enabled: false });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#position').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(muted === true || muted === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.abmuted').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(setup === true || setup === \"true\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#rp' + id + ' > i.absetup').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(spatial !== null && spatial !== undefined)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#sp' + id).slider('setValue', spatial);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 485) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.audiobridge.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the participants has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Participant left: \" + leaving + \" (we have \" + $('#rp'+leaving).length + \" elements with ID #rp\" +leaving + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t$('#rp'+leaving).remove();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tmixertest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t// We're not going to attach the local audio stream\n\t\t\t\t\t\t\t\t\t$('#audiojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#roomaudio').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#mixedaudio').append('<audio class=\"rounded centered\" id=\"roomaudio\" width=\"100%\" height=\"100%\" autoplay/>');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#roomaudio').get(0), stream);\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t// Mute button\n\t\t\t\t\t\t\t\t\taudioenabled = true;\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\taudioenabled = !audioenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(audioenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Mute\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Unmute\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: { request: \"configure\", muted: !audioenabled }});\n\t\t\t\t\t\t\t\t\t\t}).removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t// Spatial position, if enabled\n\t\t\t\t\t\t\t\t\t$('#position').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.prompt(\"Insert new spatial position: [0-100] (0=left, 50=center, 100=right)\", function(result) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar spatial = parseInt(result);\n\t\t\t\t\t\t\t\t\t\t\t\tif(isNaN(spatial) || spatial < 0 || spatial > 100) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Invalid value\");\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tmixertest.send({ message: { request: \"configure\", spatial_position: spatial }});\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\twebrtcUp = false;\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#participant').empty().hide();\n\t\t\t\t\t\t\t\t\t$('#list').empty();\n\t\t\t\t\t\t\t\t\t$('#mixedaudio').empty();\n\t\t\t\t\t\t\t\t\t$('#room').hide();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = { request: \"join\", room: myroom, display: username };\n\t\tmyusername = escapeXmlTags(username);\n\t\t// Check if we need to join using G.711 instead of (default) Opus\n\t\tif(acodec === 'opus' || acodec === 'pcmu' || acodec === 'pcma')\n\t\t\tregister.codec = acodec;\n\t\t// If the room uses forwarding groups, this is how we state ours\n\t\tif(mygroup)\n\t\t\tregister[\"group\"] = mygroup;\n\t\t// Send the message\n\t\tmixertest.send({ message: register });\n\t}\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar recordplay = null;\nvar opaqueId = \"recordplaytest-\"+Janus.randomString(12);\n\nvar spinner = null;\nvar bandwidth = 1024 * 1024;\n\nvar myname = null;\nvar recording = false;\nvar playing = false;\nvar recordingId = null;\nvar selectedRecording = null;\nvar selectedRecordingInfo = null;\n\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar vcodec = (getQueryStringValue(\"vcodec\") !== \"\" ? getQueryStringValue(\"vcodec\") : null);\nvar vprofile = (getQueryStringValue(\"vprofile\") !== \"\" ? getQueryStringValue(\"vprofile\") : null);\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar recordData = (getQueryStringValue(\"data\") !== \"\" ? getQueryStringValue(\"data\") : null);\nif(recordData !== \"text\" && recordData !== \"binary\")\n\trecordData = null;\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to Record&Play plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.recordplay\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\trecordplay = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + recordplay.getPlugin() + \", id=\" + recordplay.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the name prompt\n\t\t\t\t\t\t\t\t\t$('#recordplay').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"  -- Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().unblock();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"status\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar event = result[\"status\"];\n\t\t\t\t\t\t\t\t\t\t\tif(event === 'preparing' || event === 'refreshing') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Preparing the recording playout\");\n\t\t\t\t\t\t\t\t\t\t\t\trecordplay.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false, data: true },\t// We want recvonly audio/video\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"start\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecordplay.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tif(result[\"warning\"])\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(result[\"warning\"]);\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'recording') {\n\t\t\t\t\t\t\t\t\t\t\t\t// Got an ANSWER to our recording OFFER\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep)\n\t\t\t\t\t\t\t\t\t\t\t\t\trecordplay.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\tvar id = result[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif(id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"The ID of the current recording is \" + id);\n\t\t\t\t\t\t\t\t\t\t\t\t\trecordingId = id;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'playing') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Playout has started!\");\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'stopped') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Session has stopped!\");\n\t\t\t\t\t\t\t\t\t\t\t\tvar id = result[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif(recordingId) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(recordingId !== id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"Not a stop to our recording?\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Recording completed! Check the list of recordings to replay it.\");\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(selectedRecording) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(selectedRecording !== id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"Not a stop to our playout?\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t\t\t\trecordingId = null;\n\t\t\t\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t\t\t\trecordplay.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// FIXME Error?\n\t\t\t\t\t\t\t\t\t\tvar error = msg[\"error\"];\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(error);\n\t\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t\trecordplay.hangup();\n\t\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tif(playing === true)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#videotitle').html(\"Recording...\");\n\t\t\t\t\t\t\t\t\t$('#stop').unbind('click').click(stop);\n\t\t\t\t\t\t\t\t\t$('#video').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#thevideo').length === 0)\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered\" id=\"thevideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#thevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#thevideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(recordplay.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\trecordplay.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videobox .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videobox .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tif(playing === false)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tif($('#thevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videotitle').html(selectedRecordingInfo);\n\t\t\t\t\t\t\t\t\t\t$('#stop').unbind('click').click(stop);\n\t\t\t\t\t\t\t\t\t\t$('#video').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered hide\" id=\"thevideo\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t\t\t\t\t\t// No remote video yet\n\t\t\t\t\t\t\t\t\t\t$('#videobox').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t\t\t\t\t\tif(spinner == null) {\n\t\t\t\t\t\t\t\t\t\t\tvar target = document.getElementById('videobox');\n\t\t\t\t\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif($('#curres').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"label label-primary\" id=\"curres' +'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"label label-info\" id=\"curbw' +'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t\t\t\t\t\t\t$(\"#video\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').text(width + 'x' + height);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\trecordplay.bitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\t\tvar bitrate = recordplay.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curbw').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t\tvar video = $('#thevideo').get(0);\n\t\t\t\t\t\t\t\t\t\t\t\tvar width = video.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\tvar height = video.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').text(width + 'x' + height);\n\t\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#thevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide');\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#thevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videobox .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videobox').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videobox .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#thevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#datafield').parent().removeClass('hide');\n\t\t\t\t\t\t\t\t\tif(playing === false) {\n\t\t\t\t\t\t\t\t\t\t// We're recording, use this field to send data\n\t\t\t\t\t\t\t\t\t\t$('#datafield').attr('placeholder', 'Write a message to record');\n\t\t\t\t\t\t\t\t\t\t$('#datafield').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\tif(playing === true)\n\t\t\t\t\t\t\t\t\t\t$('#datafield').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t// FIXME Reset status\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\tif(recordplay.bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(recordplay.bitrateTimer);\n\t\t\t\t\t\t\t\t\tdelete recordplay.bitrateTimer;\n\t\t\t\t\t\t\t\t\t$('#videobox').empty();\n\t\t\t\t\t\t\t\t\t$(\"#videobox\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#video').hide();\n\t\t\t\t\t\t\t\t\t$('#datafield').attr('disabled', true).attr('placeholder', '').val('');\n\t\t\t\t\t\t\t\t\t$('#datafield').parent().addClass('hide');\n\t\t\t\t\t\t\t\t\trecording = false;\n\t\t\t\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\t\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t\t\t\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\t\t\t\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\t\t\t\t\t\t\t$('#recset').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\t$('#recslist').removeAttr('disabled');\n\t\t\t\t\t\t\t\t\tupdateRecsList();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction sendData() {\n\tvar data = $('#datafield').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\trecordplay.data({\n\t\ttext: data,\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datafield').val(''); },\n\t});\n}\n\nfunction updateRecsList() {\n\t$('#list').unbind('click');\n\t$('#update-list').addClass('fa-spin');\n\tvar body = { request: \"list\" };\n\tJanus.debug(\"Sending message:\", body);\n\trecordplay.send({ message: body, success: function(result) {\n\t\tsetTimeout(function() {\n\t\t\t$('#list').click(updateRecsList);\n\t\t\t$('#update-list').removeClass('fa-spin');\n\t\t}, 500);\n\t\tif(!result) {\n\t\t\tbootbox.alert(\"Got no response to our query for available recordings\");\n\t\t\treturn;\n\t\t}\n\t\tif(result[\"list\"]) {\n\t\t\t$('#recslist').empty();\n\t\t\t$('#record').removeAttr('disabled').click(startRecording);\n\t\t\t$('#list').removeAttr('disabled').click(updateRecsList);\n\t\t\tvar list = result[\"list\"];\n\t\t\tlist.sort(function(a, b) {return (a[\"date\"] < b[\"date\"]) ? 1 : ((b[\"date\"] < a[\"date\"]) ? -1 : 0);} );\n\t\t\tJanus.debug(\"Got a list of available recordings:\", list);\n\t\t\tfor(var mp in list) {\n\t\t\t\tJanus.debug(\"  >> [\" + list[mp][\"id\"] + \"] \" + list[mp][\"name\"] + \" (\" + list[mp][\"date\"] + \")\");\n\t\t\t\t$('#recslist').append(\"<li><a href='#' id='\" + list[mp][\"id\"] + \"'>\" + escapeXmlTags(list[mp][\"name\"]) + \" [\" + list[mp][\"date\"] + \"]\" + \"</a></li>\");\n\t\t\t}\n\t\t\t$('#recslist a').unbind('click').click(function() {\n\t\t\t\tselectedRecording = $(this).attr(\"id\");\n\t\t\t\tselectedRecordingInfo = escapeXmlTags($(this).text());\n\t\t\t\t$('#recset').html($(this).html()).parent().removeClass('open');\n\t\t\t\t$('#play').removeAttr('disabled').click(startPlayout);\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\t}});\n}\n\nfunction startRecording() {\n\tif(recording)\n\t\treturn;\n\t// Start a recording\n\trecording = true;\n\tplaying = false;\n\tbootbox.prompt(\"Insert a name for the recording (e.g., John Smith says hello)\", function(result) {\n\t\tif(!result) {\n\t\t\trecording = false;\n\t\t\treturn;\n\t\t}\n\t\tmyname = result;\n\t\t$('#record').unbind('click').attr('disabled', true);\n\t\t$('#play').unbind('click').attr('disabled', true);\n\t\t$('#list').unbind('click').attr('disabled', true);\n\t\t$('#recset').attr('disabled', true);\n\t\t$('#recslist').attr('disabled', true);\n\t\t$('#pause-resume').removeClass('hide');\n\n\t\t// bitrate and keyframe interval can be set at any time:\n\t\t// before, after, during recording\n\t\trecordplay.send({\n\t\t\tmessage: {\n\t\t\t\trequest: 'configure',\n\t\t\t\t'video-bitrate-max': bandwidth,\t\t// a quarter megabit\n\t\t\t\t'video-keyframe-interval': 15000\t// 15 seconds\n\t\t\t}\n\t\t});\n\n\t\trecordplay.createOffer(\n\t\t\t{\n\t\t\t\t// By default, it's sendrecv for audio and video... no datachannels,\n\t\t\t\t// unless we've passed the query string argument to record those too\n\t\t\t\tmedia: { data: (recordData != null) },\n\t\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\t\tsimulcast: doSimulcast,\n\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\tvar body = { request: \"record\", name: myname };\n\t\t\t\t\t// We can try and force a specific codec, by telling the plugin what we'd prefer\n\t\t\t\t\t// For simplicity, you can set it via a query string (e.g., ?vcodec=vp9)\n\t\t\t\t\tif(acodec)\n\t\t\t\t\t\tbody[\"audiocodec\"] = acodec;\n\t\t\t\t\tif(vcodec)\n\t\t\t\t\t\tbody[\"videocodec\"] = vcodec;\n\t\t\t\t\t// For the codecs that support them (VP9 and H.264) you can specify a codec\n\t\t\t\t\t// profile as well (e.g., ?vprofile=2 for VP9, or ?vprofile=42e01f for H.264)\n\t\t\t\t\tif(vprofile)\n\t\t\t\t\t\tbody[\"videoprofile\"] = vprofile;\n\t\t\t\t\t// If we're going to send binary data, let's tell the plugin\n\t\t\t\t\tif(recordData === \"binary\")\n\t\t\t\t\t\tbody[\"textdata\"] = false;\n\t\t\t\t\trecordplay.send({ message: body, jsep: jsep });\n\t\t\t\t},\n\t\t\t\terror: function(error) {\n\t\t\t\t\tJanus.error(\"WebRTC error...\", error);\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\trecordplay.hangup();\n\t\t\t\t}\n\t\t\t});\n\t\t$('#pause-resume').unbind('click').on('click', function() {\n\t\t\tif($(this).text() === 'Pause') {\n\t\t\t\trecordplay.send({message: {request: 'pause'}});\n\t\t\t\t$(this).text('Resume');\n\t\t\t} else {\n\t\t\t\trecordplay.send({message: {request: 'resume'}});\n\t\t\t\t$(this).text('Pause');\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction startPlayout() {\n\tif(playing)\n\t\treturn;\n\t// Start a playout\n\trecording = false;\n\tplaying = true;\n\tif(!selectedRecording) {\n\t\tplaying = false;\n\t\treturn;\n\t}\n\t$('#record').unbind('click').attr('disabled', true);\n\t$('#play').unbind('click').attr('disabled', true);\n\t$('#list').unbind('click').attr('disabled', true);\n\t$('#recset').attr('disabled', true);\n\t$('#recslist').attr('disabled', true);\n\t$('#pause-resume').addClass('hide');\n\tvar play = { request: \"play\", id: parseInt(selectedRecording) };\n\trecordplay.send({ message: play });\n}\n\nfunction stop() {\n\t// Stop a recording/playout\n\t$('#stop').unbind('click');\n\tvar stop = { request: \"stop\" };\n\trecordplay.send({ message: stop });\n\trecordplay.hangup();\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\n\nvar janus = null;\nvar screentest = null;\nvar opaqueId = \"screensharingtest-\"+Janus.randomString(12);\n\nvar myusername = null;\nvar myid = null;\n\nvar capture = null;\nvar role = null;\nvar room = null;\nvar source = null;\n\nvar spinner = null;\n\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tscreentest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + screentest.getPlugin() + \", id=\" + screentest.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#screenmenu').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#createnow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#create').click(preShareScreen);\n\t\t\t\t\t\t\t\t\t$('#joinnow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#join').click(joinScreen);\n\t\t\t\t\t\t\t\t\t$('#desc').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa'\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().unblock();\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Your screen sharing session just started: pass the <b>\" + room + \"</b> session identifier to those who want to attend.\");\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Your screen sharing session just stopped.\", function() {\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t$('#session').html(room);\n\t\t\t\t\t\t\t\t\t\t\t$('#title').html(escapeXmlTags(msg[\"description\"]));\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tif(role === \"publisher\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// This is our session, publish our stream\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Negotiating WebRTC stream for our screen (capture \" + capture + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Safari expects a user gesture to share the screen: see issue #2455\n\t\t\t\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Safari requires a user gesture before the screen can be shared: close this dialog to do that. See issue #2455 for more details\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: capture, audioSend: true, videoRecv: false},\t// Screen sharing Publishers are sendonly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", audio: true, video: true };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Other browsers should be fine, we try to call getDisplayMedia directly\n\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.createOffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { video: capture, audioSend: true, videoRecv: false},\t// Screen sharing Publishers are sendonly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar publish = { request: \"configure\", audio: true, video: true };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscreentest.send({ message: publish, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t// We're just watching a session, any feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(role === \"listener\" && msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display);\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tif(role === \"listener\" && msg[\"leaving\"] === source) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The screen sharing session is over, the publisher left\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tscreentest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#screenmenu').hide();\n\t\t\t\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#screenvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered\" id=\"screenvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#screenvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tif(screentest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tscreentest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#screencapture').empty();\n\t\t\t\t\t\t\t\t\t$(\"#screencapture\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#room').hide();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnterShare(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tpreShareScreen();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction preShareScreen() {\n\tif(!Janus.isExtensionEnabled()) {\n\t\tbootbox.alert(\"You're using Chrome but don't have the screensharing extension installed: click <b><a href='https://chrome.google.com/webstore/detail/janus-webrtc-screensharin/hapfgfdkleiggjjpfpenajgdnfckjpaj' target='_blank'>here</a></b> to do so\", function() {\n\t\t\twindow.location.reload();\n\t\t});\n\t\treturn;\n\t}\n\t// Create a new room\n\t$('#desc').attr('disabled', true);\n\t$('#create').attr('disabled', true).unbind('click');\n\t$('#roomid').attr('disabled', true);\n\t$('#join').attr('disabled', true).unbind('click');\n\tif($('#desc').val() === \"\") {\n\t\tbootbox.alert(\"Please insert a description for the room\");\n\t\t$('#desc').removeAttr('disabled', true);\n\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t$('#roomid').removeAttr('disabled', true);\n\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\treturn;\n\t}\n\tcapture = \"screen\";\n\tif(navigator.mozGetUserMedia) {\n\t\t// Firefox needs a different constraint for screen and window sharing\n\t\tbootbox.dialog({\n\t\t\ttitle: \"Share whole screen or a window?\",\n\t\t\tmessage: \"Firefox handles screensharing in a different way: are you going to share the whole screen, or would you rather pick a single window/application to share instead?\",\n\t\t\tbuttons: {\n\t\t\t\tscreen: {\n\t\t\t\t\tlabel: \"Share screen\",\n\t\t\t\t\tclassName: \"btn-primary\",\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\tcapture = \"screen\";\n\t\t\t\t\t\tshareScreen();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twindow: {\n\t\t\t\t\tlabel: \"Pick a window\",\n\t\t\t\t\tclassName: \"btn-success\",\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\tcapture = \"window\";\n\t\t\t\t\t\tshareScreen();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonEscape: function() {\n\t\t\t\t$('#desc').removeAttr('disabled', true);\n\t\t\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t\t\t$('#roomid').removeAttr('disabled', true);\n\t\t\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tshareScreen();\n\t}\n}\n\nfunction shareScreen() {\n\t// Create a new room\n\tvar desc = $('#desc').val();\n\trole = \"publisher\";\n\tvar create = {\n\t\trequest: \"create\",\n\t\tdescription: desc,\n\t\tbitrate: 500000,\n\t\tpublishers: 1\n\t};\n\tscreentest.send({ message: create, success: function(result) {\n\t\tvar event = result[\"videoroom\"];\n\t\tJanus.debug(\"Event: \" + event);\n\t\tif(event) {\n\t\t\t// Our own screen sharing session has been created, join it\n\t\t\troom = result[\"room\"];\n\t\t\tJanus.log(\"Screen sharing session created: \" + room);\n\t\t\tmyusername = randomString(12);\n\t\t\tvar register = {\n\t\t\t\trequest: \"join\",\n\t\t\t\troom: room,\n\t\t\t\tptype: \"publisher\",\n\t\t\t\tdisplay: myusername\n\t\t\t};\n\t\t\tscreentest.send({ message: register });\n\t\t}\n\t}});\n}\n\nfunction checkEnterJoin(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tjoinScreen();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction joinScreen() {\n\t// Join an existing screen sharing session\n\t$('#desc').attr('disabled', true);\n\t$('#create').attr('disabled', true).unbind('click');\n\t$('#roomid').attr('disabled', true);\n\t$('#join').attr('disabled', true).unbind('click');\n\tvar roomid = $('#roomid').val();\n\tif(isNaN(roomid)) {\n\t\tbootbox.alert(\"Session identifiers are numeric only\");\n\t\t$('#desc').removeAttr('disabled', true);\n\t\t$('#create').removeAttr('disabled', true).click(preShareScreen);\n\t\t$('#roomid').removeAttr('disabled', true);\n\t\t$('#join').removeAttr('disabled', true).click(joinScreen);\n\t\treturn;\n\t}\n\troom = parseInt(roomid);\n\trole = \"listener\";\n\tmyusername = randomString(12);\n\tvar register = {\n\t\trequest: \"join\",\n\t\troom: room,\n\t\tptype: \"publisher\",\n\t\tdisplay: myusername\n\t};\n\tscreentest.send({ message: register });\n}\n\nfunction newRemoteFeed(id, display) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a listener\n\tsource = id;\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar listen = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: room,\n\t\t\t\t\tptype: \"listener\",\n\t\t\t\t\tfeed: id\n\t\t\t\t};\n\t\t\t\tremoteFeed.send({ message: listen });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (listener) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tif(!spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('#screencapture');\n\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + id + \" (\" + display + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#screenmenu').hide();\n\t\t\t\t\t\t$('#room').removeClass('hide').show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: room };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tif($('#screenvideo').length === 0) {\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#screencapture').append('<video class=\"rounded centered hide\" id=\"screenvideo\" width=\"100%\" height=\"100%\" playsinline/>');\n\t\t\t\t\t$('#screenvideo').get(0).volume = 0;\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#screenvideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t$('#screenvideo').removeClass('hide');\n\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#screenvideo').get(0), stream);\n\t\t\t\t$(\"#screenvideo\").get(0).play();\n\t\t\t\t$(\"#screenvideo\").get(0).volume = 1;\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\tif(spinner)\n\t\t\t\t\tspinner.stop();\n\t\t\t\tspinner = null;\n\t\t\t}\n\t\t});\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar streaming = null;\nvar opaqueId = \"streamingtest-\"+Janus.randomString(12);\n\nvar bitrateTimer = null;\nvar spinner = null;\n\nvar simulcastStarted = false, svcStarted = false;\n\nvar selectedStream = null;\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to Streaming plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.streaming\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tstreaming = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + streaming.getPlugin() + \", id=\" + streaming.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup streaming session\n\t\t\t\t\t\t\t\t\t$('#update-streams').click(updateStreamsList);\n\t\t\t\t\t\t\t\t\tupdateStreamsList();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t\t$('#streamslist').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t$('#watch').attr('disabled', true).unbind('click');\n\t\t\t\t\t\t\t\t\t\t\t$('#start').attr('disabled', true).html(\"Bye\").unbind('click');\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin... \", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"status\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar status = result[\"status\"];\n\t\t\t\t\t\t\t\t\t\t\tif(status === 'starting')\n\t\t\t\t\t\t\t\t\t\t\t\t$('#status').removeClass('hide').text(\"Starting, please wait...\").show();\n\t\t\t\t\t\t\t\t\t\t\telse if(status === 'started')\n\t\t\t\t\t\t\t\t\t\t\t\t$('#status').removeClass('hide').text(\"Started\").show();\n\t\t\t\t\t\t\t\t\t\t\telse if(status === 'stopped')\n\t\t\t\t\t\t\t\t\t\t\t\tstopStream();\n\t\t\t\t\t\t\t\t\t\t} else if(msg[\"streaming\"] === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Is simulcast in place?\n\t\t\t\t\t\t\t\t\t\t\tvar substream = result[\"substream\"];\n\t\t\t\t\t\t\t\t\t\t\tvar temporal = result[\"temporal\"];\n\t\t\t\t\t\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!simulcastStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcastStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\taddSimulcastButtons();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\tupdateSimulcastButtons(substream, temporal);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Is VP9/SVC in place?\n\t\t\t\t\t\t\t\t\t\t\tvar spatial = result[\"spatial_layer\"];\n\t\t\t\t\t\t\t\t\t\t\ttemporal = result[\"temporal_layer\"];\n\t\t\t\t\t\t\t\t\t\t\tif((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!svcStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsvcStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\taddSvcButtons();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\tupdateSvcButtons(spatial, temporal);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\tstopStream();\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tvar stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1);\n\t\t\t\t\t\t\t\t\t\t// Offer from the plugin, let's answer\n\t\t\t\t\t\t\t\t\t\tstreaming.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t// We want recvonly audio/video and, if negotiated, datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false, data: true },\n\t\t\t\t\t\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"start\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\tstreaming.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#watch').html(\"Stop\").removeAttr('disabled').click(stopStream);\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#remotevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#stream').append('<video class=\"rounded centered hide\" id=\"remotevideo\" width=\"100%\" height=\"100%\" playsinline/>');\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').get(0).volume = 0;\n\t\t\t\t\t\t\t\t\t\t// Show the stream and hide the spinner when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0)\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#remotevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").get(0).play();\n\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").get(0).volume = 1;\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#stream .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#stream').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#stream .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif(videoTracks && videoTracks.length &&\n\t\t\t\t\t\t\t\t\t\t\t(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" ||\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\")) {\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\tvar bitrate = streaming.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#stream').append(\n\t\t\t\t\t\t\t\t\t\t'<input class=\"form-control\" type=\"text\" id=\"datarecv\" disabled></input>'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t$('#datarecv').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#remotevideo').remove();\n\t\t\t\t\t\t\t\t\t$('#datarecv').remove();\n\t\t\t\t\t\t\t\t\t$('.no-video-container').remove();\n\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t$('#simulcast').remove();\n\t\t\t\t\t\t\t\t\t$('#metadata').empty();\n\t\t\t\t\t\t\t\t\t$('#info').addClass('hide').hide();\n\t\t\t\t\t\t\t\t\tsimulcastStarted = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction updateStreamsList() {\n\t$('#update-streams').unbind('click').addClass('fa-spin');\n\tvar body = { request: \"list\" };\n\tJanus.debug(\"Sending message:\", body);\n\tstreaming.send({ message: body, success: function(result) {\n\t\tsetTimeout(function() {\n\t\t\t$('#update-streams').removeClass('fa-spin').click(updateStreamsList);\n\t\t}, 500);\n\t\tif(!result) {\n\t\t\tbootbox.alert(\"Got no response to our query for available streams\");\n\t\t\treturn;\n\t\t}\n\t\tif(result[\"list\"]) {\n\t\t\t$('#streams').removeClass('hide').show();\n\t\t\t$('#streamslist').empty();\n\t\t\t$('#watch').attr('disabled', true).unbind('click');\n\t\t\tvar list = result[\"list\"];\n\t\t\tJanus.log(\"Got a list of available streams\");\n\t\t\tif(list && Array.isArray(list)) {\n\t\t\t\tlist.sort(function(a, b) {\n\t\t\t\t\tif(!a || a.id < (b ? b.id : 0))\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\tif(!b || b.id < (a ? a.id : 0))\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\t\t\tJanus.debug(list);\n\t\t\tfor(var mp in list) {\n\t\t\t\tJanus.debug(\"  >> [\" + list[mp][\"id\"] + \"] \" + list[mp][\"description\"] + \" (\" + list[mp][\"type\"] + \")\");\n\t\t\t\t$('#streamslist').append(\"<li><a href='#' id='\" + list[mp][\"id\"] + \"'>\" + escapeXmlTags(list[mp][\"description\"]) + \" (\" + list[mp][\"type\"] + \")\" + \"</a></li>\");\n\t\t\t}\n\t\t\t$('#streamslist a').unbind('click').click(function() {\n\t\t\t\tselectedStream = $(this).attr(\"id\");\n\t\t\t\t$('#streamset').html($(this).html()).parent().removeClass('open');\n\t\t\t\treturn false;\n\n\t\t\t});\n\t\t\t$('#watch').removeAttr('disabled').unbind('click').click(startStream);\n\t\t}\n\t}});\n}\n\nfunction getStreamInfo() {\n\t$('#metadata').empty();\n\t$('#info').addClass('hide').hide();\n\tif(!selectedStream)\n\t\treturn;\n\t// Send a request for more info on the mountpoint we subscribed to\n\tvar body = { request: \"info\", id: parseInt(selectedStream) || selectedStream };\n\tstreaming.send({ message: body, success: function(result) {\n\t\tif(result && result.info && result.info.metadata) {\n\t\t\t$('#metadata').html(escapeXmlTags(result.info.metadata));\n\t\t\t$('#info').removeClass('hide').show();\n\t\t}\n\t}});\n}\n\nfunction startStream() {\n\tJanus.log(\"Selected video id #\" + selectedStream);\n\tif(!selectedStream) {\n\t\tbootbox.alert(\"Select a stream from the list\");\n\t\treturn;\n\t}\n\t$('#streamset').attr('disabled', true);\n\t$('#streamslist').attr('disabled', true);\n\t$('#watch').attr('disabled', true).unbind('click');\n\tvar body = { request: \"watch\", id: parseInt(selectedStream) || selectedStream};\n\tstreaming.send({ message: body });\n\t// No remote video yet\n\t$('#stream').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\tif(spinner == null) {\n\t\tvar target = document.getElementById('stream');\n\t\tspinner = new Spinner({top:100}).spin(target);\n\t} else {\n\t\tspinner.spin();\n\t}\n\t// Get some more info for the mountpoint to display, if any\n\tgetStreamInfo();\n}\n\nfunction stopStream() {\n\t$('#watch').attr('disabled', true).unbind('click');\n\tvar body = { request: \"stop\" };\n\tstreaming.send({ message: body });\n\tstreaming.hangup();\n\t$('#streamset').removeAttr('disabled');\n\t$('#streamslist').removeAttr('disabled');\n\t$('#watch').html(\"Watch or Listen\").removeAttr('disabled').unbind('click').click(startStream);\n\t$('#status').empty().hide();\n\t$('#bitrate').attr('disabled', true);\n\t$('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n\t$('#curbitrate').hide();\n\tif(bitrateTimer)\n\t\tclearInterval(bitrateTimer);\n\tbitrateTimer = null;\n\t$('#curres').empty().hide();\n\t$('#simulcast').remove();\n\tsimulcastStarted = false;\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons() {\n\t$('#curres').parent().append(\n\t\t'<div id=\"simulcast\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>');\n\t// Enable the simulcast selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 1 }});\n\t\t});\n\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", substream: 2 }});\n\t\t});\n\t$('#tl-0').parent().removeClass('hide');\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(substream, temporal) {\n\t// Check the substream\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n\n// Helpers to create SVC-related UI for a new viewer\nfunction addSvcButtons() {\n\tif($('#svc').length > 0)\n\t\treturn;\n\t$('#curres').parent().append(\n\t\t'<div id=\"svc\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal resolution\" style=\"width: 50%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to low resolution\" style=\"width: 50%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2 (high FPS)\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1 (medium FPS)\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0 (low FPS)\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\t// Enable the SVC selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (low resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", spatial_layer: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (normal resolution)\", null, {timeOut: 2000});\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", spatial_layer: 1 }});\n\t\t});\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tstreaming.send({ message: { request: \"configure\", temporal_layer: 2 }});\n\t\t});\n}\n\nfunction updateSvcButtons(spatial, temporal) {\n\t// Check the spatial layer\n\tif(spatial === 0) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (lower resolution)\", null, {timeOut: 2000});\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(spatial === 1) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (normal resolution)\", null, {timeOut: 2000});\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar textroom = null;\nvar opaqueId = \"textroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar participants = {}\nvar transactions = {}\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to TextRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.textroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\ttextroom = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + textroom.getPlugin() + \", id=\" + textroom.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup the DataChannel\n\t\t\t\t\t\t\t\t\tvar body = { request: \"setup\" };\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Sending message:\", body);\n\t\t\t\t\t\t\t\t\ttextroom.send({ message: body });\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t// Answer\n\t\t\t\t\t\t\t\t\t\ttextroom.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audio: false, video: false, data: true },\t// We only use datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"ack\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\ttextroom.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t// Prompt for a display name to join the default room\n\t\t\t\t\t\t\t\t\t$('#roomjoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t//~ $('#datarecv').val(data);\n\t\t\t\t\t\t\t\t\tvar json = JSON.parse(data);\n\t\t\t\t\t\t\t\t\tvar transaction = json[\"transaction\"];\n\t\t\t\t\t\t\t\t\tif(transactions[transaction]) {\n\t\t\t\t\t\t\t\t\t\t// Someone was waiting for this\n\t\t\t\t\t\t\t\t\t\ttransactions[transaction](json);\n\t\t\t\t\t\t\t\t\t\tdelete transactions[transaction];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar what = json[\"textroom\"];\n\t\t\t\t\t\t\t\t\tif(what === \"message\") {\n\t\t\t\t\t\t\t\t\t\t// Incoming message: public or private?\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar from = json[\"from\"];\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\tvar whisper = json[\"whisper\"];\n\t\t\t\t\t\t\t\t\t\tif(whisper === true) {\n\t\t\t\t\t\t\t\t\t\t\t// Private message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <b>[whisper from ' + participants[from] + ']</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Public message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p>[' + dateString + '] <b>' + participants[from] + ':</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"announcement\") {\n\t\t\t\t\t\t\t\t\t\t// Room announcement\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <i>' + msg + '</i>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"join\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody joined\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar display = json[\"display\"];\n\t\t\t\t\t\t\t\t\t\tparticipants[username] = escapeXmlTags(display ? display : username);\n\t\t\t\t\t\t\t\t\t\tif(username !== myid && $('#rp' + username).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + username + '\" class=\"list-group-item\">' + participants[username] + '</li>');\n\t\t\t\t\t\t\t\t\t\t\t$('#rp' + username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' joined</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"leave\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody left\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' left</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t} else if(what === \"kicked\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody was kicked\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' was kicked from the room</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t\tif(username === myid) {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"You have been kicked from the room\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\tif(json[\"room\"] !== myroom)\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t// Room was destroyed, goodbye!\n\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#datasend').attr('disabled', true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tmyid = randomString(12);\n\t\tvar transaction = randomString(12);\n\t\tvar register = {\n\t\t\ttextroom: \"join\",\n\t\t\ttransaction: transaction,\n\t\t\troom: myroom,\n\t\t\tusername: myid,\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = escapeXmlTags(username);\n\t\ttransactions[transaction] = function(response) {\n\t\t\tif(response[\"textroom\"] === \"error\") {\n\t\t\t\t// Something went wrong\n\t\t\t\tif(response[\"error_code\"] === 417) {\n\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.textroom.jcfg</code> \" +\n\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(response[\"error\"]);\n\t\t\t\t}\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We're in\n\t\t\t$('#roomjoin').hide();\n\t\t\t$('#room').removeClass('hide').show();\n\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t$('#chatroom').css('height', ($(window).height()-420)+\"px\");\n\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t// Any participants already in?\n\t\t\tconsole.log(\"Participants:\", response.participants);\n\t\t\tif(response.participants && response.participants.length > 0) {\n\t\t\t\tfor(var i in response.participants) {\n\t\t\t\t\tvar p = response.participants[i];\n\t\t\t\t\tparticipants[p.username] = escapeXmlTags(p.display ? p.display : p.username);\n\t\t\t\t\tif(p.username !== myid && $('#rp' + p.username).length === 0) {\n\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t$('#list').append('<li id=\"rp' + p.username + '\" class=\"list-group-item\">' + participants[p.username] + '</li>');\n\t\t\t\t\t\t$('#rp' + p.username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[p.username] + ' joined</i></p>');\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttextroom.data({\n\t\t\ttext: JSON.stringify(register),\n\t\t\terror: function(reason) {\n\t\t\t\tbootbox.alert(reason);\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction sendPrivateMsg(username) {\n\tvar display = participants[username];\n\tif(!display)\n\t\treturn;\n\tbootbox.prompt(\"Private message to \" + display, function(result) {\n\t\tif(result && result !== \"\") {\n\t\t\tvar message = {\n\t\t\t\ttextroom: \"message\",\n\t\t\t\ttransaction: randomString(12),\n\t\t\t\troom: myroom,\n\t\t\t\tto: username,\n\t\t\t\ttext: result\n\t\t\t};\n\t\t\ttextroom.data({\n\t\t\t\ttext: JSON.stringify(message),\n\t\t\t\terror: function(reason) { bootbox.alert(reason); },\n\t\t\t\tsuccess: function() {\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + getDateString() + '] <b>[whisper to ' + display + ']</b> ' + result);\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\tvar message = {\n\t\ttextroom: \"message\",\n\t\ttransaction: randomString(12),\n\t\troom: myroom,\n \t\ttext: data,\n\t};\n\t// Note: messages are always acknowledged by default. This means that you'll\n\t// always receive a confirmation back that the message has been received by the\n\t// server and forwarded to the recipients. If you do not want this to happen,\n\t// just add an ack:false property to the message above, and server won't send\n\t// you a response (meaning you just have to hope it succeeded).\n\ttextroom.data({\n\t\ttext: JSON.stringify(message),\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); }\n\t});\n}\n\n// Helper to format times\nfunction getDateString(jsonDate) {\n\tvar when = new Date();\n\tif(jsonDate) {\n\t\twhen = new Date(Date.parse(jsonDate));\n\t}\n\tvar dateString =\n\t\t\t(\"0\" + when.getUTCHours()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCMinutes()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCSeconds()).slice(-2);\n\treturn dateString;\n}\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar videocall = null;\nvar opaqueId = \"videocalltest-\"+Janus.randomString(12);\n\nvar bitrateTimer = null;\nvar spinner = null;\n\nvar audioenabled = false;\nvar videoenabled = false;\n\nvar myusername = null;\nvar yourusername = null;\n\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar simulcastStarted = false;\n\n$(document).ready(function() {\n\t// Initialize the library (console debug enabled)\n\tJanus.init({debug: true, callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoCall plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videocall\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tvideocall = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + videocall.getPlugin() + \", id=\" + videocall.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videocall').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#login').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"  -- Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().unblock();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tvar result = msg[\"result\"];\n\t\t\t\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\t\t\t\tif(result[\"list\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar list = result[\"list\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of registered peers:\", list);\n\t\t\t\t\t\t\t\t\t\t\tfor(var mp in list) {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + list[mp] + \"]\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(result[\"event\"]) {\n\t\t\t\t\t\t\t\t\t\t\tvar event = result[\"event\"];\n\t\t\t\t\t\t\t\t\t\t\tif(event === 'registered') {\n\t\t\t\t\t\t\t\t\t\t\t\tmyusername = escapeXmlTags(result[\"username\"]);\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully registered as \" + myusername + \"!\");\n\t\t\t\t\t\t\t\t\t\t\t\t$('#youok').removeClass('hide').show().html(\"Registered as '\" + myusername + \"'\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Get a list of available peers, just for fun\n\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"list\" }});\n\t\t\t\t\t\t\t\t\t\t\t\t// Enable buttons to call now\n\t\t\t\t\t\t\t\t\t\t\t\t$('#phone').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').focus();\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'calling') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Waiting for the peer to answer...\");\n\t\t\t\t\t\t\t\t\t\t\t\t// TODO Any ringtone?\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"Waiting for the peer to answer...\");\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'incomingcall') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Incoming call from \" + result[\"username\"] + \"!\");\n\t\t\t\t\t\t\t\t\t\t\t\tyourusername = escapeXmlTags(result[\"username\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t// Notify user\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tincoming = bootbox.dialog({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: \"Incoming call from \" + yourusername + \"!\",\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: \"Incoming call\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tcloseButton: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttons: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Answer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"btn-success\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincoming = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').val(result[\"username\"]).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No media provided: by default, it's sendrecv for audio and video\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { data: true },\t// Let's negotiate data channels as well\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcast: doSimulcast,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"accept\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Hangup')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doHangup);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdanger: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Decline\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"btn-danger\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoHangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'accepted') {\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tvar peer = escapeXmlTags(result[\"username\"]);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!peer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Call started!\");\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(peer + \" accepted the call!\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tyourusername = peer;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// Video call can start\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep)\n\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Hangup')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doHangup);\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'update') {\n\t\t\t\t\t\t\t\t\t\t\t\t// An 'update' event may be used to provide renegotiation attempts\n\t\t\t\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(jsep.type === \"answer\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedia: { data: true },\t// Let's negotiate data channels as well\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"set\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === 'hangup') {\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Call hung up by \" + result[\"username\"] + \" (\" + result[\"reason\"] + \")!\");\n\t\t\t\t\t\t\t\t\t\t\t\t// Reset status\n\t\t\t\t\t\t\t\t\t\t\t\tbootbox.hideAll();\n\t\t\t\t\t\t\t\t\t\t\t\tvideocall.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t\t\t} else if(event === \"simulcast\") {\n\t\t\t\t\t\t\t\t\t\t\t\t// Is simulcast in place?\n\t\t\t\t\t\t\t\t\t\t\t\tvar substream = result[\"substream\"];\n\t\t\t\t\t\t\t\t\t\t\t\tvar temporal = result[\"temporal\"];\n\t\t\t\t\t\t\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(!simulcastStarted) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsimulcastStarted = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taddSimulcastButtons(result[\"videocodec\"] === \"vp8\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateSimulcastButtons(substream, temporal);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// FIXME Error?\n\t\t\t\t\t\t\t\t\t\tvar error = msg[\"error\"];\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(error);\n\t\t\t\t\t\t\t\t\t\tif(error.indexOf(\"already taken\") > 0) {\n\t\t\t\t\t\t\t\t\t\t\t// FIXME Use status codes...\n\t\t\t\t\t\t\t\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t\t\t\t\t\t\t\t$('#register').removeAttr('disabled').unbind('click').click(registerUsername);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// TODO Reset status\n\t\t\t\t\t\t\t\t\t\tvideocall.hangup();\n\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0)\n\t\t\t\t\t\t\t\t\t\t$('#videoleft').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(videocall.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tvideocall.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t// No remote video yet\n\t\t\t\t\t\t\t\t\t\t$('#videoright').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t\t\t\t\t\tif(spinner == null) {\n\t\t\t\t\t\t\t\t\t\t\tvar target = document.getElementById('videoright');\n\t\t\t\t\t\t\t\t\t\t\tspinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tspinner.spin();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videoleft .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videoleft').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videoleft .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a remote stream :::\", stream);\n\t\t\t\t\t\t\t\t\tvar addButtons = false;\n\t\t\t\t\t\t\t\t\tif($('#remotevideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\taddButtons = true;\n\t\t\t\t\t\t\t\t\t\t$('#videoright').append('<video class=\"rounded centered hide\" id=\"remotevideo\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t\t\t\t\t\t$(\"#remotevideo\").bind(\"playing\", function () {\n\t\t\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\tif(spinner)\n\t\t\t\t\t\t\t\t\t\t\t\tspinner.stop();\n\t\t\t\t\t\t\t\t\t\t\tspinner = null;\n\t\t\t\t\t\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$('#callee').removeClass('hide').html(yourusername).show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#remotevideo').get(0), stream);\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No remote video\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videoright .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videoright').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videoright .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#remotevideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(!addButtons)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t// Enable audio/video buttons and bitrate limiter\n\t\t\t\t\t\t\t\t\taudioenabled = true;\n\t\t\t\t\t\t\t\t\tvideoenabled = true;\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Disable audio\").removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').removeAttr('disabled').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\taudioenabled = !audioenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(audioenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Disable audio\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#toggleaudio').html(\"Enable audio\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", audio: audioenabled }});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Disable video\").removeClass(\"btn-success\").addClass(\"btn-danger\")\n\t\t\t\t\t\t\t\t\t\t\t.unbind('click').removeAttr('disabled').click(\n\t\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t\tvideoenabled = !videoenabled;\n\t\t\t\t\t\t\t\t\t\t\tif(videoenabled)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Disable video\").removeClass(\"btn-success\").addClass(\"btn-danger\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$('#togglevideo').html(\"Enable video\").removeClass(\"btn-danger\").addClass(\"btn-success\");\n\t\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", video: videoenabled }});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrateset').html(\"Bandwidth\");\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click').removeAttr('disabled').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html()).parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tvideocall.send({ message: { request: \"set\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t\t\t\t\t\t$('#curbitrate').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\tbitrateTimer = setInterval(function() {\n\t\t\t\t\t\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\t\t\t\t\t\tvar bitrate = videocall.getBitrate();\n\t\t\t\t\t\t\t\t\t\t\t$('#curbitrate').text(bitrate);\n\t\t\t\t\t\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\").get(0).videoWidth;\n\t\t\t\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\").get(0).videoHeight;\n\t\t\t\t\t\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t\t\t\t\t\t$('#curres').removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t$('#datarecv').val(data);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#myvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#remotevideo').remove();\n\t\t\t\t\t\t\t\t\t$(\"#videoleft\").parent().unblock();\n\t\t\t\t\t\t\t\t\t$('.no-video-container').remove();\n\t\t\t\t\t\t\t\t\t$('#callee').empty().hide();\n\t\t\t\t\t\t\t\t\tyourusername = null;\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\t$('#toggleaudio').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#togglevideo').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#bitrate').attr('disabled', true);\n\t\t\t\t\t\t\t\t\t$('#curbitrate').hide();\n\t\t\t\t\t\t\t\t\t$('#curres').hide();\n\t\t\t\t\t\t\t\t\tif(bitrateTimer)\n\t\t\t\t\t\t\t\t\t\tclearInterval(bitrateTimer);\n\t\t\t\t\t\t\t\t\tbitrateTimer = null;\n\t\t\t\t\t\t\t\t\t$('#waitingvideo').remove();\n\t\t\t\t\t\t\t\t\t$('#videos').hide();\n\t\t\t\t\t\t\t\t\tsimulcastStarted = false;\n\t\t\t\t\t\t\t\t\t$('#simulcast').remove();\n\t\t\t\t\t\t\t\t\t$('#peer').removeAttr('disabled').val('');\n\t\t\t\t\t\t\t\t\t$('#call').removeAttr('disabled').html('Call')\n\t\t\t\t\t\t\t\t\t\t.removeClass(\"btn-danger\").addClass(\"btn-success\")\n\t\t\t\t\t\t\t\t\t\t.unbind('click').click(doCall);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'peer')\n\t\t\tdoCall();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\t// Try a registration\n\t$('#username').attr('disabled', true);\n\t$('#register').attr('disabled', true).unbind('click');\n\tvar username = $('#username').val();\n\tif(username === \"\") {\n\t\tbootbox.alert(\"Insert a username to register (e.g., pippo)\");\n\t\t$('#username').removeAttr('disabled');\n\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\treturn;\n\t}\n\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\tbootbox.alert('Input is not alphanumeric');\n\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\treturn;\n\t}\n\tvar register = { request: \"register\", username: username };\n\tvideocall.send({ message: register });\n}\n\nfunction doCall() {\n\t// Call someone\n\t$('#peer').attr('disabled', true);\n\t$('#call').attr('disabled', true).unbind('click');\n\tvar username = $('#peer').val();\n\tif(username === \"\") {\n\t\tbootbox.alert(\"Insert a username to call (e.g., pluto)\");\n\t\t$('#peer').removeAttr('disabled');\n\t\t$('#call').removeAttr('disabled').click(doCall);\n\t\treturn;\n\t}\n\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\tbootbox.alert('Input is not alphanumeric');\n\t\t$('#peer').removeAttr('disabled').val(\"\");\n\t\t$('#call').removeAttr('disabled').click(doCall);\n\t\treturn;\n\t}\n\t// Call this user\n\tvideocall.createOffer(\n\t\t{\n\t\t\t// By default, it's sendrecv for audio and video...\n\t\t\tmedia: { data: true },\t// ... let's negotiate data channels as well\n\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\tsimulcast: doSimulcast,\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\tvar body = { request: \"call\", username: $('#peer').val() };\n\t\t\t\tvideocall.send({ message: body, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error...\", error);\n\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t}\n\t\t});\n}\n\nfunction doHangup() {\n\t// Hangup a call\n\t$('#call').attr('disabled', true).unbind('click');\n\tvar hangup = { request: \"hangup\" };\n\tvideocall.send({ message: hangup });\n\tvideocall.hangup();\n\tyourusername = null;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel to your peer');\n\t\treturn;\n\t}\n\tvideocall.data({\n\t\ttext: data,\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); },\n\t});\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons(temporal) {\n\t$('#curres').parent().append(\n\t\t'<div id=\"simulcast\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>');\n\tif(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n\t\t// Chromium-based browsers only have two temporal layers\n\t\t$('#tl-2').remove();\n\t\t$('#tl-1').css('width', '50%');\n\t\t$('#tl-0').css('width', '50%');\n\t}\n\t// Enable the simulcast selection buttons\n\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 0 }});\n\t\t});\n\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl-2').hasClass('btn-success'))\n\t\t\t\t$('#sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 1 }});\n\t\t});\n\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl-1').hasClass('btn-success'))\n\t\t\t\t$('#sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl-0').hasClass('btn-success'))\n\t\t\t\t$('#sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", substream: 2 }});\n\t\t});\n\tif(!temporal)\t// No temporal layer support\n\t\treturn;\n\t$('#tl-0').parent().removeClass('hide');\n\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 0 }});\n\t\t});\n\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl-2').hasClass('btn-success'))\n\t\t\t\t$('#tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 1 }});\n\t\t});\n\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl-1').hasClass('btn-success'))\n\t\t\t\t$('#tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl-0').hasClass('btn-success'))\n\t\t\t\t$('#tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tvideocall.send({ message: { request: \"set\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(substream, temporal) {\n\t// Check the substream\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar sfutest = null;\nvar opaqueId = \"videoroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar mystream = null;\n// We use this other ID just to map our subscriptions to us\nvar mypvtid = null;\n\nvar feeds = [];\nvar bitrateTimer = [];\n\nvar doSimulcast = (getQueryStringValue(\"simulcast\") === \"yes\" || getQueryStringValue(\"simulcast\") === \"true\");\nvar doSimulcast2 = (getQueryStringValue(\"simulcast2\") === \"yes\" || getQueryStringValue(\"simulcast2\") === \"true\");\nvar acodec = (getQueryStringValue(\"acodec\") !== \"\" ? getQueryStringValue(\"acodec\") : null);\nvar vcodec = (getQueryStringValue(\"vcodec\") !== \"\" ? getQueryStringValue(\"vcodec\") : null);\nvar doDtx = (getQueryStringValue(\"dtx\") === \"yes\" || getQueryStringValue(\"dtx\") === \"true\");\nvar subscriber_mode = (getQueryStringValue(\"subscriber-mode\") === \"yes\" || getQueryStringValue(\"subscriber-mode\") === \"true\");\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tsfutest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + sfutest.getPlugin() + \", id=\" + sfutest.getId() + \")\");\n\t\t\t\t\t\t\t\t\tJanus.log(\"  -- This is a publisher/manager\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\tif(!on)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t$('#publish').remove();\n\t\t\t\t\t\t\t\t\t// This controls allows us to override the global room bitrate cap\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrate a').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html() + '<span class=\"caret\"></span>').parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tsfutest.send({ message: { request: \"configure\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tmypvtid = msg[\"private_id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tif(subscriber_mode) {\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tpublishOwnFeed(true);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == leaving) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"unpublished\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has unpublished?\n\t\t\t\t\t\t\t\t\t\t\t\tvar unpublished = msg[\"unpublished\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + unpublished);\n\t\t\t\t\t\t\t\t\t\t\t\tif(unpublished === 'ok') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// That's us\n\t\t\t\t\t\t\t\t\t\t\t\t\tsfutest.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == unpublished) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 426) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.videoroom.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tsfutest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t// Check if any of the media we wanted to publish has\n\t\t\t\t\t\t\t\t\t\t// been rejected (e.g., wrong or unsupported codec)\n\t\t\t\t\t\t\t\t\t\tvar audio = msg[\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n\t\t\t\t\t\t\t\t\t\t\t// Audio has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our audio stream has been rejected, viewers won't hear us\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tvar video = msg[\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n\t\t\t\t\t\t\t\t\t\t\t// Video has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our video stream has been rejected, viewers won't see us\");\n\t\t\t\t\t\t\t\t\t\t\t// Hide the webcam video\n\t\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\tmystream = stream;\n\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t\t// Add a 'mute' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"mute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</button>');\n\t\t\t\t\t\t\t\t\t\t$('#mute').click(toggleMute);\n\t\t\t\t\t\t\t\t\t\t// Add an 'unpublish' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"unpublish\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\">Unpublish</button>');\n\t\t\t\t\t\t\t\t\t\t$('#unpublish').click(unpublishOwnFeed);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$('#publisher').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(sfutest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tsfutest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videolocal .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n\t\t\t\t\t\t\t\t\tmystream = null;\n\t\t\t\t\t\t\t\t\t$('#videolocal').html('<button id=\"publish\" class=\"btn btn-primary\">Publish</button>');\n\t\t\t\t\t\t\t\t\t$('#publish').click(function() { publishOwnFeed(true); });\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().addClass('hide');\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = {\n\t\t\trequest: \"join\",\n\t\t\troom: myroom,\n\t\t\tptype: \"publisher\",\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = escapeXmlTags(username);\n\t\tsfutest.send({ message: register });\n\t}\n}\n\nfunction publishOwnFeed(useAudio) {\n\t// Publish our stream\n\t$('#publish').attr('disabled', true).unbind('click');\n\tsfutest.createOffer(\n\t\t{\n\t\t\t// Add data:true here if you want to publish datachannels as well\n\t\t\tmedia: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: true },\t// Publishers are sendonly\n\t\t\t// If you want to test simulcasting (Chrome and Firefox only), then\n\t\t\t// pass a ?simulcast=true when opening this demo page: it will turn\n\t\t\t// the following 'simulcast' property to pass to janus.js to true\n\t\t\tsimulcast: doSimulcast,\n\t\t\tsimulcast2: doSimulcast2,\n\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t// If DTX is enabled, munge the SDP\n\t\t\t\tif(doDtx) {\n\t\t\t\t\tjsep.sdp = jsep.sdp\n\t\t\t\t\t\t.replace(\"useinbandfec=1\", \"useinbandfec=1;usedtx=1\")\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\tvar publish = { request: \"configure\", audio: useAudio, video: true };\n\t\t\t\t// You can force a specific codec to use when publishing by using the\n\t\t\t\t// audiocodec and videocodec properties, for instance:\n\t\t\t\t// \t\tpublish[\"audiocodec\"] = \"opus\"\n\t\t\t\t// to force Opus as the audio codec to use, or:\n\t\t\t\t// \t\tpublish[\"videocodec\"] = \"vp9\"\n\t\t\t\t// to force VP9 as the videocodec to use. In both case, though, forcing\n\t\t\t\t// a codec will only work if: (1) the codec is actually in the SDP (and\n\t\t\t\t// so the browser supports it), and (2) the codec is in the list of\n\t\t\t\t// allowed codecs in a room. With respect to the point (2) above,\n\t\t\t\t// refer to the text in janus.plugin.videoroom.jcfg for more details.\n\t\t\t\t// We allow people to specify a codec via query string, for demo purposes\n\t\t\t\tif(acodec)\n\t\t\t\t\tpublish[\"audiocodec\"] = acodec;\n\t\t\t\tif(vcodec)\n\t\t\t\t\tpublish[\"videocodec\"] = vcodec;\n\t\t\t\tsfutest.send({ message: publish, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\tif(useAudio) {\n\t\t\t\t\t publishOwnFeed(false);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t$('#publish').removeAttr('disabled').click(function() { publishOwnFeed(true); });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction toggleMute() {\n\tvar muted = sfutest.isAudioMuted();\n\tJanus.log((muted ? \"Unmuting\" : \"Muting\") + \" local stream...\");\n\tif(muted)\n\t\tsfutest.unmuteAudio();\n\telse\n\t\tsfutest.muteAudio();\n\tmuted = sfutest.isAudioMuted();\n\t$('#mute').html(muted ? \"Unmute\" : \"Mute\");\n}\n\nfunction unpublishOwnFeed() {\n\t// Unpublish our stream\n\t$('#unpublish').attr('disabled', true).unbind('click');\n\tvar unpublish = { request: \"unpublish\" };\n\tsfutest.send({ message: unpublish });\n}\n\nfunction newRemoteFeed(id, display, audio, video) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tremoteFeed.simulcastStarted = false;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar subscribe = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: myroom,\n\t\t\t\t\tptype: \"subscriber\",\n\t\t\t\t\tfeed: id,\n\t\t\t\t\tprivate_id: mypvtid\n\t\t\t\t};\n\t\t\t\t// In case you don't want to receive audio, video or data, even if the\n\t\t\t\t// publisher is sending them, set the 'offer_audio', 'offer_video' or\n\t\t\t\t// 'offer_data' properties to false (they're true by default), e.g.:\n\t\t\t\t// \t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t// For example, if the publisher is VP8 and this is Safari, let's avoid video\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\" &&\n\t\t\t\t\t\t(video === \"vp9\" || (video === \"vp8\" && !Janus.safariVp8))) {\n\t\t\t\t\tif(video)\n\t\t\t\t\t\tvideo = video.toUpperCase()\n\t\t\t\t\ttoastr.warning(\"Publisher is using \" + video + \", but Safari doesn't support it: disabling video\");\n\t\t\t\t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t}\n\t\t\t\tremoteFeed.videoCodec = video;\n\t\t\t\tremoteFeed.send({ message: subscribe });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (subscriber) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t} else if(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tfor(var i=1;i<6;i++) {\n\t\t\t\t\t\t\tif(!feeds[i]) {\n\t\t\t\t\t\t\t\tfeeds[i] = remoteFeed;\n\t\t\t\t\t\t\t\tremoteFeed.rfindex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoteFeed.rfid = msg[\"id\"];\n\t\t\t\t\t\tremoteFeed.rfdisplay = escapeXmlTags(msg[\"display\"]);\n\t\t\t\t\t\tif(!remoteFeed.spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('videoremote'+remoteFeed.rfindex);\n\t\t\t\t\t\t\tremoteFeed.spinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoteFeed.spinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t// Check if we got a simulcast-related event from this publisher\n\t\t\t\t\t\tvar substream = msg[\"substream\"];\n\t\t\t\t\t\tvar temporal = msg[\"temporal\"];\n\t\t\t\t\t\tif((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\tif(!remoteFeed.simulcastStarted) {\n\t\t\t\t\t\t\t\tremoteFeed.simulcastStarted = true;\n\t\t\t\t\t\t\t\t// Add some new buttons\n\t\t\t\t\t\t\t\taddSimulcastButtons(remoteFeed.rfindex, remoteFeed.videoCodec === \"vp8\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\tupdateSimulcastButtons(remoteFeed.rfindex, substream, temporal);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\tvar stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t// Add data:true here if you want to subscribe to datachannels as well\n\t\t\t\t\t\t\t// (obviously only works if the publisher offered them in the first place)\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tcustomizeSdp: function(jsep) {\n\t\t\t\t\t\t\t\tif(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n\t\t\t\t\t\t\t\t\t// Make sure that our offer contains stereo too\n\t\t\t\t\t\t\t\t\tjsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: myroom };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\ticeState: function(state) {\n\t\t\t\tJanus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n\t\t\t},\n\t\t\twebrtcState: function(on) {\n\t\t\t\tJanus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tJanus.debug(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n\t\t\t\tvar addButtons = false;\n\t\t\t\tif($('#remotevideo'+remoteFeed.rfindex).length === 0) {\n\t\t\t\t\taddButtons = true;\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t'<span class=\"label label-primary hide\" id=\"curres'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t'<span class=\"label label-info hide\" id=\"curbitrate'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#remotevideo\"+remoteFeed.rfindex).bind(\"playing\", function () {\n\t\t\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#remotevideo'+remoteFeed.rfindex).get(0), stream);\n\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t// No remote video\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).hide();\n\t\t\t\t\tif($('#videoremote'+remoteFeed.rfindex + ' .no-video-container').length === 0) {\n\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex+ ' .no-video-container').remove();\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t}\n\t\t\t\tif(!addButtons)\n\t\t\t\t\treturn;\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\tbitrateTimer[remoteFeed.rfindex] = setInterval(function() {\n\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\tvar bitrate = remoteFeed.getBitrate();\n\t\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).text(bitrate);\n\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t}, 1000);\n\t\t\t\t}\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#novideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curres'+remoteFeed.rfindex).remove();\n\t\t\t\tif(bitrateTimer[remoteFeed.rfindex])\n\t\t\t\t\tclearInterval(bitrateTimer[remoteFeed.rfindex]);\n\t\t\t\tbitrateTimer[remoteFeed.rfindex] = null;\n\t\t\t\tremoteFeed.simulcastStarted = false;\n\t\t\t\t$('#simulcast'+remoteFeed.rfindex).remove();\n\t\t\t}\n\t\t});\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n\n// Helpers to create Simulcast-related UI, if enabled\nfunction addSimulcastButtons(feed, temporal) {\n\tvar index = feed;\n\t$('#remote'+index).parent().append(\n\t\t'<div id=\"simulcast'+index+'\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to higher quality\" style=\"width: 33%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal quality\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to lower quality\" style=\"width: 34%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs hide\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\tif(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n\t\t// Chromium-based browsers only have two temporal layers\n\t\t$('#tl'+index+'-2').remove();\n\t\t$('#tl'+index+'-1').css('width', '50%');\n\t\t$('#tl'+index+'-0').css('width', '50%');\n\t}\n\t// Enable the simulcast selection buttons\n\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (lower quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 0 }});\n\t\t});\n\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (normal quality)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 1 }});\n\t\t});\n\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching simulcast substream, wait for it... (higher quality)\", null, {timeOut: 2000});\n\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", substream: 2 }});\n\t\t});\n\tif(!temporal)\t// No temporal layer support\n\t\treturn;\n\t$('#tl' + index + '-0').parent().removeClass('hide');\n\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 0 }});\n\t\t});\n\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 1 }});\n\t\t});\n\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping simulcast temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal: 2 }});\n\t\t});\n}\n\nfunction updateSimulcastButtons(feed, substream, temporal) {\n\t// Check the substream\n\tvar index = feed;\n\tif(substream === 0) {\n\t\ttoastr.success(\"Switched simulcast substream! (lower quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(substream === 1) {\n\t\ttoastr.success(\"Switched simulcast substream! (normal quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(substream === 2) {\n\t\ttoastr.success(\"Switched simulcast substream! (higher quality)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped simulcast temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n", "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar sfutest = null;\nvar opaqueId = \"videoroomtest-\"+Janus.randomString(12);\n\nvar myroom = 5678;\t// VP9 SVC demo room\nvar myusername = null;\nvar myid = null;\nvar mystream = null;\n// We use this other ID just to map our subscriptions to us\nvar mypvtid = null;\n\nvar feeds = [];\nvar bitrateTimer = [];\n\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to VideoRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\tsfutest = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + sfutest.getPlugin() + \", id=\" + sfutest.getId() + \")\");\n\t\t\t\t\t\t\t\t\tJanus.log(\"  -- This is a publisher/manager\");\n\t\t\t\t\t\t\t\t\t// Prepare the username registration\n\t\t\t\t\t\t\t\t\t$('#videojoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconsentDialog: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n\t\t\t\t\t\t\t\t\tif(on) {\n\t\t\t\t\t\t\t\t\t\t// Darken screen and show hint\n\t\t\t\t\t\t\t\t\t\t$.blockUI({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<div><img src=\"up_arrow.png\"/></div>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#aaa',\n\t\t\t\t\t\t\t\t\t\t\t\ttop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tleft: (navigator.mozGetUserMedia ? '-100px' : '300px')\n\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// Restore screen\n\t\t\t\t\t\t\t\t\t\t$.unblockUI();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\tif(!on)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t$('#publish').remove();\n\t\t\t\t\t\t\t\t\t// This controls allows us to override the global room bitrate cap\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#bitrate a').click(function() {\n\t\t\t\t\t\t\t\t\t\tvar id = $(this).attr(\"id\");\n\t\t\t\t\t\t\t\t\t\tvar bitrate = parseInt(id)*1000;\n\t\t\t\t\t\t\t\t\t\tif(bitrate === 0) {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Not limiting bandwidth via REMB\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#bitrateset').html($(this).html() + '<span class=\"caret\"></span>').parent().removeClass('open');\n\t\t\t\t\t\t\t\t\t\tsfutest.send({ message: { request: \"configure\", bitrate: bitrate }});\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message (publisher) :::\", msg);\n\t\t\t\t\t\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\t\t\t\tif(event === \"joined\") {\n\t\t\t\t\t\t\t\t\t\t\t// Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n\t\t\t\t\t\t\t\t\t\t\tmyid = msg[\"id\"];\n\t\t\t\t\t\t\t\t\t\t\tmypvtid = msg[\"private_id\"];\n\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n\t\t\t\t\t\t\t\t\t\t\tpublishOwnFeed(true);\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\t\t// The room has been destroyed\n\t\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t\t\t\t\t\t// Any new feed to attach to?\n\t\t\t\t\t\t\t\t\t\t\tif(msg[\"publishers\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar list = msg[\"publishers\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got a list of available publishers/feeds:\", list);\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var f in list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar id = list[f][\"id\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar display = list[f][\"display\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar audio = list[f][\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar video = list[f][\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRemoteFeed(id, display, audio, video);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"leaving\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has gone away?\n\t\t\t\t\t\t\t\t\t\t\t\tvar leaving = msg[\"leaving\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + leaving);\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == leaving) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"unpublished\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\t// One of the publishers has unpublished?\n\t\t\t\t\t\t\t\t\t\t\t\tvar unpublished = msg[\"unpublished\"];\n\t\t\t\t\t\t\t\t\t\t\t\tJanus.log(\"Publisher left: \" + unpublished);\n\t\t\t\t\t\t\t\t\t\t\t\tif(unpublished === 'ok') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// That's us\n\t\t\t\t\t\t\t\t\t\t\t\t\tsfutest.hangup();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvar remoteFeed = null;\n\t\t\t\t\t\t\t\t\t\t\t\tfor(var i=1; i<6; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(feeds[i] && feeds[i].rfid == unpublished) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed = feeds[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(remoteFeed != null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") has left the room, detaching\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).empty().hide();\n\t\t\t\t\t\t\t\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).empty();\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeeds[remoteFeed.rfindex] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoteFeed.detach();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else if(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(msg[\"error_code\"] === 426) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses for testing VP9 SVC) \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.videoroom.jcfg</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t\t\t\t\t\tsfutest.handleRemoteJsep({ jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t// Check if any of the media we wanted to publish has\n\t\t\t\t\t\t\t\t\t\t// been rejected (e.g., wrong or unsupported codec)\n\t\t\t\t\t\t\t\t\t\tvar audio = msg[\"audio_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n\t\t\t\t\t\t\t\t\t\t\t// Audio has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our audio stream has been rejected, viewers won't hear us\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tvar video = msg[\"video_codec\"];\n\t\t\t\t\t\t\t\t\t\tif(mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n\t\t\t\t\t\t\t\t\t\t\t// Video has been rejected\n\t\t\t\t\t\t\t\t\t\t\ttoastr.warning(\"Our video stream has been rejected, viewers won't see us\");\n\t\t\t\t\t\t\t\t\t\t\t// Hide the webcam video\n\t\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonlocalstream: function(stream) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a local stream :::\", stream);\n\t\t\t\t\t\t\t\t\tmystream = stream;\n\t\t\t\t\t\t\t\t\t$('#videojoin').hide();\n\t\t\t\t\t\t\t\t\t$('#videos').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\tif($('#myvideo').length === 0) {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<video class=\"rounded centered\" id=\"myvideo\" width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"/>');\n\t\t\t\t\t\t\t\t\t\t// Add a 'mute' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"mute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</button>');\n\t\t\t\t\t\t\t\t\t\t$('#mute').click(toggleMute);\n\t\t\t\t\t\t\t\t\t\t// Add an 'unpublish' button\n\t\t\t\t\t\t\t\t\t\t$('#videolocal').append('<button class=\"btn btn-warning btn-xs\" id=\"unpublish\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\">Unpublish</button>');\n\t\t\t\t\t\t\t\t\t\t$('#unpublish').click(unpublishOwnFeed);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$('#publisher').removeClass('hide').html(myusername).show();\n\t\t\t\t\t\t\t\t\tJanus.attachMediaStream($('#myvideo').get(0), stream);\n\t\t\t\t\t\t\t\t\t$(\"#myvideo\").get(0).muted = \"muted\";\n\t\t\t\t\t\t\t\t\tif(sfutest.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\n\t\t\t\t\t\t\t\t\t\t\tsfutest.webrtcStuff.pc.iceConnectionState !== \"connected\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().block({\n\t\t\t\t\t\t\t\t\t\t\tmessage: '<b>Publishing...</b>',\n\t\t\t\t\t\t\t\t\t\t\tcss: {\n\t\t\t\t\t\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\t\t\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t\t\t\t\t\t// No webcam\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').hide();\n\t\t\t\t\t\t\t\t\t\tif($('#videolocal .no-video-container').length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('#videolocal').append(\n\t\t\t\t\t\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No webcam available</span>' +\n\t\t\t\t\t\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$('#videolocal .no-video-container').remove();\n\t\t\t\t\t\t\t\t\t\t$('#myvideo').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonremotestream: function(stream) {\n\t\t\t\t\t\t\t\t\t// The publisher stream is sendonly, we don't expect anything here\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n\t\t\t\t\t\t\t\t\tmystream = null;\n\t\t\t\t\t\t\t\t\t$('#videolocal').html('<button id=\"publish\" class=\"btn btn-primary\">Publish</button>');\n\t\t\t\t\t\t\t\t\t$('#publish').click(function() { publishOwnFeed(true); });\n\t\t\t\t\t\t\t\t\t$(\"#videolocal\").parent().parent().unblock();\n\t\t\t\t\t\t\t\t\t$('#bitrate').parent().parent().addClass('hide');\n\t\t\t\t\t\t\t\t\t$('#bitrate a').unbind('click');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tregisterUsername();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tif(/[^a-zA-Z0-9]/.test(username)) {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html('Input is not alphanumeric');\n\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tvar register = {\n\t\t\trequest: \"join\",\n\t\t\troom: myroom,\n\t\t\tptype: \"publisher\",\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = escapeXmlTags(username);\n\t\tsfutest.send({ message: register });\n\t}\n}\n\nfunction publishOwnFeed(useAudio) {\n\t// Publish our stream\n\t$('#publish').attr('disabled', true).unbind('click');\n\tsfutest.createOffer(\n\t\t{\n\t\t\t// Add data:true here if you want to publish datachannels as well\n\t\t\tmedia: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: true },\t// Publishers are sendonly\n\t\t\tsuccess: function(jsep) {\n\t\t\t\tJanus.debug(\"Got publisher SDP!\", jsep);\n\t\t\t\tvar publish = { request: \"configure\", audio: useAudio, video: true };\n\t\t\t\t// We're testing VP9 SVC, so just to make sure, let's force VP9\n\t\t\t\tpublish[\"videocodec\"] = \"vp9\"\n\t\t\t\tsfutest.send({ message: publish, jsep: jsep });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\tif(useAudio) {\n\t\t\t\t\t publishOwnFeed(false);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t$('#publish').removeAttr('disabled').click(function() { publishOwnFeed(true); });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction toggleMute() {\n\tvar muted = sfutest.isAudioMuted();\n\tJanus.log((muted ? \"Unmuting\" : \"Muting\") + \" local stream...\");\n\tif(muted)\n\t\tsfutest.unmuteAudio();\n\telse\n\t\tsfutest.muteAudio();\n\tmuted = sfutest.isAudioMuted();\n\t$('#mute').html(muted ? \"Unmute\" : \"Mute\");\n}\n\nfunction unpublishOwnFeed() {\n\t// Unpublish our stream\n\t$('#unpublish').attr('disabled', true).unbind('click');\n\tvar unpublish = { request: \"unpublish\" };\n\tsfutest.send({ message: unpublish });\n}\n\nfunction newRemoteFeed(id, display, audio, video) {\n\t// A new feed has been published, create a new plugin handle and attach to it as a subscriber\n\tvar remoteFeed = null;\n\tjanus.attach(\n\t\t{\n\t\t\tplugin: \"janus.plugin.videoroom\",\n\t\t\topaqueId: opaqueId,\n\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\tremoteFeed = pluginHandle;\n\t\t\t\tJanus.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n\t\t\t\tJanus.log(\"  -- This is a subscriber\");\n\t\t\t\t// We wait for the plugin to send us an offer\n\t\t\t\tvar subscribe = {\n\t\t\t\t\trequest: \"join\",\n\t\t\t\t\troom: myroom,\n\t\t\t\t\tptype: \"subscriber\",\n\t\t\t\t\tfeed: id,\n\t\t\t\t\tprivate_id: mypvtid\n\t\t\t\t};\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t// Safari doesn't support VP9\n\t\t\t\t\tif(video)\n\t\t\t\t\t\tvideo = video.toUpperCase()\n\t\t\t\t\ttoastr.warning(\"Publisher is using \" + video + \", but Safari doesn't support it: disabling video\");\n\t\t\t\t\tsubscribe[\"offer_video\"] = false;\n\t\t\t\t}\n\t\t\t\tremoteFeed.videoCodec = video;\n\t\t\t\tremoteFeed.send({ message: subscribe });\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tJanus.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t},\n\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\tJanus.debug(\" ::: Got a message (subscriber) :::\", msg);\n\t\t\t\tvar event = msg[\"videoroom\"];\n\t\t\t\tJanus.debug(\"Event: \" + event);\n\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t} else if(event) {\n\t\t\t\t\tif(event === \"attached\") {\n\t\t\t\t\t\t// Subscriber created and attached\n\t\t\t\t\t\tfor(var i=1;i<6;i++) {\n\t\t\t\t\t\t\tif(!feeds[i]) {\n\t\t\t\t\t\t\t\tfeeds[i] = remoteFeed;\n\t\t\t\t\t\t\t\tremoteFeed.rfindex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoteFeed.rfid = msg[\"id\"];\n\t\t\t\t\t\tremoteFeed.rfdisplay = escapeXmlTags(msg[\"display\"]);\n\t\t\t\t\t\tif(!remoteFeed.spinner) {\n\t\t\t\t\t\t\tvar target = document.getElementById('videoremote'+remoteFeed.rfindex);\n\t\t\t\t\t\t\tremoteFeed.spinner = new Spinner({top:100}).spin(target);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoteFeed.spinner.spin();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJanus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n\t\t\t\t\t\t$('#remote'+remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n\t\t\t\t\t} else if(event === \"event\") {\n\t\t\t\t\t\t// Check if we got an event on a SVC-related event from this publisher\n\t\t\t\t\t\tvar spatial = msg[\"spatial_layer\"];\n\t\t\t\t\t\tvar temporal = msg[\"temporal_layer\"];\n\t\t\t\t\t\tif((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {\n\t\t\t\t\t\t\tif(!remoteFeed.svcStarted) {\n\t\t\t\t\t\t\t\tremoteFeed.svcStarted = true;\n\t\t\t\t\t\t\t\t// Add some new buttons\n\t\t\t\t\t\t\t\taddSvcButtons(remoteFeed.rfindex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We just received notice that there's been a switch, update the buttons\n\t\t\t\t\t\t\tupdateSvcButtons(remoteFeed.rfindex, spatial, temporal);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What has just happened?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(jsep) {\n\t\t\t\t\tJanus.debug(\"Handling SDP as well...\", jsep);\n\t\t\t\t\t// Answer and attach\n\t\t\t\t\tremoteFeed.createAnswer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t// Add data:true here if you want to subscribe to datachannels as well\n\t\t\t\t\t\t\t// (obviously only works if the publisher offered them in the first place)\n\t\t\t\t\t\t\tmedia: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\tvar body = { request: \"start\", room: myroom };\n\t\t\t\t\t\t\t\tremoteFeed.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\ticeState: function(state) {\n\t\t\t\tJanus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n\t\t\t},\n\t\t\twebrtcState: function(on) {\n\t\t\t\tJanus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t},\n\t\t\tonlocalstream: function(stream) {\n\t\t\t\t// The subscriber stream is recvonly, we don't expect anything here\n\t\t\t},\n\t\t\tonremotestream: function(stream) {\n\t\t\t\tJanus.debug(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n\t\t\t\tvar addButtons = false;\n\t\t\t\tif($('#remotevideo'+remoteFeed.rfindex).length === 0) {\n\t\t\t\t\taddButtons = true;\n\t\t\t\t\t// No remote video yet\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t'<span class=\"label label-primary hide\" id=\"curres'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\"></span>' +\n\t\t\t\t\t\t'<span class=\"label label-info hide\" id=\"curbitrate'+remoteFeed.rfindex+'\" style=\"position: absolute; bottom: 0px; right: 0px; margin: 15px;\"></span>');\n\t\t\t\t\t// Show the video, hide the spinner and show the resolution when we get a playing event\n\t\t\t\t\t$(\"#remotevideo\"+remoteFeed.rfindex).bind(\"playing\", function () {\n\t\t\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t\t\tif(this.videoWidth)\n\t\t\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\t\tvar width = this.videoWidth;\n\t\t\t\t\t\tvar height = this.videoHeight;\n\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n\t\t\t\t\t\t\t// Firefox Stable has a bug: width and height are not immediately available after a playing\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tJanus.attachMediaStream($('#remotevideo'+remoteFeed.rfindex).get(0), stream);\n\t\t\t\tvar videoTracks = stream.getVideoTracks();\n\t\t\t\tif(!videoTracks || videoTracks.length === 0) {\n\t\t\t\t\t// No remote video\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).hide();\n\t\t\t\t\tif($('#videoremote'+remoteFeed.rfindex + ' .no-video-container').length === 0) {\n\t\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex).append(\n\t\t\t\t\t\t\t'<div class=\"no-video-container\">' +\n\t\t\t\t\t\t\t\t'<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n\t\t\t\t\t\t\t\t'<span class=\"no-video-text\">No remote video available</span>' +\n\t\t\t\t\t\t\t'</div>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$('#videoremote'+remoteFeed.rfindex+ ' .no-video-container').remove();\n\t\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t}\n\t\t\t\tif(!addButtons)\n\t\t\t\t\treturn;\n\t\t\t\tif(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n\t\t\t\t\t\tJanus.webRTCAdapter.browserDetails.browser === \"safari\") {\n\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).removeClass('hide').show();\n\t\t\t\t\tbitrateTimer[remoteFeed.rfindex] = setInterval(function() {\n\t\t\t\t\t\t// Display updated bitrate, if supported\n\t\t\t\t\t\tvar bitrate = remoteFeed.getBitrate();\n\t\t\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).text(bitrate);\n\t\t\t\t\t\t// Check if the resolution changed too\n\t\t\t\t\t\tvar width = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoWidth;\n\t\t\t\t\t\tvar height = $(\"#remotevideo\"+remoteFeed.rfindex).get(0).videoHeight;\n\t\t\t\t\t\tif(width > 0 && height > 0)\n\t\t\t\t\t\t\t$('#curres'+remoteFeed.rfindex).removeClass('hide').text(width+'x'+height).show();\n\t\t\t\t\t}, 1000);\n\t\t\t\t}\n\t\t\t},\n\t\t\toncleanup: function() {\n\t\t\t\tJanus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n\t\t\t\tif(remoteFeed.spinner)\n\t\t\t\t\tremoteFeed.spinner.stop();\n\t\t\t\tremoteFeed.spinner = null;\n\t\t\t\t$('#remotevideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#waitingvideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#novideo'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curbitrate'+remoteFeed.rfindex).remove();\n\t\t\t\t$('#curres'+remoteFeed.rfindex).remove();\n\t\t\t\tif(bitrateTimer[remoteFeed.rfindex])\n\t\t\t\t\tclearInterval(bitrateTimer[remoteFeed.rfindex]);\n\t\t\t\tbitrateTimer[remoteFeed.rfindex] = null;\n\t\t\t\t$('#sl'+remoteFeed.rfindex+'-1').unbind('click');\n\t\t\t\t$('#sl'+remoteFeed.rfindex+'-0').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-2').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-1').unbind('click');\n\t\t\t\t$('#tl'+remoteFeed.rfindex+'-0').unbind('click');\n\t\t\t\t$('#layers'+remoteFeed.rfindex).addClass('hide');\n\t\t\t}\n\t\t});\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n\n// Helpers to create SVC-related UI for a new viewer\nfunction addSvcButtons(feed) {\n\tvar index = feed;\n\t$('#remote'+index).parent().append(\n\t\t'<div id=\"layers'+index+'\" class=\"btn-group-vertical btn-group-vertical-xs pull-right\">' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"sl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to high resolution\" style=\"width: 34%\">SL 2</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to normal resolution\" style=\"width: 33%\">SL 1</button>' +\n\t\t'\t\t\t<button id=\"sl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Switch to low resolution\" style=\"width: 33%\">SL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'\t<div class\"row\">' +\n\t\t'\t\t<div class=\"btn-group btn-group-xs\" style=\"width: 100%\">' +\n\t\t'\t\t\t<button id=\"tl'+index+'-2\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 2 (high FPS)\" style=\"width: 34%\">TL 2</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-1\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 1 (medium FPS)\" style=\"width: 33%\">TL 1</button>' +\n\t\t'\t\t\t<button id=\"tl'+index+'-0\" type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" title=\"Cap to temporal layer 0 (low FPS)\" style=\"width: 33%\">TL 0</button>' +\n\t\t'\t\t</div>' +\n\t\t'\t</div>' +\n\t\t'</div>'\n\t);\n\t// Enable the VP9 SVC selection buttons\n\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (low resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 0 }});\n\t\t});\n\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (normal resolution)\", null, {timeOut: 2000});\n\t\t\tif(!$('#sl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 1 }});\n\t\t});\n\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Switching SVC spatial layer, wait for it... (high resolution)\", null, {timeOut: 2000});\n\t\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#sl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#sl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", spatial_layer: 2 }});\n\t\t});\n\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (lowest FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 0 }});\n\t\t});\n\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (medium FPS)\", null, {timeOut: 2000});\n\t\t\tif(!$('#tl' + index + '-2').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 1 }});\n\t\t});\n\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary')\n\t\t.unbind('click').click(function() {\n\t\t\ttoastr.info(\"Capping SVC temporal layer, wait for it... (highest FPS)\", null, {timeOut: 2000});\n\t\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');\n\t\t\tif(!$('#tl' + index + '-1').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tif(!$('#tl' + index + '-0').hasClass('btn-success'))\n\t\t\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info').addClass('btn-primary');\n\t\t\tfeeds[index].send({ message: { request: \"configure\", temporal_layer: 2 }});\n\t\t});\n}\n\nfunction updateSvcButtons(feed, spatial, temporal) {\n\t// Check the spatial layer\n\tvar index = feed;\n\tif(spatial === 0) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (lower resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(spatial === 1) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (normal resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(spatial === 2) {\n\t\ttoastr.success(\"Switched SVC spatial layer! (high resolution)\", null, {timeOut: 2000});\n\t\t$('#sl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#sl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#sl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n\t// Check the temporal layer\n\tif(temporal === 0) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (lowest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t} else if(temporal === 1) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (medium FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t} else if(temporal === 2) {\n\t\ttoastr.success(\"Capped SVC temporal layer! (highest FPS)\", null, {timeOut: 2000});\n\t\t$('#tl' + index + '-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');\n\t\t$('#tl' + index + '-1').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t\t$('#tl' + index + '-0').removeClass('btn-primary btn-success').addClass('btn-primary');\n\t}\n}\n"], "filenames": ["html/audiobridgetest.js", "html/recordplaytest.js", "html/screensharingtest.js", "html/streamingtest.js", "html/textroomtest.js", "html/videocalltest.js", "html/videoroomtest.js", "html/vp9svctest.js"], "buggy_code_start_loc": [181, 426, 164, 326, 156, 151, 403, 390], "buggy_code_end_loc": [450, 547, 516, 394, 420, 600, 687, 632], "fixing_code_start_loc": [181, 426, 164, 326, 156, 151, 403, 390], "fixing_code_end_loc": [460, 557, 526, 404, 426, 610, 697, 642], "type": "CWE-79", "message": "janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4020", "sourceIdentifier": "security@huntr.dev", "published": "2021-11-27T10:15:07.453", "lastModified": "2021-11-30T19:27:14.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "janus-gateway es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:meetecho:janus:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.11.5", "matchCriteriaId": "32BBE90D-BBAD-4236-B171-61DA9ABAB882"}]}]}], "references": [{"url": "https://github.com/meetecho/janus-gateway/commit/d3fc00ec803d6c41d8f98908732f44e7f4911a1c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/9814baa8-7bdd-4e31-a132-d9d15653409e", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/meetecho/janus-gateway/commit/d3fc00ec803d6c41d8f98908732f44e7f4911a1c"}}