{"buggy_code": ["import Controller from \"@ember/controller\";\nimport { action } from \"@ember/object\";\nimport { getAbsoluteURL } from \"discourse-common/lib/get-url\";\nimport discourseComputed, {\n  afterRender,\n} from \"discourse-common/utils/decorators\";\nimport { longDateNoYear } from \"discourse/lib/formatter\";\nimport Sharing from \"discourse/lib/sharing\";\nimport showModal from \"discourse/lib/show-modal\";\nimport { bufferedProperty } from \"discourse/mixins/buffered-content\";\nimport ModalFunctionality from \"discourse/mixins/modal-functionality\";\nimport I18n from \"I18n\";\nimport Category from \"discourse/models/category\";\nimport { getOwner } from \"discourse-common/lib/get-owner\";\n\nexport default Controller.extend(\n  ModalFunctionality,\n  bufferedProperty(\"invite\"),\n  {\n    topic: null,\n    post: null,\n    allowInvites: false,\n\n    onShow() {\n      this.setProperties({\n        topic: null,\n        post: null,\n        allowInvites: false,\n      });\n\n      this._showRestrictedGroupWarning();\n      this._selectUrl();\n    },\n\n    @afterRender\n    _showRestrictedGroupWarning() {\n      if (!this.model) {\n        return;\n      }\n\n      Category.reloadBySlugPath(this.model.slug).then((result) => {\n        const groups = result.category.group_permissions.mapBy(\"group_name\");\n        if (groups && !groups.any((group) => group === \"everyone\")) {\n          this.flash(\n            I18n.t(\"topic.share.restricted_groups\", {\n              count: groups.length,\n              groupNames: groups.join(\", \"),\n            }),\n            \"warning\"\n          );\n        }\n      });\n    },\n\n    @afterRender\n    _selectUrl() {\n      const input = document.querySelector(\"input.invite-link\");\n      if (input && !this.site.mobileView) {\n        // if the input is auto-focused on mobile, iOS requires two taps of the copy button\n        input.setSelectionRange(0, this.url.length);\n        input.focus();\n      }\n    },\n\n    @discourseComputed(\"post.shareUrl\", \"topic.shareUrl\")\n    url(postUrl, topicUrl) {\n      if (postUrl) {\n        return getAbsoluteURL(postUrl);\n      } else if (topicUrl) {\n        return getAbsoluteURL(topicUrl);\n      }\n    },\n\n    @discourseComputed(\"post.created_at\", \"post.wiki\", \"post.last_wiki_edit\")\n    displayDate(createdAt, wiki, lastWikiEdit) {\n      const date = wiki && lastWikiEdit ? lastWikiEdit : createdAt;\n      return longDateNoYear(new Date(date));\n    },\n\n    @discourseComputed(\n      \"topic.{isPrivateMessage,invisible,category.read_restricted}\"\n    )\n    sources(topic) {\n      const privateContext =\n        this.siteSettings.login_required ||\n        topic?.isPrivateMessage ||\n        topic?.invisible ||\n        topic?.category?.read_restricted;\n\n      return Sharing.activeSources(\n        this.siteSettings.share_links,\n        privateContext\n      );\n    },\n\n    @action\n    share(source) {\n      Sharing.shareSource(source, {\n        title: this.topic.title,\n        url: this.url,\n      });\n    },\n\n    @action\n    inviteUsers() {\n      const controller = showModal(\"create-invite\");\n      controller.setProperties({\n        inviteToTopic: true,\n        topics: [this.topic],\n      });\n      controller.buffered.setProperties({\n        topicId: this.topic.id,\n        topicTitle: this.topic.title,\n      });\n    },\n\n    @action\n    replyAsNewTopic() {\n      const postStream = this.topic.postStream;\n      const postId = this.post?.id || postStream.findPostIdForPostNumber(1);\n      const post = postStream.findLoadedPost(postId);\n      const topicController = getOwner(this).lookup(\"controller:topic\");\n      topicController.actions.replyAsNewTopic.call(topicController, post);\n      this.send(\"closeModal\");\n    },\n  }\n);\n", "import discourseComputed, { on } from \"discourse-common/utils/decorators\";\nimport { NotificationLevels } from \"discourse/lib/notification-levels\";\nimport PermissionType from \"discourse/models/permission-type\";\nimport RestModel from \"discourse/models/rest\";\nimport Site from \"discourse/models/site\";\nimport User from \"discourse/models/user\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { get } from \"@ember/object\";\nimport { getOwner } from \"discourse-common/lib/get-owner\";\nimport getURL from \"discourse-common/lib/get-url\";\n\nconst STAFF_GROUP_NAME = \"staff\";\n\nconst Category = RestModel.extend({\n  permissions: null,\n\n  @on(\"init\")\n  setupGroupsAndPermissions() {\n    const availableGroups = this.available_groups;\n    if (!availableGroups) {\n      return;\n    }\n    this.set(\"availableGroups\", availableGroups);\n\n    const groupPermissions = this.group_permissions;\n\n    if (groupPermissions) {\n      this.set(\n        \"permissions\",\n        groupPermissions.map((elem) => {\n          availableGroups.removeObject(elem.group_name);\n          return elem;\n        })\n      );\n    }\n  },\n\n  @discourseComputed(\"required_tag_groups\", \"minimum_required_tags\")\n  minimumRequiredTags() {\n    if (this.required_tag_groups?.length > 0) {\n      return this.required_tag_groups.reduce(\n        (sum, rtg) => sum + rtg.min_count,\n        0\n      );\n    } else {\n      return this.minimum_required_tags > 0 ? this.minimum_required_tags : null;\n    }\n  },\n\n  @discourseComputed\n  availablePermissions() {\n    return [\n      PermissionType.create({ id: PermissionType.FULL }),\n      PermissionType.create({ id: PermissionType.CREATE_POST }),\n      PermissionType.create({ id: PermissionType.READONLY }),\n    ];\n  },\n\n  @discourseComputed(\"id\")\n  searchContext(id) {\n    return { type: \"category\", id, category: this };\n  },\n\n  @discourseComputed(\"parentCategory.ancestors\")\n  ancestors(parentAncestors) {\n    return [...(parentAncestors || []), this];\n  },\n\n  @discourseComputed(\"parentCategory.level\")\n  level(parentLevel) {\n    return (parentLevel || -1) + 1;\n  },\n\n  @discourseComputed(\"subcategories\")\n  isParent(subcategories) {\n    return subcategories && subcategories.length > 0;\n  },\n\n  @discourseComputed(\"subcategories\")\n  isGrandParent(subcategories) {\n    return (\n      subcategories &&\n      subcategories.some(\n        (cat) => cat.subcategories && cat.subcategories.length > 0\n      )\n    );\n  },\n\n  @discourseComputed(\"notification_level\")\n  isMuted(notificationLevel) {\n    return notificationLevel === NotificationLevels.MUTED;\n  },\n\n  @discourseComputed(\"isMuted\", \"subcategories\")\n  isHidden(isMuted, subcategories) {\n    if (!isMuted) {\n      return false;\n    } else if (!subcategories) {\n      return true;\n    }\n\n    if (subcategories.some((cat) => !cat.isHidden)) {\n      return false;\n    }\n\n    return true;\n  },\n\n  @discourseComputed(\"isMuted\", \"subcategories\")\n  hasMuted(isMuted, subcategories) {\n    if (isMuted) {\n      return true;\n    } else if (!subcategories) {\n      return false;\n    }\n\n    if (subcategories.some((cat) => cat.hasMuted)) {\n      return true;\n    }\n\n    return false;\n  },\n\n  @discourseComputed(\"notification_level\")\n  notificationLevelString(notificationLevel) {\n    // Get the key from the value\n    const notificationLevelString = Object.keys(NotificationLevels).find(\n      (key) => NotificationLevels[key] === notificationLevel\n    );\n    if (notificationLevelString) {\n      return notificationLevelString.toLowerCase();\n    }\n  },\n\n  @discourseComputed(\"name\")\n  path() {\n    return `/c/${Category.slugFor(this)}/${this.id}`;\n  },\n\n  @discourseComputed(\"path\")\n  url(path) {\n    return getURL(path);\n  },\n\n  @discourseComputed\n  fullSlug() {\n    return Category.slugFor(this).replace(/\\//g, \"-\");\n  },\n\n  @discourseComputed(\"name\")\n  nameLower(name) {\n    return name.toLowerCase();\n  },\n\n  @discourseComputed(\"url\")\n  unreadUrl(url) {\n    return `${url}/l/unread`;\n  },\n\n  @discourseComputed(\"url\")\n  newUrl(url) {\n    return `${url}/l/new`;\n  },\n\n  @discourseComputed(\"color\", \"text_color\")\n  style(color, textColor) {\n    return `background-color: #${color}; color: #${textColor}`;\n  },\n\n  @discourseComputed(\"topic_count\")\n  moreTopics(topicCount) {\n    return topicCount > (this.num_featured_topics || 2);\n  },\n\n  @discourseComputed(\"topic_count\", \"subcategories.[]\")\n  totalTopicCount(topicCount, subcategories) {\n    if (subcategories) {\n      subcategories.forEach((subcategory) => {\n        topicCount += subcategory.topic_count;\n      });\n    }\n    return topicCount;\n  },\n\n  @discourseComputed(\"default_slow_mode_seconds\")\n  defaultSlowModeMinutes(seconds) {\n    return seconds ? seconds / 60 : null;\n  },\n\n  save() {\n    const id = this.id;\n    const url = id ? `/categories/${id}` : \"/categories\";\n\n    return ajax(url, {\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        name: this.name,\n        slug: this.slug,\n        color: this.color,\n        text_color: this.text_color,\n        secure: this.secure,\n        permissions: this._permissionsForUpdate(),\n        auto_close_hours: this.auto_close_hours,\n        auto_close_based_on_last_post: this.get(\n          \"auto_close_based_on_last_post\"\n        ),\n        default_slow_mode_seconds: this.default_slow_mode_seconds,\n        position: this.position,\n        email_in: this.email_in,\n        email_in_allow_strangers: this.email_in_allow_strangers,\n        mailinglist_mirror: this.mailinglist_mirror,\n        parent_category_id: this.parent_category_id,\n        uploaded_logo_id: this.get(\"uploaded_logo.id\"),\n        uploaded_background_id: this.get(\"uploaded_background.id\"),\n        allow_badges: this.allow_badges,\n        custom_fields: this.custom_fields,\n        topic_template: this.topic_template,\n        all_topics_wiki: this.all_topics_wiki,\n        allow_unlimited_owner_edits_on_first_post: this\n          .allow_unlimited_owner_edits_on_first_post,\n        allowed_tags:\n          this.allowed_tags && this.allowed_tags.length > 0\n            ? this.allowed_tags\n            : null,\n        allowed_tag_groups:\n          this.allowed_tag_groups && this.allowed_tag_groups.length > 0\n            ? this.allowed_tag_groups\n            : null,\n        allow_global_tags: this.allow_global_tags,\n        required_tag_groups: this.required_tag_groups,\n        sort_order: this.sort_order,\n        sort_ascending: this.sort_ascending,\n        topic_featured_link_allowed: this.topic_featured_link_allowed,\n        show_subcategory_list: this.show_subcategory_list,\n        num_featured_topics: this.num_featured_topics,\n        default_view: this.default_view,\n        subcategory_list_style: this.subcategory_list_style,\n        default_top_period: this.default_top_period,\n        minimum_required_tags: this.minimum_required_tags,\n        navigate_to_first_post_after_read: this.get(\n          \"navigate_to_first_post_after_read\"\n        ),\n        search_priority: this.search_priority,\n        reviewable_by_group_name: this.reviewable_by_group_name,\n        read_only_banner: this.read_only_banner,\n        default_list_filter: this.default_list_filter,\n      }),\n      type: id ? \"PUT\" : \"POST\",\n    });\n  },\n\n  _permissionsForUpdate() {\n    const permissions = this.permissions;\n    let rval = {};\n    if (permissions.length) {\n      permissions.forEach((p) => (rval[p.group_name] = p.permission_type));\n    } else {\n      // empty permissions => staff-only access\n      rval[STAFF_GROUP_NAME] = PermissionType.FULL;\n    }\n    return rval;\n  },\n\n  destroy() {\n    return ajax(`/categories/${this.id || this.slug}`, {\n      type: \"DELETE\",\n    });\n  },\n\n  addPermission(permission) {\n    this.permissions.addObject(permission);\n    this.availableGroups.removeObject(permission.group_name);\n  },\n\n  removePermission(group_name) {\n    const permission = this.permissions.findBy(\"group_name\", group_name);\n    if (permission) {\n      this.permissions.removeObject(permission);\n      this.availableGroups.addObject(group_name);\n    }\n  },\n\n  updatePermission(group_name, type) {\n    this.permissions.forEach((p, i) => {\n      if (p.group_name === group_name) {\n        this.set(`permissions.${i}.permission_type`, type);\n      }\n    });\n  },\n\n  @discourseComputed(\"topics\")\n  latestTopic(topics) {\n    if (topics && topics.length) {\n      return topics[0];\n    }\n  },\n\n  @discourseComputed(\"topics\")\n  featuredTopics(topics) {\n    if (topics && topics.length) {\n      return topics.slice(0, this.num_featured_topics || 2);\n    }\n  },\n\n  @discourseComputed(\"id\", \"topicTrackingState.messageCount\")\n  unreadTopics(id) {\n    return this.topicTrackingState.countUnread(id);\n  },\n\n  @discourseComputed(\"id\", \"topicTrackingState.messageCount\")\n  newTopics(id) {\n    return this.topicTrackingState.countNew(id);\n  },\n\n  setNotification(notification_level) {\n    User.currentProp(\n      \"muted_category_ids\",\n      User.current().calculateMutedIds(\n        notification_level,\n        this.id,\n        \"muted_category_ids\"\n      )\n    );\n\n    const url = `/category/${this.id}/notifications`;\n    return ajax(url, { data: { notification_level }, type: \"POST\" }).then(\n      (data) => {\n        User.current().set(\n          \"indirectly_muted_category_ids\",\n          data.indirectly_muted_category_ids\n        );\n        this.set(\"notification_level\", notification_level);\n        this.notifyPropertyChange(\"notification_level\");\n      }\n    );\n  },\n\n  @discourseComputed(\"id\")\n  isUncategorizedCategory(id) {\n    return id === Site.currentProp(\"uncategorized_category_id\");\n  },\n});\n\nlet _uncategorized;\n\nCategory.reopenClass({\n  slugEncoded() {\n    let siteSettings = getOwner(this).lookup(\"site-settings:main\");\n    return siteSettings.slug_generation_method === \"encoded\";\n  },\n\n  findUncategorized() {\n    _uncategorized =\n      _uncategorized ||\n      Category.list().findBy(\n        \"id\",\n        Site.currentProp(\"uncategorized_category_id\")\n      );\n    return _uncategorized;\n  },\n\n  slugFor(category, separator = \"/\", depth = 3) {\n    if (!category) {\n      return \"\";\n    }\n\n    const parentCategory = get(category, \"parentCategory\");\n    let result = \"\";\n\n    if (parentCategory && depth > 1) {\n      result =\n        Category.slugFor(parentCategory, separator, depth - 1) + separator;\n    }\n\n    const id = get(category, \"id\"),\n      slug = get(category, \"slug\");\n\n    return !slug || slug.trim().length === 0\n      ? `${result}${id}-category`\n      : result + slug;\n  },\n\n  list() {\n    return Site.currentProp(\"categoriesList\");\n  },\n\n  listByActivity() {\n    return Site.currentProp(\"sortedCategories\");\n  },\n\n  _idMap() {\n    return Site.currentProp(\"categoriesById\");\n  },\n\n  findSingleBySlug(slug) {\n    if (!this.slugEncoded()) {\n      return Category.list().find((c) => Category.slugFor(c) === slug);\n    } else {\n      return Category.list().find(\n        (c) => Category.slugFor(c) === encodeURI(slug)\n      );\n    }\n  },\n\n  findById(id) {\n    if (!id) {\n      return;\n    }\n    return Category._idMap()[id];\n  },\n\n  findByIds(ids = []) {\n    const categories = [];\n    ids.forEach((id) => {\n      const found = Category.findById(id);\n      if (found) {\n        categories.push(found);\n      }\n    });\n    return categories;\n  },\n\n  findBySlugAndParent(slug, parentCategory) {\n    if (this.slugEncoded()) {\n      slug = encodeURI(slug);\n    }\n    return Category.list().find((category) => {\n      return (\n        category.slug === slug &&\n        (category.parentCategory || null) === parentCategory\n      );\n    });\n  },\n\n  findBySlugPath(slugPath) {\n    let category = null;\n\n    for (const slug of slugPath) {\n      category = this.findBySlugAndParent(slug, category);\n\n      if (!category) {\n        return null;\n      }\n    }\n\n    return category;\n  },\n\n  findBySlugPathWithID(slugPathWithID) {\n    let parts = slugPathWithID.split(\"/\").filter(Boolean);\n    // slugs found by star/glob pathing in ember do not automatically url decode - ensure that these are decoded\n    if (this.slugEncoded()) {\n      parts = parts.map((urlPart) => decodeURI(urlPart));\n    }\n    let category = null;\n\n    if (parts.length > 0 && parts[parts.length - 1].match(/^\\d+$/)) {\n      const id = parseInt(parts.pop(), 10);\n\n      category = Category.findById(id);\n    } else {\n      category = Category.findBySlugPath(parts);\n\n      if (\n        !category &&\n        parts.length > 0 &&\n        parts[parts.length - 1].match(/^\\d+-category/)\n      ) {\n        const id = parseInt(parts.pop(), 10);\n\n        category = Category.findById(id);\n      }\n    }\n\n    return category;\n  },\n\n  findBySlug(slug, parentSlug) {\n    const categories = Category.list();\n    let category;\n\n    if (parentSlug) {\n      const parentCategory = Category.findSingleBySlug(parentSlug);\n      if (parentCategory) {\n        if (slug === \"none\") {\n          return parentCategory;\n        }\n\n        category = categories.find((item) => {\n          return (\n            item &&\n            item.get(\"parentCategory\") === parentCategory &&\n            ((!this.slugEncoded() &&\n              Category.slugFor(item) === parentSlug + \"/\" + slug) ||\n              (this.slugEncoded() &&\n                Category.slugFor(item) ===\n                  encodeURI(parentSlug) + \"/\" + encodeURI(slug)))\n          );\n        });\n      }\n    } else {\n      category = Category.findSingleBySlug(slug);\n\n      // If we have a parent category, we need to enforce it\n      if (category && category.get(\"parentCategory\")) {\n        return;\n      }\n    }\n\n    // In case the slug didn't work, try to find it by id instead.\n    if (!category) {\n      category = categories.findBy(\"id\", parseInt(slug, 10));\n    }\n\n    return category;\n  },\n\n  reloadById(id) {\n    return ajax(`/c/${id}/show.json`);\n  },\n\n  reloadBySlugPath(slugPath) {\n    return ajax(`/c/${slugPath}/find_by_slug.json`);\n  },\n\n  reloadCategoryWithPermissions(params, store, site) {\n    return this.reloadBySlugPath(params.slug).then((result) =>\n      this._includePermissions(result.category, store, site)\n    );\n  },\n\n  _includePermissions(category, store, site) {\n    const record = store.createRecord(\"category\", category);\n    record.setupGroupsAndPermissions();\n    site.updateCategory(record);\n    return record;\n  },\n\n  search(term, opts) {\n    let limit = 5;\n    let parentCategoryId;\n\n    if (opts) {\n      if (opts.limit === 0) {\n        return [];\n      } else if (opts.limit) {\n        limit = opts.limit;\n      }\n      if (opts.parentCategoryId) {\n        parentCategoryId = opts.parentCategoryId;\n      }\n    }\n\n    const emptyTerm = term === \"\";\n    let slugTerm = term;\n\n    if (!emptyTerm) {\n      term = term.toLowerCase();\n      slugTerm = term;\n      term = term.replace(/-/g, \" \");\n    }\n\n    const categories = Category.listByActivity();\n    const length = categories.length;\n    let i;\n    let data = [];\n\n    const done = () => {\n      return data.length === limit;\n    };\n\n    const validCategoryParent = (category) => {\n      return (\n        !parentCategoryId ||\n        category.get(\"parent_category_id\") === parentCategoryId\n      );\n    };\n\n    for (i = 0; i < length && !done(); i++) {\n      const category = categories[i];\n      if (\n        ((emptyTerm && !category.get(\"parent_category_id\")) ||\n          (!emptyTerm &&\n            (category.get(\"name\").toLowerCase().indexOf(term) === 0 ||\n              category.get(\"slug\").toLowerCase().indexOf(slugTerm) === 0))) &&\n        validCategoryParent(category)\n      ) {\n        data.push(category);\n      }\n    }\n\n    if (!done()) {\n      for (i = 0; i < length && !done(); i++) {\n        const category = categories[i];\n\n        if (\n          ((!emptyTerm &&\n            category.get(\"name\").toLowerCase().indexOf(term) > 0) ||\n            category.get(\"slug\").toLowerCase().indexOf(slugTerm) > 0) &&\n          validCategoryParent(category)\n        ) {\n          if (data.indexOf(category) === -1) {\n            data.push(category);\n          }\n        }\n      }\n    }\n\n    return data.sortBy(\"read_restricted\");\n  },\n});\n\nexport default Category;\n", "import CategoryFixtures from \"discourse/tests/fixtures/category-fixtures\";\nimport I18n from \"I18n\";\nimport { click, visit } from \"@ember/test-helpers\";\nimport {\n  acceptance,\n  exists,\n  query,\n  queryAll,\n} from \"discourse/tests/helpers/qunit-helpers\";\nimport selectKit from \"discourse/tests/helpers/select-kit-helper\";\nimport { test } from \"qunit\";\n\nacceptance(\"Share and Invite modal\", function (needs) {\n  needs.user();\n\n  needs.pretender((server, helper) => {\n    server.get(\"/c/feature/find_by_slug.json\", () =>\n      helper.response(200, CategoryFixtures[\"/c/1/show.json\"])\n    );\n  });\n\n  test(\"Topic footer button\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button exists\"\n    );\n\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n    assert.notOk(\n      exists(\"#modal-alert.alert-warning\"),\n      \"it does not show the alert with restricted groups\"\n    );\n\n    assert.ok(\n      queryAll(\"input.invite-link\")\n        .val()\n        .includes(\"/t/internationalization-localization/280?u=eviltrout\"),\n      \"it shows the topic sharing url\"\n    );\n\n    assert.ok(\n      exists(\".link-share-actions .invite\"),\n      \"it shows the invite button\"\n    );\n  });\n\n  test(\"Post date link\", async function (assert) {\n    await visit(\"/t/short-topic-with-two-posts/54077\");\n    await click(\"#post_2 .post-info.post-date a\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the share modal\");\n  });\n\n  test(\"Share topic in a restricted category\", async function (assert) {\n    await visit(\"/t/topic-in-restricted-group/2481\");\n\n    assert.ok(\n      exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button exists\"\n    );\n\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n    assert.ok(\n      exists(\"#modal-alert.alert-warning\"),\n      \"it shows restricted warning\"\n    );\n    assert.strictEqual(\n      query(\"#modal-alert.alert-warning\").innerText,\n      I18n.t(\"topic.share.restricted_groups\", {\n        count: 1,\n        groupNames: \"moderators\",\n      }),\n      \"it shows correct restricted group name\"\n    );\n  });\n});\n\nacceptance(\"Share and Invite modal - mobile\", function (needs) {\n  needs.user();\n  needs.mobileView();\n\n  needs.pretender((server, helper) => {\n    server.get(\"/c/feature/find_by_slug.json\", () =>\n      helper.response(200, CategoryFixtures[\"/c/1/show.json\"])\n    );\n  });\n\n  test(\"Topic footer mobile button\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      !exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button doesn\u2019t exist\"\n    );\n\n    const subject = selectKit(\".topic-footer-mobile-dropdown\");\n    await subject.expand();\n    await subject.selectRowByValue(\"share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n  });\n});\n\nacceptance(\"Share url with badges disabled - desktop\", function (needs) {\n  needs.user();\n  needs.settings({ enable_badges: false });\n\n  needs.pretender((server, helper) => {\n    server.get(\"/c/feature/find_by_slug.json\", () =>\n      helper.response(200, CategoryFixtures[\"/c/1/show.json\"])\n    );\n  });\n\n  test(\"topic footer button - badges disabled - desktop\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.notOk(\n      queryAll(\"input.invite-link\").val().includes(\"?u=eviltrout\"),\n      \"it doesn't add the username param when badges are disabled\"\n    );\n  });\n});\n", "import {\n  acceptance,\n  chromeTest,\n  count,\n  exists,\n  query,\n  queryAll,\n  selectText,\n  visible,\n} from \"discourse/tests/helpers/qunit-helpers\";\nimport {\n  click,\n  currentURL,\n  fillIn,\n  triggerKeyEvent,\n  visit,\n} from \"@ember/test-helpers\";\nimport I18n from \"I18n\";\nimport selectKit from \"discourse/tests/helpers/select-kit-helper\";\nimport { test } from \"qunit\";\nimport { withPluginApi } from \"discourse/lib/plugin-api\";\nimport topicFixtures from \"discourse/tests/fixtures/topic\";\nimport { cloneJSON } from \"discourse-common/lib/object\";\nimport CategoryFixtures from \"discourse/tests/fixtures/category-fixtures\";\n\nacceptance(\"Topic\", function (needs) {\n  needs.user();\n  needs.pretender((server, helper) => {\n    server.get(\"/c/feature/find_by_slug.json\", () => {\n      return helper.response(200, CategoryFixtures[\"/c/1/show.json\"]);\n    });\n    server.put(\"/posts/398/wiki\", () => {\n      return helper.response({});\n    });\n  });\n\n  test(\"Reply as new topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"button.share:nth-of-type(1)\");\n    await click(\"button.new-topic\");\n\n    assert.ok(exists(\".d-editor-input\"), \"the composer input is visible\");\n\n    assert.strictEqual(\n      queryAll(\".d-editor-input\").val().trim(),\n      `Continuing the discussion from [Internationalization / localization](${window.location.origin}/t/internationalization-localization/280):`,\n      \"it fills composer with the ring string\"\n    );\n    assert.strictEqual(\n      selectKit(\".category-chooser\").header().value(),\n      \"2\",\n      \"it fills category selector with the right category\"\n    );\n  });\n\n  test(\"Reply as new message\", async function (assert) {\n    await visit(\"/t/pm-for-testing/12\");\n    await click(\"button.share:nth-of-type(1)\");\n    await click(\"button.new-topic\");\n\n    assert.ok(exists(\".d-editor-input\"), \"the composer input is visible\");\n\n    assert.strictEqual(\n      queryAll(\".d-editor-input\").val().trim(),\n      `Continuing the discussion from [PM for testing](${window.location.origin}/t/pm-for-testing/12):`,\n      \"it fills composer with the ring string\"\n    );\n\n    const privateMessageUsers = selectKit(\"#private-message-users\");\n    assert.strictEqual(\n      privateMessageUsers.header().value(),\n      \"someguy,test,Group\",\n      \"it fills up the composer correctly\"\n    );\n  });\n\n  test(\"Share Modal\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:first-child button.share\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the share modal\");\n  });\n\n  test(\"Showing and hiding the edit controls\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    assert.ok(exists(\"#edit-title\"), \"it shows the editing controls\");\n    assert.ok(\n      !exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link is not shown\"\n    );\n\n    await fillIn(\"#edit-title\", \"this is the new title\");\n    await click(\"#topic-title .cancel-edit\");\n    assert.ok(!exists(\"#edit-title\"), \"it hides the editing controls\");\n  });\n\n  test(\"Updating the topic title and category\", async function (assert) {\n    const categoryChooser = selectKit(\".title-wrapper .category-chooser\");\n\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\"#topic-title .d-icon-pencil-alt\");\n    await fillIn(\"#edit-title\", \"this is the new title\");\n    await categoryChooser.expand();\n    await categoryChooser.selectRowByValue(4);\n    await click(\"#topic-title .submit-edit\");\n\n    assert.strictEqual(\n      queryAll(\"#topic-title .badge-category\").text(),\n      \"faq\",\n      \"it displays the new category\"\n    );\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"this is the new title\",\n      \"it displays the new title\"\n    );\n  });\n\n  test(\"Marking a topic as wiki\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(!exists(\"a.wiki\"), \"it does not show the wiki icon\");\n\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".topic-post:nth-of-type(1) button.show-post-admin-menu\");\n    await click(\".btn.wiki\");\n\n    assert.strictEqual(count(\"button.wiki\"), 1, \"it shows the wiki icon\");\n  });\n\n  test(\"Visit topic routes\", async function (assert) {\n    await visit(\"/t/12\");\n\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"PM for testing\",\n      \"it routes to the right topic\"\n    );\n\n    await visit(\"/t/280/20\");\n\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"Internationalization / localization\",\n      \"it routes to the right topic\"\n    );\n  });\n\n  test(\"Updating the topic title with emojis\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"emojis title :bike: :blonde_woman:t6:\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\").html().trim().indexOf(\"bike.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Updating the topic title with unicode emojis\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"emojis title \ud83d\udc68\u200d\ud83c\udf3e\ud83d\ude4f\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\").html().trim().indexOf(\"man_farmer.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Updating the topic title with unicode emojis without whitespaces\", async function (assert) {\n    this.siteSettings.enable_inline_emoji_translation = true;\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"Test\ud83d\ude42Title\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\")\n        .html()\n        .trim()\n        .indexOf(\"slightly_smiling_face.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Suggested topics\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.strictEqual(\n      queryAll(\"#suggested-topics .suggested-topics-title\").text().trim(),\n      I18n.t(\"suggested_topics.title\")\n    );\n  });\n\n  test(\"Deleting a topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".widget-button.delete\");\n    await click(\".toggle-admin-menu\");\n    assert.ok(exists(\".topic-admin-recover\"), \"it shows the recover button\");\n  });\n\n  test(\"Deleting a popular topic displays confirmation modal\", async function (assert) {\n    this.siteSettings.min_topic_views_for_delete_confirm = 10;\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".widget-button.delete\");\n    assert.ok(\n      visible(\".delete-topic-confirm-modal\"),\n      \"it shows the delete confirmation modal\"\n    );\n\n    await click(\".delete-topic-confirm-modal .btn-primary\");\n    assert.ok(\n      !visible(\".delete-topic-confirm-modal\"),\n      \"it hides the delete confirmation modal\"\n    );\n    await click(\".widget-button.delete\");\n    await click(\".delete-topic-confirm-modal .btn-danger\");\n    await click(\".toggle-admin-menu\");\n    assert.ok(exists(\".topic-admin-recover\"), \"it shows the recover button\");\n  });\n\n  test(\"Group category moderator posts\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    assert.ok(exists(\".category-moderator\"), \"it has a class applied\");\n    assert.ok(exists(\".d-icon-shield-alt\"), \"it shows an icon\");\n  });\n});\n\nacceptance(\"Topic featured links\", function (needs) {\n  needs.user();\n  needs.settings({\n    topic_featured_link_enabled: true,\n    max_topic_title_length: 80,\n    exclude_rel_nofollow_domains: \"example.com\",\n  });\n\n  test(\"remove nofollow attribute\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n\n    const link = queryAll(\".title-wrapper .topic-featured-link\");\n    assert.strictEqual(link.text(), \" example.com\");\n    assert.strictEqual(link.attr(\"rel\"), \"ugc\");\n  });\n\n  test(\"remove featured link\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n    assert.ok(\n      exists(\".title-wrapper .topic-featured-link\"),\n      \"link is shown with topic title\"\n    );\n\n    await click(\".title-wrapper .edit-topic\");\n    assert.ok(\n      exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link\"\n    );\n\n    // TODO: decide if we want to test this, test is flaky so it\n    // was commented out.\n    // If not fixed by May 2021, delete this code block\n    //\n    //await click(\".title-wrapper .remove-featured-link\");\n    //await click(\".title-wrapper .submit-edit\");\n    //assert.ok(!exists(\".title-wrapper .topic-featured-link\"), \"link is gone\");\n  });\n\n  test(\"Converting to a public topic\", async function (assert) {\n    await visit(\"/t/test-pm/34\");\n    assert.ok(exists(\".private_message\"));\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-convert button\");\n\n    let categoryChooser = selectKit(\n      \".convert-to-public-topic .category-chooser\"\n    );\n    await categoryChooser.expand();\n    await categoryChooser.selectRowByValue(21);\n\n    await click(\".convert-to-public-topic .btn-primary\");\n    assert.ok(!exists(\".private_message\"));\n  });\n\n  test(\"Unpinning unlisted topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n    await click(\".make-banner\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-visible .btn\");\n\n    await click(\".toggle-admin-menu\");\n    assert.ok(\n      exists(\".topic-admin-pin\"),\n      \"it should show the multi select menu\"\n    );\n  });\n\n  test(\"selecting posts\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-multi-select .btn\");\n\n    assert.ok(\n      exists(\".selected-posts:not(.hidden)\"),\n      \"it should show the multi select menu\"\n    );\n\n    assert.ok(\n      exists(\".select-all\"),\n      \"it should allow users to select all the posts\"\n    );\n  });\n\n  test(\"select below\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-multi-select .btn\");\n    await click(\"#post_3 .select-below\");\n\n    assert.ok(\n      queryAll(\".selected-posts\")\n        .html()\n        .includes(I18n.t(\"topic.multi_select.description\", { count: 18 })),\n      \"it should select the right number of posts\"\n    );\n\n    await click(\"#post_2 .select-below\");\n\n    assert.ok(\n      queryAll(\".selected-posts\")\n        .html()\n        .includes(I18n.t(\"topic.multi_select.description\", { count: 19 })),\n      \"it should select the right number of posts\"\n    );\n  });\n\n  test(\"View Hidden Replies\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".gap\");\n\n    assert.ok(!exists(\".gap\"), \"it hides gap\");\n  });\n\n  chromeTest(\n    \"Quoting a quote keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await click(\".quote-button .insert-quote\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  chromeTest(\n    \"Quoting a quote of a different topic keeps the original topic title\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_9 blockquote\");\n      await click(\".quote-button .insert-quote\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf(\n            'quote=\"A new topic with a link to another topic, post:3, topic:62\"'\n          ) !== -1\n      );\n    }\n  );\n\n  chromeTest(\n    \"Quoting a quote with the Reply button keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await click(\".reply\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  // Using J/K on Firefox clean the text selection, so this won't work there\n  chromeTest(\n    \"Quoting a quote with replyAsNewTopic keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await triggerKeyEvent(document, \"keypress\", \"j\".charCodeAt(0));\n      await triggerKeyEvent(document, \"keypress\", \"t\".charCodeAt(0));\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  test(\"Quoting by selecting text can mark the quote as full\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await selectText(\"#post_5 .cooked\");\n    await click(\".quote-button .insert-quote\");\n\n    assert.ok(\n      queryAll(\".d-editor-input\")\n        .val()\n        .indexOf('quote=\"pekka, post:5, topic:280, full:true\"') !== -1\n    );\n  });\n});\n\nacceptance(\"Topic featured links\", function (needs) {\n  needs.user();\n  needs.settings({\n    topic_featured_link_enabled: true,\n    max_topic_title_length: 80,\n  });\n\n  test(\"remove featured link\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n    assert.ok(\n      exists(\".title-wrapper .topic-featured-link\"),\n      \"link is shown with topic title\"\n    );\n\n    await click(\".title-wrapper .edit-topic\");\n    assert.ok(\n      exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link\"\n    );\n  });\n});\n\nacceptance(\"Topic with title decorated\", function (needs) {\n  needs.user();\n  needs.hooks.beforeEach(() => {\n    withPluginApi(\"0.8.40\", (api) => {\n      api.decorateTopicTitle((topic, node, topicTitleType) => {\n        node.innerText = `${node.innerText}-${topic.id}-${topicTitleType}`;\n      });\n    });\n  });\n\n  test(\"Decorate topic title\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      query(\".fancy-title\").innerText.endsWith(\"-280-topic-title\"),\n      \"it decorates topic title\"\n    );\n\n    assert.ok(\n      query(\".raw-topic-link:nth-child(1)\").innerText.endsWith(\n        \"-27331-topic-list-item-title\"\n      ),\n      \"it decorates topic list item title\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as an admin\", function (needs) {\n  needs.user({ admin: true });\n\n  test(\"Admin pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      exists(\".make-banner\"),\n      \"it should show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as a staff member\", function (needs) {\n  needs.user({ moderator: true, admin: false, trust_level: 2 });\n\n  test(\"Staff pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      exists(\".make-banner\"),\n      \"it should show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as a group moderator\", function (needs) {\n  needs.user({ moderator: false, admin: false, trust_level: 1 });\n\n  test(\"Group category moderator pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      !exists(\".make-banner\"),\n      \"it should not show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic last visit line\", function (needs) {\n  needs.user({ moderator: false, admin: false, trust_level: 1 });\n\n  test(\"visit topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n\n    assert.ok(\n      exists(\".topic-post-visited-line.post-10\"),\n      \"shows the last visited line on the right post\"\n    );\n\n    await visit(\"/t/-/9\");\n\n    assert.ok(\n      !exists(\".topic-post-visited-line\"),\n      \"does not show last visited line if post is the last post\"\n    );\n  });\n});\n\nacceptance(\"Topic filter replies to post number\", function (needs) {\n  needs.settings({\n    enable_filtered_replies_view: true,\n  });\n\n  test(\"visit topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n\n    assert.equal(\n      query(\"#post_3 .show-replies\").title,\n      I18n.t(\"post.filtered_replies_hint\", { count: 3 }),\n      \"it displays the right title for filtering by replies\"\n    );\n\n    await visit(\"/\");\n    await visit(\"/t/-/280?replies_to_post_number=3\");\n\n    assert.equal(\n      query(\"#post_3 .show-replies\").title,\n      I18n.t(\"post.view_all_posts\"),\n      \"it displays the right title when filtered by replies\"\n    );\n  });\n});\n\nacceptance(\"Navigating between topics\", function (needs) {\n  needs.pretender((server, helper) => {\n    const topicResponse = cloneJSON(topicFixtures[\"/t/280/1.json\"]);\n    const firstPost = topicResponse.post_stream.posts[0];\n    firstPost.cooked += `\\n<a class='same-topic-slugless' href='/t/280'>Link 1</a>`;\n    firstPost.cooked += `\\n<a class='same-topic-slugless-post' href='/t/280/3'>Link 2</a>`;\n    firstPost.cooked += `\\n<a class='diff-topic-slugless' href='/t/28830'>Link 3</a>`;\n    firstPost.cooked += `\\n<a class='diff-topic-slugless-post' href='/t/28830/1'>Link 4</a>`;\n    firstPost.cooked += `\\n<a class='by-post-id' href='/p/${firstPost.id}'>Link to Post</a>`;\n\n    server.get(\"/t/280.json\", () => helper.response(topicResponse));\n    server.get(\"/t/280/:post_number.json\", () =>\n      helper.response(topicResponse)\n    );\n  });\n\n  test(\"clicking slug-less URLs within the same topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.same-topic-slugless\");\n    assert.ok(currentURL().includes(\"/280\"));\n\n    await click(\"a.same-topic-slugless-post\");\n    assert.ok(currentURL().includes(\"/280\"));\n  });\n\n  test(\"clicking slug-less URLs to a different topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.diff-topic-slugless\");\n    assert.ok(currentURL().includes(\"/28830\"));\n\n    await visit(\"/t/-/280\");\n    await click(\"a.diff-topic-slugless-post\");\n    assert.ok(currentURL().includes(\"/28830\"));\n  });\n\n  test(\"clicking post URLs\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.by-post-id\");\n    assert.ok(currentURL().includes(\"/280\"));\n  });\n});\n", "# frozen_string_literal: true\n\nclass CategoriesController < ApplicationController\n\n  requires_login except: [:index, :categories_and_latest, :categories_and_top, :show, :redirect, :find_by_slug]\n\n  before_action :fetch_category, only: [:show, :update, :destroy]\n  before_action :initialize_staff_action_logger, only: [:create, :update, :destroy]\n  skip_before_action :check_xhr, only: [:index, :categories_and_latest, :categories_and_top, :redirect]\n\n  SYMMETRICAL_CATEGORIES_TO_TOPICS_FACTOR = 1.5\n  MIN_CATEGORIES_TOPICS = 5\n\n  def redirect\n    return if handle_permalink(\"/category/#{params[:path]}\")\n    redirect_to path(\"/c/#{params[:path]}\")\n  end\n\n  def index\n    discourse_expires_in 1.minute\n\n    @description = SiteSetting.site_description\n\n    parent_category = Category.find_by_slug(params[:parent_category_id]) || Category.find_by(id: params[:parent_category_id].to_i)\n\n    include_subcategories = SiteSetting.desktop_category_page_style == \"subcategories_with_featured_topics\" ||\n      params[:include_subcategories] == \"true\"\n\n    category_options = {\n      is_homepage: current_homepage == \"categories\",\n      parent_category_id: params[:parent_category_id],\n      include_topics: include_topics(parent_category),\n      include_subcategories: include_subcategories\n    }\n\n    @category_list = CategoryList.new(guardian, category_options)\n\n    if category_options[:is_homepage] && SiteSetting.short_site_description.present?\n      @title = \"#{SiteSetting.title} - #{SiteSetting.short_site_description}\"\n    elsif !category_options[:is_homepage]\n      @title = \"#{I18n.t('js.filters.categories.title')} - #{SiteSetting.title}\"\n    end\n\n    respond_to do |format|\n      format.html do\n        store_preloaded(@category_list.preload_key, MultiJson.dump(CategoryListSerializer.new(@category_list, scope: guardian)))\n\n        style = SiteSetting.desktop_category_page_style\n        topic_options = {\n          per_page: CategoriesController.topics_per_page,\n          no_definitions: true\n        }\n\n        if style == \"categories_and_latest_topics\"\n          @topic_list = TopicQuery.new(current_user, topic_options).list_latest\n          @topic_list.more_topics_url = url_for(public_send(\"latest_path\"))\n        elsif style == \"categories_and_top_topics\"\n          @topic_list = TopicQuery.new(current_user, topic_options).list_top_for(SiteSetting.top_page_default_timeframe.to_sym)\n          @topic_list.more_topics_url = url_for(public_send(\"top_path\"))\n        end\n\n        if @topic_list.present? && @topic_list.topics.present?\n          store_preloaded(\n            @topic_list.preload_key,\n            MultiJson.dump(TopicListSerializer.new(@topic_list, scope: guardian))\n          )\n        end\n\n        render\n      end\n\n      format.json { render_serialized(@category_list, CategoryListSerializer) }\n    end\n  end\n\n  def categories_and_latest\n    categories_and_topics(:latest)\n  end\n\n  def categories_and_top\n    categories_and_topics(:top)\n  end\n\n  def move\n    guardian.ensure_can_create_category!\n\n    params.require(\"category_id\")\n    params.require(\"position\")\n\n    if category = Category.find(params[\"category_id\"])\n      category.move_to(params[\"position\"].to_i)\n      render json: success_json\n    else\n      render status: 500, json: failed_json\n    end\n  end\n\n  def reorder\n    guardian.ensure_can_create_category!\n\n    params.require(:mapping)\n    change_requests = MultiJson.load(params[:mapping])\n    by_category = Hash[change_requests.map { |cat, pos| [Category.find(cat.to_i), pos] }]\n\n    unless guardian.is_admin?\n      raise Discourse::InvalidAccess unless by_category.keys.all? { |c| guardian.can_see_category? c }\n    end\n\n    by_category.each do |cat, pos|\n      cat.position = pos\n      cat.save! if cat.will_save_change_to_position?\n    end\n\n    render json: success_json\n  end\n\n  def show\n    guardian.ensure_can_see!(@category)\n\n    if Category.topic_create_allowed(guardian).where(id: @category.id).exists?\n      @category.permission = CategoryGroup.permission_types[:full]\n    end\n    render_serialized(@category, CategorySerializer)\n  end\n\n  def create\n    guardian.ensure_can_create!(Category)\n    position = category_params.delete(:position)\n\n    @category =\n      begin\n        Category.new(required_create_params.merge(user: current_user))\n      rescue ArgumentError => e\n        return render json: { errors: [e.message] }, status: 422\n      end\n\n    if @category.save\n      @category.move_to(position.to_i) if position\n\n      Scheduler::Defer.later \"Log staff action create category\" do\n        @staff_action_logger.log_category_creation(@category)\n      end\n\n      render_serialized(@category, CategorySerializer)\n    else\n      render_json_error(@category)\n    end\n  end\n\n  def update\n    guardian.ensure_can_edit!(@category)\n\n    json_result(@category, serializer: CategorySerializer) do |cat|\n      old_category_params = category_params.dup\n\n      cat.move_to(category_params[:position].to_i) if category_params[:position]\n      category_params.delete(:position)\n\n      old_custom_fields = cat.custom_fields.dup\n      if category_params[:custom_fields]\n        category_params[:custom_fields].each do |key, value|\n          if value.present?\n            cat.custom_fields[key] = value\n          else\n            cat.custom_fields.delete(key)\n          end\n        end\n      end\n      category_params.delete(:custom_fields)\n\n      # properly null the value so the database constraint doesn't catch us\n      category_params[:email_in] = nil if category_params[:email_in]&.blank?\n      category_params[:minimum_required_tags] = 0 if category_params[:minimum_required_tags]&.blank?\n\n      old_permissions = cat.permissions_params\n\n      if result = cat.update(category_params)\n        Scheduler::Defer.later \"Log staff action change category settings\" do\n          @staff_action_logger.log_category_settings_change(\n            @category,\n            old_category_params,\n            old_permissions: old_permissions,\n            old_custom_fields: old_custom_fields\n          )\n        end\n      end\n\n      if result\n        DiscourseEvent.trigger(:category_updated, cat)\n      end\n\n      result\n    end\n  end\n\n  def update_slug\n    @category = Category.find(params[:category_id].to_i)\n    guardian.ensure_can_edit!(@category)\n\n    custom_slug = params[:slug].to_s\n\n    if custom_slug.blank?\n      error = @category.errors.full_message(:slug, I18n.t('errors.messages.blank'))\n      render_json_error(error)\n    elsif @category.update(slug: custom_slug)\n      render json: success_json\n    else\n      render_json_error(@category)\n    end\n  end\n\n  def set_notifications\n    category_id = params[:category_id].to_i\n    notification_level = params[:notification_level].to_i\n\n    CategoryUser.set_notification_level_for_category(current_user, notification_level, category_id)\n    render json: success_json.merge({ indirectly_muted_category_ids: CategoryUser.indirectly_muted_category_ids(current_user) })\n  end\n\n  def destroy\n    guardian.ensure_can_delete!(@category)\n    @category.destroy\n\n    Scheduler::Defer.later \"Log staff action delete category\" do\n      @staff_action_logger.log_category_deletion(@category)\n    end\n\n    render json: success_json\n  end\n\n  def find_by_slug\n    params.require(:category_slug)\n    @category = Category.find_by_slug_path(params[:category_slug].split('/'))\n\n    raise Discourse::NotFound unless @category.present?\n\n    if !guardian.can_see?(@category)\n      if SiteSetting.detailed_404 && group = @category.access_category_via_group\n        raise Discourse::InvalidAccess.new(\n          'not in group',\n          @category,\n          custom_message: 'not_in_group.title_category',\n          custom_message_params: { group: group.name },\n          group: group\n        )\n      else\n        raise Discourse::NotFound\n      end\n    end\n\n    @category.permission = CategoryGroup.permission_types[:full] if Category.topic_create_allowed(guardian).where(id: @category.id).exists?\n    render_serialized(@category, CategorySerializer)\n  end\n\n  private\n\n  def self.topics_per_page\n    return SiteSetting.categories_topics if SiteSetting.categories_topics > 0\n\n    count = Category.where(parent_category: nil).count\n    count = (SYMMETRICAL_CATEGORIES_TO_TOPICS_FACTOR * count).to_i\n    count > MIN_CATEGORIES_TOPICS ? count : MIN_CATEGORIES_TOPICS\n  end\n\n  def categories_and_topics(topics_filter)\n    discourse_expires_in 1.minute\n\n    category_options = {\n      is_homepage: current_homepage == \"categories\",\n      parent_category_id: params[:parent_category_id],\n      include_topics: false\n    }\n\n    topic_options = {\n      per_page: CategoriesController.topics_per_page,\n      no_definitions: true\n    }\n\n    result = CategoryAndTopicLists.new\n    result.category_list = CategoryList.new(guardian, category_options)\n\n    if topics_filter == :latest\n      result.topic_list = TopicQuery.new(current_user, topic_options).list_latest\n    elsif topics_filter == :top\n      result.topic_list = TopicQuery.new(current_user, topic_options).list_top_for(\n        SiteSetting.top_page_default_timeframe.to_sym\n      )\n    end\n\n    render_serialized(result, CategoryAndTopicListsSerializer, root: false)\n  end\n\n  def required_param_keys\n    [:name]\n  end\n\n  def required_create_params\n    required_param_keys.each do |key|\n      params.require(key)\n    end\n    category_params\n  end\n\n  def category_params\n    @category_params ||= begin\n      if p = params[:permissions]\n        p.each do |k, v|\n          p[k] = v.to_i\n        end\n      end\n\n      if SiteSetting.tagging_enabled\n        params[:allowed_tags] = params[:allowed_tags].presence || [] if params[:allowed_tags]\n        params[:allowed_tag_groups] = params[:allowed_tag_groups].presence || [] if params[:allowed_tag_groups]\n        params[:required_tag_groups] = params[:required_tag_groups].presence || [] if params[:required_tag_groups]\n      end\n\n      if SiteSetting.enable_category_group_moderation?\n        params[:reviewable_by_group_id] = Group.where(name: params[:reviewable_by_group_name]).pluck_first(:id) if params[:reviewable_by_group_name]\n      end\n\n      result = params.permit(\n        *required_param_keys,\n        :position,\n        :name,\n        :color,\n        :text_color,\n        :email_in,\n        :email_in_allow_strangers,\n        :mailinglist_mirror,\n        :all_topics_wiki,\n        :allow_unlimited_owner_edits_on_first_post,\n        :default_slow_mode_seconds,\n        :parent_category_id,\n        :auto_close_hours,\n        :auto_close_based_on_last_post,\n        :uploaded_logo_id,\n        :uploaded_background_id,\n        :slug,\n        :allow_badges,\n        :topic_template,\n        :sort_order,\n        :sort_ascending,\n        :topic_featured_link_allowed,\n        :show_subcategory_list,\n        :num_featured_topics,\n        :default_view,\n        :subcategory_list_style,\n        :default_top_period,\n        :minimum_required_tags,\n        :navigate_to_first_post_after_read,\n        :search_priority,\n        :allow_global_tags,\n        :read_only_banner,\n        :default_list_filter,\n        :reviewable_by_group_id,\n        custom_fields: [params[:custom_fields].try(:keys)],\n        permissions: [*p.try(:keys)],\n        allowed_tags: [],\n        allowed_tag_groups: [],\n        required_tag_groups: [:name, :min_count]\n      )\n\n      if result[:required_tag_groups] && !result[:required_tag_groups].is_a?(Array)\n        raise Discourse::InvalidParameters.new(:required_tag_groups)\n      end\n\n      result\n    end\n  end\n\n  def fetch_category\n    @category = Category.find_by_slug(params[:id]) || Category.find_by(id: params[:id].to_i)\n  end\n\n  def initialize_staff_action_logger\n    @staff_action_logger = StaffActionLogger.new(current_user)\n  end\n\n  def include_topics(parent_category = nil)\n    style = SiteSetting.desktop_category_page_style\n    view_context.mobile_view? ||\n      params[:include_topics] ||\n      (parent_category && parent_category.subcategory_list_includes_topics?) ||\n      style == \"categories_with_featured_topics\" ||\n      style == \"subcategories_with_featured_topics\" ||\n      style == \"categories_boxes_with_topics\" ||\n      style == \"categories_with_top_topics\"\n  end\nend\n", "# frozen_string_literal: true\n\nclass CategorySerializer < SiteCategorySerializer\n\n  attributes :read_restricted,\n             :available_groups,\n             :auto_close_hours,\n             :auto_close_based_on_last_post,\n             :group_permissions,\n             :position,\n             :email_in,\n             :email_in_allow_strangers,\n             :mailinglist_mirror,\n             :all_topics_wiki,\n             :allow_unlimited_owner_edits_on_first_post,\n             :can_delete,\n             :cannot_delete_reason,\n             :is_special,\n             :allow_badges,\n             :custom_fields,\n             :topic_featured_link_allowed,\n             :search_priority,\n             :reviewable_by_group_name,\n             :default_slow_mode_seconds\n\n  def reviewable_by_group_name\n    object.reviewable_by_group.name\n  end\n\n  def include_reviewable_by_group_name?\n    SiteSetting.enable_category_group_moderation? && object.reviewable_by_group_id.present?\n  end\n\n  def group_permissions\n    @group_permissions ||= begin\n      perms = object\n        .category_groups\n        .joins(:group)\n        .includes(:group)\n        .merge(Group.visible_groups(scope&.user, \"groups.name ASC\", include_everyone: true))\n        .map do |cg|\n          {\n            permission_type: cg.permission_type,\n            group_name: cg.group.name\n          }\n        end\n\n      if perms.length == 0 && !object.read_restricted\n        perms << { permission_type: CategoryGroup.permission_types[:full], group_name: Group[:everyone]&.name.presence || :everyone }\n      end\n\n      perms\n    end\n  end\n\n  def include_available_groups?\n    scope && scope.can_edit?(object)\n  end\n\n  def available_groups\n    Group.order(:name).pluck(:name) - group_permissions.map { |g| g[:group_name] }\n  end\n\n  def can_delete\n    true\n  end\n\n  def include_is_special?\n    [SiteSetting.meta_category_id, SiteSetting.staff_category_id, SiteSetting.uncategorized_category_id]\n      .include? object.id\n  end\n\n  def is_special\n    true\n  end\n\n  def include_can_delete?\n    scope && scope.can_delete?(object)\n  end\n\n  def include_cannot_delete_reason?\n    !include_can_delete? && scope && scope.can_edit?(object)\n  end\n\n  def include_email_in?\n    scope && scope.can_edit?(object)\n  end\n\n  def include_email_in_allow_strangers?\n    scope && scope.can_edit?(object)\n  end\n\n  def include_notification_level?\n    scope && scope.user\n  end\n\n  def notification_level\n    user = scope && scope.user\n    object.notification_level ||\n     (user && CategoryUser.where(user: user, category: object).first.try(:notification_level)) ||\n     CategoryUser.default_notification_level\n  end\n\n  def custom_fields\n    object.custom_fields\n  end\n\n  def include_custom_fields?\n    true\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"sidekiq/web\"\nrequire \"mini_scheduler/web\"\n\n# The following constants have been replaced with `RouteFormat` and are deprecated.\nUSERNAME_ROUTE_FORMAT = /[%\\w.\\-]+?/ unless defined? USERNAME_ROUTE_FORMAT\nBACKUP_ROUTE_FORMAT = /.+\\.(sql\\.gz|tar\\.gz|tgz)/i unless defined? BACKUP_ROUTE_FORMAT\n\nDiscourse::Application.routes.draw do\n  def patch(*) end # Disable PATCH requests\n\n  scope path: nil, constraints: { format: /(json|html|\\*\\/\\*)/ } do\n    relative_url_root = (defined?(Rails.configuration.relative_url_root) && Rails.configuration.relative_url_root) ? Rails.configuration.relative_url_root + '/' : '/'\n\n    match \"/404\", to: \"exceptions#not_found\", via: [:get, :post]\n    get \"/404-body\" => \"exceptions#not_found_body\"\n\n    get \"/bootstrap\" => \"bootstrap#index\"\n\n    post \"webhooks/aws\" => \"webhooks#aws\"\n    post \"webhooks/mailgun\"  => \"webhooks#mailgun\"\n    post \"webhooks/mailjet\"  => \"webhooks#mailjet\"\n    post \"webhooks/mandrill\" => \"webhooks#mandrill\"\n    post \"webhooks/postmark\" => \"webhooks#postmark\"\n    post \"webhooks/sendgrid\" => \"webhooks#sendgrid\"\n    post \"webhooks/sparkpost\" => \"webhooks#sparkpost\"\n\n    scope path: nil, constraints: { format: /.*/ } do\n      if Rails.env.development?\n        mount Sidekiq::Web => \"/sidekiq\"\n        mount Logster::Web => \"/logs\"\n      else\n        # only allow sidekiq in master site\n        mount Sidekiq::Web => \"/sidekiq\", constraints: AdminConstraint.new(require_master: true)\n        mount Logster::Web => \"/logs\", constraints: AdminConstraint.new\n      end\n    end\n\n    resources :about do\n      collection do\n        get \"live_post_counts\"\n      end\n    end\n\n    get \"finish-installation\" => \"finish_installation#index\"\n    get \"finish-installation/register\" => \"finish_installation#register\"\n    post \"finish-installation/register\" => \"finish_installation#register\"\n    get \"finish-installation/confirm-email\" => \"finish_installation#confirm_email\"\n    put \"finish-installation/resend-email\" => \"finish_installation#resend_email\"\n\n    get \"pub/check-slug\" => \"published_pages#check_slug\"\n    get \"pub/by-topic/:topic_id\" => \"published_pages#details\"\n    put \"pub/by-topic/:topic_id\" => \"published_pages#upsert\"\n    delete \"pub/by-topic/:topic_id\" => \"published_pages#destroy\"\n    get \"pub/:slug\" => \"published_pages#show\"\n\n    resources :directory_items\n\n    get \"site\" => \"site#site\"\n    namespace :site do\n      get \"settings\"\n      get \"custom_html\"\n      get \"banner\"\n      get \"emoji\"\n    end\n\n    get \"site/basic-info\" => 'site#basic_info'\n    get \"site/statistics\" => 'site#statistics'\n\n    get \"srv/status\" => \"forums#status\"\n\n    get \"wizard\" => \"wizard#index\"\n    get 'wizard/steps' => 'steps#index'\n    get 'wizard/steps/:id' => \"wizard#index\"\n    put 'wizard/steps/:id' => \"steps#update\"\n\n    namespace :admin, constraints: StaffConstraint.new do\n      get \"\" => \"admin#index\"\n\n      get 'plugins' => 'plugins#index'\n\n      resources :site_settings, constraints: AdminConstraint.new do\n        collection do\n          get \"category/:id\" => \"site_settings#index\"\n        end\n\n        put \"user_count\" => \"site_settings#user_count\"\n      end\n\n      get \"reports\" => \"reports#index\"\n      get \"reports/bulk\" => \"reports#bulk\"\n      get \"reports/:type\" => \"reports#show\"\n\n      resources :groups, only: [:create] do\n        member do\n          put \"owners\" => \"groups#add_owners\"\n          delete \"owners\" => \"groups#remove_owner\"\n          put \"primary\" => \"groups#set_primary\"\n        end\n      end\n      resources :groups, except: [:create], constraints: AdminConstraint.new do\n        collection do\n          put \"automatic_membership_count\" => \"groups#automatic_membership_count\"\n        end\n      end\n\n      get \"groups/:type\" => \"groups#show\", constraints: AdminConstraint.new\n      get \"groups/:type/:id\" => \"groups#show\", constraints: AdminConstraint.new\n\n      resources :users, id: RouteFormat.username, except: [:show] do\n        collection do\n          get \"list\" => \"users#index\"\n          get \"list/:query\" => \"users#index\"\n          get \"ip-info\" => \"users#ip_info\"\n          delete \"delete-others-with-same-ip\" => \"users#delete_other_accounts_with_same_ip\"\n          get \"total-others-with-same-ip\" => \"users#total_other_accounts_with_same_ip\"\n          put \"approve-bulk\" => \"users#approve_bulk\"\n        end\n        delete \"penalty_history\", constraints: AdminConstraint.new\n        put \"suspend\"\n        put \"delete_posts_batch\"\n        put \"unsuspend\"\n        put \"revoke_admin\", constraints: AdminConstraint.new\n        put \"grant_admin\", constraints: AdminConstraint.new\n        put \"revoke_moderation\", constraints: AdminConstraint.new\n        put \"grant_moderation\", constraints: AdminConstraint.new\n        put \"approve\"\n        post \"log_out\", constraints: AdminConstraint.new\n        put \"activate\"\n        put \"deactivate\"\n        put \"silence\"\n        put \"unsilence\"\n        put \"trust_level\"\n        put \"trust_level_lock\"\n        put \"primary_group\"\n        post \"groups\" => \"users#add_group\", constraints: AdminConstraint.new\n        delete \"groups/:group_id\" => \"users#remove_group\", constraints: AdminConstraint.new\n        get \"badges\"\n        get \"leader_requirements\" => \"users#tl3_requirements\"\n        get \"tl3_requirements\"\n        put \"anonymize\"\n        post \"merge\"\n        post \"reset_bounce_score\"\n        put \"disable_second_factor\"\n        delete \"sso_record\"\n      end\n      get \"users/:id.json\" => 'users#show', defaults: { format: 'json' }\n      get 'users/:id/:username' => 'users#show', constraints: { username: RouteFormat.username }, as: :user_show\n      get 'users/:id/:username/badges' => 'users#show'\n      get 'users/:id/:username/tl3_requirements' => 'users#show'\n\n      post \"users/sync_sso\" => \"users#sync_sso\", constraints: AdminConstraint.new\n\n      resources :impersonate, constraints: AdminConstraint.new\n\n      resources :email, constraints: AdminConstraint.new do\n        collection do\n          post \"test\"\n          get \"sent\"\n          get \"skipped\"\n          get \"bounced\"\n          get \"received\"\n          get \"rejected\"\n          get \"/incoming/:id/raw\" => \"email#raw_email\"\n          get \"/incoming/:id\" => \"email#incoming\"\n          get \"/incoming_from_bounced/:id\" => \"email#incoming_from_bounced\"\n          get \"preview-digest\" => \"email#preview_digest\"\n          get \"send-digest\" => \"email#send_digest\"\n          get \"smtp_should_reject\"\n          post \"handle_mail\"\n          get \"advanced-test\"\n          post \"advanced-test\" => \"email#advanced_test\"\n        end\n      end\n\n      scope \"/logs\" do\n        resources :staff_action_logs,     only: [:index]\n        get 'staff_action_logs/:id/diff' => 'staff_action_logs#diff'\n        resources :screened_emails,       only: [:index, :destroy]\n        resources :screened_ip_addresses, only: [:index, :create, :update, :destroy]\n        resources :screened_urls,         only: [:index]\n        resources :search_logs,           only: [:index]\n        get 'search_logs/term/' => 'search_logs#term'\n      end\n\n      get \"/logs\" => \"staff_action_logs#index\"\n\n      # alias\n      get '/logs/watched_words', to: redirect(relative_url_root + 'admin/customize/watched_words')\n      get '/logs/watched_words/*path', to: redirect(relative_url_root + 'admin/customize/watched_words/%{path}')\n\n      get \"customize\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/themes\" => \"themes#index\", constraints: AdminConstraint.new\n      get \"customize/colors\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/colors/:id\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/permalinks\" => \"permalinks#index\", constraints: AdminConstraint.new\n      get \"customize/embedding\" => \"embedding#show\", constraints: AdminConstraint.new\n      put \"customize/embedding\" => \"embedding#update\", constraints: AdminConstraint.new\n\n      resources :themes, constraints: AdminConstraint.new\n\n      post \"themes/import\" => \"themes#import\"\n      post \"themes/upload_asset\" => \"themes#upload_asset\"\n      post \"themes/generate_key_pair\" => \"themes#generate_key_pair\"\n      get \"themes/:id/preview\" => \"themes#preview\"\n      put \"themes/:id/setting\" => \"themes#update_single_setting\"\n\n      scope \"/customize\", constraints: AdminConstraint.new do\n        resources :user_fields, constraints: AdminConstraint.new\n        resources :emojis, constraints: AdminConstraint.new\n\n        get 'themes/:id/:target/:field_name/edit' => 'themes#index'\n        get 'themes/:id' => 'themes#index'\n        get \"themes/:id/export\" => \"themes#export\"\n\n        # They have periods in their URLs often:\n        get 'site_texts'             => 'site_texts#index'\n        get 'site_texts/:id.json'    => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        get 'site_texts/:id'         => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id.json'    => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id'         => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id.json' => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id'      => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n\n        get 'reseed' => 'site_texts#get_reseed_options'\n        post 'reseed' => 'site_texts#reseed'\n\n        get 'email_templates'          => 'email_templates#index'\n        get 'email_templates/(:id)'    => 'email_templates#show',   constraints: { id: /[0-9a-z_.]+/ }\n        put 'email_templates/(:id)'    => 'email_templates#update', constraints: { id: /[0-9a-z_.]+/ }\n        delete 'email_templates/(:id)' => 'email_templates#revert', constraints: { id: /[0-9a-z_.]+/ }\n\n        get 'robots' => 'robots_txt#show'\n        put 'robots.json' => 'robots_txt#update'\n        delete 'robots.json' => 'robots_txt#reset'\n\n        resource :email_style, only: [:show, :update]\n        get 'email_style/:field' => 'email_styles#show', constraints: { field: /html|css/ }\n      end\n\n      resources :embeddable_hosts, constraints: AdminConstraint.new\n      resources :color_schemes, constraints: AdminConstraint.new\n      resources :permalinks, constraints: AdminConstraint.new\n\n      scope \"/customize\" do\n        resources :watched_words, only: [:index, :create, :update, :destroy] do\n          collection do\n            get \"action/:id\" => \"watched_words#index\"\n            get \"action/:id/download\" => \"watched_words#download\"\n            delete \"action/:id\" => \"watched_words#clear_all\"\n          end\n        end\n        post \"watched_words/upload\" => \"watched_words#upload\"\n      end\n\n      get \"version_check\" => \"versions#show\"\n\n      get \"dashboard\" => \"dashboard#index\"\n      get \"dashboard/general\" => \"dashboard#general\"\n      get \"dashboard/moderation\" => \"dashboard#moderation\"\n      get \"dashboard/security\" => \"dashboard#security\"\n      get \"dashboard/reports\" => \"dashboard#reports\"\n      get \"dashboard/new-features\" => \"dashboard#new_features\"\n      put \"dashboard/mark-new-features-as-seen\" => \"dashboard#mark_new_features_as_seen\"\n\n      resources :dashboard, only: [:index] do\n        collection do\n          get \"problems\"\n        end\n      end\n\n      resources :api, only: [:index], constraints: AdminConstraint.new do\n        collection do\n          resources :keys, controller: 'api', only: [:index, :show, :update, :create, :destroy] do\n            collection do\n              get 'scopes' => 'api#scopes'\n            end\n\n            member do\n              post \"revoke\" => \"api#revoke_key\"\n              post \"undo-revoke\" => \"api#undo_revoke_key\"\n            end\n          end\n\n          resources :web_hooks\n          get 'web_hook_events/:id' => 'web_hooks#list_events', as: :web_hook_events\n          get 'web_hooks/:id/events' => 'web_hooks#list_events'\n          get 'web_hooks/:id/events/bulk' => 'web_hooks#bulk_events'\n          post 'web_hooks/:web_hook_id/events/:event_id/redeliver' => 'web_hooks#redeliver_event'\n          post 'web_hooks/:id/ping' => 'web_hooks#ping'\n        end\n      end\n\n      resources :backups, only: [:index, :create], constraints: AdminConstraint.new do\n        member do\n          get \"\" => \"backups#show\", constraints: { id: RouteFormat.backup }\n          put \"\" => \"backups#email\", constraints: { id: RouteFormat.backup }\n          delete \"\" => \"backups#destroy\", constraints: { id: RouteFormat.backup }\n          post \"restore\" => \"backups#restore\", constraints: { id: RouteFormat.backup }\n        end\n        collection do\n          # multipart uploads\n          post \"create-multipart\" => \"backups#create_multipart\", format: :json\n          post \"complete-multipart\" => \"backups#complete_multipart\", format: :json\n          post \"abort-multipart\" => \"backups#abort_multipart\", format: :json\n          post \"batch-presign-multipart-parts\" => \"backups#batch_presign_multipart_parts\", format: :json\n\n          get \"logs\" => \"backups#logs\"\n          get \"status\" => \"backups#status\"\n          delete \"cancel\" => \"backups#cancel\"\n          post \"rollback\" => \"backups#rollback\"\n          put \"readonly\" => \"backups#readonly\"\n          get \"upload\" => \"backups#check_backup_chunk\"\n          post \"upload\" => \"backups#upload_backup_chunk\"\n          get \"upload_url\" => \"backups#create_upload_url\"\n        end\n      end\n\n      resources :badges, constraints: AdminConstraint.new do\n        collection do\n          get \"/award/:badge_id\" => \"badges#award\"\n          post \"/award/:badge_id\" => \"badges#mass_award\"\n          get \"types\" => \"badges#badge_types\"\n          post \"badge_groupings\" => \"badges#save_badge_groupings\"\n          post \"preview\" => \"badges#preview\"\n        end\n      end\n\n    end # admin namespace\n\n    get \"email/unsubscribe/:key\" => \"email#unsubscribe\", as: \"email_unsubscribe\"\n    get \"email/unsubscribed\" => \"email#unsubscribed\", as: \"email_unsubscribed\"\n    post \"email/unsubscribe/:key\" => \"email#perform_unsubscribe\", as: \"email_perform_unsubscribe\"\n\n    get \"extra-locales/:bundle\" => \"extra_locales#show\"\n\n    resources :session, id: RouteFormat.username, only: [:create, :destroy, :become] do\n      if !Rails.env.production?\n        get 'become'\n      end\n\n      collection do\n        post \"forgot_password\"\n      end\n    end\n\n    get \"review\" => \"reviewables#index\" # For ember app\n    get \"review/:reviewable_id\" => \"reviewables#show\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/:reviewable_id/explain\" => \"reviewables#explain\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/count\" => \"reviewables#count\"\n    get \"review/topics\" => \"reviewables#topics\"\n    get \"review/settings\" => \"reviewables#settings\"\n    put \"review/settings\" => \"reviewables#settings\"\n    put \"review/:reviewable_id/perform/:action_id\" => \"reviewables#perform\", constraints: {\n      reviewable_id: /\\d+/,\n      action_id: /[a-z\\_]+/\n    }\n    put \"review/:reviewable_id\" => \"reviewables#update\", constraints: { reviewable_id: /\\d+/ }\n    delete \"review/:reviewable_id\" => \"reviewables#destroy\", constraints: { reviewable_id: /\\d+/ }\n\n    resources :reviewable_claimed_topics\n\n    get \"session/sso\" => \"session#sso\"\n    get \"session/sso_login\" => \"session#sso_login\"\n    get \"session/sso_provider\" => \"session#sso_provider\"\n    get \"session/current\" => \"session#current\"\n    get \"session/csrf\" => \"session#csrf\"\n    get \"session/hp\" => \"session#get_honeypot_value\"\n    get \"session/email-login/:token\" => \"session#email_login_info\"\n    post \"session/email-login/:token\" => \"session#email_login\"\n    get \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    post \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    get \"session/2fa\" => \"session#second_factor_auth_show\"\n    post \"session/2fa\" => \"session#second_factor_auth_perform\"\n    if Rails.env.test?\n      post \"session/2fa/test-action\" => \"session#test_second_factor_restricted_route\"\n    end\n    get \"composer_messages\" => \"composer_messages#index\"\n\n    resources :static\n    post \"login\" => \"static#enter\"\n    get \"login\" => \"static#show\", id: \"login\"\n    get \"password-reset\" => \"static#show\", id: \"password_reset\"\n    get \"faq\" => \"static#show\", id: \"faq\"\n    get \"tos\" => \"static#show\", id: \"tos\", as: 'tos'\n    get \"privacy\" => \"static#show\", id: \"privacy\", as: 'privacy'\n    get \"signup\" => \"static#show\", id: \"signup\"\n    get \"login-preferences\" => \"static#show\", id: \"login\"\n\n    %w{guidelines rules conduct}.each do |faq_alias|\n      get faq_alias => \"static#show\", id: \"guidelines\", as: faq_alias\n    end\n\n    get \"my/*path\", to: 'users#my_redirect'\n    get \".well-known/change-password\", to: redirect(relative_url_root + 'my/preferences/security', status: 302)\n\n    get \"user-cards\" => \"users#cards\", format: :json\n    get \"directory-columns\" => \"directory_columns#index\", format: :json\n    get \"edit-directory-columns\" => \"edit_directory_columns#index\", format: :json\n    put \"edit-directory-columns\" => \"edit_directory_columns#update\", format: :json\n\n    %w{users u}.each_with_index do |root_path, index|\n      get \"#{root_path}\" => \"users#index\", constraints: { format: 'html' }\n\n      resources :users, except: [:index, :new, :show, :update, :destroy], path: root_path do\n        collection do\n          get \"check_username\"\n          get \"check_email\"\n          get \"is_local_username\"\n        end\n      end\n\n      post \"#{root_path}/second_factors\" => \"users#list_second_factors\"\n      put \"#{root_path}/second_factor\" => \"users#update_second_factor\"\n\n      post \"#{root_path}/create_second_factor_security_key\" => \"users#create_second_factor_security_key\"\n      post \"#{root_path}/register_second_factor_security_key\" => \"users#register_second_factor_security_key\"\n      put \"#{root_path}/security_key\" => \"users#update_security_key\"\n      post \"#{root_path}/create_second_factor_totp\" => \"users#create_second_factor_totp\"\n      post \"#{root_path}/enable_second_factor_totp\" => \"users#enable_second_factor_totp\"\n      put \"#{root_path}/disable_second_factor\" => \"users#disable_second_factor\"\n\n      put \"#{root_path}/second_factors_backup\" => \"users#create_second_factor_backup\"\n\n      put \"#{root_path}/update-activation-email\" => \"users#update_activation_email\"\n      post \"#{root_path}/email-login\" => \"users#email_login\"\n      get \"#{root_path}/admin-login\" => \"users#admin_login\"\n      put \"#{root_path}/admin-login\" => \"users#admin_login\"\n      post \"#{root_path}/toggle-anon\" => \"users#toggle_anon\"\n      post \"#{root_path}/read-faq\" => \"users#read_faq\"\n      get \"#{root_path}/recent-searches\" => \"users#recent_searches\", constraints: { format: 'json' }\n      delete \"#{root_path}/recent-searches\" => \"users#reset_recent_searches\", constraints: { format: 'json' }\n      get \"#{root_path}/search/users\" => \"users#search_users\"\n\n      get({ \"#{root_path}/account-created/\" => \"users#account_created\" }.merge(index == 1 ? { as: :users_account_created } : { as: :old_account_created }))\n\n      get \"#{root_path}/account-created/resent\" => \"users#account_created\"\n      get \"#{root_path}/account-created/edit-email\" => \"users#account_created\"\n      get({ \"#{root_path}/password-reset/:token\" => \"users#password_reset_show\" }.merge(index == 1 ? { as: :password_reset_token } : {}))\n      get \"#{root_path}/confirm-email-token/:token\" => \"users#confirm_email_token\", constraints: { format: 'json' }\n      put \"#{root_path}/password-reset/:token\" => \"users#password_reset_update\"\n      get \"#{root_path}/activate-account/:token\" => \"users#activate_account\"\n      put({ \"#{root_path}/activate-account/:token\" => \"users#perform_account_activation\" }.merge(index == 1 ? { as: 'perform_activate_account' } : {}))\n\n      get \"#{root_path}/confirm-old-email/:token\" => \"users_email#show_confirm_old_email\"\n      put \"#{root_path}/confirm-old-email\" => \"users_email#confirm_old_email\"\n\n      get \"#{root_path}/confirm-new-email/:token\" => \"users_email#show_confirm_new_email\"\n      put \"#{root_path}/confirm-new-email\" => \"users_email#confirm_new_email\"\n\n      get({\n        \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\",\n        constraints: { token: /[0-9a-f]+/ }\n      }.merge(index == 1 ? { as: 'confirm_admin' } : {}))\n      post \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\", constraints: { token: /[0-9a-f]+/ }\n      get \"#{root_path}/:username/private-messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/tags/:tag_id\" => \"user_actions#private_messages\", constraints: StaffConstraint.new\n      get \"#{root_path}/:username.json\" => \"users#show\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get({ \"#{root_path}/:username\" => \"users#show\", constraints: { username: RouteFormat.username } }.merge(index == 1 ? { as: 'user' } : {}))\n      put \"#{root_path}/:username\" => \"users#update\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get \"#{root_path}/:username/emails\" => \"users#check_emails\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-email\" => \"users#check_sso_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-payload\" => \"users#check_sso_payload\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/email\" => \"users_email#index\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/account\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/security\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/profile\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/emails\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/primary-email\" => \"users#update_primary_email\", format: :json, constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/email\" => \"users#destroy_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/notifications\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/categories\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/users\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/tags\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/interface\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/apps\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/email\" => \"users_email#create\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/email\" => \"users_email#update\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/badge_title\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/badge_title\" => \"users#badge_title\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/username\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/username\" => \"users#username\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor-backup\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/user_image\" => \"users#destroy_user_image\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/pick\" => \"users#pick_avatar\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/select\" => \"users#select_avatar\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-account\" => \"users#revoke_account\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-auth-token\" => \"users#revoke_auth_token\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/staff-info\" => \"users#staff_info\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/summary\" => \"users#summary\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/notification_level\" => \"users#notification_level\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited/:filter\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/action/send_activation_email\" => \"users#send_activation_email\"\n      get \"#{root_path}/:username/summary\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/topics.rss\" => \"list#user_topics_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.rss\" => \"posts#user_posts_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.json\" => \"posts#user_posts_feed\", format: :json, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/badges\" => \"users#badges\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/bookmarks\" => \"users#bookmarks\", constraints: { username: RouteFormat.username, format: /(json|ics)/ }\n      get \"#{root_path}/:username/notifications\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/notifications/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username\" => \"users#destroy\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/by-external/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/by-external/:external_provider/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/:username/flagged-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/deleted-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/topic-tracking-state\" => \"users#topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-message-topic-tracking-state\" => \"users#private_message_topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/profile-hidden\" => \"users#profile_hidden\"\n      put \"#{root_path}/:username/feature-topic\" => \"users#feature_topic\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/clear-featured-topic\" => \"users#clear_featured_topic\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/card.json\" => \"users#show_card\", format: :json, constraints: { username: RouteFormat.username }\n    end\n\n    get \"user-badges/:username.json\" => \"user_badges#username\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n    get \"user-badges/:username\" => \"user_badges#username\", constraints: { username: RouteFormat.username }\n\n    post \"user_avatar/:username/refresh_gravatar\" => \"user_avatars#refresh_gravatar\", constraints: { username: RouteFormat.username }\n    get \"letter_avatar/:username/:size/:version.png\" => \"user_avatars#show_letter\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n    get \"user_avatar/:hostname/:username/:size/:version.png\" => \"user_avatars#show\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n\n    get \"letter_avatar_proxy/:version/letter/:letter/:color/:size.png\" => \"user_avatars#show_proxy_letter\", constraints: { format: :png }\n\n    get \"svg-sprite/:hostname/svg-:theme_id-:version.js\" => \"svg_sprite#show\", constraints: { hostname: /[\\w\\.-]+/, version: /\\h{40}/, theme_id: /([0-9]+)?/, format: :js }\n    get \"svg-sprite/search/:keyword\" => \"svg_sprite#search\", format: false, constraints: { keyword: /[-a-z0-9\\s\\%]+/ }\n    get \"svg-sprite/picker-search\" => \"svg_sprite#icon_picker_search\", defaults: { format: :json }\n    get \"svg-sprite/:hostname/icon(/:color)/:name.svg\" => \"svg_sprite#svg_icon\", constraints: { hostname: /[\\w\\.-]+/, name: /[-a-z0-9\\s\\%]+/, color: /(\\h{3}{1,2})/, format: :svg }\n\n    get \"highlight-js/:hostname/:version.js\" => \"highlight_js#show\", constraints: { hostname: /[\\w\\.-]+/, format: :js }\n\n    get \"stylesheets/:name.css.map\" => \"stylesheets#show_source_map\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"stylesheets/:name.css\" => \"stylesheets#show\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"color-scheme-stylesheet/:id(/:theme_id)\" => \"stylesheets#color_scheme\", constraints: { format: :json }\n    get \"theme-javascripts/:digest.js\" => \"theme_javascripts#show\", constraints: { digest: /\\h{40}/ }\n    get \"theme-javascripts/tests/:theme_id-:digest.js\" => \"theme_javascripts#show_tests\"\n\n    post \"uploads/lookup-metadata\" => \"uploads#metadata\"\n    post \"uploads\" => \"uploads#create\"\n    post \"uploads/lookup-urls\" => \"uploads#lookup_urls\"\n\n    # direct to s3 uploads\n    post \"uploads/generate-presigned-put\" => \"uploads#generate_presigned_put\", format: :json\n    post \"uploads/complete-external-upload\" => \"uploads#complete_external_upload\", format: :json\n\n    # multipart uploads\n    post \"uploads/create-multipart\" => \"uploads#create_multipart\", format: :json\n    post \"uploads/complete-multipart\" => \"uploads#complete_multipart\", format: :json\n    post \"uploads/abort-multipart\" => \"uploads#abort_multipart\", format: :json\n    post \"uploads/batch-presign-multipart-parts\" => \"uploads#batch_presign_multipart_parts\", format: :json\n\n    # used to download original images\n    get \"uploads/:site/:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    get \"uploads/short-url/:base62(.:extension)\" => \"uploads#show_short\", constraints: { site: /\\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-zA-Z0-9\\._-]+/i }, as: :upload_short\n    # used to download attachments\n    get \"uploads/:site/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    if Rails.env.test?\n      get \"uploads/:site/test_:index/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, index: /\\d+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    end\n    # used to download attachments (old route)\n    get \"uploads/:site/:id/:sha\" => \"uploads#show\", constraints: { site: /\\w+/, id: /\\d+/, sha: /\\h{16}/, format: /.*/ }\n    get \"secure-media-uploads/*path(.:extension)\" => \"uploads#show_secure\", constraints: { extension: /[a-z0-9\\._]+/i }\n\n    get \"posts\" => \"posts#latest\", id: \"latest_posts\", constraints: { format: /(json|rss)/ }\n    get \"private-posts\" => \"posts#latest\", id: \"private_posts\", constraints: { format: /(json|rss)/ }\n    get \"posts/by_number/:topic_id/:post_number\" => \"posts#by_number\"\n    get \"posts/by-date/:topic_id/:date\" => \"posts#by_date\"\n    get \"posts/:id/reply-history\" => \"posts#reply_history\"\n    get \"posts/:id/reply-ids\"     => \"posts#reply_ids\"\n    get \"posts/:id/reply-ids/all\" => \"posts#all_reply_ids\"\n    get \"posts/:username/deleted\" => \"posts#deleted_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/flagged\" => \"posts#flagged_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/pending\" => \"posts#pending\", constraints: { username: RouteFormat.username }\n\n    %w{groups g}.each do |root_path|\n      resources :groups, id: RouteFormat.username, path: root_path do\n        get \"posts.rss\" => \"groups#posts_feed\", format: :rss\n        get \"mentions.rss\" => \"groups#mentions_feed\", format: :rss\n\n        get 'members'\n        get 'posts'\n        get 'mentions'\n        get 'counts'\n        get 'mentionable'\n        get 'messageable'\n        get 'logs' => 'groups#histories'\n        post 'test_email_settings'\n\n        collection do\n          get \"check-name\" => 'groups#check_name'\n          get 'custom/new' => 'groups#new', constraints: StaffConstraint.new\n          get \"search\" => \"groups#search\"\n        end\n\n        member do\n          %w{\n            activity\n            activity/:filter\n            requests\n            messages\n            messages/inbox\n            messages/archive\n            manage\n            manage/profile\n            manage/members\n            manage/membership\n            manage/interaction\n            manage/email\n            manage/categories\n            manage/tags\n            manage/logs\n          }.each do |path|\n            get path => 'groups#show'\n          end\n\n          get \"permissions\" => \"groups#permissions\"\n          put \"members\" => \"groups#add_members\"\n          put \"join\" => \"groups#join\"\n          delete \"members\" => \"groups#remove_member\"\n          delete \"leave\" => \"groups#leave\"\n          post \"request_membership\" => \"groups#request_membership\"\n          put \"handle_membership_request\" => \"groups#handle_membership_request\"\n          post \"notifications\" => \"groups#set_notifications\"\n        end\n      end\n    end\n\n    resources :associated_groups, only: %i[index], constraints: AdminConstraint.new\n\n    # aliases so old API code works\n    delete \"admin/groups/:id/members\" => \"groups#remove_member\", constraints: AdminConstraint.new\n    put \"admin/groups/:id/members\" => \"groups#add_members\", constraints: AdminConstraint.new\n\n    resources :posts do\n      delete \"bookmark\", to: \"posts#destroy_bookmark\"\n      put \"wiki\"\n      put \"post_type\"\n      put \"rebake\"\n      put \"unhide\"\n      put \"locked\"\n      put \"notice\"\n      get \"replies\"\n      get \"revisions/latest\" => \"posts#latest_revision\"\n      get \"revisions/:revision\" => \"posts#revisions\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/hide\" => \"posts#hide_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/show\" => \"posts#show_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/revert\" => \"posts#revert\", constraints: { revision: /\\d+/ }\n      put \"recover\"\n      collection do\n        delete \"destroy_many\"\n        put \"merge_posts\"\n      end\n    end\n\n    resources :bookmarks, only: %i[create destroy update] do\n      put \"toggle_pin\"\n    end\n\n    resources :notifications, except: :show do\n      collection do\n        put 'mark-read' => 'notifications#mark_read'\n        # creating an alias cause the api was extended to mark a single notification\n        # this allows us to cleanly target it\n        put 'read' => 'notifications#mark_read'\n      end\n    end\n\n    match \"/auth/failure\", to: \"users/omniauth_callbacks#failure\", via: [:get, :post]\n    get \"/auth/:provider\", to: \"users/omniauth_callbacks#confirm_request\"\n    match \"/auth/:provider/callback\", to: \"users/omniauth_callbacks#complete\", via: [:get, :post]\n    get \"/associate/:token\", to: \"users/associate_accounts#connect_info\", constraints: { token: /\\h{32}/ }\n    post \"/associate/:token\", to: \"users/associate_accounts#connect\", constraints: { token: /\\h{32}/ }\n\n    resources :clicks do\n      collection do\n        post \"track\"\n      end\n    end\n\n    get \"excerpt\" => \"excerpt#show\"\n\n    resources :post_action_users\n    resources :post_readers, only: %i[index]\n    resources :post_actions do\n      collection do\n        get \"users\"\n        post \"defer_flags\"\n      end\n    end\n    resources :user_actions\n\n    resources :badges, only: [:index]\n    get \"/badges/:id(/:slug)\" => \"badges#show\", constraints: { format: /(json|html|rss)/ }\n    resources :user_badges, only: [:index, :create, :destroy] do\n      put \"toggle_favorite\" => \"user_badges#toggle_favorite\", constraints: { format: :json }\n    end\n\n    get '/c', to: redirect(relative_url_root + 'categories')\n\n    resources :categories, except: [:show, :new, :edit]\n    post \"categories/reorder\" => \"categories#reorder\"\n\n    scope path: 'category/:category_id' do\n      post \"/move\" => \"categories#move\"\n      post \"/notifications\" => \"categories#set_notifications\"\n      put \"/slug\" => \"categories#update_slug\"\n    end\n\n    get \"category/*path\" => \"categories#redirect\"\n\n    get \"categories_and_latest\" => \"categories#categories_and_latest\"\n    get \"categories_and_top\" => \"categories#categories_and_top\"\n\n    get \"c/:id/show\" => \"categories#show\"\n\n    get \"c/*category_slug/find_by_slug\" => \"categories#find_by_slug\"\n    get \"c/*category_slug/edit(/:tab)\" => \"categories#find_by_slug\", constraints: { format: 'html' }\n    get \"/new-category\" => \"categories#show\", constraints: { format: 'html' }\n\n    get \"c/*category_slug_path_with_id.rss\" => \"list#category_feed\", format: :rss\n    scope path: 'c/*category_slug_path_with_id' do\n      get \"/none\" => \"list#category_none_latest\"\n\n      TopTopic.periods.each do |period|\n        get \"/none/l/top/#{period}\", to: redirect(\"/none/l/top?period=#{period}\", status: 301)\n        get \"/l/top/#{period}\", to: redirect(\"/l/top?period=#{period}\", status: 301)\n      end\n\n      Discourse.filters.each do |filter|\n        get \"/none/l/#{filter}\" => \"list#category_none_#{filter}\", as: \"category_none_#{filter}\"\n        get \"/l/#{filter}\" => \"list#category_#{filter}\", as: \"category_#{filter}\"\n      end\n\n      get \"/all\" => \"list#category_default\", as: \"category_all\", constraints: { format: 'html' }\n      get \"/\" => \"list#category_default\", as: \"category_default\"\n    end\n\n    get \"hashtags\" => \"hashtags#show\"\n\n    TopTopic.periods.each do |period|\n      get \"top/#{period}.rss\", to: redirect(\"top.rss?period=#{period}\", status: 301)\n      get \"top/#{period}.json\", to: redirect(\"top.json?period=#{period}\", status: 301)\n      get \"top/#{period}\", to: redirect(\"top?period=#{period}\", status: 301)\n    end\n\n    Discourse.anonymous_filters.each do |filter|\n      get \"#{filter}.rss\" => \"list##{filter}_feed\", format: :rss\n    end\n\n    Discourse.filters.each do |filter|\n      get \"#{filter}\" => \"list##{filter}\"\n    end\n\n    get \"search/query\" => \"search#query\"\n    get \"search\" => \"search#show\"\n    post \"search/click\" => \"search#click\"\n\n    # Topics resource\n    get \"t/:id\" => \"topics#show\"\n    put \"t/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:id\" => \"topics#destroy\"\n    put \"t/:id/archive-message\" => \"topics#archive_message\"\n    put \"t/:id/move-to-inbox\" => \"topics#move_to_inbox\"\n    put \"t/:id/convert-topic/:type\" => \"topics#convert_topic\"\n    put \"t/:id/publish\" => \"topics#publish\"\n    put \"t/:id/shared-draft\" => \"topics#update_shared_draft\"\n    put \"t/:id/reset-bump-date\" => \"topics#reset_bump_date\"\n    put \"topics/bulk\"\n    put \"topics/reset-new\" => 'topics#reset_new'\n    put \"topics/pm-reset-new\" => 'topics#private_message_reset_new'\n    post \"topics/timings\"\n\n    get 'topics/similar_to' => 'similar_topics#index'\n    resources :similar_topics\n\n    get \"topics/feature_stats\"\n\n    scope \"/topics\", username: RouteFormat.username do\n      get \"created-by/:username\" => \"list#topics_by\", as: \"topics_by\", defaults: { format: :json }\n      get \"private-messages/:username\" => \"list#private_messages\", as: \"topics_private_messages\", defaults: { format: :json }\n      get \"private-messages-sent/:username\" => \"list#private_messages_sent\", as: \"topics_private_messages_sent\", defaults: { format: :json }\n      get \"private-messages-archive/:username\" => \"list#private_messages_archive\", as: \"topics_private_messages_archive\", defaults: { format: :json }\n      get \"private-messages-unread/:username\" => \"list#private_messages_unread\", as: \"topics_private_messages_unread\", defaults: { format: :json }\n      get \"private-messages-tags/:username/:tag_id.json\" => \"list#private_messages_tag\", as: \"topics_private_messages_tag\", defaults: { format: :json }\n      get \"private-messages-new/:username\" => \"list#private_messages_new\", as: \"topics_private_messages_new\", defaults: { format: :json }\n      get \"private-messages-warnings/:username\" => \"list#private_messages_warnings\", as: \"topics_private_messages_warnings\", defaults: { format: :json }\n      get \"groups/:group_name\" => \"list#group_topics\", as: \"group_topics\", group_name: RouteFormat.username\n\n      scope \"/private-messages-group/:username\", group_name: RouteFormat.username do\n        get \":group_name.json\" => \"list#private_messages_group\", as: \"topics_private_messages_group\"\n        get \":group_name/archive.json\" => \"list#private_messages_group_archive\", as: \"topics_private_messages_group_archive\"\n        get \":group_name/new.json\" => \"list#private_messages_group_new\", as: \"topics_private_messages_group_new\"\n        get \":group_name/unread.json\" => \"list#private_messages_group_unread\", as: \"topics_private_messages_group_unread\"\n      end\n    end\n\n    get 'embed/topics' => 'embed#topics'\n    get 'embed/comments' => 'embed#comments'\n    get 'embed/count' => 'embed#count'\n    get 'embed/info' => 'embed#info'\n\n    get \"new-topic\" => \"list#latest\"\n    get \"new-message\" => \"list#latest\"\n\n    # Topic routes\n    get \"t/id_for/:slug\" => \"topics#id_for_slug\"\n    get \"t/external_id/:external_id\" => \"topics#show_by_external_id\", format: :json, constrains: { external_id: /\\A[\\w-]+\\z/ }\n    get \"t/:slug/:topic_id/print\" => \"topics#show\", format: :html, print: true, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/moderator-liked\" => \"topics#moderator_liked\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/summary\" => \"topics#show\", defaults: { summary: true }, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/summary\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/clear-pin\" => \"topics#clear_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/re-pin\" => \"topics#re_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/mute\" => \"topics#mute\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/unmute\" => \"topics#unmute\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/timer\" => \"topics#timer\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/make-banner\" => \"topics#make_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-banner\" => \"topics#remove_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-user\" => \"topics#remove_allowed_user\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-group\" => \"topics#remove_allowed_group\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/recover\" => \"topics#recover\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id.rss\" => \"topics#feed\", format: :rss, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:slug/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/posts\" => \"topics#posts\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/post_ids\" => \"topics#post_ids\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/excerpts\" => \"topics#excerpts\", constraints: { topic_id: /\\d+/ }, format: :json\n    post \"t/:topic_id/timings\" => \"topics#timings\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite\" => \"topics#invite\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite-group\" => \"topics#invite_group\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/move-posts\" => \"topics#move_posts\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/merge-topic\" => \"topics#merge_topic\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/change-owner\" => \"topics#change_post_owners\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/change-timestamp\" => \"topics#change_timestamps\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:topic_id/timings\" => \"topics#destroy_timings\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/bookmark\" => \"topics#bookmark\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove_bookmarks\" => \"topics#remove_bookmarks\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/tags\" => \"topics#update_tags\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/slow_mode\" => \"topics#set_slow_mode\", constraints: { topic_id: /\\d+/ }\n\n    post \"t/:topic_id/notifications\" => \"topics#set_notifications\" , constraints: { topic_id: /\\d+/ }\n\n    get \"p/:post_id(/:user_id)\" => \"posts#short_link\"\n    get \"/posts/:id/cooked\" => \"posts#cooked\"\n    get \"/posts/:id/expand-embed\" => \"posts#expand_embed\"\n    get \"/posts/:id/raw\" => \"posts#markdown_id\"\n    get \"/posts/:id/raw-email\" => \"posts#raw_email\"\n    get \"raw/:topic_id(/:post_number)\" => \"posts#markdown_num\"\n\n    resources :invites, except: [:show]\n    get \"/invites/:id\" => \"invites#show\", constraints: { format: :html }\n    put \"/invites/:id\" => \"invites#update\"\n\n    post \"invites/upload_csv\" => \"invites#upload_csv\"\n    post \"invites/destroy-all-expired\" => \"invites#destroy_all_expired\"\n    post \"invites/reinvite\" => \"invites#resend_invite\"\n    post \"invites/reinvite-all\" => \"invites#resend_all_invites\"\n    delete \"invites\" => \"invites#destroy\"\n    put \"invites/show/:id\" => \"invites#perform_accept_invitation\", as: 'perform_accept_invite'\n    get \"invites/retrieve\" => \"invites#retrieve\"\n\n    resources :export_csv do\n      collection do\n        post \"export_entity\" => \"export_csv#export_entity\"\n      end\n    end\n\n    get \"onebox\" => \"onebox#show\"\n    get \"inline-onebox\" => \"inline_onebox#show\"\n\n    get \"exception\" => \"list#latest\"\n\n    get \"message-bus/poll\" => \"message_bus#poll\"\n\n    resources :drafts, only: [:index, :create, :show, :destroy]\n\n    get \"/service-worker.js\" => \"static#service_worker_asset\", format: :js\n    if service_worker_asset = Rails.application.assets_manifest.assets['service-worker.js']\n      # https://developers.google.com/web/fundamentals/codelabs/debugging-service-workers/\n      # Normally the browser will wait until a user closes all tabs that contain the\n      # current site before updating to a new Service Worker.\n      # Support the old Service Worker path to avoid routing error filling up the\n      # logs.\n      get service_worker_asset => \"static#service_worker_asset\", format: :js\n    end\n\n    get \"cdn_asset/:site/*path\" => \"static#cdn_asset\", format: false, constraints: { format: /.*/ }\n    get \"brotli_asset/*path\" => \"static#brotli_asset\", format: false, constraints: { format: /.*/ }\n\n    get \"favicon/proxied\" => \"static#favicon\", format: false\n\n    get \"robots.txt\" => \"robots_txt#index\"\n    get \"robots-builder.json\" => \"robots_txt#builder\"\n    get \"offline.html\" => \"offline#index\"\n    get \"manifest.webmanifest\" => \"metadata#manifest\", as: :manifest\n    get \"manifest.json\" => \"metadata#manifest\"\n    get \".well-known/assetlinks.json\" => \"metadata#app_association_android\"\n    get \"apple-app-site-association\" => \"metadata#app_association_ios\", format: false\n    get \"opensearch\" => \"metadata#opensearch\", constraints: { format: :xml }\n\n    scope '/tag/:tag_id' do\n      constraints format: :json do\n        get '/' => 'tags#show', as: 'tag_show'\n        get '/info' => 'tags#info'\n        get '/notifications' => 'tags#notifications'\n        put '/notifications' => 'tags#update_notifications'\n        put '/' => 'tags#update'\n        delete '/' => 'tags#destroy'\n        post '/synonyms' => 'tags#create_synonyms'\n        delete '/synonyms/:synonym_id' => 'tags#destroy_synonym'\n\n        Discourse.filters.each do |filter|\n          get \"/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_show_#{filter}\"\n        end\n      end\n\n      constraints format: :rss do\n        get '/' => 'tags#tag_feed'\n      end\n    end\n\n    scope \"/tags\" do\n      get '/' => 'tags#index'\n      get '/filter/list' => 'tags#index'\n      get '/filter/search' => 'tags#search'\n      get '/personal_messages/:username' => 'tags#personal_messages', constraints: { username: RouteFormat.username }\n      post '/upload' => 'tags#upload'\n      get '/unused' => 'tags#list_unused'\n      delete '/unused' => 'tags#destroy_unused'\n\n      constraints(tag_id: /[^\\/]+?/, format: /json|rss/) do\n        scope path: '/c/*category_slug_path_with_id' do\n          Discourse.filters.each do |filter|\n            get \"/none/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_none_show_#{filter}\", defaults: { no_subcategories: true }\n            get \"/all/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_all_show_#{filter}\", defaults: { no_subcategories: false }\n          end\n\n          get '/none/:tag_id' => 'tags#show', as: 'tag_category_none_show', defaults: { no_subcategories: true }\n          get '/all/:tag_id' => 'tags#show', as: 'tag_category_all_show', defaults: { no_subcategories: false }\n\n          Discourse.filters.each do |filter|\n            get \"/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_show_#{filter}\"\n          end\n\n          get '/:tag_id' => 'tags#show', as: 'tag_category_show'\n        end\n\n        get '/intersection/:tag_id/*additional_tag_ids' => 'tags#show', as: 'tag_intersection'\n      end\n\n      get '*tag_id', to: redirect(relative_url_root + 'tag/%{tag_id}')\n    end\n\n    resources :tag_groups, constraints: StaffConstraint.new, except: [:edit]\n    get '/tag_groups/filter/search' => 'tag_groups#search', format: :json\n\n    Discourse.filters.each do |filter|\n      root to: \"list##{filter}\", constraints: HomePageConstraint.new(\"#{filter}\"), as: \"list_#{filter}\"\n    end\n    # special case for categories\n    root to: \"categories#index\", constraints: HomePageConstraint.new(\"categories\"), as: \"categories_index\"\n\n    root to: 'finish_installation#index', constraints: HomePageConstraint.new(\"finish_installation\"), as: 'installation_redirect'\n\n    get \"/user-api-key/new\" => \"user_api_keys#new\"\n    post \"/user-api-key\" => \"user_api_keys#create\"\n    post \"/user-api-key/revoke\" => \"user_api_keys#revoke\"\n    post \"/user-api-key/undo-revoke\" => \"user_api_keys#undo_revoke\"\n    get \"/user-api-key/otp\" => \"user_api_keys#otp\"\n    post \"/user-api-key/otp\" => \"user_api_keys#create_otp\"\n\n    get \"/safe-mode\" => \"safe_mode#index\"\n    post \"/safe-mode\" => \"safe_mode#enter\", as: \"safe_mode_enter\"\n\n    unless Rails.env.production?\n      get \"/qunit\" => \"qunit#index\"\n      get \"/wizard/qunit\" => \"wizard#qunit\"\n    end\n    get \"/theme-qunit\" => \"qunit#theme\"\n\n    post \"/push_notifications/subscribe\" => \"push_notification#subscribe\"\n    post \"/push_notifications/unsubscribe\" => \"push_notification#unsubscribe\"\n\n    resources :csp_reports, only: [:create]\n\n    get \"/permalink-check\", to: 'permalinks#check'\n\n    post \"/do-not-disturb\" => \"do_not_disturb#create\"\n    delete \"/do-not-disturb\" => \"do_not_disturb#destroy\"\n\n    post \"/presence/update\" => \"presence#update\"\n    get \"/presence/get\" => \"presence#get\"\n\n    get \"*url\", to: 'permalinks#show', constraints: PermalinkConstraint.new\n  end\nend\n", "# frozen_string_literal: true\n\ndescribe CategoriesController do\n  let(:admin) { Fabricate(:admin) }\n  let!(:category) { Fabricate(:category, user: admin) }\n  fab!(:user) { Fabricate(:user) }\n\n  context 'index' do\n\n    it 'web crawler view has correct urls for subfolder install' do\n      set_subfolder \"/forum\"\n      get '/categories', headers: { 'HTTP_USER_AGENT' => 'Googlebot' }\n      html = Nokogiri::HTML5(response.body)\n      expect(html.css('body.crawler')).to be_present\n      expect(html.css(\"a[href=\\\"/forum/c/#{category.slug}/#{category.id}\\\"]\")).to be_present\n    end\n\n    it \"properly preloads topic list\" do\n      SiteSetting.categories_topics = 5\n      SiteSetting.categories_topics.times { Fabricate(:topic) }\n      get \"/categories\"\n\n      expect(response.body).to have_tag(\"div#data-preloaded\") do |element|\n        json = JSON.parse(element.current_scope.attribute('data-preloaded').value)\n        expect(json['topic_list_latest']).to include(%{\"more_topics_url\":\"/latest\"})\n      end\n    end\n\n    it \"Shows correct title if category list is set for homepage\" do\n      SiteSetting.top_menu = \"categories|latest\"\n      get \"/\"\n\n      expect(response.body).to have_tag \"title\", text: \"Discourse\"\n\n      SiteSetting.short_site_description = \"Official community\"\n      get \"/\"\n\n      expect(response.body).to have_tag \"title\", text: \"Discourse - Official community\"\n    end\n\n    it \"redirects /category paths to /c paths\" do\n      get \"/category/uncategorized\"\n      expect(response.status).to eq(302)\n      expect(response.body).to include(\"c/uncategorized\")\n    end\n\n    it \"respects permalinks before redirecting /category paths to /c paths\" do\n      _perm = Permalink.create!(url: \"category/something\", category_id: category.id)\n\n      get \"/category/something\"\n      expect(response.status).to eq(301)\n      expect(response.body).to include(category.slug)\n    end\n\n    it 'returns the right response for a normal user' do\n      sign_in(user)\n\n      get \"/categories.json\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      expect(category_list[\"categories\"].map { |c| c[\"id\"] }).to contain_exactly(\n        SiteSetting.get(:uncategorized_category_id), category.id\n      )\n    end\n\n    it 'does not returns subcatgories without permission' do\n      subcategory = Fabricate(:category,  user: admin, parent_category: category)\n      subcategory.set_permissions(admins: :full)\n      subcategory.save!\n\n      sign_in(user)\n\n      get \"/categories.json?include_subcategories=true\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category).to eq(nil)\n    end\n\n    it 'returns the right subcategory response with permission' do\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      sign_in(user)\n\n      get \"/categories.json?include_subcategories=true\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category.count).to eq(1)\n      expect(subcategories_for_category.first[\"parent_category_id\"]).to eq(category.id)\n      expect(subcategories_for_category.first[\"id\"]).to eq(subcategory.id)\n    end\n\n    it 'does not return subcategories without query param' do\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      sign_in(user)\n\n      get \"/categories.json\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category).to eq(nil)\n    end\n\n    it 'includes topics for categories, subcategories and subsubcategories when requested' do\n      SiteSetting.max_category_nesting = 3\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n      subsubcategory = Fabricate(:category, user: admin, parent_category: subcategory)\n\n      topic1 = Fabricate(:topic, category: category)\n      topic2 = Fabricate(:topic, category: subcategory)\n      topic3 = Fabricate(:topic, category: subsubcategory)\n      CategoryFeaturedTopic.feature_topics\n\n      get \"/categories.json?include_subcategories=true&include_topics=true\"\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      category_response = category_list[\"categories\"].find { |c| c[\"id\"] == category.id }\n      expect(category_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic1.id)\n\n      subcategory_response = category_response[\"subcategory_list\"][0]\n      expect(subcategory_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic2.id)\n\n      subsubcategory_response = subcategory_response[\"subcategory_list\"][0]\n      expect(subsubcategory_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic3.id)\n    end\n\n    it 'includes subcategories and topics by default when view is subcategories_with_featured_topics' do\n      SiteSetting.max_category_nesting = 3\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      topic1 = Fabricate(:topic, category: category)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.desktop_category_page_style = \"subcategories_with_featured_topics\"\n      get \"/categories.json\"\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      category_response = category_list[\"categories\"].find { |c| c[\"id\"] == category.id }\n      expect(category_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic1.id)\n\n      expect(category_response[\"subcategory_list\"][0][\"id\"]).to eq(subcategory.id)\n    end\n\n    it \"does not n+1 with multiple topics\" do\n      category1 = Fabricate(:category)\n      category2 = Fabricate(:category)\n      topic1 = Fabricate(:topic, category: category1)\n\n      CategoryFeaturedTopic.feature_topics\n      SiteSetting.desktop_category_page_style = \"categories_with_featured_topics\"\n\n      # warmup\n      get \"/categories.json\"\n      expect(response.status).to eq(200)\n\n      first_request_queries = track_sql_queries do\n        get \"/categories.json\"\n        expect(response.status).to eq(200)\n      end\n\n      category_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category1.id }\n      expect(category_response[\"topics\"].count).to eq(1)\n\n      topic2 = Fabricate(:topic, category: category2)\n      CategoryFeaturedTopic.feature_topics\n\n      second_request_queries = track_sql_queries do\n        get \"/categories.json\"\n        expect(response.status).to eq(200)\n      end\n\n      category1_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category1.id }\n      category2_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category2.id }\n      expect(category1_response[\"topics\"].size).to eq(1)\n      expect(category2_response[\"topics\"].size).to eq(1)\n\n      expect(first_request_queries.count).to eq(second_request_queries.count)\n    end\n\n    it 'does not show uncategorized unless allow_uncategorized_topics' do\n      SiteSetting.desktop_category_page_style = \"categories_boxes_with_topics\"\n\n      uncategorized = Category.find(SiteSetting.uncategorized_category_id)\n      Fabricate(:topic, category: uncategorized)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.allow_uncategorized_topics = false\n\n      get \"/categories.json\"\n      expect(response.parsed_body[\"category_list\"][\"categories\"].map { |x| x['id'] }).not_to include(uncategorized.id)\n    end\n  end\n\n  context 'extensibility event' do\n    before do\n      sign_in(admin)\n    end\n\n    it \"triggers a extensibility event\" do\n      event = DiscourseEvent.track_events {\n        put \"/categories/#{category.id}.json\", params: {\n          name: 'hello',\n          color: 'ff0',\n          text_color: 'fff'\n        }\n      }.last\n\n      expect(event[:event_name]).to eq(:category_updated)\n      expect(event[:params].first).to eq(category)\n    end\n  end\n\n  context '#create' do\n    it \"requires the user to be logged in\" do\n      post \"/categories.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      before do\n        Jobs.run_immediately!\n        sign_in(admin)\n      end\n\n      it \"raises an exception when they don't have permission to create it\" do\n        sign_in(Fabricate(:user))\n        post \"/categories.json\", params: {\n          name: 'hello', color: 'ff0', text_color: 'fff'\n        }\n\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an exception when the name is missing\" do\n        post \"/categories.json\", params: { color: \"ff0\", text_color: \"fff\" }\n        expect(response.status).to eq(400)\n      end\n\n      describe \"failure\" do\n        it \"returns errors on a duplicate category name\" do\n          category = Fabricate(:category, user: admin)\n\n          post \"/categories.json\", params: {\n            name: category.name, color: \"ff0\", text_color: \"fff\"\n          }\n\n          expect(response.status).to eq(422)\n        end\n\n        it \"returns errors with invalid group\" do\n          category = Fabricate(:category, user: admin)\n          readonly = CategoryGroup.permission_types[:readonly]\n\n          post \"/categories.json\", params: {\n            name: category.name, color: \"ff0\", text_color: \"fff\", permissions: { \"invalid_group\" => readonly }\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body['errors']).to be_present\n        end\n      end\n\n      describe \"success\" do\n        it \"works\" do\n          SiteSetting.enable_category_group_moderation = true\n\n          readonly = CategoryGroup.permission_types[:readonly]\n          create_post = CategoryGroup.permission_types[:create_post]\n          group = Fabricate(:group)\n\n          post \"/categories.json\", params: {\n            name: \"hello\",\n            color: \"ff0\",\n            text_color: \"fff\",\n            slug: \"hello-cat\",\n            auto_close_hours: 72,\n            search_priority: Searchable::PRIORITIES[:ignore],\n            reviewable_by_group_name: group.name,\n            permissions: {\n              \"everyone\" => readonly,\n              \"staff\" => create_post\n            }\n          }\n\n          expect(response.status).to eq(200)\n          cat_json = response.parsed_body['category']\n          expect(cat_json).to be_present\n          expect(cat_json['reviewable_by_group_name']).to eq(group.name)\n          expect(cat_json['name']).to eq('hello')\n          expect(cat_json['slug']).to eq('hello-cat')\n          expect(cat_json['color']).to eq('ff0')\n          expect(cat_json['auto_close_hours']).to eq(72)\n          expect(cat_json['search_priority']).to eq(Searchable::PRIORITIES[:ignore])\n\n          category = Category.find(cat_json['id'])\n          expect(category.category_groups.map { |g| [g.group_id, g.permission_type] }.sort).to eq([\n            [Group[:everyone].id, readonly], [Group[:staff].id, create_post]\n          ])\n          expect(UserHistory.count).to eq(4) # 1 + 3 (bootstrap mode)\n        end\n      end\n    end\n  end\n\n  context '#show' do\n    before do\n      category.set_permissions(admins: :full)\n      category.save!\n    end\n\n    it \"requires the user to be logged in\" do\n      get \"/c/#{category.id}/show.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      it \"raises an exception if they don't have permission to see it\" do\n        admin.update!(admin: false)\n        sign_in(admin)\n        get \"/c/#{category.id}/show.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"renders category for users that have permission\" do\n        sign_in(admin)\n        get \"/c/#{category.id}/show.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  context '#destroy' do\n    it \"requires the user to be logged in\" do\n      delete \"/categories/category.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      it \"raises an exception if they don't have permission to delete it\" do\n        admin.update!(admin: false)\n        sign_in(admin)\n        delete \"/categories/#{category.slug}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"deletes the record\" do\n        sign_in(admin)\n\n        id = Fabricate(:topic_timer, category: category).id\n\n        expect do\n          delete \"/categories/#{category.slug}.json\"\n        end.to change(Category, :count).by(-1)\n        expect(response.status).to eq(200)\n        expect(UserHistory.count).to eq(1)\n        expect(TopicTimer.where(id: id).exists?).to eq(false)\n      end\n    end\n  end\n\n  context '#reorder' do\n    it \"reorders the categories\" do\n      sign_in(admin)\n\n      c1 = category\n      c2 = Fabricate(:category)\n      c3 = Fabricate(:category)\n      c4 = Fabricate(:category)\n      if c3.id < c2.id\n        tmp = c3; c2 = c3; c3 = tmp\n      end\n      c1.position = 8\n      c2.position = 6\n      c3.position = 7\n      c4.position = 5\n\n      payload = {}\n      payload[c1.id] = 4\n      payload[c2.id] = 6\n      payload[c3.id] = 6\n      payload[c4.id] = 5\n\n      post \"/categories/reorder.json\", params: { mapping: MultiJson.dump(payload) }\n\n      SiteSetting.fixed_category_positions = true\n      list = CategoryList.new(Guardian.new(admin))\n\n      expect(list.categories).to eq([\n        Category.find(SiteSetting.uncategorized_category_id),\n        c1,\n        c4,\n        c2,\n        c3\n      ])\n    end\n  end\n\n  context '#update' do\n    before do\n      Jobs.run_immediately!\n    end\n\n    it \"requires the user to be logged in\" do\n      put \"/categories/category.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      before do\n        sign_in(admin)\n      end\n\n      it \"raises an exception if they don't have permission to edit it\" do\n        sign_in(Fabricate(:user))\n        put \"/categories/#{category.slug}.json\", params: {\n          name: 'hello',\n          color: 'ff0',\n          text_color: 'fff'\n        }\n        expect(response).to be_forbidden\n      end\n\n      it \"returns errors on a duplicate category name\" do\n        other_category = Fabricate(:category, name: \"Other\", user: admin)\n        put \"/categories/#{category.id}.json\", params: {\n          name: other_category.name,\n          color: \"ff0\",\n          text_color: \"fff\",\n        }\n        expect(response.status).to eq(422)\n      end\n\n      it \"returns errors when there is a name conflict while moving a category into another\" do\n        parent_category = Fabricate(:category, name: \"Parent\", user: admin)\n        other_category = Fabricate(:category, name: category.name, user: admin, parent_category: parent_category, slug: \"a-different-slug\")\n\n        put \"/categories/#{category.id}.json\", params: {\n          parent_category_id: parent_category.id,\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"returns 422 if email_in address is already in use for other category\" do\n        _other_category = Fabricate(:category, name: \"Other\", email_in: \"mail@example.com\")\n\n        put \"/categories/#{category.id}.json\", params: {\n          name: \"Email\",\n          email_in: \"mail@example.com\",\n          color: \"ff0\",\n          text_color: \"fff\",\n        }\n        expect(response.status).to eq(422)\n      end\n\n      describe \"success\" do\n        it \"updates attributes correctly\" do\n          SiteSetting.tagging_enabled = true\n          readonly = CategoryGroup.permission_types[:readonly]\n          create_post = CategoryGroup.permission_types[:create_post]\n          tag_group = Fabricate(:tag_group)\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: \"hello\",\n            color: \"ff0\",\n            text_color: \"fff\",\n            slug: \"hello-category\",\n            auto_close_hours: 72,\n            permissions: {\n              \"everyone\" => readonly,\n              \"staff\" => create_post\n            },\n            custom_fields: {\n              \"dancing\" => \"frogs\"\n            },\n            minimum_required_tags: \"\",\n            allow_global_tags: 'true',\n            required_tag_groups: [{\n              name: tag_group.name,\n              min_count: 2\n            }]\n          }\n\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.category_groups.map { |g| [g.group_id, g.permission_type] }.sort).to eq([\n            [Group[:everyone].id, readonly], [Group[:staff].id, create_post]\n          ])\n          expect(category.name).to eq(\"hello\")\n          expect(category.slug).to eq(\"hello-category\")\n          expect(category.color).to eq(\"ff0\")\n          expect(category.auto_close_hours).to eq(72)\n          expect(category.custom_fields).to eq(\"dancing\" => \"frogs\")\n          expect(category.minimum_required_tags).to eq(0)\n          expect(category.allow_global_tags).to eq(true)\n          expect(category.category_required_tag_groups.count).to eq(1)\n          expect(category.category_required_tag_groups.first.tag_group.id).to eq(tag_group.id)\n          expect(category.category_required_tag_groups.first.min_count).to eq(2)\n        end\n\n        it 'logs the changes correctly' do\n          category.update!(permissions: { \"admins\" => CategoryGroup.permission_types[:create_post] })\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: 'new name',\n            color: category.color,\n            text_color: category.text_color,\n            slug: category.slug,\n            permissions: {\n              \"everyone\" => CategoryGroup.permission_types[:create_post]\n            },\n          }\n          expect(response.status).to eq(200)\n          expect(UserHistory.count).to eq(5) # 2 + 3 (bootstrap mode)\n        end\n\n        it 'updates per-category settings correctly' do\n          category.custom_fields[Category::REQUIRE_TOPIC_APPROVAL] = false\n          category.custom_fields[Category::REQUIRE_REPLY_APPROVAL] = false\n          category.custom_fields[Category::NUM_AUTO_BUMP_DAILY] = 0\n\n          category.navigate_to_first_post_after_read = false\n          category.save!\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: category.name,\n            color: category.color,\n            text_color: category.text_color,\n            navigate_to_first_post_after_read: true,\n            custom_fields: {\n              require_reply_approval: true,\n              require_topic_approval: true,\n              num_auto_bump_daily: 10\n            }\n          }\n\n          category.reload\n          expect(category.require_topic_approval?).to eq(true)\n          expect(category.require_reply_approval?).to eq(true)\n          expect(category.num_auto_bump_daily).to eq(10)\n          expect(category.navigate_to_first_post_after_read).to eq(true)\n        end\n\n        it \"can remove required tag group\" do\n          SiteSetting.tagging_enabled = true\n          category.update!(category_required_tag_groups: [ CategoryRequiredTagGroup.new(tag_group: Fabricate(:tag_group)) ])\n          put \"/categories/#{category.id}.json\", params: {\n            name: category.name,\n            color: category.color,\n            text_color: category.text_color,\n            allow_global_tags: 'false',\n            min_tags_from_required_group: 1,\n            required_tag_groups: []\n          }\n\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.category_required_tag_groups).to be_empty\n        end\n\n        it \"does not update other fields\" do\n          SiteSetting.tagging_enabled = true\n          tag_group_1 = Fabricate(:tag_group)\n          tag_group_2 = Fabricate(:tag_group)\n\n          category.update!(\n            allowed_tags: [\"hello\", \"world\"],\n            allowed_tag_groups: [tag_group_1.name],\n            category_required_tag_groups: [ CategoryRequiredTagGroup.new(tag_group: tag_group_2) ],\n            custom_fields: { field_1: 'hello', field_2: 'hello' }\n          )\n\n          put \"/categories/#{category.id}.json\"\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags.pluck(:name)).to contain_exactly(\"hello\", \"world\")\n          expect(category.tag_groups.pluck(:name)).to contain_exactly(tag_group_1.name)\n          expect(category.category_required_tag_groups.first.tag_group).to eq(tag_group_2)\n          expect(category.custom_fields).to eq({ 'field_1' => 'hello', 'field_2' => 'hello' })\n\n          put \"/categories/#{category.id}.json\", params: { allowed_tags: [], custom_fields: { field_1: nil } }\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags).to be_blank\n          expect(category.tag_groups.pluck(:name)).to contain_exactly(tag_group_1.name)\n          expect(category.category_required_tag_groups.first.tag_group).to eq(tag_group_2)\n          expect(category.custom_fields).to eq({ 'field_2' => 'hello' })\n\n          put \"/categories/#{category.id}.json\", params: { allowed_tags: [], allowed_tag_groups: [], required_tag_groups: [], custom_fields: { field_1: 'hi', field_2: nil } }\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags).to be_blank\n          expect(category.tag_groups).to be_blank\n          expect(category.category_required_tag_groups).to eq([])\n          expect(category.custom_fields).to eq({ 'field_1' => 'hi' })\n        end\n      end\n    end\n  end\n\n  context '#update_slug' do\n    it 'requires the user to be logged in' do\n      put \"/category/category/slug.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe 'logged in' do\n      before do\n        sign_in(admin)\n      end\n\n      it 'rejects blank' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: '   ' }\n        expect(response.status).to eq(422)\n        expect(response.parsed_body[\"errors\"]).to eq([\"Slug can't be blank\"])\n      end\n\n      it 'accepts valid custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: 'valid-slug' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('valid-slug')\n      end\n\n      it 'accepts not well formed custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: ' valid slug' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('valid-slug')\n      end\n\n      it 'accepts and sanitize custom slug when the slug generation method is not ascii' do\n        SiteSetting.slug_generation_method = 'none'\n        put \"/category/#{category.id}/slug.json\", params: { slug: ' another !_ slug @' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('another-slug')\n        SiteSetting.slug_generation_method = 'ascii'\n      end\n\n      it 'rejects invalid custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: '.' }\n        expect(response.status).to eq(422)\n        expect(response.parsed_body[\"errors\"]).to eq([\"Slug is invalid\"])\n      end\n    end\n  end\n\n  context '#categories_and_topics' do\n    before do\n      10.times.each { Fabricate(:topic) }\n    end\n\n    it 'works when SiteSetting.categories_topics is non-null' do\n      SiteSetting.categories_topics = 5\n\n      get '/categories_and_latest.json'\n      expect(response.parsed_body['topic_list']['topics'].size).to eq(5)\n    end\n\n    it 'works when SiteSetting.categories_topics is null' do\n      SiteSetting.categories_topics = 0\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n\n      category_list = json['category_list']\n      topic_list = json['topic_list']\n\n      expect(category_list['categories'].size).to eq(2) # 'Uncategorized' and category\n      expect(topic_list['topics'].size).to eq(5)\n\n      Fabricate(:category, parent_category: category)\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n      expect(json['category_list']['categories'].size).to eq(2)\n      expect(json['topic_list']['topics'].size).to eq(5)\n\n      Fabricate(:category)\n      Fabricate(:category)\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n      expect(json['category_list']['categories'].size).to eq(4)\n      expect(json['topic_list']['topics'].size).to eq(6)\n    end\n\n    it 'does not show uncategorized unless allow_uncategorized_topics' do\n      uncategorized = Category.find(SiteSetting.uncategorized_category_id)\n      Fabricate(:topic, category: uncategorized)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.allow_uncategorized_topics = false\n\n      get \"/categories_and_latest.json\"\n      expect(response.parsed_body[\"category_list\"][\"categories\"].map { |x| x['id'] }).not_to include(uncategorized.id)\n    end\n\n    describe 'Showing top topics from private categories' do\n      it 'returns the top topic from the private category when the user is a member' do\n        restricted_group = Fabricate(:group)\n        private_cat = Fabricate(:private_category, group: restricted_group)\n        private_topic = Fabricate(:topic, category: private_cat, like_count: 1000, posts_count: 100)\n        TopTopic.refresh!\n        restricted_group.add(user)\n        sign_in(user)\n\n        get \"/categories_and_top.json\"\n        parsed_topic = response.parsed_body.dig('topic_list', 'topics').detect do |t|\n          t.dig('id') == private_topic.id\n        end\n\n        expect(parsed_topic).to be_present\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\ndescribe CategorySerializer do\n  fab!(:user) { Fabricate(:user) }\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:group) { Fabricate(:group) }\n  fab!(:category) { Fabricate(:category, reviewable_by_group_id: group.id) }\n\n  it \"includes the reviewable by group name if enabled\" do\n    SiteSetting.enable_category_group_moderation = true\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:reviewable_by_group_name]).to eq(group.name)\n  end\n\n  it \"doesn't include the reviewable by group name if disabled\" do\n    SiteSetting.enable_category_group_moderation = false\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:reviewable_by_group_name]).to be_blank\n  end\n\n  it \"includes custom fields\" do\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:custom_fields]).to be_empty\n\n    category.custom_fields[\"enable_marketplace\"] = true\n    category.save_custom_fields\n\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:custom_fields]).to be_present\n  end\n\n  it \"does not include the default notification level when there is no user\" do\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json.key?(:notification_level)).to eq(false)\n  end\n\n  describe \"user notification level\" do\n    it \"includes the user's notification level\" do\n      CategoryUser.set_notification_level_for_category(user, NotificationLevels.all[:watching], category.id)\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n      expect(json[:notification_level]).to eq(NotificationLevels.all[:watching])\n    end\n  end\n\n  describe '#group_permissions' do\n    context \"category without group permissions configured\" do\n      it \"returns the right category group permissions for an anon user\" do\n        json = described_class.new(category, scope: Guardian.new, root: false).as_json\n\n        expect(json[:group_permissions]).to eq([\n          { permission_type: CategoryGroup.permission_types[:full], group_name: Group[:everyone]&.name }\n        ])\n      end\n    end\n\n    context \"category with group permissions configured\" do\n      fab!(:private_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:staff], name: 'bbb') }\n\n      fab!(:user_group) do\n        Fabricate(:group, visibility_level: Group.visibility_levels[:members], name: 'ccc').tap do |g|\n          g.add(user)\n        end\n      end\n\n      before do\n        group.update!(name: 'aaa')\n\n        category.set_permissions(\n          :everyone => :readonly,\n          group.name => :readonly,\n          user_group.name => :full,\n          private_group.name => :full,\n        )\n\n        category.save!\n      end\n\n      it \"returns the right category group permissions for an anon user\" do\n        json = described_class.new(category, scope: Guardian.new, root: false).as_json\n\n        expect(json[:group_permissions]).to eq([\n          { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },\n        ])\n      end\n\n      it \"returns the right category group permissions for a regular user ordered by ascending group name\" do\n        json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n\n        expect(json[:group_permissions]).to eq([\n          { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },\n          { permission_type: CategoryGroup.permission_types[:full], group_name: user_group.name },\n        ])\n      end\n\n      it \"returns the right category group permission for a staff user ordered by ascending group name\" do\n        json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json\n\n        expect(json[:group_permissions]).to eq([\n          { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },\n          { permission_type: CategoryGroup.permission_types[:full], group_name: private_group.name },\n          { permission_type: CategoryGroup.permission_types[:full], group_name: user_group.name },\n          { permission_type: CategoryGroup.permission_types[:readonly], group_name: 'everyone' },\n        ])\n      end\n\n      it \"returns the group permissions for everyone group too\" do\n        category.set_permissions(everyone: :readonly)\n        category.save!\n\n        json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json\n\n        expect(json[:group_permissions]).to eq([\n          { permission_type: CategoryGroup.permission_types[:readonly], group_name: 'everyone' },\n        ])\n      end\n    end\n  end\n\n  describe \"available groups\" do\n    it \"not included for a regular user\" do\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n      expect(json[:available_groups]).to eq(nil)\n    end\n\n    it \"included for an admin\" do\n      json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json\n      expect(json[:available_groups]).to eq(Group.order(:name).pluck(:name) - ['everyone'])\n    end\n  end\nend\n"], "fixing_code": ["import Controller from \"@ember/controller\";\nimport { action } from \"@ember/object\";\nimport { getAbsoluteURL } from \"discourse-common/lib/get-url\";\nimport discourseComputed, {\n  afterRender,\n} from \"discourse-common/utils/decorators\";\nimport { longDateNoYear } from \"discourse/lib/formatter\";\nimport Sharing from \"discourse/lib/sharing\";\nimport showModal from \"discourse/lib/show-modal\";\nimport { bufferedProperty } from \"discourse/mixins/buffered-content\";\nimport ModalFunctionality from \"discourse/mixins/modal-functionality\";\nimport I18n from \"I18n\";\nimport Category from \"discourse/models/category\";\nimport { getOwner } from \"discourse-common/lib/get-owner\";\n\nexport default Controller.extend(\n  ModalFunctionality,\n  bufferedProperty(\"invite\"),\n  {\n    topic: null,\n    post: null,\n    allowInvites: false,\n\n    onShow() {\n      this.setProperties({\n        topic: null,\n        post: null,\n        allowInvites: false,\n      });\n\n      this._showRestrictedGroupWarning();\n      this._selectUrl();\n    },\n\n    @afterRender\n    _showRestrictedGroupWarning() {\n      if (!this.model) {\n        return;\n      }\n\n      Category.fetchVisibleGroups(this.model.id).then((result) => {\n        if (result.groups.length > 0) {\n          this.flash(\n            I18n.t(\"topic.share.restricted_groups\", {\n              count: result.groups.length,\n              groupNames: result.groups.join(\", \"),\n            }),\n            \"warning\"\n          );\n        }\n      });\n    },\n\n    @afterRender\n    _selectUrl() {\n      const input = document.querySelector(\"input.invite-link\");\n      if (input && !this.site.mobileView) {\n        // if the input is auto-focused on mobile, iOS requires two taps of the copy button\n        input.setSelectionRange(0, this.url.length);\n        input.focus();\n      }\n    },\n\n    @discourseComputed(\"post.shareUrl\", \"topic.shareUrl\")\n    url(postUrl, topicUrl) {\n      if (postUrl) {\n        return getAbsoluteURL(postUrl);\n      } else if (topicUrl) {\n        return getAbsoluteURL(topicUrl);\n      }\n    },\n\n    @discourseComputed(\"post.created_at\", \"post.wiki\", \"post.last_wiki_edit\")\n    displayDate(createdAt, wiki, lastWikiEdit) {\n      const date = wiki && lastWikiEdit ? lastWikiEdit : createdAt;\n      return longDateNoYear(new Date(date));\n    },\n\n    @discourseComputed(\n      \"topic.{isPrivateMessage,invisible,category.read_restricted}\"\n    )\n    sources(topic) {\n      const privateContext =\n        this.siteSettings.login_required ||\n        topic?.isPrivateMessage ||\n        topic?.invisible ||\n        topic?.category?.read_restricted;\n\n      return Sharing.activeSources(\n        this.siteSettings.share_links,\n        privateContext\n      );\n    },\n\n    @action\n    share(source) {\n      Sharing.shareSource(source, {\n        title: this.topic.title,\n        url: this.url,\n      });\n    },\n\n    @action\n    inviteUsers() {\n      const controller = showModal(\"create-invite\");\n      controller.setProperties({\n        inviteToTopic: true,\n        topics: [this.topic],\n      });\n      controller.buffered.setProperties({\n        topicId: this.topic.id,\n        topicTitle: this.topic.title,\n      });\n    },\n\n    @action\n    replyAsNewTopic() {\n      const postStream = this.topic.postStream;\n      const postId = this.post?.id || postStream.findPostIdForPostNumber(1);\n      const post = postStream.findLoadedPost(postId);\n      const topicController = getOwner(this).lookup(\"controller:topic\");\n      topicController.actions.replyAsNewTopic.call(topicController, post);\n      this.send(\"closeModal\");\n    },\n  }\n);\n", "import discourseComputed, { on } from \"discourse-common/utils/decorators\";\nimport { NotificationLevels } from \"discourse/lib/notification-levels\";\nimport PermissionType from \"discourse/models/permission-type\";\nimport RestModel from \"discourse/models/rest\";\nimport Site from \"discourse/models/site\";\nimport User from \"discourse/models/user\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { get } from \"@ember/object\";\nimport { getOwner } from \"discourse-common/lib/get-owner\";\nimport getURL from \"discourse-common/lib/get-url\";\n\nconst STAFF_GROUP_NAME = \"staff\";\n\nconst Category = RestModel.extend({\n  permissions: null,\n\n  @on(\"init\")\n  setupGroupsAndPermissions() {\n    const availableGroups = this.available_groups;\n    if (!availableGroups) {\n      return;\n    }\n    this.set(\"availableGroups\", availableGroups);\n\n    const groupPermissions = this.group_permissions;\n\n    if (groupPermissions) {\n      this.set(\n        \"permissions\",\n        groupPermissions.map((elem) => {\n          availableGroups.removeObject(elem.group_name);\n          return elem;\n        })\n      );\n    }\n  },\n\n  @discourseComputed(\"required_tag_groups\", \"minimum_required_tags\")\n  minimumRequiredTags() {\n    if (this.required_tag_groups?.length > 0) {\n      return this.required_tag_groups.reduce(\n        (sum, rtg) => sum + rtg.min_count,\n        0\n      );\n    } else {\n      return this.minimum_required_tags > 0 ? this.minimum_required_tags : null;\n    }\n  },\n\n  @discourseComputed\n  availablePermissions() {\n    return [\n      PermissionType.create({ id: PermissionType.FULL }),\n      PermissionType.create({ id: PermissionType.CREATE_POST }),\n      PermissionType.create({ id: PermissionType.READONLY }),\n    ];\n  },\n\n  @discourseComputed(\"id\")\n  searchContext(id) {\n    return { type: \"category\", id, category: this };\n  },\n\n  @discourseComputed(\"parentCategory.ancestors\")\n  ancestors(parentAncestors) {\n    return [...(parentAncestors || []), this];\n  },\n\n  @discourseComputed(\"parentCategory.level\")\n  level(parentLevel) {\n    return (parentLevel || -1) + 1;\n  },\n\n  @discourseComputed(\"subcategories\")\n  isParent(subcategories) {\n    return subcategories && subcategories.length > 0;\n  },\n\n  @discourseComputed(\"subcategories\")\n  isGrandParent(subcategories) {\n    return (\n      subcategories &&\n      subcategories.some(\n        (cat) => cat.subcategories && cat.subcategories.length > 0\n      )\n    );\n  },\n\n  @discourseComputed(\"notification_level\")\n  isMuted(notificationLevel) {\n    return notificationLevel === NotificationLevels.MUTED;\n  },\n\n  @discourseComputed(\"isMuted\", \"subcategories\")\n  isHidden(isMuted, subcategories) {\n    if (!isMuted) {\n      return false;\n    } else if (!subcategories) {\n      return true;\n    }\n\n    if (subcategories.some((cat) => !cat.isHidden)) {\n      return false;\n    }\n\n    return true;\n  },\n\n  @discourseComputed(\"isMuted\", \"subcategories\")\n  hasMuted(isMuted, subcategories) {\n    if (isMuted) {\n      return true;\n    } else if (!subcategories) {\n      return false;\n    }\n\n    if (subcategories.some((cat) => cat.hasMuted)) {\n      return true;\n    }\n\n    return false;\n  },\n\n  @discourseComputed(\"notification_level\")\n  notificationLevelString(notificationLevel) {\n    // Get the key from the value\n    const notificationLevelString = Object.keys(NotificationLevels).find(\n      (key) => NotificationLevels[key] === notificationLevel\n    );\n    if (notificationLevelString) {\n      return notificationLevelString.toLowerCase();\n    }\n  },\n\n  @discourseComputed(\"name\")\n  path() {\n    return `/c/${Category.slugFor(this)}/${this.id}`;\n  },\n\n  @discourseComputed(\"path\")\n  url(path) {\n    return getURL(path);\n  },\n\n  @discourseComputed\n  fullSlug() {\n    return Category.slugFor(this).replace(/\\//g, \"-\");\n  },\n\n  @discourseComputed(\"name\")\n  nameLower(name) {\n    return name.toLowerCase();\n  },\n\n  @discourseComputed(\"url\")\n  unreadUrl(url) {\n    return `${url}/l/unread`;\n  },\n\n  @discourseComputed(\"url\")\n  newUrl(url) {\n    return `${url}/l/new`;\n  },\n\n  @discourseComputed(\"color\", \"text_color\")\n  style(color, textColor) {\n    return `background-color: #${color}; color: #${textColor}`;\n  },\n\n  @discourseComputed(\"topic_count\")\n  moreTopics(topicCount) {\n    return topicCount > (this.num_featured_topics || 2);\n  },\n\n  @discourseComputed(\"topic_count\", \"subcategories.[]\")\n  totalTopicCount(topicCount, subcategories) {\n    if (subcategories) {\n      subcategories.forEach((subcategory) => {\n        topicCount += subcategory.topic_count;\n      });\n    }\n    return topicCount;\n  },\n\n  @discourseComputed(\"default_slow_mode_seconds\")\n  defaultSlowModeMinutes(seconds) {\n    return seconds ? seconds / 60 : null;\n  },\n\n  save() {\n    const id = this.id;\n    const url = id ? `/categories/${id}` : \"/categories\";\n\n    return ajax(url, {\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        name: this.name,\n        slug: this.slug,\n        color: this.color,\n        text_color: this.text_color,\n        secure: this.secure,\n        permissions: this._permissionsForUpdate(),\n        auto_close_hours: this.auto_close_hours,\n        auto_close_based_on_last_post: this.get(\n          \"auto_close_based_on_last_post\"\n        ),\n        default_slow_mode_seconds: this.default_slow_mode_seconds,\n        position: this.position,\n        email_in: this.email_in,\n        email_in_allow_strangers: this.email_in_allow_strangers,\n        mailinglist_mirror: this.mailinglist_mirror,\n        parent_category_id: this.parent_category_id,\n        uploaded_logo_id: this.get(\"uploaded_logo.id\"),\n        uploaded_background_id: this.get(\"uploaded_background.id\"),\n        allow_badges: this.allow_badges,\n        custom_fields: this.custom_fields,\n        topic_template: this.topic_template,\n        all_topics_wiki: this.all_topics_wiki,\n        allow_unlimited_owner_edits_on_first_post: this\n          .allow_unlimited_owner_edits_on_first_post,\n        allowed_tags:\n          this.allowed_tags && this.allowed_tags.length > 0\n            ? this.allowed_tags\n            : null,\n        allowed_tag_groups:\n          this.allowed_tag_groups && this.allowed_tag_groups.length > 0\n            ? this.allowed_tag_groups\n            : null,\n        allow_global_tags: this.allow_global_tags,\n        required_tag_groups: this.required_tag_groups,\n        sort_order: this.sort_order,\n        sort_ascending: this.sort_ascending,\n        topic_featured_link_allowed: this.topic_featured_link_allowed,\n        show_subcategory_list: this.show_subcategory_list,\n        num_featured_topics: this.num_featured_topics,\n        default_view: this.default_view,\n        subcategory_list_style: this.subcategory_list_style,\n        default_top_period: this.default_top_period,\n        minimum_required_tags: this.minimum_required_tags,\n        navigate_to_first_post_after_read: this.get(\n          \"navigate_to_first_post_after_read\"\n        ),\n        search_priority: this.search_priority,\n        reviewable_by_group_name: this.reviewable_by_group_name,\n        read_only_banner: this.read_only_banner,\n        default_list_filter: this.default_list_filter,\n      }),\n      type: id ? \"PUT\" : \"POST\",\n    });\n  },\n\n  _permissionsForUpdate() {\n    const permissions = this.permissions;\n    let rval = {};\n    if (permissions.length) {\n      permissions.forEach((p) => (rval[p.group_name] = p.permission_type));\n    } else {\n      // empty permissions => staff-only access\n      rval[STAFF_GROUP_NAME] = PermissionType.FULL;\n    }\n    return rval;\n  },\n\n  destroy() {\n    return ajax(`/categories/${this.id || this.slug}`, {\n      type: \"DELETE\",\n    });\n  },\n\n  addPermission(permission) {\n    this.permissions.addObject(permission);\n    this.availableGroups.removeObject(permission.group_name);\n  },\n\n  removePermission(group_name) {\n    const permission = this.permissions.findBy(\"group_name\", group_name);\n    if (permission) {\n      this.permissions.removeObject(permission);\n      this.availableGroups.addObject(group_name);\n    }\n  },\n\n  updatePermission(group_name, type) {\n    this.permissions.forEach((p, i) => {\n      if (p.group_name === group_name) {\n        this.set(`permissions.${i}.permission_type`, type);\n      }\n    });\n  },\n\n  @discourseComputed(\"topics\")\n  latestTopic(topics) {\n    if (topics && topics.length) {\n      return topics[0];\n    }\n  },\n\n  @discourseComputed(\"topics\")\n  featuredTopics(topics) {\n    if (topics && topics.length) {\n      return topics.slice(0, this.num_featured_topics || 2);\n    }\n  },\n\n  @discourseComputed(\"id\", \"topicTrackingState.messageCount\")\n  unreadTopics(id) {\n    return this.topicTrackingState.countUnread(id);\n  },\n\n  @discourseComputed(\"id\", \"topicTrackingState.messageCount\")\n  newTopics(id) {\n    return this.topicTrackingState.countNew(id);\n  },\n\n  setNotification(notification_level) {\n    User.currentProp(\n      \"muted_category_ids\",\n      User.current().calculateMutedIds(\n        notification_level,\n        this.id,\n        \"muted_category_ids\"\n      )\n    );\n\n    const url = `/category/${this.id}/notifications`;\n    return ajax(url, { data: { notification_level }, type: \"POST\" }).then(\n      (data) => {\n        User.current().set(\n          \"indirectly_muted_category_ids\",\n          data.indirectly_muted_category_ids\n        );\n        this.set(\"notification_level\", notification_level);\n        this.notifyPropertyChange(\"notification_level\");\n      }\n    );\n  },\n\n  @discourseComputed(\"id\")\n  isUncategorizedCategory(id) {\n    return id === Site.currentProp(\"uncategorized_category_id\");\n  },\n});\n\nlet _uncategorized;\n\nCategory.reopenClass({\n  slugEncoded() {\n    let siteSettings = getOwner(this).lookup(\"site-settings:main\");\n    return siteSettings.slug_generation_method === \"encoded\";\n  },\n\n  findUncategorized() {\n    _uncategorized =\n      _uncategorized ||\n      Category.list().findBy(\n        \"id\",\n        Site.currentProp(\"uncategorized_category_id\")\n      );\n    return _uncategorized;\n  },\n\n  slugFor(category, separator = \"/\", depth = 3) {\n    if (!category) {\n      return \"\";\n    }\n\n    const parentCategory = get(category, \"parentCategory\");\n    let result = \"\";\n\n    if (parentCategory && depth > 1) {\n      result =\n        Category.slugFor(parentCategory, separator, depth - 1) + separator;\n    }\n\n    const id = get(category, \"id\"),\n      slug = get(category, \"slug\");\n\n    return !slug || slug.trim().length === 0\n      ? `${result}${id}-category`\n      : result + slug;\n  },\n\n  list() {\n    return Site.currentProp(\"categoriesList\");\n  },\n\n  listByActivity() {\n    return Site.currentProp(\"sortedCategories\");\n  },\n\n  _idMap() {\n    return Site.currentProp(\"categoriesById\");\n  },\n\n  findSingleBySlug(slug) {\n    if (!this.slugEncoded()) {\n      return Category.list().find((c) => Category.slugFor(c) === slug);\n    } else {\n      return Category.list().find(\n        (c) => Category.slugFor(c) === encodeURI(slug)\n      );\n    }\n  },\n\n  findById(id) {\n    if (!id) {\n      return;\n    }\n    return Category._idMap()[id];\n  },\n\n  findByIds(ids = []) {\n    const categories = [];\n    ids.forEach((id) => {\n      const found = Category.findById(id);\n      if (found) {\n        categories.push(found);\n      }\n    });\n    return categories;\n  },\n\n  findBySlugAndParent(slug, parentCategory) {\n    if (this.slugEncoded()) {\n      slug = encodeURI(slug);\n    }\n    return Category.list().find((category) => {\n      return (\n        category.slug === slug &&\n        (category.parentCategory || null) === parentCategory\n      );\n    });\n  },\n\n  findBySlugPath(slugPath) {\n    let category = null;\n\n    for (const slug of slugPath) {\n      category = this.findBySlugAndParent(slug, category);\n\n      if (!category) {\n        return null;\n      }\n    }\n\n    return category;\n  },\n\n  findBySlugPathWithID(slugPathWithID) {\n    let parts = slugPathWithID.split(\"/\").filter(Boolean);\n    // slugs found by star/glob pathing in ember do not automatically url decode - ensure that these are decoded\n    if (this.slugEncoded()) {\n      parts = parts.map((urlPart) => decodeURI(urlPart));\n    }\n    let category = null;\n\n    if (parts.length > 0 && parts[parts.length - 1].match(/^\\d+$/)) {\n      const id = parseInt(parts.pop(), 10);\n\n      category = Category.findById(id);\n    } else {\n      category = Category.findBySlugPath(parts);\n\n      if (\n        !category &&\n        parts.length > 0 &&\n        parts[parts.length - 1].match(/^\\d+-category/)\n      ) {\n        const id = parseInt(parts.pop(), 10);\n\n        category = Category.findById(id);\n      }\n    }\n\n    return category;\n  },\n\n  findBySlug(slug, parentSlug) {\n    const categories = Category.list();\n    let category;\n\n    if (parentSlug) {\n      const parentCategory = Category.findSingleBySlug(parentSlug);\n      if (parentCategory) {\n        if (slug === \"none\") {\n          return parentCategory;\n        }\n\n        category = categories.find((item) => {\n          return (\n            item &&\n            item.get(\"parentCategory\") === parentCategory &&\n            ((!this.slugEncoded() &&\n              Category.slugFor(item) === parentSlug + \"/\" + slug) ||\n              (this.slugEncoded() &&\n                Category.slugFor(item) ===\n                  encodeURI(parentSlug) + \"/\" + encodeURI(slug)))\n          );\n        });\n      }\n    } else {\n      category = Category.findSingleBySlug(slug);\n\n      // If we have a parent category, we need to enforce it\n      if (category && category.get(\"parentCategory\")) {\n        return;\n      }\n    }\n\n    // In case the slug didn't work, try to find it by id instead.\n    if (!category) {\n      category = categories.findBy(\"id\", parseInt(slug, 10));\n    }\n\n    return category;\n  },\n\n  fetchVisibleGroups(id) {\n    return ajax(`/c/${id}/visible_groups.json`);\n  },\n\n  reloadById(id) {\n    return ajax(`/c/${id}/show.json`);\n  },\n\n  reloadBySlugPath(slugPath) {\n    return ajax(`/c/${slugPath}/find_by_slug.json`);\n  },\n\n  reloadCategoryWithPermissions(params, store, site) {\n    return this.reloadBySlugPath(params.slug).then((result) =>\n      this._includePermissions(result.category, store, site)\n    );\n  },\n\n  _includePermissions(category, store, site) {\n    const record = store.createRecord(\"category\", category);\n    record.setupGroupsAndPermissions();\n    site.updateCategory(record);\n    return record;\n  },\n\n  search(term, opts) {\n    let limit = 5;\n    let parentCategoryId;\n\n    if (opts) {\n      if (opts.limit === 0) {\n        return [];\n      } else if (opts.limit) {\n        limit = opts.limit;\n      }\n      if (opts.parentCategoryId) {\n        parentCategoryId = opts.parentCategoryId;\n      }\n    }\n\n    const emptyTerm = term === \"\";\n    let slugTerm = term;\n\n    if (!emptyTerm) {\n      term = term.toLowerCase();\n      slugTerm = term;\n      term = term.replace(/-/g, \" \");\n    }\n\n    const categories = Category.listByActivity();\n    const length = categories.length;\n    let i;\n    let data = [];\n\n    const done = () => {\n      return data.length === limit;\n    };\n\n    const validCategoryParent = (category) => {\n      return (\n        !parentCategoryId ||\n        category.get(\"parent_category_id\") === parentCategoryId\n      );\n    };\n\n    for (i = 0; i < length && !done(); i++) {\n      const category = categories[i];\n      if (\n        ((emptyTerm && !category.get(\"parent_category_id\")) ||\n          (!emptyTerm &&\n            (category.get(\"name\").toLowerCase().indexOf(term) === 0 ||\n              category.get(\"slug\").toLowerCase().indexOf(slugTerm) === 0))) &&\n        validCategoryParent(category)\n      ) {\n        data.push(category);\n      }\n    }\n\n    if (!done()) {\n      for (i = 0; i < length && !done(); i++) {\n        const category = categories[i];\n\n        if (\n          ((!emptyTerm &&\n            category.get(\"name\").toLowerCase().indexOf(term) > 0) ||\n            category.get(\"slug\").toLowerCase().indexOf(slugTerm) > 0) &&\n          validCategoryParent(category)\n        ) {\n          if (data.indexOf(category) === -1) {\n            data.push(category);\n          }\n        }\n      }\n    }\n\n    return data.sortBy(\"read_restricted\");\n  },\n});\n\nexport default Category;\n", "import CategoryFixtures from \"discourse/tests/fixtures/category-fixtures\";\nimport I18n from \"I18n\";\nimport { click, visit } from \"@ember/test-helpers\";\nimport {\n  acceptance,\n  exists,\n  query,\n  queryAll,\n} from \"discourse/tests/helpers/qunit-helpers\";\nimport selectKit from \"discourse/tests/helpers/select-kit-helper\";\nimport { test } from \"qunit\";\n\nacceptance(\"Share and Invite modal\", function (needs) {\n  needs.user();\n\n  needs.pretender((server, helper) => {\n    server.get(`/c/2481/visible_groups.json`, () =>\n      helper.response(200, {\n        groups: [\"group_name_1\", \"group_name_2\"],\n      })\n    );\n\n    server.get(`/c/2/visible_groups.json`, () =>\n      helper.response(200, {\n        groups: [],\n      })\n    );\n  });\n\n  test(\"Topic footer button\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button exists\"\n    );\n\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n\n    assert.notOk(\n      exists(\"#modal-alert.alert-warning\"),\n      \"it does not show the alert with restricted groups\"\n    );\n\n    assert.ok(\n      queryAll(\"input.invite-link\")\n        .val()\n        .includes(\"/t/internationalization-localization/280?u=eviltrout\"),\n      \"it shows the topic sharing url\"\n    );\n\n    assert.ok(\n      exists(\".link-share-actions .invite\"),\n      \"it shows the invite button\"\n    );\n  });\n\n  test(\"Post date link\", async function (assert) {\n    await visit(\"/t/short-topic-with-two-posts/54077\");\n    await click(\"#post_2 .post-info.post-date a\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the share modal\");\n  });\n\n  test(\"Share topic in a restricted category\", async function (assert) {\n    await visit(\"/t/topic-in-restricted-group/2481\");\n\n    assert.ok(\n      exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button exists\"\n    );\n\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n    assert.ok(\n      exists(\"#modal-alert.alert-warning\"),\n      \"it shows restricted warning\"\n    );\n    assert.strictEqual(\n      query(\"#modal-alert.alert-warning\").innerText,\n      I18n.t(\"topic.share.restricted_groups\", {\n        count: 2,\n        groupNames: \"group_name_1, group_name_2\",\n      }),\n      \"it shows correct restricted group name\"\n    );\n  });\n});\n\nacceptance(\"Share and Invite modal - mobile\", function (needs) {\n  needs.user();\n  needs.mobileView();\n\n  test(\"Topic footer mobile button\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      !exists(\"#topic-footer-button-share-and-invite\"),\n      \"the button doesn\u2019t exist\"\n    );\n\n    const subject = selectKit(\".topic-footer-mobile-dropdown\");\n    await subject.expand();\n    await subject.selectRowByValue(\"share-and-invite\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the modal\");\n  });\n});\n\nacceptance(\"Share url with badges disabled - desktop\", function (needs) {\n  needs.user();\n  needs.settings({ enable_badges: false });\n\n  needs.pretender((server, helper) => {\n    server.get(\"/c/feature/find_by_slug.json\", () =>\n      helper.response(200, CategoryFixtures[\"/c/1/show.json\"])\n    );\n  });\n\n  test(\"topic footer button - badges disabled - desktop\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-footer-button-share-and-invite\");\n\n    assert.notOk(\n      queryAll(\"input.invite-link\").val().includes(\"?u=eviltrout\"),\n      \"it doesn't add the username param when badges are disabled\"\n    );\n  });\n});\n", "import {\n  acceptance,\n  chromeTest,\n  count,\n  exists,\n  query,\n  queryAll,\n  selectText,\n  visible,\n} from \"discourse/tests/helpers/qunit-helpers\";\nimport {\n  click,\n  currentURL,\n  fillIn,\n  triggerKeyEvent,\n  visit,\n} from \"@ember/test-helpers\";\nimport I18n from \"I18n\";\nimport selectKit from \"discourse/tests/helpers/select-kit-helper\";\nimport { test } from \"qunit\";\nimport { withPluginApi } from \"discourse/lib/plugin-api\";\nimport topicFixtures from \"discourse/tests/fixtures/topic\";\nimport { cloneJSON } from \"discourse-common/lib/object\";\nimport CategoryFixtures from \"discourse/tests/fixtures/category-fixtures\";\n\nacceptance(\"Topic\", function (needs) {\n  needs.user();\n  needs.pretender((server, helper) => {\n    server.get(\"/c/2/visible_groups.json\", () =>\n      helper.response(200, {\n        groups: [],\n      })\n    );\n\n    server.get(\"/c/feature/find_by_slug.json\", () => {\n      return helper.response(200, CategoryFixtures[\"/c/1/show.json\"]);\n    });\n    server.put(\"/posts/398/wiki\", () => {\n      return helper.response({});\n    });\n  });\n\n  test(\"Reply as new topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"button.share:nth-of-type(1)\");\n    await click(\"button.new-topic\");\n\n    assert.ok(exists(\".d-editor-input\"), \"the composer input is visible\");\n\n    assert.strictEqual(\n      queryAll(\".d-editor-input\").val().trim(),\n      `Continuing the discussion from [Internationalization / localization](${window.location.origin}/t/internationalization-localization/280):`,\n      \"it fills composer with the ring string\"\n    );\n    assert.strictEqual(\n      selectKit(\".category-chooser\").header().value(),\n      \"2\",\n      \"it fills category selector with the right category\"\n    );\n  });\n\n  test(\"Reply as new message\", async function (assert) {\n    await visit(\"/t/pm-for-testing/12\");\n    await click(\"button.share:nth-of-type(1)\");\n    await click(\"button.new-topic\");\n\n    assert.ok(exists(\".d-editor-input\"), \"the composer input is visible\");\n\n    assert.strictEqual(\n      queryAll(\".d-editor-input\").val().trim(),\n      `Continuing the discussion from [PM for testing](${window.location.origin}/t/pm-for-testing/12):`,\n      \"it fills composer with the ring string\"\n    );\n\n    const privateMessageUsers = selectKit(\"#private-message-users\");\n    assert.strictEqual(\n      privateMessageUsers.header().value(),\n      \"someguy,test,Group\",\n      \"it fills up the composer correctly\"\n    );\n  });\n\n  test(\"Share Modal\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:first-child button.share\");\n\n    assert.ok(exists(\".share-topic-modal\"), \"it shows the share modal\");\n  });\n\n  test(\"Showing and hiding the edit controls\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    assert.ok(exists(\"#edit-title\"), \"it shows the editing controls\");\n    assert.ok(\n      !exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link is not shown\"\n    );\n\n    await fillIn(\"#edit-title\", \"this is the new title\");\n    await click(\"#topic-title .cancel-edit\");\n    assert.ok(!exists(\"#edit-title\"), \"it hides the editing controls\");\n  });\n\n  test(\"Updating the topic title and category\", async function (assert) {\n    const categoryChooser = selectKit(\".title-wrapper .category-chooser\");\n\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\"#topic-title .d-icon-pencil-alt\");\n    await fillIn(\"#edit-title\", \"this is the new title\");\n    await categoryChooser.expand();\n    await categoryChooser.selectRowByValue(4);\n    await click(\"#topic-title .submit-edit\");\n\n    assert.strictEqual(\n      queryAll(\"#topic-title .badge-category\").text(),\n      \"faq\",\n      \"it displays the new category\"\n    );\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"this is the new title\",\n      \"it displays the new title\"\n    );\n  });\n\n  test(\"Marking a topic as wiki\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(!exists(\"a.wiki\"), \"it does not show the wiki icon\");\n\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".topic-post:nth-of-type(1) button.show-post-admin-menu\");\n    await click(\".btn.wiki\");\n\n    assert.strictEqual(count(\"button.wiki\"), 1, \"it shows the wiki icon\");\n  });\n\n  test(\"Visit topic routes\", async function (assert) {\n    await visit(\"/t/12\");\n\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"PM for testing\",\n      \"it routes to the right topic\"\n    );\n\n    await visit(\"/t/280/20\");\n\n    assert.strictEqual(\n      queryAll(\".fancy-title\").text().trim(),\n      \"Internationalization / localization\",\n      \"it routes to the right topic\"\n    );\n  });\n\n  test(\"Updating the topic title with emojis\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"emojis title :bike: :blonde_woman:t6:\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\").html().trim().indexOf(\"bike.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Updating the topic title with unicode emojis\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"emojis title \ud83d\udc68\u200d\ud83c\udf3e\ud83d\ude4f\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\").html().trim().indexOf(\"man_farmer.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Updating the topic title with unicode emojis without whitespaces\", async function (assert) {\n    this.siteSettings.enable_inline_emoji_translation = true;\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\"#topic-title .d-icon-pencil-alt\");\n\n    await fillIn(\"#edit-title\", \"Test\ud83d\ude42Title\");\n\n    await click(\"#topic-title .submit-edit\");\n\n    assert.ok(\n      queryAll(\".fancy-title\")\n        .html()\n        .trim()\n        .indexOf(\"slightly_smiling_face.png\") !== -1,\n      \"it displays the new title with emojis\"\n    );\n  });\n\n  test(\"Suggested topics\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.strictEqual(\n      queryAll(\"#suggested-topics .suggested-topics-title\").text().trim(),\n      I18n.t(\"suggested_topics.title\")\n    );\n  });\n\n  test(\"Deleting a topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".widget-button.delete\");\n    await click(\".toggle-admin-menu\");\n    assert.ok(exists(\".topic-admin-recover\"), \"it shows the recover button\");\n  });\n\n  test(\"Deleting a popular topic displays confirmation modal\", async function (assert) {\n    this.siteSettings.min_topic_views_for_delete_confirm = 10;\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".topic-post:nth-of-type(1) button.show-more-actions\");\n    await click(\".widget-button.delete\");\n    assert.ok(\n      visible(\".delete-topic-confirm-modal\"),\n      \"it shows the delete confirmation modal\"\n    );\n\n    await click(\".delete-topic-confirm-modal .btn-primary\");\n    assert.ok(\n      !visible(\".delete-topic-confirm-modal\"),\n      \"it hides the delete confirmation modal\"\n    );\n    await click(\".widget-button.delete\");\n    await click(\".delete-topic-confirm-modal .btn-danger\");\n    await click(\".toggle-admin-menu\");\n    assert.ok(exists(\".topic-admin-recover\"), \"it shows the recover button\");\n  });\n\n  test(\"Group category moderator posts\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    assert.ok(exists(\".category-moderator\"), \"it has a class applied\");\n    assert.ok(exists(\".d-icon-shield-alt\"), \"it shows an icon\");\n  });\n});\n\nacceptance(\"Topic featured links\", function (needs) {\n  needs.user();\n  needs.settings({\n    topic_featured_link_enabled: true,\n    max_topic_title_length: 80,\n    exclude_rel_nofollow_domains: \"example.com\",\n  });\n\n  test(\"remove nofollow attribute\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n\n    const link = queryAll(\".title-wrapper .topic-featured-link\");\n    assert.strictEqual(link.text(), \" example.com\");\n    assert.strictEqual(link.attr(\"rel\"), \"ugc\");\n  });\n\n  test(\"remove featured link\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n    assert.ok(\n      exists(\".title-wrapper .topic-featured-link\"),\n      \"link is shown with topic title\"\n    );\n\n    await click(\".title-wrapper .edit-topic\");\n    assert.ok(\n      exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link\"\n    );\n\n    // TODO: decide if we want to test this, test is flaky so it\n    // was commented out.\n    // If not fixed by May 2021, delete this code block\n    //\n    //await click(\".title-wrapper .remove-featured-link\");\n    //await click(\".title-wrapper .submit-edit\");\n    //assert.ok(!exists(\".title-wrapper .topic-featured-link\"), \"link is gone\");\n  });\n\n  test(\"Converting to a public topic\", async function (assert) {\n    await visit(\"/t/test-pm/34\");\n    assert.ok(exists(\".private_message\"));\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-convert button\");\n\n    let categoryChooser = selectKit(\n      \".convert-to-public-topic .category-chooser\"\n    );\n    await categoryChooser.expand();\n    await categoryChooser.selectRowByValue(21);\n\n    await click(\".convert-to-public-topic .btn-primary\");\n    assert.ok(!exists(\".private_message\"));\n  });\n\n  test(\"Unpinning unlisted topic\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n    await click(\".make-banner\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-visible .btn\");\n\n    await click(\".toggle-admin-menu\");\n    assert.ok(\n      exists(\".topic-admin-pin\"),\n      \"it should show the multi select menu\"\n    );\n  });\n\n  test(\"selecting posts\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-multi-select .btn\");\n\n    assert.ok(\n      exists(\".selected-posts:not(.hidden)\"),\n      \"it should show the multi select menu\"\n    );\n\n    assert.ok(\n      exists(\".select-all\"),\n      \"it should allow users to select all the posts\"\n    );\n  });\n\n  test(\"select below\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-multi-select .btn\");\n    await click(\"#post_3 .select-below\");\n\n    assert.ok(\n      queryAll(\".selected-posts\")\n        .html()\n        .includes(I18n.t(\"topic.multi_select.description\", { count: 18 })),\n      \"it should select the right number of posts\"\n    );\n\n    await click(\"#post_2 .select-below\");\n\n    assert.ok(\n      queryAll(\".selected-posts\")\n        .html()\n        .includes(I18n.t(\"topic.multi_select.description\", { count: 19 })),\n      \"it should select the right number of posts\"\n    );\n  });\n\n  test(\"View Hidden Replies\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await click(\".gap\");\n\n    assert.ok(!exists(\".gap\"), \"it hides gap\");\n  });\n\n  chromeTest(\n    \"Quoting a quote keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await click(\".quote-button .insert-quote\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  chromeTest(\n    \"Quoting a quote of a different topic keeps the original topic title\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_9 blockquote\");\n      await click(\".quote-button .insert-quote\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf(\n            'quote=\"A new topic with a link to another topic, post:3, topic:62\"'\n          ) !== -1\n      );\n    }\n  );\n\n  chromeTest(\n    \"Quoting a quote with the Reply button keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await click(\".reply\");\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  // Using J/K on Firefox clean the text selection, so this won't work there\n  chromeTest(\n    \"Quoting a quote with replyAsNewTopic keeps the original poster name\",\n    async function (assert) {\n      await visit(\"/t/internationalization-localization/280\");\n      await selectText(\"#post_5 blockquote\");\n      await triggerKeyEvent(document, \"keypress\", \"j\".charCodeAt(0));\n      await triggerKeyEvent(document, \"keypress\", \"t\".charCodeAt(0));\n\n      assert.ok(\n        queryAll(\".d-editor-input\")\n          .val()\n          .indexOf('quote=\"codinghorror said, post:3, topic:280\"') !== -1\n      );\n    }\n  );\n\n  test(\"Quoting by selecting text can mark the quote as full\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n    await selectText(\"#post_5 .cooked\");\n    await click(\".quote-button .insert-quote\");\n\n    assert.ok(\n      queryAll(\".d-editor-input\")\n        .val()\n        .indexOf('quote=\"pekka, post:5, topic:280, full:true\"') !== -1\n    );\n  });\n});\n\nacceptance(\"Topic featured links\", function (needs) {\n  needs.user();\n  needs.settings({\n    topic_featured_link_enabled: true,\n    max_topic_title_length: 80,\n  });\n\n  test(\"remove featured link\", async function (assert) {\n    await visit(\"/t/-/299/1\");\n    assert.ok(\n      exists(\".title-wrapper .topic-featured-link\"),\n      \"link is shown with topic title\"\n    );\n\n    await click(\".title-wrapper .edit-topic\");\n    assert.ok(\n      exists(\".title-wrapper .remove-featured-link\"),\n      \"link to remove featured link\"\n    );\n  });\n});\n\nacceptance(\"Topic with title decorated\", function (needs) {\n  needs.user();\n  needs.hooks.beforeEach(() => {\n    withPluginApi(\"0.8.40\", (api) => {\n      api.decorateTopicTitle((topic, node, topicTitleType) => {\n        node.innerText = `${node.innerText}-${topic.id}-${topicTitleType}`;\n      });\n    });\n  });\n\n  test(\"Decorate topic title\", async function (assert) {\n    await visit(\"/t/internationalization-localization/280\");\n\n    assert.ok(\n      query(\".fancy-title\").innerText.endsWith(\"-280-topic-title\"),\n      \"it decorates topic title\"\n    );\n\n    assert.ok(\n      query(\".raw-topic-link:nth-child(1)\").innerText.endsWith(\n        \"-27331-topic-list-item-title\"\n      ),\n      \"it decorates topic list item title\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as an admin\", function (needs) {\n  needs.user({ admin: true });\n\n  test(\"Admin pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      exists(\".make-banner\"),\n      \"it should show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as a staff member\", function (needs) {\n  needs.user({ moderator: true, admin: false, trust_level: 2 });\n\n  test(\"Staff pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      exists(\".make-banner\"),\n      \"it should show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic pinning/unpinning as a group moderator\", function (needs) {\n  needs.user({ moderator: false, admin: false, trust_level: 1 });\n\n  test(\"Group category moderator pinning topic\", async function (assert) {\n    await visit(\"/t/topic-for-group-moderators/2480\");\n\n    await click(\".toggle-admin-menu\");\n    await click(\".topic-admin-pin .btn\");\n\n    assert.ok(\n      exists(\".feature-topic .btn-primary\"),\n      \"it should show the 'Pin Topic' button\"\n    );\n\n    assert.ok(\n      !exists(\".make-banner\"),\n      \"it should not show the 'Banner Topic' button\"\n    );\n  });\n});\n\nacceptance(\"Topic last visit line\", function (needs) {\n  needs.user({ moderator: false, admin: false, trust_level: 1 });\n\n  test(\"visit topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n\n    assert.ok(\n      exists(\".topic-post-visited-line.post-10\"),\n      \"shows the last visited line on the right post\"\n    );\n\n    await visit(\"/t/-/9\");\n\n    assert.ok(\n      !exists(\".topic-post-visited-line\"),\n      \"does not show last visited line if post is the last post\"\n    );\n  });\n});\n\nacceptance(\"Topic filter replies to post number\", function (needs) {\n  needs.settings({\n    enable_filtered_replies_view: true,\n  });\n\n  test(\"visit topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n\n    assert.equal(\n      query(\"#post_3 .show-replies\").title,\n      I18n.t(\"post.filtered_replies_hint\", { count: 3 }),\n      \"it displays the right title for filtering by replies\"\n    );\n\n    await visit(\"/\");\n    await visit(\"/t/-/280?replies_to_post_number=3\");\n\n    assert.equal(\n      query(\"#post_3 .show-replies\").title,\n      I18n.t(\"post.view_all_posts\"),\n      \"it displays the right title when filtered by replies\"\n    );\n  });\n});\n\nacceptance(\"Navigating between topics\", function (needs) {\n  needs.pretender((server, helper) => {\n    const topicResponse = cloneJSON(topicFixtures[\"/t/280/1.json\"]);\n    const firstPost = topicResponse.post_stream.posts[0];\n    firstPost.cooked += `\\n<a class='same-topic-slugless' href='/t/280'>Link 1</a>`;\n    firstPost.cooked += `\\n<a class='same-topic-slugless-post' href='/t/280/3'>Link 2</a>`;\n    firstPost.cooked += `\\n<a class='diff-topic-slugless' href='/t/28830'>Link 3</a>`;\n    firstPost.cooked += `\\n<a class='diff-topic-slugless-post' href='/t/28830/1'>Link 4</a>`;\n    firstPost.cooked += `\\n<a class='by-post-id' href='/p/${firstPost.id}'>Link to Post</a>`;\n\n    server.get(\"/t/280.json\", () => helper.response(topicResponse));\n    server.get(\"/t/280/:post_number.json\", () =>\n      helper.response(topicResponse)\n    );\n  });\n\n  test(\"clicking slug-less URLs within the same topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.same-topic-slugless\");\n    assert.ok(currentURL().includes(\"/280\"));\n\n    await click(\"a.same-topic-slugless-post\");\n    assert.ok(currentURL().includes(\"/280\"));\n  });\n\n  test(\"clicking slug-less URLs to a different topic\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.diff-topic-slugless\");\n    assert.ok(currentURL().includes(\"/28830\"));\n\n    await visit(\"/t/-/280\");\n    await click(\"a.diff-topic-slugless-post\");\n    assert.ok(currentURL().includes(\"/28830\"));\n  });\n\n  test(\"clicking post URLs\", async function (assert) {\n    await visit(\"/t/-/280\");\n    await click(\"a.by-post-id\");\n    assert.ok(currentURL().includes(\"/280\"));\n  });\n});\n", "# frozen_string_literal: true\n\nclass CategoriesController < ApplicationController\n\n  requires_login except: [:index, :categories_and_latest, :categories_and_top, :show, :redirect, :find_by_slug, :visible_groups]\n\n  before_action :fetch_category, only: [:show, :update, :destroy, :visible_groups]\n  before_action :initialize_staff_action_logger, only: [:create, :update, :destroy]\n  skip_before_action :check_xhr, only: [:index, :categories_and_latest, :categories_and_top, :redirect]\n\n  SYMMETRICAL_CATEGORIES_TO_TOPICS_FACTOR = 1.5\n  MIN_CATEGORIES_TOPICS = 5\n\n  def redirect\n    return if handle_permalink(\"/category/#{params[:path]}\")\n    redirect_to path(\"/c/#{params[:path]}\")\n  end\n\n  def index\n    discourse_expires_in 1.minute\n\n    @description = SiteSetting.site_description\n\n    parent_category = Category.find_by_slug(params[:parent_category_id]) || Category.find_by(id: params[:parent_category_id].to_i)\n\n    include_subcategories = SiteSetting.desktop_category_page_style == \"subcategories_with_featured_topics\" ||\n      params[:include_subcategories] == \"true\"\n\n    category_options = {\n      is_homepage: current_homepage == \"categories\",\n      parent_category_id: params[:parent_category_id],\n      include_topics: include_topics(parent_category),\n      include_subcategories: include_subcategories\n    }\n\n    @category_list = CategoryList.new(guardian, category_options)\n\n    if category_options[:is_homepage] && SiteSetting.short_site_description.present?\n      @title = \"#{SiteSetting.title} - #{SiteSetting.short_site_description}\"\n    elsif !category_options[:is_homepage]\n      @title = \"#{I18n.t('js.filters.categories.title')} - #{SiteSetting.title}\"\n    end\n\n    respond_to do |format|\n      format.html do\n        store_preloaded(@category_list.preload_key, MultiJson.dump(CategoryListSerializer.new(@category_list, scope: guardian)))\n\n        style = SiteSetting.desktop_category_page_style\n        topic_options = {\n          per_page: CategoriesController.topics_per_page,\n          no_definitions: true\n        }\n\n        if style == \"categories_and_latest_topics\"\n          @topic_list = TopicQuery.new(current_user, topic_options).list_latest\n          @topic_list.more_topics_url = url_for(public_send(\"latest_path\"))\n        elsif style == \"categories_and_top_topics\"\n          @topic_list = TopicQuery.new(current_user, topic_options).list_top_for(SiteSetting.top_page_default_timeframe.to_sym)\n          @topic_list.more_topics_url = url_for(public_send(\"top_path\"))\n        end\n\n        if @topic_list.present? && @topic_list.topics.present?\n          store_preloaded(\n            @topic_list.preload_key,\n            MultiJson.dump(TopicListSerializer.new(@topic_list, scope: guardian))\n          )\n        end\n\n        render\n      end\n\n      format.json { render_serialized(@category_list, CategoryListSerializer) }\n    end\n  end\n\n  def categories_and_latest\n    categories_and_topics(:latest)\n  end\n\n  def categories_and_top\n    categories_and_topics(:top)\n  end\n\n  def move\n    guardian.ensure_can_create_category!\n\n    params.require(\"category_id\")\n    params.require(\"position\")\n\n    if category = Category.find(params[\"category_id\"])\n      category.move_to(params[\"position\"].to_i)\n      render json: success_json\n    else\n      render status: 500, json: failed_json\n    end\n  end\n\n  def reorder\n    guardian.ensure_can_create_category!\n\n    params.require(:mapping)\n    change_requests = MultiJson.load(params[:mapping])\n    by_category = Hash[change_requests.map { |cat, pos| [Category.find(cat.to_i), pos] }]\n\n    unless guardian.is_admin?\n      raise Discourse::InvalidAccess unless by_category.keys.all? { |c| guardian.can_see_category? c }\n    end\n\n    by_category.each do |cat, pos|\n      cat.position = pos\n      cat.save! if cat.will_save_change_to_position?\n    end\n\n    render json: success_json\n  end\n\n  def show\n    guardian.ensure_can_see!(@category)\n\n    if Category.topic_create_allowed(guardian).where(id: @category.id).exists?\n      @category.permission = CategoryGroup.permission_types[:full]\n    end\n\n    render_serialized(@category, CategorySerializer)\n  end\n\n  def create\n    guardian.ensure_can_create!(Category)\n    position = category_params.delete(:position)\n\n    @category =\n      begin\n        Category.new(required_create_params.merge(user: current_user))\n      rescue ArgumentError => e\n        return render json: { errors: [e.message] }, status: 422\n      end\n\n    if @category.save\n      @category.move_to(position.to_i) if position\n\n      Scheduler::Defer.later \"Log staff action create category\" do\n        @staff_action_logger.log_category_creation(@category)\n      end\n\n      render_serialized(@category, CategorySerializer)\n    else\n      render_json_error(@category)\n    end\n  end\n\n  def update\n    guardian.ensure_can_edit!(@category)\n\n    json_result(@category, serializer: CategorySerializer) do |cat|\n      old_category_params = category_params.dup\n\n      cat.move_to(category_params[:position].to_i) if category_params[:position]\n      category_params.delete(:position)\n\n      old_custom_fields = cat.custom_fields.dup\n      if category_params[:custom_fields]\n        category_params[:custom_fields].each do |key, value|\n          if value.present?\n            cat.custom_fields[key] = value\n          else\n            cat.custom_fields.delete(key)\n          end\n        end\n      end\n      category_params.delete(:custom_fields)\n\n      # properly null the value so the database constraint doesn't catch us\n      category_params[:email_in] = nil if category_params[:email_in]&.blank?\n      category_params[:minimum_required_tags] = 0 if category_params[:minimum_required_tags]&.blank?\n\n      old_permissions = cat.permissions_params\n\n      if result = cat.update(category_params)\n        Scheduler::Defer.later \"Log staff action change category settings\" do\n          @staff_action_logger.log_category_settings_change(\n            @category,\n            old_category_params,\n            old_permissions: old_permissions,\n            old_custom_fields: old_custom_fields\n          )\n        end\n      end\n\n      if result\n        DiscourseEvent.trigger(:category_updated, cat)\n      end\n\n      result\n    end\n  end\n\n  def update_slug\n    @category = Category.find(params[:category_id].to_i)\n    guardian.ensure_can_edit!(@category)\n\n    custom_slug = params[:slug].to_s\n\n    if custom_slug.blank?\n      error = @category.errors.full_message(:slug, I18n.t('errors.messages.blank'))\n      render_json_error(error)\n    elsif @category.update(slug: custom_slug)\n      render json: success_json\n    else\n      render_json_error(@category)\n    end\n  end\n\n  def set_notifications\n    category_id = params[:category_id].to_i\n    notification_level = params[:notification_level].to_i\n\n    CategoryUser.set_notification_level_for_category(current_user, notification_level, category_id)\n    render json: success_json.merge({ indirectly_muted_category_ids: CategoryUser.indirectly_muted_category_ids(current_user) })\n  end\n\n  def destroy\n    guardian.ensure_can_delete!(@category)\n    @category.destroy\n\n    Scheduler::Defer.later \"Log staff action delete category\" do\n      @staff_action_logger.log_category_deletion(@category)\n    end\n\n    render json: success_json\n  end\n\n  def find_by_slug\n    params.require(:category_slug)\n    @category = Category.find_by_slug_path(params[:category_slug].split('/'))\n\n    raise Discourse::NotFound unless @category.present?\n\n    if !guardian.can_see?(@category)\n      if SiteSetting.detailed_404 && group = @category.access_category_via_group\n        raise Discourse::InvalidAccess.new(\n          'not in group',\n          @category,\n          custom_message: 'not_in_group.title_category',\n          custom_message_params: { group: group.name },\n          group: group\n        )\n      else\n        raise Discourse::NotFound\n      end\n    end\n\n    @category.permission = CategoryGroup.permission_types[:full] if Category.topic_create_allowed(guardian).where(id: @category.id).exists?\n    render_serialized(@category, CategorySerializer)\n  end\n\n  def visible_groups\n    @guardian.ensure_can_see!(@category)\n    render json: success_json.merge(groups: @category.groups.merge(Group.visible_groups(current_user)).pluck(\"name\"))\n  end\n\n  private\n\n  def self.topics_per_page\n    return SiteSetting.categories_topics if SiteSetting.categories_topics > 0\n\n    count = Category.where(parent_category: nil).count\n    count = (SYMMETRICAL_CATEGORIES_TO_TOPICS_FACTOR * count).to_i\n    count > MIN_CATEGORIES_TOPICS ? count : MIN_CATEGORIES_TOPICS\n  end\n\n  def categories_and_topics(topics_filter)\n    discourse_expires_in 1.minute\n\n    category_options = {\n      is_homepage: current_homepage == \"categories\",\n      parent_category_id: params[:parent_category_id],\n      include_topics: false\n    }\n\n    topic_options = {\n      per_page: CategoriesController.topics_per_page,\n      no_definitions: true\n    }\n\n    result = CategoryAndTopicLists.new\n    result.category_list = CategoryList.new(guardian, category_options)\n\n    if topics_filter == :latest\n      result.topic_list = TopicQuery.new(current_user, topic_options).list_latest\n    elsif topics_filter == :top\n      result.topic_list = TopicQuery.new(current_user, topic_options).list_top_for(\n        SiteSetting.top_page_default_timeframe.to_sym\n      )\n    end\n\n    render_serialized(result, CategoryAndTopicListsSerializer, root: false)\n  end\n\n  def required_param_keys\n    [:name]\n  end\n\n  def required_create_params\n    required_param_keys.each do |key|\n      params.require(key)\n    end\n    category_params\n  end\n\n  def category_params\n    @category_params ||= begin\n      if p = params[:permissions]\n        p.each do |k, v|\n          p[k] = v.to_i\n        end\n      end\n\n      if SiteSetting.tagging_enabled\n        params[:allowed_tags] = params[:allowed_tags].presence || [] if params[:allowed_tags]\n        params[:allowed_tag_groups] = params[:allowed_tag_groups].presence || [] if params[:allowed_tag_groups]\n        params[:required_tag_groups] = params[:required_tag_groups].presence || [] if params[:required_tag_groups]\n      end\n\n      if SiteSetting.enable_category_group_moderation?\n        params[:reviewable_by_group_id] = Group.where(name: params[:reviewable_by_group_name]).pluck_first(:id) if params[:reviewable_by_group_name]\n      end\n\n      result = params.permit(\n        *required_param_keys,\n        :position,\n        :name,\n        :color,\n        :text_color,\n        :email_in,\n        :email_in_allow_strangers,\n        :mailinglist_mirror,\n        :all_topics_wiki,\n        :allow_unlimited_owner_edits_on_first_post,\n        :default_slow_mode_seconds,\n        :parent_category_id,\n        :auto_close_hours,\n        :auto_close_based_on_last_post,\n        :uploaded_logo_id,\n        :uploaded_background_id,\n        :slug,\n        :allow_badges,\n        :topic_template,\n        :sort_order,\n        :sort_ascending,\n        :topic_featured_link_allowed,\n        :show_subcategory_list,\n        :num_featured_topics,\n        :default_view,\n        :subcategory_list_style,\n        :default_top_period,\n        :minimum_required_tags,\n        :navigate_to_first_post_after_read,\n        :search_priority,\n        :allow_global_tags,\n        :read_only_banner,\n        :default_list_filter,\n        :reviewable_by_group_id,\n        custom_fields: [params[:custom_fields].try(:keys)],\n        permissions: [*p.try(:keys)],\n        allowed_tags: [],\n        allowed_tag_groups: [],\n        required_tag_groups: [:name, :min_count]\n      )\n\n      if result[:required_tag_groups] && !result[:required_tag_groups].is_a?(Array)\n        raise Discourse::InvalidParameters.new(:required_tag_groups)\n      end\n\n      result\n    end\n  end\n\n  def fetch_category\n    @category = Category.find_by_slug(params[:id]) || Category.find_by(id: params[:id].to_i)\n    raise Discourse::NotFound if @category.blank?\n  end\n\n  def initialize_staff_action_logger\n    @staff_action_logger = StaffActionLogger.new(current_user)\n  end\n\n  def include_topics(parent_category = nil)\n    style = SiteSetting.desktop_category_page_style\n    view_context.mobile_view? ||\n      params[:include_topics] ||\n      (parent_category && parent_category.subcategory_list_includes_topics?) ||\n      style == \"categories_with_featured_topics\" ||\n      style == \"subcategories_with_featured_topics\" ||\n      style == \"categories_boxes_with_topics\" ||\n      style == \"categories_with_top_topics\"\n  end\nend\n", "# frozen_string_literal: true\n\nclass CategorySerializer < SiteCategorySerializer\n\n  attributes :read_restricted,\n             :available_groups,\n             :auto_close_hours,\n             :auto_close_based_on_last_post,\n             :group_permissions,\n             :position,\n             :email_in,\n             :email_in_allow_strangers,\n             :mailinglist_mirror,\n             :all_topics_wiki,\n             :allow_unlimited_owner_edits_on_first_post,\n             :can_delete,\n             :cannot_delete_reason,\n             :is_special,\n             :allow_badges,\n             :custom_fields,\n             :topic_featured_link_allowed,\n             :search_priority,\n             :reviewable_by_group_name,\n             :default_slow_mode_seconds\n\n  def reviewable_by_group_name\n    object.reviewable_by_group.name\n  end\n\n  def include_reviewable_by_group_name?\n    SiteSetting.enable_category_group_moderation? && object.reviewable_by_group_id.present?\n  end\n\n  def group_permissions\n    @group_permissions ||= begin\n      perms = object\n        .category_groups\n        .joins(:group)\n        .includes(:group)\n        .merge(Group.visible_groups(scope&.user, \"groups.name ASC\", include_everyone: true))\n        .map do |cg|\n          {\n            permission_type: cg.permission_type,\n            group_name: cg.group.name\n          }\n        end\n\n      if perms.length == 0 && !object.read_restricted\n        perms << { permission_type: CategoryGroup.permission_types[:full], group_name: Group[:everyone]&.name.presence || :everyone }\n      end\n\n      perms\n    end\n  end\n\n  def include_group_permissions?\n    scope&.can_edit?(object)\n  end\n\n  def include_available_groups?\n    scope && scope.can_edit?(object)\n  end\n\n  def available_groups\n    Group.order(:name).pluck(:name) - group_permissions.map { |g| g[:group_name] }\n  end\n\n  def can_delete\n    true\n  end\n\n  def include_is_special?\n    [SiteSetting.meta_category_id, SiteSetting.staff_category_id, SiteSetting.uncategorized_category_id]\n      .include? object.id\n  end\n\n  def is_special\n    true\n  end\n\n  def include_can_delete?\n    scope && scope.can_delete?(object)\n  end\n\n  def include_cannot_delete_reason?\n    !include_can_delete? && scope && scope.can_edit?(object)\n  end\n\n  def include_email_in?\n    scope && scope.can_edit?(object)\n  end\n\n  def include_email_in_allow_strangers?\n    scope && scope.can_edit?(object)\n  end\n\n  def include_notification_level?\n    scope && scope.user\n  end\n\n  def notification_level\n    user = scope && scope.user\n    object.notification_level ||\n     (user && CategoryUser.where(user: user, category: object).first.try(:notification_level)) ||\n     CategoryUser.default_notification_level\n  end\n\n  def custom_fields\n    object.custom_fields\n  end\n\n  def include_custom_fields?\n    true\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"sidekiq/web\"\nrequire \"mini_scheduler/web\"\n\n# The following constants have been replaced with `RouteFormat` and are deprecated.\nUSERNAME_ROUTE_FORMAT = /[%\\w.\\-]+?/ unless defined? USERNAME_ROUTE_FORMAT\nBACKUP_ROUTE_FORMAT = /.+\\.(sql\\.gz|tar\\.gz|tgz)/i unless defined? BACKUP_ROUTE_FORMAT\n\nDiscourse::Application.routes.draw do\n  def patch(*) end # Disable PATCH requests\n\n  scope path: nil, constraints: { format: /(json|html|\\*\\/\\*)/ } do\n    relative_url_root = (defined?(Rails.configuration.relative_url_root) && Rails.configuration.relative_url_root) ? Rails.configuration.relative_url_root + '/' : '/'\n\n    match \"/404\", to: \"exceptions#not_found\", via: [:get, :post]\n    get \"/404-body\" => \"exceptions#not_found_body\"\n\n    get \"/bootstrap\" => \"bootstrap#index\"\n\n    post \"webhooks/aws\" => \"webhooks#aws\"\n    post \"webhooks/mailgun\"  => \"webhooks#mailgun\"\n    post \"webhooks/mailjet\"  => \"webhooks#mailjet\"\n    post \"webhooks/mandrill\" => \"webhooks#mandrill\"\n    post \"webhooks/postmark\" => \"webhooks#postmark\"\n    post \"webhooks/sendgrid\" => \"webhooks#sendgrid\"\n    post \"webhooks/sparkpost\" => \"webhooks#sparkpost\"\n\n    scope path: nil, constraints: { format: /.*/ } do\n      if Rails.env.development?\n        mount Sidekiq::Web => \"/sidekiq\"\n        mount Logster::Web => \"/logs\"\n      else\n        # only allow sidekiq in master site\n        mount Sidekiq::Web => \"/sidekiq\", constraints: AdminConstraint.new(require_master: true)\n        mount Logster::Web => \"/logs\", constraints: AdminConstraint.new\n      end\n    end\n\n    resources :about do\n      collection do\n        get \"live_post_counts\"\n      end\n    end\n\n    get \"finish-installation\" => \"finish_installation#index\"\n    get \"finish-installation/register\" => \"finish_installation#register\"\n    post \"finish-installation/register\" => \"finish_installation#register\"\n    get \"finish-installation/confirm-email\" => \"finish_installation#confirm_email\"\n    put \"finish-installation/resend-email\" => \"finish_installation#resend_email\"\n\n    get \"pub/check-slug\" => \"published_pages#check_slug\"\n    get \"pub/by-topic/:topic_id\" => \"published_pages#details\"\n    put \"pub/by-topic/:topic_id\" => \"published_pages#upsert\"\n    delete \"pub/by-topic/:topic_id\" => \"published_pages#destroy\"\n    get \"pub/:slug\" => \"published_pages#show\"\n\n    resources :directory_items\n\n    get \"site\" => \"site#site\"\n    namespace :site do\n      get \"settings\"\n      get \"custom_html\"\n      get \"banner\"\n      get \"emoji\"\n    end\n\n    get \"site/basic-info\" => 'site#basic_info'\n    get \"site/statistics\" => 'site#statistics'\n\n    get \"srv/status\" => \"forums#status\"\n\n    get \"wizard\" => \"wizard#index\"\n    get 'wizard/steps' => 'steps#index'\n    get 'wizard/steps/:id' => \"wizard#index\"\n    put 'wizard/steps/:id' => \"steps#update\"\n\n    namespace :admin, constraints: StaffConstraint.new do\n      get \"\" => \"admin#index\"\n\n      get 'plugins' => 'plugins#index'\n\n      resources :site_settings, constraints: AdminConstraint.new do\n        collection do\n          get \"category/:id\" => \"site_settings#index\"\n        end\n\n        put \"user_count\" => \"site_settings#user_count\"\n      end\n\n      get \"reports\" => \"reports#index\"\n      get \"reports/bulk\" => \"reports#bulk\"\n      get \"reports/:type\" => \"reports#show\"\n\n      resources :groups, only: [:create] do\n        member do\n          put \"owners\" => \"groups#add_owners\"\n          delete \"owners\" => \"groups#remove_owner\"\n          put \"primary\" => \"groups#set_primary\"\n        end\n      end\n      resources :groups, except: [:create], constraints: AdminConstraint.new do\n        collection do\n          put \"automatic_membership_count\" => \"groups#automatic_membership_count\"\n        end\n      end\n\n      get \"groups/:type\" => \"groups#show\", constraints: AdminConstraint.new\n      get \"groups/:type/:id\" => \"groups#show\", constraints: AdminConstraint.new\n\n      resources :users, id: RouteFormat.username, except: [:show] do\n        collection do\n          get \"list\" => \"users#index\"\n          get \"list/:query\" => \"users#index\"\n          get \"ip-info\" => \"users#ip_info\"\n          delete \"delete-others-with-same-ip\" => \"users#delete_other_accounts_with_same_ip\"\n          get \"total-others-with-same-ip\" => \"users#total_other_accounts_with_same_ip\"\n          put \"approve-bulk\" => \"users#approve_bulk\"\n        end\n        delete \"penalty_history\", constraints: AdminConstraint.new\n        put \"suspend\"\n        put \"delete_posts_batch\"\n        put \"unsuspend\"\n        put \"revoke_admin\", constraints: AdminConstraint.new\n        put \"grant_admin\", constraints: AdminConstraint.new\n        put \"revoke_moderation\", constraints: AdminConstraint.new\n        put \"grant_moderation\", constraints: AdminConstraint.new\n        put \"approve\"\n        post \"log_out\", constraints: AdminConstraint.new\n        put \"activate\"\n        put \"deactivate\"\n        put \"silence\"\n        put \"unsilence\"\n        put \"trust_level\"\n        put \"trust_level_lock\"\n        put \"primary_group\"\n        post \"groups\" => \"users#add_group\", constraints: AdminConstraint.new\n        delete \"groups/:group_id\" => \"users#remove_group\", constraints: AdminConstraint.new\n        get \"badges\"\n        get \"leader_requirements\" => \"users#tl3_requirements\"\n        get \"tl3_requirements\"\n        put \"anonymize\"\n        post \"merge\"\n        post \"reset_bounce_score\"\n        put \"disable_second_factor\"\n        delete \"sso_record\"\n      end\n      get \"users/:id.json\" => 'users#show', defaults: { format: 'json' }\n      get 'users/:id/:username' => 'users#show', constraints: { username: RouteFormat.username }, as: :user_show\n      get 'users/:id/:username/badges' => 'users#show'\n      get 'users/:id/:username/tl3_requirements' => 'users#show'\n\n      post \"users/sync_sso\" => \"users#sync_sso\", constraints: AdminConstraint.new\n\n      resources :impersonate, constraints: AdminConstraint.new\n\n      resources :email, constraints: AdminConstraint.new do\n        collection do\n          post \"test\"\n          get \"sent\"\n          get \"skipped\"\n          get \"bounced\"\n          get \"received\"\n          get \"rejected\"\n          get \"/incoming/:id/raw\" => \"email#raw_email\"\n          get \"/incoming/:id\" => \"email#incoming\"\n          get \"/incoming_from_bounced/:id\" => \"email#incoming_from_bounced\"\n          get \"preview-digest\" => \"email#preview_digest\"\n          get \"send-digest\" => \"email#send_digest\"\n          get \"smtp_should_reject\"\n          post \"handle_mail\"\n          get \"advanced-test\"\n          post \"advanced-test\" => \"email#advanced_test\"\n        end\n      end\n\n      scope \"/logs\" do\n        resources :staff_action_logs,     only: [:index]\n        get 'staff_action_logs/:id/diff' => 'staff_action_logs#diff'\n        resources :screened_emails,       only: [:index, :destroy]\n        resources :screened_ip_addresses, only: [:index, :create, :update, :destroy]\n        resources :screened_urls,         only: [:index]\n        resources :search_logs,           only: [:index]\n        get 'search_logs/term/' => 'search_logs#term'\n      end\n\n      get \"/logs\" => \"staff_action_logs#index\"\n\n      # alias\n      get '/logs/watched_words', to: redirect(relative_url_root + 'admin/customize/watched_words')\n      get '/logs/watched_words/*path', to: redirect(relative_url_root + 'admin/customize/watched_words/%{path}')\n\n      get \"customize\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/themes\" => \"themes#index\", constraints: AdminConstraint.new\n      get \"customize/colors\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/colors/:id\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/permalinks\" => \"permalinks#index\", constraints: AdminConstraint.new\n      get \"customize/embedding\" => \"embedding#show\", constraints: AdminConstraint.new\n      put \"customize/embedding\" => \"embedding#update\", constraints: AdminConstraint.new\n\n      resources :themes, constraints: AdminConstraint.new\n\n      post \"themes/import\" => \"themes#import\"\n      post \"themes/upload_asset\" => \"themes#upload_asset\"\n      post \"themes/generate_key_pair\" => \"themes#generate_key_pair\"\n      get \"themes/:id/preview\" => \"themes#preview\"\n      put \"themes/:id/setting\" => \"themes#update_single_setting\"\n\n      scope \"/customize\", constraints: AdminConstraint.new do\n        resources :user_fields, constraints: AdminConstraint.new\n        resources :emojis, constraints: AdminConstraint.new\n\n        get 'themes/:id/:target/:field_name/edit' => 'themes#index'\n        get 'themes/:id' => 'themes#index'\n        get \"themes/:id/export\" => \"themes#export\"\n\n        # They have periods in their URLs often:\n        get 'site_texts'             => 'site_texts#index'\n        get 'site_texts/:id.json'    => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        get 'site_texts/:id'         => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id.json'    => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id'         => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id.json' => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id'      => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n\n        get 'reseed' => 'site_texts#get_reseed_options'\n        post 'reseed' => 'site_texts#reseed'\n\n        get 'email_templates'          => 'email_templates#index'\n        get 'email_templates/(:id)'    => 'email_templates#show',   constraints: { id: /[0-9a-z_.]+/ }\n        put 'email_templates/(:id)'    => 'email_templates#update', constraints: { id: /[0-9a-z_.]+/ }\n        delete 'email_templates/(:id)' => 'email_templates#revert', constraints: { id: /[0-9a-z_.]+/ }\n\n        get 'robots' => 'robots_txt#show'\n        put 'robots.json' => 'robots_txt#update'\n        delete 'robots.json' => 'robots_txt#reset'\n\n        resource :email_style, only: [:show, :update]\n        get 'email_style/:field' => 'email_styles#show', constraints: { field: /html|css/ }\n      end\n\n      resources :embeddable_hosts, constraints: AdminConstraint.new\n      resources :color_schemes, constraints: AdminConstraint.new\n      resources :permalinks, constraints: AdminConstraint.new\n\n      scope \"/customize\" do\n        resources :watched_words, only: [:index, :create, :update, :destroy] do\n          collection do\n            get \"action/:id\" => \"watched_words#index\"\n            get \"action/:id/download\" => \"watched_words#download\"\n            delete \"action/:id\" => \"watched_words#clear_all\"\n          end\n        end\n        post \"watched_words/upload\" => \"watched_words#upload\"\n      end\n\n      get \"version_check\" => \"versions#show\"\n\n      get \"dashboard\" => \"dashboard#index\"\n      get \"dashboard/general\" => \"dashboard#general\"\n      get \"dashboard/moderation\" => \"dashboard#moderation\"\n      get \"dashboard/security\" => \"dashboard#security\"\n      get \"dashboard/reports\" => \"dashboard#reports\"\n      get \"dashboard/new-features\" => \"dashboard#new_features\"\n      put \"dashboard/mark-new-features-as-seen\" => \"dashboard#mark_new_features_as_seen\"\n\n      resources :dashboard, only: [:index] do\n        collection do\n          get \"problems\"\n        end\n      end\n\n      resources :api, only: [:index], constraints: AdminConstraint.new do\n        collection do\n          resources :keys, controller: 'api', only: [:index, :show, :update, :create, :destroy] do\n            collection do\n              get 'scopes' => 'api#scopes'\n            end\n\n            member do\n              post \"revoke\" => \"api#revoke_key\"\n              post \"undo-revoke\" => \"api#undo_revoke_key\"\n            end\n          end\n\n          resources :web_hooks\n          get 'web_hook_events/:id' => 'web_hooks#list_events', as: :web_hook_events\n          get 'web_hooks/:id/events' => 'web_hooks#list_events'\n          get 'web_hooks/:id/events/bulk' => 'web_hooks#bulk_events'\n          post 'web_hooks/:web_hook_id/events/:event_id/redeliver' => 'web_hooks#redeliver_event'\n          post 'web_hooks/:id/ping' => 'web_hooks#ping'\n        end\n      end\n\n      resources :backups, only: [:index, :create], constraints: AdminConstraint.new do\n        member do\n          get \"\" => \"backups#show\", constraints: { id: RouteFormat.backup }\n          put \"\" => \"backups#email\", constraints: { id: RouteFormat.backup }\n          delete \"\" => \"backups#destroy\", constraints: { id: RouteFormat.backup }\n          post \"restore\" => \"backups#restore\", constraints: { id: RouteFormat.backup }\n        end\n        collection do\n          # multipart uploads\n          post \"create-multipart\" => \"backups#create_multipart\", format: :json\n          post \"complete-multipart\" => \"backups#complete_multipart\", format: :json\n          post \"abort-multipart\" => \"backups#abort_multipart\", format: :json\n          post \"batch-presign-multipart-parts\" => \"backups#batch_presign_multipart_parts\", format: :json\n\n          get \"logs\" => \"backups#logs\"\n          get \"status\" => \"backups#status\"\n          delete \"cancel\" => \"backups#cancel\"\n          post \"rollback\" => \"backups#rollback\"\n          put \"readonly\" => \"backups#readonly\"\n          get \"upload\" => \"backups#check_backup_chunk\"\n          post \"upload\" => \"backups#upload_backup_chunk\"\n          get \"upload_url\" => \"backups#create_upload_url\"\n        end\n      end\n\n      resources :badges, constraints: AdminConstraint.new do\n        collection do\n          get \"/award/:badge_id\" => \"badges#award\"\n          post \"/award/:badge_id\" => \"badges#mass_award\"\n          get \"types\" => \"badges#badge_types\"\n          post \"badge_groupings\" => \"badges#save_badge_groupings\"\n          post \"preview\" => \"badges#preview\"\n        end\n      end\n\n    end # admin namespace\n\n    get \"email/unsubscribe/:key\" => \"email#unsubscribe\", as: \"email_unsubscribe\"\n    get \"email/unsubscribed\" => \"email#unsubscribed\", as: \"email_unsubscribed\"\n    post \"email/unsubscribe/:key\" => \"email#perform_unsubscribe\", as: \"email_perform_unsubscribe\"\n\n    get \"extra-locales/:bundle\" => \"extra_locales#show\"\n\n    resources :session, id: RouteFormat.username, only: [:create, :destroy, :become] do\n      if !Rails.env.production?\n        get 'become'\n      end\n\n      collection do\n        post \"forgot_password\"\n      end\n    end\n\n    get \"review\" => \"reviewables#index\" # For ember app\n    get \"review/:reviewable_id\" => \"reviewables#show\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/:reviewable_id/explain\" => \"reviewables#explain\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/count\" => \"reviewables#count\"\n    get \"review/topics\" => \"reviewables#topics\"\n    get \"review/settings\" => \"reviewables#settings\"\n    put \"review/settings\" => \"reviewables#settings\"\n    put \"review/:reviewable_id/perform/:action_id\" => \"reviewables#perform\", constraints: {\n      reviewable_id: /\\d+/,\n      action_id: /[a-z\\_]+/\n    }\n    put \"review/:reviewable_id\" => \"reviewables#update\", constraints: { reviewable_id: /\\d+/ }\n    delete \"review/:reviewable_id\" => \"reviewables#destroy\", constraints: { reviewable_id: /\\d+/ }\n\n    resources :reviewable_claimed_topics\n\n    get \"session/sso\" => \"session#sso\"\n    get \"session/sso_login\" => \"session#sso_login\"\n    get \"session/sso_provider\" => \"session#sso_provider\"\n    get \"session/current\" => \"session#current\"\n    get \"session/csrf\" => \"session#csrf\"\n    get \"session/hp\" => \"session#get_honeypot_value\"\n    get \"session/email-login/:token\" => \"session#email_login_info\"\n    post \"session/email-login/:token\" => \"session#email_login\"\n    get \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    post \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    get \"session/2fa\" => \"session#second_factor_auth_show\"\n    post \"session/2fa\" => \"session#second_factor_auth_perform\"\n    if Rails.env.test?\n      post \"session/2fa/test-action\" => \"session#test_second_factor_restricted_route\"\n    end\n    get \"composer_messages\" => \"composer_messages#index\"\n\n    resources :static\n    post \"login\" => \"static#enter\"\n    get \"login\" => \"static#show\", id: \"login\"\n    get \"password-reset\" => \"static#show\", id: \"password_reset\"\n    get \"faq\" => \"static#show\", id: \"faq\"\n    get \"tos\" => \"static#show\", id: \"tos\", as: 'tos'\n    get \"privacy\" => \"static#show\", id: \"privacy\", as: 'privacy'\n    get \"signup\" => \"static#show\", id: \"signup\"\n    get \"login-preferences\" => \"static#show\", id: \"login\"\n\n    %w{guidelines rules conduct}.each do |faq_alias|\n      get faq_alias => \"static#show\", id: \"guidelines\", as: faq_alias\n    end\n\n    get \"my/*path\", to: 'users#my_redirect'\n    get \".well-known/change-password\", to: redirect(relative_url_root + 'my/preferences/security', status: 302)\n\n    get \"user-cards\" => \"users#cards\", format: :json\n    get \"directory-columns\" => \"directory_columns#index\", format: :json\n    get \"edit-directory-columns\" => \"edit_directory_columns#index\", format: :json\n    put \"edit-directory-columns\" => \"edit_directory_columns#update\", format: :json\n\n    %w{users u}.each_with_index do |root_path, index|\n      get \"#{root_path}\" => \"users#index\", constraints: { format: 'html' }\n\n      resources :users, except: [:index, :new, :show, :update, :destroy], path: root_path do\n        collection do\n          get \"check_username\"\n          get \"check_email\"\n          get \"is_local_username\"\n        end\n      end\n\n      post \"#{root_path}/second_factors\" => \"users#list_second_factors\"\n      put \"#{root_path}/second_factor\" => \"users#update_second_factor\"\n\n      post \"#{root_path}/create_second_factor_security_key\" => \"users#create_second_factor_security_key\"\n      post \"#{root_path}/register_second_factor_security_key\" => \"users#register_second_factor_security_key\"\n      put \"#{root_path}/security_key\" => \"users#update_security_key\"\n      post \"#{root_path}/create_second_factor_totp\" => \"users#create_second_factor_totp\"\n      post \"#{root_path}/enable_second_factor_totp\" => \"users#enable_second_factor_totp\"\n      put \"#{root_path}/disable_second_factor\" => \"users#disable_second_factor\"\n\n      put \"#{root_path}/second_factors_backup\" => \"users#create_second_factor_backup\"\n\n      put \"#{root_path}/update-activation-email\" => \"users#update_activation_email\"\n      post \"#{root_path}/email-login\" => \"users#email_login\"\n      get \"#{root_path}/admin-login\" => \"users#admin_login\"\n      put \"#{root_path}/admin-login\" => \"users#admin_login\"\n      post \"#{root_path}/toggle-anon\" => \"users#toggle_anon\"\n      post \"#{root_path}/read-faq\" => \"users#read_faq\"\n      get \"#{root_path}/recent-searches\" => \"users#recent_searches\", constraints: { format: 'json' }\n      delete \"#{root_path}/recent-searches\" => \"users#reset_recent_searches\", constraints: { format: 'json' }\n      get \"#{root_path}/search/users\" => \"users#search_users\"\n\n      get({ \"#{root_path}/account-created/\" => \"users#account_created\" }.merge(index == 1 ? { as: :users_account_created } : { as: :old_account_created }))\n\n      get \"#{root_path}/account-created/resent\" => \"users#account_created\"\n      get \"#{root_path}/account-created/edit-email\" => \"users#account_created\"\n      get({ \"#{root_path}/password-reset/:token\" => \"users#password_reset_show\" }.merge(index == 1 ? { as: :password_reset_token } : {}))\n      get \"#{root_path}/confirm-email-token/:token\" => \"users#confirm_email_token\", constraints: { format: 'json' }\n      put \"#{root_path}/password-reset/:token\" => \"users#password_reset_update\"\n      get \"#{root_path}/activate-account/:token\" => \"users#activate_account\"\n      put({ \"#{root_path}/activate-account/:token\" => \"users#perform_account_activation\" }.merge(index == 1 ? { as: 'perform_activate_account' } : {}))\n\n      get \"#{root_path}/confirm-old-email/:token\" => \"users_email#show_confirm_old_email\"\n      put \"#{root_path}/confirm-old-email\" => \"users_email#confirm_old_email\"\n\n      get \"#{root_path}/confirm-new-email/:token\" => \"users_email#show_confirm_new_email\"\n      put \"#{root_path}/confirm-new-email\" => \"users_email#confirm_new_email\"\n\n      get({\n        \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\",\n        constraints: { token: /[0-9a-f]+/ }\n      }.merge(index == 1 ? { as: 'confirm_admin' } : {}))\n      post \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\", constraints: { token: /[0-9a-f]+/ }\n      get \"#{root_path}/:username/private-messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/tags/:tag_id\" => \"user_actions#private_messages\", constraints: StaffConstraint.new\n      get \"#{root_path}/:username.json\" => \"users#show\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get({ \"#{root_path}/:username\" => \"users#show\", constraints: { username: RouteFormat.username } }.merge(index == 1 ? { as: 'user' } : {}))\n      put \"#{root_path}/:username\" => \"users#update\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get \"#{root_path}/:username/emails\" => \"users#check_emails\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-email\" => \"users#check_sso_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-payload\" => \"users#check_sso_payload\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/email\" => \"users_email#index\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/account\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/security\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/profile\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/emails\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/primary-email\" => \"users#update_primary_email\", format: :json, constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/email\" => \"users#destroy_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/notifications\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/categories\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/users\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/tags\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/interface\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/apps\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/email\" => \"users_email#create\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/email\" => \"users_email#update\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/badge_title\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/badge_title\" => \"users#badge_title\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/username\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/username\" => \"users#username\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor-backup\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/user_image\" => \"users#destroy_user_image\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/pick\" => \"users#pick_avatar\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/select\" => \"users#select_avatar\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-account\" => \"users#revoke_account\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-auth-token\" => \"users#revoke_auth_token\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/staff-info\" => \"users#staff_info\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/summary\" => \"users#summary\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/notification_level\" => \"users#notification_level\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited/:filter\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/action/send_activation_email\" => \"users#send_activation_email\"\n      get \"#{root_path}/:username/summary\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/topics.rss\" => \"list#user_topics_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.rss\" => \"posts#user_posts_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.json\" => \"posts#user_posts_feed\", format: :json, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/badges\" => \"users#badges\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/bookmarks\" => \"users#bookmarks\", constraints: { username: RouteFormat.username, format: /(json|ics)/ }\n      get \"#{root_path}/:username/notifications\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/notifications/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username\" => \"users#destroy\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/by-external/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/by-external/:external_provider/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/:username/flagged-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/deleted-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/topic-tracking-state\" => \"users#topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-message-topic-tracking-state\" => \"users#private_message_topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/profile-hidden\" => \"users#profile_hidden\"\n      put \"#{root_path}/:username/feature-topic\" => \"users#feature_topic\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/clear-featured-topic\" => \"users#clear_featured_topic\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/card.json\" => \"users#show_card\", format: :json, constraints: { username: RouteFormat.username }\n    end\n\n    get \"user-badges/:username.json\" => \"user_badges#username\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n    get \"user-badges/:username\" => \"user_badges#username\", constraints: { username: RouteFormat.username }\n\n    post \"user_avatar/:username/refresh_gravatar\" => \"user_avatars#refresh_gravatar\", constraints: { username: RouteFormat.username }\n    get \"letter_avatar/:username/:size/:version.png\" => \"user_avatars#show_letter\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n    get \"user_avatar/:hostname/:username/:size/:version.png\" => \"user_avatars#show\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n\n    get \"letter_avatar_proxy/:version/letter/:letter/:color/:size.png\" => \"user_avatars#show_proxy_letter\", constraints: { format: :png }\n\n    get \"svg-sprite/:hostname/svg-:theme_id-:version.js\" => \"svg_sprite#show\", constraints: { hostname: /[\\w\\.-]+/, version: /\\h{40}/, theme_id: /([0-9]+)?/, format: :js }\n    get \"svg-sprite/search/:keyword\" => \"svg_sprite#search\", format: false, constraints: { keyword: /[-a-z0-9\\s\\%]+/ }\n    get \"svg-sprite/picker-search\" => \"svg_sprite#icon_picker_search\", defaults: { format: :json }\n    get \"svg-sprite/:hostname/icon(/:color)/:name.svg\" => \"svg_sprite#svg_icon\", constraints: { hostname: /[\\w\\.-]+/, name: /[-a-z0-9\\s\\%]+/, color: /(\\h{3}{1,2})/, format: :svg }\n\n    get \"highlight-js/:hostname/:version.js\" => \"highlight_js#show\", constraints: { hostname: /[\\w\\.-]+/, format: :js }\n\n    get \"stylesheets/:name.css.map\" => \"stylesheets#show_source_map\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"stylesheets/:name.css\" => \"stylesheets#show\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"color-scheme-stylesheet/:id(/:theme_id)\" => \"stylesheets#color_scheme\", constraints: { format: :json }\n    get \"theme-javascripts/:digest.js\" => \"theme_javascripts#show\", constraints: { digest: /\\h{40}/ }\n    get \"theme-javascripts/tests/:theme_id-:digest.js\" => \"theme_javascripts#show_tests\"\n\n    post \"uploads/lookup-metadata\" => \"uploads#metadata\"\n    post \"uploads\" => \"uploads#create\"\n    post \"uploads/lookup-urls\" => \"uploads#lookup_urls\"\n\n    # direct to s3 uploads\n    post \"uploads/generate-presigned-put\" => \"uploads#generate_presigned_put\", format: :json\n    post \"uploads/complete-external-upload\" => \"uploads#complete_external_upload\", format: :json\n\n    # multipart uploads\n    post \"uploads/create-multipart\" => \"uploads#create_multipart\", format: :json\n    post \"uploads/complete-multipart\" => \"uploads#complete_multipart\", format: :json\n    post \"uploads/abort-multipart\" => \"uploads#abort_multipart\", format: :json\n    post \"uploads/batch-presign-multipart-parts\" => \"uploads#batch_presign_multipart_parts\", format: :json\n\n    # used to download original images\n    get \"uploads/:site/:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    get \"uploads/short-url/:base62(.:extension)\" => \"uploads#show_short\", constraints: { site: /\\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-zA-Z0-9\\._-]+/i }, as: :upload_short\n    # used to download attachments\n    get \"uploads/:site/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    if Rails.env.test?\n      get \"uploads/:site/test_:index/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, index: /\\d+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    end\n    # used to download attachments (old route)\n    get \"uploads/:site/:id/:sha\" => \"uploads#show\", constraints: { site: /\\w+/, id: /\\d+/, sha: /\\h{16}/, format: /.*/ }\n    get \"secure-media-uploads/*path(.:extension)\" => \"uploads#show_secure\", constraints: { extension: /[a-z0-9\\._]+/i }\n\n    get \"posts\" => \"posts#latest\", id: \"latest_posts\", constraints: { format: /(json|rss)/ }\n    get \"private-posts\" => \"posts#latest\", id: \"private_posts\", constraints: { format: /(json|rss)/ }\n    get \"posts/by_number/:topic_id/:post_number\" => \"posts#by_number\"\n    get \"posts/by-date/:topic_id/:date\" => \"posts#by_date\"\n    get \"posts/:id/reply-history\" => \"posts#reply_history\"\n    get \"posts/:id/reply-ids\"     => \"posts#reply_ids\"\n    get \"posts/:id/reply-ids/all\" => \"posts#all_reply_ids\"\n    get \"posts/:username/deleted\" => \"posts#deleted_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/flagged\" => \"posts#flagged_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/pending\" => \"posts#pending\", constraints: { username: RouteFormat.username }\n\n    %w{groups g}.each do |root_path|\n      resources :groups, id: RouteFormat.username, path: root_path do\n        get \"posts.rss\" => \"groups#posts_feed\", format: :rss\n        get \"mentions.rss\" => \"groups#mentions_feed\", format: :rss\n\n        get 'members'\n        get 'posts'\n        get 'mentions'\n        get 'counts'\n        get 'mentionable'\n        get 'messageable'\n        get 'logs' => 'groups#histories'\n        post 'test_email_settings'\n\n        collection do\n          get \"check-name\" => 'groups#check_name'\n          get 'custom/new' => 'groups#new', constraints: StaffConstraint.new\n          get \"search\" => \"groups#search\"\n        end\n\n        member do\n          %w{\n            activity\n            activity/:filter\n            requests\n            messages\n            messages/inbox\n            messages/archive\n            manage\n            manage/profile\n            manage/members\n            manage/membership\n            manage/interaction\n            manage/email\n            manage/categories\n            manage/tags\n            manage/logs\n          }.each do |path|\n            get path => 'groups#show'\n          end\n\n          get \"permissions\" => \"groups#permissions\"\n          put \"members\" => \"groups#add_members\"\n          put \"join\" => \"groups#join\"\n          delete \"members\" => \"groups#remove_member\"\n          delete \"leave\" => \"groups#leave\"\n          post \"request_membership\" => \"groups#request_membership\"\n          put \"handle_membership_request\" => \"groups#handle_membership_request\"\n          post \"notifications\" => \"groups#set_notifications\"\n        end\n      end\n    end\n\n    resources :associated_groups, only: %i[index], constraints: AdminConstraint.new\n\n    # aliases so old API code works\n    delete \"admin/groups/:id/members\" => \"groups#remove_member\", constraints: AdminConstraint.new\n    put \"admin/groups/:id/members\" => \"groups#add_members\", constraints: AdminConstraint.new\n\n    resources :posts do\n      delete \"bookmark\", to: \"posts#destroy_bookmark\"\n      put \"wiki\"\n      put \"post_type\"\n      put \"rebake\"\n      put \"unhide\"\n      put \"locked\"\n      put \"notice\"\n      get \"replies\"\n      get \"revisions/latest\" => \"posts#latest_revision\"\n      get \"revisions/:revision\" => \"posts#revisions\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/hide\" => \"posts#hide_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/show\" => \"posts#show_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/revert\" => \"posts#revert\", constraints: { revision: /\\d+/ }\n      put \"recover\"\n      collection do\n        delete \"destroy_many\"\n        put \"merge_posts\"\n      end\n    end\n\n    resources :bookmarks, only: %i[create destroy update] do\n      put \"toggle_pin\"\n    end\n\n    resources :notifications, except: :show do\n      collection do\n        put 'mark-read' => 'notifications#mark_read'\n        # creating an alias cause the api was extended to mark a single notification\n        # this allows us to cleanly target it\n        put 'read' => 'notifications#mark_read'\n      end\n    end\n\n    match \"/auth/failure\", to: \"users/omniauth_callbacks#failure\", via: [:get, :post]\n    get \"/auth/:provider\", to: \"users/omniauth_callbacks#confirm_request\"\n    match \"/auth/:provider/callback\", to: \"users/omniauth_callbacks#complete\", via: [:get, :post]\n    get \"/associate/:token\", to: \"users/associate_accounts#connect_info\", constraints: { token: /\\h{32}/ }\n    post \"/associate/:token\", to: \"users/associate_accounts#connect\", constraints: { token: /\\h{32}/ }\n\n    resources :clicks do\n      collection do\n        post \"track\"\n      end\n    end\n\n    get \"excerpt\" => \"excerpt#show\"\n\n    resources :post_action_users\n    resources :post_readers, only: %i[index]\n    resources :post_actions do\n      collection do\n        get \"users\"\n        post \"defer_flags\"\n      end\n    end\n    resources :user_actions\n\n    resources :badges, only: [:index]\n    get \"/badges/:id(/:slug)\" => \"badges#show\", constraints: { format: /(json|html|rss)/ }\n    resources :user_badges, only: [:index, :create, :destroy] do\n      put \"toggle_favorite\" => \"user_badges#toggle_favorite\", constraints: { format: :json }\n    end\n\n    get '/c', to: redirect(relative_url_root + 'categories')\n\n    resources :categories, except: [:show, :new, :edit]\n    post \"categories/reorder\" => \"categories#reorder\"\n\n    scope path: 'category/:category_id' do\n      post \"/move\" => \"categories#move\"\n      post \"/notifications\" => \"categories#set_notifications\"\n      put \"/slug\" => \"categories#update_slug\"\n    end\n\n    get \"category/*path\" => \"categories#redirect\"\n\n    get \"categories_and_latest\" => \"categories#categories_and_latest\"\n    get \"categories_and_top\" => \"categories#categories_and_top\"\n\n    get \"c/:id/show\" => \"categories#show\"\n    get \"c/:id/visible_groups\" => \"categories#visible_groups\"\n\n    get \"c/*category_slug/find_by_slug\" => \"categories#find_by_slug\"\n    get \"c/*category_slug/edit(/:tab)\" => \"categories#find_by_slug\", constraints: { format: 'html' }\n    get \"/new-category\" => \"categories#show\", constraints: { format: 'html' }\n\n    get \"c/*category_slug_path_with_id.rss\" => \"list#category_feed\", format: :rss\n    scope path: 'c/*category_slug_path_with_id' do\n      get \"/none\" => \"list#category_none_latest\"\n\n      TopTopic.periods.each do |period|\n        get \"/none/l/top/#{period}\", to: redirect(\"/none/l/top?period=#{period}\", status: 301)\n        get \"/l/top/#{period}\", to: redirect(\"/l/top?period=#{period}\", status: 301)\n      end\n\n      Discourse.filters.each do |filter|\n        get \"/none/l/#{filter}\" => \"list#category_none_#{filter}\", as: \"category_none_#{filter}\"\n        get \"/l/#{filter}\" => \"list#category_#{filter}\", as: \"category_#{filter}\"\n      end\n\n      get \"/all\" => \"list#category_default\", as: \"category_all\", constraints: { format: 'html' }\n      get \"/\" => \"list#category_default\", as: \"category_default\"\n    end\n\n    get \"hashtags\" => \"hashtags#show\"\n\n    TopTopic.periods.each do |period|\n      get \"top/#{period}.rss\", to: redirect(\"top.rss?period=#{period}\", status: 301)\n      get \"top/#{period}.json\", to: redirect(\"top.json?period=#{period}\", status: 301)\n      get \"top/#{period}\", to: redirect(\"top?period=#{period}\", status: 301)\n    end\n\n    Discourse.anonymous_filters.each do |filter|\n      get \"#{filter}.rss\" => \"list##{filter}_feed\", format: :rss\n    end\n\n    Discourse.filters.each do |filter|\n      get \"#{filter}\" => \"list##{filter}\"\n    end\n\n    get \"search/query\" => \"search#query\"\n    get \"search\" => \"search#show\"\n    post \"search/click\" => \"search#click\"\n\n    # Topics resource\n    get \"t/:id\" => \"topics#show\"\n    put \"t/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:id\" => \"topics#destroy\"\n    put \"t/:id/archive-message\" => \"topics#archive_message\"\n    put \"t/:id/move-to-inbox\" => \"topics#move_to_inbox\"\n    put \"t/:id/convert-topic/:type\" => \"topics#convert_topic\"\n    put \"t/:id/publish\" => \"topics#publish\"\n    put \"t/:id/shared-draft\" => \"topics#update_shared_draft\"\n    put \"t/:id/reset-bump-date\" => \"topics#reset_bump_date\"\n    put \"topics/bulk\"\n    put \"topics/reset-new\" => 'topics#reset_new'\n    put \"topics/pm-reset-new\" => 'topics#private_message_reset_new'\n    post \"topics/timings\"\n\n    get 'topics/similar_to' => 'similar_topics#index'\n    resources :similar_topics\n\n    get \"topics/feature_stats\"\n\n    scope \"/topics\", username: RouteFormat.username do\n      get \"created-by/:username\" => \"list#topics_by\", as: \"topics_by\", defaults: { format: :json }\n      get \"private-messages/:username\" => \"list#private_messages\", as: \"topics_private_messages\", defaults: { format: :json }\n      get \"private-messages-sent/:username\" => \"list#private_messages_sent\", as: \"topics_private_messages_sent\", defaults: { format: :json }\n      get \"private-messages-archive/:username\" => \"list#private_messages_archive\", as: \"topics_private_messages_archive\", defaults: { format: :json }\n      get \"private-messages-unread/:username\" => \"list#private_messages_unread\", as: \"topics_private_messages_unread\", defaults: { format: :json }\n      get \"private-messages-tags/:username/:tag_id.json\" => \"list#private_messages_tag\", as: \"topics_private_messages_tag\", defaults: { format: :json }\n      get \"private-messages-new/:username\" => \"list#private_messages_new\", as: \"topics_private_messages_new\", defaults: { format: :json }\n      get \"private-messages-warnings/:username\" => \"list#private_messages_warnings\", as: \"topics_private_messages_warnings\", defaults: { format: :json }\n      get \"groups/:group_name\" => \"list#group_topics\", as: \"group_topics\", group_name: RouteFormat.username\n\n      scope \"/private-messages-group/:username\", group_name: RouteFormat.username do\n        get \":group_name.json\" => \"list#private_messages_group\", as: \"topics_private_messages_group\"\n        get \":group_name/archive.json\" => \"list#private_messages_group_archive\", as: \"topics_private_messages_group_archive\"\n        get \":group_name/new.json\" => \"list#private_messages_group_new\", as: \"topics_private_messages_group_new\"\n        get \":group_name/unread.json\" => \"list#private_messages_group_unread\", as: \"topics_private_messages_group_unread\"\n      end\n    end\n\n    get 'embed/topics' => 'embed#topics'\n    get 'embed/comments' => 'embed#comments'\n    get 'embed/count' => 'embed#count'\n    get 'embed/info' => 'embed#info'\n\n    get \"new-topic\" => \"list#latest\"\n    get \"new-message\" => \"list#latest\"\n\n    # Topic routes\n    get \"t/id_for/:slug\" => \"topics#id_for_slug\"\n    get \"t/external_id/:external_id\" => \"topics#show_by_external_id\", format: :json, constrains: { external_id: /\\A[\\w-]+\\z/ }\n    get \"t/:slug/:topic_id/print\" => \"topics#show\", format: :html, print: true, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/moderator-liked\" => \"topics#moderator_liked\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/summary\" => \"topics#show\", defaults: { summary: true }, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/summary\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/clear-pin\" => \"topics#clear_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/re-pin\" => \"topics#re_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/mute\" => \"topics#mute\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/unmute\" => \"topics#unmute\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/timer\" => \"topics#timer\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/make-banner\" => \"topics#make_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-banner\" => \"topics#remove_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-user\" => \"topics#remove_allowed_user\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-group\" => \"topics#remove_allowed_group\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/recover\" => \"topics#recover\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id.rss\" => \"topics#feed\", format: :rss, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:slug/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/posts\" => \"topics#posts\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/post_ids\" => \"topics#post_ids\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/excerpts\" => \"topics#excerpts\", constraints: { topic_id: /\\d+/ }, format: :json\n    post \"t/:topic_id/timings\" => \"topics#timings\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite\" => \"topics#invite\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite-group\" => \"topics#invite_group\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/move-posts\" => \"topics#move_posts\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/merge-topic\" => \"topics#merge_topic\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/change-owner\" => \"topics#change_post_owners\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/change-timestamp\" => \"topics#change_timestamps\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:topic_id/timings\" => \"topics#destroy_timings\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/bookmark\" => \"topics#bookmark\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove_bookmarks\" => \"topics#remove_bookmarks\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/tags\" => \"topics#update_tags\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/slow_mode\" => \"topics#set_slow_mode\", constraints: { topic_id: /\\d+/ }\n\n    post \"t/:topic_id/notifications\" => \"topics#set_notifications\" , constraints: { topic_id: /\\d+/ }\n\n    get \"p/:post_id(/:user_id)\" => \"posts#short_link\"\n    get \"/posts/:id/cooked\" => \"posts#cooked\"\n    get \"/posts/:id/expand-embed\" => \"posts#expand_embed\"\n    get \"/posts/:id/raw\" => \"posts#markdown_id\"\n    get \"/posts/:id/raw-email\" => \"posts#raw_email\"\n    get \"raw/:topic_id(/:post_number)\" => \"posts#markdown_num\"\n\n    resources :invites, except: [:show]\n    get \"/invites/:id\" => \"invites#show\", constraints: { format: :html }\n    put \"/invites/:id\" => \"invites#update\"\n\n    post \"invites/upload_csv\" => \"invites#upload_csv\"\n    post \"invites/destroy-all-expired\" => \"invites#destroy_all_expired\"\n    post \"invites/reinvite\" => \"invites#resend_invite\"\n    post \"invites/reinvite-all\" => \"invites#resend_all_invites\"\n    delete \"invites\" => \"invites#destroy\"\n    put \"invites/show/:id\" => \"invites#perform_accept_invitation\", as: 'perform_accept_invite'\n    get \"invites/retrieve\" => \"invites#retrieve\"\n\n    resources :export_csv do\n      collection do\n        post \"export_entity\" => \"export_csv#export_entity\"\n      end\n    end\n\n    get \"onebox\" => \"onebox#show\"\n    get \"inline-onebox\" => \"inline_onebox#show\"\n\n    get \"exception\" => \"list#latest\"\n\n    get \"message-bus/poll\" => \"message_bus#poll\"\n\n    resources :drafts, only: [:index, :create, :show, :destroy]\n\n    get \"/service-worker.js\" => \"static#service_worker_asset\", format: :js\n    if service_worker_asset = Rails.application.assets_manifest.assets['service-worker.js']\n      # https://developers.google.com/web/fundamentals/codelabs/debugging-service-workers/\n      # Normally the browser will wait until a user closes all tabs that contain the\n      # current site before updating to a new Service Worker.\n      # Support the old Service Worker path to avoid routing error filling up the\n      # logs.\n      get service_worker_asset => \"static#service_worker_asset\", format: :js\n    end\n\n    get \"cdn_asset/:site/*path\" => \"static#cdn_asset\", format: false, constraints: { format: /.*/ }\n    get \"brotli_asset/*path\" => \"static#brotli_asset\", format: false, constraints: { format: /.*/ }\n\n    get \"favicon/proxied\" => \"static#favicon\", format: false\n\n    get \"robots.txt\" => \"robots_txt#index\"\n    get \"robots-builder.json\" => \"robots_txt#builder\"\n    get \"offline.html\" => \"offline#index\"\n    get \"manifest.webmanifest\" => \"metadata#manifest\", as: :manifest\n    get \"manifest.json\" => \"metadata#manifest\"\n    get \".well-known/assetlinks.json\" => \"metadata#app_association_android\"\n    get \"apple-app-site-association\" => \"metadata#app_association_ios\", format: false\n    get \"opensearch\" => \"metadata#opensearch\", constraints: { format: :xml }\n\n    scope '/tag/:tag_id' do\n      constraints format: :json do\n        get '/' => 'tags#show', as: 'tag_show'\n        get '/info' => 'tags#info'\n        get '/notifications' => 'tags#notifications'\n        put '/notifications' => 'tags#update_notifications'\n        put '/' => 'tags#update'\n        delete '/' => 'tags#destroy'\n        post '/synonyms' => 'tags#create_synonyms'\n        delete '/synonyms/:synonym_id' => 'tags#destroy_synonym'\n\n        Discourse.filters.each do |filter|\n          get \"/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_show_#{filter}\"\n        end\n      end\n\n      constraints format: :rss do\n        get '/' => 'tags#tag_feed'\n      end\n    end\n\n    scope \"/tags\" do\n      get '/' => 'tags#index'\n      get '/filter/list' => 'tags#index'\n      get '/filter/search' => 'tags#search'\n      get '/personal_messages/:username' => 'tags#personal_messages', constraints: { username: RouteFormat.username }\n      post '/upload' => 'tags#upload'\n      get '/unused' => 'tags#list_unused'\n      delete '/unused' => 'tags#destroy_unused'\n\n      constraints(tag_id: /[^\\/]+?/, format: /json|rss/) do\n        scope path: '/c/*category_slug_path_with_id' do\n          Discourse.filters.each do |filter|\n            get \"/none/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_none_show_#{filter}\", defaults: { no_subcategories: true }\n            get \"/all/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_all_show_#{filter}\", defaults: { no_subcategories: false }\n          end\n\n          get '/none/:tag_id' => 'tags#show', as: 'tag_category_none_show', defaults: { no_subcategories: true }\n          get '/all/:tag_id' => 'tags#show', as: 'tag_category_all_show', defaults: { no_subcategories: false }\n\n          Discourse.filters.each do |filter|\n            get \"/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_show_#{filter}\"\n          end\n\n          get '/:tag_id' => 'tags#show', as: 'tag_category_show'\n        end\n\n        get '/intersection/:tag_id/*additional_tag_ids' => 'tags#show', as: 'tag_intersection'\n      end\n\n      get '*tag_id', to: redirect(relative_url_root + 'tag/%{tag_id}')\n    end\n\n    resources :tag_groups, constraints: StaffConstraint.new, except: [:edit]\n    get '/tag_groups/filter/search' => 'tag_groups#search', format: :json\n\n    Discourse.filters.each do |filter|\n      root to: \"list##{filter}\", constraints: HomePageConstraint.new(\"#{filter}\"), as: \"list_#{filter}\"\n    end\n    # special case for categories\n    root to: \"categories#index\", constraints: HomePageConstraint.new(\"categories\"), as: \"categories_index\"\n\n    root to: 'finish_installation#index', constraints: HomePageConstraint.new(\"finish_installation\"), as: 'installation_redirect'\n\n    get \"/user-api-key/new\" => \"user_api_keys#new\"\n    post \"/user-api-key\" => \"user_api_keys#create\"\n    post \"/user-api-key/revoke\" => \"user_api_keys#revoke\"\n    post \"/user-api-key/undo-revoke\" => \"user_api_keys#undo_revoke\"\n    get \"/user-api-key/otp\" => \"user_api_keys#otp\"\n    post \"/user-api-key/otp\" => \"user_api_keys#create_otp\"\n\n    get \"/safe-mode\" => \"safe_mode#index\"\n    post \"/safe-mode\" => \"safe_mode#enter\", as: \"safe_mode_enter\"\n\n    unless Rails.env.production?\n      get \"/qunit\" => \"qunit#index\"\n      get \"/wizard/qunit\" => \"wizard#qunit\"\n    end\n    get \"/theme-qunit\" => \"qunit#theme\"\n\n    post \"/push_notifications/subscribe\" => \"push_notification#subscribe\"\n    post \"/push_notifications/unsubscribe\" => \"push_notification#unsubscribe\"\n\n    resources :csp_reports, only: [:create]\n\n    get \"/permalink-check\", to: 'permalinks#check'\n\n    post \"/do-not-disturb\" => \"do_not_disturb#create\"\n    delete \"/do-not-disturb\" => \"do_not_disturb#destroy\"\n\n    post \"/presence/update\" => \"presence#update\"\n    get \"/presence/get\" => \"presence#get\"\n\n    get \"*url\", to: 'permalinks#show', constraints: PermalinkConstraint.new\n  end\nend\n", "# frozen_string_literal: true\n\ndescribe CategoriesController do\n  let(:admin) { Fabricate(:admin) }\n  let!(:category) { Fabricate(:category, user: admin) }\n  fab!(:user) { Fabricate(:user) }\n\n  context 'index' do\n\n    it 'web crawler view has correct urls for subfolder install' do\n      set_subfolder \"/forum\"\n      get '/categories', headers: { 'HTTP_USER_AGENT' => 'Googlebot' }\n      html = Nokogiri::HTML5(response.body)\n      expect(html.css('body.crawler')).to be_present\n      expect(html.css(\"a[href=\\\"/forum/c/#{category.slug}/#{category.id}\\\"]\")).to be_present\n    end\n\n    it \"properly preloads topic list\" do\n      SiteSetting.categories_topics = 5\n      SiteSetting.categories_topics.times { Fabricate(:topic) }\n      get \"/categories\"\n\n      expect(response.body).to have_tag(\"div#data-preloaded\") do |element|\n        json = JSON.parse(element.current_scope.attribute('data-preloaded').value)\n        expect(json['topic_list_latest']).to include(%{\"more_topics_url\":\"/latest\"})\n      end\n    end\n\n    it \"Shows correct title if category list is set for homepage\" do\n      SiteSetting.top_menu = \"categories|latest\"\n      get \"/\"\n\n      expect(response.body).to have_tag \"title\", text: \"Discourse\"\n\n      SiteSetting.short_site_description = \"Official community\"\n      get \"/\"\n\n      expect(response.body).to have_tag \"title\", text: \"Discourse - Official community\"\n    end\n\n    it \"redirects /category paths to /c paths\" do\n      get \"/category/uncategorized\"\n      expect(response.status).to eq(302)\n      expect(response.body).to include(\"c/uncategorized\")\n    end\n\n    it \"respects permalinks before redirecting /category paths to /c paths\" do\n      _perm = Permalink.create!(url: \"category/something\", category_id: category.id)\n\n      get \"/category/something\"\n      expect(response.status).to eq(301)\n      expect(response.body).to include(category.slug)\n    end\n\n    it 'returns the right response for a normal user' do\n      sign_in(user)\n\n      get \"/categories.json\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      expect(category_list[\"categories\"].map { |c| c[\"id\"] }).to contain_exactly(\n        SiteSetting.get(:uncategorized_category_id), category.id\n      )\n    end\n\n    it 'does not returns subcatgories without permission' do\n      subcategory = Fabricate(:category,  user: admin, parent_category: category)\n      subcategory.set_permissions(admins: :full)\n      subcategory.save!\n\n      sign_in(user)\n\n      get \"/categories.json?include_subcategories=true\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category).to eq(nil)\n    end\n\n    it 'returns the right subcategory response with permission' do\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      sign_in(user)\n\n      get \"/categories.json?include_subcategories=true\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category.count).to eq(1)\n      expect(subcategories_for_category.first[\"parent_category_id\"]).to eq(category.id)\n      expect(subcategories_for_category.first[\"id\"]).to eq(subcategory.id)\n    end\n\n    it 'does not return subcategories without query param' do\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      sign_in(user)\n\n      get \"/categories.json\"\n\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      subcategories_for_category = category_list[\"categories\"][1][\"subcategory_list\"]\n      expect(subcategories_for_category).to eq(nil)\n    end\n\n    it 'includes topics for categories, subcategories and subsubcategories when requested' do\n      SiteSetting.max_category_nesting = 3\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n      subsubcategory = Fabricate(:category, user: admin, parent_category: subcategory)\n\n      topic1 = Fabricate(:topic, category: category)\n      topic2 = Fabricate(:topic, category: subcategory)\n      topic3 = Fabricate(:topic, category: subsubcategory)\n      CategoryFeaturedTopic.feature_topics\n\n      get \"/categories.json?include_subcategories=true&include_topics=true\"\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      category_response = category_list[\"categories\"].find { |c| c[\"id\"] == category.id }\n      expect(category_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic1.id)\n\n      subcategory_response = category_response[\"subcategory_list\"][0]\n      expect(subcategory_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic2.id)\n\n      subsubcategory_response = subcategory_response[\"subcategory_list\"][0]\n      expect(subsubcategory_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic3.id)\n    end\n\n    it 'includes subcategories and topics by default when view is subcategories_with_featured_topics' do\n      SiteSetting.max_category_nesting = 3\n      subcategory = Fabricate(:category, user: admin, parent_category: category)\n\n      topic1 = Fabricate(:topic, category: category)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.desktop_category_page_style = \"subcategories_with_featured_topics\"\n      get \"/categories.json\"\n      expect(response.status).to eq(200)\n\n      category_list = response.parsed_body[\"category_list\"]\n\n      category_response = category_list[\"categories\"].find { |c| c[\"id\"] == category.id }\n      expect(category_response[\"topics\"].map { |c| c['id'] }).to contain_exactly(topic1.id)\n\n      expect(category_response[\"subcategory_list\"][0][\"id\"]).to eq(subcategory.id)\n    end\n\n    it \"does not n+1 with multiple topics\" do\n      category1 = Fabricate(:category)\n      category2 = Fabricate(:category)\n      topic1 = Fabricate(:topic, category: category1)\n\n      CategoryFeaturedTopic.feature_topics\n      SiteSetting.desktop_category_page_style = \"categories_with_featured_topics\"\n\n      # warmup\n      get \"/categories.json\"\n      expect(response.status).to eq(200)\n\n      first_request_queries = track_sql_queries do\n        get \"/categories.json\"\n        expect(response.status).to eq(200)\n      end\n\n      category_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category1.id }\n      expect(category_response[\"topics\"].count).to eq(1)\n\n      topic2 = Fabricate(:topic, category: category2)\n      CategoryFeaturedTopic.feature_topics\n\n      second_request_queries = track_sql_queries do\n        get \"/categories.json\"\n        expect(response.status).to eq(200)\n      end\n\n      category1_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category1.id }\n      category2_response = response.parsed_body[\"category_list\"][\"categories\"].find { |c| c[\"id\"] == category2.id }\n      expect(category1_response[\"topics\"].size).to eq(1)\n      expect(category2_response[\"topics\"].size).to eq(1)\n\n      expect(first_request_queries.count).to eq(second_request_queries.count)\n    end\n\n    it 'does not show uncategorized unless allow_uncategorized_topics' do\n      SiteSetting.desktop_category_page_style = \"categories_boxes_with_topics\"\n\n      uncategorized = Category.find(SiteSetting.uncategorized_category_id)\n      Fabricate(:topic, category: uncategorized)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.allow_uncategorized_topics = false\n\n      get \"/categories.json\"\n      expect(response.parsed_body[\"category_list\"][\"categories\"].map { |x| x['id'] }).not_to include(uncategorized.id)\n    end\n  end\n\n  context 'extensibility event' do\n    before do\n      sign_in(admin)\n    end\n\n    it \"triggers a extensibility event\" do\n      event = DiscourseEvent.track_events {\n        put \"/categories/#{category.id}.json\", params: {\n          name: 'hello',\n          color: 'ff0',\n          text_color: 'fff'\n        }\n      }.last\n\n      expect(event[:event_name]).to eq(:category_updated)\n      expect(event[:params].first).to eq(category)\n    end\n  end\n\n  context '#create' do\n    it \"requires the user to be logged in\" do\n      post \"/categories.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      before do\n        Jobs.run_immediately!\n        sign_in(admin)\n      end\n\n      it \"raises an exception when they don't have permission to create it\" do\n        sign_in(Fabricate(:user))\n        post \"/categories.json\", params: {\n          name: 'hello', color: 'ff0', text_color: 'fff'\n        }\n\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an exception when the name is missing\" do\n        post \"/categories.json\", params: { color: \"ff0\", text_color: \"fff\" }\n        expect(response.status).to eq(400)\n      end\n\n      describe \"failure\" do\n        it \"returns errors on a duplicate category name\" do\n          category = Fabricate(:category, user: admin)\n\n          post \"/categories.json\", params: {\n            name: category.name, color: \"ff0\", text_color: \"fff\"\n          }\n\n          expect(response.status).to eq(422)\n        end\n\n        it \"returns errors with invalid group\" do\n          category = Fabricate(:category, user: admin)\n          readonly = CategoryGroup.permission_types[:readonly]\n\n          post \"/categories.json\", params: {\n            name: category.name, color: \"ff0\", text_color: \"fff\", permissions: { \"invalid_group\" => readonly }\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body['errors']).to be_present\n        end\n      end\n\n      describe \"success\" do\n        it \"works\" do\n          SiteSetting.enable_category_group_moderation = true\n\n          readonly = CategoryGroup.permission_types[:readonly]\n          create_post = CategoryGroup.permission_types[:create_post]\n          group = Fabricate(:group)\n\n          post \"/categories.json\", params: {\n            name: \"hello\",\n            color: \"ff0\",\n            text_color: \"fff\",\n            slug: \"hello-cat\",\n            auto_close_hours: 72,\n            search_priority: Searchable::PRIORITIES[:ignore],\n            reviewable_by_group_name: group.name,\n            permissions: {\n              \"everyone\" => readonly,\n              \"staff\" => create_post\n            }\n          }\n\n          expect(response.status).to eq(200)\n          cat_json = response.parsed_body['category']\n          expect(cat_json).to be_present\n          expect(cat_json['reviewable_by_group_name']).to eq(group.name)\n          expect(cat_json['name']).to eq('hello')\n          expect(cat_json['slug']).to eq('hello-cat')\n          expect(cat_json['color']).to eq('ff0')\n          expect(cat_json['auto_close_hours']).to eq(72)\n          expect(cat_json['search_priority']).to eq(Searchable::PRIORITIES[:ignore])\n\n          category = Category.find(cat_json['id'])\n          expect(category.category_groups.map { |g| [g.group_id, g.permission_type] }.sort).to eq([\n            [Group[:everyone].id, readonly], [Group[:staff].id, create_post]\n          ])\n          expect(UserHistory.count).to eq(4) # 1 + 3 (bootstrap mode)\n        end\n      end\n    end\n  end\n\n  context '#show' do\n    before do\n      category.set_permissions(admins: :full)\n      category.save!\n    end\n\n    it \"requires the user to be logged in\" do\n      get \"/c/#{category.id}/show.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      it \"raises an exception if they don't have permission to see it\" do\n        admin.update!(admin: false)\n        sign_in(admin)\n        get \"/c/#{category.id}/show.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"renders category for users that have permission\" do\n        sign_in(admin)\n        get \"/c/#{category.id}/show.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  context '#destroy' do\n    it \"requires the user to be logged in\" do\n      delete \"/categories/category.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      it \"raises an exception if they don't have permission to delete it\" do\n        admin.update!(admin: false)\n        sign_in(admin)\n        delete \"/categories/#{category.slug}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"deletes the record\" do\n        sign_in(admin)\n\n        id = Fabricate(:topic_timer, category: category).id\n\n        expect do\n          delete \"/categories/#{category.slug}.json\"\n        end.to change(Category, :count).by(-1)\n        expect(response.status).to eq(200)\n        expect(UserHistory.count).to eq(1)\n        expect(TopicTimer.where(id: id).exists?).to eq(false)\n      end\n    end\n  end\n\n  context '#reorder' do\n    it \"reorders the categories\" do\n      sign_in(admin)\n\n      c1 = category\n      c2 = Fabricate(:category)\n      c3 = Fabricate(:category)\n      c4 = Fabricate(:category)\n      if c3.id < c2.id\n        tmp = c3; c2 = c3; c3 = tmp\n      end\n      c1.position = 8\n      c2.position = 6\n      c3.position = 7\n      c4.position = 5\n\n      payload = {}\n      payload[c1.id] = 4\n      payload[c2.id] = 6\n      payload[c3.id] = 6\n      payload[c4.id] = 5\n\n      post \"/categories/reorder.json\", params: { mapping: MultiJson.dump(payload) }\n\n      SiteSetting.fixed_category_positions = true\n      list = CategoryList.new(Guardian.new(admin))\n\n      expect(list.categories).to eq([\n        Category.find(SiteSetting.uncategorized_category_id),\n        c1,\n        c4,\n        c2,\n        c3\n      ])\n    end\n  end\n\n  context '#update' do\n    before do\n      Jobs.run_immediately!\n    end\n\n    it \"requires the user to be logged in\" do\n      put \"/categories/category.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe \"logged in\" do\n      before do\n        sign_in(admin)\n      end\n\n      it \"raises an exception if they don't have permission to edit it\" do\n        sign_in(Fabricate(:user))\n        put \"/categories/#{category.slug}.json\", params: {\n          name: 'hello',\n          color: 'ff0',\n          text_color: 'fff'\n        }\n        expect(response).to be_forbidden\n      end\n\n      it \"returns errors on a duplicate category name\" do\n        other_category = Fabricate(:category, name: \"Other\", user: admin)\n        put \"/categories/#{category.id}.json\", params: {\n          name: other_category.name,\n          color: \"ff0\",\n          text_color: \"fff\",\n        }\n        expect(response.status).to eq(422)\n      end\n\n      it \"returns errors when there is a name conflict while moving a category into another\" do\n        parent_category = Fabricate(:category, name: \"Parent\", user: admin)\n        other_category = Fabricate(:category, name: category.name, user: admin, parent_category: parent_category, slug: \"a-different-slug\")\n\n        put \"/categories/#{category.id}.json\", params: {\n          parent_category_id: parent_category.id,\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"returns 422 if email_in address is already in use for other category\" do\n        _other_category = Fabricate(:category, name: \"Other\", email_in: \"mail@example.com\")\n\n        put \"/categories/#{category.id}.json\", params: {\n          name: \"Email\",\n          email_in: \"mail@example.com\",\n          color: \"ff0\",\n          text_color: \"fff\",\n        }\n        expect(response.status).to eq(422)\n      end\n\n      describe \"success\" do\n        it \"updates attributes correctly\" do\n          SiteSetting.tagging_enabled = true\n          readonly = CategoryGroup.permission_types[:readonly]\n          create_post = CategoryGroup.permission_types[:create_post]\n          tag_group = Fabricate(:tag_group)\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: \"hello\",\n            color: \"ff0\",\n            text_color: \"fff\",\n            slug: \"hello-category\",\n            auto_close_hours: 72,\n            permissions: {\n              \"everyone\" => readonly,\n              \"staff\" => create_post\n            },\n            custom_fields: {\n              \"dancing\" => \"frogs\"\n            },\n            minimum_required_tags: \"\",\n            allow_global_tags: 'true',\n            required_tag_groups: [{\n              name: tag_group.name,\n              min_count: 2\n            }]\n          }\n\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.category_groups.map { |g| [g.group_id, g.permission_type] }.sort).to eq([\n            [Group[:everyone].id, readonly], [Group[:staff].id, create_post]\n          ])\n          expect(category.name).to eq(\"hello\")\n          expect(category.slug).to eq(\"hello-category\")\n          expect(category.color).to eq(\"ff0\")\n          expect(category.auto_close_hours).to eq(72)\n          expect(category.custom_fields).to eq(\"dancing\" => \"frogs\")\n          expect(category.minimum_required_tags).to eq(0)\n          expect(category.allow_global_tags).to eq(true)\n          expect(category.category_required_tag_groups.count).to eq(1)\n          expect(category.category_required_tag_groups.first.tag_group.id).to eq(tag_group.id)\n          expect(category.category_required_tag_groups.first.min_count).to eq(2)\n        end\n\n        it 'logs the changes correctly' do\n          category.update!(permissions: { \"admins\" => CategoryGroup.permission_types[:create_post] })\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: 'new name',\n            color: category.color,\n            text_color: category.text_color,\n            slug: category.slug,\n            permissions: {\n              \"everyone\" => CategoryGroup.permission_types[:create_post]\n            },\n          }\n          expect(response.status).to eq(200)\n          expect(UserHistory.count).to eq(5) # 2 + 3 (bootstrap mode)\n        end\n\n        it 'updates per-category settings correctly' do\n          category.custom_fields[Category::REQUIRE_TOPIC_APPROVAL] = false\n          category.custom_fields[Category::REQUIRE_REPLY_APPROVAL] = false\n          category.custom_fields[Category::NUM_AUTO_BUMP_DAILY] = 0\n\n          category.navigate_to_first_post_after_read = false\n          category.save!\n\n          put \"/categories/#{category.id}.json\", params: {\n            name: category.name,\n            color: category.color,\n            text_color: category.text_color,\n            navigate_to_first_post_after_read: true,\n            custom_fields: {\n              require_reply_approval: true,\n              require_topic_approval: true,\n              num_auto_bump_daily: 10\n            }\n          }\n\n          category.reload\n          expect(category.require_topic_approval?).to eq(true)\n          expect(category.require_reply_approval?).to eq(true)\n          expect(category.num_auto_bump_daily).to eq(10)\n          expect(category.navigate_to_first_post_after_read).to eq(true)\n        end\n\n        it \"can remove required tag group\" do\n          SiteSetting.tagging_enabled = true\n          category.update!(category_required_tag_groups: [ CategoryRequiredTagGroup.new(tag_group: Fabricate(:tag_group)) ])\n          put \"/categories/#{category.id}.json\", params: {\n            name: category.name,\n            color: category.color,\n            text_color: category.text_color,\n            allow_global_tags: 'false',\n            min_tags_from_required_group: 1,\n            required_tag_groups: []\n          }\n\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.category_required_tag_groups).to be_empty\n        end\n\n        it \"does not update other fields\" do\n          SiteSetting.tagging_enabled = true\n          tag_group_1 = Fabricate(:tag_group)\n          tag_group_2 = Fabricate(:tag_group)\n\n          category.update!(\n            allowed_tags: [\"hello\", \"world\"],\n            allowed_tag_groups: [tag_group_1.name],\n            category_required_tag_groups: [ CategoryRequiredTagGroup.new(tag_group: tag_group_2) ],\n            custom_fields: { field_1: 'hello', field_2: 'hello' }\n          )\n\n          put \"/categories/#{category.id}.json\"\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags.pluck(:name)).to contain_exactly(\"hello\", \"world\")\n          expect(category.tag_groups.pluck(:name)).to contain_exactly(tag_group_1.name)\n          expect(category.category_required_tag_groups.first.tag_group).to eq(tag_group_2)\n          expect(category.custom_fields).to eq({ 'field_1' => 'hello', 'field_2' => 'hello' })\n\n          put \"/categories/#{category.id}.json\", params: { allowed_tags: [], custom_fields: { field_1: nil } }\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags).to be_blank\n          expect(category.tag_groups.pluck(:name)).to contain_exactly(tag_group_1.name)\n          expect(category.category_required_tag_groups.first.tag_group).to eq(tag_group_2)\n          expect(category.custom_fields).to eq({ 'field_2' => 'hello' })\n\n          put \"/categories/#{category.id}.json\", params: { allowed_tags: [], allowed_tag_groups: [], required_tag_groups: [], custom_fields: { field_1: 'hi', field_2: nil } }\n          expect(response.status).to eq(200)\n          category.reload\n          expect(category.tags).to be_blank\n          expect(category.tag_groups).to be_blank\n          expect(category.category_required_tag_groups).to eq([])\n          expect(category.custom_fields).to eq({ 'field_1' => 'hi' })\n        end\n      end\n    end\n  end\n\n  context '#update_slug' do\n    it 'requires the user to be logged in' do\n      put \"/category/category/slug.json\"\n      expect(response.status).to eq(403)\n    end\n\n    describe 'logged in' do\n      before do\n        sign_in(admin)\n      end\n\n      it 'rejects blank' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: '   ' }\n        expect(response.status).to eq(422)\n        expect(response.parsed_body[\"errors\"]).to eq([\"Slug can't be blank\"])\n      end\n\n      it 'accepts valid custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: 'valid-slug' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('valid-slug')\n      end\n\n      it 'accepts not well formed custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: ' valid slug' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('valid-slug')\n      end\n\n      it 'accepts and sanitize custom slug when the slug generation method is not ascii' do\n        SiteSetting.slug_generation_method = 'none'\n        put \"/category/#{category.id}/slug.json\", params: { slug: ' another !_ slug @' }\n\n        expect(response.status).to eq(200)\n        expect(category.reload.slug).to eq('another-slug')\n        SiteSetting.slug_generation_method = 'ascii'\n      end\n\n      it 'rejects invalid custom slug' do\n        put \"/category/#{category.id}/slug.json\", params: { slug: '.' }\n        expect(response.status).to eq(422)\n        expect(response.parsed_body[\"errors\"]).to eq([\"Slug is invalid\"])\n      end\n    end\n  end\n\n  context '#categories_and_topics' do\n    before do\n      10.times.each { Fabricate(:topic) }\n    end\n\n    it 'works when SiteSetting.categories_topics is non-null' do\n      SiteSetting.categories_topics = 5\n\n      get '/categories_and_latest.json'\n      expect(response.parsed_body['topic_list']['topics'].size).to eq(5)\n    end\n\n    it 'works when SiteSetting.categories_topics is null' do\n      SiteSetting.categories_topics = 0\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n\n      category_list = json['category_list']\n      topic_list = json['topic_list']\n\n      expect(category_list['categories'].size).to eq(2) # 'Uncategorized' and category\n      expect(topic_list['topics'].size).to eq(5)\n\n      Fabricate(:category, parent_category: category)\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n      expect(json['category_list']['categories'].size).to eq(2)\n      expect(json['topic_list']['topics'].size).to eq(5)\n\n      Fabricate(:category)\n      Fabricate(:category)\n\n      get '/categories_and_latest.json'\n      json = response.parsed_body\n      expect(json['category_list']['categories'].size).to eq(4)\n      expect(json['topic_list']['topics'].size).to eq(6)\n    end\n\n    it 'does not show uncategorized unless allow_uncategorized_topics' do\n      uncategorized = Category.find(SiteSetting.uncategorized_category_id)\n      Fabricate(:topic, category: uncategorized)\n      CategoryFeaturedTopic.feature_topics\n\n      SiteSetting.allow_uncategorized_topics = false\n\n      get \"/categories_and_latest.json\"\n      expect(response.parsed_body[\"category_list\"][\"categories\"].map { |x| x['id'] }).not_to include(uncategorized.id)\n    end\n\n    describe 'Showing top topics from private categories' do\n      it 'returns the top topic from the private category when the user is a member' do\n        restricted_group = Fabricate(:group)\n        private_cat = Fabricate(:private_category, group: restricted_group)\n        private_topic = Fabricate(:topic, category: private_cat, like_count: 1000, posts_count: 100)\n        TopTopic.refresh!\n        restricted_group.add(user)\n        sign_in(user)\n\n        get \"/categories_and_top.json\"\n        parsed_topic = response.parsed_body.dig('topic_list', 'topics').detect do |t|\n          t.dig('id') == private_topic.id\n        end\n\n        expect(parsed_topic).to be_present\n      end\n    end\n  end\n\n  describe '#visible_groups' do\n    fab!(:public_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:public], name: 'aaa') }\n    fab!(:private_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:staff], name: 'bbb') }\n    fab!(:user_only_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:members], name: 'ccc') }\n\n    it 'responds with 404 when id param is invalid' do\n      get \"/c/-9999/visible_groups.json\"\n\n      expect(response.status).to eq(404)\n    end\n\n    it \"responds with 403 when category is restricted to the current user\" do\n      category.set_permissions(private_group.name => :full)\n      category.save!\n\n      get \"/c/#{category.id}/visible_groups.json\"\n\n      expect(response.status).to eq(403)\n    end\n\n    it \"returns the names of the groups that are visible to an admin\" do\n      sign_in(admin)\n\n      category.set_permissions(\n        \"everyone\" => :readonly,\n        private_group.name => :full,\n        public_group.name => :full,\n        user_only_group.name => :full,\n      )\n\n      category.save!\n\n      get \"/c/#{category.id}/visible_groups.json\"\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body[\"groups\"]).to eq([public_group.name, private_group.name, user_only_group.name])\n    end\n\n    it \"returns the names of the groups that are visible to a user and excludes the everyone group\" do\n      sign_in(user)\n\n      category.set_permissions(\n        \"everyone\" => :readonly,\n        private_group.name => :full,\n        public_group.name => :full,\n        user_only_group.name => :full,\n      )\n\n      category.save!\n\n      get \"/c/#{category.id}/visible_groups.json\"\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body[\"groups\"]).to eq([public_group.name])\n    end\n  end\nend\n", "# frozen_string_literal: true\n\ndescribe CategorySerializer do\n  fab!(:user) { Fabricate(:user) }\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:group) { Fabricate(:group) }\n  fab!(:category) { Fabricate(:category, reviewable_by_group_id: group.id) }\n\n  it \"includes the reviewable by group name if enabled\" do\n    SiteSetting.enable_category_group_moderation = true\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:reviewable_by_group_name]).to eq(group.name)\n  end\n\n  it \"doesn't include the reviewable by group name if disabled\" do\n    SiteSetting.enable_category_group_moderation = false\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:reviewable_by_group_name]).to be_blank\n  end\n\n  it \"includes custom fields\" do\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:custom_fields]).to be_empty\n\n    category.custom_fields[\"enable_marketplace\"] = true\n    category.save_custom_fields\n\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json[:custom_fields]).to be_present\n  end\n\n  it \"does not include the default notification level when there is no user\" do\n    json = described_class.new(category, scope: Guardian.new, root: false).as_json\n    expect(json.key?(:notification_level)).to eq(false)\n  end\n\n  describe \"user notification level\" do\n    it \"includes the user's notification level\" do\n      CategoryUser.set_notification_level_for_category(user, NotificationLevels.all[:watching], category.id)\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n      expect(json[:notification_level]).to eq(NotificationLevels.all[:watching])\n    end\n  end\n\n  describe '#group_permissions' do\n    fab!(:private_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:staff], name: 'bbb') }\n\n    fab!(:user_group) do\n      Fabricate(:group, visibility_level: Group.visibility_levels[:members], name: 'ccc').tap do |g|\n        g.add(user)\n      end\n    end\n\n    before do\n      group.update!(name: 'aaa')\n\n      category.set_permissions(\n        :everyone => :readonly,\n        group.name => :readonly,\n        user_group.name => :full,\n        private_group.name => :full,\n      )\n\n      category.save!\n    end\n\n    it \"does not include the attribute for an anon user\" do\n      json = described_class.new(category, scope: Guardian.new, root: false).as_json\n\n      expect(json[:group_permissions]).to eq(nil)\n    end\n\n    it \"does not include the attribute for a regular user\" do\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n\n      expect(json[:group_permissions]).to eq(nil)\n    end\n\n    it \"returns the right category group permissions for a user that can edit the category\" do\n      SiteSetting.moderators_manage_categories_and_groups = true\n      user.update!(moderator: true)\n\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n\n      expect(json[:group_permissions]).to eq([\n        { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },\n        { permission_type: CategoryGroup.permission_types[:full], group_name: private_group.name },\n        { permission_type: CategoryGroup.permission_types[:full], group_name: user_group.name },\n        { permission_type: CategoryGroup.permission_types[:readonly], group_name: 'everyone' },\n      ])\n    end\n  end\n\n  describe \"available groups\" do\n    it \"not included for a regular user\" do\n      json = described_class.new(category, scope: Guardian.new(user), root: false).as_json\n      expect(json[:available_groups]).to eq(nil)\n    end\n\n    it \"included for an admin\" do\n      json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json\n      expect(json[:available_groups]).to eq(Group.order(:name).pluck(:name) - ['everyone'])\n    end\n  end\nend\n"], "filenames": ["app/assets/javascripts/discourse/app/controllers/share-topic.js", "app/assets/javascripts/discourse/app/models/category.js", "app/assets/javascripts/discourse/tests/acceptance/share-topic-test.js", "app/assets/javascripts/discourse/tests/acceptance/topic-test.js", "app/controllers/categories_controller.rb", "app/serializers/category_serializer.rb", "config/routes.rb", "spec/requests/categories_controller_spec.rb", "spec/serializers/category_serializer_spec.rb"], "buggy_code_start_loc": [41, 517, 17, 28, 5, 53, 724, 735, 46], "buggy_code_end_loc": [48, 517, 93, 28, 373, 53, 724, 735, 116], "fixing_code_start_loc": [41, 518, 17, 29, 5, 54, 725, 736, 46], "fixing_code_end_loc": [47, 522, 95, 35, 381, 58, 726, 793, 91], "type": "CWE-276", "message": "Discourse is an open source platform for community discussion. In stable versions prior to 2.8.3 and beta versions prior 2.9.0.beta4 erroneously expose groups. When a group with restricted visibility has been used to set the permissions of a category, the name of the group is leaked to any user that is able to see the category. To workaround the problem, a site administrator can remove groups with restricted visibility from any category's permissions setting.", "other": {"cve": {"id": "CVE-2022-24804", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-11T20:15:20.157", "lastModified": "2022-04-18T17:01:16.767", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open source platform for community discussion. In stable versions prior to 2.8.3 and beta versions prior 2.9.0.beta4 erroneously expose groups. When a group with restricted visibility has been used to set the permissions of a category, the name of the group is leaked to any user that is able to see the category. To workaround the problem, a site administrator can remove groups with restricted visibility from any category's permissions setting."}, {"lang": "es", "value": "Discourse es una plataforma de c\u00f3digo abierto para el debate comunitario. En versiones estables anteriores a 2.8.3 y en versiones beta anteriores a 2.9.0.beta4, son expuestos err\u00f3neamente los grupos. Cuando ha sido usado un grupo con visibilidad restringida para establecer los permisos de una categor\u00eda, el nombre del grupo es filtrado a cualquier usuario que pueda visualizar la categor\u00eda. Para mitigar el problema, el administrador del sitio puede eliminar los grupos con visibilidad restringida de la configuraci\u00f3n de permisos de cualquier categor\u00eda"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-276"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.8.3", "matchCriteriaId": "F9653E97-F0B1-4559-AF43-F202A84403D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "B3803EF9-A296-42B7-887F-93C5E68E94C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "8BA3D313-3C11-43E2-A47D-CBB532D1B6F8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "6F42673E-65F3-4807-9484-20CB747420FB"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/0f7b9878ff3207ce20970f0517604793920bb3d2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-v4c9-6m9g-37ff", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/0f7b9878ff3207ce20970f0517604793920bb3d2"}}