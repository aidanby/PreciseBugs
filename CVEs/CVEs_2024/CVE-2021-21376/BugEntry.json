{"buggy_code": ["5.9.0 (March 2021)\n------------------\n\n## New features\n\n- Webclient UI supports Change Owner ([#149](https://github.com/ome/omero-web/pull/149))\n- Filtering by Key-Value pairs supports autocomplete ([#250](https://github.com/ome/omero-web/pull/250))\n- Support URLs as output from scripts ([#233](https://github.com/ome/omero-web/pull/233))]\n- Improved install info in README ([#239](https://github.com/ome/omero-web/pull/239))]\n- Migrate CI to use GitHub actions ([#240](https://github.com/ome/omero-web/pull/240))]\n- Improve performance of OMERO.table loading ([#243](https://github.com/ome/omero-web/pull/243))\n- OMERO.table ROI column links to ROI in OMERO.iviewer ([#264](https://github.com/ome/omero-web/pull/264))\n- Disable placeholder URL popup on tree ([#257](https://github.com/ome/omero-web/pull/257))\n- Add an option to set SESSION_COOKIE_PATH ([#271]https://github.com/ome/omero-web/pull/271). Thanks to [Andrey Yudin](https://github.com/andreyyudin)\n\n## Bug fixes\n\n- Fix Open_with handling of callbacks in right panel ([#232](https://github.com/ome/omero-web/pull/232))\n- Fix /webgateway/dataset/ID/children/ URL (Thanks to [Johannes Dewender](https://github.com/JonnyJD)) ([#245](https://github.com/ome/omero-web/pull/245))\n- Remove broken 'Create Shares' dialog ([#265](https://github.com/ome/omero-web/pull/265))\n- Fix API ?childCount=true when zero objects found ([#249](https://github.com/ome/omero-web/pull/249))\n- Fix partial loading of annotations ([#256](https://github.com/ome/omero-web/pull/256))\n- Fix ignored limit in webgateway/table endpoint ([#268](https://github.com/ome/omero-web/pull/268))\n\n5.8.1 (September 2020)\n----------------------\n\n## Bug fixes\n\n- Restore Python 3.5 compatibility ([#228](https://github.com/ome/omero-web/pull/228))\n\n## Other updates\n\n- Add more details to README for release process ([#220](https://github.com/ome/omero-web/pull/220))\n- Run tox in travis instead of Docker ([#219](https://github.com/ome/omero-web/pull/219))\n- Run black autoformatter, add pre-commit hook ([#218](https://github.com/ome/omero-web/pull/218))\n\n5.8.0 (September 2020)\n----------------------\n\n- webclient:\n   - Disable large zip file creation for data download ([#197](https://github.com/ome/omero-web/pull/197))\n   - Fix 'Move to Group' when data owner not in origin group ([#212](https://github.com/ome/omero-web/pull/212))\n   - History results page supports browse to data ([#206](https://github.com/ome/omero-web/pull/206))\n   - Fix shortening of Companion file names ([#198](https://github.com/ome/omero-web/pull/198))\n   - Fix pagination in history page and omero_table ([#203](https://github.com/ome/omero-web/pull/203))\n   - Link ownership matches child owner ([#199](https://github.com/ome/omero-web/pull/199))\n   - Improve download of OMERO.table as csv performance ([#192](https://github.com/ome/omero-web/pull/192))\n   - Fix display of disk usage for very small percentages ([#211](https://github.com/ome/omero-web/pull/211))\n\n- API changes:\n   - @login_required(doConnectionCleanup=False) will close connection unless streaming ([#191](https://github.com/ome/omero-web/pull/191))\n   - Return 404 for webgateway/imgData/ID if image not found ([#209](https://github.com/ome/omero-web/pull/209))\n\n- Other:\n   - Handle missing config for 'scripts to ignore' ([#195](https://github.com/ome/omero-web/pull/195))\n   - Cap pytest-xdist to avoid psutil Travis failures ([#201](https://github.com/ome/omero-web/pull/201))\n\n5.7.1 (July 2020)\n-----------------\n\n- webgateway\n\n   - Always marshal tile metadata on presence of pyramid ([#193](https://github.com/ome/omero-web/pull/193))\n\n5.7.0 (July 2020)\n-----------------\n\n- webclient:\n   - Preserve whitespace and linebreaks in Comments ([#150](https://github.com/ome/omero-web/pull/150))\n   - Improve filtering Images by numerical Key-Value pairs ([#147](https://github.com/ome/omero-web/pull/147))\n   - Fix editing of 'Shares' in webclient ([#162](https://github.com/ome/omero-web/pull/162))\n   - Fix error when user logged-out and public user configured ([#154](https://github.com/ome/omero-web/pull/154))\n   - No longer ignore the default thumbnail size from the configuration ([#165](https://github.com/ome/omero-web/pull/165))\n   - Fix moving data in webclient tree in Python 3.5 ([#170](https://github.com/ome/omero-web/pull/170))\n   - Handle no 'callback' in request.session ([#186](https://github.com/ome/omero-web/pull/186))\n\n- API changes:\n   - Add ROI support to `paths_to_object` ([#159](https://github.com/ome/omero-web/pull/159))\n   - Add Shape support to `paths_to_object` ([#178](https://github.com/ome/omero-web/pull/178))\n   - Add JSON API support for Experimenters and Groups ([#148](https://github.com/ome/omero-web/pull/148))\n\n- Other:\n   - Fix `render_roi_thumbnail` for unset Z/T index ([#157](https://github.com/ome/omero-web/pull/157))\n   - `omero-web` now requires `omero-py 5.7.0`\n   - Add doc for APPLICATION_SERVER_HOST to settings ([#177](https://github.com/ome/omero-web/pull/177))\n   - Set sign_tags to True by default in .bumpversion.cfg ([#176](https://github.com/ome/omero-web/pull/176))\n   - Fix new flake8 warnings ([#174](https://github.com/ome/omero-web/pull/174))\n   - Add `omero-web-docker` to release process instructions ([#156](https://github.com/ome/omero-web/pull/156))\n\n\n5.6.3 (March 2020)\n------------------\n\n- `omero.web.root_application`: allow \"/\" to be overridden ([#123](https://github.com/ome/omero-web/pull/123))\n- Close sessions where user is anonymous but `is_valid_public_url` is false ([#151](https://github.com/ome/omero-web/pull/151))\n\n5.6.2 (February 2020)\n---------------------\n\n- Fix shape_thumbnail using integer division ([#137](https://github.com/ome/omero-web/pull/137))\n- Use chosen plugin for script UI values ([#135](https://github.com/ome/omero-web/pull/135))\n- Rating post only ([#132](https://github.com/ome/omero-web/pull/132))\n- Fix feedback url encode ([#131](https://github.com/ome/omero-web/pull/131))\n- Script GUI file upload ([#128](https://github.com/ome/omero-web/pull/128))\n- Script upload ([#126](https://github.com/ome/omero-web/pull/126))\n- Fix webadmin search firefox ([#125](https://github.com/ome/omero-web/pull/125))\n- Delete check parent links ([#124](https://github.com/ome/omero-web/pull/124))\n- Map ann parent ID ([#119](https://github.com/ome/omero-web/pull/119))\n- Confine projections to no more than 256MiB of raw data ([#115](https://github.com/ome/omero-web/pull/115))\n- Fix color picker hex input box ([#114](https://github.com/ome/omero-web/pull/114))\n- Fix and expand \"open with\" plugin support ([#113](https://github.com/ome/omero-web/pull/113))\n- Table download ([#3](https://github.com/ome/omero-web/pull/3))\n\n5.6.1 (January 2020)\n--------------------\n\n- Quick fix of the show downloads regex ([#109](https://github.com/ome/omero-web/pull/109))\n\n5.6.0 (January 2020)\n--------------------\n\n- Remove support for Python 2 ([#103](https://github.com/ome/omero-web/pull/103))\n- Remove requirement files ([#107](https://github.com/ome/omero-web/pull/107))\n- Use BytesIO for default Thumbnail ([#104](https://github.com/ome/omero-web/pull/104))\n- omero-web requires OMERODIR ([#100](https://github.com/ome/omero-web/pull/100))\n- Ignore OMERO_HOME in settings.py ([#98](https://github.com/ome/omero-web/pull/98))\n- Better exception handling of custom settings ([#94](https://github.com/ome/omero-web/pull/94))\n- Add support for extra NGINX server configuration ([#90](https://github.com/ome/omero-web/pull/90))\n- Fix ROI maks and thumbnails ([#92](https://github.com/ome/omero-web/pull/92))\n- Fix script result failures ([#87](https://github.com/ome/omero-web/pull/87))\n- Fix download of multiple images in a zip ([#76](https://github.com/ome/omero-web/pull/76))\n- Fix race condition while closing tables ([#25](https://github.com/ome/omero-web/pull/25))\n- Fix `omero_ext.path` import ([#77](https://github.com/ome/omero-web/pull/77))\n- Add `omero.web.nginx_server_extra_config` property ([#80](https://github.com/ome/omero-web/pull/80))\n- Use cached config.xml in `omero.webgateway.getClientSettings` ([#83](https://github.com/ome/omero-web/pull/83))\n- Fix dialogs for thumbnail figure and split-view figure scripts ([#73](https://github.com/ome/omero-web/pull/73))\n- Loosen version checks to support 5.5 with 5.6 ([#32](https://github.com/ome/omero-web/pull/32))\n\n## API changes\n\n- OMERO.web now fails to start when `<app>.urls` fails to import ([#79](https://github.com/ome/omero-web/pull/79))\n- OMERO.web uses Django 1.11, upgraded from Django 1.8.\n- omeroweb.http renamed to omeroweb.httprsp to avoid import name\n  clashes with Django http.\n- URLs must be referenced by `name` not path.to.view.method (previously\n  some webgateway URLS lacked a name). For example, instead of\n  `{% url 'webgateway.views.render_image' image_id theZ theT %}`, use\n  `{% url 'webgateway_render_image' image_id theZ theT %}`.\n\n\n5.5.dev2 (August 2019)\n----------------------\n\n- Improve README\n- Add omeroweb.version\n- Move templates to omeroweb/\n- Bump to omero-py 5.5.1.dev1\n- Extract code from ome/openmicroscopy\n- Make minimal changes for a functioning `python setup.py` ([#1](https://github.com/ome/omero-web/pull/1))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2011-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"\nDecorators for use with OMERO.web applications.\n\"\"\"\n\nimport logging\nimport traceback\nfrom django.http import Http404, HttpResponseRedirect, JsonResponse\nfrom django.http.response import HttpResponseBase\nfrom django.shortcuts import render\nfrom django.http import HttpResponseForbidden, StreamingHttpResponse\n\nfrom django.conf import settings\nfrom django.utils.http import urlencode\nfrom functools import update_wrapper\nfrom django.core.urlresolvers import reverse, resolve, NoReverseMatch\nfrom django.core.cache import cache\n\nfrom omeroweb.utils import reverse_with_params\nfrom omeroweb.connector import Connector\nfrom omero.gateway.utils import propertiesToDict\nfrom omero import ApiUsageException\n\nlogger = logging.getLogger(__name__)\n\n\ndef parse_url(lookup_view):\n    if not lookup_view:\n        raise ValueError(\"No lookup_view\")\n    url = None\n    try:\n        url = reverse_with_params(\n            viewname=lookup_view[\"viewname\"],\n            args=lookup_view.get(\"args\", []),\n            query_string=lookup_view.get(\"query_string\", None),\n        )\n    except KeyError:\n        # assume we've been passed a url\n        try:\n            resolve(lookup_view)\n            url = lookup_view\n        except Exception:\n            pass\n    if url is None:\n        logger.error(\"Reverse for '%s' not found.\" % lookup_view)\n        raise NoReverseMatch(\"Reverse for '%s' not found.\" % lookup_view)\n    return url\n\n\ndef get_client_ip(request):\n    x_forwarded_for = request.META.get(\"HTTP_X_FORWARDED_FOR\")\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(\",\")[-1].strip()\n    else:\n        ip = request.META.get(\"REMOTE_ADDR\")\n    return ip\n\n\ndef is_public_user(request):\n    \"\"\"\n    Is the session connector created for public user?\n\n    Returns None if no connector found\n    \"\"\"\n    connector = request.session.get(\"connector\")\n    if connector is not None:\n        return connector.is_public\n\n\nclass ConnCleaningHttpResponse(StreamingHttpResponse):\n    \"\"\"Extension of L{HttpResponse} which closes the OMERO connection.\"\"\"\n\n    def close(self):\n        super(ConnCleaningHttpResponse, self).close()\n        try:\n            logger.debug(\"Closing OMERO connection in %r\" % self)\n            if self.conn is not None and self.conn.c is not None:\n                self.conn.close(hard=False)\n        except Exception:\n            logger.error(\"Failed to clean up connection.\", exc_info=True)\n\n\nclass TableClosingHttpResponse(ConnCleaningHttpResponse):\n    \"\"\"Extension of L{HttpResponse} which closes the OMERO connection.\"\"\"\n\n    def close(self):\n        try:\n            if self.table is not None:\n                self.table.close()\n        except Exception:\n            logger.error(\"Failed to close OMERO.table.\", exc_info=True)\n        # Now call super to close conn\n        super(TableClosingHttpResponse, self).close()\n\n\nclass login_required(object):\n    \"\"\"\n    OMERO.web specific extension of the Django login_required() decorator,\n    https://docs.djangoproject.com/en/dev/topics/auth/, which is responsible\n    for ensuring a valid L{omero.gateway.BlitzGateway} connection. Is\n    configurable by various options.\n\n    doConnectionCleanup:\n        Used to indicate methods that may return ConnCleaningHttpResponse.\n        If True (default), then returning a ConnCleaningHttpResponse will\n        raise an Exception since cleanup is intended to be immediate; if\n        False, connection cleanup will be skipped ONLY when a\n        ConnCleaningHttpResponse is returned.\n    \"\"\"\n\n    def __init__(\n        self,\n        useragent=\"OMERO.web\",\n        isAdmin=False,\n        isGroupOwner=False,\n        doConnectionCleanup=True,\n        omero_group=\"-1\",\n        allowPublic=None,\n    ):\n        \"\"\"\n        Initialises the decorator.\n        \"\"\"\n        self.useragent = useragent\n        self.isAdmin = isAdmin\n        self.isGroupOwner = isGroupOwner\n        self.doConnectionCleanup = doConnectionCleanup\n        self.omero_group = omero_group\n        self.allowPublic = allowPublic\n\n    # To make django's method_decorator work, this is required until\n    # python/django sort out how argumented decorator wrapping should work\n    # https://github.com/openmicroscopy/openmicroscopy/pull/1820\n    def __getattr__(self, name):\n        if name == \"__name__\":\n            return self.__class__.__name__\n        else:\n            return super(login_required, self).getattr(name)\n\n    def get_login_url(self):\n        \"\"\"The URL that should be redirected to if not logged in.\"\"\"\n        return reverse(settings.LOGIN_VIEW)\n\n    login_url = property(get_login_url)\n\n    def get_share_connection(self, request, conn, share_id):\n        try:\n            conn.SERVICE_OPTS.setOmeroShare(share_id)\n            conn.getShare(share_id)\n            return conn\n        except Exception:\n            logger.error(\"Error activating share.\", exc_info=True)\n            return None\n\n    def prepare_share_connection(self, request, conn, share_id):\n        \"\"\"Prepares the share connection if we have a valid share ID.\"\"\"\n        # we always need to clear any dirty 'omero.share' values from previous\n        # calls\n        conn.SERVICE_OPTS.setOmeroShare()\n        if share_id is None:\n            return None\n        share = conn.getShare(share_id)\n        try:\n            if share.getOwner().id != conn.getUserId():\n                if share.active and not share.isExpired():\n                    return self.get_share_connection(request, conn, share_id)\n                logger.debug(\"Share is unavailable.\")\n                return None\n        except Exception:\n            logger.error(\"Error retrieving share connection.\", exc_info=True)\n            return None\n\n    def on_not_logged_in(self, request, url, error=None):\n        \"\"\"Called whenever the user is not logged in.\"\"\"\n        if request.is_ajax():\n            logger.debug(\"Request is Ajax, returning HTTP 403.\")\n            return HttpResponseForbidden()\n\n        try:\n            for lookup_view in settings.LOGIN_REDIRECT[\"redirect\"]:\n                try:\n                    if url == reverse(lookup_view):\n                        url = parse_url(settings.LOGIN_REDIRECT)\n                except NoReverseMatch:\n                    try:\n                        resolve(lookup_view)\n                        if url == lookup_view:\n                            url = parse_url(settings.LOGIN_REDIRECT)\n                    except Http404:\n                        logger.error(\"Cannot resolve url %s\" % lookup_view)\n        except KeyError:\n            pass\n        except Exception:\n            logger.error(\"Error while redirection on not logged in.\", exc_info=True)\n\n        args = {\"url\": url}\n\n        logger.debug(\n            \"Request is not Ajax, redirecting to %s?%s\"\n            % (self.login_url, urlencode(args))\n        )\n        return HttpResponseRedirect(\"%s?%s\" % (self.login_url, urlencode(args)))\n\n    def on_logged_in(self, request, conn):\n        \"\"\"\n        Called whenever the users is successfully logged in.\n        Sets the 'omero.group' option if specified in the constructor\n        \"\"\"\n        if self.omero_group is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(self.omero_group)\n\n    def on_share_connection_prepared(self, request, conn_share):\n        \"\"\"Called whenever a share connection is successfully prepared.\"\"\"\n        pass\n\n    def verify_is_admin(self, conn):\n        \"\"\"\n        If we have been requested to by the isAdmin flag, verify the user\n        is an admin and raise an exception if they are not.\n        \"\"\"\n        if self.isAdmin and not conn.isAdmin():\n            raise Http404\n\n    def verify_is_group_owner(self, conn, gid):\n        \"\"\"\n        If we have been requested to by the isGroupOwner flag, verify the user\n        is the owner of the provided group. If no group is provided the user's\n        active session group ownership will be verified.\n        \"\"\"\n        if not self.isGroupOwner:\n            return\n        if gid is not None:\n            if not conn.isLeader(gid):\n                raise Http404\n        else:\n            if not conn.isLeader():\n                raise Http404\n\n    def is_valid_public_url(self, server_id, request):\n        \"\"\"\n        Verifies that the URL for the resource being requested falls within\n        the scope of the OMERO.webpublic URL filter.\n        \"\"\"\n        if settings.PUBLIC_ENABLED:\n            if not hasattr(settings, \"PUBLIC_USER\"):\n                logger.warn(\n                    \"OMERO.webpublic enabled but public user \"\n                    \"(omero.web.public.user) not set, disabling \"\n                    \"OMERO.webpublic.\"\n                )\n                settings.PUBLIC_ENABLED = False\n                return False\n            if not hasattr(settings, \"PUBLIC_PASSWORD\"):\n                logger.warn(\n                    \"OMERO.webpublic enabled but public user \"\n                    \"password (omero.web.public.password) not set, \"\n                    \"disabling OMERO.webpublic.\"\n                )\n                settings.PUBLIC_ENABLED = False\n                return False\n            if settings.PUBLIC_GET_ONLY and (request.method != \"GET\"):\n                return False\n            if self.allowPublic is None:\n                return settings.PUBLIC_URL_FILTER.search(request.path) is not None\n            return self.allowPublic\n        return False\n\n    def load_server_settings(self, conn, request):\n        \"\"\"Loads Client preferences and Read-Only status from the server.\"\"\"\n        try:\n            request.session[\"can_create\"]\n        except KeyError:\n            request.session.modified = True\n            request.session[\"can_create\"] = conn.canCreate()\n        try:\n            request.session[\"server_settings\"]\n        except Exception:\n            request.session.modified = True\n            request.session[\"server_settings\"] = {}\n            try:\n                request.session[\"server_settings\"] = propertiesToDict(\n                    conn.getClientSettings(), prefix=\"omero.client.\"\n                )\n            except Exception:\n                logger.error(traceback.format_exc())\n            # make extra call for omero.mail, not a part of omero.client\n            request.session[\"server_settings\"][\"email\"] = conn.getEmailSettings()\n\n    def get_public_user_connector(self):\n        \"\"\"\n        Returns the current cached OMERO.webpublic connector or None if\n        nothing has been cached.\n        \"\"\"\n        if not settings.PUBLIC_CACHE_ENABLED:\n            return\n        return cache.get(settings.PUBLIC_CACHE_KEY)\n\n    def set_public_user_connector(self, connector):\n        \"\"\"Sets the current cached OMERO.webpublic connector.\"\"\"\n        if not settings.PUBLIC_CACHE_ENABLED or connector.omero_session_key is None:\n            return\n        logger.debug(\"Setting OMERO.webpublic connector: %r\" % connector)\n        cache.set(settings.PUBLIC_CACHE_KEY, connector, settings.PUBLIC_CACHE_TIMEOUT)\n\n    def get_connection(self, server_id, request):\n        \"\"\"\n        Prepares a Blitz connection wrapper (from L{omero.gateway}) for\n        use with a view function.\n        \"\"\"\n        connection = self.get_authenticated_connection(server_id, request)\n        is_valid_public_url = self.is_valid_public_url(server_id, request)\n        logger.debug(\"Is valid public URL? %s\" % is_valid_public_url)\n        if connection is None and is_valid_public_url:\n            # If OMERO.webpublic is enabled, pick up a username and\n            # password from configuration and use those credentials to\n            # create a connection.\n            logger.debug(\n                \"OMERO.webpublic enabled, attempting to login \"\n                \"with configuration supplied credentials.\"\n            )\n            if server_id is None:\n                server_id = settings.PUBLIC_SERVER_ID\n            username = settings.PUBLIC_USER\n            password = settings.PUBLIC_PASSWORD\n            is_secure = settings.SECURE\n            logger.debug(\"Is SSL? %s\" % is_secure)\n            # Try and use a cached OMERO.webpublic user session key.\n            public_user_connector = self.get_public_user_connector()\n            if public_user_connector is not None:\n                logger.debug(\n                    \"Attempting to use cached OMERO.webpublic \"\n                    \"connector: %r\" % public_user_connector\n                )\n                connection = public_user_connector.join_connection(self.useragent)\n                if connection is not None:\n                    request.session[\"connector\"] = public_user_connector\n                    logger.debug(\n                        \"Attempt to use cached OMERO.web public \"\n                        \"session key successful!\"\n                    )\n                    return connection\n                logger.debug(\n                    \"Attempt to use cached OMERO.web public \" \"session key failed.\"\n                )\n            # We don't have a cached OMERO.webpublic user session key,\n            # create a new connection based on the credentials we've been\n            # given.\n            connector = Connector(server_id, is_secure)\n            connection = connector.create_connection(\n                self.useragent,\n                username,\n                password,\n                is_public=True,\n                userip=get_client_ip(request),\n            )\n            request.session[\"connector\"] = connector\n            # Clear any previous context so we don't try to access this\n            # NB: we also do this in WebclientLoginView.handle_logged_in()\n            if \"active_group\" in request.session:\n                del request.session[\"active_group\"]\n            if \"user_id\" in request.session:\n                del request.session[\"user_id\"]\n            request.session.modified = True\n            self.set_public_user_connector(connector)\n        elif connection is not None:\n            is_anonymous = connection.isAnonymous()\n            logger.debug(\"Is anonymous? %s\" % is_anonymous)\n            if is_anonymous and not is_valid_public_url:\n                if connection.c is not None:\n                    logger.debug(\"Closing anonymous connection\")\n                    connection.close(hard=False)\n                return None\n        return connection\n\n    def get_authenticated_connection(self, server_id, request):\n        \"\"\"\n        Prepares an authenticated Blitz connection wrapper (from\n        L{omero.gateway}) for use with a view function.\n        \"\"\"\n        # TODO: Handle previous try_super logic; is it still needed?\n\n        userip = get_client_ip(request)\n        session = request.session\n        request = request.GET\n        is_secure = settings.SECURE\n        logger.debug(\"Is SSL? %s\" % is_secure)\n        connector = session.get(\"connector\", None)\n        logger.debug(\"Connector: %s\" % connector)\n\n        if server_id is None:\n            # If no server id is passed, the db entry will not be used and\n            # instead we'll depend on the request.session and request.GET\n            # values\n            if connector is not None:\n                server_id = connector.server_id\n            else:\n                try:\n                    server_id = request[\"server\"]\n                except Exception:\n                    logger.debug(\"No Server ID available.\")\n                    return None\n\n        # If we have an OMERO session key in our request variables attempt\n        # to make a connection based on those credentials.\n        try:\n            omero_session_key = request[\"bsession\"]\n            connector = Connector(server_id, is_secure)\n        except KeyError:\n            # We do not have an OMERO session key in the current request.\n            pass\n        else:\n            # We have an OMERO session key in the current request use it\n            # to try join an existing connection / OMERO session.\n            logger.debug(\n                \"Have OMERO session key %s, attempting to join...\" % omero_session_key\n            )\n            connector.user_id = None\n            connector.omero_session_key = omero_session_key\n            connection = connector.join_connection(self.useragent, userip)\n            session[\"connector\"] = connector\n            return connection\n\n        # An OMERO session is not available, we're either trying to service\n        # a request to a login page or an anonymous request.\n        username = None\n        password = None\n        try:\n            username = request[\"username\"]\n            password = request[\"password\"]\n        except KeyError:\n            if connector is None:\n                logger.debug(\"No username or password in request, exiting.\")\n                # We do not have an OMERO session or a username and password\n                # in the current request and we do not have a valid connector.\n                # Raise an error (return None).\n                return None\n\n        if username is not None and password is not None:\n            # We have a username and password in the current request, or\n            # OMERO.webpublic is enabled and has provided us with a username\n            # and password via configureation. Use them to try and create a\n            # new connection / OMERO session.\n            logger.debug(\"Creating connection with username and password...\")\n            connector = Connector(server_id, is_secure)\n            connection = connector.create_connection(\n                self.useragent, username, password, userip=userip\n            )\n            session[\"connector\"] = connector\n            return connection\n\n        logger.debug(\"Django session connector: %r\" % connector)\n        if connector is not None:\n            # We have a connector, attempt to use it to join an existing\n            # connection / OMERO session.\n            connection = connector.join_connection(self.useragent, userip)\n            if connection is not None:\n                logger.debug(\"Connector valid, session successfully joined.\")\n                return connection\n            # Fall through, we the session we've been asked to join may\n            # be invalid and we may have other credentials as request\n            # variables.\n            logger.debug(\"Connector is no longer valid, destroying...\")\n            del session[\"connector\"]\n            return None\n\n        session[\"connector\"] = connector\n        return None\n\n    def __call__(ctx, f):\n        \"\"\"\n        Tries to prepare a logged in connection, then calls function and\n        returns the result.\n        \"\"\"\n\n        def wrapped(request, *args, **kwargs):\n            url = request.GET.get(\"url\")\n            if url is None or len(url) == 0:\n                url = request.get_full_path()\n\n            doConnectionCleanup = False\n\n            conn = kwargs.get(\"conn\", None)\n            error = None\n            server_id = kwargs.get(\"server_id\", None)\n            # Short circuit connection retrieval when a connection was\n            # provided to us via 'conn'. This is useful when in testing\n            # mode or when stacking view functions/methods.\n            if conn is None:\n                doConnectionCleanup = ctx.doConnectionCleanup\n                logger.debug(\"Connection not provided, attempting to get one.\")\n                try:\n                    conn = ctx.get_connection(server_id, request)\n                except Exception as x:\n                    logger.error(\"Error retrieving connection.\", exc_info=True)\n                    error = str(x)\n                else:\n                    # various configuration & checks only performed on new\n                    # 'conn'\n                    if conn is None:\n                        return ctx.on_not_logged_in(request, url, error)\n                    else:\n                        ctx.on_logged_in(request, conn)\n                    ctx.verify_is_admin(conn)\n                    ctx.verify_is_group_owner(conn, kwargs.get(\"gid\"))\n                    ctx.load_server_settings(conn, request)\n\n                    share_id = kwargs.get(\"share_id\")\n                    conn_share = ctx.prepare_share_connection(request, conn, share_id)\n                    if conn_share is not None:\n                        ctx.on_share_connection_prepared(request, conn_share)\n                        kwargs[\"conn\"] = conn_share\n                    else:\n                        kwargs[\"conn\"] = conn\n\n                    # kwargs['error'] = request.GET.get('error')\n                    kwargs[\"url\"] = url\n            retval = None\n            try:\n                retval = f(request, *args, **kwargs)\n            finally:\n                # If f() raised Exception, e.g. Http404() we must still cleanup\n                delayConnectionCleanup = isinstance(retval, ConnCleaningHttpResponse)\n                if doConnectionCleanup and delayConnectionCleanup:\n                    raise ApiUsageException(\n                        \"Methods that return a\"\n                        \" ConnCleaningHttpResponse must be marked with\"\n                        \" @login_required(doConnectionCleanup=False)\"\n                    )\n                doConnectionCleanup = not delayConnectionCleanup\n                logger.debug(\"Doing connection cleanup? %s\" % doConnectionCleanup)\n                try:\n                    if doConnectionCleanup:\n                        if conn is not None and conn.c is not None:\n                            conn.close(hard=False)\n                except Exception:\n                    logger.warn(\"Failed to clean up connection\", exc_info=True)\n            return retval\n\n        return update_wrapper(wrapped, f)\n\n\nclass render_response(object):\n    \"\"\"\n    This decorator handles the rendering of view methods to HttpResponse. It\n    expects that wrapped view methods return a dict. This allows:\n    - The template to be specified in the method arguments OR within the view\n      method itself\n    - The dict to be returned as json if required\n    - The request is passed to the template context, as required by some tags\n      etc\n    - A hook is provided for adding additional data to the context, from the\n      L{omero.gateway.BlitzGateway} or from the request.\n    \"\"\"\n\n    # To make django's method_decorator work, this is required until\n    # python/django sort out how argumented decorator wrapping should work\n    # https://github.com/openmicroscopy/openmicroscopy/pull/1820\n    def __getattr__(self, name):\n        if name == \"__name__\":\n            return self.__class__.__name__\n        else:\n            return super(render_response, self).getattr(name)\n\n    def prepare_context(self, request, context, *args, **kwargs):\n        \"\"\" Hook for adding additional data to the context dict \"\"\"\n        pass\n\n    def __call__(ctx, f):\n        \"\"\" Here we wrap the view method f and return the wrapped method \"\"\"\n\n        def wrapper(request, *args, **kwargs):\n            \"\"\"\n            Wrapper calls the view function, processes the result and returns\n            HttpResponse\"\"\"\n\n            # call the view function itself...\n            context = f(request, *args, **kwargs)\n\n            # if we happen to have a Response, return it\n            if isinstance(context, HttpResponseBase):\n                return context\n\n            # get template from view dict. Can be overridden from the **kwargs\n            template = \"template\" in context and context[\"template\"] or None\n            template = kwargs.get(\"template\", template)\n            logger.debug(\"Rendering template: %s\" % template)\n\n            # allows us to return the dict as json  (NB: BlitzGateway objects\n            # don't serialize)\n            if template is None or template == \"json\":\n                # We still need to support non-dict data:\n                safe = type(context) is dict\n                return JsonResponse(context, safe=safe)\n            else:\n                # allow additional processing of context dict\n                ctx.prepare_context(request, context, *args, **kwargs)\n                return render(request, template, context)\n\n        return update_wrapper(wrapper, f)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n# #                Django settings for OMERO.web project.               # #\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#\n#\n# Copyright (c) 2008-2016 University of Dundee.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n#\n# Version: 1.0\n#\n\n\nimport os.path\nimport sys\nimport logging\nimport omero\nimport omero.config\nimport omero.clients\nimport tempfile\nimport re\nimport json\nimport random\nimport string\nfrom builtins import str as text\n\nfrom omero_ext import portalocker\nfrom omero.util.concurrency import get_event\nfrom omeroweb.utils import sort_properties_to_tuple\nfrom omeroweb.connector import Server\n\nlogger = logging.getLogger(__name__)\n\n# LOGS\n# NEVER DEPLOY a site into production with DEBUG turned on.\n# Debuging mode.\n# A boolean that turns on/off debug mode.\n# handler404 and handler500 works only when False\nif \"OMERO_HOME\" in os.environ:\n    logger.warn(\"OMERO_HOME usage is ignored in OMERO.web\")\n\nOMERODIR = os.environ.get(\"OMERODIR\")\nif not OMERODIR:\n    raise Exception(\"ERROR: OMERODIR not set\")\n\n# Logging\nLOGDIR = os.path.join(OMERODIR, \"var\", \"log\").replace(\"\\\\\", \"/\")\n\nif not os.path.isdir(LOGDIR):\n    try:\n        os.makedirs(LOGDIR)\n    except Exception:\n        exctype, value = sys.exc_info()[:2]\n        raise exctype(value)\n\n# DEBUG: Never deploy a site into production with DEBUG turned on.\n# Logging levels: logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR\n# logging.CRITICAL\n# FORMAT: 2010-01-01 00:00:00,000 INFO  [omeroweb.webadmin.webadmin_utils]\n# (proc.1308 ) getGuestConnection:20 Open connection is not available\n\nSTANDARD_LOGFORMAT = (\n    \"%(asctime)s %(levelname)5.5s [%(name)40.40s]\"\n    \" (proc.%(process)5.5d) %(funcName)s():%(lineno)d %(message)s\"\n)\n\nFULL_REQUEST_LOGFORMAT = (\n    \"%(asctime)s %(levelname)5.5s [%(name)40.40s]\"\n    \" (proc.%(process)5.5d) %(funcName)s():%(lineno)d\"\n    \" HTTP %(status_code)d %(request)s\"\n)\n\nLOGGING_CLASS = \"omero_ext.cloghandler.ConcurrentRotatingFileHandler\"\nLOGSIZE = 500000000\n\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"standard\": {\"format\": STANDARD_LOGFORMAT},\n        \"full_request\": {\"format\": FULL_REQUEST_LOGFORMAT},\n    },\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        },\n        \"require_debug_true\": {\n            \"()\": \"django.utils.log.RequireDebugTrue\",\n        },\n    },\n    \"handlers\": {\n        \"default\": {\n            \"level\": \"DEBUG\",\n            \"class\": LOGGING_CLASS,\n            \"filename\": os.path.join(LOGDIR, \"OMEROweb.log\").replace(\"\\\\\", \"/\"),\n            \"maxBytes\": LOGSIZE,\n            \"backupCount\": 10,\n            \"formatter\": \"standard\",\n        },\n        \"request_handler\": {\n            \"level\": \"DEBUG\",\n            \"class\": LOGGING_CLASS,\n            \"filename\": os.path.join(LOGDIR, \"OMEROweb.log\").replace(\"\\\\\", \"/\"),\n            \"maxBytes\": LOGSIZE,\n            \"backupCount\": 10,\n            \"filters\": [\"require_debug_false\"],\n            \"formatter\": \"full_request\",\n        },\n        \"console\": {\n            \"level\": \"INFO\",\n            \"filters\": [\"require_debug_true\"],\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"standard\",\n        },\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        },\n    },\n    \"loggers\": {\n        \"django.request\": {  # Stop SQL debug from logging to main logger\n            \"handlers\": [\"default\", \"request_handler\", \"mail_admins\"],\n            \"level\": \"DEBUG\",\n            \"propagate\": False,\n        },\n        \"django\": {\"handlers\": [\"console\"], \"level\": \"DEBUG\", \"propagate\": True},\n        \"\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": True},\n    },\n}\n\n\nCONFIG_XML = os.path.join(OMERODIR, \"etc\", \"grid\", \"config.xml\")\ncount = 10\nevent = get_event(\"websettings\")\n\nwhile True:\n    try:\n        CUSTOM_SETTINGS = dict()\n        if os.path.exists(CONFIG_XML):\n            CONFIG_XML = omero.config.ConfigXml(CONFIG_XML, read_only=True)\n            CUSTOM_SETTINGS = CONFIG_XML.as_map()\n            CONFIG_XML.close()\n        break\n    except portalocker.LockException:\n        # logger.error(\"Exception while loading configuration retrying...\",\n        # exc_info=True)\n        exctype, value = sys.exc_info()[:2]\n        count -= 1\n        if not count:\n            raise exctype(value)\n        else:\n            event.wait(1)  # Wait a total of 10 seconds\n    except Exception:\n        # logger.error(\"Exception while loading configuration...\",\n        # exc_info=True)\n        exctype, value = sys.exc_info()[:2]\n        raise exctype(value)\n\ndel event\ndel count\ndel get_event\n\nWSGI = \"wsgi\"\nWSGITCP = \"wsgi-tcp\"\nWSGI_TYPES = (WSGI, WSGITCP)\nDEVELOPMENT = \"development\"\nDEFAULT_SERVER_TYPE = WSGITCP\nALL_SERVER_TYPES = (WSGI, WSGITCP, DEVELOPMENT)\n\nDEFAULT_SESSION_ENGINE = \"omeroweb.filesessionstore\"\nSESSION_ENGINE_VALUES = (\n    \"omeroweb.filesessionstore\",\n    \"django.contrib.sessions.backends.db\",\n    \"django.contrib.sessions.backends.file\",\n    \"django.contrib.sessions.backends.cache\",\n    \"django.contrib.sessions.backends.cached_db\",\n)\n\n\ndef parse_boolean(s):\n    s = s.strip().lower()\n    if s in (\"true\", \"1\", \"t\"):\n        return True\n    return False\n\n\ndef parse_paths(s):\n    return [os.path.normpath(path) for path in json.loads(s)]\n\n\ndef check_server_type(s):\n    if s not in ALL_SERVER_TYPES:\n        raise ValueError(\n            \"Unknown server type: %s. Valid values are: %s\" % (s, ALL_SERVER_TYPES)\n        )\n    return s\n\n\ndef check_session_engine(s):\n    if s not in SESSION_ENGINE_VALUES:\n        raise ValueError(\n            \"Unknown session engine: %s. Valid values are: %s\"\n            % (s, SESSION_ENGINE_VALUES)\n        )\n    return s\n\n\ndef identity(x):\n    return x\n\n\ndef str_slash(s):\n    if s is not None:\n        s = str(s)\n        if s and not s.endswith(\"/\"):\n            s += \"/\"\n    return s\n\n\nclass LeaveUnset(Exception):\n    pass\n\n\ndef leave_none_unset(s):\n    if s is None:\n        raise LeaveUnset()\n    return s\n\n\ndef leave_none_unset_int(s):\n    s = leave_none_unset(s)\n    if s is not None:\n        return int(s)\n\n\nCUSTOM_HOST = CUSTOM_SETTINGS.get(\"Ice.Default.Host\", \"localhost\")\nCUSTOM_HOST = CUSTOM_SETTINGS.get(\"omero.master.host\", CUSTOM_HOST)\n# DO NOT EDIT!\nINTERNAL_SETTINGS_MAPPING = {\n    \"omero.qa.feedback\": [\"FEEDBACK_URL\", \"http://qa.openmicroscopy.org.uk\", str, None],\n    \"omero.web.upgrades.url\": [\"UPGRADES_URL\", None, leave_none_unset, None],\n    \"omero.web.check_version\": [\"CHECK_VERSION\", \"true\", parse_boolean, None],\n    # Allowed hosts:\n    # https://docs.djangoproject.com/en/1.8/ref/settings/#allowed-hosts\n    \"omero.web.allowed_hosts\": [\"ALLOWED_HOSTS\", '[\"*\"]', json.loads, None],\n    # Do not show WARNING (1_8.W001): The standalone TEMPLATE_* settings\n    # were deprecated in Django 1.8 and the TEMPLATES dictionary takes\n    # precedence. You must put the values of the following settings\n    # into your default TEMPLATES dict:\n    # TEMPLATE_DIRS, TEMPLATE_CONTEXT_PROCESSORS.\n    \"omero.web.system_checks\": [\n        \"SILENCED_SYSTEM_CHECKS\",\n        '[\"1_8.W001\"]',\n        json.loads,\n        None,\n    ],\n    # Internal email notification for omero.web.admins,\n    # loaded from config.xml directly\n    \"omero.mail.from\": [\n        \"SERVER_EMAIL\",\n        None,\n        identity,\n        (\n            \"The email address that error messages come from, such as those\"\n            \" sent to :property:`omero.web.admins`.  Requires EMAIL properties\"\n            \" below.\"\n        ),\n    ],\n    \"omero.mail.host\": [\n        \"EMAIL_HOST\",\n        None,\n        identity,\n        \"The SMTP server host to use for sending email.\",\n    ],\n    \"omero.mail.password\": [\n        \"EMAIL_HOST_PASSWORD\",\n        None,\n        identity,\n        \"Password to use for the SMTP server.\",\n    ],\n    \"omero.mail.username\": [\n        \"EMAIL_HOST_USER\",\n        None,\n        identity,\n        \"Username to use for the SMTP server.\",\n    ],\n    \"omero.mail.port\": [\"EMAIL_PORT\", 25, identity, \"Port to use for the SMTP server.\"],\n    \"omero.web.admins.email_subject_prefix\": [\n        \"EMAIL_SUBJECT_PREFIX\",\n        \"[OMERO.web - admin notification]\",\n        str,\n        \"Subject-line prefix for email messages\",\n    ],\n    \"omero.mail.smtp.starttls.enable\": [\n        \"EMAIL_USE_TLS\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Whether to use a TLS (secure) connection when talking to the SMTP\"\n            \" server.\"\n        ),\n    ],\n}\n\nCUSTOM_SETTINGS_MAPPINGS = {\n    # Deployment configuration\n    \"omero.web.debug\": [\n        \"DEBUG\",\n        \"false\",\n        parse_boolean,\n        (\n            \"A boolean that turns on/off debug mode. \"\n            \"Use debug mode only in development, not in production, as it logs \"\n            \"sensitive and confidential information in plaintext.\"\n        ),\n    ],\n    \"omero.web.secret_key\": [\n        \"SECRET_KEY\",\n        None,\n        leave_none_unset,\n        (\"A boolean that sets SECRET_KEY for a particular Django \" \"installation.\"),\n    ],\n    \"omero.web.admins\": [\n        \"ADMINS\",\n        \"[]\",\n        json.loads,\n        (\n            \"A list of people who get code error notifications whenever the \"\n            \"application identifies a broken link or raises an unhandled \"\n            \"exception that results in an internal server error. This gives \"\n            \"the administrators immediate notification of any errors, \"\n            \"see :doc:`/sysadmins/mail`. \"\n            'Example:``\\'[[\"Full Name\", \"email address\"]]\\'``.'\n        ),\n    ],\n    \"omero.web.application_server\": [\n        \"APPLICATION_SERVER\",\n        DEFAULT_SERVER_TYPE,\n        check_server_type,\n        (\n            \"OMERO.web is configured to run in Gunicorn as a generic WSGI (TCP)\"\n            \"application by default. Available options: ``wsgi-tcp`` \"\n            \"(Gunicorn, default), ``wsgi`` (Advanced users only, e.g. manual \"\n            \"Apache configuration with ``mod_wsgi``).\"\n        ),\n    ],\n    \"omero.web.application_server.host\": [\n        \"APPLICATION_SERVER_HOST\",\n        \"127.0.0.1\",\n        str,\n        \"The front-end webserver e.g. NGINX can be set up to run on a \"\n        \"different host from OMERO.web. The property ensures that OMERO.web \"\n        \"is accessible on an external IP. It requires copying all the \"\n        \"OMERO.web static files to the separate NGINX server.\",\n    ],\n    \"omero.web.application_server.port\": [\n        \"APPLICATION_SERVER_PORT\",\n        4080,\n        int,\n        \"Upstream application port\",\n    ],\n    \"omero.web.application_server.max_requests\": [\n        \"APPLICATION_SERVER_MAX_REQUESTS\",\n        0,\n        int,\n        (\"The maximum number of requests a worker will process before \" \"restarting.\"),\n    ],\n    \"omero.web.middleware\": [\n        \"MIDDLEWARE_CLASSES_LIST\",\n        (\n            \"[\"\n            '{\"index\": 1, '\n            '\"class\": \"django.middleware.common.BrokenLinkEmailsMiddleware\"},'\n            '{\"index\": 2, '\n            '\"class\": \"django.middleware.common.CommonMiddleware\"},'\n            '{\"index\": 3, '\n            '\"class\": \"django.contrib.sessions.middleware.SessionMiddleware\"},'\n            '{\"index\": 4, '\n            '\"class\": \"django.middleware.csrf.CsrfViewMiddleware\"},'\n            '{\"index\": 5, '\n            '\"class\": \"django.contrib.messages.middleware.MessageMiddleware\"},'\n            '{\"index\": 6, '\n            '\"class\": \"django.middleware.clickjacking.XFrameOptionsMiddleware\"}'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Warning: Only system administrators should use this feature. \"\n            \"List of Django middleware classes in the form \"\n            '[{\"class\": \"class.name\", \"index\": FLOAT}]. '\n            \"See :djangodoc:`Django middleware <topics/http/middleware/>`.\"\n            \" Classes will be ordered by increasing index\"\n        ),\n    ],\n    \"omero.web.prefix\": [\n        \"FORCE_SCRIPT_NAME\",\n        None,\n        leave_none_unset,\n        (\n            \"Used as the value of the SCRIPT_NAME environment variable in any\"\n            \" HTTP request.\"\n        ),\n    ],\n    \"omero.web.use_x_forwarded_host\": [\n        \"USE_X_FORWARDED_HOST\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Specifies whether to use the X-Forwarded-Host header in preference \"\n            \"to the Host header. This should only be enabled if a proxy which \"\n            \"sets this header is in use.\"\n        ),\n    ],\n    \"omero.web.static_url\": [\n        \"STATIC_URL\",\n        \"/static/\",\n        str_slash,\n        (\n            \"URL to use when referring to static files. Example: ``'/static/'``\"\n            \" or ``'http://static.example.com/'``. Used as the base path for\"\n            \" asset  definitions (the Media class) and the staticfiles app. It\"\n            \" must end in a slash if set to a non-empty value.\"\n        ),\n    ],\n    \"omero.web.static_root\": [\n        \"STATIC_ROOT\",\n        os.path.join(OMERODIR, \"var\", \"static\"),\n        os.path.normpath,\n        (\n            \"The absolute path to the directory where collectstatic will\"\n            \" collect static files for deployment. If the staticfiles contrib\"\n            \" app is enabled (default) the collectstatic management command\"\n            \" will collect static files into this directory.\"\n        ),\n    ],\n    \"omero.web.session_engine\": [\n        \"SESSION_ENGINE\",\n        DEFAULT_SESSION_ENGINE,\n        check_session_engine,\n        (\n            \"Controls where Django stores session data. See :djangodoc:\"\n            \"`Configuring the session engine for more details <ref/settings\"\n            \"/#session-engine>`.\"\n        ),\n    ],\n    \"omero.web.session_expire_at_browser_close\": [\n        \"SESSION_EXPIRE_AT_BROWSER_CLOSE\",\n        \"true\",\n        parse_boolean,\n        (\n            \"A boolean that determines whether to expire the session when the \"\n            \"user closes their browser. See :djangodoc:`Django Browser-length \"\n            \"sessions vs. persistent sessions documentation <topics/http/\"\n            \"sessions/#browser-length-vs-persistent-sessions>` for more \"\n            \"details.\"\n        ),\n    ],\n    \"omero.web.caches\": [\n        \"CACHES\",\n        ('{\"default\": {\"BACKEND\":' ' \"django.core.cache.backends.dummy.DummyCache\"}}'),\n        json.loads,\n        (\n            \"OMERO.web offers alternative session backends to automatically\"\n            \" delete stale data using the cache session store backend, see \"\n            \":djangodoc:`Django cached session documentation <topics/http/\"\n            \"sessions/#using-cached-sessions>` for more details.\"\n        ),\n    ],\n    \"omero.web.secure\": [\n        \"SECURE\",\n        \"false\",\n        parse_boolean,\n        (\"Force all backend OMERO.server connections to use SSL.\"),\n    ],\n    \"omero.web.session_cookie_age\": [\n        \"SESSION_COOKIE_AGE\",\n        86400,\n        int,\n        \"The age of session cookies, in seconds.\",\n    ],\n    \"omero.web.session_cookie_domain\": [\n        \"SESSION_COOKIE_DOMAIN\",\n        None,\n        leave_none_unset,\n        \"The domain to use for session cookies\",\n    ],\n    \"omero.web.session_cookie_name\": [\n        \"SESSION_COOKIE_NAME\",\n        None,\n        leave_none_unset,\n        \"The name to use for session cookies\",\n    ],\n    \"omero.web.session_cookie_secure\": [\n        \"SESSION_COOKIE_SECURE\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Restrict session cookies to HTTPS only, you are strongly \"\n            \"recommended to set this to ``true`` in production.\"\n        ),\n    ],\n    \"omero.web.csrf_cookie_secure\": [\n        \"CSRF_COOKIE_SECURE\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Restrict CSRF cookies to HTTPS only, you are strongly \"\n            \"recommended to set this to ``true`` in production.\"\n        ),\n    ],\n    \"omero.web.csrf_cookie_httponly\": [\n        \"CSRF_COOKIE_HTTPONLY\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Prevent CSRF cookie from being accessed in JavaScript. \"\n            \"Currently disabled as it breaks background JavaScript POSTs in \"\n            \"OMERO.web.\"\n        ),\n    ],\n    \"omero.web.logdir\": [\"LOGDIR\", LOGDIR, str, \"A path to the custom log directory.\"],\n    \"omero.web.secure_proxy_ssl_header\": [\n        \"SECURE_PROXY_SSL_HEADER\",\n        \"[]\",\n        json.loads,\n        (\n            \"A tuple representing a HTTP header/value combination that \"\n            \"signifies a request is secure. Example \"\n            '``\\'[\"HTTP_X_FORWARDED_PROTO_OMERO_WEB\", \"https\"]\\'``. '\n            \"For more details see :djangodoc:`secure proxy ssl header <ref/\"\n            \"settings/#secure-proxy-ssl-header>`.\"\n        ),\n    ],\n    \"omero.web.wsgi_args\": [\n        \"WSGI_ARGS\",\n        None,\n        leave_none_unset,\n        (\n            \"A string representing Gunicorn additional arguments. \"\n            \"Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/latest/settings.html\"\n        ),\n    ],\n    \"omero.web.wsgi_workers\": [\n        \"WSGI_WORKERS\",\n        5,\n        int,\n        (\n            \"The number of worker processes for handling requests. \"\n            \"Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#workers\"\n        ),\n    ],\n    \"omero.web.wsgi_timeout\": [\n        \"WSGI_TIMEOUT\",\n        60,\n        int,\n        (\n            \"Workers silent for more than this many seconds are killed \"\n            \"and restarted. Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#timeout\"\n        ),\n    ],\n    # Public user\n    \"omero.web.public.enabled\": [\n        \"PUBLIC_ENABLED\",\n        \"false\",\n        parse_boolean,\n        \"Enable and disable the OMERO.web public user functionality.\",\n    ],\n    \"omero.web.public.url_filter\": [\n        \"PUBLIC_URL_FILTER\",\n        r\"(?#This regular expression matches nothing)a^\",\n        re.compile,\n        (\n            \"Set a regular expression that matches URLs the public user is \"\n            \"allowed to access. If this is not set, no URLs will be \"\n            \"publicly available.\"\n        ),\n    ],\n    \"omero.web.public.get_only\": [\n        \"PUBLIC_GET_ONLY\",\n        \"true\",\n        parse_boolean,\n        \"Restrict public users to GET requests only\",\n    ],\n    \"omero.web.public.server_id\": [\n        \"PUBLIC_SERVER_ID\",\n        1,\n        int,\n        \"Server to authenticate against.\",\n    ],\n    \"omero.web.public.user\": [\n        \"PUBLIC_USER\",\n        None,\n        leave_none_unset,\n        \"Username to use during authentication.\",\n    ],\n    \"omero.web.public.password\": [\n        \"PUBLIC_PASSWORD\",\n        None,\n        leave_none_unset,\n        \"Password to use during authentication.\",\n    ],\n    \"omero.web.public.cache.enabled\": [\n        \"PUBLIC_CACHE_ENABLED\",\n        \"false\",\n        parse_boolean,\n        None,\n    ],\n    \"omero.web.public.cache.key\": [\n        \"PUBLIC_CACHE_KEY\",\n        \"omero.web.public.cache.key\",\n        str,\n        None,\n    ],\n    \"omero.web.public.cache.timeout\": [\"PUBLIC_CACHE_TIMEOUT\", 60 * 60 * 24, int, None],\n    # Social media integration\n    \"omero.web.sharing.twitter\": [\n        \"SHARING_TWITTER\",\n        \"{}\",\n        json.loads,\n        (\n            \"Dictionary of `server-name: @twitter-site-username`, where \"\n            \"server-name matches a name from `omero.web.server_list`. \"\n            'For example: ``\\'{\"omero\": \"@openmicroscopy\"}\\'``'\n        ),\n    ],\n    \"omero.web.sharing.opengraph\": [\n        \"SHARING_OPENGRAPH\",\n        \"{}\",\n        json.loads,\n        (\n            \"Dictionary of `server-name: site-name`, where \"\n            \"server-name matches a name from `omero.web.server_list`. \"\n            'For example: ``\\'{\"omero\": \"Open Microscopy\"}\\'``'\n        ),\n    ],\n    # Application configuration\n    \"omero.web.server_list\": [\n        \"SERVER_LIST\",\n        '[[\"%s\", 4064, \"omero\"]]' % CUSTOM_HOST,\n        json.loads,\n        \"A list of servers the Web client can connect to.\",\n    ],\n    \"omero.web.ping_interval\": [\n        \"PING_INTERVAL\",\n        60000,\n        int,\n        \"Timeout interval between ping invocations in seconds\",\n    ],\n    \"omero.web.chunk_size\": [\n        \"CHUNK_SIZE\",\n        1048576,\n        int,\n        \"Size, in bytes, of the \u201cchunk\u201d\",\n    ],\n    \"omero.web.webgateway_cache\": [\"WEBGATEWAY_CACHE\", None, leave_none_unset, None],\n    \"omero.web.maximum_multifile_download_size\": [\n        \"MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\",\n        1024 ** 3,\n        int,\n        \"Prevent multiple files with total aggregate size greater than this \"\n        \"value in bytes from being downloaded as a zip archive.\",\n    ],\n    # VIEWER\n    \"omero.web.viewer.view\": [\n        \"VIEWER_VIEW\",\n        \"omeroweb.webclient.views.image_viewer\",\n        str,\n        (\n            \"Django view which handles display of, or redirection to, the \"\n            \"desired full image viewer.\"\n        ),\n    ],\n    # OPEN WITH\n    \"omero.web.open_with\": [\n        \"OPEN_WITH\",\n        (\n            '[[\"Image viewer\", \"webgateway\", {\"supported_objects\": [\"image\"],'\n            '\"script_url\": \"webclient/javascript/ome.openwith_viewer.js\"}]]'\n        ),\n        json.loads,\n        (\n            \"A list of viewers that can be used to display selected Images \"\n            \"or other objects. Each viewer is defined as \"\n            '``[\"Name\", \"url\", options]``. Url is reverse(url). '\n            \"Selected objects are added to the url as ?image=:1&image=2\"\n            \"Objects supported must be specified in options with \"\n            'e.g. ``{\"supported_objects\":[\"images\"]}`` '\n            \"to enable viewer for one or more images.\"\n        ),\n    ],\n    # PIPELINE 1.3.20\n    # Pipeline is an asset packaging library for Django, providing both CSS\n    # and JavaScript concatenation and compression, built-in JavaScript\n    # template support, and optional data-URI image and font embedding.\n    \"omero.web.pipeline_js_compressor\": [\n        \"PIPELINE_JS_COMPRESSOR\",\n        None,\n        identity,\n        (\n            \"Compressor class to be applied to JavaScript files. If empty or \"\n            \"None, JavaScript files won't be compressed.\"\n        ),\n    ],\n    \"omero.web.pipeline_css_compressor\": [\n        \"PIPELINE_CSS_COMPRESSOR\",\n        None,\n        identity,\n        (\n            \"Compressor class to be applied to CSS files. If empty or None,\"\n            \" CSS files won't be compressed.\"\n        ),\n    ],\n    \"omero.web.pipeline_staticfile_storage\": [\n        \"STATICFILES_STORAGE\",\n        \"pipeline.storage.PipelineStorage\",\n        str,\n        (\n            \"The file storage engine to use when collecting static files with\"\n            \" the collectstatic management command. See `the documentation \"\n            \"<https://django-pipeline.readthedocs.org/en/latest/storages.html>`_\"\n            \" for more details.\"\n        ),\n    ],\n    # Customisation\n    \"omero.web.login_logo\": [\n        \"LOGIN_LOGO\",\n        None,\n        leave_none_unset,\n        (\n            \"Customize webclient login page with your own logo. Logo images \"\n            \"should ideally be 150 pixels high or less and will appear above \"\n            \"the OMERO logo. You will need to host the image somewhere else \"\n            \"and link to it with the OMERO logo.\"\n        ),\n    ],\n    \"omero.web.login_view\": [\n        \"LOGIN_VIEW\",\n        \"weblogin\",\n        str,\n        (\n            \"The Django view name used for login. Use this to provide an \"\n            \"alternative login workflow.\"\n        ),\n    ],\n    \"omero.web.login_incorrect_credentials_text\": [\n        \"LOGIN_INCORRECT_CREDENTIALS_TEXT\",\n        \"Connection not available, please check your user name and password.\",\n        str,\n        (\n            \"The error message shown to users who enter an incorrect username \"\n            \"or password.\"\n        ),\n    ],\n    \"omero.web.top_logo\": [\n        \"TOP_LOGO\",\n        \"\",\n        str,\n        (\n            \"Customize the webclient top bar logo. The recommended image height \"\n            \"is 23 pixels and it must be hosted outside of OMERO.web.\"\n        ),\n    ],\n    \"omero.web.top_logo_link\": [\n        \"TOP_LOGO_LINK\",\n        \"\",\n        str,\n        (\"The target location of the webclient top logo, default unlinked.\"),\n    ],\n    \"omero.web.user_dropdown\": [\n        \"USER_DROPDOWN\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Whether or not to include a user dropdown in the base template.\"\n            \" Particularly useful when used in combination with the OMERO.web\"\n            \" public user where logging in may not make sense.\"\n        ),\n    ],\n    \"omero.web.feedback.comment.enabled\": [\n        \"FEEDBACK_COMMENT_ENABLED\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Enable the feedback form for comments. \"\n            \"These comments are sent to the URL in ``omero.qa.feedback`` \"\n            \"(OME team by default).\"\n        ),\n    ],\n    \"omero.web.feedback.error.enabled\": [\n        \"FEEDBACK_ERROR_ENABLED\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Enable the feedback form for errors. \"\n            \"These errors are sent to the URL in ``omero.qa.feedback`` \"\n            \"(OME team by default).\"\n        ),\n    ],\n    \"omero.web.staticfile_dirs\": [\n        \"STATICFILES_DIRS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Defines the additional locations the staticfiles app will traverse\"\n            \" if the FileSystemFinder finder is enabled, e.g. if you use the\"\n            \" collectstatic or findstatic management command or use the static\"\n            \" file serving view.\"\n        ),\n    ],\n    \"omero.web.template_dirs\": [\n        \"TEMPLATE_DIRS\",\n        \"[]\",\n        json.loads,\n        (\n            \"List of locations of the template source files, in search order. \"\n            \"Note that these paths should use Unix-style forward slashes.\"\n        ),\n    ],\n    \"omero.web.index_template\": [\n        \"INDEX_TEMPLATE\",\n        None,\n        identity,\n        (\n            \"Define template used as an index page ``http://your_host/omero/``.\"\n            \"If None user is automatically redirected to the login page.\"\n            \"For example use 'webclient/index.html'. \"\n        ),\n    ],\n    \"omero.web.base_include_template\": [\n        \"BASE_INCLUDE_TEMPLATE\",\n        None,\n        identity,\n        (\"Template to be included in every page, at the end of the <body>\"),\n    ],\n    \"omero.web.login_redirect\": [\n        \"LOGIN_REDIRECT\",\n        \"{}\",\n        json.loads,\n        (\n            \"Redirect to the given location after logging in. It only supports \"\n            \"arguments for :djangodoc:`Django reverse function\"\n            \" <ref/urlresolvers/#reverse>`. \"\n            'For example: ``\\'{\"redirect\": [\"webindex\"], \"viewname\":'\n            ' \"load_template\", \"args\":[\"userdata\"], \"query_string\":'\n            ' {\"experimenter\": -1}}\\'``'\n        ),\n    ],\n    \"omero.web.login.show_client_downloads\": [\n        \"SHOW_CLIENT_DOWNLOADS\",\n        \"true\",\n        parse_boolean,\n        (\"Whether to link to official client downloads on the login page\"),\n    ],\n    \"omero.web.login.client_downloads_base\": [\n        \"CLIENT_DOWNLOAD_GITHUB_REPO\",\n        \"ome/omero-insight\",\n        str,\n        (\"GitHub repository containing the Desktop client downloads\"),\n    ],\n    \"omero.web.apps\": [\n        \"ADDITIONAL_APPS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Add additional Django applications. For example, see\"\n            \" :doc:`/developers/Web/CreateApp`\"\n        ),\n    ],\n    \"omero.web.root_application\": [\n        \"OMEROWEB_ROOT_APPLICATION\",\n        \"\",\n        str,\n        (\n            \"Override the root application label that handles ``/``. \"\n            \"**Warning** you must ensure the application's URLs do not conflict \"\n            \"with other applications. \"\n            \"omero-gallery is an example of an application that can be used for \"\n            \"this (set to ``gallery``)\"\n        ),\n    ],\n    \"omero.web.databases\": [\"DATABASES\", \"{}\", json.loads, None],\n    \"omero.web.page_size\": [\n        \"PAGE\",\n        200,\n        int,\n        (\n            \"Number of images displayed within a dataset or 'orphaned'\"\n            \" container to prevent from loading them all at once.\"\n        ),\n    ],\n    \"omero.web.thumbnails_batch\": [\n        \"THUMBNAILS_BATCH\",\n        50,\n        int,\n        (\n            \"Number of thumbnails retrieved to prevent from loading them\"\n            \" all at once. Make sure the size is not too big, otherwise\"\n            \" you may exceed limit request line, see\"\n            \" https://docs.gunicorn.org/en/latest/settings.html\"\n            \"?highlight=limit_request_line\"\n        ),\n    ],\n    \"omero.web.ui.top_links\": [\n        \"TOP_LINKS\",\n        (\n            \"[\"\n            '[\"Data\", \"webindex\", {\"title\": \"Browse Data via Projects, Tags'\n            ' etc\"}],'\n            '[\"History\", \"history\", {\"title\": \"History\"}],'\n            '[\"Help\", \"https://help.openmicroscopy.org/\",'\n            '{\"title\":\"Open OMERO user guide in a new tab\", \"target\":\"new\"}]'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Add links to the top header: links are ``['Link Text', \"\n            \"'link|lookup_view', options]``, where the url is reverse('link'), \"\n            \"simply 'link' (for external urls) or lookup_view is a detailed \"\n            'dictionary {\"viewname\": \"str\", \"args\": [], \"query_string\": '\n            '{\"param\": \"value\" }], '\n            'E.g. ``\\'[\"Webtest\", \"webtest_index\"] or [\"Homepage\",'\n            ' \"http://...\", {\"title\": \"Homepage\", \"target\": \"new\"}'\n            ' ] or [\"Repository\", {\"viewname\": \"webindex\", '\n            '\"query_string\": {\"experimenter\": -1}}, '\n            '{\"title\": \"Repo\"}]\\'``'\n        ),\n    ],\n    \"omero.web.ui.metadata_panes\": [\n        \"METADATA_PANES\",\n        (\n            \"[\"\n            '{\"name\": \"tag\", \"label\": \"Tags\", \"index\": 1},'\n            '{\"name\": \"map\", \"label\": \"Key-Value Pairs\", \"index\": 2},'\n            '{\"name\": \"table\", \"label\": \"Tables\", \"index\": 3},'\n            '{\"name\": \"file\", \"label\": \"Attachments\", \"index\": 4},'\n            '{\"name\": \"comment\", \"label\": \"Comments\", \"index\": 5},'\n            '{\"name\": \"rating\", \"label\": \"Ratings\", \"index\": 6},'\n            '{\"name\": \"other\", \"label\": \"Others\", \"index\": 7}'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Manage Metadata pane accordion. This functionality is limited to\"\n            \" the existing sections.\"\n        ),\n    ],\n    \"omero.web.ui.right_plugins\": [\n        \"RIGHT_PLUGINS\",\n        (\n            '[[\"Acquisition\",'\n            ' \"webclient/data/includes/right_plugin.acquisition.js.html\",'\n            ' \"metadata_tab\"],'\n            # '[\"ROIs\", \"webtest/webclient_plugins/right_plugin.rois.js.html\",\n            # \"image_roi_tab\"],'\n            '[\"Preview\", \"webclient/data/includes/right_plugin.preview.js.html\"'\n            ', \"preview_tab\"]]'\n        ),\n        json.loads,\n        (\n            \"Add plugins to the right-hand panel. \"\n            \"Plugins are ``['Label', 'include.js', 'div_id']``. \"\n            \"The javascript loads data into ``$('#div_id')``.\"\n        ),\n    ],\n    \"omero.web.ui.center_plugins\": [\n        \"CENTER_PLUGINS\",\n        (\n            \"[\"\n            # '[\"Split View\",\n            # \"webtest/webclient_plugins/center_plugin.splitview.js.html\",\n            # \"split_view_panel\"],'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Add plugins to the center panels. Plugins are \"\n            \"``['Channel overlay',\"\n            \" 'webtest/webclient_plugins/center_plugin.overlay.js.html',\"\n            \" 'channel_overlay_panel']``. \"\n            \"The javascript loads data into ``$('#div_id')``.\"\n        ),\n    ],\n    # CORS\n    \"omero.web.cors_origin_whitelist\": [\n        \"CORS_ORIGIN_WHITELIST\",\n        \"[]\",\n        json.loads,\n        (\n            \"A list of origin hostnames that are authorized to make cross-site \"\n            \"HTTP requests. \"\n            \"Used by the django-cors-headers app as described at \"\n            \"https://github.com/ottoyiu/django-cors-headers\"\n        ),\n    ],\n    \"omero.web.cors_origin_allow_all\": [\n        \"CORS_ORIGIN_ALLOW_ALL\",\n        \"false\",\n        parse_boolean,\n        (\n            \"If True, cors_origin_whitelist will not be used and all origins \"\n            \"will be authorized to make cross-site HTTP requests.\"\n        ),\n    ],\n    \"omero.web.x_frame_options\": [\n        \"X_FRAME_OPTIONS\",\n        \"SAMEORIGIN\",\n        str,\n        \"Whether to allow OMERO.web to be loaded in a frame.\",\n    ],\n    \"omero.web.django_additional_settings\": [\n        \"DJANGO_ADDITIONAL_SETTINGS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Additional Django settings as list of key-value tuples. \"\n            \"Use this to set or override Django settings that aren't managed by \"\n            'OMERO.web. E.g. ``[\"CUSTOM_KEY\", \"CUSTOM_VALUE\"]``'\n        ),\n    ],\n    \"omero.web.nginx_server_extra_config\": [\n        \"NGINX_SERVER_EXTRA_CONFIG\",\n        \"[]\",\n        json.loads,\n        (\n            \"Extra configuration lines to add to the Nginx server block. \"\n            \"Lines will be joined with \\\\n. \"\n            \"Remember to terminate lines with; when necessary.\"\n        ),\n    ],\n}\n\nDEPRECATED_SETTINGS_MAPPINGS = {\n    # Deprecated settings, description should indicate the replacement.\n    \"omero.web.force_script_name\": [\n        \"FORCE_SCRIPT_NAME\",\n        None,\n        leave_none_unset,\n        (\"Use omero.web.prefix instead.\"),\n    ],\n    \"omero.web.server_email\": [\n        \"SERVER_EMAIL\",\n        None,\n        identity,\n        (\"Use omero.mail.from instead.\"),\n    ],\n    \"omero.web.email_host\": [\n        \"EMAIL_HOST\",\n        None,\n        identity,\n        (\"Use omero.mail.host instead.\"),\n    ],\n    \"omero.web.email_host_password\": [\n        \"EMAIL_HOST_PASSWORD\",\n        None,\n        identity,\n        (\"Use omero.mail.password instead.\"),\n    ],\n    \"omero.web.email_host_user\": [\n        \"EMAIL_HOST_USER\",\n        None,\n        identity,\n        (\"Use omero.mail.username instead.\"),\n    ],\n    \"omero.web.email_port\": [\n        \"EMAIL_PORT\",\n        None,\n        identity,\n        (\"Use omero.mail.port instead.\"),\n    ],\n    \"omero.web.email_subject_prefix\": [\n        \"EMAIL_SUBJECT_PREFIX\",\n        \"[OMERO.web]\",\n        str,\n        (\"Default email subject is no longer configurable.\"),\n    ],\n    \"omero.web.email_use_tls\": [\n        \"EMAIL_USE_TLS\",\n        \"false\",\n        parse_boolean,\n        (\"Use omero.mail.smtp.* instead to set up\" \" javax.mail.Session properties.\"),\n    ],\n    \"omero.web.plate_download.enabled\": [\n        \"PLATE_DOWNLOAD_ENABLED\",\n        \"false\",\n        parse_boolean,\n        (\"Use omero.policy.binary_access instead to restrict download.\"),\n    ],\n    \"omero.web.viewer.initial_zoom_level\": [\n        \"VIEWER_INITIAL_ZOOM_LEVEL\",\n        None,\n        leave_none_unset_int,\n        (\"Use omero.client.viewer.initial_zoom_level instead.\"),\n    ],\n    \"omero.web.send_broken_link_emails\": [\n        \"SEND_BROKEN_LINK_EMAILS\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Replaced by django.middleware.common.BrokenLinkEmailsMiddleware.\"\n            \"To get notification set :property:`omero.web.admins` property.\"\n        ),\n    ],\n}\n\ndel CUSTOM_HOST\n\n\ndef check_worker_class(c):\n    if c == \"gevent\":\n        try:\n            import gevent  # NOQA\n        except ImportError:\n            raise ImportError(\n                \"You are using async workers based \"\n                \"on Greenlets via Gevent. Install gevent\"\n            )\n    return str(c)\n\n\ndef check_threading(t):\n    if t > 1:\n        try:\n            import concurrent.futures  # NOQA\n        except ImportError:\n            raise ImportError(\n                \"You are using sync workers with \" \"multiple threads. Install futures\"\n            )\n    return int(t)\n\n\n# DEVELOPMENT_SETTINGS_MAPPINGS - WARNING: For each setting developer MUST open\n# a ticket that needs to be resolved before a release either by moving the\n# setting to CUSTOM_SETTINGS_MAPPINGS or by removing the setting at all.\nDEVELOPMENT_SETTINGS_MAPPINGS = {\n    \"omero.web.wsgi_worker_class\": [\n        \"WSGI_WORKER_CLASS\",\n        \"sync\",\n        check_worker_class,\n        (\n            \"The default OMERO.web uses sync workers to handle most \u201cnormal\u201d \"\n            \"types of workloads. Check Gunicorn Design Documentation \"\n            \"https://docs.gunicorn.org/en/stable/design.html\"\n        ),\n    ],\n    \"omero.web.wsgi_worker_connections\": [\n        \"WSGI_WORKER_CONNECTIONS\",\n        1000,\n        int,\n        (\n            \"(ASYNC WORKERS only) The maximum number of simultaneous clients. \"\n            \"Check Gunicorn Documentation https://docs.gunicorn.org\"\n            \"/en/stable/settings.html#worker-connections\"\n        ),\n    ],\n    \"omero.web.wsgi_threads\": [\n        \"WSGI_THREADS\",\n        1,\n        check_threading,\n        (\n            \"(SYNC WORKERS only) The number of worker threads for handling \"\n            \"requests. Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#threads\"\n        ),\n    ],\n}\n\n\ndef map_deprecated_settings(settings):\n    m = {}\n    for key, values in settings.items():\n        try:\n            global_name = values[0]\n            m[global_name] = (CUSTOM_SETTINGS[key], key)\n            if len(values) < 5:\n                # Not using default (see process_custom_settings)\n                values.append(False)\n        except KeyError:\n            if len(values) < 5:\n                values.append(True)\n    return m\n\n\ndef process_custom_settings(\n    module, settings=\"CUSTOM_SETTINGS_MAPPINGS\", deprecated=None\n):\n    logging.info(\"Processing custom settings for module %s\" % module.__name__)\n\n    if deprecated:\n        deprecated_map = map_deprecated_settings(getattr(module, deprecated, {}))\n    else:\n        deprecated_map = {}\n\n    for key, values in getattr(module, settings, {}).items():\n        # Django may import settings.py more than once, see:\n        # http://blog.dscpl.com.au/2010/03/improved-wsgi-script-for-use-with.html\n        # In that case, the custom settings have already been processed.\n        if len(values) == 5:\n            continue\n\n        global_name, default_value, mapping, description = values\n\n        try:\n            global_value = CUSTOM_SETTINGS[key]\n            values.append(False)\n        except KeyError:\n            global_value = default_value\n            values.append(True)\n\n        try:\n            using_default = values[-1]\n            if global_name in deprecated_map:\n                dep_value, dep_key = deprecated_map[global_name]\n                if using_default:\n                    logging.warning(\"Setting %s is deprecated, use %s\", dep_key, key)\n                    global_value = dep_value\n                else:\n                    logging.error(\n                        \"%s and its deprecated key %s are both set, using %s\",\n                        key,\n                        dep_key,\n                        key,\n                    )\n            setattr(module, global_name, mapping(global_value))\n        except ValueError as e:\n            raise ValueError(\n                \"Invalid %s (%s = %r). %s. %s\"\n                % (global_name, key, global_value, e.args[0], description)\n            )\n        except ImportError as e:\n            raise ImportError(\n                \"ImportError: %s. %s (%s = %r).\\n%s\"\n                % (e.message, global_name, key, global_value, description)\n            )\n        except LeaveUnset:\n            pass\n\n\nprocess_custom_settings(sys.modules[__name__], \"INTERNAL_SETTINGS_MAPPING\")\nprocess_custom_settings(\n    sys.modules[__name__], \"CUSTOM_SETTINGS_MAPPINGS\", \"DEPRECATED_SETTINGS_MAPPINGS\"\n)\nprocess_custom_settings(sys.modules[__name__], \"DEVELOPMENT_SETTINGS_MAPPINGS\")\n\nif not DEBUG:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n    LOGGING[\"loggers\"][\"django.request\"][\"level\"] = \"INFO\"\n    LOGGING[\"loggers\"][\"django\"][\"level\"] = \"INFO\"\n    LOGGING[\"loggers\"][\"\"][\"level\"] = \"INFO\"\n\n\ndef report_settings(module):\n    from django.views.debug import cleanse_setting\n\n    custom_settings_mappings = getattr(module, \"CUSTOM_SETTINGS_MAPPINGS\", {})\n    for key in sorted(custom_settings_mappings):\n        values = custom_settings_mappings[key]\n        global_name, default_value, mapping, description, using_default = values\n        source = using_default and \"default\" or key\n        global_value = getattr(module, global_name, None)\n        if global_name.isupper():\n            logger.debug(\n                \"%s = %r (source:%s)\",\n                global_name,\n                cleanse_setting(global_name, global_value),\n                source,\n            )\n\n    deprecated_settings = getattr(module, \"DEPRECATED_SETTINGS_MAPPINGS\", {})\n    for key in sorted(deprecated_settings):\n        values = deprecated_settings[key]\n        global_name, default_value, mapping, description, using_default = values\n        global_value = getattr(module, global_name, None)\n        if global_name.isupper() and not using_default:\n            logger.debug(\n                \"%s = %r (deprecated:%s, %s)\",\n                global_name,\n                cleanse_setting(global_name, global_value),\n                key,\n                description,\n            )\n\n\nreport_settings(sys.modules[__name__])\n\nSITE_ID = 1\n\n# Local time zone for this installation. Choices can be found here:\n# http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE\n# although not all variations may be possible on all operating systems.\nTIME_ZONE = \"Europe/London\"\nFIRST_DAY_OF_WEEK = 0  # 0-Monday, ... 6-Sunday\n\n# LANGUAGE_CODE: A string representing the language code for this\n# installation. This should be in standard language format. For example, U.S.\n# English is \"en-us\".\nLANGUAGE_CODE = \"en-gb\"\n\n# SECRET_KEY: A secret key for this particular Django installation. Used to\n# provide a seed in secret-key hashing algorithms. Set this to a random string,\n# the longer, the better. Make this unique, and don't share it with anybody.\ntry:\n    SECRET_KEY\nexcept NameError:\n    secret_path = os.path.join(OMERODIR, \"var\", \"django_secret_key\").replace(\"\\\\\", \"/\")\n    if not os.path.isfile(secret_path):\n        try:\n            secret_key = \"\".join(\n                [\n                    random.SystemRandom().choice(\n                        \"{0}{1}{2}\".format(\n                            string.ascii_letters, string.digits, string.punctuation\n                        )\n                    )\n                    for i in range(50)\n                ]\n            )\n            with os.fdopen(\n                os.open(secret_path, os.O_WRONLY | os.O_CREAT, 0o600), \"w\"\n            ) as secret_file:\n                secret_file.write(secret_key)\n        except IOError:\n            raise IOError(\n                \"Please create a %s file with random characters\"\n                \" to generate your secret key!\" % secret_path\n            )\n    try:\n        with open(secret_path, \"r\") as secret_file:\n            SECRET_KEY = secret_file.read().strip()\n    except IOError:\n        raise IOError(\"Could not find secret key in %s!\" % secret_path)\n\n# USE_I18N: A boolean that specifies whether Django's internationalization\n# system should be enabled.\n# This provides an easy way to turn it off, for performance. If this is set to\n# False, Django will make some optimizations so as not to load the\n# internationalization machinery.\nUSE_I18N = True\n\n# ROOT_URLCONF: A string representing the full Python import path to your root\n# URLconf.\n# For example: \"mydjangoapps.urls\". Can be overridden on a per-request basis\n# by setting the attribute urlconf on the incoming HttpRequest object.\nROOT_URLCONF = \"omeroweb.urls\"\n\n# STATICFILES_FINDERS: The list of finder backends that know how to find\n# static files in various locations. The default will find files stored in the\n# STATICFILES_DIRS setting (using\n# django.contrib.staticfiles.finders.FileSystemFinder) and in a static\n# subdirectory of each app (using\n# django.contrib.staticfiles.finders.AppDirectoriesFinder)\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n    \"pipeline.finders.PipelineFinder\",\n)\n\n# STATICFILES_DIRS: This setting defines the additional locations the\n# staticfiles app will traverse if the FileSystemFinder finder is enabled,\n# e.g. if you use the collectstatic or findstatic management command or use\n# the static file serving view.\n# from CUSTOM_SETTINGS_MAPPINGS\n# STATICFILES_DIRS += ((\"webapp/custom_static\", path/to/statics),)  # noqa\n\n# TEMPLATES: A list containing the settings for all template engines\n# to be used with Django. Each item of the list is a dictionary containing\n# the options for an individual engine.\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": TEMPLATE_DIRS,  # noqa\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"builtins\": [\"omeroweb.webgateway.templatetags.defaulttags\"],\n            \"debug\": DEBUG,  # noqa\n            \"context_processors\": [\n                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this\n                # list if you haven't customized them:\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.i18n\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"django.template.context_processors.tz\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"omeroweb.custom_context_processor.url_suffix\",\n                \"omeroweb.custom_context_processor.base_include_template\",\n            ],\n        },\n    },\n]\n\n# INSTALLED_APPS: A tuple of strings designating all applications that are\n# enabled in this Django installation. Each string should be a full Python\n# path to a Python package that contains a Django application, as created by\n# django-admin.py startapp.\nINSTALLED_APPS = (\n    \"django.contrib.staticfiles\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n)\n\n# ADDITONAL_APPS: We import any settings.py from apps. This allows them to\n# modify settings.\n# We're also processing any CUSTOM_SETTINGS_MAPPINGS defined there.\nfor app in ADDITIONAL_APPS:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n    # Previously the app was added to INSTALLED_APPS as 'omeroweb.app', which\n    # then required the app to reside within or be symlinked from within\n    # omeroweb, instead of just having to be somewhere on the python path.\n    # To allow apps to just be on the path, but keep it backwards compatible,\n    # try to import as omeroweb.app, if it works, keep that in INSTALLED_APPS,\n    # otherwise add it to INSTALLED_APPS just with its own name.\n    try:\n        __import__(\"omeroweb.%s\" % app)\n        INSTALLED_APPS += (\"omeroweb.%s\" % app,)\n    except ImportError:\n        INSTALLED_APPS += (app,)\n    try:\n        logger.debug(\"Attempting to import additional app settings for app: %s\" % app)\n        module = __import__(\"%s.settings\" % app)\n        process_custom_settings(module.settings)\n        report_settings(module.settings)\n    except ImportError:\n        logger.debug(\"Couldn't import settings from app: %s\" % app)\n\nINSTALLED_APPS += (\n    \"omeroweb.feedback\",\n    \"omeroweb.webadmin\",\n    \"omeroweb.webclient\",\n    \"omeroweb.webgateway\",\n    \"omeroweb.webredirect\",\n    \"omeroweb.api\",\n    \"pipeline\",\n)\n\nlogger.debug(\"INSTALLED_APPS=%s\" % [INSTALLED_APPS])\n\n\nPIPELINE = {\n    \"STYLESHEETS\": {\n        \"webgateway_viewer\": {\n            \"source_filenames\": (\n                \"webgateway/css/reset.css\",\n                \"webgateway/css/ome.body.css\",\n                \"webclient/css/dusty.css\",\n                \"webgateway/css/ome.viewport.css\",\n                \"webgateway/css/ome.toolbar.css\",\n                \"webgateway/css/ome.gs_slider.css\",\n                \"webgateway/css/base.css\",\n                \"webgateway/css/ome.snippet_header_logo.css\",\n                \"webgateway/css/ome.postit.css\",\n                \"3rdparty/farbtastic-1.2/farbtastic.css\",\n                \"webgateway/css/ome.colorbtn.css\",\n                \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\",\n                \"3rdparty/jquery-ui-1.10.4/themes/base/jquery-ui.all.css\",\n                \"webgateway/css/omero_image.css\",\n                \"3rdparty/panojs-2.0.0/panojs.css\",\n            ),\n            \"output_filename\": \"omeroweb.viewer.min.css\",\n        },\n    },\n    \"CSS_COMPRESSOR\": \"pipeline.compressors.NoopCompressor\",\n    \"JS_COMPRESSOR\": \"pipeline.compressors.NoopCompressor\",\n    \"JAVASCRIPT\": {\n        \"webgateway_viewer\": {\n            \"source_filenames\": (\n                \"3rdparty/jquery-1.11.1.js\",\n                \"3rdparty/jquery-migrate-1.2.1.js\",\n                \"3rdparty/jquery-ui-1.10.4/js/jquery-ui.1.10.4.js\",\n                \"webgateway/js/ome.popup.js\",\n                \"3rdparty/aop-1.3.js\",\n                \"3rdparty/raphael-2.1.0/raphael.js\",\n                \"3rdparty/raphael-2.1.0/scale.raphael.js\",\n                \"3rdparty/panojs-2.0.0/utils.js\",\n                \"3rdparty/panojs-2.0.0/PanoJS.js\",\n                \"3rdparty/panojs-2.0.0/controls.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\",\n                \"3rdparty/panojs-2.0.0/control_thumbnail.js\",\n                \"3rdparty/panojs-2.0.0/control_info.js\",\n                \"3rdparty/panojs-2.0.0/control_svg.js\",\n                \"3rdparty/panojs-2.0.0/control_roi.js\",\n                \"3rdparty/panojs-2.0.0/control_scalebar.js\",\n                \"3rdparty/hammer-2.0.2/hammer.min.js\",\n                \"webgateway/js/ome.gs_utils.js\",\n                \"webgateway/js/ome.viewportImage.js\",\n                \"webgateway/js/ome.gs_slider.js\",\n                \"webgateway/js/ome.viewport.js\",\n                \"webgateway/js/omero_image.js\",\n                \"webgateway/js/ome.roidisplay.js\",\n                \"webgateway/js/ome.scalebardisplay.js\",\n                \"webgateway/js/ome.smartdialog.js\",\n                \"webgateway/js/ome.roiutils.js\",\n                \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\",\n                \"webgateway/js/ome.colorbtn.js\",\n                \"webgateway/js/ome.postit.js\",\n                \"3rdparty/jquery.selectboxes-2.2.6.js\",\n                \"3rdparty/farbtastic-1.2/farbtastic.js\",\n                \"3rdparty/jquery.mousewheel-3.0.6.js\",\n            ),\n            \"output_filename\": \"omeroweb.viewer.min.js\",\n        }\n    },\n}\n\n# Prevent scripting attacks from obtaining session cookie\nSESSION_COOKIE_HTTPONLY = True\n\nCSRF_FAILURE_VIEW = \"omeroweb.feedback.views.csrf_failure\"\n\n# Configuration for django-cors-headers app\n# See https://github.com/ottoyiu/django-cors-headers\n# Configration of allowed origins is handled by custom settings above\nCORS_ALLOW_CREDENTIALS = True\n# Needed for Django <1.9 since CSRF_TRUSTED_ORIGINS not supported\nCORS_REPLACE_HTTPS_REFERER = True\n\n# FEEDBACK - DO NOT MODIFY!\n# FEEDBACK_URL: Is now configurable for testing purpuse only. Used in\n# feedback.sendfeedback.SendFeedback class in order to submit errors or\n# comment messages to http://qa.openmicroscopy.org.uk.\n# FEEDBACK_APP: 6 = OMERO.web\nFEEDBACK_APP = 6\n\n# IGNORABLE_404_STARTS:\n# Default: ('/cgi-bin/', '/_vti_bin', '/_vti_inf')\n# IGNORABLE_404_ENDS:\n# Default: ('mail.pl', 'mailform.pl', 'mail.cgi', 'mailform.cgi',\n# 'favicon.ico', '.php')\n\n# SESSION_FILE_PATH: If you're using file-based session storage, this sets the\n# directory in which Django will store session data. When the default value\n# (None) is used, Django will use the standard temporary directory for the\n# system.\nSESSION_FILE_PATH = tempfile.gettempdir()\n\n# FILE_UPLOAD_TEMP_DIR: The directory to store data temporarily while\n# uploading files.\nFILE_UPLOAD_TEMP_DIR = tempfile.gettempdir()\n\n# # FILE_UPLOAD_MAX_MEMORY_SIZE: The maximum size (in bytes) that an upload\n# will be before it gets streamed to the file system.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # default 2621440 (i.e. 2.5 MB).\n\n# DEFAULT_IMG: Used in\n# webclient.webclient_gateway.OmeroWebGateway.defaultThumbnail in order to\n# load default image while thumbnail can't be retrieved from the server.\nDEFAULT_IMG = os.path.join(\n    os.path.dirname(__file__),\n    \"webgateway\",\n    \"static\",\n    \"webgateway\",\n    \"img\",\n    \"image128.png\",\n).replace(\"\\\\\", \"/\")\n\n# # DEFAULT_USER: Used in\n# webclient.webclient_gateway.OmeroWebGateway.getExperimenterDefaultPhoto in\n# order to load default avatar while experimenter photo can't be retrieved\n# from the server.\nDEFAULT_USER = os.path.join(\n    os.path.dirname(__file__),\n    \"webgateway\",\n    \"static\",\n    \"webgateway\",\n    \"img\",\n    \"personal32.png\",\n).replace(\"\\\\\", \"/\")\n\n# MANAGERS: A tuple in the same format as ADMINS that specifies who should get\n# broken-link notifications when\n# SEND_BROKEN_LINK_EMAILS=True.\nMANAGERS = ADMINS  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n\n# https://docs.djangoproject.com/en/1.6/releases/1.6/#default-session-serialization-switched-to-json\n# JSON serializer, which is now the default, cannot handle\n# omeroweb.connector.Connector object\nSESSION_SERIALIZER = \"django.contrib.sessions.serializers.PickleSerializer\"\n\n# Load custom settings from etc/grid/config.xml\n# Tue  2 Nov 2010 11:03:18 GMT -- ticket:3228\n# MIDDLEWARE: A tuple of middleware classes to use.\nMIDDLEWARE = sort_properties_to_tuple(MIDDLEWARE_CLASSES_LIST)  # noqa\n\nfor k, v in DJANGO_ADDITIONAL_SETTINGS:  # noqa\n    setattr(sys.modules[__name__], k, v)\n\n\n# Load server list and freeze\ndef load_server_list():\n    for s in SERVER_LIST:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n        server = (len(s) > 2) and text(s[2]) or None\n        Server(host=text(s[0]), port=int(s[1]), server=server)\n    Server.freeze()\n\n\nload_server_list()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"\nDecorators for use with the webclient application.\n\"\"\"\n\nimport logging\n\nimport omeroweb.decorators\nfrom omero import constants\n\nfrom django.http import HttpResponse\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.core.urlresolvers import NoReverseMatch\n\nfrom omeroweb.webclient.forms import GlobalSearchForm\nfrom omeroweb.utils import reverse_with_params\nfrom omeroweb.webgateway.marshal import eventContextMarshal\n\nlogger = logging.getLogger(__name__)\n\n\nclass login_required(omeroweb.decorators.login_required):\n    \"\"\"\n    webclient specific extension of the OMERO.web login_required() decorator.\n    \"\"\"\n\n    def __init__(\n        self,\n        ignore_login_fail=False,\n        setGroupContext=False,\n        login_redirect=None,\n        **kwargs\n    ):\n        \"\"\"\n        Initialises the decorator.\n        \"\"\"\n        super(login_required, self).__init__(**kwargs)\n        self.ignore_login_fail = ignore_login_fail\n        self.setGroupContext = setGroupContext\n        self.login_redirect = login_redirect\n\n    def on_logged_in(self, request, conn):\n        \"\"\"Called whenever the users is successfully logged in.\"\"\"\n        super(login_required, self).on_logged_in(request, conn)\n        self.prepare_session(request)\n        if self.setGroupContext:\n            if request.session.get(\"active_group\"):\n                conn.SERVICE_OPTS.setOmeroGroup(request.session.get(\"active_group\"))\n            else:\n                conn.SERVICE_OPTS.setOmeroGroup(conn.getEventContext().groupId)\n\n    def on_not_logged_in(self, request, url, error=None):\n        \"\"\"\n        This can be used to fail silently (not return 403, 500 etc. E.g.\n        keepalive ping)\n        \"\"\"\n        if self.ignore_login_fail:\n            return HttpResponse(\"Connection Failed\")\n        if self.login_redirect is not None:\n            try:\n                url = reverse(self.login_redirect)\n            except Exception:\n                pass\n        return super(login_required, self).on_not_logged_in(request, url, error)\n\n    def prepare_session(self, request):\n        \"\"\"Prepares various session variables.\"\"\"\n        changes = False\n        if request.session.get(\"callback\") is None:\n            request.session[\"callback\"] = dict()\n            changes = True\n        if request.session.get(\"shares\") is None:\n            request.session[\"shares\"] = dict()\n            changes = True\n        if changes:\n            request.session.modified = True\n\n\nclass render_response(omeroweb.decorators.render_response):\n    \"\"\"\n    Subclass for adding additional data to the 'context' dict passed to\n    templates\n    \"\"\"\n\n    def prepare_context(self, request, context, *args, **kwargs):\n        \"\"\"\n        This allows templates to access the current eventContext and user from\n        the L{omero.gateway.BlitzGateway}.\n        E.g. <h1>{{ ome.user.getFullName }}</h1>\n        If these are not required by the template, then they will not need to\n        be loaded by the Blitz Gateway.\n        The results are cached by Blitz Gateway, so repeated calls have no\n        additional cost.\n        We also process some values from settings and add these to the\n        context.\n        \"\"\"\n\n        # we expect @login_required to pass us 'conn', but just in case...\n        if \"conn\" not in kwargs:\n            return\n        conn = kwargs[\"conn\"]\n\n        # omero constants\n        context[\"omero\"] = {\n            \"constants\": {\n                \"NSCOMPANIONFILE\": constants.namespaces.NSCOMPANIONFILE,\n                \"ORIGINALMETADATA\": constants.annotation.file.ORIGINALMETADATA,\n                \"NSCLIENTMAPANNOTATION\": constants.metadata.NSCLIENTMAPANNOTATION,\n            }\n        }\n\n        context.setdefault(\"ome\", {})  # don't overwrite existing ome\n        public_user = omeroweb.decorators.is_public_user(request)\n        if public_user is not None:\n            context[\"ome\"][\"is_public_user\"] = public_user\n        context[\"ome\"][\"eventContext\"] = eventContextMarshal(conn.getEventContext())\n        context[\"ome\"][\"user\"] = conn.getUser\n        context[\"ome\"][\"user_id\"] = request.session.get(\"user_id\", conn.getUserId())\n        context[\"ome\"][\"group_id\"] = request.session.get(\"group_id\", None)\n        context[\"ome\"][\"active_group\"] = request.session.get(\n            \"active_group\", conn.getEventContext().groupId\n        )\n        context[\"global_search_form\"] = GlobalSearchForm()\n        context[\"ome\"][\"can_create\"] = request.session.get(\"can_create\", True)\n        # UI server preferences\n        if request.session.get(\"server_settings\"):\n            context[\"ome\"][\"email\"] = request.session.get(\"server_settings\").get(\n                \"email\", False\n            )\n            if request.session.get(\"server_settings\").get(\"ui\"):\n                # don't overwrite existing ui\n                context.setdefault(\"ui\", {\"tree\": {}})\n                context[\"ui\"][\"orphans\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"tree\", {})\n                    .get(\"orphans\")\n                )\n                context[\"ui\"][\"dropdown_menu\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"menu\", {})\n                    .get(\"dropdown\")\n                )\n                context[\"ui\"][\"tree\"][\"type_order\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"tree\", {})\n                    .get(\"type_order\")\n                )\n\n        self.load_settings(request, context, conn)\n\n    def load_settings(self, request, context, conn):\n\n        # Process various settings and add to the template context dict\n        ping_interval = settings.PING_INTERVAL\n        if ping_interval > 0:\n            context[\"ping_interval\"] = ping_interval\n\n        top_links = settings.TOP_LINKS\n        links = []\n        for tl in top_links:\n            if len(tl) < 2:\n                continue\n            link = {}\n            link[\"label\"] = tl[0]\n            link_id = tl[1]\n            try:\n                # test if complex dictionary view with args and query_string\n                link[\"link\"] = reverse_with_params(**link_id)\n            except TypeError:\n                # assume is only view name\n                try:\n                    link[\"link\"] = reverse(link_id)\n                except NoReverseMatch:\n                    # assume we've been passed a url\n                    link[\"link\"] = link_id\n            # simply add optional attrs dict\n            if len(tl) > 2:\n                link[\"attrs\"] = tl[2]\n            links.append(link)\n        context[\"ome\"][\"top_links\"] = links\n\n        if settings.TOP_LOGO:\n            context[\"ome\"][\"logo_src\"] = settings.TOP_LOGO\n        if settings.TOP_LOGO_LINK:\n            context[\"ome\"][\"logo_href\"] = settings.TOP_LOGO_LINK\n\n        metadata_panes = settings.METADATA_PANES\n        context[\"ome\"][\"metadata_panes\"] = metadata_panes\n\n        right_plugins = settings.RIGHT_PLUGINS\n        r_plugins = []\n        for rt in right_plugins:\n            label = rt[0]\n            include = rt[1]\n            plugin_id = rt[2]\n            r_plugins.append(\n                {\"label\": label, \"include\": include, \"plugin_id\": plugin_id}\n            )\n        context[\"ome\"][\"right_plugins\"] = r_plugins\n\n        center_plugins = settings.CENTER_PLUGINS\n        c_plugins = []\n        for cp in center_plugins:\n            label = cp[0]\n            include = cp[1]\n            plugin_id = cp[2]\n            c_plugins.append(\n                {\"label\": label, \"include\": include, \"plugin_id\": plugin_id}\n            )\n        context[\"ome\"][\"center_plugins\"] = c_plugins\n\n        context[\"ome\"][\"user_dropdown\"] = settings.USER_DROPDOWN\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#\n#\n# Copyright (c) 2008-2015 University of Dundee.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n#\n# Version: 1.0\n#\n\nimport datetime\nimport time\nimport logging\n\nfrom django.conf import settings\nfrom django import forms\nfrom django.forms.formsets import formset_factory\nfrom django.core.urlresolvers import reverse\n\nfrom omeroweb.custom_forms import NonASCIIForm\nfrom .custom_forms import MetadataModelChoiceField\nfrom .custom_forms import AnnotationModelMultipleChoiceField\nfrom .custom_forms import ObjectModelMultipleChoiceField\nfrom omeroweb.webadmin.custom_forms import ExperimenterModelMultipleChoiceField\nfrom omeroweb.webadmin.custom_forms import GroupModelMultipleChoiceField\nfrom omeroweb.webadmin.custom_forms import GroupModelChoiceField\nfrom omeroweb.webclient.webclient_utils import formatPercentFraction\n\nlogger = logging.getLogger(__name__)\n\n\n##################################################################\n# Static values\n\n# TODO: change to reverse\nhelp_button = \"%swebgateway/img/help16.png\" % settings.STATIC_URL\n\nhelp_enable = (\n    '<span class=\"tooltip\" title=\"Enable/Disable: This option'\n    ' allows the owner to keep the access control of the share.\">'\n    '<img src=\"%s\" /></span>'\n) % help_button\n\nhelp_expire = (\n    '<span class=\"tooltip\" title=\"Expiry date: This date defines'\n    \" when the share will stop being available. Date format:\"\n    ' YYYY-MM-DD.\"><img src=\"%s\" /></span>'\n) % help_button\n\n\n#################################################################\n# Non-model Form\n\n\nclass GlobalSearchForm(NonASCIIForm):\n\n    search_query = forms.CharField(widget=forms.TextInput(attrs={\"size\": 25}))\n\n\nclass ShareForm(NonASCIIForm):\n    def __init__(self, *args, **kwargs):\n        super(ShareForm, self).__init__(*args, **kwargs)\n\n        try:\n            if kwargs[\"initial\"][\"shareMembers\"]:\n                pass\n            self.fields[\"members\"] = ExperimenterModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"experimenters\"],\n                initial=kwargs[\"initial\"][\"shareMembers\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 28}),\n            )\n        except Exception:\n            self.fields[\"members\"] = ExperimenterModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"experimenters\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 28}),\n            )\n        self.fields.keyOrder = [\n            \"message\",\n            \"expiration\",\n            \"enable\",\n            \"members\",\n        ]  # , 'guests']\n\n    message = forms.CharField(widget=forms.Textarea(attrs={\"rows\": 5, \"cols\": 50}))\n    expiration = forms.CharField(\n        max_length=100,\n        widget=forms.TextInput(attrs={\"size\": 10}),\n        label=\"Expiry date\",\n        help_text=help_expire,\n        required=False,\n    )\n    enable = forms.BooleanField(required=False, help_text=help_enable)\n    # guests = MultiEmailField(required=False,\n    # widget=forms.TextInput(attrs={'size':75}))\n\n    def clean_expiration(self):\n        if (\n            self.cleaned_data[\"expiration\"] is not None\n            and len(self.cleaned_data[\"expiration\"]) < 1\n        ):\n            return None\n        if self.cleaned_data[\"expiration\"] is not None:\n            d = str(self.cleaned_data[\"expiration\"]).rsplit(\"-\")\n            try:\n                date = datetime.datetime.strptime(\n                    (\"%s-%s-%s\" % (d[0], d[1], d[2])), \"%Y-%m-%d\"\n                )\n            except Exception:\n                raise forms.ValidationError(\"Date is in the wrong format. YY-MM-DD\")\n            if time.mktime(date.timetuple()) <= time.time():\n                raise forms.ValidationError(\"Expiry date must be in the future.\")\n        return self.cleaned_data[\"expiration\"]\n\n\nclass BasketShareForm(ShareForm):\n    def __init__(self, *args, **kwargs):\n        super(BasketShareForm, self).__init__(*args, **kwargs)\n\n        try:\n            self.fields[\"image\"] = GroupModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"images\"],\n                initial=kwargs[\"initial\"][\"selected\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 10}),\n            )\n        except Exception:\n            self.fields[\"image\"] = GroupModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"images\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 10}),\n            )\n\n\nclass ContainerForm(NonASCIIForm):\n\n    name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={\"size\": 45}))\n    description = forms.CharField(\n        widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 49}), required=False\n    )\n    owner = forms.CharField(widget=forms.HiddenInput, required=False)\n\n\nclass ContainerNameForm(NonASCIIForm):\n\n    name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={\"size\": 45}))\n\n\nclass ContainerDescriptionForm(NonASCIIForm):\n\n    description = forms.CharField(\n        widget=forms.Textarea(attrs={\"rows\": 3, \"cols\": 39}), required=False\n    )\n\n\nclass BaseAnnotationForm(NonASCIIForm):\n    \"\"\"\n    This is the superclass of the various forms used for annotating single or\n    multiple objects.\n    All these forms use hidden fields to specify the object(s) currently being\n    annotated.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(BaseAnnotationForm, self).__init__(*args, **kwargs)\n\n        images = \"images\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"images\"] or list()\n        if len(images) > 0:\n            try:\n                self.fields[\"image\"] = ObjectModelMultipleChoiceField(\n                    queryset=images,\n                    initial=kwargs[\"initial\"][\"selected\"][\"images\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"image\"] = ObjectModelMultipleChoiceField(\n                    queryset=images,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        datasets = (\n            \"datasets\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"datasets\"] or list()\n        )\n        if len(datasets) > 0:\n            try:\n                self.fields[\"dataset\"] = ObjectModelMultipleChoiceField(\n                    queryset=datasets,\n                    initial=kwargs[\"initial\"][\"selected\"][\"datasets\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"dataset\"] = ObjectModelMultipleChoiceField(\n                    queryset=datasets,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        projects = (\n            \"projects\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"projects\"] or list()\n        )\n        if len(projects) > 0:\n            try:\n                self.fields[\"project\"] = ObjectModelMultipleChoiceField(\n                    queryset=projects,\n                    initial=kwargs[\"initial\"][\"selected\"][\"projects\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"project\"] = ObjectModelMultipleChoiceField(\n                    queryset=projects,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        screens = (\n            \"screens\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"screens\"] or list()\n        )\n        if len(screens) > 0:\n            try:\n                self.fields[\"screen\"] = ObjectModelMultipleChoiceField(\n                    queryset=screens,\n                    initial=kwargs[\"initial\"][\"selected\"][\"screens\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"screen\"] = ObjectModelMultipleChoiceField(\n                    queryset=screens,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        plates = \"plates\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"plates\"] or list()\n        if len(plates) > 0:\n            try:\n                self.fields[\"plate\"] = ObjectModelMultipleChoiceField(\n                    queryset=plates,\n                    initial=kwargs[\"initial\"][\"selected\"][\"plates\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"plate\"] = ObjectModelMultipleChoiceField(\n                    queryset=plates,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        acquisitions = (\n            \"acquisitions\" in kwargs[\"initial\"]\n            and kwargs[\"initial\"][\"acquisitions\"]\n            or list()\n        )\n        if len(acquisitions) > 0:\n            try:\n                self.fields[\"acquisition\"] = ObjectModelMultipleChoiceField(\n                    queryset=acquisitions,\n                    initial=kwargs[\"initial\"][\"selected\"][\"acquisitions\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"acquisition\"] = ObjectModelMultipleChoiceField(\n                    queryset=acquisitions,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        wells = \"wells\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"wells\"] or list()\n        if len(wells) > 0:\n            try:\n                self.fields[\"well\"] = ObjectModelMultipleChoiceField(\n                    queryset=wells,\n                    initial=kwargs[\"initial\"][\"selected\"][\"wells\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"well\"] = ObjectModelMultipleChoiceField(\n                    queryset=wells,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        shares = \"shares\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"shares\"] or list()\n        if len(shares) > 0:\n            try:\n                self.fields[\"share\"] = ObjectModelMultipleChoiceField(\n                    queryset=shares,\n                    initial=kwargs[\"initial\"][\"selected\"][\"shares\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"share\"] = ObjectModelMultipleChoiceField(\n                    queryset=shares,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n\nclass TagsAnnotationForm(BaseAnnotationForm):\n    \"\"\"\n    Form for annotating one or more objects with existing Tags or New tags\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(TagsAnnotationForm, self).__init__(*args, **kwargs)\n\n    tags = forms.CharField(required=False, widget=forms.HiddenInput)\n\n    def clean_tags(self):\n        data = self.cleaned_data[\"tags\"]\n        if not data:\n            return []\n        try:\n            data = map(int, data.split(\",\"))\n        except Exception:\n            raise forms.ValidationError()\n        return data\n\n\nclass NewTagsAnnotationForm(forms.Form):\n    \"\"\" Helper form for new tags \"\"\"\n\n    tag = forms.CharField(required=True, widget=forms.HiddenInput)\n    description = forms.CharField(required=False, widget=forms.HiddenInput)\n    tagset = forms.IntegerField(min_value=1, required=False, widget=forms.HiddenInput)\n\n\nNewTagsAnnotationFormSet = formset_factory(NewTagsAnnotationForm, extra=0)\n\n\nclass FilesAnnotationForm(BaseAnnotationForm):\n    def __init__(self, *args, **kwargs):\n        super(FilesAnnotationForm, self).__init__(*args, **kwargs)\n        self.fields[\"files\"] = AnnotationModelMultipleChoiceField(\n            queryset=kwargs[\"initial\"][\"files\"],\n            widget=forms.SelectMultiple(attrs={\"size\": 8, \"class\": \"existing\"}),\n            required=False,\n        )\n\n    annotation_file = forms.FileField(required=False)\n\n\nclass CommentAnnotationForm(BaseAnnotationForm):\n    comment = forms.CharField(widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 39}))\n\n\nclass ActiveGroupForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(ActiveGroupForm, self).__init__(*args, **kwargs)\n        try:\n            self.fields[\"active_group\"] = GroupModelChoiceField(\n                queryset=kwargs[\"initial\"][\"mygroups\"],\n                initial=kwargs[\"initial\"][\"activeGroup\"],\n                empty_label=None,\n                widget=forms.Select(\n                    attrs={\n                        \"onchange\": (\n                            \"window.location.href='\"\n                            + reverse(viewname=\"change_active_group\")\n                            + \"?url=\"\n                            + kwargs[\"initial\"][\"url\"]\n                            + \"&active_group='\"\n                            \"+this.options[this.selectedIndex].value\"\n                        )\n                    }\n                ),\n            )\n        except Exception:\n            self.fields[\"active_group\"] = GroupModelChoiceField(\n                queryset=kwargs[\"initial\"][\"mygroups\"],\n                initial=kwargs[\"initial\"][\"activeGroup\"],\n                empty_label=None,\n                widget=forms.Select(\n                    attrs={\n                        \"onchange\": (\n                            \"window.location.href='\"\n                            + reverse(viewname=\"change_active_group\")\n                            + \"?active_group='\"\n                            \"+this.options[this.selectedIndex].value\"\n                        )\n                    }\n                ),\n            )\n        self.fields.keyOrder = [\"active_group\"]\n\n\nclass WellIndexForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(WellIndexForm, self).__init__(*args, **kwargs)\n        rmin, rmax = kwargs[\"initial\"][\"range\"]\n        choices = [(str(i), \"Field#%i\" % (i - rmin + 1)) for i in range(rmin, rmax + 1)]\n        self.fields[\"index\"] = forms.ChoiceField(\n            choices=tuple(choices),\n            widget=forms.Select(\n                attrs={\n                    \"onchange\": (\"changeField(this.options[this.selectedIndex].value);\")\n                }\n            ),\n        )\n        self.fields.keyOrder = [\"index\"]\n\n\n###############################\n# METADATA FORMS\n\n\ndef save_metadata(obj, name, options=False):\n    s = \"javascript:save_metadata(\" + str(obj) + \", '\" + name + \"', \"\n    if options:\n        s += \"this.options[this.selectedIndex].value);\"\n    else:\n        s += \"this.value);\"\n\n    return s\n\n\ndef set_widget_attrs(field, set_class=True):\n    field.widget.attrs[\"disabled\"] = True\n    if set_class:\n        field.widget.attrs[\"class\"] = \"disabled-metadata\"\n\n\nclass MetadataChannelForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataChannelForm, self).__init__(*args, **kwargs)\n\n        # Logical channel\n\n        # Name\n        logicalCh = kwargs[\"initial\"][\"logicalChannel\"]\n        try:\n            if logicalCh is not None:\n                self.fields[\"name\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(logicalCh.id)}\n                    ),\n                    initial=logicalCh.name,\n                    required=False,\n                )\n            else:\n                self.fields[\"name\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"name\"])\n        except Exception:\n            self.fields[\"name\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"name\"])\n\n        # excitationWave\n        try:\n            if logicalCh is not None:\n                self.fields[\"excitationWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"exWave\"].getValue(),\n                    label=(\"Excitation (%s)\" % kwargs[\"initial\"][\"exWave\"].getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"excitationWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Excitation\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"excitationWave\"])\n        except Exception:\n            self.fields[\"excitationWave\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Excitation\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"excitationWave\"])\n\n        # emissionWave\n        try:\n            if logicalCh is not None:\n                self.fields[\"emissionWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"emWave\"].getValue(),\n                    label=(\"Emission (%s)\" % kwargs[\"initial\"][\"emWave\"].getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"emissionWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Emission\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"emissionWave\"])\n        except Exception:\n            self.fields[\"emissionWave\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Emission\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"emissionWave\"])\n\n        # ndFilter\n        try:\n            if logicalCh is not None and logicalCh.ndFilter is not None:\n                self.fields[\"ndFilter\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=formatPercentFraction(logicalCh.ndFilter),\n                    label=\"ND filter (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"ndFilter\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"ND filter (%)\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"ndFilter\"], set_class=False)\n        except Exception:\n            self.fields[\"ndFilter\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"ND filter (%)\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"ndFilter\"], set_class=False)\n\n        # pinHoleSize\n        try:\n            if logicalCh is not None and logicalCh.pinHoleSize is not None:\n                self.fields[\"pinHoleSize\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.pinHoleSize.getValue(),\n                    label=(\"Pin hole size (%s)\" % logicalCh.pinHoleSize.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"pinHoleSize\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Pin hole size\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pinHoleSize\"], set_class=False)\n        except Exception:\n            self.fields[\"pinHoleSize\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pin hole size\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pinHoleSize\"], set_class=False)\n\n        # fluor\n        try:\n            if logicalCh is not None:\n                self.fields[\"fluor\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.fluor,\n                    required=False,\n                )\n            else:\n                self.fields[\"fluor\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"fluor\"], set_class=False)\n        except Exception:\n            self.fields[\"fluor\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"fluor\"], set_class=False)\n\n        # Illumination\n        try:\n            if logicalCh.getIllumination() is not None:\n                self.fields[\"illumination\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"illuminations\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"illumination\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getIllumination(),\n                    required=False,\n                )\n            else:\n                self.fields[\"illumination\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"illuminations\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"illumination\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"illumination\"], set_class=False)\n        except Exception:\n            self.fields[\"illumination\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"illumination\"], set_class=False)\n\n        # contrastMethods\n        try:\n            if logicalCh.contrastMethod is not None:\n                self.fields[\"contrastMethod\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"contrastMethods\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"contrastMethod\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getContrastMethod(),\n                    label=\"Contrast method\",\n                    required=False,\n                )\n            else:\n                self.fields[\"contrastMethod\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"contrastMethods\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"contrastMethod\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Contrast method\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"contrastMethod\"])\n        except Exception:\n            self.fields[\"contrastMethod\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Contrast method\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"contrastMethod\"])\n\n        # Mode\n        try:\n            if logicalCh.getMode() is not None:\n                self.fields[\"mode\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"modes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"mode\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getMode().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"mode\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"modes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"mode\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"mode\"])\n        except Exception:\n            self.fields[\"mode\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"mode\"])\n\n        # pockelCellSetting\n        try:\n            if logicalCh.pockelCellSetting is not None:\n                self.fields[\"pockelCellSetting\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.pockelCellSetting,\n                    label=\"Pockel cell\",\n                    required=False,\n                )\n            else:\n                self.fields[\"pockelCellSetting\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Pockel cell\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pockelCellSetting\"])\n        except Exception:\n            self.fields[\"pockelCellSetting\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pockel cell\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pockelCellSetting\"])\n\n        self.fields.keyOrder = [\n            \"name\",\n            \"excitationWave\",\n            \"emissionWave\",\n            \"ndFilter\",\n            \"pinHoleSize\",\n            \"fluor\",\n            \"illumination\",\n            \"contrastMethod\",\n            \"mode\",\n            \"pockelCellSetting\",\n        ]\n\n\nclass MetadataDichroicForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataDichroicForm, self).__init__(*args, **kwargs)\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial number\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                                \"serialNumber\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                                \"serialNumber\",\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        self.fields.keyOrder = [\"model\", \"manufacturer\", \"serialNumber\", \"lotNumber\"]\n\n\nclass MetadataMicroscopeForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataMicroscopeForm, self).__init__(*args, **kwargs)\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"microscope\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"microscope\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Serial number\n        try:\n            if kwargs[\"initial\"][\"microscope\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"microscope\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Type\n        try:\n            if kwargs[\"initial\"][\"microscope\"].getMicroscopeType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"microscopeTypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].getMicroscopeType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"microscopeTypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n        ]\n\n\nclass MetadataObjectiveForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataObjectiveForm, self).__init__(*args, **kwargs)\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"objective\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"objective\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Serial Number\n        try:\n            if kwargs[\"initial\"][\"objective\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"objective\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"logicalchannel\"]\n                                .getObjective()\n                                .lotNumber,\n                                \"lotNumber\",\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Nominal Magnification\n        try:\n            if kwargs[\"initial\"][\"objective\"].nominalMagnification is not None:\n                self.fields[\"nominalMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"nominalMagnification\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].nominalMagnification,\n                    label=\"Nominal magnification\",\n                    required=False,\n                )\n            else:\n                self.fields[\"nominalMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"nominalMagnification\",\n                            ),\n                        }\n                    ),\n                    label=\"Nominal magnification\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"nominalMagnification\"])\n        except Exception:\n            self.fields[\"nominalMagnification\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Nominal magnification\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"nominalMagnification\"])\n\n        # Calibrated Magnification\n        try:\n            if kwargs[\"initial\"][\"objective\"].calibratedMagnification is not None:\n                self.fields[\"calibratedMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"calibratedMagnification\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].calibratedMagnification,\n                    label=\"Calibrated magnification\",\n                    required=False,\n                )\n            else:\n                self.fields[\"calibratedMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"calibratedMagnification\",\n                            ),\n                        }\n                    ),\n                    label=\"Calibrated magnification\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"calibratedMagnification\"])\n        except Exception:\n            self.fields[\"calibratedMagnification\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Calibrated magnification\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"calibratedMagnification\"])\n\n        # Lens NA\n        try:\n            if kwargs[\"initial\"][\"objective\"].lensNA is not None:\n                self.fields[\"lensNA\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"lensNA\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].lensNA,\n                    label=\"Lens NA\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lensNA\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"lensNA\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lensNA\"])\n        except Exception:\n            self.fields[\"lensNA\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lens NA\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lensNA\"])\n\n        # Immersion\n        try:\n            if kwargs[\"initial\"][\"objective\"].getImmersion() is not None:\n                self.fields[\"immersion\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"immersions\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"immersion\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getImmersion().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"immersion\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"immersions\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"immersion\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"immersion\"])\n        except Exception:\n            self.fields[\"immersion\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"immersion\"])\n\n        # Correction\n        try:\n            if kwargs[\"initial\"][\"objective\"].getCorrection() is not None:\n                self.fields[\"correction\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"corrections\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"correction\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getCorrection().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"correction\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"corrections\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"correction\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"correction\"])\n\n        except Exception:\n            self.fields[\"correction\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"correction\"])\n\n        # Working Distance\n        try:\n            if kwargs[\"initial\"][\"objective\"].workingDistance is not None:\n                self.fields[\"workingDistance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"workingDistance\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].workingDistance.getValue(),\n                    label=(\n                        \"Working distance (%s)\"\n                        % kwargs[\"initial\"][\"objective\"].workingDistance.getSymbol()\n                    ),\n                    required=False,\n                )\n            else:\n                self.fields[\"workingDistance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"workingDistance\"\n                            ),\n                        }\n                    ),\n                    label=\"Working distance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"workingDistance\"])\n        except Exception:\n            self.fields[\"workingDistance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Working distance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"workingDistance\"])\n\n        # Iris\n        try:\n            if kwargs[\"initial\"][\"objective\"].getIris() is not None:\n                self.fields[\"iris\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"iris\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getIris().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"iris\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"iris\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"iris\"])\n        except Exception:\n            self.fields[\"iris\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"iris\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"nominalMagnification\",\n            \"calibratedMagnification\",\n            \"lensNA\",\n            \"immersion\",\n            \"correction\",\n            \"workingDistance\",\n            \"iris\",\n        ]\n\n\nclass MetadataObjectiveSettingsForm(MetadataObjectiveForm):\n\n    BOOLEAN_CHOICES = (\n        (\"\", \"---------\"),\n        (\"True\", \"True\"),\n        (\"False\", \"False\"),\n    )\n\n    def __init__(self, *args, **kwargs):\n        super(MetadataObjectiveSettingsForm, self).__init__(*args, **kwargs)\n\n        # Objective Settings\n\n        # Correction Collar\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].correctionCollar is not None:\n                self.fields[\"correctionCollar\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"correctionCollar\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].correctionCollar,\n                    label=\"Correction collar\",\n                    required=False,\n                )\n            else:\n                self.fields[\"correctionCollar\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"correctionCollar\",\n                            ),\n                        }\n                    ),\n                    label=\"Correction collar\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"correctionCollar\"])\n        except Exception:\n            self.fields[\"correctionCollar\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Correction collar\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"correctionCollar\"])\n\n        # Medium\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].getMedium() is not None:\n                self.fields[\"medium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"medium\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].getMedium().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"medium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"medium\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"medium\"])\n        except Exception:\n            self.fields[\"medium\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"medium\"])\n\n        # Refractive Index\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].refractiveIndex is not None:\n                self.fields[\"refractiveIndex\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"refractiveIndex\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].refractiveIndex,\n                    label=\"Refractive index\",\n                    required=False,\n                )\n            else:\n                self.fields[\"refractiveIndex\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"refractiveIndex\",\n                            ),\n                        }\n                    ),\n                    label=\"Refractive index\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"refractiveIndex\"])\n        except Exception:\n            self.fields[\"refractiveIndex\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Refractive index\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"refractiveIndex\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"nominalMagnification\",\n            \"calibratedMagnification\",\n            \"lensNA\",\n            \"immersion\",\n            \"correction\",\n            \"workingDistance\",\n            \"iris\",\n            \"correctionCollar\",\n            \"medium\",\n            \"refractiveIndex\",\n        ]\n\n\nclass MetadataFilterForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataFilterForm, self).__init__(*args, **kwargs)\n\n        # Filter\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"filter\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"filter\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial Number\n        try:\n            if kwargs[\"initial\"][\"filter\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"filter\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Filter wheel\n        try:\n            if kwargs[\"initial\"][\"filter\"].filterWheel is not None:\n                self.fields[\"filterWheel\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"filterWheel\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].filterWheel,\n                    label=\"Filter wheel\",\n                    required=False,\n                )\n            else:\n                self.fields[\"filterWheel\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"filterWheel\"\n                            ),\n                        }\n                    ),\n                    label=\"Filter wheel\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"filterWheel\"])\n        except Exception:\n            self.fields[\"filterWheel\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Filter wheel\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"filterWheel\"])\n\n        # Type\n        try:\n            if kwargs[\"initial\"][\"filter\"].getFilterType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].getFilterType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        # Cut in\n        tr = kwargs[\"initial\"][\"filter\"].getTransmittanceRange()\n        try:\n            if tr is not None and tr.cutIn is not None:\n                self.fields[\"cutIn\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutIn\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"]\n                    .getTransmittanceRange()\n                    .cutIn.getValue(),\n                    label=\"Cut in (%s)\" % tr.cutIn.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutIn\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutIn\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut in\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutIn\"])\n        except Exception:\n            self.fields[\"cutIn\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut in\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutIn\"])\n\n        # Cut out\n        try:\n            if tr is not None and tr.cutOut is not None:\n                self.fields[\"cutOut\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutOut.getValue(),\n                    label=\"Cut out (%s)\" % tr.cutOut.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutOut\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut out\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutOut\"])\n        except Exception:\n            self.fields[\"cutOut\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut out\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutOut\"])\n\n        # Cut in tolerance\n        try:\n            if tr is not None and tr.cutInTolerance is not None:\n                self.fields[\"cutInTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutInTolerance\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutInTolerance.getValue(),\n                    label=(\"Cut in tolerance (%s)\" % tr.cutInTolerance.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutInTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutInTolerance\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut in tolerance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutInTolerance\"])\n        except Exception:\n            self.fields[\"cutInTolerance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut in tolerance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutInTolerance\"])\n\n        # Cut on tolerance\n        try:\n            if tr is not None and tr.cutOutTolerance is not None:\n                self.fields[\"cutOutTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutOutTolerance.getValue(),\n                    label=(\"Cut out tolerance (%s)\" % tr.cutOutTolerance.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutOutTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut out tolerance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutOutTolerance\"])\n        except Exception:\n            self.fields[\"cutOutTolerance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut out tolerance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutOutTolerance\"])\n\n        # Transmittance\n        try:\n            if kwargs[\"initial\"][\"filter\"].transmittanceRange is not None:\n                self.fields[\"transmittance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"transmittance\"\n                            ),\n                        }\n                    ),\n                    initial=formatPercentFraction(\n                        kwargs[\"initial\"][\"filter\"]\n                        .getTransmittanceRange()\n                        .transmittance\n                    ),\n                    label=\"Transmittance (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"transmittance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"transmittance\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"transmittance\"])\n        except Exception:\n            self.fields[\"transmittance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"transmittance\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n            \"filterWheel\",\n            \"cutIn\",\n            \"cutOut\",\n            \"cutInTolerance\",\n            \"cutOutTolerance\",\n            \"transmittance\",\n        ]\n\n\nclass MetadataDetectorForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataDetectorForm, self).__init__(*args, **kwargs)\n\n        detSet = kwargs[\"initial\"][\"detectorSettings\"]\n        detector = kwargs[\"initial\"][\"detector\"]\n\n        # Manufacturer\n        try:\n            if detector is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"manufacturer\"),\n                        }\n                    ),\n                    initial=detector.manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"manufacturer\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if detector is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"model\"),\n                        }\n                    ),\n                    initial=detector.model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # SN\n        try:\n            if detector is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"serialNumber\"),\n                        }\n                    ),\n                    initial=detector.serialNumber,\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"serialNumber\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number (NB. Untill OMERO model is updated in 4.3, this will\n        # throw since lotNumber is not yet supported)\n        try:\n            if detector is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"lotNumber\"),\n                        }\n                    ),\n                    initial=detector.lotNumber,\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"lotNumber\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Type\n        try:\n            if detector.getDetectorType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detector.id, \"type\", options=True)\n                        }\n                    ),\n                    initial=detector.getDetectorType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detector.id, \"type\", options=True)\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        # Gain\n        try:\n            if detSet is not None:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(detSet.id, \"gain\")}\n                    ),\n                    initial=detSet.gain,\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"gain\"),\n                        }\n                    ),\n                    initial=detector.gain,\n                    required=False,\n                )\n            else:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(detSet.id, \"gain\")}\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"gain\"])\n        except Exception:\n            self.fields[\"gain\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"gain\"])\n\n        # Voltage\n        try:\n            if detSet is not None and detSet.voltage is not None:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detSet.voltage.getValue(),\n                    label=\"Voltage (%s)\" % detSet.voltage.getSymbol(),\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detector.voltage.getValue(),\n                    label=\"Voltage (%s)\" % detector.voltage.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"voltage\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"voltage\"])\n        except Exception:\n            self.fields[\"voltage\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"voltage\"])\n\n        # Offset\n        try:\n            if detSet is not None:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"offsetValue\"),\n                        }\n                    ),\n                    initial=detSet.offsetValue,\n                    label=\"Offset\",\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"offsetValue\"),\n                        }\n                    ),\n                    initial=detector.offsetValue,\n                    label=\"Offset\",\n                    required=False,\n                )\n            else:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"offsetValue\"),\n                        }\n                    ),\n                    label=\"Offset\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"offsetValue\"])\n        except Exception:\n            self.fields[\"offsetValue\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Offset\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"offsetValue\"])\n\n        # Zoom\n        try:\n            if detector is not None:\n                self.fields[\"zoom\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detector.zoom,\n                    required=False,\n                )\n            else:\n                self.fields[\"zoom\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"zoom\"])\n        except Exception:\n            self.fields[\"zoom\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"zoom\"])\n\n        # Amplification gain\n        try:\n            if detector is not None:\n                self.fields[\"amplificationGain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"amplificationGain\"),\n                        }\n                    ),\n                    initial=detector.amplificationGain,\n                    label=\"Amplification gain\",\n                    required=False,\n                )\n            else:\n                self.fields[\"amplificationGain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"amplificationGain\"),\n                        }\n                    ),\n                    label=\"Amplification gain\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"amplificationGain\"])\n        except Exception:\n            self.fields[\"amplificationGain\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Amplification gain\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"amplificationGain\"])\n\n        # Read out rate\n        try:\n            if detSet is not None and detSet.readOutRate is not None:\n                self.fields[\"readOutRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"readOutRate\"),\n                        }\n                    ),\n                    initial=detSet.readOutRate.getValue(),\n                    label=(\"Read out rate (%s)\" % detSet.readOutRate.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"readOutRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"readOutRate\"),\n                        }\n                    ),\n                    label=\"Read out rate\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"readOutRate\"])\n        except Exception:\n            self.fields[\"readOutRate\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Read out rate\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"readOutRate\"])\n\n        # Binning\n        try:\n            if detSet is not None:\n                self.fields[\"binning\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"binnings\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detSet.id, \"type\", options=True)\n                        }\n                    ),\n                    initial=detSet.getBinning().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"binning\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"binnings\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detSet.id, \"type\", options=True)\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"binning\"])\n        except Exception:\n            self.fields[\"binning\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"binning\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n            \"gain\",\n            \"voltage\",\n            \"offsetValue\",\n            \"zoom\",\n            \"amplificationGain\",\n            \"readOutRate\",\n            \"binning\",\n        ]\n\n\nclass MetadataLightSourceForm(forms.Form):\n\n    BOOLEAN_CHOICES = (\n        (\"\", \"---------\"),\n        (\"True\", \"True\"),\n        (\"False\", \"False\"),\n    )\n\n    def __init__(self, *args, **kwargs):\n        super(MetadataLightSourceForm, self).__init__(*args, **kwargs)\n\n        lightSource = kwargs[\"initial\"][\"lightSource\"]\n        lightSourceSettings = None\n        if \"lightSourceSettings\" in kwargs[\"initial\"]:\n            lightSourceSettings = kwargs[\"initial\"][\"lightSourceSettings\"]\n\n        self.lightSourceType = lightSource.OMERO_CLASS\n\n        # Manufacturer\n        try:\n            if lightSource.manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    initial=lightSource.manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if lightSource.model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    initial=lightSource.model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial Number\n        try:\n            if lightSource.serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"serialNumber\"),\n                        }\n                    ),\n                    initial=lightSource.serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"serialNumber\"),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot Number\n        try:\n            if lightSource.lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"lotNumber\"),\n                        }\n                    ),\n                    initial=lightSource.lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"lotNumber\"),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Power\n        try:\n            if lightSource.power is not None:\n                self.fields[\"power\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"power\"),\n                        }\n                    ),\n                    initial=lightSource.power.getValue(),\n                    label=\"Power (%s)\" % lightSource.power.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"power\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"power\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"power\"])\n        except Exception:\n            self.fields[\"power\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"power\"])\n\n        # Type\n        try:\n            if lightSource.getLightSourceType() is not None:\n                self.fields[\"lstype\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"lstypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Type\",\n                    initial=lightSource.getLightSourceType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"lstype\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"lstypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Type\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lstype\"])\n        except Exception:\n            self.fields[\"lstype\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Type\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lstype\"])\n\n        # Pump (laser only)\n        try:\n            # Will throw exception for non-Laser lightsources.\n            pump = lightSource.getPump()\n            pumpType = pump.OMERO_CLASS  # E.g. 'Arc'\n            pumpModel = pump.getModel()\n            pumpValue = \"%s: %s\" % (pumpType, pumpModel)\n            self.fields[\"pump\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=pumpValue,\n                required=False,\n            )\n        except Exception:\n            # Not a Laser - don't show Pump\n            self.fields[\"pump\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n        set_widget_attrs(self.fields[\"pump\"])\n\n        # Medium\n        try:\n            if lightSource.getLaserMedium() is not None:\n                self.fields[\"lmedium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"medium\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.getLaserMedium().value,\n                    label=\"Medium\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lmedium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"medium\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Medium\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lmedium\"])\n        except Exception:\n            self.fields[\"lmedium\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Medium\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lmedium\"])\n\n        # Wavelength\n        try:\n            if (\n                lightSourceSettings is not None\n                and lightSourceSettings.wavelength is not None\n            ):\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    initial=lightSourceSettings.wavelength.getValue(),\n                    label=(\n                        \"Wavelength (%s)\" % lightSourceSettings.wavelength.getSymbol()\n                    ),\n                    required=False,\n                )\n            elif lightSource.wavelength is not None:\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    initial=lightSource.wavelength.getValue(),\n                    label=(\"Wavelength (%s)\" % lightSource.wavelength.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"wavelength\"])\n        except Exception:\n            self.fields[\"wavelength\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"wavelength\"])\n\n        # FrequencyMultiplication\n        try:\n            if lightSource.frequencyMultiplication is not None:\n                self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"frequencyMultiplication\"\n                            ),\n                        }\n                    ),\n                    initial=lightSource.frequencyMultiplication,\n                    label=\"Frequency Multiplication\",\n                    required=False,\n                )\n            else:\n                self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"frequencyMultiplication\"\n                            ),\n                        }\n                    ),\n                    label=\"Frequency Multiplication\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"frequencyMultiplication\"])\n        except Exception:\n            self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Frequency Multiplication\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"frequencyMultiplication\"])\n\n        # Tuneable\n        try:\n            if lightSource.tuneable is not None:\n                self.fields[\"tuneable\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"tuneable\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.tuneable,\n                    required=False,\n                )\n            else:\n                self.fields[\"tuneable\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"tuneable\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"tuneable\"])\n        except Exception:\n            self.fields[\"tuneable\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"tuneable\"])\n\n        # Pulse\n        try:\n            if lightSource.pulse is not None:\n                self.fields[\"pulse\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"pulses\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pulse\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.pulse,\n                    required=False,\n                )\n            else:\n                self.fields[\"pulse\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"pulses\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pulse\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pulse\"])\n        except Exception:\n            self.fields[\"pulse\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pulse\"])\n\n        # Repetition Rate\n        try:\n            if lightSource.repetitionRate is not None:\n                self.fields[\"repetitionRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"repetitionRate\"),\n                        }\n                    ),\n                    initial=lightSource.repetitionRate.getValue(),\n                    label=(\n                        \"Repetition rate (%s)\" % lightSource.repetitionRate.getSymbol()\n                    ),\n                    required=False,\n                )\n            else:\n                self.fields[\"repetitionRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"repetitionRate\"),\n                        }\n                    ),\n                    label=\"Repetition rate\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"repetitionRate\"])\n        except Exception:\n            self.fields[\"repetitionRate\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Repetition rate\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"repetitionRate\"])\n\n        # Pockel Cell\n        try:\n            if lightSource.pockelCell is not None:\n                self.fields[\"pockelCell\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pockelCell\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.pockelCell,\n                    label=\"Pockel Cell\",\n                    required=False,\n                )\n            else:\n                self.fields[\"pockelCell\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pockelCell\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Pockel Cell\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pockelCell\"])\n        except Exception:\n            self.fields[\"pockelCell\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pockel Cell\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pockelCell\"])\n\n        # Attenuation\n        if (\n            lightSourceSettings is not None\n            and lightSourceSettings.attenuation is not None\n        ):\n            self.fields[\"attenuation\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(\n                    attrs={\n                        \"size\": 25,\n                        \"onchange\": save_metadata(\n                            lightSourceSettings.id, \"attenuation\"\n                        ),\n                    }\n                ),\n                initial=formatPercentFraction(lightSourceSettings.attenuation),\n                label=\"Attenuation (%)\",\n                required=False,\n            )\n        else:\n            self.fields[\"attenuation\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n        set_widget_attrs(self.fields[\"attenuation\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"power\",\n            \"lstype\",\n            \"pump\",\n            \"lmedium\",\n            \"wavelength\",\n            \"frequencyMultiplication\",\n            \"tuneable\",\n            \"pulse\",\n            \"repetitionRate\",\n            \"pockelCell\",\n            \"attenuation\",\n        ]\n\n\nclass MetadataEnvironmentForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataEnvironmentForm, self).__init__(*args, **kwargs)\n\n        # Imaging environment\n\n        imagingEnv = kwargs[\"initial\"][\"image\"].getImagingEnvironment()\n        # Temperature\n        try:\n            if imagingEnv.temperature is not None:\n                self.fields[\"temperature\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"temperature\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.temperature.getValue(),\n                    label=(\"Temperature (%s)\" % imagingEnv.temperature.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"temperature\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"temperature\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"temperature\"])\n        except Exception:\n            self.fields[\"temperature\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"temperature\"])\n\n        # Air Pressure\n        try:\n            if imagingEnv.airPressure is not None:\n                self.fields[\"airPressure\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"airPressure\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.airPressure.getValue(),\n                    label=(\"Air Pressure (%s)\" % imagingEnv.airPressure.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"airPressure\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"airPressure\"\n                            ),\n                        }\n                    ),\n                    label=\"Air Pressure\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"airPressure\"])\n        except Exception:\n            self.fields[\"airPressure\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                label=\"Air Pressure\",\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"airPressure\"])\n\n        # Humidity\n        try:\n            if imagingEnv.humidity is not None:\n                self.fields[\"humidity\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"humidity\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.humidity,\n                    required=False,\n                )\n            else:\n                self.fields[\"humidity\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"humidity\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"humidity\"])\n        except Exception:\n            self.fields[\"humidity\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"humidity\"])\n\n        # CO2 percent\n        try:\n            if imagingEnv.co2percent is not None:\n                self.fields[\"co2percent\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"co2percent\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.co2percent,\n                    label=\"CO2 (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"co2percent\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"co2percent\"\n                            ),\n                        }\n                    ),\n                    label=\"CO2 (%)\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"co2percent\"])\n        except Exception:\n            self.fields[\"co2percent\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"CO2 (%)\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"co2percent\"])\n\n        self.fields.keyOrder = [\"airPressure\", \"co2percent\", \"humidity\", \"temperature\"]\n\n\nclass MetadataStageLabelForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataStageLabelForm, self).__init__(*args, **kwargs)\n\n        # Stage label\n\n        # Position x\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positionx\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionx\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positionx,\n                    label=\"Position X\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positionx\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionx\"\n                            ),\n                        }\n                    ),\n                    label=\"Position X\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positionx\"])\n        except Exception:\n            self.fields[\"positionx\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position X\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionx\"])\n\n        # Position y\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positiony\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positiony\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positiony,\n                    label=\"Position Y\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positiony\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positiony\"\n                            ),\n                        }\n                    ),\n                    label=\"Position Y\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positiony\"])\n        except Exception:\n            self.fields[\"positiony\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position Y\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionx\"])\n\n        # Position z\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positionz\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionz\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positionz,\n                    label=\"Position Z\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positionz\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionz\"\n                            ),\n                        }\n                    ),\n                    label=\"Position Z\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positionz\"])\n        except Exception:\n            self.fields[\"positionz\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position Z\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionz\"])\n\n        self.fields.keyOrder = [\"positionx\", \"positiony\", \"positionz\"]\n", "\n//   Copyright (C) 2015 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n//   Here we setup and configure the jstree\n\n// jQuery load callback...\n$(function() {\n\n    // Flag holding curent single / multi selection status\n    var multiselection = false;\n\n    // Select jstree and then cascade handle events and setup the tree.\n    var jstree = $(\"#dataTree\")\n    .on('changed.jstree', function (e, data) {\n        var inst = data.instance;\n        buttonsShowHide(inst.get_selected(true), inst);\n\n        // Load on selection, but not open because that breaks key navigation\n        if (data.node &&\n            inst.is_parent(data.node) &&\n            !inst.is_loaded(data.node) &&\n            !inst.is_loading(data.node)) {\n            inst.load_node(data.node);\n        }\n\n        multiselection = data.selected.length > 1;\n\n        OME.tree_selection_changed(data, e);\n        if (OME.hideWellBirdsEye) {\n            OME.hideWellBirdsEye();\n        }\n    })\n    .on('selection_change.ome', function(e, nElements) {\n        multiselection = nElements > 1;\n        // NB: Don't return false - let event bubble up to $(\"body\")\n    })\n    .on('copy_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is pasted\n        * Updates the server, adding the new link\n        */\n        var inst = data.instance;\n\n        // The data is not cloned when the node is copied, do that manually\n        data.node.data = JSON.parse(JSON.stringify(data.original.data));\n\n        // Copy the data for any child nodes in the copy as well\n        for(var i = 0; i < data.original.children_d.length; i++) {\n            var originalData = inst.get_node(data.original.children_d[i]).data;\n            originalData = JSON.parse(JSON.stringify(originalData));\n            inst.get_node(data.node.children_d[i]).data = originalData;\n        }\n\n        // Remove potential duplicate node\n        var childExists = removeDuplicate(inst, data.node, data.parent);\n\n        // Persist\n        if (!childExists) {\n            $.when(linkNode(inst, data.node, inst.get_node(data.parent))).done(function() {\n                update_thumbnails_panel(e, data);\n            });\n        } else {\n            update_thumbnails_panel(e, data);\n        }\n\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n\n        // Add to other identical nodes as well\n        updateParentInsertNode(inst, data.node, inst.get_node(data.parent), data.position);\n    })\n    .on('move_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is moved\n        * Updates the server, removing the old link and adding the new\n        */\n        var inst = data.instance;\n        // Remove potential duplicate node\n        var childExists = removeDuplicate(inst, data.node, data.parent);\n\n        // trigger ome remove\n        $(\"body\").trigger('removed_node.jstree.ome', data.node.data.obj);\n\n        // Persist\n        var linkPromise;\n        // If the move is orphaning an object, do not persist the link\n        if (data.parent.type !== 'experimenter' &&\n            data.parent.type !== 'orphaned' && !childExists) {\n            linkPromise = linkNode(inst, data.node, inst.get_node(data.parent));\n        }\n        var unlinkPromise = unlinkNode(inst, data.node, inst.get_node(data.old_parent));\n\n        $.when(linkPromise, unlinkPromise).done(function() {\n            update_thumbnails_panel(e, data);\n        });\n\n        // Add/Remove node to/from other identical nodes as well\n        updateParentInsertNode(inst, data.node, inst.get_node(data.parent), data.position);\n        updateParentRemoveNode(inst, data.node, inst.get_node(data.old_parent));\n\n        // Update the child counts\n        OME.updateNodeChildCount(inst, data.parent);\n        OME.updateNodeChildCount(inst, data.old_parent);\n\n    })\n    .on('delete_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is deleted\n        * Simply removes the node, we do not update the server here as there\n        * is a need to delete nodes without persisting. E.g. when a dataset\n        * is updated to match another instance of itself elsewhere in the tree\n        */\n        var inst = data.instance;\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n    })\n    .on('create_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is created\n        * Simply adds the node, we do not update the server here as there\n        * is a need to create nodes without persisting. E.g. when a dataset\n        * is updated to match another instance of itself elsewhere in the tree\n        */\n        var inst = data.instance;\n\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n    })\n    .on('loaded.jstree', function(e, data) {\n        /**\n        * Fired when the tree is loaded and ready for action\n        */\n        var inst = data.instance;\n        // Global variable specifies what to select\n        var nodeIds = WEBCLIENT.initially_open;\n        if (nodeIds.length === 0) {\n            // If not found, just select root node\n            inst.select_node('ul > li:first');\n        } else {\n            // We load hierachy for last item (ignore 'well' since not in tree)\n            nodeIds = nodeIds.filter(function(n){return !n.startsWith('well')});\n            var paramSplit = nodeIds[nodeIds.length-1].split(/-(.+)/);\n\n            var payload = {};\n            payload[paramSplit[0]] = paramSplit[1];\n\n            // AJAX Query to get the path of the item we wish to 'show'\n            $.ajax({\n                url: WEBCLIENT.URLS.api_paths_to_object,\n                data : payload,\n                dataType: \"json\",\n                type: \"GET\",\n                success: function(json) {\n                    data = json.paths;\n                    // Use the open_node callback mechanism to facilitate loading the tree to the\n                    // point indicated by the path, starting from the top, 'experimenter'.\n                    if (data.length === 0) {\n                        // If not found, just select root node\n                        inst.select_node('ul > li:first');\n                        return;\n                    }\n                    var getTraverse = function(path) {\n                        var traverse = function(index, parentNode) {\n                            // Get this path component\n                            var comp = path[index];\n                            var lastIndex = path.length - 1;\n                            // Get the node for this path component\n                            var node = inst.locate_node(comp.type + '-' + comp.id, parentNode)[0];\n\n                            // if we've failed to find root, we might be showing \"All Members\". Try again...\n                            if (index === 0 && !node) {\n                                node = inst.locate_node(comp.type + '-' + '-1', parentNode)[0];\n                            }\n                            \n                            // If at any point the node doesn't exist, simply give up as the path has\n                            // become invalid\n                            if (!node) {\n                                return;\n                            }\n                            // If we have a 'childPage' greater than 0, need to paginate\n                            if (comp.childPage) {\n                                inst._set_page(node, comp.childPage);\n                            }\n\n                            if (index < lastIndex) {\n                                inst.open_node(node, function() {\n                                    traverse(index += 1, node);\n                                });\n                            // Otherwise select it\n                            } else {\n                                inst.select_node(node);\n                                inst.open_node(node);\n                                // we also focus the node, to scroll to it and setup hotkey events\n                                $(\"#\" + node.id).children('.jstree-anchor').focus();\n                                // Handle multiple selection. E.g. extra images in same dataset\n                                for(var n=1; n<WEBCLIENT.initially_select.length; n++) {\n                                    node = inst.locate_node(WEBCLIENT.initially_select[n], parentNode)[0];\n                                    if(node) {\n                                        inst.select_node(node);\n                                    }\n                                }\n                            }\n                        };\n                        return traverse;\n                    }\n                    var i;\n                    for (i=0; i < (data.length); i++) {\n                        var path = data[i];\n                        var traverse = getTraverse(path)\n                        // Start traversing at the start of the path with no parent node\n                        try {\n                            traverse(0, undefined);\n                        } finally {\n                        }\n                    }\n                },\n\n                error: function(json) {\n                    // Global error handling is sufficient here\n                }\n            });\n        }\n\n        // Update the URL to remove the parameters as they serve to preload data this one\n        // time only\n        // history.pushState({}, '', window.location.pathname);\n    })\n    .on(\"click.jstree\", \".jstree-anchor\", function (e) {\n        e.preventDefault();\n        var datatree = $.jstree.reference($('#dataTree'));\n        // Expand on click (not select because of key navigation)\n        if (datatree.is_parent(this)) {\n            datatree.open_node(this);\n        }\n    })\n    .on(\"dblclick.jstree\", \".jstree-anchor\", function (e) {\n        e.preventDefault();\n        var datatree = $.jstree.reference($('#dataTree'));\n        var node = datatree.get_node(this);\n        if (node) {\n            if (node.type === 'image') {\n                //Open the image viewer for this image\n                var url = WEBCLIENT.URLS.webindex + \"img_detail/\" + node.data.obj.id + \"/\";\n                // Add dataset id so the viewer can know its context\n                var inst = $.jstree.reference('#dataTree');\n                var parent = datatree.get_node(node.parent);\n                if (parent && parent.data) {\n                    if (parent.type === 'dataset') {\n                        url += '?' + parent.type + '=' + parent.data.id\n                    }\n                }\n                window.open(url, '_blank');\n            }\n        }\n    })\n    .on('keydown.jstree', '.jstree-anchor', function (e) {\n        var datatree = $.jstree.reference($('#dataTree')),\n            prev, next;\n\n        switch(e.which) {\n            // Up\n            case 38:\n                e.preventDefault();\n                prev = datatree.get_prev_dom(this);\n                if(prev && prev.length) {\n                    datatree.deselect_all();\n                    datatree.select_node(prev);\n                }\n                break;\n            // Down\n            case 40:\n                e.preventDefault();\n                next = datatree.get_next_dom(this);\n                if(next && next.length) {\n                    datatree.deselect_all();\n                    datatree.select_node(next);\n                }\n                break;\n            // Left\n            case 37:\n                e.preventDefault();\n                if(!datatree.is_open(this)) {\n                    prev = datatree.get_parent(this);\n                    if(prev && prev.length) {\n                        datatree.deselect_all();\n                        datatree.select_node(prev);\n                    }\n                }\n                break;\n            // Right\n            case 39:\n                e.preventDefault();\n                // opening of node is handled by jsTree, we just select...\n                if(!datatree.is_closed(this)) {\n                    next = datatree.get_next_dom(this);\n                    if(next && next.length) {\n                        datatree.deselect_all();\n                        datatree.select_node(next);\n                    }\n                }\n                break;\n        }\n\n    })\n    .on('refresh.jstree', function(){\n        var datatree = $.jstree.reference($('#dataTree'));\n\n        // Use the cached selection in refreshPathsReverse to restore the selection after refresh\n        $.each(refreshPathsReverse, function(index, refreshPathReverse) {\n            // If all parts of the path match the located node then select it\n            var locatedNodes = datatree.locate_node(refreshPathReverse[0][0] +\n                               '-' +\n                               refreshPathReverse[0][1]);\n            $.each(locatedNodes, function(index, node) {\n                var traverseNode = node;\n                var matched = true;\n                $.each(refreshPathReverse, function(index, pathComponent) {\n                    if (traverseNode &&\n                        traverseNode.type === pathComponent[0] &&\n                        traverseNode.data.obj.id === pathComponent[1]) {\n                        // Update traverseNode to be its own parent\n                        traverseNode = datatree.get_node(datatree.get_parent(traverseNode));\n                    } else {\n                        matched = false;\n                        // Exit refreshPathReverse each loop\n                        return false;                            }\n                });\n\n                if (matched) {\n                    datatree.select_node(node);\n                    // Exit locatedNodes each loop\n                    return false;\n                }\n            });\n\n        });\n        // Clear refreshPathsReverse after selection has been restored\n        refreshPathsReverse = [];\n        // Re-enable the refresh button as it may have been disabled to\n        // prevent race conditions occurring from multiple clicks in quick\n        // succession.\n        $('#refreshButton').removeAttr(\"disabled\");\n    })\n\n    // Setup jstree\n    .jstree({\n        'plugins': ['types', 'contextmenu', 'dnd', 'sort', 'locate',\n                    'ometools', 'conditionalselect', 'pagination', 'fields',\n                    'truncatetext', 'childcount', 'omecut'],\n        // The jstree core\n        'locate' : {\n            // Returns a key for this node\n            'locate_function': function(node) {\n                // In some cases, this function is called before the data attribute exists\n                // These should be ignored, this will be called again later when it is\n                // populated.\n                if (!node.hasOwnProperty('data') ||\n                    node.data === undefined ||\n                    node.data === null) {\n                    return false;\n                }\n                return node.type + '-' + node.data.obj.id;\n            }\n        },\n\n        'conditionalselect' : {\n            // Checks if a selection should be allowed\n            'conditionalselect_function': function(node) {\n                var inst = this;\n                var selected = inst.get_selected(true);\n                // As this function will previously have prevented cross-select, just\n                // check the first selection instead.\n                if (selected.length > 0 && selected[0].type !== node.type) {\n                    return false;\n                }\n\n                // Also disallow the selection if it is a multi-select and the new target\n                // is already selected\n                selected = inst.get_selected(true);\n                var allowSelect = true;\n                $.each(selected, function(index, sel) {\n                    if (sel.type === node.type && sel.data.obj.id === node.data.obj.id) {\n                        allowSelect = false;\n                        // Break out of each\n                        return false;\n                    }\n                });\n\n                return allowSelect;\n\n            }\n        },\n        'omecut': {\n            'path_url': WEBCLIENT.URLS.api_paths_to_object\n        },\n        'core' : {\n            'themes': {\n                'dots': false,\n                'variant': 'ome'\n            },\n            'force_text': true,\n            // Make use of function for 'data' because there are some scenarios in which\n            // an ajax call is not used to get the data. Namely, the all-user view\n            'data' : function(node, callback, payload) {\n                // Get the data for this query\n                if (payload === undefined) {\n                    // Check for existing 'payload' data, used to initialise the jsTree\n                    payload = this.element.data('payload');\n                    // clear data\n                    $.removeData(this.element[0], \"payload\");\n                }\n                payload = payload || {}\n                // We always use the parent id to fitler. E.g. experimenter id, project id etc.\n                // Exception to this for orphans as in the case of api_images, id is a dataset\n                if (node.hasOwnProperty('data') && node.type != 'orphaned') {\n                    // NB: In case of loading Tags, we don't want to use 'id' for top level\n                    // since that will filter by tag.\n                    // TODO: fix inconsistency between url apis by using 'owner'\n                    var tagroot = (WEBCLIENT.URLS.tree_top_level === WEBCLIENT.URLS.api_tags_and_tagged &&\n                            node.type === 'experimenter');\n\n                    if (node.data.hasOwnProperty('obj')) {\n                        // Allows to load custom parameters to QUERY_STRING\n                        if (node.data.obj.hasOwnProperty('extra')) {\n                            $.extend(payload, node.data.obj.extra)\n                        }\n                    }\n\n                    if (!tagroot && node.data.hasOwnProperty('obj')) {\n                        // Allows to load custom parameters to QUERY_STRING\n                        payload['id'] = node.data.obj.id;\n                    }\n\n                    if (tagroot) {\n                        // Don't show tags that are in tagsets\n                        payload['orphaned'] = true;\n                    }\n                }\n\n                // Work back up the tree to obtain the id of the user we are viewing,\n                // this is useful in the case of orphaned image listing in particular.\n                // It may also be appropriate to use it to filter the queries in other\n                // places as well.\n                var inst = this;\n\n                // This path does not include the root node so the first entry is always\n                // the experimenter node except on inital load in which case it is false\n                var path = inst.get_path(node, false, true);\n                // Include the experimenter_id if we are loading an experimenter or\n                // orphaned node\n                if (path && (node.type === 'experimenter' || node.type === 'orphaned')) {\n                    payload['experimenter_id'] = inst.get_node(path[0]).data.obj.id;\n                }\n\n                // If this is a node which can have paged results then either specify that\n                // we want the specific page, or use default first page\n\n                // Disable paging for node without counter\n                var nopageTypes = WEBCLIENT.UI.TREE.pagination_nodes;\n                if (nopageTypes.indexOf(node.type) > -1) {\n                    // TODO: temporary workaround to not paginate datasets,\n                    // plates and acquisitions\n                    // see center_plugin.thumbs.js.html\n                    payload['page'] = 0;\n                } else {\n                    // Attempt to get the current page desired if there is one\n                    var page = inst.get_page(node);\n                    payload['page'] = page;\n                }\n\n                // Specify that orphans are specifically sought\n                if (node.type === 'orphaned') {\n                    payload['orphaned'] = true;\n                }\n\n                // Extra data needed for showing thumbs in centre panel\n                if (node.type === 'dataset' || node.type === 'orphaned' || node.type === 'tag') {\n                    payload['sizeXYZ'] = true;\n                    payload['date'] = true;\n                }\n\n                // Always add the group_id from the current context\n                payload['group'] = WEBCLIENT.active_group_id;\n\n\n                // Configure URL for request\n                // Get the type of the node being expanded\n                // Figure out what type of children it should have\n                // Request the list of children from that url, adding any relevant filters\n                var url;\n                if (node.type === 'experimenter') {\n                    // This will be set to containers or tags url, depending on page we're on \n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'map') {\n                    url = WEBCLIENT.URLS.tree_map_level;\n                } else if (node.type === 'tagset') {\n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'tag') {\n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'project') {\n                    url = WEBCLIENT.URLS.api_datasets;\n                } else if (node.type === 'dataset') {\n                    url = WEBCLIENT.URLS.api_images;\n                } else if (node.type === 'screen') {\n                    url = WEBCLIENT.URLS.api_plates;\n                } else if (node.type === 'plate') {\n                    url = WEBCLIENT.URLS.api_plate_acquisitions;\n                } else if (node.type === 'orphaned') {\n                    url = WEBCLIENT.URLS.api_images;\n                } else if (node.id === '#') {\n                    // Here we handle root of jsTree\n                    // Experimenhter ID is set for user ID or -1 for entire group\n                    url = WEBCLIENT.URLS.api_experimenter;\n                }\n\n                if (url === undefined) {\n                    return;\n                }\n\n                $.ajax({\n                    url: url,\n                    data: payload,\n                    success: function (data, textStatus, jqXHR) {\n                        callback.call(this, data);\n                    },\n                    error: function (jqXHR, textStatus, errorThrown) {\n                        // Global error handling is sufficient here\n                    },\n                    // Converter is required because the JSON format being returned is not\n                    // jstree specific.\n                    'converters' : {\n                        \"text json\": function (json) {\n                            var data = JSON.parse(json),\n                                jstree_data = [],\n                                node;\n\n                            // Add experimenters to the jstree data structure\n                            // This handles multiple experimenters in the tree\n                            // if (data.hasOwnProperty('experimenters')) {\n                            //     $.each(data.experimenters, function(index, value) {\n                            //         var node = {\n                            //             'data': {'id': value.id, 'obj': value},\n                            //             'text': value.firstName + ' ' + value.lastName,\n                            //             'children': true,\n                            //             'type': 'experimenter',\n                            //             'state': {\n                            //             },\n                            //             'li_attr': {\n                            //                 'data-id': value.id\n                            //             }\n                            //         };\n\n                            //         // Add 'state' opened for the current user by default\n                            //         {% if active_user %}\n                            //             if (value.id == {{ active_user.getId }}) {\n                            //                 node.state['opened'] = true;\n                            //             }\n                            //         {% endif %}\n\n                            //         jstree_data.push(node);\n                            //     });\n                            // }\n                            function makeNode(value, type) {\n                                var rv = {\n                                    'data': {'id': value.id, 'obj': value},\n                                    'text': value.name,\n                                    'children': value.childCount ? true : false,\n                                    'type': type,\n                                    'state': value.state ? value.state : {'opened': false},\n                                    'li_attr': {\n                                        'data-id': value.id\n                                    },\n                                    'extra': value.extra\n                                };\n                                if (type === 'experimenter') {\n                                    rv.text = value.firstName + ' ' + value.lastName;\n                                    rv.state = value.state ? value.state : {'opened': true},\n                                    rv.children = true;\n                                } else if (type === 'tag') {\n                                    // We don't count children for Tags (too expensive?) Assume they have children\n                                    rv.children = true;\n                                    rv.type = value.set ? 'tagset' : 'tag';\n                                    rv.text = value.value;\n                                }\n                                return rv;\n                            }\n\n                            if (data.hasOwnProperty('experimenter')) {\n                                node = makeNode(data.experimenter, 'experimenter');\n                                jstree_data.push(node);\n                            }\n\n                            if (data.hasOwnProperty('maps')) {\n                                $.each(data.maps, function(index, value) {\n                                    var node = makeNode(value, 'map');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add tags to the jstree data structure\n                            if (data.hasOwnProperty('tags')) {\n                                $.each(data.tags, function(index, value) {\n                                    var node = makeNode(value, 'tag');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add projects to the jstree data structure\n                            if (data.hasOwnProperty('projects')) {\n                                $.each(data.projects, function(index, value) {\n                                    var node = makeNode(value, 'project');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add datasets to the jstree data structure\n                            if (data.hasOwnProperty('datasets')) {\n                                $.each(data.datasets, function(index, value) {\n                                    var node = makeNode(value, 'dataset');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add images to the jstree data structure\n                            if (data.hasOwnProperty('images')) {\n                                $.each(data.images, function(index, value) {\n                                    var node = makeNode(value, 'image');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add screens to the jstree data structure\n                            if (data.hasOwnProperty('screens')) {\n                                $.each(data.screens, function(index, value) {\n                                    var node = makeNode(value, 'screen');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add plates to the jstree data structure\n                            if (data.hasOwnProperty('plates')) {\n                                $.each(data.plates, function(index, value) {\n                                    var node = makeNode(value, 'plate');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add acquisitions (runs) to the jstree data structure\n                            if (data.hasOwnProperty('acquisitions')) {\n                                $.each(data.acquisitions, function(index, value) {\n                                    var node = makeNode(value, 'acquisition');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add wells to the jstree data structure\n                            if (data.hasOwnProperty('wells')) {\n                                $.each(data.wells, function(index, value) {\n                                    var node = makeNode(value, 'well');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            if (data.hasOwnProperty('orphaned')) {\n                                node = {\n                                    'data': {'obj': data.orphaned},\n                                    'text': data.orphaned.name,\n                                    'children': data.orphaned.childCount > 0 ? true : false,\n                                    'type': 'orphaned'\n                                };\n                                jstree_data.push(node);\n                            }\n\n                            return jstree_data;\n                        }\n\n                    }\n                });\n            },\n            'check_callback': function(operation, node, node_parent, node_position, more) {\n                // This is used to check if we can drag and drop, paste etc.\n                // Before this (and thus before the copy and the paste) the nodes children\n                // are loaded. This is important as it allows us to weed out potential\n                // conflicts in the copy, i.e. where a link to the object already exists\n                // Called once per item being moved\n                // TODO Should be impossible to delete a link from orphans\n                var inst = $.jstree.reference(node);\n                var oldParent;\n\n                // Sometimes '#' pops up in the destination of d'n'd, discount this\n                if (node_parent.id === '#') {\n                    return false;\n                }\n\n                // Discount moves to a duplicate for both dnd checking and actual copy/move\n                // Also ensure sourec and destination are linkable\n                if (operation === 'copy_node' || operation === 'move_node') {\n                    oldParent = inst.get_node(node.parent);\n                    if (oldParent.type === node_parent.type &&\n                        oldParent.data.obj.id === node_parent.data.obj.id) {\n                        return false;\n                    }\n                }\n\n                // On actual copy/move allow all valid\n                if (more && more.core &&\n                    (operation === 'copy_node' || operation === 'move_node')) {\n                    // Check that the user has permission to list on the new parent\n                    // or that their user themselves is the new parent\n                    // or that their 'orphaned' directory is the new parent\n                    if (!OME.nodeHasPermission(node_parent, 'canLink') &&\n                        node_parent.type !== 'experimenter' &&\n                        node_parent.type !== 'orphaned' &&\n                        node_parent.data.obj.id !== WEBCLIENT.active_group_id) {\n                        return false;\n                    }\n                    return true;\n                // For dnd checking if it can copy/move\n                } else if (operation === 'copy_node' || operation === 'move_node') {\n                    // Only allow 'drop' if we 'canLink' or target is 'experimenter'\n                    if (!OME.nodeHasPermission(node_parent, 'canLink') &&\n                            node_parent.type !== 'experimenter') {\n                        return false;\n                    }\n                    // If we are about to make object an orphan, don't allow to\n                    // drop while dragging over parent, or between parent and it's children\n                    if (node_parent.type === 'experimenter') {\n                        if (oldParent && more) {\n                            var pIdx = $(\"#\"+oldParent.id).index();\n                            if (pIdx === node_position && more.pos === \"b\") {\n                                return false;\n                            }\n                            if (pIdx + 1 === node_position && more.pos === \"a\") {\n                                return false;\n                            }\n                        }\n                    }\n\n                    var nodeRules = inst.get_rules(node);\n                    var parentRules = inst.get_rules(node_parent);\n                    if (parentRules.valid_children != -1 &&\n                        parentRules.valid_children.indexOf(node.type) > -1) {\n                        return true;\n                    }\n                    return false;\n                }\n                // Default to allowing all operations\n                // 'copy_node', 'move_node' Handled above\n                // 'delete_node', 'rename_node': true\n                return true;\n            }\n        },\n        'types' : {\n            '#' : {\n                'valid_children': ['experimenter']\n            },\n            'default': {\n                'draggable': false\n            },\n            'experimenter': {\n                'icon' : WEBCLIENT.URLS.static_webclient + 'image/icon_user.png',\n                'valid_children': ['project','dataset','screen','plate', 'tag', 'tagset']\n            },\n            'map': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_map.png',\n                'valid_children': ['project', 'screen'],\n                'draggable': false\n            },\n            'tagset': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tags.png',\n                'valid_children': ['tagset','tag']\n            },\n            'tag': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tag.png',\n                'valid_children': ['project', 'dataset', 'image', 'screen', 'plate', 'acquisition', 'well'],\n                'draggable': true\n            },\n            'project': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder16.png',\n                'valid_children': ['dataset']\n            },\n            'dataset': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_image16.png',\n                'valid_children': ['image'],\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'image': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/image16.png',\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'screen': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_screen16.png',\n                'valid_children': ['plate']\n            },\n            'plate': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_plate16.png',\n                'valid_children': ['acquisition'],\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'acquisition': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/run16.png',\n            },\n            'well': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/well16.png',\n            },\n            'orphaned': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_yellow16.png',\n                'valid_children': ['image']\n            }\n\n        },\n        'dnd': {\n            'is_draggable': function(nodes) {\n                var inst = $.jstree.reference(nodes[0]);\n                // Check if the node types are draggable and the particular nodes have the\n                // 'canLink' permission. All must pass\n                // Don't allow dragging of any object from under a tag\n                for (var index in nodes) {\n                    var node = nodes[index];\n                    if (!inst.get_rules(node).draggable ||\n                          !OME.nodeHasPermission(node, 'canLink') ||\n                            inst.get_node(node.parent).type === 'tag'\n                        ) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n        'contextmenu': {\n            'select_node': true,\n            'show_at_node': false,\n            'items' : function(node){\n                var config = {};\n\n                config[\"create\"] = {\n                    \"label\" : \"Create new\",\n                    \"_disabled\": true,\n                };\n\n                var tagTree = (WEBCLIENT.URLS.tree_top_level === WEBCLIENT.URLS.api_tags_and_tagged);\n                if (tagTree) {\n                    config[\"create\"][\"submenu\"] = {\n                        \"tagset\": {\n                            \"label\"     : \"Tag Set\",\n                            \"_disabled\" : true,\n                            \"icon\"      : WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tags.png',\n                            action      : function (node) {OME.handleNewContainer(\"tagset\"); },\n                        },\n                        \"tag\": {\n                            \"label\"     : \"Tag\",\n                            \"_disabled\" : true,\n                            \"icon\"      : WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tag.png',\n                            action      : function (node) {OME.handleNewContainer(\"tag\"); },\n                        }\n                    };\n                } else {\n                    config[\"create\"][\"submenu\"] = {\n                        \"project\": {\n                            \"label\" : \"Project\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder16.png',\n                            action: function (node) {OME.handleNewContainer(\"project\"); },\n                        },\n                        \"dataset\": {\n                            \"label\" : \"Dataset\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder_image16.png',\n                            action: function (node) {OME.handleNewContainer(\"dataset\"); },\n                          },\n                          \"screen\": {\n                            \"label\" : \"Screen\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder_screen16.png',\n                            action: function (node) {OME.handleNewContainer(\"screen\"); },\n                          }\n                    };\n                }\n\n                config[\"ccp\"] = {\n                    \"label\"     : \"Edit\",\n                    \"action\"    : false,\n                    \"_disabled\" : true,\n                    \"submenu\"   : {\n                        \"cut\"   :{\n                            \"label\" : \"Cut Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_cut_16.png',\n                            \"action\": function(data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var objs = inst.get_selected(true);\n                                inst.cut(objs);\n                                // Always disable paste button immediatly after using it\n                                enableToolbarButton('paste', false);\n                            }\n                        },\n                        \"copy\"  : {\n                            \"label\" : \"Copy Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_copy_16.png',\n\n\n                            \"action\": function (data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var objs = inst.get_selected(true);\n                                inst.copy(objs);\n                            }\n\n                        },\n                        \"paste\": {\n                            \"label\" : \"Paste Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function(data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var obj = inst.get_node(data.reference);\n                                // Paste whatever is in the paste buffer into obj\n                                inst.paste(obj);\n                                // Always disable paste button immediatly after using it\n                                enableToolbarButton('paste', false);\n                            }\n                        }\n                    }\n                };\n\n                config[\"delete\"] = {\n                    \"label\" : \"Delete\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_delete_16.png',\n                    \"action\": function(){\n                        var deleteUrl = WEBCLIENT.URLS.deletemany,\n                            filesetCheckUrl = WEBCLIENT.URLS.fileset_check;\n                        OME.handleDelete(deleteUrl, filesetCheckUrl, WEBCLIENT.USER.id);\n                    }\n                };\n\n                config[\"chgrp\"] = {\n                    \"label\" : \"Move to Group...\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_user_16.png',\n                    \"action\": function() {\n                        // TODO - make sure this works with new jsTree\n                        OME.handleChgrp(WEBCLIENT.URLS.webindex, WEBCLIENT.URLS.static_webclient);\n                    }\n                };\n\n                config[\"chown\"] = {\n                    // title support needs js-tree patch: 5317ad21c\n                    \"title\": \"Only Admins or Group Owners can change ownership\",\n                    \"label\" : \"Change Owner...\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_user_16.png',\n                    \"action\": function() {\n                        OME.handleChown(WEBCLIENT.URLS.webindex, WEBCLIENT.URLS.static_webclient);\n                    }\n                };\n                \n                config[\"share\"] = {\n                    \"label\" : \"Create share\",\n                    \"_disabled\": function(){\n                        var selected = $.jstree.reference('#dataTree').get_selected(true);\n                        var enabled = true;\n                        $.each(selected, function(index, node) {\n                            if (node.type != 'image' || !OME.nodeHasPermission(node, 'canLink')) {\n                                enabled = false;\n                                // Break out of $.each\n                                return false;\n                            }\n                        });\n                        return !enabled;\n                    },\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_toolbar_share2.png',\n                    \"action\": function(){\n                        // We get_selected() within createShare()\n                        OME.createShare();\n                    }\n                };\n\n                config[\"renderingsettings\"] = {\n                    \"label\" : \"Rendering Settings...\",\n                    \"_disabled\": true,\n                    \"action\" : false,\n                    \"submenu\" : {\n                        \"copy_rdef\"  : {\n                            \"label\" : \"Copy\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_copy_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.copyRenderingSettings(WEBCLIENT.URLS.copy_image_rdef_json,\n                                    inst.get_selected(true));\n                                WEBCLIENT.HAS_RDEF = true;\n                            }\n                        },\n                        \"paste_rdef\": {\n                            \"label\" : \"Paste and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.pasteRenderingSettings(WEBCLIENT.URLS.copy_image_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        },\n                        \"reset_rdef\": {\n                            \"label\" : \"Set Imported and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.resetRenderingSettings(WEBCLIENT.URLS.reset_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        },\n                        \"owner_rdef\": {\n                            \"label\" : \"Set Owner's and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.applyOwnerRenderingSettings(WEBCLIENT.URLS.reset_owners_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        }\n                    }\n                };\n                if (WEBCLIENT.OPEN_WITH.length > 0) {\n                    // build a submenu of viewers...\n                    var viewers = WEBCLIENT.OPEN_WITH.map(function(v){\n                        let label = v.label || v.id;\n                        return {\n                            \"label\": label,\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree'),\n                                    sel = inst.get_selected(true),\n                                    dtypes = sel.map(function(s){\n                                        return s.type + \"=\" + s.data.id;\n                                    }),\n                                    query = dtypes.join(\"&\"),\n                                    // default url includes objects in query\n                                    url = v.url + \"?\" + query;\n                                // if plugin has added a url provider,\n                                // use it to update the url...\n                                if (v.getUrl) {\n                                    // prepare json of selected objects to pass to function\n                                    var selJson = sel.map(function(s){\n                                        // var o = $.extend({}, s.data.obj);\n                                        var o = {'id': s.data.obj.id,\n                                                 'name': s.data.obj.name,\n                                                 'type': s.type};\n                                        return o;\n                                    });\n                                    url = v.getUrl(selJson, v.url);\n                                }\n                                if (typeof url === 'function') {\n                                    // if url is callable, call and return\n                                    url();\n                                    return;\n                                }\n                                // ...otherwise we use default handling...\n                                window.open(url, '_blank');\n                            },\n                            \"_disabled\": function() {\n                                if (!OME.openWithDisabledByAjax) {\n                                    OME.openWithDisabledByAjax = {};\n                                }\n                                var sel = $.jstree.reference('#dataTree').get_selected(true),\n                                    // selType = 'image' or 'images' or 'dataset'\n                                    selType = sel.reduce(function(prev, s){\n                                        return s.type + (sel.length > 1 ? \"s\" : \"\");\n                                    }, \"undefined\"),\n                                    enabled = false;\n                                if (typeof v.isEnabled === \"function\") {\n                                    // If plugin has provided a function 'isEnabled'...\n                                    // prepare json of selected objects to pass to function\n                                    var selJson = sel.map(function(s){\n                                        var o = {'id': s.data.obj.id,\n                                                 'name': s.data.obj.name,\n                                                 'type': s.type};\n                                        return o;\n                                    });\n                                    let selKey = selJson.map(s => s.type + '-' + s.id).join(',');\n                                    if (OME.openWithDisabledByAjax[v.id] && OME.openWithDisabledByAjax[v.id][selKey] !== undefined) {\n                                        return OME.openWithDisabledByAjax[v.id][selKey];\n                                    }\n                                    // The callback function allows openwith to do an async call to establish enabled state\n                                    // and then call the callback with 'enable' true/false \n                                    enabled = v.isEnabled(selJson, function(enable) {\n                                        // If disabled, we change appearance of the menu-item (below), but we also need to make sure it\n                                        // is actually disabled. We can do this by returning 'true' from the _disabled function next\n                                        // time it is called for this open-with option with the same selected items. Set a disabled flag...\n                                        OME.openWithDisabledByAjax[v.id] = {}\n                                        OME.openWithDisabledByAjax[v.id][selKey] = !enable;\n                                        // the openwith script can use this callback to update the enabled state, eg. after an async ajax call.\n                                        // have to find the correct menu-item and disable\n                                        $(\".jstree-contextmenu\").find('li').each(function () {\n                                            let $li = $(this);\n                                            let itemText = $li.text();\n                                            // Find the child <li> with label\n                                            if (itemText.trim() === label) {\n                                                if (enable) {\n                                                    $li.removeClass('vakata-contextmenu-disabled');\n                                                } else {\n                                                    $li.addClass('vakata-contextmenu-disabled');\n                                                }\n                                            }\n                                        });\n\n                                    });\n                                    // OME.openWithDisabledByAjax[v.id] = !enabled;\n                                    return !enabled;\n                                }\n                                // ...Otherwise if supported_objects list is configured...\n                                // v.supported_objects is ['image'] or ['dataset', 'images'] etc.\n                                if (typeof v.supported_objects === \"object\" && v.supported_objects.length > 0) {\n                                    enabled = v.supported_objects.reduce(function(prev, supported){\n                                        // E.g. If supported_objects is 'images'...\n                                        return prev || supported.indexOf(selType) > -1;  // ... selType 'image' OR 'images' are > -1\n                                    }, false);\n                                }\n                                return !enabled;\n                            }\n                        };\n                    });\n                    config[\"open_with\"] = {\n                        \"label\": \"Open With...\",\n                        \"_disabled\": false,\n                        \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_openwith.png',\n                        \"action\": false,\n                        \"submenu\": viewers\n                    };\n                }\n\n                // List of permissions related disabling\n                // use canLink, canDelete etc classes on each node to enable/disable right-click menu\n\n                var userId = WEBCLIENT.active_user.id,\n                    // admin may be viewing a Group that they are not a member of\n                    memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1,\n                    writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1,\n                    allMembers = userId === -1,\n                    // canCreate if looking at your own data or 'All Members' OR User's data && writeOwned\n                    canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||\n                        (!allMembers && writeOwned)),\n                    canLink = OME.nodeHasPermission(node, 'canLink'),\n                    parentAllowsCreate = (node.type === \"orphaned\" || node.type === \"experimenter\");\n\n                canCreate = canCreate && WEBCLIENT.CAN_CREATE;  // global state for read-only server\n                if(canCreate) {\n                    // Enable tag or P/D/I submenus created above\n                    config[\"create\"][\"_disabled\"] = false;\n                    if (tagTree) {\n                        config[\"create\"][\"submenu\"][\"tagset\"][\"_disabled\"] = false;\n                        config[\"create\"][\"submenu\"][\"tag\"][\"_disabled\"] = false;\n                    } else {\n                        config[\"create\"][\"submenu\"][\"project\"][\"_disabled\"] = false;\n                        if (node.type === \"project\") {\n                            // If Project is selected don't try to create Dataset\n                            // unless we canLink or create link that belongs to user\n                            config[\"create\"][\"submenu\"][\"dataset\"][\"_disabled\"] = !(canLink || writeOwned);\n                        } else {\n                            config[\"create\"][\"submenu\"][\"dataset\"][\"_disabled\"] = false;\n                        }\n                        config[\"create\"][\"submenu\"][\"screen\"][\"_disabled\"] = false;\n                    }\n                }\n\n                // Disable delete if no canDelete permission\n                if (OME.nodeHasPermission(node, 'canDelete')) {\n                    config[\"delete\"][\"_disabled\"] = false;\n                }\n\n                // Enable 'Move to group' if 'canChgrp'\n                if(OME.nodeHasPermission(node, 'canChgrp')) {\n                    // Can chgrp everything except Plate 'run', 'tag' and 'tagset'\n                    if ([\"acquisition\", \"tag\", \"tagset\"].indexOf(node.type) === -1) {\n                        config[\"chgrp\"][\"_disabled\"] = false;\n                    }\n                }\n\n                // Can chown if Admin (with 'Chown' privilege) or Group owner\n                if (WEBCLIENT.current_admin_privileges.indexOf(\"Chown\") > -1 || \n                    WEBCLIENT.leader_of_groups.indexOf(WEBCLIENT.active_group_id) > -1) {\n                        config[\"chown\"][\"title\"] = false;\n                        config[\"chown\"][\"_disabled\"] = false;\n                }\n\n                if (canLink) {\n                    var to_paste = false,\n                        buffer = this.get_buffer(),\n                        parent_id = node.parent,\n                        parent_type = this.get_node(parent_id).type,\n                        node_type = node.type;\n\n                    if(this.can_paste() && buffer.node) {\n                        to_paste = buffer.node[0].type;\n                    }\n\n                    // Currently we allow to Cut, even if we don't delete parent link!\n                    // E.g. can Cut orphaned Image or orphaned Dataset. TODO: review this!\n                    var canCut = ([\"dataset\", \"image\", \"plate\", \"tag\"].indexOf(node_type) > -1);\n                    // In Tag tree. Don't allow cut under tag\n                    if (tagTree && node_type !== \"tag\") {\n                        canCut = false;\n                    }\n\n                    // Currently we only allow Copy if parent is compatible?! TODO: review this!\n                    var canCopy = ((node_type === \"dataset\" && parent_type === \"project\") ||\n                                    (node_type === \"image\" && parent_type === \"dataset\") ||\n                                    (node_type === \"plate\" && parent_type === \"screen\") ||\n                                    (node_type === \"tag\" && parent_type === \"tagset\"));\n                    // In Tag tree, can't Copy anything except tag\n                    if (tagTree && node_type !== \"tag\"){\n                        canCopy = false;\n                    }\n\n                    var canPaste = ((node_type === \"project\" && to_paste === \"dataset\") ||\n                                    (node_type === \"dataset\" && to_paste === \"image\") ||\n                                    (node_type === \"screen\" && to_paste === \"plate\") ||\n                                    (node_type === \"tagset\" && to_paste === \"tag\"));\n                    if (canCut || canCopy || canPaste){\n                        config[\"ccp\"][\"_disabled\"] = false;\n                        config[\"ccp\"][\"submenu\"][\"cut\"][\"_disabled\"] = !canCut;\n                        config[\"ccp\"][\"submenu\"][\"copy\"][\"_disabled\"] = !canCopy;\n                        config[\"ccp\"][\"submenu\"][\"paste\"][\"_disabled\"] = !canPaste;\n                    }\n                }\n\n                // If 'canAnnotate' we can Paste rdefs to various nodes\n                if (OME.nodeHasPermission(node, 'canAnnotate')) {\n                    if (node.type === 'dataset' ||\n                        node.type === 'plate' ||\n                        node.type === 'acquisition' ||\n                        node.type === 'image') {\n\n                        if (WEBCLIENT.HAS_RDEF) {\n                            // If the user has not got an object to copy, don't show the\n                            // paste option as a valid item\n                            config['renderingsettings'][\"submenu\"]['paste_rdef']['_disabled'] = false;\n                        }\n\n                        config['renderingsettings']['_disabled'] = false;\n                        config['renderingsettings'][\"submenu\"]['reset_rdef']['_disabled'] = false;\n                        config['renderingsettings'][\"submenu\"]['owner_rdef']['_disabled'] = false;\n                    }\n                }\n                // Only enable copying if an image is the node and only one node is selected\n                if (node.type === 'image') {\n                    config['renderingsettings']['_disabled'] = false;\n                    config['renderingsettings'][\"submenu\"]['copy_rdef']['_disabled'] = multiselection;\n                }\n                return config;\n            }\n\n        },\n        // TODO Performance of sort may not be realistic. The tree is mostly ordered correctly\n        // already, only insertions need to be corrected manually.\n        'sort': function(nodeId1, nodeId2) {\n            var inst = this;\n            var node1 = inst.get_node(nodeId1);\n            var node2 = inst.get_node(nodeId2);\n\n            function getRanking(node) {\n                // return rank based on 'omero.client.ui.tree.type_order' list\n                // first type is ranked 1 (the highest), last  is the lowest\n                var rank = WEBCLIENT.UI.TREE.type_order.indexOf(node.type);\n                if (rank > -1) {\n                    return rank;\n                }\n                // types not specified in 'omero.client.ui.tree.type_order'\n                // are sorted as loaded to jquery based on sql\n                return WEBCLIENT.UI.TREE.type_order.length + 1;\n            }\n\n            function sortingStrategy(node1, node2) {\n                // sorting strategy\n\n                // If the nodes are experimenters and one of them is the current user.\n                if(node1.type === 'experimenter') {\n                    if (node1.data.obj.id === WEBCLIENT.USER.id) {\n                        return -1;\n                    } else if (node2.data.obj.id === WEBCLIENT.USER.id) {\n                        return 1;\n                    }\n                }\n                var name1 = node1.text.toLowerCase();\n                var name2 = node2.text.toLowerCase();\n\n                // If names are same, sort by ID\n                if (name1 === name2) {\n                    return node1.data.obj.id <= node2.data.obj.id ? -1 : 1;\n                }\n                return name1 <= name2 ? -1 : 1;\n            }\n\n            // if sorting list is turned off mix object and sort by name\n            if (WEBCLIENT.UI.TREE.type_order.indexOf('false') > -1) {\n                return sortingStrategy(node1, node2);\n            }\n            // If the nodes are the same type then just compare lexicographically\n            if (node1.type === node2.type && node1.text && node2.text) {\n                return sortingStrategy(node1, node2);\n            // Otherwise explicitly order the type that might be siblings\n            } else {\n\n                var ranking1 = getRanking(node1);\n                var ranking2 = getRanking(node2);\n                return ranking1 <= ranking2 ? -1 : 1;\n            }\n        }\n    });\n});", "{% extends \"webgateway/base/container3.html\" %}\n{% load i18n %}\n{% load common_filters %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% comment %}\n<!--\n  This page controls the main 3-column layout of the webclient.\n  Templates can extend this one to add content to the 3 columns.\n  The initial template below this one is webclient/data/containers.html which has the data tree.\n-->\n{% endcomment %}\n\n\n{% block title %}\n    {% trans \"Webclient\" %}\n{% endblock %}\n\n\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"3rdparty/jquery.chosen-1.2.0/chosen.css\" %}\" type=\"text/css\" media=\"screen\"/>\n\n{% endblock %}\n\n{% block script %}\n\n    {{ block.super }}\n    <!-- required for the script_launch html below -->\n    {% include \"webclient/base/includes/script_launch_head.html\" %}\n\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.webclient.actions.js\"|add:url_suffix %}\"></script>\n    <script src=\"{% static 'webclient/javascript/jquery.infieldlabel-0.1.js' %}\" type=\"text/javascript\"></script>\n\n    <!-- Centre panel templating -->\n    <script type=\"text/javascript\" src=\"{% static '3rdparty/underscore/underscore-1.8.3-min.js' %}\"></script>\n    <!-- Include the underscore html templates -->\n    <script id=\"icon_thumbnails_template\" type=\"text/template\">\n        {% include \"webclient/data/icon_thumbnails_underscore.html\" %}\n    </script>\n    <script id=\"icon_header_template\" type=\"text/template\">\n        {% include \"webclient/data/icon_header_underscore.html\" %}\n    </script>\n    <script id=\"tags_template\" type=\"text/template\">\n        {% include \"webclient/annotations/tags_underscore.html\" %}\n    </script>\n    <script id=\"fileanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/fileanns_underscore.html\" %}\n    </script>\n    <script id=\"comments_template\" type=\"text/template\">\n        {% include \"webclient/annotations/comments_underscore.html\" %}\n    </script>\n    <script id=\"mapanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/mapanns_underscore.html\" %}\n    </script>\n    <script id=\"ratings_template\" type=\"text/template\">\n        {% include \"webclient/annotations/ratings_underscore.html\" %}\n    </script>\n    <script id=\"customanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/customanns_underscore.html\" %}\n    </script>\n\n    <!-- Toolbar -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.chosen-1.2.0/chosen.jquery.js\" %}\"></script>\n\n    <!-- The following are required by the right-hand panel, E.g. annotations/metadata_general.html -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.quicksearch-1.0.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.editinplace-0.1.2.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.form-3.51.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.tagging_form.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_tags_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_fileanns_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_comments_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_customanns_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_ratings_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_mapanns_pane.js\"|add:url_suffix %}\"></script>\n\n\n    <!-- preview viewer... -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.blockUI-2.66.0.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewport.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewportImage.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_slider.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.scalebardisplay.js\"|add:url_suffix %}\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\" %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.colorbtn.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.postit.css\"|add:url_suffix %}\" />\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.colorbtn.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/omero_image.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.smartdialog.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/aop-1.3.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.postit.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/d3-3.5.17/d3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.histogram.js\"|add:url_suffix %}\"></script>\n\n\n    <!-- ...including big images -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/utils.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/PanoJS.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/controls.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_thumbnail.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_info.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_svg.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_roi.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_scalebar.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.mousewheel-3.0.6.js\" %}\"></script>\n\n    <!-- hammer.js for tablet gestures -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/hammer-2.0.2/hammer.min.js\" %}\"></script>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/panojs-2.0.0/panojs.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.gs_slider.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.viewport.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n\n    <!-- scripts for SPW plate.html -->\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.plateview.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.spwgridview.js\"|add:url_suffix %}\"></script>\n\n    <script>\n\n        // OMERO constants\n        if (OMERO === undefined) {var OMERO = {};}\n        OMERO['constants'] = {\n            'namespaces': {\n                'NSCOMPANIONFILE': \"{{ omero.constants.NSCOMPANIONFILE }}\"\n            },\n            'annotation': {\n                'file': {'ORIGINALMETADATA': \"{{ omero.constants.ORIGINALMETADATA }}\"}\n            },\n            'metadata': {\n                'NSCLIENTMAPANNOTATION': \"{{ omero.constants.NSCLIENTMAPANNOTATION }}\"\n            }\n        };\n\n        // Variables used by static files, particularly ome.tree.js for jstree setup\n        // Also used by right panel annotation tabs\n        var WEBCLIENT = {};\n\n        WEBCLIENT.active_group_id = {{ active_group.id }};\n        WEBCLIENT.USER = {'id': {{ ome.user.id }}, 'fullName': \"{{ ome.user.getFullName }}\"};\n        WEBCLIENT.active_user = {'id': {{ ome.user_id }}, 'fullName': \"{{ active_user.getFullName }}\"};\n        WEBCLIENT.eventContext = {{ ome.eventContext|json_dumps|safe }};\n        WEBCLIENT.isAdmin = {% if ome.user.isAdmin %}true{% else %}false{% endif %};\n        WEBCLIENT.CAN_CREATE = {{ ome.can_create|json_dumps|safe }};\n        WEBCLIENT.current_admin_privileges = {{ current_admin_privileges|json_dumps|safe }};\n        WEBCLIENT.leader_of_groups = {{ leader_of_groups|json_dumps|safe }};\n\n        WEBCLIENT.URLS = {};\n        WEBCLIENT.URLS.webindex = \"{% url 'webindex' %}\";\n        WEBCLIENT.URLS.api_paths_to_object = \"{% url 'api_paths_to_object' %}\";\n        WEBCLIENT.URLS.api_containers = \"{% url 'api_containers' %}\";\n        WEBCLIENT.URLS.api_datasets = \"{% url 'api_datasets' %}\";\n        WEBCLIENT.URLS.api_images = \"{% url 'api_images' %}\";\n        WEBCLIENT.URLS.api_plates = \"{% url 'api_plates' %}\";\n        WEBCLIENT.URLS.api_plate_acquisitions = \"{% url 'api_plate_acquisitions' %}\";\n        WEBCLIENT.URLS.api_base = \"{% url 'api_base' 0 %}\";\n        WEBCLIENT.URLS.static_webclient = \"{% static 'webclient' %}/\";\n        WEBCLIENT.URLS.static_webgateway = \"{% static 'webgateway' %}/\";\n        WEBCLIENT.URLS.api_tags_and_tagged = \"{% url 'api_tags_and_tagged' %}\";\n        WEBCLIENT.URLS.fileset_check = \"{% url 'fileset_check' 'delete' %}\";\n        WEBCLIENT.URLS.api_parent_links = \"{% url 'api_parent_links' %}\";\n        WEBCLIENT.URLS.deletemany = \"{% url 'manage_action_containers' 'deletemany' %}\";\n        WEBCLIENT.URLS.copy_image_rdef_json = \"{% url 'copy_image_rdef_json' %}\";\n        WEBCLIENT.URLS.reset_owners_rdef_json = \"{% url 'reset_owners_rdef_json' %}\";\n        WEBCLIENT.URLS.reset_rdef_json = \"{% url 'reset_rdef_json' %}\";\n        WEBCLIENT.URLS.script_upload = \"{% url 'script_upload' %}\";\n        // jsTree code in ome.tree.js and center panel code in center_plugin.thumbs.js.html uses initially_select\n        // instead of browser URL since URL may be /webclient/?path=plate.name-barcode|well.name-A1\n\n        WEBCLIENT.initially_select = {{ initially_select|json_dumps|safe }};\n        WEBCLIENT.initially_open = {{ initially_open|json_dumps|safe }};\n\n        {% ifequal menu 'usertags' %}\n            WEBCLIENT.TAG_TREE = true;\n            WEBCLIENT.URLS.tree_top_level = WEBCLIENT.URLS.api_tags_and_tagged;\n        {% else %}\n            WEBCLIENT.URLS.tree_top_level = WEBCLIENT.URLS.api_containers;\n        {% endifequal %}\n\n        WEBCLIENT.URLS.api_experimenter = \"{% url 'api_experimenter' ome.user_id %}\";\n\n        WEBCLIENT.UI = {};\n        WEBCLIENT.UI.TREE = {};\n        WEBCLIENT.UI.TREE.pagination_nodes = [\"experimenter\", \"screen\", \"plate\", \"acquisition\", \"project\", \"tagset\", \"image\"];\n        WEBCLIENT.UI.TREE.type_order = \"{{ui.tree.type_order}}\".toLowerCase().split(\",\").filter(function(e){return e});\n\n        {% if page_size %}\n            var PAGE_SIZE = {{ page_size }};\n        {% endif %}\n\n        WEBCLIENT.HAS_RDEF = false;\n        $.getJSON(\"{% url 'webgateway_get_image_rdef_json' %}\", function(data){\n            WEBCLIENT.HAS_RDEF = !!(data && data.rdef);\n        });\n\n        // ** \"Open With\" config used by E.g. ome.tree.js **\n        // Loaded scripts can call OME.setOpenWithEnabledHandler and/or\n        // OME.setOpenWithActionHandler to override default behaviour\n        WEBCLIENT.OPEN_WITH = [];\n        $.getJSON(\"{% url 'webgateway_open_with_options' %}\", function(data){\n            if (data && data.open_with_options) {\n                WEBCLIENT.OPEN_WITH = data.open_with_options;\n                // Try to load scripts if specified:\n                WEBCLIENT.OPEN_WITH.forEach(function(ow){\n                    if (ow.script_url) {\n                        $.getScript(ow.script_url);\n                    }\n                })\n            }\n        });\n\n        $(document).ready(function(){\n            // initially hidden\n            $(\"#user_dropdown ul\").css('visibility', 'hidden');\n            // show on click\n            $(\"#show_user_dropdown\").click(function(e) {\n                \n                $(\"ul\", $(this).parent()).css('visibility', 'visible');\n                e.preventDefault();\n                return false;\n            });\n            // on hover-out, hide drop-down menus\n            $(\"#user_dropdown ul\").hover(function(){}, function(){\n                $(this).css('visibility', 'hidden');\n            });\n\n            $(\"#top_search_field label\").inFieldLabels();\n            \n            OME.setupAjaxError(\"{% url 'fsend' %}\");      // AJAX 500 need feedback form url\n        });\n\n        // The shown user's ID. This is located here because static javascript files\n        // are not preprocessed by django\n        function activeUserId() {\n            return {{ ome.user_id }};\n        };\n\n        // The currently logged in user ID\n        function currentUserId() {\n            {% if ome.user.id %}\n                return {{ ome.user.id }}\n            {% else %}\n                return undefined;\n            {% endif %}\n        };\n\n    </script>\n\n    <!-- keep-alive ping so that OMERO session doesn't die -->\n    {% include \"webclient/base/includes/ping.html\" %}\n\n    <!-- toolbar helpers -->\n    {% include \"webclient/base/includes/toolbar_forms.html\" %}\n\n    <!-- set-up right panel tabs -->\n    {% include \"webclient/data/includes/right_plugin.general.js.html\" %}\n\n\n    <!-- include scripts for loading data into right-hand tabs -->\n    <!-- these are configured in settings.py under \"omero.web.ui.right_tabs\" -->\n    {% for rt in ome.right_plugins %}\n        {% include rt.include %}\n    {% endfor %}\n    \n    \n    \n{% endblock %}\n\n\n\n{% block middle_header_right %}\n\n        <!-- Global Tools -->\n        <ul class=\"header_toolbar\" id=\"script_notifications\">\n                {% include \"webclient/base/includes/script_launch.html\" %}\n            {% include \"webclient/base/includes/activities_info.html\" %}\n        </ul>\n        \n        <!-- Global Search -->\n        {% include \"webclient/base/includes/search_field.html\" %}\n        \n        <!-- User Dropdown -->\n        {% include \"webclient/base/includes/user_dropdown.html\" %}\n{% endblock %}\n\n\n{% block center %}\n\n<div id=\"center_panel_header\">\n    <div id=\"center_panel_chooser\">\n        {% if ome.center_plugins|length > 0 %}\n            <select id=\"source\">\n                <option value=\"#content_details\">Thumbnails</option>\n                {% for cp in ome.center_plugins %}\n                    <option value=\"#{{ cp.plugin_id }}\">{{ cp.label }}</option>\n                {% endfor %}\n            </select>\n        {% endif %}\n    </div>\n</div>\n\n<div id=\"content_details\" class=\"center_panel_content\"> </div>\n\n{% for cp in ome.center_plugins %}\n    <div id=\"{{ cp.plugin_id }}\" class=\"center_panel_content\"></div>\n{% endfor %}\n\n{% endblock %}\n\n\n\n\n<!-- Right Tabs -->\n\n{% block right %}\n<div>\n    <div id=\"annotation_tabs\" class=\"absolute_fill\">\n        <ul id=\"annotation_tabs_list\">\n            <li><a href=\"#metadata_general\">{% trans \"General\" %}</a></li>\n            <!-- include right tabs, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n            {% for rt in ome.right_plugins %}\n                <li><a href=\"#{{ rt.plugin_id }}\">{{ rt.label }}</a></li>\n            {% endfor %}\n        </ul>\n        <div id=\"metadata_general\" class=\"right_tab_content\" ></div>\n        <!-- include right tab bodies, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n        {% for rt in ome.right_plugins %}\n        <div id=\"{{ rt.plugin_id }}\" class=\"right_tab_content\"></div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}\n\n\n\n", "{% load i18n %}\n{% load common_filters %}\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n\n\n{% endcomment %}\n\n\n<script type=\"text/javascript\">\nif (typeof OME === \"undefined\") { OME={}; }\n\n    OME.createShare = function() {\n\n        var productListQuery = [];\n\n        // we do inst.get_selected() here, since we then get objects\n        // instead of ids for some reason?\n        var inst = $.jstree.reference('#dataTree');\n        data = inst.get_selected(true);\n        data.forEach(function(node){\n            productListQuery.push(node.type + \"=\" + node.data.id);\n        });\n\n        var query = '{% url 'manage_action_containers' \"add\" \"share\" %}' + \"?\"+productListQuery.join(\"&\");\n        $(\"#create_share_form\").dialog(\"open\");\n        $(\"#create_share_form\").attr(\"action\", query)\n        $(\"#create_share_form\").load(query);\n        return false;\n    }\n\n    $(document).ready(function(){\n\n        // AJAX handling of create-discussion form\n        $(\"#create_share_form\").ajaxForm({\n            success: function(html) {\n                if (html.indexOf(\"shareId\") > -1) {\n                    var shareId = html.replace(\"shareId:\", \"\");\n                    $(\"#create_share_form\").dialog( \"close\" );\n                    $(\"#shareCreatedId\").text(shareId);\n                    $(\"#share_dialog_form\").dialog(\"open\").show();\n                } else {\n                    $(\"#create_share_form\").html(html);\n                }\n            },\n        });\n\n        $(\"#share_dialog_form\").dialog({\n            autoOpen: false,\n            resizable: true,\n            height: 150,\n            width:300,\n            modal: true,\n            buttons: {\n                \"OK\": function() {\n                    $( this ).dialog( \"close\" );\n                }\n            }\n        });\n\n        $(\"#create_share_form\").dialog({\n            autoOpen: false,\n            resizable: true,\n            height: 600,\n            width:450,\n            modal: true,\n            buttons: {\n                \"Accept\": function() {\n                    // simply submit the form\n                    $(\"#create_share_form\").submit();\n                },\n                \"Cancel\": function() {\n                    $( this ).dialog( \"close\" );\n                }\n            }\n        });\n\n\n    });\n</script>\n\n\n\n<!-- hidden form for creating share - shown in dialog & loaded by AJAX -->\n<form id=\"create_share_form\" action=\"#\" method=\"post\" title=\"Create Share\" class=\"standard_form\">{% csrf_token %}\n</form>\n\n<form id=\"share_dialog_form\" action=\"#\" title=\"Create Share\" style=\"display:none\">\n    <p style=\"font-size: 120%; font-weight: bold\">\n        Share <span id=\"shareCreatedId\"></span> was created successfully.\n    </p>\n</form>\n", "{% extends \"webclient/base/base_container.html\" %}\n{% load i18n %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011-2015 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% comment %}\n<!--\n  This page is the 'home page' of the 3-column data layout for webclient.\n  It loads the tree in the left panel. This is then used to load data into the middle and right panels (via AJAX)\n  Plugins for the centre or right panels add themselves as selection listeners to the tree.\n-->\n{% endcomment %}\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.jstree_theme.css\" %}\" type=\"text/css\" />\n{% endblock %}\n\n{% block script %}\n    {{ block.super }}\n\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.jstree-3.0.8/jstree.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.locate_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.conditionalselect_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.pagination_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.fields_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.omecut_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.ometools_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.childcount_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.truncatetext_plugin.js\"|add:url_suffix %}\"></script>\n\n    <script type=\"text/javascript\" src=\"{% static 'webclient/javascript/ome.chgrp.js'|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static 'webclient/javascript/ome.chown.js'|add:url_suffix %}\"></script>\n\n    <!-- Main jsTree code is here -->\n    <script src=\"{% static 'webclient/javascript/ome.tree.js'|add:url_suffix %}\"></script>\n\n\n    <script type=\"text/javascript\">\n\n    // Variable to store selection data when using jstree refresh\n    var refreshPathsReverse = [];\n\n\n    // Called from ome.tree.js\n    var updateParentRemoveNode = function(inst, node, parent) {\n        /* Update any other instances of the parent of this node to remove it\n         * Also Based on if the parent of this node has any children\n         * remaining, update the parental status of matching parents\n        */\n\n        // Get any other instances of the parent\n        var parentKey = inst.locate_key(parent);\n        var parentNodes = inst.locate_node(parentKey);\n        // Get the parentNodeIds to easily check set membership\n        var parentNodeIds = [];\n        $.each(parentNodes, function(index, parentNode) {\n             parentNodeIds.push(parentNode.id);\n        });\n        // Determine if this parent now has no children\n        var parentChildless = !inst.is_parent(parent);\n\n        // For performance reasons it is quicker to look for the nodes and check\n        // their parents than to look for the parents and scan through all\n        // their children\n        var nodeKey = inst.locate_key(node);\n        var nodeNodes = inst.locate_node(nodeKey);\n\n        var updateParentRemoveNodes = [];\n        $.each(nodeNodes, function(index, nodeNode) {\n            // Discount the original node as jstree is removing that\n            if (nodeNode.id === node.id) {\n                return true;\n            }\n\n            // Discount any nodes that do not have one of the predetermined parents\n            if ($.inArray(inst.get_parent(nodeNode), parentNodeIds) === -1) {\n                return true;\n            }\n\n            // The remaining are children of identical parents and should\n            // be removed\n            updateParentRemoveNodes.push(nodeNode);\n        });\n\n        // Actually do the remove\n        inst.delete_node(updateParentRemoveNodes);\n\n        // If the parent is now childless it is also necessary to check\n        // for any identical parent containers that are marked as expandable\n        // which has ceased to be the case\n        $.each(parentNodes, function(index, parentNode) {\n            // Discount the original parent as jstree is handling that\n            if (parentNode.id === parent.id) {\n                return true;\n            }\n\n            if (parentChildless) {\n                if (!inst.is_loaded(parentNode)) {\n                    // Remove the offer of expansion, this is denoted by a node which is\n                    // loaded, but has zero children\n                    parentNode.state.loaded = true;\n                    inst.redraw_node(parentNode);\n                }\n            }\n\n            // Update the child count (override the childcount because it may not be\n            // loaded and will thus always have no count)\n            OME.updateNodeChildCount(inst, parentNode, parent.children.length);\n        });\n\n\n    };\n\n    var updateParentInsertNode = function(inst, node, parent, position) {\n        /* Update any other instances of the parent with the new node\n         *\n        */\n\n        // Get any other instances of the parent\n        var parentKey = inst.locate_key(parent);\n        var parentNodes = inst.locate_node(parentKey);\n        var oldParent = inst.get_node(inst.get_parent(node));\n\n        $.each(parentNodes, function(index, parentNode) {\n             // Discount the original parent as jstree is inserting that\n             if (parentNode.id === parent.id) {\n                // Continue\n                return true;\n             }\n\n            if ((inst.is_loaded(parentNode) && inst.is_parent(parentNode)) ||\n                (inst.is_loaded(parentNode) && inst.is_open(parentNode))) {\n                // Create a new node to match the other examples with\n                // data from the old\n                var new_node_data = {\n                    'data': {'id': node.data.obj.id, 'obj': node.data.obj},\n                    'text': node.text,\n                    'type': node.type,\n                    // If it has children, we wish it to be loadable, but not loaded\n                    // so just give it boolean instead of actual nodes\n                    'children': inst.is_parent(node),\n                    'li_attr': {\n                        'class': node.type,\n                        'data-id': node.data.obj.id\n                    }\n                };\n                inst.create_node(parentNode, new_node_data, position);\n            // An empty container\n            } else if (!inst.is_parent(parentNode) && inst.is_loaded(parentNode)) {\n                // Change the node to offer expansion\n                parentNode.state.loaded = false;\n                // Close the node\n                inst.redraw_node(parentNode);\n            }\n\n            // Update the child count (override the childcount because it may not be\n            // loaded and will thus always have no count)\n            OME.updateNodeChildCount(inst, parentNode, oldParent.children.length);\n        });\n    };\n\n    var removeDuplicateNodes = function(inst, node) {\n        /**\n         * Removes all duplicates of a node throughout the tree.\n         * For use mainly when something is truly deleted as opposed to\n         * unlinked\n        */\n\n        var nodeKey = inst.locate_key(node);\n        var nodeNodes = inst.locate_node(nodeKey);\n\n        $.each(nodeNodes, function(index, nodeNode) {\n            // Update the parent count\n            var parent = inst.get_node(inst.get_parent(nodeNode));\n            var count = 0;\n            if (parent.children) {\n                count = parent.children.length;\n            }\n            OME.updateNodeChildCount(inst, parent, count);\n            // Actually delete the node\n            inst.delete_node(nodeNode);\n        });\n    };\n\n    if (typeof OME === \"undefined\") { OME={}; }\n\n        OME.handleNewContainer = function(container_type) {\n\n            // If we are filtering to show another user's data,\n            // we 'should' have writeOwned privilege\n\n            var writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1;\n            var $f = $(\"#new-container-form\");\n            var memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1;\n\n            // clear fields\n            $(\"input[name='owner']\", $f).val(\"\");\n            var new_container_name = $(\"input[name='name']\", $f).val(\"\");\n            var new_container_desc = $(\"textarea[name='description']\", $f).val(\"\");\n            $(\"#new_pds_owner_controls\").hide();\n\n            // If we're not filtering by MY data, could be 'All Members' or another User...\n            // Data will be and we need to show who owner will be\n            if (WEBCLIENT.active_user.id !== WEBCLIENT.USER.id) {\n                // We 'should' have right permissions but just in case...\n                if (!memberOfGroup && !writeOwned) {\n                    alert(\"You don't have permission to create data for other users\");\n                    return;\n                }\n                // If filtering by User, data will belong to them\n                if (WEBCLIENT.active_user.id !== -1) {\n                    $(\"#new_pds_owner\").text(WEBCLIENT.active_user.fullName);\n                    $(\"input[name='owner']\", $f).val(WEBCLIENT.active_user.id);\n                    $(\"#new_pds_owner_controls\").show();\n                }\n                // Otherwise, if we can writeOwned, pick Owner from members of this group\n                else if (writeOwned) {\n                    // Not yet supported (Create options should be disabled if All Members)\n                    // To support this, will need to show <select> to choose owner.\n                }\n            }\n\n            $(\"#new_container_type\").text(container_type.capitalize());\n            $(\"#new-container-form\").dialog('open');\n        }\n\n        // Call this when a parent child count may have changed\n        OME.updateNodeChildCount = function(tree, parent, override_count) {\n            var node = tree.get_node(parent);\n            var count;\n            if (override_count) {\n                count = override_count;\n            } else {\n                count = node.children.length;\n            }\n            // Restrict this to projects, datasets, screens and plates\n            if (node.type === 'project' ||\n                node.type === 'dataset' ||\n                node.type === 'screen' ||\n                node.type === 'plate' ||\n                node.type === 'orphaned') {\n\n                node.data.obj.childCount = count;\n                tree.redraw_node(node, false, false);\n            }\n        };\n\n        function enableToolbarButton(name, enabled) {\n            if (enabled) {\n                $('input#'+name+'Button').removeClass('button-disabled').prop('disabled', false);\n            } else {\n                $('input#'+name+'Button').addClass('button-disabled').prop('disabled', true);\n            }\n        };\n\n        function buttonsShowHide(selected, inst) {\n            // Disable all unless explicitly enabled below\n            var toolbar_config = {\n                \"addproject\":false,\n                'adddataset':false,\n                'addscreen':false,\n                'addtag': false,\n                'addtagset': false,\n                'copy':false,\n                'cut':false,\n                'paste': false,\n                'delete':false,\n                'createshare':false\n            };\n\n            // We 'canCreate' top level items, E.g. Project, Dataset, Screen, if the current userId is self or 'All Members'\n            var userId = {{ ome.user_id }},\n                memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1,\n                writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1,\n                allMembers = userId === -1,\n                // canCreate if looking at your own data or 'All Members' OR User's data with writeOwned\n                canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||\n                    (!allMembers && writeOwned));\n\n            canCreate = canCreate && WEBCLIENT.CAN_CREATE;  // global state for read-only server\n            // These nodes can be Orphans, so creation is not selection-specific\n            if (canCreate) {\n                toolbar_config[\"addproject\"] = true;\n                toolbar_config[\"adddataset\"] = true;\n                toolbar_config['addscreen'] = true;\n                toolbar_config[\"addtag\"] = true;\n                toolbar_config[\"addtagset\"] = true;\n            }\n            if(selected.length > 0) {\n\n                // If the current selection(s) can be deleted\n                // TODO Admin will have delete permissions on user\n                // probably they should not be able to delete the\n                // user from there\n                if(OME.nodeHasPermission(selected, 'canDelete')) {\n                    toolbar_config['delete'] = true;\n                }\n\n                // Only allow paste if there is a single selection and there is\n                // something to paste\n                if(selected.length == 1 && inst.can_paste()) {\n                    // Check if the target is a suitable container for pasteing it\n                    var buffer = inst.get_buffer();\n                    $.each(buffer.node, function(index, node) {\n                        // Never allow pasteing into orphaned or experimenter\n                        // TODO What about pasteing a project from one experimenter to another?\n                        // Run the standard jstree check to determine if paste is allowed as if using\n                        // drag'n'drop.\n                        if (inst.get_node(selected[0]).type !== 'orphaned' &&\n                            inst.get_node(selected[0]).type !== 'experimenter' &&\n                            inst.check(buffer.mode, node, selected[0], 0)) {\n                            toolbar_config['paste'] = true;\n                        } else {\n                            // Break out of $.each as if one item can't paste, we can't paste\n                            return false;\n                        }\n                    });\n                }\n\n                // Only allow cut if the selected item(s) are elligible. This uses the slightly\n                // confusingly named 'is_draggable' which is part of the drag'n'drop plugin\n                // which in turn uses a jstree node type property 'draggable'\n                // It also checks it the selected nodes can be linked\n                if(inst.settings.dnd.is_draggable(selected)) {\n                    toolbar_config['cut'] = true;\n                }\n\n                // Allow Copy of Dataset/Image/Plate if you 'canLink' all selected nodes\n                var canCopy = selected.reduce(function(prev, n){\n                    var node_type = n.type,\n                        parent_type = inst.get_node(n.parent).type;\n                    // In tag tree, can't copy anything except a tag\n                    var invalidType = (WEBCLIENT.TAG_TREE && node_type !== \"tag\");\n                    // Can Copy objects under their true parent types (NOT orphaned tag, dataset etc)\n                    var plink = ((node_type === \"dataset\" && parent_type === \"project\") ||\n                            (node_type === \"image\" && parent_type === \"dataset\") ||\n                            (node_type === \"plate\" && parent_type === \"screen\") ||\n                            (node_type === \"tag\" && parent_type === \"tagset\"));\n                    return (!invalidType) && plink && OME.nodeHasPermission(n, 'canLink') && prev;\n                }, true);\n                toolbar_config['copy'] = canCopy;\n\n                // Only images can be added to a basket and only if they all are\n                toolbar_config['createshare'] = true;\n                $.each(selected, function(index, node) {\n                    if (node.type != 'image' || !OME.nodeHasPermission(node, 'canLink')) {\n                        toolbar_config['createshare'] = false;\n                        // Break out of $.each\n                        return false;\n                    }\n                });\n\n            }\n\n            for (var btnName in toolbar_config) {\n                enableToolbarButton(btnName, toolbar_config[btnName]);\n            }\n        };\n\n\n        // Helper method used by linkNode and unlinkNode below.\n        // Simply adds parent_type, parent_id, child_type & child_id to payload object\n        // e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}:\n        function addDataToPayload(payload, node, parent) {\n            var parent_id = parent.data.obj.id,\n                parent_type = parent.type,\n                child_id = node.data.obj.id,\n                child_type = node.type;\n            // payload is payload.parent_type.parent_id.child_type: [child_ids]\n            if (!(parent_type in payload)) payload[parent_type] = {};\n            if (!(parent_id in payload[parent_type])) {\n                payload[parent_type][parent_id] = {};\n            }\n            if (!(child_type in payload[parent_type][parent_id])) {\n                payload[parent_type][parent_id][child_type] = [];\n            }\n            payload[parent_type][parent_id][child_type].push(child_id);\n        }\n\n        // linkNode and unlinkNode (below) use a 'debounce' timeout to collect\n        // many link or unlink calls into a single AJAX call.\n        // On each call to linkNode or unlinkNode, we add the data from node & parent\n        // to the payload that we submit. This is sent once the timeout expires.\n        // linkNode and unlinkNode both return a deferred promise that will be\n        // resolved when the AJAX call returns.\n        var linkNodeTimeout,\n            linkPayload = {},\n            deferredLink = jQuery.Deferred();\n        function linkNode(inst, node, parent) {\n\n            // doLink is called on timeout to submit AJAX call\n            var doLink = function() {\n                // we send a reference to the deferred...\n                var dd = deferredLink;\n                // ...and create a new deferred to handle subsequent calls to linkNode\n                deferredLink = jQuery.Deferred();\n\n                // Do the call, and resolve the deferred when done\n                $.ajax({\n                    url: \"{% url 'api_links' %}\",\n                    type: \"POST\",\n                    data: JSON.stringify(linkPayload),\n                    dataType: 'json'\n                })\n                .done(function(data){\n                    dd.resolve(data);\n                });\n\n                // empty the payload, ready for sebsequent calls\n                linkPayload = {};\n            };\n\n            // build up an object with all the links we want to create\n            addDataToPayload(linkPayload, node, parent)       \n\n            // if we're waiting on timeout, clear this...\n            if (linkNodeTimeout) {\n                clearTimeout(linkNodeTimeout);\n            }\n            // ...start new timeout\n            linkNodeTimeout = setTimeout(doLink, 10);\n\n            // return a promise (cannot call resolve() on it elsewhere)\n            return deferredLink.promise();\n\n        }\n\n        // See docs above for linkNode (works the same as unlinkNode)\n        var unlinkNodeTimeout,\n            unlinkPayload = {},\n            deferredUnlink = jQuery.Deferred();\n        function unlinkNode(inst, node, parent) {\n            var doUnlink = function() {\n                var dd = deferredUnlink;\n                deferredUnlink = jQuery.Deferred();\n                $.ajax({\n                    url: \"{% url 'api_links' %}\",\n                    type: \"DELETE\",\n                    data: JSON.stringify(unlinkPayload),\n                    dataType: 'json'\n                })\n                .done(function(data){\n                    dd.resolve(data);\n                });\n                unlinkPayload = {};\n            };\n            addDataToPayload(unlinkPayload, node, parent)       \n            if (unlinkNodeTimeout) {\n                clearTimeout(unlinkNodeTimeout);\n            }\n            unlinkNodeTimeout = setTimeout(doUnlink, 10);\n            return deferredUnlink.promise();\n        };\n\n        // Remove duplicate nodes, normally as a result of copy_node\n        // or move_node\n        // Global function, called from omecut_plugin\n        function removeDuplicate(inst, node, parentId) {\n            var parent = inst.get_node(parentId),\n                found = false;\n            $.each(parent.children, function(index, childId) {\n                var child = inst.get_node(childId);\n                if (child.type === node.type &&\n                    child.data.obj.id === node.data.obj.id &&\n                    child.id != node.id) {\n                    inst.delete_node(child);\n                    found = true;\n                    // Break out of $.each\n                    return false;\n                }\n            });\n            return found;\n        };\n\n        // Stuff to do on load...\n        $(function()\n            {\n                // We (un)truncate images when the left panel resizes...\n                $(\"#left_panel\").on('resize', function(event) {\n                    var inst = $.jstree.reference('#dataTree');\n                    inst.redraw(true);\n                });\n\n                // Handle creation of new Project, Dataset or Screen...\n                $(\"#new-container-form\").dialog({\n                    autoOpen: false,\n                    resizable: true,\n                    height: 280,\n                    width:420,\n                    modal: true,\n                    buttons: {\n                        \"OK\": function() {\n                             createNewContainer();\n                             $( this ).dialog( \"close\" );\n                        },\n                        \"Cancel\": function() {\n                            $( this ).dialog( \"close\" );\n                        }\n                    }\n                });\n\n                // same code is called from closing dialog or 'submit' of form\n                $(\"#new-container-form\").submit(function() {\n                    $(\"#new-container-form\").dialog( \"close\" );\n                    createNewContainer();\n                    return false;\n                });\n\n                var createNewContainer = function() {\n                    var cont_type = $(\"#new_container_type\").text().toLowerCase();  // E.g. 'project'\n                    var $f = $(\"#new-container-form\");\n                    var new_container_name = $(\"input[name='name']\", $f).val();\n                    var new_container_desc = $(\"textarea[name='description']\", $f).val();\n                    var new_container_owner = $(\"input[name='owner']\", $f).val();\n                    if ($.trim(new_container_name).length == 0) {\n                        alert(\"Please enter a Name\");\n                        return;\n                    }\n\n                    // If images under orphaned are selected, note IDs (for adding to new dataset)\n                    var inst = $.jstree.reference('#dataTree');\n                    var selected = inst.get_selected(true);\n                    // TODO Only keeping img_ids because it is simpler to POST the data using that\n                    // Can be removed when updating the ajax call\n                    var img_ids = [];\n                    var orphaned_image_nodes = [];\n\n                    $.each(selected, function(index, node) {\n                         if (node.type === 'image' &&\n                             inst.get_node(inst.get_parent(node)).type === 'orphaned' &&\n                             OME.nodeHasPermission(node, 'canLink')) {\n                            img_ids.push(node.data.obj.id);\n                            orphaned_image_nodes.push(node);\n                         }\n                    });\n\n                    // Default: Create an orphan of \"folder_type\" ('project', 'dataset', 'screen', 'tag', 'tagset' etc. )\n                    url = '{% url 'manage_action_containers' \"addnewcontainer\" %}';\n                    // Find the 'experimenter' node as parent\n                    var root = inst.get_node('#');\n                    $.each(root.children, function(index, id) {\n                        var node = inst.get_node(id);\n                        if (node.type === 'experimenter' && node.data.obj.id === {{ ome.user_id }}) {\n                            parent = node;\n                            // Break out of each\n                            return false;\n                        }\n                    });\n\n                    // If a project is selected (or selected is a child of project) create dataset under it\n                    var url, position = 0;\n                    var parent = false;\n                    if (selected.length > 0 && cont_type == 'dataset') {\n                        if (selected[0].type === 'project') {\n                            parent = selected[0];\n                        } else if (inst.get_node(selected[0].parent).type === 'project') {\n                            parent = inst.get_node(selected[0].parent);\n                        }\n                    // If a tagset is selected (or selected is a child of tagset), create tag under it\n                    } else if(selected.length > 0 && cont_type == 'tag') {\n                        if (selected[0].type === 'tagset') {\n                            parent = selected[0];\n                        } else if (inst.get_node(selected[0].parent).type === 'tagset') {\n                            parent = inst.get_node(selected[0].parent);\n                        }\n                    }\n                    if (parent) {\n                        url = '{% url 'manage_action_containers' \"addnewcontainer\" %}' + parent.type + '/' + parent.data.obj.id + '/';\n                    } else {\n                        // otherwise create an orphan of \"folder_type\" ('project', 'dataset', 'screen', 'tag', 'tagset' etc. )\n                        url = '{% url 'manage_action_containers' \"addnewcontainer\" %}';\n                        // Find 'experimenter' to be parent\n                        var root = inst.get_node('#');\n                        $.each(root.children, function(index, id) {\n                            var node = inst.get_node(id);\n                             if (node.type === 'experimenter' && node.data.obj.id === {{ ome.user_id }}) {\n                                parent = node;\n                                // Break out of each\n                                return false;\n                             }\n                        });\n                    }\n\n                    var ajax_data = {\n                            \"name\" : new_container_name,\n                            \"folder_type\" : cont_type,\n                            \"description\" : new_container_desc,\n                            \"owner\": new_container_owner\n                        }\n                    if (img_ids.length > 0){\n                        ajax_data['image'] = img_ids;\n                    }\n                    $.ajax({\n                        url: url,\n                        data: ajax_data,\n                        dataType: \"json\",\n                        type: \"POST\",\n                        traditional: true,\n                        success: function(r){\n\n                            var data = {\n                                'id': r['id'],\n                                'isOwner': true,\n                                'ownerId': {{ ome.user.id }},\n                                'name': new_container_name,\n                                'permsCss': 'canEdit canAnnotate canLink canDelete canChgrp'\n                            };\n\n                            var node = {\n                                'data': {'id': r['id'], 'obj': data},\n                                'text': new_container_name,\n                                'children': false,\n                                'type': cont_type,\n                                'li_attr': {\n                                    'class': cont_type,\n                                    'data-id': r['id']\n                                }\n                            };\n\n                            // Create the node, move any orphans into it and select only it\n                            node = JSON.parse(JSON.stringify(node));\n                            inst.create_node(parent, node, 'last', function(node) {\n                                if (orphaned_image_nodes.length > 0) {\n                                    inst.move_node(orphaned_image_nodes, node);\n                                }\n                                // There is no need to update duplicates at the moment as nothing that\n                                // can be created could have a duplicate to need updating\n                                inst.deselect_all();\n                                inst.select_node(node);\n                                //TODO Scroll to new if off screen? https://github.com/vakata/jstree/issues/519\n                            });\n                        }\n                    });\n                };\n\n                $(\"#delete-dialog-form\").dialog({\n                    dialogClass: 'delete_confirm_dialog',\n                    autoOpen: false,\n                    resizable: true,\n                    height: 210,\n                    width:420,\n                    modal: true,\n                    buttons: {\n                        \"Yes\": function() {\n                            $(\"#delete-dialog-form\").data(\"clicked_button\", \"Yes\");\n                            $( this ).dialog( \"close\" );\n                        },\n                        \"No\": function() {\n                            $(\"#delete-dialog-form\").data(\"clicked_button\", \"No\");\n                            $( this ).dialog( \"close\" );\n                        }\n                    }\n                });\n\n        });\n    </script>\n\n    <!-- configure toolbar buttons -->\n    <script type=\"text/javascript\">\n\n    $(function () {\n\n        var inst = $.jstree.reference('#dataTree');\n\n        // Attach click handlers to the individual buttons\n\n        $('#addprojectButton').click(function() {\n            OME.handleNewContainer(\"project\");\n        });\n\n        $('#adddatasetButton').click(function() {\n            OME.handleNewContainer(\"dataset\");\n        });\n\n        $('#addscreenButton').click(function() {\n            OME.handleNewContainer(\"screen\");\n        });\n\n        $('#addtagButton').click(function() {\n            OME.handleNewContainer(\"tag\");\n        });\n\n        $('#addtagsetButton').click(function() {\n            OME.handleNewContainer(\"tagset\");\n        });\n\n        $('#copyButton').click(function() {\n            var objs = inst.get_selected(true)\n            inst.copy(objs);\n        });\n\n        $('#cutButton').click(function() {\n            var objs = inst.get_selected(true)\n            inst.cut(objs);\n        });\n\n        $('#createshareButton').click(function() {\n            OME.createShare(inst.get_selected());\n        });\n\n        $('#pasteButton').click(function() {\n            var objs = inst.get_selected(true);\n            if (objs.length == 1) {\n                inst.paste(objs[0]);\n                // Always disable paste button immediatly after using it\n                enableToolbarButton('paste', false);\n            }\n        });\n\n        $('#deleteButton').click(function() {\n            var deleteUrl = \"{% url 'manage_action_containers' 'deletemany' %}\",\n                filesetCheckUrl = \"{% url 'fileset_check' 'delete' %}\";\n            OME.handleDelete(deleteUrl, filesetCheckUrl, {{ ome.user.id }});\n        });\n\n        $('#refreshButton').click(function() {\n            // Ensure the button cannot be clicked again while we are\n            // performing a refresh.  The \"refresh.jstree\" event handler\n            // is in ome.tree.js and will be responsible for enabling the\n            // button again.\n            event.target.disabled = true;\n\n            // Grab the paths to the items that are currently selected, for restoration later\n            var selections = inst.get_selected();\n\n            $.each(selections, function(index, selection) {\n                 var path = inst.get_path(selection, false, true).reverse();\n                 var refreshPathReverse = [];\n                 $.each(path, function(index, pathComponent) {\n                      var node = inst.get_node(pathComponent);\n                      var tuple = [node.type, node.data.obj.id];\n                      refreshPathReverse.push(tuple);\n                 });\n                 refreshPathsReverse.push(refreshPathReverse);\n\n            });\n\n            inst.deselect_all();\n            // NB: the global variable refreshPathsReverse is used in ome.tree.js\n            // after refresh, then set to empty list.\n            inst.refresh();\n        });\n\n    });\n    </script>\n\n    <!-- set up the middle panel to only show the div chosen by <select> -->\n    {% include \"webclient/data/includes/center_plugin_init.js.html\" %}\n\n    <!-- include code to handle primary 'thumbs' middle plugin -->\n    {% include \"webclient/data/includes/center_plugin.thumbs.js.html\" %}\n\n    {% for cp in ome.center_plugins %}\n        {% include cp.include %}\n    {% endfor %}\n\n\n\n{% endblock %}\n\n\n{% block left %}\n\n<div class=\"left_panel_content\">\n\n    <div id=\"left_panel_tabs\" class=\"left_panel_tabs_container ui-tabs\">\n\n        <ul id=\"left_panel_tab_list\" class=\"ui-tabs-nav\">\n\n            <!-- Remember to update this in public/public.html as well. We should change this, but for the meantime, you need to manually update the menu there too -->\n\n            <li id=\"explore_tab\" class=\"ui-state-default{% ifequal menu 'userdata' %} ui-tabs-active{% endifequal %}\">\n                <a href=\"{% url 'load_template' 'userdata' %}\" class=\"ui-tabs-anchor\" title=\"Explore\">{% trans \"Explore\" %}</a>\n            </li>\n            <li id=\"tags_tab\" class=\"ui-state-default{% ifequal menu 'usertags' %} ui-tabs-active{% endifequal %}\">\n                <a href=\"{% url 'load_template' 'usertags' %}\" class=\"ui-tabs-anchor\">{% trans \"Tags\" %}</a>\n            </li>\n            <li id=\"public_tab\" class=\"ui-state-default\">\n                <a href=\"{% url 'load_template' 'public' %}\" class=\"ui-tabs-anchor\">{% trans \"Shares\" %}</a>\n            </li>\n\n        </ul>\n\n        <!-- toolbar above tree -->\n        <div class=\"left_panel_toolbar\" >\n\n            <!-- Show Projects toolbar for main page... -->\n            <ul class=\"toolbar\">\n\n                {% if menu == 'userdata' %}\n\n                    <li><input id=\"addprojectButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder16.png\" %}\" alt=\"Create new project\"\n                               title=\"Create new Project\"/></li>\n                    <li><input id=\"adddatasetButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder_image16.png\" %}\" alt=\"Create new dataset\"\n                               title=\"Create new Dataset\"/></li>\n                    <li><input id=\"addscreenButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder_screen16.png\" %}\" alt=\"Create new screen\"\n                               title=\"Create new Screen\"/></li>\n\n                {% elif menu == 'usertags' %}\n\n                    <li><input id=\"addtagsetButton\" class=\"button button-disabled\" type=\"image\"\n                               title=\"Create new Tag Set\"\n                               src=\"{% static \"webclient/image/left_sidebar_icon_tags.png\" %}\"\n                               alt=\"Create new dataset\"/></li>\n                    <li><input id=\"addtagButton\" class=\"button button-disabled\" type=\"image\" title=\"Create new Tag\"\n                               src=\"{% static \"webclient/image/left_sidebar_icon_tag.png\" %}\" alt=\"Create new project\"/></li>\n\n                {% endif %}\n\n                <li class=\"seperator\"></li>\n\n                <li><input id=\"cutButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_cut.png\" %}\" alt=\"Cut Link\" title=\"Cut Link\"/>\n                </li>\n                <li><input id=\"copyButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_copy.png\" %}\" alt=\"Copy Link\"\n                           title=\"Copy a link to the selected object\"/></li>\n                <li><input id=\"pasteButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_paste.png\" %}\" alt=\"Paste Link\"\n                           title=\"Paste the copied link\"/></li>\n\n                <li class=\"seperator\">\n\n                <li><input id=\"deleteButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_delete.png\" %}\" alt=\"Delete\" title=\"Delete\"/>\n                </li>\n\n                <li class=\"seperator\">\n\n                <li><input id=\"createshareButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_share2.png\" %}\" alt=\"Create Share\"\n                           title=\"Create Share\"></li>\n\n                <li class=\"seperator\"></li>\n\n                <li><input id=\"refreshButton\" class=\"button\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_refresh.png\" %}\" alt=\"Refresh\" title=\"Refresh\">\n                </li>\n\n            </ul>\n\n        </div>\n\n    </div>\n\n    <div class=\"left_panel_tree_container\">\n\n        <div id=\"tree_details\" class=\"left_panel_tree\">\n            <div class=\"dataTree\" id=\"dataTree\"></div>\n        </div>\n\n        <!-- Panel hidden unless needed for showing spatial birds eye view of Wells - see ome.spwgridview.js -->\n        <div id=\"well_details\" class=\"left_panel_preview\">\n            <div class=\"left_panel_preview__header\">\n                <span class=\"left_panel_preview__title--centered\n                             left_panel_preview__title--medium\">\n                    Field positions in well\n                </span>\n                <a id=\"hide_well_birds_eye\" class=\"left_panel_preview__close action\" href=\"#\">X</a>\n            </div>\n            <div id=\"well_birds_eye_container\" class=\"left_paneL_preview__content\">\n                <div id=\"well_birds_eye\" class=\"left_paneL_preview__well\"></div>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n\n<!-- hidden form for delete dialogs -->\n<div id=\"delete-dialog-form\" title=\"Delete\" style=\"display:none\"\n        data-url=\"{% url 'manage_action_containers' 'deletemany' %}\"\n        data-fileset-check-url=\"{% url 'fileset_check' 'delete' %}\">\n    <p id=\"deleteOthersWarning\" class='error' style=\"font-size: 120%; font-weight: bold\">\n        Warning: Some objects you selected are owned by other users.\n    </p>\n    <p id=\"deleteCopyWarning\" class='error' style=\"font-size: 120%; font-weight: bold\">\n        Warning: One or more <span class=\"delete_type\">Images</span> are linked to multiple\n        <span class=\"delete_parent_type\">Dataset</span>s.\n        This will DELETE them from ALL of those\n        <span class=\"delete_parent_type\">Dataset</span>s.\n        If you only wish to remove <span class=\"delete_type\">Images</span> from one\n        <span class=\"delete_parent_type\">Dataset</span>, use the\n        \"Cut Link\" action.\n    </p>\n    <p>Are you sure you want to delete the selected <span class=\"delete_type\">Images</span>?</p>\n    <p>If yes:</p>\n    <form>\n    <fieldset style=\"border: 0px solid white\">\n        <input type=\"checkbox\" name=\"delete_anns\" id=\"delete_anns\" />\n        Also delete any Annotations that become 'orphans'?<br/>\n    </fieldset>\n    </form>\n</div>\n\n<!-- hidden dialog for new Container -->\n<form id=\"new-container-form\" title=\"New...\" style=\"display:none\">\n    <p>Create a new <span id=\"new_container_type\">Container</span>...</p>\n    <p id=\"new_pds_owner_controls\">\n        <img class=\"new_pds_owner_icon\" src=\"{% static 'webclient/image/icon_settings_user.png' %}\">\n        <label>Assign to Owner:</label> <span id=\"new_pds_owner\"></span>\n        {{ new_container_form.owner }}\n    <p>\n        <label for=\"id_name\">Name:</label>\n        {{ new_container_form.name }}\n    </p>\n    <p style=\"margin-bottom: 5px\">\n        <label for=\"id_description\">Description:</label><br />\n        {{ new_container_form.description }}\n    </p>\n</form>\n\n<!-- hidden form for chgrp -->\n<form id=\"chgrp-form\" title=\"Move to Group\" action=\"{% url 'chgrp' %}\" style=\"display:none\" method=\"POST\">{% csrf_token %}\n</form>\n<!-- hidden form for chown -->\n<form id=\"chown-form\" title=\"Change Owner\" action=\"{% url 'chown' %}\" style=\"display:none\" method=\"POST\">{% csrf_token %}\n</form>\n\n{% endblock %}\n\n\n", "{% extends \"webclient/base/base_container.html\" %}\n{% load i18n %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.jstree_theme.css\" %}\" type=\"text/css\" />\n{% endblock %}\n\n{% block script %}\n    {{ block.super }}\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.jstree-3.0.8/jstree.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.locate_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.conditionalselect_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.ometools_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.truncatetext_plugin.js\"|add:url_suffix %}\"></script>\n\n    <script type=\"text/javascript\">\n\n        $(document).ready(function()\n        {\n\n            // Disable the groups/users dropdown menu and scripts menu.\n            $(\"#groupsUsersButton\")\n                .css('background-image', 'url()')\n                .attr('title', 'Use \"Scope\" in form below to search within specific Groups / Users');\n            $(\"#scriptButton\")\n                .css('opacity', 0.5)\n                .attr('title', 'Scripts are disabled for data in shares');\n            setTimeout(function(){\n                // make sure we remove click handler AFTER it's been added\n                $(\"#groupsUsersButton\").off('click');\n                $(\"#scriptButton\").off('click');\n            },500);\n        });\n\n    </script>\n\n    <!-- set-up jsTree, toolbar etc -->\n    <script type=\"text/javascript\">\n\n        function enableToolbarButton(name, enabled) {\n            if (enabled) {\n                $('input#'+name+'Button').removeClass('button-disabled').prop('disabled', false);\n            } else {\n                $('input#'+name+'Button').addClass('button-disabled').prop('disabled', true);\n            }\n        };\n\n        function buttonsShowHide(selected, inst) {\n\n            // Disable all unless explicitly enabled below\n            var toolbar_config = {\n                'removecontent': false\n            };\n\n            if (selected.length > 0) {\n                // Can only remove images from share that you own\n                var node = inst.get_node(selected[0]);\n                if (node.type === 'image') {\n                    var share = inst.get_node(node.parent);\n                    if (share.data.obj.ownerId === {{ ome.user.id }}) {\n                        toolbar_config['removecontent'] = true;\n                    }\n                }\n            }\n\n            for (var btnName in toolbar_config) {\n                enableToolbarButton(btnName, toolbar_config[btnName]);\n            }\n        };\n\n        function removeImage(selected, inst) {\n\n            // Disable the nodes\n            inst.disable_node(selected);\n\n            // This interface does not support multiple remove, so iterate\n            // over deleted images\n            $.each(selected, function(index, sel) {\n                var node = inst.get_node(sel);\n\n                // Get the parent share id\n                var shareId = inst.get_node(inst.get_parent(node)).data.obj.id;\n                // Get the image id\n                var imageId = node.data.obj.id;\n\n                // AJAX Query to remove the images from the share\n                $.ajax({\n                    url: '{% url 'manage_action_containers' \"removefromshare\" \"share\" %}' + shareId + '/',\n                    data : {'source': imageId},\n                    dataType: \"json\",\n                    type: \"POST\",\n                    success: function(r){\n                        if(eval(r.bad)) {\n                            inst.enable_node(node);\n                            alert(r.errs);\n                        } else {\n                            inst.delete_node(node);\n                        }\n                    },\n                    error: function(response) {\n                        inst.enable_node(node);\n                    }\n                });\n            });\n        };\n\n        $(function() {\n            // Select jstree and then cascade handle events and setup the tree.\n            var jstree = $(\"#dataTree\")\n            .on('changed.jstree', function (e, data) {\n                var inst = data.instance;\n                buttonsShowHide(inst.get_selected(true), inst);\n                OME.tree_selection_changed(data, e);\n            })\n            .on(\"click.jstree\", \".jstree-anchor\", function (e) {\n                e.preventDefault();\n                var datatree = $.jstree.reference($('#dataTree'));\n                // Expand on click (not select because of key navigation)\n                if (datatree.is_parent(this)) {\n                    datatree.open_node(this);\n                }\n            })\n            .on(\"dblclick.jstree\", \".jstree-anchor\", function (e) {\n                e.preventDefault();\n                var datatree = $.jstree.reference($('#dataTree'));\n                var node = datatree.get_node(this);\n                if (node) {\n                    if (node.type === 'image') {\n                        popup_url = \"{% url 'webindex' %}\";\n                        var parent_node = datatree.get_node(datatree.get_parent(node));\n                        if (!parent_node.data.obj.isOwned) {\n                            popup_url += parent_node.data.obj.id + \"/img_detail/\" + node.data.obj.id ;\n                        } else {\n                            popup_url += \"img_detail/\" + node.data.obj.id ;\n                        }\n                        //Open the image viewer for this image\n                        window.open(popup_url, '_blank');\n                    }\n                }\n            })\n            .on('loaded.jstree', function(e, data) {\n                // Select root node\n                data.instance.select_node('ul > li:first');\n            })\n\n            // Setup jstree\n            .jstree({\n                'plugins': ['types', 'sort', 'locate', 'ometools', 'conditionalselect', 'truncatetext', 'contextmenu'],\n                // The jstree core\n                'core' : {\n                    'themes': {\n                        'dots': false,\n                        'variant': 'ome'\n                    },\n                    'data' : {\n                        // Configure URL for request\n                        'url' : function(node) {\n                            // Get the type of the node being expanded\n                            // Figure out what type of children it should have\n                            // Request the list of children from that url, adding any relevant filters\n                            if (node.type === 'experimenter') {\n                                return '{% url 'api_shares' %}'\n                            } else if (node.type === 'share') {\n                                return '{% url 'webindex' %}api/share_images/' + node.data.obj.id + '/';\n                            } else if (node.id === '#') {\n                                // root node - Always load your own shares\n                                return '{% url 'api_experimenter' ome.user.id %}';\n                            }\n                        },\n                        // Gather data for request\n                        'data' : function(node) {\n\n                            var payload = {};\n\n                            // Get the data for this query, special case for experimenter as this\n                            // data is being passed as 'experimenter_id' below and the tag interface\n                            // is expecting either a tagset_id or nothing as the 'id'\n                            if (node.hasOwnProperty('data') && node.type != 'experimenter') {\n                                if (node.data.hasOwnProperty('obj')) {\n                                    // share_id is part of the url itself, see above.\n                                    // We only need to handle other containers here:\n                                    if (node.type !== 'share') {\n                                        payload['id'] = node.data.obj.id;\n                                    }\n                                }\n                            }\n\n                            if (node.hasOwnProperty('data') && node.type === 'experimenter') {\n                                payload['member_id'] = node.data.obj.id\n                            }\n\n                            if (node.type === 'share') {\n                                payload['sizeXYZ'] = true;\n                                payload['date'] = true;\n                            }\n\n                            return payload;\n                        },\n                        'cache': false,\n                        // Converter is required because the JSON format being returned is not\n                        // jstree specific.\n                        'converters' : {\n                            \"text json\": function (json) {\n                                var data = JSON.parse(json);\n                                var jstree_data = [];\n\n                                // Add experimenter to the jstree data structure\n                                if (data.hasOwnProperty('experimenter')) {\n                                    var value = data.experimenter;\n                                    var node = {\n                                        'data': {'id': value.id, 'obj': value},\n                                        'text': value.firstName + ' ' + value.lastName,\n                                        'children': true,\n                                        'type': 'experimenter',\n                                        'state': {\n                                        },\n                                        'li_attr': {\n                                            // 'class': 'experimenter',\n                                            'data-id': value.id\n                                        }\n                                    };\n\n                                    // Add 'state' opened by default\n                                    node.state['opened'] = true;\n\n                                    jstree_data.push(node);\n\n                                }\n\n                                // Add share to the jstree data structure\n                                if (data.hasOwnProperty('shares')) {\n                                    $.each(data.shares, function(index, value) {\n                                        var node = {\n                                            'data': {'id': value.id, 'obj': value},\n                                            'text': value.id.toString(),\n                                            'children': (this.isOwned || (this.active && !this.expired)) && value.childCount > 0 ? true : false,\n                                            'type': 'share',\n                                            'state' : {\n                                                'disabled'  : !this.isOwned && ( !this.active || this.expired )\n                                            },\n                                            'li_attr': {\n                                                'class': this.active ? \"\" : \"inactive\",\n                                                'data-id': value.id\n                                            }\n                                        };\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                // Add discussion to the jstree data structure\n                                if (data.hasOwnProperty('discussions')) {\n                                    $.each(data.discussions, function(index, value) {\n                                        var node = {\n                                            'data': {'id': value.id, 'obj': value},\n                                            'text': value.id.toString(),\n                                            'children': false,\n                                            'type': 'discussion',\n                                            'state' : {\n                                                'disabled'  : !this.isOwned && ( !this.active || this.expired )\n                                            },\n                                            'li_attr': {\n                                                'class': this.active ? \"\" : \"inactive\",\n                                                'data-id': value.id\n                                            }\n                                        };\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                // Add images to the jstree data structure\n                                if (data.hasOwnProperty('images')) {\n                                    $.each(data.images, function(index, value) {\n                                        if (value.hasOwnProperty('deleted')){\n                                            var node = {\n                                                'data': {'id': value.id, 'obj': value},\n                                                'text': 'Object deleted',\n                                                'children': false,\n                                                'type': 'deleted',\n                                                'li_attr': {\n                                                    'data-id': value.id\n                                                }\n                                            };\n                                        } else {\n                                            var node = {\n                                                'data': {'id': value.id, 'obj': value},\n                                                'text': value.name,\n                                                'children': false,\n                                                'type': 'image',\n                                                'li_attr': {\n                                                    'data-id': value.id\n                                                }\n                                            };\n                                        }\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                return jstree_data;\n                            }\n\n                        }\n                    },\n                    'check_callback': function(operation, node, node_parent, node_position, more) {\n                        var inst = $.jstree.reference(node);\n                        // Allow 'delete_node' on images only\n                        if (operation === 'delete_node' && inst.get_node(node).type === 'image') {\n                            return true;\n                        }\n                        return false\n                    }\n                },\n                'types' : {\n                    '#' : {\n                        'valid_children': ['experimenter']\n                    },\n                    'default': {\n                        'draggable': false\n                    },\n                    'experimenter': {\n                        'icon' : '{% static \"webclient/image/icon_user.png\" %}',\n                        'valid_children': ['share', 'discussion']\n                    },\n                    'share': {\n                        'icon' : '{% static \"webclient/image/left_sidebar_icon_public.png\" %}',\n                        'valid_children': ['image']\n                    },\n                    'discussion': {\n                        'icon' : '{% static \"webclient/image/wp_protocol16.png\" %}'\n                    },\n                    'image': {\n                        'icon': '{% static \"webclient/image/image16.png\" %}',\n                    },\n                    'deleted': {\n                        'icon': false\n                    }\n\n                },\n                'sort': function(nodeId1, nodeId2) {\n                    var inst = this;\n                    var node1 = inst.get_node(nodeId1);\n                    var node2 = inst.get_node(nodeId2);\n                    if (node2.type == 'image') {\n                        return node1.text.toLowerCase() <= node2.text.toLowerCase() ? -1 : 1;\n                    }\n                    // Nodes are 2 types, \"Shares\" and \"Discussions\", but we sort by IDs\n                    return parseInt(node2.data.obj.id) <= parseInt(node1.data.obj.id) ? -1 : 1;\n                },\n                'locate' : {\n                    // Returns a key for this node\n                    'locate_function': function(node) {\n                        // In some cases, this function is called before the data attribute exists\n                        // These should be ignored, this will be called again later when it is\n                        // populated.\n                        if (!node.hasOwnProperty('data') ||\n                            node.data === undefined ||\n                            node.data === null) {\n                            return false;\n                        }\n                        return node.type + '-' + node.data.obj.id;\n                    }\n                },\n                'conditionalselect' : {\n                    // Checks if a selection should be allowed\n                    'conditionalselect_function': function(node) {\n                        // Disable deleted object nodes\n                        if (node.type === 'deleted') {\n                            return false;\n                        }\n\n                        // Disable multi-type selection of shares AND images\n                        var inst = this;\n                        var selected = inst.get_selected(true);\n                        if (selected.length > 0) {\n                            return false;\n                        }\n                        return true;\n                    }\n                },\n                // disable the browser context menu\n                'contextmenu' : {\n                    \"select_node\":true,\n                    \"items\" : function(obj){\n                        var config = {};\n                        return config;\n                    }\n                },\n            });\n        });\n    </script>\n\n    <!-- handle toolbar clicks -->\n    <script type=\"text/javascript\">\n    $(function () {\n\n        $('#removecontentButton').click(function() {\n            var confirm_remove = OME.confirm_dialog('Remove Image?',\n                function() {\n                    if(confirm_remove.data(\"clicked_button\") == \"OK\") {\n                        var inst = $.jstree.reference('#dataTree');\n                        removeImage(inst.get_selected(), inst);\n                        inst.refresh();\n                    }\n                }\n            );\n        });\n\n        $('#refreshButton').click(function() {\n            var inst = $.jstree.reference('#dataTree');\n            inst.refresh();\n        });\n\n        // We (un)truncate images when the left panel resizes...\n        $(\"#left_panel\").on('resize', function(event) {\n            var inst = $.jstree.reference('#dataTree');\n            inst.redraw(true);\n        });\n\n    });\n    </script>\n\n    <!-- set up the middle panel to only show the div chosen by <select> -->\n    {% include \"webclient/data/includes/center_plugin_init.js.html\" %}\n\n    <!-- include code to handle primary 'thumbs' middle plugin -->\n    {% include \"webclient/data/includes/center_plugin.thumbs.js.html\" %}\n\n\n    {% for cp in ome.center_plugins %}\n        {% include cp.include %}\n    {% endfor %}\n\n{% endblock %}\n\n\n\n{% block left %}\n\n<div class=\"left_panel_content\">\n\n<div id=\"left_panel_tabs\" class=\"left_panel_tabs_container ui-tabs\">\n\n    <ul id=\"left_panel_tab_list\" class=\"ui-tabs-nav\">\n        <li id=\"explore_tab\" class=\"ui-state-default\"><a href=\"{% url 'load_template' 'userdata' %}\" class=\"ui-tabs-anchor\" title=\"Explore\">{% trans \"Explore\" %}</a></li>\n        <li id=\"tags_tab\" class=\"ui-state-default\"><a href=\"{% url 'load_template' 'usertags' %}\" class=\"ui-tabs-anchor\">{% trans \"Tags\" %}</a></li>\n        <li id=\"public_tab\" class=\"ui-state-default ui-tabs-active\"><a class=\"ui-tabs-anchor\">{% trans \"Shares\" %}</a></li>\n    </ul>\n\n    <div class=\"left_panel_toolbar\" id=\"Public\">\n        <div class=\"toolbar\">\n            <ul id=\"buttons\">\n\n                <li>\n                    <input id=\"removecontentButton\" class=\"button button-disabled\" type=\"image\" src=\"{% static \"webclient/image/icon_toolbar_cut.png\" %}\" alt=\"Remove content\" title=\"Remove content\" />\n                </li>\n\n                <li class=seperator></li>\n\n                <li>\n                <input id=\"refreshButton\" class=\"button\" type=\"image\" src=\"{% static \"webclient/image/icon_toolbar_refresh.png\" %}\" alt=\"Refresh\" title=\"Refresh\">\n                </li>\n\n            </ul>\n        </div>\n    </div>\n\n</div>\n\n<div class=\"left_panel_tree_container\">\n\n    <div id=\"tree_details\" class=\"left_panel_tree\">\n        <div class=\"datashareTree\" id=\"dataTree\"></div>\n    </div>\n\n</div>\n\n</div>\n\n{% endblock %}\n\n\n{% block center %}\n\n<div id=\"content_details\"> </div>\n\n{% endblock %}\n\n\n{% block right %}\n<div>\n    <div id=\"annotation_tabs\" class=\"absolute_fill\">\n        <ul id=\"annotation_tabs_list\">\n            <li><a href=\"#metadata_general\">{% trans \"General\" %}</a></li>\n            <!-- include right tabs, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n            {% for rt in ome.right_plugins %}\n                <li><a href=\"#{{ rt.plugin_id }}\">{{ rt.label }}</a></li>\n            {% endfor %}\n        </ul>\n        <div id=\"metadata_general\" class=\"right_tab_content\" ></div>\n        <!-- include right tab bodies, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n        {% for rt in ome.right_plugins %}\n            <div id=\"{{ rt.plugin_id }}\" class=\"right_tab_content\"></div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2008-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\" A view functions is simply a Python function that takes a Web request and\nreturns a Web response. This response can be the HTML contents of a Web page,\nor a redirect, or the 404 and 500 error, or an XML document, or an image...\nor anything.\"\"\"\n\nimport copy\nimport os\nimport datetime\nimport Ice\nfrom Ice import Exception as IceException\nimport logging\nimport traceback\nimport json\nimport re\nimport sys\nimport warnings\nfrom past.builtins import unicode\nfrom future.utils import bytes_to_native_str\n\nfrom time import time\n\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom omeroweb.version import omeroweb_version as omero_version\n\nimport omero\nimport omero.scripts\nfrom omero.rtypes import wrap, unwrap, rlong, rlist\n\nfrom omero.gateway.utils import toBoolean\n\nfrom django.conf import settings\nfrom django.template import loader as template_loader\nfrom django.http import (\n    Http404,\n    HttpResponse,\n    HttpResponseRedirect,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import HttpResponseServerError, HttpResponseBadRequest\nfrom django.utils.http import urlencode\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.utils.encoding import smart_str\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_POST\nfrom django.shortcuts import render\n\n\nfrom omeroweb.webclient.webclient_utils import _formatReport, _purgeCallback\nfrom .forms import GlobalSearchForm, ContainerForm\nfrom .forms import ShareForm, BasketShareForm\nfrom .forms import ContainerNameForm, ContainerDescriptionForm\nfrom .forms import CommentAnnotationForm, TagsAnnotationForm\nfrom .forms import MetadataFilterForm, MetadataDetectorForm\nfrom .forms import MetadataChannelForm, MetadataEnvironmentForm\nfrom .forms import MetadataObjectiveForm, MetadataObjectiveSettingsForm\nfrom .forms import MetadataStageLabelForm, MetadataLightSourceForm\nfrom .forms import MetadataDichroicForm, MetadataMicroscopeForm\nfrom .forms import FilesAnnotationForm, WellIndexForm, NewTagsAnnotationFormSet\n\nfrom .controller.container import BaseContainer\nfrom .controller.history import BaseCalendar\nfrom .controller.search import BaseSearch\nfrom .controller.share import BaseShare\n\nfrom omeroweb.webadmin.forms import LoginForm\n\nfrom omeroweb.webgateway import views as webgateway_views\nfrom omeroweb.webgateway.marshal import graphResponseMarshal\nfrom omeroweb.webgateway.util import get_longs as webgateway_get_longs\n\nfrom omeroweb.feedback.views import handlerInternalError\n\nfrom omeroweb.webclient.decorators import login_required\nfrom omeroweb.webclient.decorators import render_response\nfrom omeroweb.webclient.show import (\n    Show,\n    IncorrectMenuError,\n    paths_to_object,\n    paths_to_tag,\n)\nfrom omeroweb.decorators import (\n    ConnCleaningHttpResponse,\n    parse_url,\n    TableClosingHttpResponse,\n)\nfrom omeroweb.webgateway.util import getIntOrDefault\n\nfrom omero.model import (\n    AnnotationAnnotationLinkI,\n    DatasetI,\n    DatasetImageLinkI,\n    ExperimenterI,\n    ImageI,\n    OriginalFileI,\n    PlateI,\n    ProjectI,\n    ProjectDatasetLinkI,\n    ScreenI,\n    ScreenPlateLinkI,\n    TagAnnotationI,\n)\nfrom omero import ApiUsageException, ServerError, CmdError\nfrom omeroweb.webgateway.views import LoginView\n\nfrom . import tree\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nlogger = logging.getLogger(__name__)\n\nlogger.info(\"INIT '%s'\" % os.getpid())\n\n# We want to allow a higher default limit for annotations so we can load\n# all the annotations expected for a PAGE of images\nANNOTATIONS_LIMIT = settings.PAGE * 100\n\n\ndef get_long_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    val = None\n    val_raw = request.GET.get(name, default)\n    if val_raw is not None:\n        val = long(val_raw)\n    return val\n\n\ndef get_list(request, name):\n    val = request.GET.getlist(name)\n    return [i for i in val if i != \"\"]\n\n\ndef get_longs(request, name):\n    warnings.warn(\n        \"Deprecated. Use omeroweb.webgateway.util.get_longs()\", DeprecationWarning\n    )\n    return webgateway_get_longs(request, name)\n\n\ndef get_bool_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    return toBoolean(request.GET.get(name, default))\n\n\n##############################################################################\n# custom index page\n\n\n@never_cache\n@render_response()\ndef custom_index(request, conn=None, **kwargs):\n    context = {\"version\": omero_version, \"build_year\": build_year}\n\n    if settings.INDEX_TEMPLATE is not None:\n        try:\n            template_loader.get_template(settings.INDEX_TEMPLATE)\n            context[\"template\"] = settings.INDEX_TEMPLATE\n        except Exception:\n            context[\"template\"] = \"webclient/index.html\"\n            context[\"error\"] = traceback.format_exception(*sys.exc_info())[-1]\n    else:\n        context[\"template\"] = \"webclient/index.html\"\n\n    return context\n\n\n##############################################################################\n# views\n\n\nclass WebclientLoginView(LoginView):\n    \"\"\"\n    Webclient Login - Customises the superclass LoginView\n    for webclient. Also can be used by other Apps to log in to OMERO. Uses\n    the 'server' id from request to lookup the server-id (index), host and\n    port from settings. E.g. \"localhost\", 4064. Stores these details, along\n    with username, password etc in the request.session. Resets other data\n    parameters in the request.session. Tries to get connection to OMERO and\n    if this works, then we are redirected to the 'index' page or url\n    specified in REQUEST. If we can't connect, the login page is returned\n    with appropriate error messages.\n    \"\"\"\n\n    template = \"webclient/login.html\"\n    useragent = \"OMERO.web\"\n\n    def get(self, request):\n        \"\"\"\n        GET simply returns the login page\n        \"\"\"\n        return self.handle_not_logged_in(request)\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"\n        We override this to provide webclient-specific functionality\n        such as cleaning up any previous sessions (if user didn't logout)\n        and redirect to specified url or webclient index page.\n        \"\"\"\n\n        # webclient has various state that needs cleaning up...\n        # if 'active_group' remains in session from previous\n        # login, check it's valid for this user\n        # NB: we do this for public users in @login_required.get_connection()\n        if request.session.get(\"active_group\"):\n            if (\n                request.session.get(\"active_group\")\n                not in conn.getEventContext().memberOfGroups\n            ):\n                del request.session[\"active_group\"]\n        if request.session.get(\"user_id\"):\n            # always want to revert to logged-in user\n            del request.session[\"user_id\"]\n        if request.session.get(\"server_settings\"):\n            # always clean when logging in\n            del request.session[\"server_settings\"]\n        # do we ned to display server version ?\n        # server_version = conn.getServerVersion()\n        if request.POST.get(\"noredirect\"):\n            return HttpResponse(\"OK\")\n        url = request.GET.get(\"url\")\n        if url is None or len(url) == 0:\n            try:\n                url = parse_url(settings.LOGIN_REDIRECT)\n            except Exception:\n                url = reverse(\"webindex\")\n        return HttpResponseRedirect(url)\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Returns a response for failed login.\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if form is None:\n            server_id = request.GET.get(\"server\", request.POST.get(\"server\"))\n            if server_id is not None:\n                initial = {\"server\": unicode(server_id)}\n                form = LoginForm(initial=initial)\n            else:\n                form = LoginForm()\n        context = {\n            \"version\": omero_version,\n            \"build_year\": build_year,\n            \"error\": error,\n            \"form\": form,\n        }\n        url = request.GET.get(\"url\")\n        if url is not None and len(url) != 0:\n            context[\"url\"] = urlencode({\"url\": url})\n\n        if hasattr(settings, \"LOGIN_LOGO\"):\n            context[\"LOGIN_LOGO\"] = settings.LOGIN_LOGO\n\n        if settings.PUBLIC_ENABLED:\n            redirect = reverse(\"webindex\")\n            if settings.PUBLIC_URL_FILTER.search(redirect):\n                context[\"public_enabled\"] = True\n                context[\"public_login_redirect\"] = redirect\n\n        context[\"show_download_links\"] = settings.SHOW_CLIENT_DOWNLOADS\n        if settings.SHOW_CLIENT_DOWNLOADS:\n            ver = re.match(\n                (\n                    r\"(?P<major>\\d+)\\.\"\n                    r\"(?P<minor>\\d+)\\.\"\n                    r\"(?P<patch>\\d+\\.?)?\"\n                    r\"(?P<dev>(dev|a|b|rc)\\d+)?.*\"\n                ),\n                omero_version,\n            )\n            client_download_tag_re = \"^v%s\\\\.%s\\\\.[^-]+$\" % (\n                ver.group(\"major\"),\n                ver.group(\"minor\"),\n            )\n            context[\"client_download_tag_re\"] = client_download_tag_re\n            context[\"client_download_repo\"] = settings.CLIENT_DOWNLOAD_GITHUB_REPO\n\n        return render(request, self.template, context)\n\n\n@login_required(ignore_login_fail=True)\ndef keepalive_ping(request, conn=None, **kwargs):\n    \"\"\" Keeps the OMERO session alive by pinging the server \"\"\"\n\n    # login_required handles ping, timeout etc, so we don't need to do\n    # anything else\n    return HttpResponse(\"OK\")\n\n\n@login_required()\ndef change_active_group(request, conn=None, url=None, **kwargs):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    Finally this redirects to the 'url'.\n    \"\"\"\n    switch_active_group(request)\n    url = url or reverse(\"webindex\")\n    return HttpResponseRedirect(url)\n\n\ndef switch_active_group(request, active_group=None):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    \"\"\"\n    if active_group is None:\n        active_group = request.GET.get(\"active_group\")\n    active_group = int(active_group)\n    if (\n        \"active_group\" not in request.session\n        or active_group != request.session[\"active_group\"]\n    ):\n        request.session.modified = True\n        request.session[\"active_group\"] = active_group\n\n\ndef fake_experimenter(request, default_name=\"All members\"):\n    \"\"\"\n    Marshal faked experimenter when id is -1\n    Load omero.client.ui.menu.dropdown.everyone.label as username\n    \"\"\"\n    label = (\n        request.session.get(\"server_settings\")\n        .get(\"ui\", {})\n        .get(\"menu\", {})\n        .get(\"dropdown\", {})\n        .get(\"everyone\", {})\n        .get(\"label\", default_name)\n    )\n    return {\n        \"id\": -1,\n        \"omeName\": label,\n        \"firstName\": label,\n        \"lastName\": \"\",\n    }\n\n\n@login_required(login_redirect=\"webindex\")\ndef logout(request, conn=None, **kwargs):\n    \"\"\"\n    Logout of the session and redirects to the homepage (will redirect to\n    login first)\n    \"\"\"\n\n    if request.method == \"POST\":\n        try:\n            try:\n                conn.close()\n            except Exception:\n                logger.error(\"Exception during logout.\", exc_info=True)\n        finally:\n            request.session.flush()\n        return HttpResponseRedirect(reverse(settings.LOGIN_VIEW))\n    else:\n        context = {\"url\": reverse(\"weblogout\"), \"submit\": \"Do you want to log out?\"}\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\n###########################################################################\ndef _load_template(request, menu, conn=None, url=None, **kwargs):\n\n    \"\"\"\n    This view handles most of the top-level pages, as specified by 'menu' E.g.\n    userdata, usertags, history, search etc.\n    Query string 'path' that specifies an object to display in the data tree\n    is parsed.\n    We also prepare the list of users in the current group, for the\n    switch-user form. Change-group form is also prepared.\n    \"\"\"\n    request.session.modified = True\n\n    template = kwargs.get(\"template\", None)\n    if template is None:\n        if menu == \"userdata\":\n            template = \"webclient/data/containers.html\"\n        elif menu == \"usertags\":\n            template = \"webclient/data/containers.html\"\n        else:\n            # E.g. search/search.html\n            template = \"webclient/%s/%s.html\" % (menu, menu)\n\n    # tree support\n    show = kwargs.get(\"show\", Show(conn, request, menu))\n    # Constructor does no loading.  Show.first_selected must be called first\n    # in order to set up our initial state correctly.\n    try:\n        first_sel = show.first_selected\n    except IncorrectMenuError as e:\n        return HttpResponseRedirect(e.uri)\n    # We get the owner of the top level object, E.g. Project\n    # Actual api_paths_to_object() is retrieved by jsTree once loaded\n    initially_open_owner = show.initially_open_owner\n\n    # If we failed to find 'show'...\n    if request.GET.get(\"show\", None) is not None and first_sel is None:\n        # and we're logged in as PUBLIC user...\n        if (\n            settings.PUBLIC_ENABLED\n            and settings.PUBLIC_USER == conn.getUser().getOmeName()\n        ):\n            # this is likely a regular user who needs to log in as themselves.\n            # Login then redirect to current url\n            return HttpResponseRedirect(\"%s?url=%s\" % (reverse(\"weblogin\"), url))\n\n    # need to be sure that tree will be correct omero.group\n    if first_sel is not None:\n        switch_active_group(request, first_sel.details.group.id.val)\n\n    # search support\n    init = {}\n    global_search_form = GlobalSearchForm(data=request.GET.copy())\n    if menu == \"search\":\n        if global_search_form.is_valid():\n            init[\"query\"] = global_search_form.cleaned_data[\"search_query\"]\n\n    # get url without request string - used to refresh page after switch\n    # user/group etc\n    url = kwargs.get(\"load_template_url\", None)\n    if url is None:\n        url = reverse(viewname=\"load_template\", args=[menu])\n\n    # validate experimenter is in the active group\n    active_group = request.session.get(\"active_group\") or conn.getEventContext().groupId\n    # prepare members of group...\n    leaders, members = conn.getObject(\"ExperimenterGroup\", active_group).groupSummary()\n    userIds = [u.id for u in leaders]\n    userIds.extend([u.id for u in members])\n\n    # check any change in experimenter...\n    user_id = request.GET.get(\"experimenter\")\n    if initially_open_owner is not None:\n        if request.session.get(\"user_id\", None) != -1:\n            # if we're not already showing 'All Members'...\n            user_id = initially_open_owner\n    try:\n        user_id = long(user_id)\n    except Exception:\n        user_id = None\n    # check if user_id is in a currnt group\n    if user_id is not None:\n        if (\n            user_id\n            not in (\n                set(map(lambda x: x.id, leaders)) | set(map(lambda x: x.id, members))\n            )\n            and user_id != -1\n        ):\n            # All users in group is allowed\n            user_id = None\n    if user_id is None:\n        # ... or check that current user is valid in active group\n        user_id = request.session.get(\"user_id\", None)\n        if user_id is None or int(user_id) not in userIds:\n            if user_id != -1:  # All users in group is allowed\n                user_id = conn.getEventContext().userId\n\n    request.session[\"user_id\"] = user_id\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    groups = myGroups\n\n    new_container_form = ContainerForm()\n\n    # colleagues required for search.html page only.\n    myColleagues = {}\n    if menu == \"search\":\n        for g in groups:\n            g.loadLeadersAndMembers()\n            for c in g.leaders + g.colleagues:\n                myColleagues[c.id] = c\n        myColleagues = list(myColleagues.values())\n        myColleagues.sort(key=lambda x: x.getLastName().lower())\n\n    context = {\n        \"menu\": menu,\n        \"init\": init,\n        \"myGroups\": myGroups,\n        \"new_container_form\": new_container_form,\n        \"global_search_form\": global_search_form,\n    }\n    context[\"groups\"] = groups\n    context[\"myColleagues\"] = myColleagues\n    context[\"active_group\"] = conn.getObject(\"ExperimenterGroup\", long(active_group))\n    context[\"active_user\"] = conn.getObject(\"Experimenter\", long(user_id))\n    context[\"initially_select\"] = show.initially_select\n    context[\"initially_open\"] = show.initially_open\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"current_url\"] = url\n    context[\"page_size\"] = settings.PAGE\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    context[\"current_admin_privileges\"] = conn.getCurrentAdminPrivileges()\n    context[\"leader_of_groups\"] = conn.getEventContext().leaderOfGroups\n\n    return context\n\n\n@login_required()\n@render_response()\ndef load_template(request, menu, conn=None, url=None, **kwargs):\n    return _load_template(request=request, menu=menu, conn=conn, url=url, **kwargs)\n\n\n@login_required()\n@render_response()\ndef group_user_content(request, url=None, conn=None, **kwargs):\n    \"\"\"\n    Loads html content of the Groups/Users drop-down menu on main webclient\n    pages.\n    Url should be supplied in request, as target for redirect after switching\n    group.\n    \"\"\"\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    if conn.isAdmin():  # Admin can see all groups\n        system_groups = [\n            conn.getAdminService().getSecurityRoles().userGroupId,\n            conn.getAdminService().getSecurityRoles().guestGroupId,\n        ]\n        groups = conn.getObjects(\"ExperimenterGroup\", opts={\"load_experimenters\": True})\n        groups = [g for g in groups if g.getId() not in system_groups]\n        groups.sort(key=lambda x: x.getName().lower())\n    else:\n        groups = myGroups\n\n    for g in groups:\n        g.loadLeadersAndMembers()  # load leaders / members\n\n    context = {\n        \"template\": \"webclient/base/includes/group_user_content.html\",\n        \"current_url\": url,\n        \"groups\": groups,\n        \"myGroups\": myGroups,\n    }\n    return context\n\n\n@login_required()\ndef api_group_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get the groups\n        groups = tree.marshal_groups(\n            conn=conn, member_id=member_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"groups\": groups})\n\n\n@login_required()\ndef api_experimenter_detail(request, experimenter_id, conn=None, **kwargs):\n    # Validate parameter\n    try:\n        experimenter_id = long(experimenter_id)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid experimenter id\")\n\n    try:\n        # Get the experimenter\n        if experimenter_id < 0:\n            experimenter = fake_experimenter(request)\n        else:\n            # Get the experimenter\n            experimenter = tree.marshal_experimenter(\n                conn=conn, experimenter_id=experimenter_id\n            )\n            if experimenter is None:\n                raise Http404(\"No Experimenter found with ID %s\" % experimenter_id)\n        return JsonResponse({\"experimenter\": experimenter})\n\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n\n@login_required()\ndef api_container_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        experimenter_id = get_long_or_default(request, \"id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # While this interface does support paging, it does so in a\n    # very odd way. The results per page is enforced per query so this\n    # will actually get the limit for projects, datasets (without\n    # parents), screens and plates (without parents). This is fine for\n    # the first page, but the second page may not be what is expected.\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    r = dict()\n    try:\n        # Get the projects\n        r[\"projects\"] = tree.marshal_projects(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned datasets (without project parents)\n        r[\"datasets\"] = tree.marshal_datasets(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the screens for the current user\n        r[\"screens\"] = tree.marshal_screens(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned plates (without project parents)\n        r[\"plates\"] = tree.marshal_plates(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n        # Get the orphaned images container\n        try:\n            orph_t = request.session[\"server_settings\"][\"ui\"][\"tree\"][\"orphans\"]\n        except Exception:\n            orph_t = {\"enabled\": True}\n        if (\n            conn.isAdmin()\n            or conn.isLeader(gid=request.session.get(\"active_group\"))\n            or experimenter_id == conn.getUserId()\n            or orph_t.get(\"enabled\", True)\n        ):\n\n            orphaned = tree.marshal_orphaned(\n                conn=conn,\n                group_id=group_id,\n                experimenter_id=experimenter_id,\n                page=page,\n                limit=limit,\n            )\n            orphaned[\"name\"] = orph_t.get(\"name\", \"Orphaned Images\")\n            r[\"orphaned\"] = orphaned\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(r)\n\n\n@login_required()\ndef api_dataset_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        project_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the datasets\n        datasets = tree.marshal_datasets(\n            conn=conn, project_id=project_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"datasets\": datasets})\n\n\n@login_required()\ndef api_image_list(request, conn=None, **kwargs):\n    \"\"\"Get a list of images\n    Specifiying dataset_id will return only images in that dataset\n    Specifying experimenter_id will return orpahned images for that\n    user\n    The orphaned images will include images which belong to the user\n    but are not in any dataset belonging to the user\n    Currently specifying both, experimenter_id will be ignored\n\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        dataset_id = get_long_or_default(request, \"id\", None)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        thumb_version = get_bool_or_default(request, \"thumbVersion\", False)\n        date = get_bool_or_default(request, \"date\", False)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    # Share ID is in kwargs from api/share_images/<id>/ which will create\n    # a share connection in @login_required.\n    # We don't support ?share_id in query string since this would allow a\n    # share connection to be created for ALL urls, instead of just this one.\n    share_id = \"share_id\" in kwargs and long(kwargs[\"share_id\"]) or None\n\n    try:\n        # Get the images\n        images = tree.marshal_images(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            dataset_id=dataset_id,\n            share_id=share_id,\n            load_pixels=load_pixels,\n            group_id=group_id,\n            page=page,\n            date=date,\n            thumb_version=thumb_version,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"images\": images})\n\n\n@login_required()\ndef api_plate_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        screen_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the plates\n        plates = tree.marshal_plates(\n            conn=conn, screen_id=screen_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"plates\": plates})\n\n\n@login_required()\ndef api_plate_acquisition_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        plate_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Orphaned PlateAcquisitions are not possible so querying without a\n    # plate is an error\n    if plate_id is None:\n        return HttpResponseBadRequest(\"id (plate) must be specified\")\n\n    try:\n        # Get the plate acquisitions\n        plate_acquisitions = tree.marshal_plate_acquisitions(\n            conn=conn, plate_id=plate_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"acquisitions\": plate_acquisitions})\n\n\ndef get_object_links(conn, parent_type, parent_id, child_type, child_ids):\n    \"\"\" This is just used internally by api_link DELETE below \"\"\"\n    if parent_type == \"orphaned\":\n        return None\n    link_type = None\n    if parent_type == \"experimenter\":\n        if child_type in [\"dataset\", \"plate\", \"tag\"]:\n            # This will be a requested link if a dataset or plate is\n            # moved from the de facto orphaned datasets/plates, it isn't\n            # an error, but no link actually needs removing\n            return None\n    elif parent_type == \"project\":\n        if child_type == \"dataset\":\n            link_type = \"ProjectDatasetLink\"\n    elif parent_type == \"dataset\":\n        if child_type == \"image\":\n            link_type = \"DatasetImageLink\"\n    elif parent_type == \"screen\":\n        if child_type == \"plate\":\n            link_type = \"ScreenPlateLink\"\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link_type = \"AnnotationAnnotationLink\"\n    if not link_type:\n        raise Http404(\"json data needs 'parent_type' and 'child_type'\")\n\n    params = omero.sys.ParametersI()\n    params.addIds(child_ids)\n\n    qs = conn.getQueryService()\n    # Need to fetch child and parent, otherwise\n    # AnnotationAnnotationLink is not loaded\n    q = (\n        \"\"\"\n        from %s olink join fetch olink.child join fetch olink.parent\n        where olink.child.id in (:ids)\n        \"\"\"\n        % link_type\n    )\n    if parent_id:\n        params.add(\"pid\", rlong(parent_id))\n        q += \" and olink.parent.id = :pid\"\n\n    res = qs.findAllByQuery(q, params, conn.SERVICE_OPTS)\n\n    if parent_id is not None and len(res) == 0:\n        raise Http404(\n            \"No link found for %s-%s to %s-%s\"\n            % (parent_type, parent_id, child_type, child_ids)\n        )\n    return link_type, res\n\n\ndef create_link(parent_type, parent_id, child_type, child_id):\n    \"\"\" This is just used internally by api_link DELETE below \"\"\"\n    if parent_type == \"experimenter\":\n        if child_type == \"dataset\" or child_type == \"plate\":\n            # This is actually not a link that needs creating, this\n            # dataset/plate is an orphan\n            return \"orphan\"\n    if parent_type == \"project\":\n        project = ProjectI(long(parent_id), False)\n        if child_type == \"dataset\":\n            dataset = DatasetI(long(child_id), False)\n            link = ProjectDatasetLinkI()\n            link.setParent(project)\n            link.setChild(dataset)\n            return link\n    elif parent_type == \"dataset\":\n        dataset = DatasetI(long(parent_id), False)\n        if child_type == \"image\":\n            image = ImageI(long(child_id), False)\n            link = DatasetImageLinkI()\n            link.setParent(dataset)\n            link.setChild(image)\n            return link\n    elif parent_type == \"screen\":\n        screen = ScreenI(long(parent_id), False)\n        if child_type == \"plate\":\n            plate = PlateI(long(child_id), False)\n            link = ScreenPlateLinkI()\n            link.setParent(screen)\n            link.setChild(plate)\n            return link\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link = AnnotationAnnotationLinkI()\n            link.setParent(TagAnnotationI(long(parent_id), False))\n            link.setChild(TagAnnotationI(long(child_id), False))\n            return link\n    return None\n\n\ndef get_objects_owners(conn, child_type, child_ids):\n    \"\"\"\n    Returns a dict of child_id: owner_id\n    \"\"\"\n    if child_type == \"tag\":\n        child_type = \"Annotation\"\n    owners = {}\n    for obj in conn.getObjects(child_type, child_ids):\n        owners[obj.id] = obj.details.owner.id.val\n    return owners\n\n\n@login_required()\ndef api_links(request, conn=None, **kwargs):\n    \"\"\"\n    Entry point for the api_links methods.\n    We delegate depending on request method to\n    create or delete links between objects.\n    \"\"\"\n    if request.method not in [\"POST\", \"DELETE\"]:\n        return JsonResponse(\n            {\"Error\": \"Need to POST or DELETE JSON data to update links\"}, status=405\n        )\n    # Handle link creation/deletion\n    try:\n        json_data = json.loads(request.body)\n    except TypeError:\n        # for Python 3.5\n        json_data = json.loads(bytes_to_native_str(request.body))\n\n    if request.method == \"POST\":\n        return _api_links_POST(conn, json_data)\n    elif request.method == \"DELETE\":\n        return _api_links_DELETE(conn, json_data)\n\n\ndef _api_links_POST(conn, json_data, **kwargs):\n    \"\"\"Creates links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    When creating a link, fails silently if ValidationException\n    (E.g. adding an image to a Dataset that already has that image).\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n\n    linksToSave = []\n    write_owned = \"WriteOwned\" in conn.getCurrentAdminPrivileges()\n    user_id = conn.getUserId()\n    for parent_type, parents in json_data.items():\n        if parent_type in (\"orphaned\", \"experimenter\"):\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                # batch look-up owners of all child objects\n                child_owners = get_objects_owners(conn, child_type, child_ids)\n                for child_id in child_ids:\n                    parent_id = int(parent_id)\n                    link = create_link(parent_type, parent_id, child_type, child_id)\n                    if link and link != \"orphan\":\n                        # link owner should match child owner\n                        if write_owned and child_owners[child_id] != user_id:\n                            link.details.owner = ExperimenterI(\n                                child_owners[child_id], False\n                            )\n                        linksToSave.append(link)\n\n    if len(linksToSave) > 0:\n        # Need to set context to correct group (E.g parent group)\n        ptype = parent_type.title()\n        if ptype in [\"Tagset\", \"Tag\"]:\n            ptype = \"TagAnnotation\"\n        p = conn.getQueryService().get(ptype, parent_id, conn.SERVICE_OPTS)\n        conn.SERVICE_OPTS.setOmeroGroup(p.details.group.id.val)\n        logger.info(\"api_link: Saving %s links\" % len(linksToSave))\n\n        try:\n            # We try to save all at once, for speed.\n            conn.saveArray(linksToSave)\n            response[\"success\"] = True\n        except Exception:\n            logger.info(\n                \"api_link: Exception on saveArray with %s links\" % len(linksToSave)\n            )\n            # If this fails, e.g. ValidationException because link\n            # already exists, try to save individual links\n            for link in linksToSave:\n                try:\n                    conn.saveObject(link)\n                except Exception:\n                    pass\n            response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\ndef _api_links_DELETE(conn, json_data):\n    \"\"\"Deletes links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    for parent_type, parents in json_data.items():\n        if parent_type == \"orphaned\":\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                objLnks = get_object_links(\n                    conn, parent_type, parent_id, child_type, child_ids\n                )\n                if objLnks is None:\n                    continue\n                linkType, links = objLnks\n                linkIds = [r.id.val for r in links]\n                logger.info(\"api_link: Deleting %s links\" % len(linkIds))\n                conn.deleteObjects(linkType, linkIds, wait=True)\n                # webclient needs to know what is orphaned\n                linkType, remainingLinks = get_object_links(\n                    conn, parent_type, None, child_type, child_ids\n                )\n                # return remaining links in same format as json above\n                # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n                for rl in remainingLinks:\n                    pid = rl.parent.id.val\n                    cid = rl.child.id.val\n                    # Deleting links still in progress above - ignore these\n                    if pid == int(parent_id):\n                        continue\n                    if parent_type not in response:\n                        response[parent_type] = {}\n                    if pid not in response[parent_type]:\n                        response[parent_type][pid] = {child_type: []}\n                    response[parent_type][pid][child_type].append(cid)\n\n    # If we got here, DELETE was OK\n    response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\n@login_required()\ndef api_parent_links(request, conn=None, **kwargs):\n    \"\"\"\n    Get a list of links as\n    {'data': [{id: 12, child:{type:'image', id:1},\n               parent:{type:'dataset', id:2}] }\n\n    Supports ?image=1,2 and ?image=1&image=2\n    \"\"\"\n    parent_types = {\"image\": \"dataset\", \"dataset\": \"project\", \"plate\": \"screen\"}\n    parents = []\n    for child_type, parent_type in parent_types.items():\n        ids = request.GET.getlist(child_type)\n        if len(ids) == 0:\n            continue\n        # support for ?image=1,2\n        child_ids = []\n        for id in ids:\n            for i in id.split(\",\"):\n                child_ids.append(i)\n\n        link_type, result = get_object_links(\n            conn, parent_type, None, child_type, child_ids\n        )\n        for link in result:\n            parents.append(\n                {\n                    \"id\": link.id.val,\n                    \"parent\": {\"type\": parent_type, \"id\": link.parent.id.val},\n                    \"child\": {\"type\": child_type, \"id\": link.child.id.val},\n                }\n            )\n\n    return JsonResponse({\"data\": parents})\n\n\n@login_required()\ndef api_paths_to_object(request, conn=None, **kwargs):\n    \"\"\"\n    This finds the paths to objects in the hierarchy. It returns only\n    the path, not the object hierarchy itself.\n\n    An example usage is for the 'show' functionality\n    Example to go to the image with id 1 somewhere in the tree.\n    http://localhost:8000/webclient/?show=image-1\n\n    This method can tell the webclient exactly what needs to be\n    dynamically loaded to display this in the jstree.\n    \"\"\"\n\n    try:\n        experimenter_id = get_long_or_default(request, \"experimenter\", None)\n        project_id = get_long_or_default(request, \"project\", None)\n        dataset_id = get_long_or_default(request, \"dataset\", None)\n        image_id = get_long_or_default(request, \"image\", None)\n        screen_id = get_long_or_default(request, \"screen\", None)\n        plate_id = get_long_or_default(request, \"plate\", None)\n        acquisition_id = get_long_or_default(request, \"run\", None)\n        # acquisition will override 'run' if both are specified as they are\n        # the same thing\n        acquisition_id = get_long_or_default(request, \"acquisition\", acquisition_id)\n        well_id = request.GET.get(\"well\", None)\n        tag_id = get_long_or_default(request, \"tag\", None)\n        tagset_id = get_long_or_default(request, \"tagset\", None)\n        roi_id = get_long_or_default(request, \"roi\", None)\n        shape_id = get_long_or_default(request, \"shape\", None)\n        group_id = get_long_or_default(request, \"group\", None)\n        page_size = get_long_or_default(request, \"page_size\", settings.PAGE)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if tag_id is not None or tagset_id is not None:\n        paths = paths_to_tag(conn, experimenter_id, tagset_id, tag_id)\n\n    else:\n        paths = paths_to_object(\n            conn,\n            experimenter_id,\n            project_id,\n            dataset_id,\n            image_id,\n            screen_id,\n            plate_id,\n            acquisition_id,\n            well_id,\n            group_id,\n            page_size,\n            roi_id,\n            shape_id,\n        )\n    return JsonResponse({\"paths\": paths})\n\n\n@login_required()\ndef api_tags_and_tagged_list(request, conn=None, **kwargs):\n    if request.method == \"GET\":\n        return api_tags_and_tagged_list_GET(request, conn, **kwargs)\n    elif request.method == \"DELETE\":\n        return api_tags_and_tagged_list_DELETE(request, conn, **kwargs)\n\n\ndef api_tags_and_tagged_list_GET(request, conn=None, **kwargs):\n    \"\"\"Get a list of tags\n    Specifiying tag_id will return any sub-tags, sub-tagsets and\n    objects tagged with that id\n    If no tagset_id is specifed it will return tags which have no\n    parent\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        tag_id = get_long_or_default(request, \"id\", None)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        date = get_bool_or_default(request, \"date\", False)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get ALL data (all owners) under specified tags\n        if tag_id is not None:\n            tagged = tree.marshal_tagged(\n                conn=conn,\n                experimenter_id=experimenter_id,\n                tag_id=tag_id,\n                group_id=group_id,\n                page=page,\n                load_pixels=load_pixels,\n                date=date,\n                limit=limit,\n            )\n        else:\n            tagged = {}\n\n        # Get 'tags' under tag_id\n        tagged[\"tags\"] = tree.marshal_tags(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            tag_id=tag_id,\n            group_id=group_id,\n            page=page,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(tagged)\n\n\ndef api_tags_and_tagged_list_DELETE(request, conn=None, **kwargs):\n    \"\"\"Delete the listed tags by ids\"\"\"\n    # Get parameters\n    try:\n        tag_ids = get_longs(request, \"id\")\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    dcs = list()\n\n    handle = None\n    try:\n        for tag_id in tag_ids:\n            dcs.append(omero.cmd.Delete(\"/Annotation\", tag_id))\n        doall = omero.cmd.DoAll()\n        doall.requests = dcs\n        handle = conn.c.sf.submit(doall, conn.SERVICE_OPTS)\n\n        try:\n            conn._waitOnCmd(handle)\n        finally:\n            handle.close()\n\n    except CmdError as e:\n        return HttpResponseBadRequest(e.message)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(\"\")\n\n\n@login_required()\ndef api_annotations(request, conn=None, **kwargs):\n\n    r = request.GET\n    image_ids = get_list(request, \"image\")\n    dataset_ids = get_list(request, \"dataset\")\n    project_ids = get_list(request, \"project\")\n    screen_ids = get_list(request, \"screen\")\n    plate_ids = get_list(request, \"plate\")\n    run_ids = get_list(request, \"acquisition\")\n    well_ids = get_list(request, \"well\")\n    page = get_long_or_default(request, \"page\", 1)\n    limit = get_long_or_default(request, \"limit\", ANNOTATIONS_LIMIT)\n\n    ann_type = r.get(\"type\", None)\n    ns = r.get(\"ns\", None)\n\n    anns, exps = tree.marshal_annotations(\n        conn,\n        project_ids=project_ids,\n        dataset_ids=dataset_ids,\n        image_ids=image_ids,\n        screen_ids=screen_ids,\n        plate_ids=plate_ids,\n        run_ids=run_ids,\n        well_ids=well_ids,\n        ann_type=ann_type,\n        ns=ns,\n        page=page,\n        limit=limit,\n    )\n\n    return JsonResponse({\"annotations\": anns, \"experimenters\": exps})\n\n\n@login_required()\ndef api_share_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member_id\", -1)\n        owner_id = get_long_or_default(request, \"owner_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Like with api_container_list, this is a combination of\n    # results which will each be able to return up to the limit in page\n    # size\n\n    try:\n        # Get the shares\n        shares = tree.marshal_shares(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n        # Get the discussions\n        discussions = tree.marshal_discussions(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"shares\": shares, \"discussions\": discussions})\n\n\n@login_required()\n@render_response()\ndef load_plate(request, o1_type=None, o1_id=None, conn=None, **kwargs):\n    \"\"\"\n    This loads data for the center panel, via AJAX calls.\n    Used for Datasets, Plates & Orphaned Images.\n    \"\"\"\n\n    # get index of the plate\n    index = getIntOrDefault(request, \"index\", 0)\n\n    # prepare data. E.g. kw = {}  or  {'plate': 301L}  or\n    # 'acquisition': 301L}\n    kw = dict()\n    if o1_type is not None:\n        if o1_id is not None and int(o1_id) > 0:\n            kw[str(o1_type)] = long(o1_id)\n\n    try:\n        manager = BaseContainer(conn, **kw)\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    # prepare forms\n    form_well_index = None\n\n    context = {\"manager\": manager, \"form_well_index\": form_well_index, \"index\": index}\n\n    # load data & template\n    template = None\n    if \"plate\" in kw or \"acquisition\" in kw:\n        fields = manager.getNumberOfFields()\n        if fields is not None:\n            form_well_index = WellIndexForm(initial={\"index\": index, \"range\": fields})\n            if index == 0:\n                index = fields[0]\n\n        # Show parameter will be well-1|well-2\n        show = request.GET.get(\"show\")\n        if show is not None:\n            wells_to_select = []\n            for w in show.split(\"|\"):\n                if \"well-\" in w:\n                    wells_to_select.append(w.replace(\"well-\", \"\"))\n            context[\"select_wells\"] = \",\".join(wells_to_select)\n\n        context[\"baseurl\"] = reverse(\"webgateway\").rstrip(\"/\")\n        context[\"form_well_index\"] = form_well_index\n        context[\"index\"] = index\n        context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n        template = \"webclient/data/plate.html\"\n        if o1_type == \"acquisition\":\n            context[\"acquisition\"] = o1_id\n\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_chgrp_groups(request, conn=None, **kwargs):\n    \"\"\"\n    Get the potential groups we can move selected data to.\n    These will be groups that the owner(s) of selected objects is a member of.\n    Objects are specified by query string like: ?Image=1,2&Dataset=3\n    If no selected objects are specified, simply list the groups that the\n    current user is a member of.\n    Groups list will exclude the 'current' group context.\n    \"\"\"\n\n    ownerIds = []\n    currentGroups = set()\n    groupSets = []\n    groups = {}\n    owners = {}\n    for dtype in (\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"):\n        oids = request.GET.get(dtype, None)\n        if oids is not None:\n            for o in conn.getObjects(dtype, oids.split(\",\")):\n                ownerIds.append(o.getDetails().owner.id.val)\n                currentGroups.add(o.getDetails().group.id.val)\n    ownerIds = list(set(ownerIds))\n    # In case we were passed no objects or they weren't found\n    if len(ownerIds) == 0:\n        ownerIds = [conn.getUserId()]\n    for owner in conn.getObjects(\n        \"Experimenter\", ownerIds, opts={\"load_experimentergroups\": True}\n    ):\n        # Each owner has a set of groups\n        gids = []\n        owners[owner.id] = owner.getFullName()\n        for group in owner.copyGroupExperimenterMap():\n            groups[group.parent.id.val] = group.parent\n            gids.append(group.parent.id.val)\n        groupSets.append(set(gids))\n\n    # Can move to groups that all owners are members of...\n    targetGroupIds = set.intersection(*groupSets)\n    # ...but not 'user' group\n    userGroupId = conn.getAdminService().getSecurityRoles().userGroupId\n    if userGroupId in targetGroupIds:\n        targetGroupIds.remove(userGroupId)\n\n    # if all the Objects are in a single group, exclude it from the target\n    # groups\n    if len(currentGroups) == 1:\n        curr_grp = currentGroups.pop()\n        if curr_grp in targetGroupIds:\n            targetGroupIds.remove(curr_grp)\n\n    def getPerms(group):\n        p = group.getDetails().permissions\n        return {\n            \"write\": p.isGroupWrite(),\n            \"annotate\": p.isGroupAnnotate(),\n            \"read\": p.isGroupRead(),\n        }\n\n    # From groupIds, create a list of group dicts for json\n    targetGroups = []\n    for gid in targetGroupIds:\n        targetGroups.append(\n            {\"id\": gid, \"name\": groups[gid].name.val, \"perms\": getPerms(groups[gid])}\n        )\n    targetGroups.sort(key=lambda x: x[\"name\"])\n\n    owners = [[k, v] for k, v in owners.items()]\n\n    return {\"owners\": owners, \"groups\": targetGroups}\n\n\n@login_required()\n@render_response()\ndef load_chgrp_target(request, group_id, target_type, conn=None, **kwargs):\n    \"\"\" Loads a tree for user to pick target Project, Dataset or Screen \"\"\"\n\n    # filter by group (not switching group)\n    conn.SERVICE_OPTS.setOmeroGroup(int(group_id))\n    owner = getIntOrDefault(request, \"owner\", None)\n\n    manager = BaseContainer(conn)\n    manager.listContainerHierarchy(owner)\n    template = \"webclient/data/chgrp_target_tree.html\"\n\n    context = {\"manager\": manager, \"target_type\": target_type, \"template\": template}\n    return context\n\n\n@login_required()\n@render_response()\ndef load_searching(request, form=None, conn=None, **kwargs):\n    \"\"\"\n    Handles AJAX calls to search\n    \"\"\"\n    manager = BaseSearch(conn)\n\n    foundById = []\n    # form = 'form' if we are searching. Get query from request...\n    r = request.GET\n    if form is not None:\n        query_search = r.get(\"query\", None)\n        if query_search is None:\n            return HttpResponse(\"No search '?query' included\")\n        query_search = query_search.replace(\"+\", \" \")\n        advanced = toBoolean(r.get(\"advanced\"))\n        # If this is an advanced search use 'advanced_search' for query\n        if advanced:\n            query_search = r.get(\"advanced_search\")\n        template = \"webclient/search/search_details.html\"\n\n        onlyTypes = r.getlist(\"datatype\")\n        fields = r.getlist(\"field\")\n        searchGroup = r.get(\"searchGroup\", None)\n        ownedBy = r.get(\"ownedBy\", None)\n\n        useAcquisitionDate = toBoolean(r.get(\"useAcquisitionDate\"))\n        startdate = r.get(\"startdateinput\", None)\n        startdate = startdate is not None and smart_str(startdate) or None\n        enddate = r.get(\"enddateinput\", None)\n        enddate = enddate is not None and smart_str(enddate) or None\n        date = None\n        if startdate is not None:\n            if enddate is None:\n                n = datetime.datetime.now()\n                enddate = \"%s-%02d-%02d\" % (n.year, n.month, n.day)\n            date = \"%s_%s\" % (startdate, enddate)\n\n        # by default, if user has not specified any types:\n        if len(onlyTypes) == 0:\n            onlyTypes = [\"images\"]\n\n        # search is carried out and results are stored in\n        # manager.containers.images etc.\n        manager.search(\n            query_search,\n            onlyTypes,\n            fields,\n            searchGroup,\n            ownedBy,\n            useAcquisitionDate,\n            date,\n            rawQuery=advanced,\n        )\n\n        # if the query is only numbers (separated by commas or spaces)\n        # we search for objects by ID\n        isIds = re.compile(r\"^[\\d ,]+$\")\n        if isIds.search(query_search) is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(-1)\n            idSet = set()\n            for queryId in re.split(\" |,\", query_search):\n                if len(queryId) == 0:\n                    continue\n                try:\n                    searchById = long(queryId)\n                    if searchById in idSet:\n                        continue\n                    idSet.add(searchById)\n                    for t in onlyTypes:\n                        t = t[0:-1]  # remove 's'\n                        if t in (\n                            \"project\",\n                            \"dataset\",\n                            \"image\",\n                            \"screen\",\n                            \"plate\",\n                            \"well\",\n                        ):\n                            obj = conn.getObject(t, searchById)\n                            if obj is not None:\n                                foundById.append({\"otype\": t, \"obj\": obj})\n                except ValueError:\n                    pass\n\n    else:\n        # simply display the search home page.\n        template = \"webclient/search/search.html\"\n\n    context = {\n        \"manager\": manager,\n        \"foundById\": foundById,\n        \"resultCount\": manager.c_size + len(foundById),\n    }\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_details(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This page is the right-hand panel 'general metadata', first tab only.\n    Shown for Projects, Datasets, Images, Screens, Plates, Wells, Tags etc.\n    The data and annotations are loaded by the manager. Display of appropriate\n    data is handled by the template.\n    \"\"\"\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    context = dict()\n\n    # we only expect a single object, but forms can take multiple objects\n    images = c_type == \"image\" and list(conn.getObjects(\"Image\", [c_id])) or list()\n    datasets = (\n        c_type == \"dataset\" and list(conn.getObjects(\"Dataset\", [c_id])) or list()\n    )\n    projects = (\n        c_type == \"project\" and list(conn.getObjects(\"Project\", [c_id])) or list()\n    )\n    screens = c_type == \"screen\" and list(conn.getObjects(\"Screen\", [c_id])) or list()\n    plates = c_type == \"plate\" and list(conn.getObjects(\"Plate\", [c_id])) or list()\n    acquisitions = (\n        c_type == \"acquisition\"\n        and list(conn.getObjects(\"PlateAcquisition\", [c_id]))\n        or list()\n    )\n    shares = (\n        (c_type == \"share\" or c_type == \"discussion\")\n        and [conn.getShare(c_id)]\n        or list()\n    )\n    wells = c_type == \"well\" and list(conn.getObjects(\"Well\", [c_id])) or list()\n\n    # we simply set up the annotation form, passing the objects to be\n    # annotated.\n    selected = {\n        \"images\": c_type == \"image\" and [c_id] or [],\n        \"datasets\": c_type == \"dataset\" and [c_id] or [],\n        \"projects\": c_type == \"project\" and [c_id] or [],\n        \"screens\": c_type == \"screen\" and [c_id] or [],\n        \"plates\": c_type == \"plate\" and [c_id] or [],\n        \"acquisitions\": c_type == \"acquisition\" and [c_id] or [],\n        \"wells\": c_type == \"well\" and [c_id] or [],\n        \"shares\": ((c_type == \"share\" or c_type == \"discussion\") and [c_id] or []),\n    }\n\n    initial = {\n        \"selected\": selected,\n        \"images\": images,\n        \"datasets\": datasets,\n        \"projects\": projects,\n        \"screens\": screens,\n        \"plates\": plates,\n        \"acquisitions\": acquisitions,\n        \"wells\": wells,\n        \"shares\": shares,\n    }\n\n    form_comment = None\n    figScripts = None\n    if c_type in (\"share\", \"discussion\"):\n        template = \"webclient/annotations/annotations_share.html\"\n        manager = BaseShare(conn, c_id)\n        manager.getAllUsers(c_id)\n        manager.getComments(c_id)\n        form_comment = CommentAnnotationForm(initial=initial)\n    else:\n        try:\n            manager = BaseContainer(conn, **{str(c_type): long(c_id), \"index\": index})\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n        if share_id is not None:\n            template = \"webclient/annotations/annotations_share.html\"\n            context[\"share\"] = BaseShare(conn, share_id)\n        else:\n            template = \"webclient/annotations/metadata_general.html\"\n            context[\"canExportAsJpg\"] = manager.canExportAsJpg(request)\n            context[\"annotationCounts\"] = manager.getAnnotationCounts()\n            figScripts = manager.listFigureScripts()\n    context[\"manager\"] = manager\n\n    if c_type in (\"tag\", \"tagset\"):\n        context[\"insight_ns\"] = omero.rtypes.rstring(\n            omero.constants.metadata.NSINSIGHTTAGSET\n        ).val\n    if form_comment is not None:\n        context[\"form_comment\"] = form_comment\n\n    context[\"figScripts\"] = figScripts\n    context[\"template\"] = template\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_preview(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This is the image 'Preview' tab for the right-hand panel.\n    \"\"\"\n    context = {}\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    if share_id:\n        context[\"share\"] = BaseShare(conn, share_id)\n    if c_type == \"well\":\n        manager.image = manager.well.getImage(index)\n\n    allRdefs = manager.image.getAllRenderingDefs()\n    rdefs = {}\n    rdefId = manager.image.getRenderingDefId()\n    # remove duplicates per user\n    for r in allRdefs:\n        ownerId = r[\"owner\"][\"id\"]\n        r[\"current\"] = r[\"id\"] == rdefId\n        # if duplicate rdefs for user, pick one with highest ID\n        if ownerId not in rdefs or rdefs[ownerId][\"id\"] < r[\"id\"]:\n            rdefs[ownerId] = r\n    rdefs = rdefs.values()\n    # format into rdef strings,\n    # E.g. {c: '1|3118:35825$FF0000,2|2086:18975$FFFF00', m: 'c'}\n    rdefQueries = []\n    for r in rdefs:\n        chs = []\n        for i, c in enumerate(r[\"c\"]):\n            act = \"-\"\n            if c[\"active\"]:\n                act = \"\"\n            color = c[\"lut\"] if \"lut\" in c else c[\"color\"]\n            reverse = \"r\" if c[\"inverted\"] else \"-r\"\n            chs.append(\n                \"%s%s|%s:%s%s$%s\" % (act, i + 1, c[\"start\"], c[\"end\"], reverse, color)\n            )\n        rdefQueries.append(\n            {\n                \"id\": r[\"id\"],\n                \"owner\": r[\"owner\"],\n                \"c\": \",\".join(chs),\n                \"m\": r[\"model\"] == \"greyscale\" and \"g\" or \"c\",\n            }\n        )\n    max_w, max_h = conn.getMaxPlaneSize()\n    size_x = manager.image.getSizeX()\n    size_y = manager.image.getSizeY()\n\n    context[\"tiledImage\"] = (size_x * size_y) > (max_w * max_h)\n    context[\"manager\"] = manager\n    context[\"rdefsJson\"] = json.dumps(rdefQueries)\n    context[\"rdefs\"] = rdefs\n    context[\"template\"] = \"webclient/annotations/metadata_preview.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_hierarchy(request, c_type, c_id, conn=None, **kwargs):\n    \"\"\"\n    This loads the ancestors of the specified object and displays them in a\n    static tree.\n    Used by an AJAX call from the metadata_general panel.\n    \"\"\"\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n\n    context = {\"manager\": manager}\n    context[\"template\"] = \"webclient/annotations/metadata_hierarchy.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_acquisition(\n    request, c_type, c_id, conn=None, share_id=None, **kwargs\n):\n    \"\"\"\n    The acquisition tab of the right-hand panel. Only loaded for images.\n    TODO: urls regex should make sure that c_type is only 'image' OR 'well'\n    \"\"\"\n    try:\n        if c_type in (\"share\", \"discussion\"):\n            template = \"webclient/annotations/annotations_share.html\"\n            manager = BaseShare(conn, c_id)\n            manager.getAllUsers(c_id)\n            manager.getComments(c_id)\n        else:\n            template = \"webclient/annotations/metadata_acquisition.html\"\n            manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    form_environment = None\n    form_objective = None\n    form_microscope = None\n    form_instrument_objectives = list()\n    form_stageLabel = None\n    form_filters = list()\n    form_dichroics = list()\n    form_detectors = list()\n    form_channels = list()\n    form_lasers = list()\n\n    lasertypes = list(conn.getEnumerationEntries(\"LaserType\"))\n    arctypes = list(conn.getEnumerationEntries(\"ArcType\"))\n    filamenttypes = list(conn.getEnumerationEntries(\"FilamentType\"))\n\n    # various enums we need for the forms (don't load unless needed)\n    mediums = None\n    immersions = None\n    corrections = None\n\n    if c_type == \"image\":\n        if share_id is None:\n            manager.companionFiles()\n        manager.channelMetadata()\n        for theC, ch in enumerate(manager.channel_metadata):\n            logicalChannel = ch.getLogicalChannel()\n            if logicalChannel is not None:\n                channel = dict()\n                channel[\"form\"] = MetadataChannelForm(\n                    initial={\n                        \"logicalChannel\": logicalChannel,\n                        \"exWave\": ch.getExcitationWave(units=True),\n                        \"emWave\": ch.getEmissionWave(units=True),\n                        \"illuminations\": list(\n                            conn.getEnumerationEntries(\"IlluminationI\")\n                        ),\n                        \"contrastMethods\": list(\n                            conn.getEnumerationEntries(\"ContrastMethodI\")\n                        ),\n                        \"modes\": list(conn.getEnumerationEntries(\"AcquisitionModeI\")),\n                    }\n                )\n                # 9853 Much metadata is not available to 'shares'\n                if share_id is None:\n                    lightPath = logicalChannel.getLightPath()\n                    if lightPath is not None:\n                        channel[\"form_dichroic\"] = None\n                        channel[\"form_excitation_filters\"] = list()\n                        channel[\"form_emission_filters\"] = list()\n                        lightPathDichroic = lightPath.getDichroic()\n                        if lightPathDichroic is not None:\n                            channel[\"form_dichroic\"] = MetadataDichroicForm(\n                                initial={\"dichroic\": lightPathDichroic}\n                            )\n                        filterTypes = list(conn.getEnumerationEntries(\"FilterTypeI\"))\n                        for f in lightPath.getEmissionFilters():\n                            channel[\"form_emission_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n                        for f in lightPath.getExcitationFilters():\n                            channel[\"form_excitation_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n\n                    detectorSettings = logicalChannel.getDetectorSettings()\n                    if (\n                        detectorSettings._obj is not None\n                        and detectorSettings.getDetector()\n                    ):\n                        channel[\"form_detector_settings\"] = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": detectorSettings,\n                                \"detector\": detectorSettings.getDetector(),\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                                \"binnings\": list(conn.getEnumerationEntries(\"Binning\")),\n                            }\n                        )\n\n                    lightSourceSettings = logicalChannel.getLightSourceSettings()\n                    if (\n                        lightSourceSettings is not None\n                        and lightSourceSettings._obj is not None\n                    ):\n                        lightSrc = lightSourceSettings.getLightSource()\n                        if lightSrc is not None:\n                            lstypes = lasertypes\n                            if lightSrc.OMERO_CLASS == \"Arc\":\n                                lstypes = arctypes\n                            elif lightSrc.OMERO_CLASS == \"Filament\":\n                                lstypes = filamenttypes\n                            channel[\"form_light_source\"] = MetadataLightSourceForm(\n                                initial={\n                                    \"lightSource\": lightSrc,\n                                    \"lightSourceSettings\": lightSourceSettings,\n                                    \"lstypes\": lstypes,\n                                    \"mediums\": list(\n                                        conn.getEnumerationEntries(\"LaserMediumI\")\n                                    ),\n                                    \"pulses\": list(\n                                        conn.getEnumerationEntries(\"PulseI\")\n                                    ),\n                                }\n                            )\n                # TODO: We don't display filter sets here yet since they are\n                # not populated on Import by BioFormats.\n                channel[\"label\"] = ch.getLabel()\n                color = ch.getColor()\n                channel[\"color\"] = color is not None and color.getHtml() or None\n                planeInfo = (\n                    manager.image\n                    and manager.image.getPrimaryPixels().copyPlaneInfo(\n                        theC=theC, theZ=0\n                    )\n                )\n                plane_info = []\n\n                for pi in planeInfo:\n                    deltaT = pi.getDeltaT(units=\"SECOND\")\n                    exposure = pi.getExposureTime(units=\"SECOND\")\n                    if deltaT is None and exposure is None:\n                        continue\n                    if deltaT is not None:\n                        deltaT = deltaT.getValue()\n                    if exposure is not None:\n                        exposure = exposure.getValue()\n                    plane_info.append(\n                        {\"theT\": pi.theT, \"deltaT\": deltaT, \"exposureTime\": exposure}\n                    )\n                channel[\"plane_info\"] = plane_info\n\n                form_channels.append(channel)\n\n        try:\n            image = manager.well.getWellSample().image()\n        except Exception:\n            image = manager.image\n\n        if share_id is None:  # 9853\n            if image.getObjectiveSettings() is not None:\n                # load the enums if needed and create our Objective Form\n                if mediums is None:\n                    mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                if immersions is None:\n                    immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                if corrections is None:\n                    corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                form_objective = MetadataObjectiveSettingsForm(\n                    initial={\n                        \"objectiveSettings\": image.getObjectiveSettings(),\n                        \"objective\": image.getObjectiveSettings().getObjective(),\n                        \"mediums\": mediums,\n                        \"immersions\": immersions,\n                        \"corrections\": corrections,\n                    }\n                )\n            if image.getImagingEnvironment() is not None:\n                form_environment = MetadataEnvironmentForm(initial={\"image\": image})\n            if image.getStageLabel() is not None:\n                form_stageLabel = MetadataStageLabelForm(initial={\"image\": image})\n\n            instrument = image.getInstrument()\n            if instrument is not None:\n                if instrument.getMicroscope() is not None:\n                    form_microscope = MetadataMicroscopeForm(\n                        initial={\n                            \"microscopeTypes\": list(\n                                conn.getEnumerationEntries(\"MicroscopeTypeI\")\n                            ),\n                            \"microscope\": instrument.getMicroscope(),\n                        }\n                    )\n\n                objectives = instrument.getObjectives()\n                for o in objectives:\n                    # load the enums if needed and create our Objective Form\n                    if mediums is None:\n                        mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                    if immersions is None:\n                        immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                    if corrections is None:\n                        corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                    obj_form = MetadataObjectiveForm(\n                        initial={\n                            \"objective\": o,\n                            \"mediums\": mediums,\n                            \"immersions\": immersions,\n                            \"corrections\": corrections,\n                        }\n                    )\n                    form_instrument_objectives.append(obj_form)\n                filters = list(instrument.getFilters())\n                if len(filters) > 0:\n                    for f in filters:\n                        form_filter = MetadataFilterForm(\n                            initial={\n                                \"filter\": f,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"FilterTypeI\")\n                                ),\n                            }\n                        )\n                        form_filters.append(form_filter)\n\n                dichroics = list(instrument.getDichroics())\n                for d in dichroics:\n                    form_dichroic = MetadataDichroicForm(initial={\"dichroic\": d})\n                    form_dichroics.append(form_dichroic)\n\n                detectors = list(instrument.getDetectors())\n                if len(detectors) > 0:\n                    for d in detectors:\n                        form_detector = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": None,\n                                \"detector\": d,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                            }\n                        )\n                        form_detectors.append(form_detector)\n\n                lasers = list(instrument.getLightSources())\n                if len(lasers) > 0:\n                    for laser in lasers:\n                        lstypes = lasertypes\n                        if laser.OMERO_CLASS == \"Arc\":\n                            lstypes = arctypes\n                        elif laser.OMERO_CLASS == \"Filament\":\n                            lstypes = filamenttypes\n                        form_laser = MetadataLightSourceForm(\n                            initial={\n                                \"lightSource\": laser,\n                                \"lstypes\": lstypes,\n                                \"mediums\": list(\n                                    conn.getEnumerationEntries(\"LaserMediumI\")\n                                ),\n                                \"pulses\": list(conn.getEnumerationEntries(\"PulseI\")),\n                            }\n                        )\n                        form_lasers.append(form_laser)\n\n    # TODO: remove this 'if' since we should only have c_type = 'image'?\n    context = {\"manager\": manager, \"share_id\": share_id}\n    if c_type not in (\"share\", \"discussion\", \"tag\"):\n        context[\"form_channels\"] = form_channels\n        context[\"form_environment\"] = form_environment\n        context[\"form_objective\"] = form_objective\n        context[\"form_microscope\"] = form_microscope\n        context[\"form_instrument_objectives\"] = form_instrument_objectives\n        context[\"form_filters\"] = form_filters\n        context[\"form_dichroics\"] = form_dichroics\n        context[\"form_detectors\"] = form_detectors\n        context[\"form_lasers\"] = form_lasers\n        context[\"form_stageLabel\"] = form_stageLabel\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_original_metadata(request, imageId, conn=None, share_id=None, **kwargs):\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    context = {\n        \"template\": \"webclient/annotations/original_metadata.html\",\n        \"imageId\": image.getId(),\n    }\n    try:\n        om = image.loadOriginalMetadata()\n        if om is not None:\n            context[\"original_metadata\"] = om[0]\n            context[\"global_metadata\"] = om[1]\n            context[\"series_metadata\"] = om[2]\n    except omero.LockTimeout:\n        # 408 is Request Timeout\n        return HttpResponse(content=\"LockTimeout\", status=408)\n    return context\n\n\n###########################################################################\n# ACTIONS\n\n# Annotation in the right-hand panel is handled the same way for single\n# objects (metadata_general.html)\n# AND for batch annotation (batch_annotate.html) by 4 forms:\n# Comment (this is loaded in the initial page)\n# Tags (the empty form is in the initial page but fields are loaded via AJAX)\n# Local File (this is loaded in the initial page)\n# Existing File (the empty form is in the initial page but field is loaded via\n# AJAX)\n#\n# In each case, the form itself contains hidden fields to specify the\n# object(s) being annotated\n# All forms inherit from a single form that has these fields.\n\n\ndef getObjects(request, conn=None):\n    \"\"\"\n    Prepare objects for use in the annotation forms.\n    These objects are required by the form superclass to populate hidden\n    fields, so we know what we're annotating on submission\n    \"\"\"\n    r = request.GET or request.POST\n    images = (\n        len(r.getlist(\"image\")) > 0\n        and list(conn.getObjects(\"Image\", r.getlist(\"image\")))\n        or list()\n    )\n    datasets = (\n        len(r.getlist(\"dataset\")) > 0\n        and list(conn.getObjects(\"Dataset\", r.getlist(\"dataset\")))\n        or list()\n    )\n    projects = (\n        len(r.getlist(\"project\")) > 0\n        and list(conn.getObjects(\"Project\", r.getlist(\"project\")))\n        or list()\n    )\n    screens = (\n        len(r.getlist(\"screen\")) > 0\n        and list(conn.getObjects(\"Screen\", r.getlist(\"screen\")))\n        or list()\n    )\n    plates = (\n        len(r.getlist(\"plate\")) > 0\n        and list(conn.getObjects(\"Plate\", r.getlist(\"plate\")))\n        or list()\n    )\n    acquisitions = (\n        len(r.getlist(\"acquisition\")) > 0\n        and list(conn.getObjects(\"PlateAcquisition\", r.getlist(\"acquisition\")))\n        or list()\n    )\n    shares = (\n        len(r.getlist(\"share\")) > 0 and [conn.getShare(r.getlist(\"share\")[0])] or list()\n    )\n    wells = (\n        len(r.getlist(\"well\")) > 0\n        and list(conn.getObjects(\"Well\", r.getlist(\"well\")))\n        or list()\n    )\n    return {\n        \"image\": images,\n        \"dataset\": datasets,\n        \"project\": projects,\n        \"screen\": screens,\n        \"plate\": plates,\n        \"acquisition\": acquisitions,\n        \"well\": wells,\n        \"share\": shares,\n    }\n\n\ndef getIds(request):\n    \"\"\"\n    Used by forms to indicate the currently selected objects prepared above\n    \"\"\"\n    r = request.GET or request.POST\n    selected = {\n        \"images\": r.getlist(\"image\"),\n        \"datasets\": r.getlist(\"dataset\"),\n        \"projects\": r.getlist(\"project\"),\n        \"screens\": r.getlist(\"screen\"),\n        \"plates\": r.getlist(\"plate\"),\n        \"acquisitions\": r.getlist(\"acquisition\"),\n        \"wells\": r.getlist(\"well\"),\n        \"shares\": r.getlist(\"share\"),\n    }\n    return selected\n\n\n@login_required()\n@render_response()\ndef batch_annotate(request, conn=None, **kwargs):\n    \"\"\"\n    This page gives a form for batch annotation.\n    Local File form and Comment form are loaded. Other forms are loaded via\n    AJAX\n    \"\"\"\n\n    objs = getObjects(request, conn)\n\n    # get groups for selected objects - setGroup() and create links\n    obj_ids = []\n    obj_labels = []\n    groupIds = set()\n    annotationBlocked = False\n    for key in objs:\n        obj_ids += [\"%s=%s\" % (key, o.id) for o in objs[key]]\n        for o in objs[key]:\n            groupIds.add(o.getDetails().group.id.val)\n            if not o.canAnnotate():\n                annotationBlocked = (\n                    \"Can't add annotations because you don't\" \" have permissions\"\n                )\n            obj_labels.append({\"type\": key.title(), \"id\": o.id, \"name\": o.getName()})\n    obj_string = \"&\".join(obj_ids)\n    link_string = \"|\".join(obj_ids).replace(\"=\", \"-\")\n    if len(groupIds) == 0:\n        # No supported objects found.\n        # If multiple tags / tagsets selected, return placeholder\n        if (\n            len(request.GET.getlist(\"tag\")) > 0\n            or len(request.GET.getlist(\"tagset\")) > 0\n        ):\n            return HttpResponse(\"<h2>Can't batch annotate tags</h2>\")\n        else:\n            return handlerInternalError(request, \"No objects found\")\n    groupId = list(groupIds)[0]\n    conn.SERVICE_OPTS.setOmeroGroup(groupId)\n\n    manager = BaseContainer(conn)\n    figScripts = manager.listFigureScripts(objs)\n    canExportAsJpg = manager.canExportAsJpg(request, objs)\n    filesetInfo = None\n    iids = []\n    if \"image\" in objs and len(objs[\"image\"]) > 0:\n        iids = [i.getId() for i in objs[\"image\"]]\n    if len(iids) > 0:\n        filesetInfo = conn.getFilesetFilesInfo(iids)\n        archivedInfo = conn.getArchivedFilesInfo(iids)\n        filesetInfo[\"count\"] += archivedInfo[\"count\"]\n        filesetInfo[\"size\"] += archivedInfo[\"size\"]\n\n    context = {\n        \"iids\": iids,\n        \"obj_string\": obj_string,\n        \"link_string\": link_string,\n        \"obj_labels\": obj_labels,\n        \"batch_ann\": True,\n        \"figScripts\": figScripts,\n        \"canExportAsJpg\": canExportAsJpg,\n        \"filesetInfo\": filesetInfo,\n        \"annotationBlocked\": annotationBlocked,\n        \"differentGroups\": False,\n    }\n    if len(groupIds) > 1:\n        context[\"annotationBlocked\"] = (\n            \"Can't add annotations because\" \" objects are in different groups\"\n        )\n        context[\"differentGroups\"] = True  # E.g. don't run scripts etc\n    context[\"canDownload\"] = manager.canDownload(objs)\n    context[\"template\"] = \"webclient/annotations/batch_annotate.html\"\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    context[\"annotationCounts\"] = manager.getBatchAnnotationCounts(\n        getObjects(request, conn)\n    )\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_file(request, conn=None, **kwargs):\n    \"\"\"\n    On 'POST', This handles attaching an existing file-annotation(s) and/or\n    upload of a new file to one or more objects\n    Otherwise it generates the form for choosing file-annotations & local\n    files.\n    \"\"\"\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    obj_count = sum([len(selected[types]) for types in selected])\n    if obj_count == 0:\n        raise Http404(\"Need to specify objects via e.g. ?image=1\")\n\n    # Get appropriate manager, either to list available Files to add to single\n    # object, or list ALL Files (multiple objects)\n    manager = None\n    if obj_count == 1:\n        for t in selected:\n            if len(selected[t]) > 0:\n                o_type = t[:-1]  # \"images\" -> \"image\"\n                o_id = selected[t][0]\n                break\n        if o_type in (\n            \"dataset\",\n            \"project\",\n            \"image\",\n            \"screen\",\n            \"plate\",\n            \"acquisition\",\n            \"well\",\n            \"comment\",\n            \"file\",\n            \"tag\",\n            \"tagset\",\n        ):\n            if o_type == \"tagset\":\n                # TODO: this should be handled by the BaseContainer\n                o_type = \"tag\"\n            kw = {}\n            if o_type is not None and int(o_id) > 0:\n                kw[str(o_type)] = int(o_id)\n            try:\n                manager = BaseContainer(conn, **kw)\n            except AttributeError as x:\n                return handlerInternalError(request, x)\n\n    if manager is not None:\n        files = manager.getFilesByObject()\n    else:\n        manager = BaseContainer(conn)\n        for dtype, objs in oids.items():\n            if len(objs) > 0:\n                # NB: we only support a single data-type now. E.g. 'image' OR\n                # 'dataset' etc.\n                files = manager.getFilesByObject(\n                    parent_type=dtype, parent_ids=[o.getId() for o in objs]\n                )\n                break\n\n    initial[\"files\"] = files\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_file = FilesAnnotationForm(initial=initial, data=request.POST.copy())\n        if form_file.is_valid():\n            # Link existing files...\n            files = form_file.cleaned_data[\"files\"]\n            added_files = []\n            if files is not None and len(files) > 0:\n                added_files = manager.createAnnotationsLinks(\"file\", files, oids)\n            # upload new file\n            fileupload = (\n                \"annotation_file\" in request.FILES\n                and request.FILES[\"annotation_file\"]\n                or None\n            )\n            if fileupload is not None and fileupload != \"\":\n                newFileId = manager.createFileAnnotations(fileupload, oids)\n                added_files.append(newFileId)\n            return JsonResponse({\"fileIds\": added_files})\n        else:\n            return HttpResponse(form_file.errors)\n\n    else:\n        form_file = FilesAnnotationForm(initial=initial)\n        context = {\"form_file\": form_file}\n        template = \"webclient/annotations/files_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_rating(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Rating to one or more objects\n    \"\"\"\n    if request.method != \"POST\":\n        raise Http404(\"Only POST supported\")\n    rating = getIntOrDefault(request, \"rating\", 0)\n    oids = getObjects(request, conn)\n\n    # add / update rating\n    for otype, objs in oids.items():\n        for o in objs:\n            o.setRating(rating)\n\n    # return a summary of ratings\n    return JsonResponse({\"success\": True})\n\n\n@login_required()\n@render_response()\ndef annotate_comment(request, conn=None, **kwargs):\n    \"\"\"Handle adding Comments to one or more objects\n    Unbound instance of Comment form not available.\n    If the form has been submitted, a bound instance of the form\n    is created using request.POST\"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\"Unbound instance of form not available.\")\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n        \"shares\": oids[\"share\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!) this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    # Handle form submission...\n    form_multi = CommentAnnotationForm(initial=initial, data=request.POST.copy())\n    if form_multi.is_valid():\n        # In each case below, we pass the {'object_type': [ids]} map\n        content = form_multi.cleaned_data[\"comment\"]\n        if content is not None and content != \"\":\n            if oids[\"share\"] is not None and len(oids[\"share\"]) > 0:\n                sid = oids[\"share\"][0].id\n                manager = BaseShare(conn, sid)\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                textAnn = manager.addComment(host, content)\n                # For shares we need to return html for display...\n                context = {\n                    \"tann\": textAnn,\n                    \"added_by\": conn.getUserId(),\n                    \"template\": \"webclient/annotations/comment.html\",\n                }\n            else:\n                # ...otherwise Comments are re-loaded by AJAX json\n                # so we don't *need* to return anything\n                manager = BaseContainer(conn)\n                annId = manager.createCommentAnnotations(content, oids)\n                context = {\"annId\": annId, \"added_by\": conn.getUserId()}\n            return context\n    else:\n        # TODO: handle invalid form error\n        return HttpResponse(str(form_multi.errors))\n\n\n@login_required()\n@render_response()\ndef annotate_map(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Map Annotations to one or more objects\n    POST data \"mapAnnotation\" should be list of ['key':'value'] pairs.\n    \"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\n            \"Need to POST map annotation data as list of\" \" ['key', 'value'] pairs\"\n        )\n\n    oids = getObjects(request, conn)\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    # this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    data = request.POST.get(\"mapAnnotation\")\n    data = json.loads(data)\n\n    annIds = request.POST.getlist(\"annId\")\n    ns = request.POST.get(\"ns\", omero.constants.metadata.NSCLIENTMAPANNOTATION)\n\n    # Create a new annotation\n    if len(annIds) == 0 and len(data) > 0:\n        duplicate = request.POST.get(\"duplicate\", \"false\")\n        duplicate.lower() == \"true\"\n        # For 'client' map annotations, we enforce 1 annotation per object\n        if ns == omero.constants.metadata.NSCLIENTMAPANNOTATION:\n            duplicate = True\n        if duplicate:\n            # Create a new Map Annotation for each object:\n            for k, objs in oids.items():\n                for obj in objs:\n                    ann = omero.gateway.MapAnnotationWrapper(conn)\n                    ann.setValue(data)\n                    ann.setNs(ns)\n                    ann.save()\n                    annIds.append(ann.getId())\n                    obj.linkAnnotation(ann)\n        else:\n            # Create single Map Annotation and link to all objects\n            ann = omero.gateway.MapAnnotationWrapper(conn)\n            ann.setValue(data)\n            ann.setNs(ns)\n            ann.save()\n            annIds.append(ann.getId())\n            for k, objs in oids.items():\n                for obj in objs:\n                    obj.linkAnnotation(ann)\n    # Or update existing annotations\n    else:\n        for annId in annIds:\n            ann = conn.getObject(\"MapAnnotation\", annId)\n            if ann is None:\n                continue\n            if len(data) > 0:\n                ann.setValue(data)\n                ann.save()\n            else:\n                # Delete if no data\n                handle = conn.deleteObjects(\"/Annotation\", [annId])\n                try:\n                    conn._waitOnCmd(handle)\n                finally:\n                    handle.close()\n        if len(data) == 0:\n            annIds = None\n\n    return {\"annId\": annIds}\n\n\n@login_required()\n@render_response()\ndef marshal_tagging_form_data(request, conn=None, **kwargs):\n    \"\"\"\n    Provides json data to ome.tagging_form.js\n    \"\"\"\n\n    group = get_long_or_default(request, \"group\", -1)\n    conn.SERVICE_OPTS.setOmeroGroup(str(group))\n    try:\n        offset = int(request.GET.get(\"offset\"))\n        limit = int(request.GET.get(\"limit\", 1000))\n    except Exception:\n        offset = limit = None\n\n    jsonmode = request.GET.get(\"jsonmode\")\n    if jsonmode == \"tagcount\":\n        tag_count = conn.getTagCount()\n        return dict(tag_count=tag_count)\n\n    manager = BaseContainer(conn)\n    manager.loadTagsRecursive(eid=-1, offset=offset, limit=limit)\n    all_tags = manager.tags_recursive\n    all_tags_owners = manager.tags_recursive_owners\n\n    if jsonmode == \"tags\":\n        # send tag information without descriptions\n        r = list((i, t, o, s) for i, d, t, o, s in all_tags)\n        return r\n\n    elif jsonmode == \"desc\":\n        # send descriptions for tags\n        return dict((i, d) for i, d, t, o, s in all_tags)\n\n    elif jsonmode == \"owners\":\n        # send owner information\n        return all_tags_owners\n\n    return HttpResponse()\n\n\n@login_required()\n@render_response()\ndef annotate_tags(request, conn=None, **kwargs):\n    \"\"\"\n    This handles creation AND submission of Tags form, adding new AND/OR\n    existing tags to one or more objects\n    \"\"\"\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    obj_count = sum([len(selected[types]) for types in selected])\n\n    # Get appropriate manager, either to list available Tags to add to single\n    # object, or list ALL Tags (multiple objects)\n    manager = None\n    self_id = conn.getEventContext().userId\n\n    tags = []\n\n    # Use the first object we find to set context (assume all objects are\n    # in same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    # Make a list of all current tags\n    # As would be on right column of tagging dialog...\n    taglist, users = tree.marshal_annotations(\n        conn,\n        project_ids=selected[\"projects\"],\n        dataset_ids=selected[\"datasets\"],\n        image_ids=selected[\"images\"],\n        screen_ids=selected[\"screens\"],\n        plate_ids=selected[\"plates\"],\n        run_ids=selected[\"acquisitions\"],\n        well_ids=selected[\"wells\"],\n        ann_type=\"tag\",\n        # If we reach this limit we'll get some tags not removed\n        limit=ANNOTATIONS_LIMIT,\n    )\n\n    userMap = {}\n    for exp in users:\n        userMap[exp[\"id\"]] = exp\n\n    # For batch annotate, only include tags that user has added to all objects\n    if obj_count > 1:\n        # count my links\n        myLinkCount = {}\n        for t in taglist:\n            tid = t[\"id\"]\n            if tid not in myLinkCount:\n                myLinkCount[tid] = 0\n            if t[\"link\"][\"owner\"][\"id\"] == self_id:\n                myLinkCount[tid] += 1\n        # filter\n        taglist = [t for t in taglist if myLinkCount[t[\"id\"]] == obj_count]\n\n    selected_tags = []\n    for tag in taglist:\n        linkOwnerId = tag[\"link\"][\"owner\"][\"id\"]\n        owner = userMap[linkOwnerId]\n        ownerName = \"%s %s\" % (owner[\"firstName\"], owner[\"lastName\"])\n        canDelete = True\n        created = tag[\"link\"][\"date\"]\n        linkOwned = linkOwnerId == self_id\n        selected_tags.append(\n            (tag[\"id\"], self_id, ownerName, canDelete, created, linkOwned)\n        )\n\n    # selected_tags is really a list of tag LINKS.\n    # May be several links per tag.id\n    selected_tags.sort(key=lambda x: x[0])\n\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_tags = TagsAnnotationForm(initial=initial, data=request.POST.copy())\n        newtags_formset = NewTagsAnnotationFormSet(\n            prefix=\"newtags\", data=request.POST.copy()\n        )\n        # Create new tags or Link existing tags...\n        if form_tags.is_valid() and newtags_formset.is_valid():\n            # filter down previously selected tags to the ones linked by\n            # current user\n            selected_tag_ids = [stag[0] for stag in selected_tags if stag[5]]\n            # Remove duplicates from tag IDs\n            selected_tag_ids = list(set(selected_tag_ids))\n            post_tags = list(form_tags.cleaned_data[\"tags\"])\n            tags = [tag for tag in post_tags if tag not in selected_tag_ids]\n            removed = [tag for tag in selected_tag_ids if tag not in post_tags]\n            manager = BaseContainer(conn)\n            if tags:\n                manager.createAnnotationsLinks(\"tag\", tags, oids)\n            new_tags = []\n            for form in newtags_formset.forms:\n                new_tags.append(\n                    manager.createTagAnnotations(\n                        form.cleaned_data[\"tag\"],\n                        form.cleaned_data[\"description\"],\n                        oids,\n                        tag_group_id=form.cleaned_data[\"tagset\"],\n                    )\n                )\n            # only remove Tags where the link is owned by self_id\n            for remove in removed:\n                tag_manager = BaseContainer(conn, tag=remove)\n                tag_manager.remove(\n                    [\n                        \"%s-%s\" % (dtype, obj.id)\n                        for dtype, objs in oids.items()\n                        for obj in objs\n                    ],\n                    tag_owner_id=self_id,\n                )\n            return JsonResponse({\"added\": tags, \"removed\": removed, \"new\": new_tags})\n        else:\n            # TODO: handle invalid form error\n            return HttpResponse(str(form_tags.errors))\n\n    else:\n        form_tags = TagsAnnotationForm(initial=initial)\n        newtags_formset = NewTagsAnnotationFormSet(prefix=\"newtags\")\n        context = {\n            \"form_tags\": form_tags,\n            \"newtags_formset\": newtags_formset,\n            \"selected_tags\": selected_tags,\n        }\n        template = \"webclient/annotations/tags_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@require_POST\n@login_required()\n@render_response()\ndef edit_channel_names(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Edit and save channel names\n    \"\"\"\n    image = conn.getObject(\"Image\", imageId)\n    sizeC = image.getSizeC()\n    channelNames = {}\n    nameDict = {}\n    for i in range(sizeC):\n        cname = request.POST.get(\"channel%d\" % i, None)\n        if cname is not None:\n            cname = smart_str(cname)[:255]  # Truncate to fit in DB\n            channelNames[\"channel%d\" % i] = cname\n            nameDict[i + 1] = cname\n    # If the 'Apply to Dataset' button was used to submit...\n    if request.POST.get(\"confirm_apply\", None) is not None:\n        # plate-123 OR dataset-234\n        parentId = request.POST.get(\"parentId\", None)\n        if parentId is not None:\n            ptype = parentId.split(\"-\")[0].title()\n            pid = long(parentId.split(\"-\")[1])\n            counts = conn.setChannelNames(ptype, [pid], nameDict, channelCount=sizeC)\n    else:\n        counts = conn.setChannelNames(\"Image\", [image.getId()], nameDict)\n    rv = {\"channelNames\": channelNames}\n    if counts:\n        rv[\"imageCount\"] = counts[\"imageCount\"]\n        rv[\"updateCount\"] = counts[\"updateCount\"]\n        return rv\n    else:\n        return {\"error\": \"No parent found to apply Channel Names\"}\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef manage_action_containers(\n    request, action, o_type=None, o_id=None, conn=None, **kwargs\n):\n    \"\"\"\n    Handles many different actions on various objects.\n\n    @param action:      \"addnewcontainer\", (creates a new Project, Dataset,\n                        Screen), \"editname\", \"savename\", \"editdescription\",\n                        \"savedescription\",  (used as GET and POST for in-line\n                        editing),\n                        \"removefromshare\", (tree P/D/I moving etc)\n                        \"delete\", \"deletemany\"      (delete objects)\n                        \"remove\" (remove tag/comment from object)\n    @param o_type:      \"dataset\", \"project\", \"image\", \"screen\", \"plate\",\n                        \"acquisition\", \"well\",\"comment\", \"file\", \"tag\",\n                        \"tagset\",\"share\", \"sharecomment\"\n    \"\"\"\n    template = None\n\n    manager = None\n    if o_type in (\n        \"dataset\",\n        \"project\",\n        \"image\",\n        \"screen\",\n        \"plate\",\n        \"acquisition\",\n        \"well\",\n        \"comment\",\n        \"file\",\n        \"tag\",\n        \"tagset\",\n    ):\n        kw = {}\n        if o_type is not None and int(o_id) > 0:\n            o_id = int(o_id)\n            kw[str(o_type)] = o_id\n        try:\n            manager = BaseContainer(conn, **kw)\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n    elif o_type in (\"share\", \"sharecomment\", \"chat\"):\n        manager = BaseShare(conn, o_id)\n    else:\n        manager = BaseContainer(conn)\n\n    form = None\n    if action == \"addnewcontainer\":\n        # Used within the jsTree to add a new Project, Dataset, Tag,\n        # Tagset etc under a specified parent OR top-level\n        if not request.method == \"POST\":\n            return JsonResponse(\n                {\"Error\": \"Must use POST to create container\"}, status=405\n            )\n\n        form = ContainerForm(data=request.POST.copy())\n        if form.is_valid():\n            logger.debug(\"Create new in %s: %s\" % (o_type, str(form.cleaned_data)))\n            name = form.cleaned_data[\"name\"]\n            description = form.cleaned_data[\"description\"]\n            owner = form.cleaned_data[\"owner\"]\n\n            if o_type == \"project\" and hasattr(manager, o_type) and o_id > 0:\n                oid = manager.createDataset(name, description, owner=owner)\n            elif o_type == \"tagset\" and o_id > 0:\n                oid = manager.createTag(name, description, owner=owner)\n            elif request.POST.get(\"folder_type\") in (\n                \"project\",\n                \"screen\",\n                \"dataset\",\n                \"tag\",\n                \"tagset\",\n            ):\n                # No parent specified. We can create orphaned 'project',\n                # 'dataset' etc.\n                folder_type = request.POST.get(\"folder_type\")\n                if folder_type == \"dataset\":\n                    oid = manager.createDataset(\n                        name,\n                        description,\n                        owner=owner,\n                        img_ids=request.POST.getlist(\"image\", None),\n                    )\n                else:\n                    oid = conn.createContainer(\n                        folder_type, name, description, owner=owner\n                    )\n            else:\n                return HttpResponseServerError(\"Object does not exist\")\n            rdict = {\"bad\": \"false\", \"id\": oid}\n            return JsonResponse(rdict)\n        else:\n            d = dict()\n            for e in form.errors.items():\n                d.update({e[0]: unicode(e[1])})\n            rdict = {\"bad\": \"true\", \"errs\": d}\n            return JsonResponse(rdict)\n    elif action == \"add\":\n        template = \"webclient/public/share_form.html\"\n        experimenters = list(conn.getExperimenters())\n        experimenters.sort(key=lambda x: x.getOmeName().lower())\n        if o_type == \"share\":\n            img_ids = request.GET.getlist(\"image\", request.POST.getlist(\"image\"))\n            if request.method == \"GET\" and len(img_ids) == 0:\n                return HttpResponse(\"No images specified\")\n            images_to_share = list(conn.getObjects(\"Image\", img_ids))\n            if request.method == \"POST\":\n                form = BasketShareForm(\n                    initial={\"experimenters\": experimenters, \"images\": images_to_share},\n                    data=request.POST.copy(),\n                )\n                if form.is_valid():\n                    images = form.cleaned_data[\"image\"]\n                    message = form.cleaned_data[\"message\"]\n                    expiration = form.cleaned_data[\"expiration\"]\n                    members = form.cleaned_data[\"members\"]\n                    # guests = request.POST['guests']\n                    enable = form.cleaned_data[\"enable\"]\n                    host = \"%s?server=%i\" % (\n                        request.build_absolute_uri(\n                            reverse(\"load_template\", args=[\"public\"])\n                        ),\n                        int(conn.server_id),\n                    )\n                    shareId = manager.createShare(\n                        host, images, message, members, enable, expiration\n                    )\n                    return HttpResponse(\"shareId:%s\" % shareId)\n            else:\n                initial = {\n                    \"experimenters\": experimenters,\n                    \"images\": images_to_share,\n                    \"enable\": True,\n                    \"selected\": request.GET.getlist(\"image\"),\n                }\n                form = BasketShareForm(initial=initial)\n        template = \"webclient/public/share_form.html\"\n        context = {\"manager\": manager, \"form\": form}\n\n    elif action == \"edit\":\n        # form for editing Shares only\n        if o_id is None:\n            raise Http404(\"No share ID\")\n        if o_type == \"share\" and int(o_id) > 0:\n            template = \"webclient/public/share_form.html\"\n            manager.getMembers(o_id)\n            manager.getComments(o_id)\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            initial = {\n                \"message\": manager.share.message,\n                \"expiration\": \"\",\n                \"shareMembers\": manager.membersInShare,\n                \"enable\": manager.share.active,\n                \"experimenters\": experimenters,\n            }\n            if manager.share.getExpireDate() is not None:\n                initial[\"expiration\"] = manager.share.getExpireDate().strftime(\n                    \"%Y-%m-%d\"\n                )\n            form = ShareForm(initial=initial)  # 'guests':share.guestsInShare,\n            context = {\"manager\": manager, \"form\": form}\n    elif action == \"save\":\n        # Handles submission of the 'edit' form above. TODO: not used now?\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if o_type == \"share\":\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            form = ShareForm(\n                initial={\"experimenters\": experimenters}, data=request.POST.copy()\n            )\n            if form.is_valid():\n                logger.debug(\"Update share: %s\" % (str(form.cleaned_data)))\n                message = form.cleaned_data[\"message\"]\n                expiration = form.cleaned_data[\"expiration\"]\n                members = form.cleaned_data[\"members\"]\n                # guests = request.POST['guests']\n                enable = form.cleaned_data[\"enable\"]\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                manager.updateShareOrDiscussion(\n                    host, message, members, enable, expiration\n                )\n                r = \"enable\" if enable else \"disable\"\n                return HttpResponse(r)\n            else:\n                template = \"webclient/public/share_form.html\"\n                context = {\"share\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editname\":\n        # start editing 'name' in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            if o_type == \"tag\":\n                txtValue = obj.textValue\n            else:\n                txtValue = obj.getName()\n            form = ContainerNameForm(initial={\"name\": txtValue})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savename\":\n        # Save name edit in-line\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerNameForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                name = form.cleaned_data[\"name\"]\n                rdict = {\"bad\": \"false\", \"o_type\": o_type}\n                manager.updateName(o_type, name)\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editdescription\":\n        # start editing description in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            form = ContainerDescriptionForm(initial={\"description\": obj.description})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savedescription\":\n        # Save editing of description in-line\n        if not request.method == \"POST\":\n            return HttpResponseServerError(\n                \"Action '%s' on the '%s' id:%s cannot be complited\"\n                % (action, o_type, o_id)\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerDescriptionForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                description = form.cleaned_data[\"description\"]\n                manager.updateDescription(o_type, description)\n                rdict = {\"bad\": \"false\"}\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"remove\":\n        # Handles removal of comment, tag from\n        # Object etc.\n        # E.g. image-123  or image-1|image-2\n        parents = request.POST[\"parent\"]\n        try:\n            manager.remove(parents.split(\"|\"))\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"removefromshare\":\n        image_id = request.POST.get(\"source\")\n        try:\n            manager.removeImage(image_id)\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"delete\":\n        # Handles delete of a file attached to object.\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        try:\n            handle = manager.deleteItem(child, anns)\n            request.session[\"callback\"][str(handle)] = {\n                \"job_type\": \"delete\",\n                \"delmany\": False,\n                \"did\": o_id,\n                \"dtype\": o_type,\n                \"status\": \"in progress\",\n                \"error\": 0,\n                \"dreport\": _formatReport(handle),\n                \"start_time\": datetime.datetime.now(),\n            }\n            request.session.modified = True\n        except Exception as x:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": o_id, \"dtype\": o_type}, exc_info=True\n            )\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"deletemany\":\n        # Handles multi-delete from jsTree.\n        object_ids = {\n            \"Image\": request.POST.getlist(\"image\"),\n            \"Dataset\": request.POST.getlist(\"dataset\"),\n            \"Project\": request.POST.getlist(\"project\"),\n            \"Annotation\": request.POST.getlist(\"tag\"),\n            \"Screen\": request.POST.getlist(\"screen\"),\n            \"Plate\": request.POST.getlist(\"plate\"),\n            \"Well\": request.POST.getlist(\"well\"),\n            \"PlateAcquisition\": request.POST.getlist(\"acquisition\"),\n        }\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        logger.debug(\n            \"Delete many: child? %s anns? %s object_ids %s\" % (child, anns, object_ids)\n        )\n        try:\n            for key, ids in object_ids.items():\n                if ids is not None and len(ids) > 0:\n                    handle = manager.deleteObjects(key, ids, child, anns)\n                    if key == \"PlateAcquisition\":\n                        key = \"Plate Run\"  # for nicer user message\n                    dMap = {\n                        \"job_type\": \"delete\",\n                        \"start_time\": datetime.datetime.now(),\n                        \"status\": \"in progress\",\n                        \"error\": 0,\n                        \"dreport\": _formatReport(handle),\n                        \"dtype\": key,\n                    }\n                    if len(ids) > 1:\n                        dMap[\"delmany\"] = len(ids)\n                        dMap[\"did\"] = ids\n                    else:\n                        dMap[\"delmany\"] = False\n                        dMap[\"did\"] = ids[0]\n                    request.session[\"callback\"][str(handle)] = dMap\n            request.session.modified = True\n        except Exception:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": ids, \"dtype\": key}, exc_info=True\n            )\n            # Ajax error handling will allow user to submit bug report\n            raise\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    context[\"template\"] = template\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef get_original_file(request, fileId, download=False, conn=None, **kwargs):\n    \"\"\"\n    Returns the specified original file as an http response. Used for\n    displaying text or png/jpeg etc files in browser\n    \"\"\"\n\n    # May be viewing results of a script run in a different group.\n    conn.SERVICE_OPTS.setOmeroGroup(-1)\n\n    orig_file = conn.getObject(\"OriginalFile\", fileId)\n    if orig_file is None:\n        return handlerInternalError(\n            request, \"Original File does not exist (id:%s).\" % (fileId)\n        )\n\n    rsp = ConnCleaningHttpResponse(orig_file.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    mimetype = orig_file.mimetype\n    if mimetype == \"text/x-python\":\n        mimetype = \"text/plain\"  # allows display in browser\n    rsp[\"Content-Type\"] = mimetype\n    rsp[\"Content-Length\"] = orig_file.getSize()\n\n    if download:\n        downloadName = orig_file.name.replace(\" \", \"_\")\n        downloadName = downloadName.replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\n@render_response()\ndef omero_table(request, file_id, mtype=None, conn=None, **kwargs):\n    \"\"\"\n    Download OMERO.table as CSV (streaming response) or return as HTML or json\n\n    @param file_id:     OriginalFile ID\n    @param mtype:       None for html table or 'csv' or 'json'\n    @param conn:        BlitzGateway connection\n    \"\"\"\n\n    query = request.GET.get(\"query\", \"*\")\n    offset = get_long_or_default(request, \"offset\", 0)\n    limit = get_long_or_default(request, \"limit\", settings.PAGE)\n    iviewer_url = None\n    try:\n        iviewer_url = reverse(\"omero_iviewer_index\")\n    except NoReverseMatch:\n        pass\n\n    # Check if file exists since _table_query() doesn't check\n    file_id = long(file_id)\n    orig_file = conn.getObject(\"OriginalFile\", file_id)\n    if orig_file is None:\n        raise Http404(\"OriginalFile %s not found\" % file_id)\n\n    lazy = mtype == \"csv\"\n    context = webgateway_views._table_query(\n        request, file_id, conn=conn, query=query, offset=offset, limit=limit, lazy=lazy\n    )\n\n    if context.get(\"error\") or not context.get(\"data\"):\n        return JsonResponse(context)\n\n    # OR, return as csv or html\n    if mtype == \"csv\":\n        table_data = context.get(\"data\")\n\n        def csv_gen():\n            csv_cols = \",\".join(table_data.get(\"columns\"))\n            yield csv_cols\n            for rows in table_data.get(\"lazy_rows\"):\n                yield (\n                    \"\\n\" + \"\\n\".join([\",\".join([str(d) for d in row]) for row in rows])\n                )\n\n        downloadName = orig_file.name.replace(\" \", \"_\").replace(\",\", \".\")\n        downloadName = downloadName + \".csv\"\n\n        rsp = TableClosingHttpResponse(csv_gen(), content_type=\"text/csv\")\n        rsp.conn = conn\n        rsp.table = context.get(\"table\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        # rsp['Content-Length'] = ann.getFileSize()\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n        return rsp\n\n    context[\"data\"][\"name\"] = orig_file.name\n    context[\"data\"][\"path\"] = orig_file.path\n    context[\"data\"][\"id\"] = file_id\n    context[\"meta\"][\"query\"] = query\n\n    # check if offset matches an integer page number:\n    if offset == 0 or offset / limit == offset // limit:\n        context[\"meta\"][\"page\"] = (offset // limit) + 1 if offset > 0 else 1\n\n    # pagination links\n    url = reverse(\"omero_table\", args=[file_id])\n    context[\"meta\"][\"url\"] = url\n    url += \"?limit=%s\" % limit\n    if query != \"*\":\n        url += \"&query=%s\" % query\n    if (offset + limit) < context[\"meta\"][\"totalCount\"]:\n        context[\"meta\"][\"next\"] = url + \"&offset=%s\" % (offset + limit)\n    if offset > 0:\n        context[\"meta\"][\"prev\"] = url + \"&offset=%s\" % (max(0, offset - limit))\n\n    # by default, return context as JSON data\n    if mtype is None:\n        context[\"template\"] = \"webclient/annotations/omero_table.html\"\n        context[\"iviewer_url\"] = iviewer_url\n        col_types = context[\"data\"][\"column_types\"]\n        if \"ImageColumn\" in col_types:\n            context[\"image_column_index\"] = col_types.index(\"ImageColumn\")\n        if \"WellColumn\" in col_types:\n            context[\"well_column_index\"] = col_types.index(\"WellColumn\")\n        if \"RoiColumn\" in col_types:\n            context[\"roi_column_index\"] = col_types.index(\"RoiColumn\")\n        # provide example queries - pick first DoubleColumn...\n        for idx, c_type in enumerate(col_types):\n            if c_type in (\"DoubleColumn\", \"LongColumn\"):\n                col_name = context[\"data\"][\"columns\"][idx]\n                # find first few non-empty cells...\n                vals = []\n                for row in context[\"data\"][\"rows\"]:\n                    if row[idx]:\n                        vals.append(row[idx])\n                    if len(vals) > 3:\n                        break\n                if \" \" in col_name or len(vals) < 2:\n                    # Don't support queries on columns with spaces\n                    continue\n                context[\"example_column\"] = col_name\n                context[\"example_min_value\"] = min(vals)\n                context[\"example_max_value\"] = max(vals)\n                break\n\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef download_annotation(request, annId, conn=None, **kwargs):\n    \"\"\" Returns the file annotation as an http response for download \"\"\"\n    ann = conn.getObject(\"FileAnnotation\", annId)\n    if ann is None:\n        return handlerInternalError(\n            request, \"FileAnnotation does not exist (id:%s).\" % (annId)\n        )\n\n    rsp = ConnCleaningHttpResponse(ann.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = ann.getFileSize()\n    rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (\n        ann.getFileName().replace(\" \", \"_\")\n    )\n    return rsp\n\n\n@login_required()\ndef download_orig_metadata(request, imageId, conn=None, **kwargs):\n    \"\"\" Downloads the 'Original Metadata' as a text file \"\"\"\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    om = image.loadOriginalMetadata()\n\n    txtLines = [\"[Global Metadata]\"]\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[1]])\n\n    txtLines.append(\"[Series Metadata]\")\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[2]])\n    rspText = \"\\n\".join(txtLines)\n\n    rsp = HttpResponse(rspText)\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = len(rspText)\n    rsp[\"Content-Disposition\"] = \"attachment; filename=Original_Metadata.txt\"\n    return rsp\n\n\n@login_required()\n@render_response()\ndef download_placeholder(request, conn=None, **kwargs):\n    \"\"\"\n    Page displays a simple \"Preparing download...\" message and redirects to\n    the 'url'.\n    We construct the url and query string from request: 'url' and 'ids'.\n    \"\"\"\n\n    format = request.GET.get(\"format\", None)\n    if format is not None:\n        download_url = reverse(\"download_as\")\n        zipName = \"Export_as_%s\" % format\n    else:\n        download_url = reverse(\"archived_files\")\n        zipName = \"OriginalFileDownload\"\n    targetIds = request.GET.get(\"ids\")  # E.g. image-1|image-2\n    defaultName = request.GET.get(\"name\", zipName)  # default zip name\n    defaultName = os.path.basename(defaultName)  # remove path\n\n    if targetIds is None:\n        raise Http404(\"No IDs specified. E.g. ?ids=image-1|image-2\")\n\n    ids = targetIds.split(\"|\")\n\n    fileLists = []\n    fileCount = 0\n    filesTotalSize = 0\n    # If we're downloading originals, list original files so user can\n    # download individual files.\n    if format is None:\n        imgIds = []\n        wellIds = []\n        for i in ids:\n            if i.split(\"-\")[0] == \"image\":\n                imgIds.append(i.split(\"-\")[1])\n            elif i.split(\"-\")[0] == \"well\":\n                wellIds.append(i.split(\"-\")[1])\n\n        images = []\n        # Get images...\n        if imgIds:\n            images = list(conn.getObjects(\"Image\", imgIds))\n\n        if len(images) == 0:\n            raise Http404(\"No images found.\")\n\n        # Have a list of files per fileset (or per image without fileset)\n        fsIds = set()\n        fileIds = set()\n        for image in images:\n            fs = image.getFileset()\n            if fs is not None:\n                # Make sure we've not processed this fileset before.\n                if fs.id in fsIds:\n                    continue\n                fsIds.add(fs.id)\n            files = list(image.getImportedImageFiles())\n            fList = []\n            for f in files:\n                if f.id in fileIds:\n                    continue\n                fileIds.add(f.id)\n                fList.append({\"id\": f.id, \"name\": f.name, \"size\": f.getSize()})\n                filesTotalSize += f.getSize()\n            if len(fList) > 0:\n                fileLists.append(fList)\n        fileCount = sum([len(fList) for fList in fileLists])\n    else:\n        # E.g. JPEG/PNG - 1 file per image\n        fileCount = len(ids)\n\n    query = \"&\".join([_id.replace(\"-\", \"=\") for _id in ids])\n    download_url = download_url + \"?\" + query\n    if format is not None:\n        download_url = download_url + \"&format=%s\" % format\n\n    context = {\n        \"template\": \"webclient/annotations/download_placeholder.html\",\n        \"url\": download_url,\n        \"defaultName\": defaultName,\n        \"fileLists\": fileLists,\n        \"fileCount\": fileCount,\n        \"filesTotalSize\": filesTotalSize,\n    }\n    if filesTotalSize > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n        context[\"downloadTooLarge\"] = settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_calendar(request, year=None, month=None, conn=None, **kwargs):\n    \"\"\"\n    Loads the calendar which is displayed in the left panel of the history\n    page.\n    Shows current month by default. Filter by experimenter\n    \"\"\"\n\n    template = \"webclient/history/calendar.html\"\n    filter_user_id = request.session.get(\"user_id\")\n\n    if year is not None and month is not None:\n        controller = BaseCalendar(conn=conn, year=year, month=month, eid=filter_user_id)\n    else:\n        today = datetime.datetime.today()\n        controller = BaseCalendar(\n            conn=conn, year=today.year, month=today.month, eid=filter_user_id\n        )\n    controller.create_calendar()\n\n    context = {\"controller\": controller}\n\n    context[\"template\"] = template\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_history(request, year, month, day, conn=None, **kwargs):\n    \"\"\" The data for a particular date that is loaded into the center panel \"\"\"\n\n    if year is None or month is None or day is None:\n        raise Http404(\"Year, month, and day are required\")\n\n    template = \"webclient/history/history_details.html\"\n\n    # get page\n    page = int(request.GET.get(\"page\", 1))\n\n    filter_user_id = request.session.get(\"user_id\")\n    controller = BaseCalendar(\n        conn=conn, year=year, month=month, day=day, eid=filter_user_id\n    )\n    controller.get_items(page)\n\n    context = {\"controller\": controller}\n    context[\"template\"] = template\n    return context\n\n\ndef getObjectUrl(conn, obj):\n    \"\"\"\n    This provides a url to browse to the specified omero.model.ObjectI P/D/I,\n    S/P, FileAnnotation etc. used to display results from the scripting\n    service\n    E.g webclient/userdata/?path=image-12601\n    If the object is a file annotation, try to browse to the parent P/D/I\n    \"\"\"\n    base_url = reverse(viewname=\"load_template\", args=[\"userdata\"])\n\n    # if we have a File Annotation, then we want our URL to be for the parent\n    # object...\n    if isinstance(obj, omero.model.FileAnnotationI):\n        fa = conn.getObject(\"Annotation\", obj.id.val)\n        for ptype in [\"project\", \"dataset\", \"image\"]:\n            links = list(fa.getParentLinks(ptype))\n            if len(links) > 0:\n                obj = links[0].parent\n                break\n\n    if obj.__class__.__name__ in (\n        \"ImageI\",\n        \"DatasetI\",\n        \"ProjectI\",\n        \"ScreenI\",\n        \"PlateI\",\n        \"WellI\",\n    ):\n        otype = obj.__class__.__name__[:-1].lower()\n        base_url += \"?show=%s-%s\" % (otype, obj.id.val)\n        return base_url\n\n\n######################\n# Activities window & Progressbar\ndef update_callback(request, cbString, **kwargs):\n    \"\"\"Update a callback handle with  key/value pairs\"\"\"\n    for key, value in kwargs.items():\n        request.session[\"callback\"][cbString][key] = value\n\n\n@login_required()\n@render_response()\ndef activities(request, conn=None, **kwargs):\n    \"\"\"\n    This refreshes callback handles (delete, scripts, chgrp etc) and provides\n    html to update Activities window & Progressbar.\n    The returned html contains details for ALL callbacks in web session,\n    regardless of their status.\n    We also add counts of jobs, failures and 'in progress' to update status\n    bar.\n    \"\"\"\n\n    in_progress = 0\n    failure = 0\n    new_results = []\n    _purgeCallback(request)\n\n    # If we have a jobId (not added to request.session) just process it...\n    # ONLY used for chgrp/chown dry-run.\n    jobId = request.GET.get(\"jobId\", None)\n    if jobId is not None:\n        jobId = str(jobId)\n        try:\n            prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n            status = prx.getStatus()\n            logger.debug(\"job status: %s\", status)\n            rsp = prx.getResponse()\n            if rsp is not None:\n                rv = graphResponseMarshal(conn, rsp)\n                rv[\"finished\"] = True\n            else:\n                rv = {\"finished\": False}\n            rv[\"status\"] = {\n                \"currentStep\": status.currentStep,\n                \"steps\": status.steps,\n                \"startTime\": status.startTime,\n                \"stopTime\": status.stopTime,\n            }\n        except IceException:\n            rv = {\"finished\": True}\n        return rv\n\n    elif request.method == \"DELETE\":\n        try:\n            json_data = json.loads(request.body)\n        except TypeError:\n            # for Python 3.5\n            json_data = json.loads(bytes_to_native_str(request.body))\n        jobId = json_data.get(\"jobId\", None)\n        if jobId is not None:\n            jobId = str(jobId)\n            rv = {\"jobId\": jobId}\n            try:\n                prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n                status = prx.getStatus()\n                logger.debug(\"pre-cancel() job status: %s\", status)\n                rv[\"status\"] = {\n                    \"currentStep\": status.currentStep,\n                    \"steps\": status.steps,\n                    \"startTime\": status.startTime,\n                    \"stopTime\": status.stopTime,\n                }\n                prx.cancel()\n            except omero.LockTimeout:\n                # expected that it will take > 5 seconds to cancel\n                logger.info(\"Timeout on prx.cancel()\")\n        return rv\n\n    # test each callback for failure, errors, completion, results etc\n    for cbString in request.session.get(\"callback\").keys():\n        callbackDict = request.session[\"callback\"][cbString]\n        job_type = callbackDict[\"job_type\"]\n\n        status = callbackDict[\"status\"]\n        if status == \"failed\":\n            failure += 1\n\n        request.session.modified = True\n\n        # update chgrp / chown\n        if job_type in (\"chgrp\", \"chown\"):\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    rsp = prx.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\n                                    \"%s failed with: %s\" % (job_type, rsp_params)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report=\"%s %s\" % (rsp.name, rsp_params),\n                                    error=1,\n                                )\n                            elif isinstance(rsp, omero.cmd.OK):\n                                update_callback(request, cbString, status=\"finished\")\n                        else:\n                            in_progress += 1\n                    finally:\n                        prx.close(close_handle)\n                except Exception:\n                    logger.info(\n                        \"Activities %s handle not found: %s\" % (job_type, cbString)\n                    )\n                    continue\n        elif job_type == \"send_email\":\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    callback = omero.callbacks.CmdCallbackI(\n                        conn.c, prx, foreground_poll=True\n                    )\n                    rsp = callback.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\"send_email failed with: %s\" % rsp_params)\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report={\"error\": rsp_params},\n                                    error=1,\n                                )\n                            else:\n                                total = (\n                                    rsp.success\n                                    + len(rsp.invalidusers)\n                                    + len(rsp.invalidemails)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"finished\",\n                                    rsp={\"success\": rsp.success, \"total\": total},\n                                )\n                                if (\n                                    len(rsp.invalidusers) > 0\n                                    or len(rsp.invalidemails) > 0\n                                ):\n                                    invalidusers = [\n                                        e.getFullName()\n                                        for e in list(\n                                            conn.getObjects(\n                                                \"Experimenter\", rsp.invalidusers\n                                            )\n                                        )\n                                    ]\n                                    update_callback(\n                                        request,\n                                        cbString,\n                                        report={\n                                            \"invalidusers\": invalidusers,\n                                            \"invalidemails\": rsp.invalidemails,\n                                        },\n                                    )\n                        else:\n                            in_progress += 1\n                    finally:\n                        callback.close(close_handle)\n                except Exception:\n                    logger.error(traceback.format_exc())\n                    logger.info(\"Activities send_email handle not found: %s\" % cbString)\n\n        # update delete\n        elif job_type == \"delete\":\n            if status not in (\"failed\", \"finished\"):\n                try:\n                    handle = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    cb = omero.callbacks.CmdCallbackI(\n                        conn.c, handle, foreground_poll=True\n                    )\n                    rsp = cb.getResponse()\n                    close_handle = False\n                    try:\n                        if not rsp:  # Response not available\n                            update_callback(\n                                request,\n                                cbString,\n                                error=0,\n                                status=\"in progress\",\n                                dreport=_formatReport(handle),\n                            )\n                            in_progress += 1\n                        else:  # Response available\n                            close_handle = True\n                            new_results.append(cbString)\n                            rsp = cb.getResponse()\n                            err = isinstance(rsp, omero.cmd.ERR)\n                            if err:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=1,\n                                    status=\"failed\",\n                                    dreport=_formatReport(handle),\n                                )\n                                failure += 1\n                            else:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=0,\n                                    status=\"finished\",\n                                    dreport=_formatReport(handle),\n                                )\n                    finally:\n                        cb.close(close_handle)\n                except Ice.ObjectNotExistException:\n                    update_callback(\n                        request, cbString, error=0, status=\"finished\", dreport=None\n                    )\n                except Exception as x:\n                    logger.error(traceback.format_exc())\n                    logger.error(\"Status job '%s'error:\" % cbString)\n                    update_callback(\n                        request, cbString, error=1, status=\"failed\", dreport=str(x)\n                    )\n                    failure += 1\n\n        # update scripts\n        elif job_type == \"script\":\n            # if error on runScript, the cbString is not a ProcessCallback...\n            if not cbString.startswith(\"ProcessCallback\"):\n                continue  # ignore\n            if status not in (\"failed\", \"finished\"):\n                logger.info(\"Check callback on script: %s\" % cbString)\n                try:\n                    proc = omero.grid.ScriptProcessPrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                except IceException:\n                    update_callback(\n                        request,\n                        cbString,\n                        status=\"failed\",\n                        Message=\"No process found for job\",\n                        error=1,\n                    )\n                    continue\n                cb = omero.scripts.ProcessCallbackI(conn.c, proc)\n                # check if we get something back from the handle...\n                if cb.block(0):  # ms.\n                    cb.close()\n                    try:\n                        # we can only retrieve this ONCE - must save results\n                        results = proc.getResults(0, conn.SERVICE_OPTS)\n                        update_callback(request, cbString, status=\"finished\")\n                        new_results.append(cbString)\n                    except Exception:\n                        update_callback(\n                            request,\n                            cbString,\n                            status=\"finished\",\n                            Message=\"Failed to get results\",\n                        )\n                        logger.info(\"Failed on proc.getResults() for OMERO.script\")\n                        continue\n                    # value could be rstring, rlong, robject\n                    rMap = {}\n                    for key, value in results.items():\n                        v = value.getValue()\n                        if key in (\"stdout\", \"stderr\", \"Message\"):\n                            if key in (\"stderr\", \"stdout\"):\n                                # just save the id of original file\n                                v = v.id.val\n                            update_kwargs = {key: v}\n                            update_callback(request, cbString, **update_kwargs)\n                        else:\n                            if hasattr(v, \"id\"):\n                                # do we have an object (ImageI,\n                                # FileAnnotationI etc)\n                                obj_data = {\n                                    \"id\": v.id.val,\n                                    \"type\": v.__class__.__name__[:-1],\n                                }\n                                obj_data[\"browse_url\"] = getObjectUrl(conn, v)\n                                if v.isLoaded() and hasattr(v, \"file\"):\n                                    # try:\n                                    mimetypes = {\n                                        \"image/png\": \"png\",\n                                        \"image/jpeg\": \"jpeg\",\n                                        \"text/plain\": \"text\",\n                                    }\n                                    if v.file.mimetype.val in mimetypes:\n                                        obj_data[\"fileType\"] = mimetypes[\n                                            v.file.mimetype.val\n                                        ]\n                                        obj_data[\"fileId\"] = v.file.id.val\n                                    obj_data[\"name\"] = v.file.name.val\n                                    # except Exception:\n                                    #    pass\n                                if v.isLoaded() and hasattr(v, \"name\"):\n                                    # E.g Image, OriginalFile etc\n                                    name = unwrap(v.name)\n                                    if name is not None:\n                                        # E.g. FileAnnotation has null name\n                                        obj_data[\"name\"] = name\n                                rMap[key] = obj_data\n                            else:\n                                rMap[key] = unwrap(v)\n                    update_callback(request, cbString, results=rMap)\n                else:\n                    in_progress += 1\n\n    # having updated the request.session, we can now prepare the data for http\n    # response\n    rv = {}\n    for cbString in request.session.get(\"callback\").keys():\n        # make a copy of the map in session, so that we can replace non\n        # json-compatible objects, without modifying session\n        rv[cbString] = copy.copy(request.session[\"callback\"][cbString])\n\n    # return json (used for testing)\n    if \"template\" in kwargs and kwargs[\"template\"] == \"json\":\n        for cbString in request.session.get(\"callback\").keys():\n            rv[cbString][\"start_time\"] = str(\n                request.session[\"callback\"][cbString][\"start_time\"]\n            )\n        rv[\"inprogress\"] = in_progress\n        rv[\"failure\"] = failure\n        rv[\"jobs\"] = len(request.session[\"callback\"])\n        return JsonResponse(rv)  # json\n\n    jobs = []\n    new_errors = False\n    for key, data in rv.items():\n        # E.g. key: ProcessCallback/39f77932-c447-40d8-8f99-910b5a531a25 -t:tcp -h 10.211.55.2 -p 54727:tcp -h 10.37.129.2 -p 54727:tcp -h 10.12.2.21 -p 54727  # noqa\n        # create id we can use as html id,\n        # E.g. 39f77932-c447-40d8-8f99-910b5a531a25\n        if len(key.split(\" \")) > 0:\n            htmlId = key.split(\" \")[0]\n            if len(htmlId.split(\"/\")) > 1:\n                htmlId = htmlId.split(\"/\")[1]\n        rv[key][\"id\"] = htmlId\n        rv[key][\"key\"] = key\n        if key in new_results:\n            rv[key][\"new\"] = True\n            if \"error\" in data and data[\"error\"] > 0:\n                new_errors = True\n        jobs.append(rv[key])\n\n    jobs.sort(key=lambda x: x[\"start_time\"], reverse=True)\n    context = {\n        \"sizeOfJobs\": len(request.session[\"callback\"]),\n        \"jobs\": jobs,\n        \"inprogress\": in_progress,\n        \"new_results\": len(new_results),\n        \"new_errors\": new_errors,\n        \"failure\": failure,\n    }\n\n    context[\"template\"] = \"webclient/activities/activitiesContent.html\"\n    return context\n\n\n@login_required()\ndef activities_update(request, action, **kwargs):\n    \"\"\"\n    If the above 'action' == 'clean' then we clear jobs from\n    request.session['callback'] either a single job (if 'jobKey' is specified\n    in POST) or all jobs (apart from those in progress)\n    \"\"\"\n\n    request.session.modified = True\n\n    if action == \"clean\":\n        if \"jobKey\" in request.POST:\n            jobId = request.POST.get(\"jobKey\")\n            rv = {}\n            if jobId in request.session[\"callback\"]:\n                del request.session[\"callback\"][jobId]\n                request.session.modified = True\n                rv[\"removed\"] = True\n            else:\n                rv[\"removed\"] = False\n            return JsonResponse(rv)\n        else:\n            jobs = list(request.session[\"callback\"].items())\n            for key, data in jobs:\n                if data[\"status\"] != \"in progress\":\n                    del request.session[\"callback\"][key]\n    return HttpResponse(\"OK\")\n\n\n##############################################################################\n# User Photo\n\n\n@login_required()\ndef avatar(request, oid=None, conn=None, **kwargs):\n    \"\"\" Returns the experimenter's photo \"\"\"\n    photo = conn.getExperimenterPhoto(oid)\n    return HttpResponse(photo, content_type=\"image/jpeg\")\n\n\n##############################################################################\n# webgateway extention\n\n\n@login_required()\ndef image_viewer(request, iid, share_id=None, **kwargs):\n    \"\"\" Delegates to webgateway, using share connection if appropriate \"\"\"\n    kwargs[\"viewport_server\"] = (\n        share_id is not None and reverse(\"webindex\") + share_id or reverse(\"webindex\")\n    )\n    # remove any trailing slash\n    kwargs[\"viewport_server\"] = kwargs[\"viewport_server\"].rstrip(\"/\")\n    return webgateway_views.full_viewer(request, iid, **kwargs)\n\n\n##############################################################################\n# scripting service....\n@login_required()\n@render_response()\ndef list_scripts(request, conn=None, **kwargs):\n    \"\"\"\n    List the available scripts - Just officical scripts for now\n\n    If all scripts are under a single top-level directory, this is\n    removed by default. To prevent this, use ?full_path=true\n    \"\"\"\n    scriptService = conn.getScriptService()\n    scripts = scriptService.getScripts()\n\n    # group scripts into 'folders' (path), named by parent folder name\n    scriptMenu = {}\n    scripts_to_ignore = (\n        request.session.get(\"server_settings\", {})\n        .get(\"scripts_to_ignore\", \"\")\n        .split(\",\")\n    )\n    for s in scripts:\n        scriptId = s.id.val\n        path = s.path.val\n        name = s.name.val\n        fullpath = os.path.join(path, name)\n        if fullpath in scripts_to_ignore:\n            logger.info(\"Ignoring script %r\" % fullpath)\n            continue\n\n        # We want to build a hierarchical <ul> <li> structure\n        # Each <ul> is a {}, each <li> is either a script 'name': <id> or\n        # directory 'name': {ul}\n\n        ul = scriptMenu\n        dirs = fullpath.split(os.path.sep)\n        for li, d in enumerate(dirs):\n            if len(d) == 0:\n                continue\n            if d not in ul:\n                # if last component in path:\n                if li + 1 == len(dirs):\n                    ul[d] = scriptId\n                else:\n                    ul[d] = {}\n            ul = ul[d]\n\n    # convert <ul> maps into lists and sort\n\n    def ul_to_list(ul):\n        dir_list = []\n        for name, value in ul.items():\n            if isinstance(value, dict):\n                # value is a directory\n                dir_list.append({\"name\": name, \"ul\": ul_to_list(value)})\n            else:\n                dir_list.append({\"name\": name, \"id\": value})\n        dir_list.sort(key=lambda x: x[\"name\"].lower())\n        return dir_list\n\n    scriptList = ul_to_list(scriptMenu)\n\n    # If we have a single top-level directory, we can skip it\n    if not request.GET.get(\"full_path\") and len(scriptList) == 1:\n        scriptList = scriptList[0][\"ul\"]\n\n    return scriptList\n\n\n@login_required()\n@render_response()\ndef script_ui(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Generates an html form for the parameters of a defined script.\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    try:\n        params = scriptService.getParams(long(scriptId))\n    except Exception as ex:\n        if ex.message.lower().startswith(\"no processor available\"):\n            return {\n                \"template\": \"webclient/scripts/no_processor.html\",\n                \"scriptId\": scriptId,\n            }\n        raise ex\n    if params is None:\n        return HttpResponse()\n\n    paramData = {}\n\n    paramData[\"id\"] = long(scriptId)\n    paramData[\"name\"] = params.name.replace(\"_\", \" \")\n    paramData[\"description\"] = params.description\n    paramData[\"authors\"] = \", \".join([a for a in params.authors])\n    paramData[\"contact\"] = params.contact\n    paramData[\"version\"] = params.version\n    paramData[\"institutions\"] = \", \".join([i for i in params.institutions])\n\n    inputs = []  # use a list so we can sort by 'grouping'\n    Data_TypeParam = None\n    IDsParam = None\n    for key, param in params.inputs.items():\n        i = {}\n        i[\"name\"] = key.replace(\"_\", \" \")\n        i[\"key\"] = key\n        if not param.optional:\n            i[\"required\"] = True\n        i[\"description\"] = param.description\n        if param.min:\n            i[\"min\"] = str(param.min.getValue())\n        if param.max:\n            i[\"max\"] = str(param.max.getValue())\n        if param.values:\n            i[\"options\"] = [v.getValue() for v in param.values.getValue()]\n        if param.useDefault:\n            i[\"default\"] = unwrap(param.prototype)\n            if isinstance(i[\"default\"], omero.model.IObject):\n                i[\"default\"] = None\n        pt = unwrap(param.prototype)\n        if pt.__class__.__name__ == \"dict\":\n            i[\"map\"] = True\n        elif pt.__class__.__name__ == \"list\":\n            i[\"list\"] = True\n            if \"default\" in i:\n                i[\"default\"] = \",\".join([str(d) for d in i[\"default\"]])\n        elif isinstance(pt, bool):\n            i[\"boolean\"] = True\n        elif isinstance(pt, int) or isinstance(pt, long):\n            # will stop the user entering anything other than numbers.\n            i[\"number\"] = \"number\"\n        elif isinstance(pt, float):\n            i[\"number\"] = \"float\"\n\n        # if we got a value for this key in the page request, use this as\n        # default\n        if request.GET.get(key, None) is not None:\n            i[\"default\"] = request.GET.get(key, None)\n\n        # E.g  \"\"  (string) or [0] (int list) or 0.0 (float)\n        i[\"prototype\"] = unwrap(param.prototype)\n        i[\"grouping\"] = param.grouping\n        inputs.append(i)\n\n        if key == \"IDs\":\n            IDsParam = i  # remember these...\n        if key == \"Data_Type\":\n            Data_TypeParam = i\n    inputs.sort(key=lambda i: i[\"grouping\"])\n\n    # if we have Data_Type param - use the request parameters to populate IDs\n    if (\n        Data_TypeParam is not None\n        and IDsParam is not None\n        and \"options\" in Data_TypeParam\n    ):\n        IDsParam[\"default\"] = \"\"\n        for dtype in Data_TypeParam[\"options\"]:\n            if request.GET.get(dtype, None) is not None:\n                Data_TypeParam[\"default\"] = dtype\n                IDsParam[\"default\"] = request.GET.get(dtype, \"\")\n                break  # only use the first match\n        # if we've not found a match, check whether we have \"Well\" selected\n        if len(IDsParam[\"default\"]) == 0 and request.GET.get(\"Well\", None) is not None:\n            if \"Image\" in Data_TypeParam[\"options\"]:\n                wellIds = [long(j) for j in request.GET.get(\"Well\", None).split(\",\")]\n                wellIdx = 0\n                try:\n                    wellIdx = int(request.GET.get(\"Index\", 0))\n                except Exception:\n                    pass\n                wells = conn.getObjects(\"Well\", wellIds)\n                imgIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n                Data_TypeParam[\"default\"] = \"Image\"\n                IDsParam[\"default\"] = \",\".join(imgIds)\n\n    # try to determine hierarchies in the groupings - ONLY handle 1 hierarchy\n    # level now (not recursive!)\n    for i in range(len(inputs)):\n        if len(inputs) <= i:\n            # we may remove items from inputs as we go - need to check\n            break\n        param = inputs[i]\n        grouping = param[\"grouping\"]  # E.g  03\n        param[\"children\"] = list()\n        while len(inputs) > i + 1:\n            nextGrp = inputs[i + 1][\"grouping\"]  # E.g. 03.1\n            if nextGrp.split(\".\")[0] == grouping:\n                param[\"children\"].append(inputs[i + 1])\n                inputs.pop(i + 1)\n            else:\n                break\n\n    paramData[\"inputs\"] = inputs\n\n    return {\n        \"template\": \"webclient/scripts/script_ui.html\",\n        \"paramData\": paramData,\n        \"scriptId\": scriptId,\n    }\n\n\n@login_required()\n@render_response()\ndef figure_script(request, scriptName, conn=None, **kwargs):\n    \"\"\"\n    Show a UI for running figure scripts\n    \"\"\"\n\n    imageIds = request.GET.get(\"Image\", None)  # comma - delimited list\n    datasetIds = request.GET.get(\"Dataset\", None)\n    wellIds = request.GET.get(\"Well\", None)\n\n    if wellIds is not None:\n        wellIds = [long(i) for i in wellIds.split(\",\")]\n        wells = conn.getObjects(\"Well\", wellIds)\n        wellIdx = getIntOrDefault(request, \"Index\", 0)\n        imageIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n        imageIds = \",\".join(imageIds)\n    if imageIds is None and datasetIds is None:\n        return HttpResponse(\n            \"Need to specify /?Image=1,2 or /?Dataset=1,2 or /?Well=1,2\"\n        )\n\n    def validateIds(dtype, ids):\n        ints = [int(oid) for oid in ids.split(\",\")]\n        validObjs = {}\n        for obj in conn.getObjects(dtype, ints):\n            validObjs[obj.id] = obj\n        filteredIds = [iid for iid in ints if iid in validObjs.keys()]\n        if len(filteredIds) == 0:\n            raise Http404(\"No %ss found with IDs %s\" % (dtype, ids))\n        else:\n            # Now we can specify group context - All should be same group\n            gid = list(validObjs.values())[0].getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n        return filteredIds, validObjs\n\n    context = {}\n\n    if imageIds is not None:\n        imageIds, validImages = validateIds(\"Image\", imageIds)\n        context[\"idString\"] = \",\".join([str(i) for i in imageIds])\n        context[\"dtype\"] = \"Image\"\n    if datasetIds is not None:\n        datasetIds, validDatasets = validateIds(\"Dataset\", datasetIds)\n        context[\"idString\"] = \",\".join([str(i) for i in datasetIds])\n        context[\"dtype\"] = \"Dataset\"\n\n    if scriptName == \"SplitView\":\n        scriptPath = \"/omero/figure_scripts/Split_View_Figure.py\"\n        template = \"webclient/scripts/split_view_figure.html\"\n        # Lookup Tags & Datasets (for row labels)\n        imgDict = []  # A list of data about each image.\n        for iId in imageIds:\n            data = {\"id\": iId}\n            img = validImages[iId]\n            data[\"name\"] = img.getName()\n            tags = [\n                ann.getTextValue()\n                for ann in img.listAnnotations()\n                if ann._obj.__class__ == omero.model.TagAnnotationI\n            ]\n            data[\"tags\"] = tags\n            data[\"datasets\"] = [d.getName() for d in img.listParents()]\n            imgDict.append(data)\n\n        # Use the first image as a reference\n        image = validImages[imageIds[0]]\n        context[\"imgDict\"] = imgDict\n        context[\"image\"] = image\n        context[\"channels\"] = image.getChannels()\n\n    elif scriptName == \"Thumbnail\":\n        scriptPath = \"/omero/figure_scripts/Thumbnail_Figure.py\"\n        template = \"webclient/scripts/thumbnail_figure.html\"\n\n        def loadImageTags(imageIds):\n            tagLinks = conn.getAnnotationLinks(\"Image\", parent_ids=imageIds)\n            linkMap = {}  # group tags. {imageId: [tags]}\n            tagMap = {}\n            for iId in imageIds:\n                linkMap[iId] = []\n            for link in tagLinks:\n                c = link.getChild()\n                if c._obj.__class__ == omero.model.TagAnnotationI:\n                    tagMap[c.id] = c\n                    linkMap[link.getParent().id].append(c)\n            imageTags = []\n            for iId in imageIds:\n                imageTags.append({\"id\": iId, \"tags\": linkMap[iId]})\n            tags = []\n            for tId, t in tagMap.items():\n                tags.append(t)\n            return imageTags, tags\n\n        thumbSets = []  # multiple collections of images\n        tags = []\n        figureName = \"Thumbnail_Figure\"\n        if datasetIds is not None:\n            for d in conn.getObjects(\"Dataset\", datasetIds):\n                imgIds = [i.id for i in d.listChildren()]\n                imageTags, ts = loadImageTags(imgIds)\n                thumbSets.append({\"name\": d.getName(), \"imageTags\": imageTags})\n                tags.extend(ts)\n            figureName = thumbSets[0][\"name\"]\n        else:\n            imageTags, ts = loadImageTags(imageIds)\n            thumbSets.append({\"name\": \"images\", \"imageTags\": imageTags})\n            tags.extend(ts)\n            parent = conn.getObject(\"Image\", imageIds[0]).getParent()\n            figureName = parent.getName() or \"Thumbnail Figure\"\n            context[\"parent_id\"] = parent.getId()\n        uniqueTagIds = set()  # remove duplicates\n        uniqueTags = []\n        for t in tags:\n            if t.id not in uniqueTagIds:\n                uniqueTags.append(t)\n                uniqueTagIds.add(t.id)\n        uniqueTags.sort(key=lambda x: x.getTextValue().lower())\n        context[\"thumbSets\"] = thumbSets\n        context[\"tags\"] = uniqueTags\n        context[\"figureName\"] = figureName.replace(\" \", \"_\")\n\n    elif scriptName == \"MakeMovie\":\n        scriptPath = \"/omero/export_scripts/Make_Movie.py\"\n        template = \"webclient/scripts/make_movie.html\"\n\n        # expect to run on a single image at a time\n        image = conn.getObject(\"Image\", imageIds[0])\n        # remove extension (if 3 chars or less)\n        movieName = image.getName().rsplit(\".\", 1)\n        if len(movieName) > 1 and len(movieName[1]) > 3:\n            movieName = \".\".join(movieName)\n        else:\n            movieName = movieName[0]\n        # make sure name is not a path\n        context[\"movieName\"] = os.path.basename(movieName)\n        chs = []\n        for c in image.getChannels():\n            chs.append(\n                {\n                    \"active\": c.isActive(),\n                    \"color\": c.getColor().getHtml(),\n                    \"label\": c.getLabel(),\n                }\n            )\n        context[\"channels\"] = chs\n        context[\"sizeT\"] = image.getSizeT()\n        context[\"sizeZ\"] = image.getSizeZ()\n\n    scriptService = conn.getScriptService()\n    scriptId = scriptService.getScriptID(scriptPath)\n    if scriptId < 0:\n        raise AttributeError(\"No script found for path '%s'\" % scriptPath)\n\n    context[\"template\"] = template\n    context[\"scriptId\"] = scriptId\n    return context\n\n\n@login_required()\n@render_response()\ndef fileset_check(request, action, conn=None, **kwargs):\n    \"\"\"\n    Check whether Images / Datasets etc contain partial Multi-image filesets.\n    Used by chgrp or delete dialogs to test whether we can perform this\n    'action'.\n    \"\"\"\n    dtypeIds = {}\n    for dtype in (\"Image\", \"Dataset\", \"Project\"):\n        ids = request.GET.get(dtype, None)\n        if ids is not None:\n            dtypeIds[dtype] = [int(i) for i in ids.split(\",\")]\n    splitFilesets = conn.getContainerService().getImagesBySplitFilesets(\n        dtypeIds, None, conn.SERVICE_OPTS\n    )\n\n    splits = []\n    for fsId, splitIds in splitFilesets.items():\n        splits.append(\n            {\n                \"id\": fsId,\n                \"attempted_iids\": splitIds[True],\n                \"blocking_iids\": splitIds[False],\n            }\n        )\n\n    context = {\"split_filesets\": splits}\n    context[\"action\"] = action\n    if action == \"chgrp\":\n        context[\"action\"] = \"move\"\n    context[\"template\"] = \"webclient/activities/\" \"fileset_check_dialog_content.html\"\n\n    return context\n\n\ndef getAllObjects(\n    conn, project_ids, dataset_ids, image_ids, screen_ids, plate_ids, experimenter_id\n):\n    \"\"\"\n    Given a list of containers and images, calculate all the descendants\n    and necessary siblings (for any filesets)\n    \"\"\"\n    # TODO Handle None inputs, maybe add defaults\n    params = omero.sys.ParametersI()\n    qs = conn.getQueryService()\n\n    project_ids = set(project_ids)\n    dataset_ids = set(dataset_ids)\n    image_ids = set(image_ids)\n    fileset_ids = set([])\n    plate_ids = set(plate_ids)\n    screen_ids = set(screen_ids)\n\n    # Get any datasets for projects\n    if project_ids:\n        params.map = {}\n        params.map[\"pids\"] = rlist([rlong(x) for x in list(project_ids)])\n        q = \"\"\"\n            select pdlink.child.id\n            from ProjectDatasetLink pdlink\n            where pdlink.parent.id in (:pids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            dataset_ids.add(e[0].val)\n\n    # Get any plates for screens\n    if screen_ids:\n        params.map = {}\n        params.map[\"sids\"] = rlist([rlong(x) for x in screen_ids])\n        q = \"\"\"\n            select splink.child.id\n            from ScreenPlateLink splink\n            where splink.parent.id in (:sids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            plate_ids.add(e[0].val)\n\n    # Get any images for datasets\n    if dataset_ids:\n        params.map = {}\n        params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n        q = \"\"\"\n            select dilink.child.id,\n                   dilink.child.fileset.id\n            from DatasetImageLink dilink\n            where dilink.parent.id in (:dids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n            # Some images in Dataset may not have fileset\n            if e[1] is not None:\n                fileset_ids.add(e[1].val)\n\n    # Get any images for plates\n    # TODO Seemed no need to add the filesets for plates as it isn't possible\n    # to link it from outside of its plate. This may be true for the client,\n    # but it certainly isn't true for the model so maybe allow this to also get\n    # filesets\n    if plate_ids:\n        params.map = {}\n        params.map[\"plids\"] = rlist([rlong(x) for x in plate_ids])\n        q = \"\"\"\n            select ws.image.id\n            from WellSample ws\n            join ws.plateAcquisition pa\n            where pa.plate.id in (:plids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any extra images due to filesets\n    if fileset_ids:\n        params.map = {}\n        params.map[\"fsids\"] = rlist([rlong(x) for x in fileset_ids])\n        q = \"\"\"\n            select image.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.fileset.id in (select fs.id\n                                       from Image im\n                                       join im.fileset fs\n                                       where fs.id in (:fsids)\n                                       group by fs.id\n                                       having count(im.id)>1)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any additional datasets that may need updating as their children have\n    # been snatched.\n    # TODO Need to differentiate which orphaned directories need refreshing\n    extra_dataset_ids = set([])\n    extra_orphaned = False\n    if image_ids:\n        params.map = {\n            \"iids\": rlist([rlong(x) for x in image_ids]),\n        }\n\n        exclude_datasets = \"\"\n        if dataset_ids:\n            params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n            # Make sure to allow parentless results as well as those\n            # that do not match a dataset being removed\n            exclude_datasets = \"\"\"\n                               and (\n                                    dilink.parent.id not in (:dids)\n                                    or dilink.parent.id = null\n                                   )\n                               \"\"\"\n\n        q = (\n            \"\"\"\n            select distinct dilink.parent.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.id in (:iids)\n            %s\n            and (select count(dilink2.child.id)\n                 from DatasetImageLink dilink2\n                 where dilink2.parent.id = dilink.parent.id\n                 and dilink2.child.id not in (:iids)) = 0\n            \"\"\"\n            % exclude_datasets\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            if e:\n                extra_dataset_ids.add(e[0].val)\n            else:\n                extra_orphaned = True\n\n    # Get any additional projects that may need updating as their children have\n    # been snatched. There is no need to check for orphans because if a dataset\n    # is being removed from somewhere else, it can not exist as an orphan.\n    extra_project_ids = set([])\n    if dataset_ids:\n        params.map = {\"dids\": rlist([rlong(x) for x in dataset_ids])}\n\n        exclude_projects = \"\"\n        if project_ids:\n            params.map[\"pids\"] = rlist([rlong(x) for x in project_ids])\n            exclude_projects = \"and pdlink.parent.id not in (:pids)\"\n\n        q = (\n            \"\"\"\n            select distinct pdlink.parent.id\n            from ProjectDatasetLink pdlink\n            where pdlink.child.id in (:dids)\n            %s\n            and (select count(pdlink2.child.id)\n                 from ProjectDatasetLink pdlink2\n                 where pdlink2.parent.id = pdlink.parent.id\n                 and pdlink2.child.id not in (:dids)) = 0\n            \"\"\"\n            % exclude_projects\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            extra_project_ids.add(e[0].val)\n\n    # We now have the complete list of objects that will change group\n    # We also have an additional list of datasets/projects that may have had\n    # snatched children and thus may need updating in the client if the\n    # dataset/project has gone from N to 0 children\n\n    result = {\n        # These objects are completely removed\n        \"remove\": {\n            \"project\": list(project_ids),\n            \"dataset\": list(dataset_ids),\n            \"screen\": list(screen_ids),\n            \"plate\": list(plate_ids),\n            \"image\": list(image_ids),\n        },\n        # These objects now have no children\n        \"childless\": {\n            \"project\": list(extra_project_ids),\n            \"dataset\": list(extra_dataset_ids),\n            \"orphaned\": extra_orphaned,\n        },\n    }\n    return result\n\n\n@require_POST\n@login_required()\ndef chgrpDryRun(request, conn=None, **kwargs):\n    return dryRun(request, action=\"chgrp\", conn=conn, **kwargs)\n\n\n@require_POST\n@login_required()\ndef dryRun(request, action, conn=None, **kwargs):\n    \"\"\"Submit chgrp or chown dry-run\"\"\"\n    targetObjects = {}\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\", \"Fileset\"]\n    for dtype in dtypes:\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            targetObjects[dtype] = obj_ids\n\n    if action == \"chgrp\":\n        target_id = getIntOrDefault(request, \"group_id\", None)\n    elif action == \"chown\":\n        target_id = getIntOrDefault(request, \"owner_id\", None)\n    handle = conn.submitDryRun(action, targetObjects, target_id)\n    jobId = str(handle)\n    return HttpResponse(jobId)\n\n\n@login_required()\ndef chgrp(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new group, using the chgrp queue.\n    Handles submission of chgrp form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chgrp\"}, status=405)\n    # Get the target group_id\n    group_id = getIntOrDefault(request, \"group_id\", None)\n    if group_id is None:\n        return JsonResponse({\"Error\": \"chgrp: No group_id specified\"})\n    group_id = long(group_id)\n\n    def getObjectOwnerId(r):\n        for t in [\"Dataset\", \"Image\", \"Plate\"]:\n            ids = r.POST.get(t, None)\n            if ids is not None:\n                for o in list(conn.getObjects(t, ids.split(\",\"))):\n                    return o.getDetails().owner.id.val\n\n    group = conn.getObject(\"ExperimenterGroup\", group_id)\n    new_container_name = request.POST.get(\"new_container_name\", None)\n    new_container_type = request.POST.get(\"new_container_type\", None)\n    container_id = None\n\n    # Context must be set to owner of data, E.g. to create links.\n    ownerId = getObjectOwnerId(request)\n    conn.SERVICE_OPTS.setOmeroUser(ownerId)\n    if (\n        new_container_name is not None\n        and len(new_container_name) > 0\n        and new_container_type is not None\n    ):\n        conn.SERVICE_OPTS.setOmeroGroup(group_id)\n        container_id = conn.createContainer(new_container_type, new_container_name)\n    # No new container, check if target is specified\n    if container_id is None:\n        # E.g. \"dataset-234\"\n        target_id = request.POST.get(\"target_id\", None)\n        container_id = target_id is not None and target_id.split(\"-\")[1] or None\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            # TODO Doesn't the filesets only apply to images?\n            # if 'filesets' are specified, make sure we move ALL Fileset Images\n            fsIds = request.POST.getlist(\"fileset\")\n            if len(fsIds) > 0:\n                # If a dataset is being moved and there is a split fileset\n                # then those images need to go somewhere in the new\n                if dtype == \"Dataset\":\n                    conn.regroupFilesets(dsIds=obj_ids, fsIds=fsIds)\n                else:\n                    for fs in conn.getObjects(\"Fileset\", fsIds):\n                        obj_ids.extend([i.id for i in fs.copyImages()])\n                    obj_ids = list(set(obj_ids))  # remove duplicates\n            logger.debug(\"chgrp to group:%s %s-%s\" % (group_id, dtype, obj_ids))\n            handle = conn.chgrpObjects(dtype, obj_ids, group_id, container_id)\n            jobId = str(handle)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chgrp\",\n                \"group\": group.getName(),\n                \"to_group_id\": group_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change group\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    # Update contains a list of images/containers that need to be\n    # updated.\n\n    project_ids = request.POST.get(\"Project\", [])\n    dataset_ids = request.POST.get(\"Dataset\", [])\n    image_ids = request.POST.get(\"Image\", [])\n    screen_ids = request.POST.get(\"Screen\", [])\n    plate_ids = request.POST.get(\"Plate\", [])\n\n    if project_ids:\n        project_ids = [long(x) for x in project_ids.split(\",\")]\n    if dataset_ids:\n        dataset_ids = [long(x) for x in dataset_ids.split(\",\")]\n    if image_ids:\n        image_ids = [long(x) for x in image_ids.split(\",\")]\n    if screen_ids:\n        screen_ids = [long(x) for x in screen_ids.split(\",\")]\n    if plate_ids:\n        plate_ids = [long(x) for x in plate_ids.split(\",\")]\n\n    # TODO Change this user_id to be an experimenter_id in the request as it\n    # is possible that a user is chgrping data from another user so it is\n    # that users orphaned that will need updating. Or maybe all orphaned\n    # directories could potentially need updating?\n\n    # Create a list of objects that have been changed by this operation. This\n    # can be used by the client to visually update.\n    update = getAllObjects(\n        conn,\n        project_ids,\n        dataset_ids,\n        image_ids,\n        screen_ids,\n        plate_ids,\n        request.session.get(\"user_id\"),\n    )\n\n    # return HttpResponse(\"OK\")\n    return JsonResponse({\"update\": update})\n\n\n@login_required()\ndef chown(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new owner, using the chown queue.\n    Handles submission of chown form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chown\"}, status=405)\n    # Get the target owner_id\n    owner_id = getIntOrDefault(request, \"owner_id\", None)\n    if owner_id is None:\n        return JsonResponse({\"Error\": \"chown: No owner_id specified\"})\n    owner_id = int(owner_id)\n    exp = conn.getObject(\"Experimenter\", owner_id)\n    if exp is None:\n        return JsonResponse({\"Error\": \"chown: Experimenter not found\" % owner_id})\n\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    jobIds = []\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            logger.debug(\"chown to owner:%s %s-%s\" % (owner_id, dtype, obj_ids))\n            handle = conn.chownObjects(dtype, obj_ids, owner_id)\n            jobId = str(handle)\n            jobIds.append(jobId)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chown\",\n                \"owner\": exp.getFullName(),\n                \"to_owner_id\": owner_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change owner\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    return JsonResponse({\"jobIds\": jobIds})\n\n\n@login_required(setGroupContext=True)\ndef script_run(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Runs a script using values in a POST\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    inputMap = {}\n\n    sId = long(scriptId)\n\n    try:\n        params = scriptService.getParams(sId)\n    except Exception as x:\n        if x.message and x.message.startswith(\"No processor available\"):\n            # Delegate to run_script() for handling 'No processor available'\n            rsp = run_script(request, conn, sId, inputMap, scriptName=\"Script\")\n            return JsonResponse(rsp)\n        else:\n            raise\n    params = scriptService.getParams(sId)\n    scriptName = params.name.replace(\"_\", \" \").replace(\".py\", \"\")\n\n    logger.debug(\"Script: run with request.POST: %s\" % request.POST)\n\n    # upload new file\n    fileupload = (\n        \"file_annotation\" in request.FILES and request.FILES[\"file_annotation\"] or None\n    )\n    fileAnnId = None\n    if fileupload is not None and fileupload != \"\":\n        manager = BaseContainer(conn)\n        fileAnnId = manager.createFileAnnotations(fileupload, [])\n\n    for key, param in params.inputs.items():\n        prototype = param.prototype\n        pclass = prototype.__class__\n\n        if key == \"File_Annotation\" and fileAnnId is not None:\n            inputMap[key] = pclass(str(fileAnnId))\n            continue\n\n        # handle bool separately, since unchecked checkbox will not be in\n        # request.POST\n        if pclass == omero.rtypes.RBoolI:\n            value = key in request.POST\n            inputMap[key] = pclass(value)\n            continue\n\n        if pclass.__name__ == \"RMapI\":\n            keyName = \"%s_key0\" % key\n            valueName = \"%s_value0\" % key\n            row = 0\n            paramMap = {}\n            while keyName in request.POST:\n                # the key and value don't have any data-type defined by\n                # scripts - just use string\n                k = str(request.POST[keyName])\n                v = request.POST[valueName]\n                if len(k) > 0 and len(v) > 0:\n                    paramMap[str(k)] = v\n                row += 1\n                keyName = \"%s_key%d\" % (key, row)\n                valueName = \"%s_value%d\" % (key, row)\n            if len(paramMap) > 0:\n                inputMap[key] = wrap(paramMap)\n            continue\n\n        if key in request.POST:\n            if pclass == omero.rtypes.RListI:\n                values = request.POST.getlist(key)\n                if len(values) == 0:\n                    continue\n                if len(values) == 1:  # process comma-separated list\n                    if len(values[0]) == 0:\n                        continue\n                    values = values[0].split(\",\")\n\n                # try to determine 'type' of values in our list\n                listClass = omero.rtypes.RStringI\n                pval = prototype.val  # list\n                # check if a value type has been set (first item of prototype\n                # list)\n                if len(pval) > 0:\n                    listClass = pval[0].__class__\n                    if listClass == int(1).__class__:\n                        listClass = omero.rtypes.rint\n                    if listClass == long(1).__class__:\n                        listClass = omero.rtypes.rlong\n\n                # construct our list, using appropriate 'type'\n                valueList = []\n                for v in values:\n                    try:\n                        # RStringI() will encode any unicode\n                        obj = listClass(v.strip())\n                    except Exception:\n                        logger.debug(\"Invalid entry for '%s' : %s\" % (key, v))\n                        continue\n                    if isinstance(obj, omero.model.IObject):\n                        valueList.append(omero.rtypes.robject(obj))\n                    else:\n                        valueList.append(obj)\n                inputMap[key] = omero.rtypes.rlist(valueList)\n\n            # Handle other rtypes: String, Long, Int etc.\n            else:\n                value = request.POST[key]\n                if len(value) == 0:\n                    continue\n                try:\n                    inputMap[key] = pclass(value)\n                except Exception:\n                    logger.debug(\"Invalid entry for '%s' : %s\" % (key, value))\n                    continue\n\n    # If we have objects specified via 'IDs' and 'DataType', try to pick\n    # correct group\n    if \"IDs\" in inputMap and \"Data_Type\" in inputMap:\n        gid = conn.SERVICE_OPTS.getOmeroGroup()\n        conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n        try:\n            firstObj = conn.getObject(\n                inputMap[\"Data_Type\"].val, unwrap(inputMap[\"IDs\"])[0]\n            )\n            newGid = firstObj.getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(newGid)\n        except Exception:\n            logger.debug(traceback.format_exc())\n            # if inputMap values not as expected or firstObj is None\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    try:\n        # Try/except in case inputs are not serializable, e.g. unicode\n        logger.debug(\"Running script %s with \" \"params %s\" % (scriptName, inputMap))\n    except Exception:\n        pass\n    rsp = run_script(request, conn, sId, inputMap, scriptName)\n    return JsonResponse(rsp)\n\n\n@login_required(isAdmin=True)\n@render_response()\ndef script_upload(request, conn=None, **kwargs):\n    \"\"\"Script upload UI\"\"\"\n\n    if request.method != \"POST\":\n        return {\"template\": \"webclient/scripts/upload_script.html\"}\n\n    # Get script path, name and text\n    script_path = request.POST.get(\"script_path\")\n    script_file = request.FILES[\"script_file\"]\n    script_file.seek(0)\n    script_text = script_file.read().decode(\"utf-8\")\n\n    if not script_path.endswith(\"/\"):\n        script_path = script_path + \"/\"\n    script_path = script_path + script_file.name\n\n    # If script exists, replace. Otherwise upload\n    scriptService = conn.getScriptService()\n    script_id = scriptService.getScriptID(script_path)\n\n    try:\n        if script_id > 0:\n            orig_file = OriginalFileI(script_id, False)\n            scriptService.editScript(orig_file, script_text)\n            message = \"Script Replaced: %s\" % script_file.name\n        else:\n            script_id = scriptService.uploadOfficialScript(script_path, script_text)\n            message = \"Script Uploaded: %s\" % script_file.name\n    except omero.ValidationException as ex:\n        message = str(ex)\n\n    return {\"Message\": message, \"script_id\": script_id}\n\n\n@require_POST\n@login_required()\ndef ome_tiff_script(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Uses the scripting service (Batch Image Export script) to generate\n    OME-TIFF for an image and attach this as a file annotation to the image.\n    Script will show up in the 'Activities' for users to monitor and download\n    result etc.\n    \"\"\"\n\n    scriptService = conn.getScriptService()\n    sId = scriptService.getScriptID(\"/omero/export_scripts/Batch_Image_Export.py\")\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is not None:\n        gid = image.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n    imageIds = [long(imageId)]\n    inputMap = {\n        \"Data_Type\": wrap(\"Image\"),\n        \"IDs\": rlist([rlong(id) for id in imageIds]),\n    }\n    inputMap[\"Format\"] = wrap(\"OME-TIFF\")\n    rsp = run_script(request, conn, sId, inputMap, scriptName=\"Create OME-TIFF\")\n    return JsonResponse(rsp)\n\n\ndef run_script(request, conn, sId, inputMap, scriptName=\"Script\"):\n    \"\"\"\n    Starts running a script, adding details to the request.session so that it\n    shows up in the webclient Activities panel and results are available there\n    etc.\n    \"\"\"\n    request.session.modified = True\n    scriptService = conn.getScriptService()\n    try:\n        handle = scriptService.runScript(sId, inputMap, None, conn.SERVICE_OPTS)\n        # E.g. ProcessCallback/4ab13b23-22c9-4b5f-9318-40f9a1acc4e9 -t:tcp -h  10.37.129.2 -p 53154:tcp -h 10.211.55.2 -p 53154:tcp -h 10.12.1.230 -p 53154 # noqa\n        jobId = str(handle)\n        status = \"in progress\"\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n        }\n        request.session.modified = True\n    except Exception as x:\n        jobId = str(time())  # E.g. 1312803670.6076391\n        # handle python 2 or 3 errors\n        message = x.message if hasattr(x, \"message\") else (x.args[0] if x.args else \"\")\n        if message and message.startswith(\"No processor available\"):\n            # omero.ResourceError\n            logger.info(traceback.format_exc())\n            error = \"No Processor Available\"\n            status = \"no processor available\"\n            message = \"\"  # template displays message and link\n        else:\n            logger.error(traceback.format_exc())\n            error = traceback.format_exc()\n            status = \"failed\"\n            message = x.message\n        # save the error to http session, for display in 'Activities' window\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n            \"Message\": message,\n            \"error\": error,\n        }\n        return {\"status\": status, \"error\": error}\n\n    return {\"jobId\": jobId, \"status\": status}\n\n\n@login_required()\n@render_response()\ndef ome_tiff_info(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Query to see if we have an OME-TIFF attached to the image (assume only 1,\n    since Batch Image Export will delete old ones)\n    \"\"\"\n    # Any existing OME-TIFF will appear in list\n    links = list(\n        conn.getAnnotationLinks(\n            \"Image\", [imageId], ns=omero.constants.namespaces.NSOMETIFF\n        )\n    )\n    rv = {}\n    if len(links) > 0:\n        # use highest ID === most recent\n        links.sort(key=lambda x: x.getId(), reverse=True)\n        annlink = links[0]\n        created = annlink.creationEventDate()\n        annId = annlink.getChild().getId()\n        from omeroweb.webgateway.templatetags.common_filters import ago\n\n        download = reverse(\"download_annotation\", args=[annId])\n        rv = {\n            \"created\": str(created),\n            \"ago\": ago(created),\n            \"id\": annId,\n            \"download\": download,\n        }\n    return rv  # will get returned as json by default\n", "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n\n    {% block link %}\n\t\t<link rel=\"stylesheet\" href=\"{% static \"webgateway/css/reset.css\"|add:url_suffix %}\" type=\"text/css\" />   \n\t\t<link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.body.css\"|add:url_suffix %}\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{% static \"webclient/css/dusty.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    {% endblock %}\n\n\n    <!-- extend here to add page title -->\n    <title>\n        {% block title %}\n        {% endblock %}\n    </title>\n\n    {% block script %}\n        <!-- block for javascript <script> -->\n    {% endblock %}\n\n    {% block head %}\n        <!-- block for extra head elements (not css or javascript) E.g. icon, meta tags -->\n        {% include \"webgateway/base/includes/shortcut_icon.html\" %}\n    {% endblock %}\n\n</head>\n<body>\n\n{% block body %}\n\n{% endblock %}\n\n\n    <!-- settings.BASE_INCLUDE_TEMPLATE included here -->\n    {% if base_include_template %}\n      {% include base_include_template %}\n    {% endif %}\n</body>\n</html>\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# webgateway/views.py - django application view handling functions\n#\n# Copyright (c) 2007-2020 Glencoe Software, Inc. All rights reserved.\n#\n# This software is distributed under the terms described by the LICENCE file\n# you can find at the root of the distribution bundle, which states you are\n# free to use it only for non commercial purposes.\n# If the file is missing please request a copy by contacting\n# jason@glencoesoftware.com.\n#\n# Author: Carlos Neves <carlos(at)glencoesoftware.com>\n\nimport re\nimport json\nimport base64\nimport warnings\nfrom functools import wraps\nimport omero\nimport omero.clients\nfrom past.builtins import unicode\n\nfrom django.http import (\n    HttpResponse,\n    HttpResponseBadRequest,\n    HttpResponseServerError,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import (\n    HttpResponseRedirect,\n    HttpResponseNotAllowed,\n    Http404,\n    StreamingHttpResponse,\n    HttpResponseNotFound,\n)\n\nfrom django.views.decorators.http import require_POST\nfrom django.views.decorators.debug import sensitive_post_parameters\nfrom django.utils.decorators import method_decorator\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.conf import settings\nfrom wsgiref.util import FileWrapper\nfrom omero.rtypes import rlong, unwrap\nfrom omero.constants.namespaces import NSBULKANNOTATIONS\nfrom .util import points_string_to_XY_list, xy_list_to_bbox\nfrom .plategrid import PlateGrid\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom .marshal import imageMarshal, shapeMarshal, rgb_int2rgba\nfrom django.contrib.staticfiles.templatetags.staticfiles import static\nfrom django.views.generic import View\nfrom django.shortcuts import render\nfrom omeroweb.webadmin.forms import LoginForm\nfrom omeroweb.decorators import get_client_ip, is_public_user\nfrom omeroweb.webadmin.webadmin_utils import upgradeCheck\n\ntry:\n    from hashlib import md5\nexcept Exception:\n    from md5 import md5\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nfrom io import BytesIO\nimport tempfile\n\nfrom omero import ApiUsageException\nfrom omero.util.decorators import timeit, TimeIt\nfrom omeroweb.httprsp import HttpJavascriptResponse, HttpJavascriptResponseServerError\nfrom omeroweb.connector import Server\n\nimport glob\n\n\n# from models import StoredConnection\n\nfrom omeroweb.webgateway.webgateway_cache import (\n    webgateway_cache,\n    CacheBase,\n    webgateway_tempfile,\n)\n\nimport logging\nimport os\nimport traceback\nimport time\nimport zipfile\nimport shutil\n\nfrom omeroweb.decorators import login_required, ConnCleaningHttpResponse\nfrom omeroweb.connector import Connector\nfrom omeroweb.webgateway.util import zip_archived_files, LUTS_IN_PNG\nfrom omeroweb.webgateway.util import get_longs, getIntOrDefault\n\ncache = CacheBase()\nlogger = logging.getLogger(__name__)\n\ntry:\n    from PIL import Image\n    from PIL import ImageDraw\nexcept Exception:  # pragma: nocover\n    try:\n        import Image\n        import ImageDraw\n    except Exception:\n        logger.error(\"No Pillow installed\")\n\ntry:\n    import numpy\n\n    numpyInstalled = True\nexcept ImportError:\n    logger.error(\"No numpy installed\")\n    numpyInstalled = False\n\n\ndef index(request):\n    \"\"\" /webgateway/ index placeholder \"\"\"\n    return HttpResponse(\"Welcome to webgateway\")\n\n\ndef _safestr(s):\n    return unicode(s).encode(\"utf-8\")\n\n\nclass UserProxy(object):\n    \"\"\"\n    Represents the current user of the connection, with methods delegating to\n    the connection itself.\n    \"\"\"\n\n    def __init__(self, blitzcon):\n        \"\"\"\n        Initialises the User proxy with the L{omero.gateway.BlitzGateway}\n        connection\n\n        @param blitzcon:    connection\n        @type blitzcon:     L{omero.gateway.BlitzGateway}\n        \"\"\"\n\n        self._blitzcon = blitzcon\n        self.loggedIn = False\n\n    def logIn(self):\n        \"\"\" Sets the loggedIn Flag to True \"\"\"\n\n        self.loggedIn = True\n\n    def isAdmin(self):\n        \"\"\"\n        True if the current user is an admin\n\n        @return:    True if the current user is an admin\n        @rtype:     Boolean\n        \"\"\"\n\n        return self._blitzcon.isAdmin()\n\n    def canBeAdmin(self):\n        \"\"\"\n        True if the current user can be admin\n\n        @return:    True if the current user can be admin\n        @rtype:     Boolean\n        \"\"\"\n\n        return self._blitzcon.canBeAdmin()\n\n    def getId(self):\n        \"\"\"\n        Returns the ID of the current user\n\n        @return:    User ID\n        @rtype:     Long\n        \"\"\"\n\n        return self._blitzcon.getUserId()\n\n    def getName(self):\n        \"\"\"\n        Returns the Name of the current user\n\n        @return:    User Name\n        @rtype:     String\n        \"\"\"\n\n        return self._blitzcon.getUser().omeName\n\n    def getFirstName(self):\n        \"\"\"\n        Returns the first name of the current user\n\n        @return:    First Name\n        @rtype:     String\n        \"\"\"\n\n        return self._blitzcon.getUser().firstName or self.getName()\n\n\n#    def getPreferences (self):\n#        return self._blitzcon._user.getPreferences()\n#\n#    def getUserObj (self):\n#        return self._blitzcon._user\n#\n# class SessionCB (object):\n#    def _log (self, what, c):\n#        logger.debug('CONN:%s %s:%d:%s' % (what, c._user, os.getpid(),\n#                                           c._sessionUuid))\n#\n#    def create (self, c):\n#        self._log('create',c)\n#\n#    def join (self, c):\n#        self._log('join',c)\n#\n#    def close (self, c):\n#        self._log('close',c)\n# _session_cb = SessionCB()\n\n\ndef _split_channel_info(rchannels):\n    \"\"\"\n    Splits the request query channel information for images into a sequence of\n    channels, window ranges and channel colors.\n\n    @param rchannels:   The request string with channel info. E.g\n                        1|100:505$0000FF,-2,3|620:3879$FF0000\n    @type rchannels:    String\n    @return:            E.g. [1, -2, 3] [[100.0, 505.0], (None, None), [620.0,\n                        3879.0]] [u'0000FF', None, u'FF0000']\n    @rtype:             tuple of 3 lists\n    \"\"\"\n\n    channels = []\n    windows = []\n    colors = []\n    for chan in rchannels.split(\",\"):\n        # chan  1|12:1386r$0000FF\n        chan = chan.split(\"|\", 1)\n        # chan ['1', '12:1386r$0000FF']\n        t = chan[0].strip()\n        # t = '1'\n        color = None\n        # Not normally used...\n        if t.find(\"$\") >= 0:\n            t, color = t.split(\"$\")\n        try:\n            channels.append(int(t))\n            ch_window = (None, None)\n            if len(chan) > 1:\n                t = chan[1].strip()\n                # t = '12:1386r$0000FF'\n                if t.find(\"$\") >= 0:\n                    t, color = t.split(\"$\", 1)\n                    # color = '0000FF'\n                    # t = 12:1386\n                t = t.split(\":\")\n                if len(t) == 2:\n                    try:\n                        ch_window = [float(x) for x in t]\n                    except ValueError:\n                        pass\n            windows.append(ch_window)\n            colors.append(color)\n        except ValueError:\n            pass\n    logger.debug(str(channels) + \",\" + str(windows) + \",\" + str(colors))\n    return channels, windows, colors\n\n\ndef getImgDetailsFromReq(request, as_string=False):\n    \"\"\"\n    Break the GET information from the request object into details on how\n    to render the image.\n    The following keys are recognized:\n    z - Z axis position\n    t - T axis position\n    q - Quality set (0,0..1,0)\n    m - Model (g for greyscale, c for color)\n    p - Projection (see blitz_gateway.ImageWrapper.PROJECTIONS for keys)\n    x - X position (for now based on top/left offset on the browser window)\n    y - Y position (same as above)\n    c - a comma separated list of channels to be rendered (start index 1)\n      - format for each entry [-]ID[|wndst:wndend][#HEXCOLOR][,...]\n    zm - the zoom setting (as a percentual value)\n\n    @param request:     http request with keys above\n    @param as_string:   If True, return a string representation of the\n                        rendering details\n    @return:            A dict or String representation of rendering details\n                        above.\n    @rtype:             Dict or String\n    \"\"\"\n\n    r = request.GET\n    rv = {}\n    for k in (\"z\", \"t\", \"q\", \"m\", \"zm\", \"x\", \"y\", \"p\"):\n        if k in r:\n            rv[k] = r[k]\n    if \"c\" in r:\n        rv[\"c\"] = []\n        ci = _split_channel_info(r[\"c\"])\n        logger.debug(ci)\n        for i in range(len(ci[0])):\n            # a = abs channel, i = channel, s = window start, e = window end,\n            # c = color\n            rv[\"c\"].append(\n                {\n                    \"a\": abs(ci[0][i]),\n                    \"i\": ci[0][i],\n                    \"s\": ci[1][i][0],\n                    \"e\": ci[1][i][1],\n                    \"c\": ci[2][i],\n                }\n            )\n    if as_string:\n        return \"&\".join([\"%s=%s\" % (x[0], x[1]) for x in rv.items()])\n    return rv\n\n\n@login_required()\ndef render_birds_eye_view(request, iid, size=None, conn=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse wrapped jpeg with the rendered bird's eye view\n    for image 'iid'. We now use a thumbnail for performance. #10626\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param size:        Maximum size of the longest side of the resulting\n                        bird's eye view.\n    @return:            http response containing jpeg\n    \"\"\"\n    return render_thumbnail(request, iid, w=size, **kwargs)\n\n\ndef _render_thumbnail(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns a jpeg with the rendered thumbnail for image 'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    server_settings = request.session.get(\"server_settings\", {}).get(\"browser\", {})\n    defaultSize = server_settings.get(\"thumb_default_size\", 96)\n\n    direct = True\n    if w is None:\n        size = (defaultSize,)\n    else:\n        if h is None:\n            size = (int(w),)\n        else:\n            size = (int(w), int(h))\n    if size == (defaultSize,):\n        direct = False\n    user_id = conn.getUserId()\n    z = getIntOrDefault(request, \"z\", None)\n    t = getIntOrDefault(request, \"t\", None)\n    rdefId = getIntOrDefault(request, \"rdefId\", None)\n    # TODO - cache handles rdefId\n    jpeg_data = webgateway_cache.getThumb(request, server_id, user_id, iid, size)\n    if jpeg_data is None:\n        prevent_cache = False\n        img = conn.getObject(\"Image\", iid)\n        if img is None:\n            logger.debug(\"(b)Image %s not found...\" % (str(iid)))\n            if _defcb:\n                jpeg_data = _defcb(size=size)\n                prevent_cache = True\n            else:\n                raise Http404(\"Failed to render thumbnail\")\n        else:\n            jpeg_data = img.getThumbnail(\n                size=size, direct=direct, rdefId=rdefId, z=z, t=t\n            )\n            if jpeg_data is None:\n                logger.debug(\"(c)Image %s not found...\" % (str(iid)))\n                if _defcb:\n                    jpeg_data = _defcb(size=size)\n                    prevent_cache = True\n                else:\n                    raise Http404(\"Failed to render thumbnail\")\n            else:\n                prevent_cache = img._thumbInProgress\n        if not prevent_cache:\n            webgateway_cache.setThumb(request, server_id, user_id, iid, jpeg_data, size)\n    else:\n        pass\n    return jpeg_data\n\n\n@login_required()\ndef render_thumbnail(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse wrapped jpeg with the rendered thumbnail for image\n    'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing jpeg\n    \"\"\"\n    jpeg_data = _render_thumbnail(\n        request=request, iid=iid, w=w, h=h, conn=conn, _defcb=_defcb, **kwargs\n    )\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\n@login_required()\ndef render_roi_thumbnail(request, roiId, w=None, h=None, conn=None, **kwargs):\n    \"\"\"\n    For the given ROI, choose the shape to render (first time-point, mid\n    z-section) then render a region around that shape, scale to width and\n    height (or default size) and draw the shape on to the region\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    # need to find the z indices of the first shape in T\n    result = conn.getRoiService().findByRoi(long(roiId), None, conn.SERVICE_OPTS)\n    if result is None or result.rois is None or len(result.rois) == 0:\n        raise Http404\n\n    for roi in result.rois:\n        imageId = roi.image.id.val\n        shapes = roi.copyShapes()\n    shapes = [s for s in shapes if s is not None]\n\n    if len(shapes) == 0:\n        raise Http404(\"No Shapes found for ROI %s\" % roiId)\n\n    pi = _get_prepared_image(request, imageId, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    image, compress_quality = pi\n\n    shape = None\n    # if only single shape, use it...\n    if len(shapes) == 1:\n        shape = shapes[0]\n    else:\n        default_t = image.getDefaultT()\n        default_z = image.getDefaultZ()\n        # find shapes on default Z/T plane\n        def_shapes = [\n            s\n            for s in shapes\n            if unwrap(s.getTheT()) is None or unwrap(s.getTheT()) == default_t\n        ]\n        if len(def_shapes) == 1:\n            shape = def_shapes[0]\n        else:\n            def_shapes = [\n                s\n                for s in def_shapes\n                if unwrap(s.getTheZ()) is None or unwrap(s.getTheZ()) == default_z\n            ]\n            if len(def_shapes) > 0:\n                shape = def_shapes[0]\n        # otherwise pick first shape\n        if shape is None and len(shapes) > 0:\n            shape = shapes[0]\n\n    return get_shape_thumbnail(request, conn, image, shape, compress_quality)\n\n\n@login_required()\ndef render_shape_thumbnail(request, shapeId, w=None, h=None, conn=None, **kwargs):\n    \"\"\"\n    For the given Shape, redner a region around that shape, scale to width and\n    height (or default size) and draw the shape on to the region.\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    # need to find the z indices of the first shape in T\n    params = omero.sys.Parameters()\n    params.map = {\"id\": rlong(shapeId)}\n    shape = conn.getQueryService().findByQuery(\n        \"select s from Shape s join fetch s.roi where s.id = :id\",\n        params,\n        conn.SERVICE_OPTS,\n    )\n\n    if shape is None:\n        raise Http404\n\n    imageId = shape.roi.image.id.val\n\n    pi = _get_prepared_image(request, imageId, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    image, compress_quality = pi\n\n    return get_shape_thumbnail(request, conn, image, shape, compress_quality)\n\n\ndef get_shape_thumbnail(request, conn, image, s, compress_quality):\n    \"\"\"\n    Render a region around the specified Shape, scale to width and height (or\n    default size) and draw the shape on to the region. Returns jpeg data.\n\n    @param image:   ImageWrapper\n    @param s:       omero.model.Shape\n    \"\"\"\n\n    MAX_WIDTH = 250\n    color = request.GET.get(\"color\", \"fff\")\n    colours = {\n        \"f00\": (255, 0, 0),\n        \"0f0\": (0, 255, 0),\n        \"00f\": (0, 0, 255),\n        \"ff0\": (255, 255, 0),\n        \"fff\": (255, 255, 255),\n        \"000\": (0, 0, 0),\n    }\n    lineColour = colours[\"f00\"]\n    if color in colours:\n        lineColour = colours[color]\n    # used for padding if we go outside the image area\n    bg_color = (221, 221, 221)\n\n    bBox = None  # bounding box: (x, y, w, h)\n    shape = {}\n    theT = unwrap(s.getTheT())\n    theT = theT if theT is not None else image.getDefaultT()\n    theZ = unwrap(s.getTheZ())\n    theZ = theZ if theZ is not None else image.getDefaultZ()\n    if type(s) == omero.model.RectangleI:\n        shape[\"type\"] = \"Rectangle\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        shape[\"width\"] = s.getWidth().getValue()\n        shape[\"height\"] = s.getHeight().getValue()\n        bBox = (shape[\"x\"], shape[\"y\"], shape[\"width\"], shape[\"height\"])\n    elif type(s) == omero.model.MaskI:\n        shape[\"type\"] = \"Mask\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        shape[\"width\"] = s.getWidth().getValue()\n        shape[\"height\"] = s.getHeight().getValue()\n        bBox = (shape[\"x\"], shape[\"y\"], shape[\"width\"], shape[\"height\"])\n        # TODO: support for mask\n    elif type(s) == omero.model.EllipseI:\n        shape[\"type\"] = \"Ellipse\"\n        shape[\"x\"] = int(s.getX().getValue())\n        shape[\"y\"] = int(s.getY().getValue())\n        shape[\"radiusX\"] = int(s.getRadiusX().getValue())\n        shape[\"radiusY\"] = int(s.getRadiusY().getValue())\n        bBox = (\n            shape[\"x\"] - shape[\"radiusX\"],\n            shape[\"y\"] - shape[\"radiusY\"],\n            2 * shape[\"radiusX\"],\n            2 * shape[\"radiusY\"],\n        )\n    elif type(s) == omero.model.PolylineI:\n        shape[\"type\"] = \"PolyLine\"\n        shape[\"xyList\"] = points_string_to_XY_list(s.getPoints().getValue())\n        bBox = xy_list_to_bbox(shape[\"xyList\"])\n    elif type(s) == omero.model.LineI:\n        shape[\"type\"] = \"Line\"\n        shape[\"x1\"] = int(s.getX1().getValue())\n        shape[\"x2\"] = int(s.getX2().getValue())\n        shape[\"y1\"] = int(s.getY1().getValue())\n        shape[\"y2\"] = int(s.getY2().getValue())\n        x = min(shape[\"x1\"], shape[\"x2\"])\n        y = min(shape[\"y1\"], shape[\"y2\"])\n        bBox = (\n            x,\n            y,\n            max(shape[\"x1\"], shape[\"x2\"]) - x,\n            max(shape[\"y1\"], shape[\"y2\"]) - y,\n        )\n    elif type(s) == omero.model.PointI:\n        shape[\"type\"] = \"Point\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        bBox = (shape[\"x\"] - 50, shape[\"y\"] - 50, 100, 100)\n    elif type(s) == omero.model.PolygonI:\n        shape[\"type\"] = \"Polygon\"\n        shape[\"xyList\"] = points_string_to_XY_list(s.getPoints().getValue())\n        bBox = xy_list_to_bbox(shape[\"xyList\"])\n    elif type(s) == omero.model.LabelI:\n        shape[\"type\"] = \"Label\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        bBox = (shape[\"x\"] - 50, shape[\"y\"] - 50, 100, 100)\n    else:\n        logger.debug(\"Shape type not supported: %s\" % str(type(s)))\n\n    # we want to render a region larger than the bounding box\n    x, y, w, h = bBox\n    # make the aspect ratio (w/h) = 3/2\n    requiredWidth = max(w, h * 3 // 2)\n    requiredHeight = requiredWidth * 2 // 3\n    # make the rendered region 1.5 times larger than the bounding box\n    newW = int(requiredWidth * 1.5)\n    newH = int(requiredHeight * 1.5)\n    # Don't want the region to be smaller than the thumbnail dimensions\n    if newW < MAX_WIDTH:\n        newW = MAX_WIDTH\n        newH = newW * 2 // 3\n    # Don't want the region to be bigger than a 'Big Image'!\n\n    def getConfigValue(key):\n        try:\n            return conn.getConfigService().getConfigValue(key)\n        except Exception:\n            logger.warn(\n                \"webgateway: get_shape_thumbnail() could not get\"\n                \" Config-Value for %s\" % key\n            )\n            pass\n\n    max_plane_width = getConfigValue(\"omero.pixeldata.max_plane_width\")\n    max_plane_height = getConfigValue(\"omero.pixeldata.max_plane_height\")\n    if (\n        max_plane_width is None\n        or max_plane_height is None\n        or (newW > int(max_plane_width))\n        or (newH > int(max_plane_height))\n    ):\n        # generate dummy image to return\n        dummy = Image.new(\"RGB\", (MAX_WIDTH, MAX_WIDTH * 2 // 3), bg_color)\n        draw = ImageDraw.Draw(dummy)\n        draw.text((10, 30), \"Shape too large to \\ngenerate thumbnail\", fill=(255, 0, 0))\n        rv = BytesIO()\n        dummy.save(rv, \"jpeg\", quality=90)\n        return HttpResponse(rv.getvalue(), content_type=\"image/jpeg\")\n\n    xOffset = (newW - w) // 2\n    yOffset = (newH - h) // 2\n    newX = int(x - xOffset)\n    newY = int(y - yOffset)\n\n    # Need to check if any part of our region is outside the image. (assume\n    # that SOME of the region is within the image!)\n    sizeX = image.getSizeX()\n    sizeY = image.getSizeY()\n    left_xs, right_xs, top_xs, bottom_xs = 0, 0, 0, 0\n    if newX < 0:\n        newW = newW + newX\n        left_xs = abs(newX)\n        newX = 0\n    if newY < 0:\n        newH = newH + newY\n        top_xs = abs(newY)\n        newY = 0\n    if newW + newX > sizeX:\n        right_xs = (newW + newX) - sizeX\n        newW = newW - right_xs\n    if newH + newY > sizeY:\n        bottom_xs = (newH + newY) - sizeY\n        newH = newH - bottom_xs\n\n    # now we should be getting the correct region\n    jpeg_data = image.renderJpegRegion(\n        theZ, theT, newX, newY, newW, newH, level=None, compression=compress_quality\n    )\n    img = Image.open(BytesIO(jpeg_data))\n\n    # add back on the xs we were forced to trim\n    if left_xs != 0 or right_xs != 0 or top_xs != 0 or bottom_xs != 0:\n        jpg_w, jpg_h = img.size\n        xs_w = jpg_w + right_xs + left_xs\n        xs_h = jpg_h + bottom_xs + top_xs\n        xs_image = Image.new(\"RGB\", (xs_w, xs_h), bg_color)\n        xs_image.paste(img, (left_xs, top_xs))\n        img = xs_image\n\n    # we have our full-sized region. Need to resize to thumbnail.\n    current_w, current_h = img.size\n    factor = float(MAX_WIDTH) / current_w\n    resizeH = int(current_h * factor)\n    img = img.resize((MAX_WIDTH, resizeH))\n\n    draw = ImageDraw.Draw(img)\n    if shape[\"type\"] == \"Rectangle\":\n        rectX = int(xOffset * factor)\n        rectY = int(yOffset * factor)\n        rectW = int((w + xOffset) * factor)\n        rectH = int((h + yOffset) * factor)\n        draw.rectangle((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.rectangle((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif shape[\"type\"] == \"Line\":\n        lineX1 = (shape[\"x1\"] - newX + left_xs) * factor\n        lineX2 = (shape[\"x2\"] - newX + left_xs) * factor\n        lineY1 = (shape[\"y1\"] - newY + top_xs) * factor\n        lineY2 = (shape[\"y2\"] - newY + top_xs) * factor\n        draw.line((lineX1, lineY1, lineX2, lineY2), fill=lineColour, width=2)\n    elif shape[\"type\"] == \"Ellipse\":\n        rectX = int(xOffset * factor)\n        rectY = int(yOffset * factor)\n        rectW = int((w + xOffset) * factor)\n        rectH = int((h + yOffset) * factor)\n        draw.ellipse((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.ellipse((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif shape[\"type\"] == \"Point\":\n        point_radius = 2\n        rectX = (MAX_WIDTH // 2) - point_radius\n        rectY = int(resizeH // 2) - point_radius\n        rectW = rectX + (point_radius * 2)\n        rectH = rectY + (point_radius * 2)\n        draw.ellipse((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.ellipse((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif \"xyList\" in shape:\n        # resizedXY = [(int(x*factor), int(y*factor))\n        #              for (x,y) in shape['xyList']]\n        def resizeXY(xy):\n            x, y = xy\n            return (\n                int((x - newX + left_xs) * factor),\n                int((y - newY + top_xs) * factor),\n            )\n\n        resizedXY = [resizeXY(xy) for xy in shape[\"xyList\"]]\n        # doesn't support 'width' of line\n        # draw.polygon(resizedXY, outline=lineColour)\n        x2 = y2 = None\n        for line in range(1, len(resizedXY)):\n            x1, y1 = resizedXY[line - 1]\n            x2, y2 = resizedXY[line]\n            draw.line((x1, y1, x2, y2), fill=lineColour, width=2)\n        start_x, start_y = resizedXY[0]\n        if shape[\"type\"] != \"PolyLine\":\n            # Seems possible to have Polygon with only 1 point!\n            if x2 is None:\n                x2 = start_x + 1  # This will create a visible dot\n            if y2 is None:\n                y2 = start_y + 1\n            draw.line((x2, y2, start_x, start_y), fill=lineColour, width=2)\n\n    rv = BytesIO()\n    compression = 0.9\n    try:\n        img.save(rv, \"jpeg\", quality=int(compression * 100))\n        jpeg = rv.getvalue()\n    finally:\n        rv.close()\n    return HttpResponse(jpeg, content_type=\"image/jpeg\")\n\n\n@login_required()\ndef render_shape_mask(request, shapeId, conn=None, **kwargs):\n    \"\"\" Returns mask as a png (supports transparency) \"\"\"\n\n    if not numpyInstalled:\n        raise NotImplementedError(\"numpy not installed\")\n    params = omero.sys.Parameters()\n    params.map = {\"id\": rlong(shapeId)}\n    shape = conn.getQueryService().findByQuery(\n        \"select s from Shape s where s.id = :id\", params, conn.SERVICE_OPTS\n    )\n    if shape is None:\n        raise Http404(\"Shape ID: %s not found\" % shapeId)\n    width = int(shape.getWidth().getValue())\n    height = int(shape.getHeight().getValue())\n    color = unwrap(shape.getFillColor())\n    fill = (255, 255, 0, 255)\n    if color is not None:\n        color = rgb_int2rgba(color)\n        fill = (color[0], color[1], color[2], int(color[3] * 255))\n    mask_packed = shape.getBytes()\n    # convert bytearray into something we can use\n    intarray = numpy.fromstring(mask_packed, dtype=numpy.uint8)\n    binarray = numpy.unpackbits(intarray)\n\n    # Couldn't get the 'proper' way of doing this to work,\n    # TODO: look at this again later. Faster than simple way below:\n    # E.g. takes ~2 seconds for 1984 x 1984 mask\n    # pixels = \"\"\n    # steps = len(binarray) / 8\n    # for i in range(steps):\n    #     b = binarray[i*8: (i+1)*8]\n    #     pixels += struct.pack(\"8B\", b[0], b[1], b[2], b[3], b[4],\n    #                           b[5], b[6], b[7])\n    # for b in binarray:\n    #     pixels += struct.pack(\"1B\", b)\n    # im = Image.frombytes(\"1\", size=(width, height), data=pixels)\n\n    # Simple approach - Just set each pixel in turn\n    # E.g. takes ~12 seconds for 1984 x 1984 mask with most pixels '1'\n    # Or ~5 seconds for same size mask with most pixels \"0\"\n    img = Image.new(\"RGBA\", size=(width, height), color=(0, 0, 0, 0))\n    x = 0\n    y = 0\n    for pix in binarray:\n        if pix == 1:\n            img.putpixel((x, y), fill)\n        x += 1\n        if x > width - 1:\n            x = 0\n            y += 1\n    rv = BytesIO()\n    # return a png (supports transparency)\n    img.save(rv, \"png\", quality=int(100))\n    png = rv.getvalue()\n    return HttpResponse(png, content_type=\"image/png\")\n\n\ndef _get_signature_from_request(request):\n    \"\"\"\n    returns a string that identifies this image, along with the settings\n    passed on the request.\n    Useful for using as img identifier key, for prepared image.\n\n    @param request: http request\n    @return:        String\n    \"\"\"\n\n    r = request.GET\n    rv = r.get(\"m\", \"_\") + r.get(\"p\", \"_\") + r.get(\"c\", \"_\") + r.get(\"q\", \"_\")\n    return rv\n\n\ndef _get_maps_enabled(request, name, sizeC=0):\n    \"\"\"\n    Parses 'maps' query string from request\n    \"\"\"\n    codomains = None\n    if \"maps\" in request:\n        map_json = request[\"maps\"]\n        codomains = []\n        try:\n            # If coming from request string, need to load -> json\n            if isinstance(map_json, (unicode, str)):\n                map_json = json.loads(map_json)\n            sizeC = max(len(map_json), sizeC)\n            for c in range(sizeC):\n                enabled = None\n                if len(map_json) > c:\n                    m = map_json[c].get(name)\n                    # If None, no change to saved status\n                    if m is not None:\n                        enabled = m.get(\"enabled\") in (True, \"true\")\n                codomains.append(enabled)\n        except Exception:\n            logger.debug(\"Invalid json for query ?maps=%s\" % map_json)\n            codomains = None\n    return codomains\n\n\ndef _get_prepared_image(\n    request, iid, server_id=None, conn=None, saveDefs=False, retry=True\n):\n    \"\"\"\n    Fetches the Image object for image 'iid' and prepares it according to the\n    request query, setting the channels, rendering model and projection\n    arguments. The compression level is parsed and returned too.\n    For parameters in request, see L{getImgDetailsFromReq}\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param saveDefs:    Try to save the rendering settings, default z and t.\n    @param retry:       Try an extra attempt at this method\n    @return:            Tuple (L{omero.gateway.ImageWrapper} image, quality)\n    \"\"\"\n    r = request.GET\n    logger.debug(\n        \"Preparing Image:%r saveDefs=%r \"\n        \"retry=%r request=%r conn=%s\" % (iid, saveDefs, retry, r, str(conn))\n    )\n    img = conn.getObject(\"Image\", iid)\n    if img is None:\n        return\n    invert_flags = None\n    if \"maps\" in r:\n        reverses = _get_maps_enabled(r, \"reverse\", img.getSizeC())\n        # 'reverse' is now deprecated (5.4.0). Also check for 'invert'\n        invert_flags = _get_maps_enabled(r, \"inverted\", img.getSizeC())\n        # invert is True if 'invert' OR 'reverse' is enabled\n        if reverses is not None and invert_flags is not None:\n            invert_flags = [\n                z[0] if z[0] is not None else z[1] for z in zip(invert_flags, reverses)\n            ]\n        try:\n            # quantization maps (just applied, not saved at the moment)\n            qm = [m.get(\"quantization\") for m in json.loads(r[\"maps\"])]\n            img.setQuantizationMaps(qm)\n        except Exception:\n            logger.debug(\"Failed to set quantization maps\")\n\n    if \"c\" in r:\n        logger.debug(\"c=\" + r[\"c\"])\n        activechannels, windows, colors = _split_channel_info(r[\"c\"])\n        allchannels = range(1, img.getSizeC() + 1)\n        # If saving, apply to all channels\n        if saveDefs and not img.setActiveChannels(\n            allchannels, windows, colors, invert_flags\n        ):\n            logger.debug(\"Something bad happened while setting the active channels...\")\n        # Save the active/inactive state of the channels\n        if not img.setActiveChannels(activechannels, windows, colors, invert_flags):\n            logger.debug(\"Something bad happened while setting the active channels...\")\n\n    if r.get(\"m\", None) == \"g\":\n        img.setGreyscaleRenderingModel()\n    elif r.get(\"m\", None) == \"c\":\n        img.setColorRenderingModel()\n    # projection  'intmax' OR 'intmax|5:25'\n    p = r.get(\"p\", None)\n    pStart, pEnd = None, None\n    if p is not None and len(p.split(\"|\")) > 1:\n        p, startEnd = p.split(\"|\", 1)\n        try:\n            pStart, pEnd = [int(s) for s in startEnd.split(\":\")]\n        except ValueError:\n            pass\n    img.setProjection(p)\n    img.setProjectionRange(pStart, pEnd)\n    img.setInvertedAxis(bool(r.get(\"ia\", \"0\") == \"1\"))\n    compress_quality = r.get(\"q\", None)\n    if saveDefs:\n        \"z\" in r and img.setDefaultZ(long(r[\"z\"]) - 1)\n        \"t\" in r and img.setDefaultT(long(r[\"t\"]) - 1)\n        img.saveDefaults()\n    return (img, compress_quality)\n\n\n@login_required()\ndef render_image_region(request, iid, z, t, conn=None, **kwargs):\n    \"\"\"\n    Returns a jpeg of the OMERO image, rendering only a region specified in\n    query string as region=x,y,width,height. E.g. region=0,512,256,256\n    Rendering settings can be specified in the request parameters.\n\n    @param request:     http request\n    @param iid:         image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    # if the region=x,y,w,h is not parsed correctly to give 4 ints then we\n    # simply provide whole image plane.\n    # alternatively, could return a 404?\n    # if h == None:\n    #    return render_image(request, iid, z, t, server_id=None, _conn=None,\n    #                        **kwargs)\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n\n    tile = request.GET.get(\"tile\", None)\n    region = request.GET.get(\"region\", None)\n    level = None\n\n    if tile:\n        try:\n            img._prepareRenderingEngine()\n            w, h = img._re.getTileSize()\n            levels = img._re.getResolutionLevels() - 1\n\n            zxyt = tile.split(\",\")\n            # if tile size is given respect it\n            if len(zxyt) > 4:\n                tile_size = [int(zxyt[3]), int(zxyt[4])]\n                tile_defaults = [w, h]\n                max_tile_length = 1024\n                try:\n                    max_tile_length = int(\n                        conn.getConfigService().getConfigValue(\n                            \"omero.pixeldata.max_tile_length\"\n                        )\n                    )\n                except Exception:\n                    pass\n                for i, tile_length in enumerate(tile_size):\n                    # use default tile size if <= 0\n                    if tile_length <= 0:\n                        tile_size[i] = tile_defaults[i]\n                    # allow no bigger than max_tile_length\n                    if tile_length > max_tile_length:\n                        tile_size[i] = max_tile_length\n                w, h = tile_size\n            v = int(zxyt[0])\n            if v < 0:\n                msg = \"Invalid resolution level %s < 0\" % v\n                logger.debug(msg, exc_info=True)\n                return HttpResponseBadRequest(msg)\n\n            if levels == 0:  # non pyramid file\n                if v > 0:\n                    msg = \"Invalid resolution level %s, non pyramid file\" % v\n                    logger.debug(msg, exc_info=True)\n                    return HttpResponseBadRequest(msg)\n                else:\n                    level = None\n            else:\n                level = levels - v\n                if level < 0:\n                    msg = (\n                        \"Invalid resolution level, \\\n                    %s > number of available levels %s \"\n                        % (v, levels)\n                    )\n                    logger.debug(msg, exc_info=True)\n                    return HttpResponseBadRequest(msg)\n            x = int(zxyt[1]) * w\n            y = int(zxyt[2]) * h\n        except Exception:\n            msg = \"malformed tile argument, tile=%s\" % tile\n            logger.debug(msg, exc_info=True)\n            return HttpResponseBadRequest(msg)\n    elif region:\n        try:\n            xywh = region.split(\",\")\n\n            x = int(xywh[0])\n            y = int(xywh[1])\n            w = int(xywh[2])\n            h = int(xywh[3])\n        except Exception:\n            msg = \"malformed region argument, region=%s\" % region\n            logger.debug(msg, exc_info=True)\n            return HttpResponseBadRequest(msg)\n    else:\n        return HttpResponseBadRequest(\"tile or region argument required\")\n\n    # region details in request are used as key for caching.\n    jpeg_data = webgateway_cache.getImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderJpegRegion(\n            z, t, x, y, w, h, level=level, compression=compress_quality\n        )\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setImage(request, server_id, img, z, t, jpeg_data)\n\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\n@login_required()\ndef render_image(request, iid, z=None, t=None, conn=None, **kwargs):\n    \"\"\"\n    Renders the image with id {{iid}} at {{z}} and {{t}} as jpeg.\n    Many options are available from the request dict. See\n    L{getImgDetailsFromReq} for list.\n    I am assuming a single Pixels object on image with image-Id='iid'. May be\n    wrong\n\n    @param request:     http request\n    @param iid:         image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    jpeg_data = webgateway_cache.getImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderJpeg(z, t, compression=compress_quality)\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setImage(request, server_id, img, z, t, jpeg_data)\n\n    format = request.GET.get(\"format\", \"jpeg\")\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    if \"download\" in kwargs and kwargs[\"download\"]:\n        if format == \"png\":\n            # convert jpeg data to png...\n            i = Image.open(BytesIO(jpeg_data))\n            output = BytesIO()\n            i.save(output, \"png\")\n            jpeg_data = output.getvalue()\n            output.close()\n            rsp = HttpResponse(jpeg_data, content_type=\"image/png\")\n        elif format == \"tif\":\n            # convert jpeg data to TIFF\n            i = Image.open(BytesIO(jpeg_data))\n            output = BytesIO()\n            i.save(output, \"tiff\")\n            jpeg_data = output.getvalue()\n            output.close()\n            rsp = HttpResponse(jpeg_data, content_type=\"image/tiff\")\n        fileName = img.getName()\n        try:\n            fileName = fileName.decode(\"utf8\")\n        except AttributeError:\n            pass  # python 3\n        fileName = fileName.replace(\",\", \".\").replace(\" \", \"_\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        rsp[\"Content-Length\"] = len(jpeg_data)\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s.%s\" % (fileName, format)\n    return rsp\n\n\n@login_required()\ndef render_ome_tiff(request, ctx, cid, conn=None, **kwargs):\n    \"\"\"\n    Renders the OME-TIFF representation of the image(s) with id cid in ctx\n    (i)mage, (d)ataset, or (p)roject.\n    For multiple images export, images that require pixels pyramid (big\n    images) will be silently skipped.\n    If exporting a single big image or if all images in a multple image export\n    are big, a 404 will be triggered.\n    A request parameter dryrun can be passed to return the count of images\n    that would actually be exported.\n\n    @param request:     http request\n    @param ctx:         'p' or 'd' or 'i'\n    @param cid:         Project, Dataset or Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping the tiff (or zip for multiple\n                        files), or redirect to temp file/zip\n                        if dryrun is True, returns count of images that would\n                        be exported\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    imgs = []\n    if ctx == \"p\":\n        obj = conn.getObject(\"Project\", cid)\n        if obj is None:\n            raise Http404\n        for d in obj.listChildren():\n            imgs.extend(list(d.listChildren()))\n        name = obj.getName()\n    elif ctx == \"d\":\n        obj = conn.getObject(\"Dataset\", cid)\n        if obj is None:\n            raise Http404\n        imgs.extend(list(obj.listChildren()))\n        selection = list(filter(None, request.GET.get(\"selection\", \"\").split(\",\")))\n        if len(selection) > 0:\n            logger.debug(selection)\n            logger.debug(imgs)\n            imgs = [x for x in imgs if str(x.getId()) in selection]\n            logger.debug(imgs)\n            if len(imgs) == 0:\n                raise Http404\n        name = \"%s-%s\" % (obj.getParent().getName(), obj.getName())\n    elif ctx == \"w\":\n        obj = conn.getObject(\"Well\", cid)\n        if obj is None:\n            raise Http404\n        imgs.extend([x.getImage() for x in obj.listChildren()])\n        plate = obj.getParent()\n        coord = \"%s%s\" % (\n            plate.getRowLabels()[obj.row],\n            plate.getColumnLabels()[obj.column],\n        )\n        name = \"%s-%s-%s\" % (plate.getParent().getName(), plate.getName(), coord)\n    else:\n        obj = conn.getObject(\"Image\", cid)\n        if obj is None:\n            raise Http404\n        imgs.append(obj)\n\n    imgs = [x for x in imgs if not x.requiresPixelsPyramid()]\n\n    if request.GET.get(\"dryrun\", False):\n        rv = json.dumps(len(imgs))\n        c = request.GET.get(\"callback\", None)\n        if c is not None and not kwargs.get(\"_internal\", False):\n            rv = \"%s(%s)\" % (c, rv)\n        return HttpJavascriptResponse(rv)\n    if len(imgs) == 0:\n        raise Http404\n    if len(imgs) == 1:\n        obj = imgs[0]\n        key = (\n            \"_\".join((str(x.getId()) for x in obj.getAncestry()))\n            + \"_\"\n            + str(obj.getId())\n            + \"_ome_tiff\"\n        )\n        # total name len <= 255, 9 is for .ome.tiff\n        fnamemax = 255 - len(str(obj.getId())) - 10\n        objname = obj.getName()[:fnamemax]\n        fpath, rpath, fobj = webgateway_tempfile.new(\n            str(obj.getId()) + \"-\" + objname + \".ome.tiff\", key=key\n        )\n        if fobj is True:\n            # already exists\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n        tiff_data = webgateway_cache.getOmeTiffImage(request, server_id, imgs[0])\n        if tiff_data is None:\n            try:\n                tiff_data = imgs[0].exportOmeTiff()\n            except Exception:\n                logger.debug(\"Failed to export image (2)\", exc_info=True)\n                tiff_data = None\n            if tiff_data is None:\n                webgateway_tempfile.abort(fpath)\n                raise Http404\n            webgateway_cache.setOmeTiffImage(request, server_id, imgs[0], tiff_data)\n        if fobj is None:\n            rsp = HttpResponse(tiff_data, content_type=\"image/tiff\")\n            rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s.ome.tiff\"' % (\n                str(obj.getId()) + \"-\" + objname\n            )\n            rsp[\"Content-Length\"] = len(tiff_data)\n            return rsp\n        else:\n            fobj.write(tiff_data)\n            fobj.close()\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n    else:\n        try:\n            img_ids = \"+\".join((str(x.getId()) for x in imgs)).encode(\"utf-8\")\n            key = (\n                \"_\".join((str(x.getId()) for x in imgs[0].getAncestry()))\n                + \"_\"\n                + md5(img_ids).hexdigest()\n                + \"_ome_tiff_zip\"\n            )\n            fpath, rpath, fobj = webgateway_tempfile.new(name + \".zip\", key=key)\n            if fobj is True:\n                return HttpResponseRedirect(\n                    settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n                )\n            logger.debug(fpath)\n            if fobj is None:\n                fobj = BytesIO()\n            zobj = zipfile.ZipFile(fobj, \"w\", zipfile.ZIP_STORED)\n            for obj in imgs:\n                tiff_data = webgateway_cache.getOmeTiffImage(request, server_id, obj)\n                if tiff_data is None:\n                    tiff_data = obj.exportOmeTiff()\n                    if tiff_data is None:\n                        continue\n                    webgateway_cache.setOmeTiffImage(request, server_id, obj, tiff_data)\n                # While ZIP itself doesn't have the 255 char limit for\n                # filenames, the FS where these get unarchived might, so trim\n                # names\n                # total name len <= 255, 9 is for .ome.tiff\n                fnamemax = 255 - len(str(obj.getId())) - 10\n                objname = obj.getName()[:fnamemax]\n                zobj.writestr(str(obj.getId()) + \"-\" + objname + \".ome.tiff\", tiff_data)\n            zobj.close()\n            if fpath is None:\n                zip_data = fobj.getvalue()\n                rsp = HttpResponse(zip_data, content_type=\"application/zip\")\n                rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s.zip\"' % name\n                rsp[\"Content-Length\"] = len(zip_data)\n                return rsp\n        except Exception:\n            logger.debug(traceback.format_exc())\n            raise\n        return HttpResponseRedirect(settings.STATIC_URL + \"webgateway/tfiles/\" + rpath)\n\n\n@login_required()\ndef render_movie(request, iid, axis, pos, conn=None, **kwargs):\n    \"\"\"\n    Renders a movie from the image with id iid\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param axis:        Movie frames are along 'z' or 't' dimension. String\n    @param pos:         The T index (for z axis) or Z index (for t axis)\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping the file, or redirect to temp\n                        file\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    try:\n        # Prepare a filename we'll use for temp cache, and check if file is\n        # already there\n        opts = {}\n        opts[\"format\"] = \"video/\" + request.GET.get(\"format\", \"quicktime\")\n        opts[\"fps\"] = int(request.GET.get(\"fps\", 4))\n        opts[\"minsize\"] = (512, 512, \"Black\")\n        ext = \".avi\"\n        key = \"%s-%s-%s-%d-%s-%s\" % (\n            iid,\n            axis,\n            pos,\n            opts[\"fps\"],\n            _get_signature_from_request(request),\n            request.GET.get(\"format\", \"quicktime\"),\n        )\n\n        pos = int(pos)\n        pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n        if pi is None:\n            raise Http404\n        img, compress_quality = pi\n\n        fpath, rpath, fobj = webgateway_tempfile.new(img.getName() + ext, key=key)\n        logger.debug(fpath, rpath, fobj)\n        if fobj is True:\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n            # os.path.join(rpath, img.getName() + ext))\n\n        if \"optsCB\" in kwargs:\n            opts.update(kwargs[\"optsCB\"](img))\n        opts.update(kwargs.get(\"opts\", {}))\n        logger.debug(\n            \"rendering movie for img %s with axis %s, pos %i and opts %s\"\n            % (iid, axis, pos, opts)\n        )\n        # fpath, rpath = webgateway_tempfile.newdir()\n        if fpath is None:\n            fo, fn = tempfile.mkstemp()\n        else:\n            fn = fpath  # os.path.join(fpath, img.getName())\n        if axis.lower() == \"z\":\n            dext, mimetype = img.createMovie(\n                fn, 0, img.getSizeZ() - 1, pos - 1, pos - 1, opts\n            )\n        else:\n            dext, mimetype = img.createMovie(\n                fn, pos - 1, pos - 1, 0, img.getSizeT() - 1, opts\n            )\n        if dext is None and mimetype is None:\n            # createMovie is currently only available on 4.1_custom\n            # https://trac.openmicroscopy.org/ome/ticket/3857\n            raise Http404\n        if fpath is None:\n            movie = open(fn).read()\n            os.close(fo)\n            rsp = HttpResponse(movie, content_type=mimetype)\n            rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s\"' % (\n                img.getName() + ext\n            )\n            rsp[\"Content-Length\"] = len(movie)\n            return rsp\n        else:\n            fobj.close()\n            # shutil.move(fn, fn + ext)\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n            # os.path.join(rpath, img.getName() + ext))\n    except Exception:\n        logger.debug(traceback.format_exc())\n        raise\n\n\n@login_required()\ndef render_split_channel(request, iid, z, t, conn=None, **kwargs):\n    \"\"\"\n    Renders a split channel view of the image with id {{iid}} at {{z}} and\n    {{t}} as jpeg.\n    Many options are available from the request dict.\n    Requires Pillow to be installed on the server.\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping a jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    compress_quality = compress_quality and float(compress_quality) or 0.9\n    jpeg_data = webgateway_cache.getSplitChannelImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderSplitChannel(z, t, compression=compress_quality)\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setSplitChannelImage(request, server_id, img, z, t, jpeg_data)\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\ndef debug(f):\n    \"\"\"\n    Decorator for adding debugging functionality to methods.\n\n    @param f:       The function to wrap\n    @return:        The wrapped function\n    \"\"\"\n\n    @wraps(f)\n    def wrap(request, *args, **kwargs):\n        debug = request.GET.getlist(\"debug\")\n        if \"slow\" in debug:\n            time.sleep(5)\n        if \"fail\" in debug:\n            raise Http404\n        if \"error\" in debug:\n            raise AttributeError(\"Debug requested error\")\n        return f(request, *args, **kwargs)\n\n    return wrap\n\n\ndef jsonp(f):\n    \"\"\"\n    Decorator for adding connection debugging and returning function result as\n    json, depending on values in kwargs\n\n    @param f:       The function to wrap\n    @return:        The wrapped function, which will return json\n    \"\"\"\n\n    @wraps(f)\n    def wrap(request, *args, **kwargs):\n        logger.debug(\"jsonp\")\n        try:\n            server_id = kwargs.get(\"server_id\", None)\n            if server_id is None and request.session.get(\"connector\"):\n                server_id = request.session[\"connector\"].server_id\n            kwargs[\"server_id\"] = server_id\n            rv = f(request, *args, **kwargs)\n            if kwargs.get(\"_raw\", False):\n                return rv\n            if isinstance(rv, HttpResponse):\n                return rv\n            c = request.GET.get(\"callback\", None)\n            if c is not None and not kwargs.get(\"_internal\", False):\n                rv = json.dumps(rv)\n                rv = \"%s(%s)\" % (c, rv)\n                # mimetype for JSONP is application/javascript\n                return HttpJavascriptResponse(rv)\n            if kwargs.get(\"_internal\", False):\n                return rv\n            # mimetype for JSON is application/json\n            # NB: To support old api E.g. /get_rois_json/\n            # We need to support lists\n            safe = type(rv) is dict\n            return JsonResponse(rv, safe=safe)\n        except Exception as ex:\n            # Default status is 500 'server error'\n            # But we try to handle all 'expected' errors appropriately\n            # TODO: handle omero.ConcurrencyException\n            status = 500\n            if isinstance(ex, omero.SecurityViolation):\n                status = 403\n            elif isinstance(ex, omero.ApiUsageException):\n                status = 400\n            trace = traceback.format_exc()\n            logger.debug(trace)\n            if kwargs.get(\"_raw\", False) or kwargs.get(\"_internal\", False):\n                raise\n            return JsonResponse(\n                {\"message\": str(ex), \"stacktrace\": trace}, status=status\n            )\n\n    return wrap\n\n\n@debug\n@login_required()\ndef render_row_plot(request, iid, z, t, y, conn=None, w=1, **kwargs):\n    \"\"\"\n    Renders the line plot for the image with id {{iid}} at {{z}} and {{t}} as\n    gif with transparent background.\n    Many options are available from the request dict.\n    I am assuming a single Pixels object on image with Image ID='iid'. May be\n    wrong\n    TODO: cache\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param y:           Y position of row to measure\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param w:           Line width\n    @return:            http response wrapping a gif\n    \"\"\"\n\n    if not w:\n        w = 1\n    pi = _get_prepared_image(request, iid, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    try:\n        gif_data = img.renderRowLinePlotGif(int(z), int(t), int(y), int(w))\n    except Exception:\n        logger.debug(\"a\", exc_info=True)\n        raise\n    if gif_data is None:\n        raise Http404\n    rsp = HttpResponse(gif_data, content_type=\"image/gif\")\n    return rsp\n\n\n@debug\n@login_required()\ndef render_col_plot(request, iid, z, t, x, w=1, conn=None, **kwargs):\n    \"\"\"\n    Renders the line plot for the image with id {{iid}} at {{z}} and {{t}} as\n    gif with transparent background.\n    Many options are available from the request dict.\n    I am assuming a single Pixels object on image with id='iid'. May be wrong\n    TODO: cache\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param x:           X position of column to measure\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param w:           Line width\n    @return:            http response wrapping a gif\n    \"\"\"\n\n    if not w:\n        w = 1\n    pi = _get_prepared_image(request, iid, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    gif_data = img.renderColLinePlotGif(int(z), int(t), int(x), int(w))\n    if gif_data is None:\n        raise Http404\n    rsp = HttpResponse(gif_data, content_type=\"image/gif\")\n    return rsp\n\n\n@login_required()\n@jsonp\ndef imageData_json(request, conn=None, _internal=False, **kwargs):\n    \"\"\"\n    Get a dict with image information\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param _internal:   TODO: ?\n    @return:            Dict\n    \"\"\"\n\n    iid = kwargs[\"iid\"]\n    key = kwargs.get(\"key\", None)\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        if is_public_user(request):\n            # 403 - Should try logging in\n            return HttpResponseForbidden()\n        else:\n            return HttpResponseNotFound(\"Image:%s not found\" % iid)\n    if request.GET.get(\"getDefaults\") == \"true\":\n        image.resetDefaults(save=False)\n    rv = imageMarshal(image, key=key, request=request)\n    return rv\n\n\n@login_required()\n@jsonp\ndef wellData_json(request, conn=None, _internal=False, **kwargs):\n    \"\"\"\n    Get a dict with image information\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param _internal:   TODO: ?\n    @return:            Dict\n    \"\"\"\n\n    wid = kwargs[\"wid\"]\n    well = conn.getObject(\"Well\", wid)\n    if well is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n    rv = well.simpleMarshal(xtra=xtra)\n    return rv\n\n\n@login_required()\n@jsonp\ndef plateGrid_json(request, pid, field=0, conn=None, **kwargs):\n    \"\"\"\"\"\"\n    try:\n        field = long(field or 0)\n    except ValueError:\n        field = 0\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n    thumbsize = getIntOrDefault(request, \"size\", None)\n    logger.debug(thumbsize)\n    server_id = kwargs[\"server_id\"]\n\n    def get_thumb_url(iid):\n        if thumbsize is not None:\n            return reverse(prefix, args=(iid, thumbsize))\n        return reverse(prefix, args=(iid,))\n\n    plateGrid = PlateGrid(conn, pid, field, kwargs.get(\"urlprefix\", get_thumb_url))\n\n    plate = plateGrid.plate\n    if plate is None:\n        return Http404\n\n    cache_key = \"plategrid-%d-%s\" % (field, thumbsize)\n    rv = webgateway_cache.getJson(request, server_id, plate, cache_key)\n\n    if rv is None:\n        rv = plateGrid.metadata\n        webgateway_cache.setJson(request, server_id, plate, json.dumps(rv), cache_key)\n    else:\n        rv = json.loads(rv)\n    return rv\n\n\n@login_required()\n@jsonp\ndef get_thumbnails_json(request, w=None, conn=None, **kwargs):\n    \"\"\"\n    Returns base64 encoded jpeg with the rendered thumbnail for images\n    'id'\n\n    @param request:     http request\n    @param w:           Thumbnail max width. 96 by default\n    @return:            http response containing base64 encoded thumbnails\n    \"\"\"\n    server_settings = request.session.get(\"server_settings\", {}).get(\"browser\", {})\n    defaultSize = server_settings.get(\"thumb_default_size\", 96)\n    if w is None:\n        w = defaultSize\n    image_ids = get_longs(request, \"id\")\n    image_ids = list(set(image_ids))  # remove any duplicates\n    # If we only have a single ID, simply use getThumbnail()\n    if len(image_ids) == 1:\n        iid = image_ids[0]\n        try:\n            data = _render_thumbnail(request, iid, w=w, conn=conn)\n            return {\n                iid: \"data:image/jpeg;base64,%s\"\n                % base64.b64encode(data).decode(\"utf-8\")\n            }\n        except Exception:\n            return {iid: None}\n    logger.debug(\"Image ids: %r\" % image_ids)\n    if len(image_ids) > settings.THUMBNAILS_BATCH:\n        return HttpJavascriptResponseServerError(\n            \"Max %s thumbnails at a time.\" % settings.THUMBNAILS_BATCH\n        )\n    thumbnails = conn.getThumbnailSet([rlong(i) for i in image_ids], w)\n    rv = dict()\n    for i in image_ids:\n        rv[i] = None\n        try:\n            t = thumbnails[i]\n            if len(t) > 0:\n                # replace thumbnail urls by base64 encoded image\n                rv[i] = \"data:image/jpeg;base64,%s\" % base64.b64encode(t).decode(\n                    \"utf-8\"\n                )\n        except KeyError:\n            logger.error(\"Thumbnail not available. (img id: %d)\" % i)\n        except Exception:\n            logger.error(traceback.format_exc())\n    return rv\n\n\n@login_required()\n@jsonp\ndef get_thumbnail_json(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse base64 encoded jpeg with the rendered thumbnail\n    for image 'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing base64 encoded thumbnail\n    \"\"\"\n    jpeg_data = _render_thumbnail(\n        request=request, iid=iid, w=w, h=h, conn=conn, _defcb=_defcb, **kwargs\n    )\n    rv = \"data:image/jpeg;base64,%s\" % base64.b64encode(jpeg_data).decode(\"utf-8\")\n    return rv\n\n\n@login_required()\n@jsonp\ndef listImages_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    lists all Images in a Dataset, as json\n    TODO: cache\n\n    @param request:     http request\n    @param did:         Dataset ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of image json.\n    \"\"\"\n\n    dataset = conn.getObject(\"Dataset\", did)\n    if dataset is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\n        \"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix),\n        \"tiled\": request.GET.get(\"tiled\", False),\n    }\n    return [x.simpleMarshal(xtra=xtra) for x in dataset.listChildren()]\n\n\n@login_required()\n@jsonp\ndef listWellImages_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    lists all Images in a Well, as json\n    TODO: cache\n\n    @param request:     http request\n    @param did:         Well ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of image json.\n    \"\"\"\n\n    well = conn.getObject(\"Well\", did)\n    acq = getIntOrDefault(request, \"run\", None)\n    if well is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n\n    def marshal_pos(w):\n        d = {}\n        for x, p in ([\"x\", w.getPosX()], [\"y\", w.getPosY()]):\n            if p is not None:\n                d[x] = {\"value\": p.getValue(), \"unit\": str(p.getUnit())}\n        return d\n\n    wellImgs = []\n    for ws in well.listChildren():\n        # optionally filter by acquisition 'run'\n        if (\n            acq is not None\n            and ws.plateAcquisition is not None\n            and ws.plateAcquisition.id.val != acq\n        ):\n            continue\n        img = ws.getImage()\n        if img is not None:\n            m = img.simpleMarshal(xtra=xtra)\n            pos = marshal_pos(ws)\n            if len(pos.keys()) > 0:\n                m[\"position\"] = pos\n            wellImgs.append(m)\n    return wellImgs\n\n\n@login_required()\n@jsonp\ndef listDatasets_json(request, pid, conn=None, **kwargs):\n    \"\"\"\n    lists all Datasets in a Project, as json\n    TODO: cache\n\n    @param request:     http request\n    @param pid:         Project ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of dataset json.\n    \"\"\"\n\n    project = conn.getObject(\"Project\", pid)\n    if project is None:\n        return HttpJavascriptResponse(\"[]\")\n    return [x.simpleMarshal(xtra={\"childCount\": 0}) for x in project.listChildren()]\n\n\n@login_required()\n@jsonp\ndef datasetDetail_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    return json encoded details for a dataset\n    TODO: cache\n    \"\"\"\n    ds = conn.getObject(\"Dataset\", did)\n    return ds.simpleMarshal()\n\n\n@login_required()\n@jsonp\ndef listProjects_json(request, conn=None, **kwargs):\n    \"\"\"\n    lists all Projects, as json\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of project json.\n    \"\"\"\n\n    rv = []\n    for pr in conn.listProjects():\n        rv.append({\"id\": pr.id, \"name\": pr.name, \"description\": pr.description or \"\"})\n    return rv\n\n\n@login_required()\n@jsonp\ndef projectDetail_json(request, pid, conn=None, **kwargs):\n    \"\"\"\n    grab details from one specific project\n    TODO: cache\n\n    @param request:     http request\n    @param pid:         Project ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            project details as dict.\n    \"\"\"\n\n    pr = conn.getObject(\"Project\", pid)\n    rv = pr.simpleMarshal()\n    return rv\n\n\n@jsonp\ndef open_with_options(request, **kwargs):\n    \"\"\"\n    Make the settings.OPEN_WITH available via JSON\n    \"\"\"\n    open_with = settings.OPEN_WITH\n    viewers = []\n    for ow in open_with:\n        if len(ow) < 2:\n            continue\n        viewer = {}\n        viewer[\"id\"] = ow[0]\n        try:\n            viewer[\"url\"] = reverse(ow[1])\n        except NoReverseMatch:\n            viewer[\"url\"] = ow[1]\n        # try non-essential parameters...\n        # NB: Need supported_objects OR script_url to enable plugin\n        try:\n            if len(ow) > 2:\n                if \"supported_objects\" in ow[2]:\n                    viewer[\"supported_objects\"] = ow[2][\"supported_objects\"]\n                if \"target\" in ow[2]:\n                    viewer[\"target\"] = ow[2][\"target\"]\n                if \"script_url\" in ow[2]:\n                    # If we have an absolute url, use it...\n                    if ow[2][\"script_url\"].startswith(\"http\"):\n                        viewer[\"script_url\"] = ow[2][\"script_url\"]\n                    else:\n                        # ...otherwise, assume within static\n                        viewer[\"script_url\"] = static(ow[2][\"script_url\"])\n                if \"label\" in ow[2]:\n                    viewer[\"label\"] = ow[2][\"label\"]\n        except Exception:\n            # ignore invalid params\n            pass\n        viewers.append(viewer)\n    return {\"open_with_options\": viewers}\n\n\ndef searchOptFromRequest(request):\n    \"\"\"\n    Returns a dict of options for searching, based on\n    parameters in the http request\n    Request keys include:\n        - ctx: (http request) 'imgs' to search only images\n        - text: (http request) the actual text phrase\n        - start: starting index (0 based) for result\n        - limit: nr of results to retuen (0 == unlimited)\n        - author:\n        - grabData:\n        - parents:\n\n    @param request:     http request\n    @return:            Dict of options\n    \"\"\"\n\n    try:\n        r = request.GET\n        opts = {\n            \"search\": unicode(r.get(\"text\", \"\")).encode(\"utf8\"),\n            \"ctx\": r.get(\"ctx\", \"\"),\n            \"grabData\": not not r.get(\"grabData\", False),\n            \"parents\": not not bool(r.get(\"parents\", False)),\n            \"start\": int(r.get(\"start\", 0)),\n            \"limit\": int(r.get(\"limit\", 0)),\n            \"key\": r.get(\"key\", None),\n        }\n        author = r.get(\"author\", \"\")\n        if author:\n            opts[\"search\"] += \" author:\" + author\n        return opts\n    except Exception:\n        logger.error(traceback.format_exc())\n        return {}\n\n\n@TimeIt(logging.INFO)\n@login_required()\n@jsonp\ndef search_json(request, conn=None, **kwargs):\n    \"\"\"\n    Search for objects in blitz.\n    Returns json encoded list of marshalled objects found by the search query\n    Request keys include:\n        - text: The text to search for\n        - ctx: (http request) 'imgs' to search only images\n        - text: (http request) the actual text phrase\n        - start: starting index (0 based) for result\n        - limit: nr of results to retuen (0 == unlimited)\n        - author:\n        - grabData:\n        - parents:\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json search results\n    TODO: cache\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    opts = searchOptFromRequest(request)\n    rv = []\n    logger.debug(\"searchObjects(%s)\" % (opts[\"search\"]))\n    # search returns blitz_connector wrapper objects\n\n    def urlprefix(iid):\n        return reverse(\"webgateway_render_thumbnail\", args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n    try:\n        if opts[\"ctx\"] == \"imgs\":\n            sr = conn.searchObjects([\"image\"], opts[\"search\"], conn.SERVICE_OPTS)\n        else:\n            # searches P/D/I\n            sr = conn.searchObjects(None, opts[\"search\"], conn.SERVICE_OPTS)\n    except ApiUsageException:\n        return HttpJavascriptResponseServerError('\"parse exception\"')\n\n    def marshal():\n        rv = []\n        if opts[\"grabData\"] and opts[\"ctx\"] == \"imgs\":\n            bottom = min(opts[\"start\"], len(sr) - 1)\n            if opts[\"limit\"] == 0:\n                top = len(sr)\n            else:\n                top = min(len(sr), bottom + opts[\"limit\"])\n            for i in range(bottom, top):\n                e = sr[i]\n                # for e in sr:\n                try:\n                    rv.append(\n                        imageData_json(\n                            request,\n                            server_id,\n                            iid=e.id,\n                            key=opts[\"key\"],\n                            conn=conn,\n                            _internal=True,\n                        )\n                    )\n                except AttributeError as x:\n                    logger.debug(\n                        \"(iid %i) ignoring Attribute Error: %s\" % (e.id, str(x))\n                    )\n                    pass\n                except omero.ServerError as x:\n                    logger.debug(\"(iid %i) ignoring Server Error: %s\" % (e.id, str(x)))\n            return rv\n        else:\n            return [x.simpleMarshal(xtra=xtra, parents=opts[\"parents\"]) for x in sr]\n\n    rv = timeit(marshal)()\n    logger.debug(rv)\n    return rv\n\n\n@require_POST\n@login_required()\ndef save_image_rdef_json(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Requests that the rendering defs passed in the request be set as the\n    default for this image.\n    Rendering defs in request listed at L{getImgDetailsFromReq}\n    TODO: jsonp\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            http response 'true' or 'false'\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(\n        request, iid, server_id=server_id, conn=conn, saveDefs=True\n    )\n    if pi is None:\n        json_data = \"false\"\n    else:\n        user_id = pi[0]._conn.getEventContext().userId\n        webgateway_cache.invalidateObject(server_id, user_id, pi[0])\n        pi[0].getThumbnail()\n        json_data = \"true\"\n    if request.GET.get(\"callback\", None):\n        json_data = \"%s(%s)\" % (request.GET[\"callback\"], json_data)\n    return HttpJavascriptResponse(json_data)\n\n\n@login_required()\n@jsonp\ndef listLuts_json(request, conn=None, **kwargs):\n    \"\"\"\n    Lists lookup tables 'LUTs' availble for rendering\n\n    This list is dynamic and will change if users add LUTs to their server.\n    We include 'png_index' which is the index of each LUT within the\n    static/webgateway/img/luts_10.png or -1 if LUT is not found.\n    \"\"\"\n    scriptService = conn.getScriptService()\n    luts = scriptService.getScriptsByMimetype(\"text/x-lut\")\n    rv = []\n    for lut in luts:\n        lutsrc = lut.path.val + lut.name.val\n        png_index = LUTS_IN_PNG.index(lutsrc) if lutsrc in LUTS_IN_PNG else -1\n        rv.append(\n            {\n                \"id\": lut.id.val,\n                \"path\": lut.path.val,\n                \"name\": lut.name.val,\n                \"size\": unwrap(lut.size),\n                \"png_index\": png_index,\n            }\n        )\n    rv.sort(key=lambda x: x[\"name\"].lower())\n    return {\"luts\": rv, \"png_luts\": LUTS_IN_PNG}\n\n\n@login_required()\ndef list_compatible_imgs_json(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Lists the images on the same project that would be viable targets for\n    copying rendering settings.\n    TODO: change method to:\n    list_compatible_imgs_json (request, iid, server_id=None, conn=None,\n    **kwargs):\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json list of image IDs\n    \"\"\"\n\n    json_data = \"false\"\n    r = request.GET\n    if conn is None:\n        img = None\n    else:\n        img = conn.getObject(\"Image\", iid)\n\n    if img is not None:\n        # List all images in project\n        imgs = []\n        for ds in img.getProject().listChildren():\n            imgs.extend(ds.listChildren())\n        # Filter the ones that would pass the applySettingsToImages call\n        img_ptype = img.getPrimaryPixels().getPixelsType().getValue()\n        img_ccount = img.getSizeC()\n        img_ew = [x.getLabel() for x in img.getChannels()]\n        img_ew.sort()\n\n        def compat(i):\n            if long(i.getId()) == long(iid):\n                return False\n            pp = i.getPrimaryPixels()\n            if (\n                pp is None\n                or i.getPrimaryPixels().getPixelsType().getValue() != img_ptype\n                or i.getSizeC() != img_ccount\n            ):\n                return False\n            ew = [x.getLabel() for x in i.getChannels()]\n            ew.sort()\n            if ew != img_ew:\n                return False\n            return True\n\n        imgs = filter(compat, imgs)\n        json_data = json.dumps([x.getId() for x in imgs])\n\n    if r.get(\"callback\", None):\n        json_data = \"%s(%s)\" % (r[\"callback\"], json_data)\n    return HttpJavascriptResponse(json_data)\n\n\n@require_POST\n@login_required()\n@jsonp\ndef reset_rdef_json(request, toOwners=False, conn=None, **kwargs):\n    \"\"\"\n    Simply takes request 'to_type' and 'toids' and\n    delegates to Rendering Settings service to reset\n    settings accordings.\n\n    @param toOwners:    if True, default to the owner's settings.\n    \"\"\"\n\n    r = request.POST\n    toids = r.getlist(\"toids\")\n    to_type = str(r.get(\"to_type\", \"image\"))\n    to_type = to_type.title()\n    if to_type == \"Acquisition\":\n        to_type = \"PlateAcquisition\"\n\n    if len(toids) == 0:\n        raise Http404(\n            \"Need to specify objects in request, E.g.\"\n            \" ?totype=dataset&toids=1&toids=2\"\n        )\n\n    toids = [int(id) for id in toids]\n\n    rss = conn.getRenderingSettingsService()\n\n    # get the first object and set the group to match\n    conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n    o = conn.getObject(to_type, toids[0])\n    if o is not None:\n        gid = o.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    if toOwners:\n        rv = rss.resetDefaultsByOwnerInSet(to_type, toids, conn.SERVICE_OPTS)\n    else:\n        rv = rss.resetDefaultsInSet(to_type, toids, conn.SERVICE_OPTS)\n\n    return rv\n\n\n@login_required()\n@jsonp\ndef copy_image_rdef_json(request, conn=None, **kwargs):\n    \"\"\"\n    If 'fromid' is in request, copy the image ID to session,\n    for applying later using this same method.\n    If list of 'toids' is in request, paste the image ID from the session\n    to the specified images.\n    If 'fromid' AND 'toids' are in the reqest, we simply\n    apply settings and don't save anything to request.\n    If 'to_type' is in request, this can be 'dataset', 'plate', 'acquisition'\n    Returns json dict of Boolean:[Image-IDs] for images that have successfully\n    had the rendering settings applied, or not.\n\n    @param request:     http request\n    @param server_id:\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json dict of Boolean:[Image-IDs]\n    \"\"\"\n\n    server_id = request.session[\"connector\"].server_id\n    json_data = False\n\n    fromid = request.GET.get(\"fromid\", None)\n    toids = request.POST.getlist(\"toids\")\n    to_type = str(request.POST.get(\"to_type\", \"image\"))\n    rdef = None\n\n    if to_type not in (\"dataset\", \"plate\", \"acquisition\"):\n        to_type = \"Image\"  # default is image\n\n    # Only 'fromid' is given, simply save to session\n    if fromid is not None and len(toids) == 0:\n        request.session.modified = True\n        request.session[\"fromid\"] = fromid\n        if request.session.get(\"rdef\") is not None:\n            del request.session[\"rdef\"]\n        return True\n\n    # If we've got an rdef encoded in request instead of ImageId...\n    r = request.GET or request.POST\n    if r.get(\"c\") is not None:\n        # make a map of settings we need\n        rdef = {\"c\": str(r.get(\"c\"))}  # channels\n        if r.get(\"maps\"):\n            try:\n                rdef[\"maps\"] = json.loads(r.get(\"maps\"))\n            except Exception:\n                pass\n        if r.get(\"pixel_range\"):\n            rdef[\"pixel_range\"] = str(r.get(\"pixel_range\"))\n        if r.get(\"m\"):\n            rdef[\"m\"] = str(r.get(\"m\"))  # model (grey)\n        if r.get(\"z\"):\n            rdef[\"z\"] = str(r.get(\"z\"))  # z & t pos\n        if r.get(\"t\"):\n            rdef[\"t\"] = str(r.get(\"t\"))\n        imageId = request.GET.get(\"imageId\", request.POST.get(\"imageId\", None))\n        if imageId:\n            rdef[\"imageId\"] = int(imageId)\n\n        if request.method == \"GET\":\n            request.session.modified = True\n            request.session[\"rdef\"] = rdef\n            # remove any previous rdef we may have via 'fromId'\n            if request.session.get(\"fromid\") is not None:\n                del request.session[\"fromid\"]\n            return True\n\n    # Check session for 'fromid'\n    if fromid is None:\n        fromid = request.session.get(\"fromid\", None)\n\n    # maybe these pair of methods should be on ImageWrapper??\n    def getRenderingSettings(image):\n        rv = {}\n        chs = []\n        maps = []\n        for i, ch in enumerate(image.getChannels()):\n            act = \"\" if ch.isActive() else \"-\"\n            start = ch.getWindowStart()\n            end = ch.getWindowEnd()\n            color = ch.getLut()\n            maps.append({\"inverted\": {\"enabled\": ch.isInverted()}})\n            if not color or len(color) == 0:\n                color = ch.getColor().getHtml()\n            chs.append(\"%s%s|%s:%s$%s\" % (act, i + 1, start, end, color))\n        rv[\"c\"] = \",\".join(chs)\n        rv[\"maps\"] = maps\n        rv[\"m\"] = \"g\" if image.isGreyscaleRenderingModel() else \"c\"\n        rv[\"z\"] = image.getDefaultZ() + 1\n        rv[\"t\"] = image.getDefaultT() + 1\n        return rv\n\n    def applyRenderingSettings(image, rdef):\n        invert_flags = _get_maps_enabled(rdef, \"inverted\", image.getSizeC())\n        channels, windows, colors = _split_channel_info(rdef[\"c\"])\n        # also prepares _re\n        image.setActiveChannels(channels, windows, colors, invert_flags)\n        if rdef[\"m\"] == \"g\":\n            image.setGreyscaleRenderingModel()\n        else:\n            image.setColorRenderingModel()\n        if \"z\" in rdef:\n            image._re.setDefaultZ(long(rdef[\"z\"]) - 1)\n        if \"t\" in rdef:\n            image._re.setDefaultT(long(rdef[\"t\"]) - 1)\n        image.saveDefaults()\n\n    # Use rdef from above or previously saved one...\n    if rdef is None:\n        rdef = request.session.get(\"rdef\")\n    if request.method == \"POST\":\n        originalSettings = None\n        fromImage = None\n        if fromid is None:\n            # if we have rdef, save to source image, then use that image as\n            # 'fromId', then revert.\n            if rdef is not None and len(toids) > 0:\n                fromImage = conn.getObject(\"Image\", rdef[\"imageId\"])\n                if fromImage is not None:\n                    # copy orig settings\n                    originalSettings = getRenderingSettings(fromImage)\n                    applyRenderingSettings(fromImage, rdef)\n                    fromid = fromImage.getId()\n\n        # If we have both, apply settings...\n        try:\n            fromid = long(fromid)\n            toids = [long(x) for x in toids]\n        except TypeError:\n            fromid = None\n        except ValueError:\n            fromid = None\n        if fromid is not None and len(toids) > 0:\n            fromimg = conn.getObject(\"Image\", fromid)\n            userid = fromimg.getOwner().getId()\n            json_data = conn.applySettingsToSet(fromid, to_type, toids)\n            if json_data and True in json_data:\n                for iid in json_data[True]:\n                    img = conn.getObject(\"Image\", iid)\n                    img is not None and webgateway_cache.invalidateObject(\n                        server_id, userid, img\n                    )\n\n        # finally - if we temporarily saved rdef to original image, revert\n        # if we're sure that from-image is not in the target set (Dataset etc)\n        if to_type == \"Image\" and fromid not in toids:\n            if originalSettings is not None and fromImage is not None:\n                applyRenderingSettings(fromImage, originalSettings)\n        return json_data\n\n    else:\n        return HttpResponseNotAllowed([\"POST\"])\n\n\n@login_required()\n@jsonp\ndef get_image_rdef_json(request, conn=None, **kwargs):\n    \"\"\"\n    Gets any 'rdef' dict from the request.session and\n    returns it as json\n    \"\"\"\n    rdef = request.session.get(\"rdef\")\n    image = None\n    if rdef is None:\n        fromid = request.session.get(\"fromid\", None)\n        if fromid is not None:\n            # We only have an Image to copy rdefs from\n            image = conn.getObject(\"Image\", fromid)\n        if image is not None:\n            rv = imageMarshal(image, request=request)\n            chs = []\n            maps = []\n            for i, ch in enumerate(rv[\"channels\"]):\n                act = ch[\"active\"] and str(i + 1) or \"-%s\" % (i + 1)\n                color = ch.get(\"lut\") or ch[\"color\"]\n                chs.append(\n                    \"%s|%s:%s$%s\"\n                    % (act, ch[\"window\"][\"start\"], ch[\"window\"][\"end\"], color)\n                )\n                maps.append(\n                    {\n                        \"inverted\": {\"enabled\": ch[\"inverted\"]},\n                        \"quantization\": {\n                            \"coefficient\": ch[\"coefficient\"],\n                            \"family\": ch[\"family\"],\n                        },\n                    }\n                )\n            rdef = {\n                \"c\": (\",\".join(chs)),\n                \"m\": rv[\"rdefs\"][\"model\"],\n                \"pixel_range\": \"%s:%s\" % (rv[\"pixel_range\"][0], rv[\"pixel_range\"][1]),\n                \"maps\": maps,\n            }\n\n    return {\"rdef\": rdef}\n\n\n@login_required()\ndef full_viewer(request, iid, conn=None, **kwargs):\n    \"\"\"\n    This view is responsible for showing the omero_image template\n    Image rendering options in request are used in the display page. See\n    L{getImgDetailsFromReq}.\n\n    @param request:     http request.\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    Can be used to specify the html 'template' for\n                        rendering\n    @return:            html page of image and metadata\n    \"\"\"\n\n    server_id = request.session[\"connector\"].server_id\n    server_name = Server.get(server_id).server\n\n    rid = getImgDetailsFromReq(request)\n    server_settings = request.session.get(\"server_settings\", {}).get(\"viewer\", {})\n    interpolate = server_settings.get(\"interpolate_pixels\", True)\n    roiLimit = server_settings.get(\"roi_limit\", 2000)\n\n    try:\n        image = conn.getObject(\"Image\", iid)\n        if image is None:\n            logger.debug(\"(a)Image %s not found...\" % (str(iid)))\n            raise Http404\n\n        opengraph = None\n        twitter = None\n        image_preview = None\n        page_url = None\n\n        if hasattr(settings, \"SHARING_OPENGRAPH\"):\n            opengraph = settings.SHARING_OPENGRAPH.get(server_name)\n            logger.debug(\"Open Graph enabled: %s\", opengraph)\n\n        if hasattr(settings, \"SHARING_TWITTER\"):\n            twitter = settings.SHARING_TWITTER.get(server_name)\n            logger.debug(\"Twitter enabled: %s\", twitter)\n\n        if opengraph or twitter:\n            urlargs = {\"iid\": iid}\n            prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n            image_preview = request.build_absolute_uri(reverse(prefix, kwargs=urlargs))\n            page_url = request.build_absolute_uri(\n                reverse(\"webgateway_full_viewer\", kwargs=urlargs)\n            )\n\n        d = {\n            \"blitzcon\": conn,\n            \"image\": image,\n            \"opts\": rid,\n            \"interpolate\": interpolate,\n            \"build_year\": build_year,\n            \"roiLimit\": roiLimit,\n            \"roiCount\": image.getROICount(),\n            \"viewport_server\": kwargs.get(\n                # remove any trailing slash\n                \"viewport_server\",\n                reverse(\"webgateway\"),\n            ).rstrip(\"/\"),\n            \"opengraph\": opengraph,\n            \"twitter\": twitter,\n            \"image_preview\": image_preview,\n            \"page_url\": page_url,\n            \"object\": \"image:%i\" % int(iid),\n        }\n\n        template = kwargs.get(\"template\", \"webgateway/viewport/omero_image.html\")\n        rsp = render(request, template, d)\n    except omero.SecurityViolation:\n        logger.warn(\"SecurityViolation in Image:%s\", iid)\n        logger.warn(traceback.format_exc())\n        raise Http404\n    return HttpResponse(rsp)\n\n\n@login_required()\ndef download_as(request, iid=None, conn=None, **kwargs):\n    \"\"\"\n    Downloads the image as a single jpeg/png/tiff or as a zip (if more than\n    one image)\n    \"\"\"\n    format = request.GET.get(\"format\", \"png\")\n    if format not in (\"jpeg\", \"png\", \"tif\"):\n        format = \"png\"\n\n    imgIds = []\n    wellIds = []\n    if iid is None:\n        imgIds = request.GET.getlist(\"image\")\n        if len(imgIds) == 0:\n            wellIds = request.GET.getlist(\"well\")\n            if len(wellIds) == 0:\n                return HttpResponseServerError(\n                    \"No images or wells specified in request.\"\n                    \" Use ?image=123 or ?well=123\"\n                )\n    else:\n        imgIds = [iid]\n\n    images = []\n    if imgIds:\n        images = list(conn.getObjects(\"Image\", imgIds))\n    elif wellIds:\n        try:\n            index = int(request.GET.get(\"index\", 0))\n        except ValueError:\n            index = 0\n        for w in conn.getObjects(\"Well\", wellIds):\n            images.append(w.getWellSample(index).image())\n\n    if len(images) == 0:\n        msg = \"Cannot download as %s. Images (ids: %s) not found.\" % (format, imgIds)\n        logger.debug(msg)\n        return HttpResponseServerError(msg)\n\n    if len(images) == 1:\n        jpeg_data = images[0].renderJpeg()\n        if jpeg_data is None:\n            raise Http404\n        rsp = HttpResponse(jpeg_data, mimetype=\"image/jpeg\")\n        rsp[\"Content-Length\"] = len(jpeg_data)\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s.jpg\" % (\n            images[0].getName().replace(\" \", \"_\")\n        )\n    else:\n        temp = tempfile.NamedTemporaryFile(suffix=\".download_as\")\n\n        def makeImageName(originalName, extension, folder_name):\n            name = os.path.basename(originalName)\n            imgName = \"%s.%s\" % (name, extension)\n            imgName = os.path.join(folder_name, imgName)\n            # check we don't overwrite existing file\n            i = 1\n            name = imgName[: -(len(extension) + 1)]\n            while os.path.exists(imgName):\n                imgName = \"%s_(%d).%s\" % (name, i, extension)\n                i += 1\n            return imgName\n\n        try:\n            temp_zip_dir = tempfile.mkdtemp()\n            logger.debug(\"download_as dir: %s\" % temp_zip_dir)\n            try:\n                for img in images:\n                    z = t = None\n                    try:\n                        pilImg = img.renderImage(z, t)\n                        imgPathName = makeImageName(img.getName(), format, temp_zip_dir)\n                        pilImg.save(imgPathName)\n                    finally:\n                        # Close RenderingEngine\n                        img._re.close()\n                # create zip\n                zip_file = zipfile.ZipFile(temp, \"w\", zipfile.ZIP_DEFLATED)\n                try:\n                    a_files = os.path.join(temp_zip_dir, \"*\")\n                    for name in glob.glob(a_files):\n                        zip_file.write(name, os.path.basename(name))\n                finally:\n                    zip_file.close()\n            finally:\n                shutil.rmtree(temp_zip_dir, ignore_errors=True)\n\n            zipName = request.GET.get(\"zipname\", \"Download_as_%s\" % format)\n            zipName = zipName.replace(\" \", \"_\")\n            if not zipName.endswith(\".zip\"):\n                zipName = \"%s.zip\" % zipName\n\n            # return the zip or single file\n            rsp = StreamingHttpResponse(FileWrapper(temp))\n            rsp[\"Content-Length\"] = temp.tell()\n            rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % zipName\n            temp.seek(0)\n\n        except Exception:\n            temp.close()\n            stack = traceback.format_exc()\n            logger.error(stack)\n            return HttpResponseServerError(\"Cannot download file (id:%s)\" % iid)\n\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\ndef archived_files(request, iid=None, conn=None, **kwargs):\n    \"\"\"\n    Downloads the archived file(s) as a single file or as a zip (if more than\n    one file)\n    \"\"\"\n\n    imgIds = []\n    wellIds = []\n    imgIds = request.GET.getlist(\"image\")\n    wellIds = request.GET.getlist(\"well\")\n    if iid is None:\n        if len(imgIds) == 0 and len(wellIds) == 0:\n            return HttpResponseServerError(\n                \"No images or wells specified in request.\"\n                \" Use ?image=123 or ?well=123\"\n            )\n    else:\n        imgIds = [iid]\n\n    images = list()\n    wells = list()\n    if imgIds:\n        images = list(conn.getObjects(\"Image\", imgIds))\n    elif wellIds:\n        try:\n            index = int(request.GET.get(\"index\", 0))\n        except ValueError:\n            index = 0\n        wells = conn.getObjects(\"Well\", wellIds)\n        for w in wells:\n            images.append(w.getWellSample(index).image())\n    if len(images) == 0:\n        message = (\n            \"Cannot download archived file because Images not \"\n            \"found (ids: %s)\" % (imgIds)\n        )\n        logger.debug(message)\n        return HttpResponseServerError(message)\n\n    # Test permissions on images and weels\n    for ob in wells:\n        if hasattr(ob, \"canDownload\"):\n            if not ob.canDownload():\n                return HttpResponseNotFound()\n\n    for ob in images:\n        well = None\n        try:\n            well = ob.getParent().getParent()\n        except Exception:\n            if hasattr(ob, \"canDownload\"):\n                if not ob.canDownload():\n                    return HttpResponseNotFound()\n        else:\n            if well and isinstance(well, omero.gateway.WellWrapper):\n                if hasattr(well, \"canDownload\"):\n                    if not well.canDownload():\n                        return HttpResponseNotFound()\n\n    # make list of all files, removing duplicates\n    fileMap = {}\n    for image in images:\n        for f in image.getImportedImageFiles():\n            fileMap[f.getId()] = f\n    files = list(fileMap.values())\n\n    if len(files) == 0:\n        message = (\n            \"Tried downloading archived files from image with no\" \" files archived.\"\n        )\n        logger.debug(message)\n        return HttpResponseServerError(message)\n\n    if len(files) == 1:\n        orig_file = files[0]\n        rsp = ConnCleaningHttpResponse(\n            orig_file.getFileInChunks(buf=settings.CHUNK_SIZE)\n        )\n        rsp.conn = conn\n        rsp[\"Content-Length\"] = orig_file.getSize()\n        # ',' in name causes duplicate headers\n        fname = orig_file.getName().replace(\" \", \"_\").replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (fname)\n    else:\n        total_size = sum(f.size for f in files)\n        if total_size > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n            message = (\n                \"Total size of files %d is larger than %d. \"\n                \"Try requesting fewer files.\"\n                % (total_size, settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE)\n            )\n            logger.warn(message)\n            return HttpResponseForbidden(message)\n\n        temp = tempfile.NamedTemporaryFile(suffix=\".archive\")\n        zipName = request.GET.get(\"zipname\", image.getName())\n\n        try:\n            zipName = zip_archived_files(images, temp, zipName, buf=settings.CHUNK_SIZE)\n\n            # return the zip or single file\n            archivedFile_data = FileWrapper(temp)\n            rsp = ConnCleaningHttpResponse(archivedFile_data)\n            rsp.conn = conn\n            rsp[\"Content-Length\"] = temp.tell()\n            rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % zipName\n            temp.seek(0)\n        except Exception:\n            temp.close()\n            message = \"Cannot download file (id:%s)\" % (iid)\n            logger.error(message, exc_info=True)\n            return HttpResponseServerError(message)\n\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    return rsp\n\n\n@login_required()\n@jsonp\ndef original_file_paths(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Get a list of path/name strings for original files associated with the\n    image\n    \"\"\"\n\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        raise Http404\n    paths = image.getImportedImageFilePaths()\n    return {\"repo\": paths[\"server_paths\"], \"client\": paths[\"client_paths\"]}\n\n\n@login_required()\n@jsonp\ndef get_shape_json(request, roiId, shapeId, conn=None, **kwargs):\n    roiId = int(roiId)\n    shapeId = int(shapeId)\n    shape = conn.getQueryService().findByQuery(\n        \"select shape from Roi as roi \"\n        \"join roi.shapes as shape \"\n        \"where roi.id = %d and shape.id = %d\" % (roiId, shapeId),\n        None,\n    )\n    logger.debug(\"Shape: %r\" % shape)\n    if shape is None:\n        logger.debug(\"No such shape: %r\" % shapeId)\n        raise Http404\n    return JsonResponse(shapeMarshal(shape))\n\n\n@login_required()\n@jsonp\ndef get_rois_json(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Returns json data of the ROIs in the specified image.\n    \"\"\"\n    rois = []\n    roiService = conn.getRoiService()\n    # rois = webfigure_utils.getRoiShapes(roiService, long(imageId))  # gets a\n    # whole json list of ROIs\n    result = roiService.findByImage(long(imageId), None, conn.SERVICE_OPTS)\n\n    for r in result.rois:\n        roi = {}\n        roi[\"id\"] = r.getId().getValue()\n        # go through all the shapes of the ROI\n        shapes = []\n        for s in r.copyShapes():\n            if s is None:  # seems possible in some situations\n                continue\n            shapes.append(shapeMarshal(s))\n        # sort shapes by Z, then T.\n        shapes.sort(key=lambda x: \"%03d%03d\" % (x.get(\"theZ\", -1), x.get(\"theT\", -1)))\n        roi[\"shapes\"] = shapes\n        rois.append(roi)\n\n    # sort by ID - same as in measurement tool.\n    rois.sort(key=lambda x: x[\"id\"])\n\n    return rois\n\n\n@login_required()\ndef histogram_json(request, iid, theC, conn=None, **kwargs):\n    \"\"\"\n    Returns a histogram for a single channel as a list of\n    256 values as json\n    \"\"\"\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        raise Http404\n    maxW, maxH = conn.getMaxPlaneSize()\n    sizeX = image.getSizeX()\n    sizeY = image.getSizeY()\n    if (sizeX * sizeY) > (maxW * maxH):\n        msg = \"Histogram not supported for 'big' images (over %s * %s pixels)\" % (\n            maxW,\n            maxH,\n        )\n        return JsonResponse({\"error\": msg})\n\n    theZ = int(request.GET.get(\"theZ\", 0))\n    theT = int(request.GET.get(\"theT\", 0))\n    theC = int(theC)\n    binCount = int(request.GET.get(\"bins\", 256))\n\n    # TODO: handle projection when supported by OMERO\n    data = image.getHistogram([theC], binCount, theZ=theZ, theT=theT)\n    histogram = data[theC]\n\n    return JsonResponse({\"data\": histogram})\n\n\n@login_required(isAdmin=True)\n@jsonp\ndef su(request, user, conn=None, **kwargs):\n    \"\"\"\n    If current user is admin, switch the session to a new connection owned by\n    'user' (puts the new session ID in the request.session)\n    Return False if not possible\n\n    @param request:     http request.\n    @param user:        Username of new connection owner\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    Can be used to specify the html 'template' for\n                        rendering\n    @return:            Boolean\n    \"\"\"\n    if request.method == \"POST\":\n        conn.setGroupNameForSession(\"system\")\n        connector = request.session[\"connector\"]\n        connector = Connector(connector.server_id, connector.is_secure)\n        session = conn.getSessionService().getSession(conn._sessionUuid)\n        ttl = session.getTimeToIdle().val\n        connector.omero_session_key = conn.suConn(user, ttl=ttl)._sessionUuid\n        request.session[\"connector\"] = connector\n        conn.revertGroupForSession()\n        conn.close()\n        return True\n    else:\n        context = {\n            \"url\": reverse(\"webgateway_su\", args=[user]),\n            \"submit\": \"Do you want to su to %s\" % user,\n        }\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\ndef _annotations(request, objtype, objid, conn=None, **kwargs):\n    warnings.warn(\"Deprecated. Use _bulk_file_annotations()\", DeprecationWarning)\n    return _bulk_file_annotations(request, objtype, objid, conn, **kwargs)\n\n\ndef _bulk_file_annotations(request, objtype, objid, conn=None, **kwargs):\n    \"\"\"\n    Retrieve Bulk FileAnnotations for object specified by object type and\n    identifier optionally traversing object model graph.\n    Returns dictionary containing annotations in NSBULKANNOTATIONS namespace\n    if successful, otherwise returns error information.\n    If the graph has multiple parents, we return annotations from all parents.\n\n    Example:  /annotations/Plate/1/\n              retrieves annotations for plate with identifier 1\n    Example:  /annotations/Plate.wells/1/\n              retrieves annotations for plate that contains well with\n              identifier 1\n    Example:  /annotations/Screen.plateLinks.child.wells/22/\n              retrieves annotations for screen that contains plate with\n              well with identifier 22\n\n    @param request:     http request.\n    @param objtype:     Type of target object, or type of target object\n                        followed by a slash-separated list of properties to\n                        resolve\n    @param objid:       Identifier of target object, or identifier of object\n                        reached by resolving given properties\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'error' with an error message or\n                        with key 'data' containing an array of dictionaries\n                        with keys 'id' and 'file' of the retrieved annotations\n    \"\"\"\n    q = conn.getQueryService()\n    # If more than one objtype is specified, use all in query to\n    # traverse object model graph\n    # Example: /annotations/Plate/wells/1/\n    #          retrieves annotations from Plate that contains Well 1\n    objtype = objtype.split(\".\")\n\n    params = omero.sys.ParametersI()\n    params.addId(objid)\n    params.addString(\"ns\", NSBULKANNOTATIONS)\n    params.addString(\"mt\", \"OMERO.tables\")\n\n    query = \"select obj0 from %s obj0\\n\" % objtype[0]\n    for i, t in enumerate(objtype[1:]):\n        query += \"join fetch obj%d.%s obj%d\\n\" % (i, t, i + 1)\n    query += \"\"\"\n        left outer join fetch obj0.annotationLinks links\n        left outer join fetch links.child as f\n        left outer join fetch links.parent\n        left outer join fetch f.file\n        join fetch links.details.owner\n        join fetch links.details.creationEvent\n        where obj%d.id=:id and\n        (f.ns=:ns or f.file.mimetype=:mt)\"\"\" % (\n        len(objtype) - 1\n    )\n\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    try:\n        objs = q.findAllByQuery(query, params, ctx)\n    except omero.QueryException:\n        return dict(error=\"%s cannot be queried\" % objtype, query=query)\n\n    data = []\n    # Process all annotations from all objects...\n    links = [link for obj in objs for link in obj.copyAnnotationLinks()]\n    for link in links:\n        annotation = link.child\n        if not isinstance(annotation, omero.model.FileAnnotation):\n            continue\n        owner = annotation.details.owner\n        ownerName = \"%s %s\" % (unwrap(owner.firstName), unwrap(owner.lastName))\n        addedBy = link.details.owner\n        addedByName = \"%s %s\" % (unwrap(addedBy.firstName), unwrap(addedBy.lastName))\n        data.append(\n            dict(\n                id=annotation.id.val,\n                file=annotation.file.id.val,\n                parentType=objtype[0],\n                parentId=link.parent.id.val,\n                owner=ownerName,\n                addedBy=addedByName,\n                addedOn=unwrap(link.details.creationEvent._time),\n            )\n        )\n    return dict(data=data)\n\n\nannotations = login_required()(jsonp(_bulk_file_annotations))\n\n\ndef _table_query(request, fileid, conn=None, query=None, lazy=False, **kwargs):\n    \"\"\"\n    Query a table specified by fileid\n    Returns a dictionary with query result if successful, error information\n    otherwise\n\n    @param request:     http request; querystring must contain key 'query'\n                        with query to be executed, or '*' to retrieve all rows.\n                        If query is in the format word-number, e.g. \"Well-7\",\n                        if will be run as (word==number), e.g. \"(Well==7)\".\n                        This is supported to allow more readable query strings.\n    @param fileid:      Numeric identifier of file containing the table\n    @param query:       The table query. If None, use request.GET.get('query')\n                        E.g. '*' to return all rows.\n                        If in the form 'colname-1', query will be (colname==1)\n    @param lazy:        If True, instead of returning a 'rows' list,\n                        'lazy_rows' will be a generator.\n                        Each gen.next() will return a list of row data\n                        AND 'table' returned MUST be closed.\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    offset, limit\n    @return:            A dictionary with key 'error' with an error message\n                        or with key 'data' containing a dictionary with keys\n                        'columns' (an array of column names) and 'rows'\n                        (an array of rows, each an array of values)\n    \"\"\"\n    if query is None:\n        query = request.GET.get(\"query\")\n    if not query:\n        return dict(error=\"Must specify query parameter, use * to retrieve all\")\n    col_names = request.GET.getlist(\"col_names\")\n\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    r = conn.getSharedResources()\n    t = r.openTable(omero.model.OriginalFileI(fileid), ctx)\n    if not t:\n        return dict(error=\"Table %s not found\" % fileid)\n\n    try:\n        cols = t.getHeaders()\n        col_indices = range(len(cols))\n        if col_names:\n            enumerated_columns = (\n                [(i, j) for (i, j) in enumerate(cols) if j.name in col_names]\n                if col_names\n                else [(i, j) for (i, j) in enumerate(cols)]\n            )\n            cols = []\n            col_indices = []\n            for col_name in col_names:\n                for (i, j) in enumerated_columns:\n                    if col_name == j.name:\n                        col_indices.append(i)\n                        cols.append(j)\n                        break\n\n        rows = t.getNumberOfRows()\n\n        offset = kwargs.get(\"offset\", 0)\n        limit = kwargs.get(\"limit\", None)\n        if not offset:\n            offset = int(request.GET.get(\"offset\", 0))\n        if not limit:\n            limit = (\n                int(request.GET.get(\"limit\"))\n                if request.GET.get(\"limit\") is not None\n                else None\n            )\n        range_start = offset\n        range_size = kwargs.get(\"limit\", rows)\n        range_end = min(rows, range_start + range_size)\n\n        if query == \"*\":\n            hits = range(range_start, range_end)\n            totalCount = rows\n        else:\n            match = re.match(r\"^(\\w+)-(\\d+)\", query)\n            if match:\n                query = \"(%s==%s)\" % (match.group(1), match.group(2))\n            try:\n                logger.info(query)\n                hits = t.getWhereList(query, None, 0, rows, 1)\n                totalCount = len(hits)\n                # paginate the hits\n                hits = hits[range_start:range_end]\n            except Exception:\n                return dict(error=\"Error executing query: %s\" % query)\n\n        def row_generator(table, h):\n            # hits are all consecutive rows - can load them in batches\n            idx = 0\n            batch = 1000\n            while idx < len(h):\n                batch = min(batch, len(h) - idx)\n                res = table.slice(col_indices, h[idx : idx + batch])\n                idx += batch\n                # yield a list of rows\n                yield [\n                    [col.values[row] for col in res.columns]\n                    for row in range(0, len(res.rowNumbers))\n                ]\n\n        row_gen = row_generator(t, hits)\n\n        rsp_data = {\n            \"data\": {\n                \"column_types\": [col.__class__.__name__ for col in cols],\n                \"columns\": [col.name for col in cols],\n            },\n            \"meta\": {\n                \"rowCount\": rows,\n                \"totalCount\": totalCount,\n                \"limit\": limit,\n                \"offset\": offset,\n            },\n        }\n\n        if not lazy:\n            row_data = []\n            # Use the generator to add all rows in batches\n            for rows in list(row_gen):\n                row_data.extend(rows)\n            rsp_data[\"data\"][\"rows\"] = row_data\n        else:\n            rsp_data[\"data\"][\"lazy_rows\"] = row_gen\n            rsp_data[\"table\"] = t\n\n        return rsp_data\n    finally:\n        if not lazy:\n            t.close()\n\n\ntable_query = login_required()(jsonp(_table_query))\n\n\ndef _table_metadata(request, fileid, conn=None, query=None, lazy=False, **kwargs):\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    r = conn.getSharedResources()\n    t = r.openTable(omero.model.OriginalFileI(fileid), ctx)\n    if not t:\n        return dict(error=\"Table %s not found\" % fileid)\n\n    try:\n        cols = t.getHeaders()\n        rows = t.getNumberOfRows()\n\n        rsp_data = {\n            \"columns\": [\n                {\n                    \"name\": col.name,\n                    \"description\": col.description,\n                    \"type\": col.__class__.__name__,\n                }\n                for col in cols\n            ],\n            \"totalCount\": rows,\n        }\n        return rsp_data\n    finally:\n        if not lazy:\n            t.close()\n\n\ntable_metadata = login_required()(jsonp(_table_metadata))\n\n\n@login_required()\n@jsonp\ndef object_table_query(request, objtype, objid, conn=None, **kwargs):\n    \"\"\"\n    Query bulk annotations table attached to an object specified by\n    object type and identifier, optionally traversing object model graph.\n    Returns a dictionary with query result if successful, error information\n    otherwise\n\n    Example:  /table/Plate/1/query/?query=*\n              queries bulk annotations table for plate with identifier 1\n    Example:  /table/Plate.wells/1/query/?query=*\n              queries bulk annotations table for plate that contains well with\n              identifier 1\n    Example:  /table/Screen.plateLinks.child.wells/22/query/?query=Well-22\n              queries bulk annotations table for screen that contains plate\n              with well with identifier 22\n\n    @param request:     http request.\n    @param objtype:     Type of target object, or type of target object\n                        followed by a slash-separated list of properties to\n                        resolve\n    @param objid:       Identifier of target object, or identifier of object\n                        reached by resolving given properties\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'error' with an error message\n                        or with key 'data' containing a dictionary with keys\n                        'columns' (an array of column names) and 'rows'\n                        (an array of rows, each an array of values)\n    \"\"\"\n    a = _bulk_file_annotations(request, objtype, objid, conn, **kwargs)\n    if \"error\" in a:\n        return a\n\n    if len(a[\"data\"]) < 1:\n        return dict(error=\"Could not retrieve bulk annotations table\")\n\n    # multiple bulk annotations files could be attached, use the most recent\n    # one (= the one with the highest identifier)\n    fileId = 0\n    ann = None\n    annList = sorted(a[\"data\"], key=lambda x: x[\"file\"], reverse=True)\n    tableData = None\n    for annotation in annList:\n        tableData = _table_query(request, annotation[\"file\"], conn, **kwargs)\n        if \"error\" not in tableData:\n            ann = annotation\n            fileId = annotation[\"file\"]\n            break\n    if ann is None:\n        return dict(\n            error=tableData.get(\n                \"error\", \"Could not retrieve matching bulk annotation table\"\n            )\n        )\n    tableData[\"id\"] = fileId\n    tableData[\"annId\"] = ann[\"id\"]\n    tableData[\"owner\"] = ann[\"owner\"]\n    tableData[\"addedBy\"] = ann[\"addedBy\"]\n    tableData[\"parentType\"] = ann[\"parentType\"]\n    tableData[\"parentId\"] = ann[\"parentId\"]\n    tableData[\"addedOn\"] = ann[\"addedOn\"]\n    return tableData\n\n\nclass LoginView(View):\n    \"\"\"Webgateway Login - Subclassed by WebclientLoginView.\"\"\"\n\n    form_class = LoginForm\n    useragent = \"OMERO.webapi\"\n\n    @method_decorator(sensitive_post_parameters(\"password\", \"csrfmiddlewaretoken\"))\n    def dispatch(self, *args, **kwargs):\n        \"\"\"Wrap other methods to add decorators.\"\"\"\n        return super(LoginView, self).dispatch(*args, **kwargs)\n\n    def get(self, request, api_version=None):\n        \"\"\"Simply return a message to say GET not supported.\"\"\"\n        return JsonResponse(\n            {\"message\": (\"POST only with username, password, \" \"server and csrftoken\")},\n            status=405,\n        )\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"Return a response for successful login.\"\"\"\n        c = conn.getEventContext()\n        ctx = {}\n        for a in [\n            \"sessionId\",\n            \"sessionUuid\",\n            \"userId\",\n            \"userName\",\n            \"groupId\",\n            \"groupName\",\n            \"isAdmin\",\n            \"eventId\",\n            \"eventType\",\n            \"memberOfGroups\",\n            \"leaderOfGroups\",\n        ]:\n            if hasattr(c, a):\n                ctx[a] = getattr(c, a)\n        return JsonResponse({\"success\": True, \"eventContext\": ctx})\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Return a response for failed login.\n\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if error is None and form is not None:\n            # If no error from server, maybe form wasn't valid\n            formErrors = []\n            for field in form:\n                for e in field.errors:\n                    formErrors.append(\"%s: %s\" % (field.label, e))\n            error = \" \".join(formErrors)\n        elif error is None:\n            # Just in case no error or invalid form is given\n            error = \"Login failed. Reason unknown.\"\n        return JsonResponse({\"message\": error}, status=403)\n\n    def post(self, request, api_version=None):\n        \"\"\"\n        Here we handle the main login logic, creating a connection to OMERO.\n\n        and store that on the request.session OR handling login failures\n        \"\"\"\n        error = None\n        form = self.form_class(request.POST.copy())\n        if form.is_valid():\n            username = form.cleaned_data[\"username\"]\n            password = form.cleaned_data[\"password\"]\n            server_id = form.cleaned_data[\"server\"]\n            is_secure = settings.SECURE\n\n            connector = Connector(server_id, is_secure)\n\n            # TODO: version check should be done on the low level, see #5983\n            compatible = True\n            if settings.CHECK_VERSION:\n                compatible = connector.check_version(self.useragent)\n            if (\n                server_id is not None\n                and username is not None\n                and password is not None\n                and compatible\n            ):\n                conn = connector.create_connection(\n                    self.useragent, username, password, userip=get_client_ip(request)\n                )\n                if conn is not None:\n                    try:\n                        request.session[\"connector\"] = connector\n                        # UpgradeCheck URL should be loaded from the server or\n                        # loaded omero.web.upgrades.url allows to customize web\n                        # only\n                        try:\n                            upgrades_url = settings.UPGRADES_URL\n                        except Exception:\n                            upgrades_url = conn.getUpgradesUrl()\n                        upgradeCheck(url=upgrades_url)\n                        return self.handle_logged_in(request, conn, connector)\n                    finally:\n                        conn.close(hard=False)\n            # Once here, we are not logged in...\n            # Need correct error message\n            if not connector.is_server_up(self.useragent):\n                error = \"Server is not responding,\" \" please contact administrator.\"\n            elif not settings.CHECK_VERSION:\n                error = (\n                    \"Connection not available, please check your\"\n                    \" credentials and version compatibility.\"\n                )\n            else:\n                if not compatible:\n                    error = (\n                        \"Client version does not match server,\"\n                        \" please contact administrator.\"\n                    )\n                else:\n                    error = settings.LOGIN_INCORRECT_CREDENTIALS_TEXT\n        return self.handle_not_logged_in(request, error, form)\n\n\n@login_required()\n@jsonp\ndef get_image_rdefs_json(request, img_id=None, conn=None, **kwargs):\n    \"\"\"\n    Retrieves all rendering definitions for a given image (id).\n\n    Example:  /get_image_rdefs_json/1\n              Returns all rdefs for image with id 1\n\n    @param request:     http request.\n    @param img_id:      the id of the image in question\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'rdefs' in the success case,\n                        one with key 'error' if something went wrong\n    \"\"\"\n    try:\n        img = conn.getObject(\"Image\", img_id)\n\n        if img is None:\n            return {\"error\": \"No image with id \" + str(img_id)}\n\n        return {\"rdefs\": img.getAllRenderingDefs()}\n    except Exception:\n        logger.debug(traceback.format_exc())\n        return {\"error\": \"Failed to retrieve rdefs\"}\n"], "fixing_code": ["5.9.0 (March 2021)\n------------------\n\n## New features\n\n- Webclient UI supports Change Owner ([#149](https://github.com/ome/omero-web/pull/149))\n- Filtering by Key-Value pairs supports autocomplete ([#250](https://github.com/ome/omero-web/pull/250))\n- Support URLs as output from scripts ([#233](https://github.com/ome/omero-web/pull/233))]\n- Improved install info in README ([#239](https://github.com/ome/omero-web/pull/239))]\n- Migrate CI to use GitHub actions ([#240](https://github.com/ome/omero-web/pull/240))]\n- Improve performance of OMERO.table loading ([#243](https://github.com/ome/omero-web/pull/243))\n- OMERO.table ROI column links to ROI in OMERO.iviewer ([#264](https://github.com/ome/omero-web/pull/264))\n- Disable placeholder URL popup on tree ([#257](https://github.com/ome/omero-web/pull/257))\n- Add an option to set SESSION_COOKIE_PATH ([#271]https://github.com/ome/omero-web/pull/271). Thanks to [Andrey Yudin](https://github.com/andreyyudin)\n\n## Bug fixes\n\n- Fix Open_with handling of callbacks in right panel ([#232](https://github.com/ome/omero-web/pull/232))\n- Fix /webgateway/dataset/ID/children/ URL (Thanks to [Johannes Dewender](https://github.com/JonnyJD)) ([#245](https://github.com/ome/omero-web/pull/245))\n- Remove broken 'Create Shares' dialog ([#265](https://github.com/ome/omero-web/pull/265))\n- Fix API ?childCount=true when zero objects found ([#249](https://github.com/ome/omero-web/pull/249))\n- Fix partial loading of annotations ([#256](https://github.com/ome/omero-web/pull/256))\n- Fix ignored limit in webgateway/table endpoint ([#268](https://github.com/ome/omero-web/pull/268))\n\n- Security vulnerability fixes for\n  [2021-SV1](https://www.openmicroscopy.org/security/advisories/2021-SV1-user-context/),\n  [2021-SV2](https://www.openmicroscopy.org/security/advisories/2021-SV2-url-validation/)\n\n5.8.1 (September 2020)\n----------------------\n\n## Bug fixes\n\n- Restore Python 3.5 compatibility ([#228](https://github.com/ome/omero-web/pull/228))\n\n## Other updates\n\n- Add more details to README for release process ([#220](https://github.com/ome/omero-web/pull/220))\n- Run tox in travis instead of Docker ([#219](https://github.com/ome/omero-web/pull/219))\n- Run black autoformatter, add pre-commit hook ([#218](https://github.com/ome/omero-web/pull/218))\n\n5.8.0 (September 2020)\n----------------------\n\n- webclient:\n   - Disable large zip file creation for data download ([#197](https://github.com/ome/omero-web/pull/197))\n   - Fix 'Move to Group' when data owner not in origin group ([#212](https://github.com/ome/omero-web/pull/212))\n   - History results page supports browse to data ([#206](https://github.com/ome/omero-web/pull/206))\n   - Fix shortening of Companion file names ([#198](https://github.com/ome/omero-web/pull/198))\n   - Fix pagination in history page and omero_table ([#203](https://github.com/ome/omero-web/pull/203))\n   - Link ownership matches child owner ([#199](https://github.com/ome/omero-web/pull/199))\n   - Improve download of OMERO.table as csv performance ([#192](https://github.com/ome/omero-web/pull/192))\n   - Fix display of disk usage for very small percentages ([#211](https://github.com/ome/omero-web/pull/211))\n\n- API changes:\n   - @login_required(doConnectionCleanup=False) will close connection unless streaming ([#191](https://github.com/ome/omero-web/pull/191))\n   - Return 404 for webgateway/imgData/ID if image not found ([#209](https://github.com/ome/omero-web/pull/209))\n\n- Other:\n   - Handle missing config for 'scripts to ignore' ([#195](https://github.com/ome/omero-web/pull/195))\n   - Cap pytest-xdist to avoid psutil Travis failures ([#201](https://github.com/ome/omero-web/pull/201))\n\n5.7.1 (July 2020)\n-----------------\n\n- webgateway\n\n   - Always marshal tile metadata on presence of pyramid ([#193](https://github.com/ome/omero-web/pull/193))\n\n5.7.0 (July 2020)\n-----------------\n\n- webclient:\n   - Preserve whitespace and linebreaks in Comments ([#150](https://github.com/ome/omero-web/pull/150))\n   - Improve filtering Images by numerical Key-Value pairs ([#147](https://github.com/ome/omero-web/pull/147))\n   - Fix editing of 'Shares' in webclient ([#162](https://github.com/ome/omero-web/pull/162))\n   - Fix error when user logged-out and public user configured ([#154](https://github.com/ome/omero-web/pull/154))\n   - No longer ignore the default thumbnail size from the configuration ([#165](https://github.com/ome/omero-web/pull/165))\n   - Fix moving data in webclient tree in Python 3.5 ([#170](https://github.com/ome/omero-web/pull/170))\n   - Handle no 'callback' in request.session ([#186](https://github.com/ome/omero-web/pull/186))\n\n- API changes:\n   - Add ROI support to `paths_to_object` ([#159](https://github.com/ome/omero-web/pull/159))\n   - Add Shape support to `paths_to_object` ([#178](https://github.com/ome/omero-web/pull/178))\n   - Add JSON API support for Experimenters and Groups ([#148](https://github.com/ome/omero-web/pull/148))\n\n- Other:\n   - Fix `render_roi_thumbnail` for unset Z/T index ([#157](https://github.com/ome/omero-web/pull/157))\n   - `omero-web` now requires `omero-py 5.7.0`\n   - Add doc for APPLICATION_SERVER_HOST to settings ([#177](https://github.com/ome/omero-web/pull/177))\n   - Set sign_tags to True by default in .bumpversion.cfg ([#176](https://github.com/ome/omero-web/pull/176))\n   - Fix new flake8 warnings ([#174](https://github.com/ome/omero-web/pull/174))\n   - Add `omero-web-docker` to release process instructions ([#156](https://github.com/ome/omero-web/pull/156))\n\n\n5.6.3 (March 2020)\n------------------\n\n- `omero.web.root_application`: allow \"/\" to be overridden ([#123](https://github.com/ome/omero-web/pull/123))\n- Close sessions where user is anonymous but `is_valid_public_url` is false ([#151](https://github.com/ome/omero-web/pull/151))\n\n5.6.2 (February 2020)\n---------------------\n\n- Fix shape_thumbnail using integer division ([#137](https://github.com/ome/omero-web/pull/137))\n- Use chosen plugin for script UI values ([#135](https://github.com/ome/omero-web/pull/135))\n- Rating post only ([#132](https://github.com/ome/omero-web/pull/132))\n- Fix feedback url encode ([#131](https://github.com/ome/omero-web/pull/131))\n- Script GUI file upload ([#128](https://github.com/ome/omero-web/pull/128))\n- Script upload ([#126](https://github.com/ome/omero-web/pull/126))\n- Fix webadmin search firefox ([#125](https://github.com/ome/omero-web/pull/125))\n- Delete check parent links ([#124](https://github.com/ome/omero-web/pull/124))\n- Map ann parent ID ([#119](https://github.com/ome/omero-web/pull/119))\n- Confine projections to no more than 256MiB of raw data ([#115](https://github.com/ome/omero-web/pull/115))\n- Fix color picker hex input box ([#114](https://github.com/ome/omero-web/pull/114))\n- Fix and expand \"open with\" plugin support ([#113](https://github.com/ome/omero-web/pull/113))\n- Table download ([#3](https://github.com/ome/omero-web/pull/3))\n\n5.6.1 (January 2020)\n--------------------\n\n- Quick fix of the show downloads regex ([#109](https://github.com/ome/omero-web/pull/109))\n\n5.6.0 (January 2020)\n--------------------\n\n- Remove support for Python 2 ([#103](https://github.com/ome/omero-web/pull/103))\n- Remove requirement files ([#107](https://github.com/ome/omero-web/pull/107))\n- Use BytesIO for default Thumbnail ([#104](https://github.com/ome/omero-web/pull/104))\n- omero-web requires OMERODIR ([#100](https://github.com/ome/omero-web/pull/100))\n- Ignore OMERO_HOME in settings.py ([#98](https://github.com/ome/omero-web/pull/98))\n- Better exception handling of custom settings ([#94](https://github.com/ome/omero-web/pull/94))\n- Add support for extra NGINX server configuration ([#90](https://github.com/ome/omero-web/pull/90))\n- Fix ROI maks and thumbnails ([#92](https://github.com/ome/omero-web/pull/92))\n- Fix script result failures ([#87](https://github.com/ome/omero-web/pull/87))\n- Fix download of multiple images in a zip ([#76](https://github.com/ome/omero-web/pull/76))\n- Fix race condition while closing tables ([#25](https://github.com/ome/omero-web/pull/25))\n- Fix `omero_ext.path` import ([#77](https://github.com/ome/omero-web/pull/77))\n- Add `omero.web.nginx_server_extra_config` property ([#80](https://github.com/ome/omero-web/pull/80))\n- Use cached config.xml in `omero.webgateway.getClientSettings` ([#83](https://github.com/ome/omero-web/pull/83))\n- Fix dialogs for thumbnail figure and split-view figure scripts ([#73](https://github.com/ome/omero-web/pull/73))\n- Loosen version checks to support 5.5 with 5.6 ([#32](https://github.com/ome/omero-web/pull/32))\n\n## API changes\n\n- OMERO.web now fails to start when `<app>.urls` fails to import ([#79](https://github.com/ome/omero-web/pull/79))\n- OMERO.web uses Django 1.11, upgraded from Django 1.8.\n- omeroweb.http renamed to omeroweb.httprsp to avoid import name\n  clashes with Django http.\n- URLs must be referenced by `name` not path.to.view.method (previously\n  some webgateway URLS lacked a name). For example, instead of\n  `{% url 'webgateway.views.render_image' image_id theZ theT %}`, use\n  `{% url 'webgateway_render_image' image_id theZ theT %}`.\n\n\n5.5.dev2 (August 2019)\n----------------------\n\n- Improve README\n- Add omeroweb.version\n- Move templates to omeroweb/\n- Bump to omero-py 5.5.1.dev1\n- Extract code from ome/openmicroscopy\n- Make minimal changes for a functioning `python setup.py` ([#1](https://github.com/ome/omero-web/pull/1))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2011-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"\nDecorators for use with OMERO.web applications.\n\"\"\"\n\nimport logging\nimport traceback\nfrom django.http import Http404, HttpResponseRedirect, JsonResponse\nfrom django.http.response import HttpResponseBase\nfrom django.shortcuts import render\nfrom django.http import HttpResponseForbidden, StreamingHttpResponse\n\nfrom django.conf import settings\nfrom django.utils.http import urlencode\nfrom functools import update_wrapper\nfrom django.core.urlresolvers import reverse, resolve, NoReverseMatch\nfrom django.core.cache import cache\n\nfrom omeroweb.utils import reverse_with_params\nfrom omeroweb.connector import Connector\nfrom omero.gateway.utils import propertiesToDict\nfrom omero import ApiUsageException\n\nlogger = logging.getLogger(__name__)\n\n\ndef parse_url(lookup_view):\n    if not lookup_view:\n        raise ValueError(\"No lookup_view\")\n    url = None\n    try:\n        url = reverse_with_params(\n            viewname=lookup_view[\"viewname\"],\n            args=lookup_view.get(\"args\", []),\n            query_string=lookup_view.get(\"query_string\", None),\n        )\n    except KeyError:\n        # assume we've been passed a url\n        try:\n            resolve(lookup_view)\n            url = lookup_view\n        except Exception:\n            pass\n    if url is None:\n        logger.error(\"Reverse for '%s' not found.\" % lookup_view)\n        raise NoReverseMatch(\"Reverse for '%s' not found.\" % lookup_view)\n    return url\n\n\ndef get_client_ip(request):\n    x_forwarded_for = request.META.get(\"HTTP_X_FORWARDED_FOR\")\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(\",\")[-1].strip()\n    else:\n        ip = request.META.get(\"REMOTE_ADDR\")\n    return ip\n\n\ndef is_public_user(request):\n    \"\"\"\n    Is the session connector created for public user?\n\n    Returns None if no connector found\n    \"\"\"\n    connector = request.session.get(\"connector\")\n    if connector is not None:\n        return connector.is_public\n\n\nclass ConnCleaningHttpResponse(StreamingHttpResponse):\n    \"\"\"Extension of L{HttpResponse} which closes the OMERO connection.\"\"\"\n\n    def close(self):\n        super(ConnCleaningHttpResponse, self).close()\n        try:\n            logger.debug(\"Closing OMERO connection in %r\" % self)\n            if self.conn is not None and self.conn.c is not None:\n                self.conn.close(hard=False)\n        except Exception:\n            logger.error(\"Failed to clean up connection.\", exc_info=True)\n\n\nclass TableClosingHttpResponse(ConnCleaningHttpResponse):\n    \"\"\"Extension of L{HttpResponse} which closes the OMERO connection.\"\"\"\n\n    def close(self):\n        try:\n            if self.table is not None:\n                self.table.close()\n        except Exception:\n            logger.error(\"Failed to close OMERO.table.\", exc_info=True)\n        # Now call super to close conn\n        super(TableClosingHttpResponse, self).close()\n\n\nclass login_required(object):\n    \"\"\"\n    OMERO.web specific extension of the Django login_required() decorator,\n    https://docs.djangoproject.com/en/dev/topics/auth/, which is responsible\n    for ensuring a valid L{omero.gateway.BlitzGateway} connection. Is\n    configurable by various options.\n\n    doConnectionCleanup:\n        Used to indicate methods that may return ConnCleaningHttpResponse.\n        If True (default), then returning a ConnCleaningHttpResponse will\n        raise an Exception since cleanup is intended to be immediate; if\n        False, connection cleanup will be skipped ONLY when a\n        ConnCleaningHttpResponse is returned.\n    \"\"\"\n\n    def __init__(\n        self,\n        useragent=\"OMERO.web\",\n        isAdmin=False,\n        isGroupOwner=False,\n        doConnectionCleanup=True,\n        omero_group=\"-1\",\n        allowPublic=None,\n    ):\n        \"\"\"\n        Initialises the decorator.\n        \"\"\"\n        self.useragent = useragent\n        self.isAdmin = isAdmin\n        self.isGroupOwner = isGroupOwner\n        self.doConnectionCleanup = doConnectionCleanup\n        self.omero_group = omero_group\n        self.allowPublic = allowPublic\n\n    # To make django's method_decorator work, this is required until\n    # python/django sort out how argumented decorator wrapping should work\n    # https://github.com/openmicroscopy/openmicroscopy/pull/1820\n    def __getattr__(self, name):\n        if name == \"__name__\":\n            return self.__class__.__name__\n        else:\n            return super(login_required, self).getattr(name)\n\n    def get_login_url(self):\n        \"\"\"The URL that should be redirected to if not logged in.\"\"\"\n        return reverse(settings.LOGIN_VIEW)\n\n    login_url = property(get_login_url)\n\n    def get_share_connection(self, request, conn, share_id):\n        try:\n            conn.SERVICE_OPTS.setOmeroShare(share_id)\n            conn.getShare(share_id)\n            return conn\n        except Exception:\n            logger.error(\"Error activating share.\", exc_info=True)\n            return None\n\n    def prepare_share_connection(self, request, conn, share_id):\n        \"\"\"Prepares the share connection if we have a valid share ID.\"\"\"\n        # we always need to clear any dirty 'omero.share' values from previous\n        # calls\n        conn.SERVICE_OPTS.setOmeroShare()\n        if share_id is None:\n            return None\n        share = conn.getShare(share_id)\n        try:\n            if share.getOwner().id != conn.getUserId():\n                if share.active and not share.isExpired():\n                    return self.get_share_connection(request, conn, share_id)\n                logger.debug(\"Share is unavailable.\")\n                return None\n        except Exception:\n            logger.error(\"Error retrieving share connection.\", exc_info=True)\n            return None\n\n    def on_not_logged_in(self, request, url, error=None):\n        \"\"\"Called whenever the user is not logged in.\"\"\"\n        if request.is_ajax():\n            logger.debug(\"Request is Ajax, returning HTTP 403.\")\n            return HttpResponseForbidden()\n\n        try:\n            for lookup_view in settings.LOGIN_REDIRECT[\"redirect\"]:\n                try:\n                    if url == reverse(lookup_view):\n                        url = parse_url(settings.LOGIN_REDIRECT)\n                except NoReverseMatch:\n                    try:\n                        resolve(lookup_view)\n                        if url == lookup_view:\n                            url = parse_url(settings.LOGIN_REDIRECT)\n                    except Http404:\n                        logger.error(\"Cannot resolve url %s\" % lookup_view)\n        except KeyError:\n            pass\n        except Exception:\n            logger.error(\"Error while redirection on not logged in.\", exc_info=True)\n\n        args = {\"url\": url}\n\n        logger.debug(\n            \"Request is not Ajax, redirecting to %s?%s\"\n            % (self.login_url, urlencode(args))\n        )\n        return HttpResponseRedirect(\"%s?%s\" % (self.login_url, urlencode(args)))\n\n    def on_logged_in(self, request, conn):\n        \"\"\"\n        Called whenever the users is successfully logged in.\n        Sets the 'omero.group' option if specified in the constructor\n        \"\"\"\n        if self.omero_group is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(self.omero_group)\n\n    def on_share_connection_prepared(self, request, conn_share):\n        \"\"\"Called whenever a share connection is successfully prepared.\"\"\"\n        pass\n\n    def verify_is_admin(self, conn):\n        \"\"\"\n        If we have been requested to by the isAdmin flag, verify the user\n        is an admin and raise an exception if they are not.\n        \"\"\"\n        if self.isAdmin and not conn.isAdmin():\n            raise Http404\n\n    def verify_is_group_owner(self, conn, gid):\n        \"\"\"\n        If we have been requested to by the isGroupOwner flag, verify the user\n        is the owner of the provided group. If no group is provided the user's\n        active session group ownership will be verified.\n        \"\"\"\n        if not self.isGroupOwner:\n            return\n        if gid is not None:\n            if not conn.isLeader(gid):\n                raise Http404\n        else:\n            if not conn.isLeader():\n                raise Http404\n\n    def is_valid_public_url(self, server_id, request):\n        \"\"\"\n        Verifies that the URL for the resource being requested falls within\n        the scope of the OMERO.webpublic URL filter.\n        \"\"\"\n        if settings.PUBLIC_ENABLED:\n            if not hasattr(settings, \"PUBLIC_USER\"):\n                logger.warn(\n                    \"OMERO.webpublic enabled but public user \"\n                    \"(omero.web.public.user) not set, disabling \"\n                    \"OMERO.webpublic.\"\n                )\n                settings.PUBLIC_ENABLED = False\n                return False\n            if not hasattr(settings, \"PUBLIC_PASSWORD\"):\n                logger.warn(\n                    \"OMERO.webpublic enabled but public user \"\n                    \"password (omero.web.public.password) not set, \"\n                    \"disabling OMERO.webpublic.\"\n                )\n                settings.PUBLIC_ENABLED = False\n                return False\n            if settings.PUBLIC_GET_ONLY and (request.method != \"GET\"):\n                return False\n            if self.allowPublic is None:\n                return settings.PUBLIC_URL_FILTER.search(request.path) is not None\n            return self.allowPublic\n        return False\n\n    def load_server_settings(self, conn, request):\n        \"\"\"Loads Client preferences and Read-Only status from the server.\"\"\"\n        try:\n            request.session[\"can_create\"]\n        except KeyError:\n            request.session.modified = True\n            request.session[\"can_create\"] = conn.canCreate()\n        try:\n            request.session[\"server_settings\"]\n        except Exception:\n            request.session.modified = True\n            request.session[\"server_settings\"] = {}\n            try:\n                request.session[\"server_settings\"] = propertiesToDict(\n                    conn.getClientSettings(), prefix=\"omero.client.\"\n                )\n            except Exception:\n                logger.error(traceback.format_exc())\n            # make extra call for omero.mail, not a part of omero.client\n            request.session[\"server_settings\"][\"email\"] = conn.getEmailSettings()\n\n    def get_public_user_connector(self):\n        \"\"\"\n        Returns the current cached OMERO.webpublic connector or None if\n        nothing has been cached.\n        \"\"\"\n        if not settings.PUBLIC_CACHE_ENABLED:\n            return\n        return cache.get(settings.PUBLIC_CACHE_KEY)\n\n    def set_public_user_connector(self, connector):\n        \"\"\"Sets the current cached OMERO.webpublic connector.\"\"\"\n        if not settings.PUBLIC_CACHE_ENABLED or connector.omero_session_key is None:\n            return\n        logger.debug(\"Setting OMERO.webpublic connector: %r\" % connector)\n        cache.set(settings.PUBLIC_CACHE_KEY, connector, settings.PUBLIC_CACHE_TIMEOUT)\n\n    def get_connection(self, server_id, request):\n        \"\"\"\n        Prepares a Blitz connection wrapper (from L{omero.gateway}) for\n        use with a view function.\n        \"\"\"\n        connection = self.get_authenticated_connection(server_id, request)\n        is_valid_public_url = self.is_valid_public_url(server_id, request)\n        logger.debug(\"Is valid public URL? %s\" % is_valid_public_url)\n        if connection is None and is_valid_public_url:\n            # If OMERO.webpublic is enabled, pick up a username and\n            # password from configuration and use those credentials to\n            # create a connection.\n            logger.debug(\n                \"OMERO.webpublic enabled, attempting to login \"\n                \"with configuration supplied credentials.\"\n            )\n            if server_id is None:\n                server_id = settings.PUBLIC_SERVER_ID\n            username = settings.PUBLIC_USER\n            password = settings.PUBLIC_PASSWORD\n            is_secure = settings.SECURE\n            logger.debug(\"Is SSL? %s\" % is_secure)\n            # Try and use a cached OMERO.webpublic user session key.\n            public_user_connector = self.get_public_user_connector()\n            if public_user_connector is not None:\n                logger.debug(\n                    \"Attempting to use cached OMERO.webpublic \"\n                    \"connector: %r\" % public_user_connector\n                )\n                connection = public_user_connector.join_connection(self.useragent)\n                if connection is not None:\n                    request.session[\"connector\"] = public_user_connector\n                    logger.debug(\n                        \"Attempt to use cached OMERO.web public \"\n                        \"session key successful!\"\n                    )\n                    return connection\n                logger.debug(\n                    \"Attempt to use cached OMERO.web public \" \"session key failed.\"\n                )\n            # We don't have a cached OMERO.webpublic user session key,\n            # create a new connection based on the credentials we've been\n            # given.\n            connector = Connector(server_id, is_secure)\n            connection = connector.create_connection(\n                self.useragent,\n                username,\n                password,\n                is_public=True,\n                userip=get_client_ip(request),\n            )\n            request.session[\"connector\"] = connector\n            # Clear any previous context so we don't try to access this\n            # NB: we also do this in WebclientLoginView.handle_logged_in()\n            if \"active_group\" in request.session:\n                del request.session[\"active_group\"]\n            if \"user_id\" in request.session:\n                del request.session[\"user_id\"]\n            request.session.modified = True\n            self.set_public_user_connector(connector)\n        elif connection is not None:\n            is_anonymous = connection.isAnonymous()\n            logger.debug(\"Is anonymous? %s\" % is_anonymous)\n            if is_anonymous and not is_valid_public_url:\n                if connection.c is not None:\n                    logger.debug(\"Closing anonymous connection\")\n                    connection.close(hard=False)\n                return None\n        return connection\n\n    def get_authenticated_connection(self, server_id, request):\n        \"\"\"\n        Prepares an authenticated Blitz connection wrapper (from\n        L{omero.gateway}) for use with a view function.\n        \"\"\"\n        # TODO: Handle previous try_super logic; is it still needed?\n\n        userip = get_client_ip(request)\n        session = request.session\n        request = request.GET\n        is_secure = settings.SECURE\n        logger.debug(\"Is SSL? %s\" % is_secure)\n        connector = session.get(\"connector\", None)\n        logger.debug(\"Connector: %s\" % connector)\n\n        if server_id is None:\n            # If no server id is passed, the db entry will not be used and\n            # instead we'll depend on the request.session and request.GET\n            # values\n            if connector is not None:\n                server_id = connector.server_id\n            else:\n                try:\n                    server_id = request[\"server\"]\n                except Exception:\n                    logger.debug(\"No Server ID available.\")\n                    return None\n\n        # If we have an OMERO session key in our request variables attempt\n        # to make a connection based on those credentials.\n        try:\n            omero_session_key = request[\"bsession\"]\n            connector = Connector(server_id, is_secure)\n        except KeyError:\n            # We do not have an OMERO session key in the current request.\n            pass\n        else:\n            # We have an OMERO session key in the current request use it\n            # to try join an existing connection / OMERO session.\n            logger.debug(\n                \"Have OMERO session key %s, attempting to join...\" % omero_session_key\n            )\n            connector.user_id = None\n            connector.omero_session_key = omero_session_key\n            connection = connector.join_connection(self.useragent, userip)\n            session[\"connector\"] = connector\n            return connection\n\n        # An OMERO session is not available, we're either trying to service\n        # a request to a login page or an anonymous request.\n        username = None\n        password = None\n        try:\n            username = request[\"username\"]\n            password = request[\"password\"]\n        except KeyError:\n            if connector is None:\n                logger.debug(\"No username or password in request, exiting.\")\n                # We do not have an OMERO session or a username and password\n                # in the current request and we do not have a valid connector.\n                # Raise an error (return None).\n                return None\n\n        if username is not None and password is not None:\n            # We have a username and password in the current request, or\n            # OMERO.webpublic is enabled and has provided us with a username\n            # and password via configureation. Use them to try and create a\n            # new connection / OMERO session.\n            logger.debug(\"Creating connection with username and password...\")\n            connector = Connector(server_id, is_secure)\n            connection = connector.create_connection(\n                self.useragent, username, password, userip=userip\n            )\n            session[\"connector\"] = connector\n            return connection\n\n        logger.debug(\"Django session connector: %r\" % connector)\n        if connector is not None:\n            # We have a connector, attempt to use it to join an existing\n            # connection / OMERO session.\n            connection = connector.join_connection(self.useragent, userip)\n            if connection is not None:\n                logger.debug(\"Connector valid, session successfully joined.\")\n                return connection\n            # Fall through, we the session we've been asked to join may\n            # be invalid and we may have other credentials as request\n            # variables.\n            logger.debug(\"Connector is no longer valid, destroying...\")\n            del session[\"connector\"]\n            return None\n\n        session[\"connector\"] = connector\n        return None\n\n    def __call__(ctx, f):\n        \"\"\"\n        Tries to prepare a logged in connection, then calls function and\n        returns the result.\n        \"\"\"\n\n        def wrapped(request, *args, **kwargs):\n            url = request.GET.get(\"url\")\n            if url is None or len(url) == 0:\n                url = request.get_full_path()\n\n            doConnectionCleanup = False\n\n            conn = kwargs.get(\"conn\", None)\n            error = None\n            server_id = kwargs.get(\"server_id\", None)\n            # Short circuit connection retrieval when a connection was\n            # provided to us via 'conn'. This is useful when in testing\n            # mode or when stacking view functions/methods.\n            if conn is None:\n                doConnectionCleanup = ctx.doConnectionCleanup\n                logger.debug(\"Connection not provided, attempting to get one.\")\n                try:\n                    conn = ctx.get_connection(server_id, request)\n                except Exception as x:\n                    logger.error(\"Error retrieving connection.\", exc_info=True)\n                    error = str(x)\n                else:\n                    # various configuration & checks only performed on new\n                    # 'conn'\n                    if conn is None:\n                        return ctx.on_not_logged_in(request, url, error)\n                    else:\n                        ctx.on_logged_in(request, conn)\n                    ctx.verify_is_admin(conn)\n                    ctx.verify_is_group_owner(conn, kwargs.get(\"gid\"))\n                    ctx.load_server_settings(conn, request)\n\n                    share_id = kwargs.get(\"share_id\")\n                    conn_share = ctx.prepare_share_connection(request, conn, share_id)\n                    if conn_share is not None:\n                        ctx.on_share_connection_prepared(request, conn_share)\n                        kwargs[\"conn\"] = conn_share\n                    else:\n                        kwargs[\"conn\"] = conn\n\n                    # kwargs['error'] = request.GET.get('error')\n                    kwargs[\"url\"] = url\n            retval = None\n            try:\n                retval = f(request, *args, **kwargs)\n            finally:\n                # If f() raised Exception, e.g. Http404() we must still cleanup\n                delayConnectionCleanup = isinstance(retval, ConnCleaningHttpResponse)\n                if doConnectionCleanup and delayConnectionCleanup:\n                    raise ApiUsageException(\n                        \"Methods that return a\"\n                        \" ConnCleaningHttpResponse must be marked with\"\n                        \" @login_required(doConnectionCleanup=False)\"\n                    )\n                doConnectionCleanup = not delayConnectionCleanup\n                logger.debug(\"Doing connection cleanup? %s\" % doConnectionCleanup)\n                try:\n                    if doConnectionCleanup:\n                        if conn is not None and conn.c is not None:\n                            conn.close(hard=False)\n                except Exception:\n                    logger.warn(\"Failed to clean up connection\", exc_info=True)\n            return retval\n\n        return update_wrapper(wrapped, f)\n\n\nclass render_response(object):\n    \"\"\"\n    This decorator handles the rendering of view methods to HttpResponse. It\n    expects that wrapped view methods return a dict. This allows:\n    - The template to be specified in the method arguments OR within the view\n      method itself\n    - The dict to be returned as json if required\n    - The request is passed to the template context, as required by some tags\n      etc\n    - A hook is provided for adding additional data to the context, from the\n      L{omero.gateway.BlitzGateway} or from the request.\n    \"\"\"\n\n    # To make django's method_decorator work, this is required until\n    # python/django sort out how argumented decorator wrapping should work\n    # https://github.com/openmicroscopy/openmicroscopy/pull/1820\n    def __getattr__(self, name):\n        if name == \"__name__\":\n            return self.__class__.__name__\n        else:\n            return super(render_response, self).getattr(name)\n\n    def prepare_context(self, request, context, *args, **kwargs):\n        \"\"\" Hook for adding additional data to the context dict \"\"\"\n        context[\"html\"] = context.get(\"html\", {})\n        context[\"html\"][\"meta_referrer\"] = settings.HTML_META_REFERRER\n\n    def __call__(ctx, f):\n        \"\"\" Here we wrap the view method f and return the wrapped method \"\"\"\n\n        def wrapper(request, *args, **kwargs):\n            \"\"\"\n            Wrapper calls the view function, processes the result and returns\n            HttpResponse\"\"\"\n\n            # call the view function itself...\n            context = f(request, *args, **kwargs)\n\n            # if we happen to have a Response, return it\n            if isinstance(context, HttpResponseBase):\n                return context\n\n            # get template from view dict. Can be overridden from the **kwargs\n            template = \"template\" in context and context[\"template\"] or None\n            template = kwargs.get(\"template\", template)\n            logger.debug(\"Rendering template: %s\" % template)\n\n            # allows us to return the dict as json  (NB: BlitzGateway objects\n            # don't serialize)\n            if template is None or template == \"json\":\n                # We still need to support non-dict data:\n                safe = type(context) is dict\n                return JsonResponse(context, safe=safe)\n            else:\n                # allow additional processing of context dict\n                ctx.prepare_context(request, context, *args, **kwargs)\n                return render(request, template, context)\n\n        return update_wrapper(wrapper, f)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n# #                Django settings for OMERO.web project.               # #\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#\n#\n# Copyright (c) 2008-2016 University of Dundee.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n#\n# Version: 1.0\n#\n\n\nimport os.path\nimport sys\nimport logging\nimport omero\nimport omero.config\nimport omero.clients\nimport tempfile\nimport re\nimport json\nimport random\nimport string\nfrom builtins import str as text\n\nfrom omero_ext import portalocker\nfrom omero.util.concurrency import get_event\nfrom omeroweb.utils import sort_properties_to_tuple\nfrom omeroweb.connector import Server\n\nlogger = logging.getLogger(__name__)\n\n# LOGS\n# NEVER DEPLOY a site into production with DEBUG turned on.\n# Debuging mode.\n# A boolean that turns on/off debug mode.\n# handler404 and handler500 works only when False\nif \"OMERO_HOME\" in os.environ:\n    logger.warn(\"OMERO_HOME usage is ignored in OMERO.web\")\n\nOMERODIR = os.environ.get(\"OMERODIR\")\nif not OMERODIR:\n    raise Exception(\"ERROR: OMERODIR not set\")\n\n# Logging\nLOGDIR = os.path.join(OMERODIR, \"var\", \"log\").replace(\"\\\\\", \"/\")\n\nif not os.path.isdir(LOGDIR):\n    try:\n        os.makedirs(LOGDIR)\n    except Exception:\n        exctype, value = sys.exc_info()[:2]\n        raise exctype(value)\n\n# DEBUG: Never deploy a site into production with DEBUG turned on.\n# Logging levels: logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR\n# logging.CRITICAL\n# FORMAT: 2010-01-01 00:00:00,000 INFO  [omeroweb.webadmin.webadmin_utils]\n# (proc.1308 ) getGuestConnection:20 Open connection is not available\n\nSTANDARD_LOGFORMAT = (\n    \"%(asctime)s %(levelname)5.5s [%(name)40.40s]\"\n    \" (proc.%(process)5.5d) %(funcName)s():%(lineno)d %(message)s\"\n)\n\nFULL_REQUEST_LOGFORMAT = (\n    \"%(asctime)s %(levelname)5.5s [%(name)40.40s]\"\n    \" (proc.%(process)5.5d) %(funcName)s():%(lineno)d\"\n    \" HTTP %(status_code)d %(request)s\"\n)\n\nLOGGING_CLASS = \"omero_ext.cloghandler.ConcurrentRotatingFileHandler\"\nLOGSIZE = 500000000\n\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"standard\": {\"format\": STANDARD_LOGFORMAT},\n        \"full_request\": {\"format\": FULL_REQUEST_LOGFORMAT},\n    },\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        },\n        \"require_debug_true\": {\n            \"()\": \"django.utils.log.RequireDebugTrue\",\n        },\n    },\n    \"handlers\": {\n        \"default\": {\n            \"level\": \"DEBUG\",\n            \"class\": LOGGING_CLASS,\n            \"filename\": os.path.join(LOGDIR, \"OMEROweb.log\").replace(\"\\\\\", \"/\"),\n            \"maxBytes\": LOGSIZE,\n            \"backupCount\": 10,\n            \"formatter\": \"standard\",\n        },\n        \"request_handler\": {\n            \"level\": \"DEBUG\",\n            \"class\": LOGGING_CLASS,\n            \"filename\": os.path.join(LOGDIR, \"OMEROweb.log\").replace(\"\\\\\", \"/\"),\n            \"maxBytes\": LOGSIZE,\n            \"backupCount\": 10,\n            \"filters\": [\"require_debug_false\"],\n            \"formatter\": \"full_request\",\n        },\n        \"console\": {\n            \"level\": \"INFO\",\n            \"filters\": [\"require_debug_true\"],\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"standard\",\n        },\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        },\n    },\n    \"loggers\": {\n        \"django.request\": {  # Stop SQL debug from logging to main logger\n            \"handlers\": [\"default\", \"request_handler\", \"mail_admins\"],\n            \"level\": \"DEBUG\",\n            \"propagate\": False,\n        },\n        \"django\": {\"handlers\": [\"console\"], \"level\": \"DEBUG\", \"propagate\": True},\n        \"\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": True},\n    },\n}\n\n\nCONFIG_XML = os.path.join(OMERODIR, \"etc\", \"grid\", \"config.xml\")\ncount = 10\nevent = get_event(\"websettings\")\n\nwhile True:\n    try:\n        CUSTOM_SETTINGS = dict()\n        if os.path.exists(CONFIG_XML):\n            CONFIG_XML = omero.config.ConfigXml(CONFIG_XML, read_only=True)\n            CUSTOM_SETTINGS = CONFIG_XML.as_map()\n            CONFIG_XML.close()\n        break\n    except portalocker.LockException:\n        # logger.error(\"Exception while loading configuration retrying...\",\n        # exc_info=True)\n        exctype, value = sys.exc_info()[:2]\n        count -= 1\n        if not count:\n            raise exctype(value)\n        else:\n            event.wait(1)  # Wait a total of 10 seconds\n    except Exception:\n        # logger.error(\"Exception while loading configuration...\",\n        # exc_info=True)\n        exctype, value = sys.exc_info()[:2]\n        raise exctype(value)\n\ndel event\ndel count\ndel get_event\n\nWSGI = \"wsgi\"\nWSGITCP = \"wsgi-tcp\"\nWSGI_TYPES = (WSGI, WSGITCP)\nDEVELOPMENT = \"development\"\nDEFAULT_SERVER_TYPE = WSGITCP\nALL_SERVER_TYPES = (WSGI, WSGITCP, DEVELOPMENT)\n\nDEFAULT_SESSION_ENGINE = \"omeroweb.filesessionstore\"\nSESSION_ENGINE_VALUES = (\n    \"omeroweb.filesessionstore\",\n    \"django.contrib.sessions.backends.db\",\n    \"django.contrib.sessions.backends.file\",\n    \"django.contrib.sessions.backends.cache\",\n    \"django.contrib.sessions.backends.cached_db\",\n)\n\n\ndef parse_boolean(s):\n    s = s.strip().lower()\n    if s in (\"true\", \"1\", \"t\"):\n        return True\n    return False\n\n\ndef parse_paths(s):\n    return [os.path.normpath(path) for path in json.loads(s)]\n\n\ndef check_server_type(s):\n    if s not in ALL_SERVER_TYPES:\n        raise ValueError(\n            \"Unknown server type: %s. Valid values are: %s\" % (s, ALL_SERVER_TYPES)\n        )\n    return s\n\n\ndef check_session_engine(s):\n    if s not in SESSION_ENGINE_VALUES:\n        raise ValueError(\n            \"Unknown session engine: %s. Valid values are: %s\"\n            % (s, SESSION_ENGINE_VALUES)\n        )\n    return s\n\n\ndef identity(x):\n    return x\n\n\ndef str_slash(s):\n    if s is not None:\n        s = str(s)\n        if s and not s.endswith(\"/\"):\n            s += \"/\"\n    return s\n\n\nclass LeaveUnset(Exception):\n    pass\n\n\ndef leave_none_unset(s):\n    if s is None:\n        raise LeaveUnset()\n    return s\n\n\ndef leave_none_unset_int(s):\n    s = leave_none_unset(s)\n    if s is not None:\n        return int(s)\n\n\nCUSTOM_HOST = CUSTOM_SETTINGS.get(\"Ice.Default.Host\", \"localhost\")\nCUSTOM_HOST = CUSTOM_SETTINGS.get(\"omero.master.host\", CUSTOM_HOST)\n# DO NOT EDIT!\nINTERNAL_SETTINGS_MAPPING = {\n    \"omero.qa.feedback\": [\"FEEDBACK_URL\", \"http://qa.openmicroscopy.org.uk\", str, None],\n    \"omero.web.upgrades.url\": [\"UPGRADES_URL\", None, leave_none_unset, None],\n    \"omero.web.check_version\": [\"CHECK_VERSION\", \"true\", parse_boolean, None],\n    # Allowed hosts:\n    # https://docs.djangoproject.com/en/1.8/ref/settings/#allowed-hosts\n    \"omero.web.allowed_hosts\": [\"ALLOWED_HOSTS\", '[\"*\"]', json.loads, None],\n    # Do not show WARNING (1_8.W001): The standalone TEMPLATE_* settings\n    # were deprecated in Django 1.8 and the TEMPLATES dictionary takes\n    # precedence. You must put the values of the following settings\n    # into your default TEMPLATES dict:\n    # TEMPLATE_DIRS, TEMPLATE_CONTEXT_PROCESSORS.\n    \"omero.web.system_checks\": [\n        \"SILENCED_SYSTEM_CHECKS\",\n        '[\"1_8.W001\"]',\n        json.loads,\n        None,\n    ],\n    # Internal email notification for omero.web.admins,\n    # loaded from config.xml directly\n    \"omero.mail.from\": [\n        \"SERVER_EMAIL\",\n        None,\n        identity,\n        (\n            \"The email address that error messages come from, such as those\"\n            \" sent to :property:`omero.web.admins`.  Requires EMAIL properties\"\n            \" below.\"\n        ),\n    ],\n    \"omero.mail.host\": [\n        \"EMAIL_HOST\",\n        None,\n        identity,\n        \"The SMTP server host to use for sending email.\",\n    ],\n    \"omero.mail.password\": [\n        \"EMAIL_HOST_PASSWORD\",\n        None,\n        identity,\n        \"Password to use for the SMTP server.\",\n    ],\n    \"omero.mail.username\": [\n        \"EMAIL_HOST_USER\",\n        None,\n        identity,\n        \"Username to use for the SMTP server.\",\n    ],\n    \"omero.mail.port\": [\"EMAIL_PORT\", 25, identity, \"Port to use for the SMTP server.\"],\n    \"omero.web.admins.email_subject_prefix\": [\n        \"EMAIL_SUBJECT_PREFIX\",\n        \"[OMERO.web - admin notification]\",\n        str,\n        \"Subject-line prefix for email messages\",\n    ],\n    \"omero.mail.smtp.starttls.enable\": [\n        \"EMAIL_USE_TLS\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Whether to use a TLS (secure) connection when talking to the SMTP\"\n            \" server.\"\n        ),\n    ],\n}\n\nCUSTOM_SETTINGS_MAPPINGS = {\n    # Deployment configuration\n    \"omero.web.debug\": [\n        \"DEBUG\",\n        \"false\",\n        parse_boolean,\n        (\n            \"A boolean that turns on/off debug mode. \"\n            \"Use debug mode only in development, not in production, as it logs \"\n            \"sensitive and confidential information in plaintext.\"\n        ),\n    ],\n    \"omero.web.secret_key\": [\n        \"SECRET_KEY\",\n        None,\n        leave_none_unset,\n        (\"A boolean that sets SECRET_KEY for a particular Django \" \"installation.\"),\n    ],\n    \"omero.web.admins\": [\n        \"ADMINS\",\n        \"[]\",\n        json.loads,\n        (\n            \"A list of people who get code error notifications whenever the \"\n            \"application identifies a broken link or raises an unhandled \"\n            \"exception that results in an internal server error. This gives \"\n            \"the administrators immediate notification of any errors, \"\n            \"see :doc:`/sysadmins/mail`. \"\n            'Example:``\\'[[\"Full Name\", \"email address\"]]\\'``.'\n        ),\n    ],\n    \"omero.web.application_server\": [\n        \"APPLICATION_SERVER\",\n        DEFAULT_SERVER_TYPE,\n        check_server_type,\n        (\n            \"OMERO.web is configured to run in Gunicorn as a generic WSGI (TCP)\"\n            \"application by default. Available options: ``wsgi-tcp`` \"\n            \"(Gunicorn, default), ``wsgi`` (Advanced users only, e.g. manual \"\n            \"Apache configuration with ``mod_wsgi``).\"\n        ),\n    ],\n    \"omero.web.application_server.host\": [\n        \"APPLICATION_SERVER_HOST\",\n        \"127.0.0.1\",\n        str,\n        \"The front-end webserver e.g. NGINX can be set up to run on a \"\n        \"different host from OMERO.web. The property ensures that OMERO.web \"\n        \"is accessible on an external IP. It requires copying all the \"\n        \"OMERO.web static files to the separate NGINX server.\",\n    ],\n    \"omero.web.application_server.port\": [\n        \"APPLICATION_SERVER_PORT\",\n        4080,\n        int,\n        \"Upstream application port\",\n    ],\n    \"omero.web.application_server.max_requests\": [\n        \"APPLICATION_SERVER_MAX_REQUESTS\",\n        0,\n        int,\n        (\"The maximum number of requests a worker will process before \" \"restarting.\"),\n    ],\n    \"omero.web.middleware\": [\n        \"MIDDLEWARE_CLASSES_LIST\",\n        (\n            \"[\"\n            '{\"index\": 1, '\n            '\"class\": \"django.middleware.common.BrokenLinkEmailsMiddleware\"},'\n            '{\"index\": 2, '\n            '\"class\": \"django.middleware.common.CommonMiddleware\"},'\n            '{\"index\": 3, '\n            '\"class\": \"django.contrib.sessions.middleware.SessionMiddleware\"},'\n            '{\"index\": 4, '\n            '\"class\": \"django.middleware.csrf.CsrfViewMiddleware\"},'\n            '{\"index\": 5, '\n            '\"class\": \"django.contrib.messages.middleware.MessageMiddleware\"},'\n            '{\"index\": 6, '\n            '\"class\": \"django.middleware.clickjacking.XFrameOptionsMiddleware\"}'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Warning: Only system administrators should use this feature. \"\n            \"List of Django middleware classes in the form \"\n            '[{\"class\": \"class.name\", \"index\": FLOAT}]. '\n            \"See :djangodoc:`Django middleware <topics/http/middleware/>`.\"\n            \" Classes will be ordered by increasing index\"\n        ),\n    ],\n    \"omero.web.prefix\": [\n        \"FORCE_SCRIPT_NAME\",\n        None,\n        leave_none_unset,\n        (\n            \"Used as the value of the SCRIPT_NAME environment variable in any\"\n            \" HTTP request.\"\n        ),\n    ],\n    \"omero.web.use_x_forwarded_host\": [\n        \"USE_X_FORWARDED_HOST\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Specifies whether to use the X-Forwarded-Host header in preference \"\n            \"to the Host header. This should only be enabled if a proxy which \"\n            \"sets this header is in use.\"\n        ),\n    ],\n    \"omero.web.static_url\": [\n        \"STATIC_URL\",\n        \"/static/\",\n        str_slash,\n        (\n            \"URL to use when referring to static files. Example: ``'/static/'``\"\n            \" or ``'http://static.example.com/'``. Used as the base path for\"\n            \" asset  definitions (the Media class) and the staticfiles app. It\"\n            \" must end in a slash if set to a non-empty value.\"\n        ),\n    ],\n    \"omero.web.static_root\": [\n        \"STATIC_ROOT\",\n        os.path.join(OMERODIR, \"var\", \"static\"),\n        os.path.normpath,\n        (\n            \"The absolute path to the directory where collectstatic will\"\n            \" collect static files for deployment. If the staticfiles contrib\"\n            \" app is enabled (default) the collectstatic management command\"\n            \" will collect static files into this directory.\"\n        ),\n    ],\n    \"omero.web.session_engine\": [\n        \"SESSION_ENGINE\",\n        DEFAULT_SESSION_ENGINE,\n        check_session_engine,\n        (\n            \"Controls where Django stores session data. See :djangodoc:\"\n            \"`Configuring the session engine for more details <ref/settings\"\n            \"/#session-engine>`.\"\n        ),\n    ],\n    \"omero.web.session_expire_at_browser_close\": [\n        \"SESSION_EXPIRE_AT_BROWSER_CLOSE\",\n        \"true\",\n        parse_boolean,\n        (\n            \"A boolean that determines whether to expire the session when the \"\n            \"user closes their browser. See :djangodoc:`Django Browser-length \"\n            \"sessions vs. persistent sessions documentation <topics/http/\"\n            \"sessions/#browser-length-vs-persistent-sessions>` for more \"\n            \"details.\"\n        ),\n    ],\n    \"omero.web.caches\": [\n        \"CACHES\",\n        ('{\"default\": {\"BACKEND\":' ' \"django.core.cache.backends.dummy.DummyCache\"}}'),\n        json.loads,\n        (\n            \"OMERO.web offers alternative session backends to automatically\"\n            \" delete stale data using the cache session store backend, see \"\n            \":djangodoc:`Django cached session documentation <topics/http/\"\n            \"sessions/#using-cached-sessions>` for more details.\"\n        ),\n    ],\n    \"omero.web.secure\": [\n        \"SECURE\",\n        \"false\",\n        parse_boolean,\n        (\"Force all backend OMERO.server connections to use SSL.\"),\n    ],\n    \"omero.web.session_cookie_age\": [\n        \"SESSION_COOKIE_AGE\",\n        86400,\n        int,\n        \"The age of session cookies, in seconds.\",\n    ],\n    \"omero.web.session_cookie_domain\": [\n        \"SESSION_COOKIE_DOMAIN\",\n        None,\n        leave_none_unset,\n        \"The domain to use for session cookies\",\n    ],\n    \"omero.web.session_cookie_name\": [\n        \"SESSION_COOKIE_NAME\",\n        None,\n        leave_none_unset,\n        \"The name to use for session cookies\",\n    ],\n    \"omero.web.session_cookie_path\": [\n        \"SESSION_COOKIE_PATH\",\n        None,\n        leave_none_unset,\n        \"The path to use for session cookies\",\n    ],\n    \"omero.web.session_cookie_secure\": [\n        \"SESSION_COOKIE_SECURE\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Restrict session cookies to HTTPS only, you are strongly \"\n            \"recommended to set this to ``true`` in production.\"\n        ),\n    ],\n    \"omero.web.csrf_cookie_secure\": [\n        \"CSRF_COOKIE_SECURE\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Restrict CSRF cookies to HTTPS only, you are strongly \"\n            \"recommended to set this to ``true`` in production.\"\n        ),\n    ],\n    \"omero.web.csrf_cookie_httponly\": [\n        \"CSRF_COOKIE_HTTPONLY\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Prevent CSRF cookie from being accessed in JavaScript. \"\n            \"Currently disabled as it breaks background JavaScript POSTs in \"\n            \"OMERO.web.\"\n        ),\n    ],\n    \"omero.web.logdir\": [\"LOGDIR\", LOGDIR, str, \"A path to the custom log directory.\"],\n    \"omero.web.secure_proxy_ssl_header\": [\n        \"SECURE_PROXY_SSL_HEADER\",\n        \"[]\",\n        json.loads,\n        (\n            \"A tuple representing a HTTP header/value combination that \"\n            \"signifies a request is secure. Example \"\n            '``\\'[\"HTTP_X_FORWARDED_PROTO_OMERO_WEB\", \"https\"]\\'``. '\n            \"For more details see :djangodoc:`secure proxy ssl header <ref/\"\n            \"settings/#secure-proxy-ssl-header>`.\"\n        ),\n    ],\n    \"omero.web.wsgi_args\": [\n        \"WSGI_ARGS\",\n        None,\n        leave_none_unset,\n        (\n            \"A string representing Gunicorn additional arguments. \"\n            \"Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/latest/settings.html\"\n        ),\n    ],\n    \"omero.web.wsgi_workers\": [\n        \"WSGI_WORKERS\",\n        5,\n        int,\n        (\n            \"The number of worker processes for handling requests. \"\n            \"Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#workers\"\n        ),\n    ],\n    \"omero.web.wsgi_timeout\": [\n        \"WSGI_TIMEOUT\",\n        60,\n        int,\n        (\n            \"Workers silent for more than this many seconds are killed \"\n            \"and restarted. Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#timeout\"\n        ),\n    ],\n    # Public user\n    \"omero.web.public.enabled\": [\n        \"PUBLIC_ENABLED\",\n        \"false\",\n        parse_boolean,\n        \"Enable and disable the OMERO.web public user functionality.\",\n    ],\n    \"omero.web.public.url_filter\": [\n        \"PUBLIC_URL_FILTER\",\n        r\"(?#This regular expression matches nothing)a^\",\n        re.compile,\n        (\n            \"Set a regular expression that matches URLs the public user is \"\n            \"allowed to access. If this is not set, no URLs will be \"\n            \"publicly available.\"\n        ),\n    ],\n    \"omero.web.public.get_only\": [\n        \"PUBLIC_GET_ONLY\",\n        \"true\",\n        parse_boolean,\n        \"Restrict public users to GET requests only\",\n    ],\n    \"omero.web.public.server_id\": [\n        \"PUBLIC_SERVER_ID\",\n        1,\n        int,\n        \"Server to authenticate against.\",\n    ],\n    \"omero.web.public.user\": [\n        \"PUBLIC_USER\",\n        None,\n        leave_none_unset,\n        \"Username to use during authentication.\",\n    ],\n    \"omero.web.public.password\": [\n        \"PUBLIC_PASSWORD\",\n        None,\n        leave_none_unset,\n        \"Password to use during authentication.\",\n    ],\n    \"omero.web.public.cache.enabled\": [\n        \"PUBLIC_CACHE_ENABLED\",\n        \"false\",\n        parse_boolean,\n        None,\n    ],\n    \"omero.web.public.cache.key\": [\n        \"PUBLIC_CACHE_KEY\",\n        \"omero.web.public.cache.key\",\n        str,\n        None,\n    ],\n    \"omero.web.public.cache.timeout\": [\"PUBLIC_CACHE_TIMEOUT\", 60 * 60 * 24, int, None],\n    # Social media integration\n    \"omero.web.sharing.twitter\": [\n        \"SHARING_TWITTER\",\n        \"{}\",\n        json.loads,\n        (\n            \"Dictionary of `server-name: @twitter-site-username`, where \"\n            \"server-name matches a name from `omero.web.server_list`. \"\n            'For example: ``\\'{\"omero\": \"@openmicroscopy\"}\\'``'\n        ),\n    ],\n    \"omero.web.sharing.opengraph\": [\n        \"SHARING_OPENGRAPH\",\n        \"{}\",\n        json.loads,\n        (\n            \"Dictionary of `server-name: site-name`, where \"\n            \"server-name matches a name from `omero.web.server_list`. \"\n            'For example: ``\\'{\"omero\": \"Open Microscopy\"}\\'``'\n        ),\n    ],\n    # Application configuration\n    \"omero.web.server_list\": [\n        \"SERVER_LIST\",\n        '[[\"%s\", 4064, \"omero\"]]' % CUSTOM_HOST,\n        json.loads,\n        \"A list of servers the Web client can connect to.\",\n    ],\n    \"omero.web.ping_interval\": [\n        \"PING_INTERVAL\",\n        60000,\n        int,\n        \"Timeout interval between ping invocations in seconds\",\n    ],\n    \"omero.web.chunk_size\": [\n        \"CHUNK_SIZE\",\n        1048576,\n        int,\n        \"Size, in bytes, of the \u201cchunk\u201d\",\n    ],\n    \"omero.web.webgateway_cache\": [\"WEBGATEWAY_CACHE\", None, leave_none_unset, None],\n    \"omero.web.maximum_multifile_download_size\": [\n        \"MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\",\n        1024 ** 3,\n        int,\n        \"Prevent multiple files with total aggregate size greater than this \"\n        \"value in bytes from being downloaded as a zip archive.\",\n    ],\n    # VIEWER\n    \"omero.web.viewer.view\": [\n        \"VIEWER_VIEW\",\n        \"omeroweb.webclient.views.image_viewer\",\n        str,\n        (\n            \"Django view which handles display of, or redirection to, the \"\n            \"desired full image viewer.\"\n        ),\n    ],\n    # OPEN WITH\n    \"omero.web.open_with\": [\n        \"OPEN_WITH\",\n        (\n            '[[\"Image viewer\", \"webgateway\", {\"supported_objects\": [\"image\"],'\n            '\"script_url\": \"webclient/javascript/ome.openwith_viewer.js\"}]]'\n        ),\n        json.loads,\n        (\n            \"A list of viewers that can be used to display selected Images \"\n            \"or other objects. Each viewer is defined as \"\n            '``[\"Name\", \"url\", options]``. Url is reverse(url). '\n            \"Selected objects are added to the url as ?image=:1&image=2\"\n            \"Objects supported must be specified in options with \"\n            'e.g. ``{\"supported_objects\":[\"images\"]}`` '\n            \"to enable viewer for one or more images.\"\n        ),\n    ],\n    # PIPELINE 1.3.20\n    # Pipeline is an asset packaging library for Django, providing both CSS\n    # and JavaScript concatenation and compression, built-in JavaScript\n    # template support, and optional data-URI image and font embedding.\n    \"omero.web.pipeline_js_compressor\": [\n        \"PIPELINE_JS_COMPRESSOR\",\n        None,\n        identity,\n        (\n            \"Compressor class to be applied to JavaScript files. If empty or \"\n            \"None, JavaScript files won't be compressed.\"\n        ),\n    ],\n    \"omero.web.pipeline_css_compressor\": [\n        \"PIPELINE_CSS_COMPRESSOR\",\n        None,\n        identity,\n        (\n            \"Compressor class to be applied to CSS files. If empty or None,\"\n            \" CSS files won't be compressed.\"\n        ),\n    ],\n    \"omero.web.pipeline_staticfile_storage\": [\n        \"STATICFILES_STORAGE\",\n        \"pipeline.storage.PipelineStorage\",\n        str,\n        (\n            \"The file storage engine to use when collecting static files with\"\n            \" the collectstatic management command. See `the documentation \"\n            \"<https://django-pipeline.readthedocs.org/en/latest/storages.html>`_\"\n            \" for more details.\"\n        ),\n    ],\n    # Customisation\n    \"omero.web.login_logo\": [\n        \"LOGIN_LOGO\",\n        None,\n        leave_none_unset,\n        (\n            \"Customize webclient login page with your own logo. Logo images \"\n            \"should ideally be 150 pixels high or less and will appear above \"\n            \"the OMERO logo. You will need to host the image somewhere else \"\n            \"and link to it with the OMERO logo.\"\n        ),\n    ],\n    \"omero.web.login_view\": [\n        \"LOGIN_VIEW\",\n        \"weblogin\",\n        str,\n        (\n            \"The Django view name used for login. Use this to provide an \"\n            \"alternative login workflow.\"\n        ),\n    ],\n    \"omero.web.login_incorrect_credentials_text\": [\n        \"LOGIN_INCORRECT_CREDENTIALS_TEXT\",\n        \"Connection not available, please check your user name and password.\",\n        str,\n        (\n            \"The error message shown to users who enter an incorrect username \"\n            \"or password.\"\n        ),\n    ],\n    \"omero.web.top_logo\": [\n        \"TOP_LOGO\",\n        \"\",\n        str,\n        (\n            \"Customize the webclient top bar logo. The recommended image height \"\n            \"is 23 pixels and it must be hosted outside of OMERO.web.\"\n        ),\n    ],\n    \"omero.web.top_logo_link\": [\n        \"TOP_LOGO_LINK\",\n        \"\",\n        str,\n        (\"The target location of the webclient top logo, default unlinked.\"),\n    ],\n    \"omero.web.user_dropdown\": [\n        \"USER_DROPDOWN\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Whether or not to include a user dropdown in the base template.\"\n            \" Particularly useful when used in combination with the OMERO.web\"\n            \" public user where logging in may not make sense.\"\n        ),\n    ],\n    \"omero.web.feedback.comment.enabled\": [\n        \"FEEDBACK_COMMENT_ENABLED\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Enable the feedback form for comments. \"\n            \"These comments are sent to the URL in ``omero.qa.feedback`` \"\n            \"(OME team by default).\"\n        ),\n    ],\n    \"omero.web.feedback.error.enabled\": [\n        \"FEEDBACK_ERROR_ENABLED\",\n        \"true\",\n        parse_boolean,\n        (\n            \"Enable the feedback form for errors. \"\n            \"These errors are sent to the URL in ``omero.qa.feedback`` \"\n            \"(OME team by default).\"\n        ),\n    ],\n    \"omero.web.staticfile_dirs\": [\n        \"STATICFILES_DIRS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Defines the additional locations the staticfiles app will traverse\"\n            \" if the FileSystemFinder finder is enabled, e.g. if you use the\"\n            \" collectstatic or findstatic management command or use the static\"\n            \" file serving view.\"\n        ),\n    ],\n    \"omero.web.template_dirs\": [\n        \"TEMPLATE_DIRS\",\n        \"[]\",\n        json.loads,\n        (\n            \"List of locations of the template source files, in search order. \"\n            \"Note that these paths should use Unix-style forward slashes.\"\n        ),\n    ],\n    \"omero.web.index_template\": [\n        \"INDEX_TEMPLATE\",\n        None,\n        identity,\n        (\n            \"Define template used as an index page ``http://your_host/omero/``.\"\n            \"If None user is automatically redirected to the login page.\"\n            \"For example use 'webclient/index.html'. \"\n        ),\n    ],\n    \"omero.web.base_include_template\": [\n        \"BASE_INCLUDE_TEMPLATE\",\n        None,\n        identity,\n        (\"Template to be included in every page, at the end of the <body>\"),\n    ],\n    \"omero.web.login_redirect\": [\n        \"LOGIN_REDIRECT\",\n        \"{}\",\n        json.loads,\n        (\n            \"Redirect to the given location after logging in. It only supports \"\n            \"arguments for :djangodoc:`Django reverse function\"\n            \" <ref/urlresolvers/#reverse>`. \"\n            'For example: ``\\'{\"redirect\": [\"webindex\"], \"viewname\":'\n            ' \"load_template\", \"args\":[\"userdata\"], \"query_string\":'\n            ' {\"experimenter\": -1}}\\'``'\n        ),\n    ],\n    \"omero.web.redirect_allowed_hosts\": [\n        \"REDIRECT_ALLOWED_HOSTS\",\n        \"[]\",\n        json.loads,\n        (\n            \"If you wish to allow redirects to an external site, \"\n            \"the domains must be listed here. \"\n            'For example [\"openmicroscopy.org\"].'\n        ),\n    ],\n    \"omero.web.login.show_client_downloads\": [\n        \"SHOW_CLIENT_DOWNLOADS\",\n        \"true\",\n        parse_boolean,\n        (\"Whether to link to official client downloads on the login page\"),\n    ],\n    \"omero.web.login.client_downloads_base\": [\n        \"CLIENT_DOWNLOAD_GITHUB_REPO\",\n        \"ome/omero-insight\",\n        str,\n        (\"GitHub repository containing the Desktop client downloads\"),\n    ],\n    \"omero.web.apps\": [\n        \"ADDITIONAL_APPS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Add additional Django applications. For example, see\"\n            \" :doc:`/developers/Web/CreateApp`\"\n        ),\n    ],\n    \"omero.web.root_application\": [\n        \"OMEROWEB_ROOT_APPLICATION\",\n        \"\",\n        str,\n        (\n            \"Override the root application label that handles ``/``. \"\n            \"**Warning** you must ensure the application's URLs do not conflict \"\n            \"with other applications. \"\n            \"omero-gallery is an example of an application that can be used for \"\n            \"this (set to ``gallery``)\"\n        ),\n    ],\n    \"omero.web.databases\": [\"DATABASES\", \"{}\", json.loads, None],\n    \"omero.web.page_size\": [\n        \"PAGE\",\n        200,\n        int,\n        (\n            \"Number of images displayed within a dataset or 'orphaned'\"\n            \" container to prevent from loading them all at once.\"\n        ),\n    ],\n    \"omero.web.thumbnails_batch\": [\n        \"THUMBNAILS_BATCH\",\n        50,\n        int,\n        (\n            \"Number of thumbnails retrieved to prevent from loading them\"\n            \" all at once. Make sure the size is not too big, otherwise\"\n            \" you may exceed limit request line, see\"\n            \" https://docs.gunicorn.org/en/latest/settings.html\"\n            \"?highlight=limit_request_line\"\n        ),\n    ],\n    \"omero.web.ui.top_links\": [\n        \"TOP_LINKS\",\n        (\n            \"[\"\n            '[\"Data\", \"webindex\", {\"title\": \"Browse Data via Projects, Tags'\n            ' etc\"}],'\n            '[\"History\", \"history\", {\"title\": \"History\"}],'\n            '[\"Help\", \"https://help.openmicroscopy.org/\",'\n            '{\"title\":\"Open OMERO user guide in a new tab\", \"target\":\"new\"}]'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Add links to the top header: links are ``['Link Text', \"\n            \"'link|lookup_view', options]``, where the url is reverse('link'), \"\n            \"simply 'link' (for external urls) or lookup_view is a detailed \"\n            'dictionary {\"viewname\": \"str\", \"args\": [], \"query_string\": '\n            '{\"param\": \"value\" }], '\n            'E.g. ``\\'[\"Webtest\", \"webtest_index\"] or [\"Homepage\",'\n            ' \"http://...\", {\"title\": \"Homepage\", \"target\": \"new\"}'\n            ' ] or [\"Repository\", {\"viewname\": \"webindex\", '\n            '\"query_string\": {\"experimenter\": -1}}, '\n            '{\"title\": \"Repo\"}]\\'``'\n        ),\n    ],\n    \"omero.web.ui.metadata_panes\": [\n        \"METADATA_PANES\",\n        (\n            \"[\"\n            '{\"name\": \"tag\", \"label\": \"Tags\", \"index\": 1},'\n            '{\"name\": \"map\", \"label\": \"Key-Value Pairs\", \"index\": 2},'\n            '{\"name\": \"table\", \"label\": \"Tables\", \"index\": 3},'\n            '{\"name\": \"file\", \"label\": \"Attachments\", \"index\": 4},'\n            '{\"name\": \"comment\", \"label\": \"Comments\", \"index\": 5},'\n            '{\"name\": \"rating\", \"label\": \"Ratings\", \"index\": 6},'\n            '{\"name\": \"other\", \"label\": \"Others\", \"index\": 7}'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Manage Metadata pane accordion. This functionality is limited to\"\n            \" the existing sections.\"\n        ),\n    ],\n    \"omero.web.ui.right_plugins\": [\n        \"RIGHT_PLUGINS\",\n        (\n            '[[\"Acquisition\",'\n            ' \"webclient/data/includes/right_plugin.acquisition.js.html\",'\n            ' \"metadata_tab\"],'\n            # '[\"ROIs\", \"webtest/webclient_plugins/right_plugin.rois.js.html\",\n            # \"image_roi_tab\"],'\n            '[\"Preview\", \"webclient/data/includes/right_plugin.preview.js.html\"'\n            ', \"preview_tab\"]]'\n        ),\n        json.loads,\n        (\n            \"Add plugins to the right-hand panel. \"\n            \"Plugins are ``['Label', 'include.js', 'div_id']``. \"\n            \"The javascript loads data into ``$('#div_id')``.\"\n        ),\n    ],\n    \"omero.web.ui.center_plugins\": [\n        \"CENTER_PLUGINS\",\n        (\n            \"[\"\n            # '[\"Split View\",\n            # \"webtest/webclient_plugins/center_plugin.splitview.js.html\",\n            # \"split_view_panel\"],'\n            \"]\"\n        ),\n        json.loads,\n        (\n            \"Add plugins to the center panels. Plugins are \"\n            \"``['Channel overlay',\"\n            \" 'webtest/webclient_plugins/center_plugin.overlay.js.html',\"\n            \" 'channel_overlay_panel']``. \"\n            \"The javascript loads data into ``$('#div_id')``.\"\n        ),\n    ],\n    # CORS\n    \"omero.web.cors_origin_whitelist\": [\n        \"CORS_ORIGIN_WHITELIST\",\n        \"[]\",\n        json.loads,\n        (\n            \"A list of origin hostnames that are authorized to make cross-site \"\n            \"HTTP requests. \"\n            \"Used by the django-cors-headers app as described at \"\n            \"https://github.com/ottoyiu/django-cors-headers\"\n        ),\n    ],\n    \"omero.web.cors_origin_allow_all\": [\n        \"CORS_ORIGIN_ALLOW_ALL\",\n        \"false\",\n        parse_boolean,\n        (\n            \"If True, cors_origin_whitelist will not be used and all origins \"\n            \"will be authorized to make cross-site HTTP requests.\"\n        ),\n    ],\n    \"omero.web.html_meta_referrer\": [\n        \"HTML_META_REFERRER\",\n        \"origin-when-crossorigin\",\n        str,\n        (\n            \"Default content for the HTML Meta referrer tag. \"\n            \"See https://www.w3.org/TR/referrer-policy/#referrer-policies for \"\n            \"allowed values and https://caniuse.com/#feat=referrer-policy for \"\n            \"browser compatibility. \"\n            \"Warning: Internet Explorer 11 does not support the default value \"\n            'of this setting, you may want to change this to \"origin\" after '\n            \"reviewing the linked documentation.\"\n        ),\n    ],\n    \"omero.web.x_frame_options\": [\n        \"X_FRAME_OPTIONS\",\n        \"SAMEORIGIN\",\n        str,\n        \"Whether to allow OMERO.web to be loaded in a frame.\",\n    ],\n    \"omero.web.django_additional_settings\": [\n        \"DJANGO_ADDITIONAL_SETTINGS\",\n        \"[]\",\n        json.loads,\n        (\n            \"Additional Django settings as list of key-value tuples. \"\n            \"Use this to set or override Django settings that aren't managed by \"\n            'OMERO.web. E.g. ``[\"CUSTOM_KEY\", \"CUSTOM_VALUE\"]``'\n        ),\n    ],\n    \"omero.web.nginx_server_extra_config\": [\n        \"NGINX_SERVER_EXTRA_CONFIG\",\n        \"[]\",\n        json.loads,\n        (\n            \"Extra configuration lines to add to the Nginx server block. \"\n            \"Lines will be joined with \\\\n. \"\n            \"Remember to terminate lines with; when necessary.\"\n        ),\n    ],\n}\n\nDEPRECATED_SETTINGS_MAPPINGS = {\n    # Deprecated settings, description should indicate the replacement.\n    \"omero.web.force_script_name\": [\n        \"FORCE_SCRIPT_NAME\",\n        None,\n        leave_none_unset,\n        (\"Use omero.web.prefix instead.\"),\n    ],\n    \"omero.web.server_email\": [\n        \"SERVER_EMAIL\",\n        None,\n        identity,\n        (\"Use omero.mail.from instead.\"),\n    ],\n    \"omero.web.email_host\": [\n        \"EMAIL_HOST\",\n        None,\n        identity,\n        (\"Use omero.mail.host instead.\"),\n    ],\n    \"omero.web.email_host_password\": [\n        \"EMAIL_HOST_PASSWORD\",\n        None,\n        identity,\n        (\"Use omero.mail.password instead.\"),\n    ],\n    \"omero.web.email_host_user\": [\n        \"EMAIL_HOST_USER\",\n        None,\n        identity,\n        (\"Use omero.mail.username instead.\"),\n    ],\n    \"omero.web.email_port\": [\n        \"EMAIL_PORT\",\n        None,\n        identity,\n        (\"Use omero.mail.port instead.\"),\n    ],\n    \"omero.web.email_subject_prefix\": [\n        \"EMAIL_SUBJECT_PREFIX\",\n        \"[OMERO.web]\",\n        str,\n        (\"Default email subject is no longer configurable.\"),\n    ],\n    \"omero.web.email_use_tls\": [\n        \"EMAIL_USE_TLS\",\n        \"false\",\n        parse_boolean,\n        (\"Use omero.mail.smtp.* instead to set up\" \" javax.mail.Session properties.\"),\n    ],\n    \"omero.web.plate_download.enabled\": [\n        \"PLATE_DOWNLOAD_ENABLED\",\n        \"false\",\n        parse_boolean,\n        (\"Use omero.policy.binary_access instead to restrict download.\"),\n    ],\n    \"omero.web.viewer.initial_zoom_level\": [\n        \"VIEWER_INITIAL_ZOOM_LEVEL\",\n        None,\n        leave_none_unset_int,\n        (\"Use omero.client.viewer.initial_zoom_level instead.\"),\n    ],\n    \"omero.web.send_broken_link_emails\": [\n        \"SEND_BROKEN_LINK_EMAILS\",\n        \"false\",\n        parse_boolean,\n        (\n            \"Replaced by django.middleware.common.BrokenLinkEmailsMiddleware.\"\n            \"To get notification set :property:`omero.web.admins` property.\"\n        ),\n    ],\n}\n\ndel CUSTOM_HOST\n\n\ndef check_worker_class(c):\n    if c == \"gevent\":\n        try:\n            import gevent  # NOQA\n        except ImportError:\n            raise ImportError(\n                \"You are using async workers based \"\n                \"on Greenlets via Gevent. Install gevent\"\n            )\n    return str(c)\n\n\ndef check_threading(t):\n    if t > 1:\n        try:\n            import concurrent.futures  # NOQA\n        except ImportError:\n            raise ImportError(\n                \"You are using sync workers with \" \"multiple threads. Install futures\"\n            )\n    return int(t)\n\n\n# DEVELOPMENT_SETTINGS_MAPPINGS - WARNING: For each setting developer MUST open\n# a ticket that needs to be resolved before a release either by moving the\n# setting to CUSTOM_SETTINGS_MAPPINGS or by removing the setting at all.\nDEVELOPMENT_SETTINGS_MAPPINGS = {\n    \"omero.web.wsgi_worker_class\": [\n        \"WSGI_WORKER_CLASS\",\n        \"sync\",\n        check_worker_class,\n        (\n            \"The default OMERO.web uses sync workers to handle most \u201cnormal\u201d \"\n            \"types of workloads. Check Gunicorn Design Documentation \"\n            \"https://docs.gunicorn.org/en/stable/design.html\"\n        ),\n    ],\n    \"omero.web.wsgi_worker_connections\": [\n        \"WSGI_WORKER_CONNECTIONS\",\n        1000,\n        int,\n        (\n            \"(ASYNC WORKERS only) The maximum number of simultaneous clients. \"\n            \"Check Gunicorn Documentation https://docs.gunicorn.org\"\n            \"/en/stable/settings.html#worker-connections\"\n        ),\n    ],\n    \"omero.web.wsgi_threads\": [\n        \"WSGI_THREADS\",\n        1,\n        check_threading,\n        (\n            \"(SYNC WORKERS only) The number of worker threads for handling \"\n            \"requests. Check Gunicorn Documentation \"\n            \"https://docs.gunicorn.org/en/stable/settings.html#threads\"\n        ),\n    ],\n}\n\n\ndef map_deprecated_settings(settings):\n    m = {}\n    for key, values in settings.items():\n        try:\n            global_name = values[0]\n            m[global_name] = (CUSTOM_SETTINGS[key], key)\n            if len(values) < 5:\n                # Not using default (see process_custom_settings)\n                values.append(False)\n        except KeyError:\n            if len(values) < 5:\n                values.append(True)\n    return m\n\n\ndef process_custom_settings(\n    module, settings=\"CUSTOM_SETTINGS_MAPPINGS\", deprecated=None\n):\n    logging.info(\"Processing custom settings for module %s\" % module.__name__)\n\n    if deprecated:\n        deprecated_map = map_deprecated_settings(getattr(module, deprecated, {}))\n    else:\n        deprecated_map = {}\n\n    for key, values in getattr(module, settings, {}).items():\n        # Django may import settings.py more than once, see:\n        # http://blog.dscpl.com.au/2010/03/improved-wsgi-script-for-use-with.html\n        # In that case, the custom settings have already been processed.\n        if len(values) == 5:\n            continue\n\n        global_name, default_value, mapping, description = values\n\n        try:\n            global_value = CUSTOM_SETTINGS[key]\n            values.append(False)\n        except KeyError:\n            global_value = default_value\n            values.append(True)\n\n        try:\n            using_default = values[-1]\n            if global_name in deprecated_map:\n                dep_value, dep_key = deprecated_map[global_name]\n                if using_default:\n                    logging.warning(\"Setting %s is deprecated, use %s\", dep_key, key)\n                    global_value = dep_value\n                else:\n                    logging.error(\n                        \"%s and its deprecated key %s are both set, using %s\",\n                        key,\n                        dep_key,\n                        key,\n                    )\n            setattr(module, global_name, mapping(global_value))\n        except ValueError as e:\n            raise ValueError(\n                \"Invalid %s (%s = %r). %s. %s\"\n                % (global_name, key, global_value, e.args[0], description)\n            )\n        except ImportError as e:\n            raise ImportError(\n                \"ImportError: %s. %s (%s = %r).\\n%s\"\n                % (e.message, global_name, key, global_value, description)\n            )\n        except LeaveUnset:\n            pass\n\n\nprocess_custom_settings(sys.modules[__name__], \"INTERNAL_SETTINGS_MAPPING\")\nprocess_custom_settings(\n    sys.modules[__name__], \"CUSTOM_SETTINGS_MAPPINGS\", \"DEPRECATED_SETTINGS_MAPPINGS\"\n)\nprocess_custom_settings(sys.modules[__name__], \"DEVELOPMENT_SETTINGS_MAPPINGS\")\n\nif not DEBUG:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n    LOGGING[\"loggers\"][\"django.request\"][\"level\"] = \"INFO\"\n    LOGGING[\"loggers\"][\"django\"][\"level\"] = \"INFO\"\n    LOGGING[\"loggers\"][\"\"][\"level\"] = \"INFO\"\n\n\ndef report_settings(module):\n    from django.views.debug import cleanse_setting\n\n    custom_settings_mappings = getattr(module, \"CUSTOM_SETTINGS_MAPPINGS\", {})\n    for key in sorted(custom_settings_mappings):\n        values = custom_settings_mappings[key]\n        global_name, default_value, mapping, description, using_default = values\n        source = using_default and \"default\" or key\n        global_value = getattr(module, global_name, None)\n        if global_name.isupper():\n            logger.debug(\n                \"%s = %r (source:%s)\",\n                global_name,\n                cleanse_setting(global_name, global_value),\n                source,\n            )\n\n    deprecated_settings = getattr(module, \"DEPRECATED_SETTINGS_MAPPINGS\", {})\n    for key in sorted(deprecated_settings):\n        values = deprecated_settings[key]\n        global_name, default_value, mapping, description, using_default = values\n        global_value = getattr(module, global_name, None)\n        if global_name.isupper() and not using_default:\n            logger.debug(\n                \"%s = %r (deprecated:%s, %s)\",\n                global_name,\n                cleanse_setting(global_name, global_value),\n                key,\n                description,\n            )\n\n\nreport_settings(sys.modules[__name__])\n\nSITE_ID = 1\n\n# Local time zone for this installation. Choices can be found here:\n# http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE\n# although not all variations may be possible on all operating systems.\nTIME_ZONE = \"Europe/London\"\nFIRST_DAY_OF_WEEK = 0  # 0-Monday, ... 6-Sunday\n\n# LANGUAGE_CODE: A string representing the language code for this\n# installation. This should be in standard language format. For example, U.S.\n# English is \"en-us\".\nLANGUAGE_CODE = \"en-gb\"\n\n# SECRET_KEY: A secret key for this particular Django installation. Used to\n# provide a seed in secret-key hashing algorithms. Set this to a random string,\n# the longer, the better. Make this unique, and don't share it with anybody.\ntry:\n    SECRET_KEY\nexcept NameError:\n    secret_path = os.path.join(OMERODIR, \"var\", \"django_secret_key\").replace(\"\\\\\", \"/\")\n    if not os.path.isfile(secret_path):\n        try:\n            secret_key = \"\".join(\n                [\n                    random.SystemRandom().choice(\n                        \"{0}{1}{2}\".format(\n                            string.ascii_letters, string.digits, string.punctuation\n                        )\n                    )\n                    for i in range(50)\n                ]\n            )\n            with os.fdopen(\n                os.open(secret_path, os.O_WRONLY | os.O_CREAT, 0o600), \"w\"\n            ) as secret_file:\n                secret_file.write(secret_key)\n        except IOError:\n            raise IOError(\n                \"Please create a %s file with random characters\"\n                \" to generate your secret key!\" % secret_path\n            )\n    try:\n        with open(secret_path, \"r\") as secret_file:\n            SECRET_KEY = secret_file.read().strip()\n    except IOError:\n        raise IOError(\"Could not find secret key in %s!\" % secret_path)\n\n# USE_I18N: A boolean that specifies whether Django's internationalization\n# system should be enabled.\n# This provides an easy way to turn it off, for performance. If this is set to\n# False, Django will make some optimizations so as not to load the\n# internationalization machinery.\nUSE_I18N = True\n\n# ROOT_URLCONF: A string representing the full Python import path to your root\n# URLconf.\n# For example: \"mydjangoapps.urls\". Can be overridden on a per-request basis\n# by setting the attribute urlconf on the incoming HttpRequest object.\nROOT_URLCONF = \"omeroweb.urls\"\n\n# STATICFILES_FINDERS: The list of finder backends that know how to find\n# static files in various locations. The default will find files stored in the\n# STATICFILES_DIRS setting (using\n# django.contrib.staticfiles.finders.FileSystemFinder) and in a static\n# subdirectory of each app (using\n# django.contrib.staticfiles.finders.AppDirectoriesFinder)\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n    \"pipeline.finders.PipelineFinder\",\n)\n\n# STATICFILES_DIRS: This setting defines the additional locations the\n# staticfiles app will traverse if the FileSystemFinder finder is enabled,\n# e.g. if you use the collectstatic or findstatic management command or use\n# the static file serving view.\n# from CUSTOM_SETTINGS_MAPPINGS\n# STATICFILES_DIRS += ((\"webapp/custom_static\", path/to/statics),)  # noqa\n\n# TEMPLATES: A list containing the settings for all template engines\n# to be used with Django. Each item of the list is a dictionary containing\n# the options for an individual engine.\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": TEMPLATE_DIRS,  # noqa\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"builtins\": [\"omeroweb.webgateway.templatetags.defaulttags\"],\n            \"debug\": DEBUG,  # noqa\n            \"context_processors\": [\n                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this\n                # list if you haven't customized them:\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.i18n\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"django.template.context_processors.tz\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"omeroweb.custom_context_processor.url_suffix\",\n                \"omeroweb.custom_context_processor.base_include_template\",\n            ],\n        },\n    },\n]\n\n# INSTALLED_APPS: A tuple of strings designating all applications that are\n# enabled in this Django installation. Each string should be a full Python\n# path to a Python package that contains a Django application, as created by\n# django-admin.py startapp.\nINSTALLED_APPS = (\n    \"django.contrib.staticfiles\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n)\n\n# ADDITONAL_APPS: We import any settings.py from apps. This allows them to\n# modify settings.\n# We're also processing any CUSTOM_SETTINGS_MAPPINGS defined there.\nfor app in ADDITIONAL_APPS:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n    # Previously the app was added to INSTALLED_APPS as 'omeroweb.app', which\n    # then required the app to reside within or be symlinked from within\n    # omeroweb, instead of just having to be somewhere on the python path.\n    # To allow apps to just be on the path, but keep it backwards compatible,\n    # try to import as omeroweb.app, if it works, keep that in INSTALLED_APPS,\n    # otherwise add it to INSTALLED_APPS just with its own name.\n    try:\n        __import__(\"omeroweb.%s\" % app)\n        INSTALLED_APPS += (\"omeroweb.%s\" % app,)\n    except ImportError:\n        INSTALLED_APPS += (app,)\n    try:\n        logger.debug(\"Attempting to import additional app settings for app: %s\" % app)\n        module = __import__(\"%s.settings\" % app)\n        process_custom_settings(module.settings)\n        report_settings(module.settings)\n    except ImportError:\n        logger.debug(\"Couldn't import settings from app: %s\" % app)\n\nINSTALLED_APPS += (\n    \"omeroweb.feedback\",\n    \"omeroweb.webadmin\",\n    \"omeroweb.webclient\",\n    \"omeroweb.webgateway\",\n    \"omeroweb.webredirect\",\n    \"omeroweb.api\",\n    \"pipeline\",\n)\n\nlogger.debug(\"INSTALLED_APPS=%s\" % [INSTALLED_APPS])\n\n\nPIPELINE = {\n    \"STYLESHEETS\": {\n        \"webgateway_viewer\": {\n            \"source_filenames\": (\n                \"webgateway/css/reset.css\",\n                \"webgateway/css/ome.body.css\",\n                \"webclient/css/dusty.css\",\n                \"webgateway/css/ome.viewport.css\",\n                \"webgateway/css/ome.toolbar.css\",\n                \"webgateway/css/ome.gs_slider.css\",\n                \"webgateway/css/base.css\",\n                \"webgateway/css/ome.snippet_header_logo.css\",\n                \"webgateway/css/ome.postit.css\",\n                \"3rdparty/farbtastic-1.2/farbtastic.css\",\n                \"webgateway/css/ome.colorbtn.css\",\n                \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\",\n                \"3rdparty/jquery-ui-1.10.4/themes/base/jquery-ui.all.css\",\n                \"webgateway/css/omero_image.css\",\n                \"3rdparty/panojs-2.0.0/panojs.css\",\n            ),\n            \"output_filename\": \"omeroweb.viewer.min.css\",\n        },\n    },\n    \"CSS_COMPRESSOR\": \"pipeline.compressors.NoopCompressor\",\n    \"JS_COMPRESSOR\": \"pipeline.compressors.NoopCompressor\",\n    \"JAVASCRIPT\": {\n        \"webgateway_viewer\": {\n            \"source_filenames\": (\n                \"3rdparty/jquery-1.11.1.js\",\n                \"3rdparty/jquery-migrate-1.2.1.js\",\n                \"3rdparty/jquery-ui-1.10.4/js/jquery-ui.1.10.4.js\",\n                \"webgateway/js/ome.popup.js\",\n                \"3rdparty/aop-1.3.js\",\n                \"3rdparty/raphael-2.1.0/raphael.js\",\n                \"3rdparty/raphael-2.1.0/scale.raphael.js\",\n                \"3rdparty/panojs-2.0.0/utils.js\",\n                \"3rdparty/panojs-2.0.0/PanoJS.js\",\n                \"3rdparty/panojs-2.0.0/controls.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\",\n                \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\",\n                \"3rdparty/panojs-2.0.0/control_thumbnail.js\",\n                \"3rdparty/panojs-2.0.0/control_info.js\",\n                \"3rdparty/panojs-2.0.0/control_svg.js\",\n                \"3rdparty/panojs-2.0.0/control_roi.js\",\n                \"3rdparty/panojs-2.0.0/control_scalebar.js\",\n                \"3rdparty/hammer-2.0.2/hammer.min.js\",\n                \"webgateway/js/ome.gs_utils.js\",\n                \"webgateway/js/ome.viewportImage.js\",\n                \"webgateway/js/ome.gs_slider.js\",\n                \"webgateway/js/ome.viewport.js\",\n                \"webgateway/js/omero_image.js\",\n                \"webgateway/js/ome.roidisplay.js\",\n                \"webgateway/js/ome.scalebardisplay.js\",\n                \"webgateway/js/ome.smartdialog.js\",\n                \"webgateway/js/ome.roiutils.js\",\n                \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\",\n                \"webgateway/js/ome.colorbtn.js\",\n                \"webgateway/js/ome.postit.js\",\n                \"3rdparty/jquery.selectboxes-2.2.6.js\",\n                \"3rdparty/farbtastic-1.2/farbtastic.js\",\n                \"3rdparty/jquery.mousewheel-3.0.6.js\",\n            ),\n            \"output_filename\": \"omeroweb.viewer.min.js\",\n        }\n    },\n}\n\n# Prevent scripting attacks from obtaining session cookie\nSESSION_COOKIE_HTTPONLY = True\n\nCSRF_FAILURE_VIEW = \"omeroweb.feedback.views.csrf_failure\"\n\n# Configuration for django-cors-headers app\n# See https://github.com/ottoyiu/django-cors-headers\n# Configration of allowed origins is handled by custom settings above\nCORS_ALLOW_CREDENTIALS = True\n# Needed for Django <1.9 since CSRF_TRUSTED_ORIGINS not supported\nCORS_REPLACE_HTTPS_REFERER = True\n\n# FEEDBACK - DO NOT MODIFY!\n# FEEDBACK_URL: Is now configurable for testing purpuse only. Used in\n# feedback.sendfeedback.SendFeedback class in order to submit errors or\n# comment messages to http://qa.openmicroscopy.org.uk.\n# FEEDBACK_APP: 6 = OMERO.web\nFEEDBACK_APP = 6\n\n# IGNORABLE_404_STARTS:\n# Default: ('/cgi-bin/', '/_vti_bin', '/_vti_inf')\n# IGNORABLE_404_ENDS:\n# Default: ('mail.pl', 'mailform.pl', 'mail.cgi', 'mailform.cgi',\n# 'favicon.ico', '.php')\n\n# SESSION_FILE_PATH: If you're using file-based session storage, this sets the\n# directory in which Django will store session data. When the default value\n# (None) is used, Django will use the standard temporary directory for the\n# system.\nSESSION_FILE_PATH = tempfile.gettempdir()\n\n# FILE_UPLOAD_TEMP_DIR: The directory to store data temporarily while\n# uploading files.\nFILE_UPLOAD_TEMP_DIR = tempfile.gettempdir()\n\n# # FILE_UPLOAD_MAX_MEMORY_SIZE: The maximum size (in bytes) that an upload\n# will be before it gets streamed to the file system.\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # default 2621440 (i.e. 2.5 MB).\n\n# DEFAULT_IMG: Used in\n# webclient.webclient_gateway.OmeroWebGateway.defaultThumbnail in order to\n# load default image while thumbnail can't be retrieved from the server.\nDEFAULT_IMG = os.path.join(\n    os.path.dirname(__file__),\n    \"webgateway\",\n    \"static\",\n    \"webgateway\",\n    \"img\",\n    \"image128.png\",\n).replace(\"\\\\\", \"/\")\n\n# # DEFAULT_USER: Used in\n# webclient.webclient_gateway.OmeroWebGateway.getExperimenterDefaultPhoto in\n# order to load default avatar while experimenter photo can't be retrieved\n# from the server.\nDEFAULT_USER = os.path.join(\n    os.path.dirname(__file__),\n    \"webgateway\",\n    \"static\",\n    \"webgateway\",\n    \"img\",\n    \"personal32.png\",\n).replace(\"\\\\\", \"/\")\n\n# MANAGERS: A tuple in the same format as ADMINS that specifies who should get\n# broken-link notifications when\n# SEND_BROKEN_LINK_EMAILS=True.\nMANAGERS = ADMINS  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n\n# https://docs.djangoproject.com/en/1.6/releases/1.6/#default-session-serialization-switched-to-json\n# JSON serializer, which is now the default, cannot handle\n# omeroweb.connector.Connector object\nSESSION_SERIALIZER = \"django.contrib.sessions.serializers.PickleSerializer\"\n\n# Load custom settings from etc/grid/config.xml\n# Tue  2 Nov 2010 11:03:18 GMT -- ticket:3228\n# MIDDLEWARE: A tuple of middleware classes to use.\nMIDDLEWARE = sort_properties_to_tuple(MIDDLEWARE_CLASSES_LIST)  # noqa\n\nfor k, v in DJANGO_ADDITIONAL_SETTINGS:  # noqa\n    setattr(sys.modules[__name__], k, v)\n\n\n# Load server list and freeze\ndef load_server_list():\n    for s in SERVER_LIST:  # from CUSTOM_SETTINGS_MAPPINGS  # noqa\n        server = (len(s) > 2) and text(s[2]) or None\n        Server(host=text(s[0]), port=int(s[1]), server=server)\n    Server.freeze()\n\n\nload_server_list()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"\nDecorators for use with the webclient application.\n\"\"\"\n\nimport logging\n\nimport omeroweb.decorators\nfrom omero import constants\n\nfrom django.http import HttpResponse\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.core.urlresolvers import NoReverseMatch\n\nfrom omeroweb.webclient.forms import GlobalSearchForm\nfrom omeroweb.utils import reverse_with_params\n\nlogger = logging.getLogger(__name__)\n\n\nclass login_required(omeroweb.decorators.login_required):\n    \"\"\"\n    webclient specific extension of the OMERO.web login_required() decorator.\n    \"\"\"\n\n    def __init__(\n        self,\n        ignore_login_fail=False,\n        setGroupContext=False,\n        login_redirect=None,\n        **kwargs\n    ):\n        \"\"\"\n        Initialises the decorator.\n        \"\"\"\n        super(login_required, self).__init__(**kwargs)\n        self.ignore_login_fail = ignore_login_fail\n        self.setGroupContext = setGroupContext\n        self.login_redirect = login_redirect\n\n    def on_logged_in(self, request, conn):\n        \"\"\"Called whenever the users is successfully logged in.\"\"\"\n        super(login_required, self).on_logged_in(request, conn)\n        self.prepare_session(request)\n        if self.setGroupContext:\n            if request.session.get(\"active_group\"):\n                conn.SERVICE_OPTS.setOmeroGroup(request.session.get(\"active_group\"))\n            else:\n                conn.SERVICE_OPTS.setOmeroGroup(conn.getEventContext().groupId)\n\n    def on_not_logged_in(self, request, url, error=None):\n        \"\"\"\n        This can be used to fail silently (not return 403, 500 etc. E.g.\n        keepalive ping)\n        \"\"\"\n        if self.ignore_login_fail:\n            return HttpResponse(\"Connection Failed\")\n        if self.login_redirect is not None:\n            try:\n                url = reverse(self.login_redirect)\n            except Exception:\n                pass\n        return super(login_required, self).on_not_logged_in(request, url, error)\n\n    def prepare_session(self, request):\n        \"\"\"Prepares various session variables.\"\"\"\n        changes = False\n        if request.session.get(\"callback\") is None:\n            request.session[\"callback\"] = dict()\n            changes = True\n        if request.session.get(\"shares\") is None:\n            request.session[\"shares\"] = dict()\n            changes = True\n        if changes:\n            request.session.modified = True\n\n\nclass render_response(omeroweb.decorators.render_response):\n    \"\"\"\n    Subclass for adding additional data to the 'context' dict passed to\n    templates\n    \"\"\"\n\n    def prepare_context(self, request, context, *args, **kwargs):\n        \"\"\"\n        This allows templates to access the current eventContext and user from\n        the L{omero.gateway.BlitzGateway}.\n        E.g. <h1>{{ ome.user.getFullName }}</h1>\n        If these are not required by the template, then they will not need to\n        be loaded by the Blitz Gateway.\n        The results are cached by Blitz Gateway, so repeated calls have no\n        additional cost.\n        We also process some values from settings and add these to the\n        context.\n        \"\"\"\n\n        super(render_response, self).prepare_context(request, context, *args, **kwargs)\n\n        # we expect @login_required to pass us 'conn', but just in case...\n        if \"conn\" not in kwargs:\n            return\n        conn = kwargs[\"conn\"]\n\n        # omero constants\n        context[\"omero\"] = {\n            \"constants\": {\n                \"NSCOMPANIONFILE\": constants.namespaces.NSCOMPANIONFILE,\n                \"ORIGINALMETADATA\": constants.annotation.file.ORIGINALMETADATA,\n                \"NSCLIENTMAPANNOTATION\": constants.metadata.NSCLIENTMAPANNOTATION,\n            }\n        }\n\n        context.setdefault(\"ome\", {})  # don't overwrite existing ome\n        public_user = omeroweb.decorators.is_public_user(request)\n        if public_user is not None:\n            context[\"ome\"][\"is_public_user\"] = public_user\n        context[\"ome\"][\"user\"] = conn.getUser\n        context[\"ome\"][\"user_id\"] = request.session.get(\"user_id\", conn.getUserId())\n        context[\"ome\"][\"group_id\"] = request.session.get(\"group_id\", None)\n        context[\"ome\"][\"active_group\"] = request.session.get(\n            \"active_group\", conn.getEventContext().groupId\n        )\n        context[\"global_search_form\"] = GlobalSearchForm()\n        context[\"ome\"][\"can_create\"] = request.session.get(\"can_create\", True)\n        # UI server preferences\n        if request.session.get(\"server_settings\"):\n            context[\"ome\"][\"email\"] = request.session.get(\"server_settings\").get(\n                \"email\", False\n            )\n            if request.session.get(\"server_settings\").get(\"ui\"):\n                # don't overwrite existing ui\n                context.setdefault(\"ui\", {\"tree\": {}})\n                context[\"ui\"][\"orphans\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"tree\", {})\n                    .get(\"orphans\")\n                )\n                context[\"ui\"][\"dropdown_menu\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"menu\", {})\n                    .get(\"dropdown\")\n                )\n                context[\"ui\"][\"tree\"][\"type_order\"] = (\n                    request.session.get(\"server_settings\")\n                    .get(\"ui\", {})\n                    .get(\"tree\", {})\n                    .get(\"type_order\")\n                )\n\n        self.load_settings(request, context, conn)\n\n    def load_settings(self, request, context, conn):\n\n        # Process various settings and add to the template context dict\n        ping_interval = settings.PING_INTERVAL\n        if ping_interval > 0:\n            context[\"ping_interval\"] = ping_interval\n\n        top_links = settings.TOP_LINKS\n        links = []\n        for tl in top_links:\n            if len(tl) < 2:\n                continue\n            link = {}\n            link[\"label\"] = tl[0]\n            link_id = tl[1]\n            try:\n                # test if complex dictionary view with args and query_string\n                link[\"link\"] = reverse_with_params(**link_id)\n            except TypeError:\n                # assume is only view name\n                try:\n                    link[\"link\"] = reverse(link_id)\n                except NoReverseMatch:\n                    # assume we've been passed a url\n                    link[\"link\"] = link_id\n            # simply add optional attrs dict\n            if len(tl) > 2:\n                link[\"attrs\"] = tl[2]\n            links.append(link)\n        context[\"ome\"][\"top_links\"] = links\n\n        if settings.TOP_LOGO:\n            context[\"ome\"][\"logo_src\"] = settings.TOP_LOGO\n        if settings.TOP_LOGO_LINK:\n            context[\"ome\"][\"logo_href\"] = settings.TOP_LOGO_LINK\n\n        metadata_panes = settings.METADATA_PANES\n        context[\"ome\"][\"metadata_panes\"] = metadata_panes\n\n        right_plugins = settings.RIGHT_PLUGINS\n        r_plugins = []\n        for rt in right_plugins:\n            label = rt[0]\n            include = rt[1]\n            plugin_id = rt[2]\n            r_plugins.append(\n                {\"label\": label, \"include\": include, \"plugin_id\": plugin_id}\n            )\n        context[\"ome\"][\"right_plugins\"] = r_plugins\n\n        center_plugins = settings.CENTER_PLUGINS\n        c_plugins = []\n        for cp in center_plugins:\n            label = cp[0]\n            include = cp[1]\n            plugin_id = cp[2]\n            c_plugins.append(\n                {\"label\": label, \"include\": include, \"plugin_id\": plugin_id}\n            )\n        context[\"ome\"][\"center_plugins\"] = c_plugins\n\n        context[\"ome\"][\"user_dropdown\"] = settings.USER_DROPDOWN\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#\n#\n# Copyright (c) 2008-2015 University of Dundee.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n#\n# Version: 1.0\n#\n\nimport datetime\nimport time\nimport logging\n\nfrom django.conf import settings\nfrom django import forms\nfrom django.forms.formsets import formset_factory\nfrom django.core.urlresolvers import reverse\n\nfrom omeroweb.custom_forms import NonASCIIForm\nfrom .custom_forms import MetadataModelChoiceField\nfrom .custom_forms import AnnotationModelMultipleChoiceField\nfrom .custom_forms import ObjectModelMultipleChoiceField\nfrom omeroweb.webadmin.custom_forms import ExperimenterModelMultipleChoiceField\nfrom omeroweb.webadmin.custom_forms import GroupModelChoiceField\nfrom omeroweb.webclient.webclient_utils import formatPercentFraction\n\nlogger = logging.getLogger(__name__)\n\n\n##################################################################\n# Static values\n\n# TODO: change to reverse\nhelp_button = \"%swebgateway/img/help16.png\" % settings.STATIC_URL\n\nhelp_enable = (\n    '<span class=\"tooltip\" title=\"Enable/Disable: This option'\n    ' allows the owner to keep the access control of the share.\">'\n    '<img src=\"%s\" /></span>'\n) % help_button\n\nhelp_expire = (\n    '<span class=\"tooltip\" title=\"Expiry date: This date defines'\n    \" when the share will stop being available. Date format:\"\n    ' YYYY-MM-DD.\"><img src=\"%s\" /></span>'\n) % help_button\n\n\n#################################################################\n# Non-model Form\n\n\nclass GlobalSearchForm(NonASCIIForm):\n\n    search_query = forms.CharField(widget=forms.TextInput(attrs={\"size\": 25}))\n\n\nclass ShareForm(NonASCIIForm):\n    def __init__(self, *args, **kwargs):\n        super(ShareForm, self).__init__(*args, **kwargs)\n\n        try:\n            if kwargs[\"initial\"][\"shareMembers\"]:\n                pass\n            self.fields[\"members\"] = ExperimenterModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"experimenters\"],\n                initial=kwargs[\"initial\"][\"shareMembers\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 28}),\n            )\n        except Exception:\n            self.fields[\"members\"] = ExperimenterModelMultipleChoiceField(\n                queryset=kwargs[\"initial\"][\"experimenters\"],\n                widget=forms.SelectMultiple(attrs={\"size\": 28}),\n            )\n        self.fields.keyOrder = [\n            \"message\",\n            \"expiration\",\n            \"enable\",\n            \"members\",\n        ]  # , 'guests']\n\n    message = forms.CharField(widget=forms.Textarea(attrs={\"rows\": 5, \"cols\": 50}))\n    expiration = forms.CharField(\n        max_length=100,\n        widget=forms.TextInput(attrs={\"size\": 10}),\n        label=\"Expiry date\",\n        help_text=help_expire,\n        required=False,\n    )\n    enable = forms.BooleanField(required=False, help_text=help_enable)\n    # guests = MultiEmailField(required=False,\n    # widget=forms.TextInput(attrs={'size':75}))\n\n    def clean_expiration(self):\n        if (\n            self.cleaned_data[\"expiration\"] is not None\n            and len(self.cleaned_data[\"expiration\"]) < 1\n        ):\n            return None\n        if self.cleaned_data[\"expiration\"] is not None:\n            d = str(self.cleaned_data[\"expiration\"]).rsplit(\"-\")\n            try:\n                date = datetime.datetime.strptime(\n                    (\"%s-%s-%s\" % (d[0], d[1], d[2])), \"%Y-%m-%d\"\n                )\n            except Exception:\n                raise forms.ValidationError(\"Date is in the wrong format. YY-MM-DD\")\n            if time.mktime(date.timetuple()) <= time.time():\n                raise forms.ValidationError(\"Expiry date must be in the future.\")\n        return self.cleaned_data[\"expiration\"]\n\n\nclass ContainerForm(NonASCIIForm):\n\n    name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={\"size\": 45}))\n    description = forms.CharField(\n        widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 49}), required=False\n    )\n    owner = forms.CharField(widget=forms.HiddenInput, required=False)\n\n\nclass ContainerNameForm(NonASCIIForm):\n\n    name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={\"size\": 45}))\n\n\nclass ContainerDescriptionForm(NonASCIIForm):\n\n    description = forms.CharField(\n        widget=forms.Textarea(attrs={\"rows\": 3, \"cols\": 39}), required=False\n    )\n\n\nclass BaseAnnotationForm(NonASCIIForm):\n    \"\"\"\n    This is the superclass of the various forms used for annotating single or\n    multiple objects.\n    All these forms use hidden fields to specify the object(s) currently being\n    annotated.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(BaseAnnotationForm, self).__init__(*args, **kwargs)\n\n        images = \"images\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"images\"] or list()\n        if len(images) > 0:\n            try:\n                self.fields[\"image\"] = ObjectModelMultipleChoiceField(\n                    queryset=images,\n                    initial=kwargs[\"initial\"][\"selected\"][\"images\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"image\"] = ObjectModelMultipleChoiceField(\n                    queryset=images,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        datasets = (\n            \"datasets\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"datasets\"] or list()\n        )\n        if len(datasets) > 0:\n            try:\n                self.fields[\"dataset\"] = ObjectModelMultipleChoiceField(\n                    queryset=datasets,\n                    initial=kwargs[\"initial\"][\"selected\"][\"datasets\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"dataset\"] = ObjectModelMultipleChoiceField(\n                    queryset=datasets,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        projects = (\n            \"projects\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"projects\"] or list()\n        )\n        if len(projects) > 0:\n            try:\n                self.fields[\"project\"] = ObjectModelMultipleChoiceField(\n                    queryset=projects,\n                    initial=kwargs[\"initial\"][\"selected\"][\"projects\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"project\"] = ObjectModelMultipleChoiceField(\n                    queryset=projects,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        screens = (\n            \"screens\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"screens\"] or list()\n        )\n        if len(screens) > 0:\n            try:\n                self.fields[\"screen\"] = ObjectModelMultipleChoiceField(\n                    queryset=screens,\n                    initial=kwargs[\"initial\"][\"selected\"][\"screens\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"screen\"] = ObjectModelMultipleChoiceField(\n                    queryset=screens,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        plates = \"plates\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"plates\"] or list()\n        if len(plates) > 0:\n            try:\n                self.fields[\"plate\"] = ObjectModelMultipleChoiceField(\n                    queryset=plates,\n                    initial=kwargs[\"initial\"][\"selected\"][\"plates\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"plate\"] = ObjectModelMultipleChoiceField(\n                    queryset=plates,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        acquisitions = (\n            \"acquisitions\" in kwargs[\"initial\"]\n            and kwargs[\"initial\"][\"acquisitions\"]\n            or list()\n        )\n        if len(acquisitions) > 0:\n            try:\n                self.fields[\"acquisition\"] = ObjectModelMultipleChoiceField(\n                    queryset=acquisitions,\n                    initial=kwargs[\"initial\"][\"selected\"][\"acquisitions\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"acquisition\"] = ObjectModelMultipleChoiceField(\n                    queryset=acquisitions,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        wells = \"wells\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"wells\"] or list()\n        if len(wells) > 0:\n            try:\n                self.fields[\"well\"] = ObjectModelMultipleChoiceField(\n                    queryset=wells,\n                    initial=kwargs[\"initial\"][\"selected\"][\"wells\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"well\"] = ObjectModelMultipleChoiceField(\n                    queryset=wells,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n        shares = \"shares\" in kwargs[\"initial\"] and kwargs[\"initial\"][\"shares\"] or list()\n        if len(shares) > 0:\n            try:\n                self.fields[\"share\"] = ObjectModelMultipleChoiceField(\n                    queryset=shares,\n                    initial=kwargs[\"initial\"][\"selected\"][\"shares\"],\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n            except Exception:\n                self.fields[\"share\"] = ObjectModelMultipleChoiceField(\n                    queryset=shares,\n                    widget=forms.SelectMultiple(attrs={\"size\": 10}),\n                    required=False,\n                )\n\n\nclass TagsAnnotationForm(BaseAnnotationForm):\n    \"\"\"\n    Form for annotating one or more objects with existing Tags or New tags\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(TagsAnnotationForm, self).__init__(*args, **kwargs)\n\n    tags = forms.CharField(required=False, widget=forms.HiddenInput)\n\n    def clean_tags(self):\n        data = self.cleaned_data[\"tags\"]\n        if not data:\n            return []\n        try:\n            data = map(int, data.split(\",\"))\n        except Exception:\n            raise forms.ValidationError()\n        return data\n\n\nclass NewTagsAnnotationForm(forms.Form):\n    \"\"\" Helper form for new tags \"\"\"\n\n    tag = forms.CharField(required=True, widget=forms.HiddenInput)\n    description = forms.CharField(required=False, widget=forms.HiddenInput)\n    tagset = forms.IntegerField(min_value=1, required=False, widget=forms.HiddenInput)\n\n\nNewTagsAnnotationFormSet = formset_factory(NewTagsAnnotationForm, extra=0)\n\n\nclass FilesAnnotationForm(BaseAnnotationForm):\n    def __init__(self, *args, **kwargs):\n        super(FilesAnnotationForm, self).__init__(*args, **kwargs)\n        self.fields[\"files\"] = AnnotationModelMultipleChoiceField(\n            queryset=kwargs[\"initial\"][\"files\"],\n            widget=forms.SelectMultiple(attrs={\"size\": 8, \"class\": \"existing\"}),\n            required=False,\n        )\n\n    annotation_file = forms.FileField(required=False)\n\n\nclass CommentAnnotationForm(BaseAnnotationForm):\n    comment = forms.CharField(widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 39}))\n\n\nclass ActiveGroupForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(ActiveGroupForm, self).__init__(*args, **kwargs)\n        try:\n            self.fields[\"active_group\"] = GroupModelChoiceField(\n                queryset=kwargs[\"initial\"][\"mygroups\"],\n                initial=kwargs[\"initial\"][\"activeGroup\"],\n                empty_label=None,\n                widget=forms.Select(\n                    attrs={\n                        \"onchange\": (\n                            \"window.location.href='\"\n                            + reverse(viewname=\"change_active_group\")\n                            + \"?url=\"\n                            + kwargs[\"initial\"][\"url\"]\n                            + \"&active_group='\"\n                            \"+this.options[this.selectedIndex].value\"\n                        )\n                    }\n                ),\n            )\n        except Exception:\n            self.fields[\"active_group\"] = GroupModelChoiceField(\n                queryset=kwargs[\"initial\"][\"mygroups\"],\n                initial=kwargs[\"initial\"][\"activeGroup\"],\n                empty_label=None,\n                widget=forms.Select(\n                    attrs={\n                        \"onchange\": (\n                            \"window.location.href='\"\n                            + reverse(viewname=\"change_active_group\")\n                            + \"?active_group='\"\n                            \"+this.options[this.selectedIndex].value\"\n                        )\n                    }\n                ),\n            )\n        self.fields.keyOrder = [\"active_group\"]\n\n\nclass WellIndexForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(WellIndexForm, self).__init__(*args, **kwargs)\n        rmin, rmax = kwargs[\"initial\"][\"range\"]\n        choices = [(str(i), \"Field#%i\" % (i - rmin + 1)) for i in range(rmin, rmax + 1)]\n        self.fields[\"index\"] = forms.ChoiceField(\n            choices=tuple(choices),\n            widget=forms.Select(\n                attrs={\n                    \"onchange\": (\"changeField(this.options[this.selectedIndex].value);\")\n                }\n            ),\n        )\n        self.fields.keyOrder = [\"index\"]\n\n\n###############################\n# METADATA FORMS\n\n\ndef save_metadata(obj, name, options=False):\n    s = \"javascript:save_metadata(\" + str(obj) + \", '\" + name + \"', \"\n    if options:\n        s += \"this.options[this.selectedIndex].value);\"\n    else:\n        s += \"this.value);\"\n\n    return s\n\n\ndef set_widget_attrs(field, set_class=True):\n    field.widget.attrs[\"disabled\"] = True\n    if set_class:\n        field.widget.attrs[\"class\"] = \"disabled-metadata\"\n\n\nclass MetadataChannelForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataChannelForm, self).__init__(*args, **kwargs)\n\n        # Logical channel\n\n        # Name\n        logicalCh = kwargs[\"initial\"][\"logicalChannel\"]\n        try:\n            if logicalCh is not None:\n                self.fields[\"name\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(logicalCh.id)}\n                    ),\n                    initial=logicalCh.name,\n                    required=False,\n                )\n            else:\n                self.fields[\"name\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"name\"])\n        except Exception:\n            self.fields[\"name\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"name\"])\n\n        # excitationWave\n        try:\n            if logicalCh is not None:\n                self.fields[\"excitationWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"exWave\"].getValue(),\n                    label=(\"Excitation (%s)\" % kwargs[\"initial\"][\"exWave\"].getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"excitationWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Excitation\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"excitationWave\"])\n        except Exception:\n            self.fields[\"excitationWave\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Excitation\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"excitationWave\"])\n\n        # emissionWave\n        try:\n            if logicalCh is not None:\n                self.fields[\"emissionWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"emWave\"].getValue(),\n                    label=(\"Emission (%s)\" % kwargs[\"initial\"][\"emWave\"].getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"emissionWave\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Emission\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"emissionWave\"])\n        except Exception:\n            self.fields[\"emissionWave\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Emission\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"emissionWave\"])\n\n        # ndFilter\n        try:\n            if logicalCh is not None and logicalCh.ndFilter is not None:\n                self.fields[\"ndFilter\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=formatPercentFraction(logicalCh.ndFilter),\n                    label=\"ND filter (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"ndFilter\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"ND filter (%)\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"ndFilter\"], set_class=False)\n        except Exception:\n            self.fields[\"ndFilter\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"ND filter (%)\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"ndFilter\"], set_class=False)\n\n        # pinHoleSize\n        try:\n            if logicalCh is not None and logicalCh.pinHoleSize is not None:\n                self.fields[\"pinHoleSize\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.pinHoleSize.getValue(),\n                    label=(\"Pin hole size (%s)\" % logicalCh.pinHoleSize.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"pinHoleSize\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Pin hole size\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pinHoleSize\"], set_class=False)\n        except Exception:\n            self.fields[\"pinHoleSize\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pin hole size\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pinHoleSize\"], set_class=False)\n\n        # fluor\n        try:\n            if logicalCh is not None:\n                self.fields[\"fluor\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.fluor,\n                    required=False,\n                )\n            else:\n                self.fields[\"fluor\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"fluor\"], set_class=False)\n        except Exception:\n            self.fields[\"fluor\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"fluor\"], set_class=False)\n\n        # Illumination\n        try:\n            if logicalCh.getIllumination() is not None:\n                self.fields[\"illumination\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"illuminations\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"illumination\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getIllumination(),\n                    required=False,\n                )\n            else:\n                self.fields[\"illumination\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"illuminations\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"illumination\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"illumination\"], set_class=False)\n        except Exception:\n            self.fields[\"illumination\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"illumination\"], set_class=False)\n\n        # contrastMethods\n        try:\n            if logicalCh.contrastMethod is not None:\n                self.fields[\"contrastMethod\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"contrastMethods\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"contrastMethod\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getContrastMethod(),\n                    label=\"Contrast method\",\n                    required=False,\n                )\n            else:\n                self.fields[\"contrastMethod\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"contrastMethods\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"contrastMethod\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Contrast method\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"contrastMethod\"])\n        except Exception:\n            self.fields[\"contrastMethod\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Contrast method\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"contrastMethod\"])\n\n        # Mode\n        try:\n            if logicalCh.getMode() is not None:\n                self.fields[\"mode\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"modes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"mode\", options=True\n                            )\n                        }\n                    ),\n                    initial=logicalCh.getMode().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"mode\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"modes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                logicalCh.id, \"mode\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"mode\"])\n        except Exception:\n            self.fields[\"mode\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"mode\"])\n\n        # pockelCellSetting\n        try:\n            if logicalCh.pockelCellSetting is not None:\n                self.fields[\"pockelCellSetting\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    initial=logicalCh.pockelCellSetting,\n                    label=\"Pockel cell\",\n                    required=False,\n                )\n            else:\n                self.fields[\"pockelCellSetting\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(logicalCh.id, \"name\"),\n                        }\n                    ),\n                    label=\"Pockel cell\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pockelCellSetting\"])\n        except Exception:\n            self.fields[\"pockelCellSetting\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pockel cell\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pockelCellSetting\"])\n\n        self.fields.keyOrder = [\n            \"name\",\n            \"excitationWave\",\n            \"emissionWave\",\n            \"ndFilter\",\n            \"pinHoleSize\",\n            \"fluor\",\n            \"illumination\",\n            \"contrastMethod\",\n            \"mode\",\n            \"pockelCellSetting\",\n        ]\n\n\nclass MetadataDichroicForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataDichroicForm, self).__init__(*args, **kwargs)\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial number\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                                \"serialNumber\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].serialNumber,\n                                \"serialNumber\",\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"dichroic\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"dichroic\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"dichroic\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        self.fields.keyOrder = [\"model\", \"manufacturer\", \"serialNumber\", \"lotNumber\"]\n\n\nclass MetadataMicroscopeForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataMicroscopeForm, self).__init__(*args, **kwargs)\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"microscope\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"microscope\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Serial number\n        try:\n            if kwargs[\"initial\"][\"microscope\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"microscope\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Type\n        try:\n            if kwargs[\"initial\"][\"microscope\"].getMicroscopeType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"microscopeTypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"microscope\"].getMicroscopeType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"microscopeTypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"microscope\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n        ]\n\n\nclass MetadataObjectiveForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataObjectiveForm, self).__init__(*args, **kwargs)\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"objective\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"objective\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Serial Number\n        try:\n            if kwargs[\"initial\"][\"objective\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"objective\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].lotNumber, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"logicalchannel\"]\n                                .getObjective()\n                                .lotNumber,\n                                \"lotNumber\",\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Nominal Magnification\n        try:\n            if kwargs[\"initial\"][\"objective\"].nominalMagnification is not None:\n                self.fields[\"nominalMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"nominalMagnification\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].nominalMagnification,\n                    label=\"Nominal magnification\",\n                    required=False,\n                )\n            else:\n                self.fields[\"nominalMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"nominalMagnification\",\n                            ),\n                        }\n                    ),\n                    label=\"Nominal magnification\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"nominalMagnification\"])\n        except Exception:\n            self.fields[\"nominalMagnification\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Nominal magnification\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"nominalMagnification\"])\n\n        # Calibrated Magnification\n        try:\n            if kwargs[\"initial\"][\"objective\"].calibratedMagnification is not None:\n                self.fields[\"calibratedMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"calibratedMagnification\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].calibratedMagnification,\n                    label=\"Calibrated magnification\",\n                    required=False,\n                )\n            else:\n                self.fields[\"calibratedMagnification\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"calibratedMagnification\",\n                            ),\n                        }\n                    ),\n                    label=\"Calibrated magnification\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"calibratedMagnification\"])\n        except Exception:\n            self.fields[\"calibratedMagnification\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Calibrated magnification\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"calibratedMagnification\"])\n\n        # Lens NA\n        try:\n            if kwargs[\"initial\"][\"objective\"].lensNA is not None:\n                self.fields[\"lensNA\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"lensNA\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].lensNA,\n                    label=\"Lens NA\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lensNA\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"lensNA\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lensNA\"])\n        except Exception:\n            self.fields[\"lensNA\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lens NA\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lensNA\"])\n\n        # Immersion\n        try:\n            if kwargs[\"initial\"][\"objective\"].getImmersion() is not None:\n                self.fields[\"immersion\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"immersions\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"immersion\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getImmersion().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"immersion\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"immersions\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"immersion\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"immersion\"])\n        except Exception:\n            self.fields[\"immersion\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"immersion\"])\n\n        # Correction\n        try:\n            if kwargs[\"initial\"][\"objective\"].getCorrection() is not None:\n                self.fields[\"correction\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"corrections\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"correction\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getCorrection().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"correction\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"corrections\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id,\n                                \"correction\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"correction\"])\n\n        except Exception:\n            self.fields[\"correction\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"correction\"])\n\n        # Working Distance\n        try:\n            if kwargs[\"initial\"][\"objective\"].workingDistance is not None:\n                self.fields[\"workingDistance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"workingDistance\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].workingDistance.getValue(),\n                    label=(\n                        \"Working distance (%s)\"\n                        % kwargs[\"initial\"][\"objective\"].workingDistance.getSymbol()\n                    ),\n                    required=False,\n                )\n            else:\n                self.fields[\"workingDistance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"workingDistance\"\n                            ),\n                        }\n                    ),\n                    label=\"Working distance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"workingDistance\"])\n        except Exception:\n            self.fields[\"workingDistance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Working distance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"workingDistance\"])\n\n        # Iris\n        try:\n            if kwargs[\"initial\"][\"objective\"].getIris() is not None:\n                self.fields[\"iris\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"iris\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objective\"].getIris().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"iris\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objective\"].id, \"iris\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"iris\"])\n        except Exception:\n            self.fields[\"iris\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"iris\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"nominalMagnification\",\n            \"calibratedMagnification\",\n            \"lensNA\",\n            \"immersion\",\n            \"correction\",\n            \"workingDistance\",\n            \"iris\",\n        ]\n\n\nclass MetadataObjectiveSettingsForm(MetadataObjectiveForm):\n\n    BOOLEAN_CHOICES = (\n        (\"\", \"---------\"),\n        (\"True\", \"True\"),\n        (\"False\", \"False\"),\n    )\n\n    def __init__(self, *args, **kwargs):\n        super(MetadataObjectiveSettingsForm, self).__init__(*args, **kwargs)\n\n        # Objective Settings\n\n        # Correction Collar\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].correctionCollar is not None:\n                self.fields[\"correctionCollar\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"correctionCollar\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].correctionCollar,\n                    label=\"Correction collar\",\n                    required=False,\n                )\n            else:\n                self.fields[\"correctionCollar\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"correctionCollar\",\n                            ),\n                        }\n                    ),\n                    label=\"Correction collar\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"correctionCollar\"])\n        except Exception:\n            self.fields[\"correctionCollar\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Correction collar\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"correctionCollar\"])\n\n        # Medium\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].getMedium() is not None:\n                self.fields[\"medium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"medium\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].getMedium().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"medium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"medium\",\n                                options=True,\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"medium\"])\n        except Exception:\n            self.fields[\"medium\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"medium\"])\n\n        # Refractive Index\n        try:\n            if kwargs[\"initial\"][\"objectiveSettings\"].refractiveIndex is not None:\n                self.fields[\"refractiveIndex\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"refractiveIndex\",\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"objectiveSettings\"].refractiveIndex,\n                    label=\"Refractive index\",\n                    required=False,\n                )\n            else:\n                self.fields[\"refractiveIndex\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"objectiveSettings\"].id,\n                                \"refractiveIndex\",\n                            ),\n                        }\n                    ),\n                    label=\"Refractive index\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"refractiveIndex\"])\n        except Exception:\n            self.fields[\"refractiveIndex\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Refractive index\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"refractiveIndex\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"nominalMagnification\",\n            \"calibratedMagnification\",\n            \"lensNA\",\n            \"immersion\",\n            \"correction\",\n            \"workingDistance\",\n            \"iris\",\n            \"correctionCollar\",\n            \"medium\",\n            \"refractiveIndex\",\n        ]\n\n\nclass MetadataFilterForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataFilterForm, self).__init__(*args, **kwargs)\n\n        # Filter\n\n        # Manufacturer\n        try:\n            if kwargs[\"initial\"][\"filter\"].manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"manufacturer\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if kwargs[\"initial\"][\"filter\"].model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"model\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial Number\n        try:\n            if kwargs[\"initial\"][\"filter\"].serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"serialNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number\n        try:\n            if kwargs[\"initial\"][\"filter\"].lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"lotNumber\"\n                            ),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Filter wheel\n        try:\n            if kwargs[\"initial\"][\"filter\"].filterWheel is not None:\n                self.fields[\"filterWheel\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"filterWheel\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].filterWheel,\n                    label=\"Filter wheel\",\n                    required=False,\n                )\n            else:\n                self.fields[\"filterWheel\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"filterWheel\"\n                            ),\n                        }\n                    ),\n                    label=\"Filter wheel\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"filterWheel\"])\n        except Exception:\n            self.fields[\"filterWheel\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Filter wheel\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"filterWheel\"])\n\n        # Type\n        try:\n            if kwargs[\"initial\"][\"filter\"].getFilterType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"].getFilterType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        # Cut in\n        tr = kwargs[\"initial\"][\"filter\"].getTransmittanceRange()\n        try:\n            if tr is not None and tr.cutIn is not None:\n                self.fields[\"cutIn\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutIn\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"filter\"]\n                    .getTransmittanceRange()\n                    .cutIn.getValue(),\n                    label=\"Cut in (%s)\" % tr.cutIn.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutIn\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutIn\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut in\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutIn\"])\n        except Exception:\n            self.fields[\"cutIn\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut in\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutIn\"])\n\n        # Cut out\n        try:\n            if tr is not None and tr.cutOut is not None:\n                self.fields[\"cutOut\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutOut.getValue(),\n                    label=\"Cut out (%s)\" % tr.cutOut.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutOut\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut out\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutOut\"])\n        except Exception:\n            self.fields[\"cutOut\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut out\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutOut\"])\n\n        # Cut in tolerance\n        try:\n            if tr is not None and tr.cutInTolerance is not None:\n                self.fields[\"cutInTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutInTolerance\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutInTolerance.getValue(),\n                    label=(\"Cut in tolerance (%s)\" % tr.cutInTolerance.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutInTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutInTolerance\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut in tolerance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutInTolerance\"])\n        except Exception:\n            self.fields[\"cutInTolerance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut in tolerance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutInTolerance\"])\n\n        # Cut on tolerance\n        try:\n            if tr is not None and tr.cutOutTolerance is not None:\n                self.fields[\"cutOutTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    initial=tr.cutOutTolerance.getValue(),\n                    label=(\"Cut out tolerance (%s)\" % tr.cutOutTolerance.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"cutOutTolerance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"cutOut\"\n                            ),\n                        }\n                    ),\n                    label=\"Cut out tolerance\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"cutOutTolerance\"])\n        except Exception:\n            self.fields[\"cutOutTolerance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Cut out tolerance\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"cutOutTolerance\"])\n\n        # Transmittance\n        try:\n            if kwargs[\"initial\"][\"filter\"].transmittanceRange is not None:\n                self.fields[\"transmittance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"transmittance\"\n                            ),\n                        }\n                    ),\n                    initial=formatPercentFraction(\n                        kwargs[\"initial\"][\"filter\"]\n                        .getTransmittanceRange()\n                        .transmittance\n                    ),\n                    label=\"Transmittance (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"transmittance\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"filter\"].id, \"transmittance\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"transmittance\"])\n        except Exception:\n            self.fields[\"transmittance\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"transmittance\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n            \"filterWheel\",\n            \"cutIn\",\n            \"cutOut\",\n            \"cutInTolerance\",\n            \"cutOutTolerance\",\n            \"transmittance\",\n        ]\n\n\nclass MetadataDetectorForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataDetectorForm, self).__init__(*args, **kwargs)\n\n        detSet = kwargs[\"initial\"][\"detectorSettings\"]\n        detector = kwargs[\"initial\"][\"detector\"]\n\n        # Manufacturer\n        try:\n            if detector is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"manufacturer\"),\n                        }\n                    ),\n                    initial=detector.manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"manufacturer\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if detector is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"model\"),\n                        }\n                    ),\n                    initial=detector.model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # SN\n        try:\n            if detector is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"serialNumber\"),\n                        }\n                    ),\n                    initial=detector.serialNumber,\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"serialNumber\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot number (NB. Untill OMERO model is updated in 4.3, this will\n        # throw since lotNumber is not yet supported)\n        try:\n            if detector is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"lotNumber\"),\n                        }\n                    ),\n                    initial=detector.lotNumber,\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"lotNumber\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Type\n        try:\n            if detector.getDetectorType() is not None:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detector.id, \"type\", options=True)\n                        }\n                    ),\n                    initial=detector.getDetectorType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"type\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"types\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detector.id, \"type\", options=True)\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"type\"])\n        except Exception:\n            self.fields[\"type\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"type\"])\n\n        # Gain\n        try:\n            if detSet is not None:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(detSet.id, \"gain\")}\n                    ),\n                    initial=detSet.gain,\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"gain\"),\n                        }\n                    ),\n                    initial=detector.gain,\n                    required=False,\n                )\n            else:\n                self.fields[\"gain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\"size\": 25, \"onchange\": save_metadata(detSet.id, \"gain\")}\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"gain\"])\n        except Exception:\n            self.fields[\"gain\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"gain\"])\n\n        # Voltage\n        try:\n            if detSet is not None and detSet.voltage is not None:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detSet.voltage.getValue(),\n                    label=\"Voltage (%s)\" % detSet.voltage.getSymbol(),\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detector.voltage.getValue(),\n                    label=\"Voltage (%s)\" % detector.voltage.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"voltage\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"voltage\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"voltage\"])\n        except Exception:\n            self.fields[\"voltage\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"voltage\"])\n\n        # Offset\n        try:\n            if detSet is not None:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"offsetValue\"),\n                        }\n                    ),\n                    initial=detSet.offsetValue,\n                    label=\"Offset\",\n                    required=False,\n                )\n            elif detector is not None:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"offsetValue\"),\n                        }\n                    ),\n                    initial=detector.offsetValue,\n                    label=\"Offset\",\n                    required=False,\n                )\n            else:\n                self.fields[\"offsetValue\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"offsetValue\"),\n                        }\n                    ),\n                    label=\"Offset\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"offsetValue\"])\n        except Exception:\n            self.fields[\"offsetValue\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Offset\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"offsetValue\"])\n\n        # Zoom\n        try:\n            if detector is not None:\n                self.fields[\"zoom\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    initial=detector.zoom,\n                    required=False,\n                )\n            else:\n                self.fields[\"zoom\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"voltage\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"zoom\"])\n        except Exception:\n            self.fields[\"zoom\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"zoom\"])\n\n        # Amplification gain\n        try:\n            if detector is not None:\n                self.fields[\"amplificationGain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"amplificationGain\"),\n                        }\n                    ),\n                    initial=detector.amplificationGain,\n                    label=\"Amplification gain\",\n                    required=False,\n                )\n            else:\n                self.fields[\"amplificationGain\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detector.id, \"amplificationGain\"),\n                        }\n                    ),\n                    label=\"Amplification gain\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"amplificationGain\"])\n        except Exception:\n            self.fields[\"amplificationGain\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Amplification gain\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"amplificationGain\"])\n\n        # Read out rate\n        try:\n            if detSet is not None and detSet.readOutRate is not None:\n                self.fields[\"readOutRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"readOutRate\"),\n                        }\n                    ),\n                    initial=detSet.readOutRate.getValue(),\n                    label=(\"Read out rate (%s)\" % detSet.readOutRate.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"readOutRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(detSet.id, \"readOutRate\"),\n                        }\n                    ),\n                    label=\"Read out rate\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"readOutRate\"])\n        except Exception:\n            self.fields[\"readOutRate\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Read out rate\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"readOutRate\"])\n\n        # Binning\n        try:\n            if detSet is not None:\n                self.fields[\"binning\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"binnings\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detSet.id, \"type\", options=True)\n                        }\n                    ),\n                    initial=detSet.getBinning().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"binning\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"binnings\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(detSet.id, \"type\", options=True)\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"binning\"])\n        except Exception:\n            self.fields[\"binning\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"binning\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"type\",\n            \"gain\",\n            \"voltage\",\n            \"offsetValue\",\n            \"zoom\",\n            \"amplificationGain\",\n            \"readOutRate\",\n            \"binning\",\n        ]\n\n\nclass MetadataLightSourceForm(forms.Form):\n\n    BOOLEAN_CHOICES = (\n        (\"\", \"---------\"),\n        (\"True\", \"True\"),\n        (\"False\", \"False\"),\n    )\n\n    def __init__(self, *args, **kwargs):\n        super(MetadataLightSourceForm, self).__init__(*args, **kwargs)\n\n        lightSource = kwargs[\"initial\"][\"lightSource\"]\n        lightSourceSettings = None\n        if \"lightSourceSettings\" in kwargs[\"initial\"]:\n            lightSourceSettings = kwargs[\"initial\"][\"lightSourceSettings\"]\n\n        self.lightSourceType = lightSource.OMERO_CLASS\n\n        # Manufacturer\n        try:\n            if lightSource.manufacturer is not None:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    initial=lightSource.manufacturer,\n                    required=False,\n                )\n            else:\n                self.fields[\"manufacturer\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n        except Exception:\n            self.fields[\"manufacturer\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"manufacturer\"])\n\n        # Model\n        try:\n            if lightSource.model is not None:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    initial=lightSource.model,\n                    required=False,\n                )\n            else:\n                self.fields[\"model\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"model\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"model\"])\n        except Exception:\n            self.fields[\"model\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"model\"])\n\n        # Serial Number\n        try:\n            if lightSource.serialNumber is not None:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"serialNumber\"),\n                        }\n                    ),\n                    initial=lightSource.serialNumber,\n                    label=\"Serial number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"serialNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"serialNumber\"),\n                        }\n                    ),\n                    label=\"Serial number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n        except Exception:\n            self.fields[\"serialNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Serial number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"serialNumber\"])\n\n        # Lot Number\n        try:\n            if lightSource.lotNumber is not None:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"lotNumber\"),\n                        }\n                    ),\n                    initial=lightSource.lotNumber,\n                    label=\"Lot number\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lotNumber\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"lotNumber\"),\n                        }\n                    ),\n                    label=\"Lot number\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n        except Exception:\n            self.fields[\"lotNumber\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Lot number\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lotNumber\"])\n\n        # Power\n        try:\n            if lightSource.power is not None:\n                self.fields[\"power\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"power\"),\n                        }\n                    ),\n                    initial=lightSource.power.getValue(),\n                    label=\"Power (%s)\" % lightSource.power.getSymbol(),\n                    required=False,\n                )\n            else:\n                self.fields[\"power\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"power\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"power\"])\n        except Exception:\n            self.fields[\"power\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"power\"])\n\n        # Type\n        try:\n            if lightSource.getLightSourceType() is not None:\n                self.fields[\"lstype\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"lstypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Type\",\n                    initial=lightSource.getLightSourceType().value,\n                    required=False,\n                )\n            else:\n                self.fields[\"lstype\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"lstypes\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"type\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Type\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lstype\"])\n        except Exception:\n            self.fields[\"lstype\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Type\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lstype\"])\n\n        # Pump (laser only)\n        try:\n            # Will throw exception for non-Laser lightsources.\n            pump = lightSource.getPump()\n            pumpType = pump.OMERO_CLASS  # E.g. 'Arc'\n            pumpModel = pump.getModel()\n            pumpValue = \"%s: %s\" % (pumpType, pumpModel)\n            self.fields[\"pump\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=pumpValue,\n                required=False,\n            )\n        except Exception:\n            # Not a Laser - don't show Pump\n            self.fields[\"pump\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n        set_widget_attrs(self.fields[\"pump\"])\n\n        # Medium\n        try:\n            if lightSource.getLaserMedium() is not None:\n                self.fields[\"lmedium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"medium\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.getLaserMedium().value,\n                    label=\"Medium\",\n                    required=False,\n                )\n            else:\n                self.fields[\"lmedium\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"mediums\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"medium\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Medium\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"lmedium\"])\n        except Exception:\n            self.fields[\"lmedium\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Medium\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"lmedium\"])\n\n        # Wavelength\n        try:\n            if (\n                lightSourceSettings is not None\n                and lightSourceSettings.wavelength is not None\n            ):\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    initial=lightSourceSettings.wavelength.getValue(),\n                    label=(\n                        \"Wavelength (%s)\" % lightSourceSettings.wavelength.getSymbol()\n                    ),\n                    required=False,\n                )\n            elif lightSource.wavelength is not None:\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    initial=lightSource.wavelength.getValue(),\n                    label=(\"Wavelength (%s)\" % lightSource.wavelength.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"wavelength\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"wavelength\"),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"wavelength\"])\n        except Exception:\n            self.fields[\"wavelength\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"wavelength\"])\n\n        # FrequencyMultiplication\n        try:\n            if lightSource.frequencyMultiplication is not None:\n                self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"frequencyMultiplication\"\n                            ),\n                        }\n                    ),\n                    initial=lightSource.frequencyMultiplication,\n                    label=\"Frequency Multiplication\",\n                    required=False,\n                )\n            else:\n                self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"frequencyMultiplication\"\n                            ),\n                        }\n                    ),\n                    label=\"Frequency Multiplication\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"frequencyMultiplication\"])\n        except Exception:\n            self.fields[\"frequencyMultiplication\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Frequency Multiplication\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"frequencyMultiplication\"])\n\n        # Tuneable\n        try:\n            if lightSource.tuneable is not None:\n                self.fields[\"tuneable\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"tuneable\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.tuneable,\n                    required=False,\n                )\n            else:\n                self.fields[\"tuneable\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"tuneable\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"tuneable\"])\n        except Exception:\n            self.fields[\"tuneable\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"tuneable\"])\n\n        # Pulse\n        try:\n            if lightSource.pulse is not None:\n                self.fields[\"pulse\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"pulses\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pulse\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.pulse,\n                    required=False,\n                )\n            else:\n                self.fields[\"pulse\"] = MetadataModelChoiceField(\n                    queryset=kwargs[\"initial\"][\"pulses\"],\n                    empty_label=\"Not set\",\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pulse\", options=True\n                            )\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pulse\"])\n        except Exception:\n            self.fields[\"pulse\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pulse\"])\n\n        # Repetition Rate\n        try:\n            if lightSource.repetitionRate is not None:\n                self.fields[\"repetitionRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"repetitionRate\"),\n                        }\n                    ),\n                    initial=lightSource.repetitionRate.getValue(),\n                    label=(\n                        \"Repetition rate (%s)\" % lightSource.repetitionRate.getSymbol()\n                    ),\n                    required=False,\n                )\n            else:\n                self.fields[\"repetitionRate\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(lightSource.id, \"repetitionRate\"),\n                        }\n                    ),\n                    label=\"Repetition rate\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"repetitionRate\"])\n        except Exception:\n            self.fields[\"repetitionRate\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Repetition rate\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"repetitionRate\"])\n\n        # Pockel Cell\n        try:\n            if lightSource.pockelCell is not None:\n                self.fields[\"pockelCell\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pockelCell\", options=True\n                            )\n                        }\n                    ),\n                    initial=lightSource.pockelCell,\n                    label=\"Pockel Cell\",\n                    required=False,\n                )\n            else:\n                self.fields[\"pockelCell\"] = forms.ChoiceField(\n                    choices=self.BOOLEAN_CHOICES,\n                    widget=forms.Select(\n                        attrs={\n                            \"onchange\": save_metadata(\n                                lightSource.id, \"pockelCell\", options=True\n                            )\n                        }\n                    ),\n                    label=\"Pockel Cell\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"pockelCell\"])\n        except Exception:\n            self.fields[\"pockelCell\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Pockel Cell\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"pockelCell\"])\n\n        # Attenuation\n        if (\n            lightSourceSettings is not None\n            and lightSourceSettings.attenuation is not None\n        ):\n            self.fields[\"attenuation\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(\n                    attrs={\n                        \"size\": 25,\n                        \"onchange\": save_metadata(\n                            lightSourceSettings.id, \"attenuation\"\n                        ),\n                    }\n                ),\n                initial=formatPercentFraction(lightSourceSettings.attenuation),\n                label=\"Attenuation (%)\",\n                required=False,\n            )\n        else:\n            self.fields[\"attenuation\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n        set_widget_attrs(self.fields[\"attenuation\"])\n\n        self.fields.keyOrder = [\n            \"model\",\n            \"manufacturer\",\n            \"serialNumber\",\n            \"lotNumber\",\n            \"power\",\n            \"lstype\",\n            \"pump\",\n            \"lmedium\",\n            \"wavelength\",\n            \"frequencyMultiplication\",\n            \"tuneable\",\n            \"pulse\",\n            \"repetitionRate\",\n            \"pockelCell\",\n            \"attenuation\",\n        ]\n\n\nclass MetadataEnvironmentForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataEnvironmentForm, self).__init__(*args, **kwargs)\n\n        # Imaging environment\n\n        imagingEnv = kwargs[\"initial\"][\"image\"].getImagingEnvironment()\n        # Temperature\n        try:\n            if imagingEnv.temperature is not None:\n                self.fields[\"temperature\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"temperature\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.temperature.getValue(),\n                    label=(\"Temperature (%s)\" % imagingEnv.temperature.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"temperature\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"temperature\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"temperature\"])\n        except Exception:\n            self.fields[\"temperature\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"temperature\"])\n\n        # Air Pressure\n        try:\n            if imagingEnv.airPressure is not None:\n                self.fields[\"airPressure\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"airPressure\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.airPressure.getValue(),\n                    label=(\"Air Pressure (%s)\" % imagingEnv.airPressure.getSymbol()),\n                    required=False,\n                )\n            else:\n                self.fields[\"airPressure\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"airPressure\"\n                            ),\n                        }\n                    ),\n                    label=\"Air Pressure\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"airPressure\"])\n        except Exception:\n            self.fields[\"airPressure\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                label=\"Air Pressure\",\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"airPressure\"])\n\n        # Humidity\n        try:\n            if imagingEnv.humidity is not None:\n                self.fields[\"humidity\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"humidity\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.humidity,\n                    required=False,\n                )\n            else:\n                self.fields[\"humidity\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"humidity\"\n                            ),\n                        }\n                    ),\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"humidity\"])\n        except Exception:\n            self.fields[\"humidity\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"humidity\"])\n\n        # CO2 percent\n        try:\n            if imagingEnv.co2percent is not None:\n                self.fields[\"co2percent\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"co2percent\"\n                            ),\n                        }\n                    ),\n                    initial=imagingEnv.co2percent,\n                    label=\"CO2 (%)\",\n                    required=False,\n                )\n            else:\n                self.fields[\"co2percent\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"co2percent\"\n                            ),\n                        }\n                    ),\n                    label=\"CO2 (%)\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"co2percent\"])\n        except Exception:\n            self.fields[\"co2percent\"] = forms.CharField(\n                max_length=10,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"CO2 (%)\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"co2percent\"])\n\n        self.fields.keyOrder = [\"airPressure\", \"co2percent\", \"humidity\", \"temperature\"]\n\n\nclass MetadataStageLabelForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(MetadataStageLabelForm, self).__init__(*args, **kwargs)\n\n        # Stage label\n\n        # Position x\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positionx\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionx\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positionx,\n                    label=\"Position X\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positionx\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionx\"\n                            ),\n                        }\n                    ),\n                    label=\"Position X\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positionx\"])\n        except Exception:\n            self.fields[\"positionx\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position X\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionx\"])\n\n        # Position y\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positiony\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positiony\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positiony,\n                    label=\"Position Y\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positiony\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positiony\"\n                            ),\n                        }\n                    ),\n                    label=\"Position Y\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positiony\"])\n        except Exception:\n            self.fields[\"positiony\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position Y\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionx\"])\n\n        # Position z\n        try:\n            if kwargs[\"initial\"][\"image\"].getStageLabel() is not None:\n                self.fields[\"positionz\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionz\"\n                            ),\n                        }\n                    ),\n                    initial=kwargs[\"initial\"][\"image\"].getStageLabel().positionz,\n                    label=\"Position Z\",\n                    required=False,\n                )\n            else:\n                self.fields[\"positionz\"] = forms.CharField(\n                    max_length=100,\n                    widget=forms.TextInput(\n                        attrs={\n                            \"size\": 25,\n                            \"onchange\": save_metadata(\n                                kwargs[\"initial\"][\"image\"].id, \"positionz\"\n                            ),\n                        }\n                    ),\n                    label=\"Position Z\",\n                    required=False,\n                )\n            set_widget_attrs(self.fields[\"positionz\"])\n        except Exception:\n            self.fields[\"positionz\"] = forms.CharField(\n                max_length=100,\n                widget=forms.TextInput(attrs={\"size\": 25}),\n                initial=\"N/A\",\n                label=\"Position Z\",\n                required=False,\n            )\n            set_widget_attrs(self.fields[\"positionz\"])\n\n        self.fields.keyOrder = [\"positionx\", \"positiony\", \"positionz\"]\n", "\n//   Copyright (C) 2015 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n//   Here we setup and configure the jstree\n\n// jQuery load callback...\n$(function() {\n\n    // Flag holding curent single / multi selection status\n    var multiselection = false;\n\n    // Select jstree and then cascade handle events and setup the tree.\n    var jstree = $(\"#dataTree\")\n    .on('changed.jstree', function (e, data) {\n        var inst = data.instance;\n        buttonsShowHide(inst.get_selected(true), inst);\n\n        // Load on selection, but not open because that breaks key navigation\n        if (data.node &&\n            inst.is_parent(data.node) &&\n            !inst.is_loaded(data.node) &&\n            !inst.is_loading(data.node)) {\n            inst.load_node(data.node);\n        }\n\n        multiselection = data.selected.length > 1;\n\n        OME.tree_selection_changed(data, e);\n        if (OME.hideWellBirdsEye) {\n            OME.hideWellBirdsEye();\n        }\n    })\n    .on('selection_change.ome', function(e, nElements) {\n        multiselection = nElements > 1;\n        // NB: Don't return false - let event bubble up to $(\"body\")\n    })\n    .on('copy_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is pasted\n        * Updates the server, adding the new link\n        */\n        var inst = data.instance;\n\n        // The data is not cloned when the node is copied, do that manually\n        data.node.data = JSON.parse(JSON.stringify(data.original.data));\n\n        // Copy the data for any child nodes in the copy as well\n        for(var i = 0; i < data.original.children_d.length; i++) {\n            var originalData = inst.get_node(data.original.children_d[i]).data;\n            originalData = JSON.parse(JSON.stringify(originalData));\n            inst.get_node(data.node.children_d[i]).data = originalData;\n        }\n\n        // Remove potential duplicate node\n        var childExists = removeDuplicate(inst, data.node, data.parent);\n\n        // Persist\n        if (!childExists) {\n            $.when(linkNode(inst, data.node, inst.get_node(data.parent))).done(function() {\n                update_thumbnails_panel(e, data);\n            });\n        } else {\n            update_thumbnails_panel(e, data);\n        }\n\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n\n        // Add to other identical nodes as well\n        updateParentInsertNode(inst, data.node, inst.get_node(data.parent), data.position);\n    })\n    .on('move_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is moved\n        * Updates the server, removing the old link and adding the new\n        */\n        var inst = data.instance;\n        // Remove potential duplicate node\n        var childExists = removeDuplicate(inst, data.node, data.parent);\n\n        // trigger ome remove\n        $(\"body\").trigger('removed_node.jstree.ome', data.node.data.obj);\n\n        // Persist\n        var linkPromise;\n        // If the move is orphaning an object, do not persist the link\n        if (data.parent.type !== 'experimenter' &&\n            data.parent.type !== 'orphaned' && !childExists) {\n            linkPromise = linkNode(inst, data.node, inst.get_node(data.parent));\n        }\n        var unlinkPromise = unlinkNode(inst, data.node, inst.get_node(data.old_parent));\n\n        $.when(linkPromise, unlinkPromise).done(function() {\n            update_thumbnails_panel(e, data);\n        });\n\n        // Add/Remove node to/from other identical nodes as well\n        updateParentInsertNode(inst, data.node, inst.get_node(data.parent), data.position);\n        updateParentRemoveNode(inst, data.node, inst.get_node(data.old_parent));\n\n        // Update the child counts\n        OME.updateNodeChildCount(inst, data.parent);\n        OME.updateNodeChildCount(inst, data.old_parent);\n\n    })\n    .on('delete_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is deleted\n        * Simply removes the node, we do not update the server here as there\n        * is a need to delete nodes without persisting. E.g. when a dataset\n        * is updated to match another instance of itself elsewhere in the tree\n        */\n        var inst = data.instance;\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n    })\n    .on('create_node.jstree', function(e, data) {\n        /**\n        * Fired when a node is created\n        * Simply adds the node, we do not update the server here as there\n        * is a need to create nodes without persisting. E.g. when a dataset\n        * is updated to match another instance of itself elsewhere in the tree\n        */\n        var inst = data.instance;\n\n        // Update the child count\n        OME.updateNodeChildCount(inst, data.parent);\n    })\n    .on('loaded.jstree', function(e, data) {\n        /**\n        * Fired when the tree is loaded and ready for action\n        */\n        var inst = data.instance;\n        // Global variable specifies what to select\n        var nodeIds = WEBCLIENT.initially_open;\n        if (nodeIds.length === 0) {\n            // If not found, just select root node\n            inst.select_node('ul > li:first');\n        } else {\n            // We load hierachy for last item (ignore 'well' since not in tree)\n            nodeIds = nodeIds.filter(function(n){return !n.startsWith('well')});\n            var paramSplit = nodeIds[nodeIds.length-1].split(/-(.+)/);\n\n            var payload = {};\n            payload[paramSplit[0]] = paramSplit[1];\n\n            // AJAX Query to get the path of the item we wish to 'show'\n            $.ajax({\n                url: WEBCLIENT.URLS.api_paths_to_object,\n                data : payload,\n                dataType: \"json\",\n                type: \"GET\",\n                success: function(json) {\n                    data = json.paths;\n                    // Use the open_node callback mechanism to facilitate loading the tree to the\n                    // point indicated by the path, starting from the top, 'experimenter'.\n                    if (data.length === 0) {\n                        // If not found, just select root node\n                        inst.select_node('ul > li:first');\n                        return;\n                    }\n                    var getTraverse = function(path) {\n                        var traverse = function(index, parentNode) {\n                            // Get this path component\n                            var comp = path[index];\n                            var lastIndex = path.length - 1;\n                            // Get the node for this path component\n                            var node = inst.locate_node(comp.type + '-' + comp.id, parentNode)[0];\n\n                            // if we've failed to find root, we might be showing \"All Members\". Try again...\n                            if (index === 0 && !node) {\n                                node = inst.locate_node(comp.type + '-' + '-1', parentNode)[0];\n                            }\n                            \n                            // If at any point the node doesn't exist, simply give up as the path has\n                            // become invalid\n                            if (!node) {\n                                return;\n                            }\n                            // If we have a 'childPage' greater than 0, need to paginate\n                            if (comp.childPage) {\n                                inst._set_page(node, comp.childPage);\n                            }\n\n                            if (index < lastIndex) {\n                                inst.open_node(node, function() {\n                                    traverse(index += 1, node);\n                                });\n                            // Otherwise select it\n                            } else {\n                                inst.select_node(node);\n                                inst.open_node(node);\n                                // we also focus the node, to scroll to it and setup hotkey events\n                                $(\"#\" + node.id).children('.jstree-anchor').focus();\n                                // Handle multiple selection. E.g. extra images in same dataset\n                                for(var n=1; n<WEBCLIENT.initially_select.length; n++) {\n                                    node = inst.locate_node(WEBCLIENT.initially_select[n], parentNode)[0];\n                                    if(node) {\n                                        inst.select_node(node);\n                                    }\n                                }\n                            }\n                        };\n                        return traverse;\n                    }\n                    var i;\n                    for (i=0; i < (data.length); i++) {\n                        var path = data[i];\n                        var traverse = getTraverse(path)\n                        // Start traversing at the start of the path with no parent node\n                        try {\n                            traverse(0, undefined);\n                        } finally {\n                        }\n                    }\n                },\n\n                error: function(json) {\n                    // Global error handling is sufficient here\n                }\n            });\n        }\n\n        // Update the URL to remove the parameters as they serve to preload data this one\n        // time only\n        // history.pushState({}, '', window.location.pathname);\n    })\n    .on(\"click.jstree\", \".jstree-anchor\", function (e) {\n        e.preventDefault();\n        var datatree = $.jstree.reference($('#dataTree'));\n        // Expand on click (not select because of key navigation)\n        if (datatree.is_parent(this)) {\n            datatree.open_node(this);\n        }\n    })\n    .on(\"dblclick.jstree\", \".jstree-anchor\", function (e) {\n        e.preventDefault();\n        var datatree = $.jstree.reference($('#dataTree'));\n        var node = datatree.get_node(this);\n        if (node) {\n            if (node.type === 'image') {\n                //Open the image viewer for this image\n                var url = WEBCLIENT.URLS.webindex + \"img_detail/\" + node.data.obj.id + \"/\";\n                // Add dataset id so the viewer can know its context\n                var inst = $.jstree.reference('#dataTree');\n                var parent = datatree.get_node(node.parent);\n                if (parent && parent.data) {\n                    if (parent.type === 'dataset') {\n                        url += '?' + parent.type + '=' + parent.data.id\n                    }\n                }\n                window.open(url, '_blank');\n            }\n        }\n    })\n    .on('keydown.jstree', '.jstree-anchor', function (e) {\n        var datatree = $.jstree.reference($('#dataTree')),\n            prev, next;\n\n        switch(e.which) {\n            // Up\n            case 38:\n                e.preventDefault();\n                prev = datatree.get_prev_dom(this);\n                if(prev && prev.length) {\n                    datatree.deselect_all();\n                    datatree.select_node(prev);\n                }\n                break;\n            // Down\n            case 40:\n                e.preventDefault();\n                next = datatree.get_next_dom(this);\n                if(next && next.length) {\n                    datatree.deselect_all();\n                    datatree.select_node(next);\n                }\n                break;\n            // Left\n            case 37:\n                e.preventDefault();\n                if(!datatree.is_open(this)) {\n                    prev = datatree.get_parent(this);\n                    if(prev && prev.length) {\n                        datatree.deselect_all();\n                        datatree.select_node(prev);\n                    }\n                }\n                break;\n            // Right\n            case 39:\n                e.preventDefault();\n                // opening of node is handled by jsTree, we just select...\n                if(!datatree.is_closed(this)) {\n                    next = datatree.get_next_dom(this);\n                    if(next && next.length) {\n                        datatree.deselect_all();\n                        datatree.select_node(next);\n                    }\n                }\n                break;\n        }\n\n    })\n    .on('refresh.jstree', function(){\n        var datatree = $.jstree.reference($('#dataTree'));\n\n        // Use the cached selection in refreshPathsReverse to restore the selection after refresh\n        $.each(refreshPathsReverse, function(index, refreshPathReverse) {\n            // If all parts of the path match the located node then select it\n            var locatedNodes = datatree.locate_node(refreshPathReverse[0][0] +\n                               '-' +\n                               refreshPathReverse[0][1]);\n            $.each(locatedNodes, function(index, node) {\n                var traverseNode = node;\n                var matched = true;\n                $.each(refreshPathReverse, function(index, pathComponent) {\n                    if (traverseNode &&\n                        traverseNode.type === pathComponent[0] &&\n                        traverseNode.data.obj.id === pathComponent[1]) {\n                        // Update traverseNode to be its own parent\n                        traverseNode = datatree.get_node(datatree.get_parent(traverseNode));\n                    } else {\n                        matched = false;\n                        // Exit refreshPathReverse each loop\n                        return false;                            }\n                });\n\n                if (matched) {\n                    datatree.select_node(node);\n                    // Exit locatedNodes each loop\n                    return false;\n                }\n            });\n\n        });\n        // Clear refreshPathsReverse after selection has been restored\n        refreshPathsReverse = [];\n        // Re-enable the refresh button as it may have been disabled to\n        // prevent race conditions occurring from multiple clicks in quick\n        // succession.\n        $('#refreshButton').removeAttr(\"disabled\");\n    })\n\n    // Setup jstree\n    .jstree({\n        'plugins': ['types', 'contextmenu', 'dnd', 'sort', 'locate',\n                    'ometools', 'conditionalselect', 'pagination', 'fields',\n                    'truncatetext', 'childcount', 'omecut'],\n        // The jstree core\n        'locate' : {\n            // Returns a key for this node\n            'locate_function': function(node) {\n                // In some cases, this function is called before the data attribute exists\n                // These should be ignored, this will be called again later when it is\n                // populated.\n                if (!node.hasOwnProperty('data') ||\n                    node.data === undefined ||\n                    node.data === null) {\n                    return false;\n                }\n                return node.type + '-' + node.data.obj.id;\n            }\n        },\n\n        'conditionalselect' : {\n            // Checks if a selection should be allowed\n            'conditionalselect_function': function(node) {\n                var inst = this;\n                var selected = inst.get_selected(true);\n                // As this function will previously have prevented cross-select, just\n                // check the first selection instead.\n                if (selected.length > 0 && selected[0].type !== node.type) {\n                    return false;\n                }\n\n                // Also disallow the selection if it is a multi-select and the new target\n                // is already selected\n                selected = inst.get_selected(true);\n                var allowSelect = true;\n                $.each(selected, function(index, sel) {\n                    if (sel.type === node.type && sel.data.obj.id === node.data.obj.id) {\n                        allowSelect = false;\n                        // Break out of each\n                        return false;\n                    }\n                });\n\n                return allowSelect;\n\n            }\n        },\n        'omecut': {\n            'path_url': WEBCLIENT.URLS.api_paths_to_object\n        },\n        'core' : {\n            'themes': {\n                'dots': false,\n                'variant': 'ome'\n            },\n            'force_text': true,\n            // Make use of function for 'data' because there are some scenarios in which\n            // an ajax call is not used to get the data. Namely, the all-user view\n            'data' : function(node, callback, payload) {\n                // Get the data for this query\n                if (payload === undefined) {\n                    // Check for existing 'payload' data, used to initialise the jsTree\n                    payload = this.element.data('payload');\n                    // clear data\n                    $.removeData(this.element[0], \"payload\");\n                }\n                payload = payload || {}\n                // We always use the parent id to fitler. E.g. experimenter id, project id etc.\n                // Exception to this for orphans as in the case of api_images, id is a dataset\n                if (node.hasOwnProperty('data') && node.type != 'orphaned') {\n                    // NB: In case of loading Tags, we don't want to use 'id' for top level\n                    // since that will filter by tag.\n                    // TODO: fix inconsistency between url apis by using 'owner'\n                    var tagroot = (WEBCLIENT.URLS.tree_top_level === WEBCLIENT.URLS.api_tags_and_tagged &&\n                            node.type === 'experimenter');\n\n                    if (node.data.hasOwnProperty('obj')) {\n                        // Allows to load custom parameters to QUERY_STRING\n                        if (node.data.obj.hasOwnProperty('extra')) {\n                            $.extend(payload, node.data.obj.extra)\n                        }\n                    }\n\n                    if (!tagroot && node.data.hasOwnProperty('obj')) {\n                        // Allows to load custom parameters to QUERY_STRING\n                        payload['id'] = node.data.obj.id;\n                    }\n\n                    if (tagroot) {\n                        // Don't show tags that are in tagsets\n                        payload['orphaned'] = true;\n                    }\n                }\n\n                // Work back up the tree to obtain the id of the user we are viewing,\n                // this is useful in the case of orphaned image listing in particular.\n                // It may also be appropriate to use it to filter the queries in other\n                // places as well.\n                var inst = this;\n\n                // This path does not include the root node so the first entry is always\n                // the experimenter node except on inital load in which case it is false\n                var path = inst.get_path(node, false, true);\n                // Include the experimenter_id if we are loading an experimenter or\n                // orphaned node\n                if (path && (node.type === 'experimenter' || node.type === 'orphaned')) {\n                    payload['experimenter_id'] = inst.get_node(path[0]).data.obj.id;\n                }\n\n                // If this is a node which can have paged results then either specify that\n                // we want the specific page, or use default first page\n\n                // Disable paging for node without counter\n                var nopageTypes = WEBCLIENT.UI.TREE.pagination_nodes;\n                if (nopageTypes.indexOf(node.type) > -1) {\n                    // TODO: temporary workaround to not paginate datasets,\n                    // plates and acquisitions\n                    // see center_plugin.thumbs.js.html\n                    payload['page'] = 0;\n                } else {\n                    // Attempt to get the current page desired if there is one\n                    var page = inst.get_page(node);\n                    payload['page'] = page;\n                }\n\n                // Specify that orphans are specifically sought\n                if (node.type === 'orphaned') {\n                    payload['orphaned'] = true;\n                }\n\n                // Extra data needed for showing thumbs in centre panel\n                if (node.type === 'dataset' || node.type === 'orphaned' || node.type === 'tag') {\n                    payload['sizeXYZ'] = true;\n                    payload['date'] = true;\n                }\n\n                // Always add the group_id from the current context\n                payload['group'] = WEBCLIENT.active_group_id;\n\n\n                // Configure URL for request\n                // Get the type of the node being expanded\n                // Figure out what type of children it should have\n                // Request the list of children from that url, adding any relevant filters\n                var url;\n                if (node.type === 'experimenter') {\n                    // This will be set to containers or tags url, depending on page we're on \n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'map') {\n                    url = WEBCLIENT.URLS.tree_map_level;\n                } else if (node.type === 'tagset') {\n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'tag') {\n                    url = WEBCLIENT.URLS.tree_top_level;\n                } else if (node.type === 'project') {\n                    url = WEBCLIENT.URLS.api_datasets;\n                } else if (node.type === 'dataset') {\n                    url = WEBCLIENT.URLS.api_images;\n                } else if (node.type === 'screen') {\n                    url = WEBCLIENT.URLS.api_plates;\n                } else if (node.type === 'plate') {\n                    url = WEBCLIENT.URLS.api_plate_acquisitions;\n                } else if (node.type === 'orphaned') {\n                    url = WEBCLIENT.URLS.api_images;\n                } else if (node.id === '#') {\n                    // Here we handle root of jsTree\n                    // Experimenhter ID is set for user ID or -1 for entire group\n                    url = WEBCLIENT.URLS.api_experimenter;\n                }\n\n                if (url === undefined) {\n                    return;\n                }\n\n                $.ajax({\n                    url: url,\n                    data: payload,\n                    success: function (data, textStatus, jqXHR) {\n                        callback.call(this, data);\n                    },\n                    error: function (jqXHR, textStatus, errorThrown) {\n                        // Global error handling is sufficient here\n                    },\n                    // Converter is required because the JSON format being returned is not\n                    // jstree specific.\n                    'converters' : {\n                        \"text json\": function (json) {\n                            var data = JSON.parse(json),\n                                jstree_data = [],\n                                node;\n\n                            // Add experimenters to the jstree data structure\n                            // This handles multiple experimenters in the tree\n                            // if (data.hasOwnProperty('experimenters')) {\n                            //     $.each(data.experimenters, function(index, value) {\n                            //         var node = {\n                            //             'data': {'id': value.id, 'obj': value},\n                            //             'text': value.firstName + ' ' + value.lastName,\n                            //             'children': true,\n                            //             'type': 'experimenter',\n                            //             'state': {\n                            //             },\n                            //             'li_attr': {\n                            //                 'data-id': value.id\n                            //             }\n                            //         };\n\n                            //         // Add 'state' opened for the current user by default\n                            //         {% if active_user %}\n                            //             if (value.id == {{ active_user.getId }}) {\n                            //                 node.state['opened'] = true;\n                            //             }\n                            //         {% endif %}\n\n                            //         jstree_data.push(node);\n                            //     });\n                            // }\n                            function makeNode(value, type) {\n                                var rv = {\n                                    'data': {'id': value.id, 'obj': value},\n                                    'text': value.name,\n                                    'children': value.childCount ? true : false,\n                                    'type': type,\n                                    'state': value.state ? value.state : {'opened': false},\n                                    'li_attr': {\n                                        'data-id': value.id\n                                    },\n                                    'extra': value.extra\n                                };\n                                if (type === 'experimenter') {\n                                    rv.text = value.firstName + ' ' + value.lastName;\n                                    rv.state = value.state ? value.state : {'opened': true},\n                                    rv.children = true;\n                                } else if (type === 'tag') {\n                                    // We don't count children for Tags (too expensive?) Assume they have children\n                                    rv.children = true;\n                                    rv.type = value.set ? 'tagset' : 'tag';\n                                    rv.text = value.value;\n                                }\n                                return rv;\n                            }\n\n                            if (data.hasOwnProperty('experimenter')) {\n                                node = makeNode(data.experimenter, 'experimenter');\n                                jstree_data.push(node);\n                            }\n\n                            if (data.hasOwnProperty('maps')) {\n                                $.each(data.maps, function(index, value) {\n                                    var node = makeNode(value, 'map');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add tags to the jstree data structure\n                            if (data.hasOwnProperty('tags')) {\n                                $.each(data.tags, function(index, value) {\n                                    var node = makeNode(value, 'tag');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add projects to the jstree data structure\n                            if (data.hasOwnProperty('projects')) {\n                                $.each(data.projects, function(index, value) {\n                                    var node = makeNode(value, 'project');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add datasets to the jstree data structure\n                            if (data.hasOwnProperty('datasets')) {\n                                $.each(data.datasets, function(index, value) {\n                                    var node = makeNode(value, 'dataset');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add images to the jstree data structure\n                            if (data.hasOwnProperty('images')) {\n                                $.each(data.images, function(index, value) {\n                                    var node = makeNode(value, 'image');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add screens to the jstree data structure\n                            if (data.hasOwnProperty('screens')) {\n                                $.each(data.screens, function(index, value) {\n                                    var node = makeNode(value, 'screen');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add plates to the jstree data structure\n                            if (data.hasOwnProperty('plates')) {\n                                $.each(data.plates, function(index, value) {\n                                    var node = makeNode(value, 'plate');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add acquisitions (runs) to the jstree data structure\n                            if (data.hasOwnProperty('acquisitions')) {\n                                $.each(data.acquisitions, function(index, value) {\n                                    var node = makeNode(value, 'acquisition');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            // Add wells to the jstree data structure\n                            if (data.hasOwnProperty('wells')) {\n                                $.each(data.wells, function(index, value) {\n                                    var node = makeNode(value, 'well');\n                                    jstree_data.push(node);\n                                });\n                            }\n\n                            if (data.hasOwnProperty('orphaned')) {\n                                node = {\n                                    'data': {'obj': data.orphaned},\n                                    'text': data.orphaned.name,\n                                    'children': data.orphaned.childCount > 0 ? true : false,\n                                    'type': 'orphaned'\n                                };\n                                jstree_data.push(node);\n                            }\n\n                            return jstree_data;\n                        }\n\n                    }\n                });\n            },\n            'check_callback': function(operation, node, node_parent, node_position, more) {\n                // This is used to check if we can drag and drop, paste etc.\n                // Before this (and thus before the copy and the paste) the nodes children\n                // are loaded. This is important as it allows us to weed out potential\n                // conflicts in the copy, i.e. where a link to the object already exists\n                // Called once per item being moved\n                // TODO Should be impossible to delete a link from orphans\n                var inst = $.jstree.reference(node);\n                var oldParent;\n\n                // Sometimes '#' pops up in the destination of d'n'd, discount this\n                if (node_parent.id === '#') {\n                    return false;\n                }\n\n                // Discount moves to a duplicate for both dnd checking and actual copy/move\n                // Also ensure sourec and destination are linkable\n                if (operation === 'copy_node' || operation === 'move_node') {\n                    oldParent = inst.get_node(node.parent);\n                    if (oldParent.type === node_parent.type &&\n                        oldParent.data.obj.id === node_parent.data.obj.id) {\n                        return false;\n                    }\n                }\n\n                // On actual copy/move allow all valid\n                if (more && more.core &&\n                    (operation === 'copy_node' || operation === 'move_node')) {\n                    // Check that the user has permission to list on the new parent\n                    // or that their user themselves is the new parent\n                    // or that their 'orphaned' directory is the new parent\n                    if (!OME.nodeHasPermission(node_parent, 'canLink') &&\n                        node_parent.type !== 'experimenter' &&\n                        node_parent.type !== 'orphaned' &&\n                        node_parent.data.obj.id !== WEBCLIENT.active_group_id) {\n                        return false;\n                    }\n                    return true;\n                // For dnd checking if it can copy/move\n                } else if (operation === 'copy_node' || operation === 'move_node') {\n                    // Only allow 'drop' if we 'canLink' or target is 'experimenter'\n                    if (!OME.nodeHasPermission(node_parent, 'canLink') &&\n                            node_parent.type !== 'experimenter') {\n                        return false;\n                    }\n                    // If we are about to make object an orphan, don't allow to\n                    // drop while dragging over parent, or between parent and it's children\n                    if (node_parent.type === 'experimenter') {\n                        if (oldParent && more) {\n                            var pIdx = $(\"#\"+oldParent.id).index();\n                            if (pIdx === node_position && more.pos === \"b\") {\n                                return false;\n                            }\n                            if (pIdx + 1 === node_position && more.pos === \"a\") {\n                                return false;\n                            }\n                        }\n                    }\n\n                    var nodeRules = inst.get_rules(node);\n                    var parentRules = inst.get_rules(node_parent);\n                    if (parentRules.valid_children != -1 &&\n                        parentRules.valid_children.indexOf(node.type) > -1) {\n                        return true;\n                    }\n                    return false;\n                }\n                // Default to allowing all operations\n                // 'copy_node', 'move_node' Handled above\n                // 'delete_node', 'rename_node': true\n                return true;\n            }\n        },\n        'types' : {\n            '#' : {\n                'valid_children': ['experimenter']\n            },\n            'default': {\n                'draggable': false\n            },\n            'experimenter': {\n                'icon' : WEBCLIENT.URLS.static_webclient + 'image/icon_user.png',\n                'valid_children': ['project','dataset','screen','plate', 'tag', 'tagset']\n            },\n            'map': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_map.png',\n                'valid_children': ['project', 'screen'],\n                'draggable': false\n            },\n            'tagset': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tags.png',\n                'valid_children': ['tagset','tag']\n            },\n            'tag': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tag.png',\n                'valid_children': ['project', 'dataset', 'image', 'screen', 'plate', 'acquisition', 'well'],\n                'draggable': true\n            },\n            'project': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder16.png',\n                'valid_children': ['dataset']\n            },\n            'dataset': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_image16.png',\n                'valid_children': ['image'],\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'image': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/image16.png',\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'screen': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_screen16.png',\n                'valid_children': ['plate']\n            },\n            'plate': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_plate16.png',\n                'valid_children': ['acquisition'],\n                'draggable': !WEBCLIENT.TAG_TREE\n            },\n            'acquisition': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/run16.png',\n            },\n            'well': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/well16.png',\n            },\n            'orphaned': {\n                'icon': WEBCLIENT.URLS.static_webclient + 'image/folder_yellow16.png',\n                'valid_children': ['image']\n            }\n\n        },\n        'dnd': {\n            'is_draggable': function(nodes) {\n                var inst = $.jstree.reference(nodes[0]);\n                // Check if the node types are draggable and the particular nodes have the\n                // 'canLink' permission. All must pass\n                // Don't allow dragging of any object from under a tag\n                for (var index in nodes) {\n                    var node = nodes[index];\n                    if (!inst.get_rules(node).draggable ||\n                          !OME.nodeHasPermission(node, 'canLink') ||\n                            inst.get_node(node.parent).type === 'tag'\n                        ) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n        'contextmenu': {\n            'select_node': true,\n            'show_at_node': false,\n            'items' : function(node){\n                var config = {};\n\n                config[\"create\"] = {\n                    \"label\" : \"Create new\",\n                    \"_disabled\": true,\n                };\n\n                var tagTree = (WEBCLIENT.URLS.tree_top_level === WEBCLIENT.URLS.api_tags_and_tagged);\n                if (tagTree) {\n                    config[\"create\"][\"submenu\"] = {\n                        \"tagset\": {\n                            \"label\"     : \"Tag Set\",\n                            \"_disabled\" : true,\n                            \"icon\"      : WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tags.png',\n                            action      : function (node) {OME.handleNewContainer(\"tagset\"); },\n                        },\n                        \"tag\": {\n                            \"label\"     : \"Tag\",\n                            \"_disabled\" : true,\n                            \"icon\"      : WEBCLIENT.URLS.static_webclient + 'image/left_sidebar_icon_tag.png',\n                            action      : function (node) {OME.handleNewContainer(\"tag\"); },\n                        }\n                    };\n                } else {\n                    config[\"create\"][\"submenu\"] = {\n                        \"project\": {\n                            \"label\" : \"Project\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder16.png',\n                            action: function (node) {OME.handleNewContainer(\"project\"); },\n                        },\n                        \"dataset\": {\n                            \"label\" : \"Dataset\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder_image16.png',\n                            action: function (node) {OME.handleNewContainer(\"dataset\"); },\n                          },\n                          \"screen\": {\n                            \"label\" : \"Screen\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/folder_screen16.png',\n                            action: function (node) {OME.handleNewContainer(\"screen\"); },\n                          }\n                    };\n                }\n\n                config[\"ccp\"] = {\n                    \"label\"     : \"Edit\",\n                    \"action\"    : false,\n                    \"_disabled\" : true,\n                    \"submenu\"   : {\n                        \"cut\"   :{\n                            \"label\" : \"Cut Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_cut_16.png',\n                            \"action\": function(data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var objs = inst.get_selected(true);\n                                inst.cut(objs);\n                                // Always disable paste button immediatly after using it\n                                enableToolbarButton('paste', false);\n                            }\n                        },\n                        \"copy\"  : {\n                            \"label\" : \"Copy Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_copy_16.png',\n\n\n                            \"action\": function (data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var objs = inst.get_selected(true);\n                                inst.copy(objs);\n                            }\n\n                        },\n                        \"paste\": {\n                            \"label\" : \"Paste Link\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function(data) {\n                                var inst = $.jstree.reference(data.reference);\n                                var obj = inst.get_node(data.reference);\n                                // Paste whatever is in the paste buffer into obj\n                                inst.paste(obj);\n                                // Always disable paste button immediatly after using it\n                                enableToolbarButton('paste', false);\n                            }\n                        }\n                    }\n                };\n\n                config[\"delete\"] = {\n                    \"label\" : \"Delete\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_delete_16.png',\n                    \"action\": function(){\n                        var deleteUrl = WEBCLIENT.URLS.deletemany,\n                            filesetCheckUrl = WEBCLIENT.URLS.fileset_check;\n                        OME.handleDelete(deleteUrl, filesetCheckUrl, WEBCLIENT.USER.id);\n                    }\n                };\n\n                config[\"chgrp\"] = {\n                    \"label\" : \"Move to Group...\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_user_16.png',\n                    \"action\": function() {\n                        // TODO - make sure this works with new jsTree\n                        OME.handleChgrp(WEBCLIENT.URLS.webindex, WEBCLIENT.URLS.static_webclient);\n                    }\n                };\n\n                config[\"chown\"] = {\n                    // title support needs js-tree patch: 5317ad21c\n                    \"title\": \"Only Admins or Group Owners can change ownership\",\n                    \"label\" : \"Change Owner...\",\n                    \"_disabled\": true,\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_user_16.png',\n                    \"action\": function() {\n                        OME.handleChown(WEBCLIENT.URLS.webindex, WEBCLIENT.URLS.static_webclient);\n                    }\n                };\n                \n                config[\"share\"] = {\n                    \"label\" : \"Create share\",\n                    \"_disabled\": function(){\n                        var selected = $.jstree.reference('#dataTree').get_selected(true);\n                        var enabled = true;\n                        $.each(selected, function(index, node) {\n                            if (node.type != 'image' || !OME.nodeHasPermission(node, 'canLink')) {\n                                enabled = false;\n                                // Break out of $.each\n                                return false;\n                            }\n                        });\n                        return !enabled;\n                    },\n                    \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_toolbar_share2.png',\n                    \"action\": function(){\n                        // We get_selected() within createShare()\n                        OME.createShare();\n                    }\n                };\n\n                config[\"renderingsettings\"] = {\n                    \"label\" : \"Rendering Settings...\",\n                    \"_disabled\": true,\n                    \"action\" : false,\n                    \"submenu\" : {\n                        \"copy_rdef\"  : {\n                            \"label\" : \"Copy\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_copy_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.copyRenderingSettings(WEBCLIENT.URLS.copy_image_rdef_json,\n                                    inst.get_selected(true));\n                                WEBCLIENT.HAS_RDEF = true;\n                            }\n                        },\n                        \"paste_rdef\": {\n                            \"label\" : \"Paste and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.pasteRenderingSettings(WEBCLIENT.URLS.copy_image_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        },\n                        \"reset_rdef\": {\n                            \"label\" : \"Set Imported and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.resetRenderingSettings(WEBCLIENT.URLS.reset_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        },\n                        \"owner_rdef\": {\n                            \"label\" : \"Set Owner's and Save\",\n                            \"_disabled\": true,\n                            \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_basic_paste_16.png',\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree');\n                                OME.applyOwnerRenderingSettings(WEBCLIENT.URLS.reset_owners_rdef_json,\n                                    inst.get_selected(true));\n                            }\n                        }\n                    }\n                };\n                if (WEBCLIENT.OPEN_WITH.length > 0) {\n                    // build a submenu of viewers...\n                    var viewers = WEBCLIENT.OPEN_WITH.map(function(v){\n                        let label = v.label || v.id;\n                        return {\n                            \"label\": label,\n                            \"action\": function() {\n                                var inst = $.jstree.reference('#dataTree'),\n                                    sel = inst.get_selected(true),\n                                    dtypes = sel.map(function(s){\n                                        return s.type + \"=\" + s.data.id;\n                                    }),\n                                    query = dtypes.join(\"&\"),\n                                    // default url includes objects in query\n                                    url = v.url + \"?\" + query;\n                                // if plugin has added a url provider,\n                                // use it to update the url...\n                                if (v.getUrl) {\n                                    // prepare json of selected objects to pass to function\n                                    var selJson = sel.map(function(s){\n                                        // var o = $.extend({}, s.data.obj);\n                                        var o = {'id': s.data.obj.id,\n                                                 'name': s.data.obj.name,\n                                                 'type': s.type};\n                                        return o;\n                                    });\n                                    url = v.getUrl(selJson, v.url);\n                                }\n                                if (typeof url === 'function') {\n                                    // if url is callable, call and return\n                                    url();\n                                    return;\n                                }\n                                // ...otherwise we use default handling...\n                                window.open(url, '_blank');\n                            },\n                            \"_disabled\": function() {\n                                if (!OME.openWithDisabledByAjax) {\n                                    OME.openWithDisabledByAjax = {};\n                                }\n                                var sel = $.jstree.reference('#dataTree').get_selected(true),\n                                    // selType = 'image' or 'images' or 'dataset'\n                                    selType = sel.reduce(function(prev, s){\n                                        return s.type + (sel.length > 1 ? \"s\" : \"\");\n                                    }, \"undefined\"),\n                                    enabled = false;\n                                if (typeof v.isEnabled === \"function\") {\n                                    // If plugin has provided a function 'isEnabled'...\n                                    // prepare json of selected objects to pass to function\n                                    var selJson = sel.map(function(s){\n                                        var o = {'id': s.data.obj.id,\n                                                 'name': s.data.obj.name,\n                                                 'type': s.type};\n                                        return o;\n                                    });\n                                    let selKey = selJson.map(s => s.type + '-' + s.id).join(',');\n                                    if (OME.openWithDisabledByAjax[v.id] && OME.openWithDisabledByAjax[v.id][selKey] !== undefined) {\n                                        return OME.openWithDisabledByAjax[v.id][selKey];\n                                    }\n                                    // The callback function allows openwith to do an async call to establish enabled state\n                                    // and then call the callback with 'enable' true/false \n                                    enabled = v.isEnabled(selJson, function(enable) {\n                                        // If disabled, we change appearance of the menu-item (below), but we also need to make sure it\n                                        // is actually disabled. We can do this by returning 'true' from the _disabled function next\n                                        // time it is called for this open-with option with the same selected items. Set a disabled flag...\n                                        OME.openWithDisabledByAjax[v.id] = {}\n                                        OME.openWithDisabledByAjax[v.id][selKey] = !enable;\n                                        // the openwith script can use this callback to update the enabled state, eg. after an async ajax call.\n                                        // have to find the correct menu-item and disable\n                                        $(\".jstree-contextmenu\").find('li').each(function () {\n                                            let $li = $(this);\n                                            let itemText = $li.text();\n                                            // Find the child <li> with label\n                                            if (itemText.trim() === label) {\n                                                if (enable) {\n                                                    $li.removeClass('vakata-contextmenu-disabled');\n                                                } else {\n                                                    $li.addClass('vakata-contextmenu-disabled');\n                                                }\n                                            }\n                                        });\n\n                                    });\n                                    // OME.openWithDisabledByAjax[v.id] = !enabled;\n                                    return !enabled;\n                                }\n                                // ...Otherwise if supported_objects list is configured...\n                                // v.supported_objects is ['image'] or ['dataset', 'images'] etc.\n                                if (typeof v.supported_objects === \"object\" && v.supported_objects.length > 0) {\n                                    enabled = v.supported_objects.reduce(function(prev, supported){\n                                        // E.g. If supported_objects is 'images'...\n                                        return prev || supported.indexOf(selType) > -1;  // ... selType 'image' OR 'images' are > -1\n                                    }, false);\n                                }\n                                return !enabled;\n                            }\n                        };\n                    });\n                    config[\"open_with\"] = {\n                        \"label\": \"Open With...\",\n                        \"_disabled\": false,\n                        \"icon\"  : WEBCLIENT.URLS.static_webclient + 'image/icon_openwith.png',\n                        \"action\": false,\n                        \"submenu\": viewers\n                    };\n                }\n\n                // List of permissions related disabling\n                // use canLink, canDelete etc classes on each node to enable/disable right-click menu\n\n                var userId = WEBCLIENT.active_user.id,\n                    // admin may be viewing a Group that they are not a member of\n                    memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1,\n                    writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1,\n                    allMembers = userId === -1,\n                    // canCreate if looking at your own data or 'All Members' OR User's data && writeOwned\n                    canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||\n                        (!allMembers && writeOwned)),\n                    canLink = OME.nodeHasPermission(node, 'canLink'),\n                    parentAllowsCreate = (node.type === \"orphaned\" || node.type === \"experimenter\");\n\n                canCreate = canCreate && WEBCLIENT.CAN_CREATE;  // global state for read-only server\n                if(canCreate) {\n                    // Enable tag or P/D/I submenus created above\n                    config[\"create\"][\"_disabled\"] = false;\n                    if (tagTree) {\n                        config[\"create\"][\"submenu\"][\"tagset\"][\"_disabled\"] = false;\n                        config[\"create\"][\"submenu\"][\"tag\"][\"_disabled\"] = false;\n                    } else {\n                        config[\"create\"][\"submenu\"][\"project\"][\"_disabled\"] = false;\n                        if (node.type === \"project\") {\n                            // If Project is selected don't try to create Dataset\n                            // unless we canLink or create link that belongs to user\n                            config[\"create\"][\"submenu\"][\"dataset\"][\"_disabled\"] = !(canLink || writeOwned);\n                        } else {\n                            config[\"create\"][\"submenu\"][\"dataset\"][\"_disabled\"] = false;\n                        }\n                        config[\"create\"][\"submenu\"][\"screen\"][\"_disabled\"] = false;\n                    }\n                }\n\n                // Disable delete if no canDelete permission\n                if (OME.nodeHasPermission(node, 'canDelete')) {\n                    config[\"delete\"][\"_disabled\"] = false;\n                }\n\n                // Enable 'Move to group' if 'canChgrp'\n                if(OME.nodeHasPermission(node, 'canChgrp')) {\n                    // Can chgrp everything except Plate 'run', 'tag' and 'tagset'\n                    if ([\"acquisition\", \"tag\", \"tagset\"].indexOf(node.type) === -1) {\n                        config[\"chgrp\"][\"_disabled\"] = false;\n                    }\n                }\n\n                // Can chown if Admin (with 'Chown' privilege) or Group owner\n                if (WEBCLIENT.current_admin_privileges.indexOf(\"Chown\") > -1 || \n                    WEBCLIENT.leader_of_groups.indexOf(WEBCLIENT.active_group_id) > -1) {\n                        config[\"chown\"][\"title\"] = false;\n                        config[\"chown\"][\"_disabled\"] = false;\n                }\n\n                if (canLink) {\n                    var to_paste = false,\n                        buffer = this.get_buffer(),\n                        parent_id = node.parent,\n                        parent_type = this.get_node(parent_id).type,\n                        node_type = node.type;\n\n                    if(this.can_paste() && buffer.node) {\n                        to_paste = buffer.node[0].type;\n                    }\n\n                    // Currently we allow to Cut, even if we don't delete parent link!\n                    // E.g. can Cut orphaned Image or orphaned Dataset. TODO: review this!\n                    var canCut = ([\"dataset\", \"image\", \"plate\", \"tag\"].indexOf(node_type) > -1);\n                    // In Tag tree. Don't allow cut under tag\n                    if (tagTree && node_type !== \"tag\") {\n                        canCut = false;\n                    }\n\n                    // Currently we only allow Copy if parent is compatible?! TODO: review this!\n                    var canCopy = ((node_type === \"dataset\" && parent_type === \"project\") ||\n                                    (node_type === \"image\" && parent_type === \"dataset\") ||\n                                    (node_type === \"plate\" && parent_type === \"screen\") ||\n                                    (node_type === \"tag\" && parent_type === \"tagset\"));\n                    // In Tag tree, can't Copy anything except tag\n                    if (tagTree && node_type !== \"tag\"){\n                        canCopy = false;\n                    }\n\n                    var canPaste = ((node_type === \"project\" && to_paste === \"dataset\") ||\n                                    (node_type === \"dataset\" && to_paste === \"image\") ||\n                                    (node_type === \"screen\" && to_paste === \"plate\") ||\n                                    (node_type === \"tagset\" && to_paste === \"tag\"));\n                    if (canCut || canCopy || canPaste){\n                        config[\"ccp\"][\"_disabled\"] = false;\n                        config[\"ccp\"][\"submenu\"][\"cut\"][\"_disabled\"] = !canCut;\n                        config[\"ccp\"][\"submenu\"][\"copy\"][\"_disabled\"] = !canCopy;\n                        config[\"ccp\"][\"submenu\"][\"paste\"][\"_disabled\"] = !canPaste;\n                    }\n                }\n\n                // If 'canAnnotate' we can Paste rdefs to various nodes\n                if (OME.nodeHasPermission(node, 'canAnnotate')) {\n                    if (node.type === 'dataset' ||\n                        node.type === 'plate' ||\n                        node.type === 'acquisition' ||\n                        node.type === 'image') {\n\n                        if (WEBCLIENT.HAS_RDEF) {\n                            // If the user has not got an object to copy, don't show the\n                            // paste option as a valid item\n                            config['renderingsettings'][\"submenu\"]['paste_rdef']['_disabled'] = false;\n                        }\n\n                        config['renderingsettings']['_disabled'] = false;\n                        config['renderingsettings'][\"submenu\"]['reset_rdef']['_disabled'] = false;\n                        config['renderingsettings'][\"submenu\"]['owner_rdef']['_disabled'] = false;\n                    }\n                }\n                // Only enable copying if an image is the node and only one node is selected\n                if (node.type === 'image') {\n                    config['renderingsettings']['_disabled'] = false;\n                    config['renderingsettings'][\"submenu\"]['copy_rdef']['_disabled'] = multiselection;\n                }\n                return config;\n            }\n\n        },\n        // TODO Performance of sort may not be realistic. The tree is mostly ordered correctly\n        // already, only insertions need to be corrected manually.\n        'sort': function(nodeId1, nodeId2) {\n            var inst = this;\n            var node1 = inst.get_node(nodeId1);\n            var node2 = inst.get_node(nodeId2);\n\n            function getRanking(node) {\n                // return rank based on 'omero.client.ui.tree.type_order' list\n                // first type is ranked 1 (the highest), last  is the lowest\n                var rank = WEBCLIENT.UI.TREE.type_order.indexOf(node.type);\n                if (rank > -1) {\n                    return rank;\n                }\n                // types not specified in 'omero.client.ui.tree.type_order'\n                // are sorted as loaded to jquery based on sql\n                return WEBCLIENT.UI.TREE.type_order.length + 1;\n            }\n\n            function sortingStrategy(node1, node2) {\n                // sorting strategy\n\n                // If the nodes are experimenters and one of them is the current user.\n                if(node1.type === 'experimenter') {\n                    if (node1.data.obj.id === WEBCLIENT.USER.id) {\n                        return -1;\n                    } else if (node2.data.obj.id === WEBCLIENT.USER.id) {\n                        return 1;\n                    }\n                }\n                var name1 = node1.text.toLowerCase();\n                var name2 = node2.text.toLowerCase();\n\n                // If names are same, sort by ID\n                if (name1 === name2) {\n                    return node1.data.obj.id <= node2.data.obj.id ? -1 : 1;\n                }\n                return name1 <= name2 ? -1 : 1;\n            }\n\n            // if sorting list is turned off mix object and sort by name\n            if (WEBCLIENT.UI.TREE.type_order.indexOf('false') > -1) {\n                return sortingStrategy(node1, node2);\n            }\n            // If the nodes are the same type then just compare lexicographically\n            if (node1.type === node2.type && node1.text && node2.text) {\n                return sortingStrategy(node1, node2);\n            // Otherwise explicitly order the type that might be siblings\n            } else {\n\n                var ranking1 = getRanking(node1);\n                var ranking2 = getRanking(node2);\n                return ranking1 <= ranking2 ? -1 : 1;\n            }\n        }\n    });\n});", "{% extends \"webgateway/base/container3.html\" %}\n{% load i18n %}\n{% load common_filters %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% comment %}\n<!--\n  This page controls the main 3-column layout of the webclient.\n  Templates can extend this one to add content to the 3 columns.\n  The initial template below this one is webclient/data/containers.html which has the data tree.\n-->\n{% endcomment %}\n\n\n{% block title %}\n    {% trans \"Webclient\" %}\n{% endblock %}\n\n\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"3rdparty/jquery.chosen-1.2.0/chosen.css\" %}\" type=\"text/css\" media=\"screen\"/>\n\n{% endblock %}\n\n{% block script %}\n\n    {{ block.super }}\n    <!-- required for the script_launch html below -->\n    {% include \"webclient/base/includes/script_launch_head.html\" %}\n\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.webclient.actions.js\"|add:url_suffix %}\"></script>\n    <script src=\"{% static 'webclient/javascript/jquery.infieldlabel-0.1.js' %}\" type=\"text/javascript\"></script>\n\n    <!-- Centre panel templating -->\n    <script type=\"text/javascript\" src=\"{% static '3rdparty/underscore/underscore-1.8.3-min.js' %}\"></script>\n    <!-- Include the underscore html templates -->\n    <script id=\"icon_thumbnails_template\" type=\"text/template\">\n        {% include \"webclient/data/icon_thumbnails_underscore.html\" %}\n    </script>\n    <script id=\"icon_header_template\" type=\"text/template\">\n        {% include \"webclient/data/icon_header_underscore.html\" %}\n    </script>\n    <script id=\"tags_template\" type=\"text/template\">\n        {% include \"webclient/annotations/tags_underscore.html\" %}\n    </script>\n    <script id=\"fileanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/fileanns_underscore.html\" %}\n    </script>\n    <script id=\"comments_template\" type=\"text/template\">\n        {% include \"webclient/annotations/comments_underscore.html\" %}\n    </script>\n    <script id=\"mapanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/mapanns_underscore.html\" %}\n    </script>\n    <script id=\"ratings_template\" type=\"text/template\">\n        {% include \"webclient/annotations/ratings_underscore.html\" %}\n    </script>\n    <script id=\"customanns_template\" type=\"text/template\">\n        {% include \"webclient/annotations/customanns_underscore.html\" %}\n    </script>\n\n    <!-- Toolbar -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.chosen-1.2.0/chosen.jquery.js\" %}\"></script>\n\n    <!-- The following are required by the right-hand panel, E.g. annotations/metadata_general.html -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.quicksearch-1.0.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.editinplace-0.1.2.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.form-3.51.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.tagging_form.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_tags_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_fileanns_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_comments_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_customanns_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_ratings_pane.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/ome.right_panel_mapanns_pane.js\"|add:url_suffix %}\"></script>\n\n\n    <!-- preview viewer... -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.blockUI-2.66.0.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewport.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewportImage.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_slider.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.scalebardisplay.js\"|add:url_suffix %}\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\" %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.colorbtn.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.postit.css\"|add:url_suffix %}\" />\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.colorbtn.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/omero_image.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.smartdialog.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/aop-1.3.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.postit.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/d3-3.5.17/d3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.histogram.js\"|add:url_suffix %}\"></script>\n\n\n    <!-- ...including big images -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/utils.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/PanoJS.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/controls.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_thumbnail.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_info.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_svg.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_roi.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_scalebar.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.mousewheel-3.0.6.js\" %}\"></script>\n\n    <!-- hammer.js for tablet gestures -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/hammer-2.0.2/hammer.min.js\" %}\"></script>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/panojs-2.0.0/panojs.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.gs_slider.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.viewport.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n\n    <!-- scripts for SPW plate.html -->\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.plateview.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.spwgridview.js\"|add:url_suffix %}\"></script>\n\n    <script>\n\n        // OMERO constants\n        if (OMERO === undefined) {var OMERO = {};}\n        OMERO['constants'] = {\n            'namespaces': {\n                'NSCOMPANIONFILE': \"{{ omero.constants.NSCOMPANIONFILE }}\"\n            },\n            'annotation': {\n                'file': {'ORIGINALMETADATA': \"{{ omero.constants.ORIGINALMETADATA }}\"}\n            },\n            'metadata': {\n                'NSCLIENTMAPANNOTATION': \"{{ omero.constants.NSCLIENTMAPANNOTATION }}\"\n            }\n        };\n\n        // Variables used by static files, particularly ome.tree.js for jstree setup\n        // Also used by right panel annotation tabs\n        var WEBCLIENT = {};\n\n        WEBCLIENT.active_group_id = {{ active_group.id }};\n        WEBCLIENT.USER = {'id': {{ ome.user.id }}, 'fullName': \"{{ ome.user.getFullName }}\"};\n        WEBCLIENT.active_user = {'id': {{ ome.user_id }}, 'fullName': \"{{ active_user.getFullName }}\"};\n        WEBCLIENT.member_of_groups = {{ member_of_groups|json_dumps|safe }};\n        WEBCLIENT.isAdmin = {% if ome.user.isAdmin %}true{% else %}false{% endif %};\n        WEBCLIENT.CAN_CREATE = {{ ome.can_create|json_dumps|safe }};\n        WEBCLIENT.current_admin_privileges = {{ current_admin_privileges|json_dumps|safe }};\n        WEBCLIENT.leader_of_groups = {{ leader_of_groups|json_dumps|safe }};\n\n        WEBCLIENT.URLS = {};\n        WEBCLIENT.URLS.webindex = \"{% url 'webindex' %}\";\n        WEBCLIENT.URLS.api_paths_to_object = \"{% url 'api_paths_to_object' %}\";\n        WEBCLIENT.URLS.api_containers = \"{% url 'api_containers' %}\";\n        WEBCLIENT.URLS.api_datasets = \"{% url 'api_datasets' %}\";\n        WEBCLIENT.URLS.api_images = \"{% url 'api_images' %}\";\n        WEBCLIENT.URLS.api_plates = \"{% url 'api_plates' %}\";\n        WEBCLIENT.URLS.api_plate_acquisitions = \"{% url 'api_plate_acquisitions' %}\";\n        WEBCLIENT.URLS.api_base = \"{% url 'api_base' 0 %}\";\n        WEBCLIENT.URLS.static_webclient = \"{% static 'webclient' %}/\";\n        WEBCLIENT.URLS.static_webgateway = \"{% static 'webgateway' %}/\";\n        WEBCLIENT.URLS.api_tags_and_tagged = \"{% url 'api_tags_and_tagged' %}\";\n        WEBCLIENT.URLS.fileset_check = \"{% url 'fileset_check' 'delete' %}\";\n        WEBCLIENT.URLS.api_parent_links = \"{% url 'api_parent_links' %}\";\n        WEBCLIENT.URLS.deletemany = \"{% url 'manage_action_containers' 'deletemany' %}\";\n        WEBCLIENT.URLS.copy_image_rdef_json = \"{% url 'copy_image_rdef_json' %}\";\n        WEBCLIENT.URLS.reset_owners_rdef_json = \"{% url 'reset_owners_rdef_json' %}\";\n        WEBCLIENT.URLS.reset_rdef_json = \"{% url 'reset_rdef_json' %}\";\n        WEBCLIENT.URLS.script_upload = \"{% url 'script_upload' %}\";\n        // jsTree code in ome.tree.js and center panel code in center_plugin.thumbs.js.html uses initially_select\n        // instead of browser URL since URL may be /webclient/?path=plate.name-barcode|well.name-A1\n\n        WEBCLIENT.initially_select = {{ initially_select|json_dumps|safe }};\n        WEBCLIENT.initially_open = {{ initially_open|json_dumps|safe }};\n\n        {% ifequal menu 'usertags' %}\n            WEBCLIENT.TAG_TREE = true;\n            WEBCLIENT.URLS.tree_top_level = WEBCLIENT.URLS.api_tags_and_tagged;\n        {% else %}\n            WEBCLIENT.URLS.tree_top_level = WEBCLIENT.URLS.api_containers;\n        {% endifequal %}\n\n        WEBCLIENT.URLS.api_experimenter = \"{% url 'api_experimenter' ome.user_id %}\";\n\n        WEBCLIENT.UI = {};\n        WEBCLIENT.UI.TREE = {};\n        WEBCLIENT.UI.TREE.pagination_nodes = [\"experimenter\", \"screen\", \"plate\", \"acquisition\", \"project\", \"tagset\", \"image\"];\n        WEBCLIENT.UI.TREE.type_order = \"{{ui.tree.type_order}}\".toLowerCase().split(\",\").filter(function(e){return e});\n\n        {% if page_size %}\n            var PAGE_SIZE = {{ page_size }};\n        {% endif %}\n\n        WEBCLIENT.HAS_RDEF = false;\n        $.getJSON(\"{% url 'webgateway_get_image_rdef_json' %}\", function(data){\n            WEBCLIENT.HAS_RDEF = !!(data && data.rdef);\n        });\n\n        // ** \"Open With\" config used by E.g. ome.tree.js **\n        // Loaded scripts can call OME.setOpenWithEnabledHandler and/or\n        // OME.setOpenWithActionHandler to override default behaviour\n        WEBCLIENT.OPEN_WITH = [];\n        $.getJSON(\"{% url 'webgateway_open_with_options' %}\", function(data){\n            if (data && data.open_with_options) {\n                WEBCLIENT.OPEN_WITH = data.open_with_options;\n                // Try to load scripts if specified:\n                WEBCLIENT.OPEN_WITH.forEach(function(ow){\n                    if (ow.script_url) {\n                        $.getScript(ow.script_url);\n                    }\n                })\n            }\n        });\n\n        $(document).ready(function(){\n            // initially hidden\n            $(\"#user_dropdown ul\").css('visibility', 'hidden');\n            // show on click\n            $(\"#show_user_dropdown\").click(function(e) {\n                \n                $(\"ul\", $(this).parent()).css('visibility', 'visible');\n                e.preventDefault();\n                return false;\n            });\n            // on hover-out, hide drop-down menus\n            $(\"#user_dropdown ul\").hover(function(){}, function(){\n                $(this).css('visibility', 'hidden');\n            });\n\n            $(\"#top_search_field label\").inFieldLabels();\n            \n            OME.setupAjaxError(\"{% url 'fsend' %}\");      // AJAX 500 need feedback form url\n        });\n\n        // The shown user's ID. This is located here because static javascript files\n        // are not preprocessed by django\n        function activeUserId() {\n            return {{ ome.user_id }};\n        };\n\n        // The currently logged in user ID\n        function currentUserId() {\n            {% if ome.user.id %}\n                return {{ ome.user.id }}\n            {% else %}\n                return undefined;\n            {% endif %}\n        };\n\n    </script>\n\n    <!-- keep-alive ping so that OMERO session doesn't die -->\n    {% include \"webclient/base/includes/ping.html\" %}\n\n    <!-- toolbar helpers -->\n    {% include \"webclient/base/includes/toolbar_forms.html\" %}\n\n    <!-- set-up right panel tabs -->\n    {% include \"webclient/data/includes/right_plugin.general.js.html\" %}\n\n\n    <!-- include scripts for loading data into right-hand tabs -->\n    <!-- these are configured in settings.py under \"omero.web.ui.right_tabs\" -->\n    {% for rt in ome.right_plugins %}\n        {% include rt.include %}\n    {% endfor %}\n    \n    \n    \n{% endblock %}\n\n\n\n{% block middle_header_right %}\n\n        <!-- Global Tools -->\n        <ul class=\"header_toolbar\" id=\"script_notifications\">\n                {% include \"webclient/base/includes/script_launch.html\" %}\n            {% include \"webclient/base/includes/activities_info.html\" %}\n        </ul>\n        \n        <!-- Global Search -->\n        {% include \"webclient/base/includes/search_field.html\" %}\n        \n        <!-- User Dropdown -->\n        {% include \"webclient/base/includes/user_dropdown.html\" %}\n{% endblock %}\n\n\n{% block center %}\n\n<div id=\"center_panel_header\">\n    <div id=\"center_panel_chooser\">\n        {% if ome.center_plugins|length > 0 %}\n            <select id=\"source\">\n                <option value=\"#content_details\">Thumbnails</option>\n                {% for cp in ome.center_plugins %}\n                    <option value=\"#{{ cp.plugin_id }}\">{{ cp.label }}</option>\n                {% endfor %}\n            </select>\n        {% endif %}\n    </div>\n</div>\n\n<div id=\"content_details\" class=\"center_panel_content\"> </div>\n\n{% for cp in ome.center_plugins %}\n    <div id=\"{{ cp.plugin_id }}\" class=\"center_panel_content\"></div>\n{% endfor %}\n\n{% endblock %}\n\n\n\n\n<!-- Right Tabs -->\n\n{% block right %}\n<div>\n    <div id=\"annotation_tabs\" class=\"absolute_fill\">\n        <ul id=\"annotation_tabs_list\">\n            <li><a href=\"#metadata_general\">{% trans \"General\" %}</a></li>\n            <!-- include right tabs, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n            {% for rt in ome.right_plugins %}\n                <li><a href=\"#{{ rt.plugin_id }}\">{{ rt.label }}</a></li>\n            {% endfor %}\n        </ul>\n        <div id=\"metadata_general\" class=\"right_tab_content\" ></div>\n        <!-- include right tab bodies, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n        {% for rt in ome.right_plugins %}\n        <div id=\"{{ rt.plugin_id }}\" class=\"right_tab_content\"></div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}\n\n\n\n", "{% load i18n %}\n{% load common_filters %}\n\n{% comment %}\n<!--\n  Copyright (C) 2011-2021 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n\n\n{% endcomment %}\n\n\n<script type=\"text/javascript\">\nif (typeof OME === \"undefined\") { OME={}; }\n\n    OME.createShare = function() {\n        $(\"#create_share_form\").dialog(\"open\");\n        return false;\n    }\n\n    $(document).ready(function(){\n\n        $(\"#create_share_form\").dialog({\n            title: \"Shares not supported\",\n            autoOpen: false,\n            resizable: true,\n            height: 250,\n            width:450,\n            modal: true,\n            buttons: {\n                \"OK\": function() {\n                    $( this ).dialog( \"close\" );\n                }\n            }\n        });\n    });\n</script>\n\n\n<!-- hidden dialog -->\n<div id=\"create_share_form\" style=\"display:none\">\n    <p>Share functionality is no longer supported.</p>\n    <p>Please see <a target=\"_blank\" href=\"https://www.openmicroscopy.org/omero/features/share/\">Sharing your data in OMERO</a>\n        for alternative workflows.\n    </p>\n</div>\n", "{% extends \"webclient/base/base_container.html\" %}\n{% load i18n %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011-2015 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% comment %}\n<!--\n  This page is the 'home page' of the 3-column data layout for webclient.\n  It loads the tree in the left panel. This is then used to load data into the middle and right panels (via AJAX)\n  Plugins for the centre or right panels add themselves as selection listeners to the tree.\n-->\n{% endcomment %}\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.jstree_theme.css\" %}\" type=\"text/css\" />\n{% endblock %}\n\n{% block script %}\n    {{ block.super }}\n\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.jstree-3.0.8/jstree.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.locate_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.conditionalselect_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.pagination_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.fields_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.omecut_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.ometools_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.childcount_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.truncatetext_plugin.js\"|add:url_suffix %}\"></script>\n\n    <script type=\"text/javascript\" src=\"{% static 'webclient/javascript/ome.chgrp.js'|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static 'webclient/javascript/ome.chown.js'|add:url_suffix %}\"></script>\n\n    <!-- Main jsTree code is here -->\n    <script src=\"{% static 'webclient/javascript/ome.tree.js'|add:url_suffix %}\"></script>\n\n\n    <script type=\"text/javascript\">\n\n    // Variable to store selection data when using jstree refresh\n    var refreshPathsReverse = [];\n\n\n    // Called from ome.tree.js\n    var updateParentRemoveNode = function(inst, node, parent) {\n        /* Update any other instances of the parent of this node to remove it\n         * Also Based on if the parent of this node has any children\n         * remaining, update the parental status of matching parents\n        */\n\n        // Get any other instances of the parent\n        var parentKey = inst.locate_key(parent);\n        var parentNodes = inst.locate_node(parentKey);\n        // Get the parentNodeIds to easily check set membership\n        var parentNodeIds = [];\n        $.each(parentNodes, function(index, parentNode) {\n             parentNodeIds.push(parentNode.id);\n        });\n        // Determine if this parent now has no children\n        var parentChildless = !inst.is_parent(parent);\n\n        // For performance reasons it is quicker to look for the nodes and check\n        // their parents than to look for the parents and scan through all\n        // their children\n        var nodeKey = inst.locate_key(node);\n        var nodeNodes = inst.locate_node(nodeKey);\n\n        var updateParentRemoveNodes = [];\n        $.each(nodeNodes, function(index, nodeNode) {\n            // Discount the original node as jstree is removing that\n            if (nodeNode.id === node.id) {\n                return true;\n            }\n\n            // Discount any nodes that do not have one of the predetermined parents\n            if ($.inArray(inst.get_parent(nodeNode), parentNodeIds) === -1) {\n                return true;\n            }\n\n            // The remaining are children of identical parents and should\n            // be removed\n            updateParentRemoveNodes.push(nodeNode);\n        });\n\n        // Actually do the remove\n        inst.delete_node(updateParentRemoveNodes);\n\n        // If the parent is now childless it is also necessary to check\n        // for any identical parent containers that are marked as expandable\n        // which has ceased to be the case\n        $.each(parentNodes, function(index, parentNode) {\n            // Discount the original parent as jstree is handling that\n            if (parentNode.id === parent.id) {\n                return true;\n            }\n\n            if (parentChildless) {\n                if (!inst.is_loaded(parentNode)) {\n                    // Remove the offer of expansion, this is denoted by a node which is\n                    // loaded, but has zero children\n                    parentNode.state.loaded = true;\n                    inst.redraw_node(parentNode);\n                }\n            }\n\n            // Update the child count (override the childcount because it may not be\n            // loaded and will thus always have no count)\n            OME.updateNodeChildCount(inst, parentNode, parent.children.length);\n        });\n\n\n    };\n\n    var updateParentInsertNode = function(inst, node, parent, position) {\n        /* Update any other instances of the parent with the new node\n         *\n        */\n\n        // Get any other instances of the parent\n        var parentKey = inst.locate_key(parent);\n        var parentNodes = inst.locate_node(parentKey);\n        var oldParent = inst.get_node(inst.get_parent(node));\n\n        $.each(parentNodes, function(index, parentNode) {\n             // Discount the original parent as jstree is inserting that\n             if (parentNode.id === parent.id) {\n                // Continue\n                return true;\n             }\n\n            if ((inst.is_loaded(parentNode) && inst.is_parent(parentNode)) ||\n                (inst.is_loaded(parentNode) && inst.is_open(parentNode))) {\n                // Create a new node to match the other examples with\n                // data from the old\n                var new_node_data = {\n                    'data': {'id': node.data.obj.id, 'obj': node.data.obj},\n                    'text': node.text,\n                    'type': node.type,\n                    // If it has children, we wish it to be loadable, but not loaded\n                    // so just give it boolean instead of actual nodes\n                    'children': inst.is_parent(node),\n                    'li_attr': {\n                        'class': node.type,\n                        'data-id': node.data.obj.id\n                    }\n                };\n                inst.create_node(parentNode, new_node_data, position);\n            // An empty container\n            } else if (!inst.is_parent(parentNode) && inst.is_loaded(parentNode)) {\n                // Change the node to offer expansion\n                parentNode.state.loaded = false;\n                // Close the node\n                inst.redraw_node(parentNode);\n            }\n\n            // Update the child count (override the childcount because it may not be\n            // loaded and will thus always have no count)\n            OME.updateNodeChildCount(inst, parentNode, oldParent.children.length);\n        });\n    };\n\n    var removeDuplicateNodes = function(inst, node) {\n        /**\n         * Removes all duplicates of a node throughout the tree.\n         * For use mainly when something is truly deleted as opposed to\n         * unlinked\n        */\n\n        var nodeKey = inst.locate_key(node);\n        var nodeNodes = inst.locate_node(nodeKey);\n\n        $.each(nodeNodes, function(index, nodeNode) {\n            // Update the parent count\n            var parent = inst.get_node(inst.get_parent(nodeNode));\n            var count = 0;\n            if (parent.children) {\n                count = parent.children.length;\n            }\n            OME.updateNodeChildCount(inst, parent, count);\n            // Actually delete the node\n            inst.delete_node(nodeNode);\n        });\n    };\n\n    if (typeof OME === \"undefined\") { OME={}; }\n\n        OME.handleNewContainer = function(container_type) {\n\n            // If we are filtering to show another user's data,\n            // we 'should' have writeOwned privilege\n\n            var writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1;\n            var $f = $(\"#new-container-form\");\n            var memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1;\n\n            // clear fields\n            $(\"input[name='owner']\", $f).val(\"\");\n            var new_container_name = $(\"input[name='name']\", $f).val(\"\");\n            var new_container_desc = $(\"textarea[name='description']\", $f).val(\"\");\n            $(\"#new_pds_owner_controls\").hide();\n\n            // If we're not filtering by MY data, could be 'All Members' or another User...\n            // Data will be and we need to show who owner will be\n            if (WEBCLIENT.active_user.id !== WEBCLIENT.USER.id) {\n                // We 'should' have right permissions but just in case...\n                if (!memberOfGroup && !writeOwned) {\n                    alert(\"You don't have permission to create data for other users\");\n                    return;\n                }\n                // If filtering by User, data will belong to them\n                if (WEBCLIENT.active_user.id !== -1) {\n                    $(\"#new_pds_owner\").text(WEBCLIENT.active_user.fullName);\n                    $(\"input[name='owner']\", $f).val(WEBCLIENT.active_user.id);\n                    $(\"#new_pds_owner_controls\").show();\n                }\n                // Otherwise, if we can writeOwned, pick Owner from members of this group\n                else if (writeOwned) {\n                    // Not yet supported (Create options should be disabled if All Members)\n                    // To support this, will need to show <select> to choose owner.\n                }\n            }\n\n            $(\"#new_container_type\").text(container_type.capitalize());\n            $(\"#new-container-form\").dialog('open');\n        }\n\n        // Call this when a parent child count may have changed\n        OME.updateNodeChildCount = function(tree, parent, override_count) {\n            var node = tree.get_node(parent);\n            var count;\n            if (override_count) {\n                count = override_count;\n            } else {\n                count = node.children.length;\n            }\n            // Restrict this to projects, datasets, screens and plates\n            if (node.type === 'project' ||\n                node.type === 'dataset' ||\n                node.type === 'screen' ||\n                node.type === 'plate' ||\n                node.type === 'orphaned') {\n\n                node.data.obj.childCount = count;\n                tree.redraw_node(node, false, false);\n            }\n        };\n\n        function enableToolbarButton(name, enabled) {\n            if (enabled) {\n                $('input#'+name+'Button').removeClass('button-disabled').prop('disabled', false);\n            } else {\n                $('input#'+name+'Button').addClass('button-disabled').prop('disabled', true);\n            }\n        };\n\n        function buttonsShowHide(selected, inst) {\n            // Disable all unless explicitly enabled below\n            var toolbar_config = {\n                \"addproject\":false,\n                'adddataset':false,\n                'addscreen':false,\n                'addtag': false,\n                'addtagset': false,\n                'copy':false,\n                'cut':false,\n                'paste': false,\n                'delete':false,\n                'createshare':false\n            };\n\n            // We 'canCreate' top level items, E.g. Project, Dataset, Screen, if the current userId is self or 'All Members'\n            var userId = {{ ome.user_id }},\n                memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1,\n                writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1,\n                allMembers = userId === -1,\n                // canCreate if looking at your own data or 'All Members' OR User's data with writeOwned\n                canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||\n                    (!allMembers && writeOwned));\n\n            canCreate = canCreate && WEBCLIENT.CAN_CREATE;  // global state for read-only server\n            // These nodes can be Orphans, so creation is not selection-specific\n            if (canCreate) {\n                toolbar_config[\"addproject\"] = true;\n                toolbar_config[\"adddataset\"] = true;\n                toolbar_config['addscreen'] = true;\n                toolbar_config[\"addtag\"] = true;\n                toolbar_config[\"addtagset\"] = true;\n            }\n            if(selected.length > 0) {\n\n                // If the current selection(s) can be deleted\n                // TODO Admin will have delete permissions on user\n                // probably they should not be able to delete the\n                // user from there\n                if(OME.nodeHasPermission(selected, 'canDelete')) {\n                    toolbar_config['delete'] = true;\n                }\n\n                // Only allow paste if there is a single selection and there is\n                // something to paste\n                if(selected.length == 1 && inst.can_paste()) {\n                    // Check if the target is a suitable container for pasteing it\n                    var buffer = inst.get_buffer();\n                    $.each(buffer.node, function(index, node) {\n                        // Never allow pasteing into orphaned or experimenter\n                        // TODO What about pasteing a project from one experimenter to another?\n                        // Run the standard jstree check to determine if paste is allowed as if using\n                        // drag'n'drop.\n                        if (inst.get_node(selected[0]).type !== 'orphaned' &&\n                            inst.get_node(selected[0]).type !== 'experimenter' &&\n                            inst.check(buffer.mode, node, selected[0], 0)) {\n                            toolbar_config['paste'] = true;\n                        } else {\n                            // Break out of $.each as if one item can't paste, we can't paste\n                            return false;\n                        }\n                    });\n                }\n\n                // Only allow cut if the selected item(s) are elligible. This uses the slightly\n                // confusingly named 'is_draggable' which is part of the drag'n'drop plugin\n                // which in turn uses a jstree node type property 'draggable'\n                // It also checks it the selected nodes can be linked\n                if(inst.settings.dnd.is_draggable(selected)) {\n                    toolbar_config['cut'] = true;\n                }\n\n                // Allow Copy of Dataset/Image/Plate if you 'canLink' all selected nodes\n                var canCopy = selected.reduce(function(prev, n){\n                    var node_type = n.type,\n                        parent_type = inst.get_node(n.parent).type;\n                    // In tag tree, can't copy anything except a tag\n                    var invalidType = (WEBCLIENT.TAG_TREE && node_type !== \"tag\");\n                    // Can Copy objects under their true parent types (NOT orphaned tag, dataset etc)\n                    var plink = ((node_type === \"dataset\" && parent_type === \"project\") ||\n                            (node_type === \"image\" && parent_type === \"dataset\") ||\n                            (node_type === \"plate\" && parent_type === \"screen\") ||\n                            (node_type === \"tag\" && parent_type === \"tagset\"));\n                    return (!invalidType) && plink && OME.nodeHasPermission(n, 'canLink') && prev;\n                }, true);\n                toolbar_config['copy'] = canCopy;\n\n                // Only images can be added to a basket and only if they all are\n                toolbar_config['createshare'] = true;\n                $.each(selected, function(index, node) {\n                    if (node.type != 'image' || !OME.nodeHasPermission(node, 'canLink')) {\n                        toolbar_config['createshare'] = false;\n                        // Break out of $.each\n                        return false;\n                    }\n                });\n\n            }\n\n            for (var btnName in toolbar_config) {\n                enableToolbarButton(btnName, toolbar_config[btnName]);\n            }\n        };\n\n\n        // Helper method used by linkNode and unlinkNode below.\n        // Simply adds parent_type, parent_id, child_type & child_id to payload object\n        // e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}:\n        function addDataToPayload(payload, node, parent) {\n            var parent_id = parent.data.obj.id,\n                parent_type = parent.type,\n                child_id = node.data.obj.id,\n                child_type = node.type;\n            // payload is payload.parent_type.parent_id.child_type: [child_ids]\n            if (!(parent_type in payload)) payload[parent_type] = {};\n            if (!(parent_id in payload[parent_type])) {\n                payload[parent_type][parent_id] = {};\n            }\n            if (!(child_type in payload[parent_type][parent_id])) {\n                payload[parent_type][parent_id][child_type] = [];\n            }\n            payload[parent_type][parent_id][child_type].push(child_id);\n        }\n\n        // linkNode and unlinkNode (below) use a 'debounce' timeout to collect\n        // many link or unlink calls into a single AJAX call.\n        // On each call to linkNode or unlinkNode, we add the data from node & parent\n        // to the payload that we submit. This is sent once the timeout expires.\n        // linkNode and unlinkNode both return a deferred promise that will be\n        // resolved when the AJAX call returns.\n        var linkNodeTimeout,\n            linkPayload = {},\n            deferredLink = jQuery.Deferred();\n        function linkNode(inst, node, parent) {\n\n            // doLink is called on timeout to submit AJAX call\n            var doLink = function() {\n                // we send a reference to the deferred...\n                var dd = deferredLink;\n                // ...and create a new deferred to handle subsequent calls to linkNode\n                deferredLink = jQuery.Deferred();\n\n                // Do the call, and resolve the deferred when done\n                $.ajax({\n                    url: \"{% url 'api_links' %}\",\n                    type: \"POST\",\n                    data: JSON.stringify(linkPayload),\n                    dataType: 'json'\n                })\n                .done(function(data){\n                    dd.resolve(data);\n                });\n\n                // empty the payload, ready for sebsequent calls\n                linkPayload = {};\n            };\n\n            // build up an object with all the links we want to create\n            addDataToPayload(linkPayload, node, parent)       \n\n            // if we're waiting on timeout, clear this...\n            if (linkNodeTimeout) {\n                clearTimeout(linkNodeTimeout);\n            }\n            // ...start new timeout\n            linkNodeTimeout = setTimeout(doLink, 10);\n\n            // return a promise (cannot call resolve() on it elsewhere)\n            return deferredLink.promise();\n\n        }\n\n        // See docs above for linkNode (works the same as unlinkNode)\n        var unlinkNodeTimeout,\n            unlinkPayload = {},\n            deferredUnlink = jQuery.Deferred();\n        function unlinkNode(inst, node, parent) {\n            var doUnlink = function() {\n                var dd = deferredUnlink;\n                deferredUnlink = jQuery.Deferred();\n                $.ajax({\n                    url: \"{% url 'api_links' %}\",\n                    type: \"DELETE\",\n                    data: JSON.stringify(unlinkPayload),\n                    dataType: 'json'\n                })\n                .done(function(data){\n                    dd.resolve(data);\n                });\n                unlinkPayload = {};\n            };\n            addDataToPayload(unlinkPayload, node, parent)       \n            if (unlinkNodeTimeout) {\n                clearTimeout(unlinkNodeTimeout);\n            }\n            unlinkNodeTimeout = setTimeout(doUnlink, 10);\n            return deferredUnlink.promise();\n        };\n\n        // Remove duplicate nodes, normally as a result of copy_node\n        // or move_node\n        // Global function, called from omecut_plugin\n        function removeDuplicate(inst, node, parentId) {\n            var parent = inst.get_node(parentId),\n                found = false;\n            $.each(parent.children, function(index, childId) {\n                var child = inst.get_node(childId);\n                if (child.type === node.type &&\n                    child.data.obj.id === node.data.obj.id &&\n                    child.id != node.id) {\n                    inst.delete_node(child);\n                    found = true;\n                    // Break out of $.each\n                    return false;\n                }\n            });\n            return found;\n        };\n\n        // Stuff to do on load...\n        $(function()\n            {\n                // We (un)truncate images when the left panel resizes...\n                $(\"#left_panel\").on('resize', function(event) {\n                    var inst = $.jstree.reference('#dataTree');\n                    inst.redraw(true);\n                });\n\n                // Handle creation of new Project, Dataset or Screen...\n                $(\"#new-container-form\").dialog({\n                    autoOpen: false,\n                    resizable: true,\n                    height: 280,\n                    width:420,\n                    modal: true,\n                    buttons: {\n                        \"OK\": function() {\n                             createNewContainer();\n                             $( this ).dialog( \"close\" );\n                        },\n                        \"Cancel\": function() {\n                            $( this ).dialog( \"close\" );\n                        }\n                    }\n                });\n\n                // same code is called from closing dialog or 'submit' of form\n                $(\"#new-container-form\").submit(function() {\n                    $(\"#new-container-form\").dialog( \"close\" );\n                    createNewContainer();\n                    return false;\n                });\n\n                var createNewContainer = function() {\n                    var cont_type = $(\"#new_container_type\").text().toLowerCase();  // E.g. 'project'\n                    var $f = $(\"#new-container-form\");\n                    var new_container_name = $(\"input[name='name']\", $f).val();\n                    var new_container_desc = $(\"textarea[name='description']\", $f).val();\n                    var new_container_owner = $(\"input[name='owner']\", $f).val();\n                    if ($.trim(new_container_name).length == 0) {\n                        alert(\"Please enter a Name\");\n                        return;\n                    }\n\n                    // If images under orphaned are selected, note IDs (for adding to new dataset)\n                    var inst = $.jstree.reference('#dataTree');\n                    var selected = inst.get_selected(true);\n                    // TODO Only keeping img_ids because it is simpler to POST the data using that\n                    // Can be removed when updating the ajax call\n                    var img_ids = [];\n                    var orphaned_image_nodes = [];\n\n                    $.each(selected, function(index, node) {\n                         if (node.type === 'image' &&\n                             inst.get_node(inst.get_parent(node)).type === 'orphaned' &&\n                             OME.nodeHasPermission(node, 'canLink')) {\n                            img_ids.push(node.data.obj.id);\n                            orphaned_image_nodes.push(node);\n                         }\n                    });\n\n                    // Default: Create an orphan of \"folder_type\" ('project', 'dataset', 'screen', 'tag', 'tagset' etc. )\n                    url = '{% url 'manage_action_containers' \"addnewcontainer\" %}';\n                    // Find the 'experimenter' node as parent\n                    var root = inst.get_node('#');\n                    $.each(root.children, function(index, id) {\n                        var node = inst.get_node(id);\n                        if (node.type === 'experimenter' && node.data.obj.id === {{ ome.user_id }}) {\n                            parent = node;\n                            // Break out of each\n                            return false;\n                        }\n                    });\n\n                    // If a project is selected (or selected is a child of project) create dataset under it\n                    var url, position = 0;\n                    var parent = false;\n                    if (selected.length > 0 && cont_type == 'dataset') {\n                        if (selected[0].type === 'project') {\n                            parent = selected[0];\n                        } else if (inst.get_node(selected[0].parent).type === 'project') {\n                            parent = inst.get_node(selected[0].parent);\n                        }\n                    // If a tagset is selected (or selected is a child of tagset), create tag under it\n                    } else if(selected.length > 0 && cont_type == 'tag') {\n                        if (selected[0].type === 'tagset') {\n                            parent = selected[0];\n                        } else if (inst.get_node(selected[0].parent).type === 'tagset') {\n                            parent = inst.get_node(selected[0].parent);\n                        }\n                    }\n                    if (parent) {\n                        url = '{% url 'manage_action_containers' \"addnewcontainer\" %}' + parent.type + '/' + parent.data.obj.id + '/';\n                    } else {\n                        // otherwise create an orphan of \"folder_type\" ('project', 'dataset', 'screen', 'tag', 'tagset' etc. )\n                        url = '{% url 'manage_action_containers' \"addnewcontainer\" %}';\n                        // Find 'experimenter' to be parent\n                        var root = inst.get_node('#');\n                        $.each(root.children, function(index, id) {\n                            var node = inst.get_node(id);\n                             if (node.type === 'experimenter' && node.data.obj.id === {{ ome.user_id }}) {\n                                parent = node;\n                                // Break out of each\n                                return false;\n                             }\n                        });\n                    }\n\n                    var ajax_data = {\n                            \"name\" : new_container_name,\n                            \"folder_type\" : cont_type,\n                            \"description\" : new_container_desc,\n                            \"owner\": new_container_owner\n                        }\n                    if (img_ids.length > 0){\n                        ajax_data['image'] = img_ids;\n                    }\n                    $.ajax({\n                        url: url,\n                        data: ajax_data,\n                        dataType: \"json\",\n                        type: \"POST\",\n                        traditional: true,\n                        success: function(r){\n\n                            var data = {\n                                'id': r['id'],\n                                'isOwner': true,\n                                'ownerId': {{ ome.user.id }},\n                                'name': new_container_name,\n                                'permsCss': 'canEdit canAnnotate canLink canDelete canChgrp'\n                            };\n\n                            var node = {\n                                'data': {'id': r['id'], 'obj': data},\n                                'text': new_container_name,\n                                'children': false,\n                                'type': cont_type,\n                                'li_attr': {\n                                    'class': cont_type,\n                                    'data-id': r['id']\n                                }\n                            };\n\n                            // Create the node, move any orphans into it and select only it\n                            node = JSON.parse(JSON.stringify(node));\n                            inst.create_node(parent, node, 'last', function(node) {\n                                if (orphaned_image_nodes.length > 0) {\n                                    inst.move_node(orphaned_image_nodes, node);\n                                }\n                                // There is no need to update duplicates at the moment as nothing that\n                                // can be created could have a duplicate to need updating\n                                inst.deselect_all();\n                                inst.select_node(node);\n                                //TODO Scroll to new if off screen? https://github.com/vakata/jstree/issues/519\n                            });\n                        }\n                    });\n                };\n\n                $(\"#delete-dialog-form\").dialog({\n                    dialogClass: 'delete_confirm_dialog',\n                    autoOpen: false,\n                    resizable: true,\n                    height: 210,\n                    width:420,\n                    modal: true,\n                    buttons: {\n                        \"Yes\": function() {\n                            $(\"#delete-dialog-form\").data(\"clicked_button\", \"Yes\");\n                            $( this ).dialog( \"close\" );\n                        },\n                        \"No\": function() {\n                            $(\"#delete-dialog-form\").data(\"clicked_button\", \"No\");\n                            $( this ).dialog( \"close\" );\n                        }\n                    }\n                });\n\n        });\n    </script>\n\n    <!-- configure toolbar buttons -->\n    <script type=\"text/javascript\">\n\n    $(function () {\n\n        var inst = $.jstree.reference('#dataTree');\n\n        // Attach click handlers to the individual buttons\n\n        $('#addprojectButton').click(function() {\n            OME.handleNewContainer(\"project\");\n        });\n\n        $('#adddatasetButton').click(function() {\n            OME.handleNewContainer(\"dataset\");\n        });\n\n        $('#addscreenButton').click(function() {\n            OME.handleNewContainer(\"screen\");\n        });\n\n        $('#addtagButton').click(function() {\n            OME.handleNewContainer(\"tag\");\n        });\n\n        $('#addtagsetButton').click(function() {\n            OME.handleNewContainer(\"tagset\");\n        });\n\n        $('#copyButton').click(function() {\n            var objs = inst.get_selected(true)\n            inst.copy(objs);\n        });\n\n        $('#cutButton').click(function() {\n            var objs = inst.get_selected(true)\n            inst.cut(objs);\n        });\n\n        $('#createshareButton').click(function() {\n            OME.createShare(inst.get_selected());\n        });\n\n        $('#pasteButton').click(function() {\n            var objs = inst.get_selected(true);\n            if (objs.length == 1) {\n                inst.paste(objs[0]);\n                // Always disable paste button immediatly after using it\n                enableToolbarButton('paste', false);\n            }\n        });\n\n        $('#deleteButton').click(function() {\n            var deleteUrl = \"{% url 'manage_action_containers' 'deletemany' %}\",\n                filesetCheckUrl = \"{% url 'fileset_check' 'delete' %}\";\n            OME.handleDelete(deleteUrl, filesetCheckUrl, {{ ome.user.id }});\n        });\n\n        $('#refreshButton').click(function() {\n            // Ensure the button cannot be clicked again while we are\n            // performing a refresh.  The \"refresh.jstree\" event handler\n            // is in ome.tree.js and will be responsible for enabling the\n            // button again.\n            event.target.disabled = true;\n\n            // Grab the paths to the items that are currently selected, for restoration later\n            var selections = inst.get_selected();\n\n            $.each(selections, function(index, selection) {\n                 var path = inst.get_path(selection, false, true).reverse();\n                 var refreshPathReverse = [];\n                 $.each(path, function(index, pathComponent) {\n                      var node = inst.get_node(pathComponent);\n                      var tuple = [node.type, node.data.obj.id];\n                      refreshPathReverse.push(tuple);\n                 });\n                 refreshPathsReverse.push(refreshPathReverse);\n\n            });\n\n            inst.deselect_all();\n            // NB: the global variable refreshPathsReverse is used in ome.tree.js\n            // after refresh, then set to empty list.\n            inst.refresh();\n        });\n\n    });\n    </script>\n\n    <!-- set up the middle panel to only show the div chosen by <select> -->\n    {% include \"webclient/data/includes/center_plugin_init.js.html\" %}\n\n    <!-- include code to handle primary 'thumbs' middle plugin -->\n    {% include \"webclient/data/includes/center_plugin.thumbs.js.html\" %}\n\n    {% for cp in ome.center_plugins %}\n        {% include cp.include %}\n    {% endfor %}\n\n\n\n{% endblock %}\n\n\n{% block left %}\n\n<div class=\"left_panel_content\">\n\n    <div id=\"left_panel_tabs\" class=\"left_panel_tabs_container ui-tabs\">\n\n        <ul id=\"left_panel_tab_list\" class=\"ui-tabs-nav\">\n\n            <!-- Remember to update this in public/public.html as well. We should change this, but for the meantime, you need to manually update the menu there too -->\n\n            <li id=\"explore_tab\" class=\"ui-state-default{% ifequal menu 'userdata' %} ui-tabs-active{% endifequal %}\">\n                <a href=\"{% url 'load_template' 'userdata' %}\" class=\"ui-tabs-anchor\" title=\"Explore\">{% trans \"Explore\" %}</a>\n            </li>\n            <li id=\"tags_tab\" class=\"ui-state-default{% ifequal menu 'usertags' %} ui-tabs-active{% endifequal %}\">\n                <a href=\"{% url 'load_template' 'usertags' %}\" class=\"ui-tabs-anchor\">{% trans \"Tags\" %}</a>\n            </li>\n            <li id=\"public_tab\" class=\"ui-state-default\">\n                <a href=\"{% url 'load_template' 'public' %}\" class=\"ui-tabs-anchor\">{% trans \"Shares\" %}</a>\n            </li>\n\n        </ul>\n\n        <!-- toolbar above tree -->\n        <div class=\"left_panel_toolbar\" >\n\n            <!-- Show Projects toolbar for main page... -->\n            <ul class=\"toolbar\">\n\n                {% if menu == 'userdata' %}\n\n                    <li><input id=\"addprojectButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder16.png\" %}\" alt=\"Create new project\"\n                               title=\"Create new Project\"/></li>\n                    <li><input id=\"adddatasetButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder_image16.png\" %}\" alt=\"Create new dataset\"\n                               title=\"Create new Dataset\"/></li>\n                    <li><input id=\"addscreenButton\" class=\"button button-disabled\" type=\"image\"\n                               src=\"{% static \"webclient/image/folder_screen16.png\" %}\" alt=\"Create new screen\"\n                               title=\"Create new Screen\"/></li>\n\n                {% elif menu == 'usertags' %}\n\n                    <li><input id=\"addtagsetButton\" class=\"button button-disabled\" type=\"image\"\n                               title=\"Create new Tag Set\"\n                               src=\"{% static \"webclient/image/left_sidebar_icon_tags.png\" %}\"\n                               alt=\"Create new dataset\"/></li>\n                    <li><input id=\"addtagButton\" class=\"button button-disabled\" type=\"image\" title=\"Create new Tag\"\n                               src=\"{% static \"webclient/image/left_sidebar_icon_tag.png\" %}\" alt=\"Create new project\"/></li>\n\n                {% endif %}\n\n                <li class=\"seperator\"></li>\n\n                <li><input id=\"cutButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_cut.png\" %}\" alt=\"Cut Link\" title=\"Cut Link\"/>\n                </li>\n                <li><input id=\"copyButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_copy.png\" %}\" alt=\"Copy Link\"\n                           title=\"Copy a link to the selected object\"/></li>\n                <li><input id=\"pasteButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_paste.png\" %}\" alt=\"Paste Link\"\n                           title=\"Paste the copied link\"/></li>\n\n                <li class=\"seperator\">\n\n                <li><input id=\"deleteButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_delete.png\" %}\" alt=\"Delete\" title=\"Delete\"/>\n                </li>\n\n                <li class=\"seperator\">\n\n                <li><input id=\"createshareButton\" class=\"button button-disabled\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_share2.png\" %}\" alt=\"Create Share\"\n                           title=\"Create Share\"></li>\n\n                <li class=\"seperator\"></li>\n\n                <li><input id=\"refreshButton\" class=\"button\" type=\"image\"\n                           src=\"{% static \"webclient/image/icon_toolbar_refresh.png\" %}\" alt=\"Refresh\" title=\"Refresh\">\n                </li>\n\n            </ul>\n\n        </div>\n\n    </div>\n\n    <div class=\"left_panel_tree_container\">\n\n        <div id=\"tree_details\" class=\"left_panel_tree\">\n            <div class=\"dataTree\" id=\"dataTree\"></div>\n        </div>\n\n        <!-- Panel hidden unless needed for showing spatial birds eye view of Wells - see ome.spwgridview.js -->\n        <div id=\"well_details\" class=\"left_panel_preview\">\n            <div class=\"left_panel_preview__header\">\n                <span class=\"left_panel_preview__title--centered\n                             left_panel_preview__title--medium\">\n                    Field positions in well\n                </span>\n                <a id=\"hide_well_birds_eye\" class=\"left_panel_preview__close action\" href=\"#\">X</a>\n            </div>\n            <div id=\"well_birds_eye_container\" class=\"left_paneL_preview__content\">\n                <div id=\"well_birds_eye\" class=\"left_paneL_preview__well\"></div>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n\n<!-- hidden form for delete dialogs -->\n<div id=\"delete-dialog-form\" title=\"Delete\" style=\"display:none\"\n        data-url=\"{% url 'manage_action_containers' 'deletemany' %}\"\n        data-fileset-check-url=\"{% url 'fileset_check' 'delete' %}\">\n    <p id=\"deleteOthersWarning\" class='error' style=\"font-size: 120%; font-weight: bold\">\n        Warning: Some objects you selected are owned by other users.\n    </p>\n    <p id=\"deleteCopyWarning\" class='error' style=\"font-size: 120%; font-weight: bold\">\n        Warning: One or more <span class=\"delete_type\">Images</span> are linked to multiple\n        <span class=\"delete_parent_type\">Dataset</span>s.\n        This will DELETE them from ALL of those\n        <span class=\"delete_parent_type\">Dataset</span>s.\n        If you only wish to remove <span class=\"delete_type\">Images</span> from one\n        <span class=\"delete_parent_type\">Dataset</span>, use the\n        \"Cut Link\" action.\n    </p>\n    <p>Are you sure you want to delete the selected <span class=\"delete_type\">Images</span>?</p>\n    <p>If yes:</p>\n    <form>\n    <fieldset style=\"border: 0px solid white\">\n        <input type=\"checkbox\" name=\"delete_anns\" id=\"delete_anns\" />\n        Also delete any Annotations that become 'orphans'?<br/>\n    </fieldset>\n    </form>\n</div>\n\n<!-- hidden dialog for new Container -->\n<form id=\"new-container-form\" title=\"New...\" style=\"display:none\">\n    <p>Create a new <span id=\"new_container_type\">Container</span>...</p>\n    <p id=\"new_pds_owner_controls\">\n        <img class=\"new_pds_owner_icon\" src=\"{% static 'webclient/image/icon_settings_user.png' %}\">\n        <label>Assign to Owner:</label> <span id=\"new_pds_owner\"></span>\n        {{ new_container_form.owner }}\n    <p>\n        <label for=\"id_name\">Name:</label>\n        {{ new_container_form.name }}\n    </p>\n    <p style=\"margin-bottom: 5px\">\n        <label for=\"id_description\">Description:</label><br />\n        {{ new_container_form.description }}\n    </p>\n</form>\n\n<!-- hidden form for chgrp -->\n<form id=\"chgrp-form\" title=\"Move to Group\" action=\"{% url 'chgrp' %}\" style=\"display:none\" method=\"POST\">{% csrf_token %}\n</form>\n<!-- hidden form for chown -->\n<form id=\"chown-form\" title=\"Change Owner\" action=\"{% url 'chown' %}\" style=\"display:none\" method=\"POST\">{% csrf_token %}\n</form>\n\n{% endblock %}\n\n\n", "{% extends \"webclient/base/base_container.html\" %}\n{% load i18n %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% block link %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.jstree_theme.css\" %}\" type=\"text/css\" />\n{% endblock %}\n\n{% block script %}\n    {{ block.super }}\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.jstree-3.0.8/jstree.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.locate_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.conditionalselect_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.ometools_plugin.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webclient/javascript/jquery.jstree.truncatetext_plugin.js\"|add:url_suffix %}\"></script>\n\n    <script type=\"text/javascript\">\n\n        $(document).ready(function()\n        {\n\n            // Disable the groups/users dropdown menu and scripts menu.\n            $(\"#groupsUsersButton\")\n                .css('background-image', 'url()')\n                .attr('title', 'Use \"Scope\" in form below to search within specific Groups / Users');\n            $(\"#scriptButton\")\n                .css('opacity', 0.5)\n                .attr('title', 'Scripts are disabled for data in shares');\n            setTimeout(function(){\n                // make sure we remove click handler AFTER it's been added\n                $(\"#groupsUsersButton\").off('click');\n                $(\"#scriptButton\").off('click');\n            },500);\n        });\n\n    </script>\n\n    <!-- set-up jsTree, toolbar etc -->\n    <script type=\"text/javascript\">\n\n        function enableToolbarButton(name, enabled) {\n            if (enabled) {\n                $('input#'+name+'Button').removeClass('button-disabled').prop('disabled', false);\n            } else {\n                $('input#'+name+'Button').addClass('button-disabled').prop('disabled', true);\n            }\n        };\n\n        function buttonsShowHide(selected, inst) {\n\n            // Disable all unless explicitly enabled below\n            var toolbar_config = {\n                'removecontent': false\n            };\n\n            if (selected.length > 0) {\n                // Can only remove images from share that you own\n                var node = inst.get_node(selected[0]);\n                if (node.type === 'image') {\n                    var share = inst.get_node(node.parent);\n                    if (share.data.obj.ownerId === {{ ome.user.id }}) {\n                        toolbar_config['removecontent'] = true;\n                    }\n                }\n            }\n\n            for (var btnName in toolbar_config) {\n                enableToolbarButton(btnName, toolbar_config[btnName]);\n            }\n        };\n\n        function removeImage(selected, inst) {\n\n            // Disable the nodes\n            inst.disable_node(selected);\n\n            // This interface does not support multiple remove, so iterate\n            // over deleted images\n            $.each(selected, function(index, sel) {\n                var node = inst.get_node(sel);\n\n                // Get the parent share id\n                var shareId = inst.get_node(inst.get_parent(node)).data.obj.id;\n                // Get the image id\n                var imageId = node.data.obj.id;\n\n                // AJAX Query to remove the images from the share\n                $.ajax({\n                    url: '{% url 'manage_action_containers' \"removefromshare\" \"share\" %}' + shareId + '/',\n                    data : {'source': imageId},\n                    dataType: \"json\",\n                    type: \"POST\",\n                    success: function(r){\n                        if(eval(r.bad)) {\n                            inst.enable_node(node);\n                            alert(r.errs);\n                        } else {\n                            inst.delete_node(node);\n                        }\n                    },\n                    error: function(response) {\n                        inst.enable_node(node);\n                    }\n                });\n            });\n        };\n\n        $(function() {\n            // Select jstree and then cascade handle events and setup the tree.\n            var jstree = $(\"#dataTree\")\n            .on('changed.jstree', function (e, data) {\n                var inst = data.instance;\n                buttonsShowHide(inst.get_selected(true), inst);\n                OME.tree_selection_changed(data, e);\n            })\n            .on(\"click.jstree\", \".jstree-anchor\", function (e) {\n                e.preventDefault();\n                var datatree = $.jstree.reference($('#dataTree'));\n                // Expand on click (not select because of key navigation)\n                if (datatree.is_parent(this)) {\n                    datatree.open_node(this);\n                }\n            })\n            .on(\"dblclick.jstree\", \".jstree-anchor\", function (e) {\n                e.preventDefault();\n                var datatree = $.jstree.reference($('#dataTree'));\n                var node = datatree.get_node(this);\n                if (node) {\n                    if (node.type === 'image') {\n                        popup_url = \"{% url 'webindex' %}\";\n                        var parent_node = datatree.get_node(datatree.get_parent(node));\n                        if (!parent_node.data.obj.isOwned) {\n                            popup_url += parent_node.data.obj.id + \"/img_detail/\" + node.data.obj.id ;\n                        } else {\n                            popup_url += \"img_detail/\" + node.data.obj.id ;\n                        }\n                        //Open the image viewer for this image\n                        window.open(popup_url, '_blank');\n                    }\n                }\n            })\n            .on('loaded.jstree', function(e, data) {\n                // Select root node\n                data.instance.select_node('ul > li:first');\n            })\n\n            // Setup jstree\n            .jstree({\n                'plugins': ['types', 'sort', 'locate', 'ometools', 'conditionalselect', 'truncatetext', 'contextmenu'],\n                // The jstree core\n                'core' : {\n                    'themes': {\n                        'dots': false,\n                        'variant': 'ome'\n                    },\n                    'data' : {\n                        // Configure URL for request\n                        'url' : function(node) {\n                            // Get the type of the node being expanded\n                            // Figure out what type of children it should have\n                            // Request the list of children from that url, adding any relevant filters\n                            if (node.type === 'experimenter') {\n                                return '{% url 'api_shares' %}'\n                            } else if (node.type === 'share') {\n                                return '{% url 'webindex' %}api/share_images/' + node.data.obj.id + '/';\n                            } else if (node.id === '#') {\n                                // root node - Always load your own shares\n                                return '{% url 'api_experimenter' ome.user.id %}';\n                            }\n                        },\n                        // Gather data for request\n                        'data' : function(node) {\n\n                            var payload = {};\n\n                            // Get the data for this query, special case for experimenter as this\n                            // data is being passed as 'experimenter_id' below and the tag interface\n                            // is expecting either a tagset_id or nothing as the 'id'\n                            if (node.hasOwnProperty('data') && node.type != 'experimenter') {\n                                if (node.data.hasOwnProperty('obj')) {\n                                    // share_id is part of the url itself, see above.\n                                    // We only need to handle other containers here:\n                                    if (node.type !== 'share') {\n                                        payload['id'] = node.data.obj.id;\n                                    }\n                                }\n                            }\n\n                            if (node.hasOwnProperty('data') && node.type === 'experimenter') {\n                                payload['member_id'] = node.data.obj.id\n                            }\n\n                            if (node.type === 'share') {\n                                payload['sizeXYZ'] = true;\n                                payload['date'] = true;\n                            }\n\n                            return payload;\n                        },\n                        'cache': false,\n                        // Converter is required because the JSON format being returned is not\n                        // jstree specific.\n                        'converters' : {\n                            \"text json\": function (json) {\n                                var data = JSON.parse(json);\n                                var jstree_data = [];\n\n                                // Add experimenter to the jstree data structure\n                                if (data.hasOwnProperty('experimenter')) {\n                                    var value = data.experimenter;\n                                    var node = {\n                                        'data': {'id': value.id, 'obj': value},\n                                        'text': value.firstName + ' ' + value.lastName,\n                                        'children': true,\n                                        'type': 'experimenter',\n                                        'state': {\n                                        },\n                                        'li_attr': {\n                                            // 'class': 'experimenter',\n                                            'data-id': value.id\n                                        }\n                                    };\n\n                                    // Add 'state' opened by default\n                                    node.state['opened'] = true;\n\n                                    jstree_data.push(node);\n\n                                }\n\n                                // Add share to the jstree data structure\n                                if (data.hasOwnProperty('shares')) {\n                                    $.each(data.shares, function(index, value) {\n                                        var node = {\n                                            'data': {'id': value.id, 'obj': value},\n                                            'text': value.id.toString(),\n                                            'children': (this.isOwned || (this.active && !this.expired)) && value.childCount > 0 ? true : false,\n                                            'type': 'share',\n                                            'state' : {\n                                                'disabled'  : !this.isOwned && ( !this.active || this.expired )\n                                            },\n                                            'li_attr': {\n                                                'class': this.active ? \"\" : \"inactive\",\n                                                'data-id': value.id\n                                            }\n                                        };\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                // Add discussion to the jstree data structure\n                                if (data.hasOwnProperty('discussions')) {\n                                    $.each(data.discussions, function(index, value) {\n                                        var node = {\n                                            'data': {'id': value.id, 'obj': value},\n                                            'text': value.id.toString(),\n                                            'children': false,\n                                            'type': 'discussion',\n                                            'state' : {\n                                                'disabled'  : !this.isOwned && ( !this.active || this.expired )\n                                            },\n                                            'li_attr': {\n                                                'class': this.active ? \"\" : \"inactive\",\n                                                'data-id': value.id\n                                            }\n                                        };\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                // Add images to the jstree data structure\n                                if (data.hasOwnProperty('images')) {\n                                    $.each(data.images, function(index, value) {\n                                        if (value.hasOwnProperty('deleted')){\n                                            var node = {\n                                                'data': {'id': value.id, 'obj': value},\n                                                'text': 'Object deleted',\n                                                'children': false,\n                                                'type': 'deleted',\n                                                'li_attr': {\n                                                    'data-id': value.id\n                                                }\n                                            };\n                                        } else {\n                                            var node = {\n                                                'data': {'id': value.id, 'obj': value},\n                                                'text': value.name,\n                                                'children': false,\n                                                'type': 'image',\n                                                'li_attr': {\n                                                    'data-id': value.id\n                                                }\n                                            };\n                                        }\n                                        jstree_data.push(node);\n                                    });\n                                }\n\n                                return jstree_data;\n                            }\n\n                        }\n                    },\n                    'check_callback': function(operation, node, node_parent, node_position, more) {\n                        var inst = $.jstree.reference(node);\n                        // Allow 'delete_node' on images only\n                        if (operation === 'delete_node' && inst.get_node(node).type === 'image') {\n                            return true;\n                        }\n                        return false\n                    }\n                },\n                'types' : {\n                    '#' : {\n                        'valid_children': ['experimenter']\n                    },\n                    'default': {\n                        'draggable': false\n                    },\n                    'experimenter': {\n                        'icon' : '{% static \"webclient/image/icon_user.png\" %}',\n                        'valid_children': ['share', 'discussion']\n                    },\n                    'share': {\n                        'icon' : '{% static \"webclient/image/left_sidebar_icon_public.png\" %}',\n                        'valid_children': ['image']\n                    },\n                    'discussion': {\n                        'icon' : '{% static \"webclient/image/wp_protocol16.png\" %}'\n                    },\n                    'image': {\n                        'icon': '{% static \"webclient/image/image16.png\" %}',\n                    },\n                    'deleted': {\n                        'icon': false\n                    }\n\n                },\n                'sort': function(nodeId1, nodeId2) {\n                    var inst = this;\n                    var node1 = inst.get_node(nodeId1);\n                    var node2 = inst.get_node(nodeId2);\n                    if (node2.type == 'image') {\n                        return node1.text.toLowerCase() <= node2.text.toLowerCase() ? -1 : 1;\n                    }\n                    // Nodes are 2 types, \"Shares\" and \"Discussions\", but we sort by IDs\n                    return parseInt(node2.data.obj.id) <= parseInt(node1.data.obj.id) ? -1 : 1;\n                },\n                'locate' : {\n                    // Returns a key for this node\n                    'locate_function': function(node) {\n                        // In some cases, this function is called before the data attribute exists\n                        // These should be ignored, this will be called again later when it is\n                        // populated.\n                        if (!node.hasOwnProperty('data') ||\n                            node.data === undefined ||\n                            node.data === null) {\n                            return false;\n                        }\n                        return node.type + '-' + node.data.obj.id;\n                    }\n                },\n                'conditionalselect' : {\n                    // Checks if a selection should be allowed\n                    'conditionalselect_function': function(node) {\n                        // Disable deleted object nodes\n                        if (node.type === 'deleted') {\n                            return false;\n                        }\n\n                        // Disable multi-type selection of shares AND images\n                        var inst = this;\n                        var selected = inst.get_selected(true);\n                        if (selected.length > 0) {\n                            return false;\n                        }\n                        return true;\n                    }\n                },\n                // disable the browser context menu\n                'contextmenu' : {\n                    \"select_node\":true,\n                    \"items\" : function(obj){\n                        var config = {};\n                        return config;\n                    }\n                },\n            });\n        });\n    </script>\n\n    <!-- handle toolbar clicks -->\n    <script type=\"text/javascript\">\n    $(function () {\n\n        $('#removecontentButton').click(function() {\n            var confirm_remove = OME.confirm_dialog('Remove Image?',\n                function() {\n                    if(confirm_remove.data(\"clicked_button\") == \"OK\") {\n                        var inst = $.jstree.reference('#dataTree');\n                        removeImage(inst.get_selected(), inst);\n                        inst.refresh();\n                    }\n                }\n            );\n        });\n\n        $('#refreshButton').click(function() {\n            var inst = $.jstree.reference('#dataTree');\n            inst.refresh();\n        });\n\n        // We (un)truncate images when the left panel resizes...\n        $(\"#left_panel\").on('resize', function(event) {\n            var inst = $.jstree.reference('#dataTree');\n            inst.redraw(true);\n        });\n\n    });\n    </script>\n\n    <!-- set up the middle panel to only show the div chosen by <select> -->\n    {% include \"webclient/data/includes/center_plugin_init.js.html\" %}\n\n    <!-- include code to handle primary 'thumbs' middle plugin -->\n    {% include \"webclient/data/includes/center_plugin.thumbs.js.html\" %}\n\n\n    {% for cp in ome.center_plugins %}\n        {% include cp.include %}\n    {% endfor %}\n\n{% endblock %}\n\n\n\n{% block left %}\n\n<div class=\"left_panel_content\">\n\n<div id=\"left_panel_tabs\" class=\"left_panel_tabs_container ui-tabs\">\n\n    <ul id=\"left_panel_tab_list\" class=\"ui-tabs-nav\">\n        <li id=\"explore_tab\" class=\"ui-state-default\"><a href=\"{% url 'load_template' 'userdata' %}\" class=\"ui-tabs-anchor\" title=\"Explore\">{% trans \"Explore\" %}</a></li>\n        <li id=\"tags_tab\" class=\"ui-state-default\"><a href=\"{% url 'load_template' 'usertags' %}\" class=\"ui-tabs-anchor\">{% trans \"Tags\" %}</a></li>\n        <li id=\"public_tab\" class=\"ui-state-default ui-tabs-active\"><a class=\"ui-tabs-anchor\">{% trans \"Shares\" %}</a></li>\n    </ul>\n\n    <div class=\"left_panel_toolbar\" id=\"Public\">\n        <div class=\"toolbar\">\n            <ul id=\"buttons\">\n\n                <li>\n                    <input id=\"removecontentButton\" class=\"button button-disabled\" type=\"image\" src=\"{% static \"webclient/image/icon_toolbar_cut.png\" %}\" alt=\"Remove content\" title=\"Remove content\" />\n                </li>\n\n                <li class=seperator></li>\n\n                <li>\n                <input id=\"refreshButton\" class=\"button\" type=\"image\" src=\"{% static \"webclient/image/icon_toolbar_refresh.png\" %}\" alt=\"Refresh\" title=\"Refresh\">\n                </li>\n\n            </ul>\n        </div>\n    </div>\n\n</div>\n\n<div class=\"left_panel_tree_container\">\n\n    <div style=\"height: 110px; padding: 15px; box-sizing: border-box;\">\n        <p>Creating new shares is no longer supported. Previously created shares are shown below.</p>\n        <p>Please see <a target=\"_blank\" href=\"https://www.openmicroscopy.org/omero/features/share/\">Sharing your data in\n                OMERO</a>\n            for alternative workflows.\n        </p>\n    </div>\n\n    <div id=\"tree_details\" class=\"left_panel_tree\" style=\"height: calc(100% - 110px)\">\n        <div class=\"datashareTree\" id=\"dataTree\"></div>\n    </div>\n\n</div>\n\n</div>\n\n{% endblock %}\n\n\n{% block center %}\n\n<div id=\"content_details\"> </div>\n\n{% endblock %}\n\n\n{% block right %}\n<div>\n    <div id=\"annotation_tabs\" class=\"absolute_fill\">\n        <ul id=\"annotation_tabs_list\">\n            <li><a href=\"#metadata_general\">{% trans \"General\" %}</a></li>\n            <!-- include right tabs, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n            {% for rt in ome.right_plugins %}\n                <li><a href=\"#{{ rt.plugin_id }}\">{{ rt.label }}</a></li>\n            {% endfor %}\n        </ul>\n        <div id=\"metadata_general\" class=\"right_tab_content\" ></div>\n        <!-- include right tab bodies, as configured in settings.py under \"omero.web.ui.right_tabs\" -->\n        {% for rt in ome.right_plugins %}\n            <div id=\"{{ rt.plugin_id }}\" class=\"right_tab_content\"></div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2008-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\" A view functions is simply a Python function that takes a Web request and\nreturns a Web response. This response can be the HTML contents of a Web page,\nor a redirect, or the 404 and 500 error, or an XML document, or an image...\nor anything.\"\"\"\n\nimport copy\nimport os\nimport datetime\nimport Ice\nfrom Ice import Exception as IceException\nimport logging\nimport traceback\nimport json\nimport re\nimport sys\nimport warnings\nfrom past.builtins import unicode\nfrom future.utils import bytes_to_native_str\nfrom django.utils.http import is_safe_url\n\nfrom time import time\n\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom omeroweb.version import omeroweb_version as omero_version\n\nimport omero\nimport omero.scripts\nfrom omero.rtypes import wrap, unwrap, rlong, rlist\n\nfrom omero.gateway.utils import toBoolean\n\nfrom django.conf import settings\nfrom django.template import loader as template_loader\nfrom django.http import (\n    Http404,\n    HttpResponse,\n    HttpResponseRedirect,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import HttpResponseServerError, HttpResponseBadRequest\nfrom django.utils.http import urlencode\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.utils.encoding import smart_str\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_POST\nfrom django.shortcuts import render\n\n\nfrom omeroweb.webclient.webclient_utils import _formatReport, _purgeCallback\nfrom .forms import GlobalSearchForm, ContainerForm\nfrom .forms import ShareForm\nfrom .forms import ContainerNameForm, ContainerDescriptionForm\nfrom .forms import CommentAnnotationForm, TagsAnnotationForm\nfrom .forms import MetadataFilterForm, MetadataDetectorForm\nfrom .forms import MetadataChannelForm, MetadataEnvironmentForm\nfrom .forms import MetadataObjectiveForm, MetadataObjectiveSettingsForm\nfrom .forms import MetadataStageLabelForm, MetadataLightSourceForm\nfrom .forms import MetadataDichroicForm, MetadataMicroscopeForm\nfrom .forms import FilesAnnotationForm, WellIndexForm, NewTagsAnnotationFormSet\n\nfrom .controller.container import BaseContainer\nfrom .controller.history import BaseCalendar\nfrom .controller.search import BaseSearch\nfrom .controller.share import BaseShare\n\nfrom omeroweb.webadmin.forms import LoginForm\n\nfrom omeroweb.webgateway import views as webgateway_views\nfrom omeroweb.webgateway.marshal import graphResponseMarshal\nfrom omeroweb.webgateway.util import get_longs as webgateway_get_longs\n\nfrom omeroweb.feedback.views import handlerInternalError\n\nfrom omeroweb.webclient.decorators import login_required\nfrom omeroweb.webclient.decorators import render_response\nfrom omeroweb.webclient.show import (\n    Show,\n    IncorrectMenuError,\n    paths_to_object,\n    paths_to_tag,\n)\nfrom omeroweb.decorators import (\n    ConnCleaningHttpResponse,\n    parse_url,\n    TableClosingHttpResponse,\n)\nfrom omeroweb.webgateway.util import getIntOrDefault\n\nfrom omero.model import (\n    AnnotationAnnotationLinkI,\n    DatasetI,\n    DatasetImageLinkI,\n    ExperimenterI,\n    ImageI,\n    OriginalFileI,\n    PlateI,\n    ProjectI,\n    ProjectDatasetLinkI,\n    ScreenI,\n    ScreenPlateLinkI,\n    TagAnnotationI,\n)\nfrom omero import ApiUsageException, ServerError, CmdError\nfrom omeroweb.webgateway.views import LoginView\n\nfrom . import tree\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nlogger = logging.getLogger(__name__)\n\nlogger.info(\"INIT '%s'\" % os.getpid())\n\n# We want to allow a higher default limit for annotations so we can load\n# all the annotations expected for a PAGE of images\nANNOTATIONS_LIMIT = settings.PAGE * 100\n\n\ndef get_long_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    val = None\n    val_raw = request.GET.get(name, default)\n    if val_raw is not None:\n        val = long(val_raw)\n    return val\n\n\ndef get_list(request, name):\n    val = request.GET.getlist(name)\n    return [i for i in val if i != \"\"]\n\n\ndef get_longs(request, name):\n    warnings.warn(\n        \"Deprecated. Use omeroweb.webgateway.util.get_longs()\", DeprecationWarning\n    )\n    return webgateway_get_longs(request, name)\n\n\ndef get_bool_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    return toBoolean(request.GET.get(name, default))\n\n\ndef validate_redirect_url(url):\n    \"\"\"\n    Returns a URL is safe to redirect to.\n    If url is a different host, not in settings.REDIRECT_ALLOWED_HOSTS\n    we return webclient index URL.\n    \"\"\"\n    if not is_safe_url(url, allowed_hosts=settings.REDIRECT_ALLOWED_HOSTS):\n        url = reverse(\"webindex\")\n    return url\n\n\n##############################################################################\n# custom index page\n\n\n@never_cache\n@render_response()\ndef custom_index(request, conn=None, **kwargs):\n    context = {\"version\": omero_version, \"build_year\": build_year}\n\n    if settings.INDEX_TEMPLATE is not None:\n        try:\n            template_loader.get_template(settings.INDEX_TEMPLATE)\n            context[\"template\"] = settings.INDEX_TEMPLATE\n        except Exception:\n            context[\"template\"] = \"webclient/index.html\"\n            context[\"error\"] = traceback.format_exception(*sys.exc_info())[-1]\n    else:\n        context[\"template\"] = \"webclient/index.html\"\n\n    return context\n\n\n##############################################################################\n# views\n\n\nclass WebclientLoginView(LoginView):\n    \"\"\"\n    Webclient Login - Customises the superclass LoginView\n    for webclient. Also can be used by other Apps to log in to OMERO. Uses\n    the 'server' id from request to lookup the server-id (index), host and\n    port from settings. E.g. \"localhost\", 4064. Stores these details, along\n    with username, password etc in the request.session. Resets other data\n    parameters in the request.session. Tries to get connection to OMERO and\n    if this works, then we are redirected to the 'index' page or url\n    specified in REQUEST. If we can't connect, the login page is returned\n    with appropriate error messages.\n    \"\"\"\n\n    template = \"webclient/login.html\"\n    useragent = \"OMERO.web\"\n\n    def get(self, request):\n        \"\"\"\n        GET simply returns the login page\n        \"\"\"\n        return self.handle_not_logged_in(request)\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"\n        We override this to provide webclient-specific functionality\n        such as cleaning up any previous sessions (if user didn't logout)\n        and redirect to specified url or webclient index page.\n        \"\"\"\n\n        # webclient has various state that needs cleaning up...\n        # if 'active_group' remains in session from previous\n        # login, check it's valid for this user\n        # NB: we do this for public users in @login_required.get_connection()\n        if request.session.get(\"active_group\"):\n            if (\n                request.session.get(\"active_group\")\n                not in conn.getEventContext().memberOfGroups\n            ):\n                del request.session[\"active_group\"]\n        if request.session.get(\"user_id\"):\n            # always want to revert to logged-in user\n            del request.session[\"user_id\"]\n        if request.session.get(\"server_settings\"):\n            # always clean when logging in\n            del request.session[\"server_settings\"]\n        # do we ned to display server version ?\n        # server_version = conn.getServerVersion()\n        if request.POST.get(\"noredirect\"):\n            return HttpResponse(\"OK\")\n        url = request.GET.get(\"url\")\n        if url is None or len(url) == 0:\n            try:\n                url = parse_url(settings.LOGIN_REDIRECT)\n            except Exception:\n                url = reverse(\"webindex\")\n        else:\n            url = validate_redirect_url(url)\n        return HttpResponseRedirect(url)\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Returns a response for failed login.\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if form is None:\n            server_id = request.GET.get(\"server\", request.POST.get(\"server\"))\n            if server_id is not None:\n                initial = {\"server\": unicode(server_id)}\n                form = LoginForm(initial=initial)\n            else:\n                form = LoginForm()\n        context = {\n            \"version\": omero_version,\n            \"build_year\": build_year,\n            \"error\": error,\n            \"form\": form,\n        }\n        url = request.GET.get(\"url\")\n        if url is not None and len(url) != 0:\n            context[\"url\"] = urlencode({\"url\": url})\n\n        if hasattr(settings, \"LOGIN_LOGO\"):\n            context[\"LOGIN_LOGO\"] = settings.LOGIN_LOGO\n\n        if settings.PUBLIC_ENABLED:\n            redirect = reverse(\"webindex\")\n            if settings.PUBLIC_URL_FILTER.search(redirect):\n                context[\"public_enabled\"] = True\n                context[\"public_login_redirect\"] = redirect\n\n        context[\"show_download_links\"] = settings.SHOW_CLIENT_DOWNLOADS\n        if settings.SHOW_CLIENT_DOWNLOADS:\n            ver = re.match(\n                (\n                    r\"(?P<major>\\d+)\\.\"\n                    r\"(?P<minor>\\d+)\\.\"\n                    r\"(?P<patch>\\d+\\.?)?\"\n                    r\"(?P<dev>(dev|a|b|rc)\\d+)?.*\"\n                ),\n                omero_version,\n            )\n            client_download_tag_re = \"^v%s\\\\.%s\\\\.[^-]+$\" % (\n                ver.group(\"major\"),\n                ver.group(\"minor\"),\n            )\n            context[\"client_download_tag_re\"] = client_download_tag_re\n            context[\"client_download_repo\"] = settings.CLIENT_DOWNLOAD_GITHUB_REPO\n\n        return render(request, self.template, context)\n\n\n@login_required(ignore_login_fail=True)\ndef keepalive_ping(request, conn=None, **kwargs):\n    \"\"\" Keeps the OMERO session alive by pinging the server \"\"\"\n\n    # login_required handles ping, timeout etc, so we don't need to do\n    # anything else\n    return HttpResponse(\"OK\")\n\n\n@login_required()\ndef change_active_group(request, conn=None, url=None, **kwargs):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    Finally this redirects to the 'url'.\n    \"\"\"\n    switch_active_group(request)\n    url = url or reverse(\"webindex\")\n    url = validate_redirect_url(url)\n    return HttpResponseRedirect(url)\n\n\ndef switch_active_group(request, active_group=None):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    \"\"\"\n    if active_group is None:\n        active_group = request.GET.get(\"active_group\")\n    active_group = int(active_group)\n    if (\n        \"active_group\" not in request.session\n        or active_group != request.session[\"active_group\"]\n    ):\n        request.session.modified = True\n        request.session[\"active_group\"] = active_group\n\n\ndef fake_experimenter(request, default_name=\"All members\"):\n    \"\"\"\n    Marshal faked experimenter when id is -1\n    Load omero.client.ui.menu.dropdown.everyone.label as username\n    \"\"\"\n    label = (\n        request.session.get(\"server_settings\")\n        .get(\"ui\", {})\n        .get(\"menu\", {})\n        .get(\"dropdown\", {})\n        .get(\"everyone\", {})\n        .get(\"label\", default_name)\n    )\n    return {\n        \"id\": -1,\n        \"omeName\": label,\n        \"firstName\": label,\n        \"lastName\": \"\",\n    }\n\n\n@login_required(login_redirect=\"webindex\")\ndef logout(request, conn=None, **kwargs):\n    \"\"\"\n    Logout of the session and redirects to the homepage (will redirect to\n    login first)\n    \"\"\"\n\n    if request.method == \"POST\":\n        try:\n            try:\n                conn.close()\n            except Exception:\n                logger.error(\"Exception during logout.\", exc_info=True)\n        finally:\n            request.session.flush()\n        return HttpResponseRedirect(reverse(settings.LOGIN_VIEW))\n    else:\n        context = {\"url\": reverse(\"weblogout\"), \"submit\": \"Do you want to log out?\"}\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\n###########################################################################\ndef _load_template(request, menu, conn=None, url=None, **kwargs):\n\n    \"\"\"\n    This view handles most of the top-level pages, as specified by 'menu' E.g.\n    userdata, usertags, history, search etc.\n    Query string 'path' that specifies an object to display in the data tree\n    is parsed.\n    We also prepare the list of users in the current group, for the\n    switch-user form. Change-group form is also prepared.\n    \"\"\"\n    request.session.modified = True\n\n    template = kwargs.get(\"template\", None)\n    if template is None:\n        if menu == \"userdata\":\n            template = \"webclient/data/containers.html\"\n        elif menu == \"usertags\":\n            template = \"webclient/data/containers.html\"\n        else:\n            # E.g. search/search.html\n            template = \"webclient/%s/%s.html\" % (menu, menu)\n\n    # tree support\n    show = kwargs.get(\"show\", Show(conn, request, menu))\n    # Constructor does no loading.  Show.first_selected must be called first\n    # in order to set up our initial state correctly.\n    try:\n        first_sel = show.first_selected\n    except IncorrectMenuError as e:\n        return HttpResponseRedirect(e.uri)\n    # We get the owner of the top level object, E.g. Project\n    # Actual api_paths_to_object() is retrieved by jsTree once loaded\n    initially_open_owner = show.initially_open_owner\n\n    # If we failed to find 'show'...\n    if request.GET.get(\"show\", None) is not None and first_sel is None:\n        # and we're logged in as PUBLIC user...\n        if (\n            settings.PUBLIC_ENABLED\n            and settings.PUBLIC_USER == conn.getUser().getOmeName()\n        ):\n            # this is likely a regular user who needs to log in as themselves.\n            # Login then redirect to current url\n            return HttpResponseRedirect(\"%s?url=%s\" % (reverse(\"weblogin\"), url))\n\n    # need to be sure that tree will be correct omero.group\n    if first_sel is not None:\n        switch_active_group(request, first_sel.details.group.id.val)\n\n    # search support\n    init = {}\n    global_search_form = GlobalSearchForm(data=request.GET.copy())\n    if menu == \"search\":\n        if global_search_form.is_valid():\n            init[\"query\"] = global_search_form.cleaned_data[\"search_query\"]\n\n    # get url without request string - used to refresh page after switch\n    # user/group etc\n    url = kwargs.get(\"load_template_url\", None)\n    if url is None:\n        url = reverse(viewname=\"load_template\", args=[menu])\n\n    # validate experimenter is in the active group\n    active_group = request.session.get(\"active_group\") or conn.getEventContext().groupId\n    # prepare members of group...\n    leaders, members = conn.getObject(\"ExperimenterGroup\", active_group).groupSummary()\n    userIds = [u.id for u in leaders]\n    userIds.extend([u.id for u in members])\n\n    # check any change in experimenter...\n    user_id = request.GET.get(\"experimenter\")\n    if initially_open_owner is not None:\n        if request.session.get(\"user_id\", None) != -1:\n            # if we're not already showing 'All Members'...\n            user_id = initially_open_owner\n    try:\n        user_id = long(user_id)\n    except Exception:\n        user_id = None\n    # check if user_id is in a currnt group\n    if user_id is not None:\n        if (\n            user_id\n            not in (\n                set(map(lambda x: x.id, leaders)) | set(map(lambda x: x.id, members))\n            )\n            and user_id != -1\n        ):\n            # All users in group is allowed\n            user_id = None\n    if user_id is None:\n        # ... or check that current user is valid in active group\n        user_id = request.session.get(\"user_id\", None)\n        if user_id is None or int(user_id) not in userIds:\n            if user_id != -1:  # All users in group is allowed\n                user_id = conn.getEventContext().userId\n\n    request.session[\"user_id\"] = user_id\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    groups = myGroups\n\n    new_container_form = ContainerForm()\n\n    # colleagues required for search.html page only.\n    myColleagues = {}\n    if menu == \"search\":\n        for g in groups:\n            g.loadLeadersAndMembers()\n            for c in g.leaders + g.colleagues:\n                myColleagues[c.id] = c\n        myColleagues = list(myColleagues.values())\n        myColleagues.sort(key=lambda x: x.getLastName().lower())\n\n    context = {\n        \"menu\": menu,\n        \"init\": init,\n        \"myGroups\": myGroups,\n        \"new_container_form\": new_container_form,\n        \"global_search_form\": global_search_form,\n    }\n    context[\"groups\"] = groups\n    context[\"myColleagues\"] = myColleagues\n    context[\"active_group\"] = conn.getObject(\"ExperimenterGroup\", long(active_group))\n    context[\"active_user\"] = conn.getObject(\"Experimenter\", long(user_id))\n    context[\"initially_select\"] = show.initially_select\n    context[\"initially_open\"] = show.initially_open\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"current_url\"] = url\n    context[\"page_size\"] = settings.PAGE\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    context[\"current_admin_privileges\"] = conn.getCurrentAdminPrivileges()\n    context[\"leader_of_groups\"] = conn.getEventContext().leaderOfGroups\n    context[\"member_of_groups\"] = conn.getEventContext().memberOfGroups\n\n    return context\n\n\n@login_required()\n@render_response()\ndef load_template(request, menu, conn=None, url=None, **kwargs):\n    return _load_template(request=request, menu=menu, conn=conn, url=url, **kwargs)\n\n\n@login_required()\n@render_response()\ndef group_user_content(request, url=None, conn=None, **kwargs):\n    \"\"\"\n    Loads html content of the Groups/Users drop-down menu on main webclient\n    pages.\n    Url should be supplied in request, as target for redirect after switching\n    group.\n    \"\"\"\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    if conn.isAdmin():  # Admin can see all groups\n        system_groups = [\n            conn.getAdminService().getSecurityRoles().userGroupId,\n            conn.getAdminService().getSecurityRoles().guestGroupId,\n        ]\n        groups = conn.getObjects(\"ExperimenterGroup\", opts={\"load_experimenters\": True})\n        groups = [g for g in groups if g.getId() not in system_groups]\n        groups.sort(key=lambda x: x.getName().lower())\n    else:\n        groups = myGroups\n\n    for g in groups:\n        g.loadLeadersAndMembers()  # load leaders / members\n\n    context = {\n        \"template\": \"webclient/base/includes/group_user_content.html\",\n        \"current_url\": url,\n        \"groups\": groups,\n        \"myGroups\": myGroups,\n    }\n    return context\n\n\n@login_required()\ndef api_group_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get the groups\n        groups = tree.marshal_groups(\n            conn=conn, member_id=member_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"groups\": groups})\n\n\n@login_required()\ndef api_experimenter_detail(request, experimenter_id, conn=None, **kwargs):\n    # Validate parameter\n    try:\n        experimenter_id = long(experimenter_id)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid experimenter id\")\n\n    try:\n        # Get the experimenter\n        if experimenter_id < 0:\n            experimenter = fake_experimenter(request)\n        else:\n            # Get the experimenter\n            experimenter = tree.marshal_experimenter(\n                conn=conn, experimenter_id=experimenter_id\n            )\n            if experimenter is None:\n                raise Http404(\"No Experimenter found with ID %s\" % experimenter_id)\n        return JsonResponse({\"experimenter\": experimenter})\n\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n\n@login_required()\ndef api_container_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        experimenter_id = get_long_or_default(request, \"id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # While this interface does support paging, it does so in a\n    # very odd way. The results per page is enforced per query so this\n    # will actually get the limit for projects, datasets (without\n    # parents), screens and plates (without parents). This is fine for\n    # the first page, but the second page may not be what is expected.\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    r = dict()\n    try:\n        # Get the projects\n        r[\"projects\"] = tree.marshal_projects(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned datasets (without project parents)\n        r[\"datasets\"] = tree.marshal_datasets(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the screens for the current user\n        r[\"screens\"] = tree.marshal_screens(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned plates (without project parents)\n        r[\"plates\"] = tree.marshal_plates(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n        # Get the orphaned images container\n        try:\n            orph_t = request.session[\"server_settings\"][\"ui\"][\"tree\"][\"orphans\"]\n        except Exception:\n            orph_t = {\"enabled\": True}\n        if (\n            conn.isAdmin()\n            or conn.isLeader(gid=request.session.get(\"active_group\"))\n            or experimenter_id == conn.getUserId()\n            or orph_t.get(\"enabled\", True)\n        ):\n\n            orphaned = tree.marshal_orphaned(\n                conn=conn,\n                group_id=group_id,\n                experimenter_id=experimenter_id,\n                page=page,\n                limit=limit,\n            )\n            orphaned[\"name\"] = orph_t.get(\"name\", \"Orphaned Images\")\n            r[\"orphaned\"] = orphaned\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(r)\n\n\n@login_required()\ndef api_dataset_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        project_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the datasets\n        datasets = tree.marshal_datasets(\n            conn=conn, project_id=project_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"datasets\": datasets})\n\n\n@login_required()\ndef api_image_list(request, conn=None, **kwargs):\n    \"\"\"Get a list of images\n    Specifiying dataset_id will return only images in that dataset\n    Specifying experimenter_id will return orpahned images for that\n    user\n    The orphaned images will include images which belong to the user\n    but are not in any dataset belonging to the user\n    Currently specifying both, experimenter_id will be ignored\n\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        dataset_id = get_long_or_default(request, \"id\", None)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        thumb_version = get_bool_or_default(request, \"thumbVersion\", False)\n        date = get_bool_or_default(request, \"date\", False)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    # Share ID is in kwargs from api/share_images/<id>/ which will create\n    # a share connection in @login_required.\n    # We don't support ?share_id in query string since this would allow a\n    # share connection to be created for ALL urls, instead of just this one.\n    share_id = \"share_id\" in kwargs and long(kwargs[\"share_id\"]) or None\n\n    try:\n        # Get the images\n        images = tree.marshal_images(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            dataset_id=dataset_id,\n            share_id=share_id,\n            load_pixels=load_pixels,\n            group_id=group_id,\n            page=page,\n            date=date,\n            thumb_version=thumb_version,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"images\": images})\n\n\n@login_required()\ndef api_plate_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        screen_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the plates\n        plates = tree.marshal_plates(\n            conn=conn, screen_id=screen_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"plates\": plates})\n\n\n@login_required()\ndef api_plate_acquisition_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        plate_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Orphaned PlateAcquisitions are not possible so querying without a\n    # plate is an error\n    if plate_id is None:\n        return HttpResponseBadRequest(\"id (plate) must be specified\")\n\n    try:\n        # Get the plate acquisitions\n        plate_acquisitions = tree.marshal_plate_acquisitions(\n            conn=conn, plate_id=plate_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"acquisitions\": plate_acquisitions})\n\n\ndef get_object_links(conn, parent_type, parent_id, child_type, child_ids):\n    \"\"\" This is just used internally by api_link DELETE below \"\"\"\n    if parent_type == \"orphaned\":\n        return None\n    link_type = None\n    if parent_type == \"experimenter\":\n        if child_type in [\"dataset\", \"plate\", \"tag\"]:\n            # This will be a requested link if a dataset or plate is\n            # moved from the de facto orphaned datasets/plates, it isn't\n            # an error, but no link actually needs removing\n            return None\n    elif parent_type == \"project\":\n        if child_type == \"dataset\":\n            link_type = \"ProjectDatasetLink\"\n    elif parent_type == \"dataset\":\n        if child_type == \"image\":\n            link_type = \"DatasetImageLink\"\n    elif parent_type == \"screen\":\n        if child_type == \"plate\":\n            link_type = \"ScreenPlateLink\"\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link_type = \"AnnotationAnnotationLink\"\n    if not link_type:\n        raise Http404(\"json data needs 'parent_type' and 'child_type'\")\n\n    params = omero.sys.ParametersI()\n    params.addIds(child_ids)\n\n    qs = conn.getQueryService()\n    # Need to fetch child and parent, otherwise\n    # AnnotationAnnotationLink is not loaded\n    q = (\n        \"\"\"\n        from %s olink join fetch olink.child join fetch olink.parent\n        where olink.child.id in (:ids)\n        \"\"\"\n        % link_type\n    )\n    if parent_id:\n        params.add(\"pid\", rlong(parent_id))\n        q += \" and olink.parent.id = :pid\"\n\n    res = qs.findAllByQuery(q, params, conn.SERVICE_OPTS)\n\n    if parent_id is not None and len(res) == 0:\n        raise Http404(\n            \"No link found for %s-%s to %s-%s\"\n            % (parent_type, parent_id, child_type, child_ids)\n        )\n    return link_type, res\n\n\ndef create_link(parent_type, parent_id, child_type, child_id):\n    \"\"\" This is just used internally by api_link DELETE below \"\"\"\n    if parent_type == \"experimenter\":\n        if child_type == \"dataset\" or child_type == \"plate\":\n            # This is actually not a link that needs creating, this\n            # dataset/plate is an orphan\n            return \"orphan\"\n    if parent_type == \"project\":\n        project = ProjectI(long(parent_id), False)\n        if child_type == \"dataset\":\n            dataset = DatasetI(long(child_id), False)\n            link = ProjectDatasetLinkI()\n            link.setParent(project)\n            link.setChild(dataset)\n            return link\n    elif parent_type == \"dataset\":\n        dataset = DatasetI(long(parent_id), False)\n        if child_type == \"image\":\n            image = ImageI(long(child_id), False)\n            link = DatasetImageLinkI()\n            link.setParent(dataset)\n            link.setChild(image)\n            return link\n    elif parent_type == \"screen\":\n        screen = ScreenI(long(parent_id), False)\n        if child_type == \"plate\":\n            plate = PlateI(long(child_id), False)\n            link = ScreenPlateLinkI()\n            link.setParent(screen)\n            link.setChild(plate)\n            return link\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link = AnnotationAnnotationLinkI()\n            link.setParent(TagAnnotationI(long(parent_id), False))\n            link.setChild(TagAnnotationI(long(child_id), False))\n            return link\n    return None\n\n\ndef get_objects_owners(conn, child_type, child_ids):\n    \"\"\"\n    Returns a dict of child_id: owner_id\n    \"\"\"\n    if child_type == \"tag\":\n        child_type = \"Annotation\"\n    owners = {}\n    for obj in conn.getObjects(child_type, child_ids):\n        owners[obj.id] = obj.details.owner.id.val\n    return owners\n\n\n@login_required()\ndef api_links(request, conn=None, **kwargs):\n    \"\"\"\n    Entry point for the api_links methods.\n    We delegate depending on request method to\n    create or delete links between objects.\n    \"\"\"\n    if request.method not in [\"POST\", \"DELETE\"]:\n        return JsonResponse(\n            {\"Error\": \"Need to POST or DELETE JSON data to update links\"}, status=405\n        )\n    # Handle link creation/deletion\n    try:\n        json_data = json.loads(request.body)\n    except TypeError:\n        # for Python 3.5\n        json_data = json.loads(bytes_to_native_str(request.body))\n\n    if request.method == \"POST\":\n        return _api_links_POST(conn, json_data)\n    elif request.method == \"DELETE\":\n        return _api_links_DELETE(conn, json_data)\n\n\ndef _api_links_POST(conn, json_data, **kwargs):\n    \"\"\"Creates links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    When creating a link, fails silently if ValidationException\n    (E.g. adding an image to a Dataset that already has that image).\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n\n    linksToSave = []\n    write_owned = \"WriteOwned\" in conn.getCurrentAdminPrivileges()\n    user_id = conn.getUserId()\n    for parent_type, parents in json_data.items():\n        if parent_type in (\"orphaned\", \"experimenter\"):\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                # batch look-up owners of all child objects\n                child_owners = get_objects_owners(conn, child_type, child_ids)\n                for child_id in child_ids:\n                    parent_id = int(parent_id)\n                    link = create_link(parent_type, parent_id, child_type, child_id)\n                    if link and link != \"orphan\":\n                        # link owner should match child owner\n                        if write_owned and child_owners[child_id] != user_id:\n                            link.details.owner = ExperimenterI(\n                                child_owners[child_id], False\n                            )\n                        linksToSave.append(link)\n\n    if len(linksToSave) > 0:\n        # Need to set context to correct group (E.g parent group)\n        ptype = parent_type.title()\n        if ptype in [\"Tagset\", \"Tag\"]:\n            ptype = \"TagAnnotation\"\n        p = conn.getQueryService().get(ptype, parent_id, conn.SERVICE_OPTS)\n        conn.SERVICE_OPTS.setOmeroGroup(p.details.group.id.val)\n        logger.info(\"api_link: Saving %s links\" % len(linksToSave))\n\n        try:\n            # We try to save all at once, for speed.\n            conn.saveArray(linksToSave)\n            response[\"success\"] = True\n        except Exception:\n            logger.info(\n                \"api_link: Exception on saveArray with %s links\" % len(linksToSave)\n            )\n            # If this fails, e.g. ValidationException because link\n            # already exists, try to save individual links\n            for link in linksToSave:\n                try:\n                    conn.saveObject(link)\n                except Exception:\n                    pass\n            response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\ndef _api_links_DELETE(conn, json_data):\n    \"\"\"Deletes links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    for parent_type, parents in json_data.items():\n        if parent_type == \"orphaned\":\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                objLnks = get_object_links(\n                    conn, parent_type, parent_id, child_type, child_ids\n                )\n                if objLnks is None:\n                    continue\n                linkType, links = objLnks\n                linkIds = [r.id.val for r in links]\n                logger.info(\"api_link: Deleting %s links\" % len(linkIds))\n                conn.deleteObjects(linkType, linkIds, wait=True)\n                # webclient needs to know what is orphaned\n                linkType, remainingLinks = get_object_links(\n                    conn, parent_type, None, child_type, child_ids\n                )\n                # return remaining links in same format as json above\n                # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n                for rl in remainingLinks:\n                    pid = rl.parent.id.val\n                    cid = rl.child.id.val\n                    # Deleting links still in progress above - ignore these\n                    if pid == int(parent_id):\n                        continue\n                    if parent_type not in response:\n                        response[parent_type] = {}\n                    if pid not in response[parent_type]:\n                        response[parent_type][pid] = {child_type: []}\n                    response[parent_type][pid][child_type].append(cid)\n\n    # If we got here, DELETE was OK\n    response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\n@login_required()\ndef api_parent_links(request, conn=None, **kwargs):\n    \"\"\"\n    Get a list of links as\n    {'data': [{id: 12, child:{type:'image', id:1},\n               parent:{type:'dataset', id:2}] }\n\n    Supports ?image=1,2 and ?image=1&image=2\n    \"\"\"\n    parent_types = {\"image\": \"dataset\", \"dataset\": \"project\", \"plate\": \"screen\"}\n    parents = []\n    for child_type, parent_type in parent_types.items():\n        ids = request.GET.getlist(child_type)\n        if len(ids) == 0:\n            continue\n        # support for ?image=1,2\n        child_ids = []\n        for id in ids:\n            for i in id.split(\",\"):\n                child_ids.append(i)\n\n        link_type, result = get_object_links(\n            conn, parent_type, None, child_type, child_ids\n        )\n        for link in result:\n            parents.append(\n                {\n                    \"id\": link.id.val,\n                    \"parent\": {\"type\": parent_type, \"id\": link.parent.id.val},\n                    \"child\": {\"type\": child_type, \"id\": link.child.id.val},\n                }\n            )\n\n    return JsonResponse({\"data\": parents})\n\n\n@login_required()\ndef api_paths_to_object(request, conn=None, **kwargs):\n    \"\"\"\n    This finds the paths to objects in the hierarchy. It returns only\n    the path, not the object hierarchy itself.\n\n    An example usage is for the 'show' functionality\n    Example to go to the image with id 1 somewhere in the tree.\n    http://localhost:8000/webclient/?show=image-1\n\n    This method can tell the webclient exactly what needs to be\n    dynamically loaded to display this in the jstree.\n    \"\"\"\n\n    try:\n        experimenter_id = get_long_or_default(request, \"experimenter\", None)\n        project_id = get_long_or_default(request, \"project\", None)\n        dataset_id = get_long_or_default(request, \"dataset\", None)\n        image_id = get_long_or_default(request, \"image\", None)\n        screen_id = get_long_or_default(request, \"screen\", None)\n        plate_id = get_long_or_default(request, \"plate\", None)\n        acquisition_id = get_long_or_default(request, \"run\", None)\n        # acquisition will override 'run' if both are specified as they are\n        # the same thing\n        acquisition_id = get_long_or_default(request, \"acquisition\", acquisition_id)\n        well_id = request.GET.get(\"well\", None)\n        tag_id = get_long_or_default(request, \"tag\", None)\n        tagset_id = get_long_or_default(request, \"tagset\", None)\n        roi_id = get_long_or_default(request, \"roi\", None)\n        shape_id = get_long_or_default(request, \"shape\", None)\n        group_id = get_long_or_default(request, \"group\", None)\n        page_size = get_long_or_default(request, \"page_size\", settings.PAGE)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if tag_id is not None or tagset_id is not None:\n        paths = paths_to_tag(conn, experimenter_id, tagset_id, tag_id)\n\n    else:\n        paths = paths_to_object(\n            conn,\n            experimenter_id,\n            project_id,\n            dataset_id,\n            image_id,\n            screen_id,\n            plate_id,\n            acquisition_id,\n            well_id,\n            group_id,\n            page_size,\n            roi_id,\n            shape_id,\n        )\n    return JsonResponse({\"paths\": paths})\n\n\n@login_required()\ndef api_tags_and_tagged_list(request, conn=None, **kwargs):\n    if request.method == \"GET\":\n        return api_tags_and_tagged_list_GET(request, conn, **kwargs)\n    elif request.method == \"DELETE\":\n        return api_tags_and_tagged_list_DELETE(request, conn, **kwargs)\n\n\ndef api_tags_and_tagged_list_GET(request, conn=None, **kwargs):\n    \"\"\"Get a list of tags\n    Specifiying tag_id will return any sub-tags, sub-tagsets and\n    objects tagged with that id\n    If no tagset_id is specifed it will return tags which have no\n    parent\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        tag_id = get_long_or_default(request, \"id\", None)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        date = get_bool_or_default(request, \"date\", False)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get ALL data (all owners) under specified tags\n        if tag_id is not None:\n            tagged = tree.marshal_tagged(\n                conn=conn,\n                experimenter_id=experimenter_id,\n                tag_id=tag_id,\n                group_id=group_id,\n                page=page,\n                load_pixels=load_pixels,\n                date=date,\n                limit=limit,\n            )\n        else:\n            tagged = {}\n\n        # Get 'tags' under tag_id\n        tagged[\"tags\"] = tree.marshal_tags(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            tag_id=tag_id,\n            group_id=group_id,\n            page=page,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(tagged)\n\n\ndef api_tags_and_tagged_list_DELETE(request, conn=None, **kwargs):\n    \"\"\"Delete the listed tags by ids\"\"\"\n    # Get parameters\n    try:\n        tag_ids = get_longs(request, \"id\")\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    dcs = list()\n\n    handle = None\n    try:\n        for tag_id in tag_ids:\n            dcs.append(omero.cmd.Delete(\"/Annotation\", tag_id))\n        doall = omero.cmd.DoAll()\n        doall.requests = dcs\n        handle = conn.c.sf.submit(doall, conn.SERVICE_OPTS)\n\n        try:\n            conn._waitOnCmd(handle)\n        finally:\n            handle.close()\n\n    except CmdError as e:\n        return HttpResponseBadRequest(e.message)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(\"\")\n\n\n@login_required()\ndef api_annotations(request, conn=None, **kwargs):\n\n    r = request.GET\n    image_ids = get_list(request, \"image\")\n    dataset_ids = get_list(request, \"dataset\")\n    project_ids = get_list(request, \"project\")\n    screen_ids = get_list(request, \"screen\")\n    plate_ids = get_list(request, \"plate\")\n    run_ids = get_list(request, \"acquisition\")\n    well_ids = get_list(request, \"well\")\n    page = get_long_or_default(request, \"page\", 1)\n    limit = get_long_or_default(request, \"limit\", ANNOTATIONS_LIMIT)\n\n    ann_type = r.get(\"type\", None)\n    ns = r.get(\"ns\", None)\n\n    anns, exps = tree.marshal_annotations(\n        conn,\n        project_ids=project_ids,\n        dataset_ids=dataset_ids,\n        image_ids=image_ids,\n        screen_ids=screen_ids,\n        plate_ids=plate_ids,\n        run_ids=run_ids,\n        well_ids=well_ids,\n        ann_type=ann_type,\n        ns=ns,\n        page=page,\n        limit=limit,\n    )\n\n    return JsonResponse({\"annotations\": anns, \"experimenters\": exps})\n\n\n@login_required()\ndef api_share_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member_id\", -1)\n        owner_id = get_long_or_default(request, \"owner_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Like with api_container_list, this is a combination of\n    # results which will each be able to return up to the limit in page\n    # size\n\n    try:\n        # Get the shares\n        shares = tree.marshal_shares(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n        # Get the discussions\n        discussions = tree.marshal_discussions(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"shares\": shares, \"discussions\": discussions})\n\n\n@login_required()\n@render_response()\ndef load_plate(request, o1_type=None, o1_id=None, conn=None, **kwargs):\n    \"\"\"\n    This loads data for the center panel, via AJAX calls.\n    Used for Datasets, Plates & Orphaned Images.\n    \"\"\"\n\n    # get index of the plate\n    index = getIntOrDefault(request, \"index\", 0)\n\n    # prepare data. E.g. kw = {}  or  {'plate': 301L}  or\n    # 'acquisition': 301L}\n    kw = dict()\n    if o1_type is not None:\n        if o1_id is not None and int(o1_id) > 0:\n            kw[str(o1_type)] = long(o1_id)\n\n    try:\n        manager = BaseContainer(conn, **kw)\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    # prepare forms\n    form_well_index = None\n\n    context = {\"manager\": manager, \"form_well_index\": form_well_index, \"index\": index}\n\n    # load data & template\n    template = None\n    if \"plate\" in kw or \"acquisition\" in kw:\n        fields = manager.getNumberOfFields()\n        if fields is not None:\n            form_well_index = WellIndexForm(initial={\"index\": index, \"range\": fields})\n            if index == 0:\n                index = fields[0]\n\n        # Show parameter will be well-1|well-2\n        show = request.GET.get(\"show\")\n        if show is not None:\n            wells_to_select = []\n            for w in show.split(\"|\"):\n                if \"well-\" in w:\n                    wells_to_select.append(w.replace(\"well-\", \"\"))\n            context[\"select_wells\"] = \",\".join(wells_to_select)\n\n        context[\"baseurl\"] = reverse(\"webgateway\").rstrip(\"/\")\n        context[\"form_well_index\"] = form_well_index\n        context[\"index\"] = index\n        context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n        template = \"webclient/data/plate.html\"\n        if o1_type == \"acquisition\":\n            context[\"acquisition\"] = o1_id\n\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_chgrp_groups(request, conn=None, **kwargs):\n    \"\"\"\n    Get the potential groups we can move selected data to.\n    These will be groups that the owner(s) of selected objects is a member of.\n    Objects are specified by query string like: ?Image=1,2&Dataset=3\n    If no selected objects are specified, simply list the groups that the\n    current user is a member of.\n    Groups list will exclude the 'current' group context.\n    \"\"\"\n\n    ownerIds = []\n    currentGroups = set()\n    groupSets = []\n    groups = {}\n    owners = {}\n    for dtype in (\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"):\n        oids = request.GET.get(dtype, None)\n        if oids is not None:\n            for o in conn.getObjects(dtype, oids.split(\",\")):\n                ownerIds.append(o.getDetails().owner.id.val)\n                currentGroups.add(o.getDetails().group.id.val)\n    ownerIds = list(set(ownerIds))\n    # In case we were passed no objects or they weren't found\n    if len(ownerIds) == 0:\n        ownerIds = [conn.getUserId()]\n    for owner in conn.getObjects(\n        \"Experimenter\", ownerIds, opts={\"load_experimentergroups\": True}\n    ):\n        # Each owner has a set of groups\n        gids = []\n        owners[owner.id] = owner.getFullName()\n        for group in owner.copyGroupExperimenterMap():\n            groups[group.parent.id.val] = group.parent\n            gids.append(group.parent.id.val)\n        groupSets.append(set(gids))\n\n    # Can move to groups that all owners are members of...\n    targetGroupIds = set.intersection(*groupSets)\n    # ...but not 'user' group\n    userGroupId = conn.getAdminService().getSecurityRoles().userGroupId\n    if userGroupId in targetGroupIds:\n        targetGroupIds.remove(userGroupId)\n\n    # if all the Objects are in a single group, exclude it from the target\n    # groups\n    if len(currentGroups) == 1:\n        curr_grp = currentGroups.pop()\n        if curr_grp in targetGroupIds:\n            targetGroupIds.remove(curr_grp)\n\n    def getPerms(group):\n        p = group.getDetails().permissions\n        return {\n            \"write\": p.isGroupWrite(),\n            \"annotate\": p.isGroupAnnotate(),\n            \"read\": p.isGroupRead(),\n        }\n\n    # From groupIds, create a list of group dicts for json\n    targetGroups = []\n    for gid in targetGroupIds:\n        targetGroups.append(\n            {\"id\": gid, \"name\": groups[gid].name.val, \"perms\": getPerms(groups[gid])}\n        )\n    targetGroups.sort(key=lambda x: x[\"name\"])\n\n    owners = [[k, v] for k, v in owners.items()]\n\n    return {\"owners\": owners, \"groups\": targetGroups}\n\n\n@login_required()\n@render_response()\ndef load_chgrp_target(request, group_id, target_type, conn=None, **kwargs):\n    \"\"\" Loads a tree for user to pick target Project, Dataset or Screen \"\"\"\n\n    # filter by group (not switching group)\n    conn.SERVICE_OPTS.setOmeroGroup(int(group_id))\n    owner = getIntOrDefault(request, \"owner\", None)\n\n    manager = BaseContainer(conn)\n    manager.listContainerHierarchy(owner)\n    template = \"webclient/data/chgrp_target_tree.html\"\n\n    context = {\"manager\": manager, \"target_type\": target_type, \"template\": template}\n    return context\n\n\n@login_required()\n@render_response()\ndef load_searching(request, form=None, conn=None, **kwargs):\n    \"\"\"\n    Handles AJAX calls to search\n    \"\"\"\n    manager = BaseSearch(conn)\n\n    foundById = []\n    # form = 'form' if we are searching. Get query from request...\n    r = request.GET\n    if form is not None:\n        query_search = r.get(\"query\", None)\n        if query_search is None:\n            return HttpResponse(\"No search '?query' included\")\n        query_search = query_search.replace(\"+\", \" \")\n        advanced = toBoolean(r.get(\"advanced\"))\n        # If this is an advanced search use 'advanced_search' for query\n        if advanced:\n            query_search = r.get(\"advanced_search\")\n        template = \"webclient/search/search_details.html\"\n\n        onlyTypes = r.getlist(\"datatype\")\n        fields = r.getlist(\"field\")\n        searchGroup = r.get(\"searchGroup\", None)\n        ownedBy = r.get(\"ownedBy\", None)\n\n        useAcquisitionDate = toBoolean(r.get(\"useAcquisitionDate\"))\n        startdate = r.get(\"startdateinput\", None)\n        startdate = startdate is not None and smart_str(startdate) or None\n        enddate = r.get(\"enddateinput\", None)\n        enddate = enddate is not None and smart_str(enddate) or None\n        date = None\n        if startdate is not None:\n            if enddate is None:\n                n = datetime.datetime.now()\n                enddate = \"%s-%02d-%02d\" % (n.year, n.month, n.day)\n            date = \"%s_%s\" % (startdate, enddate)\n\n        # by default, if user has not specified any types:\n        if len(onlyTypes) == 0:\n            onlyTypes = [\"images\"]\n\n        # search is carried out and results are stored in\n        # manager.containers.images etc.\n        manager.search(\n            query_search,\n            onlyTypes,\n            fields,\n            searchGroup,\n            ownedBy,\n            useAcquisitionDate,\n            date,\n            rawQuery=advanced,\n        )\n\n        # if the query is only numbers (separated by commas or spaces)\n        # we search for objects by ID\n        isIds = re.compile(r\"^[\\d ,]+$\")\n        if isIds.search(query_search) is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(-1)\n            idSet = set()\n            for queryId in re.split(\" |,\", query_search):\n                if len(queryId) == 0:\n                    continue\n                try:\n                    searchById = long(queryId)\n                    if searchById in idSet:\n                        continue\n                    idSet.add(searchById)\n                    for t in onlyTypes:\n                        t = t[0:-1]  # remove 's'\n                        if t in (\n                            \"project\",\n                            \"dataset\",\n                            \"image\",\n                            \"screen\",\n                            \"plate\",\n                            \"well\",\n                        ):\n                            obj = conn.getObject(t, searchById)\n                            if obj is not None:\n                                foundById.append({\"otype\": t, \"obj\": obj})\n                except ValueError:\n                    pass\n\n    else:\n        # simply display the search home page.\n        template = \"webclient/search/search.html\"\n\n    context = {\n        \"manager\": manager,\n        \"foundById\": foundById,\n        \"resultCount\": manager.c_size + len(foundById),\n    }\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_details(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This page is the right-hand panel 'general metadata', first tab only.\n    Shown for Projects, Datasets, Images, Screens, Plates, Wells, Tags etc.\n    The data and annotations are loaded by the manager. Display of appropriate\n    data is handled by the template.\n    \"\"\"\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    context = dict()\n\n    # we only expect a single object, but forms can take multiple objects\n    images = c_type == \"image\" and list(conn.getObjects(\"Image\", [c_id])) or list()\n    datasets = (\n        c_type == \"dataset\" and list(conn.getObjects(\"Dataset\", [c_id])) or list()\n    )\n    projects = (\n        c_type == \"project\" and list(conn.getObjects(\"Project\", [c_id])) or list()\n    )\n    screens = c_type == \"screen\" and list(conn.getObjects(\"Screen\", [c_id])) or list()\n    plates = c_type == \"plate\" and list(conn.getObjects(\"Plate\", [c_id])) or list()\n    acquisitions = (\n        c_type == \"acquisition\"\n        and list(conn.getObjects(\"PlateAcquisition\", [c_id]))\n        or list()\n    )\n    shares = (\n        (c_type == \"share\" or c_type == \"discussion\")\n        and [conn.getShare(c_id)]\n        or list()\n    )\n    wells = c_type == \"well\" and list(conn.getObjects(\"Well\", [c_id])) or list()\n\n    # we simply set up the annotation form, passing the objects to be\n    # annotated.\n    selected = {\n        \"images\": c_type == \"image\" and [c_id] or [],\n        \"datasets\": c_type == \"dataset\" and [c_id] or [],\n        \"projects\": c_type == \"project\" and [c_id] or [],\n        \"screens\": c_type == \"screen\" and [c_id] or [],\n        \"plates\": c_type == \"plate\" and [c_id] or [],\n        \"acquisitions\": c_type == \"acquisition\" and [c_id] or [],\n        \"wells\": c_type == \"well\" and [c_id] or [],\n        \"shares\": ((c_type == \"share\" or c_type == \"discussion\") and [c_id] or []),\n    }\n\n    initial = {\n        \"selected\": selected,\n        \"images\": images,\n        \"datasets\": datasets,\n        \"projects\": projects,\n        \"screens\": screens,\n        \"plates\": plates,\n        \"acquisitions\": acquisitions,\n        \"wells\": wells,\n        \"shares\": shares,\n    }\n\n    form_comment = None\n    figScripts = None\n    if c_type in (\"share\", \"discussion\"):\n        template = \"webclient/annotations/annotations_share.html\"\n        manager = BaseShare(conn, c_id)\n        manager.getAllUsers(c_id)\n        manager.getComments(c_id)\n        form_comment = CommentAnnotationForm(initial=initial)\n    else:\n        try:\n            manager = BaseContainer(conn, **{str(c_type): long(c_id), \"index\": index})\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n        if share_id is not None:\n            template = \"webclient/annotations/annotations_share.html\"\n            context[\"share\"] = BaseShare(conn, share_id)\n        else:\n            template = \"webclient/annotations/metadata_general.html\"\n            context[\"canExportAsJpg\"] = manager.canExportAsJpg(request)\n            context[\"annotationCounts\"] = manager.getAnnotationCounts()\n            figScripts = manager.listFigureScripts()\n    context[\"manager\"] = manager\n\n    if c_type in (\"tag\", \"tagset\"):\n        context[\"insight_ns\"] = omero.rtypes.rstring(\n            omero.constants.metadata.NSINSIGHTTAGSET\n        ).val\n    if form_comment is not None:\n        context[\"form_comment\"] = form_comment\n\n    context[\"figScripts\"] = figScripts\n    context[\"template\"] = template\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_preview(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This is the image 'Preview' tab for the right-hand panel.\n    \"\"\"\n    context = {}\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    if share_id:\n        context[\"share\"] = BaseShare(conn, share_id)\n    if c_type == \"well\":\n        manager.image = manager.well.getImage(index)\n\n    allRdefs = manager.image.getAllRenderingDefs()\n    rdefs = {}\n    rdefId = manager.image.getRenderingDefId()\n    # remove duplicates per user\n    for r in allRdefs:\n        ownerId = r[\"owner\"][\"id\"]\n        r[\"current\"] = r[\"id\"] == rdefId\n        # if duplicate rdefs for user, pick one with highest ID\n        if ownerId not in rdefs or rdefs[ownerId][\"id\"] < r[\"id\"]:\n            rdefs[ownerId] = r\n    rdefs = rdefs.values()\n    # format into rdef strings,\n    # E.g. {c: '1|3118:35825$FF0000,2|2086:18975$FFFF00', m: 'c'}\n    rdefQueries = []\n    for r in rdefs:\n        chs = []\n        for i, c in enumerate(r[\"c\"]):\n            act = \"-\"\n            if c[\"active\"]:\n                act = \"\"\n            color = c[\"lut\"] if \"lut\" in c else c[\"color\"]\n            reverse = \"r\" if c[\"inverted\"] else \"-r\"\n            chs.append(\n                \"%s%s|%s:%s%s$%s\" % (act, i + 1, c[\"start\"], c[\"end\"], reverse, color)\n            )\n        rdefQueries.append(\n            {\n                \"id\": r[\"id\"],\n                \"owner\": r[\"owner\"],\n                \"c\": \",\".join(chs),\n                \"m\": r[\"model\"] == \"greyscale\" and \"g\" or \"c\",\n            }\n        )\n    max_w, max_h = conn.getMaxPlaneSize()\n    size_x = manager.image.getSizeX()\n    size_y = manager.image.getSizeY()\n\n    context[\"tiledImage\"] = (size_x * size_y) > (max_w * max_h)\n    context[\"manager\"] = manager\n    context[\"rdefsJson\"] = json.dumps(rdefQueries)\n    context[\"rdefs\"] = rdefs\n    context[\"template\"] = \"webclient/annotations/metadata_preview.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_hierarchy(request, c_type, c_id, conn=None, **kwargs):\n    \"\"\"\n    This loads the ancestors of the specified object and displays them in a\n    static tree.\n    Used by an AJAX call from the metadata_general panel.\n    \"\"\"\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n\n    context = {\"manager\": manager}\n    context[\"template\"] = \"webclient/annotations/metadata_hierarchy.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_acquisition(\n    request, c_type, c_id, conn=None, share_id=None, **kwargs\n):\n    \"\"\"\n    The acquisition tab of the right-hand panel. Only loaded for images.\n    TODO: urls regex should make sure that c_type is only 'image' OR 'well'\n    \"\"\"\n    try:\n        if c_type in (\"share\", \"discussion\"):\n            template = \"webclient/annotations/annotations_share.html\"\n            manager = BaseShare(conn, c_id)\n            manager.getAllUsers(c_id)\n            manager.getComments(c_id)\n        else:\n            template = \"webclient/annotations/metadata_acquisition.html\"\n            manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    form_environment = None\n    form_objective = None\n    form_microscope = None\n    form_instrument_objectives = list()\n    form_stageLabel = None\n    form_filters = list()\n    form_dichroics = list()\n    form_detectors = list()\n    form_channels = list()\n    form_lasers = list()\n\n    lasertypes = list(conn.getEnumerationEntries(\"LaserType\"))\n    arctypes = list(conn.getEnumerationEntries(\"ArcType\"))\n    filamenttypes = list(conn.getEnumerationEntries(\"FilamentType\"))\n\n    # various enums we need for the forms (don't load unless needed)\n    mediums = None\n    immersions = None\n    corrections = None\n\n    if c_type == \"image\":\n        if share_id is None:\n            manager.companionFiles()\n        manager.channelMetadata()\n        for theC, ch in enumerate(manager.channel_metadata):\n            logicalChannel = ch.getLogicalChannel()\n            if logicalChannel is not None:\n                channel = dict()\n                channel[\"form\"] = MetadataChannelForm(\n                    initial={\n                        \"logicalChannel\": logicalChannel,\n                        \"exWave\": ch.getExcitationWave(units=True),\n                        \"emWave\": ch.getEmissionWave(units=True),\n                        \"illuminations\": list(\n                            conn.getEnumerationEntries(\"IlluminationI\")\n                        ),\n                        \"contrastMethods\": list(\n                            conn.getEnumerationEntries(\"ContrastMethodI\")\n                        ),\n                        \"modes\": list(conn.getEnumerationEntries(\"AcquisitionModeI\")),\n                    }\n                )\n                # 9853 Much metadata is not available to 'shares'\n                if share_id is None:\n                    lightPath = logicalChannel.getLightPath()\n                    if lightPath is not None:\n                        channel[\"form_dichroic\"] = None\n                        channel[\"form_excitation_filters\"] = list()\n                        channel[\"form_emission_filters\"] = list()\n                        lightPathDichroic = lightPath.getDichroic()\n                        if lightPathDichroic is not None:\n                            channel[\"form_dichroic\"] = MetadataDichroicForm(\n                                initial={\"dichroic\": lightPathDichroic}\n                            )\n                        filterTypes = list(conn.getEnumerationEntries(\"FilterTypeI\"))\n                        for f in lightPath.getEmissionFilters():\n                            channel[\"form_emission_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n                        for f in lightPath.getExcitationFilters():\n                            channel[\"form_excitation_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n\n                    detectorSettings = logicalChannel.getDetectorSettings()\n                    if (\n                        detectorSettings._obj is not None\n                        and detectorSettings.getDetector()\n                    ):\n                        channel[\"form_detector_settings\"] = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": detectorSettings,\n                                \"detector\": detectorSettings.getDetector(),\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                                \"binnings\": list(conn.getEnumerationEntries(\"Binning\")),\n                            }\n                        )\n\n                    lightSourceSettings = logicalChannel.getLightSourceSettings()\n                    if (\n                        lightSourceSettings is not None\n                        and lightSourceSettings._obj is not None\n                    ):\n                        lightSrc = lightSourceSettings.getLightSource()\n                        if lightSrc is not None:\n                            lstypes = lasertypes\n                            if lightSrc.OMERO_CLASS == \"Arc\":\n                                lstypes = arctypes\n                            elif lightSrc.OMERO_CLASS == \"Filament\":\n                                lstypes = filamenttypes\n                            channel[\"form_light_source\"] = MetadataLightSourceForm(\n                                initial={\n                                    \"lightSource\": lightSrc,\n                                    \"lightSourceSettings\": lightSourceSettings,\n                                    \"lstypes\": lstypes,\n                                    \"mediums\": list(\n                                        conn.getEnumerationEntries(\"LaserMediumI\")\n                                    ),\n                                    \"pulses\": list(\n                                        conn.getEnumerationEntries(\"PulseI\")\n                                    ),\n                                }\n                            )\n                # TODO: We don't display filter sets here yet since they are\n                # not populated on Import by BioFormats.\n                channel[\"label\"] = ch.getLabel()\n                color = ch.getColor()\n                channel[\"color\"] = color is not None and color.getHtml() or None\n                planeInfo = (\n                    manager.image\n                    and manager.image.getPrimaryPixels().copyPlaneInfo(\n                        theC=theC, theZ=0\n                    )\n                )\n                plane_info = []\n\n                for pi in planeInfo:\n                    deltaT = pi.getDeltaT(units=\"SECOND\")\n                    exposure = pi.getExposureTime(units=\"SECOND\")\n                    if deltaT is None and exposure is None:\n                        continue\n                    if deltaT is not None:\n                        deltaT = deltaT.getValue()\n                    if exposure is not None:\n                        exposure = exposure.getValue()\n                    plane_info.append(\n                        {\"theT\": pi.theT, \"deltaT\": deltaT, \"exposureTime\": exposure}\n                    )\n                channel[\"plane_info\"] = plane_info\n\n                form_channels.append(channel)\n\n        try:\n            image = manager.well.getWellSample().image()\n        except Exception:\n            image = manager.image\n\n        if share_id is None:  # 9853\n            if image.getObjectiveSettings() is not None:\n                # load the enums if needed and create our Objective Form\n                if mediums is None:\n                    mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                if immersions is None:\n                    immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                if corrections is None:\n                    corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                form_objective = MetadataObjectiveSettingsForm(\n                    initial={\n                        \"objectiveSettings\": image.getObjectiveSettings(),\n                        \"objective\": image.getObjectiveSettings().getObjective(),\n                        \"mediums\": mediums,\n                        \"immersions\": immersions,\n                        \"corrections\": corrections,\n                    }\n                )\n            if image.getImagingEnvironment() is not None:\n                form_environment = MetadataEnvironmentForm(initial={\"image\": image})\n            if image.getStageLabel() is not None:\n                form_stageLabel = MetadataStageLabelForm(initial={\"image\": image})\n\n            instrument = image.getInstrument()\n            if instrument is not None:\n                if instrument.getMicroscope() is not None:\n                    form_microscope = MetadataMicroscopeForm(\n                        initial={\n                            \"microscopeTypes\": list(\n                                conn.getEnumerationEntries(\"MicroscopeTypeI\")\n                            ),\n                            \"microscope\": instrument.getMicroscope(),\n                        }\n                    )\n\n                objectives = instrument.getObjectives()\n                for o in objectives:\n                    # load the enums if needed and create our Objective Form\n                    if mediums is None:\n                        mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                    if immersions is None:\n                        immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                    if corrections is None:\n                        corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                    obj_form = MetadataObjectiveForm(\n                        initial={\n                            \"objective\": o,\n                            \"mediums\": mediums,\n                            \"immersions\": immersions,\n                            \"corrections\": corrections,\n                        }\n                    )\n                    form_instrument_objectives.append(obj_form)\n                filters = list(instrument.getFilters())\n                if len(filters) > 0:\n                    for f in filters:\n                        form_filter = MetadataFilterForm(\n                            initial={\n                                \"filter\": f,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"FilterTypeI\")\n                                ),\n                            }\n                        )\n                        form_filters.append(form_filter)\n\n                dichroics = list(instrument.getDichroics())\n                for d in dichroics:\n                    form_dichroic = MetadataDichroicForm(initial={\"dichroic\": d})\n                    form_dichroics.append(form_dichroic)\n\n                detectors = list(instrument.getDetectors())\n                if len(detectors) > 0:\n                    for d in detectors:\n                        form_detector = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": None,\n                                \"detector\": d,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                            }\n                        )\n                        form_detectors.append(form_detector)\n\n                lasers = list(instrument.getLightSources())\n                if len(lasers) > 0:\n                    for laser in lasers:\n                        lstypes = lasertypes\n                        if laser.OMERO_CLASS == \"Arc\":\n                            lstypes = arctypes\n                        elif laser.OMERO_CLASS == \"Filament\":\n                            lstypes = filamenttypes\n                        form_laser = MetadataLightSourceForm(\n                            initial={\n                                \"lightSource\": laser,\n                                \"lstypes\": lstypes,\n                                \"mediums\": list(\n                                    conn.getEnumerationEntries(\"LaserMediumI\")\n                                ),\n                                \"pulses\": list(conn.getEnumerationEntries(\"PulseI\")),\n                            }\n                        )\n                        form_lasers.append(form_laser)\n\n    # TODO: remove this 'if' since we should only have c_type = 'image'?\n    context = {\"manager\": manager, \"share_id\": share_id}\n    if c_type not in (\"share\", \"discussion\", \"tag\"):\n        context[\"form_channels\"] = form_channels\n        context[\"form_environment\"] = form_environment\n        context[\"form_objective\"] = form_objective\n        context[\"form_microscope\"] = form_microscope\n        context[\"form_instrument_objectives\"] = form_instrument_objectives\n        context[\"form_filters\"] = form_filters\n        context[\"form_dichroics\"] = form_dichroics\n        context[\"form_detectors\"] = form_detectors\n        context[\"form_lasers\"] = form_lasers\n        context[\"form_stageLabel\"] = form_stageLabel\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_original_metadata(request, imageId, conn=None, share_id=None, **kwargs):\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    context = {\n        \"template\": \"webclient/annotations/original_metadata.html\",\n        \"imageId\": image.getId(),\n    }\n    try:\n        om = image.loadOriginalMetadata()\n        if om is not None:\n            context[\"original_metadata\"] = om[0]\n            context[\"global_metadata\"] = om[1]\n            context[\"series_metadata\"] = om[2]\n    except omero.LockTimeout:\n        # 408 is Request Timeout\n        return HttpResponse(content=\"LockTimeout\", status=408)\n    return context\n\n\n###########################################################################\n# ACTIONS\n\n# Annotation in the right-hand panel is handled the same way for single\n# objects (metadata_general.html)\n# AND for batch annotation (batch_annotate.html) by 4 forms:\n# Comment (this is loaded in the initial page)\n# Tags (the empty form is in the initial page but fields are loaded via AJAX)\n# Local File (this is loaded in the initial page)\n# Existing File (the empty form is in the initial page but field is loaded via\n# AJAX)\n#\n# In each case, the form itself contains hidden fields to specify the\n# object(s) being annotated\n# All forms inherit from a single form that has these fields.\n\n\ndef getObjects(request, conn=None):\n    \"\"\"\n    Prepare objects for use in the annotation forms.\n    These objects are required by the form superclass to populate hidden\n    fields, so we know what we're annotating on submission\n    \"\"\"\n    r = request.GET or request.POST\n    images = (\n        len(r.getlist(\"image\")) > 0\n        and list(conn.getObjects(\"Image\", r.getlist(\"image\")))\n        or list()\n    )\n    datasets = (\n        len(r.getlist(\"dataset\")) > 0\n        and list(conn.getObjects(\"Dataset\", r.getlist(\"dataset\")))\n        or list()\n    )\n    projects = (\n        len(r.getlist(\"project\")) > 0\n        and list(conn.getObjects(\"Project\", r.getlist(\"project\")))\n        or list()\n    )\n    screens = (\n        len(r.getlist(\"screen\")) > 0\n        and list(conn.getObjects(\"Screen\", r.getlist(\"screen\")))\n        or list()\n    )\n    plates = (\n        len(r.getlist(\"plate\")) > 0\n        and list(conn.getObjects(\"Plate\", r.getlist(\"plate\")))\n        or list()\n    )\n    acquisitions = (\n        len(r.getlist(\"acquisition\")) > 0\n        and list(conn.getObjects(\"PlateAcquisition\", r.getlist(\"acquisition\")))\n        or list()\n    )\n    shares = (\n        len(r.getlist(\"share\")) > 0 and [conn.getShare(r.getlist(\"share\")[0])] or list()\n    )\n    wells = (\n        len(r.getlist(\"well\")) > 0\n        and list(conn.getObjects(\"Well\", r.getlist(\"well\")))\n        or list()\n    )\n    return {\n        \"image\": images,\n        \"dataset\": datasets,\n        \"project\": projects,\n        \"screen\": screens,\n        \"plate\": plates,\n        \"acquisition\": acquisitions,\n        \"well\": wells,\n        \"share\": shares,\n    }\n\n\ndef getIds(request):\n    \"\"\"\n    Used by forms to indicate the currently selected objects prepared above\n    \"\"\"\n    r = request.GET or request.POST\n    selected = {\n        \"images\": r.getlist(\"image\"),\n        \"datasets\": r.getlist(\"dataset\"),\n        \"projects\": r.getlist(\"project\"),\n        \"screens\": r.getlist(\"screen\"),\n        \"plates\": r.getlist(\"plate\"),\n        \"acquisitions\": r.getlist(\"acquisition\"),\n        \"wells\": r.getlist(\"well\"),\n        \"shares\": r.getlist(\"share\"),\n    }\n    return selected\n\n\n@login_required()\n@render_response()\ndef batch_annotate(request, conn=None, **kwargs):\n    \"\"\"\n    This page gives a form for batch annotation.\n    Local File form and Comment form are loaded. Other forms are loaded via\n    AJAX\n    \"\"\"\n\n    objs = getObjects(request, conn)\n\n    # get groups for selected objects - setGroup() and create links\n    obj_ids = []\n    obj_labels = []\n    groupIds = set()\n    annotationBlocked = False\n    for key in objs:\n        obj_ids += [\"%s=%s\" % (key, o.id) for o in objs[key]]\n        for o in objs[key]:\n            groupIds.add(o.getDetails().group.id.val)\n            if not o.canAnnotate():\n                annotationBlocked = (\n                    \"Can't add annotations because you don't\" \" have permissions\"\n                )\n            obj_labels.append({\"type\": key.title(), \"id\": o.id, \"name\": o.getName()})\n    obj_string = \"&\".join(obj_ids)\n    link_string = \"|\".join(obj_ids).replace(\"=\", \"-\")\n    if len(groupIds) == 0:\n        # No supported objects found.\n        # If multiple tags / tagsets selected, return placeholder\n        if (\n            len(request.GET.getlist(\"tag\")) > 0\n            or len(request.GET.getlist(\"tagset\")) > 0\n        ):\n            return HttpResponse(\"<h2>Can't batch annotate tags</h2>\")\n        else:\n            return handlerInternalError(request, \"No objects found\")\n    groupId = list(groupIds)[0]\n    conn.SERVICE_OPTS.setOmeroGroup(groupId)\n\n    manager = BaseContainer(conn)\n    figScripts = manager.listFigureScripts(objs)\n    canExportAsJpg = manager.canExportAsJpg(request, objs)\n    filesetInfo = None\n    iids = []\n    if \"image\" in objs and len(objs[\"image\"]) > 0:\n        iids = [i.getId() for i in objs[\"image\"]]\n    if len(iids) > 0:\n        filesetInfo = conn.getFilesetFilesInfo(iids)\n        archivedInfo = conn.getArchivedFilesInfo(iids)\n        filesetInfo[\"count\"] += archivedInfo[\"count\"]\n        filesetInfo[\"size\"] += archivedInfo[\"size\"]\n\n    context = {\n        \"iids\": iids,\n        \"obj_string\": obj_string,\n        \"link_string\": link_string,\n        \"obj_labels\": obj_labels,\n        \"batch_ann\": True,\n        \"figScripts\": figScripts,\n        \"canExportAsJpg\": canExportAsJpg,\n        \"filesetInfo\": filesetInfo,\n        \"annotationBlocked\": annotationBlocked,\n        \"differentGroups\": False,\n    }\n    if len(groupIds) > 1:\n        context[\"annotationBlocked\"] = (\n            \"Can't add annotations because\" \" objects are in different groups\"\n        )\n        context[\"differentGroups\"] = True  # E.g. don't run scripts etc\n    context[\"canDownload\"] = manager.canDownload(objs)\n    context[\"template\"] = \"webclient/annotations/batch_annotate.html\"\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    context[\"annotationCounts\"] = manager.getBatchAnnotationCounts(\n        getObjects(request, conn)\n    )\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_file(request, conn=None, **kwargs):\n    \"\"\"\n    On 'POST', This handles attaching an existing file-annotation(s) and/or\n    upload of a new file to one or more objects\n    Otherwise it generates the form for choosing file-annotations & local\n    files.\n    \"\"\"\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    obj_count = sum([len(selected[types]) for types in selected])\n    if obj_count == 0:\n        raise Http404(\"Need to specify objects via e.g. ?image=1\")\n\n    # Get appropriate manager, either to list available Files to add to single\n    # object, or list ALL Files (multiple objects)\n    manager = None\n    if obj_count == 1:\n        for t in selected:\n            if len(selected[t]) > 0:\n                o_type = t[:-1]  # \"images\" -> \"image\"\n                o_id = selected[t][0]\n                break\n        if o_type in (\n            \"dataset\",\n            \"project\",\n            \"image\",\n            \"screen\",\n            \"plate\",\n            \"acquisition\",\n            \"well\",\n            \"comment\",\n            \"file\",\n            \"tag\",\n            \"tagset\",\n        ):\n            if o_type == \"tagset\":\n                # TODO: this should be handled by the BaseContainer\n                o_type = \"tag\"\n            kw = {}\n            if o_type is not None and int(o_id) > 0:\n                kw[str(o_type)] = int(o_id)\n            try:\n                manager = BaseContainer(conn, **kw)\n            except AttributeError as x:\n                return handlerInternalError(request, x)\n\n    if manager is not None:\n        files = manager.getFilesByObject()\n    else:\n        manager = BaseContainer(conn)\n        for dtype, objs in oids.items():\n            if len(objs) > 0:\n                # NB: we only support a single data-type now. E.g. 'image' OR\n                # 'dataset' etc.\n                files = manager.getFilesByObject(\n                    parent_type=dtype, parent_ids=[o.getId() for o in objs]\n                )\n                break\n\n    initial[\"files\"] = files\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_file = FilesAnnotationForm(initial=initial, data=request.POST.copy())\n        if form_file.is_valid():\n            # Link existing files...\n            files = form_file.cleaned_data[\"files\"]\n            added_files = []\n            if files is not None and len(files) > 0:\n                added_files = manager.createAnnotationsLinks(\"file\", files, oids)\n            # upload new file\n            fileupload = (\n                \"annotation_file\" in request.FILES\n                and request.FILES[\"annotation_file\"]\n                or None\n            )\n            if fileupload is not None and fileupload != \"\":\n                newFileId = manager.createFileAnnotations(fileupload, oids)\n                added_files.append(newFileId)\n            return JsonResponse({\"fileIds\": added_files})\n        else:\n            return HttpResponse(form_file.errors)\n\n    else:\n        form_file = FilesAnnotationForm(initial=initial)\n        context = {\"form_file\": form_file}\n        template = \"webclient/annotations/files_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_rating(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Rating to one or more objects\n    \"\"\"\n    if request.method != \"POST\":\n        raise Http404(\"Only POST supported\")\n    rating = getIntOrDefault(request, \"rating\", 0)\n    oids = getObjects(request, conn)\n\n    # add / update rating\n    for otype, objs in oids.items():\n        for o in objs:\n            o.setRating(rating)\n\n    # return a summary of ratings\n    return JsonResponse({\"success\": True})\n\n\n@login_required()\n@render_response()\ndef annotate_comment(request, conn=None, **kwargs):\n    \"\"\"Handle adding Comments to one or more objects\n    Unbound instance of Comment form not available.\n    If the form has been submitted, a bound instance of the form\n    is created using request.POST\"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\"Unbound instance of form not available.\")\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n        \"shares\": oids[\"share\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!) this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    # Handle form submission...\n    form_multi = CommentAnnotationForm(initial=initial, data=request.POST.copy())\n    if form_multi.is_valid():\n        # In each case below, we pass the {'object_type': [ids]} map\n        content = form_multi.cleaned_data[\"comment\"]\n        if content is not None and content != \"\":\n            if oids[\"share\"] is not None and len(oids[\"share\"]) > 0:\n                sid = oids[\"share\"][0].id\n                manager = BaseShare(conn, sid)\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                textAnn = manager.addComment(host, content)\n                # For shares we need to return html for display...\n                context = {\n                    \"tann\": textAnn,\n                    \"added_by\": conn.getUserId(),\n                    \"template\": \"webclient/annotations/comment.html\",\n                }\n            else:\n                # ...otherwise Comments are re-loaded by AJAX json\n                # so we don't *need* to return anything\n                manager = BaseContainer(conn)\n                annId = manager.createCommentAnnotations(content, oids)\n                context = {\"annId\": annId, \"added_by\": conn.getUserId()}\n            return context\n    else:\n        # TODO: handle invalid form error\n        return HttpResponse(str(form_multi.errors))\n\n\n@login_required()\n@render_response()\ndef annotate_map(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Map Annotations to one or more objects\n    POST data \"mapAnnotation\" should be list of ['key':'value'] pairs.\n    \"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\n            \"Need to POST map annotation data as list of\" \" ['key', 'value'] pairs\"\n        )\n\n    oids = getObjects(request, conn)\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    # this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    data = request.POST.get(\"mapAnnotation\")\n    data = json.loads(data)\n\n    annIds = request.POST.getlist(\"annId\")\n    ns = request.POST.get(\"ns\", omero.constants.metadata.NSCLIENTMAPANNOTATION)\n\n    # Create a new annotation\n    if len(annIds) == 0 and len(data) > 0:\n        duplicate = request.POST.get(\"duplicate\", \"false\")\n        duplicate.lower() == \"true\"\n        # For 'client' map annotations, we enforce 1 annotation per object\n        if ns == omero.constants.metadata.NSCLIENTMAPANNOTATION:\n            duplicate = True\n        if duplicate:\n            # Create a new Map Annotation for each object:\n            for k, objs in oids.items():\n                for obj in objs:\n                    ann = omero.gateway.MapAnnotationWrapper(conn)\n                    ann.setValue(data)\n                    ann.setNs(ns)\n                    ann.save()\n                    annIds.append(ann.getId())\n                    obj.linkAnnotation(ann)\n        else:\n            # Create single Map Annotation and link to all objects\n            ann = omero.gateway.MapAnnotationWrapper(conn)\n            ann.setValue(data)\n            ann.setNs(ns)\n            ann.save()\n            annIds.append(ann.getId())\n            for k, objs in oids.items():\n                for obj in objs:\n                    obj.linkAnnotation(ann)\n    # Or update existing annotations\n    else:\n        for annId in annIds:\n            ann = conn.getObject(\"MapAnnotation\", annId)\n            if ann is None:\n                continue\n            if len(data) > 0:\n                ann.setValue(data)\n                ann.save()\n            else:\n                # Delete if no data\n                handle = conn.deleteObjects(\"/Annotation\", [annId])\n                try:\n                    conn._waitOnCmd(handle)\n                finally:\n                    handle.close()\n        if len(data) == 0:\n            annIds = None\n\n    return {\"annId\": annIds}\n\n\n@login_required()\n@render_response()\ndef marshal_tagging_form_data(request, conn=None, **kwargs):\n    \"\"\"\n    Provides json data to ome.tagging_form.js\n    \"\"\"\n\n    group = get_long_or_default(request, \"group\", -1)\n    conn.SERVICE_OPTS.setOmeroGroup(str(group))\n    try:\n        offset = int(request.GET.get(\"offset\"))\n        limit = int(request.GET.get(\"limit\", 1000))\n    except Exception:\n        offset = limit = None\n\n    jsonmode = request.GET.get(\"jsonmode\")\n    if jsonmode == \"tagcount\":\n        tag_count = conn.getTagCount()\n        return dict(tag_count=tag_count)\n\n    manager = BaseContainer(conn)\n    manager.loadTagsRecursive(eid=-1, offset=offset, limit=limit)\n    all_tags = manager.tags_recursive\n    all_tags_owners = manager.tags_recursive_owners\n\n    if jsonmode == \"tags\":\n        # send tag information without descriptions\n        r = list((i, t, o, s) for i, d, t, o, s in all_tags)\n        return r\n\n    elif jsonmode == \"desc\":\n        # send descriptions for tags\n        return dict((i, d) for i, d, t, o, s in all_tags)\n\n    elif jsonmode == \"owners\":\n        # send owner information\n        return all_tags_owners\n\n    return HttpResponse()\n\n\n@login_required()\n@render_response()\ndef annotate_tags(request, conn=None, **kwargs):\n    \"\"\"\n    This handles creation AND submission of Tags form, adding new AND/OR\n    existing tags to one or more objects\n    \"\"\"\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    obj_count = sum([len(selected[types]) for types in selected])\n\n    # Get appropriate manager, either to list available Tags to add to single\n    # object, or list ALL Tags (multiple objects)\n    manager = None\n    self_id = conn.getEventContext().userId\n\n    tags = []\n\n    # Use the first object we find to set context (assume all objects are\n    # in same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    # Make a list of all current tags\n    # As would be on right column of tagging dialog...\n    taglist, users = tree.marshal_annotations(\n        conn,\n        project_ids=selected[\"projects\"],\n        dataset_ids=selected[\"datasets\"],\n        image_ids=selected[\"images\"],\n        screen_ids=selected[\"screens\"],\n        plate_ids=selected[\"plates\"],\n        run_ids=selected[\"acquisitions\"],\n        well_ids=selected[\"wells\"],\n        ann_type=\"tag\",\n        # If we reach this limit we'll get some tags not removed\n        limit=ANNOTATIONS_LIMIT,\n    )\n\n    userMap = {}\n    for exp in users:\n        userMap[exp[\"id\"]] = exp\n\n    # For batch annotate, only include tags that user has added to all objects\n    if obj_count > 1:\n        # count my links\n        myLinkCount = {}\n        for t in taglist:\n            tid = t[\"id\"]\n            if tid not in myLinkCount:\n                myLinkCount[tid] = 0\n            if t[\"link\"][\"owner\"][\"id\"] == self_id:\n                myLinkCount[tid] += 1\n        # filter\n        taglist = [t for t in taglist if myLinkCount[t[\"id\"]] == obj_count]\n\n    selected_tags = []\n    for tag in taglist:\n        linkOwnerId = tag[\"link\"][\"owner\"][\"id\"]\n        owner = userMap[linkOwnerId]\n        ownerName = \"%s %s\" % (owner[\"firstName\"], owner[\"lastName\"])\n        canDelete = True\n        created = tag[\"link\"][\"date\"]\n        linkOwned = linkOwnerId == self_id\n        selected_tags.append(\n            (tag[\"id\"], self_id, ownerName, canDelete, created, linkOwned)\n        )\n\n    # selected_tags is really a list of tag LINKS.\n    # May be several links per tag.id\n    selected_tags.sort(key=lambda x: x[0])\n\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_tags = TagsAnnotationForm(initial=initial, data=request.POST.copy())\n        newtags_formset = NewTagsAnnotationFormSet(\n            prefix=\"newtags\", data=request.POST.copy()\n        )\n        # Create new tags or Link existing tags...\n        if form_tags.is_valid() and newtags_formset.is_valid():\n            # filter down previously selected tags to the ones linked by\n            # current user\n            selected_tag_ids = [stag[0] for stag in selected_tags if stag[5]]\n            # Remove duplicates from tag IDs\n            selected_tag_ids = list(set(selected_tag_ids))\n            post_tags = list(form_tags.cleaned_data[\"tags\"])\n            tags = [tag for tag in post_tags if tag not in selected_tag_ids]\n            removed = [tag for tag in selected_tag_ids if tag not in post_tags]\n            manager = BaseContainer(conn)\n            if tags:\n                manager.createAnnotationsLinks(\"tag\", tags, oids)\n            new_tags = []\n            for form in newtags_formset.forms:\n                new_tags.append(\n                    manager.createTagAnnotations(\n                        form.cleaned_data[\"tag\"],\n                        form.cleaned_data[\"description\"],\n                        oids,\n                        tag_group_id=form.cleaned_data[\"tagset\"],\n                    )\n                )\n            # only remove Tags where the link is owned by self_id\n            for remove in removed:\n                tag_manager = BaseContainer(conn, tag=remove)\n                tag_manager.remove(\n                    [\n                        \"%s-%s\" % (dtype, obj.id)\n                        for dtype, objs in oids.items()\n                        for obj in objs\n                    ],\n                    tag_owner_id=self_id,\n                )\n            return JsonResponse({\"added\": tags, \"removed\": removed, \"new\": new_tags})\n        else:\n            # TODO: handle invalid form error\n            return HttpResponse(str(form_tags.errors))\n\n    else:\n        form_tags = TagsAnnotationForm(initial=initial)\n        newtags_formset = NewTagsAnnotationFormSet(prefix=\"newtags\")\n        context = {\n            \"form_tags\": form_tags,\n            \"newtags_formset\": newtags_formset,\n            \"selected_tags\": selected_tags,\n        }\n        template = \"webclient/annotations/tags_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@require_POST\n@login_required()\n@render_response()\ndef edit_channel_names(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Edit and save channel names\n    \"\"\"\n    image = conn.getObject(\"Image\", imageId)\n    sizeC = image.getSizeC()\n    channelNames = {}\n    nameDict = {}\n    for i in range(sizeC):\n        cname = request.POST.get(\"channel%d\" % i, None)\n        if cname is not None:\n            cname = smart_str(cname)[:255]  # Truncate to fit in DB\n            channelNames[\"channel%d\" % i] = cname\n            nameDict[i + 1] = cname\n    # If the 'Apply to Dataset' button was used to submit...\n    if request.POST.get(\"confirm_apply\", None) is not None:\n        # plate-123 OR dataset-234\n        parentId = request.POST.get(\"parentId\", None)\n        if parentId is not None:\n            ptype = parentId.split(\"-\")[0].title()\n            pid = long(parentId.split(\"-\")[1])\n            counts = conn.setChannelNames(ptype, [pid], nameDict, channelCount=sizeC)\n    else:\n        counts = conn.setChannelNames(\"Image\", [image.getId()], nameDict)\n    rv = {\"channelNames\": channelNames}\n    if counts:\n        rv[\"imageCount\"] = counts[\"imageCount\"]\n        rv[\"updateCount\"] = counts[\"updateCount\"]\n        return rv\n    else:\n        return {\"error\": \"No parent found to apply Channel Names\"}\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef manage_action_containers(\n    request, action, o_type=None, o_id=None, conn=None, **kwargs\n):\n    \"\"\"\n    Handles many different actions on various objects.\n\n    @param action:      \"addnewcontainer\", (creates a new Project, Dataset,\n                        Screen), \"editname\", \"savename\", \"editdescription\",\n                        \"savedescription\",  (used as GET and POST for in-line\n                        editing),\n                        \"removefromshare\", (tree P/D/I moving etc)\n                        \"delete\", \"deletemany\"      (delete objects)\n                        \"remove\" (remove tag/comment from object)\n    @param o_type:      \"dataset\", \"project\", \"image\", \"screen\", \"plate\",\n                        \"acquisition\", \"well\",\"comment\", \"file\", \"tag\",\n                        \"tagset\",\"share\", \"sharecomment\"\n    \"\"\"\n    template = None\n\n    manager = None\n    if o_type in (\n        \"dataset\",\n        \"project\",\n        \"image\",\n        \"screen\",\n        \"plate\",\n        \"acquisition\",\n        \"well\",\n        \"comment\",\n        \"file\",\n        \"tag\",\n        \"tagset\",\n    ):\n        kw = {}\n        if o_type is not None and int(o_id) > 0:\n            o_id = int(o_id)\n            kw[str(o_type)] = o_id\n        try:\n            manager = BaseContainer(conn, **kw)\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n    elif o_type in (\"share\", \"sharecomment\", \"chat\"):\n        manager = BaseShare(conn, o_id)\n    else:\n        manager = BaseContainer(conn)\n\n    form = None\n    if action == \"addnewcontainer\":\n        # Used within the jsTree to add a new Project, Dataset, Tag,\n        # Tagset etc under a specified parent OR top-level\n        if not request.method == \"POST\":\n            return JsonResponse(\n                {\"Error\": \"Must use POST to create container\"}, status=405\n            )\n\n        form = ContainerForm(data=request.POST.copy())\n        if form.is_valid():\n            logger.debug(\"Create new in %s: %s\" % (o_type, str(form.cleaned_data)))\n            name = form.cleaned_data[\"name\"]\n            description = form.cleaned_data[\"description\"]\n            owner = form.cleaned_data[\"owner\"]\n\n            if o_type == \"project\" and hasattr(manager, o_type) and o_id > 0:\n                oid = manager.createDataset(name, description, owner=owner)\n            elif o_type == \"tagset\" and o_id > 0:\n                oid = manager.createTag(name, description, owner=owner)\n            elif request.POST.get(\"folder_type\") in (\n                \"project\",\n                \"screen\",\n                \"dataset\",\n                \"tag\",\n                \"tagset\",\n            ):\n                # No parent specified. We can create orphaned 'project',\n                # 'dataset' etc.\n                folder_type = request.POST.get(\"folder_type\")\n                if folder_type == \"dataset\":\n                    oid = manager.createDataset(\n                        name,\n                        description,\n                        owner=owner,\n                        img_ids=request.POST.getlist(\"image\", None),\n                    )\n                else:\n                    oid = conn.createContainer(\n                        folder_type, name, description, owner=owner\n                    )\n            else:\n                return HttpResponseServerError(\"Object does not exist\")\n            rdict = {\"bad\": \"false\", \"id\": oid}\n            return JsonResponse(rdict)\n        else:\n            d = dict()\n            for e in form.errors.items():\n                d.update({e[0]: unicode(e[1])})\n            rdict = {\"bad\": \"true\", \"errs\": d}\n            return JsonResponse(rdict)\n\n    elif action == \"edit\":\n        # form for editing Shares only\n        if o_id is None:\n            raise Http404(\"No share ID\")\n        if o_type == \"share\" and int(o_id) > 0:\n            template = \"webclient/public/share_form.html\"\n            manager.getMembers(o_id)\n            manager.getComments(o_id)\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            initial = {\n                \"message\": manager.share.message,\n                \"expiration\": \"\",\n                \"shareMembers\": manager.membersInShare,\n                \"enable\": manager.share.active,\n                \"experimenters\": experimenters,\n            }\n            if manager.share.getExpireDate() is not None:\n                initial[\"expiration\"] = manager.share.getExpireDate().strftime(\n                    \"%Y-%m-%d\"\n                )\n            form = ShareForm(initial=initial)  # 'guests':share.guestsInShare,\n            context = {\"manager\": manager, \"form\": form}\n    elif action == \"save\":\n        # Handles submission of the 'edit' form above. TODO: not used now?\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if o_type == \"share\":\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            form = ShareForm(\n                initial={\"experimenters\": experimenters}, data=request.POST.copy()\n            )\n            if form.is_valid():\n                logger.debug(\"Update share: %s\" % (str(form.cleaned_data)))\n                message = form.cleaned_data[\"message\"]\n                expiration = form.cleaned_data[\"expiration\"]\n                members = form.cleaned_data[\"members\"]\n                # guests = request.POST['guests']\n                enable = form.cleaned_data[\"enable\"]\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                manager.updateShareOrDiscussion(\n                    host, message, members, enable, expiration\n                )\n                r = \"enable\" if enable else \"disable\"\n                return HttpResponse(r)\n            else:\n                template = \"webclient/public/share_form.html\"\n                context = {\"share\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editname\":\n        # start editing 'name' in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            if o_type == \"tag\":\n                txtValue = obj.textValue\n            else:\n                txtValue = obj.getName()\n            form = ContainerNameForm(initial={\"name\": txtValue})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savename\":\n        # Save name edit in-line\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerNameForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                name = form.cleaned_data[\"name\"]\n                rdict = {\"bad\": \"false\", \"o_type\": o_type}\n                manager.updateName(o_type, name)\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editdescription\":\n        # start editing description in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            form = ContainerDescriptionForm(initial={\"description\": obj.description})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savedescription\":\n        # Save editing of description in-line\n        if not request.method == \"POST\":\n            return HttpResponseServerError(\n                \"Action '%s' on the '%s' id:%s cannot be complited\"\n                % (action, o_type, o_id)\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerDescriptionForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                description = form.cleaned_data[\"description\"]\n                manager.updateDescription(o_type, description)\n                rdict = {\"bad\": \"false\"}\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"remove\":\n        # Handles removal of comment, tag from\n        # Object etc.\n        # E.g. image-123  or image-1|image-2\n        parents = request.POST[\"parent\"]\n        try:\n            manager.remove(parents.split(\"|\"))\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"removefromshare\":\n        image_id = request.POST.get(\"source\")\n        try:\n            manager.removeImage(image_id)\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"delete\":\n        # Handles delete of a file attached to object.\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        try:\n            handle = manager.deleteItem(child, anns)\n            request.session[\"callback\"][str(handle)] = {\n                \"job_type\": \"delete\",\n                \"delmany\": False,\n                \"did\": o_id,\n                \"dtype\": o_type,\n                \"status\": \"in progress\",\n                \"error\": 0,\n                \"dreport\": _formatReport(handle),\n                \"start_time\": datetime.datetime.now(),\n            }\n            request.session.modified = True\n        except Exception as x:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": o_id, \"dtype\": o_type}, exc_info=True\n            )\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"deletemany\":\n        # Handles multi-delete from jsTree.\n        object_ids = {\n            \"Image\": request.POST.getlist(\"image\"),\n            \"Dataset\": request.POST.getlist(\"dataset\"),\n            \"Project\": request.POST.getlist(\"project\"),\n            \"Annotation\": request.POST.getlist(\"tag\"),\n            \"Screen\": request.POST.getlist(\"screen\"),\n            \"Plate\": request.POST.getlist(\"plate\"),\n            \"Well\": request.POST.getlist(\"well\"),\n            \"PlateAcquisition\": request.POST.getlist(\"acquisition\"),\n        }\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        logger.debug(\n            \"Delete many: child? %s anns? %s object_ids %s\" % (child, anns, object_ids)\n        )\n        try:\n            for key, ids in object_ids.items():\n                if ids is not None and len(ids) > 0:\n                    handle = manager.deleteObjects(key, ids, child, anns)\n                    if key == \"PlateAcquisition\":\n                        key = \"Plate Run\"  # for nicer user message\n                    dMap = {\n                        \"job_type\": \"delete\",\n                        \"start_time\": datetime.datetime.now(),\n                        \"status\": \"in progress\",\n                        \"error\": 0,\n                        \"dreport\": _formatReport(handle),\n                        \"dtype\": key,\n                    }\n                    if len(ids) > 1:\n                        dMap[\"delmany\"] = len(ids)\n                        dMap[\"did\"] = ids\n                    else:\n                        dMap[\"delmany\"] = False\n                        dMap[\"did\"] = ids[0]\n                    request.session[\"callback\"][str(handle)] = dMap\n            request.session.modified = True\n        except Exception:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": ids, \"dtype\": key}, exc_info=True\n            )\n            # Ajax error handling will allow user to submit bug report\n            raise\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    context[\"template\"] = template\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef get_original_file(request, fileId, download=False, conn=None, **kwargs):\n    \"\"\"\n    Returns the specified original file as an http response. Used for\n    displaying text or png/jpeg etc files in browser\n    \"\"\"\n\n    # May be viewing results of a script run in a different group.\n    conn.SERVICE_OPTS.setOmeroGroup(-1)\n\n    orig_file = conn.getObject(\"OriginalFile\", fileId)\n    if orig_file is None:\n        return handlerInternalError(\n            request, \"Original File does not exist (id:%s).\" % (fileId)\n        )\n\n    rsp = ConnCleaningHttpResponse(orig_file.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    mimetype = orig_file.mimetype\n    if mimetype == \"text/x-python\":\n        mimetype = \"text/plain\"  # allows display in browser\n    rsp[\"Content-Type\"] = mimetype\n    rsp[\"Content-Length\"] = orig_file.getSize()\n\n    if download:\n        downloadName = orig_file.name.replace(\" \", \"_\")\n        downloadName = downloadName.replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\n@render_response()\ndef omero_table(request, file_id, mtype=None, conn=None, **kwargs):\n    \"\"\"\n    Download OMERO.table as CSV (streaming response) or return as HTML or json\n\n    @param file_id:     OriginalFile ID\n    @param mtype:       None for html table or 'csv' or 'json'\n    @param conn:        BlitzGateway connection\n    \"\"\"\n\n    query = request.GET.get(\"query\", \"*\")\n    offset = get_long_or_default(request, \"offset\", 0)\n    limit = get_long_or_default(request, \"limit\", settings.PAGE)\n    iviewer_url = None\n    try:\n        iviewer_url = reverse(\"omero_iviewer_index\")\n    except NoReverseMatch:\n        pass\n\n    # Check if file exists since _table_query() doesn't check\n    file_id = long(file_id)\n    orig_file = conn.getObject(\"OriginalFile\", file_id)\n    if orig_file is None:\n        raise Http404(\"OriginalFile %s not found\" % file_id)\n\n    lazy = mtype == \"csv\"\n    context = webgateway_views._table_query(\n        request, file_id, conn=conn, query=query, offset=offset, limit=limit, lazy=lazy\n    )\n\n    if context.get(\"error\") or not context.get(\"data\"):\n        return JsonResponse(context)\n\n    # OR, return as csv or html\n    if mtype == \"csv\":\n        table_data = context.get(\"data\")\n\n        def csv_gen():\n            csv_cols = \",\".join(table_data.get(\"columns\"))\n            yield csv_cols\n            for rows in table_data.get(\"lazy_rows\"):\n                yield (\n                    \"\\n\" + \"\\n\".join([\",\".join([str(d) for d in row]) for row in rows])\n                )\n\n        downloadName = orig_file.name.replace(\" \", \"_\").replace(\",\", \".\")\n        downloadName = downloadName + \".csv\"\n\n        rsp = TableClosingHttpResponse(csv_gen(), content_type=\"text/csv\")\n        rsp.conn = conn\n        rsp.table = context.get(\"table\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        # rsp['Content-Length'] = ann.getFileSize()\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n        return rsp\n\n    context[\"data\"][\"name\"] = orig_file.name\n    context[\"data\"][\"path\"] = orig_file.path\n    context[\"data\"][\"id\"] = file_id\n    context[\"meta\"][\"query\"] = query\n\n    # check if offset matches an integer page number:\n    if offset == 0 or offset / limit == offset // limit:\n        context[\"meta\"][\"page\"] = (offset // limit) + 1 if offset > 0 else 1\n\n    # pagination links\n    url = reverse(\"omero_table\", args=[file_id])\n    context[\"meta\"][\"url\"] = url\n    url += \"?limit=%s\" % limit\n    if query != \"*\":\n        url += \"&query=%s\" % query\n    if (offset + limit) < context[\"meta\"][\"totalCount\"]:\n        context[\"meta\"][\"next\"] = url + \"&offset=%s\" % (offset + limit)\n    if offset > 0:\n        context[\"meta\"][\"prev\"] = url + \"&offset=%s\" % (max(0, offset - limit))\n\n    # by default, return context as JSON data\n    if mtype is None:\n        context[\"template\"] = \"webclient/annotations/omero_table.html\"\n        context[\"iviewer_url\"] = iviewer_url\n        col_types = context[\"data\"][\"column_types\"]\n        if \"ImageColumn\" in col_types:\n            context[\"image_column_index\"] = col_types.index(\"ImageColumn\")\n        if \"WellColumn\" in col_types:\n            context[\"well_column_index\"] = col_types.index(\"WellColumn\")\n        if \"RoiColumn\" in col_types:\n            context[\"roi_column_index\"] = col_types.index(\"RoiColumn\")\n        # provide example queries - pick first DoubleColumn...\n        for idx, c_type in enumerate(col_types):\n            if c_type in (\"DoubleColumn\", \"LongColumn\"):\n                col_name = context[\"data\"][\"columns\"][idx]\n                # find first few non-empty cells...\n                vals = []\n                for row in context[\"data\"][\"rows\"]:\n                    if row[idx]:\n                        vals.append(row[idx])\n                    if len(vals) > 3:\n                        break\n                if \" \" in col_name or len(vals) < 2:\n                    # Don't support queries on columns with spaces\n                    continue\n                context[\"example_column\"] = col_name\n                context[\"example_min_value\"] = min(vals)\n                context[\"example_max_value\"] = max(vals)\n                break\n\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef download_annotation(request, annId, conn=None, **kwargs):\n    \"\"\" Returns the file annotation as an http response for download \"\"\"\n    ann = conn.getObject(\"FileAnnotation\", annId)\n    if ann is None:\n        return handlerInternalError(\n            request, \"FileAnnotation does not exist (id:%s).\" % (annId)\n        )\n\n    rsp = ConnCleaningHttpResponse(ann.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = ann.getFileSize()\n    rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (\n        ann.getFileName().replace(\" \", \"_\")\n    )\n    return rsp\n\n\n@login_required()\ndef download_orig_metadata(request, imageId, conn=None, **kwargs):\n    \"\"\" Downloads the 'Original Metadata' as a text file \"\"\"\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    om = image.loadOriginalMetadata()\n\n    txtLines = [\"[Global Metadata]\"]\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[1]])\n\n    txtLines.append(\"[Series Metadata]\")\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[2]])\n    rspText = \"\\n\".join(txtLines)\n\n    rsp = HttpResponse(rspText)\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = len(rspText)\n    rsp[\"Content-Disposition\"] = \"attachment; filename=Original_Metadata.txt\"\n    return rsp\n\n\n@login_required()\n@render_response()\ndef download_placeholder(request, conn=None, **kwargs):\n    \"\"\"\n    Page displays a simple \"Preparing download...\" message and redirects to\n    the 'url'.\n    We construct the url and query string from request: 'url' and 'ids'.\n    \"\"\"\n\n    format = request.GET.get(\"format\", None)\n    if format is not None:\n        download_url = reverse(\"download_as\")\n        zipName = \"Export_as_%s\" % format\n    else:\n        download_url = reverse(\"archived_files\")\n        zipName = \"OriginalFileDownload\"\n    targetIds = request.GET.get(\"ids\")  # E.g. image-1|image-2\n    defaultName = request.GET.get(\"name\", zipName)  # default zip name\n    defaultName = os.path.basename(defaultName)  # remove path\n\n    if targetIds is None:\n        raise Http404(\"No IDs specified. E.g. ?ids=image-1|image-2\")\n\n    ids = targetIds.split(\"|\")\n\n    fileLists = []\n    fileCount = 0\n    filesTotalSize = 0\n    # If we're downloading originals, list original files so user can\n    # download individual files.\n    if format is None:\n        imgIds = []\n        wellIds = []\n        for i in ids:\n            if i.split(\"-\")[0] == \"image\":\n                imgIds.append(i.split(\"-\")[1])\n            elif i.split(\"-\")[0] == \"well\":\n                wellIds.append(i.split(\"-\")[1])\n\n        images = []\n        # Get images...\n        if imgIds:\n            images = list(conn.getObjects(\"Image\", imgIds))\n\n        if len(images) == 0:\n            raise Http404(\"No images found.\")\n\n        # Have a list of files per fileset (or per image without fileset)\n        fsIds = set()\n        fileIds = set()\n        for image in images:\n            fs = image.getFileset()\n            if fs is not None:\n                # Make sure we've not processed this fileset before.\n                if fs.id in fsIds:\n                    continue\n                fsIds.add(fs.id)\n            files = list(image.getImportedImageFiles())\n            fList = []\n            for f in files:\n                if f.id in fileIds:\n                    continue\n                fileIds.add(f.id)\n                fList.append({\"id\": f.id, \"name\": f.name, \"size\": f.getSize()})\n                filesTotalSize += f.getSize()\n            if len(fList) > 0:\n                fileLists.append(fList)\n        fileCount = sum([len(fList) for fList in fileLists])\n    else:\n        # E.g. JPEG/PNG - 1 file per image\n        fileCount = len(ids)\n\n    query = \"&\".join([_id.replace(\"-\", \"=\") for _id in ids])\n    download_url = download_url + \"?\" + query\n    if format is not None:\n        download_url = download_url + \"&format=%s\" % format\n\n    context = {\n        \"template\": \"webclient/annotations/download_placeholder.html\",\n        \"url\": download_url,\n        \"defaultName\": defaultName,\n        \"fileLists\": fileLists,\n        \"fileCount\": fileCount,\n        \"filesTotalSize\": filesTotalSize,\n    }\n    if filesTotalSize > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n        context[\"downloadTooLarge\"] = settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_calendar(request, year=None, month=None, conn=None, **kwargs):\n    \"\"\"\n    Loads the calendar which is displayed in the left panel of the history\n    page.\n    Shows current month by default. Filter by experimenter\n    \"\"\"\n\n    template = \"webclient/history/calendar.html\"\n    filter_user_id = request.session.get(\"user_id\")\n\n    if year is not None and month is not None:\n        controller = BaseCalendar(conn=conn, year=year, month=month, eid=filter_user_id)\n    else:\n        today = datetime.datetime.today()\n        controller = BaseCalendar(\n            conn=conn, year=today.year, month=today.month, eid=filter_user_id\n        )\n    controller.create_calendar()\n\n    context = {\"controller\": controller}\n\n    context[\"template\"] = template\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_history(request, year, month, day, conn=None, **kwargs):\n    \"\"\" The data for a particular date that is loaded into the center panel \"\"\"\n\n    if year is None or month is None or day is None:\n        raise Http404(\"Year, month, and day are required\")\n\n    template = \"webclient/history/history_details.html\"\n\n    # get page\n    page = int(request.GET.get(\"page\", 1))\n\n    filter_user_id = request.session.get(\"user_id\")\n    controller = BaseCalendar(\n        conn=conn, year=year, month=month, day=day, eid=filter_user_id\n    )\n    controller.get_items(page)\n\n    context = {\"controller\": controller}\n    context[\"template\"] = template\n    return context\n\n\ndef getObjectUrl(conn, obj):\n    \"\"\"\n    This provides a url to browse to the specified omero.model.ObjectI P/D/I,\n    S/P, FileAnnotation etc. used to display results from the scripting\n    service\n    E.g webclient/userdata/?path=image-12601\n    If the object is a file annotation, try to browse to the parent P/D/I\n    \"\"\"\n    base_url = reverse(viewname=\"load_template\", args=[\"userdata\"])\n\n    # if we have a File Annotation, then we want our URL to be for the parent\n    # object...\n    if isinstance(obj, omero.model.FileAnnotationI):\n        fa = conn.getObject(\"Annotation\", obj.id.val)\n        for ptype in [\"project\", \"dataset\", \"image\"]:\n            links = list(fa.getParentLinks(ptype))\n            if len(links) > 0:\n                obj = links[0].parent\n                break\n\n    if obj.__class__.__name__ in (\n        \"ImageI\",\n        \"DatasetI\",\n        \"ProjectI\",\n        \"ScreenI\",\n        \"PlateI\",\n        \"WellI\",\n    ):\n        otype = obj.__class__.__name__[:-1].lower()\n        base_url += \"?show=%s-%s\" % (otype, obj.id.val)\n        return base_url\n\n\n######################\n# Activities window & Progressbar\ndef update_callback(request, cbString, **kwargs):\n    \"\"\"Update a callback handle with  key/value pairs\"\"\"\n    for key, value in kwargs.items():\n        request.session[\"callback\"][cbString][key] = value\n\n\n@login_required()\n@render_response()\ndef activities(request, conn=None, **kwargs):\n    \"\"\"\n    This refreshes callback handles (delete, scripts, chgrp etc) and provides\n    html to update Activities window & Progressbar.\n    The returned html contains details for ALL callbacks in web session,\n    regardless of their status.\n    We also add counts of jobs, failures and 'in progress' to update status\n    bar.\n    \"\"\"\n\n    in_progress = 0\n    failure = 0\n    new_results = []\n    _purgeCallback(request)\n\n    # If we have a jobId (not added to request.session) just process it...\n    # ONLY used for chgrp/chown dry-run.\n    jobId = request.GET.get(\"jobId\", None)\n    if jobId is not None:\n        jobId = str(jobId)\n        try:\n            prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n            status = prx.getStatus()\n            logger.debug(\"job status: %s\", status)\n            rsp = prx.getResponse()\n            if rsp is not None:\n                rv = graphResponseMarshal(conn, rsp)\n                rv[\"finished\"] = True\n            else:\n                rv = {\"finished\": False}\n            rv[\"status\"] = {\n                \"currentStep\": status.currentStep,\n                \"steps\": status.steps,\n                \"startTime\": status.startTime,\n                \"stopTime\": status.stopTime,\n            }\n        except IceException:\n            rv = {\"finished\": True}\n        return rv\n\n    elif request.method == \"DELETE\":\n        try:\n            json_data = json.loads(request.body)\n        except TypeError:\n            # for Python 3.5\n            json_data = json.loads(bytes_to_native_str(request.body))\n        jobId = json_data.get(\"jobId\", None)\n        if jobId is not None:\n            jobId = str(jobId)\n            rv = {\"jobId\": jobId}\n            try:\n                prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n                status = prx.getStatus()\n                logger.debug(\"pre-cancel() job status: %s\", status)\n                rv[\"status\"] = {\n                    \"currentStep\": status.currentStep,\n                    \"steps\": status.steps,\n                    \"startTime\": status.startTime,\n                    \"stopTime\": status.stopTime,\n                }\n                prx.cancel()\n            except omero.LockTimeout:\n                # expected that it will take > 5 seconds to cancel\n                logger.info(\"Timeout on prx.cancel()\")\n        return rv\n\n    # test each callback for failure, errors, completion, results etc\n    for cbString in request.session.get(\"callback\").keys():\n        callbackDict = request.session[\"callback\"][cbString]\n        job_type = callbackDict[\"job_type\"]\n\n        status = callbackDict[\"status\"]\n        if status == \"failed\":\n            failure += 1\n\n        request.session.modified = True\n\n        # update chgrp / chown\n        if job_type in (\"chgrp\", \"chown\"):\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    rsp = prx.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\n                                    \"%s failed with: %s\" % (job_type, rsp_params)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report=\"%s %s\" % (rsp.name, rsp_params),\n                                    error=1,\n                                )\n                            elif isinstance(rsp, omero.cmd.OK):\n                                update_callback(request, cbString, status=\"finished\")\n                        else:\n                            in_progress += 1\n                    finally:\n                        prx.close(close_handle)\n                except Exception:\n                    logger.info(\n                        \"Activities %s handle not found: %s\" % (job_type, cbString)\n                    )\n                    continue\n        elif job_type == \"send_email\":\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    callback = omero.callbacks.CmdCallbackI(\n                        conn.c, prx, foreground_poll=True\n                    )\n                    rsp = callback.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\"send_email failed with: %s\" % rsp_params)\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report={\"error\": rsp_params},\n                                    error=1,\n                                )\n                            else:\n                                total = (\n                                    rsp.success\n                                    + len(rsp.invalidusers)\n                                    + len(rsp.invalidemails)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"finished\",\n                                    rsp={\"success\": rsp.success, \"total\": total},\n                                )\n                                if (\n                                    len(rsp.invalidusers) > 0\n                                    or len(rsp.invalidemails) > 0\n                                ):\n                                    invalidusers = [\n                                        e.getFullName()\n                                        for e in list(\n                                            conn.getObjects(\n                                                \"Experimenter\", rsp.invalidusers\n                                            )\n                                        )\n                                    ]\n                                    update_callback(\n                                        request,\n                                        cbString,\n                                        report={\n                                            \"invalidusers\": invalidusers,\n                                            \"invalidemails\": rsp.invalidemails,\n                                        },\n                                    )\n                        else:\n                            in_progress += 1\n                    finally:\n                        callback.close(close_handle)\n                except Exception:\n                    logger.error(traceback.format_exc())\n                    logger.info(\"Activities send_email handle not found: %s\" % cbString)\n\n        # update delete\n        elif job_type == \"delete\":\n            if status not in (\"failed\", \"finished\"):\n                try:\n                    handle = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    cb = omero.callbacks.CmdCallbackI(\n                        conn.c, handle, foreground_poll=True\n                    )\n                    rsp = cb.getResponse()\n                    close_handle = False\n                    try:\n                        if not rsp:  # Response not available\n                            update_callback(\n                                request,\n                                cbString,\n                                error=0,\n                                status=\"in progress\",\n                                dreport=_formatReport(handle),\n                            )\n                            in_progress += 1\n                        else:  # Response available\n                            close_handle = True\n                            new_results.append(cbString)\n                            rsp = cb.getResponse()\n                            err = isinstance(rsp, omero.cmd.ERR)\n                            if err:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=1,\n                                    status=\"failed\",\n                                    dreport=_formatReport(handle),\n                                )\n                                failure += 1\n                            else:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=0,\n                                    status=\"finished\",\n                                    dreport=_formatReport(handle),\n                                )\n                    finally:\n                        cb.close(close_handle)\n                except Ice.ObjectNotExistException:\n                    update_callback(\n                        request, cbString, error=0, status=\"finished\", dreport=None\n                    )\n                except Exception as x:\n                    logger.error(traceback.format_exc())\n                    logger.error(\"Status job '%s'error:\" % cbString)\n                    update_callback(\n                        request, cbString, error=1, status=\"failed\", dreport=str(x)\n                    )\n                    failure += 1\n\n        # update scripts\n        elif job_type == \"script\":\n            # if error on runScript, the cbString is not a ProcessCallback...\n            if not cbString.startswith(\"ProcessCallback\"):\n                continue  # ignore\n            if status not in (\"failed\", \"finished\"):\n                logger.info(\"Check callback on script: %s\" % cbString)\n                try:\n                    proc = omero.grid.ScriptProcessPrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                except IceException:\n                    update_callback(\n                        request,\n                        cbString,\n                        status=\"failed\",\n                        Message=\"No process found for job\",\n                        error=1,\n                    )\n                    continue\n                cb = omero.scripts.ProcessCallbackI(conn.c, proc)\n                # check if we get something back from the handle...\n                if cb.block(0):  # ms.\n                    cb.close()\n                    try:\n                        # we can only retrieve this ONCE - must save results\n                        results = proc.getResults(0, conn.SERVICE_OPTS)\n                        update_callback(request, cbString, status=\"finished\")\n                        new_results.append(cbString)\n                    except Exception:\n                        update_callback(\n                            request,\n                            cbString,\n                            status=\"finished\",\n                            Message=\"Failed to get results\",\n                        )\n                        logger.info(\"Failed on proc.getResults() for OMERO.script\")\n                        continue\n                    # value could be rstring, rlong, robject\n                    rMap = {}\n                    for key, value in results.items():\n                        v = value.getValue()\n                        if key in (\"stdout\", \"stderr\", \"Message\"):\n                            if key in (\"stderr\", \"stdout\"):\n                                # just save the id of original file\n                                v = v.id.val\n                            update_kwargs = {key: v}\n                            update_callback(request, cbString, **update_kwargs)\n                        else:\n                            if hasattr(v, \"id\"):\n                                # do we have an object (ImageI,\n                                # FileAnnotationI etc)\n                                obj_data = {\n                                    \"id\": v.id.val,\n                                    \"type\": v.__class__.__name__[:-1],\n                                }\n                                obj_data[\"browse_url\"] = getObjectUrl(conn, v)\n                                if v.isLoaded() and hasattr(v, \"file\"):\n                                    # try:\n                                    mimetypes = {\n                                        \"image/png\": \"png\",\n                                        \"image/jpeg\": \"jpeg\",\n                                        \"text/plain\": \"text\",\n                                    }\n                                    if v.file.mimetype.val in mimetypes:\n                                        obj_data[\"fileType\"] = mimetypes[\n                                            v.file.mimetype.val\n                                        ]\n                                        obj_data[\"fileId\"] = v.file.id.val\n                                    obj_data[\"name\"] = v.file.name.val\n                                    # except Exception:\n                                    #    pass\n                                if v.isLoaded() and hasattr(v, \"name\"):\n                                    # E.g Image, OriginalFile etc\n                                    name = unwrap(v.name)\n                                    if name is not None:\n                                        # E.g. FileAnnotation has null name\n                                        obj_data[\"name\"] = name\n                                rMap[key] = obj_data\n                            else:\n                                rMap[key] = unwrap(v)\n                    update_callback(request, cbString, results=rMap)\n                else:\n                    in_progress += 1\n\n    # having updated the request.session, we can now prepare the data for http\n    # response\n    rv = {}\n    for cbString in request.session.get(\"callback\").keys():\n        # make a copy of the map in session, so that we can replace non\n        # json-compatible objects, without modifying session\n        rv[cbString] = copy.copy(request.session[\"callback\"][cbString])\n\n    # return json (used for testing)\n    if \"template\" in kwargs and kwargs[\"template\"] == \"json\":\n        for cbString in request.session.get(\"callback\").keys():\n            rv[cbString][\"start_time\"] = str(\n                request.session[\"callback\"][cbString][\"start_time\"]\n            )\n        rv[\"inprogress\"] = in_progress\n        rv[\"failure\"] = failure\n        rv[\"jobs\"] = len(request.session[\"callback\"])\n        return JsonResponse(rv)  # json\n\n    jobs = []\n    new_errors = False\n    for key, data in rv.items():\n        # E.g. key: ProcessCallback/39f77932-c447-40d8-8f99-910b5a531a25 -t:tcp -h 10.211.55.2 -p 54727:tcp -h 10.37.129.2 -p 54727:tcp -h 10.12.2.21 -p 54727  # noqa\n        # create id we can use as html id,\n        # E.g. 39f77932-c447-40d8-8f99-910b5a531a25\n        if len(key.split(\" \")) > 0:\n            htmlId = key.split(\" \")[0]\n            if len(htmlId.split(\"/\")) > 1:\n                htmlId = htmlId.split(\"/\")[1]\n        rv[key][\"id\"] = htmlId\n        rv[key][\"key\"] = key\n        if key in new_results:\n            rv[key][\"new\"] = True\n            if \"error\" in data and data[\"error\"] > 0:\n                new_errors = True\n        jobs.append(rv[key])\n\n    jobs.sort(key=lambda x: x[\"start_time\"], reverse=True)\n    context = {\n        \"sizeOfJobs\": len(request.session[\"callback\"]),\n        \"jobs\": jobs,\n        \"inprogress\": in_progress,\n        \"new_results\": len(new_results),\n        \"new_errors\": new_errors,\n        \"failure\": failure,\n    }\n\n    context[\"template\"] = \"webclient/activities/activitiesContent.html\"\n    return context\n\n\n@login_required()\ndef activities_update(request, action, **kwargs):\n    \"\"\"\n    If the above 'action' == 'clean' then we clear jobs from\n    request.session['callback'] either a single job (if 'jobKey' is specified\n    in POST) or all jobs (apart from those in progress)\n    \"\"\"\n\n    request.session.modified = True\n\n    if action == \"clean\":\n        if \"jobKey\" in request.POST:\n            jobId = request.POST.get(\"jobKey\")\n            rv = {}\n            if jobId in request.session[\"callback\"]:\n                del request.session[\"callback\"][jobId]\n                request.session.modified = True\n                rv[\"removed\"] = True\n            else:\n                rv[\"removed\"] = False\n            return JsonResponse(rv)\n        else:\n            jobs = list(request.session[\"callback\"].items())\n            for key, data in jobs:\n                if data[\"status\"] != \"in progress\":\n                    del request.session[\"callback\"][key]\n    return HttpResponse(\"OK\")\n\n\n##############################################################################\n# User Photo\n\n\n@login_required()\ndef avatar(request, oid=None, conn=None, **kwargs):\n    \"\"\" Returns the experimenter's photo \"\"\"\n    photo = conn.getExperimenterPhoto(oid)\n    return HttpResponse(photo, content_type=\"image/jpeg\")\n\n\n##############################################################################\n# webgateway extention\n\n\n@login_required()\ndef image_viewer(request, iid, share_id=None, **kwargs):\n    \"\"\" Delegates to webgateway, using share connection if appropriate \"\"\"\n    kwargs[\"viewport_server\"] = (\n        share_id is not None and reverse(\"webindex\") + share_id or reverse(\"webindex\")\n    )\n    # remove any trailing slash\n    kwargs[\"viewport_server\"] = kwargs[\"viewport_server\"].rstrip(\"/\")\n    return webgateway_views.full_viewer(request, iid, **kwargs)\n\n\n##############################################################################\n# scripting service....\n@login_required()\n@render_response()\ndef list_scripts(request, conn=None, **kwargs):\n    \"\"\"\n    List the available scripts - Just officical scripts for now\n\n    If all scripts are under a single top-level directory, this is\n    removed by default. To prevent this, use ?full_path=true\n    \"\"\"\n    scriptService = conn.getScriptService()\n    scripts = scriptService.getScripts()\n\n    # group scripts into 'folders' (path), named by parent folder name\n    scriptMenu = {}\n    scripts_to_ignore = (\n        request.session.get(\"server_settings\", {})\n        .get(\"scripts_to_ignore\", \"\")\n        .split(\",\")\n    )\n    for s in scripts:\n        scriptId = s.id.val\n        path = s.path.val\n        name = s.name.val\n        fullpath = os.path.join(path, name)\n        if fullpath in scripts_to_ignore:\n            logger.info(\"Ignoring script %r\" % fullpath)\n            continue\n\n        # We want to build a hierarchical <ul> <li> structure\n        # Each <ul> is a {}, each <li> is either a script 'name': <id> or\n        # directory 'name': {ul}\n\n        ul = scriptMenu\n        dirs = fullpath.split(os.path.sep)\n        for li, d in enumerate(dirs):\n            if len(d) == 0:\n                continue\n            if d not in ul:\n                # if last component in path:\n                if li + 1 == len(dirs):\n                    ul[d] = scriptId\n                else:\n                    ul[d] = {}\n            ul = ul[d]\n\n    # convert <ul> maps into lists and sort\n\n    def ul_to_list(ul):\n        dir_list = []\n        for name, value in ul.items():\n            if isinstance(value, dict):\n                # value is a directory\n                dir_list.append({\"name\": name, \"ul\": ul_to_list(value)})\n            else:\n                dir_list.append({\"name\": name, \"id\": value})\n        dir_list.sort(key=lambda x: x[\"name\"].lower())\n        return dir_list\n\n    scriptList = ul_to_list(scriptMenu)\n\n    # If we have a single top-level directory, we can skip it\n    if not request.GET.get(\"full_path\") and len(scriptList) == 1:\n        scriptList = scriptList[0][\"ul\"]\n\n    return scriptList\n\n\n@login_required()\n@render_response()\ndef script_ui(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Generates an html form for the parameters of a defined script.\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    try:\n        params = scriptService.getParams(long(scriptId))\n    except Exception as ex:\n        if ex.message.lower().startswith(\"no processor available\"):\n            return {\n                \"template\": \"webclient/scripts/no_processor.html\",\n                \"scriptId\": scriptId,\n            }\n        raise ex\n    if params is None:\n        return HttpResponse()\n\n    paramData = {}\n\n    paramData[\"id\"] = long(scriptId)\n    paramData[\"name\"] = params.name.replace(\"_\", \" \")\n    paramData[\"description\"] = params.description\n    paramData[\"authors\"] = \", \".join([a for a in params.authors])\n    paramData[\"contact\"] = params.contact\n    paramData[\"version\"] = params.version\n    paramData[\"institutions\"] = \", \".join([i for i in params.institutions])\n\n    inputs = []  # use a list so we can sort by 'grouping'\n    Data_TypeParam = None\n    IDsParam = None\n    for key, param in params.inputs.items():\n        i = {}\n        i[\"name\"] = key.replace(\"_\", \" \")\n        i[\"key\"] = key\n        if not param.optional:\n            i[\"required\"] = True\n        i[\"description\"] = param.description\n        if param.min:\n            i[\"min\"] = str(param.min.getValue())\n        if param.max:\n            i[\"max\"] = str(param.max.getValue())\n        if param.values:\n            i[\"options\"] = [v.getValue() for v in param.values.getValue()]\n        if param.useDefault:\n            i[\"default\"] = unwrap(param.prototype)\n            if isinstance(i[\"default\"], omero.model.IObject):\n                i[\"default\"] = None\n        pt = unwrap(param.prototype)\n        if pt.__class__.__name__ == \"dict\":\n            i[\"map\"] = True\n        elif pt.__class__.__name__ == \"list\":\n            i[\"list\"] = True\n            if \"default\" in i:\n                i[\"default\"] = \",\".join([str(d) for d in i[\"default\"]])\n        elif isinstance(pt, bool):\n            i[\"boolean\"] = True\n        elif isinstance(pt, int) or isinstance(pt, long):\n            # will stop the user entering anything other than numbers.\n            i[\"number\"] = \"number\"\n        elif isinstance(pt, float):\n            i[\"number\"] = \"float\"\n\n        # if we got a value for this key in the page request, use this as\n        # default\n        if request.GET.get(key, None) is not None:\n            i[\"default\"] = request.GET.get(key, None)\n\n        # E.g  \"\"  (string) or [0] (int list) or 0.0 (float)\n        i[\"prototype\"] = unwrap(param.prototype)\n        i[\"grouping\"] = param.grouping\n        inputs.append(i)\n\n        if key == \"IDs\":\n            IDsParam = i  # remember these...\n        if key == \"Data_Type\":\n            Data_TypeParam = i\n    inputs.sort(key=lambda i: i[\"grouping\"])\n\n    # if we have Data_Type param - use the request parameters to populate IDs\n    if (\n        Data_TypeParam is not None\n        and IDsParam is not None\n        and \"options\" in Data_TypeParam\n    ):\n        IDsParam[\"default\"] = \"\"\n        for dtype in Data_TypeParam[\"options\"]:\n            if request.GET.get(dtype, None) is not None:\n                Data_TypeParam[\"default\"] = dtype\n                IDsParam[\"default\"] = request.GET.get(dtype, \"\")\n                break  # only use the first match\n        # if we've not found a match, check whether we have \"Well\" selected\n        if len(IDsParam[\"default\"]) == 0 and request.GET.get(\"Well\", None) is not None:\n            if \"Image\" in Data_TypeParam[\"options\"]:\n                wellIds = [long(j) for j in request.GET.get(\"Well\", None).split(\",\")]\n                wellIdx = 0\n                try:\n                    wellIdx = int(request.GET.get(\"Index\", 0))\n                except Exception:\n                    pass\n                wells = conn.getObjects(\"Well\", wellIds)\n                imgIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n                Data_TypeParam[\"default\"] = \"Image\"\n                IDsParam[\"default\"] = \",\".join(imgIds)\n\n    # try to determine hierarchies in the groupings - ONLY handle 1 hierarchy\n    # level now (not recursive!)\n    for i in range(len(inputs)):\n        if len(inputs) <= i:\n            # we may remove items from inputs as we go - need to check\n            break\n        param = inputs[i]\n        grouping = param[\"grouping\"]  # E.g  03\n        param[\"children\"] = list()\n        while len(inputs) > i + 1:\n            nextGrp = inputs[i + 1][\"grouping\"]  # E.g. 03.1\n            if nextGrp.split(\".\")[0] == grouping:\n                param[\"children\"].append(inputs[i + 1])\n                inputs.pop(i + 1)\n            else:\n                break\n\n    paramData[\"inputs\"] = inputs\n\n    return {\n        \"template\": \"webclient/scripts/script_ui.html\",\n        \"paramData\": paramData,\n        \"scriptId\": scriptId,\n    }\n\n\n@login_required()\n@render_response()\ndef figure_script(request, scriptName, conn=None, **kwargs):\n    \"\"\"\n    Show a UI for running figure scripts\n    \"\"\"\n\n    imageIds = request.GET.get(\"Image\", None)  # comma - delimited list\n    datasetIds = request.GET.get(\"Dataset\", None)\n    wellIds = request.GET.get(\"Well\", None)\n\n    if wellIds is not None:\n        wellIds = [long(i) for i in wellIds.split(\",\")]\n        wells = conn.getObjects(\"Well\", wellIds)\n        wellIdx = getIntOrDefault(request, \"Index\", 0)\n        imageIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n        imageIds = \",\".join(imageIds)\n    if imageIds is None and datasetIds is None:\n        return HttpResponse(\n            \"Need to specify /?Image=1,2 or /?Dataset=1,2 or /?Well=1,2\"\n        )\n\n    def validateIds(dtype, ids):\n        ints = [int(oid) for oid in ids.split(\",\")]\n        validObjs = {}\n        for obj in conn.getObjects(dtype, ints):\n            validObjs[obj.id] = obj\n        filteredIds = [iid for iid in ints if iid in validObjs.keys()]\n        if len(filteredIds) == 0:\n            raise Http404(\"No %ss found with IDs %s\" % (dtype, ids))\n        else:\n            # Now we can specify group context - All should be same group\n            gid = list(validObjs.values())[0].getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n        return filteredIds, validObjs\n\n    context = {}\n\n    if imageIds is not None:\n        imageIds, validImages = validateIds(\"Image\", imageIds)\n        context[\"idString\"] = \",\".join([str(i) for i in imageIds])\n        context[\"dtype\"] = \"Image\"\n    if datasetIds is not None:\n        datasetIds, validDatasets = validateIds(\"Dataset\", datasetIds)\n        context[\"idString\"] = \",\".join([str(i) for i in datasetIds])\n        context[\"dtype\"] = \"Dataset\"\n\n    if scriptName == \"SplitView\":\n        scriptPath = \"/omero/figure_scripts/Split_View_Figure.py\"\n        template = \"webclient/scripts/split_view_figure.html\"\n        # Lookup Tags & Datasets (for row labels)\n        imgDict = []  # A list of data about each image.\n        for iId in imageIds:\n            data = {\"id\": iId}\n            img = validImages[iId]\n            data[\"name\"] = img.getName()\n            tags = [\n                ann.getTextValue()\n                for ann in img.listAnnotations()\n                if ann._obj.__class__ == omero.model.TagAnnotationI\n            ]\n            data[\"tags\"] = tags\n            data[\"datasets\"] = [d.getName() for d in img.listParents()]\n            imgDict.append(data)\n\n        # Use the first image as a reference\n        image = validImages[imageIds[0]]\n        context[\"imgDict\"] = imgDict\n        context[\"image\"] = image\n        context[\"channels\"] = image.getChannels()\n\n    elif scriptName == \"Thumbnail\":\n        scriptPath = \"/omero/figure_scripts/Thumbnail_Figure.py\"\n        template = \"webclient/scripts/thumbnail_figure.html\"\n\n        def loadImageTags(imageIds):\n            tagLinks = conn.getAnnotationLinks(\"Image\", parent_ids=imageIds)\n            linkMap = {}  # group tags. {imageId: [tags]}\n            tagMap = {}\n            for iId in imageIds:\n                linkMap[iId] = []\n            for link in tagLinks:\n                c = link.getChild()\n                if c._obj.__class__ == omero.model.TagAnnotationI:\n                    tagMap[c.id] = c\n                    linkMap[link.getParent().id].append(c)\n            imageTags = []\n            for iId in imageIds:\n                imageTags.append({\"id\": iId, \"tags\": linkMap[iId]})\n            tags = []\n            for tId, t in tagMap.items():\n                tags.append(t)\n            return imageTags, tags\n\n        thumbSets = []  # multiple collections of images\n        tags = []\n        figureName = \"Thumbnail_Figure\"\n        if datasetIds is not None:\n            for d in conn.getObjects(\"Dataset\", datasetIds):\n                imgIds = [i.id for i in d.listChildren()]\n                imageTags, ts = loadImageTags(imgIds)\n                thumbSets.append({\"name\": d.getName(), \"imageTags\": imageTags})\n                tags.extend(ts)\n            figureName = thumbSets[0][\"name\"]\n        else:\n            imageTags, ts = loadImageTags(imageIds)\n            thumbSets.append({\"name\": \"images\", \"imageTags\": imageTags})\n            tags.extend(ts)\n            parent = conn.getObject(\"Image\", imageIds[0]).getParent()\n            figureName = parent.getName() or \"Thumbnail Figure\"\n            context[\"parent_id\"] = parent.getId()\n        uniqueTagIds = set()  # remove duplicates\n        uniqueTags = []\n        for t in tags:\n            if t.id not in uniqueTagIds:\n                uniqueTags.append(t)\n                uniqueTagIds.add(t.id)\n        uniqueTags.sort(key=lambda x: x.getTextValue().lower())\n        context[\"thumbSets\"] = thumbSets\n        context[\"tags\"] = uniqueTags\n        context[\"figureName\"] = figureName.replace(\" \", \"_\")\n\n    elif scriptName == \"MakeMovie\":\n        scriptPath = \"/omero/export_scripts/Make_Movie.py\"\n        template = \"webclient/scripts/make_movie.html\"\n\n        # expect to run on a single image at a time\n        image = conn.getObject(\"Image\", imageIds[0])\n        # remove extension (if 3 chars or less)\n        movieName = image.getName().rsplit(\".\", 1)\n        if len(movieName) > 1 and len(movieName[1]) > 3:\n            movieName = \".\".join(movieName)\n        else:\n            movieName = movieName[0]\n        # make sure name is not a path\n        context[\"movieName\"] = os.path.basename(movieName)\n        chs = []\n        for c in image.getChannels():\n            chs.append(\n                {\n                    \"active\": c.isActive(),\n                    \"color\": c.getColor().getHtml(),\n                    \"label\": c.getLabel(),\n                }\n            )\n        context[\"channels\"] = chs\n        context[\"sizeT\"] = image.getSizeT()\n        context[\"sizeZ\"] = image.getSizeZ()\n\n    scriptService = conn.getScriptService()\n    scriptId = scriptService.getScriptID(scriptPath)\n    if scriptId < 0:\n        raise AttributeError(\"No script found for path '%s'\" % scriptPath)\n\n    context[\"template\"] = template\n    context[\"scriptId\"] = scriptId\n    return context\n\n\n@login_required()\n@render_response()\ndef fileset_check(request, action, conn=None, **kwargs):\n    \"\"\"\n    Check whether Images / Datasets etc contain partial Multi-image filesets.\n    Used by chgrp or delete dialogs to test whether we can perform this\n    'action'.\n    \"\"\"\n    dtypeIds = {}\n    for dtype in (\"Image\", \"Dataset\", \"Project\"):\n        ids = request.GET.get(dtype, None)\n        if ids is not None:\n            dtypeIds[dtype] = [int(i) for i in ids.split(\",\")]\n    splitFilesets = conn.getContainerService().getImagesBySplitFilesets(\n        dtypeIds, None, conn.SERVICE_OPTS\n    )\n\n    splits = []\n    for fsId, splitIds in splitFilesets.items():\n        splits.append(\n            {\n                \"id\": fsId,\n                \"attempted_iids\": splitIds[True],\n                \"blocking_iids\": splitIds[False],\n            }\n        )\n\n    context = {\"split_filesets\": splits}\n    context[\"action\"] = action\n    if action == \"chgrp\":\n        context[\"action\"] = \"move\"\n    context[\"template\"] = \"webclient/activities/\" \"fileset_check_dialog_content.html\"\n\n    return context\n\n\ndef getAllObjects(\n    conn, project_ids, dataset_ids, image_ids, screen_ids, plate_ids, experimenter_id\n):\n    \"\"\"\n    Given a list of containers and images, calculate all the descendants\n    and necessary siblings (for any filesets)\n    \"\"\"\n    # TODO Handle None inputs, maybe add defaults\n    params = omero.sys.ParametersI()\n    qs = conn.getQueryService()\n\n    project_ids = set(project_ids)\n    dataset_ids = set(dataset_ids)\n    image_ids = set(image_ids)\n    fileset_ids = set([])\n    plate_ids = set(plate_ids)\n    screen_ids = set(screen_ids)\n\n    # Get any datasets for projects\n    if project_ids:\n        params.map = {}\n        params.map[\"pids\"] = rlist([rlong(x) for x in list(project_ids)])\n        q = \"\"\"\n            select pdlink.child.id\n            from ProjectDatasetLink pdlink\n            where pdlink.parent.id in (:pids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            dataset_ids.add(e[0].val)\n\n    # Get any plates for screens\n    if screen_ids:\n        params.map = {}\n        params.map[\"sids\"] = rlist([rlong(x) for x in screen_ids])\n        q = \"\"\"\n            select splink.child.id\n            from ScreenPlateLink splink\n            where splink.parent.id in (:sids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            plate_ids.add(e[0].val)\n\n    # Get any images for datasets\n    if dataset_ids:\n        params.map = {}\n        params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n        q = \"\"\"\n            select dilink.child.id,\n                   dilink.child.fileset.id\n            from DatasetImageLink dilink\n            where dilink.parent.id in (:dids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n            # Some images in Dataset may not have fileset\n            if e[1] is not None:\n                fileset_ids.add(e[1].val)\n\n    # Get any images for plates\n    # TODO Seemed no need to add the filesets for plates as it isn't possible\n    # to link it from outside of its plate. This may be true for the client,\n    # but it certainly isn't true for the model so maybe allow this to also get\n    # filesets\n    if plate_ids:\n        params.map = {}\n        params.map[\"plids\"] = rlist([rlong(x) for x in plate_ids])\n        q = \"\"\"\n            select ws.image.id\n            from WellSample ws\n            join ws.plateAcquisition pa\n            where pa.plate.id in (:plids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any extra images due to filesets\n    if fileset_ids:\n        params.map = {}\n        params.map[\"fsids\"] = rlist([rlong(x) for x in fileset_ids])\n        q = \"\"\"\n            select image.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.fileset.id in (select fs.id\n                                       from Image im\n                                       join im.fileset fs\n                                       where fs.id in (:fsids)\n                                       group by fs.id\n                                       having count(im.id)>1)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any additional datasets that may need updating as their children have\n    # been snatched.\n    # TODO Need to differentiate which orphaned directories need refreshing\n    extra_dataset_ids = set([])\n    extra_orphaned = False\n    if image_ids:\n        params.map = {\n            \"iids\": rlist([rlong(x) for x in image_ids]),\n        }\n\n        exclude_datasets = \"\"\n        if dataset_ids:\n            params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n            # Make sure to allow parentless results as well as those\n            # that do not match a dataset being removed\n            exclude_datasets = \"\"\"\n                               and (\n                                    dilink.parent.id not in (:dids)\n                                    or dilink.parent.id = null\n                                   )\n                               \"\"\"\n\n        q = (\n            \"\"\"\n            select distinct dilink.parent.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.id in (:iids)\n            %s\n            and (select count(dilink2.child.id)\n                 from DatasetImageLink dilink2\n                 where dilink2.parent.id = dilink.parent.id\n                 and dilink2.child.id not in (:iids)) = 0\n            \"\"\"\n            % exclude_datasets\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            if e:\n                extra_dataset_ids.add(e[0].val)\n            else:\n                extra_orphaned = True\n\n    # Get any additional projects that may need updating as their children have\n    # been snatched. There is no need to check for orphans because if a dataset\n    # is being removed from somewhere else, it can not exist as an orphan.\n    extra_project_ids = set([])\n    if dataset_ids:\n        params.map = {\"dids\": rlist([rlong(x) for x in dataset_ids])}\n\n        exclude_projects = \"\"\n        if project_ids:\n            params.map[\"pids\"] = rlist([rlong(x) for x in project_ids])\n            exclude_projects = \"and pdlink.parent.id not in (:pids)\"\n\n        q = (\n            \"\"\"\n            select distinct pdlink.parent.id\n            from ProjectDatasetLink pdlink\n            where pdlink.child.id in (:dids)\n            %s\n            and (select count(pdlink2.child.id)\n                 from ProjectDatasetLink pdlink2\n                 where pdlink2.parent.id = pdlink.parent.id\n                 and pdlink2.child.id not in (:dids)) = 0\n            \"\"\"\n            % exclude_projects\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            extra_project_ids.add(e[0].val)\n\n    # We now have the complete list of objects that will change group\n    # We also have an additional list of datasets/projects that may have had\n    # snatched children and thus may need updating in the client if the\n    # dataset/project has gone from N to 0 children\n\n    result = {\n        # These objects are completely removed\n        \"remove\": {\n            \"project\": list(project_ids),\n            \"dataset\": list(dataset_ids),\n            \"screen\": list(screen_ids),\n            \"plate\": list(plate_ids),\n            \"image\": list(image_ids),\n        },\n        # These objects now have no children\n        \"childless\": {\n            \"project\": list(extra_project_ids),\n            \"dataset\": list(extra_dataset_ids),\n            \"orphaned\": extra_orphaned,\n        },\n    }\n    return result\n\n\n@require_POST\n@login_required()\ndef chgrpDryRun(request, conn=None, **kwargs):\n    return dryRun(request, action=\"chgrp\", conn=conn, **kwargs)\n\n\n@require_POST\n@login_required()\ndef dryRun(request, action, conn=None, **kwargs):\n    \"\"\"Submit chgrp or chown dry-run\"\"\"\n    targetObjects = {}\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\", \"Fileset\"]\n    for dtype in dtypes:\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            targetObjects[dtype] = obj_ids\n\n    if action == \"chgrp\":\n        target_id = getIntOrDefault(request, \"group_id\", None)\n    elif action == \"chown\":\n        target_id = getIntOrDefault(request, \"owner_id\", None)\n    handle = conn.submitDryRun(action, targetObjects, target_id)\n    jobId = str(handle)\n    return HttpResponse(jobId)\n\n\n@login_required()\ndef chgrp(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new group, using the chgrp queue.\n    Handles submission of chgrp form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chgrp\"}, status=405)\n    # Get the target group_id\n    group_id = getIntOrDefault(request, \"group_id\", None)\n    if group_id is None:\n        return JsonResponse({\"Error\": \"chgrp: No group_id specified\"})\n    group_id = long(group_id)\n\n    def getObjectOwnerId(r):\n        for t in [\"Dataset\", \"Image\", \"Plate\"]:\n            ids = r.POST.get(t, None)\n            if ids is not None:\n                for o in list(conn.getObjects(t, ids.split(\",\"))):\n                    return o.getDetails().owner.id.val\n\n    group = conn.getObject(\"ExperimenterGroup\", group_id)\n    new_container_name = request.POST.get(\"new_container_name\", None)\n    new_container_type = request.POST.get(\"new_container_type\", None)\n    container_id = None\n\n    # Context must be set to owner of data, E.g. to create links.\n    ownerId = getObjectOwnerId(request)\n    conn.SERVICE_OPTS.setOmeroUser(ownerId)\n    if (\n        new_container_name is not None\n        and len(new_container_name) > 0\n        and new_container_type is not None\n    ):\n        conn.SERVICE_OPTS.setOmeroGroup(group_id)\n        container_id = conn.createContainer(new_container_type, new_container_name)\n    # No new container, check if target is specified\n    if container_id is None:\n        # E.g. \"dataset-234\"\n        target_id = request.POST.get(\"target_id\", None)\n        container_id = target_id is not None and target_id.split(\"-\")[1] or None\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            # TODO Doesn't the filesets only apply to images?\n            # if 'filesets' are specified, make sure we move ALL Fileset Images\n            fsIds = request.POST.getlist(\"fileset\")\n            if len(fsIds) > 0:\n                # If a dataset is being moved and there is a split fileset\n                # then those images need to go somewhere in the new\n                if dtype == \"Dataset\":\n                    conn.regroupFilesets(dsIds=obj_ids, fsIds=fsIds)\n                else:\n                    for fs in conn.getObjects(\"Fileset\", fsIds):\n                        obj_ids.extend([i.id for i in fs.copyImages()])\n                    obj_ids = list(set(obj_ids))  # remove duplicates\n            logger.debug(\"chgrp to group:%s %s-%s\" % (group_id, dtype, obj_ids))\n            handle = conn.chgrpObjects(dtype, obj_ids, group_id, container_id)\n            jobId = str(handle)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chgrp\",\n                \"group\": group.getName(),\n                \"to_group_id\": group_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change group\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    # Update contains a list of images/containers that need to be\n    # updated.\n\n    project_ids = request.POST.get(\"Project\", [])\n    dataset_ids = request.POST.get(\"Dataset\", [])\n    image_ids = request.POST.get(\"Image\", [])\n    screen_ids = request.POST.get(\"Screen\", [])\n    plate_ids = request.POST.get(\"Plate\", [])\n\n    if project_ids:\n        project_ids = [long(x) for x in project_ids.split(\",\")]\n    if dataset_ids:\n        dataset_ids = [long(x) for x in dataset_ids.split(\",\")]\n    if image_ids:\n        image_ids = [long(x) for x in image_ids.split(\",\")]\n    if screen_ids:\n        screen_ids = [long(x) for x in screen_ids.split(\",\")]\n    if plate_ids:\n        plate_ids = [long(x) for x in plate_ids.split(\",\")]\n\n    # TODO Change this user_id to be an experimenter_id in the request as it\n    # is possible that a user is chgrping data from another user so it is\n    # that users orphaned that will need updating. Or maybe all orphaned\n    # directories could potentially need updating?\n\n    # Create a list of objects that have been changed by this operation. This\n    # can be used by the client to visually update.\n    update = getAllObjects(\n        conn,\n        project_ids,\n        dataset_ids,\n        image_ids,\n        screen_ids,\n        plate_ids,\n        request.session.get(\"user_id\"),\n    )\n\n    # return HttpResponse(\"OK\")\n    return JsonResponse({\"update\": update})\n\n\n@login_required()\ndef chown(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new owner, using the chown queue.\n    Handles submission of chown form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chown\"}, status=405)\n    # Get the target owner_id\n    owner_id = getIntOrDefault(request, \"owner_id\", None)\n    if owner_id is None:\n        return JsonResponse({\"Error\": \"chown: No owner_id specified\"})\n    owner_id = int(owner_id)\n    exp = conn.getObject(\"Experimenter\", owner_id)\n    if exp is None:\n        return JsonResponse({\"Error\": \"chown: Experimenter not found\" % owner_id})\n\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    jobIds = []\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            logger.debug(\"chown to owner:%s %s-%s\" % (owner_id, dtype, obj_ids))\n            handle = conn.chownObjects(dtype, obj_ids, owner_id)\n            jobId = str(handle)\n            jobIds.append(jobId)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chown\",\n                \"owner\": exp.getFullName(),\n                \"to_owner_id\": owner_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change owner\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    return JsonResponse({\"jobIds\": jobIds})\n\n\n@login_required(setGroupContext=True)\ndef script_run(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Runs a script using values in a POST\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    inputMap = {}\n\n    sId = long(scriptId)\n\n    try:\n        params = scriptService.getParams(sId)\n    except Exception as x:\n        if x.message and x.message.startswith(\"No processor available\"):\n            # Delegate to run_script() for handling 'No processor available'\n            rsp = run_script(request, conn, sId, inputMap, scriptName=\"Script\")\n            return JsonResponse(rsp)\n        else:\n            raise\n    params = scriptService.getParams(sId)\n    scriptName = params.name.replace(\"_\", \" \").replace(\".py\", \"\")\n\n    logger.debug(\"Script: run with request.POST: %s\" % request.POST)\n\n    # upload new file\n    fileupload = (\n        \"file_annotation\" in request.FILES and request.FILES[\"file_annotation\"] or None\n    )\n    fileAnnId = None\n    if fileupload is not None and fileupload != \"\":\n        manager = BaseContainer(conn)\n        fileAnnId = manager.createFileAnnotations(fileupload, [])\n\n    for key, param in params.inputs.items():\n        prototype = param.prototype\n        pclass = prototype.__class__\n\n        if key == \"File_Annotation\" and fileAnnId is not None:\n            inputMap[key] = pclass(str(fileAnnId))\n            continue\n\n        # handle bool separately, since unchecked checkbox will not be in\n        # request.POST\n        if pclass == omero.rtypes.RBoolI:\n            value = key in request.POST\n            inputMap[key] = pclass(value)\n            continue\n\n        if pclass.__name__ == \"RMapI\":\n            keyName = \"%s_key0\" % key\n            valueName = \"%s_value0\" % key\n            row = 0\n            paramMap = {}\n            while keyName in request.POST:\n                # the key and value don't have any data-type defined by\n                # scripts - just use string\n                k = str(request.POST[keyName])\n                v = request.POST[valueName]\n                if len(k) > 0 and len(v) > 0:\n                    paramMap[str(k)] = v\n                row += 1\n                keyName = \"%s_key%d\" % (key, row)\n                valueName = \"%s_value%d\" % (key, row)\n            if len(paramMap) > 0:\n                inputMap[key] = wrap(paramMap)\n            continue\n\n        if key in request.POST:\n            if pclass == omero.rtypes.RListI:\n                values = request.POST.getlist(key)\n                if len(values) == 0:\n                    continue\n                if len(values) == 1:  # process comma-separated list\n                    if len(values[0]) == 0:\n                        continue\n                    values = values[0].split(\",\")\n\n                # try to determine 'type' of values in our list\n                listClass = omero.rtypes.RStringI\n                pval = prototype.val  # list\n                # check if a value type has been set (first item of prototype\n                # list)\n                if len(pval) > 0:\n                    listClass = pval[0].__class__\n                    if listClass == int(1).__class__:\n                        listClass = omero.rtypes.rint\n                    if listClass == long(1).__class__:\n                        listClass = omero.rtypes.rlong\n\n                # construct our list, using appropriate 'type'\n                valueList = []\n                for v in values:\n                    try:\n                        # RStringI() will encode any unicode\n                        obj = listClass(v.strip())\n                    except Exception:\n                        logger.debug(\"Invalid entry for '%s' : %s\" % (key, v))\n                        continue\n                    if isinstance(obj, omero.model.IObject):\n                        valueList.append(omero.rtypes.robject(obj))\n                    else:\n                        valueList.append(obj)\n                inputMap[key] = omero.rtypes.rlist(valueList)\n\n            # Handle other rtypes: String, Long, Int etc.\n            else:\n                value = request.POST[key]\n                if len(value) == 0:\n                    continue\n                try:\n                    inputMap[key] = pclass(value)\n                except Exception:\n                    logger.debug(\"Invalid entry for '%s' : %s\" % (key, value))\n                    continue\n\n    # If we have objects specified via 'IDs' and 'DataType', try to pick\n    # correct group\n    if \"IDs\" in inputMap and \"Data_Type\" in inputMap:\n        gid = conn.SERVICE_OPTS.getOmeroGroup()\n        conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n        try:\n            firstObj = conn.getObject(\n                inputMap[\"Data_Type\"].val, unwrap(inputMap[\"IDs\"])[0]\n            )\n            newGid = firstObj.getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(newGid)\n        except Exception:\n            logger.debug(traceback.format_exc())\n            # if inputMap values not as expected or firstObj is None\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    try:\n        # Try/except in case inputs are not serializable, e.g. unicode\n        logger.debug(\"Running script %s with \" \"params %s\" % (scriptName, inputMap))\n    except Exception:\n        pass\n    rsp = run_script(request, conn, sId, inputMap, scriptName)\n    return JsonResponse(rsp)\n\n\n@login_required(isAdmin=True)\n@render_response()\ndef script_upload(request, conn=None, **kwargs):\n    \"\"\"Script upload UI\"\"\"\n\n    if request.method != \"POST\":\n        return {\"template\": \"webclient/scripts/upload_script.html\"}\n\n    # Get script path, name and text\n    script_path = request.POST.get(\"script_path\")\n    script_file = request.FILES[\"script_file\"]\n    script_file.seek(0)\n    script_text = script_file.read().decode(\"utf-8\")\n\n    if not script_path.endswith(\"/\"):\n        script_path = script_path + \"/\"\n    script_path = script_path + script_file.name\n\n    # If script exists, replace. Otherwise upload\n    scriptService = conn.getScriptService()\n    script_id = scriptService.getScriptID(script_path)\n\n    try:\n        if script_id > 0:\n            orig_file = OriginalFileI(script_id, False)\n            scriptService.editScript(orig_file, script_text)\n            message = \"Script Replaced: %s\" % script_file.name\n        else:\n            script_id = scriptService.uploadOfficialScript(script_path, script_text)\n            message = \"Script Uploaded: %s\" % script_file.name\n    except omero.ValidationException as ex:\n        message = str(ex)\n\n    return {\"Message\": message, \"script_id\": script_id}\n\n\n@require_POST\n@login_required()\ndef ome_tiff_script(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Uses the scripting service (Batch Image Export script) to generate\n    OME-TIFF for an image and attach this as a file annotation to the image.\n    Script will show up in the 'Activities' for users to monitor and download\n    result etc.\n    \"\"\"\n\n    scriptService = conn.getScriptService()\n    sId = scriptService.getScriptID(\"/omero/export_scripts/Batch_Image_Export.py\")\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is not None:\n        gid = image.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n    imageIds = [long(imageId)]\n    inputMap = {\n        \"Data_Type\": wrap(\"Image\"),\n        \"IDs\": rlist([rlong(id) for id in imageIds]),\n    }\n    inputMap[\"Format\"] = wrap(\"OME-TIFF\")\n    rsp = run_script(request, conn, sId, inputMap, scriptName=\"Create OME-TIFF\")\n    return JsonResponse(rsp)\n\n\ndef run_script(request, conn, sId, inputMap, scriptName=\"Script\"):\n    \"\"\"\n    Starts running a script, adding details to the request.session so that it\n    shows up in the webclient Activities panel and results are available there\n    etc.\n    \"\"\"\n    request.session.modified = True\n    scriptService = conn.getScriptService()\n    try:\n        handle = scriptService.runScript(sId, inputMap, None, conn.SERVICE_OPTS)\n        # E.g. ProcessCallback/4ab13b23-22c9-4b5f-9318-40f9a1acc4e9 -t:tcp -h  10.37.129.2 -p 53154:tcp -h 10.211.55.2 -p 53154:tcp -h 10.12.1.230 -p 53154 # noqa\n        jobId = str(handle)\n        status = \"in progress\"\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n        }\n        request.session.modified = True\n    except Exception as x:\n        jobId = str(time())  # E.g. 1312803670.6076391\n        # handle python 2 or 3 errors\n        message = x.message if hasattr(x, \"message\") else (x.args[0] if x.args else \"\")\n        if message and message.startswith(\"No processor available\"):\n            # omero.ResourceError\n            logger.info(traceback.format_exc())\n            error = \"No Processor Available\"\n            status = \"no processor available\"\n            message = \"\"  # template displays message and link\n        else:\n            logger.error(traceback.format_exc())\n            error = traceback.format_exc()\n            status = \"failed\"\n            message = x.message\n        # save the error to http session, for display in 'Activities' window\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n            \"Message\": message,\n            \"error\": error,\n        }\n        return {\"status\": status, \"error\": error}\n\n    return {\"jobId\": jobId, \"status\": status}\n\n\n@login_required()\n@render_response()\ndef ome_tiff_info(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Query to see if we have an OME-TIFF attached to the image (assume only 1,\n    since Batch Image Export will delete old ones)\n    \"\"\"\n    # Any existing OME-TIFF will appear in list\n    links = list(\n        conn.getAnnotationLinks(\n            \"Image\", [imageId], ns=omero.constants.namespaces.NSOMETIFF\n        )\n    )\n    rv = {}\n    if len(links) > 0:\n        # use highest ID === most recent\n        links.sort(key=lambda x: x.getId(), reverse=True)\n        annlink = links[0]\n        created = annlink.creationEventDate()\n        annId = annlink.getChild().getId()\n        from omeroweb.webgateway.templatetags.common_filters import ago\n\n        download = reverse(\"download_annotation\", args=[annId])\n        rv = {\n            \"created\": str(created),\n            \"ago\": ago(created),\n            \"id\": annId,\n            \"download\": download,\n        }\n    return rv  # will get returned as json by default\n", "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n    <meta name=\"referrer\" content=\"{{ html.meta_referrer|default:\"origin-when-crossorigin\" }}\">\n\n    {% block link %}\n\t\t<link rel=\"stylesheet\" href=\"{% static \"webgateway/css/reset.css\"|add:url_suffix %}\" type=\"text/css\" />   \n\t\t<link rel=\"stylesheet\" href=\"{% static \"webgateway/css/ome.body.css\"|add:url_suffix %}\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{% static \"webclient/css/dusty.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    {% endblock %}\n\n\n    <!-- extend here to add page title -->\n    <title>\n        {% block title %}\n        {% endblock %}\n    </title>\n\n    {% block script %}\n        <!-- block for javascript <script> -->\n    {% endblock %}\n\n    {% block head %}\n        <!-- block for extra head elements (not css or javascript) E.g. icon, meta tags -->\n        {% include \"webgateway/base/includes/shortcut_icon.html\" %}\n    {% endblock %}\n\n</head>\n<body>\n\n{% block body %}\n\n{% endblock %}\n\n\n    <!-- settings.BASE_INCLUDE_TEMPLATE included here -->\n    {% if base_include_template %}\n      {% include base_include_template %}\n    {% endif %}\n</body>\n</html>\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# webgateway/views.py - django application view handling functions\n#\n# Copyright (c) 2007-2020 Glencoe Software, Inc. All rights reserved.\n#\n# This software is distributed under the terms described by the LICENCE file\n# you can find at the root of the distribution bundle, which states you are\n# free to use it only for non commercial purposes.\n# If the file is missing please request a copy by contacting\n# jason@glencoesoftware.com.\n#\n# Author: Carlos Neves <carlos(at)glencoesoftware.com>\n\nimport re\nimport json\nimport base64\nimport warnings\nfrom functools import wraps\nimport omero\nimport omero.clients\nfrom past.builtins import unicode\n\nfrom django.http import (\n    HttpResponse,\n    HttpResponseBadRequest,\n    HttpResponseServerError,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import (\n    HttpResponseRedirect,\n    HttpResponseNotAllowed,\n    Http404,\n    StreamingHttpResponse,\n    HttpResponseNotFound,\n)\n\nfrom django.views.decorators.http import require_POST\nfrom django.views.decorators.debug import sensitive_post_parameters\nfrom django.utils.decorators import method_decorator\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.conf import settings\nfrom wsgiref.util import FileWrapper\nfrom omero.rtypes import rlong, unwrap\nfrom omero.constants.namespaces import NSBULKANNOTATIONS\nfrom .util import points_string_to_XY_list, xy_list_to_bbox\nfrom .plategrid import PlateGrid\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom .marshal import imageMarshal, shapeMarshal, rgb_int2rgba\nfrom django.contrib.staticfiles.templatetags.staticfiles import static\nfrom django.views.generic import View\nfrom django.shortcuts import render\nfrom omeroweb.webadmin.forms import LoginForm\nfrom omeroweb.decorators import get_client_ip, is_public_user\nfrom omeroweb.webadmin.webadmin_utils import upgradeCheck\n\ntry:\n    from hashlib import md5\nexcept Exception:\n    from md5 import md5\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nfrom io import BytesIO\nimport tempfile\n\nfrom omero import ApiUsageException\nfrom omero.util.decorators import timeit, TimeIt\nfrom omeroweb.httprsp import HttpJavascriptResponse, HttpJavascriptResponseServerError\nfrom omeroweb.connector import Server\n\nimport glob\n\n\n# from models import StoredConnection\n\nfrom omeroweb.webgateway.webgateway_cache import (\n    webgateway_cache,\n    CacheBase,\n    webgateway_tempfile,\n)\n\nimport logging\nimport os\nimport traceback\nimport time\nimport zipfile\nimport shutil\n\nfrom omeroweb.decorators import login_required, ConnCleaningHttpResponse\nfrom omeroweb.connector import Connector\nfrom omeroweb.webgateway.util import zip_archived_files, LUTS_IN_PNG\nfrom omeroweb.webgateway.util import get_longs, getIntOrDefault\n\ncache = CacheBase()\nlogger = logging.getLogger(__name__)\n\ntry:\n    from PIL import Image\n    from PIL import ImageDraw\nexcept Exception:  # pragma: nocover\n    try:\n        import Image\n        import ImageDraw\n    except Exception:\n        logger.error(\"No Pillow installed\")\n\ntry:\n    import numpy\n\n    numpyInstalled = True\nexcept ImportError:\n    logger.error(\"No numpy installed\")\n    numpyInstalled = False\n\n\ndef index(request):\n    \"\"\" /webgateway/ index placeholder \"\"\"\n    return HttpResponse(\"Welcome to webgateway\")\n\n\ndef _safestr(s):\n    return unicode(s).encode(\"utf-8\")\n\n\nclass UserProxy(object):\n    \"\"\"\n    Represents the current user of the connection, with methods delegating to\n    the connection itself.\n    \"\"\"\n\n    def __init__(self, blitzcon):\n        \"\"\"\n        Initialises the User proxy with the L{omero.gateway.BlitzGateway}\n        connection\n\n        @param blitzcon:    connection\n        @type blitzcon:     L{omero.gateway.BlitzGateway}\n        \"\"\"\n\n        self._blitzcon = blitzcon\n        self.loggedIn = False\n\n    def logIn(self):\n        \"\"\" Sets the loggedIn Flag to True \"\"\"\n\n        self.loggedIn = True\n\n    def isAdmin(self):\n        \"\"\"\n        True if the current user is an admin\n\n        @return:    True if the current user is an admin\n        @rtype:     Boolean\n        \"\"\"\n\n        return self._blitzcon.isAdmin()\n\n    def canBeAdmin(self):\n        \"\"\"\n        True if the current user can be admin\n\n        @return:    True if the current user can be admin\n        @rtype:     Boolean\n        \"\"\"\n\n        return self._blitzcon.canBeAdmin()\n\n    def getId(self):\n        \"\"\"\n        Returns the ID of the current user\n\n        @return:    User ID\n        @rtype:     Long\n        \"\"\"\n\n        return self._blitzcon.getUserId()\n\n    def getName(self):\n        \"\"\"\n        Returns the Name of the current user\n\n        @return:    User Name\n        @rtype:     String\n        \"\"\"\n\n        return self._blitzcon.getUser().omeName\n\n    def getFirstName(self):\n        \"\"\"\n        Returns the first name of the current user\n\n        @return:    First Name\n        @rtype:     String\n        \"\"\"\n\n        return self._blitzcon.getUser().firstName or self.getName()\n\n\n#    def getPreferences (self):\n#        return self._blitzcon._user.getPreferences()\n#\n#    def getUserObj (self):\n#        return self._blitzcon._user\n#\n# class SessionCB (object):\n#    def _log (self, what, c):\n#        logger.debug('CONN:%s %s:%d:%s' % (what, c._user, os.getpid(),\n#                                           c._sessionUuid))\n#\n#    def create (self, c):\n#        self._log('create',c)\n#\n#    def join (self, c):\n#        self._log('join',c)\n#\n#    def close (self, c):\n#        self._log('close',c)\n# _session_cb = SessionCB()\n\n\ndef _split_channel_info(rchannels):\n    \"\"\"\n    Splits the request query channel information for images into a sequence of\n    channels, window ranges and channel colors.\n\n    @param rchannels:   The request string with channel info. E.g\n                        1|100:505$0000FF,-2,3|620:3879$FF0000\n    @type rchannels:    String\n    @return:            E.g. [1, -2, 3] [[100.0, 505.0], (None, None), [620.0,\n                        3879.0]] [u'0000FF', None, u'FF0000']\n    @rtype:             tuple of 3 lists\n    \"\"\"\n\n    channels = []\n    windows = []\n    colors = []\n    for chan in rchannels.split(\",\"):\n        # chan  1|12:1386r$0000FF\n        chan = chan.split(\"|\", 1)\n        # chan ['1', '12:1386r$0000FF']\n        t = chan[0].strip()\n        # t = '1'\n        color = None\n        # Not normally used...\n        if t.find(\"$\") >= 0:\n            t, color = t.split(\"$\")\n        try:\n            channels.append(int(t))\n            ch_window = (None, None)\n            if len(chan) > 1:\n                t = chan[1].strip()\n                # t = '12:1386r$0000FF'\n                if t.find(\"$\") >= 0:\n                    t, color = t.split(\"$\", 1)\n                    # color = '0000FF'\n                    # t = 12:1386\n                t = t.split(\":\")\n                if len(t) == 2:\n                    try:\n                        ch_window = [float(x) for x in t]\n                    except ValueError:\n                        pass\n            windows.append(ch_window)\n            colors.append(color)\n        except ValueError:\n            pass\n    logger.debug(str(channels) + \",\" + str(windows) + \",\" + str(colors))\n    return channels, windows, colors\n\n\ndef getImgDetailsFromReq(request, as_string=False):\n    \"\"\"\n    Break the GET information from the request object into details on how\n    to render the image.\n    The following keys are recognized:\n    z - Z axis position\n    t - T axis position\n    q - Quality set (0,0..1,0)\n    m - Model (g for greyscale, c for color)\n    p - Projection (see blitz_gateway.ImageWrapper.PROJECTIONS for keys)\n    x - X position (for now based on top/left offset on the browser window)\n    y - Y position (same as above)\n    c - a comma separated list of channels to be rendered (start index 1)\n      - format for each entry [-]ID[|wndst:wndend][#HEXCOLOR][,...]\n    zm - the zoom setting (as a percentual value)\n\n    @param request:     http request with keys above\n    @param as_string:   If True, return a string representation of the\n                        rendering details\n    @return:            A dict or String representation of rendering details\n                        above.\n    @rtype:             Dict or String\n    \"\"\"\n\n    r = request.GET\n    rv = {}\n    for k in (\"z\", \"t\", \"q\", \"m\", \"zm\", \"x\", \"y\", \"p\"):\n        if k in r:\n            rv[k] = r[k]\n    if \"c\" in r:\n        rv[\"c\"] = []\n        ci = _split_channel_info(r[\"c\"])\n        logger.debug(ci)\n        for i in range(len(ci[0])):\n            # a = abs channel, i = channel, s = window start, e = window end,\n            # c = color\n            rv[\"c\"].append(\n                {\n                    \"a\": abs(ci[0][i]),\n                    \"i\": ci[0][i],\n                    \"s\": ci[1][i][0],\n                    \"e\": ci[1][i][1],\n                    \"c\": ci[2][i],\n                }\n            )\n    if as_string:\n        return \"&\".join([\"%s=%s\" % (x[0], x[1]) for x in rv.items()])\n    return rv\n\n\n@login_required()\ndef render_birds_eye_view(request, iid, size=None, conn=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse wrapped jpeg with the rendered bird's eye view\n    for image 'iid'. We now use a thumbnail for performance. #10626\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param size:        Maximum size of the longest side of the resulting\n                        bird's eye view.\n    @return:            http response containing jpeg\n    \"\"\"\n    return render_thumbnail(request, iid, w=size, **kwargs)\n\n\ndef _render_thumbnail(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns a jpeg with the rendered thumbnail for image 'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    server_settings = request.session.get(\"server_settings\", {}).get(\"browser\", {})\n    defaultSize = server_settings.get(\"thumb_default_size\", 96)\n\n    direct = True\n    if w is None:\n        size = (defaultSize,)\n    else:\n        if h is None:\n            size = (int(w),)\n        else:\n            size = (int(w), int(h))\n    if size == (defaultSize,):\n        direct = False\n    user_id = conn.getUserId()\n    z = getIntOrDefault(request, \"z\", None)\n    t = getIntOrDefault(request, \"t\", None)\n    rdefId = getIntOrDefault(request, \"rdefId\", None)\n    # TODO - cache handles rdefId\n    jpeg_data = webgateway_cache.getThumb(request, server_id, user_id, iid, size)\n    if jpeg_data is None:\n        prevent_cache = False\n        img = conn.getObject(\"Image\", iid)\n        if img is None:\n            logger.debug(\"(b)Image %s not found...\" % (str(iid)))\n            if _defcb:\n                jpeg_data = _defcb(size=size)\n                prevent_cache = True\n            else:\n                raise Http404(\"Failed to render thumbnail\")\n        else:\n            jpeg_data = img.getThumbnail(\n                size=size, direct=direct, rdefId=rdefId, z=z, t=t\n            )\n            if jpeg_data is None:\n                logger.debug(\"(c)Image %s not found...\" % (str(iid)))\n                if _defcb:\n                    jpeg_data = _defcb(size=size)\n                    prevent_cache = True\n                else:\n                    raise Http404(\"Failed to render thumbnail\")\n            else:\n                prevent_cache = img._thumbInProgress\n        if not prevent_cache:\n            webgateway_cache.setThumb(request, server_id, user_id, iid, jpeg_data, size)\n    else:\n        pass\n    return jpeg_data\n\n\n@login_required()\ndef render_thumbnail(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse wrapped jpeg with the rendered thumbnail for image\n    'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing jpeg\n    \"\"\"\n    jpeg_data = _render_thumbnail(\n        request=request, iid=iid, w=w, h=h, conn=conn, _defcb=_defcb, **kwargs\n    )\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\n@login_required()\ndef render_roi_thumbnail(request, roiId, w=None, h=None, conn=None, **kwargs):\n    \"\"\"\n    For the given ROI, choose the shape to render (first time-point, mid\n    z-section) then render a region around that shape, scale to width and\n    height (or default size) and draw the shape on to the region\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    # need to find the z indices of the first shape in T\n    result = conn.getRoiService().findByRoi(long(roiId), None, conn.SERVICE_OPTS)\n    if result is None or result.rois is None or len(result.rois) == 0:\n        raise Http404\n\n    for roi in result.rois:\n        imageId = roi.image.id.val\n        shapes = roi.copyShapes()\n    shapes = [s for s in shapes if s is not None]\n\n    if len(shapes) == 0:\n        raise Http404(\"No Shapes found for ROI %s\" % roiId)\n\n    pi = _get_prepared_image(request, imageId, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    image, compress_quality = pi\n\n    shape = None\n    # if only single shape, use it...\n    if len(shapes) == 1:\n        shape = shapes[0]\n    else:\n        default_t = image.getDefaultT()\n        default_z = image.getDefaultZ()\n        # find shapes on default Z/T plane\n        def_shapes = [\n            s\n            for s in shapes\n            if unwrap(s.getTheT()) is None or unwrap(s.getTheT()) == default_t\n        ]\n        if len(def_shapes) == 1:\n            shape = def_shapes[0]\n        else:\n            def_shapes = [\n                s\n                for s in def_shapes\n                if unwrap(s.getTheZ()) is None or unwrap(s.getTheZ()) == default_z\n            ]\n            if len(def_shapes) > 0:\n                shape = def_shapes[0]\n        # otherwise pick first shape\n        if shape is None and len(shapes) > 0:\n            shape = shapes[0]\n\n    return get_shape_thumbnail(request, conn, image, shape, compress_quality)\n\n\n@login_required()\ndef render_shape_thumbnail(request, shapeId, w=None, h=None, conn=None, **kwargs):\n    \"\"\"\n    For the given Shape, redner a region around that shape, scale to width and\n    height (or default size) and draw the shape on to the region.\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n\n    # need to find the z indices of the first shape in T\n    params = omero.sys.Parameters()\n    params.map = {\"id\": rlong(shapeId)}\n    shape = conn.getQueryService().findByQuery(\n        \"select s from Shape s join fetch s.roi where s.id = :id\",\n        params,\n        conn.SERVICE_OPTS,\n    )\n\n    if shape is None:\n        raise Http404\n\n    imageId = shape.roi.image.id.val\n\n    pi = _get_prepared_image(request, imageId, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    image, compress_quality = pi\n\n    return get_shape_thumbnail(request, conn, image, shape, compress_quality)\n\n\ndef get_shape_thumbnail(request, conn, image, s, compress_quality):\n    \"\"\"\n    Render a region around the specified Shape, scale to width and height (or\n    default size) and draw the shape on to the region. Returns jpeg data.\n\n    @param image:   ImageWrapper\n    @param s:       omero.model.Shape\n    \"\"\"\n\n    MAX_WIDTH = 250\n    color = request.GET.get(\"color\", \"fff\")\n    colours = {\n        \"f00\": (255, 0, 0),\n        \"0f0\": (0, 255, 0),\n        \"00f\": (0, 0, 255),\n        \"ff0\": (255, 255, 0),\n        \"fff\": (255, 255, 255),\n        \"000\": (0, 0, 0),\n    }\n    lineColour = colours[\"f00\"]\n    if color in colours:\n        lineColour = colours[color]\n    # used for padding if we go outside the image area\n    bg_color = (221, 221, 221)\n\n    bBox = None  # bounding box: (x, y, w, h)\n    shape = {}\n    theT = unwrap(s.getTheT())\n    theT = theT if theT is not None else image.getDefaultT()\n    theZ = unwrap(s.getTheZ())\n    theZ = theZ if theZ is not None else image.getDefaultZ()\n    if type(s) == omero.model.RectangleI:\n        shape[\"type\"] = \"Rectangle\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        shape[\"width\"] = s.getWidth().getValue()\n        shape[\"height\"] = s.getHeight().getValue()\n        bBox = (shape[\"x\"], shape[\"y\"], shape[\"width\"], shape[\"height\"])\n    elif type(s) == omero.model.MaskI:\n        shape[\"type\"] = \"Mask\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        shape[\"width\"] = s.getWidth().getValue()\n        shape[\"height\"] = s.getHeight().getValue()\n        bBox = (shape[\"x\"], shape[\"y\"], shape[\"width\"], shape[\"height\"])\n        # TODO: support for mask\n    elif type(s) == omero.model.EllipseI:\n        shape[\"type\"] = \"Ellipse\"\n        shape[\"x\"] = int(s.getX().getValue())\n        shape[\"y\"] = int(s.getY().getValue())\n        shape[\"radiusX\"] = int(s.getRadiusX().getValue())\n        shape[\"radiusY\"] = int(s.getRadiusY().getValue())\n        bBox = (\n            shape[\"x\"] - shape[\"radiusX\"],\n            shape[\"y\"] - shape[\"radiusY\"],\n            2 * shape[\"radiusX\"],\n            2 * shape[\"radiusY\"],\n        )\n    elif type(s) == omero.model.PolylineI:\n        shape[\"type\"] = \"PolyLine\"\n        shape[\"xyList\"] = points_string_to_XY_list(s.getPoints().getValue())\n        bBox = xy_list_to_bbox(shape[\"xyList\"])\n    elif type(s) == omero.model.LineI:\n        shape[\"type\"] = \"Line\"\n        shape[\"x1\"] = int(s.getX1().getValue())\n        shape[\"x2\"] = int(s.getX2().getValue())\n        shape[\"y1\"] = int(s.getY1().getValue())\n        shape[\"y2\"] = int(s.getY2().getValue())\n        x = min(shape[\"x1\"], shape[\"x2\"])\n        y = min(shape[\"y1\"], shape[\"y2\"])\n        bBox = (\n            x,\n            y,\n            max(shape[\"x1\"], shape[\"x2\"]) - x,\n            max(shape[\"y1\"], shape[\"y2\"]) - y,\n        )\n    elif type(s) == omero.model.PointI:\n        shape[\"type\"] = \"Point\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        bBox = (shape[\"x\"] - 50, shape[\"y\"] - 50, 100, 100)\n    elif type(s) == omero.model.PolygonI:\n        shape[\"type\"] = \"Polygon\"\n        shape[\"xyList\"] = points_string_to_XY_list(s.getPoints().getValue())\n        bBox = xy_list_to_bbox(shape[\"xyList\"])\n    elif type(s) == omero.model.LabelI:\n        shape[\"type\"] = \"Label\"\n        shape[\"x\"] = s.getX().getValue()\n        shape[\"y\"] = s.getY().getValue()\n        bBox = (shape[\"x\"] - 50, shape[\"y\"] - 50, 100, 100)\n    else:\n        logger.debug(\"Shape type not supported: %s\" % str(type(s)))\n\n    # we want to render a region larger than the bounding box\n    x, y, w, h = bBox\n    # make the aspect ratio (w/h) = 3/2\n    requiredWidth = max(w, h * 3 // 2)\n    requiredHeight = requiredWidth * 2 // 3\n    # make the rendered region 1.5 times larger than the bounding box\n    newW = int(requiredWidth * 1.5)\n    newH = int(requiredHeight * 1.5)\n    # Don't want the region to be smaller than the thumbnail dimensions\n    if newW < MAX_WIDTH:\n        newW = MAX_WIDTH\n        newH = newW * 2 // 3\n    # Don't want the region to be bigger than a 'Big Image'!\n\n    def getConfigValue(key):\n        try:\n            return conn.getConfigService().getConfigValue(key)\n        except Exception:\n            logger.warn(\n                \"webgateway: get_shape_thumbnail() could not get\"\n                \" Config-Value for %s\" % key\n            )\n            pass\n\n    max_plane_width = getConfigValue(\"omero.pixeldata.max_plane_width\")\n    max_plane_height = getConfigValue(\"omero.pixeldata.max_plane_height\")\n    if (\n        max_plane_width is None\n        or max_plane_height is None\n        or (newW > int(max_plane_width))\n        or (newH > int(max_plane_height))\n    ):\n        # generate dummy image to return\n        dummy = Image.new(\"RGB\", (MAX_WIDTH, MAX_WIDTH * 2 // 3), bg_color)\n        draw = ImageDraw.Draw(dummy)\n        draw.text((10, 30), \"Shape too large to \\ngenerate thumbnail\", fill=(255, 0, 0))\n        rv = BytesIO()\n        dummy.save(rv, \"jpeg\", quality=90)\n        return HttpResponse(rv.getvalue(), content_type=\"image/jpeg\")\n\n    xOffset = (newW - w) // 2\n    yOffset = (newH - h) // 2\n    newX = int(x - xOffset)\n    newY = int(y - yOffset)\n\n    # Need to check if any part of our region is outside the image. (assume\n    # that SOME of the region is within the image!)\n    sizeX = image.getSizeX()\n    sizeY = image.getSizeY()\n    left_xs, right_xs, top_xs, bottom_xs = 0, 0, 0, 0\n    if newX < 0:\n        newW = newW + newX\n        left_xs = abs(newX)\n        newX = 0\n    if newY < 0:\n        newH = newH + newY\n        top_xs = abs(newY)\n        newY = 0\n    if newW + newX > sizeX:\n        right_xs = (newW + newX) - sizeX\n        newW = newW - right_xs\n    if newH + newY > sizeY:\n        bottom_xs = (newH + newY) - sizeY\n        newH = newH - bottom_xs\n\n    # now we should be getting the correct region\n    jpeg_data = image.renderJpegRegion(\n        theZ, theT, newX, newY, newW, newH, level=None, compression=compress_quality\n    )\n    img = Image.open(BytesIO(jpeg_data))\n\n    # add back on the xs we were forced to trim\n    if left_xs != 0 or right_xs != 0 or top_xs != 0 or bottom_xs != 0:\n        jpg_w, jpg_h = img.size\n        xs_w = jpg_w + right_xs + left_xs\n        xs_h = jpg_h + bottom_xs + top_xs\n        xs_image = Image.new(\"RGB\", (xs_w, xs_h), bg_color)\n        xs_image.paste(img, (left_xs, top_xs))\n        img = xs_image\n\n    # we have our full-sized region. Need to resize to thumbnail.\n    current_w, current_h = img.size\n    factor = float(MAX_WIDTH) / current_w\n    resizeH = int(current_h * factor)\n    img = img.resize((MAX_WIDTH, resizeH))\n\n    draw = ImageDraw.Draw(img)\n    if shape[\"type\"] == \"Rectangle\":\n        rectX = int(xOffset * factor)\n        rectY = int(yOffset * factor)\n        rectW = int((w + xOffset) * factor)\n        rectH = int((h + yOffset) * factor)\n        draw.rectangle((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.rectangle((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif shape[\"type\"] == \"Line\":\n        lineX1 = (shape[\"x1\"] - newX + left_xs) * factor\n        lineX2 = (shape[\"x2\"] - newX + left_xs) * factor\n        lineY1 = (shape[\"y1\"] - newY + top_xs) * factor\n        lineY2 = (shape[\"y2\"] - newY + top_xs) * factor\n        draw.line((lineX1, lineY1, lineX2, lineY2), fill=lineColour, width=2)\n    elif shape[\"type\"] == \"Ellipse\":\n        rectX = int(xOffset * factor)\n        rectY = int(yOffset * factor)\n        rectW = int((w + xOffset) * factor)\n        rectH = int((h + yOffset) * factor)\n        draw.ellipse((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.ellipse((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif shape[\"type\"] == \"Point\":\n        point_radius = 2\n        rectX = (MAX_WIDTH // 2) - point_radius\n        rectY = int(resizeH // 2) - point_radius\n        rectW = rectX + (point_radius * 2)\n        rectH = rectY + (point_radius * 2)\n        draw.ellipse((rectX, rectY, rectW, rectH), outline=lineColour)\n        # hack to get line width of 2\n        draw.ellipse((rectX - 1, rectY - 1, rectW + 1, rectH + 1), outline=lineColour)\n    elif \"xyList\" in shape:\n        # resizedXY = [(int(x*factor), int(y*factor))\n        #              for (x,y) in shape['xyList']]\n        def resizeXY(xy):\n            x, y = xy\n            return (\n                int((x - newX + left_xs) * factor),\n                int((y - newY + top_xs) * factor),\n            )\n\n        resizedXY = [resizeXY(xy) for xy in shape[\"xyList\"]]\n        # doesn't support 'width' of line\n        # draw.polygon(resizedXY, outline=lineColour)\n        x2 = y2 = None\n        for line in range(1, len(resizedXY)):\n            x1, y1 = resizedXY[line - 1]\n            x2, y2 = resizedXY[line]\n            draw.line((x1, y1, x2, y2), fill=lineColour, width=2)\n        start_x, start_y = resizedXY[0]\n        if shape[\"type\"] != \"PolyLine\":\n            # Seems possible to have Polygon with only 1 point!\n            if x2 is None:\n                x2 = start_x + 1  # This will create a visible dot\n            if y2 is None:\n                y2 = start_y + 1\n            draw.line((x2, y2, start_x, start_y), fill=lineColour, width=2)\n\n    rv = BytesIO()\n    compression = 0.9\n    try:\n        img.save(rv, \"jpeg\", quality=int(compression * 100))\n        jpeg = rv.getvalue()\n    finally:\n        rv.close()\n    return HttpResponse(jpeg, content_type=\"image/jpeg\")\n\n\n@login_required()\ndef render_shape_mask(request, shapeId, conn=None, **kwargs):\n    \"\"\" Returns mask as a png (supports transparency) \"\"\"\n\n    if not numpyInstalled:\n        raise NotImplementedError(\"numpy not installed\")\n    params = omero.sys.Parameters()\n    params.map = {\"id\": rlong(shapeId)}\n    shape = conn.getQueryService().findByQuery(\n        \"select s from Shape s where s.id = :id\", params, conn.SERVICE_OPTS\n    )\n    if shape is None:\n        raise Http404(\"Shape ID: %s not found\" % shapeId)\n    width = int(shape.getWidth().getValue())\n    height = int(shape.getHeight().getValue())\n    color = unwrap(shape.getFillColor())\n    fill = (255, 255, 0, 255)\n    if color is not None:\n        color = rgb_int2rgba(color)\n        fill = (color[0], color[1], color[2], int(color[3] * 255))\n    mask_packed = shape.getBytes()\n    # convert bytearray into something we can use\n    intarray = numpy.fromstring(mask_packed, dtype=numpy.uint8)\n    binarray = numpy.unpackbits(intarray)\n\n    # Couldn't get the 'proper' way of doing this to work,\n    # TODO: look at this again later. Faster than simple way below:\n    # E.g. takes ~2 seconds for 1984 x 1984 mask\n    # pixels = \"\"\n    # steps = len(binarray) / 8\n    # for i in range(steps):\n    #     b = binarray[i*8: (i+1)*8]\n    #     pixels += struct.pack(\"8B\", b[0], b[1], b[2], b[3], b[4],\n    #                           b[5], b[6], b[7])\n    # for b in binarray:\n    #     pixels += struct.pack(\"1B\", b)\n    # im = Image.frombytes(\"1\", size=(width, height), data=pixels)\n\n    # Simple approach - Just set each pixel in turn\n    # E.g. takes ~12 seconds for 1984 x 1984 mask with most pixels '1'\n    # Or ~5 seconds for same size mask with most pixels \"0\"\n    img = Image.new(\"RGBA\", size=(width, height), color=(0, 0, 0, 0))\n    x = 0\n    y = 0\n    for pix in binarray:\n        if pix == 1:\n            img.putpixel((x, y), fill)\n        x += 1\n        if x > width - 1:\n            x = 0\n            y += 1\n    rv = BytesIO()\n    # return a png (supports transparency)\n    img.save(rv, \"png\", quality=int(100))\n    png = rv.getvalue()\n    return HttpResponse(png, content_type=\"image/png\")\n\n\ndef _get_signature_from_request(request):\n    \"\"\"\n    returns a string that identifies this image, along with the settings\n    passed on the request.\n    Useful for using as img identifier key, for prepared image.\n\n    @param request: http request\n    @return:        String\n    \"\"\"\n\n    r = request.GET\n    rv = r.get(\"m\", \"_\") + r.get(\"p\", \"_\") + r.get(\"c\", \"_\") + r.get(\"q\", \"_\")\n    return rv\n\n\ndef _get_maps_enabled(request, name, sizeC=0):\n    \"\"\"\n    Parses 'maps' query string from request\n    \"\"\"\n    codomains = None\n    if \"maps\" in request:\n        map_json = request[\"maps\"]\n        codomains = []\n        try:\n            # If coming from request string, need to load -> json\n            if isinstance(map_json, (unicode, str)):\n                map_json = json.loads(map_json)\n            sizeC = max(len(map_json), sizeC)\n            for c in range(sizeC):\n                enabled = None\n                if len(map_json) > c:\n                    m = map_json[c].get(name)\n                    # If None, no change to saved status\n                    if m is not None:\n                        enabled = m.get(\"enabled\") in (True, \"true\")\n                codomains.append(enabled)\n        except Exception:\n            logger.debug(\"Invalid json for query ?maps=%s\" % map_json)\n            codomains = None\n    return codomains\n\n\ndef _get_prepared_image(\n    request, iid, server_id=None, conn=None, saveDefs=False, retry=True\n):\n    \"\"\"\n    Fetches the Image object for image 'iid' and prepares it according to the\n    request query, setting the channels, rendering model and projection\n    arguments. The compression level is parsed and returned too.\n    For parameters in request, see L{getImgDetailsFromReq}\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param saveDefs:    Try to save the rendering settings, default z and t.\n    @param retry:       Try an extra attempt at this method\n    @return:            Tuple (L{omero.gateway.ImageWrapper} image, quality)\n    \"\"\"\n    r = request.GET\n    logger.debug(\n        \"Preparing Image:%r saveDefs=%r \"\n        \"retry=%r request=%r conn=%s\" % (iid, saveDefs, retry, r, str(conn))\n    )\n    img = conn.getObject(\"Image\", iid)\n    if img is None:\n        return\n    invert_flags = None\n    if \"maps\" in r:\n        reverses = _get_maps_enabled(r, \"reverse\", img.getSizeC())\n        # 'reverse' is now deprecated (5.4.0). Also check for 'invert'\n        invert_flags = _get_maps_enabled(r, \"inverted\", img.getSizeC())\n        # invert is True if 'invert' OR 'reverse' is enabled\n        if reverses is not None and invert_flags is not None:\n            invert_flags = [\n                z[0] if z[0] is not None else z[1] for z in zip(invert_flags, reverses)\n            ]\n        try:\n            # quantization maps (just applied, not saved at the moment)\n            qm = [m.get(\"quantization\") for m in json.loads(r[\"maps\"])]\n            img.setQuantizationMaps(qm)\n        except Exception:\n            logger.debug(\"Failed to set quantization maps\")\n\n    if \"c\" in r:\n        logger.debug(\"c=\" + r[\"c\"])\n        activechannels, windows, colors = _split_channel_info(r[\"c\"])\n        allchannels = range(1, img.getSizeC() + 1)\n        # If saving, apply to all channels\n        if saveDefs and not img.setActiveChannels(\n            allchannels, windows, colors, invert_flags\n        ):\n            logger.debug(\"Something bad happened while setting the active channels...\")\n        # Save the active/inactive state of the channels\n        if not img.setActiveChannels(activechannels, windows, colors, invert_flags):\n            logger.debug(\"Something bad happened while setting the active channels...\")\n\n    if r.get(\"m\", None) == \"g\":\n        img.setGreyscaleRenderingModel()\n    elif r.get(\"m\", None) == \"c\":\n        img.setColorRenderingModel()\n    # projection  'intmax' OR 'intmax|5:25'\n    p = r.get(\"p\", None)\n    pStart, pEnd = None, None\n    if p is not None and len(p.split(\"|\")) > 1:\n        p, startEnd = p.split(\"|\", 1)\n        try:\n            pStart, pEnd = [int(s) for s in startEnd.split(\":\")]\n        except ValueError:\n            pass\n    img.setProjection(p)\n    img.setProjectionRange(pStart, pEnd)\n    img.setInvertedAxis(bool(r.get(\"ia\", \"0\") == \"1\"))\n    compress_quality = r.get(\"q\", None)\n    if saveDefs:\n        \"z\" in r and img.setDefaultZ(long(r[\"z\"]) - 1)\n        \"t\" in r and img.setDefaultT(long(r[\"t\"]) - 1)\n        img.saveDefaults()\n    return (img, compress_quality)\n\n\n@login_required()\ndef render_image_region(request, iid, z, t, conn=None, **kwargs):\n    \"\"\"\n    Returns a jpeg of the OMERO image, rendering only a region specified in\n    query string as region=x,y,width,height. E.g. region=0,512,256,256\n    Rendering settings can be specified in the request parameters.\n\n    @param request:     http request\n    @param iid:         image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    # if the region=x,y,w,h is not parsed correctly to give 4 ints then we\n    # simply provide whole image plane.\n    # alternatively, could return a 404?\n    # if h == None:\n    #    return render_image(request, iid, z, t, server_id=None, _conn=None,\n    #                        **kwargs)\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n\n    tile = request.GET.get(\"tile\", None)\n    region = request.GET.get(\"region\", None)\n    level = None\n\n    if tile:\n        try:\n            img._prepareRenderingEngine()\n            w, h = img._re.getTileSize()\n            levels = img._re.getResolutionLevels() - 1\n\n            zxyt = tile.split(\",\")\n            # if tile size is given respect it\n            if len(zxyt) > 4:\n                tile_size = [int(zxyt[3]), int(zxyt[4])]\n                tile_defaults = [w, h]\n                max_tile_length = 1024\n                try:\n                    max_tile_length = int(\n                        conn.getConfigService().getConfigValue(\n                            \"omero.pixeldata.max_tile_length\"\n                        )\n                    )\n                except Exception:\n                    pass\n                for i, tile_length in enumerate(tile_size):\n                    # use default tile size if <= 0\n                    if tile_length <= 0:\n                        tile_size[i] = tile_defaults[i]\n                    # allow no bigger than max_tile_length\n                    if tile_length > max_tile_length:\n                        tile_size[i] = max_tile_length\n                w, h = tile_size\n            v = int(zxyt[0])\n            if v < 0:\n                msg = \"Invalid resolution level %s < 0\" % v\n                logger.debug(msg, exc_info=True)\n                return HttpResponseBadRequest(msg)\n\n            if levels == 0:  # non pyramid file\n                if v > 0:\n                    msg = \"Invalid resolution level %s, non pyramid file\" % v\n                    logger.debug(msg, exc_info=True)\n                    return HttpResponseBadRequest(msg)\n                else:\n                    level = None\n            else:\n                level = levels - v\n                if level < 0:\n                    msg = (\n                        \"Invalid resolution level, \\\n                    %s > number of available levels %s \"\n                        % (v, levels)\n                    )\n                    logger.debug(msg, exc_info=True)\n                    return HttpResponseBadRequest(msg)\n            x = int(zxyt[1]) * w\n            y = int(zxyt[2]) * h\n        except Exception:\n            msg = \"malformed tile argument, tile=%s\" % tile\n            logger.debug(msg, exc_info=True)\n            return HttpResponseBadRequest(msg)\n    elif region:\n        try:\n            xywh = region.split(\",\")\n\n            x = int(xywh[0])\n            y = int(xywh[1])\n            w = int(xywh[2])\n            h = int(xywh[3])\n        except Exception:\n            msg = \"malformed region argument, region=%s\" % region\n            logger.debug(msg, exc_info=True)\n            return HttpResponseBadRequest(msg)\n    else:\n        return HttpResponseBadRequest(\"tile or region argument required\")\n\n    # region details in request are used as key for caching.\n    jpeg_data = webgateway_cache.getImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderJpegRegion(\n            z, t, x, y, w, h, level=level, compression=compress_quality\n        )\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setImage(request, server_id, img, z, t, jpeg_data)\n\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\n@login_required()\ndef render_image(request, iid, z=None, t=None, conn=None, **kwargs):\n    \"\"\"\n    Renders the image with id {{iid}} at {{z}} and {{t}} as jpeg.\n    Many options are available from the request dict. See\n    L{getImgDetailsFromReq} for list.\n    I am assuming a single Pixels object on image with image-Id='iid'. May be\n    wrong\n\n    @param request:     http request\n    @param iid:         image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    jpeg_data = webgateway_cache.getImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderJpeg(z, t, compression=compress_quality)\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setImage(request, server_id, img, z, t, jpeg_data)\n\n    format = request.GET.get(\"format\", \"jpeg\")\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    if \"download\" in kwargs and kwargs[\"download\"]:\n        if format == \"png\":\n            # convert jpeg data to png...\n            i = Image.open(BytesIO(jpeg_data))\n            output = BytesIO()\n            i.save(output, \"png\")\n            jpeg_data = output.getvalue()\n            output.close()\n            rsp = HttpResponse(jpeg_data, content_type=\"image/png\")\n        elif format == \"tif\":\n            # convert jpeg data to TIFF\n            i = Image.open(BytesIO(jpeg_data))\n            output = BytesIO()\n            i.save(output, \"tiff\")\n            jpeg_data = output.getvalue()\n            output.close()\n            rsp = HttpResponse(jpeg_data, content_type=\"image/tiff\")\n        fileName = img.getName()\n        try:\n            fileName = fileName.decode(\"utf8\")\n        except AttributeError:\n            pass  # python 3\n        fileName = fileName.replace(\",\", \".\").replace(\" \", \"_\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        rsp[\"Content-Length\"] = len(jpeg_data)\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s.%s\" % (fileName, format)\n    return rsp\n\n\n@login_required()\ndef render_ome_tiff(request, ctx, cid, conn=None, **kwargs):\n    \"\"\"\n    Renders the OME-TIFF representation of the image(s) with id cid in ctx\n    (i)mage, (d)ataset, or (p)roject.\n    For multiple images export, images that require pixels pyramid (big\n    images) will be silently skipped.\n    If exporting a single big image or if all images in a multple image export\n    are big, a 404 will be triggered.\n    A request parameter dryrun can be passed to return the count of images\n    that would actually be exported.\n\n    @param request:     http request\n    @param ctx:         'p' or 'd' or 'i'\n    @param cid:         Project, Dataset or Image ID\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping the tiff (or zip for multiple\n                        files), or redirect to temp file/zip\n                        if dryrun is True, returns count of images that would\n                        be exported\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    imgs = []\n    if ctx == \"p\":\n        obj = conn.getObject(\"Project\", cid)\n        if obj is None:\n            raise Http404\n        for d in obj.listChildren():\n            imgs.extend(list(d.listChildren()))\n        name = obj.getName()\n    elif ctx == \"d\":\n        obj = conn.getObject(\"Dataset\", cid)\n        if obj is None:\n            raise Http404\n        imgs.extend(list(obj.listChildren()))\n        selection = list(filter(None, request.GET.get(\"selection\", \"\").split(\",\")))\n        if len(selection) > 0:\n            logger.debug(selection)\n            logger.debug(imgs)\n            imgs = [x for x in imgs if str(x.getId()) in selection]\n            logger.debug(imgs)\n            if len(imgs) == 0:\n                raise Http404\n        name = \"%s-%s\" % (obj.getParent().getName(), obj.getName())\n    elif ctx == \"w\":\n        obj = conn.getObject(\"Well\", cid)\n        if obj is None:\n            raise Http404\n        imgs.extend([x.getImage() for x in obj.listChildren()])\n        plate = obj.getParent()\n        coord = \"%s%s\" % (\n            plate.getRowLabels()[obj.row],\n            plate.getColumnLabels()[obj.column],\n        )\n        name = \"%s-%s-%s\" % (plate.getParent().getName(), plate.getName(), coord)\n    else:\n        obj = conn.getObject(\"Image\", cid)\n        if obj is None:\n            raise Http404\n        imgs.append(obj)\n\n    imgs = [x for x in imgs if not x.requiresPixelsPyramid()]\n\n    if request.GET.get(\"dryrun\", False):\n        rv = json.dumps(len(imgs))\n        c = request.GET.get(\"callback\", None)\n        if c is not None and not kwargs.get(\"_internal\", False):\n            rv = \"%s(%s)\" % (c, rv)\n        return HttpJavascriptResponse(rv)\n    if len(imgs) == 0:\n        raise Http404\n    if len(imgs) == 1:\n        obj = imgs[0]\n        key = (\n            \"_\".join((str(x.getId()) for x in obj.getAncestry()))\n            + \"_\"\n            + str(obj.getId())\n            + \"_ome_tiff\"\n        )\n        # total name len <= 255, 9 is for .ome.tiff\n        fnamemax = 255 - len(str(obj.getId())) - 10\n        objname = obj.getName()[:fnamemax]\n        fpath, rpath, fobj = webgateway_tempfile.new(\n            str(obj.getId()) + \"-\" + objname + \".ome.tiff\", key=key\n        )\n        if fobj is True:\n            # already exists\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n        tiff_data = webgateway_cache.getOmeTiffImage(request, server_id, imgs[0])\n        if tiff_data is None:\n            try:\n                tiff_data = imgs[0].exportOmeTiff()\n            except Exception:\n                logger.debug(\"Failed to export image (2)\", exc_info=True)\n                tiff_data = None\n            if tiff_data is None:\n                webgateway_tempfile.abort(fpath)\n                raise Http404\n            webgateway_cache.setOmeTiffImage(request, server_id, imgs[0], tiff_data)\n        if fobj is None:\n            rsp = HttpResponse(tiff_data, content_type=\"image/tiff\")\n            rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s.ome.tiff\"' % (\n                str(obj.getId()) + \"-\" + objname\n            )\n            rsp[\"Content-Length\"] = len(tiff_data)\n            return rsp\n        else:\n            fobj.write(tiff_data)\n            fobj.close()\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n    else:\n        try:\n            img_ids = \"+\".join((str(x.getId()) for x in imgs)).encode(\"utf-8\")\n            key = (\n                \"_\".join((str(x.getId()) for x in imgs[0].getAncestry()))\n                + \"_\"\n                + md5(img_ids).hexdigest()\n                + \"_ome_tiff_zip\"\n            )\n            fpath, rpath, fobj = webgateway_tempfile.new(name + \".zip\", key=key)\n            if fobj is True:\n                return HttpResponseRedirect(\n                    settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n                )\n            logger.debug(fpath)\n            if fobj is None:\n                fobj = BytesIO()\n            zobj = zipfile.ZipFile(fobj, \"w\", zipfile.ZIP_STORED)\n            for obj in imgs:\n                tiff_data = webgateway_cache.getOmeTiffImage(request, server_id, obj)\n                if tiff_data is None:\n                    tiff_data = obj.exportOmeTiff()\n                    if tiff_data is None:\n                        continue\n                    webgateway_cache.setOmeTiffImage(request, server_id, obj, tiff_data)\n                # While ZIP itself doesn't have the 255 char limit for\n                # filenames, the FS where these get unarchived might, so trim\n                # names\n                # total name len <= 255, 9 is for .ome.tiff\n                fnamemax = 255 - len(str(obj.getId())) - 10\n                objname = obj.getName()[:fnamemax]\n                zobj.writestr(str(obj.getId()) + \"-\" + objname + \".ome.tiff\", tiff_data)\n            zobj.close()\n            if fpath is None:\n                zip_data = fobj.getvalue()\n                rsp = HttpResponse(zip_data, content_type=\"application/zip\")\n                rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s.zip\"' % name\n                rsp[\"Content-Length\"] = len(zip_data)\n                return rsp\n        except Exception:\n            logger.debug(traceback.format_exc())\n            raise\n        return HttpResponseRedirect(settings.STATIC_URL + \"webgateway/tfiles/\" + rpath)\n\n\n@login_required()\ndef render_movie(request, iid, axis, pos, conn=None, **kwargs):\n    \"\"\"\n    Renders a movie from the image with id iid\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param axis:        Movie frames are along 'z' or 't' dimension. String\n    @param pos:         The T index (for z axis) or Z index (for t axis)\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping the file, or redirect to temp\n                        file\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    try:\n        # Prepare a filename we'll use for temp cache, and check if file is\n        # already there\n        opts = {}\n        opts[\"format\"] = \"video/\" + request.GET.get(\"format\", \"quicktime\")\n        opts[\"fps\"] = int(request.GET.get(\"fps\", 4))\n        opts[\"minsize\"] = (512, 512, \"Black\")\n        ext = \".avi\"\n        key = \"%s-%s-%s-%d-%s-%s\" % (\n            iid,\n            axis,\n            pos,\n            opts[\"fps\"],\n            _get_signature_from_request(request),\n            request.GET.get(\"format\", \"quicktime\"),\n        )\n\n        pos = int(pos)\n        pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n        if pi is None:\n            raise Http404\n        img, compress_quality = pi\n\n        fpath, rpath, fobj = webgateway_tempfile.new(img.getName() + ext, key=key)\n        logger.debug(fpath, rpath, fobj)\n        if fobj is True:\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n            # os.path.join(rpath, img.getName() + ext))\n\n        if \"optsCB\" in kwargs:\n            opts.update(kwargs[\"optsCB\"](img))\n        opts.update(kwargs.get(\"opts\", {}))\n        logger.debug(\n            \"rendering movie for img %s with axis %s, pos %i and opts %s\"\n            % (iid, axis, pos, opts)\n        )\n        # fpath, rpath = webgateway_tempfile.newdir()\n        if fpath is None:\n            fo, fn = tempfile.mkstemp()\n        else:\n            fn = fpath  # os.path.join(fpath, img.getName())\n        if axis.lower() == \"z\":\n            dext, mimetype = img.createMovie(\n                fn, 0, img.getSizeZ() - 1, pos - 1, pos - 1, opts\n            )\n        else:\n            dext, mimetype = img.createMovie(\n                fn, pos - 1, pos - 1, 0, img.getSizeT() - 1, opts\n            )\n        if dext is None and mimetype is None:\n            # createMovie is currently only available on 4.1_custom\n            # https://trac.openmicroscopy.org/ome/ticket/3857\n            raise Http404\n        if fpath is None:\n            movie = open(fn).read()\n            os.close(fo)\n            rsp = HttpResponse(movie, content_type=mimetype)\n            rsp[\"Content-Disposition\"] = 'attachment; filename=\"%s\"' % (\n                img.getName() + ext\n            )\n            rsp[\"Content-Length\"] = len(movie)\n            return rsp\n        else:\n            fobj.close()\n            # shutil.move(fn, fn + ext)\n            return HttpResponseRedirect(\n                settings.STATIC_URL + \"webgateway/tfiles/\" + rpath\n            )\n            # os.path.join(rpath, img.getName() + ext))\n    except Exception:\n        logger.debug(traceback.format_exc())\n        raise\n\n\n@login_required()\ndef render_split_channel(request, iid, z, t, conn=None, **kwargs):\n    \"\"\"\n    Renders a split channel view of the image with id {{iid}} at {{z}} and\n    {{t}} as jpeg.\n    Many options are available from the request dict.\n    Requires Pillow to be installed on the server.\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @return:            http response wrapping a jpeg\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(request, iid, server_id=server_id, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    compress_quality = compress_quality and float(compress_quality) or 0.9\n    jpeg_data = webgateway_cache.getSplitChannelImage(request, server_id, img, z, t)\n    if jpeg_data is None:\n        jpeg_data = img.renderSplitChannel(z, t, compression=compress_quality)\n        if jpeg_data is None:\n            raise Http404\n        webgateway_cache.setSplitChannelImage(request, server_id, img, z, t, jpeg_data)\n    rsp = HttpResponse(jpeg_data, content_type=\"image/jpeg\")\n    return rsp\n\n\ndef debug(f):\n    \"\"\"\n    Decorator for adding debugging functionality to methods.\n\n    @param f:       The function to wrap\n    @return:        The wrapped function\n    \"\"\"\n\n    @wraps(f)\n    def wrap(request, *args, **kwargs):\n        debug = request.GET.getlist(\"debug\")\n        if \"slow\" in debug:\n            time.sleep(5)\n        if \"fail\" in debug:\n            raise Http404\n        if \"error\" in debug:\n            raise AttributeError(\"Debug requested error\")\n        return f(request, *args, **kwargs)\n\n    return wrap\n\n\ndef jsonp(f):\n    \"\"\"\n    Decorator for adding connection debugging and returning function result as\n    json, depending on values in kwargs\n\n    @param f:       The function to wrap\n    @return:        The wrapped function, which will return json\n    \"\"\"\n\n    @wraps(f)\n    def wrap(request, *args, **kwargs):\n        logger.debug(\"jsonp\")\n        try:\n            server_id = kwargs.get(\"server_id\", None)\n            if server_id is None and request.session.get(\"connector\"):\n                server_id = request.session[\"connector\"].server_id\n            kwargs[\"server_id\"] = server_id\n            rv = f(request, *args, **kwargs)\n            if kwargs.get(\"_raw\", False):\n                return rv\n            if isinstance(rv, HttpResponse):\n                return rv\n            c = request.GET.get(\"callback\", None)\n            if c is not None and not kwargs.get(\"_internal\", False):\n                rv = json.dumps(rv)\n                rv = \"%s(%s)\" % (c, rv)\n                # mimetype for JSONP is application/javascript\n                return HttpJavascriptResponse(rv)\n            if kwargs.get(\"_internal\", False):\n                return rv\n            # mimetype for JSON is application/json\n            # NB: To support old api E.g. /get_rois_json/\n            # We need to support lists\n            safe = type(rv) is dict\n            return JsonResponse(rv, safe=safe)\n        except Exception as ex:\n            # Default status is 500 'server error'\n            # But we try to handle all 'expected' errors appropriately\n            # TODO: handle omero.ConcurrencyException\n            status = 500\n            if isinstance(ex, omero.SecurityViolation):\n                status = 403\n            elif isinstance(ex, omero.ApiUsageException):\n                status = 400\n            trace = traceback.format_exc()\n            logger.debug(trace)\n            if kwargs.get(\"_raw\", False) or kwargs.get(\"_internal\", False):\n                raise\n            return JsonResponse(\n                {\"message\": str(ex), \"stacktrace\": trace}, status=status\n            )\n\n    return wrap\n\n\n@debug\n@login_required()\ndef render_row_plot(request, iid, z, t, y, conn=None, w=1, **kwargs):\n    \"\"\"\n    Renders the line plot for the image with id {{iid}} at {{z}} and {{t}} as\n    gif with transparent background.\n    Many options are available from the request dict.\n    I am assuming a single Pixels object on image with Image ID='iid'. May be\n    wrong\n    TODO: cache\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param y:           Y position of row to measure\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param w:           Line width\n    @return:            http response wrapping a gif\n    \"\"\"\n\n    if not w:\n        w = 1\n    pi = _get_prepared_image(request, iid, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    try:\n        gif_data = img.renderRowLinePlotGif(int(z), int(t), int(y), int(w))\n    except Exception:\n        logger.debug(\"a\", exc_info=True)\n        raise\n    if gif_data is None:\n        raise Http404\n    rsp = HttpResponse(gif_data, content_type=\"image/gif\")\n    return rsp\n\n\n@debug\n@login_required()\ndef render_col_plot(request, iid, z, t, x, w=1, conn=None, **kwargs):\n    \"\"\"\n    Renders the line plot for the image with id {{iid}} at {{z}} and {{t}} as\n    gif with transparent background.\n    Many options are available from the request dict.\n    I am assuming a single Pixels object on image with id='iid'. May be wrong\n    TODO: cache\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param z:           Z index\n    @param t:           T index\n    @param x:           X position of column to measure\n    @param conn:        L{omero.gateway.BlitzGateway} connection\n    @param w:           Line width\n    @return:            http response wrapping a gif\n    \"\"\"\n\n    if not w:\n        w = 1\n    pi = _get_prepared_image(request, iid, conn=conn)\n    if pi is None:\n        raise Http404\n    img, compress_quality = pi\n    gif_data = img.renderColLinePlotGif(int(z), int(t), int(x), int(w))\n    if gif_data is None:\n        raise Http404\n    rsp = HttpResponse(gif_data, content_type=\"image/gif\")\n    return rsp\n\n\n@login_required()\n@jsonp\ndef imageData_json(request, conn=None, _internal=False, **kwargs):\n    \"\"\"\n    Get a dict with image information\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param _internal:   TODO: ?\n    @return:            Dict\n    \"\"\"\n\n    iid = kwargs[\"iid\"]\n    key = kwargs.get(\"key\", None)\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        if is_public_user(request):\n            # 403 - Should try logging in\n            return HttpResponseForbidden()\n        else:\n            return HttpResponseNotFound(\"Image:%s not found\" % iid)\n    if request.GET.get(\"getDefaults\") == \"true\":\n        image.resetDefaults(save=False)\n    rv = imageMarshal(image, key=key, request=request)\n    return rv\n\n\n@login_required()\n@jsonp\ndef wellData_json(request, conn=None, _internal=False, **kwargs):\n    \"\"\"\n    Get a dict with image information\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param _internal:   TODO: ?\n    @return:            Dict\n    \"\"\"\n\n    wid = kwargs[\"wid\"]\n    well = conn.getObject(\"Well\", wid)\n    if well is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n    rv = well.simpleMarshal(xtra=xtra)\n    return rv\n\n\n@login_required()\n@jsonp\ndef plateGrid_json(request, pid, field=0, conn=None, **kwargs):\n    \"\"\"\"\"\"\n    try:\n        field = long(field or 0)\n    except ValueError:\n        field = 0\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n    thumbsize = getIntOrDefault(request, \"size\", None)\n    logger.debug(thumbsize)\n    server_id = kwargs[\"server_id\"]\n\n    def get_thumb_url(iid):\n        if thumbsize is not None:\n            return reverse(prefix, args=(iid, thumbsize))\n        return reverse(prefix, args=(iid,))\n\n    plateGrid = PlateGrid(conn, pid, field, kwargs.get(\"urlprefix\", get_thumb_url))\n\n    plate = plateGrid.plate\n    if plate is None:\n        return Http404\n\n    cache_key = \"plategrid-%d-%s\" % (field, thumbsize)\n    rv = webgateway_cache.getJson(request, server_id, plate, cache_key)\n\n    if rv is None:\n        rv = plateGrid.metadata\n        webgateway_cache.setJson(request, server_id, plate, json.dumps(rv), cache_key)\n    else:\n        rv = json.loads(rv)\n    return rv\n\n\n@login_required()\n@jsonp\ndef get_thumbnails_json(request, w=None, conn=None, **kwargs):\n    \"\"\"\n    Returns base64 encoded jpeg with the rendered thumbnail for images\n    'id'\n\n    @param request:     http request\n    @param w:           Thumbnail max width. 96 by default\n    @return:            http response containing base64 encoded thumbnails\n    \"\"\"\n    server_settings = request.session.get(\"server_settings\", {}).get(\"browser\", {})\n    defaultSize = server_settings.get(\"thumb_default_size\", 96)\n    if w is None:\n        w = defaultSize\n    image_ids = get_longs(request, \"id\")\n    image_ids = list(set(image_ids))  # remove any duplicates\n    # If we only have a single ID, simply use getThumbnail()\n    if len(image_ids) == 1:\n        iid = image_ids[0]\n        try:\n            data = _render_thumbnail(request, iid, w=w, conn=conn)\n            return {\n                iid: \"data:image/jpeg;base64,%s\"\n                % base64.b64encode(data).decode(\"utf-8\")\n            }\n        except Exception:\n            return {iid: None}\n    logger.debug(\"Image ids: %r\" % image_ids)\n    if len(image_ids) > settings.THUMBNAILS_BATCH:\n        return HttpJavascriptResponseServerError(\n            \"Max %s thumbnails at a time.\" % settings.THUMBNAILS_BATCH\n        )\n    thumbnails = conn.getThumbnailSet([rlong(i) for i in image_ids], w)\n    rv = dict()\n    for i in image_ids:\n        rv[i] = None\n        try:\n            t = thumbnails[i]\n            if len(t) > 0:\n                # replace thumbnail urls by base64 encoded image\n                rv[i] = \"data:image/jpeg;base64,%s\" % base64.b64encode(t).decode(\n                    \"utf-8\"\n                )\n        except KeyError:\n            logger.error(\"Thumbnail not available. (img id: %d)\" % i)\n        except Exception:\n            logger.error(traceback.format_exc())\n    return rv\n\n\n@login_required()\n@jsonp\ndef get_thumbnail_json(request, iid, w=None, h=None, conn=None, _defcb=None, **kwargs):\n    \"\"\"\n    Returns an HttpResponse base64 encoded jpeg with the rendered thumbnail\n    for image 'iid'\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param w:           Thumbnail max width. 96 by default\n    @param h:           Thumbnail max height\n    @return:            http response containing base64 encoded thumbnail\n    \"\"\"\n    jpeg_data = _render_thumbnail(\n        request=request, iid=iid, w=w, h=h, conn=conn, _defcb=_defcb, **kwargs\n    )\n    rv = \"data:image/jpeg;base64,%s\" % base64.b64encode(jpeg_data).decode(\"utf-8\")\n    return rv\n\n\n@login_required()\n@jsonp\ndef listImages_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    lists all Images in a Dataset, as json\n    TODO: cache\n\n    @param request:     http request\n    @param did:         Dataset ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of image json.\n    \"\"\"\n\n    dataset = conn.getObject(\"Dataset\", did)\n    if dataset is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\n        \"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix),\n        \"tiled\": request.GET.get(\"tiled\", False),\n    }\n    return [x.simpleMarshal(xtra=xtra) for x in dataset.listChildren()]\n\n\n@login_required()\n@jsonp\ndef listWellImages_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    lists all Images in a Well, as json\n    TODO: cache\n\n    @param request:     http request\n    @param did:         Well ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of image json.\n    \"\"\"\n\n    well = conn.getObject(\"Well\", did)\n    acq = getIntOrDefault(request, \"run\", None)\n    if well is None:\n        return HttpJavascriptResponseServerError('\"\"')\n    prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n\n    def urlprefix(iid):\n        return reverse(prefix, args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n\n    def marshal_pos(w):\n        d = {}\n        for x, p in ([\"x\", w.getPosX()], [\"y\", w.getPosY()]):\n            if p is not None:\n                d[x] = {\"value\": p.getValue(), \"unit\": str(p.getUnit())}\n        return d\n\n    wellImgs = []\n    for ws in well.listChildren():\n        # optionally filter by acquisition 'run'\n        if (\n            acq is not None\n            and ws.plateAcquisition is not None\n            and ws.plateAcquisition.id.val != acq\n        ):\n            continue\n        img = ws.getImage()\n        if img is not None:\n            m = img.simpleMarshal(xtra=xtra)\n            pos = marshal_pos(ws)\n            if len(pos.keys()) > 0:\n                m[\"position\"] = pos\n            wellImgs.append(m)\n    return wellImgs\n\n\n@login_required()\n@jsonp\ndef listDatasets_json(request, pid, conn=None, **kwargs):\n    \"\"\"\n    lists all Datasets in a Project, as json\n    TODO: cache\n\n    @param request:     http request\n    @param pid:         Project ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of dataset json.\n    \"\"\"\n\n    project = conn.getObject(\"Project\", pid)\n    if project is None:\n        return HttpJavascriptResponse(\"[]\")\n    return [x.simpleMarshal(xtra={\"childCount\": 0}) for x in project.listChildren()]\n\n\n@login_required()\n@jsonp\ndef datasetDetail_json(request, did, conn=None, **kwargs):\n    \"\"\"\n    return json encoded details for a dataset\n    TODO: cache\n    \"\"\"\n    ds = conn.getObject(\"Dataset\", did)\n    return ds.simpleMarshal()\n\n\n@login_required()\n@jsonp\ndef listProjects_json(request, conn=None, **kwargs):\n    \"\"\"\n    lists all Projects, as json\n    TODO: cache\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            list of project json.\n    \"\"\"\n\n    rv = []\n    for pr in conn.listProjects():\n        rv.append({\"id\": pr.id, \"name\": pr.name, \"description\": pr.description or \"\"})\n    return rv\n\n\n@login_required()\n@jsonp\ndef projectDetail_json(request, pid, conn=None, **kwargs):\n    \"\"\"\n    grab details from one specific project\n    TODO: cache\n\n    @param request:     http request\n    @param pid:         Project ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            project details as dict.\n    \"\"\"\n\n    pr = conn.getObject(\"Project\", pid)\n    rv = pr.simpleMarshal()\n    return rv\n\n\n@jsonp\ndef open_with_options(request, **kwargs):\n    \"\"\"\n    Make the settings.OPEN_WITH available via JSON\n    \"\"\"\n    open_with = settings.OPEN_WITH\n    viewers = []\n    for ow in open_with:\n        if len(ow) < 2:\n            continue\n        viewer = {}\n        viewer[\"id\"] = ow[0]\n        try:\n            viewer[\"url\"] = reverse(ow[1])\n        except NoReverseMatch:\n            viewer[\"url\"] = ow[1]\n        # try non-essential parameters...\n        # NB: Need supported_objects OR script_url to enable plugin\n        try:\n            if len(ow) > 2:\n                if \"supported_objects\" in ow[2]:\n                    viewer[\"supported_objects\"] = ow[2][\"supported_objects\"]\n                if \"target\" in ow[2]:\n                    viewer[\"target\"] = ow[2][\"target\"]\n                if \"script_url\" in ow[2]:\n                    # If we have an absolute url, use it...\n                    if ow[2][\"script_url\"].startswith(\"http\"):\n                        viewer[\"script_url\"] = ow[2][\"script_url\"]\n                    else:\n                        # ...otherwise, assume within static\n                        viewer[\"script_url\"] = static(ow[2][\"script_url\"])\n                if \"label\" in ow[2]:\n                    viewer[\"label\"] = ow[2][\"label\"]\n        except Exception:\n            # ignore invalid params\n            pass\n        viewers.append(viewer)\n    return {\"open_with_options\": viewers}\n\n\ndef searchOptFromRequest(request):\n    \"\"\"\n    Returns a dict of options for searching, based on\n    parameters in the http request\n    Request keys include:\n        - ctx: (http request) 'imgs' to search only images\n        - text: (http request) the actual text phrase\n        - start: starting index (0 based) for result\n        - limit: nr of results to retuen (0 == unlimited)\n        - author:\n        - grabData:\n        - parents:\n\n    @param request:     http request\n    @return:            Dict of options\n    \"\"\"\n\n    try:\n        r = request.GET\n        opts = {\n            \"search\": unicode(r.get(\"text\", \"\")).encode(\"utf8\"),\n            \"ctx\": r.get(\"ctx\", \"\"),\n            \"grabData\": not not r.get(\"grabData\", False),\n            \"parents\": not not bool(r.get(\"parents\", False)),\n            \"start\": int(r.get(\"start\", 0)),\n            \"limit\": int(r.get(\"limit\", 0)),\n            \"key\": r.get(\"key\", None),\n        }\n        author = r.get(\"author\", \"\")\n        if author:\n            opts[\"search\"] += \" author:\" + author\n        return opts\n    except Exception:\n        logger.error(traceback.format_exc())\n        return {}\n\n\n@TimeIt(logging.INFO)\n@login_required()\n@jsonp\ndef search_json(request, conn=None, **kwargs):\n    \"\"\"\n    Search for objects in blitz.\n    Returns json encoded list of marshalled objects found by the search query\n    Request keys include:\n        - text: The text to search for\n        - ctx: (http request) 'imgs' to search only images\n        - text: (http request) the actual text phrase\n        - start: starting index (0 based) for result\n        - limit: nr of results to retuen (0 == unlimited)\n        - author:\n        - grabData:\n        - parents:\n\n    @param request:     http request\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json search results\n    TODO: cache\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    opts = searchOptFromRequest(request)\n    rv = []\n    logger.debug(\"searchObjects(%s)\" % (opts[\"search\"]))\n    # search returns blitz_connector wrapper objects\n\n    def urlprefix(iid):\n        return reverse(\"webgateway_render_thumbnail\", args=(iid,))\n\n    xtra = {\"thumbUrlPrefix\": kwargs.get(\"urlprefix\", urlprefix)}\n    try:\n        if opts[\"ctx\"] == \"imgs\":\n            sr = conn.searchObjects([\"image\"], opts[\"search\"], conn.SERVICE_OPTS)\n        else:\n            # searches P/D/I\n            sr = conn.searchObjects(None, opts[\"search\"], conn.SERVICE_OPTS)\n    except ApiUsageException:\n        return HttpJavascriptResponseServerError('\"parse exception\"')\n\n    def marshal():\n        rv = []\n        if opts[\"grabData\"] and opts[\"ctx\"] == \"imgs\":\n            bottom = min(opts[\"start\"], len(sr) - 1)\n            if opts[\"limit\"] == 0:\n                top = len(sr)\n            else:\n                top = min(len(sr), bottom + opts[\"limit\"])\n            for i in range(bottom, top):\n                e = sr[i]\n                # for e in sr:\n                try:\n                    rv.append(\n                        imageData_json(\n                            request,\n                            server_id,\n                            iid=e.id,\n                            key=opts[\"key\"],\n                            conn=conn,\n                            _internal=True,\n                        )\n                    )\n                except AttributeError as x:\n                    logger.debug(\n                        \"(iid %i) ignoring Attribute Error: %s\" % (e.id, str(x))\n                    )\n                    pass\n                except omero.ServerError as x:\n                    logger.debug(\"(iid %i) ignoring Server Error: %s\" % (e.id, str(x)))\n            return rv\n        else:\n            return [x.simpleMarshal(xtra=xtra, parents=opts[\"parents\"]) for x in sr]\n\n    rv = timeit(marshal)()\n    logger.debug(rv)\n    return rv\n\n\n@require_POST\n@login_required()\ndef save_image_rdef_json(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Requests that the rendering defs passed in the request be set as the\n    default for this image.\n    Rendering defs in request listed at L{getImgDetailsFromReq}\n    TODO: jsonp\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            http response 'true' or 'false'\n    \"\"\"\n    server_id = request.session[\"connector\"].server_id\n    pi = _get_prepared_image(\n        request, iid, server_id=server_id, conn=conn, saveDefs=True\n    )\n    if pi is None:\n        json_data = \"false\"\n    else:\n        user_id = pi[0]._conn.getEventContext().userId\n        webgateway_cache.invalidateObject(server_id, user_id, pi[0])\n        pi[0].getThumbnail()\n        json_data = \"true\"\n    if request.GET.get(\"callback\", None):\n        json_data = \"%s(%s)\" % (request.GET[\"callback\"], json_data)\n    return HttpJavascriptResponse(json_data)\n\n\n@login_required()\n@jsonp\ndef listLuts_json(request, conn=None, **kwargs):\n    \"\"\"\n    Lists lookup tables 'LUTs' availble for rendering\n\n    This list is dynamic and will change if users add LUTs to their server.\n    We include 'png_index' which is the index of each LUT within the\n    static/webgateway/img/luts_10.png or -1 if LUT is not found.\n    \"\"\"\n    scriptService = conn.getScriptService()\n    luts = scriptService.getScriptsByMimetype(\"text/x-lut\")\n    rv = []\n    for lut in luts:\n        lutsrc = lut.path.val + lut.name.val\n        png_index = LUTS_IN_PNG.index(lutsrc) if lutsrc in LUTS_IN_PNG else -1\n        rv.append(\n            {\n                \"id\": lut.id.val,\n                \"path\": lut.path.val,\n                \"name\": lut.name.val,\n                \"size\": unwrap(lut.size),\n                \"png_index\": png_index,\n            }\n        )\n    rv.sort(key=lambda x: x[\"name\"].lower())\n    return {\"luts\": rv, \"png_luts\": LUTS_IN_PNG}\n\n\n@login_required()\ndef list_compatible_imgs_json(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Lists the images on the same project that would be viable targets for\n    copying rendering settings.\n    TODO: change method to:\n    list_compatible_imgs_json (request, iid, server_id=None, conn=None,\n    **kwargs):\n\n    @param request:     http request\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json list of image IDs\n    \"\"\"\n\n    json_data = \"false\"\n    r = request.GET\n    if conn is None:\n        img = None\n    else:\n        img = conn.getObject(\"Image\", iid)\n\n    if img is not None:\n        # List all images in project\n        imgs = []\n        for ds in img.getProject().listChildren():\n            imgs.extend(ds.listChildren())\n        # Filter the ones that would pass the applySettingsToImages call\n        img_ptype = img.getPrimaryPixels().getPixelsType().getValue()\n        img_ccount = img.getSizeC()\n        img_ew = [x.getLabel() for x in img.getChannels()]\n        img_ew.sort()\n\n        def compat(i):\n            if long(i.getId()) == long(iid):\n                return False\n            pp = i.getPrimaryPixels()\n            if (\n                pp is None\n                or i.getPrimaryPixels().getPixelsType().getValue() != img_ptype\n                or i.getSizeC() != img_ccount\n            ):\n                return False\n            ew = [x.getLabel() for x in i.getChannels()]\n            ew.sort()\n            if ew != img_ew:\n                return False\n            return True\n\n        imgs = filter(compat, imgs)\n        json_data = json.dumps([x.getId() for x in imgs])\n\n    if r.get(\"callback\", None):\n        json_data = \"%s(%s)\" % (r[\"callback\"], json_data)\n    return HttpJavascriptResponse(json_data)\n\n\n@require_POST\n@login_required()\n@jsonp\ndef reset_rdef_json(request, toOwners=False, conn=None, **kwargs):\n    \"\"\"\n    Simply takes request 'to_type' and 'toids' and\n    delegates to Rendering Settings service to reset\n    settings accordings.\n\n    @param toOwners:    if True, default to the owner's settings.\n    \"\"\"\n\n    r = request.POST\n    toids = r.getlist(\"toids\")\n    to_type = str(r.get(\"to_type\", \"image\"))\n    to_type = to_type.title()\n    if to_type == \"Acquisition\":\n        to_type = \"PlateAcquisition\"\n\n    if len(toids) == 0:\n        raise Http404(\n            \"Need to specify objects in request, E.g.\"\n            \" ?totype=dataset&toids=1&toids=2\"\n        )\n\n    toids = [int(id) for id in toids]\n\n    rss = conn.getRenderingSettingsService()\n\n    # get the first object and set the group to match\n    conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n    o = conn.getObject(to_type, toids[0])\n    if o is not None:\n        gid = o.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    if toOwners:\n        rv = rss.resetDefaultsByOwnerInSet(to_type, toids, conn.SERVICE_OPTS)\n    else:\n        rv = rss.resetDefaultsInSet(to_type, toids, conn.SERVICE_OPTS)\n\n    return rv\n\n\n@login_required()\n@jsonp\ndef copy_image_rdef_json(request, conn=None, **kwargs):\n    \"\"\"\n    If 'fromid' is in request, copy the image ID to session,\n    for applying later using this same method.\n    If list of 'toids' is in request, paste the image ID from the session\n    to the specified images.\n    If 'fromid' AND 'toids' are in the reqest, we simply\n    apply settings and don't save anything to request.\n    If 'to_type' is in request, this can be 'dataset', 'plate', 'acquisition'\n    Returns json dict of Boolean:[Image-IDs] for images that have successfully\n    had the rendering settings applied, or not.\n\n    @param request:     http request\n    @param server_id:\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @return:            json dict of Boolean:[Image-IDs]\n    \"\"\"\n\n    server_id = request.session[\"connector\"].server_id\n    json_data = False\n\n    fromid = request.GET.get(\"fromid\", None)\n    toids = request.POST.getlist(\"toids\")\n    to_type = str(request.POST.get(\"to_type\", \"image\"))\n    rdef = None\n\n    if to_type not in (\"dataset\", \"plate\", \"acquisition\"):\n        to_type = \"Image\"  # default is image\n\n    # Only 'fromid' is given, simply save to session\n    if fromid is not None and len(toids) == 0:\n        request.session.modified = True\n        request.session[\"fromid\"] = fromid\n        if request.session.get(\"rdef\") is not None:\n            del request.session[\"rdef\"]\n        return True\n\n    # If we've got an rdef encoded in request instead of ImageId...\n    r = request.GET or request.POST\n    if r.get(\"c\") is not None:\n        # make a map of settings we need\n        rdef = {\"c\": str(r.get(\"c\"))}  # channels\n        if r.get(\"maps\"):\n            try:\n                rdef[\"maps\"] = json.loads(r.get(\"maps\"))\n            except Exception:\n                pass\n        if r.get(\"pixel_range\"):\n            rdef[\"pixel_range\"] = str(r.get(\"pixel_range\"))\n        if r.get(\"m\"):\n            rdef[\"m\"] = str(r.get(\"m\"))  # model (grey)\n        if r.get(\"z\"):\n            rdef[\"z\"] = str(r.get(\"z\"))  # z & t pos\n        if r.get(\"t\"):\n            rdef[\"t\"] = str(r.get(\"t\"))\n        imageId = request.GET.get(\"imageId\", request.POST.get(\"imageId\", None))\n        if imageId:\n            rdef[\"imageId\"] = int(imageId)\n\n        if request.method == \"GET\":\n            request.session.modified = True\n            request.session[\"rdef\"] = rdef\n            # remove any previous rdef we may have via 'fromId'\n            if request.session.get(\"fromid\") is not None:\n                del request.session[\"fromid\"]\n            return True\n\n    # Check session for 'fromid'\n    if fromid is None:\n        fromid = request.session.get(\"fromid\", None)\n\n    # maybe these pair of methods should be on ImageWrapper??\n    def getRenderingSettings(image):\n        rv = {}\n        chs = []\n        maps = []\n        for i, ch in enumerate(image.getChannels()):\n            act = \"\" if ch.isActive() else \"-\"\n            start = ch.getWindowStart()\n            end = ch.getWindowEnd()\n            color = ch.getLut()\n            maps.append({\"inverted\": {\"enabled\": ch.isInverted()}})\n            if not color or len(color) == 0:\n                color = ch.getColor().getHtml()\n            chs.append(\"%s%s|%s:%s$%s\" % (act, i + 1, start, end, color))\n        rv[\"c\"] = \",\".join(chs)\n        rv[\"maps\"] = maps\n        rv[\"m\"] = \"g\" if image.isGreyscaleRenderingModel() else \"c\"\n        rv[\"z\"] = image.getDefaultZ() + 1\n        rv[\"t\"] = image.getDefaultT() + 1\n        return rv\n\n    def applyRenderingSettings(image, rdef):\n        invert_flags = _get_maps_enabled(rdef, \"inverted\", image.getSizeC())\n        channels, windows, colors = _split_channel_info(rdef[\"c\"])\n        # also prepares _re\n        image.setActiveChannels(channels, windows, colors, invert_flags)\n        if rdef[\"m\"] == \"g\":\n            image.setGreyscaleRenderingModel()\n        else:\n            image.setColorRenderingModel()\n        if \"z\" in rdef:\n            image._re.setDefaultZ(long(rdef[\"z\"]) - 1)\n        if \"t\" in rdef:\n            image._re.setDefaultT(long(rdef[\"t\"]) - 1)\n        image.saveDefaults()\n\n    # Use rdef from above or previously saved one...\n    if rdef is None:\n        rdef = request.session.get(\"rdef\")\n    if request.method == \"POST\":\n        originalSettings = None\n        fromImage = None\n        if fromid is None:\n            # if we have rdef, save to source image, then use that image as\n            # 'fromId', then revert.\n            if rdef is not None and len(toids) > 0:\n                fromImage = conn.getObject(\"Image\", rdef[\"imageId\"])\n                if fromImage is not None:\n                    # copy orig settings\n                    originalSettings = getRenderingSettings(fromImage)\n                    applyRenderingSettings(fromImage, rdef)\n                    fromid = fromImage.getId()\n\n        # If we have both, apply settings...\n        try:\n            fromid = long(fromid)\n            toids = [long(x) for x in toids]\n        except TypeError:\n            fromid = None\n        except ValueError:\n            fromid = None\n        if fromid is not None and len(toids) > 0:\n            fromimg = conn.getObject(\"Image\", fromid)\n            userid = fromimg.getOwner().getId()\n            json_data = conn.applySettingsToSet(fromid, to_type, toids)\n            if json_data and True in json_data:\n                for iid in json_data[True]:\n                    img = conn.getObject(\"Image\", iid)\n                    img is not None and webgateway_cache.invalidateObject(\n                        server_id, userid, img\n                    )\n\n        # finally - if we temporarily saved rdef to original image, revert\n        # if we're sure that from-image is not in the target set (Dataset etc)\n        if to_type == \"Image\" and fromid not in toids:\n            if originalSettings is not None and fromImage is not None:\n                applyRenderingSettings(fromImage, originalSettings)\n        return json_data\n\n    else:\n        return HttpResponseNotAllowed([\"POST\"])\n\n\n@login_required()\n@jsonp\ndef get_image_rdef_json(request, conn=None, **kwargs):\n    \"\"\"\n    Gets any 'rdef' dict from the request.session and\n    returns it as json\n    \"\"\"\n    rdef = request.session.get(\"rdef\")\n    image = None\n    if rdef is None:\n        fromid = request.session.get(\"fromid\", None)\n        if fromid is not None:\n            # We only have an Image to copy rdefs from\n            image = conn.getObject(\"Image\", fromid)\n        if image is not None:\n            rv = imageMarshal(image, request=request)\n            chs = []\n            maps = []\n            for i, ch in enumerate(rv[\"channels\"]):\n                act = ch[\"active\"] and str(i + 1) or \"-%s\" % (i + 1)\n                color = ch.get(\"lut\") or ch[\"color\"]\n                chs.append(\n                    \"%s|%s:%s$%s\"\n                    % (act, ch[\"window\"][\"start\"], ch[\"window\"][\"end\"], color)\n                )\n                maps.append(\n                    {\n                        \"inverted\": {\"enabled\": ch[\"inverted\"]},\n                        \"quantization\": {\n                            \"coefficient\": ch[\"coefficient\"],\n                            \"family\": ch[\"family\"],\n                        },\n                    }\n                )\n            rdef = {\n                \"c\": (\",\".join(chs)),\n                \"m\": rv[\"rdefs\"][\"model\"],\n                \"pixel_range\": \"%s:%s\" % (rv[\"pixel_range\"][0], rv[\"pixel_range\"][1]),\n                \"maps\": maps,\n            }\n\n    return {\"rdef\": rdef}\n\n\n@login_required()\ndef full_viewer(request, iid, conn=None, **kwargs):\n    \"\"\"\n    This view is responsible for showing the omero_image template\n    Image rendering options in request are used in the display page. See\n    L{getImgDetailsFromReq}.\n\n    @param request:     http request.\n    @param iid:         Image ID\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    Can be used to specify the html 'template' for\n                        rendering\n    @return:            html page of image and metadata\n    \"\"\"\n\n    server_id = request.session[\"connector\"].server_id\n    server_name = Server.get(server_id).server\n\n    rid = getImgDetailsFromReq(request)\n    server_settings = request.session.get(\"server_settings\", {}).get(\"viewer\", {})\n    interpolate = server_settings.get(\"interpolate_pixels\", True)\n    roiLimit = server_settings.get(\"roi_limit\", 2000)\n\n    try:\n        image = conn.getObject(\"Image\", iid)\n        if image is None:\n            logger.debug(\"(a)Image %s not found...\" % (str(iid)))\n            raise Http404\n\n        opengraph = None\n        twitter = None\n        image_preview = None\n        page_url = None\n\n        if hasattr(settings, \"SHARING_OPENGRAPH\"):\n            opengraph = settings.SHARING_OPENGRAPH.get(server_name)\n            logger.debug(\"Open Graph enabled: %s\", opengraph)\n\n        if hasattr(settings, \"SHARING_TWITTER\"):\n            twitter = settings.SHARING_TWITTER.get(server_name)\n            logger.debug(\"Twitter enabled: %s\", twitter)\n\n        if opengraph or twitter:\n            urlargs = {\"iid\": iid}\n            prefix = kwargs.get(\"thumbprefix\", \"webgateway_render_thumbnail\")\n            image_preview = request.build_absolute_uri(reverse(prefix, kwargs=urlargs))\n            page_url = request.build_absolute_uri(\n                reverse(\"webgateway_full_viewer\", kwargs=urlargs)\n            )\n\n        d = {\n            \"blitzcon\": conn,\n            \"image\": image,\n            \"opts\": rid,\n            \"interpolate\": interpolate,\n            \"build_year\": build_year,\n            \"roiLimit\": roiLimit,\n            \"roiCount\": image.getROICount(),\n            \"viewport_server\": kwargs.get(\n                # remove any trailing slash\n                \"viewport_server\",\n                reverse(\"webgateway\"),\n            ).rstrip(\"/\"),\n            \"opengraph\": opengraph,\n            \"twitter\": twitter,\n            \"image_preview\": image_preview,\n            \"page_url\": page_url,\n            \"object\": \"image:%i\" % int(iid),\n        }\n\n        template = kwargs.get(\"template\", \"webgateway/viewport/omero_image.html\")\n        rsp = render(request, template, d)\n    except omero.SecurityViolation:\n        logger.warn(\"SecurityViolation in Image:%s\", iid)\n        logger.warn(traceback.format_exc())\n        raise Http404\n    return HttpResponse(rsp)\n\n\n@login_required()\ndef download_as(request, iid=None, conn=None, **kwargs):\n    \"\"\"\n    Downloads the image as a single jpeg/png/tiff or as a zip (if more than\n    one image)\n    \"\"\"\n    format = request.GET.get(\"format\", \"png\")\n    if format not in (\"jpeg\", \"png\", \"tif\"):\n        format = \"png\"\n\n    imgIds = []\n    wellIds = []\n    if iid is None:\n        imgIds = request.GET.getlist(\"image\")\n        if len(imgIds) == 0:\n            wellIds = request.GET.getlist(\"well\")\n            if len(wellIds) == 0:\n                return HttpResponseServerError(\n                    \"No images or wells specified in request.\"\n                    \" Use ?image=123 or ?well=123\"\n                )\n    else:\n        imgIds = [iid]\n\n    images = []\n    if imgIds:\n        images = list(conn.getObjects(\"Image\", imgIds))\n    elif wellIds:\n        try:\n            index = int(request.GET.get(\"index\", 0))\n        except ValueError:\n            index = 0\n        for w in conn.getObjects(\"Well\", wellIds):\n            images.append(w.getWellSample(index).image())\n\n    if len(images) == 0:\n        msg = \"Cannot download as %s. Images (ids: %s) not found.\" % (format, imgIds)\n        logger.debug(msg)\n        return HttpResponseServerError(msg)\n\n    if len(images) == 1:\n        jpeg_data = images[0].renderJpeg()\n        if jpeg_data is None:\n            raise Http404\n        rsp = HttpResponse(jpeg_data, mimetype=\"image/jpeg\")\n        rsp[\"Content-Length\"] = len(jpeg_data)\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s.jpg\" % (\n            images[0].getName().replace(\" \", \"_\")\n        )\n    else:\n        temp = tempfile.NamedTemporaryFile(suffix=\".download_as\")\n\n        def makeImageName(originalName, extension, folder_name):\n            name = os.path.basename(originalName)\n            imgName = \"%s.%s\" % (name, extension)\n            imgName = os.path.join(folder_name, imgName)\n            # check we don't overwrite existing file\n            i = 1\n            name = imgName[: -(len(extension) + 1)]\n            while os.path.exists(imgName):\n                imgName = \"%s_(%d).%s\" % (name, i, extension)\n                i += 1\n            return imgName\n\n        try:\n            temp_zip_dir = tempfile.mkdtemp()\n            logger.debug(\"download_as dir: %s\" % temp_zip_dir)\n            try:\n                for img in images:\n                    z = t = None\n                    try:\n                        pilImg = img.renderImage(z, t)\n                        imgPathName = makeImageName(img.getName(), format, temp_zip_dir)\n                        pilImg.save(imgPathName)\n                    finally:\n                        # Close RenderingEngine\n                        img._re.close()\n                # create zip\n                zip_file = zipfile.ZipFile(temp, \"w\", zipfile.ZIP_DEFLATED)\n                try:\n                    a_files = os.path.join(temp_zip_dir, \"*\")\n                    for name in glob.glob(a_files):\n                        zip_file.write(name, os.path.basename(name))\n                finally:\n                    zip_file.close()\n            finally:\n                shutil.rmtree(temp_zip_dir, ignore_errors=True)\n\n            zipName = request.GET.get(\"zipname\", \"Download_as_%s\" % format)\n            zipName = zipName.replace(\" \", \"_\")\n            if not zipName.endswith(\".zip\"):\n                zipName = \"%s.zip\" % zipName\n\n            # return the zip or single file\n            rsp = StreamingHttpResponse(FileWrapper(temp))\n            rsp[\"Content-Length\"] = temp.tell()\n            rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % zipName\n            temp.seek(0)\n\n        except Exception:\n            temp.close()\n            stack = traceback.format_exc()\n            logger.error(stack)\n            return HttpResponseServerError(\"Cannot download file (id:%s)\" % iid)\n\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\ndef archived_files(request, iid=None, conn=None, **kwargs):\n    \"\"\"\n    Downloads the archived file(s) as a single file or as a zip (if more than\n    one file)\n    \"\"\"\n\n    imgIds = []\n    wellIds = []\n    imgIds = request.GET.getlist(\"image\")\n    wellIds = request.GET.getlist(\"well\")\n    if iid is None:\n        if len(imgIds) == 0 and len(wellIds) == 0:\n            return HttpResponseServerError(\n                \"No images or wells specified in request.\"\n                \" Use ?image=123 or ?well=123\"\n            )\n    else:\n        imgIds = [iid]\n\n    images = list()\n    wells = list()\n    if imgIds:\n        images = list(conn.getObjects(\"Image\", imgIds))\n    elif wellIds:\n        try:\n            index = int(request.GET.get(\"index\", 0))\n        except ValueError:\n            index = 0\n        wells = conn.getObjects(\"Well\", wellIds)\n        for w in wells:\n            images.append(w.getWellSample(index).image())\n    if len(images) == 0:\n        message = (\n            \"Cannot download archived file because Images not \"\n            \"found (ids: %s)\" % (imgIds)\n        )\n        logger.debug(message)\n        return HttpResponseServerError(message)\n\n    # Test permissions on images and weels\n    for ob in wells:\n        if hasattr(ob, \"canDownload\"):\n            if not ob.canDownload():\n                return HttpResponseNotFound()\n\n    for ob in images:\n        well = None\n        try:\n            well = ob.getParent().getParent()\n        except Exception:\n            if hasattr(ob, \"canDownload\"):\n                if not ob.canDownload():\n                    return HttpResponseNotFound()\n        else:\n            if well and isinstance(well, omero.gateway.WellWrapper):\n                if hasattr(well, \"canDownload\"):\n                    if not well.canDownload():\n                        return HttpResponseNotFound()\n\n    # make list of all files, removing duplicates\n    fileMap = {}\n    for image in images:\n        for f in image.getImportedImageFiles():\n            fileMap[f.getId()] = f\n    files = list(fileMap.values())\n\n    if len(files) == 0:\n        message = (\n            \"Tried downloading archived files from image with no\" \" files archived.\"\n        )\n        logger.debug(message)\n        return HttpResponseServerError(message)\n\n    if len(files) == 1:\n        orig_file = files[0]\n        rsp = ConnCleaningHttpResponse(\n            orig_file.getFileInChunks(buf=settings.CHUNK_SIZE)\n        )\n        rsp.conn = conn\n        rsp[\"Content-Length\"] = orig_file.getSize()\n        # ',' in name causes duplicate headers\n        fname = orig_file.getName().replace(\" \", \"_\").replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (fname)\n    else:\n        total_size = sum(f.size for f in files)\n        if total_size > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n            message = (\n                \"Total size of files %d is larger than %d. \"\n                \"Try requesting fewer files.\"\n                % (total_size, settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE)\n            )\n            logger.warn(message)\n            return HttpResponseForbidden(message)\n\n        temp = tempfile.NamedTemporaryFile(suffix=\".archive\")\n        zipName = request.GET.get(\"zipname\", image.getName())\n\n        try:\n            zipName = zip_archived_files(images, temp, zipName, buf=settings.CHUNK_SIZE)\n\n            # return the zip or single file\n            archivedFile_data = FileWrapper(temp)\n            rsp = ConnCleaningHttpResponse(archivedFile_data)\n            rsp.conn = conn\n            rsp[\"Content-Length\"] = temp.tell()\n            rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % zipName\n            temp.seek(0)\n        except Exception:\n            temp.close()\n            message = \"Cannot download file (id:%s)\" % (iid)\n            logger.error(message, exc_info=True)\n            return HttpResponseServerError(message)\n\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    return rsp\n\n\n@login_required()\n@jsonp\ndef original_file_paths(request, iid, conn=None, **kwargs):\n    \"\"\"\n    Get a list of path/name strings for original files associated with the\n    image\n    \"\"\"\n\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        raise Http404\n    paths = image.getImportedImageFilePaths()\n    return {\"repo\": paths[\"server_paths\"], \"client\": paths[\"client_paths\"]}\n\n\n@login_required()\n@jsonp\ndef get_shape_json(request, roiId, shapeId, conn=None, **kwargs):\n    roiId = int(roiId)\n    shapeId = int(shapeId)\n    shape = conn.getQueryService().findByQuery(\n        \"select shape from Roi as roi \"\n        \"join roi.shapes as shape \"\n        \"where roi.id = %d and shape.id = %d\" % (roiId, shapeId),\n        None,\n    )\n    logger.debug(\"Shape: %r\" % shape)\n    if shape is None:\n        logger.debug(\"No such shape: %r\" % shapeId)\n        raise Http404\n    return JsonResponse(shapeMarshal(shape))\n\n\n@login_required()\n@jsonp\ndef get_rois_json(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Returns json data of the ROIs in the specified image.\n    \"\"\"\n    rois = []\n    roiService = conn.getRoiService()\n    # rois = webfigure_utils.getRoiShapes(roiService, long(imageId))  # gets a\n    # whole json list of ROIs\n    result = roiService.findByImage(long(imageId), None, conn.SERVICE_OPTS)\n\n    for r in result.rois:\n        roi = {}\n        roi[\"id\"] = r.getId().getValue()\n        # go through all the shapes of the ROI\n        shapes = []\n        for s in r.copyShapes():\n            if s is None:  # seems possible in some situations\n                continue\n            shapes.append(shapeMarshal(s))\n        # sort shapes by Z, then T.\n        shapes.sort(key=lambda x: \"%03d%03d\" % (x.get(\"theZ\", -1), x.get(\"theT\", -1)))\n        roi[\"shapes\"] = shapes\n        rois.append(roi)\n\n    # sort by ID - same as in measurement tool.\n    rois.sort(key=lambda x: x[\"id\"])\n\n    return rois\n\n\n@login_required()\ndef histogram_json(request, iid, theC, conn=None, **kwargs):\n    \"\"\"\n    Returns a histogram for a single channel as a list of\n    256 values as json\n    \"\"\"\n    image = conn.getObject(\"Image\", iid)\n    if image is None:\n        raise Http404\n    maxW, maxH = conn.getMaxPlaneSize()\n    sizeX = image.getSizeX()\n    sizeY = image.getSizeY()\n    if (sizeX * sizeY) > (maxW * maxH):\n        msg = \"Histogram not supported for 'big' images (over %s * %s pixels)\" % (\n            maxW,\n            maxH,\n        )\n        return JsonResponse({\"error\": msg})\n\n    theZ = int(request.GET.get(\"theZ\", 0))\n    theT = int(request.GET.get(\"theT\", 0))\n    theC = int(theC)\n    binCount = int(request.GET.get(\"bins\", 256))\n\n    # TODO: handle projection when supported by OMERO\n    data = image.getHistogram([theC], binCount, theZ=theZ, theT=theT)\n    histogram = data[theC]\n\n    return JsonResponse({\"data\": histogram})\n\n\n@login_required(isAdmin=True)\n@jsonp\ndef su(request, user, conn=None, **kwargs):\n    \"\"\"\n    If current user is admin, switch the session to a new connection owned by\n    'user' (puts the new session ID in the request.session)\n    Return False if not possible\n\n    @param request:     http request.\n    @param user:        Username of new connection owner\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    Can be used to specify the html 'template' for\n                        rendering\n    @return:            Boolean\n    \"\"\"\n    if request.method == \"POST\":\n        conn.setGroupNameForSession(\"system\")\n        connector = request.session[\"connector\"]\n        connector = Connector(connector.server_id, connector.is_secure)\n        session = conn.getSessionService().getSession(conn._sessionUuid)\n        ttl = session.getTimeToIdle().val\n        connector.omero_session_key = conn.suConn(user, ttl=ttl)._sessionUuid\n        request.session[\"connector\"] = connector\n        conn.revertGroupForSession()\n        conn.close()\n        return True\n    else:\n        context = {\n            \"url\": reverse(\"webgateway_su\", args=[user]),\n            \"submit\": \"Do you want to su to %s\" % user,\n        }\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\ndef _annotations(request, objtype, objid, conn=None, **kwargs):\n    warnings.warn(\"Deprecated. Use _bulk_file_annotations()\", DeprecationWarning)\n    return _bulk_file_annotations(request, objtype, objid, conn, **kwargs)\n\n\ndef _bulk_file_annotations(request, objtype, objid, conn=None, **kwargs):\n    \"\"\"\n    Retrieve Bulk FileAnnotations for object specified by object type and\n    identifier optionally traversing object model graph.\n    Returns dictionary containing annotations in NSBULKANNOTATIONS namespace\n    if successful, otherwise returns error information.\n    If the graph has multiple parents, we return annotations from all parents.\n\n    Example:  /annotations/Plate/1/\n              retrieves annotations for plate with identifier 1\n    Example:  /annotations/Plate.wells/1/\n              retrieves annotations for plate that contains well with\n              identifier 1\n    Example:  /annotations/Screen.plateLinks.child.wells/22/\n              retrieves annotations for screen that contains plate with\n              well with identifier 22\n\n    @param request:     http request.\n    @param objtype:     Type of target object, or type of target object\n                        followed by a slash-separated list of properties to\n                        resolve\n    @param objid:       Identifier of target object, or identifier of object\n                        reached by resolving given properties\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'error' with an error message or\n                        with key 'data' containing an array of dictionaries\n                        with keys 'id' and 'file' of the retrieved annotations\n    \"\"\"\n    q = conn.getQueryService()\n    # If more than one objtype is specified, use all in query to\n    # traverse object model graph\n    # Example: /annotations/Plate/wells/1/\n    #          retrieves annotations from Plate that contains Well 1\n    objtype = objtype.split(\".\")\n\n    params = omero.sys.ParametersI()\n    params.addId(objid)\n    params.addString(\"ns\", NSBULKANNOTATIONS)\n    params.addString(\"mt\", \"OMERO.tables\")\n\n    query = \"select obj0 from %s obj0\\n\" % objtype[0]\n    for i, t in enumerate(objtype[1:]):\n        query += \"join fetch obj%d.%s obj%d\\n\" % (i, t, i + 1)\n    query += \"\"\"\n        left outer join fetch obj0.annotationLinks links\n        left outer join fetch links.child as f\n        left outer join fetch links.parent\n        left outer join fetch f.file\n        join fetch links.details.owner\n        join fetch links.details.creationEvent\n        where obj%d.id=:id and\n        (f.ns=:ns or f.file.mimetype=:mt)\"\"\" % (\n        len(objtype) - 1\n    )\n\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    try:\n        objs = q.findAllByQuery(query, params, ctx)\n    except omero.QueryException:\n        return dict(error=\"%s cannot be queried\" % objtype, query=query)\n\n    data = []\n    # Process all annotations from all objects...\n    links = [link for obj in objs for link in obj.copyAnnotationLinks()]\n    for link in links:\n        annotation = link.child\n        if not isinstance(annotation, omero.model.FileAnnotation):\n            continue\n        owner = annotation.details.owner\n        ownerName = \"%s %s\" % (unwrap(owner.firstName), unwrap(owner.lastName))\n        addedBy = link.details.owner\n        addedByName = \"%s %s\" % (unwrap(addedBy.firstName), unwrap(addedBy.lastName))\n        data.append(\n            dict(\n                id=annotation.id.val,\n                file=annotation.file.id.val,\n                parentType=objtype[0],\n                parentId=link.parent.id.val,\n                owner=ownerName,\n                addedBy=addedByName,\n                addedOn=unwrap(link.details.creationEvent._time),\n            )\n        )\n    return dict(data=data)\n\n\nannotations = login_required()(jsonp(_bulk_file_annotations))\n\n\ndef _table_query(request, fileid, conn=None, query=None, lazy=False, **kwargs):\n    \"\"\"\n    Query a table specified by fileid\n    Returns a dictionary with query result if successful, error information\n    otherwise\n\n    @param request:     http request; querystring must contain key 'query'\n                        with query to be executed, or '*' to retrieve all rows.\n                        If query is in the format word-number, e.g. \"Well-7\",\n                        if will be run as (word==number), e.g. \"(Well==7)\".\n                        This is supported to allow more readable query strings.\n    @param fileid:      Numeric identifier of file containing the table\n    @param query:       The table query. If None, use request.GET.get('query')\n                        E.g. '*' to return all rows.\n                        If in the form 'colname-1', query will be (colname==1)\n    @param lazy:        If True, instead of returning a 'rows' list,\n                        'lazy_rows' will be a generator.\n                        Each gen.next() will return a list of row data\n                        AND 'table' returned MUST be closed.\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    offset, limit\n    @return:            A dictionary with key 'error' with an error message\n                        or with key 'data' containing a dictionary with keys\n                        'columns' (an array of column names) and 'rows'\n                        (an array of rows, each an array of values)\n    \"\"\"\n    if query is None:\n        query = request.GET.get(\"query\")\n    if not query:\n        return dict(error=\"Must specify query parameter, use * to retrieve all\")\n    col_names = request.GET.getlist(\"col_names\")\n\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    r = conn.getSharedResources()\n    t = r.openTable(omero.model.OriginalFileI(fileid), ctx)\n    if not t:\n        return dict(error=\"Table %s not found\" % fileid)\n\n    try:\n        cols = t.getHeaders()\n        col_indices = range(len(cols))\n        if col_names:\n            enumerated_columns = (\n                [(i, j) for (i, j) in enumerate(cols) if j.name in col_names]\n                if col_names\n                else [(i, j) for (i, j) in enumerate(cols)]\n            )\n            cols = []\n            col_indices = []\n            for col_name in col_names:\n                for (i, j) in enumerated_columns:\n                    if col_name == j.name:\n                        col_indices.append(i)\n                        cols.append(j)\n                        break\n\n        rows = t.getNumberOfRows()\n\n        offset = kwargs.get(\"offset\", 0)\n        limit = kwargs.get(\"limit\", None)\n        if not offset:\n            offset = int(request.GET.get(\"offset\", 0))\n        if not limit:\n            limit = (\n                int(request.GET.get(\"limit\"))\n                if request.GET.get(\"limit\") is not None\n                else rows\n            )\n        range_start = offset\n        range_size = limit\n        range_end = min(rows, range_start + range_size)\n\n        if query == \"*\":\n            hits = range(range_start, range_end)\n            totalCount = rows\n        else:\n            match = re.match(r\"^(\\w+)-(\\d+)\", query)\n            if match:\n                query = \"(%s==%s)\" % (match.group(1), match.group(2))\n            try:\n                logger.info(query)\n                hits = t.getWhereList(query, None, 0, rows, 1)\n                totalCount = len(hits)\n                # paginate the hits\n                hits = hits[range_start:range_end]\n            except Exception:\n                return dict(error=\"Error executing query: %s\" % query)\n\n        def row_generator(table, h):\n            # hits are all consecutive rows - can load them in batches\n            idx = 0\n            batch = 1000\n            while idx < len(h):\n                batch = min(batch, len(h) - idx)\n                res = table.slice(col_indices, h[idx : idx + batch])\n                idx += batch\n                # yield a list of rows\n                yield [\n                    [col.values[row] for col in res.columns]\n                    for row in range(0, len(res.rowNumbers))\n                ]\n\n        row_gen = row_generator(t, hits)\n\n        rsp_data = {\n            \"data\": {\n                \"column_types\": [col.__class__.__name__ for col in cols],\n                \"columns\": [col.name for col in cols],\n            },\n            \"meta\": {\n                \"rowCount\": rows,\n                \"totalCount\": totalCount,\n                \"limit\": limit,\n                \"offset\": offset,\n            },\n        }\n\n        if not lazy:\n            row_data = []\n            # Use the generator to add all rows in batches\n            for rows in list(row_gen):\n                row_data.extend(rows)\n            rsp_data[\"data\"][\"rows\"] = row_data\n        else:\n            rsp_data[\"data\"][\"lazy_rows\"] = row_gen\n            rsp_data[\"table\"] = t\n\n        return rsp_data\n    finally:\n        if not lazy:\n            t.close()\n\n\ntable_query = login_required()(jsonp(_table_query))\n\n\ndef _table_metadata(request, fileid, conn=None, query=None, lazy=False, **kwargs):\n    ctx = conn.createServiceOptsDict()\n    ctx.setOmeroGroup(\"-1\")\n\n    r = conn.getSharedResources()\n    t = r.openTable(omero.model.OriginalFileI(fileid), ctx)\n    if not t:\n        return dict(error=\"Table %s not found\" % fileid)\n\n    try:\n        cols = t.getHeaders()\n        rows = t.getNumberOfRows()\n\n        rsp_data = {\n            \"columns\": [\n                {\n                    \"name\": col.name,\n                    \"description\": col.description,\n                    \"type\": col.__class__.__name__,\n                }\n                for col in cols\n            ],\n            \"totalCount\": rows,\n        }\n        return rsp_data\n    finally:\n        if not lazy:\n            t.close()\n\n\ntable_metadata = login_required()(jsonp(_table_metadata))\n\n\n@login_required()\n@jsonp\ndef object_table_query(request, objtype, objid, conn=None, **kwargs):\n    \"\"\"\n    Query bulk annotations table attached to an object specified by\n    object type and identifier, optionally traversing object model graph.\n    Returns a dictionary with query result if successful, error information\n    otherwise\n\n    Example:  /table/Plate/1/query/?query=*\n              queries bulk annotations table for plate with identifier 1\n    Example:  /table/Plate.wells/1/query/?query=*\n              queries bulk annotations table for plate that contains well with\n              identifier 1\n    Example:  /table/Screen.plateLinks.child.wells/22/query/?query=Well-22\n              queries bulk annotations table for screen that contains plate\n              with well with identifier 22\n\n    @param request:     http request.\n    @param objtype:     Type of target object, or type of target object\n                        followed by a slash-separated list of properties to\n                        resolve\n    @param objid:       Identifier of target object, or identifier of object\n                        reached by resolving given properties\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'error' with an error message\n                        or with key 'data' containing a dictionary with keys\n                        'columns' (an array of column names) and 'rows'\n                        (an array of rows, each an array of values)\n    \"\"\"\n    a = _bulk_file_annotations(request, objtype, objid, conn, **kwargs)\n    if \"error\" in a:\n        return a\n\n    if len(a[\"data\"]) < 1:\n        return dict(error=\"Could not retrieve bulk annotations table\")\n\n    # multiple bulk annotations files could be attached, use the most recent\n    # one (= the one with the highest identifier)\n    fileId = 0\n    ann = None\n    annList = sorted(a[\"data\"], key=lambda x: x[\"file\"], reverse=True)\n    tableData = None\n    for annotation in annList:\n        tableData = _table_query(request, annotation[\"file\"], conn, **kwargs)\n        if \"error\" not in tableData:\n            ann = annotation\n            fileId = annotation[\"file\"]\n            break\n    if ann is None:\n        return dict(\n            error=tableData.get(\n                \"error\", \"Could not retrieve matching bulk annotation table\"\n            )\n        )\n    tableData[\"id\"] = fileId\n    tableData[\"annId\"] = ann[\"id\"]\n    tableData[\"owner\"] = ann[\"owner\"]\n    tableData[\"addedBy\"] = ann[\"addedBy\"]\n    tableData[\"parentType\"] = ann[\"parentType\"]\n    tableData[\"parentId\"] = ann[\"parentId\"]\n    tableData[\"addedOn\"] = ann[\"addedOn\"]\n    return tableData\n\n\nclass LoginView(View):\n    \"\"\"Webgateway Login - Subclassed by WebclientLoginView.\"\"\"\n\n    form_class = LoginForm\n    useragent = \"OMERO.webapi\"\n\n    @method_decorator(sensitive_post_parameters(\"password\", \"csrfmiddlewaretoken\"))\n    def dispatch(self, *args, **kwargs):\n        \"\"\"Wrap other methods to add decorators.\"\"\"\n        return super(LoginView, self).dispatch(*args, **kwargs)\n\n    def get(self, request, api_version=None):\n        \"\"\"Simply return a message to say GET not supported.\"\"\"\n        return JsonResponse(\n            {\"message\": (\"POST only with username, password, \" \"server and csrftoken\")},\n            status=405,\n        )\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"Return a response for successful login.\"\"\"\n        c = conn.getEventContext()\n        ctx = {}\n        for a in [\n            \"sessionId\",\n            \"sessionUuid\",\n            \"userId\",\n            \"userName\",\n            \"groupId\",\n            \"groupName\",\n            \"isAdmin\",\n            \"eventId\",\n            \"eventType\",\n            \"memberOfGroups\",\n            \"leaderOfGroups\",\n        ]:\n            if hasattr(c, a):\n                ctx[a] = getattr(c, a)\n        return JsonResponse({\"success\": True, \"eventContext\": ctx})\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Return a response for failed login.\n\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if error is None and form is not None:\n            # If no error from server, maybe form wasn't valid\n            formErrors = []\n            for field in form:\n                for e in field.errors:\n                    formErrors.append(\"%s: %s\" % (field.label, e))\n            error = \" \".join(formErrors)\n        elif error is None:\n            # Just in case no error or invalid form is given\n            error = \"Login failed. Reason unknown.\"\n        return JsonResponse({\"message\": error}, status=403)\n\n    def post(self, request, api_version=None):\n        \"\"\"\n        Here we handle the main login logic, creating a connection to OMERO.\n\n        and store that on the request.session OR handling login failures\n        \"\"\"\n        error = None\n        form = self.form_class(request.POST.copy())\n        if form.is_valid():\n            username = form.cleaned_data[\"username\"]\n            password = form.cleaned_data[\"password\"]\n            server_id = form.cleaned_data[\"server\"]\n            is_secure = settings.SECURE\n\n            connector = Connector(server_id, is_secure)\n\n            # TODO: version check should be done on the low level, see #5983\n            compatible = True\n            if settings.CHECK_VERSION:\n                compatible = connector.check_version(self.useragent)\n            if (\n                server_id is not None\n                and username is not None\n                and password is not None\n                and compatible\n            ):\n                conn = connector.create_connection(\n                    self.useragent, username, password, userip=get_client_ip(request)\n                )\n                if conn is not None:\n                    try:\n                        request.session[\"connector\"] = connector\n                        # UpgradeCheck URL should be loaded from the server or\n                        # loaded omero.web.upgrades.url allows to customize web\n                        # only\n                        try:\n                            upgrades_url = settings.UPGRADES_URL\n                        except Exception:\n                            upgrades_url = conn.getUpgradesUrl()\n                        upgradeCheck(url=upgrades_url)\n                        return self.handle_logged_in(request, conn, connector)\n                    finally:\n                        conn.close(hard=False)\n            # Once here, we are not logged in...\n            # Need correct error message\n            if not connector.is_server_up(self.useragent):\n                error = \"Server is not responding,\" \" please contact administrator.\"\n            elif not settings.CHECK_VERSION:\n                error = (\n                    \"Connection not available, please check your\"\n                    \" credentials and version compatibility.\"\n                )\n            else:\n                if not compatible:\n                    error = (\n                        \"Client version does not match server,\"\n                        \" please contact administrator.\"\n                    )\n                else:\n                    error = settings.LOGIN_INCORRECT_CREDENTIALS_TEXT\n        return self.handle_not_logged_in(request, error, form)\n\n\n@login_required()\n@jsonp\ndef get_image_rdefs_json(request, img_id=None, conn=None, **kwargs):\n    \"\"\"\n    Retrieves all rendering definitions for a given image (id).\n\n    Example:  /get_image_rdefs_json/1\n              Returns all rdefs for image with id 1\n\n    @param request:     http request.\n    @param img_id:      the id of the image in question\n    @param conn:        L{omero.gateway.BlitzGateway}\n    @param **kwargs:    unused\n    @return:            A dictionary with key 'rdefs' in the success case,\n                        one with key 'error' if something went wrong\n    \"\"\"\n    try:\n        img = conn.getObject(\"Image\", img_id)\n\n        if img is None:\n            return {\"error\": \"No image with id \" + str(img_id)}\n\n        return {\"rdefs\": img.getAllRenderingDefs()}\n    except Exception:\n        logger.debug(traceback.format_exc())\n        return {\"error\": \"Failed to retrieve rdefs\"}\n"], "filenames": ["CHANGELOG.md", "omeroweb/decorators.py", "omeroweb/settings.py", "omeroweb/webclient/decorators.py", "omeroweb/webclient/forms.py", "omeroweb/webclient/static/webclient/javascript/ome.tree.js", "omeroweb/webclient/templates/webclient/base/base_container.html", "omeroweb/webclient/templates/webclient/base/includes/toolbar_forms.html", "omeroweb/webclient/templates/webclient/data/containers.html", "omeroweb/webclient/templates/webclient/public/public.html", "omeroweb/webclient/views.py", "omeroweb/webgateway/templates/webgateway/core_html.html", "omeroweb/webgateway/views.py"], "buggy_code_start_loc": [23, 585, 510, 38, 40, 1154, 169, 6, 211, 492, 37, 27, 2963], "buggy_code_end_loc": [23, 586, 1022, 138, 145, 1156, 170, 107, 294, 493, 2915, 27, 2967], "fixing_code_start_loc": [24, 585, 511, 37, 39, 1154, 169, 6, 211, 492, 38, 28, 2963], "fixing_code_end_loc": [28, 587, 1053, 137, 126, 1156, 170, 58, 294, 501, 2889, 29, 2967], "type": "CWE-200", "message": "OMERO.web is open source Django-based software for managing microscopy imaging. OMERO.web before version 5.9.0 loads various information about the current user such as their id, name and the groups they are in, and these are available on the main webclient pages. This represents an information exposure vulnerability. Some additional information being loaded is not used by the webclient and is being removed in this release. This is fixed in version 5.9.0.", "other": {"cve": {"id": "CVE-2021-21376", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-23T16:15:14.173", "lastModified": "2021-03-27T01:59:45.407", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OMERO.web is open source Django-based software for managing microscopy imaging. OMERO.web before version 5.9.0 loads various information about the current user such as their id, name and the groups they are in, and these are available on the main webclient pages. This represents an information exposure vulnerability. Some additional information being loaded is not used by the webclient and is being removed in this release. This is fixed in version 5.9.0."}, {"lang": "es", "value": "OMERO.web es un software de c\u00f3digo abierto basado en Django para administrar im\u00e1genes microsc\u00f3picas.&#xa0;OMERO.web versiones anteriores a 5.9.0 carga diversa informaci\u00f3n sobre el usuario actual, como su identificaci\u00f3n, nombre y los grupos en los que se encuentra, y estos est\u00e1n disponibles en las p\u00e1ginas principales del cliente web.&#xa0;Esto representa una vulnerabilidad de exposici\u00f3n de la informaci\u00f3n.&#xa0;Parte de la informaci\u00f3n adicional que se est\u00e1 cargando no es usada por el cliente web y se eliminar\u00e1 en esta versi\u00f3n.&#xa0;Esto es corregido en versi\u00f3n 5.9.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmicroscopy:omero.web:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.9.0", "matchCriteriaId": "FE6BE44A-DB7D-4846-BEBE-9C96D2294B94"}]}]}], "references": [{"url": "https://github.com/ome/omero-web/blob/master/CHANGELOG.md#590-march-2021", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/ome/omero-web/commit/952f8e5d28532fbb14fb665982211329d137908c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ome/omero-web/security/advisories/GHSA-gfp2-w5jm-955q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://pypi.org/project/omero-web/", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.openmicroscopy.org/security/advisories/2021-SV1/", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ome/omero-web/commit/952f8e5d28532fbb14fb665982211329d137908c"}}