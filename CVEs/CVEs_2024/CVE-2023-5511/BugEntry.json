{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Accessory;\nuse App\\Models\\Actionlog;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\CheckoutAcceptance;\nuse App\\Models\\CustomField;\nuse App\\Models\\Depreciation;\nuse App\\Models\\License;\nuse App\\Models\\Setting;\nuse App\\Notifications\\CheckoutAssetNotification;\nuse Carbon\\Carbon;\nuse Illuminate\\Auth\\Access\\AuthorizationException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\View;\nuse Input;\nuse League\\Csv\\Reader;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse League\\Csv\\EscapeFormula;\n\n\n/**\n * This controller handles all actions related to Reports for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ReportsController extends Controller\n{\n    /**\n     * Checks for correct permissions\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n    * Returns a view that displays the accessories report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getAccessoryReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/accessories');\n    }\n\n    /**\n    * Exports the accessories to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @see ManufacturersController::getDatatable() method that generates the JSON response\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportAccessoryReport()\n    {\n        $this->authorize('reports.view');\n        $accessories = Accessory::orderBy('created_at', 'DESC')->get();\n\n        $rows = [];\n        $header = [\n            trans('admin/accessories/table.title'),\n            trans('admin/accessories/general.accessory_category'),\n            trans('admin/accessories/general.total'),\n            trans('admin/accessories/general.remaining'),\n        ];\n        $header = array_map('trim', $header);\n        $rows[] = implode(', ', $header);\n\n        // Row per accessory\n        foreach ($accessories as $accessory) {\n            $row = [];\n            $row[] = e($accessory->accessory_name);\n            $row[] = e($accessory->accessory_category);\n            $row[] = e($accessory->total);\n            $row[] = e($accessory->remaining);\n\n            $rows[] = implode(',', $row);\n        }\n\n        $csv = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n    * Show depreciation report for assets.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getDeprecationReport()\n    {\n        $this->authorize('reports.view');\n        $depreciations = Depreciation::get();\n        return view('reports/depreciation')->with('depreciations',$depreciations);\n    }\n\n    /**\n    * Exports the depreciations to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportDeprecationReport()\n    {\n        $this->authorize('reports.view');\n        // Grab all the assets\n        $assets = Asset::with('model', 'assignedTo', 'assetstatus', 'defaultLoc', 'assetlog')\n                       ->orderBy('created_at', 'DESC')->get();\n\n        $csv = \\League\\Csv\\Writer::createFromFileObject(new \\SplTempFileObject());\n        $csv->setOutputBOM(Reader::BOM_UTF16_BE);\n\n        $rows = [];\n\n        // Create the header row\n        $header = [\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/hardware/table.title'),\n            trans('admin/hardware/table.serial'),\n            trans('admin/hardware/table.checkoutto'),\n            trans('admin/hardware/table.location'),\n            trans('admin/hardware/table.purchase_date'),\n            trans('admin/hardware/table.purchase_cost'),\n            trans('admin/hardware/table.book_value'),\n            trans('admin/hardware/table.diff'),\n        ];\n\n        //we insert the CSV header\n        $csv->insertOne($header);\n\n        // Create a row per asset\n        foreach ($assets as $asset) {\n            $row = [];\n            $row[] = e($asset->asset_tag);\n            $row[] = e($asset->name);\n            $row[] = e($asset->serial);\n\n            if ($target = $asset->assignedTo) {\n                $row[] = e($target->present()->name());\n            } else {\n                $row[] = ''; // Empty string if unassigned\n            }\n\n            if (($asset->assigned_to > 0) && ($location = $asset->location)) {\n                if ($location->city) {\n                    $row[] = e($location->city).', '.e($location->state);\n                } elseif ($location->name) {\n                    $row[] = e($location->name);\n                } else {\n                    $row[] = '';\n                }\n            } else {\n                $row[] = '';  // Empty string if location is not set\n            }\n\n            if ($asset->location) {\n                $currency = e($asset->location->currency);\n            } else {\n                $currency = e(Setting::getSettings()->default_currency);\n            }\n\n            $row[] = $asset->purchase_date;\n            $row[] = $currency.Helper::formatCurrencyOutput($asset->purchase_cost);\n            $row[] = $currency.Helper::formatCurrencyOutput($asset->getDepreciatedValue());\n            $row[] = $currency.Helper::formatCurrencyOutput(($asset->purchase_cost - $asset->getDepreciatedValue()));\n            $csv->insertOne($row);\n        }\n\n        $csv->output('depreciation-report-'.date('Y-m-d').'.csv');\n        die;\n    }\n\n\n    /**\n     * Displays audit report.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function audit()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/audit');\n    }\n\n\n    /**\n    * Displays activity report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getActivityReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/activity');\n    }\n\n    /**\n     * Exports the activity report to CSV\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.7]\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function postActivityReport(Request $request)\n    {\n        ini_set('max_execution_time', 12000);\n        $this->authorize('reports.view');\n\n        \\Debugbar::disable();\n        $response = new StreamedResponse(function () {\n            \\Log::debug('Starting streamed response');\n\n            // Open output stream\n            $handle = fopen('php://output', 'w');\n            stream_set_timeout($handle, 2000);\n\n            $header = [\n                trans('general.date'),\n                trans('general.admin'),\n                trans('general.action'),\n                trans('general.type'),\n                trans('general.item'),\n                'To',\n                trans('general.notes'),\n                'Changed',\n\n            ];\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Starting headers: '.$executionTime);\n            fputcsv($handle, $header);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Added headers: '.$executionTime);\n\n            $actionlogs = Actionlog::with('item', 'user', 'target', 'location')\n                ->orderBy('created_at', 'DESC')\n                ->chunk(20, function ($actionlogs) use ($handle) {\n                    $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                \\Log::debug('Walking results: '.$executionTime);\n                $count = 0;\n\n                foreach ($actionlogs as $actionlog) {\n                    $count++;\n                    $target_name = '';\n\n                    if ($actionlog->target) {\n                            if ($actionlog->targetType() == 'user') {\n                                $target_name = $actionlog->target->getFullNameAttribute();\n                        } else {\n                            $target_name = $actionlog->target->getDisplayNameAttribute();\n                        }\n                    }\n\n                    if($actionlog->item){\n                        $item_name = e($actionlog->item->getDisplayNameAttribute());\n                    } else {\n                        $item_name = '';\n                    }\n\n                    $row = [\n                        $actionlog->created_at,\n                        ($actionlog->admin) ? e($actionlog->admin->getFullNameAttribute()) : '',\n                        $actionlog->present()->actionType(),\n                        e($actionlog->itemType()),\n                        ($actionlog->itemType() == 'user') ? $actionlog->filename : $item_name,\n                        $target_name,\n                        ($actionlog->note) ? e($actionlog->note) : '',\n                        $actionlog->log_meta,\n                    ];\n                    fputcsv($handle, $row);\n                }\n            });\n\n            // Close the output stream\n            fclose($handle);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('-- SCRIPT COMPLETED IN '.$executionTime);\n        }, 200, [\n            'Content-Type' => 'text/csv',\n            'Content-Disposition' => 'attachment; filename=\"activity-report-'.date('Y-m-d-his').'.csv\"',\n        ]);\n\n\n        return $response;\n    }\n\n\n    /**\n     * Displays license report\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     */\n    public function getLicenseReport()\n    {\n        $this->authorize('reports.view');\n        $licenses = License::with('depreciation')->orderBy('created_at', 'DESC')\n                           ->with('company')\n                           ->get();\n\n        return view('reports/licenses', compact('licenses'));\n    }\n\n    /**\n    * Exports the licenses to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportLicenseReport()\n    {\n        $this->authorize('reports.view');\n        $licenses = License::orderBy('created_at', 'DESC')->get();\n\n        $rows = [];\n        $header = [\n            trans('admin/licenses/table.title'),\n            trans('admin/licenses/table.serial'),\n            trans('admin/licenses/form.seats'),\n            trans('admin/licenses/form.remaining_seats'),\n            trans('admin/licenses/form.expiration'),\n            trans('general.purchase_date'),\n            trans('general.depreciation'),\n            trans('general.purchase_cost'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(', ', $header);\n\n        // Row per license\n        foreach ($licenses as $license) {\n            $row = [];\n            $row[] = e($license->name);\n            $row[] = e($license->serial);\n            $row[] = e($license->seats);\n            $row[] = $license->remaincount();\n            $row[] = $license->expiration_date;\n            $row[] = $license->purchase_date;\n            $row[] = ($license->depreciation != '') ? '' : e($license->depreciation->name);\n            $row[] = '\"'.Helper::formatCurrencyOutput($license->purchase_cost).'\"';\n\n            $rows[] = implode(',', $row);\n        }\n\n\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n    * Returns a form that allows the user to generate a custom CSV report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @see ReportsController::postCustomReport() method that generates the CSV\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function getCustomReport()\n    {\n        $this->authorize('reports.view');\n        $customfields = CustomField::get();\n\n        return view('reports/custom')->with('customfields', $customfields);\n    }\n\n    /**\n     * Exports the custom report to CSV\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @see ReportsController::getCustomReport() method that generates form view\n     * @since [v1.0]\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function postCustom(Request $request)\n    {\n        ini_set('max_execution_time', env('REPORT_TIME_LIMIT', 12000)); //12000 seconds = 200 minutes\n        $this->authorize('reports.view');\n\n        \\Debugbar::disable();\n        $customfields = CustomField::get();\n        $response = new StreamedResponse(function () use ($customfields, $request) {\n            \\Log::debug('Starting streamed response');\n            \\Log::debug('CSV escaping is set to: '.config('app.escape_formulas'));\n\n            // Open output stream\n            $handle = fopen('php://output', 'w');\n            stream_set_timeout($handle, 2000);\n            \n            if ($request->filled('use_bom')) {\n                fprintf($handle, chr(0xEF).chr(0xBB).chr(0xBF));\n            }\n\n            $header = [];\n\n            if ($request->filled('id')) {\n                $header[] = trans('general.id');\n            }\n\n            if ($request->filled('company')) {\n                $header[] = trans('general.company');\n            }\n\n            if ($request->filled('asset_name')) {\n                $header[] = trans('admin/hardware/form.name');\n            }\n\n            if ($request->filled('asset_tag')) {\n                $header[] = trans('admin/hardware/table.asset_tag');\n            }\n\n            if ($request->filled('model')) {\n                $header[] = trans('admin/hardware/form.model');\n                $header[] = trans('general.model_no');\n            }\n\n            if ($request->filled('category')) {\n                $header[] = trans('general.category');\n            }\n\n            if ($request->filled('manufacturer')) {\n                $header[] = trans('admin/hardware/form.manufacturer');\n            }\n\n            if ($request->filled('serial')) {\n                $header[] = trans('admin/hardware/table.serial');\n            }\n            if ($request->filled('purchase_date')) {\n                $header[] = trans('admin/hardware/table.purchase_date');\n            }\n\n            if (($request->filled('purchase_cost')) || ($request->filled('depreciation'))) {\n                $header[] = trans('admin/hardware/table.purchase_cost');\n            }\n\n            if ($request->filled('eol')) {\n                $header[] = trans('admin/hardware/table.eol');\n            }\n\n            if ($request->filled('order')) {\n                $header[] = trans('admin/hardware/form.order');\n            }\n\n            if ($request->filled('supplier')) {\n                $header[] = trans('general.supplier');\n            }\n\n            if ($request->filled('location')) {\n                $header[] = trans('admin/hardware/table.location');\n            }\n            if ($request->filled('location_address')) {\n                $header[] = trans('general.address');\n                $header[] = trans('general.address');\n                $header[] = trans('general.city');\n                $header[] = trans('general.state');\n                $header[] = trans('general.country');\n                $header[] = trans('general.zip');\n            }\n\n            if ($request->filled('rtd_location')) {\n                $header[] = trans('admin/hardware/form.default_location');\n            }\n            \n            if ($request->filled('rtd_location_address')) {\n                $header[] = trans('general.address');\n                $header[] = trans('general.address');\n                $header[] = trans('general.city');\n                $header[] = trans('general.state');\n                $header[] = trans('general.country');\n                $header[] = trans('general.zip');\n            }\n\n            if ($request->filled('assigned_to')) {\n                $header[] = trans('admin/hardware/table.checkoutto');\n                $header[] = trans('general.type');\n            }\n\n            if ($request->filled('username')) {\n                $header[] = 'Username';\n            }\n\n            if ($request->filled('employee_num')) {\n                $header[] = 'Employee No.';\n            }\n\n            if ($request->filled('manager')) {\n                $header[] = trans('admin/users/table.manager');\n            }\n\n            if ($request->filled('department')) {\n                $header[] = trans('general.department');\n            }\n\n            if ($request->filled('title')) {\n                $header[] = trans('admin/users/table.title');\n            }\n\n            if ($request->filled('status')) {\n                $header[] = trans('general.status');\n            }\n\n            if ($request->filled('warranty')) {\n                $header[] = trans('admin/hardware/form.warranty');\n                $header[] = trans('admin/hardware/form.warranty_expires');\n            }\n\n            if ($request->filled('depreciation')) {\n                $header[] = trans('admin/hardware/table.book_value');\n                $header[] = trans('admin/hardware/table.diff');\n                $header[] = trans('admin/hardware/form.fully_depreciated');\n            }\n\n            if ($request->filled('checkout_date')) {\n                $header[] = trans('admin/hardware/table.checkout_date');\n            }\n\n            if ($request->filled('checkin_date')) {\n                $header[] = trans('admin/hardware/table.last_checkin_date');\n            }\n\n            if ($request->filled('expected_checkin')) {\n                $header[] = trans('admin/hardware/form.expected_checkin');\n            }\n\n            if ($request->filled('created_at')) {\n                $header[] = trans('general.created_at');\n            }\n\n            if ($request->filled('updated_at')) {\n                $header[] = trans('general.updated_at');\n            }\n\n            if ($request->filled('deleted_at')) {\n                $header[] = trans('general.deleted');\n            }\n\n            if ($request->filled('last_audit_date')) {\n                $header[] = trans('general.last_audit');\n            }\n\n            if ($request->filled('next_audit_date')) {\n                $header[] = trans('general.next_audit_date');\n            }\n\n            if ($request->filled('notes')) {\n                $header[] = trans('general.notes');\n            }\n\n            if ($request->filled('url')) {\n                $header[] = trans('admin/manufacturers/table.url');\n            }\n\n\n            foreach ($customfields as $customfield) {\n                if ($request->input($customfield->db_column_name()) == '1') {\n                    $header[] = $customfield->name;\n                }\n            }\n\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Starting headers: '.$executionTime);\n            fputcsv($handle, $header);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Added headers: '.$executionTime);\n\n            $assets = Asset::select('assets.*')->with(\n                'location', 'assetstatus', 'company', 'defaultLoc', 'assignedTo',\n                'model.category', 'model.manufacturer', 'supplier');\n            \n            if ($request->filled('by_location_id')) {\n                $assets->whereIn('assets.location_id', $request->input('by_location_id'));\n            }\n\n            if ($request->filled('by_rtd_location_id')) {\n                $assets->whereIn('assets.rtd_location_id', $request->input('by_rtd_location_id'));\n            }\n\n            if ($request->filled('by_supplier_id')) {\n                $assets->whereIn('assets.supplier_id', $request->input('by_supplier_id'));\n            }\n\n            if ($request->filled('by_company_id')) {\n                $assets->whereIn('assets.company_id', $request->input('by_company_id'));\n            }\n\n            if ($request->filled('by_model_id')) {\n                $assets->whereIn('assets.model_id', $request->input('by_model_id'));\n            }\n\n            if ($request->filled('by_category_id')) {\n                $assets->InCategory($request->input('by_category_id'));\n            }\n\n            if ($request->filled('by_dept_id')) {\n                $assets->CheckedOutToTargetInDepartment($request->input('by_dept_id'));\n            }\n\n            if ($request->filled('by_manufacturer_id')) {\n                $assets->ByManufacturer($request->input('by_manufacturer_id'));\n            }\n\n            if ($request->filled('by_order_number')) {\n                $assets->where('assets.order_number', $request->input('by_order_number'));\n            }\n\n            if ($request->filled('by_status_id')) {\n                $assets->whereIn('assets.status_id', $request->input('by_status_id'));\n            }\n\n            if (($request->filled('purchase_start')) && ($request->filled('purchase_end'))) {\n                $assets->whereBetween('assets.purchase_date', [$request->input('purchase_start'), $request->input('purchase_end')]);\n            }\n\n            if (($request->filled('created_start')) && ($request->filled('created_end'))) {\n                $created_start = \\Carbon::parse($request->input('created_start'))->startOfDay();\n                $created_end = \\Carbon::parse($request->input('created_end'))->endOfDay();\n                \n                $assets->whereBetween('assets.created_at', [$created_start, $created_end]);\n            }\n            if (($request->filled('checkout_date_start')) && ($request->filled('checkout_date_end'))) {\n                $checkout_start = \\Carbon::parse($request->input('checkout_date_start'))->startOfDay();\n                $checkout_end = \\Carbon::parse($request->input('checkout_date_end'))->endOfDay();\n\n                $assets->whereBetween('assets.last_checkout', [$checkout_start, $checkout_end]);\n            }\n\n            if (($request->filled('checkin_date_start'))) {\n                $assets->whereBetween('last_checkin', [\n                    Carbon::parse($request->input('checkin_date_start'))->startOfDay(),\n                    // use today's date is `checkin_date_end` is not provided\n                    Carbon::parse($request->input('checkin_date_end', now()))->endOfDay(),\n                ]);\n            }\n\n            if (($request->filled('expected_checkin_start')) && ($request->filled('expected_checkin_end'))) {\n                $assets->whereBetween('assets.expected_checkin', [$request->input('expected_checkin_start'), $request->input('expected_checkin_end')]);\n            }\n\n            if (($request->filled('last_audit_start')) && ($request->filled('last_audit_end'))) {\n                $last_audit_start = \\Carbon::parse($request->input('last_audit_start'))->startOfDay();\n                $last_audit_end = \\Carbon::parse($request->input('last_audit_end'))->endOfDay();\n\n                $assets->whereBetween('assets.last_audit_date', [$last_audit_start, $last_audit_end]);\n            }\n\n            if (($request->filled('next_audit_start')) && ($request->filled('next_audit_end'))) {\n                $assets->whereBetween('assets.next_audit_date', [$request->input('next_audit_start'), $request->input('next_audit_end')]);\n            }\n            if ($request->filled('exclude_archived')) {\n                $assets->notArchived();\n            }\n            if ($request->input('deleted_assets') == '1') {\n                $assets->withTrashed();\n            }\n            if ($request->input('deleted_assets') == '0') {\n                $assets->onlyTrashed();\n            }\n\n            \\Log::debug($assets->toSql());\n            $assets->orderBy('assets.id', 'ASC')->chunk(20, function ($assets) use ($handle, $customfields, $request) {\n            \n                $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                \\Log::debug('Walking results: '.$executionTime);\n                $count = 0;\n\n                $formatter = new EscapeFormula(\"`\");\n\n                foreach ($assets as $asset) {\n                    $count++;\n                    $row = [];\n\n                    if ($request->filled('id')) {\n                        $row[] = ($asset->id) ? $asset->id : '';\n                    }\n\n                    if ($request->filled('company')) {\n                        $row[] = ($asset->company) ? $asset->company->name : '';\n                    }\n\n                    if ($request->filled('asset_name')) {\n                        $row[] = ($asset->name) ? $asset->name : '';\n                    }\n\n                    if ($request->filled('asset_tag')) {\n                        $row[] = ($asset->asset_tag) ? $asset->asset_tag : '';\n                    }\n\n                    if ($request->filled('model')) {\n                        $row[] = ($asset->model) ? $asset->model->name : '';\n                        $row[] = ($asset->model) ? $asset->model->model_number : '';\n                    }\n\n                    if ($request->filled('category')) {\n                        $row[] = (($asset->model) && ($asset->model->category)) ? $asset->model->category->name : '';\n                    }\n\n                    if ($request->filled('manufacturer')) {\n                        $row[] = ($asset->model && $asset->model->manufacturer) ? $asset->model->manufacturer->name : '';\n                    }\n\n                    if ($request->filled('serial')) {\n                        $row[] = ($asset->serial) ? $asset->serial : '';\n                    }\n\n                    if ($request->filled('purchase_date')) {\n                        $row[] = ($asset->purchase_date) ? $asset->purchase_date : '';\n                    }\n\n                    if ($request->filled('purchase_cost')) {\n                        $row[] = ($asset->purchase_cost) ? Helper::formatCurrencyOutput($asset->purchase_cost) : '';\n                    }\n\n                    if ($request->filled('eol')) {\n                        $row[] = ($asset->purchase_date != '') ? $asset->present()->eol_date() : '';\n                    }\n\n                    if ($request->filled('order')) {\n                        $row[] = ($asset->order_number) ? $asset->order_number : '';\n                    }\n\n                    if ($request->filled('supplier')) {\n                        $row[] = ($asset->supplier) ? $asset->supplier->name : '';\n                    }\n                    \n                    if ($request->filled('location')) {\n                        $row[] = ($asset->location) ? $asset->location->present()->name() : '';\n                    }\n\n                    if ($request->filled('location_address')) {\n                        $row[] = ($asset->location) ? $asset->location->address : '';\n                        $row[] = ($asset->location) ? $asset->location->address2 : '';\n                        $row[] = ($asset->location) ? $asset->location->city : '';\n                        $row[] = ($asset->location) ? $asset->location->state : '';\n                        $row[] = ($asset->location) ? $asset->location->country : '';\n                        $row[] = ($asset->location) ? $asset->location->zip : '';\n                    }\n\n                    if ($request->filled('rtd_location')) {\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->present()->name() : '';\n                    }\n\n                    if ($request->filled('rtd_location_address')) {\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->address : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->address2 : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->city : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->state : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->country : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->zip : '';\n                    }\n\n                    if ($request->filled('assigned_to')) {\n                        $row[] = ($asset->checkedOutToUser() && $asset->assigned) ? $asset->assigned->getFullNameAttribute() : ($asset->assigned ? $asset->assigned->display_name : '');\n                        $row[] = ($asset->checkedOutToUser() && $asset->assigned) ? 'user' : $asset->assignedType();\n                    }\n\n                    if ($request->filled('username')) {\n                        // Only works if we're checked out to a user, not anything else.\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->username : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('employee_num')) {\n                        // Only works if we're checked out to a user, not anything else.\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->employee_num : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('manager')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = (($asset->assignedto) && ($asset->assignedto->manager)) ? $asset->assignedto->manager->present()->fullName : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('department')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = (($asset->assignedto) && ($asset->assignedto->department)) ? $asset->assignedto->department->name : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('title')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->jobtitle : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('status')) {\n                        $row[] = ($asset->assetstatus) ? $asset->assetstatus->name.' ('.$asset->present()->statusMeta.')' : '';\n                    }\n\n                    if ($request->filled('warranty')) {\n                        $row[] = ($asset->warranty_months) ? $asset->warranty_months : '';\n                        $row[] = $asset->present()->warranty_expires();\n                    }\n\n                    if ($request->filled('depreciation')) {\n                            $depreciation = $asset->getDepreciatedValue();\n                            $diff = ($asset->purchase_cost - $depreciation);\n                        $row[] = Helper::formatCurrencyOutput($depreciation);\n                        $row[] = Helper::formatCurrencyOutput($diff);\n                        $row[] = ($asset->depreciation) ? $asset->depreciated_date()->format('Y-m-d') : '';\n                    }\n\n                    if ($request->filled('checkout_date')) {\n                        $row[] = ($asset->last_checkout) ? $asset->last_checkout : '';\n                    }\n\n                    if ($request->filled('checkin_date')) {\n                        $row[] = ($asset->last_checkin)\n                            ? Carbon::parse($asset->last_checkin)->format('Y-m-d')\n                            : '';\n                    }\n\n                    if ($request->filled('expected_checkin')) {\n                        $row[] = ($asset->expected_checkin) ? $asset->expected_checkin : '';\n                    }\n\n                    if ($request->filled('created_at')) {\n                        $row[] = ($asset->created_at) ? $asset->created_at : '';\n                    }\n\n                    if ($request->filled('updated_at')) {\n                        $row[] = ($asset->updated_at) ? $asset->updated_at : '';\n                    }\n\n                    if ($request->filled('deleted_at')) {\n                        $row[] = ($asset->deleted_at) ? $asset->deleted_at : '';\n                    }\n\n                    if ($request->filled('last_audit_date')) {\n                        $row[] = ($asset->last_audit_date) ? $asset->last_audit_date : '';\n                    }\n\n                    if ($request->filled('next_audit_date')) {\n                        $row[] = ($asset->next_audit_date) ? $asset->next_audit_date : '';\n                    }\n\n                    if ($request->filled('notes')) {\n                        $row[] = ($asset->notes) ? $asset->notes : '';\n                    }\n\n                    if ($request->filled('url')) {\n                        $row[] = config('app.url').'/hardware/'.$asset->id ;\n                    }\n\n                    foreach ($customfields as $customfield) {\n                        $column_name = $customfield->db_column_name();\n                        if ($request->filled($customfield->db_column_name())) {\n                            $row[] = $asset->$column_name;\n                        }\n                    }\n\n                    \n                    // CSV_ESCAPE_FORMULAS is set to false in the .env\n                    if (config('app.escape_formulas') === false) {\n                        fputcsv($handle, $row);\n\n                   // CSV_ESCAPE_FORMULAS is set to true or is not set in the .env\n                    } else {\n                        fputcsv($handle, $formatter->escapeRecord($row));\n                    }\n\n                    $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                    \\Log::debug('-- Record '.$count.' Asset ID:'.$asset->id.' in '.$executionTime);\n                }\n            });\n\n            // Close the output stream\n            fclose($handle);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('-- SCRIPT COMPLETED IN '.$executionTime);\n        }, 200, [\n            'Content-Type' => 'text/csv',\n            'Content-Disposition' => 'attachment; filename=\"custom-assets-report-'.date('Y-m-d-his').'.csv\"',\n        ]);\n\n        return $response;\n    }\n\n    /**\n     * getImprovementsReport\n     *\n     * @return View\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function getAssetMaintenancesReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports.asset_maintenances');\n    }\n\n    /**\n     * exportImprovementsReport\n     *\n     * @return \\Illuminate\\Http\\Response\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function exportAssetMaintenancesReport()\n    {\n        $this->authorize('reports.view');\n        // Grab all the improvements\n        $assetMaintenances = AssetMaintenance::with('asset', 'supplier')\n                                             ->orderBy('created_at', 'DESC')\n                                             ->get();\n\n        $rows = [];\n\n        $header = [\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/asset_maintenances/table.asset_name'),\n            trans('general.supplier'),\n            trans('admin/asset_maintenances/form.asset_maintenance_type'),\n            trans('admin/asset_maintenances/form.title'),\n            trans('admin/asset_maintenances/form.start_date'),\n            trans('admin/asset_maintenances/form.completion_date'),\n            trans('admin/asset_maintenances/form.asset_maintenance_time'),\n            trans('admin/asset_maintenances/form.cost'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(',', $header);\n\n        foreach ($assetMaintenances as $assetMaintenance) {\n            $row = [];\n            $row[] = str_replace(',', '', e($assetMaintenance->asset->asset_tag));\n            $row[] = str_replace(',', '', e($assetMaintenance->asset->name));\n            $row[] = str_replace(',', '', e($assetMaintenance->supplier->name));\n            $row[] = e($assetMaintenance->improvement_type);\n            $row[] = e($assetMaintenance->title);\n            $row[] = e($assetMaintenance->start_date);\n            $row[] = e($assetMaintenance->completion_date);\n            if (is_null($assetMaintenance->asset_maintenance_time)) {\n                $improvementTime = intval(Carbon::now()\n                                                 ->diffInDays(Carbon::parse($assetMaintenance->start_date)));\n            } else {\n                $improvementTime = intval($assetMaintenance->asset_maintenance_time);\n            }\n            $row[]  = $improvementTime;\n            $row[]  = trans('general.currency') . Helper::formatCurrencyOutput($assetMaintenance->cost);\n            $rows[] = implode(',', $row);\n        }\n\n        // spit out a csv\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n     * getAssetAcceptanceReport\n     *\n     * @return mixed\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function getAssetAcceptanceReport($deleted = false)\n    {\n        $this->authorize('reports.view');\n        $showDeleted = $deleted == 'deleted';\n\n        /**\n         * Get all assets with pending checkout acceptances\n         */\n        if($showDeleted) {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->withTrashed()->with(['assignedTo' , 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        } else {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->with(['assignedTo' => function ($query) {\n                $query->withTrashed();\n            }, 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        }\n\n        $assetsForReport = $acceptances\n            ->filter(function ($acceptance) {\n                $acceptance_checkoutable_flag = false;\n                if ($acceptance->checkoutable){\n                    $acceptance_checkoutable_flag = $acceptance->checkoutable->checkedOutToUser();\n                }\n                \n                return $acceptance->checkoutable_type == 'App\\Models\\Asset' && $acceptance_checkoutable_flag;\n            })\n            ->map(function($acceptance) {\n                return ['assetItem' => $acceptance->checkoutable, 'acceptance' => $acceptance];\n            });\n\n        return view('reports/unaccepted_assets', compact('assetsForReport','showDeleted' ));\n    }\n\n    /**\n     * sentAssetAcceptanceReminder\n     *\n     * @param integer|null $acceptanceId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     * @version v1.0\n     */\n    public function sentAssetAcceptanceReminder($acceptanceId = null)\n    {\n        $this->authorize('reports.view');\n\n        if (!$acceptance = CheckoutAcceptance::pending()->find($acceptanceId)) {\n            // Redirect to the unaccepted assets report page with error\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        }\n        $assetItem = $acceptance->checkoutable;\n\n        if (is_null($acceptance->created_at)){\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        } else {\n            $logItem_res = $assetItem->checkouts()->where('created_at', '=', $acceptance->created_at)->get();\n            if ($logItem_res->isEmpty()){\n                return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n            }\n            $logItem = $logItem_res[0];\n        }\n\n        if(!$assetItem->assignedTo->locale){\n            Notification::locale(Setting::getSettings()->locale)->send(\n                $assetItem->assignedTo,\n                new CheckoutAssetNotification($assetItem, $assetItem->assignedTo, $logItem->user, $acceptance, $logItem->note)\n            );\n        } else {\n            Notification::send(\n                $assetItem->assignedTo,\n                new CheckoutAssetNotification($assetItem, $assetItem->assignedTo, $logItem->user, $acceptance, $logItem->note)\n            );\n        }\n\n        return redirect()->route('reports/unaccepted_assets')->with('success', trans('admin/reports/general.reminder_sent'));\n    }\n\n    /**\n     * sentAssetAcceptanceReminder\n     *\n     * @param integer|null $acceptanceId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     * @version v1.0\n     */\n    public function deleteAssetAcceptance($acceptanceId = null)\n    {\n        $this->authorize('reports.view');\n\n        if (!$acceptance = CheckoutAcceptance::pending()->find($acceptanceId)) {\n            // Redirect to the unaccepted assets report page with error\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        }\n\n        if($acceptance->delete()) {\n            return redirect()->route('reports/unaccepted_assets')->with('success', trans('admin/reports/general.acceptance_deleted'));\n        } else {\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.deletion_failed'));\n        }\n    }\n\n    /**\n     * Exports the AssetAcceptance report to CSV\n     *\n     * @return \\Illuminate\\Http\\Response\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function postAssetAcceptanceReport($deleted = false)\n    {\n        $this->authorize('reports.view');\n        $showDeleted = $deleted == 'deleted';\n\n        /**\n         * Get all assets with pending checkout acceptances\n         */\n        if($showDeleted) {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->withTrashed()->with(['assignedTo', 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        } else {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->with(['assignedTo', 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        }\n\n        $assetsForReport = $acceptances\n            ->filter(function($acceptance) {\n                return $acceptance->checkoutable_type == 'App\\Models\\Asset';\n            })\n            ->map(function($acceptance) {\n                return ['assetItem' => $acceptance->checkoutable, 'acceptance' => $acceptance];\n            });\n\n        $rows = [];\n\n        $header = [\n            trans('general.category'),\n            trans('admin/hardware/form.model'),\n            trans('admin/hardware/form.name'),\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/hardware/table.checkoutto'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(',', $header);\n\n        foreach ($assetsForReport as $item) {\n\n            if ($item['assetItem'] != null){\n            \n                $row    = [ ];\n                $row[]  = str_replace(',', '', e($item['assetItem']->model->category->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->model->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->asset_tag));\n                $row[]  = str_replace(',', '', e(($item['acceptance']->assignedTo) ? $item['acceptance']->assignedTo->present()->name() : trans('admin/reports/general.deleted_user')));\n                $rows[] = implode(',', $row);\n            }\n        }\n\n        // spit out a csv\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n     * getCheckedOutAssetsRequiringAcceptance\n     *\n     * @param $modelsInCategoriesThatRequireAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getCheckedOutAssetsRequiringAcceptance($modelsInCategoriesThatRequireAcceptance)\n    {\n        $this->authorize('reports.view');\n        $assets = Asset::deployed()\n                        ->inModelList($modelsInCategoriesThatRequireAcceptance)\n                        ->select('id')\n                        ->get()\n                        ->toArray();\n\n        return array_pluck($assets, 'id');\n    }\n\n    /**\n     * getModelsInCategoriesThatRequireAcceptance\n     *\n     * @param $assetCategoriesRequiringAcceptance\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getModelsInCategoriesThatRequireAcceptance($assetCategoriesRequiringAcceptance)\n    {\n        $this->authorize('reports.view');\n\n        return array_pluck(Model::inCategory($assetCategoriesRequiringAcceptance)\n                                 ->select('id')\n                                 ->get()\n                                 ->toArray(), 'id');\n    }\n\n    /**\n     * getCategoriesThatRequireAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getCategoriesThatRequireAcceptance()\n    {\n        $this->authorize('reports.view');\n\n        return array_pluck(Category::requiresAcceptance()\n                                    ->select('id')\n                                    ->get()\n                                    ->toArray(), 'id');\n    }\n\n    /**\n     * getAssetsCheckedOutRequiringAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getAssetsCheckedOutRequiringAcceptance()\n    {\n        $this->authorize('reports.view');\n\n        return $this->getCheckedOutAssetsRequiringAcceptance(\n            $this->getModelsInCategoriesThatRequireAcceptance($this->getCategoriesThatRequireAcceptance())\n        );\n    }\n}\n", "<?php\n?>\n@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n    {{ trans('general.unaccepted_asset_report') }}\n    @parent\n@stop\n\n@section('header_right')\n\n    <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group mr-2\" role=\"group\">\n            @if($showDeleted)\n                <a href=\"{{ route('reports/unaccepted_assets') }}\" class=\"btn btn-default\" ><i class=\"fa fa-trash icon-white\" aria-hidden=\"true\"></i> {{ trans('general.hide_deleted') }}</a>\n            @else\n                <a href=\"{{ route('reports/unaccepted_assets', ['deleted' => 'deleted']) }}\" class=\"btn btn-default\" ><i class=\"fa fa-trash icon-white\" aria-hidden=\"true\"></i> {{ trans('general.show_deleted') }}</a>\n            @endif\n        </div>\n        <div class=\"btn-group mr-2\" role=\"group\">\n            {{ Form::open(['method' => 'post', 'class' => 'form-horizontal']) }}\n            {{csrf_field()}}\n            <button type=\"submit\" class=\"btn btn-default\"><i class=\"fa fa-download icon-white\" aria-hidden=\"true\"></i> {{ trans('general.download_all') }}</button>\n            {{ Form::close() }}\n        </div>\n    </div>\n@stop\n\n{{-- Page content --}}\n@section('content')\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"box box-default\">\n      <div class=\"box-body\">\n        <div class=\"table-responsive\">\n\n            <table\n                data-cookie-id-table=\"unacceptedAssetsReport\"\n                data-pagination=\"true\"\n                data-id-table=\"unacceptedAssetsReport\"\n                data-search=\"true\"\n                data-side-pagination=\"client\"\n                data-show-columns=\"true\"\n                data-show-export=\"true\"\n                data-show-refresh=\"true\"\n                data-sort-order=\"asc\"\n                data-sort-name=\"created_at\"\n                id=\"unacceptedAssetsReport\"\n                class=\"table table-striped snipe-table\"\n                data-export-options='{\n                    \"fileName\": \"maintenance-report-{{ date('Y-m-d') }}\",\n                    \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                    }'>\n            <thead>\n              <tr role=\"row\">\n                <th class=\"col-sm-1\" data-searchable=\"false\" data-field=\"created_at\"  data-sortable=\"true\">{{ trans('general.date') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/companies/table.title') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('general.category') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/form.model') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/form.name') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/table.asset_tag') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/table.checkoutto') }}</th>\n                <th class=\"col-md-1\"><span class=\"line\"></span>{{ trans('table.actions') }}</th>\n              </tr>\n            </thead>\n            <tbody>\n              @if ($assetsForReport)\n              @foreach ($assetsForReport as $item)\n                  @if ($item['assetItem'])\n                  <tr @if($item['acceptance']->trashed()) style=\"text-decoration: line-through\" @endif>\n                    <td>{{ $item['acceptance']->created_at }}</td>\n                    <td>{{ ($item['assetItem']->company) ? $item['assetItem']->company->name : '' }}</td>\n                    <td>{!! $item['assetItem']->model->category->present()->nameUrl() !!}</td>\n                    <td>{!! $item['assetItem']->present()->modelUrl() !!}</td>\n                    <td>{!! $item['assetItem']->present()->nameUrl() !!}</td>\n                    <td>{{ $item['assetItem']->asset_tag }}</td>\n                    <td @if($item['acceptance']->assignedTo === null || $item['acceptance']->assignedTo->trashed()) style=\"text-decoration: line-through\" @endif>{!! ($item['acceptance']->assignedTo) ? $item['acceptance']->assignedTo->present()->nameUrl() : trans('admin/reports/general.deleted_user') !!}</td>\n                    <td>\n                        @if(!$item['acceptance']->trashed())\n                            @if ($item['acceptance']->assignedTo)<a href=\"{{ route('reports/unaccepted_assets_sent_reminder', ['acceptanceId' => $item['acceptance']->id]) }}\" class=\"btn btn-sm bg-purple\" data-tooltip=\"true\">{{ trans('admin/reports/general.send_reminder') }}</a>@endif\n                            <a href=\"{{ route('reports/unaccepted_assets_delete', ['acceptanceId' => $item['acceptance']->id]) }}\" class=\"btn btn-sm btn-danger delete-asset\" data-tooltip=\"true\" data-toggle=\"modal\" data-content=\"{{ trans('general.delete_confirm', ['item' =>trans('admin/reports/general.acceptance_request')]) }}\" data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>\n                        @endif\n                    </td>\n                  </tr>\n                  @endif\n              @endforeach\n              @endif\n            </tbody>\n            <tfoot>\n              <tr>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n@stop\n\n@section('moar_scripts')\n    @include ('partials.bootstrap-table')\n@stop\n", "<?php\n\nuse App\\Http\\Controllers\\Account;\nuse App\\Http\\Controllers\\ActionlogController;\nuse App\\Http\\Controllers\\CategoriesController;\nuse App\\Http\\Controllers\\CompaniesController;\nuse App\\Http\\Controllers\\DashboardController;\nuse App\\Http\\Controllers\\DepartmentsController;\nuse App\\Http\\Controllers\\DepreciationsController;\nuse App\\Http\\Controllers\\GroupsController;\nuse App\\Http\\Controllers\\HealthController;\nuse App\\Http\\Controllers\\ImportsController;\nuse App\\Http\\Controllers\\LabelsController;\nuse App\\Http\\Controllers\\LocationsController;\nuse App\\Http\\Controllers\\ManufacturersController;\nuse App\\Http\\Controllers\\ModalController;\nuse App\\Http\\Controllers\\ProfileController;\nuse App\\Http\\Controllers\\ReportsController;\nuse App\\Http\\Controllers\\SettingsController;\nuse App\\Http\\Controllers\\StatuslabelsController;\nuse App\\Http\\Controllers\\SuppliersController;\nuse App\\Http\\Controllers\\ViewAssetsController;\nuse App\\Http\\Controllers\\Auth\\LoginController;\nuse App\\Http\\Controllers\\Auth\\ForgotPasswordController;\nuse App\\Http\\Controllers\\Auth\\ResetPasswordController;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Auth;\n\nRoute::group(['middleware' => 'auth'], function () {\n    /*\n    * Companies\n    */\n    Route::resource('companies', CompaniesController::class, [\n        'parameters' => ['company' => 'company_id'],\n    ]);\n\n    /*\n    * Categories\n    */\n    Route::resource('categories', CategoriesController::class, [\n        'parameters' => ['category' => 'category_id'],\n    ]);\n  \n    /*\n    * Labels\n    */\n    Route::get(\n        'labels/{labelName}',\n        [LabelsController::class, 'show']\n    )->where('labelName', '.*')->name('labels.show');\n\n    /*\n     * Locations\n     */\n\n    Route::group(['prefix' => 'locations', 'middleware' => ['auth']], function () {\n        \n        Route::get('{locationId}/clone',\n            [LocationsController::class, 'getClone']\n        )->name('clone/location');\n\n        Route::get(\n            '{locationId}/printassigned',\n            [LocationsController::class, 'print_assigned']\n        )->name('locations.print_assigned');\n\n        Route::get(\n            '{locationId}/printallassigned',\n            [LocationsController::class, 'print_all_assigned']\n        )->name('locations.print_all_assigned');\n    });\n\n    Route::resource('locations', LocationsController::class, [\n        'parameters' => ['location' => 'location_id'],\n    ]);\n\n\n    /*\n    * Manufacturers\n    */\n\n    Route::group(['prefix' => 'manufacturers', 'middleware' => ['auth']], function () {\n        Route::post('{manufacturers_id}/restore', [ManufacturersController::class, 'restore'] )->name('restore/manufacturer');\n    });\n\n    Route::resource('manufacturers', ManufacturersController::class, [\n        'parameters' => ['manufacturer' => 'manufacturers_id'],\n    ]);\n\n    /*\n    * Suppliers\n    */\n    Route::resource('suppliers', SuppliersController::class, [\n        'parameters' => ['supplier' => 'supplier_id'],\n    ]);\n\n    /*\n    * Depreciations\n     */\n    Route::resource('depreciations', DepreciationsController::class, [\n         'parameters' => ['depreciation' => 'depreciation_id'],\n     ]);\n\n    /*\n    * Status Labels\n     */\n    Route::resource('statuslabels', StatuslabelsController::class, [\n          'parameters' => ['statuslabel' => 'statuslabel_id'],\n      ]);\n\n    /*\n    * Departments\n    */\n    Route::resource('departments', DepartmentsController::class, [\n        'parameters' => ['department' => 'department_id'],\n    ]);\n});\n\n/*\n|\n|--------------------------------------------------------------------------\n| Re-Usable Modal Dialog routes.\n|--------------------------------------------------------------------------\n|\n| Routes for various modal dialogs to interstitially create various things\n|\n*/\n\nRoute::group(['middleware' => 'auth', 'prefix' => 'modals'], function () {\n    Route::get('{type}/{itemId?}', [ModalController::class, 'show'] )->name('modal.show');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Log Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['middleware' => 'auth'], function () {\n    Route::get(\n        'display-sig/{filename}',\n        [ActionlogController::class, 'displaySig']\n    )->name('log.signature.view');\n    Route::get(\n        'stored-eula-file/{filename}',\n        [ActionlogController::class, 'getStoredEula']\n    )->name('log.storedeula.download');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Admin Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['prefix' => 'admin', 'middleware' => ['auth', 'authorize:superuser']], function () {\n    Route::get('settings', [SettingsController::class, 'getSettings'])->name('settings.general.index');\n    Route::post('settings', [SettingsController::class, 'postSettings'])->name('settings.general.save');\n\n    Route::get('branding', [SettingsController::class, 'getBranding'])->name('settings.branding.index');\n    Route::post('branding', [SettingsController::class, 'postBranding'])->name('settings.branding.save');\n\n    Route::get('security', [SettingsController::class, 'getSecurity'])->name('settings.security.index');\n    Route::post('security', [SettingsController::class, 'postSecurity'])->name('settings.security.save');\n\n    Route::get('groups', [GroupsController::class, 'index'])->name('settings.groups.index');\n\n    Route::get('localization', [SettingsController::class, 'getLocalization'])->name('settings.localization.index');\n    Route::post('localization', [SettingsController::class, 'postLocalization'])->name('settings.localization.save');\n\n    Route::get('notifications', [SettingsController::class, 'getAlerts'])->name('settings.alerts.index');\n    Route::post('notifications', [SettingsController::class, 'postAlerts'])->name('settings.alerts.save');\n\n    Route::get('slack', [SettingsController::class, 'getSlack'])->name('settings.slack.index');\n    Route::post('slack', [SettingsController::class, 'postSlack'])->name('settings.slack.save');\n\n    Route::get('asset_tags', [SettingsController::class, 'getAssetTags'])->name('settings.asset_tags.index');\n    Route::post('asset_tags', [SettingsController::class, 'postAssetTags'])->name('settings.asset_tags.save');\n\n    Route::get('barcodes', [SettingsController::class, 'getBarcodes'])->name('settings.barcodes.index');\n    Route::post('barcodes', [SettingsController::class, 'postBarcodes'])->name('settings.barcodes.save');\n\n    Route::get('labels', [SettingsController::class, 'getLabels'])->name('settings.labels.index');\n    Route::post('labels', [SettingsController::class, 'postLabels'])->name('settings.labels.save');\n\n    Route::get('ldap', [SettingsController::class, 'getLdapSettings'])->name('settings.ldap.index');\n    Route::post('ldap', [SettingsController::class, 'postLdapSettings'])->name('settings.ldap.save');\n\n    Route::get('phpinfo', [SettingsController::class, 'getPhpInfo'])->name('settings.phpinfo.index');\n\n    Route::get('oauth', [SettingsController::class, 'api'])->name('settings.oauth.index');\n\n    Route::get('google', [SettingsController::class, 'getGoogleLoginSettings'])->name('settings.google.index');\n    Route::post('google', [SettingsController::class, 'postGoogleLoginSettings'])->name('settings.google.save');\n\n    Route::get('purge', [SettingsController::class, 'getPurge'])->name('settings.purge.index');\n    Route::post('purge', [SettingsController::class, 'postPurge'])->name('settings.purge.save');\n\n    Route::get('login-attempts', [SettingsController::class, 'getLoginAttempts'])->name('settings.logins.index');\n\n    // Backups\n    Route::group(['prefix' => 'backups', 'middleware' => 'auth'], function () {\n        Route::get('download/{filename}',\n            [SettingsController::class, 'downloadFile'])->name('settings.backups.download');\n\n        Route::delete('delete/{filename}',\n            [SettingsController::class, 'deleteFile'])->name('settings.backups.destroy');\n\n        Route::post('/', \n            [SettingsController::class, 'postBackups']\n        )->name('settings.backups.create');\n\n        Route::post('/restore/{filename}', \n            [SettingsController::class, 'postRestore']\n        )->name('settings.backups.restore');\n\n        Route::post('/upload', \n            [SettingsController::class, 'postUploadBackup']\n        )->name('settings.backups.upload');\n\n        Route::get('/', [SettingsController::class, 'getBackups'])->name('settings.backups.index');\n    });\n\n    Route::resource('groups', GroupsController::class, [\n        'middleware' => ['auth'],\n        'parameters' => ['group' => 'group_id'],\n    ]);\n\n    Route::get('/', [SettingsController::class, 'index'])->name('settings.index');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Importer Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\n\nRoute::get('/import',\n    \\App\\Http\\Livewire\\Importer::class\n)->middleware('auth')->name('imports.index');\n\n/*\n|--------------------------------------------------------------------------\n| Account Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group(['prefix' => 'account', 'middleware' => ['auth']], function () {\n\n    // Profile\n    Route::get('profile', [ProfileController::class, 'getIndex'])->name('profile');\n    Route::post('profile', [ProfileController::class, 'postIndex']);\n\n    Route::get('menu', [ProfileController::class, 'getMenuState'])->name('account.menuprefs');\n\n    Route::get('password', [ProfileController::class, 'password'])->name('account.password.index');\n    Route::post('password', [ProfileController::class, 'passwordSave']);\n\n    Route::get('api', [ProfileController::class, 'api'])->name('user.api');\n\n    // View Assets\n    Route::get('view-assets', [ViewAssetsController::class, 'getIndex'])->name('view-assets');\n\n    Route::get('requested', [ViewAssetsController::class, 'getRequestedAssets'])->name('account.requested');\n\n    // Profile\n    Route::get(\n        'requestable-assets',\n        [ViewAssetsController::class, 'getRequestableIndex']\n    )->name('requestable-assets');\n    Route::post(\n        'request-asset/{assetId}',\n        [ViewAssetsController::class, 'getRequestAsset']\n    )->name('account/request-asset');\n\n    Route::post(\n        'request/{itemType}/{itemId}/{cancel_by_admin?}/{requestingUser?}',\n        [ViewAssetsController::class, 'getRequestItem']\n    )->name('account/request-item');\n\n    // Account Dashboard\n    Route::get('/', [ViewAssetsController::class, 'getIndex'])->name('account');\n\n    Route::get('accept', [Account\\AcceptanceController::class, 'index'])\n        ->name('account.accept');\n\n    Route::get('accept/{id}', [Account\\AcceptanceController::class, 'create'])\n        ->name('account.accept.item');\n\n    Route::post('accept/{id}', [Account\\AcceptanceController::class, 'store'])\n        ->name('account.store-acceptance');\n\n    Route::get(\n        'print',\n        [\n            ProfileController::class,\n            'printInventory'\n        ]\n    )->name('profile.print');\n\n    Route::post(\n        'email',\n        [\n            ProfileController::class,\n            'emailAssetList'\n        ]\n    )->name('profile.email_assets');\n\n});\n\nRoute::group(['middleware' => ['auth']], function () {\n    Route::get('reports/audit', \n        [ReportsController::class, 'audit']\n    )->name('reports.audit');\n\n    Route::get(\n        'reports/depreciation',\n        [ReportsController::class, 'getDeprecationReport']\n    )->name('reports/depreciation');\n    Route::get(\n        'reports/export/depreciation',\n        [ReportsController::class, 'exportDeprecationReport']\n    )->name('reports/export/depreciation');\n    Route::get(\n        'reports/asset_maintenances',\n        [ReportsController::class, 'getAssetMaintenancesReport']\n    )->name('reports/asset_maintenances');\n    Route::get(\n        'reports/export/asset_maintenances',\n        [ReportsController::class, 'exportAssetMaintenancesReport']\n    )->name('reports/export/asset_maintenances');\n    Route::get(\n        'reports/licenses',\n        [ReportsController::class, 'getLicenseReport']\n    )->name('reports/licenses');\n    Route::get(\n        'reports/export/licenses',\n        [ReportsController::class, 'exportLicenseReport']\n    )->name('reports/export/licenses');\n\n    Route::get('reports/accessories', [ReportsController::class, 'getAccessoryReport'])->name('reports/accessories');\n    Route::get(\n        'reports/export/accessories',\n        [ReportsController::class, 'exportAccessoryReport']\n    )->name('reports/export/accessories');\n    Route::get('reports/custom', [ReportsController::class, 'getCustomReport'])->name('reports/custom');\n    Route::post('reports/custom', [ReportsController::class, 'postCustom']);\n\n    Route::get(\n        'reports/activity',\n        [ReportsController::class, 'getActivityReport']\n    )->name('reports.activity');\n\n    Route::post('reports/activity', [ReportsController::class, 'postActivityReport']);\n\n    Route::get(\n        'reports/unaccepted_assets/{deleted?}',\n        [ReportsController::class, 'getAssetAcceptanceReport']\n    )->name('reports/unaccepted_assets');\n    Route::get(\n        'reports/unaccepted_assets/{acceptanceId}/sent_reminder',\n        [ReportsController::class, 'sentAssetAcceptanceReminder']\n    )->name('reports/unaccepted_assets_sent_reminder');\n    Route::delete(\n        'reports/unaccepted_assets/{acceptanceId}/delete',\n        [ReportsController::class, 'deleteAssetAcceptance']\n    )->name('reports/unaccepted_assets_delete');\n    Route::post(\n        'reports/unaccepted_assets/{deleted?}',\n        [ReportsController::class, 'postAssetAcceptanceReport']\n    )->name('reports/export/unaccepted_assets');\n});\n\nRoute::get(\n    'auth/signin',\n    [LoginController::class, 'legacyAuthRedirect']\n);\n\n\n/*\n|--------------------------------------------------------------------------\n| Setup Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group(['prefix' => 'setup', 'middleware' => 'web'], function () {\n    Route::get(\n        'user',\n        [SettingsController::class, 'getSetupUser']\n    )->name('setup.user');\n\n    Route::post(\n        'user',\n        [SettingsController::class, 'postSaveFirstAdmin']\n    )->name('setup.user.save');\n\n\n    Route::get(\n        'migrate',\n        [SettingsController::class, 'getSetupMigrate']\n    )->name('setup.migrate');\n\n    Route::get(\n        'done',\n        [SettingsController::class, 'getSetupDone']\n    )->name('setup.done');\n\n    Route::get(\n        'mailtest',\n        [SettingsController::class, 'ajaxTestEmail']\n    )->name('setup.mailtest');\n\n    Route::get(\n        '/',\n        [SettingsController::class, 'getSetupIndex']\n    )->name('setup');\n});\n\n\n\n\n\nRoute::group(['middleware' => 'web'], function () {\n\n    Route::get(\n        'login',\n        [LoginController::class, 'showLoginForm']\n    )->name(\"login\");\n\n    Route::post(\n        'login',\n        [LoginController::class, 'login']\n    );\n\n    Route::get(\n        'two-factor-enroll',\n        [LoginController::class, 'getTwoFactorEnroll']\n    )->name('two-factor-enroll');\n\n    Route::get(\n        'two-factor',\n        [LoginController::class, 'getTwoFactorAuth']\n    )->name('two-factor');\n\n    Route::post(\n        'two-factor',\n        [LoginController::class, 'postTwoFactorAuth']\n    );\n\n    Route::post(\n        'password/email',\n        [ForgotPasswordController::class, 'sendResetLinkEmail']\n    )->name('password.email')->middleware('throttle:forgotten_password');\n\n    Route::get(\n        'password/reset',\n        [ForgotPasswordController::class, 'showLinkRequestForm']\n    )->name('password.request')->middleware('throttle:forgotten_password');\n\n\n    Route::post(\n        'password/reset',\n        [ResetPasswordController::class, 'reset']\n    )->name('password.update')->middleware('throttle:forgotten_password');\n\n    Route::get(\n        'password/reset/{token}',\n        [ResetPasswordController::class, 'showResetForm']\n    )->name('password.reset');\n\n\n    Route::post(\n        'password/email',\n        [ForgotPasswordController::class, 'sendResetLinkEmail']\n    )->name('password.email')->middleware('throttle:forgotten_password');\n\n\n     // Socialite Google login\n    Route::get('google', 'App\\Http\\Controllers\\GoogleAuthController@redirectToGoogle')->name('google.redirect');\n    Route::get('google/callback', 'App\\Http\\Controllers\\GoogleAuthController@handleGoogleCallback')->name('google.callback');\n\n\n    Route::get(\n        '/',\n        [\n            'as' => 'home',\n            'middleware' => ['auth'],\n            'uses' => 'DashboardController@getIndex' ]\n    );\n\n    // need to keep GET /logout for SAML SLO\n    Route::get(\n        'logout',\n        [LoginController::class, 'logout']\n    )->name('logout.get');\n\n    Route::post(\n        'logout',\n        [LoginController::class, 'logout']\n    )->name('logout.post');\n});\n\n//Auth::routes();\n\nRoute::get(\n    '/health', \n    [HealthController::class, 'get']\n)->name('health');\n\nRoute::middleware(['auth'])->get(\n    '/',\n    [DashboardController::class, 'index']\n)->name('home');\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Accessory;\nuse App\\Models\\Actionlog;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\CheckoutAcceptance;\nuse App\\Models\\CustomField;\nuse App\\Models\\Depreciation;\nuse App\\Models\\License;\nuse App\\Models\\Setting;\nuse App\\Notifications\\CheckoutAssetNotification;\nuse Carbon\\Carbon;\nuse Illuminate\\Auth\\Access\\AuthorizationException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\View;\nuse Input;\nuse League\\Csv\\Reader;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse League\\Csv\\EscapeFormula;\n\n\n/**\n * This controller handles all actions related to Reports for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ReportsController extends Controller\n{\n    /**\n     * Checks for correct permissions\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n    * Returns a view that displays the accessories report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getAccessoryReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/accessories');\n    }\n\n    /**\n    * Exports the accessories to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @see ManufacturersController::getDatatable() method that generates the JSON response\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportAccessoryReport()\n    {\n        $this->authorize('reports.view');\n        $accessories = Accessory::orderBy('created_at', 'DESC')->get();\n\n        $rows = [];\n        $header = [\n            trans('admin/accessories/table.title'),\n            trans('admin/accessories/general.accessory_category'),\n            trans('admin/accessories/general.total'),\n            trans('admin/accessories/general.remaining'),\n        ];\n        $header = array_map('trim', $header);\n        $rows[] = implode(', ', $header);\n\n        // Row per accessory\n        foreach ($accessories as $accessory) {\n            $row = [];\n            $row[] = e($accessory->accessory_name);\n            $row[] = e($accessory->accessory_category);\n            $row[] = e($accessory->total);\n            $row[] = e($accessory->remaining);\n\n            $rows[] = implode(',', $row);\n        }\n\n        $csv = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n    * Show depreciation report for assets.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getDeprecationReport()\n    {\n        $this->authorize('reports.view');\n        $depreciations = Depreciation::get();\n        return view('reports/depreciation')->with('depreciations',$depreciations);\n    }\n\n    /**\n    * Exports the depreciations to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportDeprecationReport()\n    {\n        $this->authorize('reports.view');\n        // Grab all the assets\n        $assets = Asset::with('model', 'assignedTo', 'assetstatus', 'defaultLoc', 'assetlog')\n                       ->orderBy('created_at', 'DESC')->get();\n\n        $csv = \\League\\Csv\\Writer::createFromFileObject(new \\SplTempFileObject());\n        $csv->setOutputBOM(Reader::BOM_UTF16_BE);\n\n        $rows = [];\n\n        // Create the header row\n        $header = [\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/hardware/table.title'),\n            trans('admin/hardware/table.serial'),\n            trans('admin/hardware/table.checkoutto'),\n            trans('admin/hardware/table.location'),\n            trans('admin/hardware/table.purchase_date'),\n            trans('admin/hardware/table.purchase_cost'),\n            trans('admin/hardware/table.book_value'),\n            trans('admin/hardware/table.diff'),\n        ];\n\n        //we insert the CSV header\n        $csv->insertOne($header);\n\n        // Create a row per asset\n        foreach ($assets as $asset) {\n            $row = [];\n            $row[] = e($asset->asset_tag);\n            $row[] = e($asset->name);\n            $row[] = e($asset->serial);\n\n            if ($target = $asset->assignedTo) {\n                $row[] = e($target->present()->name());\n            } else {\n                $row[] = ''; // Empty string if unassigned\n            }\n\n            if (($asset->assigned_to > 0) && ($location = $asset->location)) {\n                if ($location->city) {\n                    $row[] = e($location->city).', '.e($location->state);\n                } elseif ($location->name) {\n                    $row[] = e($location->name);\n                } else {\n                    $row[] = '';\n                }\n            } else {\n                $row[] = '';  // Empty string if location is not set\n            }\n\n            if ($asset->location) {\n                $currency = e($asset->location->currency);\n            } else {\n                $currency = e(Setting::getSettings()->default_currency);\n            }\n\n            $row[] = $asset->purchase_date;\n            $row[] = $currency.Helper::formatCurrencyOutput($asset->purchase_cost);\n            $row[] = $currency.Helper::formatCurrencyOutput($asset->getDepreciatedValue());\n            $row[] = $currency.Helper::formatCurrencyOutput(($asset->purchase_cost - $asset->getDepreciatedValue()));\n            $csv->insertOne($row);\n        }\n\n        $csv->output('depreciation-report-'.date('Y-m-d').'.csv');\n        die;\n    }\n\n\n    /**\n     * Displays audit report.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function audit()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/audit');\n    }\n\n\n    /**\n    * Displays activity report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return View\n    */\n    public function getActivityReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports/activity');\n    }\n\n    /**\n     * Exports the activity report to CSV\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.7]\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function postActivityReport(Request $request)\n    {\n        ini_set('max_execution_time', 12000);\n        $this->authorize('reports.view');\n\n        \\Debugbar::disable();\n        $response = new StreamedResponse(function () {\n            \\Log::debug('Starting streamed response');\n\n            // Open output stream\n            $handle = fopen('php://output', 'w');\n            stream_set_timeout($handle, 2000);\n\n            $header = [\n                trans('general.date'),\n                trans('general.admin'),\n                trans('general.action'),\n                trans('general.type'),\n                trans('general.item'),\n                'To',\n                trans('general.notes'),\n                'Changed',\n\n            ];\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Starting headers: '.$executionTime);\n            fputcsv($handle, $header);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Added headers: '.$executionTime);\n\n            $actionlogs = Actionlog::with('item', 'user', 'target', 'location')\n                ->orderBy('created_at', 'DESC')\n                ->chunk(20, function ($actionlogs) use ($handle) {\n                    $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                \\Log::debug('Walking results: '.$executionTime);\n                $count = 0;\n\n                foreach ($actionlogs as $actionlog) {\n                    $count++;\n                    $target_name = '';\n\n                    if ($actionlog->target) {\n                            if ($actionlog->targetType() == 'user') {\n                                $target_name = $actionlog->target->getFullNameAttribute();\n                        } else {\n                            $target_name = $actionlog->target->getDisplayNameAttribute();\n                        }\n                    }\n\n                    if($actionlog->item){\n                        $item_name = e($actionlog->item->getDisplayNameAttribute());\n                    } else {\n                        $item_name = '';\n                    }\n\n                    $row = [\n                        $actionlog->created_at,\n                        ($actionlog->admin) ? e($actionlog->admin->getFullNameAttribute()) : '',\n                        $actionlog->present()->actionType(),\n                        e($actionlog->itemType()),\n                        ($actionlog->itemType() == 'user') ? $actionlog->filename : $item_name,\n                        $target_name,\n                        ($actionlog->note) ? e($actionlog->note) : '',\n                        $actionlog->log_meta,\n                    ];\n                    fputcsv($handle, $row);\n                }\n            });\n\n            // Close the output stream\n            fclose($handle);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('-- SCRIPT COMPLETED IN '.$executionTime);\n        }, 200, [\n            'Content-Type' => 'text/csv',\n            'Content-Disposition' => 'attachment; filename=\"activity-report-'.date('Y-m-d-his').'.csv\"',\n        ]);\n\n\n        return $response;\n    }\n\n\n    /**\n     * Displays license report\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     */\n    public function getLicenseReport()\n    {\n        $this->authorize('reports.view');\n        $licenses = License::with('depreciation')->orderBy('created_at', 'DESC')\n                           ->with('company')\n                           ->get();\n\n        return view('reports/licenses', compact('licenses'));\n    }\n\n    /**\n    * Exports the licenses to CSV\n    *\n    * @deprecated Server-side exports have been replaced by datatables export since v2.\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function exportLicenseReport()\n    {\n        $this->authorize('reports.view');\n        $licenses = License::orderBy('created_at', 'DESC')->get();\n\n        $rows = [];\n        $header = [\n            trans('admin/licenses/table.title'),\n            trans('admin/licenses/table.serial'),\n            trans('admin/licenses/form.seats'),\n            trans('admin/licenses/form.remaining_seats'),\n            trans('admin/licenses/form.expiration'),\n            trans('general.purchase_date'),\n            trans('general.depreciation'),\n            trans('general.purchase_cost'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(', ', $header);\n\n        // Row per license\n        foreach ($licenses as $license) {\n            $row = [];\n            $row[] = e($license->name);\n            $row[] = e($license->serial);\n            $row[] = e($license->seats);\n            $row[] = $license->remaincount();\n            $row[] = $license->expiration_date;\n            $row[] = $license->purchase_date;\n            $row[] = ($license->depreciation != '') ? '' : e($license->depreciation->name);\n            $row[] = '\"'.Helper::formatCurrencyOutput($license->purchase_cost).'\"';\n\n            $rows[] = implode(',', $row);\n        }\n\n\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n    * Returns a form that allows the user to generate a custom CSV report.\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @see ReportsController::postCustomReport() method that generates the CSV\n    * @since [v1.0]\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function getCustomReport()\n    {\n        $this->authorize('reports.view');\n        $customfields = CustomField::get();\n\n        return view('reports/custom')->with('customfields', $customfields);\n    }\n\n    /**\n     * Exports the custom report to CSV\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @see ReportsController::getCustomReport() method that generates form view\n     * @since [v1.0]\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function postCustom(Request $request)\n    {\n        ini_set('max_execution_time', env('REPORT_TIME_LIMIT', 12000)); //12000 seconds = 200 minutes\n        $this->authorize('reports.view');\n\n        \\Debugbar::disable();\n        $customfields = CustomField::get();\n        $response = new StreamedResponse(function () use ($customfields, $request) {\n            \\Log::debug('Starting streamed response');\n            \\Log::debug('CSV escaping is set to: '.config('app.escape_formulas'));\n\n            // Open output stream\n            $handle = fopen('php://output', 'w');\n            stream_set_timeout($handle, 2000);\n            \n            if ($request->filled('use_bom')) {\n                fprintf($handle, chr(0xEF).chr(0xBB).chr(0xBF));\n            }\n\n            $header = [];\n\n            if ($request->filled('id')) {\n                $header[] = trans('general.id');\n            }\n\n            if ($request->filled('company')) {\n                $header[] = trans('general.company');\n            }\n\n            if ($request->filled('asset_name')) {\n                $header[] = trans('admin/hardware/form.name');\n            }\n\n            if ($request->filled('asset_tag')) {\n                $header[] = trans('admin/hardware/table.asset_tag');\n            }\n\n            if ($request->filled('model')) {\n                $header[] = trans('admin/hardware/form.model');\n                $header[] = trans('general.model_no');\n            }\n\n            if ($request->filled('category')) {\n                $header[] = trans('general.category');\n            }\n\n            if ($request->filled('manufacturer')) {\n                $header[] = trans('admin/hardware/form.manufacturer');\n            }\n\n            if ($request->filled('serial')) {\n                $header[] = trans('admin/hardware/table.serial');\n            }\n            if ($request->filled('purchase_date')) {\n                $header[] = trans('admin/hardware/table.purchase_date');\n            }\n\n            if (($request->filled('purchase_cost')) || ($request->filled('depreciation'))) {\n                $header[] = trans('admin/hardware/table.purchase_cost');\n            }\n\n            if ($request->filled('eol')) {\n                $header[] = trans('admin/hardware/table.eol');\n            }\n\n            if ($request->filled('order')) {\n                $header[] = trans('admin/hardware/form.order');\n            }\n\n            if ($request->filled('supplier')) {\n                $header[] = trans('general.supplier');\n            }\n\n            if ($request->filled('location')) {\n                $header[] = trans('admin/hardware/table.location');\n            }\n            if ($request->filled('location_address')) {\n                $header[] = trans('general.address');\n                $header[] = trans('general.address');\n                $header[] = trans('general.city');\n                $header[] = trans('general.state');\n                $header[] = trans('general.country');\n                $header[] = trans('general.zip');\n            }\n\n            if ($request->filled('rtd_location')) {\n                $header[] = trans('admin/hardware/form.default_location');\n            }\n            \n            if ($request->filled('rtd_location_address')) {\n                $header[] = trans('general.address');\n                $header[] = trans('general.address');\n                $header[] = trans('general.city');\n                $header[] = trans('general.state');\n                $header[] = trans('general.country');\n                $header[] = trans('general.zip');\n            }\n\n            if ($request->filled('assigned_to')) {\n                $header[] = trans('admin/hardware/table.checkoutto');\n                $header[] = trans('general.type');\n            }\n\n            if ($request->filled('username')) {\n                $header[] = 'Username';\n            }\n\n            if ($request->filled('employee_num')) {\n                $header[] = 'Employee No.';\n            }\n\n            if ($request->filled('manager')) {\n                $header[] = trans('admin/users/table.manager');\n            }\n\n            if ($request->filled('department')) {\n                $header[] = trans('general.department');\n            }\n\n            if ($request->filled('title')) {\n                $header[] = trans('admin/users/table.title');\n            }\n\n            if ($request->filled('status')) {\n                $header[] = trans('general.status');\n            }\n\n            if ($request->filled('warranty')) {\n                $header[] = trans('admin/hardware/form.warranty');\n                $header[] = trans('admin/hardware/form.warranty_expires');\n            }\n\n            if ($request->filled('depreciation')) {\n                $header[] = trans('admin/hardware/table.book_value');\n                $header[] = trans('admin/hardware/table.diff');\n                $header[] = trans('admin/hardware/form.fully_depreciated');\n            }\n\n            if ($request->filled('checkout_date')) {\n                $header[] = trans('admin/hardware/table.checkout_date');\n            }\n\n            if ($request->filled('checkin_date')) {\n                $header[] = trans('admin/hardware/table.last_checkin_date');\n            }\n\n            if ($request->filled('expected_checkin')) {\n                $header[] = trans('admin/hardware/form.expected_checkin');\n            }\n\n            if ($request->filled('created_at')) {\n                $header[] = trans('general.created_at');\n            }\n\n            if ($request->filled('updated_at')) {\n                $header[] = trans('general.updated_at');\n            }\n\n            if ($request->filled('deleted_at')) {\n                $header[] = trans('general.deleted');\n            }\n\n            if ($request->filled('last_audit_date')) {\n                $header[] = trans('general.last_audit');\n            }\n\n            if ($request->filled('next_audit_date')) {\n                $header[] = trans('general.next_audit_date');\n            }\n\n            if ($request->filled('notes')) {\n                $header[] = trans('general.notes');\n            }\n\n            if ($request->filled('url')) {\n                $header[] = trans('admin/manufacturers/table.url');\n            }\n\n\n            foreach ($customfields as $customfield) {\n                if ($request->input($customfield->db_column_name()) == '1') {\n                    $header[] = $customfield->name;\n                }\n            }\n\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Starting headers: '.$executionTime);\n            fputcsv($handle, $header);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('Added headers: '.$executionTime);\n\n            $assets = Asset::select('assets.*')->with(\n                'location', 'assetstatus', 'company', 'defaultLoc', 'assignedTo',\n                'model.category', 'model.manufacturer', 'supplier');\n            \n            if ($request->filled('by_location_id')) {\n                $assets->whereIn('assets.location_id', $request->input('by_location_id'));\n            }\n\n            if ($request->filled('by_rtd_location_id')) {\n                $assets->whereIn('assets.rtd_location_id', $request->input('by_rtd_location_id'));\n            }\n\n            if ($request->filled('by_supplier_id')) {\n                $assets->whereIn('assets.supplier_id', $request->input('by_supplier_id'));\n            }\n\n            if ($request->filled('by_company_id')) {\n                $assets->whereIn('assets.company_id', $request->input('by_company_id'));\n            }\n\n            if ($request->filled('by_model_id')) {\n                $assets->whereIn('assets.model_id', $request->input('by_model_id'));\n            }\n\n            if ($request->filled('by_category_id')) {\n                $assets->InCategory($request->input('by_category_id'));\n            }\n\n            if ($request->filled('by_dept_id')) {\n                $assets->CheckedOutToTargetInDepartment($request->input('by_dept_id'));\n            }\n\n            if ($request->filled('by_manufacturer_id')) {\n                $assets->ByManufacturer($request->input('by_manufacturer_id'));\n            }\n\n            if ($request->filled('by_order_number')) {\n                $assets->where('assets.order_number', $request->input('by_order_number'));\n            }\n\n            if ($request->filled('by_status_id')) {\n                $assets->whereIn('assets.status_id', $request->input('by_status_id'));\n            }\n\n            if (($request->filled('purchase_start')) && ($request->filled('purchase_end'))) {\n                $assets->whereBetween('assets.purchase_date', [$request->input('purchase_start'), $request->input('purchase_end')]);\n            }\n\n            if (($request->filled('created_start')) && ($request->filled('created_end'))) {\n                $created_start = \\Carbon::parse($request->input('created_start'))->startOfDay();\n                $created_end = \\Carbon::parse($request->input('created_end'))->endOfDay();\n                \n                $assets->whereBetween('assets.created_at', [$created_start, $created_end]);\n            }\n            if (($request->filled('checkout_date_start')) && ($request->filled('checkout_date_end'))) {\n                $checkout_start = \\Carbon::parse($request->input('checkout_date_start'))->startOfDay();\n                $checkout_end = \\Carbon::parse($request->input('checkout_date_end'))->endOfDay();\n\n                $assets->whereBetween('assets.last_checkout', [$checkout_start, $checkout_end]);\n            }\n\n            if (($request->filled('checkin_date_start'))) {\n                $assets->whereBetween('last_checkin', [\n                    Carbon::parse($request->input('checkin_date_start'))->startOfDay(),\n                    // use today's date is `checkin_date_end` is not provided\n                    Carbon::parse($request->input('checkin_date_end', now()))->endOfDay(),\n                ]);\n            }\n\n            if (($request->filled('expected_checkin_start')) && ($request->filled('expected_checkin_end'))) {\n                $assets->whereBetween('assets.expected_checkin', [$request->input('expected_checkin_start'), $request->input('expected_checkin_end')]);\n            }\n\n            if (($request->filled('last_audit_start')) && ($request->filled('last_audit_end'))) {\n                $last_audit_start = \\Carbon::parse($request->input('last_audit_start'))->startOfDay();\n                $last_audit_end = \\Carbon::parse($request->input('last_audit_end'))->endOfDay();\n\n                $assets->whereBetween('assets.last_audit_date', [$last_audit_start, $last_audit_end]);\n            }\n\n            if (($request->filled('next_audit_start')) && ($request->filled('next_audit_end'))) {\n                $assets->whereBetween('assets.next_audit_date', [$request->input('next_audit_start'), $request->input('next_audit_end')]);\n            }\n            if ($request->filled('exclude_archived')) {\n                $assets->notArchived();\n            }\n            if ($request->input('deleted_assets') == '1') {\n                $assets->withTrashed();\n            }\n            if ($request->input('deleted_assets') == '0') {\n                $assets->onlyTrashed();\n            }\n\n            \\Log::debug($assets->toSql());\n            $assets->orderBy('assets.id', 'ASC')->chunk(20, function ($assets) use ($handle, $customfields, $request) {\n            \n                $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                \\Log::debug('Walking results: '.$executionTime);\n                $count = 0;\n\n                $formatter = new EscapeFormula(\"`\");\n\n                foreach ($assets as $asset) {\n                    $count++;\n                    $row = [];\n\n                    if ($request->filled('id')) {\n                        $row[] = ($asset->id) ? $asset->id : '';\n                    }\n\n                    if ($request->filled('company')) {\n                        $row[] = ($asset->company) ? $asset->company->name : '';\n                    }\n\n                    if ($request->filled('asset_name')) {\n                        $row[] = ($asset->name) ? $asset->name : '';\n                    }\n\n                    if ($request->filled('asset_tag')) {\n                        $row[] = ($asset->asset_tag) ? $asset->asset_tag : '';\n                    }\n\n                    if ($request->filled('model')) {\n                        $row[] = ($asset->model) ? $asset->model->name : '';\n                        $row[] = ($asset->model) ? $asset->model->model_number : '';\n                    }\n\n                    if ($request->filled('category')) {\n                        $row[] = (($asset->model) && ($asset->model->category)) ? $asset->model->category->name : '';\n                    }\n\n                    if ($request->filled('manufacturer')) {\n                        $row[] = ($asset->model && $asset->model->manufacturer) ? $asset->model->manufacturer->name : '';\n                    }\n\n                    if ($request->filled('serial')) {\n                        $row[] = ($asset->serial) ? $asset->serial : '';\n                    }\n\n                    if ($request->filled('purchase_date')) {\n                        $row[] = ($asset->purchase_date) ? $asset->purchase_date : '';\n                    }\n\n                    if ($request->filled('purchase_cost')) {\n                        $row[] = ($asset->purchase_cost) ? Helper::formatCurrencyOutput($asset->purchase_cost) : '';\n                    }\n\n                    if ($request->filled('eol')) {\n                        $row[] = ($asset->purchase_date != '') ? $asset->present()->eol_date() : '';\n                    }\n\n                    if ($request->filled('order')) {\n                        $row[] = ($asset->order_number) ? $asset->order_number : '';\n                    }\n\n                    if ($request->filled('supplier')) {\n                        $row[] = ($asset->supplier) ? $asset->supplier->name : '';\n                    }\n                    \n                    if ($request->filled('location')) {\n                        $row[] = ($asset->location) ? $asset->location->present()->name() : '';\n                    }\n\n                    if ($request->filled('location_address')) {\n                        $row[] = ($asset->location) ? $asset->location->address : '';\n                        $row[] = ($asset->location) ? $asset->location->address2 : '';\n                        $row[] = ($asset->location) ? $asset->location->city : '';\n                        $row[] = ($asset->location) ? $asset->location->state : '';\n                        $row[] = ($asset->location) ? $asset->location->country : '';\n                        $row[] = ($asset->location) ? $asset->location->zip : '';\n                    }\n\n                    if ($request->filled('rtd_location')) {\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->present()->name() : '';\n                    }\n\n                    if ($request->filled('rtd_location_address')) {\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->address : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->address2 : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->city : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->state : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->country : '';\n                        $row[] = ($asset->defaultLoc) ? $asset->defaultLoc->zip : '';\n                    }\n\n                    if ($request->filled('assigned_to')) {\n                        $row[] = ($asset->checkedOutToUser() && $asset->assigned) ? $asset->assigned->getFullNameAttribute() : ($asset->assigned ? $asset->assigned->display_name : '');\n                        $row[] = ($asset->checkedOutToUser() && $asset->assigned) ? 'user' : $asset->assignedType();\n                    }\n\n                    if ($request->filled('username')) {\n                        // Only works if we're checked out to a user, not anything else.\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->username : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('employee_num')) {\n                        // Only works if we're checked out to a user, not anything else.\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->employee_num : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('manager')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = (($asset->assignedto) && ($asset->assignedto->manager)) ? $asset->assignedto->manager->present()->fullName : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('department')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = (($asset->assignedto) && ($asset->assignedto->department)) ? $asset->assignedto->department->name : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('title')) {\n                        if ($asset->checkedOutToUser()) {\n                            $row[] = ($asset->assignedto) ? $asset->assignedto->jobtitle : '';\n                        } else {\n                            $row[] = ''; // Empty string if unassigned\n                        }\n                    }\n\n                    if ($request->filled('status')) {\n                        $row[] = ($asset->assetstatus) ? $asset->assetstatus->name.' ('.$asset->present()->statusMeta.')' : '';\n                    }\n\n                    if ($request->filled('warranty')) {\n                        $row[] = ($asset->warranty_months) ? $asset->warranty_months : '';\n                        $row[] = $asset->present()->warranty_expires();\n                    }\n\n                    if ($request->filled('depreciation')) {\n                            $depreciation = $asset->getDepreciatedValue();\n                            $diff = ($asset->purchase_cost - $depreciation);\n                        $row[] = Helper::formatCurrencyOutput($depreciation);\n                        $row[] = Helper::formatCurrencyOutput($diff);\n                        $row[] = ($asset->depreciation) ? $asset->depreciated_date()->format('Y-m-d') : '';\n                    }\n\n                    if ($request->filled('checkout_date')) {\n                        $row[] = ($asset->last_checkout) ? $asset->last_checkout : '';\n                    }\n\n                    if ($request->filled('checkin_date')) {\n                        $row[] = ($asset->last_checkin)\n                            ? Carbon::parse($asset->last_checkin)->format('Y-m-d')\n                            : '';\n                    }\n\n                    if ($request->filled('expected_checkin')) {\n                        $row[] = ($asset->expected_checkin) ? $asset->expected_checkin : '';\n                    }\n\n                    if ($request->filled('created_at')) {\n                        $row[] = ($asset->created_at) ? $asset->created_at : '';\n                    }\n\n                    if ($request->filled('updated_at')) {\n                        $row[] = ($asset->updated_at) ? $asset->updated_at : '';\n                    }\n\n                    if ($request->filled('deleted_at')) {\n                        $row[] = ($asset->deleted_at) ? $asset->deleted_at : '';\n                    }\n\n                    if ($request->filled('last_audit_date')) {\n                        $row[] = ($asset->last_audit_date) ? $asset->last_audit_date : '';\n                    }\n\n                    if ($request->filled('next_audit_date')) {\n                        $row[] = ($asset->next_audit_date) ? $asset->next_audit_date : '';\n                    }\n\n                    if ($request->filled('notes')) {\n                        $row[] = ($asset->notes) ? $asset->notes : '';\n                    }\n\n                    if ($request->filled('url')) {\n                        $row[] = config('app.url').'/hardware/'.$asset->id ;\n                    }\n\n                    foreach ($customfields as $customfield) {\n                        $column_name = $customfield->db_column_name();\n                        if ($request->filled($customfield->db_column_name())) {\n                            $row[] = $asset->$column_name;\n                        }\n                    }\n\n                    \n                    // CSV_ESCAPE_FORMULAS is set to false in the .env\n                    if (config('app.escape_formulas') === false) {\n                        fputcsv($handle, $row);\n\n                   // CSV_ESCAPE_FORMULAS is set to true or is not set in the .env\n                    } else {\n                        fputcsv($handle, $formatter->escapeRecord($row));\n                    }\n\n                    $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n                    \\Log::debug('-- Record '.$count.' Asset ID:'.$asset->id.' in '.$executionTime);\n                }\n            });\n\n            // Close the output stream\n            fclose($handle);\n            $executionTime = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];\n            \\Log::debug('-- SCRIPT COMPLETED IN '.$executionTime);\n        }, 200, [\n            'Content-Type' => 'text/csv',\n            'Content-Disposition' => 'attachment; filename=\"custom-assets-report-'.date('Y-m-d-his').'.csv\"',\n        ]);\n\n        return $response;\n    }\n\n    /**\n     * getImprovementsReport\n     *\n     * @return View\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function getAssetMaintenancesReport()\n    {\n        $this->authorize('reports.view');\n\n        return view('reports.asset_maintenances');\n    }\n\n    /**\n     * exportImprovementsReport\n     *\n     * @return \\Illuminate\\Http\\Response\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function exportAssetMaintenancesReport()\n    {\n        $this->authorize('reports.view');\n        // Grab all the improvements\n        $assetMaintenances = AssetMaintenance::with('asset', 'supplier')\n                                             ->orderBy('created_at', 'DESC')\n                                             ->get();\n\n        $rows = [];\n\n        $header = [\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/asset_maintenances/table.asset_name'),\n            trans('general.supplier'),\n            trans('admin/asset_maintenances/form.asset_maintenance_type'),\n            trans('admin/asset_maintenances/form.title'),\n            trans('admin/asset_maintenances/form.start_date'),\n            trans('admin/asset_maintenances/form.completion_date'),\n            trans('admin/asset_maintenances/form.asset_maintenance_time'),\n            trans('admin/asset_maintenances/form.cost'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(',', $header);\n\n        foreach ($assetMaintenances as $assetMaintenance) {\n            $row = [];\n            $row[] = str_replace(',', '', e($assetMaintenance->asset->asset_tag));\n            $row[] = str_replace(',', '', e($assetMaintenance->asset->name));\n            $row[] = str_replace(',', '', e($assetMaintenance->supplier->name));\n            $row[] = e($assetMaintenance->improvement_type);\n            $row[] = e($assetMaintenance->title);\n            $row[] = e($assetMaintenance->start_date);\n            $row[] = e($assetMaintenance->completion_date);\n            if (is_null($assetMaintenance->asset_maintenance_time)) {\n                $improvementTime = intval(Carbon::now()\n                                                 ->diffInDays(Carbon::parse($assetMaintenance->start_date)));\n            } else {\n                $improvementTime = intval($assetMaintenance->asset_maintenance_time);\n            }\n            $row[]  = $improvementTime;\n            $row[]  = trans('general.currency') . Helper::formatCurrencyOutput($assetMaintenance->cost);\n            $rows[] = implode(',', $row);\n        }\n\n        // spit out a csv\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n     * getAssetAcceptanceReport\n     *\n     * @return mixed\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function getAssetAcceptanceReport($deleted = false)\n    {\n        $this->authorize('reports.view');\n        $showDeleted = $deleted == 'deleted';\n\n        /**\n         * Get all assets with pending checkout acceptances\n         */\n        if($showDeleted) {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->withTrashed()->with(['assignedTo' , 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        } else {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->with(['assignedTo' => function ($query) {\n                $query->withTrashed();\n            }, 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        }\n\n        $assetsForReport = $acceptances\n            ->filter(function ($acceptance) {\n                $acceptance_checkoutable_flag = false;\n                if ($acceptance->checkoutable){\n                    $acceptance_checkoutable_flag = $acceptance->checkoutable->checkedOutToUser();\n                }\n                \n                return $acceptance->checkoutable_type == 'App\\Models\\Asset' && $acceptance_checkoutable_flag;\n            })\n            ->map(function($acceptance) {\n                return ['assetItem' => $acceptance->checkoutable, 'acceptance' => $acceptance];\n            });\n\n        return view('reports/unaccepted_assets', compact('assetsForReport','showDeleted' ));\n    }\n\n    /**\n     * sentAssetAcceptanceReminder\n     *\n     * @param integer|null $acceptanceId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     * @version v1.0\n     */\n    public function sentAssetAcceptanceReminder(Request $request)\n    {\n        $this->authorize('reports.view');\n\n        if (!$acceptance = CheckoutAcceptance::pending()->find($request->input('acceptance_id'))) {\n            \\Log::debug('No pending acceptances');\n            // Redirect to the unaccepted assets report page with error\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        }\n\n        $assetItem = $acceptance->checkoutable;\n\n        \\Log::debug(print_r($assetItem, true));\n\n        if (is_null($acceptance->created_at)){\n            \\Log::debug('No acceptance created_at');\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        } else {\n            $logItem_res = $assetItem->checkouts()->where('created_at', '=', $acceptance->created_at)->get();\n\n            \\Log::debug('Acceptance created at: '.$acceptance->created_at);\n            \\Log::debug(print_r($logItem_res, true));\n\n            if ($logItem_res->isEmpty()){\n                \\Log::debug('Acceptance date mismatch');\n                return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n            }\n            $logItem = $logItem_res[0];\n        }\n\n        if (!$assetItem->assignedTo->locale){\n            Notification::locale(Setting::getSettings()->locale)->send(\n                $assetItem->assignedTo,\n                new CheckoutAssetNotification($assetItem, $assetItem->assignedTo, $logItem->user, $acceptance, $logItem->note)\n            );\n        } else {\n            Notification::send(\n                $assetItem->assignedTo,\n                new CheckoutAssetNotification($assetItem, $assetItem->assignedTo, $logItem->user, $acceptance, $logItem->note)\n            );\n        }\n\n        return redirect()->route('reports/unaccepted_assets')->with('success', trans('admin/reports/general.reminder_sent'));\n    }\n\n    /**\n     * sentAssetAcceptanceReminder\n     *\n     * @param integer|null $acceptanceId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     * @version v1.0\n     */\n    public function deleteAssetAcceptance($acceptanceId = null)\n    {\n        $this->authorize('reports.view');\n\n        if (!$acceptance = CheckoutAcceptance::pending()->find($acceptanceId)) {\n            // Redirect to the unaccepted assets report page with error\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.bad_data'));\n        }\n\n        if($acceptance->delete()) {\n            return redirect()->route('reports/unaccepted_assets')->with('success', trans('admin/reports/general.acceptance_deleted'));\n        } else {\n            return redirect()->route('reports/unaccepted_assets')->with('error', trans('general.deletion_failed'));\n        }\n    }\n\n    /**\n     * Exports the AssetAcceptance report to CSV\n     *\n     * @return \\Illuminate\\Http\\Response\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    public function postAssetAcceptanceReport($deleted = false)\n    {\n        $this->authorize('reports.view');\n        $showDeleted = $deleted == 'deleted';\n\n        /**\n         * Get all assets with pending checkout acceptances\n         */\n        if($showDeleted) {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->withTrashed()->with(['assignedTo', 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        } else {\n            $acceptances = CheckoutAcceptance::pending()->where('checkoutable_type', 'App\\Models\\Asset')->with(['assignedTo', 'checkoutable.assignedTo', 'checkoutable.model'])->get();\n        }\n\n        $assetsForReport = $acceptances\n            ->filter(function($acceptance) {\n                return $acceptance->checkoutable_type == 'App\\Models\\Asset';\n            })\n            ->map(function($acceptance) {\n                return ['assetItem' => $acceptance->checkoutable, 'acceptance' => $acceptance];\n            });\n\n        $rows = [];\n\n        $header = [\n            trans('general.category'),\n            trans('admin/hardware/form.model'),\n            trans('admin/hardware/form.name'),\n            trans('admin/hardware/table.asset_tag'),\n            trans('admin/hardware/table.checkoutto'),\n        ];\n\n        $header = array_map('trim', $header);\n        $rows[] = implode(',', $header);\n\n        foreach ($assetsForReport as $item) {\n\n            if ($item['assetItem'] != null){\n            \n                $row    = [ ];\n                $row[]  = str_replace(',', '', e($item['assetItem']->model->category->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->model->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->name));\n                $row[]  = str_replace(',', '', e($item['assetItem']->asset_tag));\n                $row[]  = str_replace(',', '', e(($item['acceptance']->assignedTo) ? $item['acceptance']->assignedTo->present()->name() : trans('admin/reports/general.deleted_user')));\n                $rows[] = implode(',', $row);\n            }\n        }\n\n        // spit out a csv\n        $csv      = implode(\"\\n\", $rows);\n        $response = Response::make($csv, 200);\n        $response->header('Content-Type', 'text/csv');\n        $response->header('Content-disposition', 'attachment;filename=report.csv');\n\n        return $response;\n    }\n\n    /**\n     * getCheckedOutAssetsRequiringAcceptance\n     *\n     * @param $modelsInCategoriesThatRequireAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getCheckedOutAssetsRequiringAcceptance($modelsInCategoriesThatRequireAcceptance)\n    {\n        $this->authorize('reports.view');\n        $assets = Asset::deployed()\n                        ->inModelList($modelsInCategoriesThatRequireAcceptance)\n                        ->select('id')\n                        ->get()\n                        ->toArray();\n\n        return array_pluck($assets, 'id');\n    }\n\n    /**\n     * getModelsInCategoriesThatRequireAcceptance\n     *\n     * @param $assetCategoriesRequiringAcceptance\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getModelsInCategoriesThatRequireAcceptance($assetCategoriesRequiringAcceptance)\n    {\n        $this->authorize('reports.view');\n\n        return array_pluck(Model::inCategory($assetCategoriesRequiringAcceptance)\n                                 ->select('id')\n                                 ->get()\n                                 ->toArray(), 'id');\n    }\n\n    /**\n     * getCategoriesThatRequireAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getCategoriesThatRequireAcceptance()\n    {\n        $this->authorize('reports.view');\n\n        return array_pluck(Category::requiresAcceptance()\n                                    ->select('id')\n                                    ->get()\n                                    ->toArray(), 'id');\n    }\n\n    /**\n     * getAssetsCheckedOutRequiringAcceptance\n     *\n     * @return array\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     */\n    protected function getAssetsCheckedOutRequiringAcceptance()\n    {\n        $this->authorize('reports.view');\n\n        return $this->getCheckedOutAssetsRequiringAcceptance(\n            $this->getModelsInCategoriesThatRequireAcceptance($this->getCategoriesThatRequireAcceptance())\n        );\n    }\n}\n", "<?php\n?>\n@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n    {{ trans('general.unaccepted_asset_report') }}\n    @parent\n@stop\n\n@section('header_right')\n\n    <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group mr-2\" role=\"group\">\n            @if($showDeleted)\n                <a href=\"{{ route('reports/unaccepted_assets') }}\" class=\"btn btn-default\" ><i class=\"fa fa-trash icon-white\" aria-hidden=\"true\"></i> {{ trans('general.hide_deleted') }}</a>\n            @else\n                <a href=\"{{ route('reports/unaccepted_assets', ['deleted' => 'deleted']) }}\" class=\"btn btn-default\" ><i class=\"fa fa-trash icon-white\" aria-hidden=\"true\"></i> {{ trans('general.show_deleted') }}</a>\n            @endif\n        </div>\n        <div class=\"btn-group mr-2\" role=\"group\">\n            {{ Form::open(['method' => 'post', 'class' => 'form-horizontal']) }}\n            {{csrf_field()}}\n            <button type=\"submit\" class=\"btn btn-default\"><i class=\"fa fa-download icon-white\" aria-hidden=\"true\"></i> {{ trans('general.download_all') }}</button>\n            {{ Form::close() }}\n        </div>\n    </div>\n@stop\n\n{{-- Page content --}}\n@section('content')\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"box box-default\">\n      <div class=\"box-body\">\n        <div class=\"table-responsive\">\n\n            <table\n                data-cookie-id-table=\"unacceptedAssetsReport\"\n                data-pagination=\"true\"\n                data-id-table=\"unacceptedAssetsReport\"\n                data-search=\"true\"\n                data-side-pagination=\"client\"\n                data-show-columns=\"true\"\n                data-show-export=\"true\"\n                data-show-refresh=\"true\"\n                data-sort-order=\"asc\"\n                data-sort-name=\"created_at\"\n                id=\"unacceptedAssetsReport\"\n                class=\"table table-striped snipe-table\"\n                data-export-options='{\n                    \"fileName\": \"maintenance-report-{{ date('Y-m-d') }}\",\n                    \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                    }'>\n            <thead>\n              <tr role=\"row\">\n                <th class=\"col-sm-1\" data-searchable=\"false\" data-field=\"created_at\"  data-sortable=\"true\">{{ trans('general.date') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/companies/table.title') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('general.category') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/form.model') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/form.name') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/table.asset_tag') }}</th>\n                <th class=\"col-sm-1\" data-sortable=\"true\" >{{ trans('admin/hardware/table.checkoutto') }}</th>\n                <th class=\"col-md-1\"><span class=\"line\"></span>{{ trans('table.actions') }}</th>\n              </tr>\n            </thead>\n            <tbody>\n              @if ($assetsForReport)\n              @foreach ($assetsForReport as $item)\n                  @if ($item['assetItem'])\n                  <tr @if($item['acceptance']->trashed()) style=\"text-decoration: line-through\" @endif>\n                    <td>{{ $item['acceptance']->created_at }}</td>\n                    <td>{{ ($item['assetItem']->company) ? $item['assetItem']->company->name : '' }}</td>\n                    <td>{!! $item['assetItem']->model->category->present()->nameUrl() !!}</td>\n                    <td>{!! $item['assetItem']->present()->modelUrl() !!}</td>\n                    <td>{!! $item['assetItem']->present()->nameUrl() !!}</td>\n                    <td>{{ $item['assetItem']->asset_tag }}</td>\n                    <td @if($item['acceptance']->assignedTo === null || $item['acceptance']->assignedTo->trashed()) style=\"text-decoration: line-through\" @endif>{!! ($item['acceptance']->assignedTo) ? $item['acceptance']->assignedTo->present()->nameUrl() : trans('admin/reports/general.deleted_user') !!}</td>\n                    <td class=\"white-space: nowrap;\">\n                        <nobr>\n                        @if(!$item['acceptance']->trashed())\n                           <form method=\"post\" class=\"white-space: nowrap;\" action=\"{{ route('reports/unaccepted_assets_sent_reminder') }}\">\n                            @if ($item['acceptance']->assignedTo)\n                                @csrf\n                               <input type=\"hidden\" name=\"acceptance_id\" value=\"{{ $item['acceptance']->id }}\">\n                                <button class=\"btn btn-sm btn-warning\" data-tooltip=\"true\" data-title=\"{{ trans('admin/reports/general.send_reminder') }}\">\n                                    <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n                                </button>\n\n                            @endif\n                            <a href=\"{{ route('reports/unaccepted_assets_delete', ['acceptanceId' => $item['acceptance']->id]) }}\" class=\"btn btn-sm btn-danger delete-asset\" data-tooltip=\"true\" data-toggle=\"modal\" data-content=\"{{ trans('general.delete_confirm', ['item' =>trans('admin/reports/general.acceptance_request')]) }}\" data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>\n                           </form>\n                        @endif\n\n                        </nobr>\n                    </td>\n                  </tr>\n                  @endif\n              @endforeach\n              @endif\n            </tbody>\n            <tfoot>\n              <tr>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n@stop\n\n@section('moar_scripts')\n    @include ('partials.bootstrap-table')\n@stop\n", "<?php\n\nuse App\\Http\\Controllers\\Account;\nuse App\\Http\\Controllers\\ActionlogController;\nuse App\\Http\\Controllers\\CategoriesController;\nuse App\\Http\\Controllers\\CompaniesController;\nuse App\\Http\\Controllers\\DashboardController;\nuse App\\Http\\Controllers\\DepartmentsController;\nuse App\\Http\\Controllers\\DepreciationsController;\nuse App\\Http\\Controllers\\GroupsController;\nuse App\\Http\\Controllers\\HealthController;\nuse App\\Http\\Controllers\\ImportsController;\nuse App\\Http\\Controllers\\LabelsController;\nuse App\\Http\\Controllers\\LocationsController;\nuse App\\Http\\Controllers\\ManufacturersController;\nuse App\\Http\\Controllers\\ModalController;\nuse App\\Http\\Controllers\\ProfileController;\nuse App\\Http\\Controllers\\ReportsController;\nuse App\\Http\\Controllers\\SettingsController;\nuse App\\Http\\Controllers\\StatuslabelsController;\nuse App\\Http\\Controllers\\SuppliersController;\nuse App\\Http\\Controllers\\ViewAssetsController;\nuse App\\Http\\Controllers\\Auth\\LoginController;\nuse App\\Http\\Controllers\\Auth\\ForgotPasswordController;\nuse App\\Http\\Controllers\\Auth\\ResetPasswordController;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Auth;\n\nRoute::group(['middleware' => 'auth'], function () {\n    /*\n    * Companies\n    */\n    Route::resource('companies', CompaniesController::class, [\n        'parameters' => ['company' => 'company_id'],\n    ]);\n\n    /*\n    * Categories\n    */\n    Route::resource('categories', CategoriesController::class, [\n        'parameters' => ['category' => 'category_id'],\n    ]);\n  \n    /*\n    * Labels\n    */\n    Route::get(\n        'labels/{labelName}',\n        [LabelsController::class, 'show']\n    )->where('labelName', '.*')->name('labels.show');\n\n    /*\n     * Locations\n     */\n\n    Route::group(['prefix' => 'locations', 'middleware' => ['auth']], function () {\n        \n        Route::get('{locationId}/clone',\n            [LocationsController::class, 'getClone']\n        )->name('clone/location');\n\n        Route::get(\n            '{locationId}/printassigned',\n            [LocationsController::class, 'print_assigned']\n        )->name('locations.print_assigned');\n\n        Route::get(\n            '{locationId}/printallassigned',\n            [LocationsController::class, 'print_all_assigned']\n        )->name('locations.print_all_assigned');\n    });\n\n    Route::resource('locations', LocationsController::class, [\n        'parameters' => ['location' => 'location_id'],\n    ]);\n\n\n    /*\n    * Manufacturers\n    */\n\n    Route::group(['prefix' => 'manufacturers', 'middleware' => ['auth']], function () {\n        Route::post('{manufacturers_id}/restore', [ManufacturersController::class, 'restore'] )->name('restore/manufacturer');\n    });\n\n    Route::resource('manufacturers', ManufacturersController::class, [\n        'parameters' => ['manufacturer' => 'manufacturers_id'],\n    ]);\n\n    /*\n    * Suppliers\n    */\n    Route::resource('suppliers', SuppliersController::class, [\n        'parameters' => ['supplier' => 'supplier_id'],\n    ]);\n\n    /*\n    * Depreciations\n     */\n    Route::resource('depreciations', DepreciationsController::class, [\n         'parameters' => ['depreciation' => 'depreciation_id'],\n     ]);\n\n    /*\n    * Status Labels\n     */\n    Route::resource('statuslabels', StatuslabelsController::class, [\n          'parameters' => ['statuslabel' => 'statuslabel_id'],\n      ]);\n\n    /*\n    * Departments\n    */\n    Route::resource('departments', DepartmentsController::class, [\n        'parameters' => ['department' => 'department_id'],\n    ]);\n});\n\n/*\n|\n|--------------------------------------------------------------------------\n| Re-Usable Modal Dialog routes.\n|--------------------------------------------------------------------------\n|\n| Routes for various modal dialogs to interstitially create various things\n|\n*/\n\nRoute::group(['middleware' => 'auth', 'prefix' => 'modals'], function () {\n    Route::get('{type}/{itemId?}', [ModalController::class, 'show'] )->name('modal.show');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Log Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['middleware' => 'auth'], function () {\n    Route::get(\n        'display-sig/{filename}',\n        [ActionlogController::class, 'displaySig']\n    )->name('log.signature.view');\n    Route::get(\n        'stored-eula-file/{filename}',\n        [ActionlogController::class, 'getStoredEula']\n    )->name('log.storedeula.download');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Admin Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['prefix' => 'admin', 'middleware' => ['auth', 'authorize:superuser']], function () {\n    Route::get('settings', [SettingsController::class, 'getSettings'])->name('settings.general.index');\n    Route::post('settings', [SettingsController::class, 'postSettings'])->name('settings.general.save');\n\n    Route::get('branding', [SettingsController::class, 'getBranding'])->name('settings.branding.index');\n    Route::post('branding', [SettingsController::class, 'postBranding'])->name('settings.branding.save');\n\n    Route::get('security', [SettingsController::class, 'getSecurity'])->name('settings.security.index');\n    Route::post('security', [SettingsController::class, 'postSecurity'])->name('settings.security.save');\n\n    Route::get('groups', [GroupsController::class, 'index'])->name('settings.groups.index');\n\n    Route::get('localization', [SettingsController::class, 'getLocalization'])->name('settings.localization.index');\n    Route::post('localization', [SettingsController::class, 'postLocalization'])->name('settings.localization.save');\n\n    Route::get('notifications', [SettingsController::class, 'getAlerts'])->name('settings.alerts.index');\n    Route::post('notifications', [SettingsController::class, 'postAlerts'])->name('settings.alerts.save');\n\n    Route::get('slack', [SettingsController::class, 'getSlack'])->name('settings.slack.index');\n    Route::post('slack', [SettingsController::class, 'postSlack'])->name('settings.slack.save');\n\n    Route::get('asset_tags', [SettingsController::class, 'getAssetTags'])->name('settings.asset_tags.index');\n    Route::post('asset_tags', [SettingsController::class, 'postAssetTags'])->name('settings.asset_tags.save');\n\n    Route::get('barcodes', [SettingsController::class, 'getBarcodes'])->name('settings.barcodes.index');\n    Route::post('barcodes', [SettingsController::class, 'postBarcodes'])->name('settings.barcodes.save');\n\n    Route::get('labels', [SettingsController::class, 'getLabels'])->name('settings.labels.index');\n    Route::post('labels', [SettingsController::class, 'postLabels'])->name('settings.labels.save');\n\n    Route::get('ldap', [SettingsController::class, 'getLdapSettings'])->name('settings.ldap.index');\n    Route::post('ldap', [SettingsController::class, 'postLdapSettings'])->name('settings.ldap.save');\n\n    Route::get('phpinfo', [SettingsController::class, 'getPhpInfo'])->name('settings.phpinfo.index');\n\n    Route::get('oauth', [SettingsController::class, 'api'])->name('settings.oauth.index');\n\n    Route::get('google', [SettingsController::class, 'getGoogleLoginSettings'])->name('settings.google.index');\n    Route::post('google', [SettingsController::class, 'postGoogleLoginSettings'])->name('settings.google.save');\n\n    Route::get('purge', [SettingsController::class, 'getPurge'])->name('settings.purge.index');\n    Route::post('purge', [SettingsController::class, 'postPurge'])->name('settings.purge.save');\n\n    Route::get('login-attempts', [SettingsController::class, 'getLoginAttempts'])->name('settings.logins.index');\n\n    // Backups\n    Route::group(['prefix' => 'backups', 'middleware' => 'auth'], function () {\n        Route::get('download/{filename}',\n            [SettingsController::class, 'downloadFile'])->name('settings.backups.download');\n\n        Route::delete('delete/{filename}',\n            [SettingsController::class, 'deleteFile'])->name('settings.backups.destroy');\n\n        Route::post('/', \n            [SettingsController::class, 'postBackups']\n        )->name('settings.backups.create');\n\n        Route::post('/restore/{filename}', \n            [SettingsController::class, 'postRestore']\n        )->name('settings.backups.restore');\n\n        Route::post('/upload', \n            [SettingsController::class, 'postUploadBackup']\n        )->name('settings.backups.upload');\n\n        Route::get('/', [SettingsController::class, 'getBackups'])->name('settings.backups.index');\n    });\n\n    Route::resource('groups', GroupsController::class, [\n        'middleware' => ['auth'],\n        'parameters' => ['group' => 'group_id'],\n    ]);\n\n    Route::get('/', [SettingsController::class, 'index'])->name('settings.index');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Importer Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\n\nRoute::get('/import',\n    \\App\\Http\\Livewire\\Importer::class\n)->middleware('auth')->name('imports.index');\n\n/*\n|--------------------------------------------------------------------------\n| Account Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group(['prefix' => 'account', 'middleware' => ['auth']], function () {\n\n    // Profile\n    Route::get('profile', [ProfileController::class, 'getIndex'])->name('profile');\n    Route::post('profile', [ProfileController::class, 'postIndex']);\n\n    Route::get('menu', [ProfileController::class, 'getMenuState'])->name('account.menuprefs');\n\n    Route::get('password', [ProfileController::class, 'password'])->name('account.password.index');\n    Route::post('password', [ProfileController::class, 'passwordSave']);\n\n    Route::get('api', [ProfileController::class, 'api'])->name('user.api');\n\n    // View Assets\n    Route::get('view-assets', [ViewAssetsController::class, 'getIndex'])->name('view-assets');\n\n    Route::get('requested', [ViewAssetsController::class, 'getRequestedAssets'])->name('account.requested');\n\n    // Profile\n    Route::get(\n        'requestable-assets',\n        [ViewAssetsController::class, 'getRequestableIndex']\n    )->name('requestable-assets');\n    Route::post(\n        'request-asset/{assetId}',\n        [ViewAssetsController::class, 'getRequestAsset']\n    )->name('account/request-asset');\n\n    Route::post(\n        'request/{itemType}/{itemId}/{cancel_by_admin?}/{requestingUser?}',\n        [ViewAssetsController::class, 'getRequestItem']\n    )->name('account/request-item');\n\n    // Account Dashboard\n    Route::get('/', [ViewAssetsController::class, 'getIndex'])->name('account');\n\n    Route::get('accept', [Account\\AcceptanceController::class, 'index'])\n        ->name('account.accept');\n\n    Route::get('accept/{id}', [Account\\AcceptanceController::class, 'create'])\n        ->name('account.accept.item');\n\n    Route::post('accept/{id}', [Account\\AcceptanceController::class, 'store'])\n        ->name('account.store-acceptance');\n\n    Route::get(\n        'print',\n        [\n            ProfileController::class,\n            'printInventory'\n        ]\n    )->name('profile.print');\n\n    Route::post(\n        'email',\n        [\n            ProfileController::class,\n            'emailAssetList'\n        ]\n    )->name('profile.email_assets');\n\n});\n\nRoute::group(['middleware' => ['auth']], function () {\n    Route::get('reports/audit', \n        [ReportsController::class, 'audit']\n    )->name('reports.audit');\n\n    Route::get(\n        'reports/depreciation',\n        [ReportsController::class, 'getDeprecationReport']\n    )->name('reports/depreciation');\n    Route::get(\n        'reports/export/depreciation',\n        [ReportsController::class, 'exportDeprecationReport']\n    )->name('reports/export/depreciation');\n    Route::get(\n        'reports/asset_maintenances',\n        [ReportsController::class, 'getAssetMaintenancesReport']\n    )->name('reports/asset_maintenances');\n    Route::get(\n        'reports/export/asset_maintenances',\n        [ReportsController::class, 'exportAssetMaintenancesReport']\n    )->name('reports/export/asset_maintenances');\n    Route::get(\n        'reports/licenses',\n        [ReportsController::class, 'getLicenseReport']\n    )->name('reports/licenses');\n    Route::get(\n        'reports/export/licenses',\n        [ReportsController::class, 'exportLicenseReport']\n    )->name('reports/export/licenses');\n\n    Route::get('reports/accessories', [ReportsController::class, 'getAccessoryReport'])->name('reports/accessories');\n    Route::get(\n        'reports/export/accessories',\n        [ReportsController::class, 'exportAccessoryReport']\n    )->name('reports/export/accessories');\n    Route::get('reports/custom', [ReportsController::class, 'getCustomReport'])->name('reports/custom');\n    Route::post('reports/custom', [ReportsController::class, 'postCustom']);\n\n    Route::get(\n        'reports/activity',\n        [ReportsController::class, 'getActivityReport']\n    )->name('reports.activity');\n\n    Route::post('reports/activity', [ReportsController::class, 'postActivityReport']);\n\n    Route::get(\n        'reports/unaccepted_assets/{deleted?}',\n        [ReportsController::class, 'getAssetAcceptanceReport']\n    )->name('reports/unaccepted_assets');\n    Route::post(\n        'reports/unaccepted_assets/sent_reminder',\n        [ReportsController::class, 'sentAssetAcceptanceReminder']\n    )->name('reports/unaccepted_assets_sent_reminder');\n    Route::delete(\n        'reports/unaccepted_assets/{acceptanceId}/delete',\n        [ReportsController::class, 'deleteAssetAcceptance']\n    )->name('reports/unaccepted_assets_delete');\n    Route::post(\n        'reports/unaccepted_assets/{deleted?}',\n        [ReportsController::class, 'postAssetAcceptanceReport']\n    )->name('reports/export/unaccepted_assets');\n});\n\nRoute::get(\n    'auth/signin',\n    [LoginController::class, 'legacyAuthRedirect']\n);\n\n\n/*\n|--------------------------------------------------------------------------\n| Setup Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group(['prefix' => 'setup', 'middleware' => 'web'], function () {\n    Route::get(\n        'user',\n        [SettingsController::class, 'getSetupUser']\n    )->name('setup.user');\n\n    Route::post(\n        'user',\n        [SettingsController::class, 'postSaveFirstAdmin']\n    )->name('setup.user.save');\n\n\n    Route::get(\n        'migrate',\n        [SettingsController::class, 'getSetupMigrate']\n    )->name('setup.migrate');\n\n    Route::get(\n        'done',\n        [SettingsController::class, 'getSetupDone']\n    )->name('setup.done');\n\n    Route::get(\n        'mailtest',\n        [SettingsController::class, 'ajaxTestEmail']\n    )->name('setup.mailtest');\n\n    Route::get(\n        '/',\n        [SettingsController::class, 'getSetupIndex']\n    )->name('setup');\n});\n\n\n\n\n\nRoute::group(['middleware' => 'web'], function () {\n\n    Route::get(\n        'login',\n        [LoginController::class, 'showLoginForm']\n    )->name(\"login\");\n\n    Route::post(\n        'login',\n        [LoginController::class, 'login']\n    );\n\n    Route::get(\n        'two-factor-enroll',\n        [LoginController::class, 'getTwoFactorEnroll']\n    )->name('two-factor-enroll');\n\n    Route::get(\n        'two-factor',\n        [LoginController::class, 'getTwoFactorAuth']\n    )->name('two-factor');\n\n    Route::post(\n        'two-factor',\n        [LoginController::class, 'postTwoFactorAuth']\n    );\n\n    Route::post(\n        'password/email',\n        [ForgotPasswordController::class, 'sendResetLinkEmail']\n    )->name('password.email')->middleware('throttle:forgotten_password');\n\n    Route::get(\n        'password/reset',\n        [ForgotPasswordController::class, 'showLinkRequestForm']\n    )->name('password.request')->middleware('throttle:forgotten_password');\n\n\n    Route::post(\n        'password/reset',\n        [ResetPasswordController::class, 'reset']\n    )->name('password.update')->middleware('throttle:forgotten_password');\n\n    Route::get(\n        'password/reset/{token}',\n        [ResetPasswordController::class, 'showResetForm']\n    )->name('password.reset');\n\n\n    Route::post(\n        'password/email',\n        [ForgotPasswordController::class, 'sendResetLinkEmail']\n    )->name('password.email')->middleware('throttle:forgotten_password');\n\n\n     // Socialite Google login\n    Route::get('google', 'App\\Http\\Controllers\\GoogleAuthController@redirectToGoogle')->name('google.redirect');\n    Route::get('google/callback', 'App\\Http\\Controllers\\GoogleAuthController@handleGoogleCallback')->name('google.callback');\n\n\n    Route::get(\n        '/',\n        [\n            'as' => 'home',\n            'middleware' => ['auth'],\n            'uses' => 'DashboardController@getIndex' ]\n    );\n\n    // need to keep GET /logout for SAML SLO\n    Route::get(\n        'logout',\n        [LoginController::class, 'logout']\n    )->name('logout.get');\n\n    Route::post(\n        'logout',\n        [LoginController::class, 'logout']\n    )->name('logout.post');\n});\n\n//Auth::routes();\n\nRoute::get(\n    '/health', \n    [HealthController::class, 'get']\n)->name('health');\n\nRoute::middleware(['auth'])->get(\n    '/',\n    [DashboardController::class, 'index']\n)->name('home');\n"], "filenames": ["app/Http/Controllers/ReportsController.php", "resources/views/reports/unaccepted_assets.blade.php", "routes/web.php"], "buggy_code_start_loc": [1046, 80, 371], "buggy_code_end_loc": [1067, 84, 373], "fixing_code_start_loc": [1046, 80, 371], "fixing_code_end_loc": [1077, 97, 373], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository snipe/snipe-it prior to v.6.2.3.", "other": {"cve": {"id": "CVE-2023-5511", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-11T01:15:08.887", "lastModified": "2023-10-12T18:02:36.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository snipe/snipe-it prior to v.6.2.3."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub snipe/snipe-it antes de v.6.2.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.2.3", "matchCriteriaId": "C80376C2-1F06-4F40-80C7-A22721890E8F"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/6d55d782806c9660e9e65dc5250faacb5d0033ed", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/43206801-9862-48da-b379-e55e341d78bf", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/6d55d782806c9660e9e65dc5250faacb5d0033ed"}}