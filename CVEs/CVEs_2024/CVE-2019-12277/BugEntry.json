{"buggy_code": ["using Core.Data;\nusing Core.Helpers;\nusing Core.Services;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Linq;\n\nnamespace Core.Api\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class AssetsController : ControllerBase\n    {\n        IDataService _data;\n        IStorageService _store;\n\n        public AssetsController(IDataService data, IStorageService store)\n        {\n            _data = data;\n            _store = store;\n        }\n\n        /// <summary>\n        /// Get list of assets - user saved images and files\n        /// </summary>\n        /// <param name=\"page\">Page number</param>\n        /// <param name=\"filter\">filterImages or filterAttachments</param>\n        /// <param name=\"search\">Search term</param>\n        /// <returns>Model containing collection of assets and Pager object</returns>\n        [HttpGet]\n        public async Task<AssetsModel> Get(int page = 1, string filter = \"\", string search = \"\")\n        {\n            var pager = new Pager(page);\n            IEnumerable<AssetItem> items;\n\n            if (string.IsNullOrEmpty(search))\n            {\n                if (filter == \"filterImages\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager);\n                }\n                else if (filter == \"filterAttachments\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager);\n                }\n                else\n                {\n                    items = await _store.Find(null, pager);\n                }\n            }\n            else\n            {\n                items = await _store.Find(a => a.Title.Contains(search), pager);\n            }\n\n            if (page < 1 || page > pager.LastPage)\n                return null;\n\n            return new AssetsModel\n            {\n                Assets = items,\n                Pager = pager\n            };\n        }\n\n        /// <summary>\n        /// Select an asset in the File Manager to include in the post\n        /// </summary>\n        /// <param name=\"type\">Type of asset (post cover, logo, avatar or post image/attachment)</param>\n        /// <param name=\"asset\">Selected asset</param>\n        /// <param name=\"post\">Post ID</param>\n        /// <returns>Asset Item</returns>\n        [HttpGet(\"pick\")]\n        public async Task<AssetItem> Pick(string type, string asset, string post)\n        {\n            if (type == \"postCover\")\n            {\n                await _data.BlogPosts.SaveCover(int.Parse(post), asset);\n            }\n            else if (type == \"appCover\")\n            {\n                var cover = _data.CustomFields.Single(f => f.AuthorId == 0 && f.Name == Constants.BlogCover);\n                if (cover == null)\n                    _data.CustomFields.Add(new CustomField { AuthorId = 0, Name = Constants.BlogCover, Content = asset });\n                else\n                    cover.Content = asset;\n                _data.Complete();\n            }\n            else if (type == \"appLogo\")\n            {\n                var logo = _data.CustomFields.Single(f => f.AuthorId == 0 && f.Name == Constants.BlogLogo);\n                if (logo == null)\n                    _data.CustomFields.Add(new CustomField { AuthorId = 0, Name = Constants.BlogLogo, Content = asset });\n                else\n                    logo.Content = asset;\n                _data.Complete();\n            }\n            else if (type == \"avatar\")\n            {\n                var user = _data.Authors.Single(a => a.AppUserName == User.Identity.Name);\n                user.Avatar = asset;\n                _data.Complete();\n            }\n\n            var item = await _store.Find(a => a.Url == asset, new Pager(1));\n            return item.FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Upload file(s) to user data store\n        /// </summary>\n        /// <param name=\"files\">Selected files</param>\n        /// <returns>Success or internal error</returns>\n        [HttpPost(\"upload\")]\n        public async Task<IActionResult> Upload(ICollection<IFormFile> files)\n        {\n            try\n            {\n                foreach (var file in files)\n                {\n                    await SaveFile(file);\n                }\n                return Ok(\"Created\");\n            }\n            catch (Exception)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, \"File upload error\");\n            }\n        }\n\n        /// <summary>\n        /// Remove file from user data store, authentication required\n        /// </summary>\n        /// <param name=\"url\">Relative URL of the file to remove</param>\n        /// <returns></returns>\n        [HttpDelete(\"remove\")]\n        public IActionResult Remove(string url)\n        {\n            try\n            {\n                _store.DeleteFile(url);\n                return Ok(\"Deleted\");\n            }\n            catch (Exception)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, \"File delete error\");\n            }\n        }\n\n        async Task<AssetItem> SaveFile(IFormFile file)\n        {\n            var path = string.Format(\"{0}/{1}\", DateTime.Now.Year, DateTime.Now.Month);\n            return await _store.UploadFormFile(file, Url.Content(\"~/\"), path);\n        }\n    }\n}", "<?xml version=\"1.0\"?>\n<doc>\n    <assembly>\n        <name>Core</name>\n    </assembly>\n    <members>\n        <member name=\"M:Core.Api.AssetsController.Get(System.Int32,System.String,System.String)\">\n            <summary>\n            Get list of assets - user saved images and files\n            </summary>\n            <param name=\"page\">Page number</param>\n            <param name=\"filter\">filterImages or filterAttachments</param>\n            <param name=\"search\">Search term</param>\n            <returns>Model containing collection of assets and Pager object</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Pick(System.String,System.String,System.String)\">\n            <summary>\n            Select an asset in the File Manager to include in the post\n            </summary>\n            <param name=\"type\">Type of asset (post cover, logo, avatar or post image/attachment)</param>\n            <param name=\"asset\">Selected asset</param>\n            <param name=\"post\">Post ID</param>\n            <returns>Asset Item</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Upload(System.Collections.Generic.ICollection{Microsoft.AspNetCore.Http.IFormFile})\">\n            <summary>\n            Upload file(s) to user data store\n            </summary>\n            <param name=\"files\">Selected files</param>\n            <returns>Success or internal error</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Remove(System.String)\">\n            <summary>\n            Remove file from user data store, authentication required\n            </summary>\n            <param name=\"url\">Relative URL of the file to remove</param>\n            <returns></returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Get(System.Int32)\">\n            <summary>\n            Get list of blog authors\n            </summary>\n            <param name=\"page\">Page number</param>\n            <returns>List of authors</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Get(System.String)\">\n            <summary>\n            Get single author by name\n            </summary>\n            <param name=\"author\">Author name used during registration</param>\n            <returns>Author object</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Post(Core.Data.Models.RegisterModel)\">\n            <summary>\n            Register new author. Authorized admins only.\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Created Author object</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Update(Core.Data.Author)\">\n            <summary>\n            Update author\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.ChangePwd(Core.Data.Models.ChangePasswordModel)\">\n            <summary>\n            Change author password. Authorized users only.\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Delete(System.String)\">\n            <summary>\n            Delete author, from membership, database and file system. Admin only.\n            </summary>\n            <param name=\"id\">Author ID</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Search(System.String,System.String,System.String,System.Int32)\">\n            <summary>\n            Search blog posts by term\n            </summary>\n            <param name=\"term\">Search term</param>\n            <param name=\"author\">Author</param>\n            <param name=\"include\">Posts to include: all by default; F - featured, D - drafts, P - published</param>\n            <param name=\"page\">Page number</param>\n            <returns>Model with list of posts and pager</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Get(System.String,System.String,System.String,System.Int32)\">\n            <summary>\n            Get list of blog posts\n            </summary>\n            <param name=\"author\">Post author</param>\n            <param name=\"category\">Post category</param>\n            <param name=\"include\">Posts to include: all by default; F - featured, D - drafts, P - published</param>\n            <param name=\"page\">Page number</param>\n            <returns>Model with list of posts and pager</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.GetPost(System.Int32)\">\n            <summary>\n            Get single post by ID\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <returns>Post item</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Publish(System.Int32,System.String)\">\n            <summary>\n            Set post as published or draft\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <param name=\"flag\">Flag; P - publish, U - unpublish</param>\n            <returns>Success of failure</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Feature(System.Int32,System.String)\">\n            <summary>\n            Set post as featured\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <param name=\"flag\">Flag; F - featured, U - remove from featured</param>\n            <returns></returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Post(Core.Data.PostItem)\">\n            <summary>\n            Save blog post\n            </summary>\n            <param name=\"post\">Post item</param>\n            <returns>Saved post item</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Remove(System.Int32)\">\n            <summary>\n            Remove post item\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.GetCultures\">\n            <summary>\n            Get list of cultures\n            </summary>\n            <returns>List of supported languages</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.Get\">\n            <summary>\n            Get blog settings\n            </summary>\n            <returns>Blog settings</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.Post(Core.Data.BlogItem)\">\n            <summary>\n            Save blog settings\n            </summary>\n            <param name=\"model\">Blog settings item</param>\n            <returns>Saved blog item</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Get(System.Int32)\">\n            <summary>\n            Get list of themes\n            </summary>\n            <param name=\"page\">Page number</param>\n            <returns>List of themes</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Put(System.String)\">\n            <summary>\n            Set theme as current for a blog\n            </summary>\n            <param name=\"id\">Theme ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Delete(System.String)\">\n            <summary>\n            Remove and unistall theme from the blog\n            </summary>\n            <param name=\"id\">Theme ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"P:Core.Data.Author.Id\">\n            <summary>\n            Author ID\n            </summary>\n        </member>\n        <member name=\"M:Core.StringExtensions.ExtractTitle(System.String)\">\n            <summary>\n            Should extract title (file name) from file path or Url\n            </summary>\n            <param name=\"str\">c:\\foo\\test.png</param>\n            <returns>test.png</returns>\n        </member>\n        <member name=\"M:Core.StringExtensions.ToSlug(System.String)\">\n            <summary>\n            Converts title to valid URL slug\n            </summary>\n            <returns>Slug</returns>\n        </member>\n        <member name=\"M:Core.StringExtensions.ToDescription(System.String)\">\n            <summary>\n            Converts post body to post description\n            </summary>\n            <param name=\"str\">HTML post body</param>\n            <returns>Post decription as plain text</returns>\n        </member>\n    </members>\n</doc>\n", "using System;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Web;\n\nnamespace Core\n{\n    public static class StringExtensions\n    {\n        private static readonly Regex RegexStripHtml = new Regex(\"<[^>]*>\", RegexOptions.Compiled);\n\n        public static string StripHtml(this string str)\n        {\n            return string.IsNullOrWhiteSpace(str) ? string.Empty : RegexStripHtml.Replace(str, string.Empty).Trim();\n        }\n\n        /// <summary>\n        /// Should extract title (file name) from file path or Url\n        /// </summary>\n        /// <param name=\"str\">c:\\foo\\test.png</param>\n        /// <returns>test.png</returns>\n        public static string ExtractTitle(this string str)\n        {\n            if (str.Contains(\"\\\\\"))\n            {\n                return string.IsNullOrWhiteSpace(str) ? string.Empty : str.Substring(str.LastIndexOf(\"\\\\\")).Replace(\"\\\\\", \"\");\n            }\n            else if (str.Contains(\"/\"))\n            {\n                return string.IsNullOrWhiteSpace(str) ? string.Empty : str.Substring(str.LastIndexOf(\"/\")).Replace(\"/\", \"\");\n            }\n            else\n            {\n                return str;\n            }\n        }\n\n        /// <summary>\n        /// Converts title to valid URL slug\n        /// </summary>\n        /// <returns>Slug</returns>\n\t\tpublic static string ToSlug(this string title)\n        {\n            var str = title.ToLowerInvariant();\n            str = str.Trim('-', '_');\n\n            if (string.IsNullOrEmpty(str))\n                return string.Empty;\n\n            var bytes = Encoding.GetEncoding(\"utf-8\").GetBytes(str);\n            str = Encoding.UTF8.GetString(bytes);\n\n            str = Regex.Replace(str, @\"\\s\", \"-\", RegexOptions.Compiled);\n            \n            str = Regex.Replace(str, @\"([-_]){2,}\", \"$1\", RegexOptions.Compiled);\n\n            str = RemoveIllegalCharacters(str);\n\n            return str;\n        }\n\n        /// <summary>\n        /// Converts post body to post description\n        /// </summary>\n        /// <param name=\"str\">HTML post body</param>\n        /// <returns>Post decription as plain text</returns>\n        public static string ToDescription(this string str)\n        {\n            str = str.StripHtml();\n            return str.Length > 300 ? str.Substring(0, 300) : str;\n        }\n\n        public static bool Contains(this string source, string toCheck, StringComparison comp)\n        {\n            return source.IndexOf(toCheck, comp) >= 0;\n        }\n\n        // true if string ends with image extension\n        public static bool IsImagePath(this string str)\n        {\n            var exts = AppSettings.ImageExtensions.Split(',');\n\n            foreach (var ext in exts)\n            {\n                if(str.EndsWith(ext, StringComparison.OrdinalIgnoreCase))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public static string ReplaceIgnoreCase(this string str, string search, string replacement)\n        {\n            string result = Regex.Replace(\n                str,\n                Regex.Escape(search),\n                replacement.Replace(\"$\", \"$$\"),\n                RegexOptions.IgnoreCase\n            );\n            return result;\n        }\n\n        public static string MaskPassword(this string str)\n        {\n            var idx = str.IndexOf(\"password=\", StringComparison.OrdinalIgnoreCase);\n\n            if (idx >= 0)\n            {\n                var idxEnd = str.IndexOf(\";\", idx);\n                if (idxEnd > idx)\n                {\n                    return str.Substring(0, idx) + \"Password=******\" + str.Substring(idxEnd);\n                }\n            }\n            return str;\n        }\n\n        public static string ToPrettySize(this int value, int decimalPlaces = 0)\n        {\n            return ((long)value).ToPrettySize(decimalPlaces);\n        }\n\n        public static string ToPrettySize(this long value, int decimalPlaces = 0)\n        {\n            const long OneKb = 1024;\n            const long OneMb = OneKb * 1024;\n            const long OneGb = OneMb * 1024;\n            const long OneTb = OneGb * 1024;\n\n            var asTb = Math.Round((double)value / OneTb, decimalPlaces);\n            var asGb = Math.Round((double)value / OneGb, decimalPlaces);\n            var asMb = Math.Round((double)value / OneMb, decimalPlaces);\n            var asKb = Math.Round((double)value / OneKb, decimalPlaces);\n\n            string chosenValue = asTb > 1 ? string.Format(\"{0}Tb\", asTb)\n                : asGb > 1 ? string.Format(\"{0}Gb\", asGb)\n                : asMb > 1 ? string.Format(\"{0}Mb\", asMb)\n                : asKb > 1 ? string.Format(\"{0}Kb\", asKb)\n                : string.Format(\"{0}B\", Math.Round((double)value, decimalPlaces));\n            return chosenValue;\n        }\n\n        #region Helper Methods\n\n        static string RemoveIllegalCharacters(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return text;\n            }\n\n            string[] chars = new string[] {\n                \":\", \"/\", \"?\", \"!\", \"#\", \"[\", \"]\", \"{\", \"}\", \"@\", \"*\", \".\", \",\",\n                \"\\\"\",\"&\", \"'\", \"~\", \"$\"\n            };\n\n            foreach (var ch in chars)\n            {\n                text = text.Replace(ch, string.Empty);\n            }\n\n            text = text.Replace(\"\u2013\", \"-\");\n            text = text.Replace(\" \", \"-\");\n\n            text = RemoveUnicodePunctuation(text);\n            text = RemoveDiacritics(text);\n            text = RemoveExtraHyphen(text);\n\n            return HttpUtility.HtmlEncode(text).Replace(\"%\", string.Empty);\n        }\n\n        static string RemoveUnicodePunctuation(string text)\n        {\n            var normalized = text.Normalize(NormalizationForm.FormD);\n            var sb = new StringBuilder();\n\n            foreach (var c in\n                normalized.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.InitialQuotePunctuation &&\n                                      CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.FinalQuotePunctuation))\n            {\n                sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        static string RemoveDiacritics(string text)\n        {\n            var normalized = text.Normalize(NormalizationForm.FormD);\n            var sb = new StringBuilder();\n\n            foreach (var c in\n                normalized.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark))\n            {\n                sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        static string RemoveExtraHyphen(string text)\n        {\n            if (text.Contains(\"--\"))\n            {\n                text = text.Replace(\"--\", \"-\");\n                return RemoveExtraHyphen(text);\n            }\n\n            return text;\n        }\n\n        #endregion\n    }\n}", "using Core.Data;\nusing Core.Helpers;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\nnamespace Core.Services\n{\n    public interface IStorageService\n    {\n        string Location { get; }\n        \n        void CreateFolder(string path);\n        void DeleteFolder(string path);\n        void DeleteAuthor(string name);\n\n        Task<AssetItem> UploadFormFile(IFormFile file, string root, string path = \"\");\n        Task<AssetItem> UploadBase64Image(string baseImg, string root, string path = \"\");\n        Task<AssetItem> UploadFromWeb(Uri requestUri, string root, string path = \"\");\n        void DeleteFile(string path);\n\n        IList<string> GetAssets(string path);\n        IList<string> GetThemes();\n        IList<WidgetItem> GetWidgets(string theme);\n\n        string GetHtmlTemplate(string template);\n\n        Task<IEnumerable<AssetItem>> Find(Func<AssetItem, bool> predicate, Pager pager, string path = \"\");\n\n        Task Reset();\n    }\n\n    public class StorageService : IStorageService\n    {\n        string _blogSlug;\n        string _separator = Path.DirectorySeparatorChar.ToString();\n        string _uploadFolder = \"data\";\n        IHttpContextAccessor _httpContext;\n\n        private readonly ILogger _logger;\n\n        public StorageService(IHttpContextAccessor httpContext, ILogger<StorageService> logger)\n        {\n            if(httpContext == null || httpContext.HttpContext == null)\n            {\n                _blogSlug = \"\";\n            }\n            else\n            {\n                _blogSlug = httpContext.HttpContext.User.Identity.Name;\n            }\n            \n            _httpContext = httpContext;\n            _logger = logger;\n\n            if (!Directory.Exists(Location))\n                CreateFolder(\"\");\n        }\n\n        public string Location\n        {\n            get\n            {\n                var path = AppSettings.WebRootPath ?? Path.Combine(GetAppRoot(), \"wwwroot\");\n\n                path = Path.Combine(path, _uploadFolder.Replace(\"/\", Path.DirectorySeparatorChar.ToString()));\n\n                if (!string.IsNullOrEmpty(_blogSlug))\n                {\n                    path = Path.Combine(path, _blogSlug);\n                }\n                return path;\n            }\n        }\n\n        public IList<string> GetAssets(string path)\n        {\n            path = path.Replace(\"/\", _separator);\n            try\n            {\n                var dir = string.IsNullOrEmpty(path) ? Location : Path.Combine(Location, path);\n                var info = new DirectoryInfo(dir);\n\n                FileInfo[] files = info.GetFiles(\"*\", SearchOption.AllDirectories)\n                    .OrderByDescending(p => p.CreationTime).ToArray();\n\n                if(files != null && files.Any())\n                {\n                    var assets = new List<string>();\n\n                    foreach (FileInfo file in files)\n                    {\n                        assets.Add(file.FullName);\n                    }\n                    return assets;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n            }\n            return null;\n        }\n\n        public IList<string> GetThemes()\n        {\n            var items = new List<string>();\n            var dir = Path.Combine(GetAppRoot(), $\"Views{_separator}Themes\");\n            try\n            {\n                foreach (string d in Directory.GetDirectories(dir))\n                    items.Add(Path.GetFileName(d));\n            }\n            catch { }\n            return items;\n        }\n\n        public IList<WidgetItem> GetWidgets(string theme)\n        {\n            var widgets = new List<WidgetItem>();\n            string jsonFile = $\"{AppSettings.ContentRootPath}{_separator}Views{_separator}Themes{_separator}{theme}{_separator}{theme}.json\";\n\n            if (File.Exists(jsonFile))\n            {\n                using (StreamReader r = new StreamReader(jsonFile))\n                {\n                    string json = r.ReadToEnd();\n                    widgets = JsonConvert.DeserializeObject<List<WidgetItem>>(json);\n                }\n            }\n            return widgets;\n        }\n\n        public string GetHtmlTemplate(string template)\n        {\n            string content = \"<p>Not found</p>\";\n            try\n            {\n                var path = AppSettings.WebRootPath ?? Path.Combine(GetAppRoot(), \"wwwroot\");\n                path = Path.Combine(path, \"templates\");\n                path = Path.Combine(path, $\"{template}.html\");\n\n                if (File.Exists(path))\n                {\n                    content = File.ReadAllText(path);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n            }\n            return content;\n        }\n\n        public async Task<AssetItem> UploadFormFile(IFormFile file, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n\n            VerifyPath(path);\n\n            var fileName = GetFileName(file.FileName);\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            using (var fileStream = new FileStream(filePath, FileMode.Create))\n            {\n                await file.CopyToAsync(fileStream);\n                return new AssetItem\n                {\n                    Title = fileName,\n                    Path = TrimFilePath(filePath),\n                    Url = GetUrl(filePath, root)\n                };\n            }\n        }\n\n        public async Task<AssetItem> UploadBase64Image(string baseImg, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n            var fileName = \"\";\n\n            VerifyPath(path);\n\n            Random rnd = new Random();\n\n            if (baseImg.StartsWith(\"data:image/png;base64,\"))\n            {\n                fileName = string.Format(\"{0}.png\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/png;base64,\", \"\");\n            }\n            if (baseImg.StartsWith(\"data:image/jpeg;base64,\"))\n            {\n                fileName = string.Format(\"{0}.jpeg\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/jpeg;base64,\", \"\");\n            }\n            if (baseImg.StartsWith(\"data:image/gif;base64,\"))\n            {\n                fileName = string.Format(\"{0}.gif\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/gif;base64,\", \"\");\n            }\n\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            byte[] bytes = Convert.FromBase64String(baseImg);\n\n            await File.WriteAllBytesAsync(filePath, Convert.FromBase64String(baseImg));\n\n            return new AssetItem\n            {\n                Title = fileName,\n                Path = filePath,\n                Url = GetUrl(filePath, root)\n            };\n        }\n\n        public async Task<AssetItem> UploadFromWeb(Uri requestUri, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n\n            VerifyPath(path);\n\n            var fileName = TitleFromUri(requestUri);\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            using (var client = new HttpClient())\n            {\n                using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))\n                {\n                    using (\n                        Stream contentStream = await (await client.SendAsync(request)).Content.ReadAsStreamAsync(),\n                        stream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 3145728, true))\n                    {\n                        await contentStream.CopyToAsync(stream);\n                        return new AssetItem\n                        {\n                            Title = fileName,\n                            Path = filePath,\n                            Url = GetUrl(filePath, root)\n                        };\n                    }\n                }\n            }\n        }\n\n        public async Task<IEnumerable<AssetItem>> Find(Func<AssetItem, bool> predicate, Pager pager, string path = \"\")\n        {\n            var skip = pager.CurrentPage * pager.ItemsPerPage - pager.ItemsPerPage;\n            var files = GetAssets(path);\n            var items = MapFilesToAssets(files);\n\n            if (predicate != null)\n                items = items.Where(predicate).ToList();\n\n            pager.Configure(items.Count);\n\n            var page = items.Skip(skip).Take(pager.ItemsPerPage).ToList();\n\n            return await Task.FromResult(page);\n        }\n\n        public void CreateFolder(string path)\n        {\n            var dir = GetFullPath(path);\n\n            if (!Directory.Exists(dir))\n                Directory.CreateDirectory(dir);\n        }\n\n        public void DeleteFolder(string path)\n        {\n            var dir = GetFullPath(path);\n\n            if (Directory.Exists(dir))\n                Directory.Delete(dir, true);\n        }\n\n        public void DeleteAuthor(string name)\n        {\n            var dir = Path.GetFullPath(Path.Combine(Location, @\"..\\\"));\n            dir = Path.Combine(dir, name);\n\n            if (Directory.Exists(dir))\n                Directory.Delete(dir, true);\n        }\n\n        public void DeleteFile(string path)\n        {\n            path = path.Replace(\"/\", _separator);\n            path = path.Replace($\"{_uploadFolder}{_separator}{_blogSlug}{_separator}\", \"\");\n            File.Delete(GetFullPath(path));\n        }\n\n        public async Task Reset()\n        {\n            try\n            {\n                var dirs = Directory.GetDirectories(Location);\n                foreach (var dir in dirs)\n                {\n                    if (!dir.EndsWith(\"_init\"))\n                    {\n                        Directory.Delete(dir, true);\n                    }\n                }\n                var srcLoc = Path.Combine(Location, \"_init\");\n\n                foreach (string dirPath in Directory.GetDirectories(srcLoc, \"*\",\n                    SearchOption.AllDirectories))\n                    Directory.CreateDirectory(dirPath.Replace(srcLoc, Location));\n\n                foreach (string newPath in Directory.GetFiles(srcLoc, \"*.*\",\n                    SearchOption.AllDirectories))\n                    File.Copy(newPath, newPath.Replace(srcLoc, Location), true);\n\n                await Task.CompletedTask;\n            }\n            catch { }\n        }\n\n        void VerifyPath(string path)\n        {\n            if (!string.IsNullOrEmpty(path))\n            {\n                var dir = Path.Combine(Location, path);\n\n                if (!Directory.Exists(dir))\n                {\n                    CreateFolder(dir);\n                }\n            }\n        }\n\n        string TrimFilePath(string path)\n        {\n            var p = path.Replace(AppSettings.WebRootPath, \"\");\n            if (p.StartsWith(\"\\\\\")) p = p.Substring(1);\n            return p;\n        }\n\n        string GetFullPath(string path)\n        {\n            if (string.IsNullOrEmpty(path))\n                return Location;\n            else\n                return Path.Combine(Location, path.Replace(\"/\", _separator));\n        }\n\n        string GetFileName(string fileName)\n        {\n            // some browsers pass uploaded file name as short file name \n            // and others include the path; remove path part if needed\n            if (fileName.Contains(_separator))\n            {\n                fileName = fileName.Substring(fileName.LastIndexOf(_separator));\n                fileName = fileName.Replace(_separator, \"\");\n            }\n            // when drag-and-drop or copy image to TinyMce editor\n            // it uses \"mceclip0\" as file name; randomize it for multiple uploads\n            if (fileName.StartsWith(\"mceclip0\"))\n            {\n                Random rnd = new Random();\n                fileName = fileName.Replace(\"mceclip0\", rnd.Next(100000, 999999).ToString());\n            }\n            return fileName;\n        }\n\n        string GetUrl(string path, string root)\n        {\n            var url = path.ReplaceIgnoreCase(Location, \"\").Replace(_separator, \"/\");\n            return string.Concat(_uploadFolder, \"/\", _blogSlug, url);\n        }\n\n        string GetAppRoot()\n        {\n            // normal application run\n            if(!string.IsNullOrEmpty(AppSettings.ContentRootPath))\n                return AppSettings.ContentRootPath;\n\n            // unit tests of seed data load\n            Assembly assembly;\n            var assemblyName = \"Core.Tests\";\n            try\n            {\n                assembly = Assembly.Load(new AssemblyName(assemblyName));\n            }\n            catch\n            {\n                assemblyName = \"App\";\n                assembly = Assembly.Load(new AssemblyName(assemblyName));\n            }\n            \n            var uri = new UriBuilder(assembly.CodeBase);\n            var path = Uri.UnescapeDataString(uri.Path);\n            var root = Path.GetDirectoryName(path);\n            root = root.Substring(0, root.IndexOf(assemblyName));\n\n            if (root.EndsWith($\"tests{_separator}\"))\n            {\n                root = root.Replace($\"tests{_separator}\", $\"src{_separator}\");\n            }\n\n            return Path.Combine(root, \"App\");\n        }\n\n        string TitleFromUri(Uri uri)\n        {\n            var title = uri.ToString().ToLower();\n            title = title.Replace(\"%2f\", \"/\");\n\n            if (title.EndsWith(\".axdx\"))\n            {\n                title = title.Replace(\".axdx\", \"\");\n            }\n            if (title.Contains(\"image.axd?picture=\"))\n            {\n                title = title.Substring(title.IndexOf(\"image.axd?picture=\") + 18);\n            }\n            if (title.Contains(\"file.axd?file=\"))\n            {\n                title = title.Substring(title.IndexOf(\"file.axd?file=\") + 14);\n            }\n            if (title.Contains(\"encrypted-tbn\") || title.Contains(\"base64,\"))\n            {\n                Random rnd = new Random();\n                title = string.Format(\"{0}.png\", rnd.Next(1000, 9999));\n            }\n\n            if (title.Contains(\"/\"))\n            {\n                title = title.Substring(title.LastIndexOf(\"/\"));\n            }\n\n            title = title.Replace(\" \", \"-\");\n\n            return title.Replace(\"/\", \"\");\n        }\n\n        List<AssetItem> MapFilesToAssets(IList<string> assets)\n        {\n            var items = new List<AssetItem>();\n\n            if (assets != null && assets.Any())\n            {\n                foreach (var asset in assets)\n                {\n                    // Azure puts web sites under \"wwwroot\" folder\n                    var path = asset.Replace($\"wwwroot{_separator}wwwroot\", \"wwwroot\", StringComparison.OrdinalIgnoreCase);\n\n                    items.Add(new AssetItem\n                    {\n                        Path = asset,\n                        Url = pathToUrl(path),\n                        Title = pathToTitle(path),\n                        Image = pathToImage(path)\n                    });\n                }\n            }\n            return items;\n        }\n\n        string pathToUrl(string path)\n        {\n            return path.Substring(path.IndexOf(\"wwwroot\") + 8)\n                .Replace(_separator, \"/\");\n        }\n\n        string pathToTitle(string path)\n        {\n            var title = path;\n\n            if(title.LastIndexOf(_separator) > 0)\n                title = title.Substring(title.LastIndexOf(_separator));       \n\n            if(title.IndexOf('.') > 0)\n                title = title.Substring(1, title.LastIndexOf('.') - 1);\n\n            return title;\n        }\n\n        string pathToImage(string path)\n        {\n            if(path.IsImagePath())\n                return pathToUrl(path);\n\n            var ext = \"blank.png\";\n\n            if (path.EndsWith(\".xml\", StringComparison.OrdinalIgnoreCase))\n                ext = \"xml.png\";\n\n            if (path.EndsWith(\".zip\", StringComparison.OrdinalIgnoreCase))\n                ext = \"zip.png\";\n\n            if (path.EndsWith(\".txt\", StringComparison.OrdinalIgnoreCase))\n                ext = \"txt.png\";\n\n            if (path.EndsWith(\".pdf\", StringComparison.OrdinalIgnoreCase))\n                ext = \"pdf.png\";\n\n            if (path.EndsWith(\".doc\", StringComparison.OrdinalIgnoreCase) ||\n                path.EndsWith(\".docx\", StringComparison.OrdinalIgnoreCase))\n                ext = \"doc.png\";\n\n            if (path.EndsWith(\".xls\", StringComparison.OrdinalIgnoreCase) ||\n                path.EndsWith(\".xlsx\", StringComparison.OrdinalIgnoreCase))\n                ext = \"xls.png\";\n\n            // video/audio formats fro HTML5 tags\n\n            if (path.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase) \n                || path.EndsWith(\".webm\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".ogv\", StringComparison.OrdinalIgnoreCase))\n                ext = \"video.png\";\n\n            if (path.EndsWith(\".mp3\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".wav\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".ogg\", StringComparison.OrdinalIgnoreCase))\n                ext = \"audio.png\";\n\n            return $\"lib/img/doctypes/{ext}\";\n        }\n    }\n}"], "fixing_code": ["using Core.Data;\nusing Core.Helpers;\nusing Core.Services;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Linq;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace Core.Api\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class AssetsController : ControllerBase\n    {\n        IDataService _data;\n        IStorageService _store;\n\n        public AssetsController(IDataService data, IStorageService store)\n        {\n            _data = data;\n            _store = store;\n        }\n\n        /// <summary>\n        /// Get list of assets - user saved images and files\n        /// </summary>\n        /// <param name=\"page\">Page number</param>\n        /// <param name=\"filter\">filterImages or filterAttachments</param>\n        /// <param name=\"search\">Search term</param>\n        /// <returns>Model containing collection of assets and Pager object</returns>\n        [HttpGet]\n        public async Task<AssetsModel> Get(int page = 1, string filter = \"\", string search = \"\")\n        {\n            var pager = new Pager(page);\n            IEnumerable<AssetItem> items;\n\n            if (string.IsNullOrEmpty(search))\n            {\n                if (filter == \"filterImages\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n                else if (filter == \"filterAttachments\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n                else\n                {\n                    items = await _store.Find(null, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n            }\n            else\n            {\n                items = await _store.Find(a => a.Title.Contains(search), pager, \"\", !User.Identity.IsAuthenticated);\n            }\n\n            if (page < 1 || page > pager.LastPage)\n                return null;\n\n            return new AssetsModel\n            {\n                Assets = items,\n                Pager = pager\n            };\n        }\n\n        /// <summary>\n        /// Select an asset in the File Manager to include in the post\n        /// </summary>\n        /// <param name=\"type\">Type of asset (post cover, logo, avatar or post image/attachment)</param>\n        /// <param name=\"asset\">Selected asset</param>\n        /// <param name=\"post\">Post ID</param>\n        /// <returns>Asset Item</returns>\n        [HttpGet(\"pick\")]\n        public async Task<AssetItem> Pick(string type, string asset, string post)\n        {\n            if (type == \"postCover\")\n            {\n                await _data.BlogPosts.SaveCover(int.Parse(post), asset);\n            }\n            else if (type == \"appCover\")\n            {\n                var cover = _data.CustomFields.Single(f => f.AuthorId == 0 && f.Name == Constants.BlogCover);\n                if (cover == null)\n                    _data.CustomFields.Add(new CustomField { AuthorId = 0, Name = Constants.BlogCover, Content = asset });\n                else\n                    cover.Content = asset;\n                _data.Complete();\n            }\n            else if (type == \"appLogo\")\n            {\n                var logo = _data.CustomFields.Single(f => f.AuthorId == 0 && f.Name == Constants.BlogLogo);\n                if (logo == null)\n                    _data.CustomFields.Add(new CustomField { AuthorId = 0, Name = Constants.BlogLogo, Content = asset });\n                else\n                    logo.Content = asset;\n                _data.Complete();\n            }\n            else if (type == \"avatar\")\n            {\n                var user = _data.Authors.Single(a => a.AppUserName == User.Identity.Name);\n                user.Avatar = asset;\n                _data.Complete();\n            }\n\n            var item = await _store.Find(a => a.Url == asset, new Pager(1));\n            return item.FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Upload file(s) to user data store, authentication required\n        /// </summary>\n        /// <param name=\"files\">Selected files</param>\n        /// <returns>Success or internal error</returns>\n        [HttpPost(\"upload\")]\n        [Authorize]\n        public async Task<IActionResult> Upload(ICollection<IFormFile> files)\n        {\n            try\n            {\n                foreach (var file in files)\n                {\n                    await SaveFile(file);\n                }\n                return Ok(\"Created\");\n            }\n            catch (Exception)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, \"File upload error\");\n            }\n        }\n\n        /// <summary>\n        /// Remove file from user data store, authentication required\n        /// </summary>\n        /// <param name=\"url\">Relative URL of the file to remove</param>\n        /// <returns></returns>\n        [HttpDelete(\"remove\")]\n        [Authorize]\n        public IActionResult Remove(string url)\n        {\n            try\n            {\n                _store.DeleteFile(url);\n                return Ok(\"Deleted\");\n            }\n            catch (Exception)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, \"File delete error\");\n            }\n        }\n\n        async Task<AssetItem> SaveFile(IFormFile file)\n        {\n            var path = string.Format(\"{0}/{1}\", DateTime.Now.Year, DateTime.Now.Month);\n            return await _store.UploadFormFile(file, Url.Content(\"~/\"), path);\n        }\n    }\n}", "<?xml version=\"1.0\"?>\n<doc>\n    <assembly>\n        <name>Core</name>\n    </assembly>\n    <members>\n        <member name=\"M:Core.Api.AssetsController.Get(System.Int32,System.String,System.String)\">\n            <summary>\n            Get list of assets - user saved images and files\n            </summary>\n            <param name=\"page\">Page number</param>\n            <param name=\"filter\">filterImages or filterAttachments</param>\n            <param name=\"search\">Search term</param>\n            <returns>Model containing collection of assets and Pager object</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Pick(System.String,System.String,System.String)\">\n            <summary>\n            Select an asset in the File Manager to include in the post\n            </summary>\n            <param name=\"type\">Type of asset (post cover, logo, avatar or post image/attachment)</param>\n            <param name=\"asset\">Selected asset</param>\n            <param name=\"post\">Post ID</param>\n            <returns>Asset Item</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Upload(System.Collections.Generic.ICollection{Microsoft.AspNetCore.Http.IFormFile})\">\n            <summary>\n            Upload file(s) to user data store, authentication required\n            </summary>\n            <param name=\"files\">Selected files</param>\n            <returns>Success or internal error</returns>\n        </member>\n        <member name=\"M:Core.Api.AssetsController.Remove(System.String)\">\n            <summary>\n            Remove file from user data store, authentication required\n            </summary>\n            <param name=\"url\">Relative URL of the file to remove</param>\n            <returns></returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Get(System.Int32)\">\n            <summary>\n            Get list of blog authors\n            </summary>\n            <param name=\"page\">Page number</param>\n            <returns>List of authors</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Get(System.String)\">\n            <summary>\n            Get single author by name\n            </summary>\n            <param name=\"author\">Author name used during registration</param>\n            <returns>Author object</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Post(Core.Data.Models.RegisterModel)\">\n            <summary>\n            Register new author. Authorized admins only.\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Created Author object</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Update(Core.Data.Author)\">\n            <summary>\n            Update author\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.ChangePwd(Core.Data.Models.ChangePasswordModel)\">\n            <summary>\n            Change author password. Authorized users only.\n            </summary>\n            <param name=\"model\">Author model</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.AuthorsController.Delete(System.String)\">\n            <summary>\n            Delete author, from membership, database and file system. Admin only.\n            </summary>\n            <param name=\"id\">Author ID</param>\n            <returns>Success or 500 error</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Search(System.String,System.String,System.String,System.Int32)\">\n            <summary>\n            Search blog posts by term\n            </summary>\n            <param name=\"term\">Search term</param>\n            <param name=\"author\">Author</param>\n            <param name=\"include\">Posts to include: all by default; F - featured, D - drafts, P - published</param>\n            <param name=\"page\">Page number</param>\n            <returns>Model with list of posts and pager</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Get(System.String,System.String,System.String,System.Int32)\">\n            <summary>\n            Get list of blog posts\n            </summary>\n            <param name=\"author\">Post author</param>\n            <param name=\"category\">Post category</param>\n            <param name=\"include\">Posts to include: all by default; F - featured, D - drafts, P - published</param>\n            <param name=\"page\">Page number</param>\n            <returns>Model with list of posts and pager</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.GetPost(System.Int32)\">\n            <summary>\n            Get single post by ID\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <returns>Post item</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Publish(System.Int32,System.String)\">\n            <summary>\n            Set post as published or draft\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <param name=\"flag\">Flag; P - publish, U - unpublish</param>\n            <returns>Success of failure</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Feature(System.Int32,System.String)\">\n            <summary>\n            Set post as featured\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <param name=\"flag\">Flag; F - featured, U - remove from featured</param>\n            <returns></returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Post(Core.Data.PostItem)\">\n            <summary>\n            Save blog post\n            </summary>\n            <param name=\"post\">Post item</param>\n            <returns>Saved post item</returns>\n        </member>\n        <member name=\"M:Core.Api.PostsController.Remove(System.Int32)\">\n            <summary>\n            Remove post item\n            </summary>\n            <param name=\"id\">Post ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.GetCultures\">\n            <summary>\n            Get list of cultures\n            </summary>\n            <returns>List of supported languages</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.Get\">\n            <summary>\n            Get blog settings\n            </summary>\n            <returns>Blog settings</returns>\n        </member>\n        <member name=\"M:Core.Api.SettingsController.Post(Core.Data.BlogItem)\">\n            <summary>\n            Save blog settings\n            </summary>\n            <param name=\"model\">Blog settings item</param>\n            <returns>Saved blog item</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Get(System.Int32)\">\n            <summary>\n            Get list of themes\n            </summary>\n            <param name=\"page\">Page number</param>\n            <returns>List of themes</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Put(System.String)\">\n            <summary>\n            Set theme as current for a blog\n            </summary>\n            <param name=\"id\">Theme ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"M:Core.Api.ThemesController.Delete(System.String)\">\n            <summary>\n            Remove and unistall theme from the blog\n            </summary>\n            <param name=\"id\">Theme ID</param>\n            <returns>Success or failure</returns>\n        </member>\n        <member name=\"P:Core.Data.Author.Id\">\n            <summary>\n            Author ID\n            </summary>\n        </member>\n        <member name=\"M:Core.StringExtensions.ExtractTitle(System.String)\">\n            <summary>\n            Should extract title (file name) from file path or Url\n            </summary>\n            <param name=\"str\">c:\\foo\\test.png</param>\n            <returns>test.png</returns>\n        </member>\n        <member name=\"M:Core.StringExtensions.ToSlug(System.String)\">\n            <summary>\n            Converts title to valid URL slug\n            </summary>\n            <returns>Slug</returns>\n        </member>\n        <member name=\"M:Core.StringExtensions.ToDescription(System.String)\">\n            <summary>\n            Converts post body to post description\n            </summary>\n            <param name=\"str\">HTML post body</param>\n            <returns>Post decription as plain text</returns>\n        </member>\n    </members>\n</doc>\n", "using System;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Web;\n\nnamespace Core\n{\n    public static class StringExtensions\n    {\n        private static readonly Regex RegexStripHtml = new Regex(\"<[^>]*>\", RegexOptions.Compiled);\n\n        public static string StripHtml(this string str)\n        {\n            return string.IsNullOrWhiteSpace(str) ? string.Empty : RegexStripHtml.Replace(str, string.Empty).Trim();\n        }\n\n        /// <summary>\n        /// Should extract title (file name) from file path or Url\n        /// </summary>\n        /// <param name=\"str\">c:\\foo\\test.png</param>\n        /// <returns>test.png</returns>\n        public static string ExtractTitle(this string str)\n        {\n            if (str.Contains(\"\\\\\"))\n            {\n                return string.IsNullOrWhiteSpace(str) ? string.Empty : str.Substring(str.LastIndexOf(\"\\\\\")).Replace(\"\\\\\", \"\");\n            }\n            else if (str.Contains(\"/\"))\n            {\n                return string.IsNullOrWhiteSpace(str) ? string.Empty : str.Substring(str.LastIndexOf(\"/\")).Replace(\"/\", \"\");\n            }\n            else\n            {\n                return str;\n            }\n        }\n\n        /// <summary>\n        /// Converts title to valid URL slug\n        /// </summary>\n        /// <returns>Slug</returns>\n\t\tpublic static string ToSlug(this string title)\n        {\n            var str = title.ToLowerInvariant();\n            str = str.Trim('-', '_');\n\n            if (string.IsNullOrEmpty(str))\n                return string.Empty;\n\n            var bytes = Encoding.GetEncoding(\"utf-8\").GetBytes(str);\n            str = Encoding.UTF8.GetString(bytes);\n\n            str = Regex.Replace(str, @\"\\s\", \"-\", RegexOptions.Compiled);\n            \n            str = Regex.Replace(str, @\"([-_]){2,}\", \"$1\", RegexOptions.Compiled);\n\n            str = RemoveIllegalCharacters(str);\n\n            return str;\n        }\n\n        /// <summary>\n        /// Converts post body to post description\n        /// </summary>\n        /// <param name=\"str\">HTML post body</param>\n        /// <returns>Post decription as plain text</returns>\n        public static string ToDescription(this string str)\n        {\n            str = str.StripHtml();\n            return str.Length > 300 ? str.Substring(0, 300) : str;\n        }\n\n        public static bool Contains(this string source, string toCheck, StringComparison comp)\n        {\n            return source.IndexOf(toCheck, comp) >= 0;\n        }\n\n        // true if string ends with image extension\n        public static bool IsImagePath(this string str)\n        {\n            var exts = AppSettings.ImageExtensions.Split(',');\n\n            foreach (var ext in exts)\n            {\n                if(str.EndsWith(ext, StringComparison.OrdinalIgnoreCase))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public static string ReplaceIgnoreCase(this string str, string search, string replacement)\n        {\n            string result = Regex.Replace(\n                str,\n                Regex.Escape(search),\n                replacement.Replace(\"$\", \"$$\"),\n                RegexOptions.IgnoreCase\n            );\n            return result;\n        }\n\n        public static string MaskPassword(this string str)\n        {\n            var idx = str.IndexOf(\"password=\", StringComparison.OrdinalIgnoreCase);\n\n            if (idx >= 0)\n            {\n                var idxEnd = str.IndexOf(\";\", idx);\n                if (idxEnd > idx)\n                {\n                    return str.Substring(0, idx) + \"Password=******\" + str.Substring(idxEnd);\n                }\n            }\n            return str;\n        }\n\n        public static string ToPrettySize(this int value, int decimalPlaces = 0)\n        {\n            return ((long)value).ToPrettySize(decimalPlaces);\n        }\n\n        public static string ToPrettySize(this long value, int decimalPlaces = 0)\n        {\n            const long OneKb = 1024;\n            const long OneMb = OneKb * 1024;\n            const long OneGb = OneMb * 1024;\n            const long OneTb = OneGb * 1024;\n\n            var asTb = Math.Round((double)value / OneTb, decimalPlaces);\n            var asGb = Math.Round((double)value / OneGb, decimalPlaces);\n            var asMb = Math.Round((double)value / OneMb, decimalPlaces);\n            var asKb = Math.Round((double)value / OneKb, decimalPlaces);\n\n            string chosenValue = asTb > 1 ? string.Format(\"{0}Tb\", asTb)\n                : asGb > 1 ? string.Format(\"{0}Gb\", asGb)\n                : asMb > 1 ? string.Format(\"{0}Mb\", asMb)\n                : asKb > 1 ? string.Format(\"{0}Kb\", asKb)\n                : string.Format(\"{0}B\", Math.Round((double)value, decimalPlaces));\n            return chosenValue;\n        }\n\n        #region Helper Methods\n\n        static string RemoveIllegalCharacters(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return text;\n            }\n\n            string[] chars = new string[] {\n                \":\", \"/\", \"?\", \"!\", \"#\", \"[\", \"]\", \"{\", \"}\", \"@\", \"*\", \".\", \",\",\n                \"\\\"\",\"&\", \"'\", \"~\", \"$\"\n            };\n\n            foreach (var ch in chars)\n            {\n                text = text.Replace(ch, string.Empty);\n            }\n\n            text = text.Replace(\"\u2013\", \"-\");\n            text = text.Replace(\" \", \"-\");\n\n            text = RemoveUnicodePunctuation(text);\n            text = RemoveDiacritics(text);\n            text = RemoveExtraHyphen(text);\n\n            return HttpUtility.HtmlEncode(text).Replace(\"%\", string.Empty);\n        }\n\n        static string RemoveUnicodePunctuation(string text)\n        {\n            var normalized = text.Normalize(NormalizationForm.FormD);\n            var sb = new StringBuilder();\n\n            foreach (var c in\n                normalized.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.InitialQuotePunctuation &&\n                                      CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.FinalQuotePunctuation))\n            {\n                sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        static string RemoveDiacritics(string text)\n        {\n            var normalized = text.Normalize(NormalizationForm.FormD);\n            var sb = new StringBuilder();\n\n            foreach (var c in\n                normalized.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark))\n            {\n                sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        static string RemoveExtraHyphen(string text)\n        {\n            if (text.Contains(\"--\"))\n            {\n                text = text.Replace(\"--\", \"-\");\n                return RemoveExtraHyphen(text);\n            }\n\n            return text;\n        }\n\n        public static string SanitizePath(this string str)\n        {\n            if (str.Contains(\"..\") || str.Contains(\"//\"))\n                throw new ApplicationException(\"Invalid directory path\");\n\n            return str;\n        }\n\n        public static string SanitizeFileName(this string str)\n        {\n            if (str.Contains(\"..\") || str.Contains(\"//\") || str.Count(x => x == '.') > 1)\n                throw new ApplicationException(\"Invalid file name\");\n\n            return str;\n        }\n\n        #endregion\n    }\n}", "using Core.Data;\nusing Core.Helpers;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\nnamespace Core.Services\n{\n    public interface IStorageService\n    {\n        string Location { get; }\n        \n        void CreateFolder(string path);\n        void DeleteFolder(string path);\n        void DeleteAuthor(string name);\n\n        Task<AssetItem> UploadFormFile(IFormFile file, string root, string path = \"\");\n        Task<AssetItem> UploadBase64Image(string baseImg, string root, string path = \"\");\n        Task<AssetItem> UploadFromWeb(Uri requestUri, string root, string path = \"\");\n        void DeleteFile(string path);\n\n        IList<string> GetAssets(string path);\n        IList<string> GetThemes();\n        IList<WidgetItem> GetWidgets(string theme);\n\n        string GetHtmlTemplate(string template);\n\n        Task<IEnumerable<AssetItem>> Find(Func<AssetItem, bool> predicate, Pager pager, string path = \"\", bool sanitize = false);\n\n        Task Reset();\n    }\n\n    public class StorageService : IStorageService\n    {\n        string _blogSlug;\n        string _separator = Path.DirectorySeparatorChar.ToString();\n        string _uploadFolder = \"data\";\n        IHttpContextAccessor _httpContext;\n\n        private readonly ILogger _logger;\n\n        public StorageService(IHttpContextAccessor httpContext, ILogger<StorageService> logger)\n        {\n            if(httpContext == null || httpContext.HttpContext == null)\n            {\n                _blogSlug = \"\";\n            }\n            else\n            {\n                _blogSlug = httpContext.HttpContext.User.Identity.Name;\n            }\n            \n            _httpContext = httpContext;\n            _logger = logger;\n\n            if (!Directory.Exists(Location))\n                CreateFolder(\"\");\n        }\n\n        public string Location\n        {\n            get\n            {\n                var path = AppSettings.WebRootPath ?? Path.Combine(GetAppRoot(), \"wwwroot\");\n\n                path = Path.Combine(path, _uploadFolder.Replace(\"/\", Path.DirectorySeparatorChar.ToString()));\n\n                if (!string.IsNullOrEmpty(_blogSlug))\n                {\n                    path = Path.Combine(path, _blogSlug);\n                }\n                return path;\n            }\n        }\n\n        public IList<string> GetAssets(string path)\n        {\n            path = path.Replace(\"/\", _separator);\n            try\n            {\n                var dir = string.IsNullOrEmpty(path) ? Location : Path.Combine(Location, path);\n                var info = new DirectoryInfo(dir);\n\n                FileInfo[] files = info.GetFiles(\"*\", SearchOption.AllDirectories)\n                    .OrderByDescending(p => p.CreationTime).ToArray();\n\n                if(files != null && files.Any())\n                {\n                    var assets = new List<string>();\n\n                    foreach (FileInfo file in files)\n                    {\n                        assets.Add(file.FullName);\n                    }\n                    return assets;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n            }\n            return null;\n        }\n\n        public IList<string> GetThemes()\n        {\n            var items = new List<string>();\n            var dir = Path.Combine(GetAppRoot(), $\"Views{_separator}Themes\");\n            try\n            {\n                foreach (string d in Directory.GetDirectories(dir))\n                    items.Add(Path.GetFileName(d));\n            }\n            catch { }\n            return items;\n        }\n\n        public IList<WidgetItem> GetWidgets(string theme)\n        {\n            var widgets = new List<WidgetItem>();\n            string jsonFile = $\"{AppSettings.ContentRootPath}{_separator}Views{_separator}Themes{_separator}{theme}{_separator}{theme}.json\";\n\n            if (File.Exists(jsonFile))\n            {\n                using (StreamReader r = new StreamReader(jsonFile))\n                {\n                    string json = r.ReadToEnd();\n                    widgets = JsonConvert.DeserializeObject<List<WidgetItem>>(json);\n                }\n            }\n            return widgets;\n        }\n\n        public string GetHtmlTemplate(string template)\n        {\n            string content = \"<p>Not found</p>\";\n            try\n            {\n                var path = AppSettings.WebRootPath ?? Path.Combine(GetAppRoot(), \"wwwroot\");\n                path = Path.Combine(path, \"templates\");\n                path = Path.Combine(path, $\"{template}.html\");\n\n                if (File.Exists(path))\n                {\n                    content = File.ReadAllText(path);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n            }\n            return content;\n        }\n\n        public async Task<AssetItem> UploadFormFile(IFormFile file, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n\n            VerifyPath(path);\n\n            var fileName = GetFileName(file.FileName);\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            using (var fileStream = new FileStream(filePath, FileMode.Create))\n            {\n                await file.CopyToAsync(fileStream);\n                return new AssetItem\n                {\n                    Title = fileName,\n                    Path = TrimFilePath(filePath),\n                    Url = GetUrl(filePath, root)\n                };\n            }\n        }\n\n        public async Task<AssetItem> UploadBase64Image(string baseImg, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n            var fileName = \"\";\n\n            VerifyPath(path);\n\n            Random rnd = new Random();\n\n            if (baseImg.StartsWith(\"data:image/png;base64,\"))\n            {\n                fileName = string.Format(\"{0}.png\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/png;base64,\", \"\");\n            }\n            if (baseImg.StartsWith(\"data:image/jpeg;base64,\"))\n            {\n                fileName = string.Format(\"{0}.jpeg\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/jpeg;base64,\", \"\");\n            }\n            if (baseImg.StartsWith(\"data:image/gif;base64,\"))\n            {\n                fileName = string.Format(\"{0}.gif\", rnd.Next(1000, 9999));\n                baseImg = baseImg.Replace(\"data:image/gif;base64,\", \"\");\n            }\n\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            byte[] bytes = Convert.FromBase64String(baseImg);\n\n            await File.WriteAllBytesAsync(filePath, Convert.FromBase64String(baseImg));\n\n            return new AssetItem\n            {\n                Title = fileName,\n                Path = filePath,\n                Url = GetUrl(filePath, root)\n            };\n        }\n\n        public async Task<AssetItem> UploadFromWeb(Uri requestUri, string root, string path = \"\")\n        {\n            path = path.Replace(\"/\", _separator);\n\n            VerifyPath(path);\n\n            var fileName = TitleFromUri(requestUri);\n            var filePath = string.IsNullOrEmpty(path) ?\n                Path.Combine(Location, fileName) :\n                Path.Combine(Location, path + _separator + fileName);\n\n            using (var client = new HttpClient())\n            {\n                using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))\n                {\n                    using (\n                        Stream contentStream = await (await client.SendAsync(request)).Content.ReadAsStreamAsync(),\n                        stream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 3145728, true))\n                    {\n                        await contentStream.CopyToAsync(stream);\n                        return new AssetItem\n                        {\n                            Title = fileName,\n                            Path = filePath,\n                            Url = GetUrl(filePath, root)\n                        };\n                    }\n                }\n            }\n        }\n\n        public async Task<IEnumerable<AssetItem>> Find(Func<AssetItem, bool> predicate, Pager pager, string path = \"\", bool sanitize = false)\n        {\n            var skip = pager.CurrentPage * pager.ItemsPerPage - pager.ItemsPerPage;\n            var files = GetAssets(path);\n            var items = MapFilesToAssets(files);\n\n            if (predicate != null)\n                items = items.Where(predicate).ToList();\n\n            pager.Configure(items.Count);\n\n            var page = items.Skip(skip).Take(pager.ItemsPerPage).ToList();\n\n            if (sanitize)\n            {\n                foreach (var p in page)\n                {\n                    p.Path = \"\";\n                }\n            }\n\n            return await Task.FromResult(page);\n        }\n\n        public void CreateFolder(string path)\n        {\n            var dir = GetFullPath(path);\n\n            if (!Directory.Exists(dir))\n                Directory.CreateDirectory(dir);\n        }\n\n        public void DeleteFolder(string path)\n        {\n            var dir = GetFullPath(path);\n\n            if (Directory.Exists(dir))\n                Directory.Delete(dir, true);\n        }\n\n        public void DeleteAuthor(string name)\n        {\n            var dir = Path.GetFullPath(Path.Combine(Location, @\"..\\\"));\n            dir = Path.Combine(dir, name);\n\n            if (Directory.Exists(dir))\n                Directory.Delete(dir, true);\n        }\n\n        public void DeleteFile(string path)\n        {\n            path = path.Replace(\"/\", _separator);\n            path = path.Replace($\"{_uploadFolder}{_separator}{_blogSlug}{_separator}\", \"\");\n            File.Delete(GetFullPath(path));\n        }\n\n        public async Task Reset()\n        {\n            try\n            {\n                var dirs = Directory.GetDirectories(Location);\n                foreach (var dir in dirs)\n                {\n                    if (!dir.EndsWith(\"_init\"))\n                    {\n                        Directory.Delete(dir, true);\n                    }\n                }\n                var srcLoc = Path.Combine(Location, \"_init\");\n\n                foreach (string dirPath in Directory.GetDirectories(srcLoc, \"*\",\n                    SearchOption.AllDirectories))\n                    Directory.CreateDirectory(dirPath.Replace(srcLoc, Location));\n\n                foreach (string newPath in Directory.GetFiles(srcLoc, \"*.*\",\n                    SearchOption.AllDirectories))\n                    File.Copy(newPath, newPath.Replace(srcLoc, Location), true);\n\n                await Task.CompletedTask;\n            }\n            catch { }\n        }\n\n        void VerifyPath(string path)\n        {\n            path = path.SanitizePath();\n\n            if (!string.IsNullOrEmpty(path))\n            {\n                var dir = Path.Combine(Location, path);\n\n                if (!Directory.Exists(dir))\n                {\n                    CreateFolder(dir);\n                }\n            }\n        }\n\n        string TrimFilePath(string path)\n        {\n            var p = path.Replace(AppSettings.WebRootPath, \"\");\n            if (p.StartsWith(\"\\\\\")) p = p.Substring(1);\n            return p;\n        }\n\n        string GetFullPath(string path)\n        {\n            if (string.IsNullOrEmpty(path))\n                return Location;\n            else\n                return Path.Combine(Location, path.Replace(\"/\", _separator));\n        }\n\n        string GetFileName(string fileName)\n        {\n            // some browsers pass uploaded file name as short file name \n            // and others include the path; remove path part if needed\n            if (fileName.Contains(_separator))\n            {\n                fileName = fileName.Substring(fileName.LastIndexOf(_separator));\n                fileName = fileName.Replace(_separator, \"\");\n            }\n            // when drag-and-drop or copy image to TinyMce editor\n            // it uses \"mceclip0\" as file name; randomize it for multiple uploads\n            if (fileName.StartsWith(\"mceclip0\"))\n            {\n                Random rnd = new Random();\n                fileName = fileName.Replace(\"mceclip0\", rnd.Next(100000, 999999).ToString());\n            }\n            return fileName.SanitizeFileName();\n        }\n\n        string GetUrl(string path, string root)\n        {\n            var url = path.ReplaceIgnoreCase(Location, \"\").Replace(_separator, \"/\");\n            return string.Concat(_uploadFolder, \"/\", _blogSlug, url);\n        }\n\n        string GetAppRoot()\n        {\n            // normal application run\n            if(!string.IsNullOrEmpty(AppSettings.ContentRootPath))\n                return AppSettings.ContentRootPath;\n\n            // unit tests of seed data load\n            Assembly assembly;\n            var assemblyName = \"Core.Tests\";\n            try\n            {\n                assembly = Assembly.Load(new AssemblyName(assemblyName));\n            }\n            catch\n            {\n                assemblyName = \"App\";\n                assembly = Assembly.Load(new AssemblyName(assemblyName));\n            }\n            \n            var uri = new UriBuilder(assembly.CodeBase);\n            var path = Uri.UnescapeDataString(uri.Path);\n            var root = Path.GetDirectoryName(path);\n            root = root.Substring(0, root.IndexOf(assemblyName));\n\n            if (root.EndsWith($\"tests{_separator}\"))\n            {\n                root = root.Replace($\"tests{_separator}\", $\"src{_separator}\");\n            }\n\n            return Path.Combine(root, \"App\");\n        }\n\n        string TitleFromUri(Uri uri)\n        {\n            var title = uri.ToString().ToLower();\n            title = title.Replace(\"%2f\", \"/\");\n\n            if (title.EndsWith(\".axdx\"))\n            {\n                title = title.Replace(\".axdx\", \"\");\n            }\n            if (title.Contains(\"image.axd?picture=\"))\n            {\n                title = title.Substring(title.IndexOf(\"image.axd?picture=\") + 18);\n            }\n            if (title.Contains(\"file.axd?file=\"))\n            {\n                title = title.Substring(title.IndexOf(\"file.axd?file=\") + 14);\n            }\n            if (title.Contains(\"encrypted-tbn\") || title.Contains(\"base64,\"))\n            {\n                Random rnd = new Random();\n                title = string.Format(\"{0}.png\", rnd.Next(1000, 9999));\n            }\n\n            if (title.Contains(\"/\"))\n            {\n                title = title.Substring(title.LastIndexOf(\"/\"));\n            }\n\n            title = title.Replace(\" \", \"-\");\n\n            return title.Replace(\"/\", \"\").SanitizeFileName();\n        }\n\n        List<AssetItem> MapFilesToAssets(IList<string> assets)\n        {\n            var items = new List<AssetItem>();\n\n            if (assets != null && assets.Any())\n            {\n                foreach (var asset in assets)\n                {\n                    // Azure puts web sites under \"wwwroot\" folder\n                    var path = asset.Replace($\"wwwroot{_separator}wwwroot\", \"wwwroot\", StringComparison.OrdinalIgnoreCase);\n\n                    items.Add(new AssetItem\n                    {\n                        Path = asset,\n                        Url = pathToUrl(path),\n                        Title = pathToTitle(path),\n                        Image = pathToImage(path)\n                    });\n                }\n            }\n            return items;\n        }\n\n        string pathToUrl(string path)\n        {\n            return path.Substring(path.IndexOf(\"wwwroot\") + 8)\n                .Replace(_separator, \"/\");\n        }\n\n        string pathToTitle(string path)\n        {\n            var title = path;\n\n            if(title.LastIndexOf(_separator) > 0)\n                title = title.Substring(title.LastIndexOf(_separator));       \n\n            if(title.IndexOf('.') > 0)\n                title = title.Substring(1, title.LastIndexOf('.') - 1);\n\n            return title;\n        }\n\n        string pathToImage(string path)\n        {\n            if(path.IsImagePath())\n                return pathToUrl(path);\n\n            var ext = \"blank.png\";\n\n            if (path.EndsWith(\".xml\", StringComparison.OrdinalIgnoreCase))\n                ext = \"xml.png\";\n\n            if (path.EndsWith(\".zip\", StringComparison.OrdinalIgnoreCase))\n                ext = \"zip.png\";\n\n            if (path.EndsWith(\".txt\", StringComparison.OrdinalIgnoreCase))\n                ext = \"txt.png\";\n\n            if (path.EndsWith(\".pdf\", StringComparison.OrdinalIgnoreCase))\n                ext = \"pdf.png\";\n\n            if (path.EndsWith(\".doc\", StringComparison.OrdinalIgnoreCase) ||\n                path.EndsWith(\".docx\", StringComparison.OrdinalIgnoreCase))\n                ext = \"doc.png\";\n\n            if (path.EndsWith(\".xls\", StringComparison.OrdinalIgnoreCase) ||\n                path.EndsWith(\".xlsx\", StringComparison.OrdinalIgnoreCase))\n                ext = \"xls.png\";\n\n            // video/audio formats fro HTML5 tags\n\n            if (path.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase) \n                || path.EndsWith(\".webm\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".ogv\", StringComparison.OrdinalIgnoreCase))\n                ext = \"video.png\";\n\n            if (path.EndsWith(\".mp3\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".wav\", StringComparison.OrdinalIgnoreCase)\n                || path.EndsWith(\".ogg\", StringComparison.OrdinalIgnoreCase))\n                ext = \"audio.png\";\n\n            return $\"lib/img/doctypes/{ext}\";\n        }\n    }\n}"], "filenames": ["src/Core/Api/AssetsController.cs", "src/Core/CoreAPI.xml", "src/Core/Extensions/StringExtensions.cs", "src/Core/Services/StorageService.cs"], "buggy_code_start_loc": [9, 27, 214, 35], "buggy_code_end_loc": [139, 28, 214, 448], "fixing_code_start_loc": [10, 27, 215, 35], "fixing_code_end_loc": [143, 28, 231, 458], "type": "CWE-22", "message": "Blogifier 2.3 before 2019-05-11 does not properly restrict APIs, as demonstrated by missing checks for .. in a pathname.", "other": {"cve": {"id": "CVE-2019-12277", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-22T15:29:03.337", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Blogifier 2.3 before 2019-05-11 does not properly restrict APIs, as demonstrated by missing checks for .. in a pathname."}, {"lang": "es", "value": "Blogifier 2.3 anterior al 11-05-2019 no restringe apropiadamente APIs, como lo demuestran la falta de comprobaciones para .. in a pathname."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:blogifier:blogifier:2.3:*:*:*:*:*:*:*", "matchCriteriaId": "69D93B74-6245-474E-AF2E-1F57F309F8C2"}]}]}], "references": [{"url": "https://github.com/blogifierdotnet/Blogifier/commit/3e2ae11f6be8aab82128f223c2916fab5a408be5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/blogifierdotnet/Blogifier/commit/3e2ae11f6be8aab82128f223c2916fab5a408be5"}}