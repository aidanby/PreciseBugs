{"buggy_code": ["<?php\n/**\n * @link https://www.humhub.org/\n * @copyright Copyright (c) 2021 HumHub GmbH & Co. KG\n * @license https://www.humhub.com/licences\n */\n\nnamespace humhub\\modules\\user\\widgets;\n\nuse humhub\\libs\\Html;\nuse humhub\\modules\\admin\\models\\forms\\PeopleSettingsForm;\nuse humhub\\modules\\ui\\widgets\\DirectoryFilters;\nuse humhub\\modules\\user\\models\\Group;\nuse humhub\\modules\\user\\models\\ProfileField;\nuse Yii;\n\n/**\n * PeopleFilters displays the filters on the directory people page\n *\n * @since 1.9\n * @author Luke\n */\nclass PeopleFilters extends DirectoryFilters\n{\n    /**\n     * @inheritdoc\n     */\n    public $pageUrl = '/user/people';\n\n    protected function initDefaultFilters()\n    {\n        // Keyword\n        $this->addFilter('keyword', [\n            'title' => Yii::t('UserModule.base', 'Find people by their profile data or user tags'),\n            'placeholder' => Yii::t('UserModule.base', 'Search...'),\n            'type' => 'text',\n            'wrapperClass' => 'col-md-6 form-search-filter-keyword',\n            'afterInput' => Html::submitButton('<span class=\"fa fa-search\"></span>', ['class' => 'form-button-search']),\n            'sortOrder' => 100,\n        ]);\n\n        // Group\n        $groupOptions = [];\n        $groups = Group::findAll(['show_at_directory' => 1]);\n        if ($groups) {\n            $groupOptions[''] = Yii::t('UserModule.base', 'Any');\n            foreach ($groups as $group) {\n                $groupOptions[$group->id] = $group->name;\n            }\n\n            $this->addFilter('groupId', [\n                'title' => Yii::t('UserModule.base', 'User Group'),\n                'type' => 'dropdown',\n                'options' => $groupOptions,\n                'sortOrder' => 200,\n            ]);\n        }\n\n        // Sorting\n        $this->addFilter('sort', [\n            'title' => Yii::t('SpaceModule.base', 'Sorting'),\n            'type' => 'dropdown',\n            'options' => PeopleSettingsForm::getSortingOptions(true),\n            'sortOrder' => 300,\n        ]);\n\n        // Connection\n        $connectionOptions = [\n            '' => Yii::t('UserModule.base', 'All'),\n            'followers' => Yii::t('UserModule.base', 'Followers'),\n            'following' => Yii::t('UserModule.base', 'Following'),\n        ];\n        if (Yii::$app->getModule('friendship')->settings->get('enable')) {\n            $connectionOptions['friends'] = Yii::t('UserModule.base', 'Friends');\n            $connectionOptions['pending_friends'] = Yii::t('UserModule.base', 'Pending Requests');\n        }\n        $this->addFilter('connection', [\n            'title' => Yii::t('SpaceModule.base', 'Status'),\n            'type' => 'dropdown',\n            'options' => $connectionOptions,\n            'sortOrder' => 400,\n        ]);\n\n        // Profile fields\n        $profileFields = ProfileField::findAll(['directory_filter' => 1]);\n        $profileFieldSortOrder = 1000;\n        foreach ($profileFields as $profileField) {\n            $this->initProfileFieldFilter($profileField, $profileFieldSortOrder);\n            $profileFieldSortOrder += 10;\n        }\n    }\n\n    private function initProfileFieldFilter(ProfileField $profileField, $sortOrder = 1000)\n    {\n        $profileFieldType = $profileField->getFieldType();\n\n        if (!$profileFieldType) {\n            return;\n        }\n\n        $definition = $profileFieldType->getFieldFormDefinition();\n        $fieldType = isset($definition[$profileField->internal_name]['type']) ? $definition[$profileField->internal_name]['type'] : null;\n\n        $filterData = [\n            'title' => Yii::t($profileField->getTranslationCategory(), $profileField->title),\n            'type' => $fieldType,\n            'sortOrder' => $sortOrder,\n        ];\n\n        switch ($fieldType) {\n            case 'text':\n                $filterData['type'] = 'widget';\n                $filterData['widget'] = PeopleFilterPicker::class;\n                $filterData['widgetOptions'] = [\n                    'itemKey' => $profileField->internal_name\n                ];\n                break;\n\n            case 'dropdownlist':\n                $filterData['options'] = array_merge(['' => Yii::t('UserModule.base', 'Any')], $definition[$profileField->internal_name]['items']);\n                break;\n\n            default:\n                // Skip not supported type\n                return;\n        }\n\n        $this->addFilter('fields[' . $profileField->internal_name . ']', $filterData);\n    }\n\n    public static function getDefaultValue(string $filter): string\n    {\n        switch ($filter) {\n            case 'sort':\n                $defaultSorting = PeopleCard::config('defaultSorting');\n                if ($defaultSorting == '' && !PeopleSettingsForm::isDefaultGroupDefined()) {\n                    return 'lastlogin';\n                }\n                return $defaultSorting;\n        }\n\n        return '';\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * @link https://www.humhub.org/\n * @copyright Copyright (c) 2021 HumHub GmbH & Co. KG\n * @license https://www.humhub.com/licences\n */\n\nnamespace humhub\\modules\\user\\widgets;\n\nuse humhub\\libs\\Html;\nuse humhub\\modules\\admin\\models\\forms\\PeopleSettingsForm;\nuse humhub\\modules\\ui\\widgets\\DirectoryFilters;\nuse humhub\\modules\\user\\models\\Group;\nuse humhub\\modules\\user\\models\\ProfileField;\nuse Yii;\n\n/**\n * PeopleFilters displays the filters on the directory people page\n *\n * @since 1.9\n * @author Luke\n */\nclass PeopleFilters extends DirectoryFilters\n{\n    /**\n     * @inheritdoc\n     */\n    public $pageUrl = '/user/people';\n\n    protected function initDefaultFilters()\n    {\n        // Keyword\n        $this->addFilter('keyword', [\n            'title' => Yii::t('UserModule.base', 'Find people by their profile data or user tags'),\n            'placeholder' => Yii::t('UserModule.base', 'Search...'),\n            'type' => 'text',\n            'wrapperClass' => 'col-md-6 form-search-filter-keyword',\n            'afterInput' => Html::submitButton('<span class=\"fa fa-search\"></span>', ['class' => 'form-button-search']),\n            'sortOrder' => 100,\n        ]);\n\n        // Group\n        $groupOptions = [];\n        $groups = Group::findAll(['show_at_directory' => 1]);\n        if ($groups) {\n            $groupOptions[''] = Yii::t('UserModule.base', 'Any');\n            foreach ($groups as $group) {\n                $groupOptions[$group->id] = $group->name;\n            }\n\n            $this->addFilter('groupId', [\n                'title' => Yii::t('UserModule.base', 'User Group'),\n                'type' => 'dropdown',\n                'options' => $groupOptions,\n                'sortOrder' => 200,\n            ]);\n        }\n\n        // Sorting\n        $this->addFilter('sort', [\n            'title' => Yii::t('SpaceModule.base', 'Sorting'),\n            'type' => 'dropdown',\n            'options' => PeopleSettingsForm::getSortingOptions(true),\n            'sortOrder' => 300,\n        ]);\n\n        // Connection\n        $connectionOptions = [\n            '' => Yii::t('UserModule.base', 'All'),\n            'followers' => Yii::t('UserModule.base', 'Followers'),\n            'following' => Yii::t('UserModule.base', 'Following'),\n        ];\n        if (Yii::$app->getModule('friendship')->settings->get('enable')) {\n            $connectionOptions['friends'] = Yii::t('UserModule.base', 'Friends');\n            $connectionOptions['pending_friends'] = Yii::t('UserModule.base', 'Pending Requests');\n        }\n        $this->addFilter('connection', [\n            'title' => Yii::t('SpaceModule.base', 'Status'),\n            'type' => 'dropdown',\n            'options' => $connectionOptions,\n            'sortOrder' => 400,\n        ]);\n\n        // Profile fields\n        $profileFields = ProfileField::findAll(['directory_filter' => 1]);\n        $profileFieldSortOrder = 1000;\n        foreach ($profileFields as $profileField) {\n            $this->initProfileFieldFilter($profileField, $profileFieldSortOrder);\n            $profileFieldSortOrder += 10;\n        }\n    }\n\n    private function initProfileFieldFilter(ProfileField $profileField, $sortOrder = 1000)\n    {\n        $profileFieldType = $profileField->getFieldType();\n\n        if (!$profileFieldType) {\n            return;\n        }\n\n        $definition = $profileFieldType->getFieldFormDefinition();\n        $fieldType = isset($definition[$profileField->internal_name]['type']) ? $definition[$profileField->internal_name]['type'] : null;\n\n        $filterData = [\n            'title' => Html::encode(Yii::t($profileField->getTranslationCategory(), $profileField->title)),\n            'type' => $fieldType,\n            'sortOrder' => $sortOrder,\n        ];\n\n        switch ($fieldType) {\n            case 'text':\n                $filterData['type'] = 'widget';\n                $filterData['widget'] = PeopleFilterPicker::class;\n                $filterData['widgetOptions'] = [\n                    'itemKey' => $profileField->internal_name\n                ];\n                break;\n\n            case 'dropdownlist':\n                $filterData['options'] = array_merge(['' => Yii::t('UserModule.base', 'Any')], $definition[$profileField->internal_name]['items']);\n                break;\n\n            default:\n                // Skip not supported type\n                return;\n        }\n\n        $this->addFilter('fields[' . $profileField->internal_name . ']', $filterData);\n    }\n\n    public static function getDefaultValue(string $filter): string\n    {\n        switch ($filter) {\n            case 'sort':\n                $defaultSorting = PeopleCard::config('defaultSorting');\n                if ($defaultSorting == '' && !PeopleSettingsForm::isDefaultGroupDefined()) {\n                    return 'lastlogin';\n                }\n                return $defaultSorting;\n        }\n\n        return '';\n    }\n\n}\n"], "filenames": ["protected/humhub/modules/user/widgets/PeopleFilters.php"], "buggy_code_start_loc": [105], "buggy_code_end_loc": [106], "fixing_code_start_loc": [105], "fixing_code_end_loc": [106], "type": "CWE-79", "message": "HumHub is an Open Source Enterprise Social Network. Affected versions of HumHub are vulnerable to a stored Cross-Site Scripting (XSS) vulnerability. For exploitation, the attacker would need a permission to administer the Spaces feature. The names of individual \"spaces\" are not properly escaped and so an attacker with sufficient privilege could insert malicious javascript into a space name and exploit system users who visit that space. It is recommended that the HumHub is upgraded to 1.11.4, 1.10.5. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-31133", "sourceIdentifier": "security-advisories@github.com", "published": "2022-07-07T18:15:09.580", "lastModified": "2022-07-14T19:03:35.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "HumHub is an Open Source Enterprise Social Network. Affected versions of HumHub are vulnerable to a stored Cross-Site Scripting (XSS) vulnerability. For exploitation, the attacker would need a permission to administer the Spaces feature. The names of individual \"spaces\" are not properly escaped and so an attacker with sufficient privilege could insert malicious javascript into a space name and exploit system users who visit that space. It is recommended that the HumHub is upgraded to 1.11.4, 1.10.5. There are no known workarounds for this issue."}, {"lang": "es", "value": "HumHub es una red social empresarial de c\u00f3digo abierto. Las versiones afectadas de HumHub son susceptibles a una vulnerabilidad de tipo Cross-Site Scripting (XSS) almacenado. Para explotarla, el atacante necesitar\u00eda un permiso para administrar la funci\u00f3n Spaces. Los nombres de los \"espacios\" individuales no se escapan apropiadamente, por lo que un atacante con suficientes privilegios podr\u00eda insertar javascript malicioso en el nombre de un espacio y explotar a usuarios del sistema que visiten ese espacio. Es recomendado actualizar el HumHub a versiones 1.11.4, 1.10.5. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:humhub:humhub:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10.5", "matchCriteriaId": "23837D27-E03F-4CC0-9D84-1CB41813F425"}, {"vulnerable": true, "criteria": "cpe:2.3:a:humhub:humhub:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndExcluding": "1.11.4", "matchCriteriaId": "A1C1DB65-A60A-43F9-98B7-1C2C44433770"}]}]}], "references": [{"url": "https://github.com/humhub/humhub/commit/07d9f8f9b6334970ee38156a3416c3708d157cae", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/humhub/humhub/commit/f88991dfe56a05870df165ac89a2755dd4c1ffa1", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/humhub/humhub/security/advisories/GHSA-p7h3-73v7-959c", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/89d996a2-de30-4261-8e3f-98e54cb25f76", "source": "security-advisories@github.com", "tags": ["Not Applicable"]}]}, "github_commit_url": "https://github.com/humhub/humhub/commit/07d9f8f9b6334970ee38156a3416c3708d157cae"}}