{"buggy_code": ["<?php\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\n/**\n * This class will handle files JS-files that have to be parsed by PHP\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n * @author Dieter Vanden Eynde <dieter.vandeneynde@netlash.com>\n */\nclass FrontendJavascript\n{\n\t/**\n\t * The actual filename\n\t *\n\t * @var\tstring\n\t */\n\tprivate $filename;\n\n\t/**\n\t * The language\n\t *\n\t * @var\tstring\n\t */\n\tprivate $language;\n\n\t/**\n\t * The module\n\t *\n\t * @var\tstring\n\t */\n\tprivate $module;\n\n\tpublic function __construct()\n\t{\n\t\t// if the application wasn't defined before we will define it\n\t\tif(!defined('NAMED_APPLICATION')) define('NAMED_APPLICATION', 'frontend');\n\n\t\t// set the module\n\t\t$this->setModule(SpoonFilter::getGetValue('module', null, ''));\n\n\t\t// set the requested file\n\t\t$this->setFile(SpoonFilter::getGetValue('file', null, ''));\n\n\t\t// set the language\n\t\t$this->setLanguage(SpoonFilter::getGetValue('language', FrontendLanguage::getActiveLanguages(), SITE_DEFAULT_LANGUAGE));\n\n\t\t// create a new template instance (this will handle all stuff for us)\n\t\t$tpl = new FrontendTemplate();\n\n\t\t// enable addslashes on each locale\n\t\t$tpl->setAddSlashes(true);\n\n\t\t// set correct headers\n\t\tSpoonHTTP::setHeaders('content-type: application/javascript');\n\n\t\t// fetch the template path\n\t\tif($this->module == 'core') $file = FRONTEND_CORE_PATH . '/js/' . $this->getFile();\n\t\telse $file = FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/' . $this->getFile();\n\n\t\t// output the template\n\t\t$tpl->display(FrontendTheme::getPath($file), true);\n\t}\n\n\t/**\n\t * Get file\n\t *\n\t * @return string\n\t */\n\tpublic function getFile()\n\t{\n\t\treturn $this->filename;\n\t}\n\n\t/**\n\t * Get language\n\t *\n\t * @return string\n\t */\n\tpublic function getLanguage()\n\t{\n\t\treturn $this->language;\n\t}\n\n\t/**\n\t * Get module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Set file\n\t *\n\t * @param string $value The file to load.\n\t */\n\tprivate function setFile($value)\n\t{\n\t\t// set property\n\t\t$this->filename = (string) $value;\n\n\t\t// validate\n\t\tif(substr_count($this->filename, '../') > 0)\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(400);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('Invalid file.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\n\t\t// init var\n\t\t$valid = true;\n\n\t\t// core is a special module\n\t\tif($this->module == 'core')\n\t\t{\n\t\t\t// build path\n\t\t\t$path = realpath(FRONTEND_CORE_PATH . '/js/' . $this->filename);\n\n\t\t\t// validate if path is allowed\n\t\t\tif(substr($path, 0, strlen(realpath(FRONTEND_CORE_PATH . '/js/'))) != realpath(FRONTEND_CORE_PATH . '/js/')) $valid = false;\n\t\t}\n\n\t\t// not core\n\t\telse\n\t\t{\n\t\t\t// build path\n\t\t\t$path = realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/' . $this->filename);\n\n\t\t\t// validate if path is allowed\n\t\t\tif(substr($path, 0, strlen(realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/'))) != realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/')) $valid = false;\n\t\t}\n\n\t\t// invalid file?\n\t\tif(!$valid)\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(400);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('Invalid file.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\n\t\t// check if the path exists, if not whe should given an error\n\t\tif(!SpoonFile::exists($path))\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(404);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('File not present.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\t}\n\n\t/**\n\t * Set language\n\t *\n\t * @param string $value The language.\n\t */\n\tprivate function setLanguage($value)\n\t{\n\t\t// set property\n\t\t$this->language = (string) $value;\n\n\t\t// define constant\n\t\tdefine('FRONTEND_LANGUAGE', $this->language);\n\n\t\t// set the locale (we need this for the labels)\n\t\tFrontendLanguage::setLocale($this->language);\n\t}\n\n\t/**\n\t * Set module\n\t *\n\t * @param string $value The module.\n\t */\n\tprivate function setModule($value)\n\t{\n\t\t$this->module = (string) $value;\n\t}\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\n/**\n * This class will handle files JS-files that have to be parsed by PHP\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n * @author Dieter Vanden Eynde <dieter.vandeneynde@netlash.com>\n */\nclass FrontendJavascript\n{\n\t/**\n\t * The actual filename\n\t *\n\t * @var\tstring\n\t */\n\tprivate $filename;\n\n\t/**\n\t * The language\n\t *\n\t * @var\tstring\n\t */\n\tprivate $language;\n\n\t/**\n\t * The module\n\t *\n\t * @var\tstring\n\t */\n\tprivate $module;\n\n\tpublic function __construct()\n\t{\n\t\t// if the application wasn't defined before we will define it\n\t\tif(!defined('NAMED_APPLICATION')) define('NAMED_APPLICATION', 'frontend');\n\n\t\t// set the module\n\t\t$this->setModule(SpoonFilter::getGetValue('module', null, ''));\n\n\t\t// set the requested file\n\t\t$this->setFile(SpoonFilter::getGetValue('file', null, ''));\n\n\t\t// set the language\n\t\t$this->setLanguage(SpoonFilter::getGetValue('language', FrontendLanguage::getActiveLanguages(), SITE_DEFAULT_LANGUAGE));\n\n\t\t// create a new template instance (this will handle all stuff for us)\n\t\t$tpl = new FrontendTemplate();\n\n\t\t// enable addslashes on each locale\n\t\t$tpl->setAddSlashes(true);\n\n\t\t// set correct headers\n\t\tSpoonHTTP::setHeaders('content-type: application/javascript');\n\n\t\t// fetch the template path\n\t\tif($this->module == 'core') $file = FRONTEND_CORE_PATH . '/js/' . $this->getFile();\n\t\telse $file = FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/' . $this->getFile();\n\n\t\t// output the template\n\t\t$tpl->display(FrontendTheme::getPath($file), true);\n\t}\n\n\t/**\n\t * Get file\n\t *\n\t * @return string\n\t */\n\tpublic function getFile()\n\t{\n\t\treturn $this->filename;\n\t}\n\n\t/**\n\t * Get language\n\t *\n\t * @return string\n\t */\n\tpublic function getLanguage()\n\t{\n\t\treturn $this->language;\n\t}\n\n\t/**\n\t * Get module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Set file\n\t *\n\t * @param string $value The file to load.\n\t */\n\tprivate function setFile($value)\n\t{\n\t\t// set property\n\t\t$this->filename = (string) $value;\n\n\t\t// validate\n\t\tif(substr_count($this->filename, '../') > 0)\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(400);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('Invalid file.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\n\t\t// init var\n\t\t$valid = true;\n\n\t\t// core is a special module\n\t\tif($this->module == 'core')\n\t\t{\n\t\t\t// build path\n\t\t\t$path = realpath(FRONTEND_CORE_PATH . '/js/' . $this->filename);\n\n\t\t\t// validate if path is allowed\n\t\t\tif(substr($path, 0, strlen(realpath(FRONTEND_CORE_PATH . '/js/'))) != realpath(FRONTEND_CORE_PATH . '/js/')) $valid = false;\n\t\t}\n\n\t\t// not core\n\t\telse\n\t\t{\n\t\t\t// build path\n\t\t\t$path = realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/' . $this->filename);\n\n\t\t\t// validate if path is allowed\n\t\t\tif(substr($path, 0, strlen(realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/'))) != realpath(FRONTEND_MODULES_PATH . '/' . $this->getModule() . '/js/')) $valid = false;\n\t\t}\n\n\t\t// invalid file?\n\t\tif(!$valid)\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(400);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('Invalid file.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\n\t\t// check if the path exists, if not whe should given an error\n\t\tif(!SpoonFile::exists($path))\n\t\t{\n\t\t\t// set correct headers\n\t\t\tSpoonHTTP::setHeadersByCode(404);\n\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('File not present.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\t}\n\n\t/**\n\t * Set language\n\t *\n\t * @param string $value The language.\n\t */\n\tprivate function setLanguage($value)\n\t{\n\t\t// set property\n\t\t$this->language = (string) $value;\n\n\t\t// define constant\n\t\tdefine('FRONTEND_LANGUAGE', $this->language);\n\n\t\t// set the locale (we need this for the labels)\n\t\tFrontendLanguage::setLocale($this->language);\n\t}\n\n\t/**\n\t * Set module\n\t *\n\t * @param string $value The module.\n\t */\n\tprivate function setModule($value)\n\t{\n\t\t$modules = (array) FrontendModel::getModules();\n\t\t\n\t\tif(!in_array((string) $value, $modules))\n\t\t{\n\t\t\t// when debug is on throw an exception\n\t\t\tif(SPOON_DEBUG) throw new FrontendException('Invalid file.');\n\n\t\t\t// when debug is of show a descent message\n\t\t\telse exit(SPOON_DEBUG_MESSAGE);\n\t\t}\n\t\t\n\t\t$this->module = (string) $value;\n\t}\n}\n"], "filenames": ["frontend/core/engine/javascript.php"], "buggy_code_start_loc": [196], "buggy_code_end_loc": [196], "fixing_code_start_loc": [197], "fixing_code_end_loc": [208], "type": "CWE-22", "message": "Directory traversal vulnerability in frontend/core/engine/javascript.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to read arbitrary files via a .. (dot dot) in the module parameter to frontend/js.php.", "other": {"cve": {"id": "CVE-2012-1207", "sourceIdentifier": "cve@mitre.org", "published": "2012-02-24T13:55:07.343", "lastModified": "2017-08-29T01:31:14.977", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Directory traversal vulnerability in frontend/core/engine/javascript.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to read arbitrary files via a .. (dot dot) in the module parameter to frontend/js.php."}, {"lang": "es", "value": "Vulnerabilidad de salto de directorio en frontend/core/engine/javascript.php en Fork CMS v3.2.4 y posiblemente otras versiones antes de v3.2.5, permite a atacantes remotos leer archivos de su elecci\u00f3n a trav\u00e9s de un .. (punto punto) en el par\u00e1metro module en frontend/js.php."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fork-cms:fork_cms:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "23B9738D-A6BD-4D66-938C-05176D0A3DB6"}]}]}], "references": [{"url": "http://packetstormsecurity.org/files/109709/Fork-CMS-3.2.4-Cross-Site-Scripting-Local-File-Inclusion.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://www.fork-cms.com/blog/detail/fork-cms-3-2-5-released", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/51972", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/73169", "source": "cve@mitre.org"}, {"url": "https://github.com/forkcms/forkcms/commit/a9986b86c53de0582248b39605660fbba0c21a29", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/forkcms/forkcms/commit/a9986b86c53de0582248b39605660fbba0c21a29"}}