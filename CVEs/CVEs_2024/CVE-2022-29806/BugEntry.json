{"buggy_code": ["<?php\n//\n// ZoneMinder web language file\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n\nfunction translate($name) {\n  global $SLANG;\n  // The isset is more performant\n  if ( isset($SLANG[$name]) || array_key_exists($name, $SLANG) )\n    return $SLANG[$name];\n  else\n    return $name;\n}\n\nfunction loadLanguage($prefix='') {\n  global $user;\n\n  if ( $prefix )\n    $prefix = $prefix.'/';\n\n  if ( isset($user['Language']) and $user['Language'] ) {\n    $userLangFile = $prefix.'lang/'.$user['Language'].'.php';\n\n    if ( file_exists($userLangFile) ) {\n      return $userLangFile;\n    } else {\n      ZM\\Warning(\"User language file $userLangFile does not exist.\");\n    }\n  }\n\n  $systemLangFile = $prefix.'lang/'.ZM_LANG_DEFAULT.'.php';\n  if ( file_exists($systemLangFile) ) {\n    return $systemLangFile;\n  } else {\n    ZM\\Warning(\"System language file $systemLangFile does not exist.\");\n  }\n\n  $fallbackLangFile = $prefix.'lang/en_gb.php';\n  if ( file_exists($fallbackLangFile) ) {\n    return $fallbackLangFile;\n  } else {\n    ZM\\Error(\"Default language file $fallbackLangFile does not exist.\");\n  }\n  return false;\n}\n\nif ( $langFile = loadLanguage() ) {\n  require_once($langFile);\n  require_once('lang/default.php');\n  foreach ($DLANG as $key => $value) {\n    if ( ! (isset($SLANG[$key]) || array_key_exists($key, $SLANG)) )\n      $SLANG[$key] = $DLANG[$key];\n  }\n}\n\n//\n// Date and time formats fallback, if not set up by the language file already\n//\ndefined('DATE_FMT_CONSOLE_LONG') or define('DATE_FMT_CONSOLE_LONG', 'D jS M, g:ia');\t\t// This is the main console date/time, date() or strftime() format\ndefined('DATE_FMT_CONSOLE_SHORT') or define('DATE_FMT_CONSOLE_SHORT', '%H:%M');\t\t// This is the xHTML console date/time, date() or strftime() format\n\ndefined('STRF_FMT_DATETIME') or define('STRF_FMT_DATETIME', '%c');\t// Strftime locale aware format for dates with times\ndefined('STRF_FMT_DATE') or define('STRF_FMT_DATE', '%x');\t\t\t\t\t// Strftime locale aware format for dates without times\ndefined('STRF_FMT_TIME') or define('STRF_FMT_TIME', '%X');\t\t\t\t\t// Strftime locale aware format for times without dates\n\ndefined('STRF_FMT_DATETIME_SHORT') or define('STRF_FMT_DATETIME_SHORT', '%y/%m/%d %H:%M:%S');\t// Strftime shorter format for dates with time, not locale aware\ndefined('STRF_FMT_DATETIME_SHORTER') or define('STRF_FMT_DATETIME_SHORTER','%m/%d %H:%M:%S');// Strftime shorter format for dates with time, not locale aware, used where space is tight\n\n?>\n"], "fixing_code": ["<?php\n//\n// ZoneMinder web language file\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n\nfunction translate($name) {\n  global $SLANG;\n  // The isset is more performant\n  if ( isset($SLANG[$name]) || array_key_exists($name, $SLANG) )\n    return $SLANG[$name];\n  else\n    return $name;\n}\n\nfunction loadLanguage($prefix='') {\n  global $user;\n\n  if ($prefix)\n    $prefix = $prefix.'/';\n\n  if (isset($user['Language']) and $user['Language']) {\n    # Languages can only have letters, numbers and underscore\n    $userLangFile = $prefix.'lang/'.preg_replace('/[^[:alnum:]_]+/', '', $user['Language']).'.php';\n\n    if (file_exists($userLangFile)) {\n      return $userLangFile;\n    } else {\n      ZM\\Warning(\"User language file $userLangFile does not exist.\");\n    }\n  }\n\n  $systemLangFile = $prefix.'lang/'.preg_replace('/[^[:alnum:]_]+/', '', ZM_LANG_DEFAULT).'.php';\n  if ( file_exists($systemLangFile) ) {\n    return $systemLangFile;\n  } else {\n    ZM\\Warning(\"System language file $systemLangFile does not exist.\");\n  }\n\n  $fallbackLangFile = $prefix.'lang/en_gb.php';\n  if ( file_exists($fallbackLangFile) ) {\n    return $fallbackLangFile;\n  } else {\n    ZM\\Error(\"Default language file $fallbackLangFile does not exist.\");\n  }\n  return false;\n}\n\nif ( $langFile = loadLanguage() ) {\n  require_once($langFile);\n  require_once('lang/default.php');\n  foreach ($DLANG as $key => $value) {\n    if ( ! (isset($SLANG[$key]) || array_key_exists($key, $SLANG)) )\n      $SLANG[$key] = $DLANG[$key];\n  }\n}\n\n//\n// Date and time formats fallback, if not set up by the language file already\n//\ndefined('DATE_FMT_CONSOLE_LONG') or define('DATE_FMT_CONSOLE_LONG', 'D jS M, g:ia');\t\t// This is the main console date/time, date() or strftime() format\ndefined('DATE_FMT_CONSOLE_SHORT') or define('DATE_FMT_CONSOLE_SHORT', '%H:%M');\t\t// This is the xHTML console date/time, date() or strftime() format\n\ndefined('STRF_FMT_DATETIME') or define('STRF_FMT_DATETIME', '%c');\t// Strftime locale aware format for dates with times\ndefined('STRF_FMT_DATE') or define('STRF_FMT_DATE', '%x');\t\t\t\t\t// Strftime locale aware format for dates without times\ndefined('STRF_FMT_TIME') or define('STRF_FMT_TIME', '%X');\t\t\t\t\t// Strftime locale aware format for times without dates\n\ndefined('STRF_FMT_DATETIME_SHORT') or define('STRF_FMT_DATETIME_SHORT', '%y/%m/%d %H:%M:%S');\t// Strftime shorter format for dates with time, not locale aware\ndefined('STRF_FMT_DATETIME_SHORTER') or define('STRF_FMT_DATETIME_SHORTER','%m/%d %H:%M:%S');// Strftime shorter format for dates with time, not locale aware, used where space is tight\n\n?>\n"], "filenames": ["web/includes/lang.php"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [47], "fixing_code_start_loc": [33], "fixing_code_end_loc": [48], "type": "CWE-22", "message": "ZoneMinder before 1.36.13 allows remote code execution via an invalid language. Ability to create a debug log file at an arbitrary pathname contributes to exploitability.", "other": {"cve": {"id": "CVE-2022-29806", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-26T04:15:42.487", "lastModified": "2022-05-06T13:07:39.913", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ZoneMinder before 1.36.13 allows remote code execution via an invalid language. Ability to create a debug log file at an arbitrary pathname contributes to exploitability."}, {"lang": "es", "value": "ZoneMinder antes de la versi\u00f3n 1.36.13 permite la ejecuci\u00f3n remota de c\u00f3digo a trav\u00e9s de un lenguaje no v\u00e1lido. La capacidad de crear un archivo de registro de depuraci\u00f3n en una ruta arbitraria contribuye a la explotabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.36.13", "matchCriteriaId": "97968C53-A24A-4934-8188-41FEED83FFD4"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/166980/ZoneMinder-Language-Settings-Remote-Code-Execution.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://forums.zoneminder.com/viewtopic.php?t=31638", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/9fee64b62fbdff5bf5ece1d617f1f53c7b1967cb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/releases/tag/1.36.13", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://krastanoel.com/cve/2022-29806", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/9fee64b62fbdff5bf5ece1d617f1f53c7b1967cb"}}