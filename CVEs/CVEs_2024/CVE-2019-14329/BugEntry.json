{"buggy_code": ["/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/email/fields/email-address-varchar', ['views/fields/varchar', 'views/email/fields/from-address-varchar'], function (Dep, From) {\n\n    return Dep.extend({\n\n        detailTemplate: 'email/fields/email-address-varchar/detail',\n\n        editTemplate: 'email/fields/email-address-varchar/edit',\n\n        emailAddressRegExp: /([a-zA-Z0-9._\\-\\+\"]+@[a-zA-Z0-9._\\-]+\\.[a-zA-Z0-9._\\-]+)/gi,\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.valueIsSet = this.model.has(this.name);\n            return data;\n        },\n\n        events: {\n            'click a[data-action=\"clearAddress\"]': function (e) {\n                var address = $(e.currentTarget).data('address').toString();\n                this.deleteAddress(address);\n            },\n            'keyup input': function (e) {\n                if (e.keyCode == 188 || e.keyCode == 186 || e.keyCode == 13) {\n                    var $input = $(e.currentTarget);\n                    var address = $input.val().replace(',', '').replace(';', '').trim();\n\n                    if (~address.indexOf('@')) {\n                        if (this.checkEmailAddressInString(address)) {\n                            this.addAddress(address, '');\n                            $input.val('');\n                        }\n                    }\n                }\n            },\n            'change input': function (e) {\n                var $input = $(e.currentTarget);\n                var address = $input.val().replace(',','').replace(';','').trim();\n                if (~address.indexOf('@')) {\n                    if (this.checkEmailAddressInString(address)) {\n                        this.addAddress(address, '');\n                        $input.val('');\n                    }\n                }\n            },\n            'click [data-action=\"createContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.createPerson.call(this, 'Contact', address);\n            },\n            'click [data-action=\"createLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.createPerson.call(this, 'Lead', address);\n            },\n            'click [data-action=\"addToContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.addToPerson.call(this, 'Contact', address);\n            },\n            'click [data-action=\"addToLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.addToPerson.call(this, 'Lead', address);\n            }\n        },\n\n        getAutocompleteMaxCount: function () {\n            if (this.autocompleteMaxCount) {\n                return this.autocompleteMaxCount;\n            }\n            return this.getConfig().get('recordsPerPage');\n        },\n\n        parseNameFromStringAddress: function (s) {\n            return From.prototype.parseNameFromStringAddress.call(this, s);\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push('nameHash');\n            list.push('typeHash');\n            list.push('idHash');\n            list.push('accountId');\n            list.push(this.name + 'EmailAddressesNames');\n            list.push(this.name + 'EmailAddressesIds');\n            return list;\n        },\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.on('render', function () {\n                this.initAddressList();\n            }, this);\n        },\n\n        initAddressList: function () {\n            this.nameHash = {};\n            this.addressList = (this.model.get(this.name) || '').split(';').filter(function (item) {\n                return item != '';\n            }).map(function (item) {\n                return item.trim();\n            });\n\n            this.idHash = this.idHash || {};\n            this.typeHash = this.typeHash || {};\n            this.nameHash = this.nameHash || {};\n\n            _.extend(this.typeHash, this.model.get('typeHash') || {});\n            _.extend(this.nameHash, this.model.get('nameHash') || {});\n            _.extend(this.idHash, this.model.get('idHash') || {});\n\n            this.nameHash = _.clone(this.nameHash);\n            this.typeHash = _.clone(this.typeHash);\n            this.idHash = _.clone(this.idHash);\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n\n            if (this.mode == 'edit') {\n                this.$input = this.$element = this.$el.find('input');\n\n                this.addressList.forEach(function (item) {\n                    this.addAddressHtml(item, this.nameHash[item] || '');\n                }, this);\n\n                this.$input.autocomplete({\n                    serviceUrl: function (q) {\n                        return 'EmailAddress/action/searchInAddressBook?onlyActual=true&maxSize=' + this.getAutocompleteMaxCount();\n                    }.bind(this),\n                    paramName: 'q',\n                    minChars: 1,\n                    autoSelectFirst: true,\n                    triggerSelectOnValidInput: false,\n                    formatResult: function (suggestion) {\n                        return this.getHelper().escapeString(suggestion.name) + ' &#60;' + this.getHelper().escapeString(suggestion.id) + '&#62;';\n                    }.bind(this),\n                    transformResult: function (response) {\n                        var response = JSON.parse(response);\n                        var list = [];\n                        response.forEach(function(item) {\n                            list.push({\n                                id: item.emailAddress,\n                                name: item.entityName,\n                                emailAddress: item.emailAddress,\n                                entityId: item.entityId,\n                                entityName: item.entityName,\n                                entityType: item.entityType,\n                                data: item.emailAddress,\n                                value: item.emailAddress\n                            });\n                        }, this);\n                        return {\n                            suggestions: list\n                        };\n                    }.bind(this),\n                    onSelect: function (s) {\n                        this.addAddress(s.emailAddress, s.entityName, s.entityType, s.entityId);\n                        this.$input.val('');\n                    }.bind(this)\n                });\n\n                this.once('render', function () {\n                    this.$input.autocomplete('dispose');\n                }, this);\n\n                this.once('remove', function () {\n                    this.$input.autocomplete('dispose');\n                }, this);\n            }\n        },\n\n        checkEmailAddressInString: function (string) {\n            var arr = string.match(this.emailAddressRegExp);\n            if (!arr || !arr.length) return;\n\n            return true;\n        },\n\n        addAddress: function (address, name, type, id) {\n            if (this.justAddedAddress) {\n                this.deleteAddress(this.justAddedAddress);\n            }\n            this.justAddedAddress = address;\n            setTimeout(function () {\n                this.justAddedAddress = null;\n            }.bind(this), 100);\n\n            address = address.trim();\n\n            if (!type) {\n                var arr = address.match(this.emailAddressRegExp);\n                if (!arr || !arr.length) return;\n                address = arr[0];\n            }\n\n            if (!~this.addressList.indexOf(address)) {\n                this.addressList.push(address);\n                this.nameHash[address] = name;\n\n                if (type) {\n                    this.typeHash[address] = type;\n                }\n                if (id) {\n                    this.idHash[address] = id;\n                }\n\n                this.addAddressHtml(address, name);\n                this.trigger('change');\n            }\n        },\n\n        addAddressHtml: function (address, name) {\n            var conteiner = this.$el.find('.link-container');\n            var html =\n            '<div data-address=\"'+address+'\" class=\"list-group-item\">' +\n                '<a href=\"javascript:\" class=\"pull-right\" data-address=\"' + address + '\" data-action=\"clearAddress\"><span class=\"fas fa-times\"></a>' +\n                '<span>'+ ((name) ? (name + ' <span class=\"text-muted\">&#187;</span> ') : '') + '<span>'+address+'</span>'+'</span>' +\n\n            '</div>';\n            conteiner.append(html);\n        },\n\n        deleteAddress: function (address) {\n            this.deleteAddressHtml(address);\n\n            var index = this.addressList.indexOf(address);\n            if (index > -1) {\n                this.addressList.splice(index, 1);\n            }\n            delete this.nameHash[address];\n            this.trigger('change');\n        },\n\n        deleteAddressHtml: function (address) {\n            this.$el.find('.list-group-item[data-address=\"' + address + '\"]').remove();\n        },\n\n        fetch: function () {\n            var data = {};\n            data[this.name] = this.addressList.join(';');\n\n            return data;\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail') {\n                var names = [];\n                this.addressList.forEach(function (address) {\n                    names.push(this.getDetailAddressHtml(address));\n                }, this);\n                return names.join('');\n            }\n        },\n\n        getDetailAddressHtml: function (address) {\n            if (!address) {\n                return '';\n            }\n            var name = this.nameHash[address] || null;\n            var entityType = this.typeHash[address] || null;\n            var id = this.idHash[address] || null;\n\n            var addressHtml = '<span>' + address + '</span>';\n\n            var lineHtml;\n            if (id) {\n                lineHtml = '<div>' + '<a href=\"#' + entityType + '/view/' + id + '\">' + name + '</a> <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</div>';\n            } else {\n                if (name) {\n                    lineHtml = '<span>' + name + ' <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</span>';\n                } else {\n                    lineHtml = addressHtml;\n                }\n            }\n            if (!id) {\n                if (this.getAcl().check('Contact', 'edit')) {\n                    lineHtml += From.prototype.getCreateHtml.call(this, address);\n                }\n            }\n            lineHtml = '<div>' + lineHtml + '</div>';\n            return lineHtml;\n        },\n\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\nEspo.define('views/email/fields/from-address-varchar', 'views/fields/varchar', function (Dep) {\n\n    return Dep.extend({\n\n        detailTemplate: 'email/fields/email-address-varchar/detail',\n\n        setup: function () {\n            this.params.required = false;\n            Dep.prototype.setup.call(this);\n\n            this.on('render', function () {\n                this.initAddressList();\n            }, this);\n        },\n\n        events: {\n            'click [data-action=\"createContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.createPerson('Contact', address);\n            },\n            'click [data-action=\"createLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.createPerson('Lead', address);\n            },\n            'click [data-action=\"addToContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.addToPerson('Contact', address);\n            },\n            'click [data-action=\"addToLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.addToPerson('Lead', address);\n            }\n        },\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            var address = this.model.get(this.name);\n            if (address && !(address in this.idHash) && this.model.get('parentId')) {\n                if (this.getAcl().check('Contact', 'edit')) {\n                    data.showCreate = true;\n                }\n            }\n\n            data.valueIsSet = this.model.has(this.name);\n\n            return data;\n        },\n\n        initAddressList: function () {\n            this.nameHash = {};\n            this.typeHash = this.model.get('typeHash') || {};\n            this.idHash = this.model.get('idHash') || {};\n\n            _.extend(this.nameHash, this.model.get('nameHash') || {});\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push('nameHash');\n            list.push('idHash');\n            list.push('accountId');\n            return list;\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail') {\n                var address = this.model.get(this.name);\n                return this.getDetailAddressHtml(address);\n            }\n            return Dep.prototype.getValueForDisplay.call(this);\n        },\n\n        getDetailAddressHtml: function (address) {\n            if (!address) {\n                return '';\n            }\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n\n            var name = this.nameHash[address] || this.parseNameFromStringAddress(fromString) || null;\n            var entityType = this.typeHash[address] || null;\n            var id = this.idHash[address] || null;\n\n            var addressHtml = '<span>' + address + '</span>';\n\n            var lineHtml = '';\n            if (id) {\n                lineHtml = '<div>' + '<a href=\"#' + entityType + '/view/' + id + '\">' + name + '</a> <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</div>';\n            } else {\n                if (this.getAcl().check('Contact', 'create') || this.getAcl().check('Lead', 'create')) {\n                    lineHtml += this.getCreateHtml(address);\n                }\n                if (name) {\n                    lineHtml += '<span>' + name + ' <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</span>';\n                } else {\n                    lineHtml += addressHtml;\n                }\n            }\n            lineHtml = '<div>' + lineHtml + '</div>';\n            return lineHtml;\n        },\n\n        getCreateHtml: function (address) {\n            var html = '<span class=\"dropdown email-address-create-dropdown pull-right\">' +\n                '<button class=\"dropdown-toggle btn btn-link btn-sm\" data-toggle=\"dropdown\">' +\n                    '<span class=\"caret text-muted\"></span>' +\n                '</button>' +\n                '<ul class=\"dropdown-menu\" role=\"menu\">' +\n            '';\n\n            if (this.getAcl().check('Contact', 'create')) {\n                html += '<li><a href=\"javascript:\" data-action=\"createContact\" data-address=\"'+address+'\">'+this.translate('Create Contact', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Lead', 'create')) {\n                html += '<li><a href=\"javascript:\" data-action=\"createLead\" data-address=\"'+address+'\">'+this.translate('Create Lead', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Contact', 'edit')) {\n                html += '<li><a href=\"javascript:\" data-action=\"addToContact\" data-address=\"'+address+'\">'+this.translate('Add to Contact', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Lead', 'edit')) {\n                html += '<li><a href=\"javascript:\" data-action=\"addToLead\" data-address=\"'+address+'\">'+this.translate('Add to Lead', 'labels', 'Email')+'</a></li>';\n            }\n\n            html += '</ul>' +\n            '</span>';\n\n            return html;\n        },\n\n        parseNameFromStringAddress: function (value) {\n            value = value || '';\n            if (~value.indexOf('<')) {\n                var name = value.replace(/<(.*)>/, '').trim();\n                if (name.charAt(0) === '\"' && name.charAt(name.length - 1) === '\"') {\n                    name = name.substr(1, name.length - 2);\n                }\n                return name;\n            }\n            return null;\n        },\n\n        createPerson: function (scope, address) {\n            var address = address;\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n            var name = this.nameHash[address] || null;\n\n            if (!name) {\n                if (this.name == 'from') {\n                    name = this.parseNameFromStringAddress(fromString) || null;\n                }\n            }\n\n            var attributes = {\n                emailAddress: address\n            };\n\n            if (this.model.get('accountId') && scope == 'Contact') {\n                attributes.accountId = this.model.get('accountId');\n                attributes.accountName = this.model.get('accountName');\n            }\n\n            if (name) {\n                var firstName = name.split(' ').slice(0, -1).join(' ');\n                var lastName = name.split(' ').slice(-1).join(' ');\n                attributes.firstName = firstName;\n                attributes.lastName = lastName;\n            }\n\n            var viewName = this.getMetadata().get('clientDefs.' + scope + '.modalViews.edit') || 'views/modals/edit';\n\n            this.createView('create', viewName, {\n                scope: scope,\n                attributes: attributes\n            }, function (view) {\n                view.render();\n                this.listenTo(view, 'after:save', function (model) {\n                    var nameHash = Espo.Utils.clone(this.model.get('nameHash') || {});\n                    var typeHash = Espo.Utils.clone(this.model.get('typeHash') || {});\n                    var idHash = Espo.Utils.clone(this.model.get('idHash') || {});\n\n                    idHash[address] = model.id;\n                    nameHash[address] = model.get('name');\n                    typeHash[address] = scope;\n\n                    this.idHash = idHash;\n                    this.nameHash = nameHash;\n                    this.typeHash = typeHash;\n\n                    var attributes = {\n                        nameHash: nameHash,\n                        idHash: idHash,\n                        typeHash: typeHash\n                    };\n\n                    setTimeout(function () {\n                        this.model.set(attributes);\n                    }.bind(this), 50);\n                }, this);\n            }.bind(this));\n        },\n\n        addToPerson: function (scope, address) {\n            var address = address;\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n            var name = this.nameHash[address] || null;\n\n            if (!name) {\n                if (this.name == 'from') {\n                    name = this.parseNameFromStringAddress(fromString) || null;\n                }\n            }\n\n            var attributes = {\n                emailAddress: address\n            };\n\n            if (this.model.get('accountId') && scope == 'Contact') {\n                attributes.accountId = this.model.get('accountId');\n                attributes.accountName = this.model.get('accountName');\n            }\n\n            var viewName = this.getMetadata().get('clientDefs.' + scope + '.modalViews.select') || 'views/modals/select-records';\n\n            Espo.Ui.notify(this.translate('pleaseWait', 'messages'));\n\n            var filters = {};\n            if (name) {\n                filters['name'] = {\n                    type: 'equals',\n                    field: 'name',\n                    value: name\n                };\n            }\n\n            this.createView('dialog', viewName, {\n                scope: scope,\n                createButton: false,\n                filters: filters\n            }, function (view) {\n                view.render();\n                Espo.Ui.notify(false);\n                this.listenToOnce(view, 'select', function (model) {\n                    var afterSave = function () {\n                        var nameHash = Espo.Utils.clone(this.model.get('nameHash') || {});\n                        var typeHash = Espo.Utils.clone(this.model.get('typeHash') || {});\n                        var idHash = Espo.Utils.clone(this.model.get('idHash') || {});\n\n                        idHash[address] = model.id;\n                        nameHash[address] = model.get('name');\n                        typeHash[address] = scope;\n\n                        this.idHash = idHash;\n                        this.nameHash = nameHash;\n                        this.typeHash = typeHash;\n\n                        var attributes = {\n                            nameHash: nameHash,\n                            idHash: idHash,\n                            typeHash: typeHash\n                        };\n\n                        setTimeout(function () {\n                            this.model.set(attributes);\n                        }.bind(this), 50);\n                    }.bind(this);\n\n                    if (!model.get('emailAddress')) {\n                        model.save({\n                            'emailAddress': address\n                        }, {patch: true}).then(afterSave);\n                    } else {\n                        model.fetch().then(function () {\n                            var emailAddressData = model.get('emailAddressData') || [];\n                            var item = {\n                                emailAddress: address,\n                                primary: emailAddressData.length === 0\n                            };\n                            emailAddressData.push(item);\n                            model.save({\n                                'emailAddressData': emailAddressData\n                            }, {patch: true}).then(afterSave);\n                        }.bind(this));\n                    }\n\n                }, this);\n            }.bind(this));\n        }\n\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/fields/link-multiple-with-primary', 'views/fields/link-multiple', function (Dep) {\n\n    return Dep.extend({\n\n        primaryLink: null,\n\n        events: {\n            'click [data-action=\"switchPrimary\"]': function (e) {\n                $target = $(e.currentTarget);\n                var id = $target.data('id');\n\n                if (!$target.hasClass('active')) {\n                    this.$el.find('button[data-action=\"switchPrimary\"]').removeClass('active').children().addClass('text-muted');\n                    $target.addClass('active').children().removeClass('text-muted');\n                    this.setPrimaryId(id);\n                }\n            }\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push(this.primaryIdFieldName);\n            list.push(this.primaryNameFieldName);\n            return list;\n        },\n\n        setup: function () {\n            this.primaryLink = this.options.primaryLink || this.primaryLink;\n\n            this.primaryIdFieldName = this.primaryLink + 'Id';\n            this.primaryNameFieldName = this.primaryLink + 'Name';\n\n            Dep.prototype.setup.call(this);\n\n\n            this.primaryId = this.model.get(this.primaryIdFieldName);\n            this.primaryName = this.model.get(this.primaryNameFieldName);\n\n            this.listenTo(this.model, 'change:' + this.primaryIdFieldName, function () {\n                this.primaryId = this.model.get(this.primaryIdFieldName);\n                this.primaryName = this.model.get(this.primaryNameFieldName);\n            }.bind(this));\n        },\n\n        setPrimaryId: function (id) {\n            this.primaryId = id;\n            if (id) {\n                this.primaryName = this.nameHash[id];\n            } else {\n                this.primaryName = null;\n            }\n\n            this.trigger('change');\n        },\n\n        renderLinks: function () {\n            if (this.primaryId) {\n                this.addLinkHtml(this.primaryId, this.primaryName);\n            }\n            this.ids.forEach(function (id) {\n                if (id != this.primaryId) {\n                    this.addLinkHtml(id, this.nameHash[id]);\n                }\n            }, this);\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail' || this.mode == 'list') {\n                var names = [];\n                if (this.primaryId) {\n                    names.push(this.getDetailLinkHtml(this.primaryId, this.primaryName));\n                }\n                if (!this.ids.length) {\n                    return;\n                }\n                this.ids.forEach(function (id) {\n                    if (id != this.primaryId) {\n                        names.push(this.getDetailLinkHtml(id));\n                    }\n                }, this);\n                return '<div>' + names.join('</div><div>') + '</div>';\n            }\n        },\n\n        deleteLink: function (id) {\n            if (id == this.primaryId) {\n                this.setPrimaryId(null);\n            }\n            Dep.prototype.deleteLink.call(this, id);\n        },\n\n        deleteLinkHtml: function (id) {\n            Dep.prototype.deleteLinkHtml.call(this, id);\n            this.managePrimaryButton();\n        },\n\n        addLinkHtml: function (id, name) {\n            if (this.mode == 'search') {\n                return Dep.prototype.addLinkHtml.call(this, id, name);\n            }\n\n            var $container = this.$el.find('.link-container');\n            var $el = $('<div class=\"form-inline list-group-item link-with-role clearfix link-group-item-with-primary\">').addClass('link-' + id).attr('data-id', id);\n\n            var nameHtml = '<div>' + name + '&nbsp;' + '</div>';\n            var removeHtml = '<a href=\"javascript:\" class=\"pull-right\" data-id=\"' + id + '\" data-action=\"clearLink\"><span class=\"fas fa-times\"></a>';\n\n            $left = $('<div>');\n            $left.append(nameHtml);\n            $el.append($left);\n\n            $right = $('<div>');\n            $right.append(removeHtml);\n            $el.append($right);\n\n            var isPrimary = (id == this.primaryId);\n            var iconHtml = '<span class=\"fas fa-star fa-sm ' + (!isPrimary ? 'text-muted' : '') + '\"></span>';\n            var title = this.translate('Primary');\n            var $primary = $('<button type=\"button\" class=\"btn btn-link btn-sm pull-right hidden\" title=\"'+title+'\" data-action=\"switchPrimary\" data-id=\"'+id+'\">'+iconHtml+'</button>');\n            $primary.insertBefore($el.children().first().children().first());\n\n            $container.append($el);\n\n            this.managePrimaryButton();\n\n            return $el;\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n        },\n\n        managePrimaryButton: function () {\n            var $primary = this.$el.find('button[data-action=\"switchPrimary\"]');\n            if ($primary.length > 1) {\n                $primary.removeClass('hidden');\n            } else {\n                $primary.addClass('hidden');\n            }\n\n            if ($primary.filter('.active').length == 0) {\n                var $first = $primary.first();\n                if ($first.length) {\n                    $first.addClass('active').children().removeClass('text-muted');\n                    this.setPrimaryId($first.data('id'));\n                }\n            }\n        },\n\n        fetch: function () {\n            var data = Dep.prototype.fetch.call(this);\n\n            data[this.primaryIdFieldName] = this.primaryId;\n            data[this.primaryNameFieldName] = this.primaryName;\n\n            return data;\n        },\n\n    });\n});\n\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/assign', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'assign',\n\n        template: 'notification/items/assign',\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase());\n            this.messageData['entity'] = '<a href=\"#' + data.entityType + '/view/' + data.entityId + '\">' + data.entityName + '</a>';\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/email-received', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'emailReceived',\n\n        template: 'notification/items/email-received',\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase());\n            if (data.personEntityId) {\n                this.messageData['from'] = '<a href=\"#' + data.personEntityType + '/view/' + data.personEntityId + '\">' + data.personEntityName + '</a>';\n            } else {\n                this.messageData['from'] = data.fromString || this.translate('empty address');\n            }\n\n            this.emailId = data.emailId;\n            this.emailName = data.emailName;\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/entity-removed', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'entityRemoved',\n\n        template: 'notification/items/entity-removed',\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = (this.translate(data.entityType, 'scopeNames') || '').toLowerCase();\n\n            this.messageData['user'] = '<a href=\"#User/view/' + data.userId + '\">' + data.userName + '</a>';\n            this.messageData['entity'] = '<a href=\"#'+data.entityType+'/view/' + data.entityId + '\">' + data.entityName + '</a>';\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/message', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'notification/items/message',\n\n        data: function () {\n            return _.extend({\n                style: this.style,\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.style = data.style || 'text-muted';\n\n            this.messageTemplate = this.model.get('message') || data.message || '';\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase());\n\n            this.messageData['user'] = '<a href=\"#User/view/' + data.userId + '\">' + data.userName + '</a>';\n            this.messageData['entity'] = '<a href=\"#'+data.entityType+'/view/' + data.entityId + '\">' + data.entityName + '</a>';\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/site/navbar', 'view', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'site/navbar',\n\n        currentTab: null,\n\n        data: function () {\n            return {\n                tabDefsList: this.tabDefsList,\n                title: this.options.title,\n                menuDataList: this.getMenuDataList(),\n                quickCreateList: this.quickCreateList,\n                enableQuickCreate: this.quickCreateList.length > 0,\n                userName: this.getUser().get('name'),\n                userId: this.getUser().id,\n                logoSrc: this.getLogoSrc()\n            };\n        },\n\n        events: {\n            'click .navbar-collapse.in a.nav-link': function (e) {\n                var $a = $(e.currentTarget);\n                var href = $a.attr('href');\n                if (href) {\n                    this.$el.find('.navbar-collapse.in').collapse('hide');\n                }\n            },\n            'click a.nav-link': function (e) {\n                if (this.isSideMenuOpened) {\n                    this.closeSideMenu();\n                }\n            },\n            'click a.navbar-brand.nav-link': function (e) {\n                this.$el.find('.navbar-collapse.in').collapse('hide');\n            },\n            'click a[data-action=\"quick-create\"]': function (e) {\n                e.preventDefault();\n                var scope = $(e.currentTarget).data('name');\n                this.quickCreate(scope);\n            },\n            'click a.minimizer': function () {\n                this.switchMinimizer();\n            },\n            'click a.side-menu-button': function () {\n                this.switchSideMenu();\n            },\n            'click a.action': function (e) {\n                var $el = $(e.currentTarget);\n\n                var action = $el.data('action');\n                var method = 'action' + Espo.Utils.upperCaseFirst(action);\n                if (typeof this[method] == 'function') {\n                    var data = $el.data();\n                    this[method](data, e);\n                    e.preventDefault();\n                }\n            }\n        },\n\n        isMinimized: function () {\n            return this.$body.hasClass('minimized');\n        },\n\n        switchSideMenu: function () {\n            if (!this.isMinimized()) return;\n\n            if (this.isSideMenuOpened) {\n                this.closeSideMenu();\n            } else {\n                this.openSideMenu();\n            }\n        },\n\n        openSideMenu: function () {\n            this.isSideMenuOpened = true;\n            this.$body.addClass('side-menu-opened');\n\n            this.$sideMenuBackdrop = $('<div>').addClass('side-menu-backdrop');\n            this.$sideMenuBackdrop.click(function () {\n                this.closeSideMenu();\n            }.bind(this));\n            this.$sideMenuBackdrop.appendTo(this.$body);\n\n            this.$sideMenuBackdrop2 = $('<div>').addClass('side-menu-backdrop');\n            this.$sideMenuBackdrop2.click(function () {\n                this.closeSideMenu();\n            }.bind(this));\n            this.$sideMenuBackdrop2.appendTo(this.$navbarRightContainer);\n        },\n\n        closeSideMenu: function () {\n            this.isSideMenuOpened = false;\n            this.$body.removeClass('side-menu-opened');\n            this.$sideMenuBackdrop.remove();\n            this.$sideMenuBackdrop2.remove();\n        },\n\n        switchMinimizer: function () {\n            var $body = this.$body;\n            if (this.isMinimized()) {\n                if (this.isSideMenuOpened) {\n                    this.closeSideMenu();\n                }\n                $body.removeClass('minimized');\n                this.getStorage().set('state', 'siteLayoutState', 'expanded');\n            } else {\n                $body.addClass('minimized');\n                this.getStorage().set('state', 'siteLayoutState', 'collapsed');\n            }\n            if (window.Event) {\n                try {\n                    window.dispatchEvent(new Event('resize'));\n                } catch (e) {}\n            }\n        },\n\n        getLogoSrc: function () {\n            var companyLogoId = this.getConfig().get('companyLogoId');\n            if (!companyLogoId) {\n                return this.getBasePath() + (this.getThemeManager().getParam('logo') || 'client/img/logo.png');\n            }\n            return this.getBasePath() + '?entryPoint=LogoImage&id='+companyLogoId;\n        },\n\n        getTabList: function () {\n            var tabList = this.getPreferences().get('useCustomTabList') ? this.getPreferences().get('tabList') : this.getConfig().get('tabList');\n            tabList = Espo.Utils.clone(tabList || []);\n\n            if (this.getThemeManager().getParam('navbarIsVertical')) {\n                tabList.unshift('Home');\n            }\n            return tabList;\n        },\n\n        getQuickCreateList: function () {\n            return this.getConfig().get('quickCreateList') || [];\n        },\n\n        setup: function () {\n            this.getRouter().on('routed', function (e) {\n                if (e.controller) {\n                    this.selectTab(e.controller);\n                } else {\n                    this.selectTab(false);\n                }\n            }.bind(this));\n\n            var tabList = this.getTabList();\n\n            var scopes = this.getMetadata().get('scopes') || {};\n\n            this.tabList = tabList.filter(function (scope) {\n                if ((scopes[scope] || {}).disabled) return;\n                if ((scopes[scope] || {}).acl) {\n                    return this.getAcl().check(scope);\n                }\n                return true;\n            }, this);\n\n            this.quickCreateList = this.getQuickCreateList().filter(function (scope) {\n                if ((scopes[scope] || {}).disabled) return;\n                if ((scopes[scope] || {}).acl) {\n                    return this.getAcl().check(scope, 'create');\n                }\n                return true;\n            }, this);\n\n            this.createView('notificationsBadge', 'views/notification/badge', {\n                el: this.options.el + ' .notifications-badge-container'\n            });\n\n            this.setupGlobalSearch();\n\n            this.setupTabDefsList();\n\n            this.once('remove', function () {\n                $(window).off('resize.navbar');\n                $(window).off('scroll.navbar');\n            });\n        },\n\n        setupGlobalSearch: function () {\n            this.globalSearchAvailable = false;\n            (this.getConfig().get('globalSearchEntityList') || []).forEach(function (scope) {\n                if (this.globalSearchAvailable) return;\n                if (this.getAcl().checkScope(scope)) {\n                    this.globalSearchAvailable = true;\n                }\n            }, this);\n\n            if (this.globalSearchAvailable) {\n                this.createView('globalSearch', 'views/global-search/global-search', {\n                    el: this.options.el + ' .global-search-container'\n                });\n            }\n        },\n\n        adjustHorizontal: function () {\n            var smallScreenWidth = this.getThemeManager().getParam('screenWidthXs');\n\n            var $window = $(window);\n\n            var $tabs = this.$el.find('ul.tabs');\n            var $moreDropdown = $tabs.find('li.more');\n            var $more = $tabs.find('li.more > ul');\n\n            $window.on('resize.navbar', function() {\n                updateWidth();\n            });\n\n            var hideOneTab = function () {\n                var count = $tabs.children().length;\n                if (count <= 1) return;\n                var $one = $tabs.children().eq(count - 2);\n                $one.prependTo($more);\n            };\n            var unhideOneTab = function () {\n                var $one = $more.children().eq(0);\n                if ($one.length) {\n                    $one.insertBefore($moreDropdown);\n                }\n            };\n\n            var $navbar = $('#navbar .navbar');\n\n            if (window.innerWidth >= smallScreenWidth) {\n                $tabs.children('li').each(function (i, li) {\n                    hideOneTab();\n                });\n                $navbar.css('max-height', 'unset');\n                $navbar.css('overflow', 'visible');\n            }\n\n            var navbarHeight = this.getThemeManager().getParam('navbarHeight') || 43;\n            var navbarBaseWidth = this.getThemeManager().getParam('navbarBaseWidth') || 556;\n\n            var tabCount = this.tabList.length;\n\n            var navbarNeededHeight = navbarHeight + 1;\n\n            $moreDd = $('#nav-more-tabs-dropdown');\n            $moreLi = $moreDd.closest('li');\n\n            var updateWidth = function () {\n                var windowWidth = window.innerWidth;\n                var moreWidth = $moreLi.width();\n\n                $more.children('li.not-in-more').each(function (i, li) {\n                    unhideOneTab();\n                });\n\n                if (windowWidth < smallScreenWidth) {\n                    return;\n                }\n\n                $navbar.css('max-height', navbarHeight + 'px');\n                $navbar.css('overflow', 'hidden');\n\n                $more.parent().addClass('hidden');\n\n                var headerWidth = this.$el.width();\n\n                var maxWidth = headerWidth - navbarBaseWidth - moreWidth;\n                var width = $tabs.width();\n\n                var i = 0;\n                while (width > maxWidth) {\n                    hideOneTab();\n                    width = $tabs.width();\n                    i++;\n                    if (i >= tabCount) {\n                        setTimeout(function () {\n                            updateWidth();\n                        }, 100);\n                        break;\n                    }\n                }\n\n                $navbar.css('max-height', 'unset');\n                $navbar.css('overflow', 'visible');\n\n                if ($more.children().length > 0) {\n                    $moreDropdown.removeClass('hidden');\n                }\n            }.bind(this);\n\n            var processUpdateWidth = function (isRecursive) {\n                if ($navbar.height() > navbarNeededHeight) {\n                    updateWidth();\n                    setTimeout(function () {\n                        processUpdateWidth(true);\n                    }, 200);\n                } else {\n                    if (!isRecursive) {\n                        updateWidth();\n                        setTimeout(function () {\n                            processUpdateWidth(true);\n                        }, 10);\n                    }\n                    setTimeout(function () {\n                        processUpdateWidth(true);\n                    }, 1000);\n                }\n            };\n\n            if ($navbar.height() <= navbarNeededHeight && $more.children().length === 0) {\n                $more.parent().addClass('hidden');\n            }\n\n            processUpdateWidth();\n        },\n\n        adjustVertical: function () {\n            var smallScreenWidth = this.getThemeManager().getParam('screenWidthXs');\n            var navbarStaticItemsHeight = this.getThemeManager().getParam('navbarStaticItemsHeight') || 73;\n\n            var $window = $(window);\n\n            var $tabs = this.$el.find('ul.tabs');\n\n            var minHeight = $tabs.height() + navbarStaticItemsHeight;\n\n            var $more = $tabs.find('li.more > ul');\n\n            minHeight = Math.max(minHeight, $more.height());\n\n            if ($more.children().length === 0) {\n                $more.parent().addClass('hidden');\n            }\n\n            $('body').css('minHeight', minHeight + 'px');\n\n            $window.on('scroll.navbar', function () {\n                $tabs.scrollTop($window.scrollTop());\n                $more.scrollTop($window.scrollTop());\n            }.bind(this));\n\n            var updateSizeForVertical = function () {\n                var windowHeight = window.innerHeight;\n                var windowWidth = window.innerWidth;\n\n                if (windowWidth < smallScreenWidth) {\n                    $tabs.css('height', 'auto');\n                    $more.css('max-height', '');\n                } else {\n                    $tabs.css('height', (windowHeight - navbarStaticItemsHeight) + 'px');\n                    $more.css('max-height', windowHeight + 'px');\n                }\n            }.bind(this);\n\n            $(window).on('resize.navbar', function() {\n                updateSizeForVertical();\n            });\n            updateSizeForVertical();\n\n            this.$el.find('.notifications-badge-container').insertAfter(this.$el.find('.quick-create-container'));\n        },\n\n        afterRender: function () {\n            this.$body = $('body');\n\n            this.selectTab(this.getRouter().getLast().controller);\n\n            var layoutState = this.getStorage().get('state', 'siteLayoutState');\n            if (!layoutState) {\n                layoutState = $(window).width() > 1320 ? 'expanded' : 'collapsed';\n            }\n\n            var layoutMinimized = false;\n            if (layoutState === 'collapsed') {\n                layoutMinimized = true;\n            }\n\n            if (layoutMinimized) {\n                var $body = $('body');\n                $body.addClass('minimized');\n            }\n            this.$navbar = this.$el.find('> .navbar');\n            this.$navbarRightContainer = this.$navbar.find('> .navbar-body > .navbar-right-container');\n\n            var handlerClassName = this.getThemeManager().getParam('navbarAdjustmentHandler');\n            if (handlerClassName) {\n                require(handlerClassName, function (Handler) {\n                    var handler = new Handler(this);\n                    handler.process();\n                }.bind(this));\n            }\n\n            if (this.getThemeManager().getParam('skipDefaultNavbarAdjustment')) return;\n\n            if (this.getThemeManager().getParam('navbarIsVertical')) {\n                var process = function () {\n                    if (this.$navbar.height() < $(window).height() / 2) {\n                        setTimeout(function () {\n                            process();\n                        }.bind(this), 50);\n                        return;\n                    }\n                    if (this.getThemeManager().isUserTheme()) {\n                        setTimeout(function () {\n                            this.adjustVertical();\n                        }.bind(this), 10);\n                        return;\n                    }\n                    this.adjustVertical();\n                }.bind(this);\n                process();\n            } else {\n                var process = function () {\n                    if (this.$el.width() < $(window).width() / 2) {\n                        setTimeout(function () {\n                            process();\n                        }.bind(this), 50);\n                        return;\n                    }\n                    if (this.getThemeManager().isUserTheme()) {\n                        setTimeout(function () {\n                            this.adjustHorizontal();\n                        }.bind(this), 10);\n                        return;\n                    }\n                    this.adjustHorizontal();\n                }.bind(this);\n                process();\n            }\n        },\n\n        selectTab: function (name) {\n            if (this.currentTab != name) {\n                this.$el.find('ul.tabs li.active').removeClass('active');\n                if (name) {\n                    this.$el.find('ul.tabs li[data-name=\"' + name + '\"]').addClass('active');\n                }\n                this.currentTab = name;\n            }\n        },\n\n        setupTabDefsList: function () {\n            var tabDefsList = [];\n            var moreIsMet = false;\n            var colorsDisabled =\n                this.getPreferences().get('scopeColorsDisabled') ||\n                this.getPreferences().get('tabColorsDisabled') ||\n                this.getConfig().get('scopeColorsDisabled') ||\n                this.getConfig().get('tabColorsDisabled');\n            var tabIconsDisabled = this.getConfig().get('tabIconsDisabled');\n\n            this.tabList.forEach(function (tab, i) {\n                if (tab === '_delimiter_') {\n                    moreIsMet = true;\n                    return;\n                }\n\n                var label;\n                var link;\n\n                if (tab == 'Home') {\n                    label = this.getLanguage().translate(tab);\n                    link = '#';\n                } else {\n                    label = this.getLanguage().translate(tab, 'scopeNamesPlural');\n                    link = '#' + tab;\n                }\n\n                var color = null;\n                if (!colorsDisabled) {\n                    var color = this.getMetadata().get(['clientDefs', tab, 'color']);\n                }\n\n                var shortLabel = label.substr(0, 2);\n\n                var iconClass = null;\n                if (!tabIconsDisabled) {\n                    iconClass = this.getMetadata().get(['clientDefs', tab, 'iconClass'])\n                }\n\n                var o = {\n                    link: link,\n                    label: label,\n                    shortLabel: shortLabel,\n                    name: tab,\n                    isInMore: moreIsMet,\n                    color: color,\n                    iconClass: iconClass\n                };\n                if (color && !iconClass) {\n                    o.colorIconClass = 'color-icon fas fa-square-full';\n                }\n                tabDefsList.push(o);\n            }, this);\n            this.tabDefsList = tabDefsList;\n        },\n\n        getMenuDataList: function () {\n            var avatarHtml = this.getHelper().getAvatarHtml(this.getUser().id, 'small', 16, 'avatar-link');\n            if (avatarHtml) avatarHtml += ' ';\n\n            var list = [\n                {\n                    link: '#User/view/' + this.getUser().id,\n                    html: avatarHtml + this.getUser().get('name')\n                },\n                {divider: true}\n            ];\n\n            if (this.getUser().isAdmin()) {\n                list.push({\n                    link: '#Admin',\n                    label: this.getLanguage().translate('Administration')\n                });\n            }\n\n            list.push({\n                link: '#Preferences',\n                label: this.getLanguage().translate('Preferences')\n            });\n\n            if (!this.getConfig().get('actionHistoryDisabled')) {\n                list.push({\n                    divider: true\n                });\n                list.push({\n                    action: 'showLastViewed',\n                    link: '#LastViewed',\n                    label: this.getLanguage().translate('LastViewed', 'scopeNamesPlural')\n                });\n            }\n\n            list = list.concat([\n                {\n                    divider: true\n                },\n                {\n                    link: '#About',\n                    label: this.getLanguage().translate('About')\n                },\n                {\n                    action: 'logout',\n                    label: this.getLanguage().translate('Log Out')\n                }\n            ]);\n\n            return list;\n        },\n\n        quickCreate: function (scope) {\n            Espo.Ui.notify(this.translate('Loading...'));\n            var type = this.getMetadata().get(['clientDefs', scope, 'quickCreateModalType']) || 'edit';\n            var viewName = this.getMetadata().get(['clientDefs', scope, 'modalViews', type]) || 'views/modals/edit';\n            this.createView('quickCreate', viewName , {scope: scope}, function (view) {\n                view.once('after:render', function () {\n                    Espo.Ui.notify(false);\n                });\n                view.render();\n            });\n        },\n\n        actionLogout: function () {\n            this.getRouter().logout();\n        },\n\n        actionShowLastViewed: function () {\n            this.createView('dialog', 'views/modals/last-viewed', {}, function (view) {\n                view.render();\n                this.listenTo(view, 'close', function () {\n                    this.clearView('dialog');\n                }, this);\n            }, this);\n        },\n\n        actionShowHistory: function () {\n            this.createView('dialog', 'views/modals/action-history', {}, function (view) {\n                view.render();\n                this.listenTo(view, 'close', function () {\n                    this.clearView('dialog');\n                }, this);\n            }, this);\n        }\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/note', 'view', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: null,\n\n        messageTemplate: null,\n\n        messageData: null,\n\n        isEditable: false,\n\n        isRemovable: false,\n\n        isSystemAvatar: false,\n\n        data: function () {\n            return {\n                isUserStream: this.isUserStream,\n                noEdit: this.options.noEdit,\n                acl: this.options.acl,\n                onlyContent: this.options.onlyContent,\n                avatar: this.getAvatarHtml()\n            };\n        },\n\n        init: function () {\n            this.createField('createdAt', null, null, 'views/fields/datetime-short');\n            this.isUserStream = this.options.isUserStream;\n            this.isThis = !this.isUserStream;\n\n            this.parentModel = this.options.parentModel;\n\n            if (!this.isUserStream) {\n                if (this.parentModel) {\n                    if (\n                        this.parentModel.name != this.model.get('parentType') ||\n                        this.parentModel.id != this.model.get('parentId')\n                    ) {\n                        this.isThis = false;\n                    }\n                }\n            }\n\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n\n            if (this.messageName && this.isThis) {\n                this.messageName += 'This';\n            }\n\n            if (!this.isThis) {\n                this.createField('parent');\n            }\n\n            this.messageData = {\n                'user': 'field:createdBy',\n                'entity': 'field:parent',\n                'entityType': this.translateEntityType(this.model.get('parentType')),\n            };\n\n            if (!this.options.noEdit && (this.isEditable || this.isRemovable)) {\n                this.createView('right', 'views/stream/row-actions/default', {\n                    el: this.options.el + ' .right-container',\n                    acl: this.options.acl,\n                    model: this.model,\n                    isEditable: this.isEditable,\n                    isRemovable: this.isRemovable\n                });\n            }\n        },\n\n        translateEntityType: function (entityType, isPlural) {\n            var string;\n\n            if (!isPlural) {\n                string = (this.translate(entityType, 'scopeNames') || '');\n            } else {\n                string = (this.translate(entityType, 'scopeNamesPlural') || '');\n            }\n\n            string = string.toLowerCase();\n\n            var language = this.getPreferences().get('language') || this.getConfig().get('language');\n\n            if (~['de_DE', 'nl_NL'].indexOf(language)) {\n                string = Espo.Utils.upperCaseFirst(string);\n            }\n            return string;\n        },\n\n        createField: function (name, type, params, view, options) {\n            type = type || this.model.getFieldType(name) || 'base';\n            var o = {\n                model: this.model,\n                defs: {\n                    name: name,\n                    params: params || {}\n                },\n                el: this.options.el + ' .cell-' + name,\n                mode: 'list'\n            };\n            if (options) {\n                for (var i in options) {\n                    o[i] = options[i];\n                }\n            }\n            this.createView(name, view || this.getFieldManager().getViewName(type), o);\n        },\n\n        isMale: function () {\n            return this.model.get('createdByGender') === 'Male';\n        },\n\n        isFemale: function () {\n            return this.model.get('createdByGender') === 'Female';\n        },\n\n        createMessage: function () {\n            if (!this.messageTemplate) {\n                var isTranslated = false;\n\n                var parentType = this.model.get('parentType');\n\n                if (this.isMale()) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessagesMale', parentType || null) || '';\n                    if (this.messageTemplate !== this.messageName) {\n                        isTranslated = true;\n                    }\n                } else if (this.isFemale()) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessagesFemale', parentType || null) || '';\n                    if (this.messageTemplate !== this.messageName) {\n                        isTranslated = true;\n                    }\n                }\n                if (!isTranslated) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessages', parentType || null) || '';\n                }\n            }\n\n            this.createView('message', 'views/stream/message', {\n                messageTemplate: this.messageTemplate,\n                el: this.options.el + ' .message',\n                model: this.model,\n                messageData: this.messageData\n            });\n        },\n\n        getAvatarHtml: function () {\n            var id = this.model.get('createdById');\n            if (this.isSystemAvatar) {\n                id = 'system';\n            }\n            return this.getHelper().getAvatarHtml(id, 'small', 20);\n        },\n\n        getIconHtml: function (scope, id) {\n            if (this.isThis && scope === this.parentModel.name) return;\n            var iconClass = this.getMetadata().get(['clientDefs', scope, 'iconClass']);\n            if (!iconClass) return;\n            return '<span class=\"'+iconClass+' action text-muted icon\" style=\"cursor: pointer;\" title=\"'+this.translate('View')+'\" data-action=\"quickView\" data-id=\"'+id+'\" data-scope=\"'+scope+'\"></span>';\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/assign', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/assign',\n\n        messageName: 'assign',\n\n        data: function () {\n            return _.extend({\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data');\n\n            this.assignedUserId = data.assignedUserId || null;\n            this.assignedUserName = data.assignedUserName || null;\n\n            this.messageData['assignee'] = '<a href=\"#User/view/' + data.assignedUserId + '\">' + data.assignedUserName + '</a>';\n\n            if (this.isUserStream) {\n                if (this.assignedUserId) {\n                    if (this.assignedUserId == this.model.get('createdById')) {\n                        this.messageName += 'Self';\n                    } else {\n                        if (this.assignedUserId == this.getUser().id) {\n                            this.messageName += 'You';\n                        }\n                    }\n                } else {\n                    this.messageName += 'Void';\n                }\n            } else {\n                if (this.assignedUserId) {\n                    if (this.assignedUserId == this.model.get('createdById')) {\n                        this.messageName += 'Self';\n                    }\n                } else {\n                    this.messageName += 'Void';\n                }\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/create-related', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create-related',\n\n        messageName: 'createRelated',\n\n        data: function () {\n            return _.extend({\n                relatedTypeString: this.translateEntityType(this.entityType),\n                iconHtml: this.getIconHtml(this.entityType, this.entityId)\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.entityType = this.model.get('relatedType') || data.entityType || null;\n            this.entityId = this.model.get('relatedId') || data.entityId || null;\n            this.entityName = this.model.get('relatedName') ||  data.entityName || null;\n\n            this.messageData['relatedEntityType'] = this.translateEntityType(this.entityType);\n            this.messageData['relatedEntity'] = '<a href=\"#' + this.entityType + '/view/' + this.entityId + '\">' + this.entityName +'</a>';\n\n            this.createMessage();\n        }\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/create', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create',\n\n        assigned: false,\n\n        messageName: 'create',\n\n        isRemovable: false,\n\n        data: function () {\n            return _.extend({\n                statusText: this.statusText,\n                statusStyle: this.statusStyle\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            if (this.model.get('data')) {\n                var data = this.model.get('data');\n\n                this.assignedUserId = data.assignedUserId || null;\n                this.assignedUserName = data.assignedUserName || null;\n\n                this.messageData['assignee'] = '<a href=\"#User/view/' + this.assignedUserId + '\">' + this.assignedUserName + '</a>';\n\n                var isYou = false;\n                if (this.isUserStream) {\n                    if (this.assignedUserId == this.getUser().id) {\n                        isYou = true;\n                    }\n                }\n\n                if (this.assignedUserId) {\n                    this.messageName = 'createAssigned';\n\n                    if (this.isThis) {\n                        this.messageName += 'This';\n\n                        if (this.assignedUserId == this.model.get('createdById')) {\n                            this.messageName += 'Self';\n                        }\n                    } else {\n                        if (this.assignedUserId == this.model.get('createdById')) {\n                            this.messageName += 'Self';\n                        } else {\n                            if (isYou) {\n                                this.messageName += 'You';\n                            }\n                        }\n                    }\n                }\n\n                if (data.statusField) {\n                    var statusField = this.statusField = data.statusField;\n                    var statusValue = data.statusValue;\n                    this.statusStyle = data.statusStyle || 'default';\n                    this.statusText = this.getLanguage().translateOption(statusValue, statusField, this.model.get('parentType'));\n                }\n            }\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/email-received', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/email-received',\n\n        isRemovable: false,\n\n        isSystemAvatar: true,\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName,\n                hasPost: this.hasPost,\n                hasAttachments: this.hasAttachments,\n                emailIconClassName: this.getMetadata().get(['clientDefs', 'Email', 'iconClass']) || ''\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.emailId = data.emailId;\n            this.emailName = data.emailName;\n\n            if (\n                this.parentModel\n                &&\n                (this.model.get('parentType') == this.parentModel.name && this.model.get('parentId') == this.parentModel.id)\n            ) {\n                if (this.model.get('post')) {\n                    this.createField('post', null, null, 'views/stream/fields/post');\n                    this.hasPost = true;\n                }\n                if ((this.model.get('attachmentsIds') || []).length) {\n                    this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple');\n                    this.hasAttachments = true;\n                }\n            }\n\n            this.messageData['email'] = '<a href=\"#Email/view/' + data.emailId + '\">' + data.emailName + '</a>';\n\n            this.messageName = 'emailReceived';\n\n            if (data.isInitial) {\n                this.messageName += 'Initial';\n            }\n\n            if (data.personEntityId) {\n                this.messageName += 'From';\n                this.messageData['from'] = '<a href=\"#'+data.personEntityType+'/view/' + data.personEntityId + '\">' + data.personEntityName + '</a>';\n            }\n\n            if (this.model.get('parentType') === data.personEntityType && this.model.get('parentId') == data.personEntityId) {\n                this.isThis = true;\n            }\n\n            if (this.isThis) {\n                this.messageName += 'This';\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/email-sent', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/email-sent',\n\n        isRemovable: false,\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName,\n                hasPost: this.hasPost,\n                hasAttachments: this.hasAttachments,\n                emailIconClassName: this.getMetadata().get(['clientDefs', 'Email', 'iconClass']) || ''\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.emailId = data.emailId;\n            this.emailName = data.emailName;\n\n            if (\n                this.parentModel\n                &&\n                (this.model.get('parentType') == this.parentModel.name && this.model.get('parentId') == this.parentModel.id)\n            ) {\n                if (this.model.get('post')) {\n                    this.createField('post', null, null, 'views/stream/fields/post');\n                    this.hasPost = true;\n                }\n                if ((this.model.get('attachmentsIds') || []).length) {\n                    this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple');\n                    this.hasAttachments = true;\n                }\n            }\n\n            this.messageData['email'] = '<a href=\"#Email/view/' + data.emailId + '\">' + data.emailName + '</a>';\n\n            this.messageName = 'emailSent';\n\n            this.messageData['by'] = '<a href=\"#'+data.personEntityType+'/view/' + data.personEntityId + '\">' + data.personEntityName + '</a>';\n\n\n            if (this.isThis) {\n                this.messageName += 'This';\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/mention-in-post', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/post',\n\n        messageName: 'mentionInPost',\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.showAttachments = !!(this.model.get('attachmentsIds') || []).length;\n            data.showPost = !!this.model.get('post');\n            return data;\n        },\n\n        setup: function () {\n            if (this.model.get('post')) {\n                this.createField('post', null, null, 'views/stream/fields/post');\n            }\n            if ((this.model.get('attachmentsIds') || []).length) {\n                this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple', {\n                    previewSize: this.options.isNotification ? 'small' : null\n                });\n            }\n\n            var data = this.model.get('data');\n\n            this.messageData['mentioned'] = this.options.userId;\n\n            if (!this.model.get('parentId')) {\n                this.messageName = 'mentionInPostTarget';\n            }\n\n            if (this.isUserStream) {\n                if (this.options.userId == this.getUser().id) {\n                    if (!this.model.get('parentId')) {\n                        this.messageName = 'mentionYouInPostTarget';\n                        if (this.model.get('isGlobal')) {\n                            this.messageName = 'mentionYouInPostTargetAll';\n                        } else {\n                            this.messageName = 'mentionYouInPostTarget';\n                            if (this.model.has('teamsIds') && this.model.get('teamsIds').length) {\n                                var teamIdList = this.model.get('teamsIds');\n                                var teamNameHash = this.model.get('teamsNames') || {};\n\n                                var targetHtml = '';\n                                var teamHtmlList = [];\n                                teamIdList.forEach(function (teamId) {\n                                    var teamName = teamNameHash[teamId];\n                                    if (teamName) {\n                                        teamHtmlList.push('<a href=\"#Team/view/' + teamId + '\">' + teamName + '</a>');\n                                    }\n                                }, this);\n\n                                this.messageData['target'] = teamHtmlList.join(', ');\n                            } else if (this.model.has('usersIds') && this.model.get('usersIds').length) {\n                                var userIdList = this.model.get('usersIds');\n                                var userNameHash = this.model.get('usersNames') || {};\n\n                                if (userIdList.length === 1 && userIdList[0] === this.model.get('createdById')) {\n                                    this.messageName = 'mentionYouInPostTargetNoTarget';\n                                } else {\n                                    var userHtml = '';\n                                    var userHtmlList = [];\n                                    userIdList.forEach(function (userId) {\n                                        var userName = userNameHash[userId];\n                                        if (userName) {\n                                            userHtmlList.push('<a href=\"#User/view/' + userId + '\">' + userName + '</a>');\n                                        }\n                                    }, this);\n                                    this.messageData['target'] = userHtmlList.join(', ');\n                                }\n                            } else if (this.model.get('targetType') === 'self') {\n                                this.messageName = 'mentionYouInPostTargetNoTarget';\n                            }\n                        }\n                    } else {\n                        this.messageName = 'mentionYouInPost';\n                    }\n                }\n            }\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/post', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/post',\n\n        messageName: 'post',\n\n        isEditable: true,\n\n        isRemovable: true,\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.showAttachments = !!(this.model.get('attachmentsIds') || []).length;\n            data.showPost = !!this.model.get('post');\n            data.isInternal = this.isInternal;\n            return data;\n        },\n\n        setup: function () {\n\n            this.createField('post', null, null, 'views/stream/fields/post');\n            this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple', {\n                previewSize: this.options.isNotification ? 'small' : 'medium'\n            });\n\n            this.isInternal = this.model.get('isInternal');\n\n            if (!this.model.get('post') && this.model.get('parentId')) {\n                this.messageName = 'attach';\n                if (this.isThis) {\n                    this.messageName += 'This';\n                }\n            }\n\n            this.listenTo(this.model, 'change', function () {\n                if (this.model.hasChanged('post') || this.model.hasChanged('attachmentsIds')) {\n                    this.reRender();\n                }\n            }, this);\n\n            if (!this.model.get('parentId')) {\n                if (this.model.get('isGlobal')) {\n                    this.messageName = 'postTargetAll';\n                } else {\n                    if (this.model.has('teamsIds') && this.model.get('teamsIds').length) {\n                        var teamIdList = this.model.get('teamsIds');\n                        var teamNameHash = this.model.get('teamsNames') || {};\n                        this.messageName = 'postTargetTeam';\n                        if (teamIdList.length > 1) {\n                            this.messageName = 'postTargetTeams';\n                        }\n\n                        var targetHtml = '';\n                        var teamHtmlList = [];\n                        teamIdList.forEach(function (teamId) {\n                            var teamName = teamNameHash[teamId];\n                            if (teamName) {\n                                teamHtmlList.push('<a href=\"#Team/view/' + teamId + '\">' + teamName + '</a>');\n                            }\n                        }, this);\n\n                        this.messageData['target'] = teamHtmlList.join(', ');\n                    } else if (this.model.has('portalsIds') && this.model.get('portalsIds').length) {\n                        var portalIdList = this.model.get('portalsIds');\n                        var portalNameHash = this.model.get('portalsNames') || {};\n                        this.messageName = 'postTargetPortal';\n                        if (portalIdList.length > 1) {\n                            this.messageName = 'postTargetPortals';\n                        }\n\n                        var targetHtml = '';\n                        var portalHtmlList = [];\n                        portalIdList.forEach(function (portalId) {\n                            var portalName = portalNameHash[portalId];\n                            if (portalName) {\n                                portalHtmlList.push('<a href=\"#Portal/view/' + portalId + '\">' + portalName + '</a>');\n                            }\n                        }, this);\n\n                        this.messageData['target'] = portalHtmlList.join(', ');\n                    } else if (this.model.has('usersIds') && this.model.get('usersIds').length) {\n                        var userIdList = this.model.get('usersIds');\n                        var userNameHash = this.model.get('usersNames') || {};\n\n                        this.messageName = 'postTarget';\n\n                        if (userIdList.length === 1 && userIdList[0] === this.model.get('createdById')) {\n                            this.messageName = 'postTargetSelf';\n                        } else {\n                            var userHtml = '';\n                            var userHtmlList = [];\n                            userIdList.forEach(function (userId) {\n                                if (userId === this.getUser().id) {\n                                    this.messageName = 'postTargetYou';\n                                    if (userIdList.length > 1) {\n                                        if (userId === this.model.get('createdById')) {\n                                            this.messageName = 'postTargetSelfAndOthers';\n                                        } else {\n                                            this.messageName = 'postTargetYouAndOthers';\n                                        }\n                                    }\n                                } else {\n                                    if (userId === this.model.get('createdById')) {\n                                        this.messageName = 'postTargetSelfAndOthers';\n                                    } else {\n                                        var userName = userNameHash[userId];\n                                        if (userName) {\n                                            userHtmlList.push('<a href=\"#User/view/' + userId + '\">' + userName + '</a>');\n                                        }\n                                    }\n                                }\n                            }, this);\n                            this.messageData['target'] = userHtmlList.join(', ');\n                        }\n                    }\n                }\n            }\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/relate', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create-related',\n\n        messageName: 'relate',\n\n        data: function () {\n            return _.extend({\n                relatedTypeString: this.translateEntityType(this.entityType)\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.entityType = this.model.get('relatedType') || data.entityType || null;\n            this.entityId = this.model.get('relatedId') || data.entityId || null;\n            this.entityName = this.model.get('relatedName') ||  data.entityName || null;\n\n            this.messageData['relatedEntityType'] = this.translateEntityType(this.entityType);\n            this.messageData['relatedEntity'] = '<a href=\"#' + this.entityType + '/view/' + this.entityId + '\">' + this.entityName +'</a>';\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/status', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/status',\n\n        messageName: 'status',\n\n        data: function () {\n            return _.extend({\n                style: this.style,\n                statusText: this.statusText,\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data');\n\n            var field = data.field;\n            var value = data.value;\n\n            this.style = data.style || 'default';\n\n            this.statusText = this.getLanguage().translateOption(value, field, this.model.get('parentType'));\n\n            this.messageData['field'] = this.translate(field, 'fields', this.model.get('parentType')).toLowerCase();\n\n            this.createMessage();\n        },\n\n    });\n});\n\n"], "fixing_code": ["/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/email/fields/email-address-varchar', ['views/fields/varchar', 'views/email/fields/from-address-varchar'], function (Dep, From) {\n\n    return Dep.extend({\n\n        detailTemplate: 'email/fields/email-address-varchar/detail',\n\n        editTemplate: 'email/fields/email-address-varchar/edit',\n\n        emailAddressRegExp: /([a-zA-Z0-9._\\-\\+\"]+@[a-zA-Z0-9._\\-]+\\.[a-zA-Z0-9._\\-]+)/gi,\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.valueIsSet = this.model.has(this.name);\n            return data;\n        },\n\n        events: {\n            'click a[data-action=\"clearAddress\"]': function (e) {\n                var address = $(e.currentTarget).data('address').toString();\n                this.deleteAddress(address);\n            },\n            'keyup input': function (e) {\n                if (e.keyCode == 188 || e.keyCode == 186 || e.keyCode == 13) {\n                    var $input = $(e.currentTarget);\n                    var address = $input.val().replace(',', '').replace(';', '').trim();\n\n                    if (~address.indexOf('@')) {\n                        if (this.checkEmailAddressInString(address)) {\n                            this.addAddress(address, '');\n                            $input.val('');\n                        }\n                    }\n                }\n            },\n            'change input': function (e) {\n                var $input = $(e.currentTarget);\n                var address = $input.val().replace(',','').replace(';','').trim();\n                if (~address.indexOf('@')) {\n                    if (this.checkEmailAddressInString(address)) {\n                        this.addAddress(address, '');\n                        $input.val('');\n                    }\n                }\n            },\n            'click [data-action=\"createContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.createPerson.call(this, 'Contact', address);\n            },\n            'click [data-action=\"createLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.createPerson.call(this, 'Lead', address);\n            },\n            'click [data-action=\"addToContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.addToPerson.call(this, 'Contact', address);\n            },\n            'click [data-action=\"addToLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                From.prototype.addToPerson.call(this, 'Lead', address);\n            }\n        },\n\n        getAutocompleteMaxCount: function () {\n            if (this.autocompleteMaxCount) {\n                return this.autocompleteMaxCount;\n            }\n            return this.getConfig().get('recordsPerPage');\n        },\n\n        parseNameFromStringAddress: function (s) {\n            return From.prototype.parseNameFromStringAddress.call(this, s);\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push('nameHash');\n            list.push('typeHash');\n            list.push('idHash');\n            list.push('accountId');\n            list.push(this.name + 'EmailAddressesNames');\n            list.push(this.name + 'EmailAddressesIds');\n            return list;\n        },\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.on('render', function () {\n                this.initAddressList();\n            }, this);\n        },\n\n        initAddressList: function () {\n            this.nameHash = {};\n            this.addressList = (this.model.get(this.name) || '').split(';').filter(function (item) {\n                return item != '';\n            }).map(function (item) {\n                return item.trim();\n            });\n\n            this.idHash = this.idHash || {};\n            this.typeHash = this.typeHash || {};\n            this.nameHash = this.nameHash || {};\n\n            _.extend(this.typeHash, this.model.get('typeHash') || {});\n            _.extend(this.nameHash, this.model.get('nameHash') || {});\n            _.extend(this.idHash, this.model.get('idHash') || {});\n\n            this.nameHash = _.clone(this.nameHash);\n            this.typeHash = _.clone(this.typeHash);\n            this.idHash = _.clone(this.idHash);\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n\n            if (this.mode == 'edit') {\n                this.$input = this.$element = this.$el.find('input');\n\n                this.addressList.forEach(function (item) {\n                    this.addAddressHtml(item, this.nameHash[item] || '');\n                }, this);\n\n                this.$input.autocomplete({\n                    serviceUrl: function (q) {\n                        return 'EmailAddress/action/searchInAddressBook?onlyActual=true&maxSize=' + this.getAutocompleteMaxCount();\n                    }.bind(this),\n                    paramName: 'q',\n                    minChars: 1,\n                    autoSelectFirst: true,\n                    triggerSelectOnValidInput: false,\n                    formatResult: function (suggestion) {\n                        return this.getHelper().escapeString(suggestion.name) + ' &#60;' + this.getHelper().escapeString(suggestion.id) + '&#62;';\n                    }.bind(this),\n                    transformResult: function (response) {\n                        var response = JSON.parse(response);\n                        var list = [];\n                        response.forEach(function(item) {\n                            list.push({\n                                id: item.emailAddress,\n                                name: item.entityName,\n                                emailAddress: item.emailAddress,\n                                entityId: item.entityId,\n                                entityName: item.entityName,\n                                entityType: item.entityType,\n                                data: item.emailAddress,\n                                value: item.emailAddress\n                            });\n                        }, this);\n                        return {\n                            suggestions: list\n                        };\n                    }.bind(this),\n                    onSelect: function (s) {\n                        this.addAddress(s.emailAddress, s.entityName, s.entityType, s.entityId);\n                        this.$input.val('');\n                    }.bind(this)\n                });\n\n                this.once('render', function () {\n                    this.$input.autocomplete('dispose');\n                }, this);\n\n                this.once('remove', function () {\n                    this.$input.autocomplete('dispose');\n                }, this);\n            }\n        },\n\n        checkEmailAddressInString: function (string) {\n            var arr = string.match(this.emailAddressRegExp);\n            if (!arr || !arr.length) return;\n\n            return true;\n        },\n\n        addAddress: function (address, name, type, id) {\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n\n            if (this.justAddedAddress) {\n                this.deleteAddress(this.justAddedAddress);\n            }\n            this.justAddedAddress = address;\n            setTimeout(function () {\n                this.justAddedAddress = null;\n            }.bind(this), 100);\n\n            address = address.trim();\n\n            if (!type) {\n                var arr = address.match(this.emailAddressRegExp);\n                if (!arr || !arr.length) return;\n                address = arr[0];\n            }\n\n            if (!~this.addressList.indexOf(address)) {\n                this.addressList.push(address);\n                this.nameHash[address] = name;\n\n                if (type) {\n                    this.typeHash[address] = type;\n                }\n                if (id) {\n                    this.idHash[address] = id;\n                }\n\n                this.addAddressHtml(address, name);\n                this.trigger('change');\n            }\n        },\n\n        addAddressHtml: function (address, name) {\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n            if (address) {\n                name = this.getHelper().escapeString(address);\n            }\n\n            var conteiner = this.$el.find('.link-container');\n            var html =\n            '<div data-address=\"'+address+'\" class=\"list-group-item\">' +\n                '<a href=\"javascript:\" class=\"pull-right\" data-address=\"' + address + '\" data-action=\"clearAddress\"><span class=\"fas fa-times\"></a>' +\n                '<span>'+ ((name) ? (name + ' <span class=\"text-muted\">&#187;</span> ') : '') + '<span>'+address+'</span>'+'</span>' +\n\n            '</div>';\n            conteiner.append(html);\n        },\n\n        deleteAddress: function (address) {\n            this.deleteAddressHtml(address);\n\n            var index = this.addressList.indexOf(address);\n            if (index > -1) {\n                this.addressList.splice(index, 1);\n            }\n            delete this.nameHash[address];\n            this.trigger('change');\n        },\n\n        deleteAddressHtml: function (address) {\n            this.$el.find('.list-group-item[data-address=\"' + address + '\"]').remove();\n        },\n\n        fetch: function () {\n            var data = {};\n            data[this.name] = this.addressList.join(';');\n\n            return data;\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail') {\n                var names = [];\n                this.addressList.forEach(function (address) {\n                    names.push(this.getDetailAddressHtml(address));\n                }, this);\n                return names.join('');\n            }\n        },\n\n        getDetailAddressHtml: function (address) {\n            if (!address) {\n                return '';\n            }\n            var name = this.nameHash[address] || null;\n            var entityType = this.typeHash[address] || null;\n            var id = this.idHash[address] || null;\n\n            var addressHtml = '<span>' + address + '</span>';\n\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n\n            var lineHtml;\n            if (id) {\n                lineHtml = '<div>' + '<a href=\"#' + entityType + '/view/' + id + '\">' + name + '</a> <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</div>';\n            } else {\n                if (name) {\n                    lineHtml = '<span>' + name + ' <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</span>';\n                } else {\n                    lineHtml = addressHtml;\n                }\n            }\n            if (!id) {\n                if (this.getAcl().check('Contact', 'edit')) {\n                    lineHtml += From.prototype.getCreateHtml.call(this, address);\n                }\n            }\n            lineHtml = '<div>' + lineHtml + '</div>';\n            return lineHtml;\n        },\n\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\nEspo.define('views/email/fields/from-address-varchar', 'views/fields/varchar', function (Dep) {\n\n    return Dep.extend({\n\n        detailTemplate: 'email/fields/email-address-varchar/detail',\n\n        setup: function () {\n            this.params.required = false;\n            Dep.prototype.setup.call(this);\n\n            this.on('render', function () {\n                this.initAddressList();\n            }, this);\n        },\n\n        events: {\n            'click [data-action=\"createContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.createPerson('Contact', address);\n            },\n            'click [data-action=\"createLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.createPerson('Lead', address);\n            },\n            'click [data-action=\"addToContact\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.addToPerson('Contact', address);\n            },\n            'click [data-action=\"addToLead\"]': function (e) {\n                var address = $(e.currentTarget).data('address');\n                this.addToPerson('Lead', address);\n            }\n        },\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            var address = this.model.get(this.name);\n            if (address && !(address in this.idHash) && this.model.get('parentId')) {\n                if (this.getAcl().check('Contact', 'edit')) {\n                    data.showCreate = true;\n                }\n            }\n\n            data.valueIsSet = this.model.has(this.name);\n\n            return data;\n        },\n\n        initAddressList: function () {\n            this.nameHash = {};\n            this.typeHash = this.model.get('typeHash') || {};\n            this.idHash = this.model.get('idHash') || {};\n\n            _.extend(this.nameHash, this.model.get('nameHash') || {});\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push('nameHash');\n            list.push('idHash');\n            list.push('accountId');\n            return list;\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail') {\n                var address = this.model.get(this.name);\n                return this.getDetailAddressHtml(address);\n            }\n            return Dep.prototype.getValueForDisplay.call(this);\n        },\n\n        getDetailAddressHtml: function (address) {\n            if (!address) {\n                return '';\n            }\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n\n            var name = this.nameHash[address] || this.parseNameFromStringAddress(fromString) || null;\n\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n\n            var entityType = this.typeHash[address] || null;\n            var id = this.idHash[address] || null;\n\n            var addressHtml = '<span>' + address + '</span>';\n\n            var lineHtml = '';\n            if (id) {\n                lineHtml = '<div>' + '<a href=\"#' + entityType + '/view/' + id + '\">' + name + '</a> <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</div>';\n            } else {\n                if (this.getAcl().check('Contact', 'create') || this.getAcl().check('Lead', 'create')) {\n                    lineHtml += this.getCreateHtml(address);\n                }\n                if (name) {\n                    lineHtml += '<span>' + name + ' <span class=\"text-muted\">&#187;</span> ' + addressHtml + '</span>';\n                } else {\n                    lineHtml += addressHtml;\n                }\n            }\n            lineHtml = '<div>' + lineHtml + '</div>';\n            return lineHtml;\n        },\n\n        getCreateHtml: function (address) {\n            address = this.getHelper().escapeString(address);\n\n            var html = '<span class=\"dropdown email-address-create-dropdown pull-right\">' +\n                '<button class=\"dropdown-toggle btn btn-link btn-sm\" data-toggle=\"dropdown\">' +\n                    '<span class=\"caret text-muted\"></span>' +\n                '</button>' +\n                '<ul class=\"dropdown-menu\" role=\"menu\">' +\n            '';\n\n            if (this.getAcl().check('Contact', 'create')) {\n                html += '<li><a href=\"javascript:\" data-action=\"createContact\" data-address=\"'+address+'\">'+this.translate('Create Contact', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Lead', 'create')) {\n                html += '<li><a href=\"javascript:\" data-action=\"createLead\" data-address=\"'+address+'\">'+this.translate('Create Lead', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Contact', 'edit')) {\n                html += '<li><a href=\"javascript:\" data-action=\"addToContact\" data-address=\"'+address+'\">'+this.translate('Add to Contact', 'labels', 'Email')+'</a></li>';\n            }\n            if (this.getAcl().check('Lead', 'edit')) {\n                html += '<li><a href=\"javascript:\" data-action=\"addToLead\" data-address=\"'+address+'\">'+this.translate('Add to Lead', 'labels', 'Email')+'</a></li>';\n            }\n\n            html += '</ul>' +\n            '</span>';\n\n            return html;\n        },\n\n        parseNameFromStringAddress: function (value) {\n            value = value || '';\n            if (~value.indexOf('<')) {\n                var name = value.replace(/<(.*)>/, '').trim();\n                if (name.charAt(0) === '\"' && name.charAt(name.length - 1) === '\"') {\n                    name = name.substr(1, name.length - 2);\n                }\n                return name;\n            }\n            return null;\n        },\n\n        createPerson: function (scope, address) {\n            var address = address;\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n            var name = this.nameHash[address] || null;\n\n            if (!name) {\n                if (this.name == 'from') {\n                    name = this.parseNameFromStringAddress(fromString) || null;\n                }\n            }\n\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n\n            var attributes = {\n                emailAddress: address\n            };\n\n            if (this.model.get('accountId') && scope == 'Contact') {\n                attributes.accountId = this.model.get('accountId');\n                attributes.accountName = this.model.get('accountName');\n            }\n\n            if (name) {\n                var firstName = name.split(' ').slice(0, -1).join(' ');\n                var lastName = name.split(' ').slice(-1).join(' ');\n                attributes.firstName = firstName;\n                attributes.lastName = lastName;\n            }\n\n            var viewName = this.getMetadata().get('clientDefs.' + scope + '.modalViews.edit') || 'views/modals/edit';\n\n            this.createView('create', viewName, {\n                scope: scope,\n                attributes: attributes\n            }, function (view) {\n                view.render();\n                this.listenTo(view, 'after:save', function (model) {\n                    var nameHash = Espo.Utils.clone(this.model.get('nameHash') || {});\n                    var typeHash = Espo.Utils.clone(this.model.get('typeHash') || {});\n                    var idHash = Espo.Utils.clone(this.model.get('idHash') || {});\n\n                    idHash[address] = model.id;\n                    nameHash[address] = model.get('name');\n                    typeHash[address] = scope;\n\n                    this.idHash = idHash;\n                    this.nameHash = nameHash;\n                    this.typeHash = typeHash;\n\n                    var attributes = {\n                        nameHash: nameHash,\n                        idHash: idHash,\n                        typeHash: typeHash\n                    };\n\n                    setTimeout(function () {\n                        this.model.set(attributes);\n                    }.bind(this), 50);\n                }, this);\n            }.bind(this));\n        },\n\n        addToPerson: function (scope, address) {\n            var address = address;\n\n            var fromString = this.model.get('fromString') || this.model.get('fromName');\n            var name = this.nameHash[address] || null;\n\n            if (!name) {\n                if (this.name == 'from') {\n                    name = this.parseNameFromStringAddress(fromString) || null;\n                }\n            }\n\n            if (name) {\n                name = this.getHelper().escapeString(name);\n            }\n\n            var attributes = {\n                emailAddress: address\n            };\n\n            if (this.model.get('accountId') && scope == 'Contact') {\n                attributes.accountId = this.model.get('accountId');\n                attributes.accountName = this.model.get('accountName');\n            }\n\n            var viewName = this.getMetadata().get('clientDefs.' + scope + '.modalViews.select') || 'views/modals/select-records';\n\n            Espo.Ui.notify(this.translate('pleaseWait', 'messages'));\n\n            var filters = {};\n            if (name) {\n                filters['name'] = {\n                    type: 'equals',\n                    field: 'name',\n                    value: name\n                };\n            }\n\n            this.createView('dialog', viewName, {\n                scope: scope,\n                createButton: false,\n                filters: filters\n            }, function (view) {\n                view.render();\n                Espo.Ui.notify(false);\n                this.listenToOnce(view, 'select', function (model) {\n                    var afterSave = function () {\n                        var nameHash = Espo.Utils.clone(this.model.get('nameHash') || {});\n                        var typeHash = Espo.Utils.clone(this.model.get('typeHash') || {});\n                        var idHash = Espo.Utils.clone(this.model.get('idHash') || {});\n\n                        idHash[address] = model.id;\n                        nameHash[address] = model.get('name');\n                        typeHash[address] = scope;\n\n                        this.idHash = idHash;\n                        this.nameHash = nameHash;\n                        this.typeHash = typeHash;\n\n                        var attributes = {\n                            nameHash: nameHash,\n                            idHash: idHash,\n                            typeHash: typeHash\n                        };\n\n                        setTimeout(function () {\n                            this.model.set(attributes);\n                        }.bind(this), 50);\n                    }.bind(this);\n\n                    if (!model.get('emailAddress')) {\n                        model.save({\n                            'emailAddress': address\n                        }, {patch: true}).then(afterSave);\n                    } else {\n                        model.fetch().then(function () {\n                            var emailAddressData = model.get('emailAddressData') || [];\n                            var item = {\n                                emailAddress: address,\n                                primary: emailAddressData.length === 0\n                            };\n                            emailAddressData.push(item);\n                            model.save({\n                                'emailAddressData': emailAddressData\n                            }, {patch: true}).then(afterSave);\n                        }.bind(this));\n                    }\n\n                }, this);\n            }.bind(this));\n        }\n\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/fields/link-multiple-with-primary', 'views/fields/link-multiple', function (Dep) {\n\n    return Dep.extend({\n\n        primaryLink: null,\n\n        events: {\n            'click [data-action=\"switchPrimary\"]': function (e) {\n                $target = $(e.currentTarget);\n                var id = $target.data('id');\n\n                if (!$target.hasClass('active')) {\n                    this.$el.find('button[data-action=\"switchPrimary\"]').removeClass('active').children().addClass('text-muted');\n                    $target.addClass('active').children().removeClass('text-muted');\n                    this.setPrimaryId(id);\n                }\n            }\n        },\n\n        getAttributeList: function () {\n            var list = Dep.prototype.getAttributeList.call(this);\n            list.push(this.primaryIdFieldName);\n            list.push(this.primaryNameFieldName);\n            return list;\n        },\n\n        setup: function () {\n            this.primaryLink = this.options.primaryLink || this.primaryLink;\n\n            this.primaryIdFieldName = this.primaryLink + 'Id';\n            this.primaryNameFieldName = this.primaryLink + 'Name';\n\n            Dep.prototype.setup.call(this);\n\n\n            this.primaryId = this.model.get(this.primaryIdFieldName);\n            this.primaryName = this.model.get(this.primaryNameFieldName);\n\n            this.listenTo(this.model, 'change:' + this.primaryIdFieldName, function () {\n                this.primaryId = this.model.get(this.primaryIdFieldName);\n                this.primaryName = this.model.get(this.primaryNameFieldName);\n            }.bind(this));\n        },\n\n        setPrimaryId: function (id) {\n            this.primaryId = id;\n            if (id) {\n                this.primaryName = this.nameHash[id];\n            } else {\n                this.primaryName = null;\n            }\n\n            this.trigger('change');\n        },\n\n        renderLinks: function () {\n            if (this.primaryId) {\n                this.addLinkHtml(this.primaryId, this.primaryName);\n            }\n            this.ids.forEach(function (id) {\n                if (id != this.primaryId) {\n                    this.addLinkHtml(id, this.nameHash[id]);\n                }\n            }, this);\n        },\n\n        getValueForDisplay: function () {\n            if (this.mode == 'detail' || this.mode == 'list') {\n                var names = [];\n                if (this.primaryId) {\n                    names.push(this.getDetailLinkHtml(this.primaryId, this.primaryName));\n                }\n                if (!this.ids.length) {\n                    return;\n                }\n                this.ids.forEach(function (id) {\n                    if (id != this.primaryId) {\n                        names.push(this.getDetailLinkHtml(id));\n                    }\n                }, this);\n                return '<div>' + names.join('</div><div>') + '</div>';\n            }\n        },\n\n        deleteLink: function (id) {\n            if (id == this.primaryId) {\n                this.setPrimaryId(null);\n            }\n            Dep.prototype.deleteLink.call(this, id);\n        },\n\n        deleteLinkHtml: function (id) {\n            Dep.prototype.deleteLinkHtml.call(this, id);\n            this.managePrimaryButton();\n        },\n\n        addLinkHtml: function (id, name) {\n            if (this.mode == 'search') {\n                return Dep.prototype.addLinkHtml.call(this, id, name);\n            }\n\n            var $container = this.$el.find('.link-container');\n            var $el = $('<div class=\"form-inline list-group-item link-with-role clearfix link-group-item-with-primary\">').addClass('link-' + id).attr('data-id', id);\n\n            var nameHtml = '<div>' + this.getHelper().escapeString(name) + '&nbsp;' + '</div>';\n            var removeHtml = '<a href=\"javascript:\" class=\"pull-right\" data-id=\"' + id + '\" data-action=\"clearLink\"><span class=\"fas fa-times\"></a>';\n\n            $left = $('<div>');\n            $left.append(nameHtml);\n            $el.append($left);\n\n            $right = $('<div>');\n            $right.append(removeHtml);\n            $el.append($right);\n\n            var isPrimary = (id == this.primaryId);\n            var iconHtml = '<span class=\"fas fa-star fa-sm ' + (!isPrimary ? 'text-muted' : '') + '\"></span>';\n            var title = this.translate('Primary');\n            var $primary = $('<button type=\"button\" class=\"btn btn-link btn-sm pull-right hidden\" title=\"'+title+'\" data-action=\"switchPrimary\" data-id=\"'+id+'\">'+iconHtml+'</button>');\n            $primary.insertBefore($el.children().first().children().first());\n\n            $container.append($el);\n\n            this.managePrimaryButton();\n\n            return $el;\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n        },\n\n        managePrimaryButton: function () {\n            var $primary = this.$el.find('button[data-action=\"switchPrimary\"]');\n            if ($primary.length > 1) {\n                $primary.removeClass('hidden');\n            } else {\n                $primary.addClass('hidden');\n            }\n\n            if ($primary.filter('.active').length == 0) {\n                var $first = $primary.first();\n                if ($first.length) {\n                    $first.addClass('active').children().removeClass('text-muted');\n                    this.setPrimaryId($first.data('id'));\n                }\n            }\n        },\n\n        fetch: function () {\n            var data = Dep.prototype.fetch.call(this);\n\n            data[this.primaryIdFieldName] = this.primaryId;\n            data[this.primaryNameFieldName] = this.primaryName;\n\n            return data;\n        },\n\n    });\n});\n\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/assign', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'assign',\n\n        template: 'notification/items/assign',\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase());\n            this.messageData['entity'] = '<a href=\"#' + this.getHelper().escapeString(data.entityType) + '/view/' + this.getHelper().escapeString(data.entityId) + '\">' + this.getHelper().escapeString(data.entityName) + '</a>';\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/email-received', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'emailReceived',\n\n        template: 'notification/items/email-received',\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = this.getHelper().escapeString(Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase()));\n            if (data.personEntityId) {\n                this.messageData['from'] = '<a href=\"#' + this.getHelper().escapeString(data.personEntityType) + '/view/' + this.getHelper().escapeString(data.personEntityId) + '\">' + this.getHelper().escapeString(data.personEntityName) + '</a>';\n            } else {\n                this.messageData['from'] = this.getHelper().escapeString(data.fromString || this.translate('empty address'));\n            }\n\n            this.emailId = this.getHelper().escapeString(data.emailId);\n            this.emailName = this.getHelper().escapeString(data.emailName);\n\n            this.createMessage();\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/entity-removed', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: 'entityRemoved',\n\n        template: 'notification/items/entity-removed',\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = this.getHelper().escapeString((this.translate(data.entityType, 'scopeNames') || '').toLowerCase());\n\n            this.messageData['user'] = '<a href=\"#User/view/' + this.getHelper().escapeString(data.userId) + '\">' + this.getHelper().escapeString(data.userName) + '</a>';\n            this.messageData['entity'] = '<a href=\"#'+this.getHelper().escapeString(data.entityType)+'/view/' + this.getHelper().escapeString(data.entityId) + '\">' + this.getHelper().escapeString(data.entityName) + '</a>';\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/notification/items/message', 'views/notification/items/base', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'notification/items/message',\n\n        data: function () {\n            return _.extend({\n                style: this.style,\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.style = data.style || 'text-muted';\n\n            this.messageTemplate = this.model.get('message') || data.message || '';\n\n            this.userId = data.userId;\n\n            this.messageData['entityType'] = this.getHelper().escapeString(Espo.Utils.upperCaseFirst((this.translate(data.entityType, 'scopeNames') || '').toLowerCase()));\n\n            this.messageData['user'] = '<a href=\"#User/view/' + this.getHelper().escapeString(data.userId) + '\">' + this.getHelper().escapeString(data.userName) + '</a>';\n            this.messageData['entity'] = '<a href=\"#'+this.getHelper().escapeString(data.entityType)+'/view/' + this.getHelper().escapeString(data.entityId) + '\">' + this.getHelper().escapeString(data.entityName) + '</a>';\n\n            this.createMessage();\n        }\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/site/navbar', 'view', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'site/navbar',\n\n        currentTab: null,\n\n        data: function () {\n            return {\n                tabDefsList: this.tabDefsList,\n                title: this.options.title,\n                menuDataList: this.getMenuDataList(),\n                quickCreateList: this.quickCreateList,\n                enableQuickCreate: this.quickCreateList.length > 0,\n                userId: this.getUser().id,\n                logoSrc: this.getLogoSrc()\n            };\n        },\n\n        events: {\n            'click .navbar-collapse.in a.nav-link': function (e) {\n                var $a = $(e.currentTarget);\n                var href = $a.attr('href');\n                if (href) {\n                    this.$el.find('.navbar-collapse.in').collapse('hide');\n                }\n            },\n            'click a.nav-link': function (e) {\n                if (this.isSideMenuOpened) {\n                    this.closeSideMenu();\n                }\n            },\n            'click a.navbar-brand.nav-link': function (e) {\n                this.$el.find('.navbar-collapse.in').collapse('hide');\n            },\n            'click a[data-action=\"quick-create\"]': function (e) {\n                e.preventDefault();\n                var scope = $(e.currentTarget).data('name');\n                this.quickCreate(scope);\n            },\n            'click a.minimizer': function () {\n                this.switchMinimizer();\n            },\n            'click a.side-menu-button': function () {\n                this.switchSideMenu();\n            },\n            'click a.action': function (e) {\n                var $el = $(e.currentTarget);\n\n                var action = $el.data('action');\n                var method = 'action' + Espo.Utils.upperCaseFirst(action);\n                if (typeof this[method] == 'function') {\n                    var data = $el.data();\n                    this[method](data, e);\n                    e.preventDefault();\n                }\n            }\n        },\n\n        isMinimized: function () {\n            return this.$body.hasClass('minimized');\n        },\n\n        switchSideMenu: function () {\n            if (!this.isMinimized()) return;\n\n            if (this.isSideMenuOpened) {\n                this.closeSideMenu();\n            } else {\n                this.openSideMenu();\n            }\n        },\n\n        openSideMenu: function () {\n            this.isSideMenuOpened = true;\n            this.$body.addClass('side-menu-opened');\n\n            this.$sideMenuBackdrop = $('<div>').addClass('side-menu-backdrop');\n            this.$sideMenuBackdrop.click(function () {\n                this.closeSideMenu();\n            }.bind(this));\n            this.$sideMenuBackdrop.appendTo(this.$body);\n\n            this.$sideMenuBackdrop2 = $('<div>').addClass('side-menu-backdrop');\n            this.$sideMenuBackdrop2.click(function () {\n                this.closeSideMenu();\n            }.bind(this));\n            this.$sideMenuBackdrop2.appendTo(this.$navbarRightContainer);\n        },\n\n        closeSideMenu: function () {\n            this.isSideMenuOpened = false;\n            this.$body.removeClass('side-menu-opened');\n            this.$sideMenuBackdrop.remove();\n            this.$sideMenuBackdrop2.remove();\n        },\n\n        switchMinimizer: function () {\n            var $body = this.$body;\n            if (this.isMinimized()) {\n                if (this.isSideMenuOpened) {\n                    this.closeSideMenu();\n                }\n                $body.removeClass('minimized');\n                this.getStorage().set('state', 'siteLayoutState', 'expanded');\n            } else {\n                $body.addClass('minimized');\n                this.getStorage().set('state', 'siteLayoutState', 'collapsed');\n            }\n            if (window.Event) {\n                try {\n                    window.dispatchEvent(new Event('resize'));\n                } catch (e) {}\n            }\n        },\n\n        getLogoSrc: function () {\n            var companyLogoId = this.getConfig().get('companyLogoId');\n            if (!companyLogoId) {\n                return this.getBasePath() + (this.getThemeManager().getParam('logo') || 'client/img/logo.png');\n            }\n            return this.getBasePath() + '?entryPoint=LogoImage&id='+companyLogoId;\n        },\n\n        getTabList: function () {\n            var tabList = this.getPreferences().get('useCustomTabList') ? this.getPreferences().get('tabList') : this.getConfig().get('tabList');\n            tabList = Espo.Utils.clone(tabList || []);\n\n            if (this.getThemeManager().getParam('navbarIsVertical')) {\n                tabList.unshift('Home');\n            }\n            return tabList;\n        },\n\n        getQuickCreateList: function () {\n            return this.getConfig().get('quickCreateList') || [];\n        },\n\n        setup: function () {\n            this.getRouter().on('routed', function (e) {\n                if (e.controller) {\n                    this.selectTab(e.controller);\n                } else {\n                    this.selectTab(false);\n                }\n            }.bind(this));\n\n            var tabList = this.getTabList();\n\n            var scopes = this.getMetadata().get('scopes') || {};\n\n            this.tabList = tabList.filter(function (scope) {\n                if ((scopes[scope] || {}).disabled) return;\n                if ((scopes[scope] || {}).acl) {\n                    return this.getAcl().check(scope);\n                }\n                return true;\n            }, this);\n\n            this.quickCreateList = this.getQuickCreateList().filter(function (scope) {\n                if ((scopes[scope] || {}).disabled) return;\n                if ((scopes[scope] || {}).acl) {\n                    return this.getAcl().check(scope, 'create');\n                }\n                return true;\n            }, this);\n\n            this.createView('notificationsBadge', 'views/notification/badge', {\n                el: this.options.el + ' .notifications-badge-container'\n            });\n\n            this.setupGlobalSearch();\n\n            this.setupTabDefsList();\n\n            this.once('remove', function () {\n                $(window).off('resize.navbar');\n                $(window).off('scroll.navbar');\n            });\n        },\n\n        setupGlobalSearch: function () {\n            this.globalSearchAvailable = false;\n            (this.getConfig().get('globalSearchEntityList') || []).forEach(function (scope) {\n                if (this.globalSearchAvailable) return;\n                if (this.getAcl().checkScope(scope)) {\n                    this.globalSearchAvailable = true;\n                }\n            }, this);\n\n            if (this.globalSearchAvailable) {\n                this.createView('globalSearch', 'views/global-search/global-search', {\n                    el: this.options.el + ' .global-search-container'\n                });\n            }\n        },\n\n        adjustHorizontal: function () {\n            var smallScreenWidth = this.getThemeManager().getParam('screenWidthXs');\n\n            var $window = $(window);\n\n            var $tabs = this.$el.find('ul.tabs');\n            var $moreDropdown = $tabs.find('li.more');\n            var $more = $tabs.find('li.more > ul');\n\n            $window.on('resize.navbar', function() {\n                updateWidth();\n            });\n\n            var hideOneTab = function () {\n                var count = $tabs.children().length;\n                if (count <= 1) return;\n                var $one = $tabs.children().eq(count - 2);\n                $one.prependTo($more);\n            };\n            var unhideOneTab = function () {\n                var $one = $more.children().eq(0);\n                if ($one.length) {\n                    $one.insertBefore($moreDropdown);\n                }\n            };\n\n            var $navbar = $('#navbar .navbar');\n\n            if (window.innerWidth >= smallScreenWidth) {\n                $tabs.children('li').each(function (i, li) {\n                    hideOneTab();\n                });\n                $navbar.css('max-height', 'unset');\n                $navbar.css('overflow', 'visible');\n            }\n\n            var navbarHeight = this.getThemeManager().getParam('navbarHeight') || 43;\n            var navbarBaseWidth = this.getThemeManager().getParam('navbarBaseWidth') || 556;\n\n            var tabCount = this.tabList.length;\n\n            var navbarNeededHeight = navbarHeight + 1;\n\n            $moreDd = $('#nav-more-tabs-dropdown');\n            $moreLi = $moreDd.closest('li');\n\n            var updateWidth = function () {\n                var windowWidth = window.innerWidth;\n                var moreWidth = $moreLi.width();\n\n                $more.children('li.not-in-more').each(function (i, li) {\n                    unhideOneTab();\n                });\n\n                if (windowWidth < smallScreenWidth) {\n                    return;\n                }\n\n                $navbar.css('max-height', navbarHeight + 'px');\n                $navbar.css('overflow', 'hidden');\n\n                $more.parent().addClass('hidden');\n\n                var headerWidth = this.$el.width();\n\n                var maxWidth = headerWidth - navbarBaseWidth - moreWidth;\n                var width = $tabs.width();\n\n                var i = 0;\n                while (width > maxWidth) {\n                    hideOneTab();\n                    width = $tabs.width();\n                    i++;\n                    if (i >= tabCount) {\n                        setTimeout(function () {\n                            updateWidth();\n                        }, 100);\n                        break;\n                    }\n                }\n\n                $navbar.css('max-height', 'unset');\n                $navbar.css('overflow', 'visible');\n\n                if ($more.children().length > 0) {\n                    $moreDropdown.removeClass('hidden');\n                }\n            }.bind(this);\n\n            var processUpdateWidth = function (isRecursive) {\n                if ($navbar.height() > navbarNeededHeight) {\n                    updateWidth();\n                    setTimeout(function () {\n                        processUpdateWidth(true);\n                    }, 200);\n                } else {\n                    if (!isRecursive) {\n                        updateWidth();\n                        setTimeout(function () {\n                            processUpdateWidth(true);\n                        }, 10);\n                    }\n                    setTimeout(function () {\n                        processUpdateWidth(true);\n                    }, 1000);\n                }\n            };\n\n            if ($navbar.height() <= navbarNeededHeight && $more.children().length === 0) {\n                $more.parent().addClass('hidden');\n            }\n\n            processUpdateWidth();\n        },\n\n        adjustVertical: function () {\n            var smallScreenWidth = this.getThemeManager().getParam('screenWidthXs');\n            var navbarStaticItemsHeight = this.getThemeManager().getParam('navbarStaticItemsHeight') || 73;\n\n            var $window = $(window);\n\n            var $tabs = this.$el.find('ul.tabs');\n\n            var minHeight = $tabs.height() + navbarStaticItemsHeight;\n\n            var $more = $tabs.find('li.more > ul');\n\n            minHeight = Math.max(minHeight, $more.height());\n\n            if ($more.children().length === 0) {\n                $more.parent().addClass('hidden');\n            }\n\n            $('body').css('minHeight', minHeight + 'px');\n\n            $window.on('scroll.navbar', function () {\n                $tabs.scrollTop($window.scrollTop());\n                $more.scrollTop($window.scrollTop());\n            }.bind(this));\n\n            var updateSizeForVertical = function () {\n                var windowHeight = window.innerHeight;\n                var windowWidth = window.innerWidth;\n\n                if (windowWidth < smallScreenWidth) {\n                    $tabs.css('height', 'auto');\n                    $more.css('max-height', '');\n                } else {\n                    $tabs.css('height', (windowHeight - navbarStaticItemsHeight) + 'px');\n                    $more.css('max-height', windowHeight + 'px');\n                }\n            }.bind(this);\n\n            $(window).on('resize.navbar', function() {\n                updateSizeForVertical();\n            });\n            updateSizeForVertical();\n\n            this.$el.find('.notifications-badge-container').insertAfter(this.$el.find('.quick-create-container'));\n        },\n\n        afterRender: function () {\n            this.$body = $('body');\n\n            this.selectTab(this.getRouter().getLast().controller);\n\n            var layoutState = this.getStorage().get('state', 'siteLayoutState');\n            if (!layoutState) {\n                layoutState = $(window).width() > 1320 ? 'expanded' : 'collapsed';\n            }\n\n            var layoutMinimized = false;\n            if (layoutState === 'collapsed') {\n                layoutMinimized = true;\n            }\n\n            if (layoutMinimized) {\n                var $body = $('body');\n                $body.addClass('minimized');\n            }\n            this.$navbar = this.$el.find('> .navbar');\n            this.$navbarRightContainer = this.$navbar.find('> .navbar-body > .navbar-right-container');\n\n            var handlerClassName = this.getThemeManager().getParam('navbarAdjustmentHandler');\n            if (handlerClassName) {\n                require(handlerClassName, function (Handler) {\n                    var handler = new Handler(this);\n                    handler.process();\n                }.bind(this));\n            }\n\n            if (this.getThemeManager().getParam('skipDefaultNavbarAdjustment')) return;\n\n            if (this.getThemeManager().getParam('navbarIsVertical')) {\n                var process = function () {\n                    if (this.$navbar.height() < $(window).height() / 2) {\n                        setTimeout(function () {\n                            process();\n                        }.bind(this), 50);\n                        return;\n                    }\n                    if (this.getThemeManager().isUserTheme()) {\n                        setTimeout(function () {\n                            this.adjustVertical();\n                        }.bind(this), 10);\n                        return;\n                    }\n                    this.adjustVertical();\n                }.bind(this);\n                process();\n            } else {\n                var process = function () {\n                    if (this.$el.width() < $(window).width() / 2) {\n                        setTimeout(function () {\n                            process();\n                        }.bind(this), 50);\n                        return;\n                    }\n                    if (this.getThemeManager().isUserTheme()) {\n                        setTimeout(function () {\n                            this.adjustHorizontal();\n                        }.bind(this), 10);\n                        return;\n                    }\n                    this.adjustHorizontal();\n                }.bind(this);\n                process();\n            }\n        },\n\n        selectTab: function (name) {\n            if (this.currentTab != name) {\n                this.$el.find('ul.tabs li.active').removeClass('active');\n                if (name) {\n                    this.$el.find('ul.tabs li[data-name=\"' + name + '\"]').addClass('active');\n                }\n                this.currentTab = name;\n            }\n        },\n\n        setupTabDefsList: function () {\n            var tabDefsList = [];\n            var moreIsMet = false;\n            var colorsDisabled =\n                this.getPreferences().get('scopeColorsDisabled') ||\n                this.getPreferences().get('tabColorsDisabled') ||\n                this.getConfig().get('scopeColorsDisabled') ||\n                this.getConfig().get('tabColorsDisabled');\n            var tabIconsDisabled = this.getConfig().get('tabIconsDisabled');\n\n            this.tabList.forEach(function (tab, i) {\n                if (tab === '_delimiter_') {\n                    moreIsMet = true;\n                    return;\n                }\n\n                var label;\n                var link;\n\n                if (tab == 'Home') {\n                    label = this.getLanguage().translate(tab);\n                    link = '#';\n                } else {\n                    label = this.getLanguage().translate(tab, 'scopeNamesPlural');\n                    link = '#' + tab;\n                }\n\n                var color = null;\n                if (!colorsDisabled) {\n                    var color = this.getMetadata().get(['clientDefs', tab, 'color']);\n                }\n\n                var shortLabel = label.substr(0, 2);\n\n                var iconClass = null;\n                if (!tabIconsDisabled) {\n                    iconClass = this.getMetadata().get(['clientDefs', tab, 'iconClass'])\n                }\n\n                var o = {\n                    link: link,\n                    label: label,\n                    shortLabel: shortLabel,\n                    name: tab,\n                    isInMore: moreIsMet,\n                    color: color,\n                    iconClass: iconClass\n                };\n                if (color && !iconClass) {\n                    o.colorIconClass = 'color-icon fas fa-square-full';\n                }\n                tabDefsList.push(o);\n            }, this);\n            this.tabDefsList = tabDefsList;\n        },\n\n        getMenuDataList: function () {\n            var avatarHtml = this.getHelper().getAvatarHtml(this.getUser().id, 'small', 16, 'avatar-link');\n            if (avatarHtml) avatarHtml += ' ';\n\n            var list = [\n                {\n                    link: '#User/view/' + this.getUser().id,\n                    html: avatarHtml + this.getHelper().escapeString(this.getUser().get('name')),\n                },\n                {divider: true}\n            ];\n\n            if (this.getUser().isAdmin()) {\n                list.push({\n                    link: '#Admin',\n                    label: this.getLanguage().translate('Administration')\n                });\n            }\n\n            list.push({\n                link: '#Preferences',\n                label: this.getLanguage().translate('Preferences')\n            });\n\n            if (!this.getConfig().get('actionHistoryDisabled')) {\n                list.push({\n                    divider: true\n                });\n                list.push({\n                    action: 'showLastViewed',\n                    link: '#LastViewed',\n                    label: this.getLanguage().translate('LastViewed', 'scopeNamesPlural')\n                });\n            }\n\n            list = list.concat([\n                {\n                    divider: true\n                },\n                {\n                    link: '#About',\n                    label: this.getLanguage().translate('About')\n                },\n                {\n                    action: 'logout',\n                    label: this.getLanguage().translate('Log Out')\n                }\n            ]);\n\n            return list;\n        },\n\n        quickCreate: function (scope) {\n            Espo.Ui.notify(this.translate('Loading...'));\n            var type = this.getMetadata().get(['clientDefs', scope, 'quickCreateModalType']) || 'edit';\n            var viewName = this.getMetadata().get(['clientDefs', scope, 'modalViews', type]) || 'views/modals/edit';\n            this.createView('quickCreate', viewName , {scope: scope}, function (view) {\n                view.once('after:render', function () {\n                    Espo.Ui.notify(false);\n                });\n                view.render();\n            });\n        },\n\n        actionLogout: function () {\n            this.getRouter().logout();\n        },\n\n        actionShowLastViewed: function () {\n            this.createView('dialog', 'views/modals/last-viewed', {}, function (view) {\n                view.render();\n                this.listenTo(view, 'close', function () {\n                    this.clearView('dialog');\n                }, this);\n            }, this);\n        },\n\n        actionShowHistory: function () {\n            this.createView('dialog', 'views/modals/action-history', {}, function (view) {\n                view.render();\n                this.listenTo(view, 'close', function () {\n                    this.clearView('dialog');\n                }, this);\n            }, this);\n        }\n    });\n\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/note', 'view', function (Dep) {\n\n    return Dep.extend({\n\n        messageName: null,\n\n        messageTemplate: null,\n\n        messageData: null,\n\n        isEditable: false,\n\n        isRemovable: false,\n\n        isSystemAvatar: false,\n\n        data: function () {\n            return {\n                isUserStream: this.isUserStream,\n                noEdit: this.options.noEdit,\n                acl: this.options.acl,\n                onlyContent: this.options.onlyContent,\n                avatar: this.getAvatarHtml()\n            };\n        },\n\n        init: function () {\n            this.createField('createdAt', null, null, 'views/fields/datetime-short');\n            this.isUserStream = this.options.isUserStream;\n            this.isThis = !this.isUserStream;\n\n            this.parentModel = this.options.parentModel;\n\n            if (!this.isUserStream) {\n                if (this.parentModel) {\n                    if (\n                        this.parentModel.name != this.model.get('parentType') ||\n                        this.parentModel.id != this.model.get('parentId')\n                    ) {\n                        this.isThis = false;\n                    }\n                }\n            }\n\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n\n            if (this.messageName && this.isThis) {\n                this.messageName += 'This';\n            }\n\n            if (!this.isThis) {\n                this.createField('parent');\n            }\n\n            this.messageData = {\n                'user': 'field:createdBy',\n                'entity': 'field:parent',\n                'entityType': this.getHelper().escapeString(this.translateEntityType(this.model.get('parentType'))),\n            };\n\n            if (!this.options.noEdit && (this.isEditable || this.isRemovable)) {\n                this.createView('right', 'views/stream/row-actions/default', {\n                    el: this.options.el + ' .right-container',\n                    acl: this.options.acl,\n                    model: this.model,\n                    isEditable: this.isEditable,\n                    isRemovable: this.isRemovable\n                });\n            }\n        },\n\n        translateEntityType: function (entityType, isPlural) {\n            var string;\n\n            if (!isPlural) {\n                string = (this.translate(entityType, 'scopeNames') || '');\n            } else {\n                string = (this.translate(entityType, 'scopeNamesPlural') || '');\n            }\n\n            string = string.toLowerCase();\n\n            var language = this.getPreferences().get('language') || this.getConfig().get('language');\n\n            if (~['de_DE', 'nl_NL'].indexOf(language)) {\n                string = Espo.Utils.upperCaseFirst(string);\n            }\n            return string;\n        },\n\n        createField: function (name, type, params, view, options) {\n            type = type || this.model.getFieldType(name) || 'base';\n            var o = {\n                model: this.model,\n                defs: {\n                    name: name,\n                    params: params || {}\n                },\n                el: this.options.el + ' .cell-' + name,\n                mode: 'list'\n            };\n            if (options) {\n                for (var i in options) {\n                    o[i] = options[i];\n                }\n            }\n            this.createView(name, view || this.getFieldManager().getViewName(type), o);\n        },\n\n        isMale: function () {\n            return this.model.get('createdByGender') === 'Male';\n        },\n\n        isFemale: function () {\n            return this.model.get('createdByGender') === 'Female';\n        },\n\n        createMessage: function () {\n            if (!this.messageTemplate) {\n                var isTranslated = false;\n\n                var parentType = this.model.get('parentType');\n\n                if (this.isMale()) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessagesMale', parentType || null) || '';\n                    if (this.messageTemplate !== this.messageName) {\n                        isTranslated = true;\n                    }\n                } else if (this.isFemale()) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessagesFemale', parentType || null) || '';\n                    if (this.messageTemplate !== this.messageName) {\n                        isTranslated = true;\n                    }\n                }\n                if (!isTranslated) {\n                    this.messageTemplate = this.translate(this.messageName, 'streamMessages', parentType || null) || '';\n                }\n            }\n\n            this.createView('message', 'views/stream/message', {\n                messageTemplate: this.messageTemplate,\n                el: this.options.el + ' .message',\n                model: this.model,\n                messageData: this.messageData\n            });\n        },\n\n        getAvatarHtml: function () {\n            var id = this.model.get('createdById');\n            if (this.isSystemAvatar) {\n                id = 'system';\n            }\n            return this.getHelper().getAvatarHtml(id, 'small', 20);\n        },\n\n        getIconHtml: function (scope, id) {\n            if (this.isThis && scope === this.parentModel.name) return;\n            var iconClass = this.getMetadata().get(['clientDefs', scope, 'iconClass']);\n            if (!iconClass) return;\n            return '<span class=\"'+iconClass+' action text-muted icon\" style=\"cursor: pointer;\" title=\"'+this.translate('View')+'\" data-action=\"quickView\" data-id=\"'+id+'\" data-scope=\"'+scope+'\"></span>';\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/assign', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/assign',\n\n        messageName: 'assign',\n\n        data: function () {\n            return _.extend({\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data');\n\n            this.assignedUserId = data.assignedUserId || null;\n            this.assignedUserName = data.assignedUserName || null;\n\n            this.messageData['assignee'] = '<a href=\"#User/view/' + this.getHelper().escapeString(data.assignedUserId) + '\">' + this.getHelper().escapeString(data.assignedUserName) + '</a>';\n\n            if (this.isUserStream) {\n                if (this.assignedUserId) {\n                    if (this.assignedUserId == this.model.get('createdById')) {\n                        this.messageName += 'Self';\n                    } else {\n                        if (this.assignedUserId == this.getUser().id) {\n                            this.messageName += 'You';\n                        }\n                    }\n                } else {\n                    this.messageName += 'Void';\n                }\n            } else {\n                if (this.assignedUserId) {\n                    if (this.assignedUserId == this.model.get('createdById')) {\n                        this.messageName += 'Self';\n                    }\n                } else {\n                    this.messageName += 'Void';\n                }\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/create-related', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create-related',\n\n        messageName: 'createRelated',\n\n        data: function () {\n            return _.extend({\n                relatedTypeString: this.translateEntityType(this.entityType),\n                iconHtml: this.getIconHtml(this.entityType, this.entityId)\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.entityType = this.model.get('relatedType') || data.entityType || null;\n            this.entityId = this.model.get('relatedId') || data.entityId || null;\n            this.entityName = this.model.get('relatedName') ||  data.entityName || null;\n\n            this.messageData['relatedEntityType'] = this.translateEntityType(this.entityType);\n            this.messageData['relatedEntity'] = '<a href=\"#' + this.getHelper().escapeString(this.entityType) + '/view/' + this.getHelper().escapeString(this.entityId) + '\">' + this.getHelper().escapeString(this.entityName) +'</a>';\n\n            this.createMessage();\n        }\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/create', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create',\n\n        assigned: false,\n\n        messageName: 'create',\n\n        isRemovable: false,\n\n        data: function () {\n            return _.extend({\n                statusText: this.statusText,\n                statusStyle: this.statusStyle\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            if (this.model.get('data')) {\n                var data = this.model.get('data');\n\n                this.assignedUserId = data.assignedUserId || null;\n                this.assignedUserName = data.assignedUserName || null;\n\n                this.messageData['assignee'] = '<a href=\"#User/view/' + this.assignedUserId + '\">' + this.getHelper().escapeString(this.assignedUserName) + '</a>';\n\n                var isYou = false;\n                if (this.isUserStream) {\n                    if (this.assignedUserId == this.getUser().id) {\n                        isYou = true;\n                    }\n                }\n\n                if (this.assignedUserId) {\n                    this.messageName = 'createAssigned';\n\n                    if (this.isThis) {\n                        this.messageName += 'This';\n\n                        if (this.assignedUserId == this.model.get('createdById')) {\n                            this.messageName += 'Self';\n                        }\n                    } else {\n                        if (this.assignedUserId == this.model.get('createdById')) {\n                            this.messageName += 'Self';\n                        } else {\n                            if (isYou) {\n                                this.messageName += 'You';\n                            }\n                        }\n                    }\n                }\n\n                if (data.statusField) {\n                    var statusField = this.statusField = data.statusField;\n                    var statusValue = data.statusValue;\n                    this.statusStyle = data.statusStyle || 'default';\n                    this.statusText = this.getLanguage().translateOption(statusValue, statusField, this.model.get('parentType'));\n                }\n            }\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/email-received', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/email-received',\n\n        isRemovable: false,\n\n        isSystemAvatar: true,\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName,\n                hasPost: this.hasPost,\n                hasAttachments: this.hasAttachments,\n                emailIconClassName: this.getMetadata().get(['clientDefs', 'Email', 'iconClass']) || ''\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.emailId = data.emailId;\n            this.emailName = data.emailName;\n\n            if (\n                this.parentModel\n                &&\n                (this.model.get('parentType') == this.parentModel.name && this.model.get('parentId') == this.parentModel.id)\n            ) {\n                if (this.model.get('post')) {\n                    this.createField('post', null, null, 'views/stream/fields/post');\n                    this.hasPost = true;\n                }\n                if ((this.model.get('attachmentsIds') || []).length) {\n                    this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple');\n                    this.hasAttachments = true;\n                }\n            }\n\n            this.messageData['email'] = '<a href=\"#Email/view/' + this.getHelper().escapeString(data.emailId) + '\">' + this.getHelper().escapeString(data.emailName) + '</a>';\n\n            this.messageName = 'emailReceived';\n\n            if (data.isInitial) {\n                this.messageName += 'Initial';\n            }\n\n            if (data.personEntityId) {\n                this.messageName += 'From';\n                this.messageData['from'] = '<a href=\"#'+this.getHelper().escapeString(data.personEntityType)+'/view/' + this.getHelper().escapeString(data.personEntityId) + '\">' + this.getHelper().escapeString(data.personEntityName) + '</a>';\n            }\n\n            if (this.model.get('parentType') === data.personEntityType && this.model.get('parentId') == data.personEntityId) {\n                this.isThis = true;\n            }\n\n            if (this.isThis) {\n                this.messageName += 'This';\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/email-sent', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/email-sent',\n\n        isRemovable: false,\n\n        data: function () {\n            return _.extend({\n                emailId: this.emailId,\n                emailName: this.emailName,\n                hasPost: this.hasPost,\n                hasAttachments: this.hasAttachments,\n                emailIconClassName: this.getMetadata().get(['clientDefs', 'Email', 'iconClass']) || ''\n            }, Dep.prototype.data.call(this));\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.emailId = data.emailId;\n            this.emailName = data.emailName;\n\n            if (\n                this.parentModel\n                &&\n                (this.model.get('parentType') == this.parentModel.name && this.model.get('parentId') == this.parentModel.id)\n            ) {\n                if (this.model.get('post')) {\n                    this.createField('post', null, null, 'views/stream/fields/post');\n                    this.hasPost = true;\n                }\n                if ((this.model.get('attachmentsIds') || []).length) {\n                    this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple');\n                    this.hasAttachments = true;\n                }\n            }\n\n            this.messageData['email'] = '<a href=\"#Email/view/' + this.getHelper().escapeString(data.emailId) + '\">' + this.getHelper().escapeString(data.emailName) + '</a>';\n\n            this.messageName = 'emailSent';\n\n            this.messageData['by'] = '<a href=\"#'+this.getHelper().escapeString(data.personEntityType)+'/view/' + this.getHelper().escapeString(data.personEntityId) + '\">' + this.getHelper().escapeString(data.personEntityName) + '</a>';\n\n\n            if (this.isThis) {\n                this.messageName += 'This';\n            }\n\n            this.createMessage();\n        },\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/mention-in-post', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/post',\n\n        messageName: 'mentionInPost',\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.showAttachments = !!(this.model.get('attachmentsIds') || []).length;\n            data.showPost = !!this.model.get('post');\n            return data;\n        },\n\n        setup: function () {\n            if (this.model.get('post')) {\n                this.createField('post', null, null, 'views/stream/fields/post');\n            }\n            if ((this.model.get('attachmentsIds') || []).length) {\n                this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple', {\n                    previewSize: this.options.isNotification ? 'small' : null\n                });\n            }\n\n            var data = this.model.get('data');\n\n            this.messageData['mentioned'] = this.options.userId;\n\n            if (!this.model.get('parentId')) {\n                this.messageName = 'mentionInPostTarget';\n            }\n\n            if (this.isUserStream) {\n                if (this.options.userId == this.getUser().id) {\n                    if (!this.model.get('parentId')) {\n                        this.messageName = 'mentionYouInPostTarget';\n                        if (this.model.get('isGlobal')) {\n                            this.messageName = 'mentionYouInPostTargetAll';\n                        } else {\n                            this.messageName = 'mentionYouInPostTarget';\n                            if (this.model.has('teamsIds') && this.model.get('teamsIds').length) {\n                                var teamIdList = this.model.get('teamsIds');\n                                var teamNameHash = this.model.get('teamsNames') || {};\n\n                                var targetHtml = '';\n                                var teamHtmlList = [];\n                                teamIdList.forEach(function (teamId) {\n                                    var teamName = teamNameHash[teamId];\n                                    if (teamName) {\n                                        teamHtmlList.push('<a href=\"#Team/view/' + this.getHelper().escapeString(teamId) + '\">' + this.getHelper().escapeString(teamName) + '</a>');\n                                    }\n                                }, this);\n\n                                this.messageData['target'] = teamHtmlList.join(', ');\n                            } else if (this.model.has('usersIds') && this.model.get('usersIds').length) {\n                                var userIdList = this.model.get('usersIds');\n                                var userNameHash = this.model.get('usersNames') || {};\n\n                                if (userIdList.length === 1 && userIdList[0] === this.model.get('createdById')) {\n                                    this.messageName = 'mentionYouInPostTargetNoTarget';\n                                } else {\n                                    var userHtml = '';\n                                    var userHtmlList = [];\n                                    userIdList.forEach(function (userId) {\n                                        var userName = userNameHash[userId];\n                                        if (userName) {\n                                            userHtmlList.push('<a href=\"#User/view/' + this.getHelper().escapeString(userId) + '\">' + this.getHelper().escapeString(userName) + '</a>');\n                                        }\n                                    }, this);\n                                    this.messageData['target'] = userHtmlList.join(', ');\n                                }\n                            } else if (this.model.get('targetType') === 'self') {\n                                this.messageName = 'mentionYouInPostTargetNoTarget';\n                            }\n                        }\n                    } else {\n                        this.messageName = 'mentionYouInPost';\n                    }\n                }\n            }\n\n            this.createMessage();\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/post', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/post',\n\n        messageName: 'post',\n\n        isEditable: true,\n\n        isRemovable: true,\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n            data.showAttachments = !!(this.model.get('attachmentsIds') || []).length;\n            data.showPost = !!this.model.get('post');\n            data.isInternal = this.isInternal;\n            return data;\n        },\n\n        setup: function () {\n\n            this.createField('post', null, null, 'views/stream/fields/post');\n            this.createField('attachments', 'attachmentMultiple', {}, 'views/stream/fields/attachment-multiple', {\n                previewSize: this.options.isNotification ? 'small' : 'medium'\n            });\n\n            this.isInternal = this.model.get('isInternal');\n\n            if (!this.model.get('post') && this.model.get('parentId')) {\n                this.messageName = 'attach';\n                if (this.isThis) {\n                    this.messageName += 'This';\n                }\n            }\n\n            this.listenTo(this.model, 'change', function () {\n                if (this.model.hasChanged('post') || this.model.hasChanged('attachmentsIds')) {\n                    this.reRender();\n                }\n            }, this);\n\n            if (!this.model.get('parentId')) {\n                if (this.model.get('isGlobal')) {\n                    this.messageName = 'postTargetAll';\n                } else {\n                    if (this.model.has('teamsIds') && this.model.get('teamsIds').length) {\n                        var teamIdList = this.model.get('teamsIds');\n                        var teamNameHash = this.model.get('teamsNames') || {};\n                        this.messageName = 'postTargetTeam';\n                        if (teamIdList.length > 1) {\n                            this.messageName = 'postTargetTeams';\n                        }\n\n                        var targetHtml = '';\n                        var teamHtmlList = [];\n                        teamIdList.forEach(function (teamId) {\n                            var teamName = teamNameHash[teamId];\n                            if (teamName) {\n                                teamHtmlList.push('<a href=\"#Team/view/' + this.getHelper().escapeString(teamId) + '\">' + this.getHelper().escapeString(teamName) + '</a>');\n                            }\n                        }, this);\n\n                        this.messageData['target'] = teamHtmlList.join(', ');\n                    } else if (this.model.has('portalsIds') && this.model.get('portalsIds').length) {\n                        var portalIdList = this.model.get('portalsIds');\n                        var portalNameHash = this.model.get('portalsNames') || {};\n                        this.messageName = 'postTargetPortal';\n                        if (portalIdList.length > 1) {\n                            this.messageName = 'postTargetPortals';\n                        }\n\n                        var targetHtml = '';\n                        var portalHtmlList = [];\n                        portalIdList.forEach(function (portalId) {\n                            var portalName = portalNameHash[portalId];\n                            if (portalName) {\n                                portalHtmlList.push('<a href=\"#Portal/view/' + this.getHelper().escapeString(portalId) + '\">' + this.getHelper().escapeString(portalName) + '</a>');\n                            }\n                        }, this);\n\n                        this.messageData['target'] = portalHtmlList.join(', ');\n                    } else if (this.model.has('usersIds') && this.model.get('usersIds').length) {\n                        var userIdList = this.model.get('usersIds');\n                        var userNameHash = this.model.get('usersNames') || {};\n\n                        this.messageName = 'postTarget';\n\n                        if (userIdList.length === 1 && userIdList[0] === this.model.get('createdById')) {\n                            this.messageName = 'postTargetSelf';\n                        } else {\n                            var userHtml = '';\n                            var userHtmlList = [];\n                            userIdList.forEach(function (userId) {\n                                if (userId === this.getUser().id) {\n                                    this.messageName = 'postTargetYou';\n                                    if (userIdList.length > 1) {\n                                        if (userId === this.model.get('createdById')) {\n                                            this.messageName = 'postTargetSelfAndOthers';\n                                        } else {\n                                            this.messageName = 'postTargetYouAndOthers';\n                                        }\n                                    }\n                                } else {\n                                    if (userId === this.model.get('createdById')) {\n                                        this.messageName = 'postTargetSelfAndOthers';\n                                    } else {\n                                        var userName = userNameHash[userId];\n                                        if (userName) {\n                                            userHtmlList.push('<a href=\"#User/view/' + this.getHelper().escapeString(userId) + '\">' + this.getHelper().escapeString(userName) + '</a>');\n                                        }\n                                    }\n                                }\n                            }, this);\n                            this.messageData['target'] = userHtmlList.join(', ');\n                        }\n                    }\n                }\n            }\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/relate', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/create-related',\n\n        messageName: 'relate',\n\n        data: function () {\n            return _.extend({\n                relatedTypeString: this.translateEntityType(this.entityType)\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data') || {};\n\n            this.entityType = this.model.get('relatedType') || data.entityType || null;\n            this.entityId = this.model.get('relatedId') || data.entityId || null;\n            this.entityName = this.model.get('relatedName') ||  data.entityName || null;\n\n            this.messageData['relatedEntityType'] = this.translateEntityType(this.entityType);\n            this.messageData['relatedEntity'] = '<a href=\"#' + this.getHelper().escapeString(this.entityType) + '/view/' + this.getHelper().escapeString(this.entityId) + '\">' + this.getHelper().escapeString(this.entityName) +'</a>';\n\n            this.createMessage();\n        },\n    });\n});\n\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/stream/notes/status', 'views/stream/note', function (Dep) {\n\n    return Dep.extend({\n\n        template: 'stream/notes/status',\n\n        messageName: 'status',\n\n        data: function () {\n            return _.extend({\n                style: this.style,\n                statusText: this.statusText,\n            }, Dep.prototype.data.call(this));\n        },\n\n        init: function () {\n            if (this.getUser().isAdmin()) {\n                this.isRemovable = true;\n            }\n            Dep.prototype.init.call(this);\n        },\n\n        setup: function () {\n            var data = this.model.get('data');\n\n            var field = data.field;\n            var value = data.value;\n\n            this.style = data.style || 'default';\n\n            this.statusText = this.getHelper().escapeString(this.getLanguage().translateOption(value, field, this.model.get('parentType')));\n\n            this.messageData['field'] = this.translate(field, 'fields', this.model.get('parentType')).toLowerCase();\n\n            this.createMessage();\n        },\n\n    });\n});\n\n"], "filenames": ["client/src/views/email/fields/email-address-varchar.js", "client/src/views/email/fields/from-address-varchar.js", "client/src/views/fields/link-multiple-with-primary.js", "client/src/views/notification/items/assign.js", "client/src/views/notification/items/email-received.js", "client/src/views/notification/items/entity-removed.js", "client/src/views/notification/items/message.js", "client/src/views/site/navbar.js", "client/src/views/stream/note.js", "client/src/views/stream/notes/assign.js", "client/src/views/stream/notes/create-related.js", "client/src/views/stream/notes/create.js", "client/src/views/stream/notes/email-received.js", "client/src/views/stream/notes/email-sent.js", "client/src/views/stream/notes/mention-in-post.js", "client/src/views/stream/notes/post.js", "client/src/views/stream/notes/relate.js", "client/src/views/stream/notes/status.js"], "buggy_code_start_loc": [205, 108, 133, 43, 49, 42, 50, 44, 88, 55, 59, 55, 70, 68, 79, 88, 58, 59], "buggy_code_end_loc": [289, 240, 134, 44, 65, 46, 54, 532, 89, 56, 60, 56, 81, 73, 117, 139, 59, 60], "fixing_code_start_loc": [206, 109, 133, 43, 49, 42, 50, 43, 88, 55, 59, 55, 70, 68, 79, 88, 58, 59], "fixing_code_end_loc": [305, 256, 134, 44, 63, 46, 54, 531, 89, 56, 60, 56, 81, 73, 115, 139, 59, 60], "type": "CWE-79", "message": "An issue was discovered in EspoCRM before 5.6.6. There is stored XSS due to lack of filtration of user-supplied data in Create Task. A malicious attacker can modify the parameter name to contain JavaScript code.", "other": {"cve": {"id": "CVE-2019-14329", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-28T14:15:10.837", "lastModified": "2019-07-30T14:03:54.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in EspoCRM before 5.6.6. There is stored XSS due to lack of filtration of user-supplied data in Create Task. A malicious attacker can modify the parameter name to contain JavaScript code."}, {"lang": "es", "value": "Se detect\u00f3 un problema en EspoCRM anterior a versi\u00f3n 5.6.6. Se presenta un XSS almacenado debido a la falta de filtrado de los datos suministrados por el usuario en Create Task. Un atacante malicioso puede modificar el nombre del par\u00e1metro para que contenga c\u00f3digo JavaScript."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:espocrm:espocrm:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.6", "matchCriteriaId": "B292914C-C64F-4063-9EF5-38577CB3D454"}]}]}], "references": [{"url": "http://www.cinquino.eu/EspoCRM.htm", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/espocrm/espocrm/commit/4ab7d19776011288b875abd3eef1e1f6f75289e2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/espocrm/espocrm/compare/5.6.5...5.6.6", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/espocrm/espocrm/commit/4ab7d19776011288b875abd3eef1e1f6f75289e2"}}