{"buggy_code": ["---\nid: django\ntitle: Django\n---\n\n![Release](https://img.shields.io/github/v/tag/gofiber/template?filter=django*)\n[![Discord](https://img.shields.io/discord/704680098577514527?style=flat&label=%F0%9F%92%AC%20discord&color=00ACD7)](https://gofiber.io/discord)\n![Test](https://github.com/gofiber/template/workflows/Tests/badge.svg)\n![Security](https://github.com/gofiber/template/workflows/Security/badge.svg)\n![Linter](https://github.com/gofiber/template/workflows/Linter/badge.svg)\n\nDjango is a template engine create by [flosch](https://github.com/flosch/pongo2), to see the original syntax documentation please [click here](https://docs.djangoproject.com/en/dev/topics/templates/)\n\n### Basic Example\n\n_**./views/index.django**_\n```html\n{% include \"partials/header.django\" %}\n\n<h1>{{ Title }}</h1>\n\n{% include \"partials/footer.django\" %}\n```\n_**./views/partials/header.django**_\n```html\n<h2>Header</h2>\n```\n_**./views/partials/footer.django**_\n```html\n<h2>Footer</h2>\n```\n_**./views/layouts/main.django**_\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Main</title>\n</head>\n\n<body>\n  {{embed}}\n</body>\n\n</html>\n```\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/django/v3\"\n)\n\nfunc main() {\n\t// Create a new engine\n\tengine := django.New(\"./views\", \".django\")\n\n  // Or from an embedded system\n  // See github.com/gofiber/embed for examples\n  // engine := html.NewFileSystem(http.Dir(\"./views\", \".django\"))\n\n\t// Pass the engine to the Views\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\t// Render index\n\t\treturn c.Render(\"index\", fiber.Map{\n\t\t\t\"Title\": \"Hello, World!\",\n\t\t})\n\t})\n\n\tapp.Get(\"/layout\", func(c *fiber.Ctx) error {\n\t\t// Render index within layouts/main\n\t\treturn c.Render(\"index\", fiber.Map{\n\t\t\t\"Title\": \"Hello, World!\",\n\t\t}, \"layouts/main\")\n\t})\n\n\tlog.Fatal(app.Listen(\":3000\"))\n}\n\n```\n### Using embedded file system (1.16+ only)\n\nWhen using the `// go:embed` directive, resolution of inherited templates using django's `{% extend '' %}` keyword fails when instantiating the template engine with `django.NewFileSystem()`. In that case, use the `django.NewPathForwardingFileSystem()` function to instantiate the template engine. \n\nThis function provides the proper configuration for resolving inherited templates.\n\nAssume you have the following files:\n\n- [views/ancenstor.django](https://github.com/gofiber/template/blob/master/django/views/ancestor.django)\n- [views/descendant.djando](https://github.com/gofiber/template/blob/master/django/views/descendant.django)\n\nthen\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"embed\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/django/v3\"\n)\n\n//go:embed views\nvar viewsAsssets embed.FS\n\nfunc main() {\n\t// Create a new engine\n\tengine := NewPathForwardingFileSystem(http.FS(viewsAsssets), \"/views\", \".django\")\n\n\t// Pass the engine to the Views\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\t// Render descendant\n\t\treturn c.Render(\"descendant\", fiber.Map{\n\t\t\t\"greeting\": \"World\",\n\t\t})\n\t})\n\n\tlog.Fatal(app.Listen(\":3000\"))\n}\n\n```\n\n### Register and use custom functions\n```go\n// My custom function\nfunc Nl2brHtml(value interface{}) string {\n\tif str, ok := value.(string); ok {\n\t\treturn strings.Replace(str, \"\\n\", \"<br />\", -1)\n\t}\n\treturn \"\"\n}\n\n// Create a new engine\nengine := django.New(\"./views\", \".django\")\n\n// register functions\nengine.AddFunc(\"nl2br\", Nl2brHtml)\n\n// Pass the engine to the Views\napp := fiber.New(fiber.Config{Views: engine})\n```\n_**in the handler**_\n```go\nc.Render(\"index\", fiber.Map{\n    \"Fiber\": \"Hello, World!\\n\\nGreetings from Fiber Team\",\n})\n```\n\n_**./views/index.django**_\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta charset=\"UTF-8\"></head>\n<body>\n{{ nl2br(Fiber) }}\n</body>\n</html>\n```\n**Output:**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta charset=\"UTF-8\"></head>\n<body>\nHello, World!<br /><br />Greetings from Fiber Team\n</body>\n</html>\n```\n\n### Important Information on Template Data Binding\n\nWhen working with Pongo2 and this template engine, it's crucial to understand the specific rules for data binding. Only keys that match the following regular expression are supported: `^[a-zA-Z0-9_]+$`.\n\nThis means that keys with special characters or punctuation, such as `my-key` or `my.key`, are not compatible and will not be bound to the template. This is a restriction imposed by the underlying Pongo2 template engine. Please ensure your keys adhere to these rules to avoid any binding issues.\n\nIf you need to access a value in the template that doesn't adhere to the key naming restrictions imposed by the Pongo2 template engine, you can bind the value to a new field when calling `fiber.Render`. Here's an example:\n\n```go\nc.Render(\"index\", fiber.Map{\n    \"Fiber\": \"Hello, World!\\n\\nGreetings from Fiber Team\",\n    \"MyKey\": c.Locals(\"my-key\"),\n})", "package django\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\n\t\"github.com/flosch/pongo2/v6\"\n\tcore \"github.com/gofiber/template\"\n\t\"github.com/gofiber/utils\"\n)\n\n// Engine struct\ntype Engine struct {\n\tcore.Engine\n\t// forward the base path to the template Engine\n\tforwardPath bool\n\t// templates\n\tTemplates map[string]*pongo2.Template\n}\n\n// New returns a Django render engine for Fiber\nfunc New(directory, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  directory,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t}\n\treturn engine\n}\n\n// NewFileSystem returns a Django render engine for Fiber with file system\nfunc NewFileSystem(fs http.FileSystem, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  \"/\",\n\t\t\tFileSystem: fs,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t}\n\treturn engine\n}\n\n// NewPathForwardingFileSystem Passes \"Directory\" to the template engine where alternative functions don't.\n//\n//\tThis fixes errors during resolution of templates when \"{% extends 'parent.html' %}\" is used.\nfunc NewPathForwardingFileSystem(fs http.FileSystem, directory, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  directory,\n\t\t\tFileSystem: fs,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t\tforwardPath: true,\n\t}\n\treturn engine\n}\n\n// Load parses the templates to the engine.\nfunc (e *Engine) Load() error {\n\t// race safe\n\te.Mutex.Lock()\n\tdefer e.Mutex.Unlock()\n\n\te.Templates = make(map[string]*pongo2.Template)\n\n\tbaseDir := e.Directory\n\n\tvar pongoloader pongo2.TemplateLoader\n\tif e.FileSystem != nil {\n\t\t// ensures creation of httpFileSystemLoader only when filesystem is defined\n\t\tif e.forwardPath {\n\t\t\tpongoloader = pongo2.MustNewHttpFileSystemLoader(e.FileSystem, baseDir)\n\t\t} else {\n\t\t\tpongoloader = pongo2.MustNewHttpFileSystemLoader(e.FileSystem, \"\")\n\t\t}\n\t} else {\n\t\tpongoloader = pongo2.MustNewLocalFileSystemLoader(baseDir)\n\t}\n\n\t// New pongo2 defaultset\n\tpongoset := pongo2.NewSet(\"default\", pongoloader)\n\t// Set template settings\n\tpongoset.Globals.Update(e.Funcmap)\n\tpongo2.SetAutoescape(false)\n\n\t// Loop trough each Directory and register template files\n\twalkFn := func(path string, info os.FileInfo, err error) error {\n\t\t// Return error if exist\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Skip file if it's a directory or has no file info\n\t\tif info == nil || info.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\t// Skip file if it does not equal the given template Extension\n\t\tif len(e.Extension) >= len(path) || path[len(path)-len(e.Extension):] != e.Extension {\n\t\t\treturn nil\n\t\t}\n\t\t// Get the relative file path\n\t\t// ./views/html/index.tmpl -> index.tmpl\n\t\trel, err := filepath.Rel(e.Directory, path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Reverse slashes '\\' -> '/' and\n\t\t// partials\\footer.tmpl -> partials/footer.tmpl\n\t\tname := filepath.ToSlash(rel)\n\t\t// Remove ext from name 'index.tmpl' -> 'index'\n\t\tname = strings.TrimSuffix(name, e.Extension)\n\t\t// name = strings.Replace(name, e.Extension, \"\", -1)\n\t\t// Read the file\n\t\t// #gosec G304\n\t\tbuf, err := utils.ReadFile(path, e.FileSystem)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create new template associated with the current one\n\t\ttmpl, err := pongoset.FromBytes(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.Templates[name] = tmpl\n\t\t// Debugging\n\t\tif e.Verbose {\n\t\t\tlog.Printf(\"views: parsed template: %s\\n\", name)\n\t\t}\n\t\treturn err\n\t}\n\t// notify engine that we parsed all templates\n\te.Loaded = true\n\tif e.FileSystem != nil {\n\t\treturn utils.Walk(e.FileSystem, e.Directory, walkFn)\n\t}\n\treturn filepath.Walk(e.Directory, walkFn)\n}\n\n// getPongoBinding creates a pongo2.Context containing\n// only valid identifiers from a binding interface.\n//\n// It supports the following types:\n// - pongo2.Context\n// - map[string]interface{}\n// - fiber.Map\n//\n// It returns nil if the binding is not one of the supported types.\nfunc getPongoBinding(binding interface{}) pongo2.Context {\n\tif binding == nil {\n\t\treturn nil\n\t}\n\tvar bind pongo2.Context\n\tswitch binds := binding.(type) {\n\tcase pongo2.Context:\n\t\tbind = binds\n\tcase map[string]interface{}:\n\t\tbind = binds\n\tcase fiber.Map:\n\t\tbind = make(pongo2.Context)\n\t\tfor key, value := range binds {\n\t\t\t// only add valid keys\n\t\t\tif isValidKey(key) {\n\t\t\t\tbind[key] = value\n\t\t\t}\n\t\t}\n\t\treturn bind\n\t}\n\n\t// Remove invalid keys\n\tfor key := range bind {\n\t\tif !isValidKey(key) {\n\t\t\tdelete(bind, key)\n\t\t}\n\t}\n\n\treturn bind\n}\n\n// isValidKey checks if the key is valid\n//\n// Valid keys match the following regex: [a-zA-Z0-9_]+\nfunc isValidKey(key string) bool {\n\tfor _, ch := range key {\n\t\tif !((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_') {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// Render will render the template by name\nfunc (e *Engine) Render(out io.Writer, name string, binding interface{}, layout ...string) error {\n\tif !e.Loaded || e.ShouldReload {\n\t\tif e.ShouldReload {\n\t\t\te.Loaded = false\n\t\t}\n\t\tif err := e.Load(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\ttmpl, ok := e.Templates[name]\n\tif !ok {\n\t\treturn fmt.Errorf(\"template %s does not exist\", name)\n\t}\n\n\tbind := getPongoBinding(binding)\n\tparsed, err := tmpl.Execute(bind)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(layout) > 0 && layout[0] != \"\" {\n\t\tif bind == nil {\n\t\t\tbind = make(map[string]interface{}, 1)\n\t\t}\n\t\tbind[e.LayoutName] = parsed\n\t\tlay := e.Templates[layout[0]]\n\t\tif lay == nil {\n\t\t\treturn fmt.Errorf(\"LayoutName %s does not exist\", layout[0])\n\t\t}\n\t\treturn lay.ExecuteWriter(bind, out)\n\t}\n\tif _, err = out.Write([]byte(parsed)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n", "//nolint:paralleltest // running these in parallel causes a data race\npackage django\n\nimport (\n\t\"bytes\"\n\t\"embed\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"testing\"\n\t\"unicode\"\n\n\t\"github.com/flosch/pongo2/v6\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst (\n\tadmin = \"admin\"\n)\n\nfunc trim(str string) string {\n\ttrimmed := strings.TrimSpace(regexp.MustCompile(`\\s+`).ReplaceAllString(str, \" \"))\n\ttrimmed = strings.ReplaceAll(trimmed, \" <\", \"<\")\n\ttrimmed = strings.ReplaceAll(trimmed, \"> \", \">\")\n\treturn trimmed\n}\n\nfunc Test_Render(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\t// Partials\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n\n\t// Single\n\tbuf.Reset()\n\terr = engine.Render(&buf, \"errors/404\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect = `<h1>Hello, World!</h1>`\n\tresult = trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"layouts/main\")\n\trequire.NoError(t, err)\n\n\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2></body></html>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Empty_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"\")\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Invalid_Identifiers(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\":               \"Hello, World!\",\n\t\t\"Invalid.Identifiers\": \"Don't return error from checkForValidIdentifiers!\",\n\t}, \"\")\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_GetPongoBinding(t *testing.T) {\n\t// Test with pongo2.Context\n\tctx := pongo2.Context{\"key1\": \"value1\"}\n\tresult := getPongoBinding(ctx)\n\tassert.Equal(t, ctx, result, \"Expected the same context\")\n\n\t// Test with map[string]interface{}\n\tmapBinding := map[string]interface{}{\"key2\": \"value2\"}\n\tresult = getPongoBinding(mapBinding)\n\tassert.Equal(t, pongo2.Context(mapBinding), result, \"Expected the same context\")\n\n\t// Test with fiber.Map\n\tfiberMap := fiber.Map{\"key3\": \"value3\"}\n\tresult = getPongoBinding(fiberMap)\n\tassert.Equal(t, pongo2.Context(fiberMap), result, \"Expected the same context\")\n\n\t// Test with unsupported type\n\tresult = getPongoBinding(\"unsupported\")\n\tassert.Nil(t, result, \"Expected nil for unsupported type\")\n\n\t// Test with invalid key\n\tinvalidCtx := pongo2.Context{\"key1\": \"value1\", \"invalid.key\": \"value2\"}\n\tresult = getPongoBinding(invalidCtx)\n\tassert.Equal(t, pongo2.Context{\"key1\": \"value1\"}, result, \"Expected the same context\")\n}\n\nfunc Test_IsValidKey(t *testing.T) {\n\tassert.True(t, isValidKey(\"key1\"), \"Expected true for valid key\")\n\tassert.False(t, isValidKey(\"invalid.key\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"invalid-key\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"key1\\n\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"key1 \"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"\ud83d\udc4d\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"\u4f60\u597d\"), \"Expected false for invalid key\")\n\n\t// do sume fuzzing where we generate 1000 random strings and check if they are valid keys\n\t// valid keys match the following regex: [a-zA-Z0-9_]+\n\treValidkeys := regexp.MustCompile(`^[a-zA-Z0-9_]+$`)\n\tfor i := 0; i < 1000; i++ {\n\t\tkey := generateRandomString(10)\n\t\tassert.Equal(t, reValidkeys.MatchString(key), isValidKey(key), \"Expected the same result for key\")\n\t}\n}\n\n// generateRandomString generates a random string of length n\n// with printable, non-whitespace characters\n//\n// helper function for Test_IsValidKey\nfunc generateRandomString(n int) string {\n\tb := make([]rune, n)\n\tfor i := range b {\n\t\tfor {\n\t\t\tc := rune(rand.Intn(0x10FFFF))                 // generate a random rune\n\t\t\tif !unicode.IsSpace(c) && unicode.IsPrint(c) { // check if it's a printable, non-whitespace character\n\t\t\t\tb[i] = c\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn string(b)\n}\n\nfunc Test_FileSystem(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"layouts/main\")\n\trequire.NoError(t, err)\n\n\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2></body></html>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_AddFunc(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Debug(true)\n\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, admin, map[string]interface{}{\n\t\t\"user\": admin,\n\t},\n\t)\n\trequire.NoError(t, err)\n\n\texpect := `<h1>Hello, Admin!</h1>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Reload(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Reload(true) // Optional. Default: false\n\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\trequire.NoError(t, engine.Load())\n\n\terr := os.WriteFile(\"./views/ShouldReload.django\", []byte(\"after ShouldReload\\n\"), 0o600)\n\trequire.NoError(t, err)\n\n\tdefer func() {\n\t\terr := os.WriteFile(\"./views/ShouldReload.django\", []byte(\"before ShouldReload\\n\"), 0o600)\n\t\trequire.NoError(t, err)\n\t}()\n\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr = engine.Render(&buf, \"ShouldReload\", nil)\n\trequire.NoError(t, err)\n\n\texpect := \"after ShouldReload\"\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\n//go:embed views\nvar viewsAsssets embed.FS\n\nfunc Test_PathForwardingFileSystem(t *testing.T) {\n\tengine := NewPathForwardingFileSystem(http.FS(viewsAsssets), \"/views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"descendant\", map[string]interface{}{\n\t\t\"greeting\": \"World\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h1>Hello World! from ancestor</h1>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_AddFuncMap(t *testing.T) {\n\t// Create a temporary directory\n\tdir, err := os.MkdirTemp(\".\", \"\")\n\trequire.NoError(t, err)\n\n\tdefer func() {\n\t\terr := os.RemoveAll(dir)\n\t\trequire.NoError(t, err)\n\t}()\n\n\t// Create a temporary template file.\n\terr = os.WriteFile(dir+\"/func_map.django\", []byte(`<h2>{{Var1|lower}}</h2><p>{{Var2|upper}}</p>`), 0o600)\n\trequire.NoError(t, err)\n\n\tengine := New(dir, \".django\")\n\tfm := map[string]interface{}{\n\t\t\"lower\": strings.ToLower,\n\t\t\"upper\": strings.ToUpper,\n\t}\n\n\tengine.AddFuncMap(fm)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr = engine.Render(&buf, \"func_map\", map[string]interface{}{\n\t\t\"Var1\": \"LOwEr\",\n\t\t\"Var2\": \"upPEr\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h2>lower</h2><p>UPPER</p>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n\n\t// FuncMap\n\tfm2 := engine.FuncMap()\n\t_, ok := fm2[\"lower\"]\n\trequire.True(t, ok)\n\t_, ok = fm2[\"upper\"]\n\trequire.True(t, ok)\n}\n\nfunc Test_Invalid_Template(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"invalid\", nil)\n\trequire.Error(t, err)\n}\n\nfunc Test_Invalid_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", nil, \"invalid\")\n\trequire.Error(t, err)\n}\n\nfunc Benchmark_Django(b *testing.B) {\n\texpectSimple := `<h1>Hello, World!</h1>`\n\texpectExtended := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, Admin!</h1><h2>Footer</h2></body></html>`\n\tengine := New(\"./views\", \".django\")\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\n\tvar buf bytes.Buffer\n\tvar err error\n\n\tb.Run(\"simple\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"simple\", map[string]interface{}{\n\t\t\t\t\"Title\": \"Hello, World!\",\n\t\t\t})\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectSimple, trim(buf.String()))\n\t})\n\n\tb.Run(\"extended\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"extended\", map[string]interface{}{\n\t\t\t\t\"User\": admin,\n\t\t\t}, \"layouts/main\")\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectExtended, trim(buf.String()))\n\t})\n\n\tb.Run(\"simple_with_invalid_binding_keys\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"simple\", map[string]interface{}{\n\t\t\t\t\"Title\":       \"Hello, World!\",\n\t\t\t\t\"Invalid_Key\": \"Don't return error from checkForValidIdentifiers!\",\n\t\t\t})\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectSimple, trim(buf.String()))\n\t})\n\n\tb.Run(\"extended_with_invalid_binding_keys\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"extended\", map[string]interface{}{\n\t\t\t\t\"User\":        admin,\n\t\t\t\t\"Invalid_Key\": \"Don't return error from checkForValidIdentifiers!\",\n\t\t\t}, \"layouts/main\")\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectExtended, trim(buf.String()))\n\t})\n}\n"], "fixing_code": ["---\nid: django\ntitle: Django\n---\n\n![Release](https://img.shields.io/github/v/tag/gofiber/template?filter=django*)\n[![Discord](https://img.shields.io/discord/704680098577514527?style=flat&label=%F0%9F%92%AC%20discord&color=00ACD7)](https://gofiber.io/discord)\n![Test](https://github.com/gofiber/template/workflows/Tests/badge.svg)\n![Security](https://github.com/gofiber/template/workflows/Security/badge.svg)\n![Linter](https://github.com/gofiber/template/workflows/Linter/badge.svg)\n\nDjango is a template engine create by [flosch](https://github.com/flosch/pongo2), to see the original syntax documentation please [click here](https://docs.djangoproject.com/en/dev/topics/templates/)\n\n### Basic Example\n\n_**./views/index.django**_\n```html\n{% include \"partials/header.django\" %}\n\n<h1>{{ Title }}</h1>\n\n{% include \"partials/footer.django\" %}\n```\n_**./views/partials/header.django**_\n```html\n<h2>Header</h2>\n```\n_**./views/partials/footer.django**_\n```html\n<h2>Footer</h2>\n```\n_**./views/layouts/main.django**_\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Main</title>\n</head>\n\n<body>\n  {{embed}}\n</body>\n\n</html>\n```\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/django/v3\"\n)\n\nfunc main() {\n\t// Create a new engine\n\tengine := django.New(\"./views\", \".django\")\n\n\t// Or from an embedded system\n\t// See github.com/gofiber/embed for examples\n\t// engine := html.NewFileSystem(http.Dir(\"./views\", \".django\"))\n\n\t// Pass the engine to the Views\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\t// Render index\n\t\treturn c.Render(\"index\", fiber.Map{\n\t\t\t\"Title\": \"Hello, World!\",\n\t\t})\n\t})\n\n\tapp.Get(\"/layout\", func(c *fiber.Ctx) error {\n\t\t// Render index within layouts/main\n\t\treturn c.Render(\"index\", fiber.Map{\n\t\t\t\"Title\": \"Hello, World!\",\n\t\t}, \"layouts/main\")\n\t})\n\n\tlog.Fatal(app.Listen(\":3000\"))\n}\n\n```\n### Using embedded file system (1.16+ only)\n\nWhen using the `// go:embed` directive, resolution of inherited templates using django's `{% extend '' %}` keyword fails when instantiating the template engine with `django.NewFileSystem()`. In that case, use the `django.NewPathForwardingFileSystem()` function to instantiate the template engine. \n\nThis function provides the proper configuration for resolving inherited templates.\n\nAssume you have the following files:\n\n- [views/ancenstor.django](https://github.com/gofiber/template/blob/master/django/views/ancestor.django)\n- [views/descendant.djando](https://github.com/gofiber/template/blob/master/django/views/descendant.django)\n\nthen\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"embed\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/django/v3\"\n)\n\n//go:embed views\nvar viewsAsssets embed.FS\n\nfunc main() {\n\t// Create a new engine\n\tengine := NewPathForwardingFileSystem(http.FS(viewsAsssets), \"/views\", \".django\")\n\n\t// Pass the engine to the Views\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\t// Render descendant\n\t\treturn c.Render(\"descendant\", fiber.Map{\n\t\t\t\"greeting\": \"World\",\n\t\t})\n\t})\n\n\tlog.Fatal(app.Listen(\":3000\"))\n}\n\n```\n\n### Register and use custom functions\n```go\n// My custom function\nfunc Nl2brHtml(value interface{}) string {\n\tif str, ok := value.(string); ok {\n\t\treturn strings.Replace(str, \"\\n\", \"<br />\", -1)\n\t}\n\treturn \"\"\n}\n\n// Create a new engine\nengine := django.New(\"./views\", \".django\")\n\n// register functions\nengine.AddFunc(\"nl2br\", Nl2brHtml)\n\n// Pass the engine to the Views\napp := fiber.New(fiber.Config{Views: engine})\n```\n_**in the handler**_\n```go\nc.Render(\"index\", fiber.Map{\n    \"Fiber\": \"Hello, World!\\n\\nGreetings from Fiber Team\",\n})\n```\n\n_**./views/index.django**_\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta charset=\"UTF-8\"></head>\n<body>\n{{ nl2br(Fiber) }}\n</body>\n</html>\n```\n**Output:**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta charset=\"UTF-8\"></head>\n<body>\nHello, World!<br /><br />Greetings from Fiber Team\n</body>\n</html>\n```\n\n### Important Information on Template Data Binding\n\nWhen working with Pongo2 and this template engine, it's crucial to understand the specific rules for data binding. Only keys that match the following regular expression are supported: `^[a-zA-Z0-9_]+$`.\n\nThis means that keys with special characters or punctuation, such as `my-key` or `my.key`, are not compatible and will not be bound to the template. This is a restriction imposed by the underlying Pongo2 template engine. Please ensure your keys adhere to these rules to avoid any binding issues.\n\nIf you need to access a value in the template that doesn't adhere to the key naming restrictions imposed by the Pongo2 template engine, you can bind the value to a new field when calling `fiber.Render`. Here's an example:\n\n```go\nc.Render(\"index\", fiber.Map{\n    \"Fiber\": \"Hello, World!\\n\\nGreetings from Fiber Team\",\n    \"MyKey\": c.Locals(\"my-key\"),\n})\n\n### AutoEscape is enabled by default\n\nWhen you create a new instance of the `Engine`, the auto-escape is **enabled by default**. This setting automatically escapes output, providing a critical security measure against Cross-Site Scripting (XSS) attacks.\n\n### Disabling Auto-Escape\n\nAuto-escaping can be disabled if necessary, using the `SetAutoEscape` method:\n\n```go\nengine := django.New(\"./views\", \".django\")\nengine.SetAutoEscape(false)\n```\n\n### Setting AutoEscape using Django built-in template tags\n\n- Explicitly turning off autoescaping for a section:\n```django  \n  {% autoescape off %}\n  {{ \"<script>alert('Hello World');</script>\" }}\n  {% endautoescape %}\n```\n\n- Turning autoescaping back on for a section:\n```django\n  {% autoescape on %}\n  {{ \"<script>alert('Hello World');</script>\" }}\n  {% endautoescape %}\n```\n- It can also be done on a per variable basis using the *safe* built-in:\n```django\n<h1>{{ someSafeVar | safe }}</h1>\n{{ \"<script>\" | safe }}\n```\n\n### Security Implications of Disabling Auto-Escape\n\nDisabling auto-escape should be approached with caution. It can expose your application to XSS attacks, where malicious scripts are injected into web pages. Without auto-escaping, there is a risk of rendering harmful HTML or JavaScript from user-supplied data.\n\nIt is advisable to keep auto-escape enabled unless there is a strong reason to disable it. If you do disable it, ensure all user-supplied content is thoroughly sanitized and validated to avoid XSS vulnerabilities.\n", "package django\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\n\t\"github.com/flosch/pongo2/v6\"\n\tcore \"github.com/gofiber/template\"\n\t\"github.com/gofiber/utils\"\n)\n\n// Engine struct\ntype Engine struct {\n\tcore.Engine\n\t// forward the base path to the template Engine\n\tforwardPath bool\n\t// set auto escape globally\n\tautoEscape bool\n\t// templates\n\tTemplates map[string]*pongo2.Template\n}\n\n// New returns a Django render engine for Fiber\nfunc New(directory, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  directory,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t\tautoEscape: true,\n\t}\n\treturn engine\n}\n\n// NewFileSystem returns a Django render engine for Fiber with file system\nfunc NewFileSystem(fs http.FileSystem, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  \"/\",\n\t\t\tFileSystem: fs,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t\tautoEscape: true,\n\t}\n\treturn engine\n}\n\n// NewPathForwardingFileSystem Passes \"Directory\" to the template engine where alternative functions don't.\n//\n//\tThis fixes errors during resolution of templates when \"{% extends 'parent.html' %}\" is used.\nfunc NewPathForwardingFileSystem(fs http.FileSystem, directory, extension string) *Engine {\n\tengine := &Engine{\n\t\tEngine: core.Engine{\n\t\t\tLeft:       \"{{\",\n\t\t\tRight:      \"}}\",\n\t\t\tDirectory:  directory,\n\t\t\tFileSystem: fs,\n\t\t\tExtension:  extension,\n\t\t\tLayoutName: \"embed\",\n\t\t\tFuncmap:    make(map[string]interface{}),\n\t\t},\n\t\tautoEscape: true,\n\t\tforwardPath: true,\n\t}\n\treturn engine\n}\n\n// Load parses the templates to the engine.\nfunc (e *Engine) Load() error {\n\t// race safe\n\te.Mutex.Lock()\n\tdefer e.Mutex.Unlock()\n\n\te.Templates = make(map[string]*pongo2.Template)\n\n\tbaseDir := e.Directory\n\n\tvar pongoloader pongo2.TemplateLoader\n\tif e.FileSystem != nil {\n\t\t// ensures creation of httpFileSystemLoader only when filesystem is defined\n\t\tif e.forwardPath {\n\t\t\tpongoloader = pongo2.MustNewHttpFileSystemLoader(e.FileSystem, baseDir)\n\t\t} else {\n\t\t\tpongoloader = pongo2.MustNewHttpFileSystemLoader(e.FileSystem, \"\")\n\t\t}\n\t} else {\n\t\tpongoloader = pongo2.MustNewLocalFileSystemLoader(baseDir)\n\t}\n\n\t// New pongo2 defaultset\n\tpongoset := pongo2.NewSet(\"default\", pongoloader)\n\t// Set template settings\n\tpongoset.Globals.Update(e.Funcmap)\n\t// Set autoescaping\n\tpongo2.SetAutoescape(e.autoEscape)\n\n\t// Loop trough each Directory and register template files\n\twalkFn := func(path string, info os.FileInfo, err error) error {\n\t\t// Return error if exist\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Skip file if it's a directory or has no file info\n\t\tif info == nil || info.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\t// Skip file if it does not equal the given template Extension\n\t\tif len(e.Extension) >= len(path) || path[len(path)-len(e.Extension):] != e.Extension {\n\t\t\treturn nil\n\t\t}\n\t\t// Get the relative file path\n\t\t// ./views/html/index.tmpl -> index.tmpl\n\t\trel, err := filepath.Rel(e.Directory, path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Reverse slashes '\\' -> '/' and\n\t\t// partials\\footer.tmpl -> partials/footer.tmpl\n\t\tname := filepath.ToSlash(rel)\n\t\t// Remove ext from name 'index.tmpl' -> 'index'\n\t\tname = strings.TrimSuffix(name, e.Extension)\n\t\t// name = strings.Replace(name, e.Extension, \"\", -1)\n\t\t// Read the file\n\t\t// #gosec G304\n\t\tbuf, err := utils.ReadFile(path, e.FileSystem)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create new template associated with the current one\n\t\ttmpl, err := pongoset.FromBytes(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.Templates[name] = tmpl\n\t\t// Debugging\n\t\tif e.Verbose {\n\t\t\tlog.Printf(\"views: parsed template: %s\\n\", name)\n\t\t}\n\t\treturn err\n\t}\n\t// notify engine that we parsed all templates\n\te.Loaded = true\n\tif e.FileSystem != nil {\n\t\treturn utils.Walk(e.FileSystem, e.Directory, walkFn)\n\t}\n\treturn filepath.Walk(e.Directory, walkFn)\n}\n\n// getPongoBinding creates a pongo2.Context containing\n// only valid identifiers from a binding interface.\n//\n// It supports the following types:\n// - pongo2.Context\n// - map[string]interface{}\n// - fiber.Map\n//\n// It returns nil if the binding is not one of the supported types.\nfunc getPongoBinding(binding interface{}) pongo2.Context {\n\tif binding == nil {\n\t\treturn nil\n\t}\n\tvar bind pongo2.Context\n\tswitch binds := binding.(type) {\n\tcase pongo2.Context:\n\t\tbind = binds\n\tcase map[string]interface{}:\n\t\tbind = binds\n\tcase fiber.Map:\n\t\tbind = make(pongo2.Context)\n\t\tfor key, value := range binds {\n\t\t\t// only add valid keys\n\t\t\tif isValidKey(key) {\n\t\t\t\tbind[key] = value\n\t\t\t}\n\t\t}\n\t\treturn bind\n\t}\n\n\t// Remove invalid keys\n\tfor key := range bind {\n\t\tif !isValidKey(key) {\n\t\t\tdelete(bind, key)\n\t\t}\n\t}\n\n\treturn bind\n}\n\n// isValidKey checks if the key is valid\n//\n// Valid keys match the following regex: [a-zA-Z0-9_]+\nfunc isValidKey(key string) bool {\n\tfor _, ch := range key {\n\t\tif !((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_') {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// SetAutoEscape sets the auto-escape property of the template engine\nfunc (e *Engine) SetAutoEscape(autoEscape bool) {\n\te.autoEscape = autoEscape\n}\n\n// Render will render the template by name\nfunc (e *Engine) Render(out io.Writer, name string, binding interface{}, layout ...string) error {\n\tif !e.Loaded || e.ShouldReload {\n\t\tif e.ShouldReload {\n\t\t\te.Loaded = false\n\t\t}\n\t\tif err := e.Load(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\ttmpl, ok := e.Templates[name]\n\tif !ok {\n\t\treturn fmt.Errorf(\"template %s does not exist\", name)\n\t}\n\n\tbind := getPongoBinding(binding)\n\tparsed, err := tmpl.Execute(bind)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(layout) > 0 && layout[0] != \"\" {\n\t\tif bind == nil {\n\t\t\tbind = make(map[string]interface{}, 1)\n\t\t}\n\n\t\t// Workaround for custom {{embed}} tag\n\t\t// Mark the `embed` variable as safe\n\t\t// it has already been escaped above\n\t\t// e.LayoutName will be 'embed'\n\t\tsafeEmbed := pongo2.AsSafeValue(parsed)\n\n\t\t// Add the safe value to the binding map\n\t\tbind[e.LayoutName] = safeEmbed\n\n\t\tlay := e.Templates[layout[0]]\n\t\tif lay == nil {\n\t\t\treturn fmt.Errorf(\"LayoutName %s does not exist\", layout[0])\n\t\t}\n\t\treturn lay.ExecuteWriter(bind, out)\n\t}\n\tif _, err = out.Write([]byte(parsed)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n", "//nolint:paralleltest // running these in parallel causes a data race\npackage django\n\nimport (\n\t\"bytes\"\n\t\"embed\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"testing\"\n\t\"unicode\"\n\n\t\"github.com/flosch/pongo2/v6\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst (\n\tadmin = \"admin\"\n)\n\nfunc trim(str string) string {\n\ttrimmed := strings.TrimSpace(regexp.MustCompile(`\\s+`).ReplaceAllString(str, \" \"))\n\ttrimmed = strings.ReplaceAll(trimmed, \" <\", \"<\")\n\ttrimmed = strings.ReplaceAll(trimmed, \"> \", \">\")\n\treturn trimmed\n}\n\nfunc Test_Render(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\t// Partials\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n\n\t// Single\n\tbuf.Reset()\n\terr = engine.Render(&buf, \"errors/404\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect = `<h1>Hello, World!</h1>`\n\tresult = trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"layouts/main\")\n\trequire.NoError(t, err)\n\n\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2></body></html>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Empty_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"\")\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Invalid_Identifiers(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\":               \"Hello, World!\",\n\t\t\"Invalid.Identifiers\": \"Don't return error from checkForValidIdentifiers!\",\n\t}, \"\")\n\trequire.NoError(t, err)\n\n\texpect := `<h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_GetPongoBinding(t *testing.T) {\n\t// Test with pongo2.Context\n\tctx := pongo2.Context{\"key1\": \"value1\"}\n\tresult := getPongoBinding(ctx)\n\tassert.Equal(t, ctx, result, \"Expected the same context\")\n\n\t// Test with map[string]interface{}\n\tmapBinding := map[string]interface{}{\"key2\": \"value2\"}\n\tresult = getPongoBinding(mapBinding)\n\tassert.Equal(t, pongo2.Context(mapBinding), result, \"Expected the same context\")\n\n\t// Test with fiber.Map\n\tfiberMap := fiber.Map{\"key3\": \"value3\"}\n\tresult = getPongoBinding(fiberMap)\n\tassert.Equal(t, pongo2.Context(fiberMap), result, \"Expected the same context\")\n\n\t// Test with unsupported type\n\tresult = getPongoBinding(\"unsupported\")\n\tassert.Nil(t, result, \"Expected nil for unsupported type\")\n\n\t// Test with invalid key\n\tinvalidCtx := pongo2.Context{\"key1\": \"value1\", \"invalid.key\": \"value2\"}\n\tresult = getPongoBinding(invalidCtx)\n\tassert.Equal(t, pongo2.Context{\"key1\": \"value1\"}, result, \"Expected the same context\")\n}\n\nfunc Test_IsValidKey(t *testing.T) {\n\tassert.True(t, isValidKey(\"key1\"), \"Expected true for valid key\")\n\tassert.False(t, isValidKey(\"invalid.key\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"invalid-key\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"key1\\n\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"key1 \"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"\ud83d\udc4d\"), \"Expected false for invalid key\")\n\tassert.False(t, isValidKey(\"\u4f60\u597d\"), \"Expected false for invalid key\")\n\n\t// do sume fuzzing where we generate 1000 random strings and check if they are valid keys\n\t// valid keys match the following regex: [a-zA-Z0-9_]+\n\treValidkeys := regexp.MustCompile(`^[a-zA-Z0-9_]+$`)\n\tfor i := 0; i < 1000; i++ {\n\t\tkey := generateRandomString(10)\n\t\tassert.Equal(t, reValidkeys.MatchString(key), isValidKey(key), \"Expected the same result for key\")\n\t}\n}\n\n// generateRandomString generates a random string of length n\n// with printable, non-whitespace characters\n//\n// helper function for Test_IsValidKey\nfunc generateRandomString(n int) string {\n\tb := make([]rune, n)\n\tfor i := range b {\n\t\tfor {\n\t\t\tc := rune(rand.Intn(0x10FFFF))                 // generate a random rune\n\t\t\tif !unicode.IsSpace(c) && unicode.IsPrint(c) { // check if it's a printable, non-whitespace character\n\t\t\t\tb[i] = c\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn string(b)\n}\n\nfunc Test_FileSystem(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"Hello, World!\",\n\t}, \"layouts/main\")\n\trequire.NoError(t, err)\n\n\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, World!</h1><h2>Footer</h2></body></html>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_AddFunc(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Debug(true)\n\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, admin, map[string]interface{}{\n\t\t\"user\": admin,\n\t},\n\t)\n\trequire.NoError(t, err)\n\n\texpect := `<h1>Hello, Admin!</h1>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_Reload(t *testing.T) {\n\tengine := NewFileSystem(http.Dir(\"./views\"), \".django\")\n\tengine.Reload(true) // Optional. Default: false\n\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\trequire.NoError(t, engine.Load())\n\n\terr := os.WriteFile(\"./views/ShouldReload.django\", []byte(\"after ShouldReload\\n\"), 0o600)\n\trequire.NoError(t, err)\n\n\tdefer func() {\n\t\terr := os.WriteFile(\"./views/ShouldReload.django\", []byte(\"before ShouldReload\\n\"), 0o600)\n\t\trequire.NoError(t, err)\n\t}()\n\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr = engine.Render(&buf, \"ShouldReload\", nil)\n\trequire.NoError(t, err)\n\n\texpect := \"after ShouldReload\"\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\n//go:embed views\nvar viewsAsssets embed.FS\n\nfunc Test_PathForwardingFileSystem(t *testing.T) {\n\tengine := NewPathForwardingFileSystem(http.FS(viewsAsssets), \"/views\", \".django\")\n\tengine.Debug(true)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"descendant\", map[string]interface{}{\n\t\t\"greeting\": \"World\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h1>Hello World! from ancestor</h1>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_AddFuncMap(t *testing.T) {\n\t// Create a temporary directory\n\tdir, err := os.MkdirTemp(\".\", \"\")\n\trequire.NoError(t, err)\n\n\tdefer func() {\n\t\terr := os.RemoveAll(dir)\n\t\trequire.NoError(t, err)\n\t}()\n\n\t// Create a temporary template file.\n\terr = os.WriteFile(dir+\"/func_map.django\", []byte(`<h2>{{Var1|lower}}</h2><p>{{Var2|upper}}</p>`), 0o600)\n\trequire.NoError(t, err)\n\n\tengine := New(dir, \".django\")\n\tfm := map[string]interface{}{\n\t\t\"lower\": strings.ToLower,\n\t\t\"upper\": strings.ToUpper,\n\t}\n\n\tengine.AddFuncMap(fm)\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr = engine.Render(&buf, \"func_map\", map[string]interface{}{\n\t\t\"Var1\": \"LOwEr\",\n\t\t\"Var2\": \"upPEr\",\n\t})\n\trequire.NoError(t, err)\n\n\texpect := `<h2>lower</h2><p>UPPER</p>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n\n\t// FuncMap\n\tfm2 := engine.FuncMap()\n\t_, ok := fm2[\"lower\"]\n\trequire.True(t, ok)\n\t_, ok = fm2[\"upper\"]\n\trequire.True(t, ok)\n}\n\nfunc Test_Invalid_Template(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"invalid\", nil)\n\trequire.Error(t, err)\n}\n\nfunc Test_Invalid_Layout(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", nil, \"invalid\")\n\trequire.Error(t, err)\n}\n\nfunc Test_XSS(t *testing.T) {\n\tengine := New(\"./views\", \".django\")\n\trequire.NoError(t, engine.Load())\n\n\tvar buf bytes.Buffer\n\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n\t\t\"Title\": \"<script>alert('XSS')</script>\",\n\t}, \"layouts/main\")\n\trequire.NoError(t, err)\n\n\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</h1><h2>Footer</h2></body></html>`\n\tresult := trim(buf.String())\n\trequire.Equal(t, expect, result)\n}\n\nfunc Test_XSS_WithAutoEscapeDisabled(t *testing.T) {\n    engine := New(\"./views\", \".django\")\n    engine.SetAutoEscape(false)\n    require.NoError(t, engine.Load())\n\n    var buf bytes.Buffer\n    err := engine.Render(&buf, \"index\", map[string]interface{}{\n        \"Title\": \"<script>alert('XSS')</script>\",\n    }, \"layouts/main\")\n    require.NoError(t, err)\n\n    expect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1><script>alert('XSS')</script></h1><h2>Footer</h2></body></html>`\n    result := trim(buf.String())\n    require.Equal(t, expect, result)\n}\n\nfunc Benchmark_Django(b *testing.B) {\n\texpectSimple := `<h1>Hello, World!</h1>`\n\texpectExtended := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, Admin!</h1><h2>Footer</h2></body></html>`\n\tengine := New(\"./views\", \".django\")\n\tengine.AddFunc(\"isAdmin\", func(user string) bool {\n\t\treturn user == admin\n\t})\n\n\tvar buf bytes.Buffer\n\tvar err error\n\n\tb.Run(\"simple\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"simple\", map[string]interface{}{\n\t\t\t\t\"Title\": \"Hello, World!\",\n\t\t\t})\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectSimple, trim(buf.String()))\n\t})\n\n\tb.Run(\"extended\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"extended\", map[string]interface{}{\n\t\t\t\t\"User\": admin,\n\t\t\t}, \"layouts/main\")\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectExtended, trim(buf.String()))\n\t})\n\n\tb.Run(\"simple_with_invalid_binding_keys\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"simple\", map[string]interface{}{\n\t\t\t\t\"Title\":       \"Hello, World!\",\n\t\t\t\t\"Invalid_Key\": \"Don't return error from checkForValidIdentifiers!\",\n\t\t\t})\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectSimple, trim(buf.String()))\n\t})\n\n\tb.Run(\"extended_with_invalid_binding_keys\", func(bb *testing.B) {\n\t\tbb.ReportAllocs()\n\t\tbb.ResetTimer()\n\t\tfor i := 0; i < bb.N; i++ {\n\t\t\tbuf.Reset()\n\t\t\terr = engine.Render(&buf, \"extended\", map[string]interface{}{\n\t\t\t\t\"User\":        admin,\n\t\t\t\t\"Invalid_Key\": \"Don't return error from checkForValidIdentifiers!\",\n\t\t\t}, \"layouts/main\")\n\t\t}\n\n\t\trequire.NoError(b, err)\n\t\trequire.Equal(b, expectExtended, trim(buf.String()))\n\t})\n}\n"], "filenames": ["django/README.md", "django/django.go", "django/django_test.go"], "buggy_code_start_loc": [62, 23, 313], "buggy_code_end_loc": [198, 235, 313], "fixing_code_start_loc": [62, 24, 314], "fixing_code_end_loc": [238, 255, 345], "type": "CWE-116", "message": "This package provides universal methods to use multiple template engines with the Fiber web framework using the Views interface. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages. The vulnerability has been addressed, the template engine now defaults to having autoescape set to `true`, effectively mitigating the risk of XSS attacks.\n", "other": {"cve": {"id": "CVE-2024-22199", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-11T18:15:45.327", "lastModified": "2024-01-18T16:54:56.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This package provides universal methods to use multiple template engines with the Fiber web framework using the Views interface. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages. The vulnerability has been addressed, the template engine now defaults to having autoescape set to `true`, effectively mitigating the risk of XSS attacks.\n"}, {"lang": "es", "value": "Este paquete proporciona m\u00e9todos universales para usar m\u00faltiples motores de plantillas con el framework web de Fiber mediante la interfaz de Views. Esta vulnerabilidad afecta espec\u00edficamente a las aplicaciones web que procesan datos proporcionados por el usuario a trav\u00e9s de este motor de plantillas, lo que podr\u00eda provocar la ejecuci\u00f3n de scripts maliciosos en los navegadores de los usuarios cuando visitan las p\u00e1ginas web afectadas. La vulnerabilidad se ha abordado, el motor de plantillas ahora tiene de forma predeterminada el escape autom\u00e1tico configurado en \"true\", mitigando efectivamente el riesgo de ataques XSS."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}, {"lang": "en", "value": "CWE-20"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gofiber:django:*:*:*:*:*:go:*:*", "versionEndExcluding": "3.1.9", "matchCriteriaId": "882B64AE-AF35-454D-8D79-AC188A250E41"}]}]}], "references": [{"url": "https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6", "source": "security-advisories@github.com", "tags": ["Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46"}}