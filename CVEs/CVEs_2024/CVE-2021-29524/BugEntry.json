{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define USE_EIGEN_TENSOR\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/conv_grad_shape_utils.h\"\n\n#include <algorithm>\n#include <vector>\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/kernel_shape_util.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/padding.h\"\n#include \"tensorflow/core/util/tensor_format.h\"\n\nnamespace tensorflow {\n\n// Compute padding for the given spatial dimension.\nint ConvBackpropDimensions::SpatialPadding(const Padding& padding,\n                                           int dim) const {\n  return (padding == VALID)\n             ? 0\n             : std::max<int>(\n                   0, static_cast<int>((output_size(dim) - 1) * stride(dim) +\n                                       (filter_size(dim) - 1) * dilation(dim) +\n                                       1 - input_size(dim)));\n}\n\nnamespace {\n\nStatus ConvBackpropExtractAndVerifyDimension(\n    StringPiece label, const TensorShape& input_shape,\n    const TensorShape& filter_shape, const TensorShape& output_shape,\n    const gtl::ArraySlice<int32> dilations, const std::vector<int32>& strides,\n    Padding padding, int64 padding_before, int64 padding_after, int spatial_dim,\n    int filter_spatial_dim, ConvBackpropSpatialDimension* dim) {\n  dim->input_size = input_shape.dim_size(spatial_dim);\n  dim->filter_size = filter_shape.dim_size(filter_spatial_dim);\n  dim->output_size = output_shape.dim_size(spatial_dim);\n  dim->stride = strides[spatial_dim];\n  dim->dilation = dilations[spatial_dim];\n  int64 out_size = 0;\n  TF_RETURN_IF_ERROR(GetWindowedOutputSizeVerboseV2(\n      dim->input_size, dim->filter_size, dim->dilation, dim->stride, padding,\n      &out_size, &padding_before, &padding_after));\n  if (dim->output_size != out_size) {\n    return errors::InvalidArgument(\n        label, \": Size of out_backprop doesn't match computed: \", \"actual = \",\n        dim->output_size, \", computed = \", out_size,\n        \" spatial_dim: \", spatial_dim, \" input: \", dim->input_size,\n        \" filter: \", dim->filter_size, \" output: \", dim->output_size,\n        \" stride: \", dim->stride, \" dilation: \", dim->dilation);\n  }\n\n  int64 effective_filter_size = (dim->filter_size - 1) * dim->dilation + 1;\n  dim->expanded_output_size = (dim->output_size - 1) * dim->stride + 1;\n  const auto padded_out_size = dim->input_size + effective_filter_size - 1;\n  dim->pad_before = effective_filter_size - 1 - padding_before;\n  dim->pad_after =\n      padded_out_size - dim->expanded_output_size - dim->pad_before;\n  VLOG(2) << label << \": expanded_out = \" << dim->expanded_output_size\n          << \", effective_filter_size = \" << effective_filter_size\n          << \", padded_out = \" << padded_out_size\n          << \", pad_before = \" << dim->pad_before\n          << \", pad_after = \" << dim->pad_after\n          << \", dilation = \" << dim->dilation << \", strides = \" << dim->stride;\n  return Status::OK();\n}\n\n}  // namespace\n\nStatus ConvBackpropComputeDimensionsV2(\n    StringPiece label, int num_spatial_dims, const TensorShape& input_shape,\n    const TensorShape& filter_shape, const TensorShape& out_backprop_shape,\n    const gtl::ArraySlice<int32>& dilations, const std::vector<int32>& strides,\n    Padding padding, absl::Span<const int64> explicit_paddings,\n    TensorFormat data_format, ConvBackpropDimensions* dims) {\n  // The + 2 in the following line is for the batch and feature dimensions.\n  const int num_dims = num_spatial_dims + 2;\n  if (input_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": input must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  if (filter_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": filter must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  if (out_backprop_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": out_backprop must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  int batch_dim = GetTensorBatchDimIndex(num_dims, data_format);\n  dims->batch_size = input_shape.dim_size(batch_dim);\n  if (dims->batch_size != out_backprop_shape.dim_size(batch_dim)) {\n    return errors::InvalidArgument(\n        label, \": input and out_backprop must have the same batch size.\",\n        \" Input batch: \", dims->batch_size,\n        \", outbackprop batch: \", out_backprop_shape.dim_size(batch_dim),\n        \", batch_dim: \", batch_dim);\n  }\n\n  int feature_dim = GetTensorFeatureDimIndex(num_dims, data_format);\n  dims->in_depth = input_shape.dim_size(feature_dim);\n  // The input and output feature dimensions are the second last and last\n  // dimensions of the filter Tensor.\n  VLOG(2) << \"input vs filter_in depth \" << dims->in_depth << \" \"\n          << filter_shape.dim_size(num_dims - 2);\n  if (dims->in_depth % filter_shape.dim_size(num_dims - 2)) {\n    return errors::InvalidArgument(\n        label, \": input depth must be evenly divisible by filter depth\");\n  }\n  dims->out_depth = filter_shape.dim_size(num_dims - 1);\n  if (dims->out_depth != out_backprop_shape.dim_size(feature_dim)) {\n    return errors::InvalidArgument(\n        label, \": filter and out_backprop must have the same out_depth\");\n  }\n  dims->spatial_dims.resize(num_spatial_dims);\n  for (int i = 0; i < num_spatial_dims; ++i) {\n    int image_dim = GetTensorSpatialDimIndex(num_dims, data_format, i);\n    int64 padding_before = -1, padding_after = -1;\n    if (padding == EXPLICIT) {\n      padding_before = explicit_paddings[2 * image_dim];\n      padding_after = explicit_paddings[2 * image_dim + 1];\n    }\n    TF_RETURN_IF_ERROR(ConvBackpropExtractAndVerifyDimension(\n        label, input_shape, filter_shape, out_backprop_shape, dilations,\n        strides, padding, padding_before, padding_after, image_dim, i,\n        &dims->spatial_dims[i]));\n  }\n  return Status::OK();\n}\n\nStatus ConvBackpropComputeDimensions(StringPiece label, int num_spatial_dims,\n                                     const TensorShape& input_shape,\n                                     const TensorShape& filter_shape,\n                                     const TensorShape& out_backprop_shape,\n                                     const std::vector<int32>& strides,\n                                     Padding padding, TensorFormat data_format,\n                                     ConvBackpropDimensions* dims) {\n  static constexpr std::array<int32, 5> one_dilations = {{1, 1, 1, 1, 1}};\n  return ConvBackpropComputeDimensionsV2(\n      label, num_spatial_dims, input_shape, filter_shape, out_backprop_shape,\n      one_dilations, strides, padding, /*explicit_paddings=*/{}, data_format,\n      dims);\n}\n\nStatus Conv2DBackpropComputeInputShape(const Tensor& input_sizes,\n                                       const TensorShape& filter_shape,\n                                       const TensorShape& out_backprop_shape,\n                                       const TensorFormat& data_format,\n                                       TensorShape* input_shape) {\n  if (!TensorShapeUtils::IsVector(input_sizes.shape())) {\n    return errors::InvalidArgument(\n        \"Conv2DBackpropInput: input_sizes input must be 1-dim, not \",\n        input_sizes.dims());\n  }\n\n  if (input_sizes.dim_size(0) == 4) {\n    return TensorShapeUtils::MakeShape(input_sizes.vec<int32>(), input_shape);\n  }\n\n  if (input_sizes.dim_size(0) == 2) {\n    const int batch_size = GetTensorDim(out_backprop_shape, data_format, 'N');\n    const int output_height = input_sizes.vec<int32>()(0);\n    const int output_width = input_sizes.vec<int32>()(1);\n    const int output_depth = filter_shape.dim_size(2);\n    *input_shape = ShapeFromFormat(data_format, batch_size, output_height,\n                                   output_width, output_depth);\n    return Status::OK();\n  }\n\n  return errors::InvalidArgument(\n      \"Conv2DBackpropInput requires input_sizes to \"\n      \"contain 4 values or 2 values, but got: \",\n      input_sizes.dim_size(0));\n}\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define USE_EIGEN_TENSOR\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/conv_grad_shape_utils.h\"\n\n#include <algorithm>\n#include <vector>\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/kernel_shape_util.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/padding.h\"\n#include \"tensorflow/core/util/tensor_format.h\"\n\nnamespace tensorflow {\n\n// Compute padding for the given spatial dimension.\nint ConvBackpropDimensions::SpatialPadding(const Padding& padding,\n                                           int dim) const {\n  return (padding == VALID)\n             ? 0\n             : std::max<int>(\n                   0, static_cast<int>((output_size(dim) - 1) * stride(dim) +\n                                       (filter_size(dim) - 1) * dilation(dim) +\n                                       1 - input_size(dim)));\n}\n\nnamespace {\n\nStatus ConvBackpropExtractAndVerifyDimension(\n    StringPiece label, const TensorShape& input_shape,\n    const TensorShape& filter_shape, const TensorShape& output_shape,\n    const gtl::ArraySlice<int32> dilations, const std::vector<int32>& strides,\n    Padding padding, int64 padding_before, int64 padding_after, int spatial_dim,\n    int filter_spatial_dim, ConvBackpropSpatialDimension* dim) {\n  dim->input_size = input_shape.dim_size(spatial_dim);\n  dim->filter_size = filter_shape.dim_size(filter_spatial_dim);\n  dim->output_size = output_shape.dim_size(spatial_dim);\n  dim->stride = strides[spatial_dim];\n  dim->dilation = dilations[spatial_dim];\n  int64 out_size = 0;\n  TF_RETURN_IF_ERROR(GetWindowedOutputSizeVerboseV2(\n      dim->input_size, dim->filter_size, dim->dilation, dim->stride, padding,\n      &out_size, &padding_before, &padding_after));\n  if (dim->output_size != out_size) {\n    return errors::InvalidArgument(\n        label, \": Size of out_backprop doesn't match computed: \", \"actual = \",\n        dim->output_size, \", computed = \", out_size,\n        \" spatial_dim: \", spatial_dim, \" input: \", dim->input_size,\n        \" filter: \", dim->filter_size, \" output: \", dim->output_size,\n        \" stride: \", dim->stride, \" dilation: \", dim->dilation);\n  }\n\n  int64 effective_filter_size = (dim->filter_size - 1) * dim->dilation + 1;\n  dim->expanded_output_size = (dim->output_size - 1) * dim->stride + 1;\n  const auto padded_out_size = dim->input_size + effective_filter_size - 1;\n  dim->pad_before = effective_filter_size - 1 - padding_before;\n  dim->pad_after =\n      padded_out_size - dim->expanded_output_size - dim->pad_before;\n  VLOG(2) << label << \": expanded_out = \" << dim->expanded_output_size\n          << \", effective_filter_size = \" << effective_filter_size\n          << \", padded_out = \" << padded_out_size\n          << \", pad_before = \" << dim->pad_before\n          << \", pad_after = \" << dim->pad_after\n          << \", dilation = \" << dim->dilation << \", strides = \" << dim->stride;\n  return Status::OK();\n}\n\n}  // namespace\n\nStatus ConvBackpropComputeDimensionsV2(\n    StringPiece label, int num_spatial_dims, const TensorShape& input_shape,\n    const TensorShape& filter_shape, const TensorShape& out_backprop_shape,\n    const gtl::ArraySlice<int32>& dilations, const std::vector<int32>& strides,\n    Padding padding, absl::Span<const int64> explicit_paddings,\n    TensorFormat data_format, ConvBackpropDimensions* dims) {\n  // The + 2 in the following line is for the batch and feature dimensions.\n  const int num_dims = num_spatial_dims + 2;\n  if (input_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": input must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  if (filter_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": filter must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  if (out_backprop_shape.dims() != num_dims) {\n    return errors::InvalidArgument(label, \": out_backprop must be \", num_dims,\n                                   \"-dimensional\");\n  }\n  int batch_dim = GetTensorBatchDimIndex(num_dims, data_format);\n  dims->batch_size = input_shape.dim_size(batch_dim);\n  if (dims->batch_size != out_backprop_shape.dim_size(batch_dim)) {\n    return errors::InvalidArgument(\n        label, \": input and out_backprop must have the same batch size.\",\n        \" Input batch: \", dims->batch_size,\n        \", outbackprop batch: \", out_backprop_shape.dim_size(batch_dim),\n        \", batch_dim: \", batch_dim);\n  }\n\n  int feature_dim = GetTensorFeatureDimIndex(num_dims, data_format);\n  dims->in_depth = input_shape.dim_size(feature_dim);\n  // The input and output feature dimensions are the second last and last\n  // dimensions of the filter Tensor.\n  VLOG(2) << \"input vs filter_in depth \" << dims->in_depth << \" \"\n          << filter_shape.dim_size(num_dims - 2);\n  if (filter_shape.dim_size(num_dims - 2) <= 0) {\n    return errors ::InvalidArgument(\n        label, \": filter depth must be strictly greated than zero\");\n  }\n  if (dims->in_depth % filter_shape.dim_size(num_dims - 2)) {\n    return errors::InvalidArgument(\n        label, \": input depth must be evenly divisible by filter depth\");\n  }\n  dims->out_depth = filter_shape.dim_size(num_dims - 1);\n  if (dims->out_depth != out_backprop_shape.dim_size(feature_dim)) {\n    return errors::InvalidArgument(\n        label, \": filter and out_backprop must have the same out_depth\");\n  }\n  dims->spatial_dims.resize(num_spatial_dims);\n  for (int i = 0; i < num_spatial_dims; ++i) {\n    int image_dim = GetTensorSpatialDimIndex(num_dims, data_format, i);\n    int64 padding_before = -1, padding_after = -1;\n    if (padding == EXPLICIT) {\n      padding_before = explicit_paddings[2 * image_dim];\n      padding_after = explicit_paddings[2 * image_dim + 1];\n    }\n    TF_RETURN_IF_ERROR(ConvBackpropExtractAndVerifyDimension(\n        label, input_shape, filter_shape, out_backprop_shape, dilations,\n        strides, padding, padding_before, padding_after, image_dim, i,\n        &dims->spatial_dims[i]));\n  }\n  return Status::OK();\n}\n\nStatus ConvBackpropComputeDimensions(StringPiece label, int num_spatial_dims,\n                                     const TensorShape& input_shape,\n                                     const TensorShape& filter_shape,\n                                     const TensorShape& out_backprop_shape,\n                                     const std::vector<int32>& strides,\n                                     Padding padding, TensorFormat data_format,\n                                     ConvBackpropDimensions* dims) {\n  static constexpr std::array<int32, 5> one_dilations = {{1, 1, 1, 1, 1}};\n  return ConvBackpropComputeDimensionsV2(\n      label, num_spatial_dims, input_shape, filter_shape, out_backprop_shape,\n      one_dilations, strides, padding, /*explicit_paddings=*/{}, data_format,\n      dims);\n}\n\nStatus Conv2DBackpropComputeInputShape(const Tensor& input_sizes,\n                                       const TensorShape& filter_shape,\n                                       const TensorShape& out_backprop_shape,\n                                       const TensorFormat& data_format,\n                                       TensorShape* input_shape) {\n  if (!TensorShapeUtils::IsVector(input_sizes.shape())) {\n    return errors::InvalidArgument(\n        \"Conv2DBackpropInput: input_sizes input must be 1-dim, not \",\n        input_sizes.dims());\n  }\n\n  if (input_sizes.dim_size(0) == 4) {\n    return TensorShapeUtils::MakeShape(input_sizes.vec<int32>(), input_shape);\n  }\n\n  if (input_sizes.dim_size(0) == 2) {\n    const int batch_size = GetTensorDim(out_backprop_shape, data_format, 'N');\n    const int output_height = input_sizes.vec<int32>()(0);\n    const int output_width = input_sizes.vec<int32>()(1);\n    const int output_depth = filter_shape.dim_size(2);\n    *input_shape = ShapeFromFormat(data_format, batch_size, output_height,\n                                   output_width, output_depth);\n    return Status::OK();\n  }\n\n  return errors::InvalidArgument(\n      \"Conv2DBackpropInput requires input_sizes to \"\n      \"contain 4 values or 2 values, but got: \",\n      input_sizes.dim_size(0));\n}\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/conv_grad_shape_utils.cc"], "buggy_code_start_loc": [129], "buggy_code_end_loc": [129], "fixing_code_start_loc": [130], "fixing_code_end_loc": [134], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropFilter`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) does a modulus operation where the divisor is controlled by the caller. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29524", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:11.710", "lastModified": "2021-05-20T16:24:33.643", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropFilter`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) does a modulus operation where the divisor is controlled by the caller. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Un atacante puede activar una divisi\u00f3n por 0 en \"tf.raw_ops.Conv2DBackpropFilter\".&#xa0;Esto es debido a que la implementaci\u00f3n (https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) realiza una operaci\u00f3n de m\u00f3dulo donde el divisor es controlado por el llamador.&#xa0;La correcci\u00f3n ser\u00e1 inclu\u00edda en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/fca9874a9b42a2134f907d2fb46ab774a831404a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r4pj-74mg-8868", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/fca9874a9b42a2134f907d2fb46ab774a831404a"}}