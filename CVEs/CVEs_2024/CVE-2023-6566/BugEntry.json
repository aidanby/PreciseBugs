{"buggy_code": ["<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Cart;\n\nuse MicroweberPackages\\Cart\\Models\\Cart;\nuse MicroweberPackages\\Database\\Crud;\n\nclass CartManager extends Crud\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $coupon_data = false;\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n\n    }\n\n    /**\n     * This will sum all cart items amount\n     * @param bool $return_amount\n     * @return array|false|float|int|mixed\n     */\n    public function sum($return_amount = true)\n    {\n        if ($return_amount) {\n            return $this->app->cart_repository->getCartAmount();\n        } else {\n            return $this->app->cart_repository->getCartItemsCount();\n        }\n\n    }\n\n    public function totals($return = 'all')\n    {\n        $all_totals = array('subtotal', 'shipping', 'tax', 'discount', 'total');\n\n\n        $tax = $shipping_cost = $discount_sum = 0;\n\n        $shipping_cost = $this->app->checkout_manager->getShippingCost();\n        $shipping_modules = $this->app->checkout_manager->getShippingModules();\n\n        // Coupon code discount\n        $discount_value = $this->get_discount_value();\n        $discount_type = $this->get_discount_type();\n\n        $sum = $subtotal = $this->sum();\n\n        if ($discount_type == 'percentage' or $discount_type == 'percentage') {\n            // Discount with percentage\n            $discount_sum = ($sum * ($discount_value / 100));\n            $sum = $sum - $discount_sum;\n        } else if ($discount_type == 'fixed_amount') {\n            // Discount with amount\n            $discount_sum = $discount_value;\n            $sum = $sum - $discount_value;\n        }\n\n\n        $total = $sum + $shipping_cost;\n\n        if (get_option('enable_taxes', 'shop') == 1) {\n            if ($total > 0) {\n                $tax = $this->app->tax_manager->calculate($sum);\n                $total = $total + $tax;\n            }\n        }\n\n\n        $totals = array();\n        foreach ($all_totals as $total_key) {\n            switch ($total_key) {\n                case 'subtotal':\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Subtotal\", true),\n                        'value' => $subtotal,\n                        'amount' => currency_format($subtotal)\n                    );\n                    break;\n                case 'tax':\n                    if ($tax) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Tax\", true),\n                            'value' => $tax,\n                            'amount' => currency_format($tax)\n                        );\n                    }\n                    break;\n\n\n                case 'discount':\n                    if ($discount_sum and $discount_sum > 0) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Discount\", true),\n                            'value' => $discount_sum,\n                            'amount' => currency_format($discount_sum)\n                        );\n                    }\n                    break;\n\n                case 'shipping':\n\n                    if ($shipping_modules) {\n                        if ($shipping_cost and $shipping_cost > 0) {\n                            $totals[$total_key] = array(\n                                'label' => _e(\"Shipping\", true),\n                                'value' => $shipping_cost,\n                                'amount' => currency_format($shipping_cost)\n                            );\n                        }\n                    }\n\n\n                    break;\n\n                case 'total':\n\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Total\", true),\n                        'value' => $total,\n                        'amount' => currency_format($total)\n                    );\n\n\n                    break;\n            }\n\n\n        }\n\n        if (isset($return) and $return != 'all') {\n            if (isset($totals[$return])) {\n                return $totals[$return];\n            }\n        } else {\n            return $totals;\n        }\n\n    }\n\n    public function total()\n    {\n        $total = $this->totals('total');\n\n        if (isset($total['value'])) {\n            return $total['value'];\n        }\n    }\n\n\n    public function get_tax()\n    {\n        $sum = $this->sum();\n        $tax = $this->app->tax_manager->calculate($sum);\n\n        return $tax;\n    }\n\n    public function get_discount()\n    {\n        return $this->get_discount_value();\n    }\n\n    public function get_discount_type()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n        if (empty($data)) {\n            return false;\n        }\n        if (isset($data['discount_type'])) {\n            return $data['discount_type'];\n        }\n        return false;\n    }\n\n    public function set_coupon_data($data)\n    {\n        $this->coupon_data = $data;\n    }\n\n    public function get_discount_value()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n\n\n        if (empty($data)) {\n            return false;\n        }\n\n        if (!isset($data['discount_value'])) {\n            return false;\n        }\n\n        if (!isset($data['total_amount'])) {\n            return false;\n        }\n\n        $apply_code = false;\n        if ($this->sum() >= $data['total_amount']) {\n            $apply_code = true;\n        }\n\n        if ($apply_code) {\n            return floatval($data['discount_value']);\n        }\n\n        return false;\n    }\n\n    public function get_discount_text()\n    {\n        if ($this->get_discount_type() == \"percentage\" or $this->get_discount_type() == \"percentage\") {\n            return $this->get_discount_value() . \"%\";\n        } else {\n            return currency_format($this->get_discount_value());\n        }\n    }\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n\n        $table =  'cart';\n        $params['table'] = $table;\n        $skip_sid = false;\n        if (!defined('MW_API_CALL')) {\n            if (isset($params['order_id'])) {\n                $skip_sid = 1;\n            }\n        }\n        if ($skip_sid == false) {\n            if (!defined('MW_ORDERS_SKIP_SID')) {\n                if ($this->app->user_manager->is_admin() == false) {\n                    $params['session_id'] = mw()->user_manager->session_id();\n                } else {\n                    if (isset($params['session_id']) and $this->app->user_manager->is_admin() == true) {\n                    } else {\n                        $params['session_id'] = mw()->user_manager->session_id();\n                    }\n                }\n                if (isset($params['no_session_id']) and $this->app->user_manager->is_admin() == true) {\n                    unset($params['session_id']);\n                }\n            }\n        }\n        if (!isset($params['rel']) and isset($params['for'])) {\n            $params['rel_type'] = $params['for'];\n        } elseif (isset($params['rel']) and !isset($params['rel_type'])) {\n            $params['rel_type'] = $params['rel'];\n        }\n        if (!isset($params['rel_id']) and isset($params['for_id'])) {\n            $params['rel_id'] = $params['for_id'];\n        }\n\n        $params['limit'] = 10000;\n        if (!isset($params['order_completed'])) {\n            if (!isset($params['order_id'])) {\n                $params['order_completed'] = 0;\n            }\n        } elseif (isset($params['order_completed']) and $params['order_completed'] === 'any') {\n            unset($params['order_completed']);\n        }\n        // $params['no_cache'] = 1;\n        $get = $this->app->database_manager->get($params);\n        if (isset($params['count']) and $params['count'] != false) {\n            return $get;\n        }\n        $return = array();\n        if (is_array($get)) {\n            foreach ($get as $k => $item) {\n                if (is_array($item)) {\n                    if (isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                        $item['content_data'] = $this->app->content_manager->data($item['rel_id']);\n                        $item['url'] = $this->app->content_manager->link($item['rel_id']);\n                        $item['picture'] = $this->app->media_manager->get_picture($item['rel_id']);\n                    }\n                    if (isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                        $item = $this->app->format->render_item_custom_fields_data($item);\n                    }\n                    if (isset($item['title'])) {\n                        $item['title'] = html_entity_decode($item['title']);\n                        $item['title'] = strip_tags($item['title']);\n                        $item['title'] = $this->app->format->clean_html($item['title']);\n                        $item['title'] = htmlspecialchars_decode($item['title']);\n                    }\n                    if (!isset($item['url'])) {\n                        $item['url'] = '';\n                    }\n                    if (!isset($item['picture'])) {\n                        $item['picture'] = '';\n                    }\n                }\n\n                $return[$k] = $item;\n            }\n        } else {\n            $return = $get;\n        }\n\n        return $return;\n    }\n\n    public function get_by_order_id($order_id = false)\n    {\n        $order_id = intval($order_id);\n        if ($order_id == false) {\n            return;\n        }\n        $params = array();\n        $table =  'cart';\n        $params['table'] = $table;\n        $params['order_id'] = $order_id;\n        $get = $this->app->database_manager->get($params);\n\n        if (!empty($get)) {\n            foreach ($get as $k => $item) {\n\n                if (is_array($item) and isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                    $item = $this->app->format->render_item_custom_fields_data($item);\n                }\n\n                if (!isset($item['item_image']) and is_array($item) and isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                    $item['item_image'] = get_picture($item['rel_id']);\n                }\n\n                if (!isset($item['item_image'])) {\n                    $item['item_image'] = false;\n                }\n\n                $get[$k] = $item;\n            }\n        }\n\n        return $get;\n    }\n\n    public function remove_item($data)\n    {\n        if (!is_array($data)) {\n            $id = intval($data);\n            $data = array('id' => $id);\n        }\n\n        if (!isset($data['id']) or $data['id'] == 0) {\n            return false;\n        }\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n        // if ($this->app->user_manager->is_admin() == false) {\n        $cart['session_id'] = mw()->user_manager->session_id();\n        // }\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n\n        $checkCart = $this->get($cart);\n\n        if ($checkCart != false and is_array($checkCart)) {\n\n            $findCart = Cart::where('id', $cart['id'])->first();\n            if ($findCart) {\n                $findCart->delete();\n            }\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            return array('success' => _e('Item was removed from cart', true), 'product' => $checkCart, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => _e('Item not removed from cart', true));\n        }\n    }\n\n    public function update_item_qty($data)\n    {\n        if (!isset($data['id'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        if (!isset($data['qty'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n\n        $data['qty'] = intval($data['qty']);\n        if ($data['qty'] < 1) {\n            return array('error' => _e('Invalid product quantity', true));\n        }\n\n        $data_fields = false;\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n\n        $cart['session_id'] = mw()->user_manager->session_id();\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n        $check_cart = $this->get($cart);\n        if (isset($check_cart['rel_type']) and isset($check_cart['rel_id']) and $check_cart['rel_type'] == 'content') {\n            $data_fields = $this->app->content_manager->data($check_cart['rel_id'], 1);\n            if (isset($check_cart['qty']) and isset($data_fields['qty']) and $data_fields['qty'] != 'nolimit') {\n                $old_qty = intval($data_fields['qty']);\n                if (intval($data['qty']) > $old_qty) {\n                    return array('error' => true, 'message' => _e('Quantity not changed, because there are not enough items in stock.', true), 'cart_item_quantity_available' => $check_cart['qty']);\n                }\n            }\n        }\n\n        if ($check_cart != false and is_array($check_cart)) {\n            $cart['qty'] = intval($data['qty']);\n            if ($cart['qty'] < 0) {\n                $cart['qty'] = 0;\n            }\n\n\n            if (isset($data_fields['max_qty_per_order']) and intval($data_fields['max_qty_per_order']) != 0) {\n\n                if ($cart['qty'] > intval($data_fields['max_qty_per_order'])) {\n                    $cart['qty'] = intval($data_fields['max_qty_per_order']);\n                }\n            }\n\n\n            $cart_return = $check_cart;\n\n\n            $table =  'cart';\n            $cart_data_to_save = array();\n            $cart_data_to_save['qty'] = $cart['qty'];\n            $cart_data_to_save['id'] = $cart['id'];\n            $cart_saved_id = $this->app->database_manager->save($table, $cart_data_to_save);\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => _e('Item quantity changed', true), 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n\n        }\n    }\n\n\n    public function empty_cart()\n    {\n        $sid = mw()->user_manager->session_id();\n        $cart_table =  'cart';\n\n        Cart::where('order_completed', 0)->where('session_id', $sid)->delete();\n        $this->no_cache = true;\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n\n        $cart_sum = $this->sum(true);\n        $cart_qty = $this->sum(false);\n        return array('success' => 'Cart is emptied', 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n    }\n\n    public function delete_cart($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n        if (isset($params['session_id'])) {\n            $id = $params['session_id'];\n            Cart::where('session_id', $id)->delete();\n        }\n        if (isset($params['order_id'])) {\n            $id = $params['order_id'];\n            Cart::where('order_id', $id)->delete();\n        }\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n    }\n\n    public function update_cart($data)\n    {\n        if (!isset($data['for']) and isset($data['rel_type'])) {\n            $data['for'] = $data['rel_type'];\n        }\n        if (!isset($data['for_id']) and isset($data['rel_id'])) {\n            $data['for_id'] = $data['rel_id'];\n        }\n        if (!isset($data['for']) and !isset($data['rel_type'])) {\n            $data['for'] = 'content';\n        }\n\n        if (isset($data['content_id'])) {\n            $data['for'] = 'content';\n            $for_id = $data['for_id'] = $data['content_id'];\n        }\n        $override = $this->app->event_manager->trigger('mw.shop.update_cart', $data);\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (is_array($resp) and !empty($resp)) {\n                    $data = array_merge($data, $resp);\n                }\n            }\n        }\n\n        $update_qty = 0;\n        $update_qty_new = 0;\n\n        if (isset($data['qty'])) {\n            $update_qty_new = $update_qty = intval($data['qty']);\n            unset($data['qty']);\n        }\n        if (!isset($data['for']) or !isset($data['for_id'])) {\n            if (!isset($data['id'])) {\n\n            } else {\n                $cart = array();\n                $cart['id'] = intval($data['id']);\n                $cart['limit'] = 1;\n                $data_existing = $this->get($cart);\n                if (is_array($data_existing) and is_array($data_existing[0])) {\n                    $data = array_merge($data, $data_existing[0]);\n                }\n            }\n        }\n\n\n        if (!isset($data['for']) and !isset($data['for_id'])) {\n            return array('error' => 'Invalid for and for_id params');\n        }\n\n        $data['for'] = $this->app->database_manager->assoc_table_name($data['for']);\n        $for = $data['for'];\n        $for_id = intval($data['for_id']);\n        if ($for_id == 0) {\n            return array('error' => 'Invalid data for_id');\n        }\n        $cont_data = false;\n\n        if ($update_qty > 0) {\n            $data['qty'] = $update_qty;\n        }\n\n        if ($data['for'] == 'content') {\n\n            $cont = $this->app->content_manager->get_by_id($for_id);\n\n            if (isset($cont['is_active'])) {\n                if ($cont['is_active'] != 1) {\n                    $cont = false;\n                }\n            }\n\n            if (isset($cont['is_deleted'])) {\n                if ($cont['is_deleted'] > 0) {\n                    $cont = false;\n                }\n            }\n\n            $cont_data = $this->app->content_manager->data($for_id);\n            if ($cont == false) {\n                return array('error' => 'Invalid product?');\n            } else {\n                if (is_array($cont) and isset($cont['title'])) {\n                    $data['title'] = $cont['title'];\n                }\n            }\n        }\n\n        if (isset($data['title']) and is_string($data['title'])) {\n            $data['title'] = (strip_tags($data['title']));\n        }\n\n        $found_price = false;\n        $add = array();\n\n        if (isset($data['custom_fields_data']) and is_array($data['custom_fields_data'])) {\n            $add = $data['custom_fields_data'];\n        }\n\n        $prices = array();\n\n        $skip_keys = array();\n\n        $content_custom_fields = $this->app->fields_manager->get([\n            'rel_type' => $for,\n            'rel_id' => $for_id,\n            'return_full' => true,\n        ]);\n\n        $product_prices = array();\n        if ($for == 'content') {\n            $prices_data = app()->shop_manager->get_product_prices($for_id, true);\n            if ($prices_data) {\n                foreach ($prices_data as $price_data) {\n                    if (isset($price_data['name'])) {\n                        $product_prices[$price_data['name']] = $price_data['value'];\n                    }\n                }\n            }\n        }\n\n        if ($content_custom_fields == false) {\n            $content_custom_fields = $data;\n\n            if (isset($data['price'])) {\n\n                if ($product_prices) {\n                    foreach ($product_prices as $price) {\n                        if ($price['value'] == $data['price']) {\n                            $found_price = $data['price'];\n                        }\n                    }\n                }\n            }\n        } elseif (is_array($content_custom_fields)) {\n            foreach ($content_custom_fields as $cf) {\n                if (isset($cf['type']) and $cf['type'] == 'price') {\n                    if (isset($product_prices[$cf['name']])) {\n                        $prices[$cf['name']] = $product_prices[$cf['name']];\n                    } else {\n                        $prices[$cf['name']] = $cf['value'];\n                    }\n                }\n            }\n        }\n\n        foreach ($data as $k => $item) {\n            if ($k != 'for' and $k != 'for_id' and $k != 'title') {\n                $found = false;\n                foreach ($content_custom_fields as $cf) {\n                    if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                        if(isset($data[$cf['name_key']])){\n                            $cf['name'] = $data[$cf['name_key']];\n                        }\n                   } elseif (isset($cf['type']) and $cf['type'] == 'price' and isset($cf['name']) and isset($cf['value'])) {\n                        if ($cf['value'] != '') {\n                            if (isset($product_prices[$cf['name']])) {\n                                $prices[$cf['name']] = $product_prices[$cf['name']];\n                            } else {\n                                $prices[$cf['name']] = $cf['value'];\n                            }\n                        }\n                    }\n                }\n\n                if ($content_custom_fields) {\n                    foreach ($content_custom_fields as $cf) {\n                        if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                            if ($k == $cf['name']) {\n                                $found = true;\n                            } else if ($k == $cf['name_key']) {\n                                $found = true;\n                            }\n                        }\n                    }\n                }\n\n                if ($found == false) {\n                    $skip_keys[] = $k;\n                }\n\n                if (is_array($prices)) {\n                    foreach ($prices as $price_key => $price) {\n                        if (isset($data['price'])) {\n                            if ($price == $data['price']) {\n                                $found = true;\n                                $found_price = $price;\n                            }\n                        } elseif (isset($item) and $price == $item) {\n                            $found = true;\n                            if ($found_price == false) {\n                                $found_price = $item;\n                            }\n                        }\n                    }\n                    if ($found_price == false) {\n                        $found_price = array_pop($prices);\n                    } else {\n                        if (count($prices) > 1) {\n                            foreach ($prices as $pk => $pv) {\n                                if ($pv == $found_price) {\n                                    $add[$pk] = $this->app->shop_manager->currency_format($pv);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (isset($item)) {\n                    if ($found == true) {\n                        if ($k != 'price' and !in_array($k, $skip_keys)) {\n                            $add[$k] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($found_price == false and is_array($prices)) {\n            $found_price = array_pop($prices);\n        }\n        if ($found_price == false) {\n            $found_price = 0;\n        }\n\n\n        if (is_array($prices)) {\n            ksort($add);\n            asort($add);\n            $add = mw()->format->clean_xss($add);\n            $table =  'cart';\n\n\n            $cart = array();\n            $cart['rel_type'] = trim($data['for']);\n            $cart['rel_id'] = intval($data['for_id']);\n            $cart['session_id'] = mw()->user_manager->session_id();\n            $cart['no_cache'] = 1;\n            $cart['disable_triggers'] = 1;\n            $cart['order_completed'] = 0;\n            $cart['custom_fields_data'] = $this->app->format->array_to_base64($add);\n\n            $cart['custom_fields_json'] = json_encode($add);\n            $cart['allow_html'] = 1;\n            $cart['price'] = doubleval($found_price);\n            $cart['limit'] = 1;\n            $cart['title'] = mw()->format->clean_html($data['title']);\n\n            $cart_return['custom_fields_data'] = $add;\n            $cart_return['price'] = $cart['price'];\n\n            $findCart = Cart::where('custom_fields_data', $cart['custom_fields_data'])\n                ->where('session_id', $cart['session_id'])\n                ->where('order_completed', $cart['order_completed'])\n                ->where('rel_id', $cart['rel_id'])\n                ->where('rel_type', $cart['rel_type'])\n                ->first();\n            $check_cart = false;\n            if ($findCart !== null) {\n                $check_cart = $findCart->toArray();\n            }\n\n\n            if ($found_price and $check_cart != false and is_array($check_cart) and isset($check_cart['id'])) {\n                if ($check_cart and isset($check_cart['price']) and (doubleval($check_cart['price']) == doubleval($found_price))) {\n                    $cart['id'] = $check_cart['id'];\n                    if ($update_qty > 0) {\n                        $cart['qty'] = $check_cart['qty'] + $update_qty;\n                    } elseif ($update_qty_new > 0) {\n                        $cart['qty'] = $update_qty_new;\n                    } else {\n                        $cart['qty'] = $check_cart['qty'] + 1;\n                    }\n                }\n            } else {\n                if ($update_qty > 0) {\n                    $cart['qty'] = $update_qty;\n                } else {\n                    $cart['qty'] = 1;\n                }\n            }\n\n            if (isset($cont_data['qty']) and trim($cont_data['qty']) != 'nolimit') {\n                if (intval($cont_data['qty']) < intval($cart['qty'])) {\n                    $cart['qty'] = $cont_data['qty'];\n                }\n            }\n\n\n            if (isset($cont_data['max_qty_per_order']) and intval($cont_data['max_qty_per_order']) != 0) {\n                if ($cart['qty'] > intval($cont_data['max_qty_per_order'])) {\n                    $cart['qty'] = intval($cont_data['max_qty_per_order']);\n                }\n            }\n\n\n            if (isset($data['other_info']) and is_string($data['other_info'])) {\n                $cart['other_info'] = strip_tags($data['other_info']);\n            }\n\n            if (isset($data['description']) and is_string($data['description'])) {\n                $cart_return['description'] = $cart['description'] = $this->app->format->clean_html($data['description']);\n            }\n            if (isset($data['image']) and is_string($data['image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['image']);\n            }\n            if (isset($data['item_image']) and is_string($data['item_image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['item_image']);\n            }\n            if (isset($data['link']) and is_string($data['link'])) {\n                $cart_return['link'] = $cart['link'] = $this->app->format->clean_html($data['link']);\n            }\n\n            if (isset($data['currency']) and is_string($data['currency'])) {\n                $cart_return['currency'] = $cart['currency'] = $this->app->format->clean_html($data['link']);\n            }\n\n            // Update cart in database\n            if ($findCart == null) {\n                $findCart = new Cart();\n                $findCart->rel_id = $cart['rel_id'];\n                $findCart->rel_type = $cart['rel_type'];\n                $findCart->custom_fields_data = $cart['custom_fields_data'];\n                $findCart->custom_fields_json = $cart['custom_fields_json'];\n            }\n\n            $findCart->qty = $cart['qty'];\n            $findCart->title = $cart['title'];\n            $findCart->price = $cart['price'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->order_completed = $cart['order_completed'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->save();\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            if (isset($cart['rel_type']) and isset($cart['rel_id']) and $cart['rel_type'] == 'content') {\n                $cart_return['image'] = $this->app->media_manager->get_picture($cart['rel_id']);\n                $cart_return['product_link'] = $this->app->content_manager->link($cart['rel_id']);\n            }\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => 'Item added to cart', 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => 'Invalid cart items');\n        }\n    }\n\n    public function recover_cart($sid = false, $ord_id = false)\n    {\n        if ($sid == false) {\n            return;\n        }\n        $cur_sid = mw()->user_manager->session_id();\n        if ($cur_sid == false) {\n            return;\n        } else {\n\n\n            if ($cur_sid != false) {\n                $c_id = $sid;\n                $table =  'cart';\n                $params = array();\n                //   $params['order_completed'] = 0;\n                $params['session_id'] = $c_id;\n                $params['table'] = $table;\n                if ($ord_id != false) {\n                    unset($params['order_completed']);\n                    $params['order_id'] = intval($ord_id);\n                }\n\n                $will_add = true;\n                $res = $this->app->database_manager->get($params);\n\n                if (!empty($res)) {\n                    foreach ($res as $item) {\n                        if (isset($item['id'])) {\n                            $data = $item;\n                            unset($data['id']);\n                            if (isset($item['order_id'])) {\n                                unset($data['order_id']);\n                            }\n                            if (isset($item['created_by'])) {\n                                unset($data['created_by']);\n                            }\n                            if (isset($item['updated_at'])) {\n                                unset($data['updated_at']);\n                            }\n                            if (isset($item['rel_type']) and isset($item['rel_id'])) {\n                                $is_ex_params = array();\n                                $is_ex_params['order_completed'] = 0;\n                                $is_ex_params['session_id'] = $cur_sid;\n                                $is_ex_params['table'] = $table;\n                                $is_ex_params['rel_type'] = $item['rel_type'];\n                                $is_ex_params['rel_id'] = $item['rel_id'];\n                                $is_ex_params['count'] = 1;\n\n                                $is_ex = $this->app->database_manager->get($is_ex_params);\n\n                                if ($is_ex != false) {\n                                    $will_add = false;\n                                }\n                            }\n                            $data['order_completed'] = 0;\n                            $data['session_id'] = $cur_sid;\n\n                            if (isset($item['order_completed']) and intval($item['order_completed']) == 1) {\n                                if ($sid == $cur_sid) {\n                                    if (isset($item['is_paid']) and intval($item['is_paid']) == 0) {\n                                        $data['id'] = $item['id'];\n                                    }\n                                }\n                            }\n                            if ($will_add == true) {\n                                $s = $this->app->database_manager->save($table, $data);\n                            }\n                        }\n                    }\n                }\n                if ($will_add == true) {\n                    $this->app->cache_manager->delete('cart');\n\n                    $this->app->cache_manager->delete('cart_orders');\n                }\n            }\n        }\n    }\n\n    public function table_name()\n    {\n        return  'cart';\n    }\n\n\n    public function is_product_in_stock($content_id)\n    {\n\n        $item = content_data($content_id);\n        $isInStock = true;\n        if ($item) {\n            if (isset($item['qty']) and $item['qty'] != 'nolimit') {\n                $quantity = intval($item['qty']);\n                if ($quantity < 1) {\n                    $isInStock = false;\n                }\n            }\n\n        }\n\n        return $isInStock;\n    }\n\n    public function couponCodeGetDataFromSession()\n    {\n        $coupon_code = $this->app->user_manager->session_get('coupon_code');\n        if ($coupon_code and !$this->couponCodeCheckIfValid($coupon_code)) {\n            //check if coupon is valid\n            if (function_exists('coupons_delete_session')) {\n                coupons_delete_session();\n            }\n\n            $this->coupon_data = false;\n        } else {\n            if ($coupon_code and function_exists('coupon_get_by_code')) {\n                $this->coupon_data = coupon_get_by_code($coupon_code);\n            } else {\n                $this->coupon_data = false;\n            }\n        }\n        return $this->coupon_data;\n    }\n\n    public function couponCodeCheckIfValid($coupon_code)\n    {\n        if (function_exists('coupon_apply')) {\n            //check if coupon is valid\n            $coupon_valid = coupon_apply([\n                'coupon_code' => $coupon_code,\n                'coupon_check_if_valid' => true\n            ]);\n            if (!$coupon_valid) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n\n    }\n\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Checkout;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Encryption\\MissingAppKeyException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Notification;\n\nuse MicroweberPackages\\Checkout\\Http\\Controllers\\CheckoutController;\n\n//use MicroweberPackages\\Invoice\\Address;\n//use MicroweberPackages\\Invoice\\Invoice;\nuse MicroweberPackages\\Order\\Events\\OrderWasPaid;\nuse MicroweberPackages\\Order\\Models\\Order;\nuse MicroweberPackages\\Order\\Notifications\\NewOrder;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\nuse Twig\\Environment;\nuse Twig\\Loader\\ArrayLoader;\n\nclass CheckoutManager\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $tables = array();\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $tables['cart'] = 'cart';\n\n        $tables['cart_orders'] = 'cart_orders';\n\n        $tables['cart_shipping'] = 'cart_shipping';\n\n        /*$tables['cart_taxes'] = 'cart_taxes';*/\n\n        $this->tables = $tables;\n    }\n\n    public function checkout($data)\n    {\n        $exec_return = false;\n        $sid = $this->app->user_manager->session_id();\n        $sess_order_id = $this->app->user_manager->session_get('order_id');\n        $cart = array();\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n        $cart['session_id'] = $sid;\n        $cart['order_completed'] = 0;\n        $cart['limit'] = 1;\n        $mw_process_payment = true;\n        $mw_process_payment_success = false;\n        $mw_process_payment_failed = false;\n        if (isset($_REQUEST['mw_payment_success']) or isset($_REQUEST['mw_payment_failure'])) {\n\n            $update_order = $update_order_orig = $this->app->order_manager->get_by_id($sess_order_id);\n            if (isset($update_order['payment_gw']) and isset($update_order['id'])) {\n                $gw_return = normalize_path(modules_path() . $update_order['payment_gw'] . DS . 'return.php', false);\n                if (is_file($gw_return)) {\n                    include $gw_return;\n\n                    if ($update_order != $update_order_orig) {\n\n                        if (isset($update_order['is_paid'])) {\n                            if (intval($update_order['is_paid']) == 1) {\n                                $_REQUEST['mw_payment_success'] = true;\n                                $_REQUEST['mw_payment_failure'] = null;\n                            } else {\n                                $_REQUEST['mw_payment_success'] = null;\n                                $_REQUEST['mw_payment_failure'] = true;\n                                //    mw()->cart_manager->recover_cart(session()->getId(), $update_order['id']);\n\n                            }\n                        }\n\n                        $should_mark_as_paid = false;\n\n\n                        $this->_verify_request_params($update_order);\n\n\n                        if (!isset($update_order_orig['is_paid']) or (isset($update_order_orig['is_paid']) and intval($update_order_orig['is_paid']) == 0)) {\n                            if (isset($update_order['is_paid']) and intval($update_order['is_paid']) == 1) {\n                                $should_mark_as_paid = true;\n                                unset($update_order['is_paid']);\n                            }\n                        }\n\n                        $this->app->order_manager->save($update_order);\n\n\n                        if ($should_mark_as_paid) {\n                            $this->app->checkout_manager->mark_order_as_paid($update_order['id']);\n                        }\n\n\n                        if (isset($update_order['id'])) {\n                            $this->after_checkout($update_order['id']);\n                        }\n\n\n                    }\n                }\n            }\n\n            if (isset($_REQUEST['mw_payment_success'])) {\n                $mw_process_payment = false;\n                $mw_process_payment_success = true;\n                $exec_return = true;\n            } elseif (isset($_REQUEST['mw_payment_failure'])) {\n\n                if (isset($_REQUEST['recart']) and $_REQUEST['recart'] != false and isset($_REQUEST['order_id'])) {\n\n                    mw()->cart_manager->recover_cart($_REQUEST['recart'], $_REQUEST['order_id']);\n                }\n\n                $mw_process_payment_failed = true;\n                $exec_return = true;\n            }\n        }\n\n        $cart_table_real = $this->app->database_manager->real_table_name($cart_table);\n        $order_table_real = $this->app->database_manager->real_table_name($table_orders);\n\n        if ($exec_return == true) {\n\n            $return_url = $this->app->user_manager->session_get('checkout_return_to_url');\n            if (isset($_REQUEST['return_to']) and $_REQUEST['return_to'] != false) {\n                $return_url = urldecode($_REQUEST['return_to']);\n            }\n            if ($return_url) {\n                $return_to = $return_url;\n                $append = '?';\n                if (strstr($return_to, '?')) {\n                    $append = '&';\n                }\n                if ($mw_process_payment_success == true) {\n                    $return_to = $return_to . $append . 'mw_payment_success=1';\n                } elseif ($mw_process_payment_failed == true) {\n                    $return_to = $return_to . $append . 'mw_payment_failure=1';\n                }\n\n                return $this->app->url_manager->redirect($return_to);\n            } else {\n\n                if(isset($update_order) and isset($update_order['id'])){\n                    if ($mw_process_payment_success == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment is complete',true));\n                    } elseif ($mw_process_payment_failed == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment was not complete',true));\n\n                    } else {\n                        return redirect('/');\n                    }\n                }\n\n\n            }\n        }\n\n        $additional_fields = false;\n        if (isset($data['for']) and isset($data['for_id'])) {\n            $additional_fields = $this->app->fields_manager->get([\n                'rel_type' => $data['for'],\n                'rel_id' => $data['for_id'],\n                'return_full' => true,\n            ]);\n        }\n\n        $seach_address_keys = array('country', 'city', 'address', 'state', 'zip');\n        $addr_found_from_search_in_post = false;\n\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if (is_array($v)) {\n                    foreach ($seach_address_keys as $item) {\n                        $case1 = ucfirst($item);\n                        if (!isset($data[$item]) and (isset($v[$item]) or isset($v[$case1]))) {\n                            $data[$item] = $v[$item];\n                            if ($addr_found_from_search_in_post == false) {\n                                unset($data[$k]);\n                            }\n                            $addr_found_from_search_in_post = 1;\n                        }\n                    }\n                }\n            }\n        }\n        $save_custom_fields_for_order = array();\n        if (is_array($additional_fields) and !empty($additional_fields)) {\n            foreach ($additional_fields as $cf) {\n                if (isset($data) and is_array($data)) {\n                    foreach ($data as $k => $item) {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if ($key1 == $key2) {\n                            $save_custom_fields_for_order[$key1] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n   /*\n    *  OLD VALIDATION ON MODAL\n    *      $validator = app()->make(CheckoutController::class);\n\n        if (!empty($data)) {\n            $request = new Request();\n            $request->merge($data);\n            $is_valid = $validator->validate($request);\n        } else {\n            $is_valid['errors'] = 'Data not entered.';\n        }\n\n        if (is_object($is_valid)) {\n            return $is_valid;\n        }\n\n        if (isset($is_valid['errors'])) {\n            return $is_valid;\n        }*/\n\n        $checkout_errors = array();\n        $check_cart = $this->app->shop_manager->get_cart($cart);\n\n        if (!is_array($check_cart)) {\n            $checkout_errors['cart_empty'] = 'Your cart is empty';\n        } else {\n\n            if (!is_admin()) {\n                $shop_require_terms = $this->app->option_manager->get('shop_require_terms', 'website');\n                if ($shop_require_terms) {\n                    $user_id_or_email = $this->app->user_manager->id();\n                    if (!$user_id_or_email) {\n                        if (isset($data['email'])) {\n                            $user_id_or_email = $data['email'];\n                        }\n                    }\n\n                    if (!$user_id_or_email) {\n                        $checkout_errors['cart_needs_email'] = _e('You must provide email address', true);\n                    } else {\n                        $terms_and_conditions_name = 'terms_shop';\n\n                        $check_term = $this->app->user_manager->terms_check($terms_and_conditions_name, $user_id_or_email);\n                        if (!$check_term) {\n                            if (isset($data['terms']) and $data['terms']) {\n                                $this->app->user_manager->terms_accept($terms_and_conditions_name, $user_id_or_email);\n                            } else {\n                                return array(\n                                    'error' => _e('You must agree to terms and conditions', true),\n                                    'form_data_required' => 'terms',\n                                    'form_data_module' => 'users/terms'\n                                );\n\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            if (!isset($data['payment_gw']) and $mw_process_payment == true) {\n                $data['payment_gw'] = 'none';\n            } else {\n                if ($mw_process_payment == true) {\n                  //  $gw_check = $this->payment_options('payment_gw_' . $data['payment_gw']);\n                    $gw_check = app()->payment_manager->hasPaymentProvider($data['payment_gw']);\n                    if ($gw_check) {\n                        $gateway = app()->payment_manager->getPaymentProviderModule($data['payment_gw']);\n                    } else {\n                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n                    }\n\n//                    if (isset($gw_check[0]) && is_array($gw_check[0])) {\n//                        $gateway = $gw_check[0];\n//                    } else {\n//                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n//                    }\n                }\n            }\n\n            $shipping_country = false;\n            $shipping_cost_max = false;\n            $shipping_cost = false;\n            $shipping_cost_above = false;\n\n            $discount_value = false;\n            $discount_type = false;\n\n            $coupon_id = false;\n            $coupon_code = false;\n            $shipping_cost = 0;\n\n            /*  if (($this->app->user_manager->session_get('shipping_country'))) {\n                  $shipping_country = $this->app->user_manager->session_get('shipping_country');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_max'))) {\n                  $shipping_cost_max = $this->app->user_manager->session_get('shipping_cost_max');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_above'))) {\n                  $shipping_cost_above = $this->app->user_manager->session_get('shipping_cost_above');\n              }*/\n\n\n//\n//            if ($this->app->user_manager->session_get('shipping_cost')) {\n//                $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n//            }\n//\n////\n////\n////\n////            $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n////            if(!isset($data['shipping_gw']) and $shipping_gw_from_session){\n////                $data['shipping_gw'] = $shipping_gw_from_session;\n////            }\n////            if(isset($data['shipping_gw']) and $data['shipping_gw']){\n////                try {\n////                    $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n////\n////                } catch (\\InvalidArgumentException $e) {\n////                    $shipping_cost = 0;\n////                    unset($data['shipping_gw']);\n////                }\n////             }\n\n            $shipping_cost = $this->getShippingCost($data);\n\n            if (($this->app->user_manager->session_get('discount_value'))) {\n                $discount_value = $this->app->user_manager->session_get('discount_value');\n            }\n            if (($this->app->user_manager->session_get('discount_type'))) {\n                $discount_type = $this->app->user_manager->session_get('discount_type');\n            }\n            if (($this->app->user_manager->session_get('coupon_id'))) {\n                $coupon_id = $this->app->user_manager->session_get('coupon_id');\n            }\n            if (($this->app->user_manager->session_get('coupon_code'))) {\n                $coupon_code = $this->app->user_manager->session_get('coupon_code');\n            }\n\n\n            //post any of those on the form\n            $flds_from_data = array('first_name', 'last_name', 'email', 'country', 'city', 'state', 'zip', 'address', 'address2', 'payment_email', 'payment_name', 'payment_country', 'payment_address', 'payment_city', 'payment_state', 'payment_zip', 'phone', 'promo_code', 'payment_gw', 'other_info');\n\n            if (!isset($data['email']) or $data['email'] == '') {\n                $data['email'] = user_name(user_id(), 'email');\n            }\n\n            if (get_option('shop_require_email', 'website') == 1) {\n                if (!isset($data['email']) or $data['email'] == '') {\n                    $checkout_errors['email'] = 'Email is required';\n                }\n            }\n\n            if (!isset($data['first_name']) or $data['first_name'] == '') {\n                $data['first_name'] = user_name(user_id(), 'first');\n            }\n\n            if (get_option('shop_require_first_name', 'website') == 1) {\n                if (!isset($data['first_name']) or $data['first_name'] == '') {\n                    $checkout_errors['first_name'] = 'First name is required';\n                }\n            }\n\n            if (get_option('shop_require_last_name', 'website') == 1) {\n                if (!isset($data['last_name']) or $data['last_name'] == '') {\n                    // $checkout_errors['last_name'] = 'Last name is required';\n                    $data['last_name'] = user_name(user_id(), 'last');\n                }\n            }\n\n            if (isset($data['payment_gw']) and $data['payment_gw'] != '') {\n                $data['payment_gw'] = sanitize_path($data['payment_gw']);\n            }\n\n\n            $custom_order_id = $this->app->option_manager->get('custom_order_id', 'shop');\n            $posted_fields = array();\n            $place_order = array();\n            $place_order['id'] = false;\n\n            $return_url_after = '';\n            $return_to_ref = false;\n            $set_return_url_for_order_finish = false;\n\n\n            $place_order['session_id'] = $sid;\n            $place_order['order_completed'] = 0;\n            $items_count = 0;\n\n            foreach ($flds_from_data as $value) {\n                if (isset($data[$value]) and ($data[$value]) != false) {\n                    $place_order[$value] = $data[$value];\n                    $posted_fields[$value] = $data[$value];\n                }\n            }\n\n\n            // Discount details save\n            if ($coupon_code) {\n                $place_order['promo_code'] = $coupon_code;\n                $place_order['coupon_id'] = $coupon_id;\n                $place_order['discount_type'] = $discount_type;\n                $place_order['discount_value'] = $discount_value;\n\n\n                if (!$this->app->cart_manager->couponCodeCheckIfValid($coupon_code)) {\n                    //check if coupon is valid\n                    if(function_exists('coupons_delete_session')){\n                        coupons_delete_session();\n                    }\n\n                    $place_order['promo_code'] = '';\n                    $place_order['coupon_id'] ='';\n                    $place_order['discount_type'] = '';\n                    $place_order['discount_value'] ='';\n                }\n            }\n\n\n\n\n\n            $amount = $this->app->shop_manager->cart_total();\n            $tax = $this->app->cart_manager->get_tax();\n\n\n            if (!empty($checkout_errors)) {\n                return array('error' => $checkout_errors);\n            }\n\n\n            if ($amount and is_numeric($amount) and is_float($amount) ) {\n                $amount = floatval($amount);\n                $amount = number_format($amount, 2, \".\", \"\");;\n            }\n\n            $place_order['amount'] = $amount;\n            $place_order['allow_html'] = true;\n            $place_order['currency'] = $this->app->option_manager->get('currency', 'payments');\n            if (!$place_order['currency']) {\n                $place_order['currency'] = 'USD';\n            }\n\n            if (isset($data['shipping_gw'])) {\n                $place_order['shipping_service'] = $data['shipping_gw'];\n            }\n            $place_order['shipping'] = $shipping_cost;\n            if ($tax != 0) {\n                $place_order['taxes_amount'] = $tax;\n            }\n\n            $items_count = $this->app->shop_manager->cart_sum(false);\n            $place_order['items_count'] = $items_count;\n\n            $cart_checksum = md5($sid . serialize($check_cart) . uniqid(time()));\n\n            $place_order['payment_verify_token'] = $cart_checksum;\n\n            if (isset($save_custom_fields_for_order) and !empty($save_custom_fields_for_order)) {\n                $place_order['custom_fields_data'] = $this->app->format->array_to_base64($save_custom_fields_for_order);\n            }\n\n            if (!isset($place_order['shipping']) or $place_order['shipping'] == false) {\n                $place_order['shipping'] = 0;\n            }\n\n            $temp_order = $this->app->database_manager->save($table_orders, $place_order);\n            if ($temp_order != false) {\n                $place_order['id'] = $temp_order;\n            } else {\n                $place_order['id'] = 0;\n            }\n\n            if ($custom_order_id != false) {\n                foreach ($place_order as $key => $value) {\n                    $custom_order_id = str_ireplace('{' . $key . '}', $value, $custom_order_id);\n                }\n\n                $custom_order_id = str_ireplace('{YYYYMMDD}', date('Ymd'), $custom_order_id);\n                $custom_order_id = str_ireplace('{date}', date('Y-m-d'), $custom_order_id);\n            }\n\n            if ($custom_order_id != false) {\n                $place_order['item_name'] = 'Order id:' . ' ' . $custom_order_id;\n                $place_order['order_id'] = $custom_order_id;\n            } else {\n                $place_order['item_name'] = 'Order id:' . ' ' . $place_order['id'];\n            }\n\n\n\n\n            // convert currency to payment provider currency\n            $currencies_list_paypal = app()->shop_manager->currency_get_for_paypal();\n            $currencyCode = strtoupper($place_order['currency']);\n            $amount = $place_order['amount'];\n\n            if (!isset($place_order['payment_amount'])) {\n                $place_order['payment_amount'] = $amount;\n            }\n            $place_order['payment_shipping'] = $place_order['shipping'];\n\n\n            $payment_currency = get_option('payment_currency', 'payments');\n            $payment_currency_rate = get_option('payment_currency_rate', 'payments');\n\n            if (!isset($place_order['payment_currency'])) {\n                $place_order['payment_currency'] = $place_order['currency'];\n            }\n\n            if ($payment_currency and $payment_currency != $currencyCode) {\n\n                if (!in_array(strtoupper($place_order['currency']), $currencies_list_paypal)) {\n\n                    $currencyCode = $payment_currency;\n\n\n                    if ($payment_currency_rate != false) {\n                        $payment_currency_rate = str_replace(',', '.', $payment_currency_rate);\n                        $payment_currency_rate = floatval($payment_currency_rate);\n\n                    }\n                    if ($payment_currency_rate != 0.00) {\n                        $amount = str_replace(',', '', $amount);\n                        $amount = floatval($amount);\n                        $amount = $amount * $payment_currency_rate;\n                        $place_order['payment_amount'] = $amount;\n                    }\n\n\n                    if ($place_order['payment_shipping']) {\n                        $place_order['payment_shipping'] = $place_order['payment_shipping'] * $payment_currency_rate;\n\n                    }\n\n\n                }\n            }\n\n\n            $place_order['payment_currency'] = $currencyCode;\n\n\n            // end of convert for curency\n\n\n            if ($mw_process_payment == true) {\n                $shop_dir = module_dir('shop');\n                $shop_dir = $shop_dir . DS . 'payments' . DS . 'gateways' . DS;\n\n                if ($data['payment_gw'] != 'none') {\n                    $place_order['posted_fields']  = $posted_fields;\n\n                    $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Illuminate\\Support\\Facades\\Config::get('app.key') . $place_order['payment_verify_token']), \\Illuminate\\Support\\Facades\\Config::get('app.cipher'));\n\n                    $vkey_data = array();\n\n                    $vkey_data['payment_verify_token'] = $place_order['payment_verify_token'];\n\n                    $enc_key_hash = md5(json_encode($vkey_data));\n                    $enc_key_hash = $encrypter->encrypt($enc_key_hash);\n\n                    $mw_return_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_success=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_cancel_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_failure=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&_vkey_url=' . $enc_key_hash . '&recart=' . $sid . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_ipn_url = $this->app->url_manager->api_link('checkout_ipn') . '?payment_gw=' . $place_order['payment_gw'] . '&order_id=' . $place_order['id'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_payment_fields = array();\n                    $mw_payment_fields['enc_key_hash']  = $enc_key_hash;\n                    $mw_payment_fields['mw_return_url']  = $mw_return_url;\n                    $mw_payment_fields['mw_cancel_url']  = $mw_cancel_url;\n                    $mw_payment_fields['mw_ipn_url']  = $mw_ipn_url;\n\n                    $place_order['mw_payment_fields']  = $mw_payment_fields;\n                    $place_order['posted_data']  = $data;\n\n                    $paymentDriver = app()->payment_manager->driver($data['payment_gw']);\n                    $skipLegacy = false;\n                    if(method_exists($paymentDriver, 'process')){\n                        $skipLegacy = true;\n                        $place_order =  $paymentDriver->process($place_order);\n                    }\n\n\n\n                    if ($skipLegacy == false) {\n                        $place_order['payment_gw'] = $data['payment_gw'];\n                        $gw_process = modules_path() . $data['payment_gw'] . '_process.php';\n                        if (!is_file($gw_process)) {\n                            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'process.php', false);\n                        }\n\n\n                        if (is_file($gw_process)) {\n                            require_once $gw_process;\n                        } else {\n                            $checkout_errors['payment_gw'] = 'Payment gateway\\'s process file not found.';\n                        }\n                    }\n\n                    if (isset($place_order['posted_fields'])) {\n                        unset($place_order['posted_fields']);\n                    }\n                    if (isset($place_order['mw_payment_fields'])) {\n                        unset($place_order['mw_payment_fields']);\n                    } if (isset($place_order['posted_data'])) {\n                        unset($place_order['posted_data']);\n                    }\n\n                } else {\n                    $place_order['order_completed'] = 1;\n                    $place_order['is_paid'] = 0;\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n\n\n                $place_order['order_status'] = 'new';\n\n                if (!empty($checkout_errors)) {\n                    return array('error' => $checkout_errors);\n                }\n\n                if (isset($place_order['error'])) {\n                    return array('error' => $place_order['error']);\n                }\n\n\n                /*\n                     $invoicePrefix = 'INV';\n                     $nextInvoiceNumber = Invoice::getNextInvoiceNumber($invoicePrefix);\n                     $invoiceDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d'));\n                     $dueDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d', strtotime('+6 days', strtotime(date('Y-m-d')))));\n\n                     $invoiceTotal = ($place_order['amount'] * 100);\n\n                     $invoice = Invoice::create([\n                         'invoice_date' => $invoiceDate,\n                         'due_date' => $dueDate,\n                         'invoice_number' => $invoicePrefix . '-' . $nextInvoiceNumber,\n                         'reference_number' => '',\n                         'customer_id' => $findCustomer->id,\n                         'company_id' => 0,\n                         'invoice_template_id' => 1,\n                         'status' => Invoice::STATUS_DRAFT,\n                         'paid_status' => Invoice::STATUS_UNPAID,\n                         'sub_total' => $invoiceTotal,\n                         'discount' =>'',\n                         'discount_type' => $place_order['discount_type'],\n                         'discount_val' => ($place_order['discount_value'] * 100),\n                         'total' => $invoiceTotal,\n                         'due_amount' => $invoiceTotal,\n                         'tax_per_item' => '',\n                         'discount_per_item' => '',\n                         'tax' => '',\n                         'notes' => '',\n                         'unique_hash' => str_random(60)\n                     ]);\n\n                     foreach ($check_cart as $cartItem) {\n                         $invoice->items()->create([\n                             'name'=>$cartItem['title'],\n                             'description'=>$cartItem['description'],\n                             'price'=>($cartItem['price'] * 100),\n                             'quantity'=>$cartItem['qty'],\n                         ]);\n                     }*/\n\n                $ord = $this->app->shop_manager->place_order($place_order);\n                $place_order['id'] = $ord;\n\n                if (isset($place_order['is_paid']) and $place_order['is_paid']) {\n                    $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $place_order);\n                }\n\n\n            }\n\n            if (isset($place_order) and !empty($place_order)) {\n                if (!isset($place_order['success'])) {\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n                $return = $place_order;\n                if (isset($place_order['redirect'])) {\n                    $return['redirect'] = $place_order['redirect'];\n                }\n\n                return $return;\n            }\n        }\n\n        if (!empty($checkout_errors)) {\n            return array('error' => $checkout_errors);\n        }\n    }\n\n    public function getUserInfo()\n    {\n        return $this->checkout_get_user_info();\n    }\n\n\n    public function checkout_get_user_info()\n    {\n\n        $ready = [];\n        $logged_user_data = [];\n        $shipping_address_from_profile = [];\n        $logged_user_data = [];\n\n\n        $selected_country_from_session = session_get('shipping_country');\n        $checkout_session = session_get('checkout');\n        $checkout_session2 = session_get('checkout_v2');\n\n        if (!$checkout_session) {\n            $checkout_session = [];\n        }\n        if (!$checkout_session2) {\n            $checkout_session2 = [];\n        }\n        $checkout_session = array_merge($checkout_session,$checkout_session2);\n        $user_fields_from_profile = ['email', 'last_name', 'first_name', 'phone', 'username', 'middle_name'];\n        $shipping_fields_keys = ['address', 'city', 'state', 'zip', 'other_info', 'country', 'shipping_gw', 'payment_gw'];\n\n        $all_field_keys = array_merge($user_fields_from_profile, $shipping_fields_keys);\n\n\n        if (is_logged()) {\n            $shipping_address_from_profile = app()->user_manager->get_shipping_address();\n        }\n        if ($checkout_session) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($checkout_session) and !isset($ready[$field_key])) {\n                    foreach ($checkout_session as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n                    }\n                }\n            }\n            if (!isset($ready['country']) and $selected_country_from_session) {\n                $ready['country'] = $selected_country_from_session;\n\n            }\n        }\n\n        if ($shipping_address_from_profile) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($shipping_address_from_profile) and !isset($ready[$field_key])) {\n                    foreach ($shipping_address_from_profile as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n\n                    }\n                }\n            }\n        }\n\n\n        if ($shipping_address_from_profile) {\n            $logged_user_data = get_user();\n            if ($logged_user_data) {\n                foreach ($all_field_keys as $field_key) {\n                    if (!empty($logged_user_data) and !isset($ready[$field_key])) {\n                        foreach ($logged_user_data as $k => $v) {\n                            if ($field_key == $k and $v) {\n                                $ready[$k] = $v;\n                            }\n\n                        }\n                    }\n                }\n            }\n\n        }\n        return $ready;\n    }\n\n    public function payment_options($option_key = false)\n    {\n        $option_key_q = '';\n        if (is_string($option_key)) {\n            $option_key_q = \"&limit=1&option_key={$option_key}\";\n        }\n        $providers = $this->app->option_manager->get_all('group=payments' . $option_key_q);\n      //  $providers = $this->app->option_repository->getByParams('group=payments' . $option_key_q);\n\n        $payment_modules = get_modules('type=payment_gateway');\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        $enabled_providers = array();\n        if (!empty($payment_modules) and !empty($providers)) {\n            foreach ($payment_modules as $payment_module) {\n                foreach ($providers as $value) {\n                    if ($value['option_value'] == 1) {\n                        if (substr($value['option_key'], 0, $l) == $str) {\n                            $title = substr($value['option_key'], $l);\n                            $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                            $value['gw_file'] = $title;\n\n                            if (isset($payment_module['module']) and $value['gw_file'] == $payment_module['module']) {\n                                $payment_module['gw_file'] = $title;\n                                $enabled_providers[] = $payment_module;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!empty($enabled_providers)) {\n            return $enabled_providers;\n        }\n\n        // the rest is for comaptibily and will be removed in the near future\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        if (is_array($providers)) {\n            $valid = array();\n            foreach ($providers as $value) {\n                if ($value['option_value'] == 1) {\n                    if (substr($value['option_key'], 0, $l) == $str) {\n                        $title = substr($value['option_key'], $l);\n                        $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                        $value['gw_file'] = $title;\n                        $mod_infp = $this->app->module_manager->get('ui=any&one=1&module=' . $title);\n\n                        if (!empty($mod_infp)) {\n                            $value = $mod_infp;\n                            $title = sanitize_path($title);\n\n                            $value['gw_file'] = $title;\n                            $valid[] = $value;\n                        }\n                    }\n                }\n            }\n\n            return $valid;\n        }\n    }\n\n    public function after_checkout($orderId)\n    {\n        if ($orderId == false or trim($orderId) == '') {\n            return array('error' => _e('Invalid order ID'));\n        }\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return array('error' => _e('Order not found'));\n        }\n        // $this->confirm_email_send($orderId);\n    }\n\n\n    public function mark_order_as_paid($orderId)\n    {\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return;\n        }\n\n        $update_order_event_data = $order->toArray();\n\n        if (!isset($update_order_event_data['is_paid']) or (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 0)) {\n            event($event = new OrderWasPaid($order, $update_order_event_data));\n            $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n            $this->app->shop_manager->update_quantities($orderId);\n            $order->is_paid = 1;\n            $order->save();\n        }\n\n\n    }\n\n\n    public function confirm_email_send($order_id, $to = false, $no_cache = true, $skip_enabled_check = false)\n    {\n        $ord_data = $this->app->shop_manager->get_order_by_id($order_id);\n\n        if (is_array($ord_data)) {\n\n            if ($skip_enabled_check == false) {\n                $order_email_enabled = $this->app->option_manager->get('order_email_enabled', 'orders');\n            } else {\n                $order_email_enabled = $skip_enabled_check;\n            }\n\n            $send_to_client = true;\n            $send_to_admins = true;\n            $send_to_client_option = $this->app->option_manager->get('send_email_on_new_order', 'orders');\n            if (!empty($send_to_client_option)) {\n                if ($send_to_client_option == 'admins') {\n                    $send_to_admins = true;\n                    $send_to_client = false;\n                }\n                if ($send_to_client_option == 'client') {\n                    $send_to_admins = false;\n                    $send_to_client = true;\n                }\n            }\n\n            if ($order_email_enabled) {\n\n                //  $order_email_subject = $this->app->option_manager->get('order_email_subject', 'orders');\n                // $order_email_content = $this->app->option_manager->get('order_email_content', 'orders');\n\n                $mail_template = false;\n                $mail_template_binds = $this->app->event_manager->trigger('mw.cart.confirm_email_send', $order_id);\n                if (is_array($mail_template_binds)) {\n                    foreach ($mail_template_binds as $bind) {\n                        if (is_array($bind) && isset($bind['mail_template'])) {\n                            $mail_template = $bind['mail_template'];\n                        }\n                    }\n                }\n\n                if (!$mail_template) {\n                    return;\n                }\n\n                $order_email_cc_string = $mail_template['copy_to'];\n                $order_email_subject = $mail_template['subject'];\n                $order_email_content = $mail_template['message'];\n\n                $order_email_cc = array();\n                if (!empty($order_email_cc_string) && strpos($order_email_cc_string, ',')) {\n                    $order_email_cc = explode(',', $order_email_cc_string);\n                } else {\n                    $order_email_cc[] = $order_email_cc_string;\n                }\n\n                if (empty($order_email_cc)) {\n                    $admins = get_users('is_admin=1');\n                    foreach ($admins as $admin) {\n                        if (isset($admin['email']) && !empty($admin['email']) && filter_var($admin['email'], FILTER_VALIDATE_EMAIL)) {\n                            $order_email_cc[] = $admin['email'];\n                        }\n                    }\n                }\n\n                $order_email_send_when = $this->app->option_manager->get('order_email_send_when', 'orders');\n                if ($order_email_send_when == 'order_paid' and !$skip_enabled_check) {\n                    if (isset($ord_data['is_paid']) and $ord_data['is_paid'] == false) {\n                        return;\n                    }\n                }\n\n                if ($order_email_subject == false or trim($order_email_subject) == '') {\n                    $order_email_subject = 'Thank you for your order!';\n                }\n                if ($to == false) {\n                    $to = $ord_data['email'];\n                }\n                if ($order_email_content != false and trim($order_email_subject) != '') {\n                    $cart_items = array();\n                    if (!empty($ord_data)) {\n                        $cart_items = $this->app->shop_manager->get_cart('order_id=' . $ord_data['id'] . '&no_session_id=' . $this->app->user_manager->session_id());\n\n                        $cart_items_info = array();\n                        $order_items_html = '';\n                        if (!empty($cart_items)) {\n                            foreach ($cart_items as $cart_item) {\n                                $arr = array();\n                                if (isset($cart_item['item_image']) and $cart_item['item_image']) {\n\n                                    $arr['item_image'] = $cart_item['item_image'];\n                                    $arr['item_image'] = '<img src=\"' . $arr['item_image'] . '\" width=\"100\" />';\n                                }\n                                if (isset($cart_item['link'])) {\n                                    $arr['link'] = $cart_item['link'];\n                                }\n                                if (isset($cart_item['title'])) {\n                                    $arr['title'] = $cart_item['title'];\n                                }\n                                if (isset($cart_item['custom_fields'])) {\n                                    $arr['custom_fields'] = $cart_item['custom_fields'];\n                                }\n                                $cart_items_info[] = $arr;\n                            }\n                            $order_items_html = $this->app->format->array_to_table($cart_items_info);\n\n                        }\n                        $order_email_content = str_replace('{{cart_items}}', $order_items_html, $order_email_content);\n                        $order_email_content = str_replace('{{date}}', date('F jS, Y', strtotime($ord_data['created_at'])), $order_email_content);\n                        foreach ($ord_data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                if (strtolower($key) == 'amount') {\n                                    $value = number_format($value, 2);\n                                    $order_email_content = str_ireplace('{{' . $key . '}}', $value, $order_email_content);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (get_option('bank_transfer_send_email_instructions', 'payments') == 'y') {\n                        $order_email_content .= _e(\"Follow payment instructions\", true);\n                        $order_email_content .= '<br />' . get_option('bank_transfer_instructions', 'payments');\n                    }\n\n                    $loader = new ArrayLoader([\n                        'checkout_mail.html' => $order_email_content,\n                    ]);\n                    $twig = new Environment($loader);\n                    $order_email_content = $twig->render(\n                        'checkout_mail.html', [\n                            'cart' => $cart_items,\n                            'order' => $ord_data,\n                            'order_id' => $ord_data['id'],\n                            'transaction_id' => $ord_data['transaction_id'],\n                            'currency' => $ord_data['currency'],\n                            'order_status' => $ord_data['order_status'],\n                            'first_name' => $ord_data['first_name'],\n                            'last_name' => $ord_data['last_name'],\n                            'email' => $ord_data['email'],\n                            'phone' => $ord_data['phone'],\n                            'address' => $ord_data['address'],\n                            'zip' => $ord_data['zip'],\n                            'state' => $ord_data['state'],\n                            'city' => $ord_data['city'],\n                            'country' => $ord_data['country']\n                        ]\n                    );\n\n                    $sender = new MailSender();\n\n                    // Send only to client\n                    if ($send_to_client && !$send_to_admins && filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                        $sender->send($to, $order_email_subject, $order_email_content);\n                        // echo 'Send only to client.';\n                    }\n\n                    // Send only to admins\n                    if (!$send_to_client && $send_to_admins && is_array($order_email_cc)) {\n                        // echo 'Send only to admins.';\n                        foreach ($order_email_cc as $admin_email) {\n                            $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                        }\n                    }\n\n                    // Send to admins and client\n                    if ($send_to_client && $send_to_admins) {\n                        if (filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                            $sender->send($to, $order_email_subject, $order_email_content);\n                            // echo 'Send to client.';\n                        }\n                        if (is_array($order_email_cc)) {\n                            // echo 'Send to admins.';\n                            foreach ($order_email_cc as $admin_email) {\n                                $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    public function checkout_ipn($data)\n    {\n        if (isset($data['payment_verify_token'])) {\n            $payment_verify_token = ($data['payment_verify_token']);\n        }\n        if (!isset($data['payment_gw'])) {\n            return array('error' => 'You must provide a payment gateway parameter!');\n        }\n\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n\n        $should_mark_as_paid = false;\n\n        $client_ip = user_ip();\n\n        $hostname = $this->get_domain_from_str($client_ip);\n\n\n        $payment_verify_token = $this->app->database_manager->escape_string($payment_verify_token);\n        $table = 'cart_orders';\n\n        $query = array();\n        $query['payment_verify_token'] = $payment_verify_token;\n        if (isset($data['order_id'])) {\n            $query['id'] = intval($data['order_id']);\n        } else {\n            $query['transaction_id'] = '[null]';\n        }\n        $query['limit'] = 1;\n        $query['table'] = $table;\n        $query['no_cache'] = true;\n\n        $ord_data = $this->app->database_manager->get($query);\n        if (!isset($ord_data[0]) or !is_array($ord_data[0])) {\n            return array('error' => 'Order is completed or expired.');\n        } else {\n            $ord_data = $ord_data[0];\n            $ord = $ord_data['id'];\n        }\n\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n        $gw_process = modules_path() . $data['payment_gw'] . '_checkout_ipn.php';\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'checkout_ipn.php', false);\n        }\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'notify.php', false);\n        }\n\n\n        $update_order = array();\n        if (is_file($gw_process)) {\n            include $gw_process;\n\n            // $this->_verify_request_params($update_order);\n\n        } else {\n            return array('error' => 'The payment gateway is not found!');\n        }\n        $update_order_event_data = [];\n\n\n        if (is_array($update_order)) {\n            $update_order_event_data = array_merge($ord_data, $update_order);\n        }\n\n\n        if (!empty($update_order_event_data) and isset($update_order_event_data['order_completed']) and $update_order_event_data['order_completed'] == 1) {\n            $this->after_checkout($ord);\n\n            if (!isset($ord_data['is_paid']) or (isset($ord_data['is_paid']) and intval($ord_data['is_paid']) == 0)) {\n                if (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 1) {\n                    $should_mark_as_paid = true;\n                }\n            }\n\n            if ($should_mark_as_paid) {\n                $this->app->checkout_manager->mark_order_as_paid($ord);\n            }\n\n\n            //            $update_order_event_data['id'] = $ord;\n//            $update_order_event_data['payment_gw'] = $data['payment_gw'];\n//            $ord = $this->app->database_manager->save($table_orders, $update_order_event_data);\n//\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid']) {\n//                $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n//            }\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid'] == 1) {\n//                $this->app->shop_manager->update_quantities($ord);\n//\n//\n//            }\n//            if ($ord > 0) {\n//                $this->app->cache_manager->delete('cart');\n//                $this->app->cache_manager->delete('cart_orders');\n//                //return true;\n//            }\n//\n//            $this->confirm_email_send($ord);\n\n        }\n\n        if (isset($data['return_to'])) {\n            $return_to = urldecode($data['return_to']);\n\n            $append = '?';\n            if (strstr($return_to, '?')) {\n                $append = '&';\n            }\n            $return_to = $return_to . $append . 'mw_payment_success=1';\n\n            return $this->app->url_manager->redirect($return_to);\n        }\n\n        return;\n    }\n\n    private function get_domain_from_str($address)\n    {\n        $address = gethostbyaddr($address);\n        $parsed_url = parse_url($address);\n        if (!isset($parsed_url['host'])) {\n            if (isset($parsed_url['path'])) {\n                $parsed_url['host'] = $parsed_url['path'];\n            }\n        }\n        $check = $this->esip($parsed_url['host']);\n        $host = $parsed_url['host'];\n        if ($check == false) {\n            if ($host != '') {\n                $host = $this->domain_name($host);\n            } else {\n                $host = $this->domain_name($address);\n            }\n        }\n\n        return $host;\n    }\n\n    private function esip($ip_addr)\n    {\n        if (preg_match(\"/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/\", $ip_addr)) {\n            $parts = explode('.', $ip_addr);\n            foreach ($parts as $ip_parts) {\n                if (intval($ip_parts) > 255 || intval($ip_parts) < 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private function domain_name($domainb)\n    {\n        $bits = explode('/', $domainb);\n        if ($bits[0] == 'http:' || $bits[0] == 'https:') {\n            $domainb = $bits[2];\n        } else {\n            $domainb = $bits[0];\n        }\n        unset($bits);\n        $bits = explode('.', $domainb);\n        $idz = count($bits);\n        $idz -= 3;\n        if (strlen($bits[($idz + 2)]) == 2) {\n            $url = $bits[$idz] . '.' . $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        } elseif (strlen($bits[($idz + 2)]) == 0) {\n            $url = $bits[($idz)] . '.' . $bits[($idz + 1)];\n        } else {\n            $url = $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        }\n\n        return $url;\n    }\n\n    private function _verify_request_params($data)\n    {\n\n        $error = true;\n\n        if (!isset($data['payment_verify_token'])) {\n            $error = true;\n        }\n        if (isset($data['order_id'])) {\n            $data['id'] = $data['order_id'];\n        }\n\n        if (!isset($data['payment_amount'])) {\n            $error = true;\n        }\n\n\n        if (!isset($data['payment_currency'])) {\n            $error = true;\n        }\n        if (!isset($data['id'])) {\n            $error = true;\n        }\n\n\n\n        $vkey = false;\n\n        if (isset($_REQUEST['_vkey_url'])) {\n            $vkey = $_REQUEST['_vkey_url'];\n        }\n\n\n//        $url = url_current();\n//        $param = '_vkey_url';\n//        $pieces = parse_url($url);\n//        $query = [];\n//        if ($pieces['query']) {\n//            parse_str($pieces['query'], $query);\n//            $data[$param] = $query[$param];\n//            unset($query[$param]);\n//            $pieces['query'] = http_build_query($query);\n//        }\n//        if (!isset($data['_vkey_url'])) {\n//            $error = true;\n//        } else {\n//            $vkey = $data['_vkey_url'];\n//        }\n\n\n        if (!$vkey) {\n            $error = true;\n        }\n        $order_data = false;\n        if(!$error and isset($data['id'])){\n        $order_data = get_order_by_id($data['id']);\n        }\n\n        if ($order_data and $vkey) {\n\n            $vkey_data = array();\n            //  $vkey_data['payment_amount'] = $order_data['payment_amount'];\n            // $vkey_data['payment_currency'] = $order_data['payment_currency'];\n            $vkey_data['payment_verify_token'] = $order_data['payment_verify_token'];\n            //  $vkey_data['id'] = $order_data['id'];\n//dd($order_data);\n            $enc_key_hash = md5(json_encode($vkey_data));\n            //   $enc_key_hash = md5(\\Config::get('app.key').json_encode($vkey_data));\n\n            // dd(2222,$vkey,$enc_key_hash,$data,$order_data);\n\n            // $vkey = urldecode($vkey);\n\n            $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Config::get('app.key') . $order_data['payment_verify_token']), \\Config::get('app.cipher'));\n\n            $decrypt_data = $encrypter->decrypt($vkey);\n\n            //    dd($enc_key_hash,$decrypt_data);\n\n            //  $enc_key_hash = $encrypter->encrypt(json_encode($vkey_data));\n\n            //dd($vkey, $enc_key_hash,$order_data,$vkey_data);\n            if ($enc_key_hash === $decrypt_data) {\n                $error = false;\n\n            }\n\n            // $url_verify = $this->_build_url($pieces);\n            // $decrypt_data = @json_decode($encrypter->decrypt($vkey), true);\n\n//            if (!$decrypt_data) {\n//                $error = true;\n//            } else {\n//\n//                $decrypt_url = $decrypt_data['url'];\n//                $decrypt_payment_amount = $decrypt_data['payment_amount'];\n//                $decrypt_payment_currency = $decrypt_data['payment_currency'];\n//\n//                $url_verify = urldecode($url_verify);\n//                $decrypt_url = urldecode($decrypt_url);\n//\n//                if (md5($url_verify) !== md5($decrypt_url)) {\n//                    $error = true;\n//                }\n//\n//                if (md5(floatval($decrypt_payment_amount)) !== md5(floatval($data['payment_amount']))) {\n//                    $error = true;\n//                }\n//                if (md5(strtoupper($decrypt_payment_currency)) !== md5(strtoupper($data['payment_currency']))) {\n//                    $error = true;\n//                }\n//            }\n        }\n\n\n        if ($error) {\n\n            abort(403, 'Unauthorized action.');\n        }\n\n    }\n\n    public function getShippingModules()\n    {\n        return $this->app->shipping_manager->getShippingModules();\n\n    }\n\n    public function getShippingCost($data = [])\n    {\n\n        if (!is_array($data)) {\n            $data = [];\n        }\n        $shipping_cost = 0;\n\n        if ($this->app->user_manager->session_get('shipping_cost')) {\n            $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n        }\n\n\n        $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n        if (!isset($data['shipping_gw']) and $shipping_gw_from_session) {\n            $data['shipping_gw'] = $shipping_gw_from_session;\n        } else {\n            $data['shipping_gw'] = 'default';\n\n        }\n        if (isset($data['shipping_gw']) and $data['shipping_gw']) {\n            // $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            try {\n                $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            } catch (\\InvalidArgumentException $e) {\n                $shipping_cost = 0;\n                unset($data['shipping_gw']);\n            }\n        }\n        return $shipping_cost;\n\n    }\n\n    private function _build_url(array $elements)\n    {\n        $e = $elements;\n        return\n            (isset($e['host']) ? (\n                (isset($e['scheme']) ? \"$e[scheme]://\" : '//') .\n                (isset($e['user']) ? $e['user'] . (isset($e['pass']) ? \":$e[pass]\" : '') . '@' : '') .\n                $e['host'] .\n                (isset($e['port']) ? \":$e[port]\" : '')\n            ) : '') .\n            (isset($e['path']) ? $e['path'] : '/') .\n            (isset($e['query']) ? '?' . (is_array($e['query']) ? http_build_query($e['query'], '', '&') : $e['query']) : '') .\n            (isset($e['fragment']) ? \"#$e[fragment]\" : '');\n    }\n\n\n}\n", "<?php\nnamespace MicroweberPackages\\Shop\\tests;\n\nuse MicroweberPackages\\Core\\tests\\TestCase;\nuse MicroweberPackages\\Checkout\\CheckoutManager;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\n\n/**\n * Run test\n * @author Bobi Microweber\n * @command php phpunit.phar --filter CheckoutTest\n */\n\nclass CheckoutTest extends TestCase\n{\n    public static $content_id = 1;\n\n    private function _addProductToCart($title)\n    {\n        app()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 4444);\n\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => $productPrice),\n\n            ),\n            'is_active' => 1,);\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n        $this->assertEquals($saved_id, ($get['id']));\n        self::$content_id = $saved_id;\n\n        $add_to_cart = array(\n            'content_id' => self::$content_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n        $this->assertEquals(isset($cart_add['success']), true);\n        $this->assertEquals(isset($cart_add['product']), true);\n        $this->assertEquals($cart_add['product']['price'], $productPrice);\n    }\n\n    public function testCheckout()\n    {\n        empty_cart();\n\n     \\Config::set('mail.transport', 'array');\n\n        $this->_addProductToCart('Product 1');\n        $this->_addProductToCart('Product 2');\n        $this->_addProductToCart('Product 3');\n        $this->_addProductToCart('Product 4');\n        $data = [];\n        $data['option_value'] = 'y';\n        $data['option_key'] = 'order_email_enabled';\n        $data['option_group'] = 'orders';\n        $save = save_option($data);\n\n        $data = [];\n        $data['option_value'] = 'order_received';\n        $data['option_key'] = 'order_email_send_when';\n        $data['option_group'] = 'orders';\n        $save = save_option($data);\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['first_name'] = 'Client';\n        $checkoutDetails['last_name'] = 'Microweber';\n        $checkoutDetails['phone'] = '08812345678';\n        $checkoutDetails['address'] = 'Business Park, Mladost 4';\n        $checkoutDetails['city'] = 'Sofia';\n        $checkoutDetails['state'] = 'Sofia City';\n        $checkoutDetails['country'] = 'Bulgaria';\n        $checkoutDetails['zip'] = '1000';\n\n        $checkout = new CheckoutManager();\n        $checkoutStatus = $checkout->checkout($checkoutDetails);\n\n        $this->assertArrayHasKey('success', $checkoutStatus);\n        $this->assertArrayHasKey('id', $checkoutStatus);\n        $this->assertArrayHasKey('order_completed', $checkoutStatus);\n        $this->assertArrayHasKey('amount', $checkoutStatus);\n        $this->assertArrayHasKey('currency', $checkoutStatus);\n        $this->assertArrayHasKey('order_status', $checkoutStatus);\n\n        $checkEmailContent = '';\n        $emails = app()->make('mailer')->getSymfonyTransport()->messages();\n        foreach ($emails as $email) {\n\n            $emailAsArray = $this->getEmailDataAsArrayFromObject($email);\n            $body = $emailAsArray['body'];\n\n            if (strpos($body, 'Order') !== false) {\n                $checkEmailContent = $body;\n            }\n        }\n        $findFirstName = false;\n        if (strpos($checkEmailContent, $checkoutDetails['first_name']) !== false) {\n            $findFirstName = true;\n        }\n\n        $findLastName = false;\n        if (strpos($checkEmailContent, $checkoutDetails['last_name']) !== false) {\n            $findLastName = true;\n        }\n\n        $findEmail = false;\n        if (strpos($checkEmailContent, $checkoutDetails['email']) !== false) {\n            $findEmail = true;\n        }\n\n        $findPhone = false;\n        if (strpos($checkEmailContent, $checkoutDetails['phone']) !== false) {\n            $findPhone = true;\n        }\n\n        $findCity = false;\n        if (strpos($checkEmailContent, $checkoutDetails['city']) !== false) {\n            $findCity = true;\n        }\n\n        $findZip = false;\n        if (strpos($checkEmailContent, $checkoutDetails['zip']) !== false) {\n            $findZip = true;\n        }\n\n        $findState = false;\n        if (strpos($checkEmailContent, $checkoutDetails['state']) !== false) {\n            $findState = true;\n        }\n\n        $findCountry = false;\n        if (strpos($checkEmailContent, $checkoutDetails['country']) !== false) {\n            $findCountry = true;\n        }\n\n        $findAddress = false;\n        if (strpos($checkEmailContent, $checkoutDetails['address']) !== false) {\n            $findAddress = true;\n        }\n\n        $this->assertEquals(true, $findFirstName);\n        $this->assertEquals(true, $findLastName);\n        $this->assertEquals(true, $findEmail);\n        $this->assertEquals(true, $findPhone);\n        $this->assertEquals(true, $findCity);\n        $this->assertEquals(true, $findZip);\n        $this->assertEquals(true, $findState);\n        $this->assertEquals(true, $findCountry);\n        $this->assertEquals(true, $findAddress);\n\n    }\n\n    public function testCheckoutQtyUpdate()\n    {\n        mw()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 9999);\n        $title = 'test QTY prod ' . $productPrice;\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => '9.99'),\n\n            ),\n            'data_fields_qty' => 1,\n            'is_active' => 1,);\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n\n        $add_to_cart = array(\n            'content_id' => $saved_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['first_name'] = 'Client';\n        $checkoutDetails['last_name'] = 'Microweber';\n        $checkoutDetails['phone'] = '08812345678';\n        $checkoutDetails['address'] = 'Business Park, Mladost 4';\n        $checkoutDetails['city'] = 'Sofia';\n        $checkoutDetails['state'] = 'Sofia City';\n        $checkoutDetails['country'] = 'Bulgaria';\n        $checkoutDetails['zip'] = '1000';\n        $checkoutDetails['is_paid'] = 1;\n        $checkoutDetails['order_completed'] = 1;\n\n\n        $checkoutStatus = app()->order_manager->place_order($checkoutDetails);\n\n        $content_data_after_order = content_data($saved_id);\n        $this->assertEquals(0, $content_data_after_order['qty']);\n\n\n\n        // test the productOrders relationship\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n\n        $productQuery =$productQuery->whereHas('orders');\n        $products = $productQuery->get();\n\n        $found = false;\n        foreach ($products as $product) {\n            if ($product->id == $saved_id) {\n                $found = true;\n            }\n        }\n        $this->assertTrue($found);\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n\n        $productQuery =$productQuery->whereDoesntHave('orders');\n        $products = $productQuery->get();\n        $found = false;\n        foreach ($products as $product) {\n            if ($product->id == $saved_id) {\n                $found = true;\n            }\n        }\n        $this->assertFalse($found);\n\n    }\n\n\n}\n"], "fixing_code": ["<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Cart;\n\nuse MicroweberPackages\\Cart\\Models\\Cart;\nuse MicroweberPackages\\Database\\Crud;\n\nclass CartManager extends Crud\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $coupon_data = false;\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n\n    }\n\n    /**\n     * This will sum all cart items amount\n     * @param bool $return_amount\n     * @return array|false|float|int|mixed\n     */\n    public function sum($return_amount = true)\n    {\n        if ($return_amount) {\n            return $this->app->cart_repository->getCartAmount();\n        } else {\n            return $this->app->cart_repository->getCartItemsCount();\n        }\n\n    }\n\n    public function totals($return = 'all')\n    {\n        $all_totals = array('subtotal', 'shipping', 'tax', 'discount', 'total');\n\n\n        $tax = $shipping_cost = $discount_sum = 0;\n\n        $shipping_cost = $this->app->checkout_manager->getShippingCost();\n        $shipping_modules = $this->app->checkout_manager->getShippingModules();\n\n        // Coupon code discount\n        $discount_value = $this->get_discount_value();\n        $discount_type = $this->get_discount_type();\n\n        $sum = $subtotal = $this->sum();\n\n        if ($discount_type == 'percentage' or $discount_type == 'percentage') {\n            // Discount with percentage\n            $discount_sum = ($sum * ($discount_value / 100));\n            $sum = $sum - $discount_sum;\n        } else if ($discount_type == 'fixed_amount') {\n            // Discount with amount\n            $discount_sum = $discount_value;\n            $sum = $sum - $discount_value;\n        }\n\n\n        $total = $sum + $shipping_cost;\n\n        if (get_option('enable_taxes', 'shop') == 1) {\n            if ($total > 0) {\n                $tax = $this->app->tax_manager->calculate($sum);\n                $total = $total + $tax;\n            }\n        }\n\n\n        $totals = array();\n        foreach ($all_totals as $total_key) {\n            switch ($total_key) {\n                case 'subtotal':\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Subtotal\", true),\n                        'value' => $subtotal,\n                        'amount' => currency_format($subtotal)\n                    );\n                    break;\n                case 'tax':\n                    if ($tax) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Tax\", true),\n                            'value' => $tax,\n                            'amount' => currency_format($tax)\n                        );\n                    }\n                    break;\n\n\n                case 'discount':\n                    if ($discount_sum and $discount_sum > 0) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Discount\", true),\n                            'value' => $discount_sum,\n                            'amount' => currency_format($discount_sum)\n                        );\n                    }\n                    break;\n\n                case 'shipping':\n\n                    if ($shipping_modules) {\n                        if ($shipping_cost and $shipping_cost > 0) {\n                            $totals[$total_key] = array(\n                                'label' => _e(\"Shipping\", true),\n                                'value' => $shipping_cost,\n                                'amount' => currency_format($shipping_cost)\n                            );\n                        }\n                    }\n\n\n                    break;\n\n                case 'total':\n\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Total\", true),\n                        'value' => $total,\n                        'amount' => currency_format($total)\n                    );\n\n\n                    break;\n            }\n\n\n        }\n\n        if (isset($return) and $return != 'all') {\n            if (isset($totals[$return])) {\n                return $totals[$return];\n            }\n        } else {\n            return $totals;\n        }\n\n    }\n\n    public function total()\n    {\n        $total = $this->totals('total');\n\n        if (isset($total['value'])) {\n            return $total['value'];\n        }\n    }\n\n\n    public function get_tax()\n    {\n        $sum = $this->sum();\n        $tax = $this->app->tax_manager->calculate($sum);\n\n        return $tax;\n    }\n\n    public function get_discount()\n    {\n        return $this->get_discount_value();\n    }\n\n    public function get_discount_type()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n        if (empty($data)) {\n            return false;\n        }\n        if (isset($data['discount_type'])) {\n            return $data['discount_type'];\n        }\n        return false;\n    }\n\n    public function set_coupon_data($data)\n    {\n        $this->coupon_data = $data;\n    }\n\n    public function get_discount_value()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n\n\n        if (empty($data)) {\n            return false;\n        }\n\n        if (!isset($data['discount_value'])) {\n            return false;\n        }\n\n        if (!isset($data['total_amount'])) {\n            return false;\n        }\n\n        $apply_code = false;\n        if ($this->sum() >= $data['total_amount']) {\n            $apply_code = true;\n        }\n\n        if ($apply_code) {\n            return floatval($data['discount_value']);\n        }\n\n        return false;\n    }\n\n    public function get_discount_text()\n    {\n        if ($this->get_discount_type() == \"percentage\" or $this->get_discount_type() == \"percentage\") {\n            return $this->get_discount_value() . \"%\";\n        } else {\n            return currency_format($this->get_discount_value());\n        }\n    }\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n\n        $table = 'cart';\n        $params['table'] = $table;\n        $skip_sid = false;\n        if (!defined('MW_API_CALL')) {\n            if (isset($params['order_id'])) {\n                $skip_sid = 1;\n            }\n        }\n        if ($skip_sid == false) {\n            if (!defined('MW_ORDERS_SKIP_SID')) {\n                if ($this->app->user_manager->is_admin() == false) {\n                    $params['session_id'] = mw()->user_manager->session_id();\n                } else {\n                    if (isset($params['session_id']) and $this->app->user_manager->is_admin() == true) {\n                    } else {\n                        $params['session_id'] = mw()->user_manager->session_id();\n                    }\n                }\n                if (isset($params['no_session_id']) and $this->app->user_manager->is_admin() == true) {\n                    unset($params['session_id']);\n                }\n            }\n        }\n        if (!isset($params['rel']) and isset($params['for'])) {\n            $params['rel_type'] = $params['for'];\n        } elseif (isset($params['rel']) and !isset($params['rel_type'])) {\n            $params['rel_type'] = $params['rel'];\n        }\n        if (!isset($params['rel_id']) and isset($params['for_id'])) {\n            $params['rel_id'] = $params['for_id'];\n        }\n\n        $params['limit'] = 10000;\n        if (!isset($params['order_completed'])) {\n            if (!isset($params['order_id'])) {\n                $params['order_completed'] = 0;\n            }\n        } elseif (isset($params['order_completed']) and $params['order_completed'] === 'any') {\n            unset($params['order_completed']);\n        }\n        // $params['no_cache'] = 1;\n        $get = $this->app->database_manager->get($params);\n        if (isset($params['count']) and $params['count'] != false) {\n            return $get;\n        }\n        $return = array();\n        if (is_array($get)) {\n            foreach ($get as $k => $item) {\n                if (is_array($item)) {\n\n\n                    if (isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                        $item['content_data'] = $this->app->content_manager->data($item['rel_id']);\n                        $item['url'] = $this->app->content_manager->link($item['rel_id']);\n                        $item['picture'] = $this->app->media_manager->get_picture($item['rel_id']);\n\n                        if (isset($params['for_checkout']) and $params['for_checkout']) {\n                            // check if content is unpublished or deleted\n                            $checkContent = get_content_by_id($item['rel_id']);\n                            $removeFromCart = false;\n                            if ($checkContent == false) {\n                                $removeFromCart = true;\n                            }\n\n                            if ($checkContent and isset($checkContent['is_deleted']) and $checkContent['is_deleted'] == 1) {\n                                $removeFromCart = true;\n                            }\n                            if ($checkContent and isset($checkContent['is_active']) and $checkContent['is_active'] == 0) {\n                                $removeFromCart = true;\n                            }\n\n                            if ($removeFromCart) {\n                                $this->remove_item($item['id']);\n                                unset($get[$k]);\n                                continue;\n                            }\n                        }\n\n\n                    }\n                    if (isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                        $item = $this->app->format->render_item_custom_fields_data($item);\n                    }\n                    if (isset($item['title'])) {\n                        $item['title'] = html_entity_decode($item['title']);\n                        $item['title'] = strip_tags($item['title']);\n                        $item['title'] = $this->app->format->clean_html($item['title']);\n                        $item['title'] = htmlspecialchars_decode($item['title']);\n                    }\n                    if (!isset($item['url'])) {\n                        $item['url'] = '';\n                    }\n                    if (!isset($item['picture'])) {\n                        $item['picture'] = '';\n                    }\n                }\n\n                $return[$k] = $item;\n            }\n        } else {\n            $return = $get;\n        }\n\n        return $return;\n    }\n\n    public function get_by_order_id($order_id = false)\n    {\n        $order_id = intval($order_id);\n        if ($order_id == false) {\n            return;\n        }\n        $params = array();\n        $table = 'cart';\n        $params['table'] = $table;\n        $params['order_id'] = $order_id;\n        $get = $this->app->database_manager->get($params);\n\n        if (!empty($get)) {\n            foreach ($get as $k => $item) {\n\n                if (is_array($item) and isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                    $item = $this->app->format->render_item_custom_fields_data($item);\n                }\n\n                if (!isset($item['item_image']) and is_array($item) and isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                    $item['item_image'] = get_picture($item['rel_id']);\n                }\n\n                if (!isset($item['item_image'])) {\n                    $item['item_image'] = false;\n                }\n\n                $get[$k] = $item;\n            }\n        }\n\n        return $get;\n    }\n\n    public function remove_item($data)\n    {\n        if (!is_array($data)) {\n            $id = intval($data);\n            $data = array('id' => $id);\n        }\n\n        if (!isset($data['id']) or $data['id'] == 0) {\n            return false;\n        }\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n        // if ($this->app->user_manager->is_admin() == false) {\n        $cart['session_id'] = mw()->user_manager->session_id();\n        // }\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n\n        $checkCart = $this->get($cart);\n\n        if ($checkCart != false and is_array($checkCart)) {\n\n            $findCart = Cart::where('id', $cart['id'])->first();\n            if ($findCart) {\n                $findCart->delete();\n            }\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            return array('success' => _e('Item was removed from cart', true), 'product' => $checkCart, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => _e('Item not removed from cart', true));\n        }\n    }\n\n    public function update_item_qty($data)\n    {\n        if (!isset($data['id'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        if (!isset($data['qty'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n\n        $data['qty'] = intval($data['qty']);\n        if ($data['qty'] < 1) {\n            return array('error' => _e('Invalid product quantity', true));\n        }\n\n        $data_fields = false;\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n\n        $cart['session_id'] = mw()->user_manager->session_id();\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n        $check_cart = $this->get($cart);\n        if (isset($check_cart['rel_type']) and isset($check_cart['rel_id']) and $check_cart['rel_type'] == 'content') {\n            $data_fields = $this->app->content_manager->data($check_cart['rel_id'], 1);\n            if (isset($check_cart['qty']) and isset($data_fields['qty']) and $data_fields['qty'] != 'nolimit') {\n                $old_qty = intval($data_fields['qty']);\n                if (intval($data['qty']) > $old_qty) {\n                    return array('error' => true, 'message' => _e('Quantity not changed, because there are not enough items in stock.', true), 'cart_item_quantity_available' => $check_cart['qty']);\n                }\n            }\n        }\n\n        if ($check_cart != false and is_array($check_cart)) {\n            $cart['qty'] = intval($data['qty']);\n            if ($cart['qty'] < 0) {\n                $cart['qty'] = 0;\n            }\n\n\n            if (isset($data_fields['max_qty_per_order']) and intval($data_fields['max_qty_per_order']) != 0) {\n\n                if ($cart['qty'] > intval($data_fields['max_qty_per_order'])) {\n                    $cart['qty'] = intval($data_fields['max_qty_per_order']);\n                }\n            }\n\n\n            $cart_return = $check_cart;\n\n\n            $table = 'cart';\n            $cart_data_to_save = array();\n            $cart_data_to_save['qty'] = $cart['qty'];\n            $cart_data_to_save['id'] = $cart['id'];\n            $cart_saved_id = $this->app->database_manager->save($table, $cart_data_to_save);\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => _e('Item quantity changed', true), 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n\n        }\n    }\n\n\n    public function empty_cart()\n    {\n        $sid = mw()->user_manager->session_id();\n        $cart_table = 'cart';\n\n        Cart::where('order_completed', 0)->where('session_id', $sid)->delete();\n        $this->no_cache = true;\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n\n        $cart_sum = $this->sum(true);\n        $cart_qty = $this->sum(false);\n        return array('success' => 'Cart is emptied', 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n    }\n\n    public function delete_cart($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n        if (isset($params['session_id'])) {\n            $id = $params['session_id'];\n            Cart::where('session_id', $id)->delete();\n        }\n        if (isset($params['order_id'])) {\n            $id = $params['order_id'];\n            Cart::where('order_id', $id)->delete();\n        }\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n    }\n\n    public function update_cart($data)\n    {\n        if (!isset($data['for']) and isset($data['rel_type'])) {\n            $data['for'] = $data['rel_type'];\n        }\n        if (!isset($data['for_id']) and isset($data['rel_id'])) {\n            $data['for_id'] = $data['rel_id'];\n        }\n        if (!isset($data['for']) and !isset($data['rel_type'])) {\n            $data['for'] = 'content';\n        }\n\n        if (isset($data['content_id'])) {\n            $data['for'] = 'content';\n            $for_id = $data['for_id'] = $data['content_id'];\n        }\n        $override = $this->app->event_manager->trigger('mw.shop.update_cart', $data);\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (is_array($resp) and !empty($resp)) {\n                    $data = array_merge($data, $resp);\n                }\n            }\n        }\n\n        $update_qty = 0;\n        $update_qty_new = 0;\n\n        if (isset($data['qty'])) {\n            $update_qty_new = $update_qty = intval($data['qty']);\n            unset($data['qty']);\n        }\n        if (!isset($data['for']) or !isset($data['for_id'])) {\n            if (!isset($data['id'])) {\n\n            } else {\n                $cart = array();\n                $cart['id'] = intval($data['id']);\n                $cart['limit'] = 1;\n                $data_existing = $this->get($cart);\n                if (is_array($data_existing) and is_array($data_existing[0])) {\n                    $data = array_merge($data, $data_existing[0]);\n                }\n            }\n        }\n\n\n        if (!isset($data['for']) and !isset($data['for_id'])) {\n            return array('error' => 'Invalid for and for_id params');\n        }\n\n        $data['for'] = $this->app->database_manager->assoc_table_name($data['for']);\n        $for = $data['for'];\n        $for_id = intval($data['for_id']);\n        if ($for_id == 0) {\n            return array('error' => 'Invalid data for_id');\n        }\n        $cont_data = false;\n\n        if ($update_qty > 0) {\n            $data['qty'] = $update_qty;\n        }\n\n        if ($data['for'] == 'content') {\n\n            $cont = $this->app->content_manager->get_by_id($for_id);\n\n            if (isset($cont['is_active'])) {\n                if ($cont['is_active'] != 1) {\n                    $cont = false;\n                }\n            }\n\n            if (isset($cont['is_deleted'])) {\n                if ($cont['is_deleted'] > 0) {\n                    $cont = false;\n                }\n            }\n\n            $cont_data = $this->app->content_manager->data($for_id);\n            if ($cont == false) {\n                return array('error' => 'Invalid product?');\n            } else {\n                if (is_array($cont) and isset($cont['title'])) {\n                    $data['title'] = $cont['title'];\n                }\n            }\n        }\n\n        if (isset($data['title']) and is_string($data['title'])) {\n            $data['title'] = (strip_tags($data['title']));\n        }\n\n        $found_price = false;\n        $add = array();\n\n        if (isset($data['custom_fields_data']) and is_array($data['custom_fields_data'])) {\n            $add = $data['custom_fields_data'];\n        }\n\n        $prices = array();\n\n        $skip_keys = array();\n\n        $content_custom_fields = $this->app->fields_manager->get([\n            'rel_type' => $for,\n            'rel_id' => $for_id,\n            'return_full' => true,\n        ]);\n\n        $product_prices = array();\n        if ($for == 'content') {\n            $prices_data = app()->shop_manager->get_product_prices($for_id, true);\n            if ($prices_data) {\n                foreach ($prices_data as $price_data) {\n                    if (isset($price_data['name'])) {\n                        $product_prices[$price_data['name']] = $price_data['value'];\n                    }\n                }\n            }\n        }\n\n        if ($content_custom_fields == false) {\n            $content_custom_fields = $data;\n\n            if (isset($data['price'])) {\n\n                if ($product_prices) {\n                    foreach ($product_prices as $price) {\n                        if ($price['value'] == $data['price']) {\n                            $found_price = $data['price'];\n                        }\n                    }\n                }\n            }\n        } elseif (is_array($content_custom_fields)) {\n            foreach ($content_custom_fields as $cf) {\n                if (isset($cf['type']) and $cf['type'] == 'price') {\n                    if (isset($product_prices[$cf['name']])) {\n                        $prices[$cf['name']] = $product_prices[$cf['name']];\n                    } else {\n                        $prices[$cf['name']] = $cf['value'];\n                    }\n                }\n            }\n        }\n\n        foreach ($data as $k => $item) {\n            if ($k != 'for' and $k != 'for_id' and $k != 'title') {\n                $found = false;\n                foreach ($content_custom_fields as $cf) {\n                    if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                        if (isset($data[$cf['name_key']])) {\n                            $cf['name'] = $data[$cf['name_key']];\n                        }\n                    } elseif (isset($cf['type']) and $cf['type'] == 'price' and isset($cf['name']) and isset($cf['value'])) {\n                        if ($cf['value'] != '') {\n                            if (isset($product_prices[$cf['name']])) {\n                                $prices[$cf['name']] = $product_prices[$cf['name']];\n                            } else {\n                                $prices[$cf['name']] = $cf['value'];\n                            }\n                        }\n                    }\n                }\n\n                if ($content_custom_fields) {\n                    foreach ($content_custom_fields as $cf) {\n                        if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                            if ($k == $cf['name']) {\n                                $found = true;\n                            } else if ($k == $cf['name_key']) {\n                                $found = true;\n                            }\n                        }\n                    }\n                }\n\n                if ($found == false) {\n                    $skip_keys[] = $k;\n                }\n\n                if (is_array($prices)) {\n                    foreach ($prices as $price_key => $price) {\n                        if (isset($data['price'])) {\n                            if ($price == $data['price']) {\n                                $found = true;\n                                $found_price = $price;\n                            }\n                        } elseif (isset($item) and $price == $item) {\n                            $found = true;\n                            if ($found_price == false) {\n                                $found_price = $item;\n                            }\n                        }\n                    }\n                    if ($found_price == false) {\n                        $found_price = array_pop($prices);\n                    } else {\n                        if (count($prices) > 1) {\n                            foreach ($prices as $pk => $pv) {\n                                if ($pv == $found_price) {\n                                    $add[$pk] = $this->app->shop_manager->currency_format($pv);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (isset($item)) {\n                    if ($found == true) {\n                        if ($k != 'price' and !in_array($k, $skip_keys)) {\n                            $add[$k] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($found_price == false and is_array($prices)) {\n            $found_price = array_pop($prices);\n        }\n        if ($found_price == false) {\n            $found_price = 0;\n        }\n\n\n        if (is_array($prices)) {\n            ksort($add);\n            asort($add);\n            $add = mw()->format->clean_xss($add);\n            $table = 'cart';\n\n\n            $cart = array();\n            $cart['rel_type'] = trim($data['for']);\n            $cart['rel_id'] = intval($data['for_id']);\n            $cart['session_id'] = mw()->user_manager->session_id();\n            $cart['no_cache'] = 1;\n            $cart['disable_triggers'] = 1;\n            $cart['order_completed'] = 0;\n            $cart['custom_fields_data'] = $this->app->format->array_to_base64($add);\n\n            $cart['custom_fields_json'] = json_encode($add);\n            $cart['allow_html'] = 1;\n            $cart['price'] = doubleval($found_price);\n            $cart['limit'] = 1;\n            $cart['title'] = mw()->format->clean_html($data['title']);\n\n            $cart_return['custom_fields_data'] = $add;\n            $cart_return['price'] = $cart['price'];\n\n            $findCart = Cart::where('custom_fields_data', $cart['custom_fields_data'])\n                ->where('session_id', $cart['session_id'])\n                ->where('order_completed', $cart['order_completed'])\n                ->where('rel_id', $cart['rel_id'])\n                ->where('rel_type', $cart['rel_type'])\n                ->first();\n            $check_cart = false;\n            if ($findCart !== null) {\n                $check_cart = $findCart->toArray();\n            }\n\n\n            if ($found_price and $check_cart != false and is_array($check_cart) and isset($check_cart['id'])) {\n                if ($check_cart and isset($check_cart['price']) and (doubleval($check_cart['price']) == doubleval($found_price))) {\n                    $cart['id'] = $check_cart['id'];\n                    if ($update_qty > 0) {\n                        $cart['qty'] = $check_cart['qty'] + $update_qty;\n                    } elseif ($update_qty_new > 0) {\n                        $cart['qty'] = $update_qty_new;\n                    } else {\n                        $cart['qty'] = $check_cart['qty'] + 1;\n                    }\n                }\n            } else {\n                if ($update_qty > 0) {\n                    $cart['qty'] = $update_qty;\n                } else {\n                    $cart['qty'] = 1;\n                }\n            }\n\n            if (isset($cont_data['qty']) and trim($cont_data['qty']) != 'nolimit') {\n                if (intval($cont_data['qty']) < intval($cart['qty'])) {\n                    $cart['qty'] = $cont_data['qty'];\n                }\n            }\n\n\n            if (isset($cont_data['max_qty_per_order']) and intval($cont_data['max_qty_per_order']) != 0) {\n                if ($cart['qty'] > intval($cont_data['max_qty_per_order'])) {\n                    $cart['qty'] = intval($cont_data['max_qty_per_order']);\n                }\n            }\n\n\n            if (isset($data['other_info']) and is_string($data['other_info'])) {\n                $cart['other_info'] = strip_tags($data['other_info']);\n            }\n\n            if (isset($data['description']) and is_string($data['description'])) {\n                $cart_return['description'] = $cart['description'] = $this->app->format->clean_html($data['description']);\n            }\n            if (isset($data['image']) and is_string($data['image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['image']);\n            }\n            if (isset($data['item_image']) and is_string($data['item_image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['item_image']);\n            }\n            if (isset($data['link']) and is_string($data['link'])) {\n                $cart_return['link'] = $cart['link'] = $this->app->format->clean_html($data['link']);\n            }\n\n            if (isset($data['currency']) and is_string($data['currency'])) {\n                $cart_return['currency'] = $cart['currency'] = $this->app->format->clean_html($data['link']);\n            }\n\n            // Update cart in database\n            if ($findCart == null) {\n                $findCart = new Cart();\n                $findCart->rel_id = $cart['rel_id'];\n                $findCart->rel_type = $cart['rel_type'];\n                $findCart->custom_fields_data = $cart['custom_fields_data'];\n                $findCart->custom_fields_json = $cart['custom_fields_json'];\n            }\n\n            $findCart->qty = $cart['qty'];\n            $findCart->title = $cart['title'];\n            $findCart->price = $cart['price'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->order_completed = $cart['order_completed'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->save();\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            if (isset($cart['rel_type']) and isset($cart['rel_id']) and $cart['rel_type'] == 'content') {\n                $cart_return['image'] = $this->app->media_manager->get_picture($cart['rel_id']);\n                $cart_return['product_link'] = $this->app->content_manager->link($cart['rel_id']);\n            }\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => 'Item added to cart', 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => 'Invalid cart items');\n        }\n    }\n\n    public function recover_cart($sid = false, $ord_id = false)\n    {\n        if ($sid == false) {\n            return;\n        }\n        $cur_sid = mw()->user_manager->session_id();\n        if ($cur_sid == false) {\n            return;\n        } else {\n\n\n            if ($cur_sid != false) {\n                $c_id = $sid;\n                $table = 'cart';\n                $params = array();\n                //   $params['order_completed'] = 0;\n                $params['session_id'] = $c_id;\n                $params['table'] = $table;\n                if ($ord_id != false) {\n                    unset($params['order_completed']);\n                    $params['order_id'] = intval($ord_id);\n                }\n\n                $will_add = true;\n                $res = $this->app->database_manager->get($params);\n\n                if (!empty($res)) {\n                    foreach ($res as $item) {\n                        if (isset($item['id'])) {\n                            $data = $item;\n                            unset($data['id']);\n                            if (isset($item['order_id'])) {\n                                unset($data['order_id']);\n                            }\n                            if (isset($item['created_by'])) {\n                                unset($data['created_by']);\n                            }\n                            if (isset($item['updated_at'])) {\n                                unset($data['updated_at']);\n                            }\n                            if (isset($item['rel_type']) and isset($item['rel_id'])) {\n                                $is_ex_params = array();\n                                $is_ex_params['order_completed'] = 0;\n                                $is_ex_params['session_id'] = $cur_sid;\n                                $is_ex_params['table'] = $table;\n                                $is_ex_params['rel_type'] = $item['rel_type'];\n                                $is_ex_params['rel_id'] = $item['rel_id'];\n                                $is_ex_params['count'] = 1;\n\n                                $is_ex = $this->app->database_manager->get($is_ex_params);\n\n                                if ($is_ex != false) {\n                                    $will_add = false;\n                                }\n                            }\n                            $data['order_completed'] = 0;\n                            $data['session_id'] = $cur_sid;\n\n                            if (isset($item['order_completed']) and intval($item['order_completed']) == 1) {\n                                if ($sid == $cur_sid) {\n                                    if (isset($item['is_paid']) and intval($item['is_paid']) == 0) {\n                                        $data['id'] = $item['id'];\n                                    }\n                                }\n                            }\n                            if ($will_add == true) {\n                                $s = $this->app->database_manager->save($table, $data);\n                            }\n                        }\n                    }\n                }\n                if ($will_add == true) {\n                    $this->app->cache_manager->delete('cart');\n\n                    $this->app->cache_manager->delete('cart_orders');\n                }\n            }\n        }\n    }\n\n    public function table_name()\n    {\n        return 'cart';\n    }\n\n\n    public function is_product_in_stock($content_id)\n    {\n\n        $item = content_data($content_id);\n        $isInStock = true;\n        if ($item) {\n            if (isset($item['qty']) and $item['qty'] != 'nolimit') {\n                $quantity = intval($item['qty']);\n                if ($quantity < 1) {\n                    $isInStock = false;\n                }\n            }\n\n        }\n\n        return $isInStock;\n    }\n\n    public function couponCodeGetDataFromSession()\n    {\n        $coupon_code = $this->app->user_manager->session_get('coupon_code');\n        if ($coupon_code and !$this->couponCodeCheckIfValid($coupon_code)) {\n            //check if coupon is valid\n            if (function_exists('coupons_delete_session')) {\n                coupons_delete_session();\n            }\n\n            $this->coupon_data = false;\n        } else {\n            if ($coupon_code and function_exists('coupon_get_by_code')) {\n                $this->coupon_data = coupon_get_by_code($coupon_code);\n            } else {\n                $this->coupon_data = false;\n            }\n        }\n        return $this->coupon_data;\n    }\n\n    public function couponCodeCheckIfValid($coupon_code)\n    {\n        if (function_exists('coupon_apply')) {\n            //check if coupon is valid\n            $coupon_valid = coupon_apply([\n                'coupon_code' => $coupon_code,\n                'coupon_check_if_valid' => true\n            ]);\n            if (!$coupon_valid) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n\n    }\n\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Checkout;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Encryption\\MissingAppKeyException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Notification;\n\nuse MicroweberPackages\\Checkout\\Http\\Controllers\\CheckoutController;\n\n//use MicroweberPackages\\Invoice\\Address;\n//use MicroweberPackages\\Invoice\\Invoice;\nuse MicroweberPackages\\Order\\Events\\OrderWasPaid;\nuse MicroweberPackages\\Order\\Models\\Order;\nuse MicroweberPackages\\Order\\Notifications\\NewOrder;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\nuse Twig\\Environment;\nuse Twig\\Loader\\ArrayLoader;\n\nclass CheckoutManager\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $tables = array();\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $tables['cart'] = 'cart';\n\n        $tables['cart_orders'] = 'cart_orders';\n\n        $tables['cart_shipping'] = 'cart_shipping';\n\n        /*$tables['cart_taxes'] = 'cart_taxes';*/\n\n        $this->tables = $tables;\n    }\n\n    public function checkout($data)\n    {\n        $exec_return = false;\n        $sid = $this->app->user_manager->session_id();\n        $sess_order_id = $this->app->user_manager->session_get('order_id');\n        $cart = array();\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n        $cart['session_id'] = $sid;\n        $cart['order_completed'] = 0;\n        $cart['for_checkout'] = true;\n        $cart['limit'] = 1;\n        $mw_process_payment = true;\n        $mw_process_payment_success = false;\n        $mw_process_payment_failed = false;\n        if (isset($_REQUEST['mw_payment_success']) or isset($_REQUEST['mw_payment_failure'])) {\n\n            $update_order = $update_order_orig = $this->app->order_manager->get_by_id($sess_order_id);\n            if (isset($update_order['payment_gw']) and isset($update_order['id'])) {\n                $gw_return = normalize_path(modules_path() . $update_order['payment_gw'] . DS . 'return.php', false);\n                if (is_file($gw_return)) {\n                    include $gw_return;\n\n                    if ($update_order != $update_order_orig) {\n\n                        if (isset($update_order['is_paid'])) {\n                            if (intval($update_order['is_paid']) == 1) {\n                                $_REQUEST['mw_payment_success'] = true;\n                                $_REQUEST['mw_payment_failure'] = null;\n                            } else {\n                                $_REQUEST['mw_payment_success'] = null;\n                                $_REQUEST['mw_payment_failure'] = true;\n                                //    mw()->cart_manager->recover_cart(session()->getId(), $update_order['id']);\n\n                            }\n                        }\n\n                        $should_mark_as_paid = false;\n\n\n                        $this->_verify_request_params($update_order);\n\n\n                        if (!isset($update_order_orig['is_paid']) or (isset($update_order_orig['is_paid']) and intval($update_order_orig['is_paid']) == 0)) {\n                            if (isset($update_order['is_paid']) and intval($update_order['is_paid']) == 1) {\n                                $should_mark_as_paid = true;\n                                unset($update_order['is_paid']);\n                            }\n                        }\n\n                        $this->app->order_manager->save($update_order);\n\n\n                        if ($should_mark_as_paid) {\n                            $this->app->checkout_manager->mark_order_as_paid($update_order['id']);\n                        }\n\n\n                        if (isset($update_order['id'])) {\n                            $this->after_checkout($update_order['id']);\n                        }\n\n\n                    }\n                }\n            }\n\n            if (isset($_REQUEST['mw_payment_success'])) {\n                $mw_process_payment = false;\n                $mw_process_payment_success = true;\n                $exec_return = true;\n            } elseif (isset($_REQUEST['mw_payment_failure'])) {\n\n                if (isset($_REQUEST['recart']) and $_REQUEST['recart'] != false and isset($_REQUEST['order_id'])) {\n\n                    mw()->cart_manager->recover_cart($_REQUEST['recart'], $_REQUEST['order_id']);\n                }\n\n                $mw_process_payment_failed = true;\n                $exec_return = true;\n            }\n        }\n\n        $cart_table_real = $this->app->database_manager->real_table_name($cart_table);\n        $order_table_real = $this->app->database_manager->real_table_name($table_orders);\n\n        if ($exec_return == true) {\n\n            $return_url = $this->app->user_manager->session_get('checkout_return_to_url');\n            if (isset($_REQUEST['return_to']) and $_REQUEST['return_to'] != false) {\n                $return_url = urldecode($_REQUEST['return_to']);\n            }\n            if ($return_url) {\n                $return_to = $return_url;\n                $append = '?';\n                if (strstr($return_to, '?')) {\n                    $append = '&';\n                }\n                if ($mw_process_payment_success == true) {\n                    $return_to = $return_to . $append . 'mw_payment_success=1';\n                } elseif ($mw_process_payment_failed == true) {\n                    $return_to = $return_to . $append . 'mw_payment_failure=1';\n                }\n\n                return $this->app->url_manager->redirect($return_to);\n            } else {\n\n                if(isset($update_order) and isset($update_order['id'])){\n                    if ($mw_process_payment_success == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment is complete',true));\n                    } elseif ($mw_process_payment_failed == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment was not complete',true));\n\n                    } else {\n                        return redirect('/');\n                    }\n                }\n\n\n            }\n        }\n\n        $additional_fields = false;\n        if (isset($data['for']) and isset($data['for_id'])) {\n            $additional_fields = $this->app->fields_manager->get([\n                'rel_type' => $data['for'],\n                'rel_id' => $data['for_id'],\n                'return_full' => true,\n            ]);\n        }\n\n        $seach_address_keys = array('country', 'city', 'address', 'state', 'zip');\n        $addr_found_from_search_in_post = false;\n\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if (is_array($v)) {\n                    foreach ($seach_address_keys as $item) {\n                        $case1 = ucfirst($item);\n                        if (!isset($data[$item]) and (isset($v[$item]) or isset($v[$case1]))) {\n                            $data[$item] = $v[$item];\n                            if ($addr_found_from_search_in_post == false) {\n                                unset($data[$k]);\n                            }\n                            $addr_found_from_search_in_post = 1;\n                        }\n                    }\n                }\n            }\n        }\n        $save_custom_fields_for_order = array();\n        if (is_array($additional_fields) and !empty($additional_fields)) {\n            foreach ($additional_fields as $cf) {\n                if (isset($data) and is_array($data)) {\n                    foreach ($data as $k => $item) {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if ($key1 == $key2) {\n                            $save_custom_fields_for_order[$key1] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n   /*\n    *  OLD VALIDATION ON MODAL\n    *      $validator = app()->make(CheckoutController::class);\n\n        if (!empty($data)) {\n            $request = new Request();\n            $request->merge($data);\n            $is_valid = $validator->validate($request);\n        } else {\n            $is_valid['errors'] = 'Data not entered.';\n        }\n\n        if (is_object($is_valid)) {\n            return $is_valid;\n        }\n\n        if (isset($is_valid['errors'])) {\n            return $is_valid;\n        }*/\n\n        $checkout_errors = array();\n        $check_cart = $this->app->shop_manager->get_cart($cart);\n\n        if (!is_array($check_cart)) {\n            $checkout_errors['cart_empty'] = 'Your cart is empty';\n        } else {\n\n            if (!is_admin()) {\n                $shop_require_terms = $this->app->option_manager->get('shop_require_terms', 'website');\n                if ($shop_require_terms) {\n                    $user_id_or_email = $this->app->user_manager->id();\n                    if (!$user_id_or_email) {\n                        if (isset($data['email'])) {\n                            $user_id_or_email = $data['email'];\n                        }\n                    }\n\n                    if (!$user_id_or_email) {\n                        $checkout_errors['cart_needs_email'] = _e('You must provide email address', true);\n                    } else {\n                        $terms_and_conditions_name = 'terms_shop';\n\n                        $check_term = $this->app->user_manager->terms_check($terms_and_conditions_name, $user_id_or_email);\n                        if (!$check_term) {\n                            if (isset($data['terms']) and $data['terms']) {\n                                $this->app->user_manager->terms_accept($terms_and_conditions_name, $user_id_or_email);\n                            } else {\n                                return array(\n                                    'error' => _e('You must agree to terms and conditions', true),\n                                    'form_data_required' => 'terms',\n                                    'form_data_module' => 'users/terms'\n                                );\n\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            if (!isset($data['payment_gw']) and $mw_process_payment == true) {\n                $data['payment_gw'] = 'none';\n            } else {\n                if ($mw_process_payment == true) {\n                  //  $gw_check = $this->payment_options('payment_gw_' . $data['payment_gw']);\n                    $gw_check = app()->payment_manager->hasPaymentProvider($data['payment_gw']);\n                    if ($gw_check) {\n                        $gateway = app()->payment_manager->getPaymentProviderModule($data['payment_gw']);\n                    } else {\n                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n                    }\n\n//                    if (isset($gw_check[0]) && is_array($gw_check[0])) {\n//                        $gateway = $gw_check[0];\n//                    } else {\n//                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n//                    }\n                }\n            }\n\n            $shipping_country = false;\n            $shipping_cost_max = false;\n            $shipping_cost = false;\n            $shipping_cost_above = false;\n\n            $discount_value = false;\n            $discount_type = false;\n\n            $coupon_id = false;\n            $coupon_code = false;\n            $shipping_cost = 0;\n\n            /*  if (($this->app->user_manager->session_get('shipping_country'))) {\n                  $shipping_country = $this->app->user_manager->session_get('shipping_country');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_max'))) {\n                  $shipping_cost_max = $this->app->user_manager->session_get('shipping_cost_max');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_above'))) {\n                  $shipping_cost_above = $this->app->user_manager->session_get('shipping_cost_above');\n              }*/\n\n\n//\n//            if ($this->app->user_manager->session_get('shipping_cost')) {\n//                $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n//            }\n//\n////\n////\n////\n////            $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n////            if(!isset($data['shipping_gw']) and $shipping_gw_from_session){\n////                $data['shipping_gw'] = $shipping_gw_from_session;\n////            }\n////            if(isset($data['shipping_gw']) and $data['shipping_gw']){\n////                try {\n////                    $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n////\n////                } catch (\\InvalidArgumentException $e) {\n////                    $shipping_cost = 0;\n////                    unset($data['shipping_gw']);\n////                }\n////             }\n\n            $shipping_cost = $this->getShippingCost($data);\n\n            if (($this->app->user_manager->session_get('discount_value'))) {\n                $discount_value = $this->app->user_manager->session_get('discount_value');\n            }\n            if (($this->app->user_manager->session_get('discount_type'))) {\n                $discount_type = $this->app->user_manager->session_get('discount_type');\n            }\n            if (($this->app->user_manager->session_get('coupon_id'))) {\n                $coupon_id = $this->app->user_manager->session_get('coupon_id');\n            }\n            if (($this->app->user_manager->session_get('coupon_code'))) {\n                $coupon_code = $this->app->user_manager->session_get('coupon_code');\n            }\n\n\n            //post any of those on the form\n            $flds_from_data = array('first_name', 'last_name', 'email', 'country', 'city', 'state', 'zip', 'address', 'address2', 'payment_email', 'payment_name', 'payment_country', 'payment_address', 'payment_city', 'payment_state', 'payment_zip', 'phone', 'promo_code', 'payment_gw', 'other_info');\n\n            if (!isset($data['email']) or $data['email'] == '') {\n                $data['email'] = user_name(user_id(), 'email');\n            }\n\n            if (get_option('shop_require_email', 'website') == 1) {\n                if (!isset($data['email']) or $data['email'] == '') {\n                    $checkout_errors['email'] = 'Email is required';\n                }\n            }\n\n            if (!isset($data['first_name']) or $data['first_name'] == '') {\n                $data['first_name'] = user_name(user_id(), 'first');\n            }\n\n            if (get_option('shop_require_first_name', 'website') == 1) {\n                if (!isset($data['first_name']) or $data['first_name'] == '') {\n                    $checkout_errors['first_name'] = 'First name is required';\n                }\n            }\n\n            if (get_option('shop_require_last_name', 'website') == 1) {\n                if (!isset($data['last_name']) or $data['last_name'] == '') {\n                    // $checkout_errors['last_name'] = 'Last name is required';\n                    $data['last_name'] = user_name(user_id(), 'last');\n                }\n            }\n\n            if (isset($data['payment_gw']) and $data['payment_gw'] != '') {\n                $data['payment_gw'] = sanitize_path($data['payment_gw']);\n            }\n\n\n            $custom_order_id = $this->app->option_manager->get('custom_order_id', 'shop');\n            $posted_fields = array();\n            $place_order = array();\n            $place_order['id'] = false;\n\n            $return_url_after = '';\n            $return_to_ref = false;\n            $set_return_url_for_order_finish = false;\n\n\n            $place_order['session_id'] = $sid;\n            $place_order['order_completed'] = 0;\n            $items_count = 0;\n\n            foreach ($flds_from_data as $value) {\n                if (isset($data[$value]) and ($data[$value]) != false) {\n                    $place_order[$value] = $data[$value];\n                    $posted_fields[$value] = $data[$value];\n                }\n            }\n\n\n            // Discount details save\n            if ($coupon_code) {\n                $place_order['promo_code'] = $coupon_code;\n                $place_order['coupon_id'] = $coupon_id;\n                $place_order['discount_type'] = $discount_type;\n                $place_order['discount_value'] = $discount_value;\n\n\n                if (!$this->app->cart_manager->couponCodeCheckIfValid($coupon_code)) {\n                    //check if coupon is valid\n                    if(function_exists('coupons_delete_session')){\n                        coupons_delete_session();\n                    }\n\n                    $place_order['promo_code'] = '';\n                    $place_order['coupon_id'] ='';\n                    $place_order['discount_type'] = '';\n                    $place_order['discount_value'] ='';\n                }\n            }\n\n\n\n\n\n            $amount = $this->app->shop_manager->cart_total();\n            $tax = $this->app->cart_manager->get_tax();\n\n\n            if (!empty($checkout_errors)) {\n                return array('error' => $checkout_errors);\n            }\n\n\n            if ($amount and is_numeric($amount) and is_float($amount) ) {\n                $amount = floatval($amount);\n                $amount = number_format($amount, 2, \".\", \"\");;\n            }\n\n            $place_order['amount'] = $amount;\n            $place_order['allow_html'] = true;\n            $place_order['currency'] = $this->app->option_manager->get('currency', 'payments');\n            if (!$place_order['currency']) {\n                $place_order['currency'] = 'USD';\n            }\n\n            if (isset($data['shipping_gw'])) {\n                $place_order['shipping_service'] = $data['shipping_gw'];\n            }\n            $place_order['shipping'] = $shipping_cost;\n            if ($tax != 0) {\n                $place_order['taxes_amount'] = $tax;\n            }\n\n            $items_count = $this->app->shop_manager->cart_sum(false);\n            $place_order['items_count'] = $items_count;\n\n            $cart_checksum = md5($sid . serialize($check_cart) . uniqid(time()));\n\n            $place_order['payment_verify_token'] = $cart_checksum;\n\n            if (isset($save_custom_fields_for_order) and !empty($save_custom_fields_for_order)) {\n                $place_order['custom_fields_data'] = $this->app->format->array_to_base64($save_custom_fields_for_order);\n            }\n\n            if (!isset($place_order['shipping']) or $place_order['shipping'] == false) {\n                $place_order['shipping'] = 0;\n            }\n\n            $temp_order = $this->app->database_manager->save($table_orders, $place_order);\n            if ($temp_order != false) {\n                $place_order['id'] = $temp_order;\n            } else {\n                $place_order['id'] = 0;\n            }\n\n            if ($custom_order_id != false) {\n                foreach ($place_order as $key => $value) {\n                    $custom_order_id = str_ireplace('{' . $key . '}', $value, $custom_order_id);\n                }\n\n                $custom_order_id = str_ireplace('{YYYYMMDD}', date('Ymd'), $custom_order_id);\n                $custom_order_id = str_ireplace('{date}', date('Y-m-d'), $custom_order_id);\n            }\n\n            if ($custom_order_id != false) {\n                $place_order['item_name'] = 'Order id:' . ' ' . $custom_order_id;\n                $place_order['order_id'] = $custom_order_id;\n            } else {\n                $place_order['item_name'] = 'Order id:' . ' ' . $place_order['id'];\n            }\n\n\n\n\n            // convert currency to payment provider currency\n            $currencies_list_paypal = app()->shop_manager->currency_get_for_paypal();\n            $currencyCode = strtoupper($place_order['currency']);\n            $amount = $place_order['amount'];\n\n            if (!isset($place_order['payment_amount'])) {\n                $place_order['payment_amount'] = $amount;\n            }\n            $place_order['payment_shipping'] = $place_order['shipping'];\n\n\n            $payment_currency = get_option('payment_currency', 'payments');\n            $payment_currency_rate = get_option('payment_currency_rate', 'payments');\n\n            if (!isset($place_order['payment_currency'])) {\n                $place_order['payment_currency'] = $place_order['currency'];\n            }\n\n            if ($payment_currency and $payment_currency != $currencyCode) {\n\n                if (!in_array(strtoupper($place_order['currency']), $currencies_list_paypal)) {\n\n                    $currencyCode = $payment_currency;\n\n\n                    if ($payment_currency_rate != false) {\n                        $payment_currency_rate = str_replace(',', '.', $payment_currency_rate);\n                        $payment_currency_rate = floatval($payment_currency_rate);\n\n                    }\n                    if ($payment_currency_rate != 0.00) {\n                        $amount = str_replace(',', '', $amount);\n                        $amount = floatval($amount);\n                        $amount = $amount * $payment_currency_rate;\n                        $place_order['payment_amount'] = $amount;\n                    }\n\n\n                    if ($place_order['payment_shipping']) {\n                        $place_order['payment_shipping'] = $place_order['payment_shipping'] * $payment_currency_rate;\n\n                    }\n\n\n                }\n            }\n\n\n            $place_order['payment_currency'] = $currencyCode;\n\n\n            // end of convert for curency\n\n\n            if ($mw_process_payment == true) {\n                $shop_dir = module_dir('shop');\n                $shop_dir = $shop_dir . DS . 'payments' . DS . 'gateways' . DS;\n\n                if ($data['payment_gw'] != 'none') {\n                    $place_order['posted_fields']  = $posted_fields;\n\n                    $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Illuminate\\Support\\Facades\\Config::get('app.key') . $place_order['payment_verify_token']), \\Illuminate\\Support\\Facades\\Config::get('app.cipher'));\n\n                    $vkey_data = array();\n\n                    $vkey_data['payment_verify_token'] = $place_order['payment_verify_token'];\n\n                    $enc_key_hash = md5(json_encode($vkey_data));\n                    $enc_key_hash = $encrypter->encrypt($enc_key_hash);\n\n                    $mw_return_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_success=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_cancel_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_failure=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&_vkey_url=' . $enc_key_hash . '&recart=' . $sid . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_ipn_url = $this->app->url_manager->api_link('checkout_ipn') . '?payment_gw=' . $place_order['payment_gw'] . '&order_id=' . $place_order['id'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_payment_fields = array();\n                    $mw_payment_fields['enc_key_hash']  = $enc_key_hash;\n                    $mw_payment_fields['mw_return_url']  = $mw_return_url;\n                    $mw_payment_fields['mw_cancel_url']  = $mw_cancel_url;\n                    $mw_payment_fields['mw_ipn_url']  = $mw_ipn_url;\n\n                    $place_order['mw_payment_fields']  = $mw_payment_fields;\n                    $place_order['posted_data']  = $data;\n\n                    $paymentDriver = app()->payment_manager->driver($data['payment_gw']);\n                    $skipLegacy = false;\n                    if(method_exists($paymentDriver, 'process')){\n                        $skipLegacy = true;\n                        $place_order =  $paymentDriver->process($place_order);\n                    }\n\n\n\n                    if ($skipLegacy == false) {\n                        $place_order['payment_gw'] = $data['payment_gw'];\n                        $gw_process = modules_path() . $data['payment_gw'] . '_process.php';\n                        if (!is_file($gw_process)) {\n                            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'process.php', false);\n                        }\n\n\n                        if (is_file($gw_process)) {\n                            require_once $gw_process;\n                        } else {\n                            $checkout_errors['payment_gw'] = 'Payment gateway\\'s process file not found.';\n                        }\n                    }\n\n                    if (isset($place_order['posted_fields'])) {\n                        unset($place_order['posted_fields']);\n                    }\n                    if (isset($place_order['mw_payment_fields'])) {\n                        unset($place_order['mw_payment_fields']);\n                    } if (isset($place_order['posted_data'])) {\n                        unset($place_order['posted_data']);\n                    }\n\n                } else {\n                    $place_order['order_completed'] = 1;\n                    $place_order['is_paid'] = 0;\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n\n\n                $place_order['order_status'] = 'new';\n\n                if (!empty($checkout_errors)) {\n                    return array('error' => $checkout_errors);\n                }\n\n                if (isset($place_order['error'])) {\n                    return array('error' => $place_order['error']);\n                }\n\n\n                /*\n                     $invoicePrefix = 'INV';\n                     $nextInvoiceNumber = Invoice::getNextInvoiceNumber($invoicePrefix);\n                     $invoiceDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d'));\n                     $dueDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d', strtotime('+6 days', strtotime(date('Y-m-d')))));\n\n                     $invoiceTotal = ($place_order['amount'] * 100);\n\n                     $invoice = Invoice::create([\n                         'invoice_date' => $invoiceDate,\n                         'due_date' => $dueDate,\n                         'invoice_number' => $invoicePrefix . '-' . $nextInvoiceNumber,\n                         'reference_number' => '',\n                         'customer_id' => $findCustomer->id,\n                         'company_id' => 0,\n                         'invoice_template_id' => 1,\n                         'status' => Invoice::STATUS_DRAFT,\n                         'paid_status' => Invoice::STATUS_UNPAID,\n                         'sub_total' => $invoiceTotal,\n                         'discount' =>'',\n                         'discount_type' => $place_order['discount_type'],\n                         'discount_val' => ($place_order['discount_value'] * 100),\n                         'total' => $invoiceTotal,\n                         'due_amount' => $invoiceTotal,\n                         'tax_per_item' => '',\n                         'discount_per_item' => '',\n                         'tax' => '',\n                         'notes' => '',\n                         'unique_hash' => str_random(60)\n                     ]);\n\n                     foreach ($check_cart as $cartItem) {\n                         $invoice->items()->create([\n                             'name'=>$cartItem['title'],\n                             'description'=>$cartItem['description'],\n                             'price'=>($cartItem['price'] * 100),\n                             'quantity'=>$cartItem['qty'],\n                         ]);\n                     }*/\n\n                $ord = $this->app->shop_manager->place_order($place_order);\n                $place_order['id'] = $ord;\n\n                if (isset($place_order['is_paid']) and $place_order['is_paid']) {\n                    $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $place_order);\n                }\n\n\n            }\n\n            if (isset($place_order) and !empty($place_order)) {\n                if (!isset($place_order['success'])) {\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n                $return = $place_order;\n                if (isset($place_order['redirect'])) {\n                    $return['redirect'] = $place_order['redirect'];\n                }\n\n                return $return;\n            }\n        }\n\n        if (!empty($checkout_errors)) {\n            return array('error' => $checkout_errors);\n        }\n    }\n\n    public function getUserInfo()\n    {\n        return $this->checkout_get_user_info();\n    }\n\n\n    public function checkout_get_user_info()\n    {\n\n        $ready = [];\n        $logged_user_data = [];\n        $shipping_address_from_profile = [];\n        $logged_user_data = [];\n\n\n        $selected_country_from_session = session_get('shipping_country');\n        $checkout_session = session_get('checkout');\n        $checkout_session2 = session_get('checkout_v2');\n\n        if (!$checkout_session) {\n            $checkout_session = [];\n        }\n        if (!$checkout_session2) {\n            $checkout_session2 = [];\n        }\n        $checkout_session = array_merge($checkout_session,$checkout_session2);\n        $user_fields_from_profile = ['email', 'last_name', 'first_name', 'phone', 'username', 'middle_name'];\n        $shipping_fields_keys = ['address', 'city', 'state', 'zip', 'other_info', 'country', 'shipping_gw', 'payment_gw'];\n\n        $all_field_keys = array_merge($user_fields_from_profile, $shipping_fields_keys);\n\n\n        if (is_logged()) {\n            $shipping_address_from_profile = app()->user_manager->get_shipping_address();\n        }\n        if ($checkout_session) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($checkout_session) and !isset($ready[$field_key])) {\n                    foreach ($checkout_session as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n                    }\n                }\n            }\n            if (!isset($ready['country']) and $selected_country_from_session) {\n                $ready['country'] = $selected_country_from_session;\n\n            }\n        }\n\n        if ($shipping_address_from_profile) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($shipping_address_from_profile) and !isset($ready[$field_key])) {\n                    foreach ($shipping_address_from_profile as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n\n                    }\n                }\n            }\n        }\n\n\n        if ($shipping_address_from_profile) {\n            $logged_user_data = get_user();\n            if ($logged_user_data) {\n                foreach ($all_field_keys as $field_key) {\n                    if (!empty($logged_user_data) and !isset($ready[$field_key])) {\n                        foreach ($logged_user_data as $k => $v) {\n                            if ($field_key == $k and $v) {\n                                $ready[$k] = $v;\n                            }\n\n                        }\n                    }\n                }\n            }\n\n        }\n        return $ready;\n    }\n\n    public function payment_options($option_key = false)\n    {\n        $option_key_q = '';\n        if (is_string($option_key)) {\n            $option_key_q = \"&limit=1&option_key={$option_key}\";\n        }\n        $providers = $this->app->option_manager->get_all('group=payments' . $option_key_q);\n      //  $providers = $this->app->option_repository->getByParams('group=payments' . $option_key_q);\n\n        $payment_modules = get_modules('type=payment_gateway');\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        $enabled_providers = array();\n        if (!empty($payment_modules) and !empty($providers)) {\n            foreach ($payment_modules as $payment_module) {\n                foreach ($providers as $value) {\n                    if ($value['option_value'] == 1) {\n                        if (substr($value['option_key'], 0, $l) == $str) {\n                            $title = substr($value['option_key'], $l);\n                            $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                            $value['gw_file'] = $title;\n\n                            if (isset($payment_module['module']) and $value['gw_file'] == $payment_module['module']) {\n                                $payment_module['gw_file'] = $title;\n                                $enabled_providers[] = $payment_module;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!empty($enabled_providers)) {\n            return $enabled_providers;\n        }\n\n        // the rest is for comaptibily and will be removed in the near future\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        if (is_array($providers)) {\n            $valid = array();\n            foreach ($providers as $value) {\n                if ($value['option_value'] == 1) {\n                    if (substr($value['option_key'], 0, $l) == $str) {\n                        $title = substr($value['option_key'], $l);\n                        $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                        $value['gw_file'] = $title;\n                        $mod_infp = $this->app->module_manager->get('ui=any&one=1&module=' . $title);\n\n                        if (!empty($mod_infp)) {\n                            $value = $mod_infp;\n                            $title = sanitize_path($title);\n\n                            $value['gw_file'] = $title;\n                            $valid[] = $value;\n                        }\n                    }\n                }\n            }\n\n            return $valid;\n        }\n    }\n\n    public function after_checkout($orderId)\n    {\n        if ($orderId == false or trim($orderId) == '') {\n            return array('error' => _e('Invalid order ID'));\n        }\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return array('error' => _e('Order not found'));\n        }\n        // $this->confirm_email_send($orderId);\n    }\n\n\n    public function mark_order_as_paid($orderId)\n    {\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return;\n        }\n\n        $update_order_event_data = $order->toArray();\n\n        if (!isset($update_order_event_data['is_paid']) or (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 0)) {\n            event($event = new OrderWasPaid($order, $update_order_event_data));\n            $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n            $this->app->shop_manager->update_quantities($orderId);\n            $order->is_paid = 1;\n            $order->save();\n        }\n\n\n    }\n\n\n    public function confirm_email_send($order_id, $to = false, $no_cache = true, $skip_enabled_check = false)\n    {\n        $ord_data = $this->app->shop_manager->get_order_by_id($order_id);\n\n        if (is_array($ord_data)) {\n\n            if ($skip_enabled_check == false) {\n                $order_email_enabled = $this->app->option_manager->get('order_email_enabled', 'orders');\n            } else {\n                $order_email_enabled = $skip_enabled_check;\n            }\n\n            $send_to_client = true;\n            $send_to_admins = true;\n            $send_to_client_option = $this->app->option_manager->get('send_email_on_new_order', 'orders');\n            if (!empty($send_to_client_option)) {\n                if ($send_to_client_option == 'admins') {\n                    $send_to_admins = true;\n                    $send_to_client = false;\n                }\n                if ($send_to_client_option == 'client') {\n                    $send_to_admins = false;\n                    $send_to_client = true;\n                }\n            }\n\n            if ($order_email_enabled) {\n\n                //  $order_email_subject = $this->app->option_manager->get('order_email_subject', 'orders');\n                // $order_email_content = $this->app->option_manager->get('order_email_content', 'orders');\n\n                $mail_template = false;\n                $mail_template_binds = $this->app->event_manager->trigger('mw.cart.confirm_email_send', $order_id);\n                if (is_array($mail_template_binds)) {\n                    foreach ($mail_template_binds as $bind) {\n                        if (is_array($bind) && isset($bind['mail_template'])) {\n                            $mail_template = $bind['mail_template'];\n                        }\n                    }\n                }\n\n                if (!$mail_template) {\n                    return;\n                }\n\n                $order_email_cc_string = $mail_template['copy_to'];\n                $order_email_subject = $mail_template['subject'];\n                $order_email_content = $mail_template['message'];\n\n                $order_email_cc = array();\n                if (!empty($order_email_cc_string) && strpos($order_email_cc_string, ',')) {\n                    $order_email_cc = explode(',', $order_email_cc_string);\n                } else {\n                    $order_email_cc[] = $order_email_cc_string;\n                }\n\n                if (empty($order_email_cc)) {\n                    $admins = get_users('is_admin=1');\n                    foreach ($admins as $admin) {\n                        if (isset($admin['email']) && !empty($admin['email']) && filter_var($admin['email'], FILTER_VALIDATE_EMAIL)) {\n                            $order_email_cc[] = $admin['email'];\n                        }\n                    }\n                }\n\n                $order_email_send_when = $this->app->option_manager->get('order_email_send_when', 'orders');\n                if ($order_email_send_when == 'order_paid' and !$skip_enabled_check) {\n                    if (isset($ord_data['is_paid']) and $ord_data['is_paid'] == false) {\n                        return;\n                    }\n                }\n\n                if ($order_email_subject == false or trim($order_email_subject) == '') {\n                    $order_email_subject = 'Thank you for your order!';\n                }\n                if ($to == false) {\n                    $to = $ord_data['email'];\n                }\n                if ($order_email_content != false and trim($order_email_subject) != '') {\n                    $cart_items = array();\n                    if (!empty($ord_data)) {\n                        $cart_items = $this->app->shop_manager->get_cart('order_id=' . $ord_data['id'] . '&no_session_id=' . $this->app->user_manager->session_id());\n\n                        $cart_items_info = array();\n                        $order_items_html = '';\n                        if (!empty($cart_items)) {\n                            foreach ($cart_items as $cart_item) {\n                                $arr = array();\n                                if (isset($cart_item['item_image']) and $cart_item['item_image']) {\n\n                                    $arr['item_image'] = $cart_item['item_image'];\n                                    $arr['item_image'] = '<img src=\"' . $arr['item_image'] . '\" width=\"100\" />';\n                                }\n                                if (isset($cart_item['link'])) {\n                                    $arr['link'] = $cart_item['link'];\n                                }\n                                if (isset($cart_item['title'])) {\n                                    $arr['title'] = $cart_item['title'];\n                                }\n                                if (isset($cart_item['custom_fields'])) {\n                                    $arr['custom_fields'] = $cart_item['custom_fields'];\n                                }\n                                $cart_items_info[] = $arr;\n                            }\n                            $order_items_html = $this->app->format->array_to_table($cart_items_info);\n\n                        }\n                        $order_email_content = str_replace('{{cart_items}}', $order_items_html, $order_email_content);\n                        $order_email_content = str_replace('{{date}}', date('F jS, Y', strtotime($ord_data['created_at'])), $order_email_content);\n                        foreach ($ord_data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                if (strtolower($key) == 'amount') {\n                                    $value = number_format($value, 2);\n                                    $order_email_content = str_ireplace('{{' . $key . '}}', $value, $order_email_content);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (get_option('bank_transfer_send_email_instructions', 'payments') == 'y') {\n                        $order_email_content .= _e(\"Follow payment instructions\", true);\n                        $order_email_content .= '<br />' . get_option('bank_transfer_instructions', 'payments');\n                    }\n\n                    $loader = new ArrayLoader([\n                        'checkout_mail.html' => $order_email_content,\n                    ]);\n                    $twig = new Environment($loader);\n                    $order_email_content = $twig->render(\n                        'checkout_mail.html', [\n                            'cart' => $cart_items,\n                            'order' => $ord_data,\n                            'order_id' => $ord_data['id'],\n                            'transaction_id' => $ord_data['transaction_id'],\n                            'currency' => $ord_data['currency'],\n                            'order_status' => $ord_data['order_status'],\n                            'first_name' => $ord_data['first_name'],\n                            'last_name' => $ord_data['last_name'],\n                            'email' => $ord_data['email'],\n                            'phone' => $ord_data['phone'],\n                            'address' => $ord_data['address'],\n                            'zip' => $ord_data['zip'],\n                            'state' => $ord_data['state'],\n                            'city' => $ord_data['city'],\n                            'country' => $ord_data['country']\n                        ]\n                    );\n\n                    $sender = new MailSender();\n\n                    // Send only to client\n                    if ($send_to_client && !$send_to_admins && filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                        $sender->send($to, $order_email_subject, $order_email_content);\n                        // echo 'Send only to client.';\n                    }\n\n                    // Send only to admins\n                    if (!$send_to_client && $send_to_admins && is_array($order_email_cc)) {\n                        // echo 'Send only to admins.';\n                        foreach ($order_email_cc as $admin_email) {\n                            $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                        }\n                    }\n\n                    // Send to admins and client\n                    if ($send_to_client && $send_to_admins) {\n                        if (filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                            $sender->send($to, $order_email_subject, $order_email_content);\n                            // echo 'Send to client.';\n                        }\n                        if (is_array($order_email_cc)) {\n                            // echo 'Send to admins.';\n                            foreach ($order_email_cc as $admin_email) {\n                                $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    public function checkout_ipn($data)\n    {\n        if (isset($data['payment_verify_token'])) {\n            $payment_verify_token = ($data['payment_verify_token']);\n        }\n        if (!isset($data['payment_gw'])) {\n            return array('error' => 'You must provide a payment gateway parameter!');\n        }\n\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n\n        $should_mark_as_paid = false;\n\n        $client_ip = user_ip();\n\n        $hostname = $this->get_domain_from_str($client_ip);\n\n\n        $payment_verify_token = $this->app->database_manager->escape_string($payment_verify_token);\n        $table = 'cart_orders';\n\n        $query = array();\n        $query['payment_verify_token'] = $payment_verify_token;\n        if (isset($data['order_id'])) {\n            $query['id'] = intval($data['order_id']);\n        } else {\n            $query['transaction_id'] = '[null]';\n        }\n        $query['limit'] = 1;\n        $query['table'] = $table;\n        $query['no_cache'] = true;\n\n        $ord_data = $this->app->database_manager->get($query);\n        if (!isset($ord_data[0]) or !is_array($ord_data[0])) {\n            return array('error' => 'Order is completed or expired.');\n        } else {\n            $ord_data = $ord_data[0];\n            $ord = $ord_data['id'];\n        }\n\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n        $gw_process = modules_path() . $data['payment_gw'] . '_checkout_ipn.php';\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'checkout_ipn.php', false);\n        }\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'notify.php', false);\n        }\n\n\n        $update_order = array();\n        if (is_file($gw_process)) {\n            include $gw_process;\n\n            // $this->_verify_request_params($update_order);\n\n        } else {\n            return array('error' => 'The payment gateway is not found!');\n        }\n        $update_order_event_data = [];\n\n\n        if (is_array($update_order)) {\n            $update_order_event_data = array_merge($ord_data, $update_order);\n        }\n\n\n        if (!empty($update_order_event_data) and isset($update_order_event_data['order_completed']) and $update_order_event_data['order_completed'] == 1) {\n            $this->after_checkout($ord);\n\n            if (!isset($ord_data['is_paid']) or (isset($ord_data['is_paid']) and intval($ord_data['is_paid']) == 0)) {\n                if (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 1) {\n                    $should_mark_as_paid = true;\n                }\n            }\n\n            if ($should_mark_as_paid) {\n                $this->app->checkout_manager->mark_order_as_paid($ord);\n            }\n\n\n            //            $update_order_event_data['id'] = $ord;\n//            $update_order_event_data['payment_gw'] = $data['payment_gw'];\n//            $ord = $this->app->database_manager->save($table_orders, $update_order_event_data);\n//\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid']) {\n//                $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n//            }\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid'] == 1) {\n//                $this->app->shop_manager->update_quantities($ord);\n//\n//\n//            }\n//            if ($ord > 0) {\n//                $this->app->cache_manager->delete('cart');\n//                $this->app->cache_manager->delete('cart_orders');\n//                //return true;\n//            }\n//\n//            $this->confirm_email_send($ord);\n\n        }\n\n        if (isset($data['return_to'])) {\n            $return_to = urldecode($data['return_to']);\n\n            $append = '?';\n            if (strstr($return_to, '?')) {\n                $append = '&';\n            }\n            $return_to = $return_to . $append . 'mw_payment_success=1';\n\n            return $this->app->url_manager->redirect($return_to);\n        }\n\n        return;\n    }\n\n    private function get_domain_from_str($address)\n    {\n        $address = gethostbyaddr($address);\n        $parsed_url = parse_url($address);\n        if (!isset($parsed_url['host'])) {\n            if (isset($parsed_url['path'])) {\n                $parsed_url['host'] = $parsed_url['path'];\n            }\n        }\n        $check = $this->esip($parsed_url['host']);\n        $host = $parsed_url['host'];\n        if ($check == false) {\n            if ($host != '') {\n                $host = $this->domain_name($host);\n            } else {\n                $host = $this->domain_name($address);\n            }\n        }\n\n        return $host;\n    }\n\n    private function esip($ip_addr)\n    {\n        if (preg_match(\"/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/\", $ip_addr)) {\n            $parts = explode('.', $ip_addr);\n            foreach ($parts as $ip_parts) {\n                if (intval($ip_parts) > 255 || intval($ip_parts) < 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private function domain_name($domainb)\n    {\n        $bits = explode('/', $domainb);\n        if ($bits[0] == 'http:' || $bits[0] == 'https:') {\n            $domainb = $bits[2];\n        } else {\n            $domainb = $bits[0];\n        }\n        unset($bits);\n        $bits = explode('.', $domainb);\n        $idz = count($bits);\n        $idz -= 3;\n        if (strlen($bits[($idz + 2)]) == 2) {\n            $url = $bits[$idz] . '.' . $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        } elseif (strlen($bits[($idz + 2)]) == 0) {\n            $url = $bits[($idz)] . '.' . $bits[($idz + 1)];\n        } else {\n            $url = $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        }\n\n        return $url;\n    }\n\n    private function _verify_request_params($data)\n    {\n\n        $error = true;\n\n        if (!isset($data['payment_verify_token'])) {\n            $error = true;\n        }\n        if (isset($data['order_id'])) {\n            $data['id'] = $data['order_id'];\n        }\n\n        if (!isset($data['payment_amount'])) {\n            $error = true;\n        }\n\n\n        if (!isset($data['payment_currency'])) {\n            $error = true;\n        }\n        if (!isset($data['id'])) {\n            $error = true;\n        }\n\n\n\n        $vkey = false;\n\n        if (isset($_REQUEST['_vkey_url'])) {\n            $vkey = $_REQUEST['_vkey_url'];\n        }\n\n\n//        $url = url_current();\n//        $param = '_vkey_url';\n//        $pieces = parse_url($url);\n//        $query = [];\n//        if ($pieces['query']) {\n//            parse_str($pieces['query'], $query);\n//            $data[$param] = $query[$param];\n//            unset($query[$param]);\n//            $pieces['query'] = http_build_query($query);\n//        }\n//        if (!isset($data['_vkey_url'])) {\n//            $error = true;\n//        } else {\n//            $vkey = $data['_vkey_url'];\n//        }\n\n\n        if (!$vkey) {\n            $error = true;\n        }\n        $order_data = false;\n        if(!$error and isset($data['id'])){\n        $order_data = get_order_by_id($data['id']);\n        }\n\n        if ($order_data and $vkey) {\n\n            $vkey_data = array();\n            //  $vkey_data['payment_amount'] = $order_data['payment_amount'];\n            // $vkey_data['payment_currency'] = $order_data['payment_currency'];\n            $vkey_data['payment_verify_token'] = $order_data['payment_verify_token'];\n            //  $vkey_data['id'] = $order_data['id'];\n//dd($order_data);\n            $enc_key_hash = md5(json_encode($vkey_data));\n            //   $enc_key_hash = md5(\\Config::get('app.key').json_encode($vkey_data));\n\n            // dd(2222,$vkey,$enc_key_hash,$data,$order_data);\n\n            // $vkey = urldecode($vkey);\n\n            $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Config::get('app.key') . $order_data['payment_verify_token']), \\Config::get('app.cipher'));\n\n            $decrypt_data = $encrypter->decrypt($vkey);\n\n            //    dd($enc_key_hash,$decrypt_data);\n\n            //  $enc_key_hash = $encrypter->encrypt(json_encode($vkey_data));\n\n            //dd($vkey, $enc_key_hash,$order_data,$vkey_data);\n            if ($enc_key_hash === $decrypt_data) {\n                $error = false;\n\n            }\n\n            // $url_verify = $this->_build_url($pieces);\n            // $decrypt_data = @json_decode($encrypter->decrypt($vkey), true);\n\n//            if (!$decrypt_data) {\n//                $error = true;\n//            } else {\n//\n//                $decrypt_url = $decrypt_data['url'];\n//                $decrypt_payment_amount = $decrypt_data['payment_amount'];\n//                $decrypt_payment_currency = $decrypt_data['payment_currency'];\n//\n//                $url_verify = urldecode($url_verify);\n//                $decrypt_url = urldecode($decrypt_url);\n//\n//                if (md5($url_verify) !== md5($decrypt_url)) {\n//                    $error = true;\n//                }\n//\n//                if (md5(floatval($decrypt_payment_amount)) !== md5(floatval($data['payment_amount']))) {\n//                    $error = true;\n//                }\n//                if (md5(strtoupper($decrypt_payment_currency)) !== md5(strtoupper($data['payment_currency']))) {\n//                    $error = true;\n//                }\n//            }\n        }\n\n\n        if ($error) {\n\n            abort(403, 'Unauthorized action.');\n        }\n\n    }\n\n    public function getShippingModules()\n    {\n        return $this->app->shipping_manager->getShippingModules();\n\n    }\n\n    public function getShippingCost($data = [])\n    {\n\n        if (!is_array($data)) {\n            $data = [];\n        }\n        $shipping_cost = 0;\n\n        if ($this->app->user_manager->session_get('shipping_cost')) {\n            $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n        }\n\n\n        $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n        if (!isset($data['shipping_gw']) and $shipping_gw_from_session) {\n            $data['shipping_gw'] = $shipping_gw_from_session;\n        } else {\n            $data['shipping_gw'] = 'default';\n\n        }\n        if (isset($data['shipping_gw']) and $data['shipping_gw']) {\n            // $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            try {\n                $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            } catch (\\InvalidArgumentException $e) {\n                $shipping_cost = 0;\n                unset($data['shipping_gw']);\n            }\n        }\n        return $shipping_cost;\n\n    }\n\n    private function _build_url(array $elements)\n    {\n        $e = $elements;\n        return\n            (isset($e['host']) ? (\n                (isset($e['scheme']) ? \"$e[scheme]://\" : '//') .\n                (isset($e['user']) ? $e['user'] . (isset($e['pass']) ? \":$e[pass]\" : '') . '@' : '') .\n                $e['host'] .\n                (isset($e['port']) ? \":$e[port]\" : '')\n            ) : '') .\n            (isset($e['path']) ? $e['path'] : '/') .\n            (isset($e['query']) ? '?' . (is_array($e['query']) ? http_build_query($e['query'], '', '&') : $e['query']) : '') .\n            (isset($e['fragment']) ? \"#$e[fragment]\" : '');\n    }\n\n\n}\n", "<?php\nnamespace MicroweberPackages\\Shop\\tests;\n\nuse MicroweberPackages\\Core\\tests\\TestCase;\nuse MicroweberPackages\\Checkout\\CheckoutManager;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\n\n/**\n * Run test\n * @author Bobi Microweber\n * @command php phpunit.phar --filter CheckoutTest\n */\n\nclass CheckoutTest extends TestCase\n{\n    public static $content_id = 1;\n\n    private function _addProductToCart($title)\n    {\n        app()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 4444);\n\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => $productPrice),\n\n            ),\n            'is_active' => 1,);\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n        $this->assertEquals($saved_id, ($get['id']));\n        self::$content_id = $saved_id;\n\n        $add_to_cart = array(\n            'content_id' => self::$content_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n        $this->assertEquals(isset($cart_add['success']), true);\n        $this->assertEquals(isset($cart_add['product']), true);\n        $this->assertEquals($cart_add['product']['price'], $productPrice);\n    }\n\n    public function testCheckout()\n    {\n        empty_cart();\n\n     \\Config::set('mail.transport', 'array');\n\n        $this->_addProductToCart('Product 1');\n        $this->_addProductToCart('Product 2');\n        $this->_addProductToCart('Product 3');\n        $this->_addProductToCart('Product 4');\n        $data = [];\n        $data['option_value'] = 'y';\n        $data['option_key'] = 'order_email_enabled';\n        $data['option_group'] = 'orders';\n        $save = save_option($data);\n\n        $data = [];\n        $data['option_value'] = 'order_received';\n        $data['option_key'] = 'order_email_send_when';\n        $data['option_group'] = 'orders';\n        $save = save_option($data);\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['first_name'] = 'Client';\n        $checkoutDetails['last_name'] = 'Microweber';\n        $checkoutDetails['phone'] = '08812345678';\n        $checkoutDetails['address'] = 'Business Park, Mladost 4';\n        $checkoutDetails['city'] = 'Sofia';\n        $checkoutDetails['state'] = 'Sofia City';\n        $checkoutDetails['country'] = 'Bulgaria';\n        $checkoutDetails['zip'] = '1000';\n\n        $checkout = new CheckoutManager();\n        $checkoutStatus = $checkout->checkout($checkoutDetails);\n\n        $this->assertArrayHasKey('success', $checkoutStatus);\n        $this->assertArrayHasKey('id', $checkoutStatus);\n        $this->assertArrayHasKey('order_completed', $checkoutStatus);\n        $this->assertArrayHasKey('amount', $checkoutStatus);\n        $this->assertArrayHasKey('currency', $checkoutStatus);\n        $this->assertArrayHasKey('order_status', $checkoutStatus);\n\n        $checkEmailContent = '';\n        $emails = app()->make('mailer')->getSymfonyTransport()->messages();\n        foreach ($emails as $email) {\n\n            $emailAsArray = $this->getEmailDataAsArrayFromObject($email);\n            $body = $emailAsArray['body'];\n\n            if (strpos($body, 'Order') !== false) {\n                $checkEmailContent = $body;\n            }\n        }\n        $findFirstName = false;\n        if (strpos($checkEmailContent, $checkoutDetails['first_name']) !== false) {\n            $findFirstName = true;\n        }\n\n        $findLastName = false;\n        if (strpos($checkEmailContent, $checkoutDetails['last_name']) !== false) {\n            $findLastName = true;\n        }\n\n        $findEmail = false;\n        if (strpos($checkEmailContent, $checkoutDetails['email']) !== false) {\n            $findEmail = true;\n        }\n\n        $findPhone = false;\n        if (strpos($checkEmailContent, $checkoutDetails['phone']) !== false) {\n            $findPhone = true;\n        }\n\n        $findCity = false;\n        if (strpos($checkEmailContent, $checkoutDetails['city']) !== false) {\n            $findCity = true;\n        }\n\n        $findZip = false;\n        if (strpos($checkEmailContent, $checkoutDetails['zip']) !== false) {\n            $findZip = true;\n        }\n\n        $findState = false;\n        if (strpos($checkEmailContent, $checkoutDetails['state']) !== false) {\n            $findState = true;\n        }\n\n        $findCountry = false;\n        if (strpos($checkEmailContent, $checkoutDetails['country']) !== false) {\n            $findCountry = true;\n        }\n\n        $findAddress = false;\n        if (strpos($checkEmailContent, $checkoutDetails['address']) !== false) {\n            $findAddress = true;\n        }\n\n        $this->assertEquals(true, $findFirstName);\n        $this->assertEquals(true, $findLastName);\n        $this->assertEquals(true, $findEmail);\n        $this->assertEquals(true, $findPhone);\n        $this->assertEquals(true, $findCity);\n        $this->assertEquals(true, $findZip);\n        $this->assertEquals(true, $findState);\n        $this->assertEquals(true, $findCountry);\n        $this->assertEquals(true, $findAddress);\n\n    }\n\n    public function testCheckoutQtyUpdate()\n    {\n        mw()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 9999);\n        $title = 'test QTY prod ' . $productPrice;\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => '9.99'),\n\n            ),\n            'data_fields_qty' => 1,\n            'is_active' => 1,);\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n\n        $add_to_cart = array(\n            'content_id' => $saved_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['first_name'] = 'Client';\n        $checkoutDetails['last_name'] = 'Microweber';\n        $checkoutDetails['phone'] = '08812345678';\n        $checkoutDetails['address'] = 'Business Park, Mladost 4';\n        $checkoutDetails['city'] = 'Sofia';\n        $checkoutDetails['state'] = 'Sofia City';\n        $checkoutDetails['country'] = 'Bulgaria';\n        $checkoutDetails['zip'] = '1000';\n        $checkoutDetails['is_paid'] = 1;\n        $checkoutDetails['order_completed'] = 1;\n\n\n        $checkoutStatus = app()->order_manager->place_order($checkoutDetails);\n\n        $content_data_after_order = content_data($saved_id);\n        $this->assertEquals(0, $content_data_after_order['qty']);\n\n\n\n        // test the productOrders relationship\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n\n        $productQuery =$productQuery->whereHas('orders');\n        $products = $productQuery->get();\n\n        $found = false;\n        foreach ($products as $product) {\n            if ($product->id == $saved_id) {\n                $found = true;\n            }\n        }\n        $this->assertTrue($found);\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n\n        $productQuery =$productQuery->whereDoesntHave('orders');\n        $products = $productQuery->get();\n        $found = false;\n        foreach ($products as $product) {\n            if ($product->id == $saved_id) {\n                $found = true;\n            }\n        }\n        $this->assertFalse($found);\n\n    }\n\n\n\n\n\n    public function testCheckoutDeletedProduct()\n    {\n        mw()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 9999);\n        $title = 'test testCheckoutDeletedProduct prod ' . $productPrice;\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => '9.99'),\n\n            ),\n            'data_fields_qty' => 10,\n            'is_deleted' => 1,\n            'is_active' => 1,);\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n\n        $add_to_cart = array(\n            'content_id' => $saved_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['is_paid'] = 1;\n        $checkoutDetails['order_completed'] = 1;\n\n\n        $checkoutStatus = app()->order_manager->place_order($checkoutDetails);\n        $content_data_after_order = content_data($saved_id);\n        $this->assertEquals(10, $content_data_after_order['qty']);\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n        $productQuery = $productQuery->whereHas('orders');\n        $products = $productQuery->get();\n        $this->assertTrue($products->isEmpty());\n\n        $order = get_order_by_id($checkoutStatus);\n        $this->assertNotNull($order);\n        $this->assertNull($order['amount']);\n\n    }\n\n\n\n\n    public function testCheckoutUnpublishedProduct()\n    {\n        mw()->database_manager->extended_save_set_permission(true);\n\n        $productPrice = rand(1, 9999);\n        $title = 'test testCheckoutUnpublishedProduct prod ' . $productPrice;\n        $params = array(\n            'title' => $title,\n            'content_type' => 'product',\n            'subtype' => 'product',\n            'custom_fields_advanced' => array(\n                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n                array('type' => 'price', 'name' => 'Price', 'value' => '9.99'),\n\n            ),\n            'data_fields_qty' => 11,\n            'is_deleted' => 0,\n            'is_active' => 0\n        );\n\n\n        $saved_id = save_content($params);\n        $get = get_content_by_id($saved_id);\n\n\n        $add_to_cart = array(\n            'content_id' => $saved_id,\n            'price' => $productPrice,\n        );\n        $cart_add = update_cart($add_to_cart);\n\n\n        $checkoutDetails = array();\n        $checkoutDetails['email'] = 'client@microweber.com';\n        $checkoutDetails['is_paid'] = 1;\n        $checkoutDetails['order_completed'] = 1;\n\n\n        $checkoutStatus = app()->order_manager->place_order($checkoutDetails);\n        $content_data_after_order = content_data($saved_id);\n        $this->assertEquals(11, $content_data_after_order['qty']);\n\n        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n        $productQuery = $productQuery->whereHas('orders');\n        $products = $productQuery->get();\n        $this->assertTrue($products->isEmpty());\n\n        $order = get_order_by_id($checkoutStatus);\n        $this->assertNotNull($order);\n        $this->assertNull($order['amount']);\n\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Cart/CartManager.php", "src/MicroweberPackages/Checkout/CheckoutManager.php", "src/MicroweberPackages/Shop/tests/CheckoutTest.php"], "buggy_code_start_loc": [246, 59, 244], "buggy_code_end_loc": [946, 59, 244], "fixing_code_start_loc": [246, 60, 245], "fixing_code_end_loc": [972, 61, 355], "type": "NVD-CWE-Other", "message": "Business Logic Errors in GitHub repository microweber/microweber prior to 2.0.", "other": {"cve": {"id": "CVE-2023-6566", "sourceIdentifier": "security@huntr.dev", "published": "2023-12-07T00:15:07.120", "lastModified": "2023-12-12T15:54:28.520", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository microweber/microweber prior to 2.0."}, {"lang": "es", "value": "Errores de l\u00f3gica empresarial en el repositorio de GitHub microweber/microweber anterior a 2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "1CF90546-1596-44C3-8F49-77B4CDD14DFD"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/eee0c6771e152022a91089a547272c8a542bb74e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/cf4b68b5-8d97-4d05-9cde-e76b1a414fd6", "source": "security@huntr.dev", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/eee0c6771e152022a91089a547272c8a542bb74e"}}