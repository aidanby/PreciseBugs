{"buggy_code": ["# -*- coding: utf-8 -*-\n\nimport random\nimport socket\nimport string\n\nimport js2py\n\nfrom .check import is_mapping\n\n\ndef random_string(length):\n    seq = string.ascii_letters + string.digits + string.punctuation\n    return \"\".join(random.choice(seq) for _ in range(length))\n\n\ndef is_plural(value):\n    try:\n        n = abs(float(value))\n        return n == 0 or n > 1\n    except ValueError:\n        return value.endswith(\"s\")  # TODO: detect uncommon plurals\n\n\ndef eval_js(script, es6=False):\n    # return requests_html.HTML().render(script=script, reload=False)\n    return (js2py.eval_js6 if es6 else js2py.eval_js)(script)\n\n\ndef accumulate(iterable, to_map=None):\n    \"\"\"\n    Accumulate (key, value) data to {value : [key]} dictionary.\n    \"\"\"\n    if to_map is None:\n        to_map = {}\n    for key, value in iterable:\n        to_map.setdefault(value, []).append(key)\n    return to_map\n\n\ndef reversemap(obj):\n    \"\"\"\n    Invert mapping object preserving type and ordering.\n    \"\"\"\n    return obj.__class__(reversed(item) for item in obj.items())\n\n\n# def get_translation(domain, localedir=None, languages=None, class_=None,\n# fallback=False, codeset=None):\n# try:\n# trans = gettext.translation(\n# domain, localedir, languages, class_, False, codeset)\n# except (IOError, OSError):\n# if not fallback:\n# raise\n# trans = gettext.translation(\n# domain, localedir, None, class_, fallback, codeset)\n# return trans\n\n\n# def install_translation(domain, localedir=None, languages=None,\n# class_=None, fallback=False, codeset=None):\n# trans = get_translation(\n# domain, localedir, languages, class_, fallback, codeset)\n# try:\n# trans.install(str=True)\n# except TypeError:\n# trans.install()\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n\nimport random\nimport string\n\nimport js2py\n\njs2py.disable_pyimport()\n\n\ndef random_string(length):\n    seq = string.ascii_letters + string.digits + string.punctuation\n    return \"\".join(random.choice(seq) for _ in range(length))\n\n\ndef is_plural(value):\n    try:\n        n = abs(float(value))\n        return n == 0 or n > 1\n    except ValueError:\n        return value.endswith(\"s\")  # TODO: detect uncommon plurals\n\n\ndef eval_js(script, es6=False):\n    # return requests_html.HTML().render(script=script, reload=False)\n    return (js2py.eval_js6 if es6 else js2py.eval_js)(script)\n\n\ndef accumulate(iterable, to_map=None):\n    \"\"\"\n    Accumulate (key, value) data to {value : [key]} dictionary.\n    \"\"\"\n    if to_map is None:\n        to_map = {}\n    for key, value in iterable:\n        to_map.setdefault(value, []).append(key)\n    return to_map\n\n\ndef reversemap(obj):\n    \"\"\"\n    Invert mapping object preserving type and ordering.\n    \"\"\"\n    return obj.__class__(reversed(item) for item in obj.items())\n\n\n# def get_translation(domain, localedir=None, languages=None, class_=None,\n# fallback=False, codeset=None):\n# try:\n# trans = gettext.translation(\n# domain, localedir, languages, class_, False, codeset)\n# except (IOError, OSError):\n# if not fallback:\n# raise\n# trans = gettext.translation(\n# domain, localedir, None, class_, fallback, codeset)\n# return trans\n\n\n# def install_translation(domain, localedir=None, languages=None,\n# class_=None, fallback=False, codeset=None):\n# trans = get_translation(\n# domain, localedir, languages, class_, fallback, codeset)\n# try:\n# trans.install(str=True)\n# except TypeError:\n# trans.install()\n"], "filenames": ["src/pyload/core/utils/misc.py"], "buggy_code_start_loc": [4], "buggy_code_end_loc": [10], "fixing_code_start_loc": [3], "fixing_code_end_loc": [9], "type": "CWE-94", "message": "Code Injection in GitHub repository pyload/pyload prior to 0.5.0b3.dev31.", "other": {"cve": {"id": "CVE-2023-0297", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-14T03:15:18.800", "lastModified": "2023-02-22T19:15:10.987", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Code Injection in GitHub repository pyload/pyload prior to 0.5.0b3.dev31."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pyload:pyload:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.4.20", "matchCriteriaId": "DACFA9B5-22AD-4BC6-87D5-8272FF49BD56"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/171096/pyLoad-js2py-Python-Execution.html", "source": "security@huntr.dev"}, {"url": "https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d"}}