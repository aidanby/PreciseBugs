{"buggy_code": ["<?php\n\n/**\n * AJAX: handling of Ajax configuration calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Anatoliy Belsky <anatoliy.belsky@mayflower.de>\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2009-04-01\n */\n\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Entity\\MetaEntity as MetaEntity;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Instance;\nuse phpMyFAQ\\Instance\\Client;\nuse phpMyFAQ\\Instance\\Setup;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Meta;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$instanceId = Filter::filterInput(INPUT_GET, 'instanceId', FILTER_VALIDATE_INT);\n$stopwordId = Filter::filterInput(INPUT_GET, 'stopword_id', FILTER_VALIDATE_INT);\n$stopword = Filter::filterInput(INPUT_GET, 'stopword', FILTER_UNSAFE_RAW);\n$stopwordsLang = Filter::filterInput(INPUT_GET, 'stopwords_lang', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n$http = new HttpHelper();\n$stopwords = new Stopwords($faqConfig);\n\nswitch ($ajaxAction) {\n    case 'add_instance':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $url = Filter::filterInput(INPUT_GET, 'url', FILTER_UNSAFE_RAW);\n        $instance = Filter::filterInput(INPUT_GET, 'instance', FILTER_UNSAFE_RAW);\n        $comment = Filter::filterInput(INPUT_GET, 'comment', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_GET, 'email', FILTER_VALIDATE_EMAIL);\n        $admin = Filter::filterInput(INPUT_GET, 'admin', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_GET, 'password', FILTER_UNSAFE_RAW);\n\n        if (empty($url) || empty($instance) || empty($comment) || empty($email) || empty($admin) || empty($password)) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => 'Cannot create instance.']);\n            exit(1);\n        }\n\n        $data = [\n            'url' => 'https://' . $url . '.' . $_SERVER['SERVER_NAME'],\n            'instance' => $instance,\n            'comment' => $comment,\n        ];\n\n        $faqInstance = new Instance($faqConfig);\n        $instanceId = $faqInstance->addInstance($data);\n\n        $faqInstanceClient = new Client($faqConfig);\n        $faqInstanceClient->createClient($faqInstance);\n\n        $urlParts = parse_url($data['url']);\n        $hostname = $urlParts['host'];\n\n        if ($faqInstanceClient->createClientFolder($hostname)) {\n            $clientDir = PMF_ROOT_DIR . '/multisite/' . $hostname;\n            $clientSetup = new Setup();\n            $clientSetup->setRootDir($clientDir);\n\n            try {\n                $faqInstanceClient->copyConstantsFile($clientDir . '/constants.php');\n            } catch (\\phpMyFAQ\\Core\\Exception $e) {\n            }\n\n            $dbSetup = [\n                'dbServer' => $DB['server'],\n                'dbPort' => $DB['port'],\n                'dbUser' => $DB['user'],\n                'dbPassword' => $DB['password'],\n                'dbDatabaseName' => $DB['db'],\n                'dbPrefix' => substr($hostname, 0, strpos($hostname, '.')),\n                'dbType' => $DB['type'],\n                'dbPort' => $DB['port']\n            ];\n            $clientSetup->createDatabaseFile($dbSetup, '');\n\n            $faqInstanceClient->setClientUrl('https://' . $hostname);\n            $faqInstanceClient->createClientTables($dbSetup['dbPrefix']);\n\n            Database::setTablePrefix($dbSetup['dbPrefix']);\n\n            // add admin account and rights\n            $instanceAdmin = new User($faqConfig);\n            $instanceAdmin->createUser($admin, $password, '', 1);\n            $instanceAdmin->setStatus('protected');\n            $instanceAdminData = [\n                'display_name' => '',\n                'email' => $email,\n            ];\n            $instanceAdmin->setUserData($instanceAdminData);\n\n            // Add anonymous user account\n            $clientSetup->createAnonymousUser($faqConfig);\n\n            Database::setTablePrefix($DB['prefix']);\n        } else {\n            $faqInstance->removeInstance($instanceId);\n            $http->setStatus(400);\n            $payload = ['error' => 'Cannot create instance.'];\n        }\n        if (0 !== $instanceId) {\n            $http->setStatus(200);\n            $payload = ['added' => $instanceId, 'url' => $data['url']];\n        } else {\n            $http->setStatus(400);\n            $payload = ['error' => $instanceId];\n        }\n        $http->sendJsonWithHeaders($payload);\n        break;\n\n    case 'delete_instance':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        if (null !== $instanceId) {\n            $client = new Client($faqConfig);\n            $clientData = $client->getInstanceById($instanceId);\n            if (\n                1 !== $instanceId &&\n                $client->deleteClientFolder($clientData->url) &&\n                $client->removeInstance($instanceId)\n            ) {\n                $http->setStatus(200);\n                $payload = ['deleted' => $instanceId];\n            } else {\n                $http->setStatus(400);\n                $payload = ['error' => $instanceId];\n            }\n            $http->sendJsonWithHeaders($payload);\n        }\n        break;\n\n    case 'load_stop_words_by_lang':\n        if (Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwordsList = $stopwords->getByLang($stopwordsLang);\n\n            $payload = $stopwordsList;\n            $http->sendJsonWithHeaders($payload);\n        }\n        break;\n\n    case 'delete_stop_word':\n        if (null != $stopwordId && Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwords->setLanguage($stopwordsLang);\n            $stopwords->remove((int)$stopwordId);\n        }\n        break;\n\n    case 'save_stop_word':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        if (null != $stopword && Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwords->setLanguage($stopwordsLang);\n\n            if (null !== $stopwordId && -1 < $stopwordId) {\n                echo $stopwords->update((int)$stopwordId, $stopword);\n            } elseif (!$stopwords->match($stopword)) {\n                echo $stopwords->add($stopword);\n            }\n        }\n        break;\n\n    case 'add_meta':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $meta = new Meta($faqConfig);\n        $entity = new MetaEntity();\n\n        $entity\n            ->setPageId(Filter::filterInput(INPUT_GET, 'page_id', FILTER_SANITIZE_SPECIAL_CHARS))\n            ->setType(Filter::filterInput(INPUT_GET, 'type', FILTER_SANITIZE_SPECIAL_CHARS))\n            ->setContent(Filter::filterInput(INPUT_GET, 'content', FILTER_SANITIZE_SPECIAL_CHARS));\n\n        $metaId = $meta->add($entity);\n\n        if (0 !== $metaId) {\n            $payload = ['added' => $metaId];\n        } else {\n            $payload = ['error' => $metaId];\n        }\n        $http->sendJsonWithHeaders($payload);\n        break;\n\n    case 'delete_meta':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $meta = new Meta($faqConfig);\n        $metaId = Filter::filterInput(INPUT_GET, 'meta_id', FILTER_UNSAFE_RAW);\n\n        if ($meta->delete((int)$metaId)) {\n            $payload = ['deleted' => $metaId];\n        } else {\n            $payload = ['error' => $metaId];\n        }\n\n        $http->sendJsonWithHeaders($payload);\n        break;\n}\n", "<?php\n\n/**\n * The main multi-site instances frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-03-16\n */\n\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Instance;\nuse phpMyFAQ\\Instance\\Client;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n?>\n  <header class=\"row\">\n    <div class=\"col-lg-12\">\n      <h2 class=\"page-header\">\n        <i aria-hidden=\"true\" class=\"fa fa-wrench fa-fw\"></i> <?= $PMF_LANG['ad_menu_instances']; ?>\n          <?php if (\n            $user->perm->hasPermission($user->getUserId(), 'addinstances') &&\n              is_writable(PMF_ROOT_DIR . DIRECTORY_SEPARATOR . 'multisite')\n) : ?>\n            <div class=\"float-right\">\n              <a class=\"btn btn-sm btn-success\" data-toggle=\"modal\" href=\"#pmf-modal-add-instance\">\n                <i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_instance_add'] ?>\n              </a>\n            </div>\n          <?php endif; ?>\n      </h2>\n    </div>\n  </header>\n\n  <div class=\"row\">\n  <div class=\"col-lg-12\">\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'editinstances')) {\n    $instance = new Instance($faqConfig);\n    $instanceId = Filter::filterInput(INPUT_POST, 'instance_id', FILTER_VALIDATE_INT);\n\n    // Check, if /multisite is writeable\n    if (!is_writable(PMF_ROOT_DIR . DIRECTORY_SEPARATOR . 'multisite')) {\n        printf(\n            '<p class=\"alert alert-danger\">%s</p>',\n            $PMF_LANG['ad_instance_error_notwritable']\n        );\n    }\n\n    // Update client instance\n    if ('updateinstance' === $action && is_integer($instanceId)) {\n        $system = new System();\n        $originalClient = new Client($faqConfig);\n        $updatedClient = new Client($faqConfig);\n        $moveInstance = false;\n\n        // Collect updated data for database\n        $updatedData = [];\n        $updatedData['url'] = Filter::filterInput(INPUT_POST, 'url', FILTER_UNSAFE_RAW);\n        $updatedData['instance'] = Filter::filterInput(INPUT_POST, 'instance', FILTER_UNSAFE_RAW);\n        $updatedData['comment'] = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n\n        // Original data\n        $originalData = $originalClient->getInstanceById($instanceId);\n\n        if ($originalData->url !== $updatedData['url']) {\n            $moveInstance = true;\n        }\n\n        if ($updatedClient->updateInstance($instanceId, $updatedData)) {\n            if ($moveInstance) {\n                try {\n                    $updatedClient->moveClientFolder($originalData->url, $updatedData['url']);\n                    $updatedClient->deleteClientFolder($originalData->url);\n                } catch (Exception $e) {\n                    // handle exception\n                }\n            }\n            printf(\n                '<p class=\"alert alert-success\">%s%s</p>',\n                '<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>',\n                $PMF_LANG['ad_config_saved']\n            );\n        } else {\n            printf(\n                '<p class=\"alert alert-danger\">%s%s<br/>%s</p>',\n                '<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>',\n                $PMF_LANG['ad_entryins_fail'],\n                $faqConfig->getDb()->error()\n            );\n        }\n    }\n    ?>\n  <table class=\"table\">\n    <thead>\n    <tr>\n      <th>#</th>\n      <th><?= $PMF_LANG['ad_instance_url'] ?></th>\n      <th><?= $PMF_LANG['ad_instance_path'] ?></th>\n      <th colspan=\"3\"><?= $PMF_LANG['ad_instance_name'] ?></th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php\n    foreach ($instance->getAllInstances() as $site) :\n        $currentInstance = new Instance($faqConfig);\n        $currentInstance->getInstanceById($site->id);\n        $currentInstance->setId($site->id);\n        ?>\n      <tr id=\"row-instance-<?= $site->id ?>\">\n        <td><?= $site->id ?></td>\n        <td>\n          <a href=\"<?= Strings::htmlentities($site->url . $site->instance, ENT_QUOTES) ?>\">\n                <?= Strings::htmlentities($site->url, ENT_QUOTES) ?>\n          </a>\n        </td>\n        <td><?= Strings::htmlentities($site->instance, ENT_QUOTES) ?></td>\n        <td><?= Strings::htmlentities($site->comment, ENT_QUOTES) ?></td>\n        <td>\n          <a href=\"?action=editinstance&instance_id=<?= $site->id ?>\" class=\"btn btn-info\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n          </a>\n        </td>\n        <td>\n            <?php if ($currentInstance->getConfig('isMaster') !== true) : ?>\n              <a href=\"javascript:;\" id=\"delete-instance-<?= $site->id ?>\"\n                 class=\"btn btn-danger pmf-instance-delete\"\n                 data-csrf-token=\"<?= $user->getCsrfTokenFromSession() ?>\">\n                <i aria-hidden=\"true\" class=\"fa fa-trash\"></i>\n              </a>\n            <?php endif; ?>\n        </td>\n      </tr>\n    <?php endforeach; ?>\n    </tbody>\n  </table>\n\n  <div class=\"modal fade\" id=\"pmf-modal-add-instance\">\n    <div class=\"modal-dialog modal-lg\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h4><?= $PMF_LANG['ad_instance_add'] ?></h4>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n          <form action=\"#\" method=\"post\" accept-charset=\"utf-8\">\n            <input type=\"hidden\" name=\"csrf\" id=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"url\">\n                  <?= $PMF_LANG['ad_instance_url'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <div class=\"input-group\">\n                  <div class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">https://</div>\n                  </div>\n                  <input class=\"form-control\" type=\"text\" name=\"url\" id=\"url\" required>\n                  <div class=\"input-group-append\">\n                    <div class=\"input-group-text\">.<?= $_SERVER['SERVER_NAME'] ?></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"instance\">\n                  <?= $PMF_LANG['ad_instance_path'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"instance\" id=\"instance\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"comment\">\n                  <?= $PMF_LANG['ad_instance_name'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"comment\" id=\"comment\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"email\">\n                  <?= $PMF_LANG['ad_instance_email'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"email\" name=\"email\" id=\"email\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"admin\">\n                  <?= $PMF_LANG['ad_instance_admin'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"admin\" id=\"admin\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"password\">\n                  <?= $PMF_LANG['ad_instance_password'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"password\" autocomplete=\"off\" name=\"password\" id=\"password\" required>\n              </div>\n            </div>\n          </form>\n        </div>\n        <div class=\"modal-footer\">\n          <p><?= $PMF_LANG['ad_instance_hint'] ?></p>\n          <button class=\"btn btn-primary pmf-instance-add\">\n              <?= $PMF_LANG['ad_instance_button'] ?>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    (function() {\n\n      // Add instance\n      $('.pmf-instance-add').on('click', function(event) {\n        event.preventDefault();\n        const csrf = $('#csrf').val();\n        const url = $('#url').val();\n        const instance = $('#instance').val();\n        const comment = $('#comment').val();\n        const email = $('#email').val();\n        const admin = $('#admin').val();\n        const password = $('#password').val();\n\n        const escape = (unsafe) => {\n          return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('\"', '&quot;').replaceAll(\"'\", '&#039;');\n        }\n\n        $.ajax({\n          url: 'index.php',\n          type: 'GET',\n          data: {\n            action: 'ajax', ajax: 'config', ajaxaction: 'add_instance', csrf: csrf, url: url,\n            instance: instance, comment: comment, email: email, admin: admin, password: password,\n          },\n          success: (data) => {\n            $('.modal').modal('hide');\n            $('.table tbody').append(\n              '<tr id=\"row-instance-' + data.added + '\">' +\n              '<td>' + data.added + '</td>' +\n              '<td><a href=\"' + data.url + '\">' + data.url + '</a></td>' +\n              '<td>' + escape(instance) + '</td>' +\n              '<td>' + escape(comment) + '</td>' +\n              '<td>' +\n              '<a href=\"?action=editinstance&instance_id=' + data.added +\n              '\" class=\"btn btn-info\"><i aria-hidden=\"true\" class=\"fa fa-pencil\"></i></a>' +\n              '</td>' +\n              '<td>' +\n              '<a href=\"javascript:;\" id=\"delete-instance-' + data.added +\n              '\" class=\"btn btn-danger pmf-instance-delete\"><i aria-hidden=\"true\" class=\"fa fa-trash\"></i></a>' +\n              '</td>' +\n              '</tr>',\n            );\n          },\n          error: (data) => {\n            $('.table').after(\n              '<div class=\"alert alert-danger\">Could not add instance</div>',\n            );\n          }\n        });\n      });\n\n      // Delete instance\n      $('.pmf-instance-delete').click(function(event) {\n        event.preventDefault();\n        const targetId = event.target.id.split('-');\n        const id = targetId[2];\n        const csrf = this.getAttribute('data-csrf-token');\n\n        if (confirm('Are you sure?')) {\n          $.get('index.php',\n            { action: 'ajax', ajax: 'config', ajaxaction: 'delete_instance', instanceId: id, csrf: csrf },\n            function(data) {\n              if (typeof (data.deleted) === 'undefined') {\n                $('.table').after(\n                  '<div class=\"alert alert-danger\">' +\n                  '<?= $PMF_LANG['ad_instance_error_cannotdelete'] ?> ' + data.error +\n                  '</div>',\n                );\n              } else {\n                $('#row-instance-' + id).fadeOut('slow');\n              }\n            },\n            'json',\n          );\n        }\n      });\n\n    })();\n  </script>\n\n  </div>\n  </div>\n    <?php\n} else {\n    print $PMF_LANG['err_NotAuth'];\n}\n"], "fixing_code": ["<?php\n\n/**\n * AJAX: handling of Ajax configuration calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Anatoliy Belsky <anatoliy.belsky@mayflower.de>\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2009-04-01\n */\n\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Entity\\MetaEntity as MetaEntity;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Instance;\nuse phpMyFAQ\\Instance\\Client;\nuse phpMyFAQ\\Instance\\Setup;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Meta;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$instanceId = Filter::filterInput(INPUT_GET, 'instanceId', FILTER_VALIDATE_INT);\n$stopwordId = Filter::filterInput(INPUT_GET, 'stopword_id', FILTER_VALIDATE_INT);\n$stopword = Filter::filterInput(INPUT_GET, 'stopword', FILTER_UNSAFE_RAW);\n$stopwordsLang = Filter::filterInput(INPUT_GET, 'stopwords_lang', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n$http = new HttpHelper();\n$stopwords = new Stopwords($faqConfig);\n\nswitch ($ajaxAction) {\n    case 'add_instance':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $url = Filter::filterInput(INPUT_GET, 'url', FILTER_UNSAFE_RAW);\n        $instance = Filter::filterInput(INPUT_GET, 'instance', FILTER_UNSAFE_RAW);\n        $comment = Filter::filterInput(INPUT_GET, 'comment', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_GET, 'email', FILTER_VALIDATE_EMAIL);\n        $admin = Filter::filterInput(INPUT_GET, 'admin', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_GET, 'password', FILTER_UNSAFE_RAW);\n\n        if (empty($url) || empty($instance) || empty($comment) || empty($email) || empty($admin) || empty($password)) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => 'Cannot create instance.']);\n            exit(1);\n        }\n\n        $url = 'https://' . $url . '.' . $_SERVER['SERVER_NAME'];\n        if (!Filter::filterVar($url, FILTER_VALIDATE_URL)) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => 'Cannot create instance: wrong URL']);\n            exit(1);\n        }\n\n        $data = [\n            'url' => 'https://' . $url . '.' . $_SERVER['SERVER_NAME'],\n            'instance' => $instance,\n            'comment' => $comment,\n        ];\n\n        $faqInstance = new Instance($faqConfig);\n        $instanceId = $faqInstance->addInstance($data);\n\n        $faqInstanceClient = new Client($faqConfig);\n        $faqInstanceClient->createClient($faqInstance);\n\n        $urlParts = parse_url($data['url']);\n        $hostname = $urlParts['host'];\n\n        if ($faqInstanceClient->createClientFolder($hostname)) {\n            $clientDir = PMF_ROOT_DIR . '/multisite/' . $hostname;\n            $clientSetup = new Setup();\n            $clientSetup->setRootDir($clientDir);\n\n            try {\n                $faqInstanceClient->copyConstantsFile($clientDir . '/constants.php');\n            } catch (\\phpMyFAQ\\Core\\Exception $e) {\n            }\n\n            $dbSetup = [\n                'dbServer' => $DB['server'],\n                'dbPort' => $DB['port'],\n                'dbUser' => $DB['user'],\n                'dbPassword' => $DB['password'],\n                'dbDatabaseName' => $DB['db'],\n                'dbPrefix' => substr($hostname, 0, strpos($hostname, '.')),\n                'dbType' => $DB['type'],\n                'dbPort' => $DB['port']\n            ];\n            $clientSetup->createDatabaseFile($dbSetup, '');\n\n            $faqInstanceClient->setClientUrl('https://' . $hostname);\n            $faqInstanceClient->createClientTables($dbSetup['dbPrefix']);\n\n            Database::setTablePrefix($dbSetup['dbPrefix']);\n\n            // add admin account and rights\n            $instanceAdmin = new User($faqConfig);\n            $instanceAdmin->createUser($admin, $password, '', 1);\n            $instanceAdmin->setStatus('protected');\n            $instanceAdminData = [\n                'display_name' => '',\n                'email' => $email,\n            ];\n            $instanceAdmin->setUserData($instanceAdminData);\n\n            // Add anonymous user account\n            $clientSetup->createAnonymousUser($faqConfig);\n\n            Database::setTablePrefix($DB['prefix']);\n        } else {\n            $faqInstance->removeInstance($instanceId);\n            $http->setStatus(400);\n            $payload = ['error' => 'Cannot create instance.'];\n        }\n        if (0 !== $instanceId) {\n            $http->setStatus(200);\n            $payload = ['added' => $instanceId, 'url' => $data['url']];\n        } else {\n            $http->setStatus(400);\n            $payload = ['error' => $instanceId];\n        }\n        $http->sendJsonWithHeaders($payload);\n        break;\n\n    case 'delete_instance':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        if (null !== $instanceId) {\n            $client = new Client($faqConfig);\n            $clientData = $client->getInstanceById($instanceId);\n            if (\n                1 !== $instanceId &&\n                $client->deleteClientFolder($clientData->url) &&\n                $client->removeInstance($instanceId)\n            ) {\n                $http->setStatus(200);\n                $payload = ['deleted' => $instanceId];\n            } else {\n                $http->setStatus(400);\n                $payload = ['error' => $instanceId];\n            }\n            $http->sendJsonWithHeaders($payload);\n        }\n        break;\n\n    case 'load_stop_words_by_lang':\n        if (Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwordsList = $stopwords->getByLang($stopwordsLang);\n\n            $payload = $stopwordsList;\n            $http->sendJsonWithHeaders($payload);\n        }\n        break;\n\n    case 'delete_stop_word':\n        if (null != $stopwordId && Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwords->setLanguage($stopwordsLang);\n            $stopwords->remove((int)$stopwordId);\n        }\n        break;\n\n    case 'save_stop_word':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        if (null != $stopword && Language::isASupportedLanguage($stopwordsLang)) {\n            $stopwords->setLanguage($stopwordsLang);\n\n            if (null !== $stopwordId && -1 < $stopwordId) {\n                echo $stopwords->update((int)$stopwordId, $stopword);\n            } elseif (!$stopwords->match($stopword)) {\n                echo $stopwords->add($stopword);\n            }\n        }\n        break;\n\n    case 'add_meta':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $meta = new Meta($faqConfig);\n        $entity = new MetaEntity();\n\n        $entity\n            ->setPageId(Filter::filterInput(INPUT_GET, 'page_id', FILTER_SANITIZE_SPECIAL_CHARS))\n            ->setType(Filter::filterInput(INPUT_GET, 'type', FILTER_SANITIZE_SPECIAL_CHARS))\n            ->setContent(Filter::filterInput(INPUT_GET, 'content', FILTER_SANITIZE_SPECIAL_CHARS));\n\n        $metaId = $meta->add($entity);\n\n        if (0 !== $metaId) {\n            $payload = ['added' => $metaId];\n        } else {\n            $payload = ['error' => $metaId];\n        }\n        $http->sendJsonWithHeaders($payload);\n        break;\n\n    case 'delete_meta':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n            $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n            exit(1);\n        }\n\n        $meta = new Meta($faqConfig);\n        $metaId = Filter::filterInput(INPUT_GET, 'meta_id', FILTER_UNSAFE_RAW);\n\n        if ($meta->delete((int)$metaId)) {\n            $payload = ['deleted' => $metaId];\n        } else {\n            $payload = ['error' => $metaId];\n        }\n\n        $http->sendJsonWithHeaders($payload);\n        break;\n}\n", "<?php\n\n/**\n * The main multi-site instances frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-03-16\n */\n\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Instance;\nuse phpMyFAQ\\Instance\\Client;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n?>\n  <header class=\"row\">\n    <div class=\"col-lg-12\">\n      <h2 class=\"page-header\">\n        <i aria-hidden=\"true\" class=\"fa fa-wrench fa-fw\"></i> <?= $PMF_LANG['ad_menu_instances']; ?>\n          <?php if (\n            $user->perm->hasPermission($user->getUserId(), 'addinstances') &&\n              is_writable(PMF_ROOT_DIR . DIRECTORY_SEPARATOR . 'multisite')\n) : ?>\n            <div class=\"float-right\">\n              <a class=\"btn btn-sm btn-success\" data-toggle=\"modal\" href=\"#pmf-modal-add-instance\">\n                <i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_instance_add'] ?>\n              </a>\n            </div>\n          <?php endif; ?>\n      </h2>\n    </div>\n  </header>\n\n  <div class=\"row\">\n  <div class=\"col-lg-12\">\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'editinstances')) {\n    $instance = new Instance($faqConfig);\n    $instanceId = Filter::filterInput(INPUT_POST, 'instance_id', FILTER_VALIDATE_INT);\n\n    // Check, if /multisite is writeable\n    if (!is_writable(PMF_ROOT_DIR . DIRECTORY_SEPARATOR . 'multisite')) {\n        printf(\n            '<p class=\"alert alert-danger\">%s</p>',\n            $PMF_LANG['ad_instance_error_notwritable']\n        );\n    }\n\n    // Update client instance\n    if ('updateinstance' === $action && is_integer($instanceId)) {\n        $system = new System();\n        $originalClient = new Client($faqConfig);\n        $updatedClient = new Client($faqConfig);\n        $moveInstance = false;\n\n        // Collect updated data for database\n        $updatedData = [];\n        $updatedData['url'] = Filter::filterInput(INPUT_POST, 'url', FILTER_VALIDATE_URL);\n        $updatedData['instance'] = Filter::filterInput(INPUT_POST, 'instance', FILTER_UNSAFE_RAW);\n        $updatedData['comment'] = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n\n        // Original data\n        $originalData = $originalClient->getInstanceById($instanceId);\n\n        if ($originalData->url !== $updatedData['url']) {\n            $moveInstance = true;\n        }\n\n        if (is_null($updatedData['url'])) {\n            printf(\n                '<p class=\"alert alert-danger\">%s%s<br/>%s</p>',\n                '<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>',\n                $PMF_LANG['ad_entryins_fail'],\n                 $faqConfig->getDb()->error()\n            );\n        } else {\n          if ($updatedClient->updateInstance($instanceId, $updatedData)) {\n            if ($moveInstance) {\n              try {\n                $updatedClient->moveClientFolder($originalData->url, $updatedData['url']);\n                $updatedClient->deleteClientFolder($originalData->url);\n              } catch (Exception $e) {\n                // handle exception\n              }\n            }\n            printf(\n                '<p class=\"alert alert-success\">%s%s</p>',\n                '<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>',\n                $PMF_LANG['ad_config_saved']\n            );\n          } else {\n            printf(\n                '<p class=\"alert alert-danger\">%s%s<br/>%s</p>',\n                '<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>',\n                $PMF_LANG['ad_entryins_fail'],\n                $faqConfig->getDb()->error()\n            );\n          }\n        }\n    }\n    ?>\n  <table class=\"table\">\n    <thead>\n    <tr>\n      <th>#</th>\n      <th><?= $PMF_LANG['ad_instance_url'] ?></th>\n      <th><?= $PMF_LANG['ad_instance_path'] ?></th>\n      <th colspan=\"3\"><?= $PMF_LANG['ad_instance_name'] ?></th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php\n    foreach ($instance->getAllInstances() as $site) :\n        $currentInstance = new Instance($faqConfig);\n        $currentInstance->getInstanceById($site->id);\n        $currentInstance->setId($site->id);\n        ?>\n      <tr id=\"row-instance-<?= $site->id ?>\">\n        <td><?= $site->id ?></td>\n        <td>\n          <a href=\"<?= Strings::htmlentities($site->url . $site->instance, ENT_QUOTES) ?>\">\n                <?= Strings::htmlentities($site->url, ENT_QUOTES) ?>\n          </a>\n        </td>\n        <td><?= Strings::htmlentities($site->instance, ENT_QUOTES) ?></td>\n        <td><?= Strings::htmlentities($site->comment, ENT_QUOTES) ?></td>\n        <td>\n          <a href=\"?action=editinstance&instance_id=<?= $site->id ?>\" class=\"btn btn-info\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n          </a>\n        </td>\n        <td>\n            <?php if ($currentInstance->getConfig('isMaster') !== true) : ?>\n              <a href=\"javascript:;\" id=\"delete-instance-<?= $site->id ?>\"\n                 class=\"btn btn-danger pmf-instance-delete\"\n                 data-csrf-token=\"<?= $user->getCsrfTokenFromSession() ?>\">\n                <i aria-hidden=\"true\" class=\"fa fa-trash\"></i>\n              </a>\n            <?php endif; ?>\n        </td>\n      </tr>\n    <?php endforeach; ?>\n    </tbody>\n  </table>\n\n  <div class=\"modal fade\" id=\"pmf-modal-add-instance\">\n    <div class=\"modal-dialog modal-lg\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h4><?= $PMF_LANG['ad_instance_add'] ?></h4>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n          <form action=\"#\" method=\"post\" accept-charset=\"utf-8\">\n            <input type=\"hidden\" name=\"csrf\" id=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"url\">\n                  <?= $PMF_LANG['ad_instance_url'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <div class=\"input-group\">\n                  <div class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">https://</div>\n                  </div>\n                  <input class=\"form-control\" type=\"text\" name=\"url\" id=\"url\" required>\n                  <div class=\"input-group-append\">\n                    <div class=\"input-group-text\">.<?= $_SERVER['SERVER_NAME'] ?></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"instance\">\n                  <?= $PMF_LANG['ad_instance_path'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"instance\" id=\"instance\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"comment\">\n                  <?= $PMF_LANG['ad_instance_name'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"comment\" id=\"comment\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"email\">\n                  <?= $PMF_LANG['ad_instance_email'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"email\" name=\"email\" id=\"email\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"admin\">\n                  <?= $PMF_LANG['ad_instance_admin'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"text\" name=\"admin\" id=\"admin\" required>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-form-label col-lg-4\" for=\"password\">\n                  <?= $PMF_LANG['ad_instance_password'] ?>:\n              </label>\n              <div class=\"col-lg-8\">\n                <input class=\"form-control\" type=\"password\" autocomplete=\"off\" name=\"password\" id=\"password\" required>\n              </div>\n            </div>\n          </form>\n        </div>\n        <div class=\"modal-footer\">\n          <p><?= $PMF_LANG['ad_instance_hint'] ?></p>\n          <button class=\"btn btn-primary pmf-instance-add\">\n              <?= $PMF_LANG['ad_instance_button'] ?>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    (function() {\n\n      // Add instance\n      $('.pmf-instance-add').on('click', function(event) {\n        event.preventDefault();\n        const csrf = $('#csrf').val();\n        const url = $('#url').val();\n        const instance = $('#instance').val();\n        const comment = $('#comment').val();\n        const email = $('#email').val();\n        const admin = $('#admin').val();\n        const password = $('#password').val();\n\n        const escape = (unsafe) => {\n          return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('\"', '&quot;').replaceAll(\"'\", '&#039;');\n        }\n\n        $.ajax({\n          url: 'index.php',\n          type: 'GET',\n          data: {\n            action: 'ajax', ajax: 'config', ajaxaction: 'add_instance', csrf: csrf, url: url,\n            instance: instance, comment: comment, email: email, admin: admin, password: password,\n          },\n          success: (data) => {\n            $('.modal').modal('hide');\n            $('.table tbody').append(\n              '<tr id=\"row-instance-' + data.added + '\">' +\n              '<td>' + data.added + '</td>' +\n              '<td><a href=\"' + data.url + '\">' + data.url + '</a></td>' +\n              '<td>' + escape(instance) + '</td>' +\n              '<td>' + escape(comment) + '</td>' +\n              '<td>' +\n              '<a href=\"?action=editinstance&instance_id=' + data.added +\n              '\" class=\"btn btn-info\"><i aria-hidden=\"true\" class=\"fa fa-pencil\"></i></a>' +\n              '</td>' +\n              '<td>' +\n              '<a href=\"javascript:;\" id=\"delete-instance-' + data.added +\n              '\" class=\"btn btn-danger pmf-instance-delete\"><i aria-hidden=\"true\" class=\"fa fa-trash\"></i></a>' +\n              '</td>' +\n              '</tr>',\n            );\n          },\n          error: (data) => {\n            $('.table').after(\n              '<div class=\"alert alert-danger\">Could not add instance</div>',\n            );\n          }\n        });\n      });\n\n      // Delete instance\n      $('.pmf-instance-delete').click(function(event) {\n        event.preventDefault();\n        const targetId = event.target.id.split('-');\n        const id = targetId[2];\n        const csrf = this.getAttribute('data-csrf-token');\n\n        if (confirm('Are you sure?')) {\n          $.get('index.php',\n            { action: 'ajax', ajax: 'config', ajaxaction: 'delete_instance', instanceId: id, csrf: csrf },\n            function(data) {\n              if (typeof (data.deleted) === 'undefined') {\n                $('.table').after(\n                  '<div class=\"alert alert-danger\">' +\n                  '<?= $PMF_LANG['ad_instance_error_cannotdelete'] ?> ' + data.error +\n                  '</div>',\n                );\n              } else {\n                $('#row-instance-' + id).fadeOut('slow');\n              }\n            },\n            'json',\n          );\n        }\n      });\n\n    })();\n  </script>\n\n  </div>\n  </div>\n    <?php\n} else {\n    print $PMF_LANG['err_NotAuth'];\n}\n"], "filenames": ["phpmyfaq/admin/ajax.config.php", "phpmyfaq/admin/instances.php"], "buggy_code_start_loc": [66, 73], "buggy_code_end_loc": [66, 104], "fixing_code_start_loc": [67, 73], "fixing_code_end_loc": [74, 114], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.18.", "other": {"cve": {"id": "CVE-2023-5317", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-30T01:15:39.227", "lastModified": "2023-10-02T20:13:53.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.18."}, {"lang": "es", "value": "Cross-site Scripting (XSS)- almacenado en el repositorio de GitHub thorsten/phpmyfaq antes de la versi\u00f3n 3.1.18."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.18", "matchCriteriaId": "4AC7B224-C622-408D-A05F-74FE33C70B68"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/ec551bdf1566ede1e55f289888c446f877ad9a83", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/5e146e7c-60c7-498b-9ffe-fd4cb4ca8c54", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/ec551bdf1566ede1e55f289888c446f877ad9a83"}}