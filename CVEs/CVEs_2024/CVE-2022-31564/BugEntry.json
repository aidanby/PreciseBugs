{"buggy_code": ["import configparser\n\nfrom flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file\nimport socket\nimport os\nimport random\nimport copy\nfrom flask_sqlalchemy import SQLAlchemy, Model\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\nimport json\nimport base64\nfrom collections import namedtuple\n\nfrom app.common.decorator import return_500_if_errors\n\nscope = ['https://spreadsheets.google.com/feeds',\n         'https://www.googleapis.com/auth/drive']\n\nhostname = socket.gethostname()\nisLocal = None\n\nmunhak_rows_data = None\n\nif hostname[:7] == \"DESKTOP\":\n    isLocal = True\nelse:\n    isLocal = False\n\napp = Flask(__name__)\n\n\ndef update():\n\n        gc = gspread.authorize(credentials).open(\"\ubb38\ud559\ub530\uba39\uae30\")\n\n        wks = gc.get_worksheet(0)\n\n        rows = wks.get_all_values()\n        print(rows)\n        try:\n\n            data = []\n            for row in rows[1:]:\n                row_tuple = namedtuple(\"Munhak\", rows[0])(*row)\n                row_tuple = row_tuple._replace(keywords=json.loads(row_tuple.keywords))\n                if row_tuple.is_available == \"TRUE\":\n                    data.append(row_tuple)\n\n\n        except:\n            pass\n\n        global munhak_rows_data\n        munhak_rows_data = data\n        print(data)\n        # print(munhak_rows)\n        return\n\n\n\nif isLocal:\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    pg_db_username = config['DEFAULT']['LOCAL_DB_USERNAME']\n    pg_db_password = config['DEFAULT']['LOCAL_DB_PASSWORD']\n    pg_db_name = config['DEFAULT']['LOCAL_DB_NAME']\n    pg_db_hostname = config['DEFAULT']['LOCAL_DB_HOSTNAME']\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(\n        DB_USER=pg_db_username,\n        DB_PASS=pg_db_password,\n        DB_ADDR=pg_db_hostname,\n        DB_NAME=pg_db_name)\n\n    app.config[\"SECRET_KEY\"] = config['DEFAULT']['SECRET_KEY']\n\n    credentials = ServiceAccountCredentials.from_json_keyfile_name(config['DEFAULT']['GOOGLE_CREDENTIALS_PATH'], scope)\n\nelse:\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get('DATABASE_URL', None)\n    app.config[\"SECRET_KEY\"] = os.environ.get('SECRET_KEY', None)\n    print(os.environ.get('GOOGLE_CREDENTIALS', None))\n    print(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)))\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)), scope)\n\n\n\nupdate()\n\n\n\n@app.route('/')\ndef index():\n    munhak_rows = copy.deepcopy(munhak_rows_data)\n    data = {\n        \"total_munhak\" : len(munhak_rows),\n        \"source_list\" : sorted(set([munhak_row.source for munhak_row in munhak_rows]))\n    }\n    print(data)\n\n    session[\"quiz_count\"] = 0\n    return render_template(\"quiz/index.html\", data=data)\n\n\n@app.route(\"/get-quiz\")\ndef get_quiz():\n    if \"quiz_count\" not in session:\n        session[\"quiz_count\"] = 0\n        session[\"total_munhak\"] = len(munhak_rows_data)\n    if \"solved_quiz\" not in session:\n        session[\"solved_quiz\"] = []\n    session[\"result\"] = None\n\n    quiz_no = session[\"quiz_count\"] + 1\n    solved_quiz = session[\"solved_quiz\"]\n\n    if \"current_munhak\" not in session or session[\"current_munhak\"] is None:\n\n        # munhak_rows = Munhak.query.filter_by(is_available=True).all()\n        munhak_rows = copy.deepcopy(munhak_rows_data)\n\n        not_solved_munhak_rows = [munhak_row for munhak_row in munhak_rows if munhak_row.munhak_seq not in solved_quiz]\n\n        if len(not_solved_munhak_rows) == 0:\n            session[\"result\"] = True\n            return redirect(url_for(\"result\"))\n\n        correct_munhak_row = random.choice(not_solved_munhak_rows)\n\n        for _ in [munhak_row for munhak_row in munhak_rows if munhak_row.title == correct_munhak_row.title]:\n            munhak_rows.remove(_)\n\n        random.shuffle(munhak_rows)\n\n        option_munhak_rows = munhak_rows[0:3] + [correct_munhak_row]\n\n        random.shuffle(option_munhak_rows)\n        correct = option_munhak_rows.index(correct_munhak_row)\n        print(correct)\n\n        # correct = random.randrange(0, 4)\n        #\n        # answer_row = not_solved_munhak_rows[correct]\n        #\n        session[\"correct\"] = correct\n\n        hint = random.choice(correct_munhak_row.keywords)\n        hint = hint.replace(\"\\\\\", \"\")\n\n        session[\"current_munhak\"] = {\n            \"munhak_seq\": correct_munhak_row.munhak_seq,\n            \"source\": correct_munhak_row.source,\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"title\": correct_munhak_row.title,\n            \"writer\": correct_munhak_row.writer\n        }\n        session[\"options\"] = [munhak_row._asdict() for munhak_row in option_munhak_rows]\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"options\": [\n                f\"{munhak_row.writer}, \u300e{munhak_row.title}\u300f\" for munhak_row in option_munhak_rows\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n    else:\n        # print(hint)\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": session[\"current_munhak\"][\"category\"],\n            \"hint\": session[\"current_munhak\"][\"hint\"],\n            \"options\": [\n                f\"{munhak_row['writer']}, \u300e{munhak_row['title']}\u300f\" for munhak_row in session[\"options\"]\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n\n\n\n@app.route('/quiz')\ndef quiz():\n    return render_template(\"quiz/quiz_container.html\")\n\n\n@app.route(\"/answer\", methods=[\"GET\", \"POST\"])\ndef answer():\n    print(session)\n    option = request.form.get(\"option\", None)\n    if option is None or (not type(option) != int):\n        return abort(400)\n    option = int(option)\n    correct = session[\"correct\"]\n    if correct is None:\n        return abort(401)\n\n    current_munhak = session[\"current_munhak\"]\n    if current_munhak is None:\n        return abort(401)\n\n    if correct == option:\n        session[\"quiz_count\"] += 1\n        session[\"solved_quiz\"].append(current_munhak[\"munhak_seq\"])\n        session[\"current_munhak\"] = None\n        # current_munhak = jsonify(current_munhak)\n        return \"success\"\n    else:\n\n        if \"quiz_count\" not in session:\n            session[\"quiz_count\"] = 0\n        if \"solved_quiz\" not in session:\n            # session[\"solved_quiz\"] = []\n            session[\"result\"] = False\n\n        return \"failed\", 404\n\n\n\n@app.route(\"/result\", methods=[\"GET\", \"POST\"])\ndef result():\n\n\n    is_success = session[\"result\"]\n\n\n    data = {\n        \"is_success\" : is_success,\n        \"solved_count\" : session[\"quiz_count\"],\n        \"correct\" : session[\"correct\"],\n        \"current_munhak\" : session[\"current_munhak\"]\n    }\n    session[\"quiz_count\"] = 0\n    session[\"solved_quiz\"] = []\n    session[\"current_munhak\"] = None\n\n    print(data)\n    return render_template(\"quiz/result.html\", data = data)\n\n\n@app.route('/update')\n\ndef update_():\n\n    if request.args.get(\"key\", None) != app.config[\"SECRET_KEY\"]:\n        return \"error\"\n\n    update()\n    session.clear()\n    return f\"success! {len(munhak_rows_data)}\"\n\n\n@app.route('/images/<path:path>')\ndef get_image(path):\n    def get_absolute_path(path):\n        import os\n        script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in\n        rel_path = path\n        abs_file_path = os.path.join(script_dir, rel_path)\n        return abs_file_path\n\n    return send_file(\n        get_absolute_path(f\"./images/{path}\"),\n        mimetype='image/png',\n        attachment_filename='snapshot.png',\n        cache_timeout=0\n    )\n\n\nif __name__ == '__main__':\n\n    app.run()\n"], "fixing_code": ["import configparser\n\nfrom flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file\nfrom werkzeug.utils import safe_join\nimport socket\nimport os\nimport random\nimport copy\nfrom flask_sqlalchemy import SQLAlchemy, Model\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\nimport json\nimport base64\nfrom collections import namedtuple\n\nfrom app.common.decorator import return_500_if_errors\n\nscope = ['https://spreadsheets.google.com/feeds',\n         'https://www.googleapis.com/auth/drive']\n\nhostname = socket.gethostname()\nisLocal = None\n\nmunhak_rows_data = None\n\nif hostname[:7] == \"DESKTOP\":\n    isLocal = True\nelse:\n    isLocal = False\n\napp = Flask(__name__)\n\n\ndef update():\n\n        gc = gspread.authorize(credentials).open(\"\ubb38\ud559\ub530\uba39\uae30\")\n\n        wks = gc.get_worksheet(0)\n\n        rows = wks.get_all_values()\n        print(rows)\n        try:\n\n            data = []\n            for row in rows[1:]:\n                row_tuple = namedtuple(\"Munhak\", rows[0])(*row)\n                row_tuple = row_tuple._replace(keywords=json.loads(row_tuple.keywords))\n                if row_tuple.is_available == \"TRUE\":\n                    data.append(row_tuple)\n\n\n        except:\n            pass\n\n        global munhak_rows_data\n        munhak_rows_data = data\n        print(data)\n        # print(munhak_rows)\n        return\n\n\n\nif isLocal:\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    pg_db_username = config['DEFAULT']['LOCAL_DB_USERNAME']\n    pg_db_password = config['DEFAULT']['LOCAL_DB_PASSWORD']\n    pg_db_name = config['DEFAULT']['LOCAL_DB_NAME']\n    pg_db_hostname = config['DEFAULT']['LOCAL_DB_HOSTNAME']\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(\n        DB_USER=pg_db_username,\n        DB_PASS=pg_db_password,\n        DB_ADDR=pg_db_hostname,\n        DB_NAME=pg_db_name)\n\n    app.config[\"SECRET_KEY\"] = config['DEFAULT']['SECRET_KEY']\n\n    credentials = ServiceAccountCredentials.from_json_keyfile_name(config['DEFAULT']['GOOGLE_CREDENTIALS_PATH'], scope)\n\nelse:\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get('DATABASE_URL', None)\n    app.config[\"SECRET_KEY\"] = os.environ.get('SECRET_KEY', None)\n    print(os.environ.get('GOOGLE_CREDENTIALS', None))\n    print(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)))\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)), scope)\n\n\n\nupdate()\n\n\n\n@app.route('/')\ndef index():\n    munhak_rows = copy.deepcopy(munhak_rows_data)\n    data = {\n        \"total_munhak\" : len(munhak_rows),\n        \"source_list\" : sorted(set([munhak_row.source for munhak_row in munhak_rows]))\n    }\n    print(data)\n\n    session[\"quiz_count\"] = 0\n    return render_template(\"quiz/index.html\", data=data)\n\n\n@app.route(\"/get-quiz\")\ndef get_quiz():\n    if \"quiz_count\" not in session:\n        session[\"quiz_count\"] = 0\n        session[\"total_munhak\"] = len(munhak_rows_data)\n    if \"solved_quiz\" not in session:\n        session[\"solved_quiz\"] = []\n    session[\"result\"] = None\n\n    quiz_no = session[\"quiz_count\"] + 1\n    solved_quiz = session[\"solved_quiz\"]\n\n    if \"current_munhak\" not in session or session[\"current_munhak\"] is None:\n\n        # munhak_rows = Munhak.query.filter_by(is_available=True).all()\n        munhak_rows = copy.deepcopy(munhak_rows_data)\n\n        not_solved_munhak_rows = [munhak_row for munhak_row in munhak_rows if munhak_row.munhak_seq not in solved_quiz]\n\n        if len(not_solved_munhak_rows) == 0:\n            session[\"result\"] = True\n            return redirect(url_for(\"result\"))\n\n        correct_munhak_row = random.choice(not_solved_munhak_rows)\n\n        for _ in [munhak_row for munhak_row in munhak_rows if munhak_row.title == correct_munhak_row.title]:\n            munhak_rows.remove(_)\n\n        random.shuffle(munhak_rows)\n\n        option_munhak_rows = munhak_rows[0:3] + [correct_munhak_row]\n\n        random.shuffle(option_munhak_rows)\n        correct = option_munhak_rows.index(correct_munhak_row)\n        print(correct)\n\n        # correct = random.randrange(0, 4)\n        #\n        # answer_row = not_solved_munhak_rows[correct]\n        #\n        session[\"correct\"] = correct\n\n        hint = random.choice(correct_munhak_row.keywords)\n        hint = hint.replace(\"\\\\\", \"\")\n\n        session[\"current_munhak\"] = {\n            \"munhak_seq\": correct_munhak_row.munhak_seq,\n            \"source\": correct_munhak_row.source,\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"title\": correct_munhak_row.title,\n            \"writer\": correct_munhak_row.writer\n        }\n        session[\"options\"] = [munhak_row._asdict() for munhak_row in option_munhak_rows]\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"options\": [\n                f\"{munhak_row.writer}, \u300e{munhak_row.title}\u300f\" for munhak_row in option_munhak_rows\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n    else:\n        # print(hint)\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": session[\"current_munhak\"][\"category\"],\n            \"hint\": session[\"current_munhak\"][\"hint\"],\n            \"options\": [\n                f\"{munhak_row['writer']}, \u300e{munhak_row['title']}\u300f\" for munhak_row in session[\"options\"]\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n\n\n\n@app.route('/quiz')\ndef quiz():\n    return render_template(\"quiz/quiz_container.html\")\n\n\n@app.route(\"/answer\", methods=[\"GET\", \"POST\"])\ndef answer():\n    print(session)\n    option = request.form.get(\"option\", None)\n    if option is None or (not type(option) != int):\n        return abort(400)\n    option = int(option)\n    correct = session[\"correct\"]\n    if correct is None:\n        return abort(401)\n\n    current_munhak = session[\"current_munhak\"]\n    if current_munhak is None:\n        return abort(401)\n\n    if correct == option:\n        session[\"quiz_count\"] += 1\n        session[\"solved_quiz\"].append(current_munhak[\"munhak_seq\"])\n        session[\"current_munhak\"] = None\n        # current_munhak = jsonify(current_munhak)\n        return \"success\"\n    else:\n\n        if \"quiz_count\" not in session:\n            session[\"quiz_count\"] = 0\n        if \"solved_quiz\" not in session:\n            # session[\"solved_quiz\"] = []\n            session[\"result\"] = False\n\n        return \"failed\", 404\n\n\n\n@app.route(\"/result\", methods=[\"GET\", \"POST\"])\ndef result():\n\n\n    is_success = session[\"result\"]\n\n\n    data = {\n        \"is_success\" : is_success,\n        \"solved_count\" : session[\"quiz_count\"],\n        \"correct\" : session[\"correct\"],\n        \"current_munhak\" : session[\"current_munhak\"]\n    }\n    session[\"quiz_count\"] = 0\n    session[\"solved_quiz\"] = []\n    session[\"current_munhak\"] = None\n\n    print(data)\n    return render_template(\"quiz/result.html\", data = data)\n\n\n@app.route('/update')\n\ndef update_():\n\n    if request.args.get(\"key\", None) != app.config[\"SECRET_KEY\"]:\n        return \"error\"\n\n    update()\n    session.clear()\n    return f\"success! {len(munhak_rows_data)}\"\n\n\n@app.route('/images/<path:path>')\ndef get_image(path):\n    def get_absolute_path(path):\n        import os\n        script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in\n        rel_path = path\n        abs_file_path = safe_join(script_dir, rel_path)\n        return abs_file_path\n\n    return send_file(\n        get_absolute_path(f\"./images/{path}\"),\n        mimetype='image/png',\n        attachment_filename='snapshot.png',\n        cache_timeout=0\n    )\n\n\nif __name__ == '__main__':\n\n    app.run()\n"], "filenames": ["app.py"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [271], "fixing_code_start_loc": [4], "fixing_code_end_loc": [272], "type": "CWE-22", "message": "The woduq1414/munhak-moa repository before 2022-05-03 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.", "other": {"cve": {"id": "CVE-2022-31564", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-11T01:15:10.550", "lastModified": "2022-07-15T15:08:35.143", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The woduq1414/munhak-moa repository before 2022-05-03 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely."}, {"lang": "es", "value": "El repositorio woduq1414/munhak-moa versiones anteriores a 03-05-2022 en GitHub, permite un salto de ruta absoluto porque la funci\u00f3n send_file de Flask es usada de forma no segura"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:munhak:munhak-moa:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-05-03", "matchCriteriaId": "1DEFEA82-BC76-4DB3-B70D-A8B53FEAE5EF"}]}]}], "references": [{"url": "https://github.com/github/securitylab/issues/669#issuecomment-1117265726", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/woduq1414/munhak-moa/commit/e8f800373b20cb22de70c7a994325b8903877da0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/woduq1414/munhak-moa/commit/e8f800373b20cb22de70c7a994325b8903877da0"}}