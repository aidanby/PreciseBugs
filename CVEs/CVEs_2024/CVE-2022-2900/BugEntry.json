{"buggy_code": ["\"use strict\"\n\n// Dependencies\nimport parsePath from \"parse-path\";\nimport normalizeUrl from \"normalize-url\";\n\n/**\n * parseUrl\n * Parses the input url.\n *\n * **Note**: This *throws* if invalid urls are provided.\n *\n * @name parseUrl\n * @function\n * @param {String} url The input url.\n * @param {Boolean|Object} normalize Whether to normalize the url or not.\n *                         Default is `false`. If `true`, the url will\n *                         be normalized. If an object, it will be the\n *                         options object sent to [`normalize-url`](https://github.com/sindresorhus/normalize-url).\n *\n *                         For SSH urls, normalize won't work.\n *\n * @return {Object} An object containing the following fields:\n *\n *    - `protocols` (Array): An array with the url protocols (usually it has one element).\n *    - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *    - `port` (null|Number): The domain port.\n *    - `resource` (String): The url domain (including subdomains).\n *    - `user` (String): The authentication user (usually for ssh urls).\n *    - `pathname` (String): The url pathname.\n *    - `hash` (String): The url hash.\n *    - `search` (String): The url querystring value.\n *    - `href` (String): The input url.\n *    - `query` (Object): The url querystring, parsed as object.\n */\nconst parseUrl = (url, normalize = false) => {\n\n    // Constants\n    const GIT_RE = /(^(git@|http(s)?:\\/\\/)([\\w\\.\\-@]+)(\\/|:))(([\\~,\\.\\w,\\-,\\_,\\/]+)(.git){0,1}((\\/){0,1}))/\n\n    if (typeof url !== \"string\" || !url.trim()) {\n        const err = new Error(\"Invalid url.\")\n        err.subject_url = url\n        throw err\n    }\n\n    if (normalize) {\n        if (typeof normalize !== \"object\") {\n            normalize = {\n                stripHash: false\n            }\n        }\n        url = normalizeUrl(url, normalize)\n    }\n\n    const parsed = parsePath(url)\n\n    // Potential git-ssh urls\n    if (parsed.protocol === \"file\") {\n        const matched  = parsed.href.match(GIT_RE)\n        if (matched) {\n            parsed.protocols = [\"ssh\"]\n            parsed.protocol = \"ssh\"\n            parsed.resource = matched[4]\n            parsed.host = matched[4]\n            parsed.user = \"git\"\n            parsed.pathname = `/${matched[6]}`\n        }\n    }\n\n    return parsed;\n}\n\nexport default parseUrl;\n", "// Dependencies\nimport parseUrl from \"../lib/index.js\";\nimport tester from \"tester\";\nimport normalizeUrl from \"normalize-url\";\n\nconst INPUTS = [\n    [\n        \"http://ionicabizau.net/blog\"\n      , {\n            protocols: [ \"http\" ]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/blog\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        \"//ionicabizau.net/foo.js\"\n      , {\n            protocols: [\"http\"]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/foo.js\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        \"http://domain.com/path/name#some-hash?foo=bar\"\n      , {\n            protocols: [\"http\"]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"domain.com\"\n          , host: \"domain.com\"\n          , user: \"\"\n          , pathname: \"/path/name\"\n          , hash: \"some-hash?foo=bar\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        [\"git+ssh://git@host.xz/path/name.git\", false]\n      , {\n            protocols: [\"git\", \"ssh\"]\n          , protocol: \"git\"\n          , port: \"\"\n          , resource: \"host.xz\"\n          , host: \"host.xz\"\n          , user: \"git\"\n          , pathname: \"/path/name.git\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        [\"git@github.com:IonicaBizau/git-stats.git\", false]\n      , {\n            protocols: [\"ssh\"]\n          , protocol: \"ssh\"\n          , port: \"\"\n          , resource: \"github.com\"\n          , host: \"github.com\"\n          , user: \"git\"\n          , pathname: \"/IonicaBizau/git-stats.git\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        [\"http://ionicabizau.net/with-true-normalize\", true]\n      , {\n            protocols: [ \"http\" ]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/with-true-normalize\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        [\"file:///etc/passwd?#http://a:1:1\", false]\n      , {\n            protocols: [ \"file\" ]\n          , protocol: \"file\"\n          , port: \"\"\n          , resource: \"\"\n          , host: \"\"\n          , user: \"\"\n          , pathname: \"/etc/passwd\"\n          , hash: \"http://a:1:1\"\n          , search: \"\"\n          , query: {}\n        }\n    ]\n  , [\n        [\"git@github.my-enterprise.com:my-org/my-repo.git\", false],\n        {\n            protocols: [ 'ssh' ]\n            , protocol: 'ssh'\n            , port: ''\n            , resource: 'github.my-enterprise.com'\n            , host: 'github.my-enterprise.com'\n            , user: 'git'\n            , password: ''\n            , pathname: '/my-org/my-repo.git'\n            , hash: ''\n            , search: ''\n            , query: {}\n        }\n    ]\n  , [\n      [\"git@github.com:halup/Cloud.API.Gateway.git\", false]\n    , {\n          protocols: [ \"ssh\" ]\n        , protocol: \"ssh\"\n        , port: \"\"\n        , resource: \"github.com\"\n        , host: \"github.com\"\n        , user: \"git\"\n        , pathname: \"/halup/Cloud.API.Gateway.git\"\n        , hash: \"\"\n        , search: \"\"\n        , query: {}\n      }\n  ]\n];\n\ntester.describe(\"check urls\", test => {\n    INPUTS.forEach(function (c) {\n        let url = Array.isArray(c[0]) ? c[0][0] : c[0]\n        test.should(\"support \" + url, () => {\n            const res = parseUrl(url, c[0][1] !== false);\n\n            if (c[0][1] !== false) {\n                url = normalizeUrl(url, {\n                    stripHash: false\n                })\n            }\n\n            c[1].href = c[1].href || url\n            c[1].password = c[1].password || \"\"\n            test.expect(res).toEqual(c[1]);\n        });\n    });\n\n    test.should(\"throw if url is empty\", () => {\n        test.expect(() => {\n            parseUrl(\"\")\n        }).toThrow(/invalid url/i)\n    })\n});\n"], "fixing_code": ["\"use strict\"\n\n// Dependencies\nimport parsePath from \"parse-path\";\nimport normalizeUrl from \"normalize-url\";\n\n/**\n * parseUrl\n * Parses the input url.\n *\n * **Note**: This *throws* if invalid urls are provided.\n *\n * @name parseUrl\n * @function\n * @param {String} url The input url.\n * @param {Boolean|Object} normalize Whether to normalize the url or not.\n *                         Default is `false`. If `true`, the url will\n *                         be normalized. If an object, it will be the\n *                         options object sent to [`normalize-url`](https://github.com/sindresorhus/normalize-url).\n *\n *                         For SSH urls, normalize won't work.\n *\n * @return {Object} An object containing the following fields:\n *\n *    - `protocols` (Array): An array with the url protocols (usually it has one element).\n *    - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *    - `port` (null|Number): The domain port.\n *    - `resource` (String): The url domain (including subdomains).\n *    - `user` (String): The authentication user (usually for ssh urls).\n *    - `pathname` (String): The url pathname.\n *    - `hash` (String): The url hash.\n *    - `search` (String): The url querystring value.\n *    - `href` (String): The input url.\n *    - `query` (Object): The url querystring, parsed as object.\n *    - `parse_failed` (Boolean): Whether the parsing failed or not.\n */\nconst parseUrl = (url, normalize = false) => {\n\n    // Constants\n    const GIT_RE = /(^(git@|http(s)?:\\/\\/)([\\w\\.\\-@]+)(\\/|:))(([\\~,\\.\\w,\\-,\\_,\\/]+)(.git){0,1}((\\/){0,1}))/\n\n    const throwErr = msg => {\n        const err = new Error(msg)\n        err.subject_url = url\n        throw err\n    }\n\n    if (typeof url !== \"string\" || !url.trim()) {\n        throwErr(\"Invalid url.\")\n    }\n\n    if (url.length > parseUrl.MAX_INPUT_LENGTH) {\n        throwErr(\"Input exceeds maximum length. If needed, change the value of parseUrl.MAX_INPUT_LENGTH.\")\n    }\n\n    if (normalize) {\n        if (typeof normalize !== \"object\") {\n            normalize = {\n                stripHash: false\n            }\n        }\n        url = normalizeUrl(url, normalize)\n    }\n\n    const parsed = parsePath(url)\n\n    // Potential git-ssh urls\n    if (parsed.parse_failed) {\n        const matched  = parsed.href.match(GIT_RE)\n        if (matched) {\n            parsed.protocols = [\"ssh\"]\n            parsed.protocol = \"ssh\"\n            parsed.resource = matched[4]\n            parsed.host = matched[4]\n            parsed.user = \"git\"\n            parsed.pathname = `/${matched[6]}`\n            parsed.parse_failed = false\n        } else {\n            throwErr(\"URL parsing failed.\")\n        }\n    }\n\n    return parsed;\n}\n\nparseUrl.MAX_INPUT_LENGTH = 2048\n\nexport default parseUrl;\n", "// Dependencies\nimport parseUrl from \"../lib/index.js\";\nimport tester from \"tester\";\nimport normalizeUrl from \"normalize-url\";\n\nconst INPUTS = [\n    [\n        \"http://ionicabizau.net/blog\"\n      , {\n            protocols: [ \"http\" ]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/blog\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        \"//ionicabizau.net/foo.js\"\n      , {\n            protocols: [\"http\"]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/foo.js\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        \"http://domain.com/path/name#some-hash?foo=bar\"\n      , {\n            protocols: [\"http\"]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"domain.com\"\n          , host: \"domain.com\"\n          , user: \"\"\n          , pathname: \"/path/name\"\n          , hash: \"some-hash?foo=bar\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        [\"git+ssh://git@host.xz/path/name.git\", false]\n      , {\n            protocols: [\"git\", \"ssh\"]\n          , protocol: \"git\"\n          , port: \"\"\n          , resource: \"host.xz\"\n          , host: \"host.xz\"\n          , user: \"git\"\n          , pathname: \"/path/name.git\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        [\"git@github.com:IonicaBizau/git-stats.git\", false]\n      , {\n            protocols: [\"ssh\"]\n          , protocol: \"ssh\"\n          , port: \"\"\n          , resource: \"github.com\"\n          , host: \"github.com\"\n          , user: \"git\"\n          , pathname: \"/IonicaBizau/git-stats.git\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        [\"http://ionicabizau.net/with-true-normalize\", true]\n      , {\n            protocols: [ \"http\" ]\n          , protocol: \"http\"\n          , port: \"\"\n          , resource: \"ionicabizau.net\"\n          , host: \"ionicabizau.net\"\n          , user: \"\"\n          , pathname: \"/with-true-normalize\"\n          , hash: \"\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        [\"file:///etc/passwd?#http://a:1:1\", false]\n      , {\n            protocols: [ \"file\" ]\n          , protocol: \"file\"\n          , port: \"\"\n          , resource: \"\"\n          , host: \"\"\n          , user: \"\"\n          , pathname: \"/etc/passwd\"\n          , hash: \"http://a:1:1\"\n          , search: \"\"\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n        [\"git@github.my-enterprise.com:my-org/my-repo.git\", false],\n        {\n            protocols: [ 'ssh' ]\n          , protocol: 'ssh'\n          , port: ''\n          , resource: 'github.my-enterprise.com'\n          , host: 'github.my-enterprise.com'\n          , user: 'git'\n          , password: ''\n          , pathname: '/my-org/my-repo.git'\n          , hash: ''\n          , search: ''\n          , query: {}\n          , parse_failed: false\n        }\n    ]\n  , [\n      [\"git@github.com:halup/Cloud.API.Gateway.git\", false]\n    , {\n          protocols: [ \"ssh\" ]\n        , protocol: \"ssh\"\n        , port: \"\"\n        , resource: \"github.com\"\n        , host: \"github.com\"\n        , user: \"git\"\n        , pathname: \"/halup/Cloud.API.Gateway.git\"\n        , hash: \"\"\n        , search: \"\"\n        , query: {}\n        , parse_failed: false\n      }\n  ]\n];\n\ntester.describe(\"check urls\", test => {\n    INPUTS.forEach(function (c) {\n        let url = Array.isArray(c[0]) ? c[0][0] : c[0]\n        test.should(\"support \" + url, () => {\n            const res = parseUrl(url, c[0][1] !== false);\n\n            if (c[0][1] !== false) {\n                url = normalizeUrl(url, {\n                    stripHash: false\n                })\n            }\n\n            c[1].href = c[1].href || url\n            c[1].password = c[1].password || \"\"\n            test.expect(res).toEqual(c[1]);\n        });\n    });\n\n    test.should(\"throw if url is empty\", () => {\n        test.expect(() => {\n            parseUrl(\"\")\n        }).toThrow(/invalid url/i)\n    })\n\n    test.should(\"throw if url is too long\", () => {\n        parseUrl.MAX_INPUT_LENGTH = 10\n        test.expect(() => {\n            parseUrl(\"https://domain.com/\")\n        }).toThrow(/input exceeds maximum length/i)\n    })\n\n    test.should(\"throw if url is invalid\", () => {\n        test.expect(() => {\n            parseUrl(\"foo\")\n        }).toThrow(/url parsing failed/i)\n    })\n});\n"], "filenames": ["lib/index.js", "test/index.js"], "buggy_code_start_loc": [34, 19], "buggy_code_end_loc": [73, 167], "fixing_code_start_loc": [35, 20], "fixing_code_end_loc": [88, 190], "type": "CWE-918", "message": "Server-Side Request Forgery (SSRF) in GitHub repository ionicabizau/parse-url prior to 8.1.0.", "other": {"cve": {"id": "CVE-2022-2900", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-14T11:15:47.513", "lastModified": "2022-09-16T02:58:58.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Server-Side Request Forgery (SSRF) in GitHub repository ionicabizau/parse-url prior to 8.1.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Server-Side Request Forgery (SSRF) en el repositorio de GitHub ionicabizau/parse-url versiones anteriores a 8.1.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:parse-url_project:parse-url:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.0", "matchCriteriaId": "8093A003-0081-457A-BB8D-D56A119FAC15"}]}]}], "references": [{"url": "https://github.com/ionicabizau/parse-url/commit/b88c81df8f4c5168af454eaa4f92afa9349e4e13", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/1b4c972a-abc8-41eb-a2e1-696db746b5fd", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ionicabizau/parse-url/commit/b88c81df8f4c5168af454eaa4f92afa9349e4e13"}}