{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for product attachments (in /product/form page).\n */\nclass AttachementProductController extends FrameworkBundleAdminController\n{\n    /**\n     * Manage form add product attachment.\n     *\n     * @param int $idProduct\n     * @param Request $request\n     *\n     * @return string\n     */\n    public function addAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $legacyContext = $this->get('prestashop.adapter.legacy.context');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!$product || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $form = $this->createForm(\n            'PrestaShopBundle\\Form\\Admin\\Product\\ProductAttachement',\n            null,\n            array('csrf_protection' => false)\n        );\n\n        $form->handleRequest($request);\n\n        if ($form->isValid()) {\n            $data = $form->getData();\n            $res = $adminProductWrapper->processAddAttachment($product, $data, $legacyContext->getLanguages());\n            if ($res) {\n                $res->real_name = $data['name'];\n                $response->setData($res);\n            }\n        } else {\n            $response->setStatusCode(400);\n            $response->setData($this->getFormErrorsForJS($form));\n        }\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CombinationController extends FrameworkBundleAdminController\n{\n    public function generateCombinationFormAction($combinationIds)\n    {\n        $response = new Response();\n\n        $combinationIds = explode('-', $combinationIds);\n        if ($combinationIds === false || count($combinationIds) == 0) {\n            return $response;\n        }\n\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $combinations = $combinationDataProvider->getFormCombinations($combinationIds, (int) $this->getContext()->language->id);\n\n        $formFactory = $this->get('form.factory');\n        foreach ($combinations as $combinationId => $combination) {\n            $forms[] = $formFactory->createNamed(\n                \"combination_$combinationId\",\n                ProductCombination::class,\n                $combination\n            )->createView();\n        }\n\n        return $response->setContent($this->renderView(\n            '@Product/ProductPage/Forms/form_combination_collection.html.twig',\n            array(\n                'combinationForms' => $forms,\n            )\n        ));\n    }\n\n    /**\n     * get All Combinations for a product.\n     *\n     * @param int $idProduct The product id\n     *\n     * @return string Json\n     */\n    public function getProductCombinationsAction($idProduct)\n    {\n        $response = new JsonResponse();\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get combinations\n\n        $modelMapper = $this->get('prestashop.adapter.admin.model.product');\n\n        $combinations = $modelMapper->getAttributesResume($product);\n\n        $combinationList = array();\n\n        if (is_array($combinations)) {\n            foreach ($combinations as $combination) {\n                $combinationList[] = ['id' => $combination['id_product_attribute'], 'name' => $combination['attribute_designation']];\n            }\n        }\n\n        $response->setData($combinationList);\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse DateTime;\nuse Exception;\nuse PrestaShop\\PrestaShop\\Adapter\\Product\\AdminProductWrapper;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityDataInconsistencyException;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityNotFoundException;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductSpecificPrice as SpecificPriceFormType;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass SpecificPriceController extends FrameworkBundleAdminController\n{\n    /**\n     * get specific price list for a product.\n     *\n     * @param $idProduct The product ID\n     *\n     * @return string JSON\n     */\n    public function listAction($idProduct)\n    {\n        $response = new JsonResponse();\n\n        $contextAdapter = $this->get('prestashop.adapter.legacy.context');\n        $locales = $contextAdapter->getLanguages();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $shopContextAdapter = $this->get('prestashop.adapter.shop.context');\n        $shops = $shopContextAdapter->getShops();\n        $countries = $this->get('prestashop.adapter.data_provider.country')->getCountries($locales[0]['id_lang']);\n        $currencies = $this->get('prestashop.adapter.data_provider.currency')->getCurrencies();\n        $groups = $this->get('prestashop.adapter.data_provider.group')->getGroups($locales[0]['id_lang']);\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n        if (!is_object($product) || empty($product->id)) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n\n            return $response;\n        }\n\n        $response->setData($adminProductWrapper->getSpecificPricesList(\n            $product,\n            $contextAdapter->getContext()->currency,\n            $shops,\n            $currencies,\n            $countries,\n            $groups\n        ));\n\n        return $response;\n    }\n\n    /**\n     * Add specific price Form process.\n     *\n     * @param Request $request The request\n     *\n     * @return string\n     */\n    public function addAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $errors = $adminProductWrapper->processProductSpecificPrice($idProduct, $request->get('form')['step2']['specific_price']);\n\n        if (!empty($errors)) {\n            $response->setData(implode(', ', $errors));\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Get one specific price list for a product.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/ProductPage/Forms/form_specific_price.html.twig\")\n     *\n     * @param int $idSpecificPrice\n     *\n     * @return array\n     */\n    public function getUpdateFormAction($idSpecificPrice)\n    {\n        /** @var AdminProductWrapper $adminProductWrapper */\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n\n        try {\n            $price = $adminProductWrapper->getSpecificPriceDataById($idSpecificPrice);\n        } catch (EntityNotFoundException $e) {\n            $message = $this->trans(\n                'Cannot find specific price %price%',\n                'Admin.Catalog.Notification',\n                ['price' => $idSpecificPrice]\n            );\n\n            return new Response($message, Response::HTTP_BAD_REQUEST);\n        }\n        $formData = $this->formatSpecificPriceToPrefillForm($idSpecificPrice, $price);\n\n        $options = [\n            'id_product' => $price->id_product,\n            'selected_product_attribute' => $price->id_product_attribute,\n        ];\n\n        $formBuilder = $this->createFormBuilder();\n        $formBuilder->add('modal', SpecificPriceFormType::class, $options);\n\n        $form = $formBuilder->getForm();\n        $form->setData($formData);\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $price->id_product);\n\n        return [\n            'form' => $form->createView()->offsetGet('modal'),\n            'has_combinations' => ($product->hasCombinations()),\n            'is_modal' => true,\n        ];\n    }\n\n    /**\n     * Update specific price Form process.\n     *\n     * @param int idSpecificPrice\n     * @param Request $request\n     *\n     * @return string\n     */\n    public function updateAction($idSpecificPrice, Request $request)\n    {\n        $response = new JsonResponse();\n        $formData = $request->get('form');\n\n        $idProduct = isset($formData['id_product']) ? $formData['id_product'] : null;\n        $formValues = $formData['modal'];\n\n        /** @var AdminProductWrapper $adminProductWrapper */\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $errors = $adminProductWrapper->processProductSpecificPrice($idProduct, $formValues, $idSpecificPrice);\n\n        if (!empty($errors)) {\n            $response->setData(implode(', ', $errors));\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete a specific price.\n     *\n     * @param int $idSpecificPrice The specific price ID\n     * @param Request $request The request\n     *\n     * @return string\n     */\n    public function deleteAction($idSpecificPrice, Request $request)\n    {\n        $response = new JsonResponse();\n\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $res = $adminProductWrapper->deleteSpecificPrice((int) $idSpecificPrice);\n\n        if ($res['status'] == 'error') {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        $response->setData($res['message']);\n\n        return $response;\n    }\n\n    /**\n     * @param int $id\n     * @param \\SpecificPrice $price\n     *\n     * @return array\n     */\n    private function formatSpecificPriceToPrefillForm($id, $price)\n    {\n        if ($price->reduction_type === 'percentage') {\n            $reduction = $price->reduction * 100;\n        } else {\n            $reduction = $price->reduction;\n        }\n        $formattedFormData = [\n            'sp_update_id' => $id,\n            'sp_id_shop' => $price->id_shop,\n            'sp_id_currency' => $price->id_currency,\n            'sp_id_country' => $price->id_country,\n            'sp_id_group' => $price->id_group,\n            'sp_id_customer' => null,\n            'sp_id_product_attribute' => $price->id_product_attribute,\n            'sp_from' => self::formatForDatePicker($price->from),\n            'sp_to' => self::formatForDatePicker($price->to),\n            'sp_from_quantity' => $price->from_quantity,\n            'sp_price' => ($price->price !== '-1.000000') ? $price->price : '',\n            'leave_bprice' => ($price->price === '-1.000000'),\n            'sp_reduction' => $reduction,\n            'sp_reduction_type' => $price->reduction_type,\n            'sp_reduction_tax' => $price->reduction_tax,\n        ];\n        if ($price->id_customer !== '0') {\n            $formattedFormData['sp_id_customer'] = ['data' => [$price->id_customer]];\n        }\n        $cleanedFormData = array_map(function ($item) {\n            if (!$item) {\n                return null;\n            }\n\n            return $item;\n        }, $formattedFormData);\n\n        return ['modal' => $cleanedFormData];\n    }\n\n    /**\n     * @param string $dateAsString\n     *\n     * @return string|null If date is 0000-00-00 00:00:00, null is returned\n     *\n     * @throws \\PrestaShopDatabaseExceptionCore if date is not valid\n     */\n    private static function formatForDatePicker($dateAsString)\n    {\n        if ('0000-00-00 00:00:00' === $dateAsString) {\n            return null;\n        }\n\n        try {\n            $dateTime = new DateTime($dateAsString);\n        } catch (Exception $e) {\n            throw new EntityDataInconsistencyException(sprintf('Found bad date for specific price: %s', $dateAsString));\n        }\n\n        return $dateTime->format('Y-m-d');\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for product attachments (in /product/form page).\n */\nclass AttachementProductController extends FrameworkBundleAdminController\n{\n    /**\n     * Manage form add product attachment.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $legacyContext = $this->get('prestashop.adapter.legacy.context');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!$product || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $form = $this->createForm(\n            'PrestaShopBundle\\Form\\Admin\\Product\\ProductAttachement',\n            null,\n            array('csrf_protection' => false)\n        );\n\n        $form->handleRequest($request);\n\n        if ($form->isValid()) {\n            $data = $form->getData();\n            $res = $adminProductWrapper->processAddAttachment($product, $data, $legacyContext->getLanguages());\n            if ($res) {\n                $res->real_name = $data['name'];\n                $response->setData($res);\n            }\n        } else {\n            $response->setStatusCode(400);\n            $response->setData($this->getFormErrorsForJS($form));\n        }\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CombinationController extends FrameworkBundleAdminController\n{\n    /**\n     * Generate combination\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @return Response\n     */\n    public function generateCombinationFormAction($combinationIds)\n    {\n        $response = new Response();\n\n        $combinationIds = explode('-', $combinationIds);\n        if ($combinationIds === false || count($combinationIds) == 0) {\n            return $response;\n        }\n\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $combinations = $combinationDataProvider->getFormCombinations($combinationIds, (int) $this->getContext()->language->id);\n\n        $formFactory = $this->get('form.factory');\n        foreach ($combinations as $combinationId => $combination) {\n            $forms[] = $formFactory->createNamed(\n                \"combination_$combinationId\",\n                ProductCombination::class,\n                $combination\n            )->createView();\n        }\n\n        return $response->setContent($this->renderView(\n            '@Product/ProductPage/Forms/form_combination_collection.html.twig',\n            array(\n                'combinationForms' => $forms,\n            )\n        ));\n    }\n\n    /**\n     * Get all Combinations for a product.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product id\n     *\n     * @return JsonResponse\n     */\n    public function getProductCombinationsAction($idProduct)\n    {\n        $response = new JsonResponse();\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get combinations\n\n        $modelMapper = $this->get('prestashop.adapter.admin.model.product');\n\n        $combinations = $modelMapper->getAttributesResume($product);\n\n        $combinationList = array();\n\n        if (is_array($combinations)) {\n            foreach ($combinations as $combination) {\n                $combinationList[] = ['id' => $combination['id_product_attribute'], 'name' => $combination['attribute_designation']];\n            }\n        }\n\n        $response->setData($combinationList);\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse DateTime;\nuse Exception;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductSpecificPrice as SpecificPriceFormType;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShop\\PrestaShop\\Adapter\\Product\\AdminProductWrapper;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityDataInconsistencyException;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityNotFoundException;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass SpecificPriceController extends FrameworkBundleAdminController\n{\n    /**\n     * Get specific price list for a product.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @param $idProduct The product ID\n     *\n     * @return JsonResponse\n     */\n    public function listAction($idProduct)\n    {\n        $response = new JsonResponse();\n\n        $contextAdapter = $this->get('prestashop.adapter.legacy.context');\n        $locales = $contextAdapter->getLanguages();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $shopContextAdapter = $this->get('prestashop.adapter.shop.context');\n        $shops = $shopContextAdapter->getShops();\n        $countries = $this->get('prestashop.adapter.data_provider.country')->getCountries($locales[0]['id_lang']);\n        $currencies = $this->get('prestashop.adapter.data_provider.currency')->getCurrencies();\n        $groups = $this->get('prestashop.adapter.data_provider.group')->getGroups($locales[0]['id_lang']);\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n        if (!is_object($product) || empty($product->id)) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n\n            return $response;\n        }\n\n        $response->setData($adminProductWrapper->getSpecificPricesList(\n            $product,\n            $contextAdapter->getContext()->currency,\n            $shops,\n            $currencies,\n            $countries,\n            $groups\n        ));\n\n        return $response;\n    }\n\n    /**\n     * Add specific price Form process.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $errors = $adminProductWrapper->processProductSpecificPrice($idProduct, $request->get('form')['step2']['specific_price']);\n\n        if (!empty($errors)) {\n            $response->setData(implode(', ', $errors));\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Get one specific price list for a product.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/ProductPage/Forms/form_specific_price.html.twig\")\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idSpecificPrice\n     *\n     * @return array\n     */\n    public function getUpdateFormAction($idSpecificPrice)\n    {\n        /** @var AdminProductWrapper $adminProductWrapper */\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n\n        try {\n            $price = $adminProductWrapper->getSpecificPriceDataById($idSpecificPrice);\n        } catch (EntityNotFoundException $e) {\n            $message = $this->trans(\n                'Cannot find specific price %price%',\n                'Admin.Catalog.Notification',\n                ['price' => $idSpecificPrice]\n            );\n\n            return new Response($message, Response::HTTP_BAD_REQUEST);\n        }\n        $formData = $this->formatSpecificPriceToPrefillForm($idSpecificPrice, $price);\n\n        $options = [\n            'id_product' => $price->id_product,\n            'selected_product_attribute' => $price->id_product_attribute,\n        ];\n\n        $formBuilder = $this->createFormBuilder();\n        $formBuilder->add('modal', SpecificPriceFormType::class, $options);\n\n        $form = $formBuilder->getForm();\n        $form->setData($formData);\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $price->id_product);\n\n        return [\n            'form' => $form->createView()->offsetGet('modal'),\n            'has_combinations' => ($product->hasCombinations()),\n            'is_modal' => true,\n        ];\n    }\n\n    /**\n     * Update specific price Form process.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int idSpecificPrice\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction($idSpecificPrice, Request $request)\n    {\n        $response = new JsonResponse();\n        $formData = $request->get('form');\n\n        $idProduct = isset($formData['id_product']) ? $formData['id_product'] : null;\n        $formValues = $formData['modal'];\n\n        /** @var AdminProductWrapper $adminProductWrapper */\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $errors = $adminProductWrapper->processProductSpecificPrice($idProduct, $formValues, $idSpecificPrice);\n\n        if (!empty($errors)) {\n            $response->setData(implode(', ', $errors));\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete a specific price.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idSpecificPrice The specific price ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction($idSpecificPrice, Request $request)\n    {\n        $response = new JsonResponse();\n\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $res = $adminProductWrapper->deleteSpecificPrice((int) $idSpecificPrice);\n\n        if ($res['status'] == 'error') {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n        }\n\n        $response->setData($res['message']);\n\n        return $response;\n    }\n\n    /**\n     * @param int $id\n     * @param \\SpecificPrice $price\n     *\n     * @return array\n     */\n    private function formatSpecificPriceToPrefillForm($id, $price)\n    {\n        if ($price->reduction_type === 'percentage') {\n            $reduction = $price->reduction * 100;\n        } else {\n            $reduction = $price->reduction;\n        }\n        $formattedFormData = [\n            'sp_update_id' => $id,\n            'sp_id_shop' => $price->id_shop,\n            'sp_id_currency' => $price->id_currency,\n            'sp_id_country' => $price->id_country,\n            'sp_id_group' => $price->id_group,\n            'sp_id_customer' => null,\n            'sp_id_product_attribute' => $price->id_product_attribute,\n            'sp_from' => self::formatForDatePicker($price->from),\n            'sp_to' => self::formatForDatePicker($price->to),\n            'sp_from_quantity' => $price->from_quantity,\n            'sp_price' => ($price->price !== '-1.000000') ? $price->price : '',\n            'leave_bprice' => ($price->price === '-1.000000'),\n            'sp_reduction' => $reduction,\n            'sp_reduction_type' => $price->reduction_type,\n            'sp_reduction_tax' => $price->reduction_tax,\n        ];\n        if ($price->id_customer !== '0') {\n            $formattedFormData['sp_id_customer'] = ['data' => [$price->id_customer]];\n        }\n        $cleanedFormData = array_map(function ($item) {\n            if (!$item) {\n                return null;\n            }\n\n            return $item;\n        }, $formattedFormData);\n\n        return ['modal' => $cleanedFormData];\n    }\n\n    /**\n     * @param string $dateAsString\n     *\n     * @return JsonResponse|null If date is 0000-00-00 00:00:00, null is returned\n     *\n     * @throws \\PrestaShopDatabaseExceptionCore if date is not valid\n     */\n    private static function formatForDatePicker($dateAsString)\n    {\n        if ('0000-00-00 00:00:00' === $dateAsString) {\n            return null;\n        }\n\n        try {\n            $dateTime = new DateTime($dateAsString);\n        } catch (Exception $e) {\n            throw new EntityDataInconsistencyException(sprintf('Found bad date for specific price: %s', $dateAsString));\n        }\n\n        return $dateTime->format('Y-m-d');\n    }\n}\n"], "filenames": ["src/PrestaShopBundle/Controller/Admin/AttachementProductController.php", "src/PrestaShopBundle/Controller/Admin/CombinationController.php", "src/PrestaShopBundle/Controller/Admin/SpecificPriceController.php"], "buggy_code_start_loc": [28, 29, 30], "buggy_code_end_loc": [44, 70, 257], "fixing_code_start_loc": [29, 30, 31], "fixing_code_end_loc": [47, 80, 268], "type": "CWE-863", "message": "In PrestaShop between versions 1.7.0.0 and 1.7.6.5, there are improper access controls on product page with combinations, attachments and specific prices. The problem is fixed in 1.7.6.5.", "other": {"cve": {"id": "CVE-2020-5293", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:16.320", "lastModified": "2020-04-27T17:47:31.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.7.0.0 and 1.7.6.5, there are improper access controls on product page with combinations, attachments and specific prices. The problem is fixed in 1.7.6.5."}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.7.0.0 y 1.7.6.5, hay  un control de acceso inapropiado en la p\u00e1gina del producto con combinaciones, archivos adjuntos y precios espec\u00edficos. El problema se corrigi\u00f3 en la versi\u00f3n 1.7.6.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.0.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "DCC343E4-96E9-4E8D-BC5B-FAF8133EDC71"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/f9f442c87755908e23a6bcba8c443cdea1d78a7f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-cvjj-grfv-f56w", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/f9f442c87755908e23a6bcba8c443cdea1d78a7f"}}