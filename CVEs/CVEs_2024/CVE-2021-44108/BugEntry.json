{"buggy_code": ["/*\n * Copyright (C) 2019 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"ogs-sbi.h\"\n#include \"ogs-crypt.h\"\n#include \"yuarel.h\"\n\n#include \"contrib/multipart_parser.h\"\n\nstatic OGS_POOL(request_pool, ogs_sbi_request_t);\nstatic OGS_POOL(response_pool, ogs_sbi_response_t);\n\nstatic char *build_json(ogs_sbi_message_t *message);\nstatic int parse_json(ogs_sbi_message_t *message,\n        char *content_type, char *json);\n\nstatic bool build_content(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message);\nstatic int parse_content(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http);\n\nstatic bool build_multipart(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message);\nstatic int parse_multipart(\n        ogs_sbi_message_t *sbi_message, ogs_sbi_http_message_t *http);\n\nstatic void http_message_free(ogs_sbi_http_message_t *http);\n\nvoid ogs_sbi_message_init(int num_of_request_pool, int num_of_response_pool)\n{\n    ogs_pool_init(&request_pool, num_of_request_pool);\n    ogs_pool_init(&response_pool, num_of_response_pool);\n}\n\nvoid ogs_sbi_message_final(void)\n{\n    ogs_pool_final(&request_pool);\n    ogs_pool_final(&response_pool);\n}\n\nvoid ogs_sbi_message_free(ogs_sbi_message_t *message)\n{\n    int i;\n\n    ogs_assert(message);\n\n    if (message->NFProfile)\n        OpenAPI_nf_profile_free(message->NFProfile);\n    if (message->ProblemDetails)\n        OpenAPI_problem_details_free(message->ProblemDetails);\n    if (message->PatchItemList) {\n        OpenAPI_lnode_t *node = NULL;\n        OpenAPI_list_for_each(message->PatchItemList, node)\n            OpenAPI_patch_item_free(node->data);\n        OpenAPI_list_free(message->PatchItemList);\n    }\n\n    if (message->SubscriptionData)\n        OpenAPI_subscription_data_free(message->SubscriptionData);\n    if (message->NotificationData)\n        OpenAPI_notification_data_free(message->NotificationData);\n    if (message->SearchResult)\n        OpenAPI_search_result_free(message->SearchResult);\n    if (message->AuthenticationInfo)\n        OpenAPI_authentication_info_free(message->AuthenticationInfo);\n    if (message->AuthenticationInfoRequest)\n        OpenAPI_authentication_info_request_free(\n                message->AuthenticationInfoRequest);\n    if (message->AuthenticationInfoResult)\n        OpenAPI_authentication_info_result_free(\n                message->AuthenticationInfoResult);\n    if (message->AuthenticationSubscription)\n        OpenAPI_authentication_subscription_free(\n                message->AuthenticationSubscription);\n    if (message->UeAuthenticationCtx)\n        OpenAPI_ue_authentication_ctx_free(message->UeAuthenticationCtx);\n    if (message->ConfirmationData)\n        OpenAPI_confirmation_data_free(message->ConfirmationData);\n    if (message->ConfirmationDataResponse)\n        OpenAPI_confirmation_data_response_free(\n                message->ConfirmationDataResponse);\n    if (message->AuthEvent)\n        OpenAPI_auth_event_free(message->AuthEvent);\n    if (message->Amf3GppAccessRegistration)\n        OpenAPI_amf3_gpp_access_registration_free(\n                message->Amf3GppAccessRegistration);\n    if (message->AccessAndMobilitySubscriptionData)\n        OpenAPI_access_and_mobility_subscription_data_free(\n                message->AccessAndMobilitySubscriptionData);\n    if (message->SmfSelectionSubscriptionData)\n        OpenAPI_smf_selection_subscription_data_free(\n                message->SmfSelectionSubscriptionData);\n    if (message->UeContextInSmfData)\n        OpenAPI_ue_context_in_smf_data_free(message->UeContextInSmfData);\n    if (message->SmContextCreateData)\n        OpenAPI_sm_context_create_data_free(message->SmContextCreateData);\n    if (message->SmContextCreatedData)\n        OpenAPI_sm_context_created_data_free(message->SmContextCreatedData);\n    if (message->SmContextCreateError)\n        OpenAPI_sm_context_create_error_free(message->SmContextCreateError);\n    if (message->SmContextUpdateData)\n        OpenAPI_sm_context_update_data_free(message->SmContextUpdateData);\n    if (message->SmContextUpdatedData)\n        OpenAPI_sm_context_updated_data_free(message->SmContextUpdatedData);\n    if (message->SmContextUpdateError)\n        OpenAPI_sm_context_update_error_free(message->SmContextUpdateError);\n    if (message->SmContextReleaseData)\n        OpenAPI_sm_context_release_data_free(message->SmContextReleaseData);\n    if (message->SmContextReleasedData)\n        OpenAPI_sm_context_released_data_free(message->SmContextReleasedData);\n    if (message->SessionManagementSubscriptionData)\n        OpenAPI_session_management_subscription_data_free(\n                message->SessionManagementSubscriptionData);\n    if (message->N1N2MessageTransferReqData)\n        OpenAPI_n1_n2_message_transfer_req_data_free(\n                message->N1N2MessageTransferReqData);\n    if (message->N1N2MessageTransferRspData)\n        OpenAPI_n1_n2_message_transfer_rsp_data_free(\n                message->N1N2MessageTransferRspData);\n    if (message->N1N2MsgTxfrFailureNotification)\n        OpenAPI_n1_n2_msg_txfr_failure_notification_free(\n                message->N1N2MsgTxfrFailureNotification);\n    if (message->SmContextStatusNotification)\n        OpenAPI_sm_context_status_notification_free(\n                message->SmContextStatusNotification);\n    if (message->PolicyAssociationRequest)\n        OpenAPI_policy_association_request_free(\n                message->PolicyAssociationRequest);\n    if (message->PolicyAssociation)\n        OpenAPI_policy_association_free(message->PolicyAssociation);\n    if (message->AmPolicyData)\n        OpenAPI_am_policy_data_free(message->AmPolicyData);\n    if (message->SmPolicyContextData)\n        OpenAPI_sm_policy_context_data_free(message->SmPolicyContextData);\n    if (message->SmPolicyDecision)\n        OpenAPI_sm_policy_decision_free(message->SmPolicyDecision);\n    if (message->SmPolicyData)\n        OpenAPI_sm_policy_data_free(message->SmPolicyData);\n    if (message->SmPolicyDeleteData)\n        OpenAPI_sm_policy_delete_data_free(message->SmPolicyDeleteData);\n    if (message->AuthorizedNetworkSliceInfo)\n        OpenAPI_authorized_network_slice_info_free(\n                message->AuthorizedNetworkSliceInfo);\n    if (message->PcfBinding)\n        OpenAPI_pcf_binding_free(message->PcfBinding);\n    if (message->AppSessionContext)\n        OpenAPI_app_session_context_free(message->AppSessionContext);\n    if (message->AppSessionContextUpdateDataPatch)\n        OpenAPI_app_session_context_update_data_patch_free(message->AppSessionContextUpdateDataPatch);\n    if (message->SmPolicyNotification)\n        OpenAPI_sm_policy_notification_free(message->SmPolicyNotification);\n    if (message->TerminationNotification)\n        OpenAPI_termination_notification_free(message->TerminationNotification);\n\n    for (i = 0; i < message->num_of_part; i++) {\n        if (message->part[i].pkbuf)\n            ogs_pkbuf_free(message->part[i].pkbuf);\n    }\n}\n\nogs_sbi_request_t *ogs_sbi_request_new(void)\n{\n    ogs_sbi_request_t *request = NULL;\n\n    ogs_pool_alloc(&request_pool, &request);\n    ogs_expect_or_return_val(request, NULL);\n    memset(request, 0, sizeof(ogs_sbi_request_t));\n\n    request->http.params = ogs_hash_make();\n    ogs_expect_or_return_val(request->http.params, NULL);\n    request->http.headers = ogs_hash_make();\n    ogs_expect_or_return_val(request->http.headers, NULL);\n\n    return request;\n}\n\nogs_sbi_response_t *ogs_sbi_response_new(void)\n{\n    ogs_sbi_response_t *response = NULL;\n\n    ogs_pool_alloc(&response_pool, &response);\n    ogs_expect_or_return_val(response, NULL);\n    memset(response, 0, sizeof(ogs_sbi_response_t));\n\n    response->http.params = ogs_hash_make();\n    ogs_expect_or_return_val(response->http.params, NULL);\n    response->http.headers = ogs_hash_make();\n    ogs_expect_or_return_val(response->http.headers, NULL);\n\n    return response;\n}\n\nvoid ogs_sbi_request_free(ogs_sbi_request_t *request)\n{\n    ogs_assert(request);\n\n    if (request->h.uri)\n        ogs_free(request->h.uri);\n\n    ogs_sbi_header_free(&request->h);\n    http_message_free(&request->http);\n\n    ogs_pool_free(&request_pool, request);\n}\n\nvoid ogs_sbi_response_free(ogs_sbi_response_t *response)\n{\n    ogs_assert(response);\n\n    if (response->h.uri)\n        ogs_free(response->h.uri);\n\n    ogs_sbi_header_free(&response->h);\n    http_message_free(&response->http);\n\n    ogs_pool_free(&response_pool, response);\n}\n\nogs_sbi_request_t *ogs_sbi_build_request(ogs_sbi_message_t *message)\n{\n    ogs_sbi_request_t *request = NULL;\n\n    ogs_assert(message);\n\n    request = ogs_sbi_request_new();\n    ogs_expect_or_return_val(request, NULL);\n\n    ogs_expect_or_return_val(message->h.method, NULL);\n    request->h.method = ogs_strdup(message->h.method);\n    if (message->h.uri) {\n        ogs_expect_or_return_val(message->h.uri, NULL);\n        request->h.uri = ogs_strdup(message->h.uri);\n        ogs_expect_or_return_val(request->h.uri, NULL);\n    } else {\n        int i;\n\n        ogs_expect_or_return_val(message->h.service.name, NULL);\n        request->h.service.name = ogs_strdup(message->h.service.name);\n        ogs_expect_or_return_val(message->h.api.version, NULL);\n        request->h.api.version = ogs_strdup(message->h.api.version);\n        ogs_expect_or_return_val(request->h.api.version, NULL);\n\n        ogs_expect_or_return_val(message->h.resource.component[0], NULL);\n        for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n                            message->h.resource.component[i]; i++)\n            request->h.resource.component[i] = ogs_strdup(\n                    message->h.resource.component[i]);\n    }\n\n    /* URL Param */\n    if (message->param.nf_id) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_NF_ID, message->param.nf_id);\n    }\n    if (message->param.nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_NF_TYPE, v);\n    }\n    if (message->param.requester_nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.requester_nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_REQUESTER_NF_TYPE, v);\n    }\n    if (message->param.target_nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.target_nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_TARGET_NF_TYPE, v);\n    }\n    if (message->param.limit) {\n        char *v = ogs_msprintf(\"%d\", message->param.limit);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_LIMIT, v);\n        ogs_free(v);\n    }\n    if (message->param.dnn) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_DNN, message->param.dnn);\n    }\n    if (message->param.plmn_id_presence) {\n        OpenAPI_plmn_id_t plmn_id;\n\n        plmn_id.mnc = ogs_plmn_id_mnc_string(&message->param.plmn_id);\n        plmn_id.mcc = ogs_plmn_id_mcc_string(&message->param.plmn_id);\n\n        if (plmn_id.mnc && plmn_id.mcc) {\n            char *v = NULL;\n            cJSON *item = NULL;\n\n            item = OpenAPI_plmn_id_convertToJSON(&plmn_id);\n            ogs_expect_or_return_val(item, NULL);\n            if (plmn_id.mnc) ogs_free(plmn_id.mnc);\n            if (plmn_id.mcc) ogs_free(plmn_id.mcc);\n\n            v = cJSON_Print(item);\n            ogs_expect_or_return_val(v, NULL);\n            cJSON_Delete(item);\n\n            ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_PLMN_ID, v);\n            ogs_free(v);\n        }\n    }\n    if (message->param.single_nssai_presence) {\n        char *v = ogs_sbi_s_nssai_to_string(&message->param.s_nssai);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_SINGLE_NSSAI, v);\n        ogs_free(v);\n    }\n    if (message->param.snssai_presence) {\n        char *v = ogs_sbi_s_nssai_to_string(&message->param.s_nssai);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_SNSSAI, v);\n        ogs_free(v);\n    }\n    if (message->param.plmn_id_presence) {\n        OpenAPI_plmn_id_t plmn_id;\n\n        plmn_id.mnc = ogs_plmn_id_mnc_string(&message->param.plmn_id);\n        plmn_id.mcc = ogs_plmn_id_mcc_string(&message->param.plmn_id);\n\n        if (plmn_id.mnc && plmn_id.mcc) {\n            char *v = NULL;\n            cJSON *item = NULL;\n\n            item = OpenAPI_plmn_id_convertToJSON(&plmn_id);\n            ogs_expect_or_return_val(item, NULL);\n            if (plmn_id.mnc) ogs_free(plmn_id.mnc);\n            if (plmn_id.mcc) ogs_free(plmn_id.mcc);\n\n            v = cJSON_Print(item);\n            ogs_expect_or_return_val(v, NULL);\n            cJSON_Delete(item);\n\n            ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_PLMN_ID, v);\n            ogs_free(v);\n        }\n    }\n    if (message->param.slice_info_request_for_pdu_session_presence) {\n        OpenAPI_slice_info_for_pdu_session_t SliceInfoForPDUSession;\n        OpenAPI_snssai_t sNSSAI;\n\n        char *v = NULL;\n        cJSON *item = NULL;\n\n        ogs_expect_or_return_val(message->param.s_nssai.sst, NULL);\n        ogs_expect_or_return_val(message->param.roaming_indication, NULL);\n\n        memset(&sNSSAI, 0, sizeof(sNSSAI));\n        sNSSAI.sst = message->param.s_nssai.sst;\n        sNSSAI.sd = ogs_s_nssai_sd_to_string(message->param.s_nssai.sd);\n\n        memset(&SliceInfoForPDUSession, 0, sizeof(SliceInfoForPDUSession));\n\n        SliceInfoForPDUSession.s_nssai = &sNSSAI;\n        SliceInfoForPDUSession.roaming_indication =\n            message->param.roaming_indication;\n\n        item = OpenAPI_slice_info_for_pdu_session_convertToJSON(\n                &SliceInfoForPDUSession);\n        ogs_expect_or_return_val(item, NULL);\n\n        v = cJSON_Print(item);\n        ogs_expect_or_return_val(v, NULL);\n        cJSON_Delete(item);\n\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_SLICE_INFO_REQUEST_FOR_PDU_SESSION, v);\n        ogs_free(v);\n\n        if (sNSSAI.sd)\n            ogs_free(sNSSAI.sd);\n    }\n    if (message->param.ipv4addr) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_IPV4ADDR, message->param.ipv4addr);\n    }\n    if (message->param.ipv6prefix) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_IPV6PREFIX, message->param.ipv6prefix);\n    }\n\n    ogs_expect_or_return_val(true ==\n            build_content(&request->http, message), NULL);\n\n    if (message->http.accept) {\n        ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                message->http.accept);\n    } else {\n        SWITCH(message->h.method)\n        CASE(OGS_SBI_HTTP_METHOD_DELETE)\n            ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                OGS_SBI_CONTENT_PROBLEM_TYPE);\n            break;\n        DEFAULT\n            ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                OGS_SBI_CONTENT_JSON_TYPE \",\" OGS_SBI_CONTENT_PROBLEM_TYPE);\n            break;\n        END\n    }\n\n    if (message->http.content_encoding)\n        ogs_sbi_header_set(request->http.headers,\n                OGS_SBI_ACCEPT_ENCODING, message->http.content_encoding);\n\n    return request;\n}\n\nogs_sbi_response_t *ogs_sbi_build_response(\n        ogs_sbi_message_t *message, int status)\n{\n    ogs_sbi_response_t *response = NULL;\n\n    ogs_assert(message);\n\n    response = ogs_sbi_response_new();\n    ogs_expect_or_return_val(response, NULL);\n\n    response->status = status;\n\n    if (response->status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n        ogs_expect_or_return_val(true ==\n            build_content(&response->http, message), NULL);\n    }\n\n    if (message->http.location) {\n        ogs_sbi_header_set(response->http.headers, \"Location\",\n                message->http.location);\n    }\n    if (message->http.cache_control)\n        ogs_sbi_header_set(response->http.headers, \"Cache-Control\",\n                message->http.cache_control);\n\n    return response;\n}\n\nint ogs_sbi_parse_request(\n        ogs_sbi_message_t *message, ogs_sbi_request_t *request)\n{\n    int rv;\n    ogs_hash_index_t *hi;\n\n    ogs_assert(request);\n    ogs_assert(message);\n\n    rv = ogs_sbi_parse_header(message, &request->h);\n    if (rv != OGS_OK) {\n        ogs_error(\"ogs_sbi_parse_header() failed\");\n        return OGS_ERROR;\n    }\n\n    for (hi = ogs_hash_first(request->http.params);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_NF_ID)) {\n            message->param.nf_id = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_NF_TYPE)) {\n            message->param.nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_TARGET_NF_TYPE)) {\n            message->param.target_nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_REQUESTER_NF_TYPE)) {\n            message->param.requester_nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_LIMIT)) {\n            message->param.limit = atoi(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_DNN)) {\n            message->param.dnn = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_PLMN_ID)) {\n            char *v = NULL;\n            cJSON *item = NULL;\n            OpenAPI_plmn_id_t *plmn_id = NULL;\n\n            v = ogs_hash_this_val(hi);\n            if (v) {\n                item = cJSON_Parse(v);\n                if (item) {\n                    plmn_id = OpenAPI_plmn_id_parseFromJSON(item);\n                    if (plmn_id && plmn_id->mnc && plmn_id->mcc) {\n                        ogs_plmn_id_build(&message->param.plmn_id,\n                            atoi(plmn_id->mcc),\n                            atoi(plmn_id->mnc), strlen(plmn_id->mnc));\n                        message->param.plmn_id_presence = true;\n                        OpenAPI_plmn_id_free(plmn_id);\n                    }\n                    cJSON_Delete(item);\n                }\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_SINGLE_NSSAI)) {\n            char *v = ogs_hash_this_val(hi);\n            if (v) {\n                bool rc = ogs_sbi_s_nssai_from_string(\n                        &message->param.s_nssai, v);\n                if (rc == true)\n                    message->param.single_nssai_presence = true;\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_SNSSAI)) {\n            char *v = ogs_hash_this_val(hi);\n            if (v) {\n                bool rc = ogs_sbi_s_nssai_from_string(\n                        &message->param.s_nssai, v);\n                if (rc == true)\n                    message->param.snssai_presence = true;\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_SLICE_INFO_REQUEST_FOR_PDU_SESSION)) {\n            char *v = NULL;\n            cJSON *item = NULL;\n            OpenAPI_slice_info_for_pdu_session_t *SliceInfoForPduSession = NULL;\n\n            v = ogs_hash_this_val(hi);\n            if (v) {\n                item = cJSON_Parse(v);\n                if (item) {\n                    SliceInfoForPduSession =\n                        OpenAPI_slice_info_for_pdu_session_parseFromJSON(item);\n                    if (SliceInfoForPduSession) {\n                        OpenAPI_snssai_t *s_nssai =\n                            SliceInfoForPduSession->s_nssai;\n                        if (s_nssai) {\n                            message->param.s_nssai.sst = s_nssai->sst;\n                            message->param.s_nssai.sd =\n                                ogs_s_nssai_sd_from_string(s_nssai->sd);\n                        }\n                        message->param.roaming_indication =\n                            SliceInfoForPduSession->roaming_indication;\n                        message->param.\n                            slice_info_request_for_pdu_session_presence = true;\n\n                        OpenAPI_slice_info_for_pdu_session_free(\n                                SliceInfoForPduSession);\n\n                    }\n                    cJSON_Delete(item);\n                }\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_IPV4ADDR)) {\n            message->param.ipv4addr = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_IPV6PREFIX)) {\n            message->param.ipv6prefix = ogs_hash_this_val(hi);\n        }\n    }\n\n    for (hi = ogs_hash_first(request->http.headers);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_ACCEPT_ENCODING)) {\n            message->http.content_encoding = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(\n                    ogs_hash_this_key(hi), OGS_SBI_CONTENT_TYPE)) {\n            message->http.content_type = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_ACCEPT)) {\n            message->http.accept = ogs_hash_this_val(hi);\n        }\n    }\n\n    if (parse_content(message, &request->http) != OGS_OK) {\n        ogs_error(\"parse_content() failed\");\n        return OGS_ERROR;\n    }\n\n    return OGS_OK;\n}\n\nint ogs_sbi_parse_response(\n        ogs_sbi_message_t *message, ogs_sbi_response_t *response)\n{\n    int rv;\n    ogs_hash_index_t *hi;\n\n    ogs_assert(response);\n    ogs_assert(message);\n\n    rv = ogs_sbi_parse_header(message, &response->h);\n    if (rv != OGS_OK) {\n        ogs_error(\"ogs_sbi_parse_header() failed\");\n        return OGS_ERROR;\n    }\n\n    for (hi = ogs_hash_first(response->http.headers);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_CONTENT_TYPE)) {\n            message->http.content_type = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_LOCATION)) {\n            message->http.location = ogs_hash_this_val(hi);\n        }\n    }\n\n    message->res_status = response->status;\n\n    if (parse_content(message, &response->http) != OGS_OK) {\n        ogs_error(\"parse_content() failed\");\n        return OGS_ERROR;\n    }\n\n    return OGS_OK;\n}\n\nogs_pkbuf_t *ogs_sbi_find_part_by_content_id(\n        ogs_sbi_message_t *message, char *content_id)\n{\n    int i;\n\n    ogs_assert(message);\n    ogs_assert(content_id);\n\n    for (i = 0; i < message->num_of_part; i++) {\n        if (message->part[i].content_id &&\n            strcmp(message->part[i].content_id, content_id) == 0)\n            return message->part[i].pkbuf;\n    }\n\n    return NULL;\n}\n\nint ogs_sbi_parse_header(ogs_sbi_message_t *message, ogs_sbi_header_t *header)\n{\n    struct yuarel yuarel;\n    char *saveptr = NULL;\n    char *uri = NULL, *p = NULL;;\n\n    char *component = NULL;\n    int i = 0;\n\n    ogs_assert(message);\n    ogs_assert(header);\n\n    memset(message, 0, sizeof(*message));\n\n    message->h.method = header->method;\n    message->h.uri = header->uri;\n    ogs_assert(message->h.uri);\n\n    uri = ogs_strdup(header->uri);\n    ogs_assert(uri);\n    p = uri;\n\n    if (p[0] != '/') {\n        int rv = yuarel_parse(&yuarel, p);\n        if (rv != OGS_OK) {\n            ogs_error(\"yuarel_parse() failed\");\n            ogs_free(uri);\n            return OGS_ERROR;\n        }\n\n        p = yuarel.path;\n    }\n\n    header->service.name = ogs_sbi_parse_uri(p, \"/\", &saveptr);\n    if (!header->service.name) {\n        ogs_error(\"ogs_sbi_parse_uri() failed\");\n        ogs_free(uri);\n        return OGS_ERROR;\n    }\n    message->h.service.name = header->service.name;\n\n    header->api.version = ogs_sbi_parse_uri(NULL, \"/\", &saveptr);\n    if (!header->api.version) {\n        ogs_error(\"ogs_sbi_parse_uri() failed\");\n        ogs_free(uri);\n        return OGS_ERROR;\n    }\n    message->h.api.version = header->api.version;\n\n    for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n            (component = ogs_sbi_parse_uri(NULL, \"/\", &saveptr)) != NULL;\n         i++) {\n        header->resource.component[i] = component;\n        message->h.resource.component[i] = component;\n    }\n\n    ogs_free(uri);\n\n    return OGS_OK;\n}\n\nvoid ogs_sbi_header_free(ogs_sbi_header_t *h)\n{\n    int i;\n    ogs_assert(h);\n\n    if (h->method) ogs_free(h->method);\n    if (h->service.name) ogs_free(h->service.name);\n    if (h->api.version) ogs_free(h->api.version);\n\n    for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n                        h->resource.component[i]; i++)\n        ogs_free(h->resource.component[i]);\n}\n\n\nstatic char *build_json(ogs_sbi_message_t *message)\n{\n    char *content = NULL;\n    cJSON *item = NULL;\n\n    ogs_assert(message);\n\n    if (message->ProblemDetails) {\n        item = OpenAPI_problem_details_convertToJSON(message->ProblemDetails);\n        ogs_assert(item);\n    } else if (message->NFProfile) {\n        item = OpenAPI_nf_profile_convertToJSON(message->NFProfile);\n        ogs_assert(item);\n    } else if (message->PatchItemList) {\n        OpenAPI_lnode_t *node = NULL;\n\n        item = cJSON_CreateArray();\n        ogs_assert(item);\n\n        OpenAPI_list_for_each(message->PatchItemList, node) {\n            cJSON *patchItem = OpenAPI_patch_item_convertToJSON(node->data);\n            ogs_assert(patchItem);\n            cJSON_AddItemToArray(item, patchItem);\n        }\n    } else if (message->SubscriptionData) {\n        item = OpenAPI_subscription_data_convertToJSON(\n                message->SubscriptionData);\n        ogs_assert(item);\n    } else if (message->NotificationData) {\n        item = OpenAPI_notification_data_convertToJSON(\n                message->NotificationData);\n        ogs_assert(item);\n    } else if (message->SearchResult) {\n        item = OpenAPI_search_result_convertToJSON(message->SearchResult);\n        ogs_assert(item);\n    } else if (message->links) {\n        item = ogs_sbi_links_convertToJSON(message->links);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfo) {\n        item = OpenAPI_authentication_info_convertToJSON(\n                message->AuthenticationInfo);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfoRequest) {\n        item = OpenAPI_authentication_info_request_convertToJSON(\n                message->AuthenticationInfoRequest);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfoResult) {\n        item = OpenAPI_authentication_info_result_convertToJSON(\n                message->AuthenticationInfoResult);\n        ogs_assert(item);\n    } else if (message->AuthenticationSubscription) {\n        item = OpenAPI_authentication_subscription_convertToJSON(\n                message->AuthenticationSubscription);\n        ogs_assert(item);\n    } else if (message->UeAuthenticationCtx) {\n        item = OpenAPI_ue_authentication_ctx_convertToJSON(\n                message->UeAuthenticationCtx);\n        ogs_assert(item);\n    } else if (message->ConfirmationData) {\n        item = OpenAPI_confirmation_data_convertToJSON(\n                message->ConfirmationData);\n        ogs_assert(item);\n    } else if (message->ConfirmationDataResponse) {\n        item = OpenAPI_confirmation_data_response_convertToJSON(\n                message->ConfirmationDataResponse);\n        ogs_assert(item);\n    } else if (message->AuthEvent) {\n        item = OpenAPI_auth_event_convertToJSON(message->AuthEvent);\n        ogs_assert(item);\n    } else if (message->Amf3GppAccessRegistration) {\n        item = OpenAPI_amf3_gpp_access_registration_convertToJSON(\n                message->Amf3GppAccessRegistration);\n        ogs_assert(item);\n    } else if (message->AccessAndMobilitySubscriptionData) {\n        item = OpenAPI_access_and_mobility_subscription_data_convertToJSON(\n                message->AccessAndMobilitySubscriptionData);\n        ogs_assert(item);\n    } else if (message->SmfSelectionSubscriptionData) {\n        item = OpenAPI_smf_selection_subscription_data_convertToJSON(\n                message->SmfSelectionSubscriptionData);\n        ogs_assert(item);\n    } else if (message->UeContextInSmfData) {\n        item = OpenAPI_ue_context_in_smf_data_convertToJSON(\n                message->UeContextInSmfData);\n        ogs_assert(item);\n    } else if (message->SmContextCreateData) {\n        item = OpenAPI_sm_context_create_data_convertToJSON(\n                message->SmContextCreateData);\n        ogs_assert(item);\n    } else if (message->SmContextCreatedData) {\n        item = OpenAPI_sm_context_created_data_convertToJSON(\n                message->SmContextCreatedData);\n        ogs_assert(item);\n    } else if (message->SmContextCreateError) {\n        item = OpenAPI_sm_context_create_error_convertToJSON(\n                message->SmContextCreateError);\n        ogs_assert(item);\n    } else if (message->SmContextUpdateData) {\n        item = OpenAPI_sm_context_update_data_convertToJSON(\n                message->SmContextUpdateData);\n        ogs_assert(item);\n    } else if (message->SmContextUpdatedData) {\n        item = OpenAPI_sm_context_updated_data_convertToJSON(\n                message->SmContextUpdatedData);\n        ogs_assert(item);\n    } else if (message->SmContextUpdateError) {\n        item = OpenAPI_sm_context_update_error_convertToJSON(\n                message->SmContextUpdateError);\n        ogs_assert(item);\n    } else if (message->SmContextReleaseData) {\n        item = OpenAPI_sm_context_release_data_convertToJSON(\n                message->SmContextReleaseData);\n        ogs_assert(item);\n    } else if (message->SmContextReleasedData) {\n        item = OpenAPI_sm_context_released_data_convertToJSON(\n                message->SmContextReleasedData);\n        ogs_assert(item);\n    } else if (message->SessionManagementSubscriptionData) {\n        item = OpenAPI_session_management_subscription_data_convertToJSON(\n                message->SessionManagementSubscriptionData);\n        ogs_assert(item);\n    } else if (message->N1N2MessageTransferReqData) {\n        item = OpenAPI_n1_n2_message_transfer_req_data_convertToJSON(\n                message->N1N2MessageTransferReqData);\n        ogs_assert(item);\n    } else if (message->N1N2MessageTransferRspData) {\n        item = OpenAPI_n1_n2_message_transfer_rsp_data_convertToJSON(\n                message->N1N2MessageTransferRspData);\n        ogs_assert(item);\n    } else if (message->N1N2MsgTxfrFailureNotification) {\n        item = OpenAPI_n1_n2_msg_txfr_failure_notification_convertToJSON(\n                message->N1N2MsgTxfrFailureNotification);\n        ogs_assert(item);\n    } else if (message->SmContextStatusNotification) {\n        item = OpenAPI_sm_context_status_notification_convertToJSON(\n                message->SmContextStatusNotification);\n        ogs_assert(item);\n    } else if (message->PolicyAssociationRequest) {\n        item = OpenAPI_policy_association_request_convertToJSON(\n                message->PolicyAssociationRequest);\n        ogs_assert(item);\n    } else if (message->PolicyAssociation) {\n        item = OpenAPI_policy_association_convertToJSON(\n                message->PolicyAssociation);\n        ogs_assert(item);\n    } else if (message->AmPolicyData) {\n        item = OpenAPI_am_policy_data_convertToJSON(message->AmPolicyData);\n        ogs_assert(item);\n    } else if (message->SmPolicyContextData) {\n        item = OpenAPI_sm_policy_context_data_convertToJSON(\n                message->SmPolicyContextData);\n        ogs_assert(item);\n    } else if (message->SmPolicyDecision) {\n        item = OpenAPI_sm_policy_decision_convertToJSON(\n                message->SmPolicyDecision);\n        ogs_assert(item);\n    } else if (message->SmPolicyData) {\n        item = OpenAPI_sm_policy_data_convertToJSON(message->SmPolicyData);\n        ogs_assert(item);\n    } else if (message->SmPolicyDeleteData) {\n        item = OpenAPI_sm_policy_delete_data_convertToJSON(\n                message->SmPolicyDeleteData);\n        ogs_assert(item);\n    } else if (message->AuthorizedNetworkSliceInfo) {\n        item = OpenAPI_authorized_network_slice_info_convertToJSON(\n                message->AuthorizedNetworkSliceInfo);\n        ogs_assert(item);\n    } else if (message->PcfBinding) {\n        item = OpenAPI_pcf_binding_convertToJSON(message->PcfBinding);\n        ogs_assert(item);\n    } else if (message->AppSessionContext) {\n        item = OpenAPI_app_session_context_convertToJSON(\n                message->AppSessionContext);\n        ogs_assert(item);\n    } else if (message->AppSessionContextUpdateDataPatch) {\n        item = OpenAPI_app_session_context_update_data_patch_convertToJSON(\n                message->AppSessionContextUpdateDataPatch);\n        ogs_assert(item);\n    } else if (message->SmPolicyNotification) {\n        item = OpenAPI_sm_policy_notification_convertToJSON(\n                message->SmPolicyNotification);\n        ogs_assert(item);\n    } else if (message->TerminationNotification) {\n        item = OpenAPI_termination_notification_convertToJSON(\n                message->TerminationNotification);\n        ogs_assert(item);\n    }\n\n    if (item) {\n        content = cJSON_Print(item);\n        ogs_assert(content);\n        ogs_log_print(OGS_LOG_TRACE, \"%s\", content);\n        cJSON_Delete(item);\n    }\n\n    return content;\n}\n\nstatic int parse_json(ogs_sbi_message_t *message,\n        char *content_type, char *json)\n{\n    int rv = OGS_OK;\n    cJSON *item = NULL;\n\n    ogs_assert(message);\n\n    if (!json)\n        return OGS_OK;\n\n    if (!content_type) {\n        ogs_error(\"No Content-type\");\n        return OGS_ERROR;\n    }\n\n    ogs_log_print(OGS_LOG_TRACE, \"%s\", json);\n    item = cJSON_Parse(json);\n    if (!item) {\n        ogs_error(\"JSON parse error\");\n        return OGS_ERROR;\n    }\n\n    if (content_type &&\n        !strncmp(content_type, OGS_SBI_CONTENT_PROBLEM_TYPE,\n            strlen(OGS_SBI_CONTENT_PROBLEM_TYPE))) {\n        message->ProblemDetails = OpenAPI_problem_details_parseFromJSON(item);\n    } else if (content_type &&\n                !strncmp(content_type, OGS_SBI_CONTENT_PATCH_TYPE,\n                    strlen(OGS_SBI_CONTENT_PATCH_TYPE))) {\n        if (item) {\n            OpenAPI_patch_item_t *patch_item = NULL;\n            cJSON *patchJSON = NULL;\n            message->PatchItemList = OpenAPI_list_create();\n            cJSON_ArrayForEach(patchJSON, item) {\n                if (!cJSON_IsObject(patchJSON)) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown JSON\");\n                    goto cleanup;\n                }\n\n                patch_item = OpenAPI_patch_item_parseFromJSON(patchJSON);\n                OpenAPI_list_add(message->PatchItemList, patch_item);\n            }\n        }\n    } else {\n        SWITCH(message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NNRF_NFM)\n\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NF_INSTANCES)\n                message->NFProfile =\n                    OpenAPI_nf_profile_parseFromJSON(item);\n                if (!message->NFProfile) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SUBSCRIPTIONS)\n                message->SubscriptionData =\n                    OpenAPI_subscription_data_parseFromJSON(item);\n                if (!message->SubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_NF_STATUS_NOTIFY)\n                message->NotificationData =\n                    OpenAPI_notification_data_parseFromJSON(item);\n                if (!message->NotificationData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NNRF_DISC)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NF_INSTANCES)\n                message->SearchResult =\n                    OpenAPI_search_result_parseFromJSON(item);\n                if (!message->SearchResult) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n                SWITCH(message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    if (message->res_status == 0) {\n                        message->AuthenticationInfo =\n                            OpenAPI_authentication_info_parseFromJSON(item);\n                        if (!message->AuthenticationInfo) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->UeAuthenticationCtx =\n                        OpenAPI_ue_authentication_ctx_parseFromJSON(item);\n                        if (!message->UeAuthenticationCtx) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    if (message->res_status == 0) {\n                        message->ConfirmationData =\n                            OpenAPI_confirmation_data_parseFromJSON(item);\n                        if (!message->ConfirmationData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->ConfirmationDataResponse =\n                            OpenAPI_confirmation_data_response_parseFromJSON(\n                                    item);\n                        if (!message->ConfirmationDataResponse) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown method [%s]\", message->h.method);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UEAU)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_SECURITY_INFORMATION)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_GENERATE_AUTH_DATA)\n                    if (message->res_status == 0) {\n                        message->AuthenticationInfoRequest =\n                        OpenAPI_authentication_info_request_parseFromJSON(\n                                item);\n                        if (!message->AuthenticationInfoRequest) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->AuthenticationInfoResult =\n                        OpenAPI_authentication_info_result_parseFromJSON(\n                                item);\n                        if (!message->AuthenticationInfoResult) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_AUTH_EVENTS)\n                message->AuthEvent = OpenAPI_auth_event_parseFromJSON(item);\n                if (!message->AuthEvent) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                    message->Amf3GppAccessRegistration =\n                        OpenAPI_amf3_gpp_access_registration_parseFromJSON(\n                                item);\n                    if (!message->Amf3GppAccessRegistration) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n                message->AccessAndMobilitySubscriptionData =\n                    OpenAPI_access_and_mobility_subscription_data_parseFromJSON(\n                            item);\n                if (!message->AccessAndMobilitySubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n                message->SmfSelectionSubscriptionData =\n                    OpenAPI_smf_selection_subscription_data_parseFromJSON(item);\n                if (!message->SmfSelectionSubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                message->UeContextInSmfData =\n                    OpenAPI_ue_context_in_smf_data_parseFromJSON(item);\n                if (!message->UeContextInSmfData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n                message->SessionManagementSubscriptionData =\n                    OpenAPI_session_management_subscription_data_parseFromJSON(\n                            item);\n                if (!message->SessionManagementSubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDR_DR)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SUBSCRIPTION_DATA)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_DATA)\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_SUBSCRIPTION)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->AuthenticationSubscription =\n                                OpenAPI_authentication_subscription_parseFromJSON(item);\n                            if (!message->AuthenticationSubscription) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_STATUS)\n                        message->AuthEvent =\n                            OpenAPI_auth_event_parseFromJSON(item);\n                        if (!message->AuthEvent) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                    break;\n\n                CASE(OGS_SBI_RESOURCE_NAME_CONTEXT_DATA)\n                    message->Amf3GppAccessRegistration =\n                        OpenAPI_amf3_gpp_access_registration_parseFromJSON(\n                                item);\n                    if (!message->Amf3GppAccessRegistration) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n\n                DEFAULT\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_PROVISIONED_DATA)\n                        SWITCH(message->h.resource.component[4])\n                        CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n                            message->AccessAndMobilitySubscriptionData =\n                                OpenAPI_access_and_mobility_subscription_data_parseFromJSON(item);\n                            if (!message->AccessAndMobilitySubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECTION_SUBSCRIPTION_DATA)\n                            message->SmfSelectionSubscriptionData =\n                                OpenAPI_smf_selection_subscription_data_parseFromJSON(item);\n                            if (!message->SmfSelectionSubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                            message->UeContextInSmfData =\n                                OpenAPI_ue_context_in_smf_data_parseFromJSON(\n                                        item);\n                            if (!message->UeContextInSmfData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n                            message->SessionManagementSubscriptionData =\n                                OpenAPI_session_management_subscription_data_parseFromJSON(item);\n                            if (!message->SessionManagementSubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"Unknown resource name [%s]\",\n                                    message->h.resource.component[4]);\n                        END\n                        break;\n\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_POLICY_DATA)\n                SWITCH(message->h.resource.component[1])\n                CASE(OGS_SBI_RESOURCE_NAME_UES)\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n\n                        message->AmPolicyData =\n                            OpenAPI_am_policy_data_parseFromJSON(item);\n                        if (!message->AmPolicyData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n\n                    CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n\n                        message->SmPolicyData =\n                            OpenAPI_sm_policy_data_parseFromJSON(item);\n                        if (!message->SmPolicyData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[1]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NSMF_PDUSESSION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_CONTEXTS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_MODIFY)\n                    if (message->res_status == 0) {\n                        message->SmContextUpdateData =\n                            OpenAPI_sm_context_update_data_parseFromJSON(item);\n                        if (!message->SmContextUpdateData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->SmContextUpdatedData =\n                            OpenAPI_sm_context_updated_data_parseFromJSON(item);\n                        if (!message->SmContextUpdatedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_BAD_REQUEST ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_FORBIDDEN ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_NOT_FOUND ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_INTERNAL_SERVER_ERROR ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_SERVICE_UNAVAILABLE ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_GATEWAY_TIMEOUT) {\n                        message->SmContextUpdateError =\n                            OpenAPI_sm_context_update_error_parseFromJSON(item);\n                        if (!message->SmContextUpdateError) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                CASE(OGS_SBI_RESOURCE_NAME_RELEASE)\n                    if (message->res_status == 0) {\n                        message->SmContextReleaseData =\n                            OpenAPI_sm_context_release_data_parseFromJSON(item);\n                        if (!message->SmContextReleaseData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->SmContextReleasedData =\n                            OpenAPI_sm_context_released_data_parseFromJSON(\n                                    item);\n                        if (!message->SmContextReleasedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    if (message->res_status == 0) {\n                        message->SmContextCreateData =\n                            OpenAPI_sm_context_create_data_parseFromJSON(item);\n                        if (!message->SmContextCreateData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->SmContextCreatedData =\n                            OpenAPI_sm_context_created_data_parseFromJSON(item);\n                        if (!message->SmContextCreatedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_BAD_REQUEST ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_FORBIDDEN ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_NOT_FOUND ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_INTERNAL_SERVER_ERROR ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_SERVICE_UNAVAILABLE ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_GATEWAY_TIMEOUT) {\n                        message->SmContextCreateError =\n                            OpenAPI_sm_context_create_error_parseFromJSON(item);\n                        if (!message->SmContextCreateError) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAMF_COMM)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXTS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES)\n                    if (message->res_status == 0) {\n                        message->N1N2MessageTransferReqData =\n                            OpenAPI_n1_n2_message_transfer_req_data_parseFromJSON(item);\n                        if (!message->N1N2MessageTransferReqData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                                OGS_SBI_HTTP_STATUS_OK ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_ACCEPTED) {\n                        message->N1N2MessageTransferRspData =\n                            OpenAPI_n1_n2_message_transfer_rsp_data_parseFromJSON(item);\n                        if (!message->N1N2MessageTransferRspData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                if (message->res_status == 0) {\n                    message->PolicyAssociationRequest =\n                        OpenAPI_policy_association_request_parseFromJSON(\n                                item);\n                    if (!message->PolicyAssociationRequest) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                } else if (message->res_status == OGS_SBI_HTTP_STATUS_CREATED) {\n                    message->PolicyAssociation =\n                        OpenAPI_policy_association_parseFromJSON(item);\n                    if (!message->PolicyAssociation) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_SMPOLICYCONTROL)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_POLICIES)\n                if (!message->h.resource.component[1]) {\n                    if (message->res_status == 0) {\n                        message->SmPolicyContextData =\n                            OpenAPI_sm_policy_context_data_parseFromJSON(item);\n                        if (!message->SmPolicyContextData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->SmPolicyDecision =\n                            OpenAPI_sm_policy_decision_parseFromJSON(item);\n                        if (!message->SmPolicyDecision) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                } else {\n                    SWITCH(message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_DELETE)\n                        if (message->res_status == 0) {\n                            message->SmPolicyDeleteData =\n                                OpenAPI_sm_policy_delete_data_parseFromJSON(\n                                        item);\n                            if (!message->SmPolicyDeleteData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[2]);\n                    END\n                    break;\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NNSSF_NSSELECTION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NETWORK_SLICE_INFORMATION)\n                if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                    message->AuthorizedNetworkSliceInfo =\n                        OpenAPI_authorized_network_slice_info_parseFromJSON(\n                                item);\n                    if (!message->AuthorizedNetworkSliceInfo) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NBSF_MANAGEMENT)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_PCF_BINDINGS)\n                if (message->h.resource.component[1]) {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                    break;\n                } else {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_POST)\n                        if (message->res_status == 0 ||\n                            message->res_status ==\n                                OGS_SBI_HTTP_STATUS_CREATED) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n\n                    CASE(OGS_SBI_HTTP_METHOD_GET)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                    break;\n                }\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_POLICYAUTHORIZATION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_APP_SESSIONS)\n                if (message->h.resource.component[1]) {\n                    if (message->h.resource.component[2]) {\n                        SWITCH(message->h.resource.component[2])\n                        CASE(OGS_SBI_RESOURCE_NAME_DELETE)\n                            /* Nothing */\n                            break;\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        END\n                    } else {\n                        SWITCH(message->h.method)\n                        CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                            message->AppSessionContextUpdateDataPatch =\n                                OpenAPI_app_session_context_update_data_patch_parseFromJSON(item);\n                            if (!message->AppSessionContextUpdateDataPatch) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        END\n                    }\n                } else {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_POST)\n                        if (message->res_status == 0 ||\n                            message->res_status ==\n                                OGS_SBI_HTTP_STATUS_CREATED) {\n                            message->AppSessionContext =\n                                OpenAPI_app_session_context_parseFromJSON(item);\n                            if (!message->AppSessionContext) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                }\n                break;\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAMF_CALLBACK)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_CONTEXT_STATUS)\n                message->SmContextStatusNotification =\n                    OpenAPI_sm_context_status_notification_parseFromJSON(item);\n                if (!message->SmContextStatusNotification) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NSMF_CALLBACK)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_N1_N2_FAILURE_NOTIFY)\n                message->N1N2MsgTxfrFailureNotification =\n                    OpenAPI_n1_n2_msg_txfr_failure_notification_parseFromJSON(\n                            item);\n                if (!message->N1N2MsgTxfrFailureNotification) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SM_POLICY_NOTIFY)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_UPDATE)\n                    message->SmPolicyNotification =\n                        OpenAPI_sm_policy_notification_parseFromJSON(item);\n                    if (!message->SmPolicyNotification) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n                CASE(OGS_SBI_RESOURCE_NAME_TERMINATE)\n                    message->TerminationNotification =\n                        OpenAPI_termination_notification_parseFromJSON(item);\n                    if (!message->TerminationNotification) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        DEFAULT\n            rv = OGS_ERROR;\n            ogs_error(\"Not implemented API name [%s]\",\n                    message->h.service.name);\n        END\n    }\n\ncleanup:\n\n    cJSON_Delete(item);\n    return rv;\n}\n\nstatic int parse_content(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http)\n{\n    ogs_assert(message);\n    ogs_assert(http);\n\n    if (message->http.content_type &&\n        !strncmp(message->http.content_type, OGS_SBI_CONTENT_MULTIPART_TYPE,\n            strlen(OGS_SBI_CONTENT_MULTIPART_TYPE))) {\n        return parse_multipart(message, http);\n    } else {\n        return parse_json(message, message->http.content_type, http->content);\n    }\n}\n\nstatic bool build_content(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message)\n{\n    ogs_assert(message);\n    ogs_assert(http);\n\n    if (message->num_of_part) {\n        ogs_expect_or_return_val(true ==\n                build_multipart(http, message), false);\n    } else {\n        http->content = build_json(message);\n        if (http->content) {\n            http->content_length = strlen(http->content);\n            if (message->http.content_type) {\n                ogs_sbi_header_set(http->headers,\n                        OGS_SBI_CONTENT_TYPE, message->http.content_type);\n            } else {\n                ogs_sbi_header_set(http->headers,\n                        OGS_SBI_CONTENT_TYPE, OGS_SBI_CONTENT_JSON_TYPE);\n            }\n        }\n    }\n\n    return true;\n}\n\ntypedef struct multipart_parser_data_s {\n    int num_of_part;\n    struct {\n        char *content_type;\n        char *content_id;\n        char *content;\n        size_t content_length;\n    } part[OGS_SBI_MAX_NUM_OF_PART];\n\n    char *header_field;\n} multipart_parser_data_t;\n\nstatic int on_header_field(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (at && length) {\n        if (data->header_field)\n            ogs_free(data->header_field);\n        data->header_field = ogs_strndup(at, length);\n        ogs_assert(data->header_field);\n    }\n    return 0;\n}\n\nstatic int on_header_value(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (at && length) {\n        SWITCH(data->header_field)\n        CASE(OGS_SBI_CONTENT_TYPE)\n            if (data->part[data->num_of_part].content_type)\n                ogs_free(data->part[data->num_of_part].content_type);\n            data->part[data->num_of_part].content_type =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_type);\n            break;\n        CASE(OGS_SBI_CONTENT_ID)\n            if (data->part[data->num_of_part].content_id)\n                ogs_free(data->part[data->num_of_part].content_id);\n            data->part[data->num_of_part].content_id =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_id);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown header field [%s]\", data->header_field);\n        END\n    }\n\n    return 0;\n}\n\nstatic int on_part_data(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (at && length) {\n        SWITCH(data->part[data->num_of_part].content_type)\n        CASE(OGS_SBI_CONTENT_JSON_TYPE)\n        CASE(OGS_SBI_CONTENT_5GNAS_TYPE)\n        CASE(OGS_SBI_CONTENT_NGAP_TYPE)\n            size_t offset = 0;\n\n            if (data->part[data->num_of_part].content == NULL) {\n                data->part[data->num_of_part].content_length = length;\n                data->part[data->num_of_part].content =\n                    (char *)ogs_malloc(length + 1);\n                ogs_assert(data->part[data->num_of_part].content);\n            } else {\n                offset = data->part[data->num_of_part].content_length;\n                if ((data->part[data->num_of_part].content_length + length) >\n                        OGS_HUGE_LEN) {\n                    ogs_error(\"Overflow length [%d:%d]\",\n                        (int)data->part[data->num_of_part].content_length,\n                        (int)length);\n                    ogs_assert_if_reached();\n                    return 0;\n                }\n                data->part[data->num_of_part].content_length += length;\n                data->part[data->num_of_part].content = (char *)ogs_realloc(\n                    data->part[data->num_of_part].content,\n                    data->part[data->num_of_part].content_length + 1);\n                ogs_assert(data->part[data->num_of_part].content);\n            }\n            memcpy(data->part[data->num_of_part].content + offset, at, length);\n            data->part[data->num_of_part].content[\n                data->part[data->num_of_part].content_length] = 0;\n            break;\n\n        DEFAULT\n            ogs_log_hexdump(OGS_LOG_FATAL, (unsigned char *)at, length);\n            ogs_error(\"Unknown content_type [%s]\",\n                    data->part[data->num_of_part].content_type);\n        END\n    }\n    return 0;\n}\n\nstatic int on_part_data_end(multipart_parser *parser)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    data->num_of_part++;\n\n    return 0;\n}\n\nstatic int parse_multipart(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http)\n{\n    char *boundary = NULL;\n    int i;\n\n    multipart_parser_settings settings;\n    multipart_parser_data_t data;\n\n    multipart_parser *parser = NULL;\n\n    ogs_assert(message);\n    ogs_assert(http);\n\n    memset(&settings, 0, sizeof(settings));\n    settings.on_header_field = &on_header_field;\n    settings.on_header_value = &on_header_value;\n    settings.on_part_data = &on_part_data;\n    settings.on_part_data_end = &on_part_data_end;\n\n    for (i = 0; i < http->content_length; i++) {\n        if (http->content[i] == '\\r' && http->content[i+1] == '\\n')\n            break;\n    }\n\n    if (i >= http->content_length) {\n        ogs_error(\"Invalid HTTP content [%d]\", i);\n        ogs_log_hexdump(OGS_LOG_ERROR,\n                (unsigned char *)http->content, http->content_length);\n        return OGS_ERROR;\n    }\n\n    boundary = ogs_strndup(http->content, i);\n    ogs_assert(boundary);\n\n    parser = multipart_parser_init(boundary, &settings);\n    ogs_assert(parser);\n\n    memset(&data, 0, sizeof(data));\n    multipart_parser_set_data(parser, &data);\n    multipart_parser_execute(parser, http->content, http->content_length);\n\n    multipart_parser_free(parser);\n    ogs_free(boundary);\n\n    for (i = 0; i < data.num_of_part; i++) {\n        SWITCH(data.part[i].content_type)\n        CASE(OGS_SBI_CONTENT_JSON_TYPE)\n            parse_json(message,\n                    data.part[i].content_type, data.part[i].content);\n\n            if (data.part[i].content_id)\n                ogs_free(data.part[i].content_id);\n            if (data.part[i].content_type)\n                ogs_free(data.part[i].content_type);\n            if (data.part[i].content)\n                ogs_free(data.part[i].content);\n\n            break;\n\n        CASE(OGS_SBI_CONTENT_5GNAS_TYPE)\n        CASE(OGS_SBI_CONTENT_NGAP_TYPE)\n            http->part[http->num_of_part].content_id =\n                data.part[i].content_id;\n            http->part[http->num_of_part].content_type =\n                data.part[i].content_type;\n            http->part[http->num_of_part].pkbuf =\n                ogs_pkbuf_alloc(NULL, data.part[i].content_length);\n            ogs_expect_or_return_val(\n                http->part[http->num_of_part].pkbuf, OGS_ERROR);\n            ogs_pkbuf_put_data(http->part[http->num_of_part].pkbuf,\n                data.part[i].content, data.part[i].content_length);\n\n            message->part[message->num_of_part].content_id =\n                http->part[http->num_of_part].content_id;\n            message->part[message->num_of_part].content_type =\n                http->part[http->num_of_part].content_type;\n            message->part[message->num_of_part].pkbuf =\n                ogs_pkbuf_copy(http->part[http->num_of_part].pkbuf);\n            ogs_expect_or_return_val(\n                message->part[message->num_of_part].pkbuf, OGS_ERROR);\n\n            http->num_of_part++;\n            message->num_of_part++;\n\n            if (data.part[i].content)\n                ogs_free(data.part[i].content);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown content-type[%s]\", data.part[i].content_type);\n        END\n    }\n\n    if (data.part[i].content_id)\n        ogs_free(data.part[i].content_id);\n    if (data.part[i].content_type)\n        ogs_free(data.part[i].content_type);\n\n    if (data.header_field)\n        ogs_free(data.header_field);\n\n    return OGS_OK;\n}\n\nstatic bool build_multipart(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message)\n{\n    int i;\n\n    char boundary[32];\n    unsigned char digest[16];\n    char *p = NULL, *last;\n\n    char *content_type = NULL;\n    char *json = NULL;\n\n    ogs_assert(message);\n    ogs_assert(http);\n\n    ogs_random(digest, 16);\n    strcpy(boundary, \"=-\");\n    ogs_base64_encode_binary(boundary + 2, digest, 16);\n\n    p = http->content = ogs_calloc(1, OGS_HUGE_LEN);\n    ogs_expect_or_return_val(p, false);\n    last = p + OGS_HUGE_LEN;\n\n    /* First boundary */\n    p = ogs_slprintf(p, last, \"--%s\\r\\n\", boundary);\n\n    /* Encapsulated multipart part (application/json) */\n    json = build_json(message);\n    ogs_expect_or_return_val(json, false);\n\n    p = ogs_slprintf(p, last, \"%s\\r\\n\\r\\n%s\",\n            OGS_SBI_CONTENT_TYPE \": \" OGS_SBI_CONTENT_JSON_TYPE, json);\n\n    ogs_free(json);\n\n    /* Add part */\n    for (i = 0; i < message->num_of_part; i++) {\n        p = ogs_slprintf(p, last, \"\\r\\n--%s\\r\\n\", boundary);\n        p = ogs_slprintf(p, last, \"%s: %s\\r\\n\",\n                OGS_SBI_CONTENT_ID, message->part[i].content_id);\n        p = ogs_slprintf(p, last, \"%s: %s\\r\\n\\r\\n\",\n                OGS_SBI_CONTENT_TYPE, message->part[i].content_type);\n        memcpy(p, message->part[i].pkbuf->data, message->part[i].pkbuf->len);\n        p += message->part[i].pkbuf->len;\n    }\n\n    /* Last boundary */\n    p = ogs_slprintf(p, last, \"\\r\\n--%s--\\r\\n\", boundary);\n\n    http->content_length = p - http->content;\n\n    content_type = ogs_msprintf(\"%s; boundary=\\\"%s\\\"\",\n            OGS_SBI_CONTENT_MULTIPART_TYPE, boundary);\n    ogs_expect_or_return_val(content_type, false);\n\n    ogs_sbi_header_set(http->headers, OGS_SBI_CONTENT_TYPE, content_type);\n\n    ogs_free(content_type);\n\n    return true;\n}\n\nstatic void http_message_free(ogs_sbi_http_message_t *http)\n{\n    int i;\n    ogs_assert(http);\n\n    if (http->params) {\n        ogs_hash_index_t *hi;\n        for (hi = ogs_hash_first(http->params); hi; hi = ogs_hash_next(hi)) {\n            char *key = (char *)ogs_hash_this_key(hi);\n            char *val = ogs_hash_this_val(hi);\n            ogs_free(key);\n            ogs_free(val);\n        }\n        ogs_hash_destroy(http->params);\n    }\n\n    if (http->headers) {\n        ogs_hash_index_t *hi;\n        for (hi = ogs_hash_first(http->headers); hi; hi = ogs_hash_next(hi)) {\n            char *key = (char *)ogs_hash_this_key(hi);\n            char *val = ogs_hash_this_val(hi);\n            ogs_free(key);\n            ogs_free(val);\n        }\n        ogs_hash_destroy(http->headers);\n    }\n    if (http->content)\n        ogs_free(http->content);\n\n    for (i = 0; i < http->num_of_part; i++) {\n        if (http->part[i].pkbuf)\n            ogs_pkbuf_free(http->part[i].pkbuf);\n        if (http->part[i].content_id)\n            ogs_free(http->part[i].content_id);\n        if (http->part[i].content_type)\n            ogs_free(http->part[i].content_type);\n    }\n}\n", "/*\n * Copyright (C) 2019 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"namf-handler.h\"\n#include \"nsmf-handler.h\"\n\n#include \"nas-path.h\"\n#include \"ngap-path.h\"\n#include \"sbi-path.h\"\n\nint amf_namf_comm_handle_n1_n2_message_transfer(\n        ogs_sbi_stream_t *stream, ogs_sbi_message_t *recvmsg)\n{\n    int status;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_pkbuf_t *n1buf = NULL;\n    ogs_pkbuf_t *n2buf = NULL;\n\n    ogs_pkbuf_t *gmmbuf = NULL;\n    ogs_pkbuf_t *ngapbuf = NULL;\n\n    char *supi = NULL;\n    uint8_t pdu_session_id = OGS_NAS_PDU_SESSION_IDENTITY_UNASSIGNED;\n\n    ogs_sbi_message_t sendmsg;\n    ogs_sbi_response_t *response = NULL;\n\n    OpenAPI_n1_n2_message_transfer_req_data_t *N1N2MessageTransferReqData;\n    OpenAPI_n1_n2_message_transfer_rsp_data_t N1N2MessageTransferRspData;\n    OpenAPI_n1_message_container_t *n1MessageContainer = NULL;\n    OpenAPI_ref_to_binary_data_t *n1MessageContent = NULL;\n    OpenAPI_n2_info_container_t *n2InfoContainer = NULL;\n    OpenAPI_n2_sm_information_t *smInfo = NULL;\n    OpenAPI_n2_info_content_t *n2InfoContent = NULL;\n    OpenAPI_ref_to_binary_data_t *ngapData = NULL;\n\n    ogs_assert(stream);\n    ogs_assert(recvmsg);\n\n    N1N2MessageTransferReqData = recvmsg->N1N2MessageTransferReqData;\n    if (!N1N2MessageTransferReqData) {\n        ogs_error(\"No N1N2MessageTransferReqData\");\n        return OGS_ERROR;\n    }\n\n    if (N1N2MessageTransferReqData->is_pdu_session_id == false) {\n        ogs_error(\"No PDU Session Identity\");\n        return OGS_ERROR;\n    }\n    pdu_session_id = N1N2MessageTransferReqData->pdu_session_id;\n\n    supi = recvmsg->h.resource.component[1];\n    if (!supi) {\n        ogs_error(\"No SUPI\");\n        return OGS_ERROR;\n    }\n\n    amf_ue = amf_ue_find_by_supi(supi);\n    if (!amf_ue) {\n        ogs_error(\"No UE context [%s]\", supi);\n        return OGS_ERROR;\n    }\n\n    sess = amf_sess_find_by_psi(amf_ue, pdu_session_id);\n    if (!sess) {\n        ogs_error(\"[%s] No PDU Session Context [%d]\",\n                amf_ue->supi, pdu_session_id);\n        return OGS_ERROR;\n    }\n\n    n1MessageContainer = N1N2MessageTransferReqData->n1_message_container;\n    if (n1MessageContainer) {\n        n1MessageContent = n1MessageContainer->n1_message_content;\n        if (!n1MessageContent || !n1MessageContent->content_id) {\n            ogs_error(\"No n1MessageContent\");\n            return OGS_ERROR;\n        }\n\n        n1buf = ogs_sbi_find_part_by_content_id(\n                recvmsg, n1MessageContent->content_id);\n        if (!n1buf) {\n            ogs_error(\"[%s] No N1 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        /*\n         * NOTE : The pkbuf created in the SBI message will be removed\n         *        from ogs_sbi_message_free(), so it must be copied.\n         */\n        n1buf = ogs_pkbuf_copy(n1buf);\n        ogs_assert(n1buf);\n    }\n\n    n2InfoContainer = N1N2MessageTransferReqData->n2_info_container;\n    if (n2InfoContainer) {\n        smInfo = n2InfoContainer->sm_info;\n        if (!smInfo) {\n            ogs_error(\"No smInfo\");\n            return OGS_ERROR;\n        }\n        n2InfoContent = smInfo->n2_info_content;\n        if (!n2InfoContent) {\n            ogs_error(\"No n2InfoContent\");\n            return OGS_ERROR;\n        }\n\n        ngapData = n2InfoContent->ngap_data;\n        if (!ngapData || !ngapData->content_id) {\n            ogs_error(\"No ngapData\");\n            return OGS_ERROR;\n        }\n        n2buf = ogs_sbi_find_part_by_content_id(\n                recvmsg, ngapData->content_id);\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        /*\n         * NOTE : The pkbuf created in the SBI message will be removed\n         *        from ogs_sbi_message_free(), so it must be copied.\n         */\n        n2buf = ogs_pkbuf_copy(n2buf);\n        ogs_assert(n2buf);\n    }\n\n    memset(&sendmsg, 0, sizeof(sendmsg));\n\n    status = OGS_SBI_HTTP_STATUS_OK;\n\n    memset(&N1N2MessageTransferRspData, 0, sizeof(N1N2MessageTransferRspData));\n    N1N2MessageTransferRspData.cause =\n        OpenAPI_n1_n2_message_transfer_cause_N1_N2_TRANSFER_INITIATED;\n\n    sendmsg.N1N2MessageTransferRspData = &N1N2MessageTransferRspData;\n\n    switch (n2InfoContent->ngap_ie_type) {\n    case OpenAPI_ngap_ie_type_PDU_RES_SETUP_REQ:\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (n1buf) {\n            gmmbuf = gmm_build_dl_nas_transport(sess,\n                    OGS_NAS_PAYLOAD_CONTAINER_N1_SM_INFORMATION, n1buf, 0, 0);\n            ogs_assert(gmmbuf);\n        }\n\n        if (gmmbuf) {\n            ran_ue_t *ran_ue = NULL;\n\n            /***********************************\n             * 4.3.2 PDU Session Establishment *\n             ***********************************/\n\n            ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n            ogs_assert(ran_ue);\n\n            if (sess->pdu_session_establishment_accept) {\n                ogs_pkbuf_free(sess->pdu_session_establishment_accept);\n                sess->pdu_session_establishment_accept = NULL;\n            }\n\n            if (ran_ue->initial_context_setup_request_sent == true) {\n                ngapbuf = ngap_sess_build_pdu_session_resource_setup_request(\n                        sess, gmmbuf, n2buf);\n                ogs_assert(ngapbuf);\n            } else {\n                ngapbuf = ngap_sess_build_initial_context_setup_request(\n                        sess, gmmbuf, n2buf);\n                ogs_assert(ngapbuf);\n\n                ran_ue->initial_context_setup_request_sent = true;\n            }\n\n            if (SESSION_CONTEXT_IN_SMF(sess)) {\n                /*\n                 * [1-CLIENT] /nsmf-pdusession/v1/sm-contexts\n                 * [2-SERVER] /namf-comm/v1/ue-contexts/{supi}/n1-n2-messages\n                 *\n                 * If [2-SERVER] arrives after [1-CLIENT],\n                 * sm-context-ref is created in [1-CLIENT].\n                 * So, the PDU session establishment accpet can be transmitted.\n                 */\n                if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                    ogs_error(\"nas_5gs_send_to_gnb() failed\");\n            } else {\n                sess->pdu_session_establishment_accept = ngapbuf;\n            }\n\n        } else {\n            /*********************************************\n             * 4.2.3.3 Network Triggered Service Request *\n             *********************************************/\n\n            if (CM_IDLE(amf_ue)) {\n                ogs_sbi_server_t *server = NULL;\n                ogs_sbi_header_t header;\n                ogs_sbi_client_t *client = NULL;\n                ogs_sockaddr_t *addr = NULL;\n\n                if (!N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri) {\n                    ogs_error(\"[%s:%d] No n1-n2-failure-notification-uri\",\n                            amf_ue->supi, sess->psi);\n                    return OGS_ERROR;\n                }\n\n                addr = ogs_sbi_getaddr_from_uri(\n                        N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri);\n                if (!addr) {\n                    ogs_error(\"[%s:%d] Invalid URI [%s]\",\n                            amf_ue->supi, sess->psi,\n                            N1N2MessageTransferReqData->\n                                n1n2_failure_txf_notif_uri);\n                    return OGS_ERROR;;\n                }\n\n                client = ogs_sbi_client_find(addr);\n                if (!client) {\n                    client = ogs_sbi_client_add(addr);\n                    ogs_assert(client);\n                }\n                OGS_SETUP_SBI_CLIENT(&sess->paging, client);\n\n                ogs_freeaddrinfo(addr);\n\n                status = OGS_SBI_HTTP_STATUS_ACCEPTED;\n                N1N2MessageTransferRspData.cause =\n                    OpenAPI_n1_n2_message_transfer_cause_ATTEMPTING_TO_REACH_UE;\n\n                /* Location */\n                server = ogs_sbi_server_from_stream(stream);\n                ogs_assert(server);\n\n                memset(&header, 0, sizeof(header));\n                header.service.name = (char *)OGS_SBI_SERVICE_NAME_NAMF_COMM;\n                header.api.version = (char *)OGS_SBI_API_V1;\n                header.resource.component[0] =\n                    (char *)OGS_SBI_RESOURCE_NAME_UE_CONTEXTS;\n                header.resource.component[1] = amf_ue->supi;\n                header.resource.component[2] =\n                    (char *)OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES;\n                header.resource.component[3] = sess->sm_context_ref;\n\n                sendmsg.http.location = ogs_sbi_server_uri(server, &header);\n\n                /* Store Paging Info */\n                AMF_SESS_STORE_PAGING_INFO(\n                        sess, sendmsg.http.location,\n                        N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri);\n\n                /* Store N2 Transfer message */\n                AMF_SESS_STORE_N2_TRANSFER(\n                        sess, pdu_session_resource_setup_request, n2buf);\n\n                ogs_assert(OGS_OK == ngap_send_paging(amf_ue));\n\n            } else if (CM_CONNECTED(amf_ue)) {\n                ogs_assert(OGS_OK ==\n                    ngap_send_pdu_resource_setup_request(sess, n2buf));\n\n            } else {\n\n                ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n                ogs_assert_if_reached();\n\n            }\n\n        }\n        break;\n\n    case OpenAPI_ngap_ie_type_PDU_RES_MOD_REQ:\n        if (!n1buf) {\n            ogs_error(\"[%s] No N1 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (CM_IDLE(amf_ue)) {\n            ogs_sbi_server_t *server = NULL;\n            ogs_sbi_header_t header;\n\n            status = OGS_SBI_HTTP_STATUS_ACCEPTED;\n            N1N2MessageTransferRspData.cause =\n                OpenAPI_n1_n2_message_transfer_cause_ATTEMPTING_TO_REACH_UE;\n\n            /* Location */\n            server = ogs_sbi_server_from_stream(stream);\n            ogs_assert(server);\n\n            memset(&header, 0, sizeof(header));\n            header.service.name = (char *)OGS_SBI_SERVICE_NAME_NAMF_COMM;\n            header.api.version = (char *)OGS_SBI_API_V1;\n            header.resource.component[0] =\n                (char *)OGS_SBI_RESOURCE_NAME_UE_CONTEXTS;\n            header.resource.component[1] = amf_ue->supi;\n            header.resource.component[2] =\n                (char *)OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES;\n            header.resource.component[3] = sess->sm_context_ref;\n\n            sendmsg.http.location = ogs_sbi_server_uri(server, &header);\n\n            /* Store Paging Info */\n            AMF_SESS_STORE_PAGING_INFO(\n                    sess, sendmsg.http.location, NULL);\n\n            /* Store 5GSM Message */\n            AMF_SESS_STORE_5GSM_MESSAGE(sess,\n                    OGS_NAS_5GS_PDU_SESSION_MODIFICATION_COMMAND,\n                    n1buf, n2buf);\n\n            ogs_assert(OGS_OK == ngap_send_paging(amf_ue));\n\n        } else if (CM_CONNECTED(amf_ue)) {\n            gmmbuf = gmm_build_dl_nas_transport(sess,\n                    OGS_NAS_PAYLOAD_CONTAINER_N1_SM_INFORMATION, n1buf, 0, 0);\n            ogs_assert(gmmbuf);\n\n            ngapbuf = ngap_build_pdu_session_resource_modify_request(\n                    sess, gmmbuf, n2buf);\n            ogs_assert(ngapbuf);\n\n            if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                ogs_error(\"nas_5gs_send_to_gnb() failed\");\n\n        } else {\n            ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n            ogs_assert_if_reached();\n        }\n\n        break;\n\n    case OpenAPI_ngap_ie_type_PDU_RES_REL_CMD:\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (n1buf)\n            ogs_pkbuf_free(n1buf);\n\n        if (CM_IDLE(amf_ue)) {\n            if (n2buf)\n                ogs_pkbuf_free(n2buf);\n\n            if (N1N2MessageTransferReqData->is_skip_ind == true &&\n                N1N2MessageTransferReqData->skip_ind == true) {\n                N1N2MessageTransferRspData.cause =\n                    OpenAPI_n1_n2_message_transfer_cause_N1_MSG_NOT_TRANSFERRED;\n            } else {\n                ogs_fatal(\"[%s] No skipInd\", amf_ue->supi);\n                ogs_assert_if_reached();\n            }\n\n        } else if (CM_CONNECTED(amf_ue)) {\n            ngapbuf = ngap_build_pdu_session_resource_release_command(\n                    sess, NULL, n2buf);\n            ogs_assert(ngapbuf);\n\n            if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                ogs_error(\"nas_5gs_send_to_gnb() failed\");\n\n        } else {\n            ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n            ogs_assert_if_reached();\n        }\n        break;\n\n    default:\n        ogs_error(\"Not implemented ngap_ie_type[%d]\",\n                n2InfoContent->ngap_ie_type);\n        ogs_assert_if_reached();\n    }\n\n    response = ogs_sbi_build_response(&sendmsg, status);\n    ogs_assert(response);\n    ogs_assert(true == ogs_sbi_server_send_response(stream, response));\n\n    if (sendmsg.http.location)\n        ogs_free(sendmsg.http.location);\n\n    return OGS_OK;\n}\n\nint amf_namf_callback_handle_sm_context_status(\n        ogs_sbi_stream_t *stream, ogs_sbi_message_t *recvmsg)\n{\n    int status = OGS_SBI_HTTP_STATUS_NO_CONTENT;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    uint8_t pdu_session_identity;\n\n    ogs_sbi_message_t sendmsg;\n    ogs_sbi_response_t *response = NULL;\n\n    OpenAPI_sm_context_status_notification_t *SmContextStatusNotification;\n    OpenAPI_status_info_t *StatusInfo;\n\n    ogs_assert(stream);\n    ogs_assert(recvmsg);\n\n    if (!recvmsg->h.resource.component[0]) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"No SUPI\");\n        goto cleanup;\n    }\n\n    amf_ue = amf_ue_find_by_supi(recvmsg->h.resource.component[0]);\n    if (!amf_ue) {\n        status = OGS_SBI_HTTP_STATUS_NOT_FOUND;\n        ogs_error(\"Cannot find SUPI [%s]\", recvmsg->h.resource.component[0]);\n        goto cleanup;\n    }\n\n    if (!recvmsg->h.resource.component[2]) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s] No PDU Session Identity\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    pdu_session_identity = atoi(recvmsg->h.resource.component[2]);\n    if (pdu_session_identity == OGS_NAS_PDU_SESSION_IDENTITY_UNASSIGNED) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s] PDU Session Identity is unassigned\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    sess = amf_sess_find_by_psi(amf_ue, pdu_session_identity);\n    if (!sess) {\n        status = OGS_SBI_HTTP_STATUS_NOT_FOUND;\n        ogs_warn(\"[%s] Cannot find session\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    SmContextStatusNotification = recvmsg->SmContextStatusNotification;\n    if (!SmContextStatusNotification) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s:%d] No SmContextStatusNotification\",\n                amf_ue->supi, sess->psi);\n        goto cleanup;\n    }\n\n    StatusInfo = SmContextStatusNotification->status_info;\n    if (!StatusInfo) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s:%d] No StatusInfo\", amf_ue->supi, sess->psi);\n        goto cleanup;\n    }\n\n    sess->resource_status = StatusInfo->resource_status;\n\n    /*\n     * Race condition for PDU session release complete\n     *  - CLIENT : /nsmf-pdusession/v1/sm-contexts/{smContextRef}/modify\n     *  - SERVER : /namf-callback/v1/{supi}/sm-context-status/{psi})\n     *\n     * If NOTIFICATION is received before the CLIENT response is received,\n     * CLIENT sync is not finished. In this case, the session context\n     * should not be removed.\n     *\n     * If NOTIFICATION comes after the CLIENT response is received,\n     * sync is done. So, the session context can be removed.\n     */\n    if (sess->n1_released == true &&\n        sess->n2_released == true &&\n        sess->resource_status == OpenAPI_resource_status_RELEASED) {\n\n        ogs_debug(\"[%s:%d] SM context remove\", amf_ue->supi, sess->psi);\n        amf_nsmf_pdusession_handle_release_sm_context(\n                sess, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n    }\n\ncleanup:\n    memset(&sendmsg, 0, sizeof(sendmsg));\n\n    response = ogs_sbi_build_response(&sendmsg, status);\n    ogs_assert(response);\n    ogs_assert(true == ogs_sbi_server_send_response(stream, response));\n\n    return OGS_OK;\n}\n"], "fixing_code": ["/*\n * Copyright (C) 2019 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"ogs-sbi.h\"\n#include \"ogs-crypt.h\"\n#include \"yuarel.h\"\n\n#include \"contrib/multipart_parser.h\"\n\nstatic OGS_POOL(request_pool, ogs_sbi_request_t);\nstatic OGS_POOL(response_pool, ogs_sbi_response_t);\n\nstatic char *build_json(ogs_sbi_message_t *message);\nstatic int parse_json(ogs_sbi_message_t *message,\n        char *content_type, char *json);\n\nstatic bool build_content(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message);\nstatic int parse_content(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http);\n\nstatic bool build_multipart(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message);\nstatic int parse_multipart(\n        ogs_sbi_message_t *sbi_message, ogs_sbi_http_message_t *http);\n\nstatic void http_message_free(ogs_sbi_http_message_t *http);\n\nvoid ogs_sbi_message_init(int num_of_request_pool, int num_of_response_pool)\n{\n    ogs_pool_init(&request_pool, num_of_request_pool);\n    ogs_pool_init(&response_pool, num_of_response_pool);\n}\n\nvoid ogs_sbi_message_final(void)\n{\n    ogs_pool_final(&request_pool);\n    ogs_pool_final(&response_pool);\n}\n\nvoid ogs_sbi_message_free(ogs_sbi_message_t *message)\n{\n    int i;\n\n    ogs_assert(message);\n\n    if (message->NFProfile)\n        OpenAPI_nf_profile_free(message->NFProfile);\n    if (message->ProblemDetails)\n        OpenAPI_problem_details_free(message->ProblemDetails);\n    if (message->PatchItemList) {\n        OpenAPI_lnode_t *node = NULL;\n        OpenAPI_list_for_each(message->PatchItemList, node)\n            OpenAPI_patch_item_free(node->data);\n        OpenAPI_list_free(message->PatchItemList);\n    }\n\n    if (message->SubscriptionData)\n        OpenAPI_subscription_data_free(message->SubscriptionData);\n    if (message->NotificationData)\n        OpenAPI_notification_data_free(message->NotificationData);\n    if (message->SearchResult)\n        OpenAPI_search_result_free(message->SearchResult);\n    if (message->AuthenticationInfo)\n        OpenAPI_authentication_info_free(message->AuthenticationInfo);\n    if (message->AuthenticationInfoRequest)\n        OpenAPI_authentication_info_request_free(\n                message->AuthenticationInfoRequest);\n    if (message->AuthenticationInfoResult)\n        OpenAPI_authentication_info_result_free(\n                message->AuthenticationInfoResult);\n    if (message->AuthenticationSubscription)\n        OpenAPI_authentication_subscription_free(\n                message->AuthenticationSubscription);\n    if (message->UeAuthenticationCtx)\n        OpenAPI_ue_authentication_ctx_free(message->UeAuthenticationCtx);\n    if (message->ConfirmationData)\n        OpenAPI_confirmation_data_free(message->ConfirmationData);\n    if (message->ConfirmationDataResponse)\n        OpenAPI_confirmation_data_response_free(\n                message->ConfirmationDataResponse);\n    if (message->AuthEvent)\n        OpenAPI_auth_event_free(message->AuthEvent);\n    if (message->Amf3GppAccessRegistration)\n        OpenAPI_amf3_gpp_access_registration_free(\n                message->Amf3GppAccessRegistration);\n    if (message->AccessAndMobilitySubscriptionData)\n        OpenAPI_access_and_mobility_subscription_data_free(\n                message->AccessAndMobilitySubscriptionData);\n    if (message->SmfSelectionSubscriptionData)\n        OpenAPI_smf_selection_subscription_data_free(\n                message->SmfSelectionSubscriptionData);\n    if (message->UeContextInSmfData)\n        OpenAPI_ue_context_in_smf_data_free(message->UeContextInSmfData);\n    if (message->SmContextCreateData)\n        OpenAPI_sm_context_create_data_free(message->SmContextCreateData);\n    if (message->SmContextCreatedData)\n        OpenAPI_sm_context_created_data_free(message->SmContextCreatedData);\n    if (message->SmContextCreateError)\n        OpenAPI_sm_context_create_error_free(message->SmContextCreateError);\n    if (message->SmContextUpdateData)\n        OpenAPI_sm_context_update_data_free(message->SmContextUpdateData);\n    if (message->SmContextUpdatedData)\n        OpenAPI_sm_context_updated_data_free(message->SmContextUpdatedData);\n    if (message->SmContextUpdateError)\n        OpenAPI_sm_context_update_error_free(message->SmContextUpdateError);\n    if (message->SmContextReleaseData)\n        OpenAPI_sm_context_release_data_free(message->SmContextReleaseData);\n    if (message->SmContextReleasedData)\n        OpenAPI_sm_context_released_data_free(message->SmContextReleasedData);\n    if (message->SessionManagementSubscriptionData)\n        OpenAPI_session_management_subscription_data_free(\n                message->SessionManagementSubscriptionData);\n    if (message->N1N2MessageTransferReqData)\n        OpenAPI_n1_n2_message_transfer_req_data_free(\n                message->N1N2MessageTransferReqData);\n    if (message->N1N2MessageTransferRspData)\n        OpenAPI_n1_n2_message_transfer_rsp_data_free(\n                message->N1N2MessageTransferRspData);\n    if (message->N1N2MsgTxfrFailureNotification)\n        OpenAPI_n1_n2_msg_txfr_failure_notification_free(\n                message->N1N2MsgTxfrFailureNotification);\n    if (message->SmContextStatusNotification)\n        OpenAPI_sm_context_status_notification_free(\n                message->SmContextStatusNotification);\n    if (message->PolicyAssociationRequest)\n        OpenAPI_policy_association_request_free(\n                message->PolicyAssociationRequest);\n    if (message->PolicyAssociation)\n        OpenAPI_policy_association_free(message->PolicyAssociation);\n    if (message->AmPolicyData)\n        OpenAPI_am_policy_data_free(message->AmPolicyData);\n    if (message->SmPolicyContextData)\n        OpenAPI_sm_policy_context_data_free(message->SmPolicyContextData);\n    if (message->SmPolicyDecision)\n        OpenAPI_sm_policy_decision_free(message->SmPolicyDecision);\n    if (message->SmPolicyData)\n        OpenAPI_sm_policy_data_free(message->SmPolicyData);\n    if (message->SmPolicyDeleteData)\n        OpenAPI_sm_policy_delete_data_free(message->SmPolicyDeleteData);\n    if (message->AuthorizedNetworkSliceInfo)\n        OpenAPI_authorized_network_slice_info_free(\n                message->AuthorizedNetworkSliceInfo);\n    if (message->PcfBinding)\n        OpenAPI_pcf_binding_free(message->PcfBinding);\n    if (message->AppSessionContext)\n        OpenAPI_app_session_context_free(message->AppSessionContext);\n    if (message->AppSessionContextUpdateDataPatch)\n        OpenAPI_app_session_context_update_data_patch_free(message->AppSessionContextUpdateDataPatch);\n    if (message->SmPolicyNotification)\n        OpenAPI_sm_policy_notification_free(message->SmPolicyNotification);\n    if (message->TerminationNotification)\n        OpenAPI_termination_notification_free(message->TerminationNotification);\n\n    for (i = 0; i < message->num_of_part; i++) {\n        if (message->part[i].pkbuf)\n            ogs_pkbuf_free(message->part[i].pkbuf);\n    }\n}\n\nogs_sbi_request_t *ogs_sbi_request_new(void)\n{\n    ogs_sbi_request_t *request = NULL;\n\n    ogs_pool_alloc(&request_pool, &request);\n    ogs_expect_or_return_val(request, NULL);\n    memset(request, 0, sizeof(ogs_sbi_request_t));\n\n    request->http.params = ogs_hash_make();\n    ogs_expect_or_return_val(request->http.params, NULL);\n    request->http.headers = ogs_hash_make();\n    ogs_expect_or_return_val(request->http.headers, NULL);\n\n    return request;\n}\n\nogs_sbi_response_t *ogs_sbi_response_new(void)\n{\n    ogs_sbi_response_t *response = NULL;\n\n    ogs_pool_alloc(&response_pool, &response);\n    ogs_expect_or_return_val(response, NULL);\n    memset(response, 0, sizeof(ogs_sbi_response_t));\n\n    response->http.params = ogs_hash_make();\n    ogs_expect_or_return_val(response->http.params, NULL);\n    response->http.headers = ogs_hash_make();\n    ogs_expect_or_return_val(response->http.headers, NULL);\n\n    return response;\n}\n\nvoid ogs_sbi_request_free(ogs_sbi_request_t *request)\n{\n    ogs_assert(request);\n\n    if (request->h.uri)\n        ogs_free(request->h.uri);\n\n    ogs_sbi_header_free(&request->h);\n    http_message_free(&request->http);\n\n    ogs_pool_free(&request_pool, request);\n}\n\nvoid ogs_sbi_response_free(ogs_sbi_response_t *response)\n{\n    ogs_assert(response);\n\n    if (response->h.uri)\n        ogs_free(response->h.uri);\n\n    ogs_sbi_header_free(&response->h);\n    http_message_free(&response->http);\n\n    ogs_pool_free(&response_pool, response);\n}\n\nogs_sbi_request_t *ogs_sbi_build_request(ogs_sbi_message_t *message)\n{\n    ogs_sbi_request_t *request = NULL;\n\n    ogs_assert(message);\n\n    request = ogs_sbi_request_new();\n    ogs_expect_or_return_val(request, NULL);\n\n    ogs_expect_or_return_val(message->h.method, NULL);\n    request->h.method = ogs_strdup(message->h.method);\n    if (message->h.uri) {\n        ogs_expect_or_return_val(message->h.uri, NULL);\n        request->h.uri = ogs_strdup(message->h.uri);\n        ogs_expect_or_return_val(request->h.uri, NULL);\n    } else {\n        int i;\n\n        ogs_expect_or_return_val(message->h.service.name, NULL);\n        request->h.service.name = ogs_strdup(message->h.service.name);\n        ogs_expect_or_return_val(message->h.api.version, NULL);\n        request->h.api.version = ogs_strdup(message->h.api.version);\n        ogs_expect_or_return_val(request->h.api.version, NULL);\n\n        ogs_expect_or_return_val(message->h.resource.component[0], NULL);\n        for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n                            message->h.resource.component[i]; i++)\n            request->h.resource.component[i] = ogs_strdup(\n                    message->h.resource.component[i]);\n    }\n\n    /* URL Param */\n    if (message->param.nf_id) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_NF_ID, message->param.nf_id);\n    }\n    if (message->param.nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_NF_TYPE, v);\n    }\n    if (message->param.requester_nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.requester_nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_REQUESTER_NF_TYPE, v);\n    }\n    if (message->param.target_nf_type) {\n        char *v = OpenAPI_nf_type_ToString(message->param.target_nf_type);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_TARGET_NF_TYPE, v);\n    }\n    if (message->param.limit) {\n        char *v = ogs_msprintf(\"%d\", message->param.limit);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_LIMIT, v);\n        ogs_free(v);\n    }\n    if (message->param.dnn) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_DNN, message->param.dnn);\n    }\n    if (message->param.plmn_id_presence) {\n        OpenAPI_plmn_id_t plmn_id;\n\n        plmn_id.mnc = ogs_plmn_id_mnc_string(&message->param.plmn_id);\n        plmn_id.mcc = ogs_plmn_id_mcc_string(&message->param.plmn_id);\n\n        if (plmn_id.mnc && plmn_id.mcc) {\n            char *v = NULL;\n            cJSON *item = NULL;\n\n            item = OpenAPI_plmn_id_convertToJSON(&plmn_id);\n            ogs_expect_or_return_val(item, NULL);\n            if (plmn_id.mnc) ogs_free(plmn_id.mnc);\n            if (plmn_id.mcc) ogs_free(plmn_id.mcc);\n\n            v = cJSON_Print(item);\n            ogs_expect_or_return_val(v, NULL);\n            cJSON_Delete(item);\n\n            ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_PLMN_ID, v);\n            ogs_free(v);\n        }\n    }\n    if (message->param.single_nssai_presence) {\n        char *v = ogs_sbi_s_nssai_to_string(&message->param.s_nssai);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_SINGLE_NSSAI, v);\n        ogs_free(v);\n    }\n    if (message->param.snssai_presence) {\n        char *v = ogs_sbi_s_nssai_to_string(&message->param.s_nssai);\n        ogs_expect_or_return_val(v, NULL);\n        ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_SNSSAI, v);\n        ogs_free(v);\n    }\n    if (message->param.plmn_id_presence) {\n        OpenAPI_plmn_id_t plmn_id;\n\n        plmn_id.mnc = ogs_plmn_id_mnc_string(&message->param.plmn_id);\n        plmn_id.mcc = ogs_plmn_id_mcc_string(&message->param.plmn_id);\n\n        if (plmn_id.mnc && plmn_id.mcc) {\n            char *v = NULL;\n            cJSON *item = NULL;\n\n            item = OpenAPI_plmn_id_convertToJSON(&plmn_id);\n            ogs_expect_or_return_val(item, NULL);\n            if (plmn_id.mnc) ogs_free(plmn_id.mnc);\n            if (plmn_id.mcc) ogs_free(plmn_id.mcc);\n\n            v = cJSON_Print(item);\n            ogs_expect_or_return_val(v, NULL);\n            cJSON_Delete(item);\n\n            ogs_sbi_header_set(request->http.params, OGS_SBI_PARAM_PLMN_ID, v);\n            ogs_free(v);\n        }\n    }\n    if (message->param.slice_info_request_for_pdu_session_presence) {\n        OpenAPI_slice_info_for_pdu_session_t SliceInfoForPDUSession;\n        OpenAPI_snssai_t sNSSAI;\n\n        char *v = NULL;\n        cJSON *item = NULL;\n\n        ogs_expect_or_return_val(message->param.s_nssai.sst, NULL);\n        ogs_expect_or_return_val(message->param.roaming_indication, NULL);\n\n        memset(&sNSSAI, 0, sizeof(sNSSAI));\n        sNSSAI.sst = message->param.s_nssai.sst;\n        sNSSAI.sd = ogs_s_nssai_sd_to_string(message->param.s_nssai.sd);\n\n        memset(&SliceInfoForPDUSession, 0, sizeof(SliceInfoForPDUSession));\n\n        SliceInfoForPDUSession.s_nssai = &sNSSAI;\n        SliceInfoForPDUSession.roaming_indication =\n            message->param.roaming_indication;\n\n        item = OpenAPI_slice_info_for_pdu_session_convertToJSON(\n                &SliceInfoForPDUSession);\n        ogs_expect_or_return_val(item, NULL);\n\n        v = cJSON_Print(item);\n        ogs_expect_or_return_val(v, NULL);\n        cJSON_Delete(item);\n\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_SLICE_INFO_REQUEST_FOR_PDU_SESSION, v);\n        ogs_free(v);\n\n        if (sNSSAI.sd)\n            ogs_free(sNSSAI.sd);\n    }\n    if (message->param.ipv4addr) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_IPV4ADDR, message->param.ipv4addr);\n    }\n    if (message->param.ipv6prefix) {\n        ogs_sbi_header_set(request->http.params,\n                OGS_SBI_PARAM_IPV6PREFIX, message->param.ipv6prefix);\n    }\n\n    ogs_expect_or_return_val(true ==\n            build_content(&request->http, message), NULL);\n\n    if (message->http.accept) {\n        ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                message->http.accept);\n    } else {\n        SWITCH(message->h.method)\n        CASE(OGS_SBI_HTTP_METHOD_DELETE)\n            ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                OGS_SBI_CONTENT_PROBLEM_TYPE);\n            break;\n        DEFAULT\n            ogs_sbi_header_set(request->http.headers, OGS_SBI_ACCEPT,\n                OGS_SBI_CONTENT_JSON_TYPE \",\" OGS_SBI_CONTENT_PROBLEM_TYPE);\n            break;\n        END\n    }\n\n    if (message->http.content_encoding)\n        ogs_sbi_header_set(request->http.headers,\n                OGS_SBI_ACCEPT_ENCODING, message->http.content_encoding);\n\n    return request;\n}\n\nogs_sbi_response_t *ogs_sbi_build_response(\n        ogs_sbi_message_t *message, int status)\n{\n    ogs_sbi_response_t *response = NULL;\n\n    ogs_assert(message);\n\n    response = ogs_sbi_response_new();\n    ogs_expect_or_return_val(response, NULL);\n\n    response->status = status;\n\n    if (response->status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n        ogs_expect_or_return_val(true ==\n            build_content(&response->http, message), NULL);\n    }\n\n    if (message->http.location) {\n        ogs_sbi_header_set(response->http.headers, \"Location\",\n                message->http.location);\n    }\n    if (message->http.cache_control)\n        ogs_sbi_header_set(response->http.headers, \"Cache-Control\",\n                message->http.cache_control);\n\n    return response;\n}\n\nint ogs_sbi_parse_request(\n        ogs_sbi_message_t *message, ogs_sbi_request_t *request)\n{\n    int rv;\n    ogs_hash_index_t *hi;\n\n    ogs_assert(request);\n    ogs_assert(message);\n\n    rv = ogs_sbi_parse_header(message, &request->h);\n    if (rv != OGS_OK) {\n        ogs_error(\"ogs_sbi_parse_header() failed\");\n        return OGS_ERROR;\n    }\n\n    for (hi = ogs_hash_first(request->http.params);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_NF_ID)) {\n            message->param.nf_id = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_NF_TYPE)) {\n            message->param.nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_TARGET_NF_TYPE)) {\n            message->param.target_nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_REQUESTER_NF_TYPE)) {\n            message->param.requester_nf_type =\n                OpenAPI_nf_type_FromString(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_LIMIT)) {\n            message->param.limit = atoi(ogs_hash_this_val(hi));\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_DNN)) {\n            message->param.dnn = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_PLMN_ID)) {\n            char *v = NULL;\n            cJSON *item = NULL;\n            OpenAPI_plmn_id_t *plmn_id = NULL;\n\n            v = ogs_hash_this_val(hi);\n            if (v) {\n                item = cJSON_Parse(v);\n                if (item) {\n                    plmn_id = OpenAPI_plmn_id_parseFromJSON(item);\n                    if (plmn_id && plmn_id->mnc && plmn_id->mcc) {\n                        ogs_plmn_id_build(&message->param.plmn_id,\n                            atoi(plmn_id->mcc),\n                            atoi(plmn_id->mnc), strlen(plmn_id->mnc));\n                        message->param.plmn_id_presence = true;\n                        OpenAPI_plmn_id_free(plmn_id);\n                    }\n                    cJSON_Delete(item);\n                }\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_SINGLE_NSSAI)) {\n            char *v = ogs_hash_this_val(hi);\n            if (v) {\n                bool rc = ogs_sbi_s_nssai_from_string(\n                        &message->param.s_nssai, v);\n                if (rc == true)\n                    message->param.single_nssai_presence = true;\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_SNSSAI)) {\n            char *v = ogs_hash_this_val(hi);\n            if (v) {\n                bool rc = ogs_sbi_s_nssai_from_string(\n                        &message->param.s_nssai, v);\n                if (rc == true)\n                    message->param.snssai_presence = true;\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi),\n                    OGS_SBI_PARAM_SLICE_INFO_REQUEST_FOR_PDU_SESSION)) {\n            char *v = NULL;\n            cJSON *item = NULL;\n            OpenAPI_slice_info_for_pdu_session_t *SliceInfoForPduSession = NULL;\n\n            v = ogs_hash_this_val(hi);\n            if (v) {\n                item = cJSON_Parse(v);\n                if (item) {\n                    SliceInfoForPduSession =\n                        OpenAPI_slice_info_for_pdu_session_parseFromJSON(item);\n                    if (SliceInfoForPduSession) {\n                        OpenAPI_snssai_t *s_nssai =\n                            SliceInfoForPduSession->s_nssai;\n                        if (s_nssai) {\n                            message->param.s_nssai.sst = s_nssai->sst;\n                            message->param.s_nssai.sd =\n                                ogs_s_nssai_sd_from_string(s_nssai->sd);\n                        }\n                        message->param.roaming_indication =\n                            SliceInfoForPduSession->roaming_indication;\n                        message->param.\n                            slice_info_request_for_pdu_session_presence = true;\n\n                        OpenAPI_slice_info_for_pdu_session_free(\n                                SliceInfoForPduSession);\n\n                    }\n                    cJSON_Delete(item);\n                }\n            }\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_IPV4ADDR)) {\n            message->param.ipv4addr = ogs_hash_this_val(hi);\n        } else if (!strcmp(ogs_hash_this_key(hi), OGS_SBI_PARAM_IPV6PREFIX)) {\n            message->param.ipv6prefix = ogs_hash_this_val(hi);\n        }\n    }\n\n    for (hi = ogs_hash_first(request->http.headers);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_ACCEPT_ENCODING)) {\n            message->http.content_encoding = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(\n                    ogs_hash_this_key(hi), OGS_SBI_CONTENT_TYPE)) {\n            message->http.content_type = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_ACCEPT)) {\n            message->http.accept = ogs_hash_this_val(hi);\n        }\n    }\n\n    if (parse_content(message, &request->http) != OGS_OK) {\n        ogs_error(\"parse_content() failed\");\n        return OGS_ERROR;\n    }\n\n    return OGS_OK;\n}\n\nint ogs_sbi_parse_response(\n        ogs_sbi_message_t *message, ogs_sbi_response_t *response)\n{\n    int rv;\n    ogs_hash_index_t *hi;\n\n    ogs_assert(response);\n    ogs_assert(message);\n\n    rv = ogs_sbi_parse_header(message, &response->h);\n    if (rv != OGS_OK) {\n        ogs_error(\"ogs_sbi_parse_header() failed\");\n        return OGS_ERROR;\n    }\n\n    for (hi = ogs_hash_first(response->http.headers);\n            hi; hi = ogs_hash_next(hi)) {\n        if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_CONTENT_TYPE)) {\n            message->http.content_type = ogs_hash_this_val(hi);\n        } else if (!ogs_strcasecmp(ogs_hash_this_key(hi), OGS_SBI_LOCATION)) {\n            message->http.location = ogs_hash_this_val(hi);\n        }\n    }\n\n    message->res_status = response->status;\n\n    if (parse_content(message, &response->http) != OGS_OK) {\n        ogs_error(\"parse_content() failed\");\n        return OGS_ERROR;\n    }\n\n    return OGS_OK;\n}\n\nogs_pkbuf_t *ogs_sbi_find_part_by_content_id(\n        ogs_sbi_message_t *message, char *content_id)\n{\n    int i;\n\n    ogs_assert(message);\n    ogs_assert(content_id);\n\n    for (i = 0; i < message->num_of_part; i++) {\n        if (message->part[i].content_id &&\n            strcmp(message->part[i].content_id, content_id) == 0)\n            return message->part[i].pkbuf;\n    }\n\n    return NULL;\n}\n\nint ogs_sbi_parse_header(ogs_sbi_message_t *message, ogs_sbi_header_t *header)\n{\n    struct yuarel yuarel;\n    char *saveptr = NULL;\n    char *uri = NULL, *p = NULL;;\n\n    char *component = NULL;\n    int i = 0;\n\n    ogs_assert(message);\n    ogs_assert(header);\n\n    memset(message, 0, sizeof(*message));\n\n    message->h.method = header->method;\n    message->h.uri = header->uri;\n    ogs_assert(message->h.uri);\n\n    uri = ogs_strdup(header->uri);\n    ogs_assert(uri);\n    p = uri;\n\n    if (p[0] != '/') {\n        int rv = yuarel_parse(&yuarel, p);\n        if (rv != OGS_OK) {\n            ogs_error(\"yuarel_parse() failed\");\n            ogs_free(uri);\n            return OGS_ERROR;\n        }\n\n        p = yuarel.path;\n    }\n\n    header->service.name = ogs_sbi_parse_uri(p, \"/\", &saveptr);\n    if (!header->service.name) {\n        ogs_error(\"ogs_sbi_parse_uri() failed\");\n        ogs_free(uri);\n        return OGS_ERROR;\n    }\n    message->h.service.name = header->service.name;\n\n    header->api.version = ogs_sbi_parse_uri(NULL, \"/\", &saveptr);\n    if (!header->api.version) {\n        ogs_error(\"ogs_sbi_parse_uri() failed\");\n        ogs_free(uri);\n        return OGS_ERROR;\n    }\n    message->h.api.version = header->api.version;\n\n    for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n            (component = ogs_sbi_parse_uri(NULL, \"/\", &saveptr)) != NULL;\n         i++) {\n        header->resource.component[i] = component;\n        message->h.resource.component[i] = component;\n    }\n\n    ogs_free(uri);\n\n    return OGS_OK;\n}\n\nvoid ogs_sbi_header_free(ogs_sbi_header_t *h)\n{\n    int i;\n    ogs_assert(h);\n\n    if (h->method) ogs_free(h->method);\n    if (h->service.name) ogs_free(h->service.name);\n    if (h->api.version) ogs_free(h->api.version);\n\n    for (i = 0; i < OGS_SBI_MAX_NUM_OF_RESOURCE_COMPONENT &&\n                        h->resource.component[i]; i++)\n        ogs_free(h->resource.component[i]);\n}\n\n\nstatic char *build_json(ogs_sbi_message_t *message)\n{\n    char *content = NULL;\n    cJSON *item = NULL;\n\n    ogs_assert(message);\n\n    if (message->ProblemDetails) {\n        item = OpenAPI_problem_details_convertToJSON(message->ProblemDetails);\n        ogs_assert(item);\n    } else if (message->NFProfile) {\n        item = OpenAPI_nf_profile_convertToJSON(message->NFProfile);\n        ogs_assert(item);\n    } else if (message->PatchItemList) {\n        OpenAPI_lnode_t *node = NULL;\n\n        item = cJSON_CreateArray();\n        ogs_assert(item);\n\n        OpenAPI_list_for_each(message->PatchItemList, node) {\n            cJSON *patchItem = OpenAPI_patch_item_convertToJSON(node->data);\n            ogs_assert(patchItem);\n            cJSON_AddItemToArray(item, patchItem);\n        }\n    } else if (message->SubscriptionData) {\n        item = OpenAPI_subscription_data_convertToJSON(\n                message->SubscriptionData);\n        ogs_assert(item);\n    } else if (message->NotificationData) {\n        item = OpenAPI_notification_data_convertToJSON(\n                message->NotificationData);\n        ogs_assert(item);\n    } else if (message->SearchResult) {\n        item = OpenAPI_search_result_convertToJSON(message->SearchResult);\n        ogs_assert(item);\n    } else if (message->links) {\n        item = ogs_sbi_links_convertToJSON(message->links);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfo) {\n        item = OpenAPI_authentication_info_convertToJSON(\n                message->AuthenticationInfo);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfoRequest) {\n        item = OpenAPI_authentication_info_request_convertToJSON(\n                message->AuthenticationInfoRequest);\n        ogs_assert(item);\n    } else if (message->AuthenticationInfoResult) {\n        item = OpenAPI_authentication_info_result_convertToJSON(\n                message->AuthenticationInfoResult);\n        ogs_assert(item);\n    } else if (message->AuthenticationSubscription) {\n        item = OpenAPI_authentication_subscription_convertToJSON(\n                message->AuthenticationSubscription);\n        ogs_assert(item);\n    } else if (message->UeAuthenticationCtx) {\n        item = OpenAPI_ue_authentication_ctx_convertToJSON(\n                message->UeAuthenticationCtx);\n        ogs_assert(item);\n    } else if (message->ConfirmationData) {\n        item = OpenAPI_confirmation_data_convertToJSON(\n                message->ConfirmationData);\n        ogs_assert(item);\n    } else if (message->ConfirmationDataResponse) {\n        item = OpenAPI_confirmation_data_response_convertToJSON(\n                message->ConfirmationDataResponse);\n        ogs_assert(item);\n    } else if (message->AuthEvent) {\n        item = OpenAPI_auth_event_convertToJSON(message->AuthEvent);\n        ogs_assert(item);\n    } else if (message->Amf3GppAccessRegistration) {\n        item = OpenAPI_amf3_gpp_access_registration_convertToJSON(\n                message->Amf3GppAccessRegistration);\n        ogs_assert(item);\n    } else if (message->AccessAndMobilitySubscriptionData) {\n        item = OpenAPI_access_and_mobility_subscription_data_convertToJSON(\n                message->AccessAndMobilitySubscriptionData);\n        ogs_assert(item);\n    } else if (message->SmfSelectionSubscriptionData) {\n        item = OpenAPI_smf_selection_subscription_data_convertToJSON(\n                message->SmfSelectionSubscriptionData);\n        ogs_assert(item);\n    } else if (message->UeContextInSmfData) {\n        item = OpenAPI_ue_context_in_smf_data_convertToJSON(\n                message->UeContextInSmfData);\n        ogs_assert(item);\n    } else if (message->SmContextCreateData) {\n        item = OpenAPI_sm_context_create_data_convertToJSON(\n                message->SmContextCreateData);\n        ogs_assert(item);\n    } else if (message->SmContextCreatedData) {\n        item = OpenAPI_sm_context_created_data_convertToJSON(\n                message->SmContextCreatedData);\n        ogs_assert(item);\n    } else if (message->SmContextCreateError) {\n        item = OpenAPI_sm_context_create_error_convertToJSON(\n                message->SmContextCreateError);\n        ogs_assert(item);\n    } else if (message->SmContextUpdateData) {\n        item = OpenAPI_sm_context_update_data_convertToJSON(\n                message->SmContextUpdateData);\n        ogs_assert(item);\n    } else if (message->SmContextUpdatedData) {\n        item = OpenAPI_sm_context_updated_data_convertToJSON(\n                message->SmContextUpdatedData);\n        ogs_assert(item);\n    } else if (message->SmContextUpdateError) {\n        item = OpenAPI_sm_context_update_error_convertToJSON(\n                message->SmContextUpdateError);\n        ogs_assert(item);\n    } else if (message->SmContextReleaseData) {\n        item = OpenAPI_sm_context_release_data_convertToJSON(\n                message->SmContextReleaseData);\n        ogs_assert(item);\n    } else if (message->SmContextReleasedData) {\n        item = OpenAPI_sm_context_released_data_convertToJSON(\n                message->SmContextReleasedData);\n        ogs_assert(item);\n    } else if (message->SessionManagementSubscriptionData) {\n        item = OpenAPI_session_management_subscription_data_convertToJSON(\n                message->SessionManagementSubscriptionData);\n        ogs_assert(item);\n    } else if (message->N1N2MessageTransferReqData) {\n        item = OpenAPI_n1_n2_message_transfer_req_data_convertToJSON(\n                message->N1N2MessageTransferReqData);\n        ogs_assert(item);\n    } else if (message->N1N2MessageTransferRspData) {\n        item = OpenAPI_n1_n2_message_transfer_rsp_data_convertToJSON(\n                message->N1N2MessageTransferRspData);\n        ogs_assert(item);\n    } else if (message->N1N2MsgTxfrFailureNotification) {\n        item = OpenAPI_n1_n2_msg_txfr_failure_notification_convertToJSON(\n                message->N1N2MsgTxfrFailureNotification);\n        ogs_assert(item);\n    } else if (message->SmContextStatusNotification) {\n        item = OpenAPI_sm_context_status_notification_convertToJSON(\n                message->SmContextStatusNotification);\n        ogs_assert(item);\n    } else if (message->PolicyAssociationRequest) {\n        item = OpenAPI_policy_association_request_convertToJSON(\n                message->PolicyAssociationRequest);\n        ogs_assert(item);\n    } else if (message->PolicyAssociation) {\n        item = OpenAPI_policy_association_convertToJSON(\n                message->PolicyAssociation);\n        ogs_assert(item);\n    } else if (message->AmPolicyData) {\n        item = OpenAPI_am_policy_data_convertToJSON(message->AmPolicyData);\n        ogs_assert(item);\n    } else if (message->SmPolicyContextData) {\n        item = OpenAPI_sm_policy_context_data_convertToJSON(\n                message->SmPolicyContextData);\n        ogs_assert(item);\n    } else if (message->SmPolicyDecision) {\n        item = OpenAPI_sm_policy_decision_convertToJSON(\n                message->SmPolicyDecision);\n        ogs_assert(item);\n    } else if (message->SmPolicyData) {\n        item = OpenAPI_sm_policy_data_convertToJSON(message->SmPolicyData);\n        ogs_assert(item);\n    } else if (message->SmPolicyDeleteData) {\n        item = OpenAPI_sm_policy_delete_data_convertToJSON(\n                message->SmPolicyDeleteData);\n        ogs_assert(item);\n    } else if (message->AuthorizedNetworkSliceInfo) {\n        item = OpenAPI_authorized_network_slice_info_convertToJSON(\n                message->AuthorizedNetworkSliceInfo);\n        ogs_assert(item);\n    } else if (message->PcfBinding) {\n        item = OpenAPI_pcf_binding_convertToJSON(message->PcfBinding);\n        ogs_assert(item);\n    } else if (message->AppSessionContext) {\n        item = OpenAPI_app_session_context_convertToJSON(\n                message->AppSessionContext);\n        ogs_assert(item);\n    } else if (message->AppSessionContextUpdateDataPatch) {\n        item = OpenAPI_app_session_context_update_data_patch_convertToJSON(\n                message->AppSessionContextUpdateDataPatch);\n        ogs_assert(item);\n    } else if (message->SmPolicyNotification) {\n        item = OpenAPI_sm_policy_notification_convertToJSON(\n                message->SmPolicyNotification);\n        ogs_assert(item);\n    } else if (message->TerminationNotification) {\n        item = OpenAPI_termination_notification_convertToJSON(\n                message->TerminationNotification);\n        ogs_assert(item);\n    }\n\n    if (item) {\n        content = cJSON_Print(item);\n        ogs_assert(content);\n        ogs_log_print(OGS_LOG_TRACE, \"%s\", content);\n        cJSON_Delete(item);\n    }\n\n    return content;\n}\n\nstatic int parse_json(ogs_sbi_message_t *message,\n        char *content_type, char *json)\n{\n    int rv = OGS_OK;\n    cJSON *item = NULL;\n\n    ogs_assert(message);\n\n    if (!json)\n        return OGS_OK;\n\n    if (!content_type) {\n        ogs_error(\"No Content-type\");\n        return OGS_ERROR;\n    }\n\n    ogs_log_print(OGS_LOG_TRACE, \"%s\", json);\n    item = cJSON_Parse(json);\n    if (!item) {\n        ogs_error(\"JSON parse error [%s]\", json);\n        return OGS_ERROR;\n    }\n\n    if (content_type &&\n        !strncmp(content_type, OGS_SBI_CONTENT_PROBLEM_TYPE,\n            strlen(OGS_SBI_CONTENT_PROBLEM_TYPE))) {\n        message->ProblemDetails = OpenAPI_problem_details_parseFromJSON(item);\n    } else if (content_type &&\n                !strncmp(content_type, OGS_SBI_CONTENT_PATCH_TYPE,\n                    strlen(OGS_SBI_CONTENT_PATCH_TYPE))) {\n        if (item) {\n            OpenAPI_patch_item_t *patch_item = NULL;\n            cJSON *patchJSON = NULL;\n            message->PatchItemList = OpenAPI_list_create();\n            cJSON_ArrayForEach(patchJSON, item) {\n                if (!cJSON_IsObject(patchJSON)) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown JSON\");\n                    goto cleanup;\n                }\n\n                patch_item = OpenAPI_patch_item_parseFromJSON(patchJSON);\n                OpenAPI_list_add(message->PatchItemList, patch_item);\n            }\n        }\n    } else {\n        SWITCH(message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NNRF_NFM)\n\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NF_INSTANCES)\n                message->NFProfile =\n                    OpenAPI_nf_profile_parseFromJSON(item);\n                if (!message->NFProfile) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SUBSCRIPTIONS)\n                message->SubscriptionData =\n                    OpenAPI_subscription_data_parseFromJSON(item);\n                if (!message->SubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_NF_STATUS_NOTIFY)\n                message->NotificationData =\n                    OpenAPI_notification_data_parseFromJSON(item);\n                if (!message->NotificationData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NNRF_DISC)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NF_INSTANCES)\n                message->SearchResult =\n                    OpenAPI_search_result_parseFromJSON(item);\n                if (!message->SearchResult) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n                SWITCH(message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    if (message->res_status == 0) {\n                        message->AuthenticationInfo =\n                            OpenAPI_authentication_info_parseFromJSON(item);\n                        if (!message->AuthenticationInfo) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->UeAuthenticationCtx =\n                        OpenAPI_ue_authentication_ctx_parseFromJSON(item);\n                        if (!message->UeAuthenticationCtx) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    if (message->res_status == 0) {\n                        message->ConfirmationData =\n                            OpenAPI_confirmation_data_parseFromJSON(item);\n                        if (!message->ConfirmationData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->ConfirmationDataResponse =\n                            OpenAPI_confirmation_data_response_parseFromJSON(\n                                    item);\n                        if (!message->ConfirmationDataResponse) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown method [%s]\", message->h.method);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UEAU)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_SECURITY_INFORMATION)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_GENERATE_AUTH_DATA)\n                    if (message->res_status == 0) {\n                        message->AuthenticationInfoRequest =\n                        OpenAPI_authentication_info_request_parseFromJSON(\n                                item);\n                        if (!message->AuthenticationInfoRequest) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->AuthenticationInfoResult =\n                        OpenAPI_authentication_info_result_parseFromJSON(\n                                item);\n                        if (!message->AuthenticationInfoResult) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_AUTH_EVENTS)\n                message->AuthEvent = OpenAPI_auth_event_parseFromJSON(item);\n                if (!message->AuthEvent) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                    message->Amf3GppAccessRegistration =\n                        OpenAPI_amf3_gpp_access_registration_parseFromJSON(\n                                item);\n                    if (!message->Amf3GppAccessRegistration) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n                message->AccessAndMobilitySubscriptionData =\n                    OpenAPI_access_and_mobility_subscription_data_parseFromJSON(\n                            item);\n                if (!message->AccessAndMobilitySubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n                message->SmfSelectionSubscriptionData =\n                    OpenAPI_smf_selection_subscription_data_parseFromJSON(item);\n                if (!message->SmfSelectionSubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                message->UeContextInSmfData =\n                    OpenAPI_ue_context_in_smf_data_parseFromJSON(item);\n                if (!message->UeContextInSmfData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n                message->SessionManagementSubscriptionData =\n                    OpenAPI_session_management_subscription_data_parseFromJSON(\n                            item);\n                if (!message->SessionManagementSubscriptionData) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDR_DR)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SUBSCRIPTION_DATA)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_DATA)\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_SUBSCRIPTION)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->AuthenticationSubscription =\n                                OpenAPI_authentication_subscription_parseFromJSON(item);\n                            if (!message->AuthenticationSubscription) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    CASE(OGS_SBI_RESOURCE_NAME_AUTHENTICATION_STATUS)\n                        message->AuthEvent =\n                            OpenAPI_auth_event_parseFromJSON(item);\n                        if (!message->AuthEvent) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                    break;\n\n                CASE(OGS_SBI_RESOURCE_NAME_CONTEXT_DATA)\n                    message->Amf3GppAccessRegistration =\n                        OpenAPI_amf3_gpp_access_registration_parseFromJSON(\n                                item);\n                    if (!message->Amf3GppAccessRegistration) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n\n                DEFAULT\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_PROVISIONED_DATA)\n                        SWITCH(message->h.resource.component[4])\n                        CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n                            message->AccessAndMobilitySubscriptionData =\n                                OpenAPI_access_and_mobility_subscription_data_parseFromJSON(item);\n                            if (!message->AccessAndMobilitySubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECTION_SUBSCRIPTION_DATA)\n                            message->SmfSelectionSubscriptionData =\n                                OpenAPI_smf_selection_subscription_data_parseFromJSON(item);\n                            if (!message->SmfSelectionSubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                            message->UeContextInSmfData =\n                                OpenAPI_ue_context_in_smf_data_parseFromJSON(\n                                        item);\n                            if (!message->UeContextInSmfData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n                            message->SessionManagementSubscriptionData =\n                                OpenAPI_session_management_subscription_data_parseFromJSON(item);\n                            if (!message->SessionManagementSubscriptionData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"Unknown resource name [%s]\",\n                                    message->h.resource.component[4]);\n                        END\n                        break;\n\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_POLICY_DATA)\n                SWITCH(message->h.resource.component[1])\n                CASE(OGS_SBI_RESOURCE_NAME_UES)\n                    SWITCH(message->h.resource.component[3])\n                    CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n\n                        message->AmPolicyData =\n                            OpenAPI_am_policy_data_parseFromJSON(item);\n                        if (!message->AmPolicyData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n\n                    CASE(OGS_SBI_RESOURCE_NAME_SM_DATA)\n\n                        message->SmPolicyData =\n                            OpenAPI_sm_policy_data_parseFromJSON(item);\n                        if (!message->SmPolicyData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                        break;\n\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[3]);\n                    END\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[1]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NSMF_PDUSESSION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_CONTEXTS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_MODIFY)\n                    if (message->res_status == 0) {\n                        message->SmContextUpdateData =\n                            OpenAPI_sm_context_update_data_parseFromJSON(item);\n                        if (!message->SmContextUpdateData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->SmContextUpdatedData =\n                            OpenAPI_sm_context_updated_data_parseFromJSON(item);\n                        if (!message->SmContextUpdatedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_BAD_REQUEST ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_FORBIDDEN ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_NOT_FOUND ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_INTERNAL_SERVER_ERROR ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_SERVICE_UNAVAILABLE ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_GATEWAY_TIMEOUT) {\n                        message->SmContextUpdateError =\n                            OpenAPI_sm_context_update_error_parseFromJSON(item);\n                        if (!message->SmContextUpdateError) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                CASE(OGS_SBI_RESOURCE_NAME_RELEASE)\n                    if (message->res_status == 0) {\n                        message->SmContextReleaseData =\n                            OpenAPI_sm_context_release_data_parseFromJSON(item);\n                        if (!message->SmContextReleaseData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    } else if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                        message->SmContextReleasedData =\n                            OpenAPI_sm_context_released_data_parseFromJSON(\n                                    item);\n                        if (!message->SmContextReleasedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n                DEFAULT\n                    if (message->res_status == 0) {\n                        message->SmContextCreateData =\n                            OpenAPI_sm_context_create_data_parseFromJSON(item);\n                        if (!message->SmContextCreateData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->SmContextCreatedData =\n                            OpenAPI_sm_context_created_data_parseFromJSON(item);\n                        if (!message->SmContextCreatedData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_BAD_REQUEST ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_FORBIDDEN ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_NOT_FOUND ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_INTERNAL_SERVER_ERROR ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_SERVICE_UNAVAILABLE ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_GATEWAY_TIMEOUT) {\n                        message->SmContextCreateError =\n                            OpenAPI_sm_context_create_error_parseFromJSON(item);\n                        if (!message->SmContextCreateError) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAMF_COMM)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXTS)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES)\n                    if (message->res_status == 0) {\n                        message->N1N2MessageTransferReqData =\n                            OpenAPI_n1_n2_message_transfer_req_data_parseFromJSON(item);\n                        if (!message->N1N2MessageTransferReqData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                                OGS_SBI_HTTP_STATUS_OK ||\n                                message->res_status ==\n                                    OGS_SBI_HTTP_STATUS_ACCEPTED) {\n                        message->N1N2MessageTransferRspData =\n                            OpenAPI_n1_n2_message_transfer_rsp_data_parseFromJSON(item);\n                        if (!message->N1N2MessageTransferRspData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                if (message->res_status == 0) {\n                    message->PolicyAssociationRequest =\n                        OpenAPI_policy_association_request_parseFromJSON(\n                                item);\n                    if (!message->PolicyAssociationRequest) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                } else if (message->res_status == OGS_SBI_HTTP_STATUS_CREATED) {\n                    message->PolicyAssociation =\n                        OpenAPI_policy_association_parseFromJSON(item);\n                    if (!message->PolicyAssociation) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_SMPOLICYCONTROL)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_POLICIES)\n                if (!message->h.resource.component[1]) {\n                    if (message->res_status == 0) {\n                        message->SmPolicyContextData =\n                            OpenAPI_sm_policy_context_data_parseFromJSON(item);\n                        if (!message->SmPolicyContextData) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    } else if (message->res_status ==\n                            OGS_SBI_HTTP_STATUS_CREATED) {\n                        message->SmPolicyDecision =\n                            OpenAPI_sm_policy_decision_parseFromJSON(item);\n                        if (!message->SmPolicyDecision) {\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        }\n                    }\n                } else {\n                    SWITCH(message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_DELETE)\n                        if (message->res_status == 0) {\n                            message->SmPolicyDeleteData =\n                                OpenAPI_sm_policy_delete_data_parseFromJSON(\n                                        item);\n                            if (!message->SmPolicyDeleteData) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown resource name [%s]\",\n                                message->h.resource.component[2]);\n                    END\n                    break;\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NNSSF_NSSELECTION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_NETWORK_SLICE_INFORMATION)\n                if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                    message->AuthorizedNetworkSliceInfo =\n                        OpenAPI_authorized_network_slice_info_parseFromJSON(\n                                item);\n                    if (!message->AuthorizedNetworkSliceInfo) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NBSF_MANAGEMENT)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_PCF_BINDINGS)\n                if (message->h.resource.component[1]) {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                    break;\n                } else {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_POST)\n                        if (message->res_status == 0 ||\n                            message->res_status ==\n                                OGS_SBI_HTTP_STATUS_CREATED) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n\n                    CASE(OGS_SBI_HTTP_METHOD_GET)\n                        if (message->res_status == OGS_SBI_HTTP_STATUS_OK) {\n                            message->PcfBinding =\n                                OpenAPI_pcf_binding_parseFromJSON(item);\n                            if (!message->PcfBinding) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                    break;\n                }\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_POLICYAUTHORIZATION)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_APP_SESSIONS)\n                if (message->h.resource.component[1]) {\n                    if (message->h.resource.component[2]) {\n                        SWITCH(message->h.resource.component[2])\n                        CASE(OGS_SBI_RESOURCE_NAME_DELETE)\n                            /* Nothing */\n                            break;\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        END\n                    } else {\n                        SWITCH(message->h.method)\n                        CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                            message->AppSessionContextUpdateDataPatch =\n                                OpenAPI_app_session_context_update_data_patch_parseFromJSON(item);\n                            if (!message->AppSessionContextUpdateDataPatch) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                            break;\n                        DEFAULT\n                            rv = OGS_ERROR;\n                            ogs_error(\"JSON parse error\");\n                        END\n                    }\n                } else {\n                    SWITCH(message->h.method)\n                    CASE(OGS_SBI_HTTP_METHOD_POST)\n                        if (message->res_status == 0 ||\n                            message->res_status ==\n                                OGS_SBI_HTTP_STATUS_CREATED) {\n                            message->AppSessionContext =\n                                OpenAPI_app_session_context_parseFromJSON(item);\n                            if (!message->AppSessionContext) {\n                                rv = OGS_ERROR;\n                                ogs_error(\"JSON parse error\");\n                            }\n                        }\n                        break;\n                    DEFAULT\n                        rv = OGS_ERROR;\n                        ogs_error(\"Unknown method [%s]\", message->h.method);\n                    END\n                }\n                break;\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NAMF_CALLBACK)\n            SWITCH(message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_SM_CONTEXT_STATUS)\n                message->SmContextStatusNotification =\n                    OpenAPI_sm_context_status_notification_parseFromJSON(item);\n                if (!message->SmContextStatusNotification) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[1]);\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NSMF_CALLBACK)\n            SWITCH(message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_N1_N2_FAILURE_NOTIFY)\n                message->N1N2MsgTxfrFailureNotification =\n                    OpenAPI_n1_n2_msg_txfr_failure_notification_parseFromJSON(\n                            item);\n                if (!message->N1N2MsgTxfrFailureNotification) {\n                    rv = OGS_ERROR;\n                    ogs_error(\"JSON parse error\");\n                }\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SM_POLICY_NOTIFY)\n                SWITCH(message->h.resource.component[2])\n                CASE(OGS_SBI_RESOURCE_NAME_UPDATE)\n                    message->SmPolicyNotification =\n                        OpenAPI_sm_policy_notification_parseFromJSON(item);\n                    if (!message->SmPolicyNotification) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n                CASE(OGS_SBI_RESOURCE_NAME_TERMINATE)\n                    message->TerminationNotification =\n                        OpenAPI_termination_notification_parseFromJSON(item);\n                    if (!message->TerminationNotification) {\n                        rv = OGS_ERROR;\n                        ogs_error(\"JSON parse error\");\n                    }\n                    break;\n\n                DEFAULT\n                    rv = OGS_ERROR;\n                    ogs_error(\"Unknown resource name [%s]\",\n                            message->h.resource.component[2]);\n                END\n                break;\n\n            DEFAULT\n                rv = OGS_ERROR;\n                ogs_error(\"Unknown resource name [%s]\",\n                        message->h.resource.component[0]);\n            END\n            break;\n\n        DEFAULT\n            rv = OGS_ERROR;\n            ogs_error(\"Not implemented API name [%s]\",\n                    message->h.service.name);\n        END\n    }\n\ncleanup:\n\n    cJSON_Delete(item);\n    return rv;\n}\n\nstatic int parse_content(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http)\n{\n    ogs_assert(message);\n    ogs_assert(http);\n\n    if (message->http.content_type &&\n        !strncmp(message->http.content_type, OGS_SBI_CONTENT_MULTIPART_TYPE,\n            strlen(OGS_SBI_CONTENT_MULTIPART_TYPE))) {\n        return parse_multipart(message, http);\n    } else {\n        return parse_json(message, message->http.content_type, http->content);\n    }\n}\n\nstatic bool build_content(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message)\n{\n    ogs_assert(message);\n    ogs_assert(http);\n\n    if (message->num_of_part) {\n        ogs_expect_or_return_val(true ==\n                build_multipart(http, message), false);\n    } else {\n        http->content = build_json(message);\n        if (http->content) {\n            http->content_length = strlen(http->content);\n            if (message->http.content_type) {\n                ogs_sbi_header_set(http->headers,\n                        OGS_SBI_CONTENT_TYPE, message->http.content_type);\n            } else {\n                ogs_sbi_header_set(http->headers,\n                        OGS_SBI_CONTENT_TYPE, OGS_SBI_CONTENT_JSON_TYPE);\n            }\n        }\n    }\n\n    return true;\n}\n\ntypedef struct multipart_parser_data_s {\n    int num_of_part;\n    struct {\n        char *content_type;\n        char *content_id;\n        char *content;\n        size_t content_length;\n    } part[OGS_SBI_MAX_NUM_OF_PART];\n\n    char *header_field;\n} multipart_parser_data_t;\n\nstatic int on_header_field(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (at && length) {\n        if (data->header_field)\n            ogs_free(data->header_field);\n        data->header_field = ogs_strndup(at, length);\n        ogs_assert(data->header_field);\n    }\n    return 0;\n}\n\nstatic int on_header_value(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n        SWITCH(data->header_field)\n        CASE(OGS_SBI_CONTENT_TYPE)\n            ogs_assert(data->part[data->num_of_part].content_type == NULL);\n            data->part[data->num_of_part].content_type =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_type);\n            break;\n        CASE(OGS_SBI_CONTENT_ID)\n            ogs_assert(data->part[data->num_of_part].content_id == NULL);\n            data->part[data->num_of_part].content_id =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_id);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown header field [%s]\", data->header_field);\n        END\n    }\n\n    return 0;\n}\n\nstatic int on_part_data(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n        SWITCH(data->part[data->num_of_part].content_type)\n        CASE(OGS_SBI_CONTENT_JSON_TYPE)\n        CASE(OGS_SBI_CONTENT_5GNAS_TYPE)\n        CASE(OGS_SBI_CONTENT_NGAP_TYPE)\n            size_t offset = 0;\n\n            if (data->part[data->num_of_part].content == NULL) {\n                data->part[data->num_of_part].content_length = length;\n                data->part[data->num_of_part].content =\n                    (char *)ogs_malloc(length + 1);\n                ogs_assert(data->part[data->num_of_part].content);\n            } else {\n                offset = data->part[data->num_of_part].content_length;\n                if ((data->part[data->num_of_part].content_length + length) >\n                        OGS_HUGE_LEN) {\n                    ogs_error(\"Overflow length [%d:%d]\",\n                        (int)data->part[data->num_of_part].content_length,\n                        (int)length);\n                    ogs_assert_if_reached();\n                    return 0;\n                }\n                data->part[data->num_of_part].content_length += length;\n                data->part[data->num_of_part].content = (char *)ogs_realloc(\n                    data->part[data->num_of_part].content,\n                    data->part[data->num_of_part].content_length + 1);\n                ogs_assert(data->part[data->num_of_part].content);\n            }\n            memcpy(data->part[data->num_of_part].content + offset, at, length);\n            data->part[data->num_of_part].content[\n                data->part[data->num_of_part].content_length] = 0;\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown content_type [%s]\",\n                    data->part[data->num_of_part].content_type);\n            ogs_log_hexdump(OGS_LOG_ERROR, (unsigned char *)at, length);\n        END\n    }\n    return 0;\n}\n\nstatic int on_part_data_end(multipart_parser *parser)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART) {\n        data->num_of_part++;\n    }\n\n    return 0;\n}\n\nstatic int parse_multipart(\n        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http)\n{\n    char *boundary = NULL;\n    int i;\n\n    multipart_parser_settings settings;\n    multipart_parser_data_t data;\n\n    multipart_parser *parser = NULL;\n\n    ogs_assert(message);\n    ogs_assert(http);\n\n    memset(&settings, 0, sizeof(settings));\n    settings.on_header_field = &on_header_field;\n    settings.on_header_value = &on_header_value;\n    settings.on_part_data = &on_part_data;\n    settings.on_part_data_end = &on_part_data_end;\n\n    for (i = 0; i < http->content_length; i++) {\n        if (http->content[i] == '\\r' && http->content[i+1] == '\\n')\n            break;\n    }\n\n    if (i >= http->content_length) {\n        ogs_error(\"Invalid HTTP content [%d]\", i);\n        ogs_log_hexdump(OGS_LOG_ERROR,\n                (unsigned char *)http->content, http->content_length);\n        return OGS_ERROR;\n    }\n\n    boundary = ogs_strndup(http->content, i);\n    ogs_assert(boundary);\n\n    parser = multipart_parser_init(boundary, &settings);\n    ogs_assert(parser);\n\n    memset(&data, 0, sizeof(data));\n    multipart_parser_set_data(parser, &data);\n    multipart_parser_execute(parser, http->content, http->content_length);\n\n    multipart_parser_free(parser);\n    ogs_free(boundary);\n\n    if (data.num_of_part > OGS_SBI_MAX_NUM_OF_PART) {\n        /* Overflow Issues #1247 */\n        ogs_fatal(\"Overflow num_of_part[%d]\", data.num_of_part);\n        ogs_assert_if_reached();\n    }\n    for (i = 0; i < data.num_of_part; i++) {\n        SWITCH(data.part[i].content_type)\n        CASE(OGS_SBI_CONTENT_JSON_TYPE)\n            parse_json(message,\n                    data.part[i].content_type, data.part[i].content);\n\n            if (data.part[i].content_id)\n                ogs_free(data.part[i].content_id);\n            if (data.part[i].content_type)\n                ogs_free(data.part[i].content_type);\n            if (data.part[i].content)\n                ogs_free(data.part[i].content);\n\n            break;\n\n        CASE(OGS_SBI_CONTENT_5GNAS_TYPE)\n        CASE(OGS_SBI_CONTENT_NGAP_TYPE)\n            http->part[http->num_of_part].content_id =\n                data.part[i].content_id;\n            http->part[http->num_of_part].content_type =\n                data.part[i].content_type;\n            http->part[http->num_of_part].pkbuf =\n                ogs_pkbuf_alloc(NULL, data.part[i].content_length);\n            ogs_expect_or_return_val(\n                http->part[http->num_of_part].pkbuf, OGS_ERROR);\n            ogs_pkbuf_put_data(http->part[http->num_of_part].pkbuf,\n                data.part[i].content, data.part[i].content_length);\n\n            message->part[message->num_of_part].content_id =\n                http->part[http->num_of_part].content_id;\n            message->part[message->num_of_part].content_type =\n                http->part[http->num_of_part].content_type;\n            message->part[message->num_of_part].pkbuf =\n                ogs_pkbuf_copy(http->part[http->num_of_part].pkbuf);\n            ogs_expect_or_return_val(\n                message->part[message->num_of_part].pkbuf, OGS_ERROR);\n\n            http->num_of_part++;\n            message->num_of_part++;\n\n            if (data.part[i].content)\n                ogs_free(data.part[i].content);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown content-type[%s]\", data.part[i].content_type);\n\n            if (data.part[i].content_id)\n                ogs_free(data.part[i].content_id);\n            if (data.part[i].content_type)\n                ogs_free(data.part[i].content_type);\n        END\n    }\n\n    if (data.header_field)\n        ogs_free(data.header_field);\n\n    return OGS_OK;\n}\n\nstatic bool build_multipart(\n        ogs_sbi_http_message_t *http, ogs_sbi_message_t *message)\n{\n    int i;\n\n    char boundary[32];\n    unsigned char digest[16];\n    char *p = NULL, *last;\n\n    char *content_type = NULL;\n    char *json = NULL;\n\n    ogs_assert(message);\n    ogs_assert(http);\n\n    ogs_random(digest, 16);\n    strcpy(boundary, \"=-\");\n    ogs_base64_encode_binary(boundary + 2, digest, 16);\n\n    p = http->content = ogs_calloc(1, OGS_HUGE_LEN);\n    ogs_expect_or_return_val(p, false);\n    last = p + OGS_HUGE_LEN;\n\n    /* First boundary */\n    p = ogs_slprintf(p, last, \"--%s\\r\\n\", boundary);\n\n    /* Encapsulated multipart part (application/json) */\n    json = build_json(message);\n    ogs_expect_or_return_val(json, false);\n\n    p = ogs_slprintf(p, last, \"%s\\r\\n\\r\\n%s\",\n            OGS_SBI_CONTENT_TYPE \": \" OGS_SBI_CONTENT_JSON_TYPE, json);\n\n    ogs_free(json);\n\n    /* Add part */\n    for (i = 0; i < message->num_of_part; i++) {\n        p = ogs_slprintf(p, last, \"\\r\\n--%s\\r\\n\", boundary);\n        p = ogs_slprintf(p, last, \"%s: %s\\r\\n\",\n                OGS_SBI_CONTENT_ID, message->part[i].content_id);\n        p = ogs_slprintf(p, last, \"%s: %s\\r\\n\\r\\n\",\n                OGS_SBI_CONTENT_TYPE, message->part[i].content_type);\n        memcpy(p, message->part[i].pkbuf->data, message->part[i].pkbuf->len);\n        p += message->part[i].pkbuf->len;\n    }\n\n    /* Last boundary */\n    p = ogs_slprintf(p, last, \"\\r\\n--%s--\\r\\n\", boundary);\n\n    http->content_length = p - http->content;\n\n    content_type = ogs_msprintf(\"%s; boundary=\\\"%s\\\"\",\n            OGS_SBI_CONTENT_MULTIPART_TYPE, boundary);\n    ogs_expect_or_return_val(content_type, false);\n\n    ogs_sbi_header_set(http->headers, OGS_SBI_CONTENT_TYPE, content_type);\n\n    ogs_free(content_type);\n\n    return true;\n}\n\nstatic void http_message_free(ogs_sbi_http_message_t *http)\n{\n    int i;\n    ogs_assert(http);\n\n    if (http->params) {\n        ogs_hash_index_t *hi;\n        for (hi = ogs_hash_first(http->params); hi; hi = ogs_hash_next(hi)) {\n            char *key = (char *)ogs_hash_this_key(hi);\n            char *val = ogs_hash_this_val(hi);\n            ogs_free(key);\n            ogs_free(val);\n        }\n        ogs_hash_destroy(http->params);\n    }\n\n    if (http->headers) {\n        ogs_hash_index_t *hi;\n        for (hi = ogs_hash_first(http->headers); hi; hi = ogs_hash_next(hi)) {\n            char *key = (char *)ogs_hash_this_key(hi);\n            char *val = ogs_hash_this_val(hi);\n            ogs_free(key);\n            ogs_free(val);\n        }\n        ogs_hash_destroy(http->headers);\n    }\n    if (http->content)\n        ogs_free(http->content);\n\n    for (i = 0; i < http->num_of_part; i++) {\n        if (http->part[i].pkbuf)\n            ogs_pkbuf_free(http->part[i].pkbuf);\n        if (http->part[i].content_id)\n            ogs_free(http->part[i].content_id);\n        if (http->part[i].content_type)\n            ogs_free(http->part[i].content_type);\n    }\n}\n", "/*\n * Copyright (C) 2019 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"namf-handler.h\"\n#include \"nsmf-handler.h\"\n\n#include \"nas-path.h\"\n#include \"ngap-path.h\"\n#include \"sbi-path.h\"\n\nint amf_namf_comm_handle_n1_n2_message_transfer(\n        ogs_sbi_stream_t *stream, ogs_sbi_message_t *recvmsg)\n{\n    int status;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_pkbuf_t *n1buf = NULL;\n    ogs_pkbuf_t *n2buf = NULL;\n\n    ogs_pkbuf_t *gmmbuf = NULL;\n    ogs_pkbuf_t *ngapbuf = NULL;\n\n    char *supi = NULL;\n    uint8_t pdu_session_id = OGS_NAS_PDU_SESSION_IDENTITY_UNASSIGNED;\n\n    ogs_sbi_message_t sendmsg;\n    ogs_sbi_response_t *response = NULL;\n\n    OpenAPI_n1_n2_message_transfer_req_data_t *N1N2MessageTransferReqData;\n    OpenAPI_n1_n2_message_transfer_rsp_data_t N1N2MessageTransferRspData;\n    OpenAPI_n1_message_container_t *n1MessageContainer = NULL;\n    OpenAPI_ref_to_binary_data_t *n1MessageContent = NULL;\n    OpenAPI_n2_info_container_t *n2InfoContainer = NULL;\n    OpenAPI_n2_sm_information_t *smInfo = NULL;\n    OpenAPI_n2_info_content_t *n2InfoContent = NULL;\n    OpenAPI_ref_to_binary_data_t *ngapData = NULL;\n\n    OpenAPI_ngap_ie_type_e ngapIeType = OpenAPI_ngap_ie_type_NULL;\n\n    ogs_assert(stream);\n    ogs_assert(recvmsg);\n\n    N1N2MessageTransferReqData = recvmsg->N1N2MessageTransferReqData;\n    if (!N1N2MessageTransferReqData) {\n        ogs_error(\"No N1N2MessageTransferReqData\");\n        return OGS_ERROR;\n    }\n\n    if (N1N2MessageTransferReqData->is_pdu_session_id == false) {\n        ogs_error(\"No PDU Session Identity\");\n        return OGS_ERROR;\n    }\n    pdu_session_id = N1N2MessageTransferReqData->pdu_session_id;\n\n    supi = recvmsg->h.resource.component[1];\n    if (!supi) {\n        ogs_error(\"No SUPI\");\n        return OGS_ERROR;\n    }\n\n    amf_ue = amf_ue_find_by_supi(supi);\n    if (!amf_ue) {\n        ogs_error(\"No UE context [%s]\", supi);\n        return OGS_ERROR;\n    }\n\n    sess = amf_sess_find_by_psi(amf_ue, pdu_session_id);\n    if (!sess) {\n        ogs_error(\"[%s] No PDU Session Context [%d]\",\n                amf_ue->supi, pdu_session_id);\n        return OGS_ERROR;\n    }\n\n    n1MessageContainer = N1N2MessageTransferReqData->n1_message_container;\n    if (n1MessageContainer) {\n        n1MessageContent = n1MessageContainer->n1_message_content;\n        if (!n1MessageContent || !n1MessageContent->content_id) {\n            ogs_error(\"No n1MessageContent\");\n            return OGS_ERROR;\n        }\n\n        n1buf = ogs_sbi_find_part_by_content_id(\n                recvmsg, n1MessageContent->content_id);\n        if (!n1buf) {\n            ogs_error(\"[%s] No N1 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        /*\n         * NOTE : The pkbuf created in the SBI message will be removed\n         *        from ogs_sbi_message_free(), so it must be copied.\n         */\n        n1buf = ogs_pkbuf_copy(n1buf);\n        ogs_assert(n1buf);\n    }\n\n    n2InfoContainer = N1N2MessageTransferReqData->n2_info_container;\n    if (n2InfoContainer) {\n        smInfo = n2InfoContainer->sm_info;\n        if (!smInfo) {\n            ogs_error(\"No smInfo\");\n            return OGS_ERROR;\n        }\n\n        n2InfoContent = smInfo->n2_info_content;\n        if (!n2InfoContent) {\n            ogs_error(\"No n2InfoContent\");\n            return OGS_ERROR;\n        }\n\n        ngapIeType = n2InfoContent->ngap_ie_type;\n\n        ngapData = n2InfoContent->ngap_data;\n        if (!ngapData || !ngapData->content_id) {\n            ogs_error(\"No ngapData\");\n            return OGS_ERROR;\n        }\n        n2buf = ogs_sbi_find_part_by_content_id(\n                recvmsg, ngapData->content_id);\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        /*\n         * NOTE : The pkbuf created in the SBI message will be removed\n         *        from ogs_sbi_message_free(), so it must be copied.\n         */\n        n2buf = ogs_pkbuf_copy(n2buf);\n        ogs_assert(n2buf);\n    }\n\n    memset(&sendmsg, 0, sizeof(sendmsg));\n\n    status = OGS_SBI_HTTP_STATUS_OK;\n\n    memset(&N1N2MessageTransferRspData, 0, sizeof(N1N2MessageTransferRspData));\n    N1N2MessageTransferRspData.cause =\n        OpenAPI_n1_n2_message_transfer_cause_N1_N2_TRANSFER_INITIATED;\n\n    sendmsg.N1N2MessageTransferRspData = &N1N2MessageTransferRspData;\n\n    switch (ngapIeType) {\n    case OpenAPI_ngap_ie_type_PDU_RES_SETUP_REQ:\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (n1buf) {\n            gmmbuf = gmm_build_dl_nas_transport(sess,\n                    OGS_NAS_PAYLOAD_CONTAINER_N1_SM_INFORMATION, n1buf, 0, 0);\n            ogs_assert(gmmbuf);\n        }\n\n        if (gmmbuf) {\n            ran_ue_t *ran_ue = NULL;\n\n            /***********************************\n             * 4.3.2 PDU Session Establishment *\n             ***********************************/\n\n            ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n            ogs_assert(ran_ue);\n\n            if (sess->pdu_session_establishment_accept) {\n                ogs_pkbuf_free(sess->pdu_session_establishment_accept);\n                sess->pdu_session_establishment_accept = NULL;\n            }\n\n            if (ran_ue->initial_context_setup_request_sent == true) {\n                ngapbuf = ngap_sess_build_pdu_session_resource_setup_request(\n                        sess, gmmbuf, n2buf);\n                ogs_assert(ngapbuf);\n            } else {\n                ngapbuf = ngap_sess_build_initial_context_setup_request(\n                        sess, gmmbuf, n2buf);\n                ogs_assert(ngapbuf);\n\n                ran_ue->initial_context_setup_request_sent = true;\n            }\n\n            if (SESSION_CONTEXT_IN_SMF(sess)) {\n                /*\n                 * [1-CLIENT] /nsmf-pdusession/v1/sm-contexts\n                 * [2-SERVER] /namf-comm/v1/ue-contexts/{supi}/n1-n2-messages\n                 *\n                 * If [2-SERVER] arrives after [1-CLIENT],\n                 * sm-context-ref is created in [1-CLIENT].\n                 * So, the PDU session establishment accpet can be transmitted.\n                 */\n                if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                    ogs_error(\"nas_5gs_send_to_gnb() failed\");\n            } else {\n                sess->pdu_session_establishment_accept = ngapbuf;\n            }\n\n        } else {\n            /*********************************************\n             * 4.2.3.3 Network Triggered Service Request *\n             *********************************************/\n\n            if (CM_IDLE(amf_ue)) {\n                ogs_sbi_server_t *server = NULL;\n                ogs_sbi_header_t header;\n                ogs_sbi_client_t *client = NULL;\n                ogs_sockaddr_t *addr = NULL;\n\n                if (!N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri) {\n                    ogs_error(\"[%s:%d] No n1-n2-failure-notification-uri\",\n                            amf_ue->supi, sess->psi);\n                    return OGS_ERROR;\n                }\n\n                addr = ogs_sbi_getaddr_from_uri(\n                        N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri);\n                if (!addr) {\n                    ogs_error(\"[%s:%d] Invalid URI [%s]\",\n                            amf_ue->supi, sess->psi,\n                            N1N2MessageTransferReqData->\n                                n1n2_failure_txf_notif_uri);\n                    return OGS_ERROR;;\n                }\n\n                client = ogs_sbi_client_find(addr);\n                if (!client) {\n                    client = ogs_sbi_client_add(addr);\n                    ogs_assert(client);\n                }\n                OGS_SETUP_SBI_CLIENT(&sess->paging, client);\n\n                ogs_freeaddrinfo(addr);\n\n                status = OGS_SBI_HTTP_STATUS_ACCEPTED;\n                N1N2MessageTransferRspData.cause =\n                    OpenAPI_n1_n2_message_transfer_cause_ATTEMPTING_TO_REACH_UE;\n\n                /* Location */\n                server = ogs_sbi_server_from_stream(stream);\n                ogs_assert(server);\n\n                memset(&header, 0, sizeof(header));\n                header.service.name = (char *)OGS_SBI_SERVICE_NAME_NAMF_COMM;\n                header.api.version = (char *)OGS_SBI_API_V1;\n                header.resource.component[0] =\n                    (char *)OGS_SBI_RESOURCE_NAME_UE_CONTEXTS;\n                header.resource.component[1] = amf_ue->supi;\n                header.resource.component[2] =\n                    (char *)OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES;\n                header.resource.component[3] = sess->sm_context_ref;\n\n                sendmsg.http.location = ogs_sbi_server_uri(server, &header);\n\n                /* Store Paging Info */\n                AMF_SESS_STORE_PAGING_INFO(\n                        sess, sendmsg.http.location,\n                        N1N2MessageTransferReqData->n1n2_failure_txf_notif_uri);\n\n                /* Store N2 Transfer message */\n                AMF_SESS_STORE_N2_TRANSFER(\n                        sess, pdu_session_resource_setup_request, n2buf);\n\n                ogs_assert(OGS_OK == ngap_send_paging(amf_ue));\n\n            } else if (CM_CONNECTED(amf_ue)) {\n                ogs_assert(OGS_OK ==\n                    ngap_send_pdu_resource_setup_request(sess, n2buf));\n\n            } else {\n\n                ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n                ogs_assert_if_reached();\n\n            }\n\n        }\n        break;\n\n    case OpenAPI_ngap_ie_type_PDU_RES_MOD_REQ:\n        if (!n1buf) {\n            ogs_error(\"[%s] No N1 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (CM_IDLE(amf_ue)) {\n            ogs_sbi_server_t *server = NULL;\n            ogs_sbi_header_t header;\n\n            status = OGS_SBI_HTTP_STATUS_ACCEPTED;\n            N1N2MessageTransferRspData.cause =\n                OpenAPI_n1_n2_message_transfer_cause_ATTEMPTING_TO_REACH_UE;\n\n            /* Location */\n            server = ogs_sbi_server_from_stream(stream);\n            ogs_assert(server);\n\n            memset(&header, 0, sizeof(header));\n            header.service.name = (char *)OGS_SBI_SERVICE_NAME_NAMF_COMM;\n            header.api.version = (char *)OGS_SBI_API_V1;\n            header.resource.component[0] =\n                (char *)OGS_SBI_RESOURCE_NAME_UE_CONTEXTS;\n            header.resource.component[1] = amf_ue->supi;\n            header.resource.component[2] =\n                (char *)OGS_SBI_RESOURCE_NAME_N1_N2_MESSAGES;\n            header.resource.component[3] = sess->sm_context_ref;\n\n            sendmsg.http.location = ogs_sbi_server_uri(server, &header);\n\n            /* Store Paging Info */\n            AMF_SESS_STORE_PAGING_INFO(\n                    sess, sendmsg.http.location, NULL);\n\n            /* Store 5GSM Message */\n            AMF_SESS_STORE_5GSM_MESSAGE(sess,\n                    OGS_NAS_5GS_PDU_SESSION_MODIFICATION_COMMAND,\n                    n1buf, n2buf);\n\n            ogs_assert(OGS_OK == ngap_send_paging(amf_ue));\n\n        } else if (CM_CONNECTED(amf_ue)) {\n            gmmbuf = gmm_build_dl_nas_transport(sess,\n                    OGS_NAS_PAYLOAD_CONTAINER_N1_SM_INFORMATION, n1buf, 0, 0);\n            ogs_assert(gmmbuf);\n\n            ngapbuf = ngap_build_pdu_session_resource_modify_request(\n                    sess, gmmbuf, n2buf);\n            ogs_assert(ngapbuf);\n\n            if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                ogs_error(\"nas_5gs_send_to_gnb() failed\");\n\n        } else {\n            ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n            ogs_assert_if_reached();\n        }\n\n        break;\n\n    case OpenAPI_ngap_ie_type_PDU_RES_REL_CMD:\n        if (!n2buf) {\n            ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);\n            return OGS_ERROR;\n        }\n\n        if (n1buf)\n            ogs_pkbuf_free(n1buf);\n\n        if (CM_IDLE(amf_ue)) {\n            if (n2buf)\n                ogs_pkbuf_free(n2buf);\n\n            if (N1N2MessageTransferReqData->is_skip_ind == true &&\n                N1N2MessageTransferReqData->skip_ind == true) {\n                N1N2MessageTransferRspData.cause =\n                    OpenAPI_n1_n2_message_transfer_cause_N1_MSG_NOT_TRANSFERRED;\n            } else {\n                ogs_fatal(\"[%s] No skipInd\", amf_ue->supi);\n                ogs_assert_if_reached();\n            }\n\n        } else if (CM_CONNECTED(amf_ue)) {\n            ngapbuf = ngap_build_pdu_session_resource_release_command(\n                    sess, NULL, n2buf);\n            ogs_assert(ngapbuf);\n\n            if (nas_5gs_send_to_gnb(amf_ue, ngapbuf) != OGS_OK)\n                ogs_error(\"nas_5gs_send_to_gnb() failed\");\n\n        } else {\n            ogs_fatal(\"[%s] Invalid AMF-UE state\", amf_ue->supi);\n            ogs_assert_if_reached();\n        }\n        break;\n\n    default:\n        ogs_error(\"Not implemented ngapIeType[%d]\", ngapIeType);\n        ogs_assert_if_reached();\n    }\n\n    response = ogs_sbi_build_response(&sendmsg, status);\n    ogs_assert(response);\n    ogs_assert(true == ogs_sbi_server_send_response(stream, response));\n\n    if (sendmsg.http.location)\n        ogs_free(sendmsg.http.location);\n\n    return OGS_OK;\n}\n\nint amf_namf_callback_handle_sm_context_status(\n        ogs_sbi_stream_t *stream, ogs_sbi_message_t *recvmsg)\n{\n    int status = OGS_SBI_HTTP_STATUS_NO_CONTENT;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    uint8_t pdu_session_identity;\n\n    ogs_sbi_message_t sendmsg;\n    ogs_sbi_response_t *response = NULL;\n\n    OpenAPI_sm_context_status_notification_t *SmContextStatusNotification;\n    OpenAPI_status_info_t *StatusInfo;\n\n    ogs_assert(stream);\n    ogs_assert(recvmsg);\n\n    if (!recvmsg->h.resource.component[0]) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"No SUPI\");\n        goto cleanup;\n    }\n\n    amf_ue = amf_ue_find_by_supi(recvmsg->h.resource.component[0]);\n    if (!amf_ue) {\n        status = OGS_SBI_HTTP_STATUS_NOT_FOUND;\n        ogs_error(\"Cannot find SUPI [%s]\", recvmsg->h.resource.component[0]);\n        goto cleanup;\n    }\n\n    if (!recvmsg->h.resource.component[2]) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s] No PDU Session Identity\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    pdu_session_identity = atoi(recvmsg->h.resource.component[2]);\n    if (pdu_session_identity == OGS_NAS_PDU_SESSION_IDENTITY_UNASSIGNED) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s] PDU Session Identity is unassigned\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    sess = amf_sess_find_by_psi(amf_ue, pdu_session_identity);\n    if (!sess) {\n        status = OGS_SBI_HTTP_STATUS_NOT_FOUND;\n        ogs_warn(\"[%s] Cannot find session\", amf_ue->supi);\n        goto cleanup;\n    }\n\n    SmContextStatusNotification = recvmsg->SmContextStatusNotification;\n    if (!SmContextStatusNotification) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s:%d] No SmContextStatusNotification\",\n                amf_ue->supi, sess->psi);\n        goto cleanup;\n    }\n\n    StatusInfo = SmContextStatusNotification->status_info;\n    if (!StatusInfo) {\n        status = OGS_SBI_HTTP_STATUS_BAD_REQUEST;\n        ogs_error(\"[%s:%d] No StatusInfo\", amf_ue->supi, sess->psi);\n        goto cleanup;\n    }\n\n    sess->resource_status = StatusInfo->resource_status;\n\n    /*\n     * Race condition for PDU session release complete\n     *  - CLIENT : /nsmf-pdusession/v1/sm-contexts/{smContextRef}/modify\n     *  - SERVER : /namf-callback/v1/{supi}/sm-context-status/{psi})\n     *\n     * If NOTIFICATION is received before the CLIENT response is received,\n     * CLIENT sync is not finished. In this case, the session context\n     * should not be removed.\n     *\n     * If NOTIFICATION comes after the CLIENT response is received,\n     * sync is done. So, the session context can be removed.\n     */\n    if (sess->n1_released == true &&\n        sess->n2_released == true &&\n        sess->resource_status == OpenAPI_resource_status_RELEASED) {\n\n        ogs_debug(\"[%s:%d] SM context remove\", amf_ue->supi, sess->psi);\n        amf_nsmf_pdusession_handle_release_sm_context(\n                sess, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n    }\n\ncleanup:\n    memset(&sendmsg, 0, sizeof(sendmsg));\n\n    response = ogs_sbi_build_response(&sendmsg, status);\n    ogs_assert(response);\n    ogs_assert(true == ogs_sbi_server_send_response(stream, response));\n\n    return OGS_OK;\n}\n"], "filenames": ["lib/sbi/message.c", "src/amf/namf-handler.c"], "buggy_code_start_loc": [927, 55], "buggy_code_end_loc": [2023, 395], "fixing_code_start_loc": [927, 56], "fixing_code_end_loc": [2027, 399], "type": "CWE-476", "message": "A null pointer dereference in src/amf/namf-handler.c in Open5GS 2.3.6 and earlier allows remote attackers to Denial of Service via a crafted sbi request to amf.", "other": {"cve": {"id": "CVE-2021-44108", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-05T02:15:06.927", "lastModified": "2022-04-13T15:18:59.347", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A null pointer dereference in src/amf/namf-handler.c in Open5GS 2.3.6 and earlier allows remote attackers to Denial of Service via a crafted sbi request to amf."}, {"lang": "es", "value": "Una desreferencia de puntero null en el archivo src/amf/namf-handler.c en Open5GS versiones 2.3.6 y anteriores, permite a atacantes remotos la denegaci\u00f3n de servicio por medio de una petici\u00f3n sbi dise\u00f1ada a amf"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open5gs:open5gs:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.6", "matchCriteriaId": "3D9F54E5-429F-4AF1-92A0-50F8AA6FECE4"}]}]}], "references": [{"url": "https://github.com/open5gs/open5gs/commit/d919b2744cd05abae043490f0a3dd1946c1ccb8c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/open5gs/open5gs/issues/1247", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/open5gs/open5gs/commit/d919b2744cd05abae043490f0a3dd1946c1ccb8c"}}