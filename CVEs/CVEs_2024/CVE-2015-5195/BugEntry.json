{"buggy_code": ["(4.2.7p111) 2011/01/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1772] refclock_open() return value check wrong for ACTS.\n* Default --with-openssl-libdir and --with-openssl-incdir to the values\n  from pkg-config, falling back on our usual search paths if pkg-config\n  is not available or does not have openssl.pc on PKG_CONFIG_PATH.\n* Change refclock_open() to return -1 on failure like open().\n* Update all refclock_open() callers to check for fd <= 0 indicating\n  failure, so they work with older and newer refclock_open() and can\n  easily backport.\n* Initialize refclockproc.rio.fd to -1, harmonize refclock shutdown\n  entrypoints to avoid crashing, particularly if refclock_open() fails.\n* Enable tickadj-like taming of wildly off-spec Windows clock using\n  NTPD_TICKADJ_PPM env. var. specifying baseline slew.\n(4.2.7p110) 2011/01/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1771] algorithmic error in 'clocktime()' fixed.\n* Unit tests extended for hard-coded system time.\n* make V=0 and configure --enable-silent-rules supported.\n* setvar modemsetup = ATE0... overrides ACTS driver default.\n* Preserve last timecode in ACTS driver (ntpq -ccv).\n* Tolerate previous ATE1 state when sending ACTS setup.\n* Enable raw tty line discipline in Windows port.\n* Allow tty open/close/open to succeed on Windows port.\n* Enable ACTS and CHU reference clock drivers on Windows.\n(4.2.7p109) 2011/01/02 Released by Harlan Stenn <stenn@ntp.org>\n* Remove nearly all strcpy() and most strcat() from NTP distribution.\n  One major pocket remains in ntp_crypto.c.  libopts & libisc also have\n  (safe) uses of strcpy() and strcat() remaining.\n* Documentation updates from Dave Mills.\n(4.2.7p108) 2011/01/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1764] Move Palisade modem control logic to configure.ac.\n* [Bug 1768] TIOCFLUSH undefined in linux for refclock_acts.\n* Autokey multiple identity group improvements from Dave Mills.\n* from 4.2.6p3: Update the copyright year.\n(4.2.7p107) 2010/12/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1764] Palisade driver doesn't build on Linux.\n* [Bug 1766] Oncore clock has offset/high jitter at startup.\n* Move ntp_control.h variable IDs to ntp_control.c, remove their use by\n  ntpq.  They are implementation details private to ntpd.  [Bug 597] was\n  caused by ntpq's reliance on these IDs it need not know about.\n* refclock_acts.c updates from Dave Mills.\n(4.2.7p106) 2010/12/30 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3: Update genCommitLog for the bk-5 release.\n(4.2.7p105) 2010/12/29 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p104) 2010/12/28 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3: Create and use scripts/check--help when generating\n  .texi files.\n* from 4.2.6p3: Update bk triggers for the bk-5 release.\n* Support for multiple Autokey identity groups from Dave Mills.\n* Documentation updates from Dave Mills.\n* Add ntpq kerninfo, authinfo, and sysinfo commands similar to ntpdc's.\n(4.2.7p103) 2010/12/24 Released by Harlan Stenn <stenn@ntp.org>\n* Add ntpq pstats command similar to ntpdc's.\n* Remove ntpq pstatus command, rv/readvar does the same and more.\n* Documentation updates from Dave Mills.\n(4.2.7p102) 2010/12/23 Released by Harlan Stenn <stenn@ntp.org>\n* Allow ntpq &1 associd use without preceding association-fetching.\n* Documentation updates from Dave Mills.\n(4.2.7p101) 2010/12/22 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3-RC12: Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre7.\n* from 4.2.6p3-RC12: Relax minimum Automake version to 1.10 with updated\n  libopts.m4.\n(4.2.7p100) 2010/12/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1743] from 4.2.6p3-RC12: Display timezone offset when showing\n  time for sntp in the local timezone (documentation updates).\n(4.2.7p99) 2010/12/21 Released by Harlan Stenn <stenn@ntp.org>\n* Add unit tests for msnprintf().\n(4.2.7p98) 2010/12/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1761] clockstuff/clktest-opts.h omitted from tarball.\n* [Bug 1762] from 4.2.6p3-RC12: manycastclient responses interfere.\n* Documentation updates from Dave Mills.\n(4.2.7p97) 2010/12/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1458] from 4.2.6p3-RC12: Can not compile NTP on FreeBSD 4.7.\n* [Bug 1760] from 4.2.6p3-RC12: ntpd Windows interpolation cannot be\n  disabled.\n* from 4.2.6p3-RC12: Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre5.\n* Documentation updates from Dave Mills.\n(4.2.7p96) 2010/12/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1758] from 4.2.6p3-RC12: setsockopt IPV6_MULTICAST_IF with wrong\n  ifindex.\n* Documentation updates from Dave Mills.\n(4.2.7p95) 2010/12/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1753] 4.2.7p94 faults on startup in newpeer(), strdup(NULL).\n* [Bug 1754] from 4.2.6p3-RC12: --version output should be more verbose.\n* [Bug 1757] from 4.2.6p3-RC12: oncore snprintf(\"%m\") doesn't expand %m.\n* from 4.2.6p3-RC12: Suppress ntp-keygen OpenSSL version display for\n  --help, --version, display both build and runtime OpenSSL versions\n  when they differ.\n* from 4.2.6p3-RC12: Upgrade to libopts 33.5.8 from AutoGen 5.11.6pre3.\n* Documentation updates from Dave Mills.\n(4.2.7p94) 2010/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1751] from 4.2.6p3-RC12: Support for Atari FreeMiNT OS.\n* Documentation updates from Dave Mills.\n(4.2.7p93) 2010/12/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1510] from 4.2.6p3-RC12: Add modes 20/21 for driver 8 to support\n  RAWDCF @ 75 baud.\n* [Bug 1741] from 4.2.6p3-RC12: Enable multicast reception on each\n  address (Windows).\n* from 4.2.6p3-RC12: Other manycastclient repairs:\n  Separate handling of scope ID embedded in many in6_addr from ifindex\n  used for IPv6 multicasting ioctls.\n  Add INT_PRIVACY endpt bit flag for IPv6 RFC 4941 privacy addresses.\n  Enable outbound multicast from only one address per interface in the\n  same subnet, and in that case prefer embedded MAC address modified\n  EUI-64 IPv6 addresses first, then static, and last RFC 4941 privacy\n  addresses.\n  Use setsockopt(IP[V6]_MULTICAST_IF) before each send to multicast to\n  select the local source address, using the correct socket is not\n  enough.\n* \"server ... ident <groupname>\" changes from Dave Mills.\n* Documentation updates from Dave Mills.\n(4.2.7p92) 2010/12/08 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1743] from 4.2.6p3-RC12: Display timezone offset when showing\n  time for sntp in the local timezone.\n(4.2.7p91) 2010/12/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1732] ntpd ties up CPU on disconnected USB device.\n* [Bug 1742] form 4.2.6p3-RC12: Fix a typo in an error message in the\n  \"build\" script.\n(4.2.7p90) 2010/12/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1738] Windows ntpd has wrong net adapter name.\n* [Bug 1740] ntpdc -c reslist packet count wrongly treated as signed.\n(4.2.7p89) 2010/12/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1736] tos int, bool options broken in 4.2.7p66.\n* from 4.2.6p3-RC12: Clean up the SNTP documentation.\n(4.2.7p88) 2010/12/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1735] 'clocktime()' aborts ntpd on bogus input\n(4.2.7p87) 2010/12/01 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3-RC12: Clean up m4 quoting in configure.ac, *.m4 files,\n  resolving intermittent AC_LANG_PROGRAM possibly undefined errors.\n(4.2.7p86) 2010/11/29 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p85) 2010/11/24 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p84) 2010/11/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1618] Unreachable code in jjy_start().\n* [Bug 1725] from 4.2.6p3-RC11: ntpd sends multicast from only one\n  address.\n* from 4.2.6p3-RC11: Upgrade libopts to 33.3.8.\n* from 4.2.6p3-RC11: Bump minimum Automake version to 1.11, required for\n  AM_COND_IF use in LIBOPTS_CHECK.\n* An almost complete rebuild of the initial loopfilter configuration\n  process, including the code that determines the interval between\n  frequency file updates, from Dave Mills.\n* Documentation updates from Dave Mills.\n* Add ntp-keygen -l/--lifetime to control certificate expiry.\n* JJY driver improvements for Tristate JJY01/02, including changes\n  to its clockstats format.\n* Add \"nonvolatile\" ntp.conf directive to control how often the\n  driftfile is written.\n(4.2.7p83) 2010/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1727] ntp-keygen PLEN, ILEN undeclared --without-crypto.\n* Remove top-level libopts, use sntp/libopts.\n* from 4.2.6p3-RC11: Remove log_msg() and debug_msg() from sntp in favor\n  of msyslog().\n* Documentation updates from Dave Mills.\n(4.2.7p82) 2010/11/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1728] from 4.2.6p3-RC11: In ntp_openssl.m4, don't add\n  -I/usr/include or -L/usr/lib to CPPFLAGS or LDFLAGS.\n(4.2.7p81) 2010/11/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1681] from 4.2.6p3-RC10: More sntp logging cleanup.\n* [Bug 1683] from 4.2.6p3-RC10: Non-localhost on loopback exempted from\n  nic rules.\n* [Bug 1719] Cleanup for ntp-keygen and fix -V crash, from Dave Mills.\n(4.2.7p80) 2010/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1574] from 4.2.6p3-RC9: sntp doesn't set tv_usec correctly.\n* [Bug 1681] from 4.2.6p3-RC9: sntp logging cleanup.\n* [Bug 1683] from 4.2.6p3-RC9: Interface binding does not seem to work\n  as intended.\n* [Bug 1708] make check fails with googletest 1.4.0.\n* [Bug 1709] from 4.2.6p3-RC9: ntpdate ignores replies with equal\n  receive and transmit timestamps.\n* [Bug 1715] sntp utilitiesTest.IPv6Address failed.\n* [Bug 1718] Improve gtest checks in configure.ac.\n(4.2.7p79) 2010/11/07 Released by Harlan Stenn <stenn@ntp.org>\n* Correct frequency estimate with no drift file, from David Mills.\n(4.2.7p78) 2010/11/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1697] filegen implementation should be improved.\n* Refactor calendar functions in terms of new common code.\n* Documentation updates from Dave Mills.\n(4.2.7p77) 2010/11/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1692] packageinfo.sh needs to be \"sourced\" using ./ .\n* [Bug 1695] ntpdate takes longer than necessary.\n(4.2.7p76) 2010/11/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1690] Unit tests fails to build on some systems.\n* [Bug 1691] Use first NMEA sentence each second.\n* Put the sntp tests under sntp/ .\n* ... and only build/run them if we have gtest.\n* Documentation updates from Dave Mills.\n(4.2.7p75) 2010/10/30 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Include Linus Karlsson's GSoC 2010 testing code.\n(4.2.7p74) 2010/10/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1685] from 4.2.6p3-RC8: NMEA driver mode byte confusion.\n* from 4.2.6p3-RC8: First cut at using scripts/checkChangeLog.\n* Documentation updates from Dave Mills.\n(4.2.7p73) 2010/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1680] Fix alignment of clock_select() arrays.\n* refinements to new startup behavior from David Mills.\n* For the bootstrap script, touch .html files last.\n* Add 'make check' test case that would have caught [Bug 1678].\n(4.2.7p72) 2010/10/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1679] Fix test for -lsocket.\n* Clean up missing ;; entries in configure.ac.\n(4.2.7p71) 2010/10/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1676] from 4.2.6p3-RC7: NMEA: $GPGLL did not work after fix\n  for Bug 1571.\n* [Bug 1678] \"restrict source\" treated as \"restrict default\".\n* from 4.2.6p3-RC7: Added scripts/checkChangeLog.\n(4.2.7p70) 2010/10/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1571] from 4.2.6p3-RC6: NMEA does not relate data to PPS edge.\n* [Bug 1572] from 4.2.p63-RC6: NMEA time adjustment for GPZDG buggy.\n* [Bug 1675] from 4.2.6p3-RC6: Prohibit includefile remote config.\n* Enable generating ntpd/ntp_keyword.h after keyword-gen.c changes on\n  Windows as well as POSIX platforms.\n* Fix from Dave Mills for a rare singularity in clock_combine().\n(4.2.7p69) 2010/10/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1671] Automatic delay calibration is sometimes inaccurate.\n(4.2.7p68) 2010/10/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1669] from 4.2.6p3-RC5: NTP fails to compile on IBM AIX 5.3.\n* [Bug 1670] Fix peer->bias and broadcastdelay.\n* Documentation updates from Dave Mills.\n* Documentation EOL cleanup.\n(4.2.7p67) 2010/10/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1649] from 4.2.6p3-RC5: Require NMEA checksum if $GPRMC or\n  previously seen.\n(4.2.7p66) 2010/10/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1277] Provide and use O(1) FIFOs, esp. in the config tree code.\n* Remove unused 'bias' configuration keyword.\n(4.2.7p65) 2010/10/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1584] from 4.2.6p3-RC4: wrong SNMP type for precision,\n  resolution.\n* Remove 'calldelay' and 'sign' remnants from parser, ntp_config.c.\n(4.2.7p64) 2010/10/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1584] from 4.2.6p3-RC3: ntpsnmpd OID must be mib-2.197.\n* [Bug 1659] from 4.2.6p3-RC4: Need CLOCK_TRUETIME not CLOCK_TRUE.\n* [Bug 1663] ntpdsim should not open net sockets.\n* [Bug 1665] from 4.2.6p3-RC4: is_anycast() u_int32_t should be u_int32.\n* from 4.2.6p3: ntpsnmpd, libntpq warning cleanup.\n* Remove 'calldelay' and 'sign' keywords (Dave Mills).\n* Documentation updates from Dave Mills.\n(4.2.7p63) 2010/10/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1080] from 4.2.6p3-RC3: ntpd on ipv6 routers very chatty.\n* Documentation nit cleanup.\n* Documentation updates from Dave Mills.\n(4.2.7p62) 2010/10/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 750] from 4.2.6p3-RC3: Non-existing device causes coredump with \n  RIPE-NCC driver.\n* [Bug 1567] from 4.2.6p3-RC3: Support Arbiter 1093C Satellite Clock on\n  Windows.\n* [Bug 1581] from 4.2.6p3-RC3: printf format string mismatch leftover.\n* [Bug 1659] from 4.2.6p3-RC3: Support Truetime Satellite Clocks on\n  Windows. \n* [Bug 1660] from 4.2.6p3-RC3: On some systems, test is in /usr/bin, not\n  /bin. \n* [Bug 1661] from 4.2.6p3-RC3: Re-indent refclock_ripencc.c.\n* Lose peer_count from ntp_peer.c and ntp_proto.c (Dave Mills).\n* Documentation updates from Dave Mills.\n(4.2.7p61) 2010/10/06 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation and code cleanup from Dave Mills. No more NTP_MAXASSOC.\n(4.2.7p60) 2010/10/04 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p59) 2010/10/02 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Variable name cleanup from Dave Mills.\n* [Bug 1657] darwin needs res_9_init, not res_init.\n(4.2.7p58) 2010/09/30 Released by Harlan Stenn <stenn@ntp.org>\n* Clock select bugfix from Dave Mills.\n* [Bug 1554] peer may stay selected as system peer after becoming\n  unreachable.\n* [Bug 1644] from 4.2.6p3-RC3: cvo.sh should use lsb_release to identify\n  linux distros.\n* [Bug 1646] ntpd crashes with relative path to logfile.\n(4.2.7p57) 2010/09/27 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p56) 2010/09/25 Released by Harlan Stenn <stenn@ntp.org>\n* Clock combining algorithm improvements from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1642] ntpdsim can't find simulate block in config file.\n* [Bug 1643] from 4.2.6p3-RC3: Range-check the decoding of the RIPE-NCC\n  status codes.\n(4.2.7p55) 2010/09/22 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1636] from 4.2.6p3-RC2: segfault after denied remote config.\n(4.2.7p54) 2010/09/21 Released by Harlan Stenn <stenn@ntp.org>\n* More Initial convergence improvements from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1635] from 4.2.6p3-RC2: \"filegen ... enable\" is not default.\n(4.2.7p53) 2010/09/20 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* More Initial convergence improvements from Dave Mills.\n(4.2.7p52) 2010/09/19 Released by Harlan Stenn <stenn@ntp.org>\n* Initial convergence improvements from Dave Mills.\n(4.2.7p51) 2010/09/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1344] from 4.2.6p3-RC1: ntpd on Windows exits without logging\n  cause.\n* [Bug 1629] 4.2.7p50 configure.ac changes invalidate config.cache.\n* [Bug 1630] 4.2.7p50 cannot bootstrap on Autoconf 2.61.\n(4.2.7p50) 2010/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup NTP_LIB_M.\n* [Bug 1628] Clean up -lxnet/-lsocket usage for (open)solaris.\n(4.2.7p49) 2010/09/13 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p48) 2010/09/12 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p47) 2010/09/11 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1588] finish configure --disable-autokey implementation.\n* [Bug 1616] refclock_acts.c: if (pp->leap == 2) is always false.\n* [Bug 1620] [Backward Incompatible] \"discard minimum\" value should be in\n  seconds, not log2 seconds.\n(4.2.7p46) 2010/09/10 Released by Harlan Stenn <stenn@ntp.org>\n* Use AC_SEARCH_LIBS instead of AC_CHECK_LIB for NTP_LIB_M.\n(4.2.7p45) 2010/09/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1578] Consistently use -lm when needed.\n(4.2.7p44) 2010/08/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1573] from 4.2.6p3-beta1: Miscalculation of offset in sntp.\n(4.2.7p43) 2010/08/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1602] Refactor some of the sntp/ directory to facililtate testing.\n(4.2.7p42) 2010/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1593] ntpd abort in free() with logconfig syntax error.\n* [Bug 1595] from 4.2.6p3-beta1: empty last line in key file causes\n  duplicate key to be added\n* [Bug 1597] from 4.2.6p3-beta1: packet processing ignores RATE KoD packets,\n  Because of a bug in string comparison.\n(4.2.7p41) 2010/07/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1581] from 4.2.6p3-beta1: ntp_intres.c size_t printf format\n  string mismatch.\n* [Bug 1586] ntpd 4.2.7p40 doesn't write to syslog after fork on QNX.\n* Avoid race with parallel builds using same source directory in\n  scripts/genver by using build directory for temporary files.\n* orphanwait documentation updates.\n(4.2.7p40) 2010/07/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1395] ease ntpdate elimination with ntpd -w/--wait-sync\n* [Bug 1396] allow servers on ntpd command line like ntpdate\n(4.2.7p39) 2010/07/09 Released by Harlan Stenn <stenn@ntp.org>\n* Fix typo in driver28.html.\n* [Bug 1581] from 4.2.6p2: size_t printf format string mismatches, IRIG\n  string buffers undersized.  Mostly backported from earlier ntp-dev\n  fixes by Juergen Perlinger.\n(4.2.7p38) 2010/06/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1570] backported to 4.2.6p2-RC7.\n* [Bug 1575] from 4.2.6p2-RC7: use 'snprintf' with LIB_BUFLENGTH in\n  inttoa.c, tvtoa.c and utvtoa.c\n* [Bug 1576] backported to 4.2.6p2-RC7.\n* Typo fix in a comment in ntp_proto.c.\n(4.2.7p37) 2010/06/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1576] sys/sysctl.h depends on sys/param.h on OpenBSD.\n(4.2.7p36) 2010/06/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1560] Initial support for orphanwait, from Dave Mills.\n* clock_filter()/reachability fixes from Dave Mills.\n(4.2.7p35) 2010/06/12 Released by Harlan Stenn <stenn@ntp.org>\n* Rewrite of multiprecision macros in 'ntp_fp.h' from J. Perlinger\n  <perlinger@ntp.org>\n* [Bug 715] from 4.2.6p2-RC6: libisc Linux IPv6 interface iteration\n  drops multicast flags.\n(4.2.7p34) 2010/06/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1570] serial clock drivers get outdated input from kernel tty\n  line buffer after startup\n(4.2.7p33) 2010/06/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1561] from 4.2.6p2-RC5: ntpq, ntpdc \"passwd\" prompts for MD5\n  password w/SHA1.\n* [Bug 1565] from 4.2.6p2-RC5: sntp/crypto.c compile fails on MacOS over\n  vsnprintf().\n* from 4.2.6p2-RC5: Windows port: do not exit in\n  ntp_timestamp_from_counter() without first logging the reason.\n(4.2.7p32) 2010/05/19 Released by Harlan Stenn <stenn@ntp.org>\n* Copyright file cleanup from Dave Mills.\n* [Bug 1555] from 4.2.6p2-RC4: sntp illegal C (mixed code and\n  declarations).\n* [Bug 1558] pool prototype associations have 0.0.0.0 for remote addr.\n* configure.ac: add --disable-autokey, #define AUTOKEY to enable future\n  support for building without Autokey, but with OpenSSL for its digest\n  algorithms (hash functions).  Code must be modified to use #ifdef\n  AUTOKEY instead of #ifdef OPENSSL where appropriate to complete this.\n* include/ntp_crypto.h: make assumption AUTOKEY implies OPENSSL explicit.\n(4.2.7p31) 2010/05/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1325] from 4.2.6p2-RC3: unreachable code sntp recv_bcst_data().\n* [Bug 1459] from 4.2.6p2-RC3: sntp MD5 authentication does not work\n  with ntpd.\n* [Bug 1552] from 4.2.6p2-RC3: update and complete broadcast and crypto\n  features in sntp.\n* [Bug 1553] from 4.2.6p2-RC3: sntp/configure.ac OpenSSL support.\n* from 4.2.6p2-RC3: Escape unprintable characters in a refid in ntpq -p\n  billboard.\n* from 4.2.6p2-RC3: Simplify hash client code by providing OpenSSL\n  EVP_*() API when built without OpenSSL.  (already in 4.2.7)\n* from 4.2.6p2-RC3: Do not depend on ASCII in sntp.\n(4.2.7p30) 2010/05/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1526] ntpd DNS pipe read EINTR with no network at startup.\n* Update the ChangeLog entries when merging items from -stable.\n(4.2.7p29) 2010/05/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1542] ntpd mrulist response may have incorrect last.older.\n* [Bug 1543] ntpq mrulist must refresh nonce when retrying.\n* [Bug 1544] ntpq mrulist sscanf timestamp format mismatch on 64-bit.\n* Windows compiling hints/winnt.html update from G. Sunil Tej.\n(4.2.7p28) 2010/05/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1512] from 4.2.6p2-RC3: ntpsnmpd should connect to net-snmpd\n  via a unix-domain socket by default.\n  Provide a command-line 'socket name' option.\n* [Bug 1538] from 4.2.6p2-RC3: update refclock_nmea.c's call to\n  getprotobyname().\n* [Bug 1541] from 4.2.6p2-RC3: Fix wrong keyword for \"maxclock\".\n(4.2.7p27) 2010/04/27 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p26) 2010/04/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1465] from 4.2.6p2-RC2: Make sure time from TS2100 is not\n  invalid (backport from -dev).\n* [Bug 1528] from 4.2.6p2-RC2: Fix EDITLINE_LIBS link order for ntpq\n  and ntpdc.\n* [Bug 1531] Require nonce with mrulist requests.\n* [Bug 1532] Remove ntpd support for ntpdc's monlist in favor of ntpq's\n  mrulist.\n* [Bug 1534] from 4.2.6p2-RC2: conflicts with VC++ 2010 errno.h.\n* [Bug 1535] from 4.2.6p2-RC2: \"restrict -4 default\" and \"restrict\n  -6 default\" ignored.\n(4.2.7p25) 2010/04/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1528] from 4.2.6p2-RC2: Remove --with-arlib from br-flock.\n* [Bug 1503] [Bug 1504] [Bug 1518] [Bug 1522] from 4.2.6p2-RC2:\n  all of which were fixed in 4.2.7 previously. \n(4.2.7p24) 2010/04/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1390] Control PPS on the Oncore M12.\n* [Bug 1518] Windows ntpd should lock to one processor more\n  conservatively.\n* [Bug 1520] '%u' formats for size_t gives warnings with 64-bit builds.\n* [Bug 1522] Enable range syntax \"trustedkey (301 ... 399)\".\n* Documentation updates for 4.2.7p22 changes and additions, updating\n  ntpdc.html, ntpq.html, accopt.html, confopt.html, manyopt.html,\n  miscopt.html, and miscopt.txt.\n* accopt.html: non-ntpport doc changes from Dave Mills.\n* Modify full MRU list preemption when full to match \"discard monitor\"\n  documentation, by removing exception for count == 1.\n(4.2.7p23) 2010/04/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1516] unpeer by IP address fails, DNS name works.\n* [Bug 1517] ntpq and ntpdc should verify reverse DNS before use.\n  ntpq and ntpdc now use the following format for showing purported\n  DNS names from IP address \"reverse\" DNS lookups when the DNS name\n  does not exist or does not include the original IP address among\n  the results: \"192.168.1.2 (fake.dns.local)\".\n(4.2.7p22) 2010/04/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1432] Don't set inheritable flag for linux capabilities.\n* [Bug 1465] Make sure time from TS2100 is not invalid.\n* [Bug 1483] AI_NUMERICSERV undefined in 4.2.7p20.\n* [Bug 1497] fudge is broken by getnetnum() change.\n* [Bug 1503] Auto-enabling of monitor for \"restrict ... limited\" wrong.\n* [Bug 1504] ntpdate tickles ntpd \"discard minimum 1\" rate limit if\n  \"restrict ... limited\" is used.\n* ntpdate: stop querying source after KoD packet response, log it.\n* ntpdate: rate limit each server to 2s between packets.\n* From J. N. Perlinger: avoid pointer wraparound warnings in dolfptoa(),\n  printf format mismatches with 64-bit size_t.\n* Broadcast client (ephemeral) associations should be demobilized only\n  if they are not heard from for 10 consecutive polls, regardless of\n  surviving the clock selection.  Fix from David Mills.\n* Add \"ntpq -c ifstats\" similar to \"ntpdc -c ifstats\".\n* Add \"ntpq -c sysstats\" similar to \"ntpdc -c sysstats\".\n* Add \"ntpq -c monstats\" to show monlist knobs and stats.\n* Add \"ntpq -c mrulist\" similar to \"ntpdc -c monlist\" but not\n  limited to 600 rows, and with filtering and sorting options:\n  ntpq -c \"mrulist mincount=2 laddr=192.168.1.2 sort=-avgint\"\n  ntpq -c \"mrulist sort=addr\"\n  ntpq -c \"mrulist mincount=2 sort=count\"\n  ntpq -c \"mrulist sort=-lstint\"\n* Modify internal representation of MRU list to use l_fp fixed-point\n  NTP timestamps instead of seconds since startup.  This increases the\n  resolution and substantially improves accuracy of sorts involving\n  timestamps, at the cost of flushing all MRU entries when the clock is\n  stepped, to ensure the timestamps can be compared with the current\n  get_systime() results.\n* Add ntp.conf \"mru\" directive to configure MRU parameters, such as\n  \"mru mindepth 600 maxage 64 maxdepth 5000 maxmem 1024\" or\n  \"mru initalloc 0 initmem 16 incalloc 99 incmem 4\".  Several pairs are\n  equivalent with one in units of MRU entries and its twin in units of\n  kilobytes of memory, so the last one used in ntp.conf controls:\n  maxdepth/maxmem, initalloc/initmem, incalloc/incmem.  With the above\n  values, ntpd will preallocate 16kB worth of MRU entries, allocating\n  4kB worth each time more are needed, with a hard limit of 1MB of MRU\n  entries.  Until there are more than 600 entries none would be reused.\n  Then only entries for addresses last seen 64 seconds or longer ago are\n  reused.\n* Limit \"ntpdc -c monlist\" response in ntpd to 600 entries, the previous\n  overall limit on the MRU list depth which was driven by the monlist\n  implementation limit of one request with a single multipacket\n  response.\n* New \"pool\" directive implementation modeled on manycastclient.\n* Do not abort on non-ASCII characters in ntp.conf, ignore them.\n* ntpq: increase response reassembly limit from 24 to 32 packets, add\n  discussion in comment regarding results with even larger MAXFRAGS.\n* ntpq: handle \"passwd MYPASSWORD\" (without prompting) as with ntpdc.\n* ntpdc: do not examine argument to \"passwd\" if not supplied.\n* configure: remove check for pointer type used with qsort(), we\n  require ANSI C which mandates void *.\n* Reset sys_kodsent to 0 in proto_clr_stats().\n* Add sptoa()/sockporttoa() similar to stoa()/socktoa() adding :port.\n* Use memcpy() instead of memmove() when buffers can not overlap.\n* Remove sockaddr_storage from our sockaddr_u union of sockaddr,\n  sockaddr_in, and sockaddr_in6, shaving about 100 bytes from its size\n  and substantially decreasing MRU entry memory consumption.\n* Extend ntpq readvar (alias rv) to allow fetching up to three named\n  variables in one operation:  ntpq -c \"rv 0 version offset frequency\".\n* ntpq: use srchost variable to show .POOL. prototype associations'\n  hostname instead of address 0.0.0.0.\n* \"restrict source ...\" configures override restrictions for time\n  sources, allows tight default restrictions to be used with the pool\n  directive (where server addresses are not known in advance).\n* Ignore \"preempt\" modifier on manycastclient and pool prototype\n  associations.  The resulting associations are preemptible, but the\n  prototype must not be.\n* Maintain and use linked list of associations (struct peer) in ntpd,\n  avoiding walking 128 hash table entries to iterate over peers.\n* Remove more workarounds unneeded since we require ISO C90 AKA ANSI C:\n  - remove fallback implementations for memmove(), memset, strstr().\n  - do not test for atexit() or memcpy().\n* Collapse a bunch of code duplication in ntpd/ntp_restrict.c added with\n  support for IPv6.\n* Correct some corner case failures in automatically enabling the MRU\n  list if any \"restrict ... limited\" is in effect, and in disabling MRU\n  maintenance. (ntp_monitor.c, ntp_restrict.c)\n* Reverse the internal sort order of the address restriction lists, but\n  preserve the same behavior.  This allows removal of special-case code\n  related to the default restrictions and more straightforward lookups\n  of restrictions for a given address (now, stop on first match).\n* Move ntp_restrict.c MRU doubly-linked list maintenance code into\n  ntp_lists.h macros, allowing more duplicated source excision.\n* Repair ntpdate.c to no longer test HAVE_TIMER_SETTIME.\n* Do not reference peer_node/unpeer_node after freeing when built with\n  --disable-saveconfig and using DNS.\n(4.2.7p21) 2010/03/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1514] from 4.2.6p1-RC6: Typo in ntp_proto.c: fabs(foo < .4)\n  should be fabs(foo) < .4.\n* [Bug 1464] from 4.2.6p1-RC6: synchronization source wrong for\n  refclocks ARCRON_MSF (27) and SHM (28).\n* From 4.2.6p1-RC6: Correct Windows port's refclock_open() to\n  return 0 on failure not -1.\n* From 4.2.6p1-RC6: Correct CHU, dumbclock, and WWVB drivers to\n  check for 0 returned from refclock_open() on failure.\n* From 4.2.6p1-RC6: Correct \"SIMUL=4 ./flock-build -1\" to\n  prioritize -1/--one.\n* [Bug 1306] constant conditionals in audio_gain().\n(4.2.7p20) 2010/02/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1483] hostname in ntp.conf \"restrict\" parameter rejected.\n* Use all addresses for each restrict by hostname.\n* Use async DNS to resolve trap directive hostnames.\n(4.2.7p19) 2010/02/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1338] Update the association type codes in ntpq.html.\n* [Bug 1478] from 4.2.6p1-RC5: linking fails: EVP_MD_pkey_type.\n* [Bug 1479] from 4.2.6p1-RC5: not finding readline headers.\n* [Bug 1484] from 4.2.6p1-RC5: ushort is not defined in QNX6.\n(4.2.7p18) 2010/02/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1480] from 4.2.6p1-RC5: snprintf() cleanup caused \n  unterminated refclock IDs.\n* Stop using getaddrinfo() to convert numeric address strings to on-wire\n  addresses in favor of is_ip_address() alone.\n(4.2.7p17) 2010/02/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1477] from 4.2.6p1-RC5: First non-gmake make in clone\n  w/VPATH can't make COPYRIGHT.\n* Attempts to cure CID 108 CID 118 CID 119 TAINTED_SCALAR warnings.\n* Broaden ylwrap workaround VPATH_HACK to all non-GNU make.\n(4.2.7p16) 2010/02/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1474] from 4.2.6p1-RC4: ntp_keygen LCRYPTO after libntp.a.\n* Include 4.2.6p1-RC4: Remove arlib.\n(4.2.7p15) 2010/02/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1455] from 4.2.6p1: ntpd does not try /etc/ntp.audio.\n* Include 4.2.6p1: Convert many sprintf() calls to snprintf(), also\n  strcpy(), strcat().\n* Include 4.2.6p1: Fix widely cut-n-pasted bug in refclock shutdown\n  after failed start.\n* Include 4.2.6p1: Remove some dead code checking for emalloc()\n  returning NULL.\n(4.2.7p14) 2010/02/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1338] ntpq displays incorrect association type codes.\n* [Bug 1469] u_int32, int32 changes broke HP-UX 10.20 build.\n* [Bug 1470] from 4.2.6p1: \"make distdir\" compiles keyword-gen.\n* [Bug 1471] CID 120 CID 121 CID 122 is_ip_address() uninit family.\n* [Bug 1472] CID 116 CID 117 minor warnings in new DNS code.\n* [Bug 1473] from 4.2.6p1: \"make distcheck\" version.m4 error.\n(4.2.7p13) 2010/01/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1467] from 4.2.6p1: Fix bogus rebuild of sntp/sntp.html.\n(4.2.7p12) 2010/01/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1468] 'make install' broken for root on default NFS mount.\n(4.2.7p11) 2010/01/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 47] Debugging and logging do not work after a fork.\n* [Bug 1010] getaddrinfo() could block and thus should not be called by\n  the main thread/process.\n* New async DNS resolver in ntpd allows nonblocking queries anytime,\n  instead of only once at startup.\n(4.2.7p10) 2010/01/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1140] from 4.2.6p1-RC5: Clean up debug.html, decode.html,\n  and ntpq.html.\n* Include 4.2.6p1-RC3: Use TZ=UTC instead of TZ= when calling date in\n  scripts/mkver.in .\n* [Bug 1448] from 4.2.6p1-RC3: Some macros not correctly conditionally\n  or absolutely defined on Windows.\n* [Bug 1449] from 4.2.6p1-RC3: ntpsim.h in ntp_config.c should be used\n  conditionally.\n* [Bug 1450] from 4.2.6p1-RC3: Option to exclude warnings not\n  unconditionally defined on Windows.\n(4.2.7p9) 2010/01/13 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p8) 2010/01/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 702] ntpd service logic should use libopts to examine cmdline.\n* [Bug 1451] from 4.2.6p1-RC3: sntp leaks KoD entry updating.\n* [Bug 1453] from 4.2.6p1-RC3: Use $CC in config.cache filename.\n(4.2.7p7) 2009/12/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 620] ntpdc getresponse() esize != *rsize s/b size != *rsize.\n* [Bug 1446] 4.2.7p6 requires autogen, missing ntpd.1, *.texi, *.menu.\n(4.2.7p6) 2009/12/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1443] Remove unnecessary dependencies on ntp_io.h\n* [Bug 1442] Move Windows functions into libntp files\n* [Bug 1127] from 4.2.6p1-RC3: Check the return of X590_verify().\n* [Bug 1439] from 4.2.6p1-RC3: .texi gen after binary is linked.\n* [Bug 1440] from 4.2.6p1-RC3: Update configure.ac to support kfreebsd.\n* [Bug 1445] from 4.2.6p1-RC3: IRIX does not have -lcap or support\n  linux capabilities.\n(4.2.7p5) 2009/12/25 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.6p1-RC2\n(4.2.7p4) 2009/12/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1429] ntpd -4 option does not reliably force IPv4 resolution.\n* [Bug 1431] System headers must come before ntp headers in ntp_intres.c .\n(4.2.7p3) 2009/12/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1426] scripts/VersionName needs . on the search path.\n* [Bug 1427] quote missing in ./build - shows up on NetBSD.\n* [Bug 1428] Use AC_HEADER_RESOLV to fix breaks from resolv.h\n(4.2.7p2) 2009/12/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1419] ntpdate, ntpdc, sntp, ntpd ignore configure --bindir.\n* [Bug 1421] add util/tg2, a clone of tg that works on Linux, NetBSD, and\n  FreeBSD\n(4.2.7p1) 2009/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1348] ntpd Windows port should wait for sendto() completion.\n* [Bug 1413] test OpenSSL headers regarding -Wno-strict-prototypes.\n* [Bug 1418] building ntpd/ntpdc/ntpq statically with ssl fails.\n(4.2.7p0) 2009/12/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1412] m4/os_cflags.m4 caches results that depend on $CC.\n* [Bug 1414] Enable \"make distcheck\" success with BSD make.\n(4.2.7) 2009/12/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1407] configure.ac: recent GNU Make -v does not include \"version\".\n---\n(4.2.6p3) 2011/01/03 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1764] Palisade driver doesn't build on Linux\n* Create and use scripts/check--help when generating .texi files.\n* Update bk triggers for the bk-5 release.\n* Update genCommitLog for the bk-5 release.\n* Update the copyright year.\n\n---\n(4.2.6p3-RC12) 2010/12/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1458] Can not compile NTP on FreeBSD 4.7.\n* [Bug 1510] Add modes 20/21 for driver 8 to support RAWDCF @ 75 baud.\n* [Bug 1618] Unreachable code in jjy_start(). (backport from ntp-dev)\n* [Bug 1719] ntp-keygen -V crash. (backport)\n* [Bug 1740] ntpdc treats many counters as signed. (backport)\n* [Bug 1741] Enable multicast reception on each address (Windows).\n* [Bug 1742] Fix a typo in an error message in the \"build\" script.\n* [Bug 1743] Display timezone offset when showing time for sntp in the\n  local timezone.\n* [Bug 1751] Support for Atari FreeMiNT OS.\n* [Bug 1754] --version output should be more verbose.\n* [Bug 1757] oncore snprintf(\"%m\") doesn't expand %m.\n* [Bug 1758] setsockopt IPV6_MULTICAST_IF with wrong ifindex.\n* [Bug 1760] ntpd Windows interpolation cannot be disabled.\n* [Bug 1762] manycastclient solicitation responses interfere.\n* Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre7.\n* Relax minimum Automake version to 1.10 with updated libopts.m4.\n* Suppress ntp-keygen OpenSSL version display for --help, --version,\n  display both build and runtime OpenSSL versions when they differ.\n* Clean up m4 quoting in configure.ac, *.m4 files, resolving\n  intermittent AC_LANG_PROGRAM possibly undefined errors.\n* Clean up the SNTP documentation.\n* Other manycastclient repairs:\n  Separate handling of scope ID embedded in many in6_addr from ifindex\n  used for IPv6 multicasting ioctls.\n  Add INT_PRIVACY endpt bit flag for IPv6 RFC 4941 privacy addresses.\n  Enable outbound multicast from only one address per interface in the\n  same subnet, and in that case prefer embedded MAC address modified\n  EUI-64 IPv6 addresses first, then static, and last RFC 4941 privacy\n  addresses.\n  Use setsockopt(IP[V6]_MULTICAST_IF) before each send to multicast to\n  select the local source address, using the correct socket is not\n  enough.\n\n---\n(4.2.6p3-RC11) 2010/11/28 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1725] ntpd sends multicast from only one address.\n* [Bug 1728] In ntp_openssl.m4, don't add -I/usr/include or -L/usr/lib\n  to CPPFLAGS or LDFLAGS.\n* [Bug 1733] IRIX doesn't have 'head' (affects scripts/checkChangeLog).\n* Remove log_msg() and debug_msg() from sntp in favor of msyslog().\n* Use a single copy of libopts/, in sntp/.\n* Upgrade libopts to 33.3.8.\n* Bump minimum Automake version to 1.11, required for AM_COND_IF\n  use in LIBOPTS_CHECK.\n* Improvements to the 'build' script.\n\n---\n(4.2.6p3-RC10) 2010/11/14 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1681] More sntp logging cleanup.\n* [Bug 1683] Non-localhost on loopback exempted from nic rules.\n\n---\n(4.2.6p3-RC9) 2010/11/10 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1574] sntp:set_time doesn't set tv_usec correctly.\n* [Bug 1681] sntp logging cleanup.\n* [Bug 1683] Interface binding does not seem to work as intended.\n* [Bug 1691] Use first NMEA sentence each second.\n* [Bug 1692] packageinfo.sh needs to be \"sourced\" using ./ .\n* [Bug 1709] ntpdate ignores replies with equal receive and transmit\n  timestamps.\n* Backport sntp from -dev\n\n---\n(4.2.6p3-RC8) 2010/10/29 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1685] NMEA driver mode byte confusion.\n* First cut at using scripts/checkChangeLog.\n\n---\n(4.2.6p3-RC7) 2010/10/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1676] NMEA: $GPGLL did not work after fix for Bug 1571.\n* Added scripts/checkChangeLog.\n\n---\n(4.2.6p3-RC6) 2010/10/24 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1571] NMEA does not relate data to PPS edge.\n* [Bug 1572] NMEA time adjustment for GPZDG buggy.\n* [Bug 1675] Prohibit includefile remote config.\n\n---\n(4.2.6p3-RC5) 2010/10/22 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1649] Require NMEA checksum if $GPRMC or previously seen.\n* [Bug 1669] NTP 4.2.6p2 fails to compile on IBM AIX 5.3.\n\n---\n(4.2.6p3-RC4) 2010/10/16 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1584] wrong SNMP type for precision, resolution.\n* [Bug 1659] Need CLOCK_TRUETIME not CLOCK_TRUE.\n* [Bug 1665] is_anycast() u_int32_t should be u_int32.\n* ntpsnmpd, libntpq warning cleanup.\n\n---\n(4.2.6p3-RC3) 2010/10/14 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 750] Non-existing device causes coredump with RIPE-NCC driver.\n* [Bug 1080] ntpd on ipv6 routers very chatty.\n* [Bug 1567] Support Arbiter 1093C Satellite Clock on Windows.\n* [Bug 1581] printf format string mismatch leftover.\n* [Bug 1584] ntpsnmpd OID must be mib-2.197.\n* [Bug 1643] Range-check the decoding of the RIPE-NCC status codes.\n* [Bug 1644] cvo.sh should use lsb_release to identify linux distros.\n* [Bug 1659] Support Truetime Satellite Clocks on Windows.\n* [Bug 1660] On some systems, test is in /usr/bin, not /bin.\n* [Bug 1661] Re-indent refclock_ripencc.c.\n\n---\n(4.2.6p3-RC2) 2010/09/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1635] \"filegen ... enable\" is not default.\n* [Bug 1636] yyparse() segfault after denied filegen remote config.\n\n---\n(4.2.6p3-RC1) 2010/09/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1344] ntpd on Windows exits without logging cause.\n\n---\n(4.2.6p3-beta1) 2010/09/11 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1573] Miscalculation of offset in sntp.\n* [Bug 1595] empty last line in key file causes duplicate key to be added\n* [Bug 1597] packet processing ignores RATE KoD packets, because of\n  a bug in string comparison.\n* [Bug 1581] ntp_intres.c size_t printf format string mismatch.\n\n---\n(4.2.6p2) 2010/07/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1581] size_t printf format string mismatches, IRIG string buffers\n  undersized.  Mostly backported from earlier ntp-dev fixes by Juergen\n  Perlinger.\n\n---\n(4.2.6p2-RC7) 2010/06/19 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1570] serial clock drivers get outdated input from kernel tty\n  line buffer after startup\n* [Bug 1575] use 'snprintf' with LIB_BUFLENGTH in inttoa.c, tvtoa.c and\n  utvtoa.c\n* [Bug 1576] sys/sysctl.h depends on sys/param.h on OpenBSD.\n\n---\n(4.2.6p2-RC6) 2010/06/12 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 715] libisc Linux IPv6 interface iteration drops multicast flags.\n\n---\n(4.2.6p2-RC5) 2010/06/03 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1561] ntpq, ntpdc \"passwd\" prompts for MD5 password w/SHA1.\n* [Bug 1565] sntp/crypto.c compile fails on MacOS over vsnprintf().\n* Windows port: do not exit in ntp_timestamp_from_counter() without\n  first logging the reason.\n* Support \"passwd blah\" syntax in ntpq.\n\n---\n(4.2.6p2-RC4) 2010/05/19 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1555] 4.2.6p2-RC3 sntp illegal C (mixed code and declarations).\n\n---\n(4.2.6p2-RC3) 2010/05/11 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1325] unreachable code in sntp recv_bcst_data().\n* [Bug 1459] sntp MD5 authentication does not work with ntpd.\n* [Bug 1512] ntpsnmpd should connect to net-snmpd via a unix-domain\n  socket by default.  Provide a command-line 'socket name' option.\n* [Bug 1538] update refclock_nmea.c's call to getprotobyname().\n* [Bug 1541] Fix wrong keyword for \"maxclock\".\n* [Bug 1552] update and complete broadcast and crypto features in sntp.\n* [Bug 1553] sntp/configure.ac OpenSSL support.\n* Escape unprintable characters in a refid in ntpq -p billboard.\n* Simplify hash client code by providing OpenSSL EVP_*() API when built\n  without OpenSSL.  (from ntp-dev)\n* Do not depend on ASCII values for ('A' - '0'), ('a' - '0') in sntp.\n* Windows compiling hints/winnt.html update from G. Sunil Tej.\n\n---\n(4.2.6p2-RC2) 2010/04/27 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1465] Make sure time from TS2100 is not invalid (backport from\n  ntp-dev).\n* [Bug 1528] Fix EDITLINE_LIBS link order for ntpq and ntpdc.\n* [Bug 1534] win32/include/isc/net.h conflicts with VC++ 2010 errno.h.\n* [Bug 1535] \"restrict -4 default\" and \"restrict -6 default\" ignored.\n* Remove --with-arlib from br-flock.\n\n---\n(4.2.6p2-RC1) 2010/04/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1503] Auto-enabling of monitor for \"restrict ... limited\" wrong.\n* [Bug 1504] ntpdate tickles ntpd \"discard minimum 1\" rate limit if\n  \"restrict ... limited\" is used.\n* [Bug 1518] Windows ntpd should lock to one processor more\n  conservatively.\n* [Bug 1522] Enable range syntax \"trustedkey (301 ... 399)\".\n* Update html/authopt.html controlkey, requestkey, and trustedkey docs.\n\n---\n(4.2.6p1) 2010/04/09 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.6p1-RC6) 2010/03/31 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1514] Typo in ntp_proto.c: fabs(foo < .4) should be fabs(foo) < .4.\n* [Bug 1464] synchronization source wrong for refclocks ARCRON_MSF (27)\n  and SHM (28).\n* Correct Windows port's refclock_open() to return 0 on failure not -1.\n* Correct CHU, dumbclock, and WWVB drivers to check for 0 returned from\n  refclock_open() on failure.\n* Correct \"SIMUL=4 ./flock-build -1\" to prioritize -1/--one.\n\n---\n(4.2.6p1-RC5) 2010/02/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1140] Clean up debug.html, decode.html, and ntpq.html.\n* [Bug 1438] Remove dead code from sntp/networking.c.\n* [Bug 1477] 1st non-gmake make in clone w/VPATH can't make COPYRIGHT.\n* [Bug 1478] linking fails with undefined reference EVP_MD_pkey_type.\n* [Bug 1479] Compilation fails because of not finding readline headers.\n* [Bug 1480] snprintf() cleanup caused unterminated refclock IDs.\n* [Bug 1484] ushort is not defined in QNX6.\n\n---\n(4.2.6p1-RC4) 2010/02/04 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1455] ntpd does not try /etc/ntp.audio as documented.\n* [Bug 1467] Fix bogus rebuild of sntp/sntp.html\n* [Bug 1470] \"make distdir\" in $srcdir builds keyword-gen, libntp.a.\n* [Bug 1473] \"make distcheck\" before build can't make sntp/version.m4.\n* [Bug 1474] ntp_keygen needs LCRYPTO after libntp.a.\n* Convert many sprintf() calls to snprintf(), also strcpy(), strcat().\n* Fix widely cut-n-pasted bug in refclock shutdown after failed start.\n* Remove some dead code checking for emalloc() returning NULL.\n* Remove arlib.\n\n---\n(4.2.6p1-RC3) 2010/01/24 Released by Harlan Stenn <stenn@ntp.org>\n\n* Use TZ=UTC instead of TZ= when calling date in scripts/mkver.in .\n* [Bug 1448] Some macros not correctly conditionally or absolutely defined\n  on Windows.\n* [Bug 1449] ntpsim.h in ntp_config.c should be used conditionally.\n* [Bug 1450] Option to exclude warnings not unconditionally defined on Windows.\n* [Bug 1127] Properly check the return of X590_verify() - missed one.\n* [Bug 1439] .texi generation must wait until after binary is linked.\n* [Bug 1440] Update configure.ac to support kfreebsd.\n* [Bug 1445] IRIX does not have -lcap or support linux capabilities.\n* [Bug 1451] CID 115: sntp leaks KoD entry when updating existing.\n* [Bug 1453] Use $CC in config.cache filename in ./build script.\n\n---\n(4.2.6p1-RC2) 2009/12/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1411] Fix status messages in refclock_oncore.c.\n* [Bug 1416] MAXDNAME undefined on Solaris 2.6.\n* [Bug 1419] ntpdate, ntpdc, sntp, ntpd ignore configure --bindir.\n* [Bug 1424] Fix check for rtattr (rtnetlink.h).\n* [Bug 1425] unpeer by association ID sets up for duplicate free().\n* [Bug 1426] scripts/VersionName needs . on the search path.\n* [Bug 1427] quote missing in ./build - shows up on NetBSD.\n* [Bug 1428] Use AC_HEADER_RESOLV to fix breaks from resolv.h\n* [Bug 1429] ntpd -4 option does not reliably force IPv4 resolution.\n* [Bug 1431] System headers must come before ntp headers in ntp_intres.c .\n* [Bug 1434] HP-UX 11 ip_mreq undeclared, _HPUX_SOURCE helps some.\n* [Bug 1435] sntp: Test for -lresolv using the same tests as in ntp.\n\n---\n(4.2.6p1-RC1) 2009/12/20 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1409] Put refclock_neoclock4x.c under the NTP COPYRIGHT notice.\n  This should allow debian and other distros to add this refclock driver\n  in further distro releases.\n  Detect R2 hardware releases.\n* [Bug 1412] m4/os_cflags.m4 caches results that depend on $CC.\n* [Bug 1413] test OpenSSL headers regarding -Wno-strict-prototypes.\n* [Bug 1414] Enable \"make distcheck\" success with BSD make.\n* [Bug 1415] Fix Mac OS X link problem.\n* [Bug 1418] building ntpd/ntpdc/ntpq statically with ssl fails.\n* Build infrastructure updates to enable beta releases of ntp-stable.\n\n---\n(4.2.6) 2009/12/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Sec 1331] from4.2.4p8: DoS with mode 7 packets - CVE-2009-3563.\n* [Bug 508] Fixed leap second handling for Windows.\n(4.2.5p250-RC) 2009/11/30 Released by Harlan Stenn <stenn@ntp.org>\n* sntp documentation updates.\n* [Bug 761] internal resolver does not seem to honor -4/-6 qualifiers\n* [Bug 1386] Deferred DNS doesn't work on NetBSD\n* [Bug 1391] avoid invoking autogen twice for .c and .h files.\n* [Bug 1397] shmget() refclock_shm failing because of file mode.\n* Pass no_needed to ntp_intres as first part of fixing [Bug 975].\n* Add ./configure --enable-force-defer-DNS to help debugging.\n(4.2.5p249-RC) 2009/11/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1400] An empty KOD DB file causes sntp to coredump.\n* sntp: documentation cleanup.\n* sntp: clean up some error messages.\n* sntp: Use the precision to control how many offset digits are shown.\n* sntp: Show root dispersion.\n* Cleanup from the automake/autoconf upgrades.\n(4.2.5p248-RC) 2009/11/26 Released by Harlan Stenn <stenn@ntp.org>\n* Prepare for the generation of sntp.html.\n* Documentation changes from Dave Mills.\n* [Bug 1387] Storage leak in ntp_intres (minor).\n* [Bug 1389] buffer overflow in refclock_oncore.c\n* [Bug 1391] .texi usage text from installed, not built binaries.\n* [Bug 1392] intres retries duplicate assocations endlessly.\n* Correct *-opts.h dependency so default 'get' action isn't used.\n(4.2.5p247-RC) 2009/11/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1142] nodebug builds shed no light on -d, -D option failure.\n* [Bug 1179] point out the problem with -i/--jaildir and -u/--user when\n  they are disabled by configure.\n* [Bug 1308] support systems that lack fork().\n* [Bug 1343] sntp doesn't link on Solaris 7, needs -lresolv.\n(4.2.5p246-RC) 2009/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* Upgrade to autogen-5.10\n* [Bug 1378] Unnecessary resetting of peers during interface update.\n* [Bug 1382] p245 configure --disable-dependency-tracking won't build.\n* [Bug 1384] ntpq :config core dumped with a blank password.\n(4.2.5p245-RC) 2009/11/14 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup from Dave Mills.\n* [Bug 1343] sntp illegal C does not compile on Solaris 7.\n* [Bug 1381] Version .deps generated include file dependencies to allow\n  known dependency-breaking changes to force .deps to be cleaned,\n  triggered by changing the contents of deps-ver and/or sntp/deps-ver.\n(4.2.5p244-RC) 2009/11/12 Released by Harlan Stenn <stenn@ntp.org>\n* keygen.html updates from Dave Mills.\n* [Bug 1003] ntpdc unconfig command doesn't prompt for keyid.\n* [Bug 1376] Enable authenticated ntpq and ntpdc using newly-available\n  digest types.\n* ntp-keygen, Autokey OpenSSL build vs. run version mismatch is now a\n  non-fatal warning.\n(4.2.5p243-RC) 2009/11/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1226] Fix deferred DNS lookups.\n* new crypto signature cleanup.\n(4.2.5p242-RC) 2009/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1363] CID 92 clarify fallthrough case in clk_trimtsip.c\n* [Bug 1366] ioctl(TIOCSCTTY, 0) fails on NetBSD *[0-2].* > 3.99.7.\n* [Bug 1368] typos in libntp --without-crypto case\n* [Bug 1371] deferred DNS lookup failing with INFO_ERR_AUTH.\n* CID 87 dead code in ntpq.c atoascii().\n* Fix authenticated ntpdc, broken in p240.\n* Stub out isc/mem.h, shaving 47k from a MIPS ntpd binary.\n* Shrink keyword scanner FSM entries from 64 to 32 bits apiece.\n* Documention updates from Dave Mills.\n* authkeys.c cleanup from Dave Mills.\n(4.2.5p241-RC) 2009/11/07 Released by Harlan Stenn <stenn@ntp.org>\n* html/authopt.html update from Dave Mills.\n* Remove unused file from sntp/Makefile.am's distribution list.\n* new crypto signature cleanup.\n(4.2.5p240-RC) 2009/11/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1364] clock_gettime() not detected, need -lrt on Debian 5.0.3.\n* Provide all of OpenSSL's signature methods for ntp.keys (FIPS 140-2).\n(4.2.5p239-RC) 2009/10/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1357] bogus assert from refclock_shm.\n* [Bug 1359] Debug message cleanup.\n* CID 101: more pointer/array cleanup.\n* [Bug 1356] core dump from refclock_nmea when can't open /dev/gpsU.\n* [Bug 1358] AIX 4.3 sntp/networking.c IPV6_JOIN_GROUP undeclared.\n* CID 101: pointer/array cleanup.\n(4.2.5p238-RC) 2009/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* Changes from Dave Mills.\n* driver4.html updates from Dave Mills.\n* [Bug 1252] PPSAPI cleanup on ntpd/refclock_wwvb.c.\n* [Bug 1354] libtool error building after bootstrap with Autoconf 2.64.\n* Allow NTP_VPATH_HACK configure test to handle newer gmake versions.\n* CIDs 94-99 make it more clearly impossible for sock_hash() to return\n  a negative number.\n* CID 105, 106 ensure ntpdc arrays are not overrun even if callers\n  misbehave.\n* CID 113 use va_end() in refclock_true.c true_debug().\n* Get rid of configure tests for __ss_family and __ss_len when the more\n  common ss_family and ss_len are present.\n(4.2.5p237-RC) 2009/10/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 610] NMEA support for using PPSAPI on a different device.\n* [Bug 1238] use only fudge time2 to offset NMEA serial timestamp.\n* [Bug 1355] ntp-dev won't compile on OpenBSD 4.6.\n(4.2.5p236-RC) 2009/10/22 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup from Dave Mills.\n* [Bug 1343] ntpd/ntp_io.c close_fd() does not compile on Solaris 7.\n* [Bug 1353] ntpq \"rv 0 settimeofday\" always shows UNKNOWN on unix.\n* Do not attempt to execute built binaries from ntpd/Makefile when\n  cross-compiling (keyword-gen and ntpd --saveconfigquit).\n* sntp/main.c: Remove duplicate global adr_buf[] (also defined in\n  networking.c) which Piotr Grudzinski identified breaking his build.\n* Correct in6addr_any test in configure.ac to attempt link too.\n(4.2.5p235-RC) 2009/10/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1343] lib/isc build breaks on systems without IPv6 headers.\n(4.2.5p234-RC) 2009/10/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1339] redux, use unmodified lib/isc/win32/strerror.c and\n  move #define strerror... to a header not used by lib/isc code.\n* [Bug 1345] illegal 'grep' option prevents compilation.\n* [Bug 1346] keyword scanner broken where char defaults to unsigned.\n* [Bug 1347] ntpd/complete.conf missing multicastclient test case.\n(4.2.5p233-RC) 2009/10/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1337] cast setsockopt() v4 address pointer to void *.\n* [Bug 1342] ignore|drop one IPv6 address on an interface blocks all\n  addresses on that interface.\n* Documentation cleanup and updates.\n(4.2.5p232-RC) 2009/10/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1302] OpenSSL under Windows needs applink support.\n* [Bug 1337] fix incorrect args to setsockopt(fd, IP_MULTICAST_IF,...).\n* [Bug 1339] Fix Windows-only ntp_strerror() infinite recursion.\n* [Bug 1341] NMEA driver requires working PPSAPI #ifdef HAVE_PPSAPI.\n* Construct ntpd keyword scanner finite state machine at compile time\n  rather than at runtime, shrink entries from 40+ to 8 bytes.\n* Update documentation for ntpq --old-rv, saveconfig, saveconfigdir,\n  ntpd -I -L and -M, and interface/nic rules. (From Dave Hart)\n* [Bug 1337] fix incorrect args to setsockopt(fd, IP_MULTICAST_IF,...)\n(4.2.5p231-RC) 2009/10/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1335] Broadcast client degraded by wildcard default change.\n(4.2.5p230-RC) 2009/10/09 Released by Harlan Stenn <stenn@ntp.org>\n* Start the 4.2.6 Release Candidate cycle.\n* Broadcast and transit phase cleanup from Dave Mills.\n(4.2.5p229) 2009/10/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1334] ntpsnmpd undefined reference to `ntpqOptions'.\n* Change ntpsnmpd/Makefile.am include file order to fix FreeBSD build.\n(4.2.5p228) 2009/10/06 Released by Harlan Stenn <stenn@ntp.org>\n* Reclaim syntax tree memory after application in ntpd built with\n  configure --disable-saveconfig.\n* [Bug 1135] ntpq uses sizeof(u_long) where sizeof(u_int32) is meant.\n* [Bug 1333] ntpd --interface precedence over --novirtualips lost.\n(4.2.5p227) 2009/10/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1135] :config fails with \"Server disallowed request\"\n* [Bug 1330] disallow interface/nic rules when --novirtualips or\n  --interface are used.\n* [Bug 1332] ntpq -c 'rv 0 variablename' returns extra stuff.\n* Add test of ntpd --saveconfigquit fidelity using new complete.conf.\n* Documentation updates from Dave Hart/Dave Mills.\n(4.2.5p226) 2009/10/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1318] Allow multiple -g options on ntpd command line.\n* [Bug 1327] ntpq, ntpdc, ntp-keygen -d & -D should work with configure\n  --disable-debugging.\n* Add ntpd --saveconfigquit <filename> option for future build-time\n  testing of saveconfig fidelity.\n* Clockhop and autokey cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n(4.2.5p225) 2009/09/30 Released by Harlan Stenn <stenn@ntp.org>\n* authopt documentation changes from Dave Mills/Dave Hart.\n* [Bug 1324] support bracketed IPv6 numeric addresses for restrict.\n(4.2.5p224) 2009/09/29 Released by Harlan Stenn <stenn@ntp.org>\n* Clockhop and documentation fixes from Dave Mills.\n* Remove \"tos maxhop\" ntp.conf knob.\n(4.2.5p223) 2009/09/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1321] build doesn't work if . isn't on $PATH.\n* [Bug 1323] Implement \"revoke #\" to match documentation, deprecate\n  \"crypto revoke #\".\n(4.2.5p222) 2009/09/27 Released by Harlan Stenn <stenn@ntp.org>\n* Update libisc code using bind-9.6.1-P1.tar.gz, rearrange our copy to\n  mirror the upstream layout (lib/isc/...), and merge in NTP-local\n  modifications to libisc.  There is a new procedure to ease future\n  libisc merges using a separate \"upstream\" bk repo.  That will enable\n  normal bk pull automerge to handle carrying forward any local changes\n  and should enable us to take updated libisc snapshots more often.\n* Updated build and flock-build scripts.  flock-build --one is a way\n  to perform a flock-build compatible solitary build, handy for a repo\n  clone's first build on a machine with autoconf, automake, etc.\n* Compiling ntp_parser.y using BSD make correctly places ntp_parser.h\n  in the top-level ntpd directory instead of A.*/ntpd.\n* bootstrap script updated to remove potentially stale .deps dirs.\n* Remove unneeded Makefile.am files from the lib/isc/include tree.\n(4.2.5p221) 2009/09/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1316] segfault if refclock_nmea can't open file.\n* [Bug 1317] Distribute cvo.sh.\n(4.2.5p220) 2009/09/25 Released by Harlan Stenn <stenn@ntp.org>\n* Rearrange libisc code to match the upstream layout in BIND.  This is\n  step one of two, changing the layout but keeping our existing libisc.\n(4.2.5p219) 2009/09/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1315] \"interface ignore 0.0.0.0\" is ignored.\n* add implicit \"nic ignore all\" rule before any rules from ntp.conf, so\n  \"nic listen eth0\" alone means the same as \"-I eth0\".\n* add wildcard match class for interface/nic rules.\n* fix mistaken carryover of prefixlen from one rule to the next.\n* Ensure IPv6 localhost address ::1 is included in libisc's Windows IPv6\n  address enumeration, allowing ntpq and ntpdc's hardcoding to 127.0.0.1 \n  on Windows to end.\n(4.2.5p218) 2009/09/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1314] saveconfig emits -4 and -6 on when not given.\n* correct parsing and processing of setvar directive.\n* highlight location of ntpq :config syntax errors with ^.\n* clarify (former) NO_ARG, SINGLE_ARG, MULTIPLE_ARG renaming to\n  FOLLBY_TOKEN, FOLLBY_STRING, FOLLBY_STRINGS_TO_EOC.\n* parser, saveconfig cleanup to store T_ identifiers in syntax tree.\n(4.2.5p217) 2009/09/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1300] reject remote configuration of dangerous items.\n(4.2.5p216) 2009/09/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1312] ntpq/ntpdc MD5 passwords truncated to 8 chars on Suns.\n* CID 10 missing free(up); in refclock_palisade.c error return, again.\n* CID 83 added assertion to demonstrate config_nic_rules() does not\n  call strchr(NULL, '/').\n(4.2.5p215) 2009/09/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1292] Workaround last VC6 unsigned __int64 kink.\n(4.2.5p214) 2009/09/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1303] remove top-level \"autokey\" directive.\n* use \"nic listen 192.168.0.0/16\" instead of\n  \"nic listen 192.168.0.0 prefixlen 16\".\n(4.2.5p213) 2009/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1310] fix Thunderbolt mode in refclock_palisade.c\n(4.2.5p212) 2009/09/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 983] add interface [listen | ignore | drop] ... directive.\n* [Bug 1243] MD5auth_setkey zero-fills key from first zero octet.\n* [Bug 1295] leftover fix, do not crash on exit in free_config_trap()\n  when \"trap 1.2.3.4\" is used without any further options.\n* [Bug 1311] 4.2.5p211 doesn't build in no-debug mode.\n* document interface (alias nic) and unpeer.\n* Correct syntax error line & column numbers.\n* CID 79: kod_init_kod_db() fails to fclose(db_s) in two error paths.\n* CID 80: attempt to quiet Coverity false positive re: leaking \"reason\"\n  in main().\n* Documentation updates from Dave Mills.\n* CID 81: savedconfig leaked in save_config().\n* Make the code agree with the spec and the book (Dave Mills).\n(4.2.5p211) 2009/09/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 663] respect ntpq -c and -p order on command line.\n* [Bug 1292] more VC6 unsigned __int64 workarounds.\n* [Bug 1296] Added Support for Trimble Acutime Gold.\n(4.2.5p210) 2009/09/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1294] Use OPENSSL_INC and OPENSSL_LIB macros for Windows\n  and remove unnecessary reference to applink.c for Windows\n* [Bug 1295] trap directive options are not optional.\n* [Bug 1297] yylex() must always set yylval before returning.\n(4.2.5p209) 2009/09/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1290] Fix to use GETTIMEOFDAY macro\n* [Bug 1289] Update project files for VC6, VS2003, VS2005, VS 2008\n(4.2.5p208) 2009/08/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1293] make configuration dumper ready for release, specifically:\n* rename ntpq dumpcfg command to \"saveconfig\".\n* require authentication for saveconfig.\n* \"restrict ... nomodify\" prevents saveconfig and :config.\n* \"saveconfig .\" shorthand to save to startup configuration file.\n* support strftime() substitution in saveconfig arg to timestamp\n  the output filename, for example \"saveconfig %Y%m%d-%H%M%S.conf\".\n* display saveconfig response message from ntpd in ntpq.\n* save output filename in \"savedconfig\" variable, fetched with ntpq -c\n  \"rv 0 savedconfig\".\n* document saveconfig in html/ntpq.html.\n* add ./configure --disable-saveconfig to build a smaller ntpd.\n* log saveconfig failures and successes to syslog.\n(4.2.5p207) 2009/08/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1292] Minor Windows source tweaks for VC6-era SDK headers.\n(4.2.5p206) 2009/08/26 Released by Harlan Stenn <stenn@ntp.org>\n* accopt.html typo fixes from Dave Mills.\n* [Bug 1283] default to remembering KoD in sntp.\n* clean up numerous sntp/kod_management.c bugs.\n* use all addresses resolved from each DNS name in sntp.\n(4.2.5p205) 2009/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* accopt.html typo fixes from Dave Mills.\n* [Bug 1285] Log ntpq :config/config-from-file events.\n* [Bug 1286] dumpcfg omits statsdir, mangles filegen.\n(4.2.5p204) 2009/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1284] infinite loop in ntpd dumping more than one trustedkey\n(4.2.5p203) 2009/08/16 Released by Harlan Stenn <stenn@ntp.org>\n* Add ntpq -c dumpcfg, Google Summer of Code project of Max Kuehn\n(4.2.5p202) 2009/08/14 Released by Harlan Stenn <stenn@ntp.org>\n* install the binary and man page for sntp.\n(4.2.5p201) 2009/08/13 Released by Harlan Stenn <stenn@ntp.org>\n* sntp: out with the old, in with the new.\n(4.2.5p200) 2009/08/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1281] Build ntpd on Windows without big SDK download, burn,\n  and install by checking in essentially unchanging messages.mc build\n  products to avoid requiring mc.exe, which is not included with VC++\n  2008 EE.\n(4.2.5p199) 2009/08/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1279] Cleanup for warnings from Veracode static analysis.\n(4.2.5p198) 2009/08/03 Released by Harlan Stenn <stenn@ntp.org>\n* Upgrade to autogen-5.9.9-pre5.\n(4.2.5p197) 2009/07/30 Released by Harlan Stenn <stenn@ntp.org>\n* The build script now has . at the end of PATH for config.guess.\n(4.2.5p196) 2009/07/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1272] gsoc_sntp IPv6 build problems under HP-UX 10.\n* [Bug 1273] CID 10: Palisade leaks unit struct in error path.\n* [Bug 1274] CID 67: ensure resolve_hosts() output count and pointers\n  are consistent.\n* [Bug 1275] CID 45: CID 46: old sntp uses uninitialized guesses[0],\n  precs[0].\n* [Bug 1276] CID 52: crypto_xmit() may call crypto_alice[23]()\n  with NULL peer.\n(4.2.5p195) 2009/07/27 Released by Harlan Stenn <stenn@ntp.org>\n* cvo.sh: Add support for CentOS, Fedora, Slackware, SuSE, and QNX.\n(4.2.5p194) 2009/07/26 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Use scripts/cvo.sh in the build script to get better subdir names.\n(4.2.5p193) 2009/07/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1261] CID 34: simulate_server() rbuf.msg_flags uninitialized.\n* [Bug 1262] CID 35: xpkt.mac uninitialized in simulate_server().\n* [Bug 1263] CID 37: CID 38: CID 40: CID 43: multiple refclocks \n  uninitialized tm_zone (arc, chronolog, dumbclock, pcf).\n* [Bug 1264] CID 64: gsoc_sntp on_wire() frees wrong ptr receiving KoD.\n* [Bug 1265] CID 65: CID 66: gsoc_sntp on_wire() leaks x_pkt, r_pkt.\n* [Bug 1266] CID 39: datum_pts_start() uninitialized arg.c_ospeed.\n* [Bug 1267] CID 44: old sntp handle_saving() writes stack garbage to\n  file when clearing.\n* [Bug 1268] CID 63: resolve_hosts() leaks error message buffer.\n* [Bug 1269] CID 74: use assertion to ensure move_fd() does not return\n  negative descriptors.\n* [Bug 1270] CID 70: gsoc_sntp recv_bcst_data mdevadr.ipv6mr_interface\n  uninitialized.\n(4.2.5p192) 2009/07/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 965] CID 42: ss_family uninitialized.\n* [Bug 1250] CID 53: kod_init_kod_db() overruns kod_db malloc'd buffer.\n* [Bug 1251] CID 68: search_entry() mishandles dst argument.\n* [Bug 1252] CID 32: Quiet Coverity warning with assertion.\n* [Bug 1253] CID 50: gsoc_sntp/crypto.c auth_init() always returns a \n  list with one entry.\n* [Bug 1254] CID 56: tv_to_str() leaks a struct tm each call.\n* [Bug 1255] CID 55: pkt_output() leaks a copy of each packet.\n* [Bug 1256] CID 51: Coverity doesn't recognize our assertion macros as\n  terminal.\n* [Bug 1257] CID 57: gsoc_sntp auth_init() fails to fclose(keyfile).\n* [Bug 1258] CID 54: gsoc_sntp resolve_hosts() needs simplification.\n* [Bug 1259] CID 59: gsoc_sntp recv_bcast_data() fails to free(rdata)\n  on error paths.\n* [Bug 1260] CID 60: gsoc_sntp recvpkt() fails to free(rdata).\n* Updated to AutoGen-5.9.9pre2.\n(4.2.5p191) 2009/07/21 Released by Harlan Stenn <stenn@ntp.org>\n* Updated to AutoGen-5.9.9pre1.\n(4.2.5p190) 2009/07/20 Released by Harlan Stenn <stenn@ntp.org>\n* Updated to AutoGen-5.9.8.\n* [Bug 1248] RES_MSSNTP typo in ntp_proto.c.\n* [Bug 1246] use a common template for singly-linked lists, convert most\n  doubly-linked lists to singly-linked.\n* Log warning about signd blocking when restrict mssntp used.\n(4.2.5p189) 2009/07/16 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation cleanup from Dave Mills.\n(4.2.5p188) 2009/07/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1245] Broken xmt time sent in fast_xmit() of 4.2.5p187.\n(4.2.5p187) 2009/07/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1042] multicast listeners IPv4+6 ignore new interfaces.\n* [Bug 1237] Windows serial code treat CR and LF both as line\n  terminators.\n* [Bug 1238] use fudge time2 for serial timecode offset in NMEA driver.\n* [Bug 1242] Remove --enable-wintime, symmetric workaround is now\n  always enabled.\n* [Bug 1244] NTP_INSIST(fd != maxactivefd) failure in intres child\n* Added restrict keyword \"mssntp\" for Samba4 DC operation, by Dave Mills.\n(4.2.5p186) 2009/07/08 Released by Harlan Stenn <stenn@ntp.org>\n* ntp_proto.c cleanup from Dave Mills.\n(4.2.5p185) 2009/07/01 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1234] convert NMEA driver to use common PPSAPI code.\n* timepps-Solaris.h pps_handle_t changed from pointer to scalar\n* Spectracom refclock added to Windows port of ntpd\n* [Bug 1236] Declaration order fixed.\n* Bracket private ONCORE debug statements with #if 0 rather than #ifdef\n  DEBUG\n* Delete ONCORE debug statement that is now handled elsewhere.\n(4.2.5p184) 2009/06/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1233] atom refclock fudge time1 sign flipped in 4.2.5p164.\n(4.2.5p183) 2009/06/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1196] setsockopt(SO_EXCLUSIVEADDRUSE) can fail on Windows 2000\n  and earlier with WSAINVAL, do not log a complaint in that case.\n* [Bug 1210] ONCORE driver terminates ntpd without logging a reason.\n* [Bug 1218] Correct comment in refclock_oncore on /etc/ntp.oncore*\n  configuration file search order.\n* Change ONCORE driver to log using msyslog as well as to any\n  clockstats file.\n* [Bug 1231] ntpsnmpd build fails after sockaddr union changes.\n(4.2.5p182) 2009/06/18 Released by Harlan Stenn <stenn@ntp.org>\n* Add missing header dependencies to the ntpdc layout verification.\n* prefer.html updates from Dave Mills.\n* [Bug 1205] Add ntpd --usepcc and --pccfreq options on Windows\n* [Bug 1215] unpeer by association ID\n* [Bug 1225] Broadcast address miscalculated on Windows 4.2.5p180\n* [Bug 1229] autokey segfaults in cert_install().\n* Use a union for structs sockaddr, sockaddr_storage, sockaddr_in, and\n  sockaddr_in6 to remove casts and enable type checking.  Collapse\n  some previously separate IPv4/IPv6 paths into a single codepath.\n(4.2.5p181) 2009/06/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1206] Required compiler changes for Windows\n* [Bug 1084] PPSAPI for ntpd on Windows with DLL backends\n* [Bug 1204] Unix-style refclock device paths on Windows\n* [Bug 1205] partial fix, disable RDTSC use by default on Windows\n* [Bug 1208] decodenetnum() buffer overrun on [ with no ]\n* [Bug 1211] keysdir free()d twice #ifdef DEBUG\n* Enable ONCORE, ARCRON refclocks on Windows (untested)\n(4.2.5p180) 2009/05/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1200] Enable IPv6 in Windows port\n* Lose FLAG_FIXPOLL, from Dave Mills.\n(4.2.5p179) 2009/05/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1041] xmt -> aorg timestamp cleanup from Dave Mills,\n  reported by Dave Hart.\n* [Bug 1193] Compile error: conflicting types for emalloc.\n* [Bug 1196] VC6 winsock2.h does not define SO_EXCLUSIVEADDRUSE.\n* Leap/expire cleanup from Dave Mills.\n(4.2.5p178) 2009/05/21 Released by Harlan Stenn <stenn@ntp.org>\n* Provide erealloc() and estrdup(), a la emalloc().\n* Improve ntp.conf's parser error messages.\n* [Bug 320] \"restrict default ignore\" does not affect IPv6.\n* [Bug 1192] \"restrict -6 ...\" reports a syntax error.\n(4.2.5p177) 2009/05/18 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7\n* [Bug 1174] nmea_shutdown assumes that nmea has a unit assigned\n* [Bug 1190] NMEA refclock fudge flag4 1 obscures position in timecode\n* Update NMEA refclock documentation in html/drivers/driver20.html\n(4.2.5p176) 2009/05/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1154] mDNS registration should be done later, repeatedly and only\n  if asked for. (second try for fix)\n(4.2.5p175) 2009/05/12 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC7\n* [Bug 1180] ntpd won't start with more than ~1000 interfaces\n* [Bug 1182] Documentation typos and missing bits.\n* [Bug 1183] COM port support should extend past COM3\n* [Bug 1184] ntpd is deaf when restricted to second IP on the same net\n* Clean up configure.ac NTP_CACHEVERSION interface, display cache\n  version when clearing.  Fixes a regression.\n(4.2.5p174) 2009/05/09 Released by Harlan Stenn <stenn@ntp.org>\n* Stale leapsecond file fixes from Dave Mills.\n(4.2.5p173) 2009/05/08 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC6\n(4.2.5p172) 2009/05/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1175] Instability in PLL daemon mode.\n* [Bug 1176] refclock_parse.c does not compile without PPSAPI.\n(4.2.5p171) 2009/05/04 Released by Harlan Stenn <stenn@ntp.org>\n* Autokey documentation cleanup from Dave Mills.\n* [Bug 1171] line editing libs found without headers (Solaris 11)\n* [Bug 1173] NMEA refclock fails with Solaris PPSAPI\n* Fix problem linking msntp on Solaris when sntp subdir is configured\n  before parent caused by different gethostent library search order.\n* Do not clear config.cache when it is  empty.\n(4.2.5p170) 2009/05/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1152] adjust PARSE to new refclock_pps logic\n* Include 4.2.4p7-RC5\n* loopfilter FLL/PLL crossover cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* ntp-keygen cleanup from Dave Mills.\n* crypto API cleanup from Dave Mills.\n* Add NTP_CACHEVERSION mechanism to ignore incompatible config.cache\n* Enable gcc -Wstrict-overflow for gsoc_sntp as well\n(4.2.5p169) 2009/04/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1171] Note that we never look for -lreadline by default.\n* [Bug 1090] Fix bogus leap seconds in refclock_hpgps.\n(4.2.5p168) 2009/04/29 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC4\n* [Bug 1169] quiet compiler warnings\n* Re-enable gcc -Wstrict-prototypes when not building with OpenSSL\n* Enable gcc -Wstrict-overflow\n* ntpq/ntpdc emit newline after accepting password on Windows\n* Updates from Dave Mills:\n* ntp-keygen.c: Updates.\n* Fix the error return and syslog function ID in refclock_{param,ppsapi}.\n* Make sure syspoll is within the peer's minpoll/maxpoll bounds.\n* ntp_crypto.c: Use sign_siglen, not len. sign key filename cleanup.\n* Bump NTP_MAXEXTEN from 1024 to 2048, update values for some field lengths.\n* m4/ntp_lineeditlibs.m4: fix warnings from newer Autoconf\n* [Bug 1166] Remove truncation of position (blanking) code in refclock_nmea.c\n(4.2.5p167) 2009/04/26 Released by Harlan Stenn <stenn@ntp.org>\n* Crypto cleanup from Dave Mills.\n(4.2.5p166) 2009/04/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1165] Clean up small memory leaks in the  config file parser\n* Correct logconfig keyword declaration to MULTIPLE_ARG\n* Enable filename and line number leak reporting on Windows when built\n  DEBUG for all the typical C runtime allocators such as calloc,\n  malloc, and strdup.  Previously only emalloc calls were covered.\n* Add DEBUG-only code to free dynamically allocated memory that would\n  otherwise remain allocated at ntpd exit, to allow less forgivable\n  leaks to stand out in leaks reported after exit.\n* Ensure termination of strings in ports/winnt/libisc/isc_strerror.c\n  and quiet compiler warnings.\n* [Bug 1057] ntpdc unconfig failure\n* [Bug 1161] unpeer AKA unconfig command for ntpq :config\n* PPS and crypto cleanup in ntp_proto.c from Dave Mills.\n(4.2.5p165) 2009/04/23 Released by Harlan Stenn <stenn@ntp.org>\n* WWVB refclock cleanup from Dave Mills.\n* Code cleanup: requested_key -> request_key.\n* [Bug 833] ignore whitespace at end of remote configuration lines\n* [Bug 1033] ntpdc/ntpq crash prompting for keyid on Windows\n* [Bug 1028] Support for W32Time authentication via Samba.\n* quiet ntp_parser.c malloc redeclaration warning\n* Mitigation and PPS/PPSAPI cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* timepps-Solaris.h patches from Dave Hart.\n(4.2.5p164) 2009/04/22 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC3\n* PPS/PPSAPI cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1125] C runtime per-thread initialization on Windows\n* [Bug 1152] temporarily disable refclock_parse, refclock_true until\n  maintainers can repair build break from pps_sample()\n* [Bug 1153] refclock_nmea should not mix UTC with GPS time\n* [Bug 1159] ntpq overlap diagnostic message test buggy\n(4.2.5p163) 2009/04/10 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.5p162) 2009/04/09 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Mitigation and PPS cleanup from Dave Mills.\n* Include 4.2.4p7-RC2\n* [Bug 216] New interpolation scheme for Windows eliminates 1ms jitter\n* remove a bunch of #ifdef SYS_WINNT from portable code\n* 64-bit time_t cleanup for building on newer Windows compilers\n* Only set CMOS clock during ntpd exit on Windows if the computer is\n  shutting down or restarting.\n* [Bug 1148] NMEA reference clock improvements\n* remove deleted gsoc_sntp/utilities.o from repository so that .o build\n  products can be cleaned up without corrupting the repository.\n(4.2.5p161) 2009/03/31 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.5p160) 2009/03/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1141] refclock_report missing braces cause spurious \"peer event:\n  clock clk_unspec\" log entries\n* Include 4.2.4p7-RC1\n(4.2.5p159) 2009/03/28 Released by Harlan Stenn <stenn@ntp.org>\n* \"bias\" changes from Dave Mills.\n(4.2.5p158) 2009/01/30 Released by Harlan Stenn <stenn@ntp.org>\n* Fix [CID 72], a typo introduced at the latest fix to prettydate.c.\n(4.2.5p157) 2009/01/26 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup/fixes for ntp_proto.c and ntp_crypto.c from Dave Mills.\n(4.2.5p156) 2009/01/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1118] Fixed sign extension for 32 bit time_t in caljulian() and prettydate().\n  Fixed some compiler warnings about missing prototypes.\n  Fixed some other simple compiler warnings.\n* [Bug 1119] [CID 52] Avoid a possible null-dereference in ntp_crypto.c.\n* [Bug 1120] [CID 51] INSIST that peer is non-null before we dereference it.\n* [Bug 1121] [CID 47] double fclose() in ntp-keygen.c.\n(4.2.5p155) 2009/01/18 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* CHU frequency updates.\n* Design assertion fixes for ntp_crypto.c from Dave Mills.\n(4.2.5p154) 2009/01/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 992] support interface event change on Linux from\n  Miroslav Lichvar.\n(4.2.5p153) 2009/01/09 Released by Harlan Stenn <stenn@ntp.org>\n* Renamed gsoc_sntp/:fetch-stubs to gsoc_sntp/fetch-stubs to avoid\n  file name problems under Windows.\n  Removed German umlaut from log msg for 4.2.5p142.\n(4.2.5p152) 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p6: 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.5p151) 2008/12/23 Released by Harlan Stenn <stenn@ntp.org>\n* Stats file logging cleanup from Dave Mills.\n(4.2.5p150) 2008/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1099] Fixed wrong behaviour in sntp's crypto.c.\n* [Bug 1103] Fix 64-bit issues in the new calendar code.\n(4.2.5p149) 2008/12/05 Released by Harlan Stenn <stenn@ntp.org>\n* Fixed mismatches in data types and OID definitions in ntpSnmpSubAgent.c\n* added a premliminary MIB file to ntpsnmpd (ntpv4-mib.mib)\n(4.2.5p148) 2008/12/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1070] Fix use of ntpq_parsestring() in ntpsnmpd.\n(4.2.5p147) 2008/11/27 Released by Harlan Stenn <stenn@ntp.org>\n* Update gsoc_sntp's GCC warning code.\n(4.2.5p146) 2008/11/26 Released by Harlan Stenn <stenn@ntp.org>\n* Update Solaris CFLAGS for gsoc_sntp.\n(4.2.5p145) 2008/11/20 Released by Harlan Stenn <stenn@ntp.org>\n* Deal with time.h for sntp under linux.\n* Provide rpl_malloc() for sntp for systems that need it.\n* Handle ss_len and socklen type for sntp.\n* Fixes to the sntp configure.ac script.\n* Provide INET6_ADDRSTRLEN if it is missing.\n* [Bug 1095] overflow in caljulian.c.\n(4.2.5p144) 2008/11/19 Released by Harlan Stenn <stenn@ntp.org>\n* Use int32, not int32_t.\n* Avoid the sched*() functions under OSF - link problems.\n(4.2.5p143) 2008/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* sntp cleanup and fixes.\n(4.2.5p142) 2008/11/16 Released by Harlan Stenn <stenn@ntp.org>\n* Imported GSoC SNTP code from Johannes Maximilian Kuehn.\n(4.2.5p141) 2008/11/13 Released by Harlan Stenn <stenn@ntp.org>\n* New caltontp.c and calyearstart.c from Juergen Perlinger.\n(4.2.5p140) 2008/11/12 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup lint from the ntp_scanner files.\n* [Bug 1011] gmtime() returns NULL on windows where it would not under Unix.\n* Updated caljulian.c and prettydate.c from Juergen Perlinger.\n(4.2.5p139) 2008/11/11 Released by Harlan Stenn <stenn@ntp.org>\n* Typo fix to driver20.html.\n(4.2.5p138) 2008/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 474] --disable-ipv6 is broken.\n* IPv6 interfaces were being looked for twice.\n* SHM driver grabs more samples, add clockstats\n* decode.html and driver20.html updates from Dave Mills.\n(4.2.5p137) 2008/11/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1069] #undef netsnmp's PACKAGE_* macros.\n* [Bug 1068] Older versions of netsnmp do not have netsnmp_daemonize().\n(4.2.5p136) 2008/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1078] statsdir configuration parsing is broken.\n(4.2.5p135) 2008/09/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1072] clock_update should not allow updates older than sys_epoch.\n(4.2.5p134) 2008/09/17 Released by Harlan Stenn <stenn@ntp.org>\n* Clean up build process for ntpsnmpd.\n(4.2.5p133) 2008/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* Add options processing to ntpsnmpd.\n* [Bug 1062] Check net-snmp headers before deciding to build ntpsnmpd.\n* Clean up the libntpq.a build.\n* Regenerate ntp_parser.[ch] from ntp_parser.y\n(4.2.5p132) 2008/09/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1067] Multicast DNS service registration must come after the fork\n  on Solaris.\n* [Bug 1066] Error messages should log as errors.\n(4.2.5p131) 2008/09/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1065] Re-enable support for the timingstats file.\n(4.2.5p130) 2008/09/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1064] Implement --with-net-snmp-config=progname\n* [Bug 1063] ntpSnmpSubagentObject.h is missing from the distribution.\n(4.2.5p129) 2008/09/11 Released by Harlan Stenn <stenn@ntp.org>\n* Quiet some libntpq-related warnings.\n(4.2.5p128) 2008/09/08 Released by Harlan Stenn <stenn@ntp.org>\n* Import Heiko Gerstung's GSoC2008 NTP MIB daemon.\n(4.2.5p127) 2008/09/01 Released by Harlan Stenn <stenn@ntp.org>\n* Regenerate ntpd/ntp_parser.c\n(4.2.5p126) 2008/08/31 Released by Harlan Stenn <stenn@ntp.org>\n* Stop libtool-1.5 from looking for C++ or Fortran.\n* [BUG 610] Documentation update for NMEA reference clock driver.\n* [Bug 828] Fix IPv4/IPv6 address parsing.\n* Changes from Dave Mills:\n  Documentation updates.\n  Fix a corner case where a frequency update was reported but not set.\n  When LEAP_NOTINSYNC->LEAP_NOWARNING, call crypto_update() if we have\n  crypto_flags.\n(4.2.5p125) 2008/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1052] Add linuxPPS support to ONCORE driver.\n(4.2.5p124) 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Include 4.2.4p5: 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 861] leap info was not being transmitted.\n* [Bug 1046] refnumtoa.c is using the wrong header file.\n* [Bug 1047] enable/disable options processing fix.\n* header file cleanup.\n* [Bug 1037] buffer in subroutine was 1 byte short.\n* configure.ac: cleanup, add option for wintime, and lay the groundwork\n  for the changes needed for bug 1028.\n* Fixes from Dave Mills: 'bias' and 'interleave' work.  Separate\n  phase and frequency discipline (for long poll intervals).  Update\n  TAI function to match current leapsecond processing.\n* Documentation updates from Dave Mills.\n* [Bug 1037] Use all 16 of the MD5 passwords generated by ntp-keygen.\n* Fixed the incorrect edge parameter being passed to time_pps_kcbind in\n  NMEA refclock driver.\n* [Bug 399] NMEA refclock driver does not honor time1 offset if flag3 set.\n* [Bug 985] Modifications to NMEA reference clock driver to support Accord\n  GPS Clock.\n* poll time updates from Dave Mills.\n* local refclock documentation updates from Dave Mills.\n* [Bug 1022] Fix compilation problems with yesterday's commit.\n* Updates and cleanup from Dave Mills:\n  I've now spent eleven months of a sabbatical year - 7 days a week, 6-10\n  hours most days - working on NTP. I have carefully reviewed every major\n  algorithm, examined its original design and evolution from that design.\n  I've trimmed off dead code and briar patches and did zillions of tests\n  contrived to expose evil vulnerabilities. The development article is in\n  rather good shape and should be ready for prime time.\n\n  1. The protostats statistics files have been very useful in exposing\n  little twitches and turns when something hiccups, like a broken PPS\n  signal. Most of what used to be syslog messages are now repackaged as\n  protostats messages with optional syslog as well. These can also be sent\n  as traps which might be handy to tiggle a beeper or celltext. These, the\n  sysstats files and cryptostats files reveal the ambient health of a busy\n  server, monitor traffic and error counts and spot crypto attacks.\n\n  2. Close inspection of the clock discipline behavior at long poll\n  intervals (36 h) showed it not doing as well as it should. I redesigned\n  the FLL loop to improve nominal accuracy from  several tens of\n  milliseconds to something less than ten milliseconds.\n\n  3. Autokey (again). The enhanced error checking was becoming a major\n  pain. I found a way to toss out gobs of ugly fat code and replace the\n  function with a much simpler and more comprehensive scheme. It resists\n  bait-and-switch attacks and quickly detect cases when the protocol is\n  not correctly synchronized.\n\n  4. The interface code for the kernel PPS signal was not in sync with the\n  kernel code itself. Some error checks were duplicated and some\n  ineffective. I found none of the PPS-capable drivers, including the atom\n  driver, do anything when the prefer peer fails; the kernel PPS signal\n  remains in control. The atom driver now disables the kernel PPS when the\n  prefer peer comes bum. This is important when the prefer peer is not a\n  reference clock but a remote NTP server.\n\n  5. The flake restrict bit turned out to be really interesting,\n  especially with symmtric modes and of those especially those using\n  Autokey. Small changes in the recovery procedures when packets are lost\n  now avoid almost all scenarios which previously required protocol resets.\n\n  6. I've always been a little uncomfortable when using the clock filter\n  with long poll intervals because the samples become less and less\n  correlated as the sample age exceeds the Allan intercept. Various\n  schemes have been used over the years to cope with this fact. The latest\n  one and the one that works the best is to use a modified sort metric\n  where the delay is used when the age of the sample is less than the\n  intercept and the sum of delay and dispersion above that. The net result\n  is that, at small poll intervals the algorithm operates as a minimum\n  filter, while at larger poll intervals it morphs to FIFO. Left\n  unmodified, a sample could be used when twelve days old. This along with\n  the FLL modifications has made a dramatic improvement at large poll\n  intervals.\n\n- [Backward Incompatible] The 'state' variable is no longer reported or\n  available via ntpq output.  The following system status bit names\n  have been changed:\n  - sync_alarm -> leap_alarm\n  - sync_atomic -> sync_pps\n  - sync_lf_clock -> sync_lf_radio\n  - sync_hf_clock -> sync_hf_radio\n  - sync_uhf_clock -> sync_uhf_radio\n  - sync_local_proto -> sync_local\n  - sync_udp/time -> sync_other\n  Other names have been changed as well.  See the change history for\n  libntp/statestr.c for more details.\n  Other backward-incompatible changes in ntpq include:\n  - assID -> associd\n  - rootdispersion -> rootdisp\n  - pkt_head -> pkt_neader\n  See the change history for other details.\n\n* Updates and cleanup from Dave Mills.\n* [Bug 995] Remove spurious ; from ntp-keygen.c.\n* More cleanup and changes from Dave Mills.\n* [Bug 980] Direct help to stdout.\n---\n(4.2.4p8) 2009/12/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1331] DoS with mode 7 packets - CVE-2009-3563.\n\n---\n(4.2.4p7) 2009/05/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1151] Remote exploit if autokey is enabled - CVE-2009-1252.\n* [Bug 1187] Update the copyright date.\n* [Bug 1191] ntpd fails on Win2000 - \"Address already in use\" after fix\n  for [Sec 1149].\n\n---\n(4.2.4p7-RC7) 2009/05/12 Released by Harlan Stenn <stenn@ntp.org>\n\n* ntp.isc.org -> ntp.org cleanup.\n* [Bug 1178] Use prior FORCE_DNSRETRY behavior as needed at runtime,\n  add configure --enable-ignore-dns-errors to be even more stubborn\n\n---\n(4.2.4p7-RC6) 2009/05/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 784] Make --enable-linuxcaps the default when available\n* [Bug 1179] error messages for -u/--user and -i lacking droproot\n* Updated JJY reference clock driver from Takao Abe\n* [Bug 1071] Log a message and exit before trying to use FD_SET with a\n  descriptor larger than FD_SETSIZE, which will corrupt memory\n* On corruption of the iface list head in add_interface, log and exit\n\n---\n(4.2.4p7-RC5) 2009/05/02 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1172] 4.2.4p7-RC{3,4} fail to build on linux.\n* flock-build script unportable 'set -m' use removed\n\n---\n(4.2.4p7-RC4) 2009/04/29 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1167] use gcc -Winit-self only if it is understood\n\n---\n(4.2.4p7-RC3) 2009/04/22 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 787] Bug fixes for 64-bit time_t on Windows\n* [Bug 813] Conditional naming of Event\n* [Bug 1147] System errors should be logged to msyslog()\n* [Bug 1155] Fix compile problem on Windows with VS2005\n* [Bug 1156] lock_thread_to_processor() should be declared in header\n* [Bug 1157] quiet OpenSSL warnings, clean up configure.ac\n* [Bug 1158] support for aix6.1\n* [Bug 1160] MacOS X is like BSD regarding F_SETOWN\n\n---\n(4.2.4p7-RC2) 2009/04/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1144] limited buffer overflow in ntpq.  CVE-2009-0159\n* [Sec 1149] use SO_EXCLUSIVEADDRUSE on Windows\n\n---\n(4.2.4p7-RC1) 2009/03/30 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1131] UDP sockets should not use SIGPOLL on Solaris.\n* build system email address cleanup\n* [Bug 774] parsesolaris.c does not compile under the new Solaris\n* [Bug 873] Windows serial refclock proper TTY line discipline emulation\n* [Bug 1014] Enable building with VC9 (in Visual Studio 2008,\n  Visual C++ 2008, or SDK)\n* [Bug 1117] Deferred interface binding under Windows works only correctly\n  if FORCE_DNSRETRY is defined\n* [BUG 1124] Lock QueryPerformanceCounter() client threads to same CPU\n* DPRINTF macro made safer, always evaluates to a statement and will not\n  misassociate an else which follows the macro.\n\n---\n(4.2.4p6) 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1113] Fixed build errors with recent versions of openSSL. \n* [Sec 1111] Fix incorrect check of EVP_VerifyFinal()'s return value.\n* Update the copyright year.\n\n---\n(4.2.4p5) 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n\n* [BUG 1051] Month off by one in leap second message written to clockstats\n  file fixed.\n* [Bug 450] Windows only: Under original Windows NT we must not discard the\n  wildcard socket to workaround a bug in NT's getsockname().\n* [Bug 1038] Built-in getpass() function also prompts for password if\n  not built with DEBUG.\n* [Bug 841] Obsolete the \"dynamic\" keyword and make deferred binding\n  to local interfaces the default.\n  Emit a warning if that keyword is used for configuration.\n* [Bug 959] Refclock on Windows not properly releasing recvbuffs.\n* [Bug 993] Fix memory leak when fetching system messages.\n* much cleanup, fixes, and changes from Dave Mills.\n* ntp_control.c: LEAPTAB is a filestamp, not an unsigned.  From Dave Mills.\n* ntp_config.c: ntp_minpoll fixes from Dave Mills.\n* ntp-keygen updates from Dave Mills.\n* refresh epoch, throttle, and leap cleanup from Dave Mills.\n* Documentation cleanup from Dave Mills.\n* [Bug 918] Only use a native md5.h if MD5Init() is available.\n* [Bug 979] Provide ntptimeval if it is not otherwise present.\n* [Bug 634] Re-instantiate syslog() and logfiles after the daemon fork.\n* [Bug 952] Use md5 code with a friendlier license.\n* [Bug 977] Fix mismatching #ifdefs for builds without IPv6.\n* [Bug 830] Fix the checking order of the interface options.\n* Clean up the logfile/syslog setup.\n* [Bug 970] Lose obsolete -g flag to ntp-keygen.\n* The -e flag to ntp-keygen can write GQ keys now, too.\n* ntp_proto.c: sys_survivors and hpoll cleanup from Dave Mills.\n* ntp_loopfilter.c: sys_poll cleanup from Dave Mills.\n* refclock_wwv.c: maximum-likelihood digit and DSYNC fixes from Dave Mills.\n* [Bug 967] preemptable associations are lost forever on a step.\n* ntp_config.c: [CID 48] missing \"else\" clause.\n* [Bug 833] ntpq config keyword is quote-mark unfriendly.\n* Rename the ntpq \"config\" keyword to \":config\".\n* Dave Mills shifted some orphan processing.\n* Fix typos in the [Bug 963] patch.\n* bootstrap: squawk if genver fails.  Use -f with cp in case Dave does a chown.\n* Remove obsolete simulator command-line options.\n* ntp_request.c: [CID 36] zero sin_zero.\n* [Bug 963] get_systime() is too noisy.\n* [Bug 960] spurious syslog:crypto_setup:spurious crypto command\n* [Bug 964] Change *-*-linux* to *-*-*linux* to allow for uclinux.\n* Changes from Dave Mills:\n  - ntp_util.c: cleanup.\n  - ntp_timer.c: watch the non-burst packet rate.\n  - ntp_request.c: cleanup.\n  - ntp_restrict.c: RES_LIMITED cleanup.\n  - ntp_proto.c: RES_LIMITED, rate bucktes, counters, overall cleanup.\n  - ntp_peer.c: disallow peer_unconfig().\n  - ntp_monitor.c: RES_LIMITED cleanup.\n  - ntp_loopfilter.c: poll interval cleanup.\n  - ntp_crypto.c: volley -> retry.  Cleanup TAI leap message.\n  - ntp_config: average and minimum are ^2 values.\n  - ntpdc: unknownversion is really \"declined\", not \"bad version\".\n  - Packet retry cleanup.\n* [Bug 961] refclock_tpro.c:tpro_poll() calls refclock_receive() twice.\n* [Bug 957] Windows only: Let command line parameters from the Windows SCM GUI\n  override the standard parameters from the ImagePath registry key.\n* Added HAVE_INT32_T to the Windows config.h to avoid duplicate definitions.\n* Work around a VPATH difference in FreeBSD's 'make' command.\n* Update bugreport URL.\n* Update -I documentation.\n* [Bug 713] Fix bug reporting information.\n* A bug in the application of the negative-sawtooth for 12 channel receivers. \n* The removal of unneeded startup code used for the original LinuxPPS, it now\n  conforms to the PPSAPI and does not need special code.  \n* ntp-keygen.c: Coverity fixes [CID 33,47].\n* Volley cleanup from Dave Mills.\n* Fuzz cleanup from Dave Mills.\n* [Bug 861] Leap second cleanups from Dave Mills.\n* ntpsim.c: add missing protypes and fix [CID 34], a nit.\n* Upgraded bison at UDel.\n* Update br-flock and flock-build machine lists.\n* [Bug 752] QoS: add parse/config handling code. \n* Fix the #include order in tickadj.c for picky machines.\n* [Bug 752] QoS: On some systems, netinet/ip.h needs netinet/ip_systm.h.\n* [Bug 752] Update the QoS tagging (code only - configuration to follow).\n* Orphan mode and other protocol cleanup from Dave Mills.\n* Documentation cleanup from Dave Mills.\n* [Bug 940] ntp-keygen uses -v.  Disallow it as a shortcut for --version.\n* more cleanup to ntp_lineeditlibs.m4.\n* Documentation updates from Dave Mills.\n* -ledit cleanup for ntpdc and ntpq.\n* Association and other cleanup from Dave Mills.\n* NTP_UNREACH changes from Dave Mills.\n* Fix the readline history test.\n* [Bug 931] Require -lreadline to be asked for explicitly.\n* [Bug 764] When looking for -lreadline support, also try using -lncurses.\n* [Bug 909] Fix int32_t errors for ntohl().\n* [Bug 376/214] Enhancements to support multiple if names and IP addresses.\n* [Bug 929] int32_t is undefined on Windows.  Casting wrong.\n* [Bug 928] readlink missing braces.\n* [Bug 788] Update macros to support VS 2005.\n* ntpd/ntp_timer.c: add missing sys_tai parameter for debug printf\n* [Bug 917] config parse leaves files open\n* [Bug 912] detect conflicting enable/disable configuration on interfaces\n  sharing an IP address\n* [Bug 771] compare scopeid if available for IPv6 addresses\n* Lose obsolete crypto subcommands (Dave Mills).\n* WWV is an HF source, not an LF source (Dave Mills).\n* [Bug 899] Only show -i/--jaildir -u/--user options if we HAVE_DROPROOT.\n* [Bug 916] 'cryptosw' is undefined if built without OpenSSL.\n* [Bug 891] 'restrict' config file keyword does not work (partial fix).\n* [Bug 890] the crypto command seems to be required now.\n* [Bug 915] ntpd cores during processing of x509 certificates.\n* Crypto lint cleanup from Dave Mills.\n* [Bug 897] Check RAND_status() - we may not need a .rnd file.\n* Crypto cleanup from Dave Mills.\n* [Bug 911] Fix error message in cmd_args.c.\n* [Bug 895] Log assertion failures via syslog(), not stderr.\n* Documentation updates from Dave Mills.\n* Crypto cleanup from Dave Mills.\n* [Bug 905] ntp_crypto.c fails to compile without -DDEBUG.\n* Avoid double peer stats logging.\n* ntp-keygen cleanup from Dave Mills.\n* libopts needs to be built after ElectricFence.\n* [Bug 894] Initialize keysdir before calling crypto_setup().\n* Calysto cleanup for ntpq.\n* ntp-keygen -i takes an arg.\n* Cleanup and fixes from Dave Mills.\n* [Bug 887] Fix error in ntp_types.h (for sizeof int != 4).\n* Bug 880 bug fixes for Windows build\n* Improve Calysto support.\n* The \"revoke\" parameter is a crypto command.\n* The driftfile wander threshold is a real number.\n* [Bug 850] Fix the wander threshold parameter on the driftfile command.\n* ntp_io.c: Dead code cleanup - Coverity View 19.\n* Leap file related cleanup from Dave Mills.\n* ntp_peer.c: Set peer->srcadr before (not after) calling set_peerdstadr().\n* Initialize offset in leap_file() - Coverity View 17.\n* Use the correct stratum on KISS codes.\n* Fuzz bits cleanup.\n* Show more digits in some debug printf's.\n* Use drift_file_sw internally to control writing the drift file.\n* Implement the wander_threshold option for the driftfile config keyword.\n* reformat ntp_control.c; do not use c++ // comments.\n* [Bug 629] Undo bug #629 fixes as they cause more problems than were  being\n  solved\n* Changes from Dave Mills: in/out-bound data rates, leapsecond cleanup,\n  driftfile write cleanup, packet buffer length checks, documentation updates.\n* More assertion checks and malloc()->emalloc(), courtesy of Calysto.\n* [Bug 864] Place ntpd service in maintenance mode if using SMF on Solaris\n* [Bug 862] includefile nesting; preserve phonelist on reconfig.\n* [Bug 604] ntpd regularly dies on linux/alpha.\n* more leap second infrastructure fixes from Dave Mills.\n* [Bug 858] recent leapfile changes broke non-OpenSSL builds.\n* Use emalloc() instead of malloc() in refclock_datum.c (Calysto).\n* Start using 'design by contract' assertions.\n* [Bug 767] Fast sync to refclocks wanted.\n* Allow null driftfile.\n* Use YYERROR_VERBOSE for the new parser, and fix related BUILT_SOURCES.\n* [Bug 629] changes to ensure broadcast works including on wildcard addresses\n* [Bug 853] get_node() must return a pointer to maximally-aligned memory.\n* Initial leap file fixes from Dave Mills.\n* [Bug 858] Recent leapfile changes broke without OPENSSL.\n* Use a char for DIR_SEP, not a string.\n* [Bug 850] driftfile parsing changes.\n* driftfile maintenance changes from Dave Mills.  Use clock_phi instead of\n  stats_write_tolerance.\n* [Bug 828] refid string not being parsed correctly.\n* [Bug 846] Correct includefile parsing.\n* [Bug 827] New parsing code does not handle \"fudge\" correctly.\n* Enable debugging capability in the config parser.\n* [Bug 839] Crypto password not read from ntp.conf.\n* Have autogen produce writable output files.\n* [Bug 825] Correct logconfig -/+ keyword processing.\n* [Bug 828] Correct parsing of \" delimited strings.\n* Cleanup FILE * usage after fclose() in ntp_filegen.c.\n* [Bug 843] Windows Completion port code was incorrectly merged from -stable.\n* [Bug 840] do fudge configuration AFTER peers (thus refclocks) have been\n  configured.\n* [Bug 824] Added new parser modules to the Windows project file.\n* [Bug 832] Add libisc/log.c headers to the distribution.\n* [Bug 808] Only write the drift file if we are in state 4.\n* Initial import of libisc/log.c and friends.\n* [Bug 826] Fix redefinition of PI.\n* [Bug 825] ntp_scanner.c needs to #include <config.h> .\n* [Bug 824] New parser code has some build problems with the SIM code.\n* [Bug 817] Use longnames for setting ntp variables on the command-line;\n  Allowing '-v' with and without an arg to disambiguate usage is error-prone.\n* [Bug 822] set progname once, early.\n* [Bug 819] remove erroneous #if 0 in Windows completion port code.\n* The new config code missed an #ifdef for building without refclocks.\n* Distribute some files needed by the new config parsing code.\n* [Bug 819] Timeout for WaitForMultipleObjects was 500ms instead of INFINITE\n* Use autogen 5.9.1.\n* Fix clktest command-line arg processing.'\n* Audio documentation updates from Dave Mills.\n* New config file parsing code, from Sachin Kamboj.\n* fuzz bit cleanup from Dave Mills.\n* replay cleanup from Dave Mills.\n* [Bug 542] Tolerate missing directory separator at EO statsdir.\n* [Bug 812] ntpd should drop supplementary groups.\n* [Bug 815] Fix warning compiling 4.2.5p22 under Windows with VC6.\n* [Bug 740] Fix kernel/daemon startup drift anomaly.\n* refclock_wwv.c fixes from Dave Mills.\n* [Bug 810] Fix ntp-keygen documentation.\n* [Bug 787] Bug fixes for 64-bit time_t on Windows.\n* [Bug 796] Clean up duplicate #defines in ntp_control.c.\n* [Bug 569] Use the correct precision for the Leitch CSD-5300.\n* [Bug 795] Moved declaration of variable to top of function.\n* [Bug 798] ntpq [p typo crashes ntpq/ntpdc.\n* [Bug 786] Fix refclock_bancomm.c on Solaris.\n* [Bug 774] parsesolaris.c does not compile under the new Solaris.\n* [Bug 782] Remove P() macros from Windows files.\n* [Bug 778] ntpd fails to lock with drift=+500 when started with drift=-500.\n* [Bug 592] Trimble Thunderbolt GPS support.\n* IRIG, CHU, WWV, WWVB refclock improvements from Dave Mills.\n* [Bug 757] Lose ULONG_CONST().\n* [Bug 756] Require ANSI C (function prototypes).\n* codec (audio) and ICOM changes from Dave Mills.\n\n---\n\n* [Bug 450] Windows only: Under original Windows NT we must not discard the\n  wildcard socket to workaround a bug in NT's getsockname().\n* [Bug 1038] Built-in getpass() function also prompts for password if\n  not built with DEBUG.\n* [Bug 841] Obsolete the \"dynamic\" keyword and make deferred binding\n  to local interfaces the default.\n  Emit a warning if that keyword is used for configuration.\n* [Bug 959] Refclock on Windows not properly releasing recvbuffs.\n* [Bug 993] Fix memory leak when fetching system messages.\n* [Bug 987] Wake up the resolver thread/process when a new interface has\n  become available.\n* Correctly apply negative-sawtooth for oncore 12 channel receiver.\n* Startup code for original LinuxPPS removed.  LinuxPPS now conforms to\n  the PPSAPI.\n* [Bug 1000] allow implicit receive buffer allocation for Windows.\n  fixes startup for windows systems with many interfaces.\n  reduces dropped packets on network bursts.\n  additionally fix timer() starvation during high load.\n* [Bug 990] drop minimum time restriction for interface update interval.\n* [Bug 977] Fix mismatching #ifdefs for builds without IPv6.\n* Update the copyright year.\n* Build system cleanup (make autogen-generated files writable).\n* [Bug 957] Windows only: Let command line parameters from the Windows SCM GUI\n  override the standard parameters from the ImagePath registry key.\n* Fixes for ntpdate:\n* [Bug 532] nptdate timeout is too long if several servers are supplied.\n* [Bug 698] timeBeginPeriod is called without timeEndPeriod in some NTP tools.\n* [Bug 857] ntpdate debug mode adjusts system clock when it shouldn't.\n* [Bug 908] ntpdate crashes sometimes.\n* [Bug 982] ntpdate(and ntptimeset) buffer overrun if HAVE_POLL_H isn't set\n  (dup of 908).\n* [Bug 997] ntpdate buffer too small and unsafe.\n* ntpdate.c: Under Windows check whether NTP port in use under same conditions\n  as under other OSs.\n* ntpdate.c: Fixed some typos and indents (tabs/spaces).\n\n(4.2.4p4) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 902] Fix problems with the -6 flag.\n* Updated include/copyright.def (owner and year).\n* [Bug 878] Avoid ntpdc use of refid value as unterminated string.\n* [Bug 881] Corrected display of pll offset on 64bit systems.\n* [Bug 886] Corrected sign handling on 64bit in ntpdc loopinfo command.\n* [Bug 889] avoid malloc() interrupted by SIGIO risk\n* ntpd/refclock_parse.c: cleanup shutdown while the file descriptor is still\n  open.\n* [Bug 885] use emalloc() to get a message at the end of the memory\n  unsigned types cannot be less than 0\n  default_ai_family is a short\n  lose trailing , from enum list\n  clarify ntp_restrict.c for easier automated analysis\n* [Bug 884] don't access recv buffers after having them passed to the free\n  list.\n* [Bug 882] allow loopback interfaces to share addresses with other\n  interfaces.\n\n---\n(4.2.4p3) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 863] unable to stop ntpd on Windows as the handle reference for events\n  changed\n\n---\n(4.2.4p2) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 854] Broadcast address was not correctly set for interface addresses\n* [Bug 829] reduce syslog noise, while there fix Enabled/Disable logging\n  to reflect the actual configuration.\n* [Bug 795] Moved declaration of variable to top of function.\n* [Bug 789] Fix multicast client crypto authentication and make sure arriving\n  multicast packets do not disturb the autokey dance.\n* [Bug 785] improve handling of multicast interfaces\n  (multicast routers still need to run a multicast routing software/daemon)\n* ntpd/refclock_parse.c: cleanup shutdown while the file descriptor is still\n  open.\n* [Bug 885] use emalloc() to get a message at the end of the memory\n  unsigned types cannot be less than 0\n  default_ai_family is a short\n  lose trailing , from enum list\n* [Bug 884] don't access recv buffers after having them passed to the free list.\n* [Bug 882] allow loopback interfaces to share addresses with other interfaces.\n* [Bug 527] Don't write from source address length to wrong location\n* Upgraded autogen and libopts.\n* [Bug 811] ntpd should not read a .ntprc file.\n\n---\n(4.2.4p1) (skipped)\n\n---\n(4.2.4p0) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 793] Update Hans Lambermont's email address in ntpsweep.\n* [Bug 776] Remove unimplemented \"rate\" flag from ntpdate.\n* [Bug 586] Avoid lookups if AI_NUMERICHOST is set.\n* [Bug 770] Fix numeric parameters to ntp-keygen (Alain Guibert).\n* [Bug 768] Fix io_setbclient() error message.\n* [Bug 765] Use net_bind_service capability on linux.\n* [Bug 760] The background resolver must be aware of the 'dynamic' keyword.\n* [Bug 753] make union timestamp anonymous (Philip Prindeville).\n* confopt.html: move description for \"dynamic\" keyword into the right section.\n* pick the right type for the recv*() length argument.\n\n---\n(4.2.4) Released by Harlan Stenn <stenn@ntp.org>\n\n* monopt.html fixes from Dave Mills.\n* [Bug 452] Do not report kernel PLL/FLL flips.\n* [Bug 746] Expert mouseCLOCK USB v2.0 support added.'\n* driver8.html updates.\n* [Bug 747] Drop <NOBR> tags from ntpdc.html.\n* sntp now uses the returned precision to control decimal places.\n* sntp -u will use an unprivileged port for its queries.\n* [Bug 741] \"burst\" doesn't work with !unfit peers.\n* [Bug 735] Fix a make/gmake VPATH issue on Solaris.\n* [Bug 739] ntpd -x should not take an argument.\n* [Bug 737] Some systems need help providing struct iovec.\n* [Bug 717] Fix libopts compile problem.\n* [Bug 728] parse documentation fixes.\n* [Bug 734] setsockopt(..., IP_MULTICAST_IF, ...) fails on 64-bit platforms.\n* [Bug 732] C-DEX JST2000 patch from Hideo Kuramatsu.\n* [Bug 721] check for __ss_family and __ss_len separately.\n* [Bug 666] ntpq opeers displays jitter rather than dispersion.\n* [Bug 718] Use the recommended type for the saddrlen arg to getsockname().\n* [Bug 715] Fix a multicast issue under Linux.\n* [Bug 690] Fix a Windows DNS lookup buffer overflow.\n* [Bug 670] Resolved a Windows issue with the dynamic interface rescan code.\n* K&R C support is being deprecated.\n* [Bug 714] ntpq -p should conflict with -i, not -c.\n* WWV refclock improvements from Dave Mills.\n* [Bug 708] Use thread affinity only for the clock interpolation thread.\n* [Bug 706] ntpd can be running several times in parallel.\n* [Bug 704] Documentation typos.\n* [Bug 701] coverity: NULL dereference in ntp_peer.c\n* [Bug 695] libopts does not protect against macro collisions.\n* [Bug 693] __adjtimex is independent of ntp_{adj,get}time.\n* [Bug 692] sys_limitrejected was not being incremented.\n* [Bug 691] restrictions() assumption not always valid.\n* [Bug 689] Deprecate HEATH GC-1001 II; the driver never worked.\n* [Bug 688] Fix documentation typos.\n* [Bug 686] Handle leap seconds better under Windows.\n* [Bug 685] Use the Windows multimedia timer.\n* [Bug 684] Only allow debug options if debugging is enabled.\n* [Bug 683] Use the right version string.\n* [Bug 680] Fix the generated version string on Windows.\n* [Bug 678] Use the correct size for control messages.\n* [Bug 677] Do not check uint_t in configure.ac.\n* [Bug 676] Use the right value for msg_namelen.\n* [Bug 675] Make sure ntpd builds without debugging.\n* [Bug 672] Fix cross-platform structure padding/size differences.\n* [Bug 660] New TIMESTAMP code fails tp build on Solaris Express.\n* [Bug 659] libopts does not build under Windows.\n* [Bug 658] HP-UX with cc needs -Wp,-H8166 in CFLAGS.\n* [Bug 656] ntpdate doesn't work with multicast address.\n* [Bug 638] STREAMS_TLI is deprecated - remove it.\n* [Bug 635] Fix tOptions definition.\n* [Bug 628] Fallback to ntp discipline not working for large offsets.\n* [Bug 622] Dynamic interface tracking for ntpd.\n* [Bug 603] Don't link with libelf if it's not needed.\n* [Bug 523] ntpd service under Windows does't shut down properly.\n* [Bug 500] sntp should always be built.\n* [Bug 479] Fix the -P option.\n* [Bug 421] Support the bc637PCI-U card.\n* [Bug 342] Deprecate broken TRAK refclock driver.\n* [Bug 340] Deprecate broken MSF EES refclock driver.\n* [Bug 153] Don't do DNS lookups on address masks.\n* [Bug 143] Fix interrupted system call on HP-UX.\n* [Bug 42] Distribution tarballs should be signed.\n* Support separate PPS devices for PARSE refclocks.\n* [Bug 637, 51?] Dynamic interface scanning can now be done.\n* Options processing now uses GNU AutoGen.\n\n---\n(4.2.2p4) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 710] compat getnameinfo() has off-by-one error\n* [Bug 690] Buffer overflow in Windows when doing DNS Lookups\n\n---\n(4.2.2p3) Released by Harlan Stenn <stenn@ntp.org>\n\n* Make the ChangeLog file cleaner and easier to read\n* [Bug 601] ntpq's decodeint uses an extra level of indirection\n* [Bug 657] Different OSes need different sized args for IP_MULTICAST_LOOP\n* release engineering/build changes\n* Documentation fixes\n* Get sntp working under AIX-5\n\n---\n(4.2.2p2) (broken)\n\n* Get sntp working under AIX-5\n\n---\n(4.2.2p1)\n\n* [Bug 661] Use environment variable to specify the base path to openssl.\n* Resolve an ambiguity in the copyright notice\n* Added some new documentation files\n* URL cleanup in the documentation\n* [Bug 657]: IP_MULTICAST_LOOP uses a u_char value/size\n* quiet gcc4 complaints\n* more Coverity fixes\n* [Bug 614] manage file descriptors better\n* [Bug 632] update kernel PPS offsets when PPS offset is re-configured\n* [Bug 637] Ignore UP in*addr_any interfaces\n* [Bug 633] Avoid writing files in srcdir\n* release engineering/build changes\n\n---\n(4.2.2)\n\n* SNTP\n* Many bugfixes\n* Implements the current \"goal state\" of NTPv4\n* Autokey improvements\n* Much better IPv6 support\n* [Bug 360] ntpd loses handles with LAN connection disabled.\n* [Bug 239] Fix intermittent autokey failure with multicast clients.\n* Rewrite of the multicast code\n* New version numbering scheme\n\n---\n(4.2.0)\n\n* More stuff than I have time to document\n* IPv6 support\n* Bugfixes\n* call-gap filtering\n* wwv and chu refclock improvements\n* OpenSSL integration\n\n---\n(4.1.2)\n\n* clock state machine bugfix\n* Lose the source port check on incoming packets\n* (x)ntpdc compatibility patch\n* Virtual IP improvements\n* ntp_loopfilter fixes and improvements\n* ntpdc improvements\n* GOES refclock fix\n* JJY driver\n* Jupiter refclock fixes\n* Neoclock4X refclock fixes\n* AIX 5 port\n* bsdi port fixes\n* Cray unicos port upgrade\n* HP MPE/iX port\n* Win/NT port upgrade\n* Dynix PTX port fixes\n* Document conversion from CVS to BK\n* readline support for ntpq\n\n---\n(4.1.0)\n\n* CERT problem fixed (99k23)\n\n* Huff-n-Puff filter\n* Preparation for OpenSSL support\n* Resolver changes/improvements are not backward compatible with mode 7\n  requests (which are implementation-specific anyway)\n* leap second stuff\n* manycast should work now\n* ntp-genkeys does new good things.\n* scripts/ntp-close\n* PPS cleanup and improvements\n* readline support for ntpdc\n* Crypto/authentication rewrite\n* WINNT builds with MD5 by default\n* WINNT no longer requires Perl for building with Visual C++ 6.0\n* algorithmic improvements, bugfixes\n* Solaris dosynctodr info update\n* html/pic/* is *lots* smaller\n* New/updated drivers: Forum Graphic GPS, WWV/H, Heath GC-100 II, HOPF\n  serial and PCI, ONCORE, ulink331\n* Rewrite of the audio drivers\n\n---\n(4.0.99)\n\n* Driver updates: CHU, DCF, GPS/VME, Oncore, PCF, Ulink, WWVB, burst\n  If you use the ONCORE driver with a HARDPPS kernel module,\n  you *must* have a properly specified:\n\tpps <filename> [assert/clear] [hardpps]\n  line in the /etc/ntp.conf file.\n* PARSE cleanup\n* PPS cleanup\n* ntpd, ntpq, ntpdate cleanup and fixes\n* NT port improvements\n* AIX, BSDI, DEC OSF, FreeBSD, NetBSD, Reliant, SCO, Solaris port improvements\n\n---\n(4.0.98)\n\n* Solaris kernel FLL bug is fixed in 106541-07\n* Bug/lint cleanup\n* PPS cleanup\n* ReliantUNIX patches\n* NetInfo support\n* Ultralink driver\n* Trimble OEM Ace-II support\n* DCF77 power choices\n* Oncore improvements\n\n---\n(4.0.97)\n\n* NT patches\n* AIX,SunOS,IRIX portability\n* NeXT portability\n* ntptimeset utility added\n* cygwin portability patches\n\n---\n(4.0.96)\n\n* -lnsl, -lsocket, -lgen configuration patches\n* Y2K patches from AT&T\n* Linux portability cruft\n\n---\n(4.0.95)\n\n* NT port cleanup/replacement\n* a few portability fixes\n* VARITEXT Parse clock added\n\n---\n(4.0.94)\n\n* PPS updates (including ntp.config options)\n* Lose the old DES stuff in favor of the (optional) RSAREF stuff\n* html cleanup/updates\n* numerous drivers cleaned up\n* numerous portability patches and code cleanup\n\n---\n(4.0.93)\n\n* Oncore refclock needs PPS or one of two ioctls.\n* Don't make ntptime under Linux.  It doesn't compile for too many folks.\n* Autokey cleanup\n* ReliantUnix patches\n* html cleanup\n* tickadj cleanup\n* PARSE cleanup\n* IRIX -n32 cleanup\n* byte order cleanup\n* ntptrace improvements and patches\n* ntpdc improvements and patches\n* PPS cleanup\n* mx4200 cleanup\n* New clock state machine\n* SCO cleanup\n* Skip alias interfaces\n\n---\n(4.0.92)\n\n* chronolog and dumbclock refclocks\n* SCO updates\n* Cleanup/bugfixes\n* Y2K patches\n* Updated palisade driver\n* Plug memory leak\n* wharton kernel clock\n* Oncore clock upgrades\n* NMEA clock improvements\n* PPS improvements\n* AIX portability patches\n\n---\n(4.0.91)\n\n* New ONCORE driver\n* New MX4200 driver\n* Palisade improvements\n* config file bugfixes and problem reporting\n* autoconf upgrade and cleanup\n* HP-UX, IRIX lint cleanup\n* AIX portability patches\n* NT cleanup\n\n---\n(4.0.90)\n\n* Nanoseconds\n* New palisade driver\n* New Oncore driver\n\n---\n(4.0.73)\n\n* README.hackers added\n* PARSE driver is working again\n* Solaris 2.6 has nasty kernel bugs.  DO NOT enable pll!\n* DES is out of the distribution.\n\n---\n(4.0.72)\n\n* K&R C compiling should work again.\n* IRIG patches.\n* MX4200 driver patches.\n* Jupiter driver added.\n* Palisade driver added.  Needs work (ANSI, ntoh/hton, sizeof double, ???)\n", "dnl ######################################################################\ndnl OpenSSL support shared by top-level and sntp/configure.ac\nAC_DEFUN([NTP_OPENSSL], [\n\t\nAC_SUBST([OPENSSL])\nAC_SUBST([OPENSSL_INC])\nAC_SUBST([OPENSSL_LIB])\n\nAC_PATH_PROG([PKG_CONFIG], [pkg-config])\n\nAC_MSG_CHECKING([for openssl library directory])\nAC_ARG_WITH(\n    [openssl-libdir],\n    [AS_HELP_STRING(\n\t[--with-openssl-libdir], \n\t[+ =/something/reasonable]\n    )],\n    [ans=$withval],\n    [\n\tcase \"$build\" in\n\t $host) ans=yes ;;\n\t *)     ans=no ;;\n\tesac\n    ]\n)\ncase \"$ans\" in\n no) \n    ;;\n yes)\n    case \"$PKG_CONFIG\" in\n     '')\n\t;;\n     *)\n\tpkgans=`$PKG_CONFIG --libs-only-L openssl | sed -e 's/^-L//'`\n\tcase \"$pkgans\" in\n\t '')\n\t    # Look in:\n\t    ans=\"/usr/lib /usr/lib/openssl /usr/sfw/lib\"\n\t    ans=\"$ans /usr/local/lib /usr/local/ssl/lib /lib\"\n\t    ;;\n\t *)\n\t    ans=\"$pkgans\"\n\t    ;;\n\tesac\n\t;;\n    esac\n    ;;\n *) # Look where they said\n    ;;\nesac\ncase \"$ans\" in\n no)\n    ;;\n *) # Look for libcrypto.a and libssl.a:\n    for i in $ans no\n    do\n\tcase \"$host\" in\n\t *-*-darwin*)\n\t    test -f $i/libcrypto.dylib -a -f $i/libssl.dylib && break\n\t    ;;\n\t *)\n\t    test -f $i/libcrypto.so -a -f $i/libssl.so && break\n\t    test -f $i/libcrypto.a -a -f $i/libssl.a && break\n\t    ;;\n\tesac\n    done\n    case \"$i\" in\n     no)\n\tans=no\n\tOPENSSL_LIB=\n\t;;\n     *) ans=$i\n\tOPENSSL_LIB=$ans\n\t;;\n    esac\n    ;;\nesac\nAC_MSG_RESULT([$ans])\n\nAC_MSG_CHECKING([for openssl include directory])\nAC_ARG_WITH(\n    [openssl-incdir],\n    [AS_HELP_STRING(\n\t[--with-openssl-incdir],\n\t[+ =/something/reasonable]\n    )],\n    [ans=$withval],\n    [\n\tcase \"$build\" in\n\t $host) ans=yes ;;\n\t *)     ans=no ;;\n\tesac\n    ]\n)\ncase \"$ans\" in\n no)\n    ;;\n yes) # look in:\n    case \"$PKG_CONFIG\" in\n     '')\n\t;;\n     *)\n\tpkgans=`$PKG_CONFIG --cflags-only-I openssl | sed -e 's/^-I//'`\n\tcase \"$pkgans\" in\n\t '')\n\t    # Look in:\n\t    ans=\"/usr/include /usr/sfw/include /usr/local/include\"\n\t    ans=\"$ans /usr/local/ssl/include\"\n\t    ;;\n\t *)\n\t    ans=\"$pkgans\"\n\t    ;;\n\tesac\n\t;;\n    esac\n    ;;\n *) # Look where they said\n    ;;\nesac\ncase \"$ans\" in\n no)\n    ;;\n *) # look for openssl/opensslconf.h:\n    for i in $ans no\n    do\n\ttest -f $i/openssl/opensslconf.h && break\n    done\n    case \"$i\" in\n     no)\n\tans=no\n\tOPENSSL_INC=\n\t;;\n     *) ans=$i\n\tOPENSSL_INC=$ans\n\t;;\n    esac\n    ;;\nesac\nAC_MSG_RESULT([$ans])\n\nAC_MSG_CHECKING([if we will use crypto])\nAC_ARG_WITH(\n    [crypto],\n    [AS_HELP_STRING(\n\t[--with-crypto],\n\t[+ =openssl]\n    )],\n    [ans=$withval],\n    [ans=yes]\n)\ncase \"$ans\" in\n no)\n    ;;\n yes|openssl)\n    if test -z \"$OPENSSL_LIB\" -o -z \"$OPENSSL_INC\"\n    then\n\tans=no\n    else\n\tans=yes\n    fi\nesac\nntp_openssl=$ans\nAC_MSG_RESULT([$ans])\n\ncase \"$ntp_openssl\" in\n yes)\n    # We have OpenSSL inc/lib - use them.\n    case \"$OPENSSL_INC\" in\n     /usr/include)\n\t;;\n     *)\t\n\tCPPFLAGS=\"$CPPFLAGS -I$OPENSSL_INC\"\n\t;;\n    esac\n    case \"$OPENSSL_LIB\" in\n     /usr/lib)\n\t;;\n     *)\t\n\tLDFLAGS=\"$LDFLAGS -L$OPENSSL_LIB\"\n\tcase \"$need_dash_r\" in\n\t 1)\n\t    LDFLAGS=\"$LDFLAGS -R$OPENSSL_LIB\"\n\tesac\n\t;;\n    esac\n    AC_SUBST([LCRYPTO], [-lcrypto])\n    AC_DEFINE([OPENSSL], [1], [Use OpenSSL?])\nesac\n\n#\n# check for linking with -lcrypto failure, and try -lz -lcrypto.\n# Helps m68k-atari-mint\n#\ncase \"$ntp_openssl\" in\n yes)\n    NTPO_SAVED_LIBS=\"$LIBS\"\n    LIBS=\"$NTPO_SAVED_LIBS $LCRYPTO\"\n    AC_CACHE_CHECK(\n\t[if linking with $LCRYPTO alone works],\n\t[ntp_cv_bare_lcrypto],\n\t[AC_LINK_IFELSE(\n\t    [AC_LANG_PROGRAM(\n\t\t[[\n\t\t    #include \"openssl/err.h\"\n\t\t    #include \"openssl/evp.h\"\n\t\t]],\n\t\t[[\n\t\t    ERR_load_crypto_strings();\n\t\t    OpenSSL_add_all_algorithms();\n\t\t]]\n\t    )],\n\t    [ntp_cv_bare_lcrypto=yes],\n\t    [ntp_cv_bare_lcrypto=no]\n\t)]\n    )\n    case \"$ntp_cv_bare_lcrypto\" in\n     no)\n\tLIBS=\"$NTPO_SAVED_LIBS $LCRYPTO -lz\"\n\tAC_CACHE_CHECK(\n\t    [if linking with $LCRYPTO -lz works],\n\t    [ntp_cv_lcrypto_lz],\n\t    [AC_LINK_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t    [[\n\t\t\t#include \"openssl/err.h\"\n\t\t\t#include \"openssl/evp.h\"\n\t\t    ]],\n\t\t    [[\n\t\t\tERR_load_crypto_strings();\n\t\t\tOpenSSL_add_all_algorithms();\n\t\t    ]]\n\t\t)],\n\t\t[ntp_cv_lcrypto_lz=yes],\n\t\t[ntp_cv_lcrypto_lz=no]\n\t    )]\n\t)\n\tcase \"$ntp_cv_lcrypto_lz\" in\n\t yes)\n\t     LCRYPTO=\"$LCRYPTO -lz\"\n\tesac\n    esac\n    LIBS=\"$NTPO_SAVED_LIBS\"\n    AS_UNSET([NTPO_SAVED_LIBS])\nesac\n\n#\n# Older OpenSSL headers have a number of callback prototypes inside\n# other function prototypes which trigger copious warnings with gcc's\n# -Wstrict-prototypes, which is included in -Wall.\n#\n# An example:\n#\n# int i2d_RSA_NET(const RSA *a, unsigned char **pp, \n#\t\t  int (*cb)(), int sgckey);\n#\t\t  ^^^^^^^^^^^\n#\n# \n#\nopenssl_triggers_warnings=unknown\nSAVED_CFLAGS=\"$CFLAGS\"\n\ncase \"$GCC$ntp_openssl\" in\n yesyes)\n    CFLAGS=\"$CFLAGS -Werror\"\n    AC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t    [[\n\t    ]],\n\t    [[\n\t\t/* see if -Werror breaks gcc */\n\t    ]]\n\t)],\n\t[gcc_handles_Werror=yes],\n\t[gcc_handles_Werror=no]\n    )\n    case \"$gcc_handles_Werror\" in\n     no)\n\t# if this gcc doesn't do -Werror go ahead and use\n\t# -Wstrict-prototypes.\n\topenssl_triggers_warnings=yes\n\t;;\n     yes)\n\tCFLAGS=\"$CFLAGS -Wstrict-prototypes\"\n\tAC_COMPILE_IFELSE(\n\t    [AC_LANG_PROGRAM(\n\t\t[[\n\t\t    #include \"openssl/asn1_mac.h\"\n\t\t    #include \"openssl/bn.h\"\n\t\t    #include \"openssl/err.h\"\n\t\t    #include \"openssl/evp.h\"\n\t\t    #include \"openssl/pem.h\"\n\t\t    #include \"openssl/rand.h\"\n\t\t    #include \"openssl/x509v3.h\"\n\t\t]],\n\t\t[[\n\t\t    /* empty body */\n\t\t]]\n\t    )],\n\t    [openssl_triggers_warnings=no],\n\t    [openssl_triggers_warnings=yes]\n\t)\n    esac\n    case \"$openssl_triggers_warnings\" in\n     yes)\n\tCFLAGS=\"$SAVED_CFLAGS -Wno-strict-prototypes\"\n\t;;\n     *)\n\tCFLAGS=\"$SAVED_CFLAGS -Wstrict-prototypes\"\n    esac\n    ;;\n yesno)\n    # gcc without OpenSSL\n    CFLAGS=\"$SAVED_CFLAGS -Wstrict-prototypes\"\nesac\nAS_UNSET([SAVED_CFLAGS])\n])\ndnl ======================================================================\n", "/* ntp_config.c\n *\n * This file contains the ntpd configuration code.\n *\n * Written By:\tSachin Kamboj\n *\t\tUniversity of Delaware\n *\t\tNewark, DE 19711\n * Some parts borrowed from the older ntp_config.c\n * Copyright (c) 2006\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#ifdef HAVE_NETINFO\n# include <netinfo/ni.h>\n#endif\n\n#include <stdio.h>\n#include <ctype.h>\n#ifdef HAVE_SYS_PARAM_H\n# include <sys/param.h>\n#endif\n#include <signal.h>\n#ifndef SIGCHLD\n# define SIGCHLD SIGCLD\n#endif\n#ifdef HAVE_SYS_WAIT_H\n# include <sys/wait.h>\n#endif\n\n#include \"ntp.h\"\n#include \"ntpd.h\"\n#include \"ntp_io.h\"\n#include \"ntp_unixtime.h\"\n#include \"ntp_refclock.h\"\n#include \"ntp_filegen.h\"\n#include \"ntp_stdlib.h\"\n#include \"lib_strbuf.h\"\n#include \"ntp_assert.h\"\n#include \"ntpd-opts.h\"\n#include \"ntp_random.h\"\n#include \"ntp_workimpl.h\"\n#include <isc/net.h>\n#include <isc/result.h>\n\n\n/*\n * [Bug 467]: Some linux headers collide with CONFIG_PHONE and CONFIG_KEYS\n * so #include these later.\n */\n\n#include \"ntp_config.h\"\n#include \"ntp_cmdargs.h\"\n\n#include \"ntp_scanner.h\"\n#include \"ntp_parser.h\"\n\n\n/* list of servers from command line for config_peers() */\nint\tcmdline_server_count;\nchar **\tcmdline_servers;\n\n/*\n * \"logconfig\" building blocks\n */\nstruct masks {\n\tconst char *\tname;\n\tunsigned long\tmask;\n};\n\nstatic struct masks logcfg_class[] = {\n\t{ \"clock\",\tNLOG_OCLOCK },\n\t{ \"peer\",\tNLOG_OPEER },\n\t{ \"sync\",\tNLOG_OSYNC },\n\t{ \"sys\",\tNLOG_OSYS },\n\t{ NULL,\t\t0 }\n};\n\nstatic struct masks logcfg_item[] = {\n\t{ \"info\",\t\tNLOG_INFO },\n\t{ \"allinfo\",\t\tNLOG_SYSINFO|NLOG_PEERINFO|NLOG_CLOCKINFO|NLOG_SYNCINFO },\n\t{ \"events\",\t\tNLOG_EVENT },\n\t{ \"allevents\",\t\tNLOG_SYSEVENT|NLOG_PEEREVENT|NLOG_CLOCKEVENT|NLOG_SYNCEVENT },\n\t{ \"status\",\t\tNLOG_STATUS },\n\t{ \"allstatus\",\t\tNLOG_SYSSTATUS|NLOG_PEERSTATUS|NLOG_CLOCKSTATUS|NLOG_SYNCSTATUS },\n\t{ \"statistics\",\t\tNLOG_STATIST },\n\t{ \"allstatistics\",\tNLOG_SYSSTATIST|NLOG_PEERSTATIST|NLOG_CLOCKSTATIST|NLOG_SYNCSTATIST },\n\t{ \"allclock\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OCLOCK },\n\t{ \"allpeer\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OPEER },\n\t{ \"allsys\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OSYS },\n\t{ \"allsync\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OSYNC },\n\t{ \"all\",\t\tNLOG_SYSMASK|NLOG_PEERMASK|NLOG_CLOCKMASK|NLOG_SYNCMASK },\n\t{ NULL,\t\t\t0 }\n};\n\ntypedef struct peer_resolved_ctx_tag {\n\tint\t\tflags;\n\tint\t\thost_mode;\t/* T_* token identifier */\n\tu_short\t\tfamily;\n\tkeyid_t\t\tkeyid;\n\tu_char\t\thmode;\t\t/* MODE_* */\n\tu_char\t\tversion;\n\tu_char\t\tminpoll;\n\tu_char\t\tmaxpoll;\n\tu_char\t\tttl;\n\tconst char *\tgroup;\n} peer_resolved_ctx;\n\n/* Limits */\n#define MAXPHONE\t10\t/* maximum number of phone strings */\n#define MAXPPS\t\t20\t/* maximum length of PPS device string */\n\n/*\n * Miscellaneous macros\n */\n#define ISEOL(c)\t((c) == '#' || (c) == '\\n' || (c) == '\\0')\n#define ISSPACE(c)\t((c) == ' ' || (c) == '\\t')\n\n/*\n * Definitions of things either imported from or exported to outside\n */\nextern int yydebug;\t\t\t/* ntp_parser.c (.y) */\nint curr_include_level;\t\t\t/* The current include level */\nstruct FILE_INFO *fp[MAXINCLUDELEVEL+1];\nconfig_tree cfgt;\t\t\t/* Parser output stored here */\nstruct config_tree_tag *cfg_tree_history;\t/* History of configs */\nchar\t*sys_phone[MAXPHONE] = {NULL};\t/* ACTS phone numbers */\nchar\tdefault_keysdir[] = NTP_KEYSDIR;\nchar\t*keysdir = default_keysdir;\t/* crypto keys directory */\nchar *\tsaveconfigdir;\n#if defined(HAVE_SCHED_SETSCHEDULER)\nint\tconfig_priority_override = 0;\nint\tconfig_priority;\n#endif\n\nconst char *config_file;\nchar default_ntp_signd_socket[] =\n#ifdef NTP_SIGND_PATH\n\t\t\t\t\tNTP_SIGND_PATH;\n#else\n\t\t\t\t\t\"\";\n#endif\nchar *ntp_signd_socket = default_ntp_signd_socket;\n#ifdef HAVE_NETINFO\nstruct netinfo_config_state *config_netinfo = NULL;\nint check_netinfo = 1;\n#endif /* HAVE_NETINFO */\n#ifdef SYS_WINNT\nchar *alt_config_file;\nLPTSTR temp;\nchar config_file_storage[MAX_PATH];\nchar alt_config_file_storage[MAX_PATH];\n#endif /* SYS_WINNT */\n\n#ifdef HAVE_NETINFO\n/*\n * NetInfo configuration state\n */\nstruct netinfo_config_state {\n\tvoid *domain;\t\t/* domain with config */\n\tni_id config_dir;\t/* ID config dir      */\n\tint prop_index;\t\t/* current property   */\n\tint val_index;\t\t/* current value      */\n\tchar **val_list;       \t/* value list         */\n};\n#endif\n\nstruct REMOTE_CONFIG_INFO remote_config;  /* Remote configuration buffer and\n\t\t\t\t\t     pointer info */\nint input_from_file = 1;     /* A boolean flag, which when set, indicates that\n\t\t\t        the input is to be taken from the configuration\n\t\t\t        file, instead of the remote-configuration buffer\n\t\t\t     */\n\nint old_config_style = 1;    /* A boolean flag, which when set,\n\t\t\t      * indicates that the old configuration\n\t\t\t      * format with a newline at the end of\n\t\t\t      * every command is being used\n\t\t\t      */\nint\tcryptosw;\t\t/* crypto command called */\n\nextern int sys_maxclock;\nextern char *stats_drift_file;\t/* name of the driftfile */\nextern char *leapseconds_file_name; /*name of the leapseconds file */\n#ifdef HAVE_IPTOS_SUPPORT\nextern unsigned int qos;\t\t\t\t/* QoS setting */\n#endif /* HAVE_IPTOS_SUPPORT */\n\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n/*\n * backwards compatibility flags\n */\nbc_entry bc_list[] = {\n\t{ T_Bc_bugXXXX,\t\t1\t}\t/* default enabled */\n};\n\n/*\n * declare an int pointer for each flag for quick testing without\n * walking bc_list.  If the pointer is consumed by libntp rather\n * than ntpd, declare it in a libntp source file pointing to storage\n * initialized with the appropriate value for other libntp clients, and\n * redirect it to point into bc_list during ntpd startup.\n */\nint *p_bcXXXX_enabled = &bc_list[0].enabled;\n#endif\n\n/* FUNCTION PROTOTYPES */\n\nstatic void init_syntax_tree(config_tree *);\nstatic void apply_enable_disable(attr_val_fifo *q, int enable);\n\n#ifdef FREE_CFG_T\nstatic void free_auth_node(config_tree *);\n\nstatic void free_config_other_modes(config_tree *);\nstatic void free_config_auth(config_tree *);\nstatic void free_config_tos(config_tree *);\nstatic void free_config_monitor(config_tree *);\nstatic void free_config_access(config_tree *);\nstatic void free_config_tinker(config_tree *);\nstatic void free_config_system_opts(config_tree *);\nstatic void free_config_logconfig(config_tree *);\nstatic void free_config_phone(config_tree *);\nstatic void free_config_qos(config_tree *);\nstatic void free_config_setvar(config_tree *);\nstatic void free_config_ttl(config_tree *);\nstatic void free_config_trap(config_tree *);\nstatic void free_config_fudge(config_tree *);\nstatic void free_config_vars(config_tree *);\nstatic void free_config_peers(config_tree *);\nstatic void free_config_unpeers(config_tree *);\nstatic void free_config_nic_rules(config_tree *);\n#ifdef SIM\nstatic void free_config_sim(config_tree *);\n#endif\nstatic void destroy_address_fifo(address_fifo *);\n#define FREE_ADDRESS_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_address_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\n       void free_all_config_trees(void);\t/* atexit() */\nstatic void free_config_tree(config_tree *ptree);\n#endif\t/* FREE_CFG_T */\n\nstatic void destroy_restrict_node(restrict_node *my_node);\nstatic int is_sane_resolved_address(sockaddr_u *peeraddr, int hmode);\nstatic void save_and_apply_config_tree(void);\nstatic void destroy_int_fifo(int_fifo *);\n#define FREE_INT_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_int_fifo(pf);\t\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_string_fifo(string_fifo *);\n#define FREE_STRING_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_string_fifo(pf);\t\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_attr_val_fifo(attr_val_fifo *);\n#define FREE_ATTR_VAL_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_attr_val_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_filegen_fifo(filegen_fifo *);\n#define FREE_FILEGEN_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_filegen_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_restrict_fifo(restrict_fifo *);\n#define FREE_RESTRICT_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_restrict_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_setvar_fifo(setvar_fifo *);\n#define FREE_SETVAR_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_setvar_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_addr_opts_fifo(addr_opts_fifo *);\n#define FREE_ADDR_OPTS_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_addr_opts_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\n\nstatic void config_tos(config_tree *);\nstatic void config_monitor(config_tree *);\nstatic void config_tinker(config_tree *);\nstatic void config_system_opts(config_tree *);\nstatic void config_logconfig(config_tree *);\nstatic void config_vars(config_tree *);\n#ifdef SIM\nstatic sockaddr_u *get_next_address(address_node *addr);\nstatic void config_sim(config_tree *);\nstatic void config_ntpdsim(config_tree *);\n#else\t/* !SIM follows */\nstatic void config_ntpd(config_tree *);\nstatic void config_other_modes(config_tree *);\nstatic void config_auth(config_tree *);\nstatic void config_access(config_tree *);\nstatic void config_phone(config_tree *);\nstatic void config_qos(config_tree *);\nstatic void config_setvar(config_tree *);\nstatic void config_ttl(config_tree *);\nstatic void config_trap(config_tree *);\nstatic void config_fudge(config_tree *);\nstatic void config_peers(config_tree *);\nstatic void config_unpeers(config_tree *);\nstatic void config_nic_rules(config_tree *);\nstatic u_char get_correct_host_mode(int token);\nstatic int peerflag_bits(peer_node *);\n#endif\t/* !SIM */\n\n#ifdef WORKER\nvoid peer_name_resolved(int, int, void *, const char *, const char *,\n\t\t\tconst struct addrinfo *,\n\t\t\tconst struct addrinfo *);\nvoid unpeer_name_resolved(int, int, void *, const char *, const char *,\n\t\t\t  const struct addrinfo *,\n\t\t\t  const struct addrinfo *);\nvoid trap_name_resolved(int, int, void *, const char *, const char *,\n\t\t\tconst struct addrinfo *,\n\t\t\tconst struct addrinfo *);\n#endif\n\nenum gnn_type {\n\tt_UNK,\t\t/* Unknown */\n\tt_REF,\t\t/* Refclock */\n\tt_MSK\t\t/* Network Mask */\n};\n\nvoid ntpd_set_tod_using(const char *);\nstatic char * normal_dtoa(double);\nstatic unsigned long get_pfxmatch(char **s, struct masks *m);\nstatic unsigned long get_match(char *s, struct masks *m);\nstatic unsigned long get_logmask(char *s);\n#ifndef SIM\nstatic int getnetnum(const char *num, sockaddr_u *addr, int complain,\n\t\t     enum gnn_type a_type);\n#endif\n\n\n/* FUNCTIONS FOR INITIALIZATION\n * ----------------------------\n */\n\n#ifdef FREE_CFG_T\nstatic void\nfree_auth_node(\n\tconfig_tree *ptree\n\t)\n{\n\tif (ptree->auth.keys) {\n\t\tfree(ptree->auth.keys);\n\t\tptree->auth.keys = NULL;\n\t}\n\n\tif (ptree->auth.keysdir) {\n\t\tfree(ptree->auth.keysdir);\n\t\tptree->auth.keysdir = NULL;\n\t}\n\n\tif (ptree->auth.ntp_signd_socket) {\n\t\tfree(ptree->auth.ntp_signd_socket);\n\t\tptree->auth.ntp_signd_socket = NULL;\n\t}\n}\n#endif /* DEBUG */\n\n\nstatic void\ninit_syntax_tree(\n\tconfig_tree *ptree\n\t)\n{\n\tmemset(ptree, 0, sizeof(*ptree));\n}\n\n\n#ifdef FREE_CFG_T\nvoid\nfree_all_config_trees(void)\n{\n\tconfig_tree *ptree;\n\tconfig_tree *pnext;\n\n\tptree = cfg_tree_history;\n\n\twhile (ptree != NULL) {\n\t\tpnext = ptree->link;\n\t\tfree_config_tree(ptree);\n\t\tptree = pnext;\n\t}\n}\n\n\nstatic void\nfree_config_tree(\n\tconfig_tree *ptree\n\t)\n{\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n\n\tif (ptree->source.value.s != NULL)\n\t\tfree(ptree->source.value.s);\n\n\tfree_config_other_modes(ptree);\n\tfree_config_auth(ptree);\n\tfree_config_tos(ptree);\n\tfree_config_monitor(ptree);\n\tfree_config_access(ptree);\n\tfree_config_tinker(ptree);\n\tfree_config_system_opts(ptree);\n\tfree_config_logconfig(ptree);\n\tfree_config_phone(ptree);\n\tfree_config_qos(ptree);\n\tfree_config_setvar(ptree);\n\tfree_config_ttl(ptree);\n\tfree_config_trap(ptree);\n\tfree_config_fudge(ptree);\n\tfree_config_vars(ptree);\n\tfree_config_peers(ptree);\n\tfree_config_unpeers(ptree);\n\tfree_config_nic_rules(ptree);\n#ifdef SIM\n\tfree_config_sim(ptree);\n#endif\n\tfree_auth_node(ptree);\n\n\tfree(ptree);\n\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n}\n#endif /* FREE_CFG_T */\n\n\n#ifdef SAVECONFIG\n/* Dump all trees */\nint\ndump_all_config_trees(\n\tFILE *df,\n\tint comment\n\t) \n{\n\tconfig_tree *\tcfg_ptr;\n\tint\t\treturn_value;\n\n\treturn_value = 0;\n\tfor (cfg_ptr = cfg_tree_history;\n\t     cfg_ptr != NULL; \n\t     cfg_ptr = cfg_ptr->link) \n\t\treturn_value |= dump_config_tree(cfg_ptr, df, comment);\n\n\treturn return_value;\n}\n\n\n/* The config dumper */\nint\ndump_config_tree(\n\tconfig_tree *ptree,\n\tFILE *df,\n\tint comment\n\t)\n{\n\tpeer_node *peern;\n\tunpeer_node *unpeern;\n\tattr_val *atrv;\n\taddress_node *addr;\n\taddress_node *peer_addr;\n\taddress_node *fudge_addr;\n\tfilegen_node *fgen_node;\n\trestrict_node *rest_node;\n\taddr_opts_node *addr_opts;\n\tsetvar_node *setv_node;\n\tnic_rule_node *rule_node;\n\tint_node *i_n;\n\tint_node *flags;\n\tstring_node *str_node;\n\n\tconst char *s;\n\tchar *s1;\n\tchar *s2;\n\tchar timestamp[80];\n\tint enable;\n\n\tDPRINTF(1, (\"dump_config_tree(%p)\\n\", ptree));\n\n\tif (comment) {\n\t\tif (!strftime(timestamp, sizeof(timestamp),\n\t\t\t      \"%Y-%m-%d %H:%M:%S\",\n\t\t\t      localtime(&ptree->timestamp)))\n\t\t\ttimestamp[0] = '\\0';\n\n\t\tfprintf(df, \"# %s %s %s\\n\",\n\t\t\ttimestamp,\n\t\t\t(CONF_SOURCE_NTPQ == ptree->source.attr)\n\t\t\t    ? \"ntpq remote config from\"\n\t\t\t    : \"startup configuration file\",\n\t\t\tptree->source.value.s);\n\t}\n\n\t/* For options I didn't find documentation I'll just output its name and the cor. value */\n\tatrv = HEAD_PFIFO(ptree->vars);\n\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\tdefault:\n\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\"# unknown vars type %d (%s) for %s\\n\",\n\t\t\t\tatrv->type, token_name(atrv->type),\n\t\t\t\ttoken_name(atrv->attr));\n\t\t\tbreak;\n#endif\n\t\tcase T_Double:\n\t\t\tfprintf(df, \"%s %s\\n\", keyword(atrv->attr),\n\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\tbreak;\n\t\t\t\n\t\tcase T_Integer:\n\t\t\tfprintf(df, \"%s %d\\n\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\t\tbreak;\n\n\t\tcase T_String:\n\t\t\tfprintf(df, \"%s \\\"%s\\\"\", keyword(atrv->attr),\n\t\t\t\tatrv->value.s);\n\t\t\tif (T_Driftfile == atrv->attr &&\n\t\t\t    atrv->link != NULL &&\n\t\t\t    T_WanderThreshold == atrv->link->attr) {\n\t\t\t\tatrv = atrv->link;\n\t\t\t\tfprintf(df, \" %s\\n\",\n\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t} else {\n\t\t\t\tfprintf(df, \"\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->logconfig);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"logconfig\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %c%s\", atrv->attr, atrv->value.s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->stats_dir)\n\t\tfprintf(df, \"statsdir \\\"%s\\\"\\n\", ptree->stats_dir);\n\n\ti_n = HEAD_PFIFO(ptree->stats_list);\n\tif (i_n != NULL) {\n\t\tfprintf(df, \"statistics\");\n\t\tfor ( ; i_n != NULL; i_n = i_n->link)\n\t\t\tfprintf(df, \" %s\", keyword(i_n->i));\t\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tfgen_node = HEAD_PFIFO(ptree->filegen_opts);\n\tfor ( ; fgen_node != NULL; fgen_node = fgen_node->link) {\n\t\tatrv = HEAD_PFIFO(fgen_node->options);\n\t\tif (atrv != NULL) {\n\t\t\tfprintf(df, \"filegen %s\", \n\t\t\t\tkeyword(fgen_node->filegen_token));\n\t\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\t\tswitch (atrv->attr) {\n#ifdef DEBUG\n\t\t\t\tdefault:\n\t\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\t\"# unknown filegen option token %s\\n\"\n\t\t\t\t\t\t\"filegen %s\",\n\t\t\t\t\t\ttoken_name(atrv->attr),\n\t\t\t\t\t\tkeyword(fgen_node->filegen_token));\n\t\t\t\t\tbreak;\n#endif\n\t\t\t\tcase T_File:\n\t\t\t\t\tfprintf(df, \" file %s\",\n\t\t\t\t\t\tatrv->value.s);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Type:\n\t\t\t\t\tfprintf(df, \" type %s\",\n\t\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Flag:\n\t\t\t\t\tfprintf(df, \" %s\",\n\t\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->auth.crypto_cmd_list);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"crypto\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tfprintf(df, \" %s %s\", keyword(atrv->attr),\n\t\t\t\tatrv->value.s);\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->auth.revoke != 0)\n\t\tfprintf(df, \"revoke %d\\n\", ptree->auth.revoke);\n\n\tif (ptree->auth.keysdir != NULL)\n\t\tfprintf(df, \"keysdir \\\"%s\\\"\\n\", ptree->auth.keysdir);\n\n\tif (ptree->auth.keys != NULL)\n\t\tfprintf(df, \"keys \\\"%s\\\"\\n\", ptree->auth.keys);\n\n\tatrv = HEAD_PFIFO(ptree->auth.trusted_key_list);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"trustedkey\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tif (T_Integer == atrv->type)\n\t\t\t\tfprintf(df, \" %d\", atrv->value.i);\n\t\t\telse if (T_Intrange == atrv->type)\n\t\t\t\tfprintf(df, \" (%d ... %d)\",\n\t\t\t\t\tatrv->value.r.first,\n\t\t\t\t\tatrv->value.r.last);\n#ifdef DEBUG\n\t\t\telse\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown trustedkey attr type %d\\n\"\n\t\t\t\t\t\"trustedkey\", atrv->type);\n#endif\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->auth.control_key)\n\t\tfprintf(df, \"controlkey %d\\n\", ptree->auth.control_key);\n\n\tif (ptree->auth.request_key)\n\t\tfprintf(df, \"requestkey %d\\n\", ptree->auth.request_key);\n\n\t/* dump enable list, then disable list */\n\tfor (enable = 1; enable >= 0; enable--) {\n\t\tatrv = (enable)\n\t\t\t   ? HEAD_PFIFO(ptree->enable_opts)\n\t\t\t   : HEAD_PFIFO(ptree->disable_opts);\n\t\tif (atrv != NULL) {\n\t\t\tfprintf(df, (enable)\n\t\t\t\t\t? \"enable\"\n\t\t\t\t\t: \"disable\");\n\t\t\tfor ( ; atrv != NULL; atrv = atrv->link)\n\t\t\t\tfprintf(df, \" %s\",\n\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->orphan_cmds);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"tos\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\t\tdefault:\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown tos attr type %d %s\\n\"\n\t\t\t\t\t\"tos\", atrv->type, \n\t\t\t\t\ttoken_name(atrv->type));\n\t\t\t\tbreak;\n#endif\n\t\t\tcase T_Double:\n\t\t\t\tfprintf(df, \" %s %s\", \n\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->tinker);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"tinker\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tNTP_INSIST(T_Double == atrv->type);\n\t\t\tfprintf(df, \" %s %s\", keyword(atrv->attr),\n\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->broadcastclient)\n\t\tfprintf(df, \"broadcastclient\\n\");\n\n\tpeern = HEAD_PFIFO(ptree->peers);\n\tfor ( ; peern != NULL; peern = peern->link) {\n\t\taddr = peern->addr;\n\t\tfprintf(df, \"%s\", keyword(peern->host_mode));\n\t\tswitch (addr->type) {\n#ifdef DEBUG\n\t\tdefault:\n\t\t\tfprintf(df, \"# dump error:\\n\"\n\t\t\t\t\"# unknown peer family %d for:\\n\"\n\t\t\t\t\"%s\", addr->type,\n\t\t\t\tkeyword(peern->host_mode));\n\t\t\tbreak;\n#endif\n\t\tcase AF_UNSPEC:\n\t\t\tbreak;\n\n\t\tcase AF_INET:\n\t\t\tfprintf(df, \" -4\");\n\t\t\tbreak;\n\n\t\tcase AF_INET6:\n\t\t\tfprintf(df, \" -6\");\n\t\t\tbreak;\n\t\t}\n\t\tfprintf(df, \" %s\", addr->address);\n\t\t\n\t\tif (peern->minpoll != 0)\n\t\t\tfprintf(df, \" minpoll %u\", peern->minpoll);\n\n\t\tif (peern->maxpoll != 0)\n\t\t\tfprintf(df, \" maxpoll %u\", peern->maxpoll);\n\n\t\tif (peern->ttl != 0) {\n\t\t\tif (strlen(addr->address) > 8\n\t\t\t    && !memcmp(addr->address, \"127.127.\", 8))\n\t\t\t\tfprintf(df, \" mode %u\", peern->ttl);\n\t\t\telse\n\t\t\t\tfprintf(df, \" ttl %u\", peern->ttl);\n\t\t}\n\n\t\tif (peern->peerversion != NTP_VERSION)\n\t\t\tfprintf(df, \" version %u\", peern->peerversion);\n\n\t\tif (peern->peerkey != 0)\n\t\t\tfprintf(df, \" key %u\", peern->peerkey);\n\n\t\tif (peern->group != NULL)\n\t\t\tfprintf(df, \" ident \\\"%s\\\"\", peern->group);\n\n\t\tatrv = HEAD_PFIFO(peern->peerflags);\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tNTP_INSIST(T_Flag == atrv->attr);\n\t\t\tNTP_INSIST(T_Integer == atrv->type);\n\t\t\tfprintf(df, \" %s\", keyword(atrv->value.i));\n\t\t}\n\n\t\tfprintf(df, \"\\n\");\n\t\t\n\t\taddr_opts = HEAD_PFIFO(ptree->fudge);\n\t\tfor ( ; addr_opts != NULL; addr_opts = addr_opts->link) {\n\t\t\tpeer_addr = peern->addr;\n\t\t\tfudge_addr = addr_opts->addr;\n\n\t\t\ts1 = peer_addr->address;\n\t\t\ts2 = fudge_addr->address;\n\n\t\t\tif (strcmp(s1, s2))\n\t\t\t\tcontinue;\n\n\t\t\tfprintf(df, \"fudge %s\", s1);\n\n\t\t\tfor (atrv = HEAD_PFIFO(addr_opts->options);\n\t\t\t     atrv != NULL;\n\t\t\t     atrv = atrv->link) {\n\n\t\t\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\t\t\tdefault:\n\t\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\t\"# unknown fudge atrv->type %d\\n\"\n\t\t\t\t\t\t\"fudge %s\", atrv->type,\n\t\t\t\t\t\ts1);\n\t\t\t\t\tbreak;\n#endif\n\t\t\t\tcase T_Double:\n\t\t\t\t\tfprintf(df, \" %s %s\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Integer:\n\t\t\t\t\tfprintf(df, \" %s %d\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tatrv->value.i);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_String:\n\t\t\t\t\tfprintf(df, \" %s %s\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tatrv->value.s);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\taddr = HEAD_PFIFO(ptree->manycastserver);\n\tif (addr != NULL) {\n\t\tfprintf(df, \"manycastserver\");\n\t\tfor ( ; addr != NULL; addr = addr->link)\n\t\t\tfprintf(df, \" %s\", addr->address);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\taddr = HEAD_PFIFO(ptree->multicastclient);\n\tif (addr != NULL) {\n\t\tfprintf(df, \"multicastclient\");\n\t\tfor ( ; addr != NULL; addr = addr->link)\n\t\t\tfprintf(df, \" %s\", addr->address);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\t\n\tfor (unpeern = HEAD_PFIFO(ptree->unpeers);\n\t     unpeern != NULL;\n\t     unpeern = unpeern->link)\n\t\tfprintf(df, \"unpeer %s\\n\", unpeern->addr->address);\n\n\tatrv = HEAD_PFIFO(ptree->mru_opts);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"mru\");\n\t\tfor ( ;\tatrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s %d\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->discard_opts);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"discard\");\n\t\tfor ( ;\tatrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s %d\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\t\n\tfor (rest_node = HEAD_PFIFO(ptree->restrict_opts);\n\t     rest_node != NULL; \n\t     rest_node = rest_node->link) {\n\n\t\tif (NULL == rest_node->addr) {\n\t\t\ts = \"default\";\t\t\t\n\t\t\tflags = HEAD_PFIFO(rest_node->flags);\n\t\t\tfor ( ; flags != NULL; flags = flags->link)\n\t\t\t\tif (T_Source == flags->i) {\n\t\t\t\t\ts = \"source\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t} else {\n\t\t\ts = rest_node->addr->address;\n\t\t}\n\t\tfprintf(df, \"restrict %s\", s);\n\t\tif (rest_node->mask != NULL)\n\t\t\tfprintf(df, \" mask %s\",\n\t\t\t\trest_node->mask->address);\n\t\tflags = HEAD_PFIFO(rest_node->flags);\n\t\tfor ( ; flags != NULL; flags = flags->link)\n\t\t\tif (T_Source != flags->i)\n\t\t\t\tfprintf(df, \" %s\", keyword(flags->i));\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\trule_node = HEAD_PFIFO(ptree->nic_rules);\n\tfor ( ; rule_node != NULL; rule_node = rule_node->link) {\n\t\tfprintf(df, \"interface %s %s\\n\",\n\t\t\tkeyword(rule_node->action),\n\t\t\t(rule_node->match_class)\n\t\t\t    ? keyword(rule_node->match_class)\n\t\t\t    : rule_node->if_name);\n\t}\n\n\tstr_node = HEAD_PFIFO(ptree->phone);\n\tif (str_node != NULL) {\n\t\tfprintf(df, \"phone\");\n\t\tfor ( ; str_node != NULL; str_node = str_node->link)\n\t\t\tfprintf(df, \" \\\"%s\\\"\", str_node->s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->qos);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"qos\");\n\t\tfor (; atrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s\", atrv->value.s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tsetv_node = HEAD_PFIFO(ptree->setvar);\n\tfor ( ; setv_node != NULL; setv_node = setv_node->link) {\n\t\ts1 = quote_if_needed(setv_node->var);\n\t\ts2 = quote_if_needed(setv_node->val);\n\t\tfprintf(df, \"setvar %s = %s\", s1, s2);\n\t\tfree(s1);\n\t\tfree(s2);\n\t\tif (setv_node->isdefault)\n\t\t\tfprintf(df, \" default\");\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\ti_n = HEAD_PFIFO(ptree->ttl);\n\tif (i_n != NULL) {\n\t\tfprintf(df, \"ttl\");\n\t\tfor( ; i_n != NULL; i_n = i_n->link)\n\t\t\tfprintf(df, \" %d\", i_n->i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\t\n\taddr_opts = HEAD_PFIFO(ptree->trap);\n\tfor ( ; addr_opts != NULL; addr_opts = addr_opts->link) {\n\t\taddr = addr_opts->addr;\n\t\tfprintf(df, \"trap %s\", addr->address);\n\t\tatrv = HEAD_PFIFO(addr_opts->options);\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tswitch (atrv->attr) {\n#ifdef DEBUG\n\t\t\tdefault:\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown trap token %d\\n\"\n\t\t\t\t\t\"trap %s\", atrv->attr,\n\t\t\t\t\taddr->address);\n\t\t\t\tbreak;\n#endif\n\t\t\tcase T_Port:\n\t\t\t\tfprintf(df, \" port %d\", atrv->value.i);\n\t\t\t\tbreak;\n\n\t\t\tcase T_Interface:\n\t\t\t\tfprintf(df, \" interface %s\",\n\t\t\t\t\tatrv->value.s);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\treturn 0;\n}\n#endif\t/* SAVECONFIG */\n\t\n\n\n/* generic fifo routines for structs linked by 1st member */\nvoid *\nappend_gen_fifo(\n\tvoid *fifo,\n\tvoid *entry\n\t)\n{\n\tgen_fifo *pf;\n\tgen_node *pe;\n\n\tpf = fifo;\n\tpe = entry;\n\tif (NULL == pf)\n\t\tpf = emalloc_zero(sizeof(*pf));\n\tif (pe != NULL)\n\t\tLINK_FIFO(*pf, pe, link);\n\n\treturn pf;\n}\n\n\nvoid *\nconcat_gen_fifos(\n\tvoid *first,\n\tvoid *second\n\t)\n{\n\tgen_fifo *pf1;\n\tgen_fifo *pf2;\n\n\tpf1 = first;\n\tpf2 = second;\n\tif (NULL == pf1)\n\t\treturn pf2;\n\telse if (NULL == pf2)\n\t\treturn pf1;\n\n\tCONCAT_FIFO(*pf1, *pf2, link);\n\tfree(pf2);\n\n\treturn pf1;\n}\n\n\n/* FUNCTIONS FOR CREATING NODES ON THE SYNTAX TREE\n * -----------------------------------------------\n */\n\nattr_val *\ncreate_attr_dval(\n\tint attr,\n\tdouble value\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.d = value;\n\tmy_val->type = T_Double;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_ival(\n\tint attr,\n\tint value\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.i = value;\n\tmy_val->type = T_Integer;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_rangeval(\n\tint\tattr,\n\tint\tfirst,\n\tint\tlast\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.r.first = first;\n\tmy_val->value.r.last = last;\n\tmy_val->type = T_Intrange;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_sval(\n\tint attr,\n\tchar *s\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tif (NULL == s)\t\t\t/* free() hates NULL */\n\t\ts = estrdup(\"\");\n\tmy_val->value.s = s;\n\tmy_val->type = T_String;\n\n\treturn my_val;\n}\n\n\nint_node *\ncreate_int_node(\n\tint val\n\t)\n{\n\tint_node *i_n;\n\t\n\ti_n = emalloc_zero(sizeof(*i_n));\n\ti_n->i = val;\n\n\treturn i_n;\n}\n\n\nstring_node *\ncreate_string_node(\n\tchar *str\n\t)\n{\n\tstring_node *sn;\n\t\n\tsn = emalloc_zero(sizeof(*sn));\n\tsn->s = str;\n\n\treturn sn;\n}\n\n\naddress_node *\ncreate_address_node(\n\tchar *\taddr,\n\tint\ttype\n\t)\n{\n\taddress_node *my_node;\n\n\tNTP_REQUIRE(NULL != addr);\n\tNTP_REQUIRE(AF_INET == type || \n\t\t    AF_INET6 == type || AF_UNSPEC == type);\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->address = addr;\n\tmy_node->type = (u_short)type;\n\n\treturn my_node;\n}\n\n\nvoid\ndestroy_address_node(\n\taddress_node *my_node\n\t)\n{\n\tif (NULL == my_node)\n\t\treturn;\n\tNTP_REQUIRE(NULL != my_node->address);\n\n\tfree(my_node->address);\n\tfree(my_node);\n}\n\n\npeer_node *\ncreate_peer_node(\n\tint\t\thmode,\n\taddress_node *\taddr,\n\tattr_val_fifo *\toptions\n\t)\n{\n\tpeer_node *my_node;\n\tattr_val *option;\n\tint freenode;\n\tint errflag = 0;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\n\t/* Initialize node values to default */\n\tmy_node->peerversion = NTP_VERSION;\n\n\t/* Now set the node to the read values */\n\tmy_node->host_mode = hmode;\n\tmy_node->addr = addr;\n\n\t/*\n\t * the options FIFO mixes items that will be saved in the\n\t * peer_node as explicit members, such as minpoll, and\n\t * those that are moved intact to the peer_node's peerflags\n\t * FIFO.  The options FIFO is consumed and reclaimed here.\n\t */\n\n\twhile (options != NULL) {\n\t\tUNLINK_FIFO(option, *options, link);\n\t\tif (NULL == option) {\n\t\t\tfree(options);\n\t\t\tbreak;\n\t\t}\n\n\t\tfreenode = 1;\n\t\t/* Check the kind of option being set */\n\t\tswitch (option->attr) {\n\n\t\tcase T_Flag:\n\t\t\tAPPEND_G_FIFO(my_node->peerflags, option);\n\t\t\tfreenode = 0;\n\t\t\tbreak;\n\n\t\tcase T_Minpoll:\n\t\t\tif (option->value.i < NTP_MINPOLL ||\n\t\t\t    option->value.i > UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\t\"minpoll: provided value (%d) is out of range [%d-%d])\",\n\t\t\t\t\toption->value.i, NTP_MINPOLL,\n\t\t\t\t\tUCHAR_MAX);\n\t\t\t\tmy_node->minpoll = NTP_MINPOLL;\n\t\t\t} else {\n\t\t\t\tmy_node->minpoll = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Maxpoll:\n\t\t\tif (option->value.i < 0 ||\n\t\t\t    option->value.i > NTP_MAXPOLL) {\n\t\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\t\"maxpoll: provided value (%d) is out of range [0-%d])\",\n\t\t\t\t\toption->value.i, NTP_MAXPOLL);\n\t\t\t\tmy_node->maxpoll = NTP_MAXPOLL;\n\t\t\t} else {\n\t\t\t\tmy_node->maxpoll = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Ttl:\n\t\t\tif (option->value.u >= MAX_TTL) {\n\t\t\t\tmsyslog(LOG_ERR, \"ttl: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->ttl = (u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Mode:\n\t\t\tif (option->value.u >= UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"mode: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->ttl = (u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Key:\n\t\t\tif (option->value.u >= KEYID_T_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"key: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->peerkey = \n\t\t\t\t\t(keyid_t)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Version:\n\t\t\tif (option->value.u >= UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"version: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->peerversion = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\tmy_node->group = option->value.s;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\"Unknown peer/server option token %s\",\n\t\t\t\ttoken_name(option->attr));\n\t\t\terrflag = 1;\n\t\t}\n\t\tif (freenode)\n\t\t\tfree(option);\n\t}\n\n\t/* Check if errors were reported. If yes, ignore the node */\n\tif (errflag) {\n\t\tfree(my_node);\n\t\tmy_node = NULL;\n\t}\n\n\treturn my_node;\n}\n\n\nunpeer_node *\ncreate_unpeer_node(\n\taddress_node *addr\n\t)\n{\n\tunpeer_node *\tmy_node;\n\tu_int\t\tu;\n\tchar *\t\tpch;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\n\t/*\n\t * From the parser's perspective an association ID fits into\n\t * its generic T_String definition of a name/address \"address\".\n\t * We treat all valid 16-bit numbers as association IDs.\n\t */\n\tpch = addr->address;\n\twhile (*pch && isdigit(*pch))\n\t\tpch++;\n\n\tif (!*pch \n\t    && 1 == sscanf(addr->address, \"%u\", &u)\n\t    && u <= ASSOCID_MAX) {\n\t\tmy_node->assocID = (associd_t)u;\n\t\tdestroy_address_node(addr);\n\t\tmy_node->addr = NULL;\n\t} else {\n\t\tmy_node->assocID = 0;\n\t\tmy_node->addr = addr;\n\t}\n\n\treturn my_node;\n}\n\nfilegen_node *\ncreate_filegen_node(\n\tint\t\tfilegen_token,\n\tattr_val_fifo *\toptions\n\t)\n{\n\tfilegen_node *my_node;\n\t\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->filegen_token = filegen_token;\n\tmy_node->options = options;\n\n\treturn my_node;\n}\n\n\nrestrict_node *\ncreate_restrict_node(\n\taddress_node *\taddr,\n\taddress_node *\tmask,\n\tint_fifo *\tflags,\n\tint\t\tline_no\n\t)\n{\n\trestrict_node *my_node;\n\t\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->addr = addr;\n\tmy_node->mask = mask;\n\tmy_node->flags = flags;\n\tmy_node->line_no = line_no;\n\n\treturn my_node;\n}\n\n\nstatic void\ndestroy_restrict_node(\n\trestrict_node *my_node\n\t)\n{\n\t/* With great care, free all the memory occupied by\n\t * the restrict node\n\t */\n\tdestroy_address_node(my_node->addr);\n\tdestroy_address_node(my_node->mask);\n\tdestroy_int_fifo(my_node->flags);\n\tfree(my_node);\n}\n\n\nstatic void\ndestroy_int_fifo(\n\tint_fifo *\tfifo\n\t)\n{\n\tint_node *\ti_n;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(i_n, *fifo, link);\n\t\t\tif (i_n != NULL)\n\t\t\t\tfree(i_n);\n\t\t} while (i_n != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_string_fifo(\n\tstring_fifo *\tfifo\n\t)\n{\n\tstring_node *\tsn;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(sn, *fifo, link);\n\t\t\tif (sn != NULL) {\n\t\t\t\tif (sn->s != NULL)\n\t\t\t\t\tfree(sn->s);\n\t\t\t\tfree(sn);\n\t\t\t}\n\t\t} while (sn != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_attr_val_fifo(\n\tattr_val_fifo *\tav_fifo\n\t)\n{\n\tattr_val *\tav;\n\n\tif (av_fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(av, *av_fifo, link);\n\t\t\tif (av != NULL) {\n\t\t\t\tif (T_String == av->type)\n\t\t\t\t\tfree(av->value.s);\n\t\t\t\tfree(av);\n\t\t\t}\n\t\t} while (av != NULL);\n\t\tfree(av_fifo);\n\t}\n}\n\n\nstatic void\ndestroy_filegen_fifo(\n\tfilegen_fifo *\tfifo\n\t)\n{\n\tfilegen_node *\tfg;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(fg, *fifo, link);\n\t\t\tif (fg != NULL) {\n\t\t\t\tdestroy_attr_val_fifo(fg->options);\n\t\t\t\tfree(fg);\n\t\t\t}\n\t\t} while (fg != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_restrict_fifo(\n\trestrict_fifo *\tfifo\n\t)\n{\n\trestrict_node *\trn;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(rn, *fifo, link);\n\t\t\tif (rn != NULL)\n\t\t\t\tdestroy_restrict_node(rn);\n\t\t} while (rn != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_setvar_fifo(\n\tsetvar_fifo *\tfifo\n\t)\n{\n\tsetvar_node *\tsv;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(sv, *fifo, link);\n\t\t\tif (sv != NULL) {\n\t\t\t\tfree(sv->var);\n\t\t\t\tfree(sv->val);\n\t\t\t\tfree(sv);\n\t\t\t}\n\t\t} while (sv != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_addr_opts_fifo(\n\taddr_opts_fifo *\tfifo\n\t)\n{\n\taddr_opts_node *\taon;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(aon, *fifo, link);\n\t\t\tif (aon != NULL) {\n\t\t\t\tdestroy_address_node(aon->addr);\n\t\t\t\tdestroy_attr_val_fifo(aon->options);\n\t\t\t\tfree(aon);\n\t\t\t}\n\t\t} while (aon != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nsetvar_node *\ncreate_setvar_node(\n\tchar *\tvar,\n\tchar *\tval,\n\tint\tisdefault\n\t)\n{\n\tsetvar_node *\tmy_node;\n\tchar *\t\tpch;\n\n\t/* do not allow = in the variable name */\n\tpch = strchr(var, '=');\n\tif (NULL != pch)\n\t\t*pch = '\\0';\n\n\t/* Now store the string into a setvar_node */\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->var = var;\n\tmy_node->val = val;\n\tmy_node->isdefault = isdefault;\n\n\treturn my_node;\n}\n\n\nnic_rule_node *\ncreate_nic_rule_node(\n\tint match_class,\n\tchar *if_name,\t/* interface name or numeric address */\n\tint action\n\t)\n{\n\tnic_rule_node *my_node;\n\t\n\tNTP_REQUIRE(match_class != 0 || if_name != NULL);\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->match_class = match_class;\n\tmy_node->if_name = if_name;\n\tmy_node->action = action;\n\n\treturn my_node;\n}\n\n\naddr_opts_node *\ncreate_addr_opts_node(\n\taddress_node *\taddr,\n\tattr_val_fifo *\toptions\n\t)\n{\n\taddr_opts_node *my_node;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->addr = addr;\n\tmy_node->options = options;\n\n\treturn my_node;\n}\n\n\nscript_info *\ncreate_sim_script_info(\n\tdouble\t\tduration,\n\tattr_val_fifo *\tscript_queue\n\t)\n{\n#ifndef SIM\n\treturn NULL;\n#else\t/* SIM follows */\n\tscript_info *my_info;\n\tattr_val *my_attr_val;\n\n\tmy_info = emalloc_zero(sizeof(*my_info));\n\n\t/* Initialize Script Info with default values*/\n\tmy_info->duration = duration;\n\tmy_info->prop_delay = NET_DLY;\n\tmy_info->proc_delay = PROC_DLY;\n\n\t/* Traverse the script_queue and fill out non-default values */\n\t\n\tfor (my_attr_val = HEAD_PFIFO(script_queue);\n\t     my_attr_val != NULL;\n\t     my_attr_val = my_attr_val->link) {\n\n\t\t/* Set the desired value */\n\t\tswitch (my_attr_val->attr) {\n\n\t\tcase T_Freq_Offset:\n\t\t\tmy_info->freq_offset = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Wander:\n\t\t\tmy_info->wander = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Jitter:\n\t\t\tmy_info->jitter = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Prop_Delay:\n\t\t\tmy_info->prop_delay = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Proc_Delay:\n\t\t\tmy_info->proc_delay = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR, \"Unknown script token %d\",\n\t\t\t\tmy_attr_val->attr);\n\t\t}\n\t}\n\n\treturn my_info;\n#endif\t/* SIM */\n}\n\n\n#ifdef SIM\nstatic sockaddr_u *\nget_next_address(\n\taddress_node *addr\n\t)\n{\n\tconst char addr_prefix[] = \"192.168.0.\";\n\tstatic int curr_addr_num = 1;\n#define ADDR_LENGTH 16 + 1\t/* room for 192.168.1.255 */\n\tchar addr_string[ADDR_LENGTH];\n\tsockaddr_u *final_addr;\n\tstruct addrinfo *ptr;\n\tint gai_error;\n\t\n\tfinal_addr = emalloc(sizeof(*final_addr));\n\n\tif (addr->type == T_String) {\n\t\tsnprintf(addr_string, sizeof(addr_string), \"%s%d\",\n\t\t\t addr_prefix, curr_addr_num++);\n\t\tprintf(\"Selecting ip address %s for hostname %s\\n\",\n\t\t       addr_string, addr->address);\n\t\tgai_error = getaddrinfo(addr_string, \"ntp\", NULL, &ptr);\n\t} else {\n\t\tgai_error = getaddrinfo(addr->address, \"ntp\", NULL, &ptr);\n\t}\n\n\tif (gai_error) {\n\t\tfprintf(stderr, \"ERROR!! Could not get a new address\\n\");\n\t\texit(1);\n\t}\n\tmemcpy(final_addr, ptr->ai_addr, ptr->ai_addrlen);\n\tfprintf(stderr, \"Successful in setting ip address of simulated server to: %s\\n\",\n\t\tstoa(final_addr));\n\tfreeaddrinfo(ptr);\n\n\treturn final_addr;\n}\n#endif /* SIM */\n\n\nserver_info *\ncreate_sim_server(\n\taddress_node *\t\taddr,\n\tdouble\t\t\tserver_offset,\n\tscript_info_fifo *\tscript\n\t)\n{\n#ifndef SIM\n\treturn NULL;\n#else\t/* SIM follows */\n\tserver_info *my_info;\n\n\tmy_info = emalloc_zero(sizeof(*my_info));\n\tmy_info->server_time = server_offset;\n\tmy_info->addr = get_next_address(addr);\n\tmy_info->script = script;\n\tUNLINK_FIFO(my_info->curr_script, *my_info->script, link);\n\n\treturn my_info;\n#endif\t/* SIM */\n}\n\nsim_node *\ncreate_sim_node(\n\tattr_val_fifo *\t\tinit_opts,\n\tserver_info_fifo *\tservers\n\t)\n{\n\tsim_node *my_node;\n\t\n\tmy_node = emalloc(sizeof(*my_node));\n\tmy_node->init_opts = init_opts;\n\tmy_node->servers = servers;\n\n\treturn my_node;\n}\n\n\n\n\n/* FUNCTIONS FOR PERFORMING THE CONFIGURATION\n * ------------------------------------------\n */\n\n#ifndef SIM\nstatic void\nconfig_other_modes(\n\tconfig_tree *\tptree\n\t)\n{\n\tsockaddr_u\taddr_sock;\n\taddress_node *\taddr_node;\n\n\tif (ptree->broadcastclient)\n\t\tproto_config(PROTO_BROADCLIENT, ptree->broadcastclient,\n\t\t\t     0., NULL);\n\n\taddr_node = HEAD_PFIFO(ptree->manycastserver);\n\twhile (addr_node != NULL) {\n\t\tZERO_SOCK(&addr_sock);\n\t\tAF(&addr_sock) = addr_node->type;\n\t\tif (1 == getnetnum(addr_node->address, &addr_sock, 1,\n\t\t\t\t   t_UNK)) {\n\t\t\tproto_config(PROTO_MULTICAST_ADD,\n\t\t\t\t     0, 0., &addr_sock);\n\t\t\tsys_manycastserver = 1;\n\t\t}\n\t\taddr_node = addr_node->link;\n\t}\n\n\t/* Configure the multicast clients */\n\taddr_node = HEAD_PFIFO(ptree->multicastclient);\n\tif (addr_node != NULL) {\n\t\tdo {\n\t\t\tZERO_SOCK(&addr_sock);\n\t\t\tAF(&addr_sock) = addr_node->type;\n\t\t\tif (1 == getnetnum(addr_node->address,\n\t\t\t\t\t   &addr_sock, 1, t_UNK)) {\n\t\t\t\tproto_config(PROTO_MULTICAST_ADD, 0, 0.,\n\t\t\t\t\t     &addr_sock);\n\t\t\t}\n\t\t\taddr_node = addr_node->link;\n\t\t} while (addr_node != NULL);\n\t\tproto_config(PROTO_MULTICAST_ADD, 1, 0., NULL);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\ndestroy_address_fifo(\n\taddress_fifo *\tpfifo\n\t)\n{\n\taddress_node *\taddr_node;\n\n\tif (pfifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(addr_node, *pfifo, link);\n\t\t\tif (addr_node != NULL)\n\t\t\t\tdestroy_address_node(addr_node);\n\t\t} while (addr_node != NULL);\n\t\tfree(pfifo);\n\t}\n}\n\n\nstatic void\nfree_config_other_modes(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDRESS_FIFO(ptree->manycastserver);\n\tFREE_ADDRESS_FIFO(ptree->multicastclient);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_auth(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_val;\n\tint\t\tfirst;\n\tint\t\tlast;\n\tint\t\ti;\n#ifdef AUTOKEY\n\tint\t\titem;\n#endif\n\n\t/* Crypto Command */\n#ifdef AUTOKEY\n\titem = -1;\t/* quiet warning */\n\tmy_val = HEAD_PFIFO(ptree->auth.crypto_cmd_list);\n\tfor (; my_val != NULL; my_val = my_val->link) {\n\t\tswitch (my_val->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Host:\n\t\t\titem = CRYPTO_CONF_PRIV;\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\titem = CRYPTO_CONF_IDENT;\n\t\t\tbreak;\n\n\t\tcase T_Pw:\n\t\t\titem = CRYPTO_CONF_PW;\n\t\t\tbreak;\n\n\t\tcase T_Randfile:\n\t\t\titem = CRYPTO_CONF_RAND;\n\t\t\tbreak;\n\n\t\tcase T_Digest:\n\t\t\titem = CRYPTO_CONF_NID;\n\t\t\tbreak;\n\t\t}\n\t\tcrypto_config(item, my_val->value.s);\n\t}\n#endif\t/* AUTOKEY */\n\n\t/* Keysdir Command */\n\tif (ptree->auth.keysdir) {\n\t\tif (keysdir != default_keysdir)\n\t\t\tfree(keysdir);\n\t\tkeysdir = estrdup(ptree->auth.keysdir);\n\t}\n\n\n\t/* ntp_signd_socket Command */\n\tif (ptree->auth.ntp_signd_socket) {\n\t\tif (ntp_signd_socket != default_ntp_signd_socket)\n\t\t\tfree(ntp_signd_socket);\n\t\tntp_signd_socket = estrdup(ptree->auth.ntp_signd_socket);\n\t}\n\n#ifdef AUTOKEY\n\tif (ptree->auth.cryptosw && !cryptosw) {\n\t\tcrypto_setup();\n\t\tcryptosw = 1;\n\t}\n#endif\t/* AUTOKEY */\n\n\t/* Keys Command */\n\tif (ptree->auth.keys)\n\t\tgetauthkeys(ptree->auth.keys);\n\n\t/* Control Key Command */\n\tif (ptree->auth.control_key)\n\t\tctl_auth_keyid = (keyid_t)ptree->auth.control_key;\n\n\t/* Requested Key Command */\n\tif (ptree->auth.request_key) {\n\t\tDPRINTF(4, (\"set info_auth_keyid to %08lx\\n\",\n\t\t\t    (u_long) ptree->auth.request_key));\n\t\tinfo_auth_keyid = (keyid_t)ptree->auth.request_key;\n\t}\n\n\t/* Trusted Key Command */\n\tmy_val = HEAD_PFIFO(ptree->auth.trusted_key_list);\n\tfor (; my_val != NULL; my_val = my_val->link) {\n\t\tif (T_Integer == my_val->type)\n\t\t\tauthtrust(my_val->value.i, 1);\n\t\telse if (T_Intrange == my_val->type) {\n\t\t\tfirst = my_val->value.r.first;\n\t\t\tlast = my_val->value.r.last;\n\t\t\tif (first > last || first < 1 || last > 65534)\n\t\t\t\tmsyslog(LOG_NOTICE,\n\t\t\t\t\t\"Ignoring invalid trustedkey range %d ... %d, min 1 max 65534.\",\n\t\t\t\t\tfirst, last);\n\t\t\telse\n\t\t\t\tfor (i = first; i <= last; i++)\n\t\t\t\t\tauthtrust((keyid_t)i, 1);\n\t\t}\n\t}\n\n#ifdef AUTOKEY\n\t/* crypto revoke command */\n\tif (ptree->auth.revoke)\n\t\tsys_revoke = 1 << ptree->auth.revoke;\n#endif\t/* AUTOKEY */\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_auth(\n\tconfig_tree *ptree\n\t)\n{\n\tdestroy_attr_val_fifo(ptree->auth.crypto_cmd_list);\n\tptree->auth.crypto_cmd_list = NULL;\n\tdestroy_attr_val_fifo(ptree->auth.trusted_key_list);\n\tptree->auth.trusted_key_list = NULL;\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_tos(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *tos;\n\tint item;\n\n\titem = -1;\t/* quiet warning */\n\ttos = HEAD_PFIFO(ptree->orphan_cmds);\n\tfor (; tos != NULL; tos = tos->link) {\n\t\tswitch(tos->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Ceiling:\n\t\t\titem = PROTO_CEILING;\n\t\t\tbreak;\n\n\t\tcase T_Floor:\n\t\t\titem = PROTO_FLOOR;\n\t\t\tbreak;\n\n\t\tcase T_Cohort:\n\t\t\titem = PROTO_COHORT;\n\t\t\tbreak;\n\n\t\tcase T_Orphan:\n\t\t\titem = PROTO_ORPHAN;\n\t\t\tbreak;\n\n\t\tcase T_Orphanwait:\n\t\t\titem = PROTO_ORPHWAIT;\n\t\t\tbreak;\n\n\t\tcase T_Mindist:\n\t\t\titem = PROTO_MINDISP;\n\t\t\tbreak;\n\n\t\tcase T_Maxdist:\n\t\t\titem = PROTO_MAXDIST;\n\t\t\tbreak;\n\n\t\tcase T_Minclock:\n\t\t\titem = PROTO_MINCLOCK;\n\t\t\tbreak;\n\n\t\tcase T_Maxclock:\n\t\t\titem = PROTO_MAXCLOCK;\n\t\t\tbreak;\n\n\t\tcase T_Minsane:\n\t\t\titem = PROTO_MINSANE;\n\t\t\tbreak;\n\n\t\tcase T_Beacon:\n\t\t\titem = PROTO_BEACON;\n\t\t\tbreak;\n\t\t}\n\t\tproto_config(item, 0, tos->value.d, NULL);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_tos(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->orphan_cmds);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_monitor(\n\tconfig_tree *ptree\n\t)\n{\n\tint_node *pfilegen_token;\n\tconst char *filegen_string;\n\tconst char *filegen_file;\n\tFILEGEN *filegen;\n\tfilegen_node *my_node;\n\tattr_val *my_opts;\n\tint filegen_type;\n\tint filegen_flag;\n\n\t/* Set the statistics directory */\n\tif (ptree->stats_dir)\n\t\tstats_config(STATS_STATSDIR, ptree->stats_dir);\n\n\t/* NOTE:\n\t * Calling filegen_get is brain dead. Doing a string\n\t * comparison to find the relavant filegen structure is\n\t * expensive.\n\t *\n\t * Through the parser, we already know which filegen is\n\t * being specified. Hence, we should either store a\n\t * pointer to the specified structure in the syntax tree\n\t * or an index into a filegen array.\n\t *\n\t * Need to change the filegen code to reflect the above.\n\t */\n\n\t/* Turn on the specified statistics */\n\tpfilegen_token = HEAD_PFIFO(ptree->stats_list);\n\tfor (; pfilegen_token != NULL; pfilegen_token = pfilegen_token->link) {\n\t\tfilegen_string = keyword(pfilegen_token->i);\n\t\tfilegen = filegen_get(filegen_string);\n\t\tDPRINTF(4, (\"enabling filegen for %s statistics '%s%s'\\n\",\n\t\t\t    filegen_string, filegen->prefix, \n\t\t\t    filegen->basename));\n\t\tfilegen->flag |= FGEN_FLAG_ENABLED;\n\t}\n\n\t/* Configure the statistics with the options */\n\tmy_node = HEAD_PFIFO(ptree->filegen_opts);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\tfilegen_file = keyword(my_node->filegen_token);\n\t\tfilegen = filegen_get(filegen_file);\n\n\t\t/* Initialize the filegen variables to their pre-configuration states */\n\t\tfilegen_flag = filegen->flag;\n\t\tfilegen_type = filegen->type;\n\n\t\t/* \"filegen ... enabled\" is the default (when filegen is used) */\n\t\tfilegen_flag |= FGEN_FLAG_ENABLED;\n\n\t\tmy_opts = HEAD_PFIFO(my_node->options);\n\t\tfor (; my_opts != NULL; my_opts = my_opts->link) {\n\t\t\tswitch (my_opts->attr) {\n\n\t\t\tcase T_File:\n\t\t\t\tfilegen_file = my_opts->value.s;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Type:\n\t\t\t\tswitch (my_opts->value.i) {\n\n\t\t\t\tdefault:\n\t\t\t\t\tNTP_INSIST(0);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_None:\n\t\t\t\t\tfilegen_type = FILEGEN_NONE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Pid:\n\t\t\t\t\tfilegen_type = FILEGEN_PID;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Day:\n\t\t\t\t\tfilegen_type = FILEGEN_DAY;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Week:\n\t\t\t\t\tfilegen_type = FILEGEN_WEEK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Month:\n\t\t\t\t\tfilegen_type = FILEGEN_MONTH;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Year:\n\t\t\t\t\tfilegen_type = FILEGEN_YEAR;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Age:\n\t\t\t\t\tfilegen_type = FILEGEN_AGE;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag:\n\t\t\t\tswitch (my_opts->value.i) {\n\n\t\t\t\tcase T_Link:\n\t\t\t\t\tfilegen_flag |= FGEN_FLAG_LINK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Nolink:\n\t\t\t\t\tfilegen_flag &= ~FGEN_FLAG_LINK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Enable:\n\t\t\t\t\tfilegen_flag |= FGEN_FLAG_ENABLED;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Disable:\n\t\t\t\t\tfilegen_flag &= ~FGEN_FLAG_ENABLED;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\t\t\"Unknown filegen flag token %d\",\n\t\t\t\t\t\tmy_opts->value.i);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Unknown filegen option token %d\",\n\t\t\t\t\tmy_opts->attr);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\tfilegen_config(filegen, filegen_file, filegen_type,\n\t\t\t       filegen_flag);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_monitor(\n\tconfig_tree *ptree\n\t)\n{\n\tif (ptree->stats_dir) {\n\t\tfree(ptree->stats_dir);\n\t\tptree->stats_dir = NULL;\n\t}\n\n\tFREE_INT_FIFO(ptree->stats_list);\n\tFREE_FILEGEN_FIFO(ptree->filegen_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_access(\n\tconfig_tree *ptree\n\t)\n{\n\tstatic int\t\twarned_signd;\n\tattr_val *\t\tmy_opt;\n\trestrict_node *\t\tmy_node;\n\tint_node *\t\tcurr_flag;\n\tsockaddr_u\t\taddr;\n\tsockaddr_u\t\tmask;\n\tstruct addrinfo\t\thints;\n\tstruct addrinfo *\tai_list;\n\tstruct addrinfo *\tpai;\n\tint\t\t\trc;\n\tint\t\t\trestrict_default;\n\tu_short\t\t\tflags;\n\tu_short\t\t\tmflags;\n\tint\t\t\trange_err;\n\tconst char *\t\tsignd_warning =\n#ifdef HAVE_NTP_SIGND\n\t    \"MS-SNTP signd operations currently block ntpd degrading service to all clients.\";\n#else\n\t    \"mssntp restrict bit ignored, this ntpd was configured without --enable-ntp-signd.\";\n#endif\n\n\t/* Configure the mru options */\n\tmy_opt = HEAD_PFIFO(ptree->mru_opts);\n\tfor (; my_opt != NULL; my_opt = my_opt->link) {\n\n\t\trange_err = FALSE;\n\n\t\tswitch (my_opt->attr) {\n\n\t\tcase T_Incalloc:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_incalloc = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Incmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_incalloc = (my_opt->value.u * 1024)\n\t\t\t\t\t\t/ sizeof(mon_entry);\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Initalloc:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_initalloc = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Initmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_initalloc = (my_opt->value.u * 1024)\n\t\t\t\t\t\t / sizeof(mon_entry);\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Mindepth:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_mindepth = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Maxage:\n\t\t\tmru_maxage = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tcase T_Maxdepth:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_maxdepth = my_opt->value.u;\n\t\t\telse\n\t\t\t\tmru_maxdepth = UINT_MAX;\n\t\t\tbreak;\n\n\t\tcase T_Maxmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_maxdepth = my_opt->value.u * 1024 /\n\t\t\t\t\t       sizeof(mon_entry);\n\t\t\telse\n\t\t\t\tmru_maxdepth = UINT_MAX;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"Unknown mru option %s (%d)\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->attr);\n\t\t\texit(1);\n\t\t}\n\t\tif (range_err)\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"mru %s %d out of range, ignored.\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->value.i);\n\t}\n\n\t/* Configure the discard options */\n\tmy_opt = HEAD_PFIFO(ptree->discard_opts);\n\tfor (; my_opt != NULL; my_opt = my_opt->link) {\n\n\t\tswitch (my_opt->attr) {\n\n\t\tcase T_Average:\n\t\t\tif (0 <= my_opt->value.i &&\n\t\t\t    my_opt->value.i <= UCHAR_MAX)\n\t\t\t\tntp_minpoll = (u_char)my_opt->value.u;\n\t\t\telse\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"discard average %d out of range, ignored.\",\n\t\t\t\t\tmy_opt->value.i);\n\t\t\tbreak;\n\n\t\tcase T_Minimum:\n\t\t\tntp_minpkt = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tcase T_Monitor:\n\t\t\tmon_age = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"Unknown discard option %s (%d)\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->attr);\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t/* Configure the restrict options */\n\tmy_node = HEAD_PFIFO(ptree->restrict_opts);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\t/* Parse the flags */\n\t\tflags = 0;\n\t\tmflags = 0;\n\n\t\tcurr_flag = HEAD_PFIFO(my_node->flags);\n\t\tfor (; curr_flag != NULL; curr_flag = curr_flag->link) {\n\t\t\tswitch (curr_flag->i) {\n\n\t\t\tdefault:\n\t\t\t\tNTP_INSIST(0);\n\t\t\t\tbreak;\n\n\t\t\tcase T_Ntpport:\n\t\t\t\tmflags |= RESM_NTPONLY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Source:\n\t\t\t\tmflags |= RESM_SOURCE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flake:\n\t\t\t\tflags |= RES_FLAKE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Ignore:\n\t\t\t\tflags |= RES_IGNORE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Kod:\n\t\t\t\tflags |= RES_KOD;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Mssntp:\n\t\t\t\tflags |= RES_MSSNTP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Limited:\n\t\t\t\tflags |= RES_LIMITED;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Lowpriotrap:\n\t\t\t\tflags |= RES_LPTRAP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Nomodify:\n\t\t\t\tflags |= RES_NOMODIFY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Nopeer:\n\t\t\t\tflags |= RES_NOPEER;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Noquery:\n\t\t\t\tflags |= RES_NOQUERY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Noserve:\n\t\t\t\tflags |= RES_DONTSERVE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Notrap:\n\t\t\t\tflags |= RES_NOTRAP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Notrust:\n\t\t\t\tflags |= RES_DONTTRUST;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Version:\n\t\t\t\tflags |= RES_VERSION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((RES_MSSNTP & flags) && !warned_signd) {\n\t\t\twarned_signd = 1;\n\t\t\tfprintf(stderr, \"%s\\n\", signd_warning);\n\t\t\tmsyslog(LOG_WARNING, signd_warning);\n\t\t}\n\n\t\tZERO_SOCK(&addr);\n\t\tai_list = NULL;\n\t\tpai = NULL;\n\t\trestrict_default = 0;\n\n\t\tif (NULL == my_node->addr) {\n\t\t\tZERO_SOCK(&mask);\n\t\t\tif (!(RESM_SOURCE & mflags)) {\n\t\t\t\t/*\n\t\t\t\t * The user specified a default rule\n\t\t\t\t * without a -4 / -6 qualifier, add to\n\t\t\t\t * both lists\n\t\t\t\t */\n\t\t\t\trestrict_default = 1;\n\t\t\t} else {\n\t\t\t\t/* apply \"restrict source ...\" */\n\t\t\t\tDPRINTF(1, (\"restrict source template mflags %x flags %x\\n\",\n\t\t\t\t\tmflags, flags));\n\t\t\t\thack_restrict(RESTRICT_FLAGS, NULL,\n\t\t\t\t\t      NULL, mflags, flags, 0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} else {\n\t\t\t/* Resolve the specified address */\n\t\t\tAF(&addr) = (u_short)my_node->addr->type;\n\n\t\t\tif (getnetnum(my_node->addr->address,\n\t\t\t\t      &addr, 1, t_UNK) != 1) {\n\t\t\t\t/*\n\t\t\t\t * Attempt a blocking lookup.  This\n\t\t\t\t * is in violation of the nonblocking\n\t\t\t\t * design of ntpd's mainline code.  The\n\t\t\t\t * alternative of running without the\n\t\t\t\t * restriction until the name resolved\n\t\t\t\t * seems worse.\n\t\t\t\t * Ideally some scheme could be used for\n\t\t\t\t * restrict directives in the startup\n\t\t\t\t * ntp.conf to delay starting up the\n\t\t\t\t * protocol machinery until after all\n\t\t\t\t * restrict hosts have been resolved.\n\t\t\t\t */\n\t\t\t\tai_list = NULL;\n\t\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\t\thints.ai_protocol = IPPROTO_UDP;\n\t\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\t\thints.ai_family = my_node->addr->type;\n\t\t\t\trc = getaddrinfo(my_node->addr->address,\n\t\t\t\t\t\t \"ntp\", &hints,\n\t\t\t\t\t\t &ai_list);\n\t\t\t\tif (rc) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"restrict: ignoring line %d, address/host '%s' unusable.\",\n\t\t\t\t\t\tmy_node->line_no,\n\t\t\t\t\t\tmy_node->addr->address);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNTP_INSIST(ai_list != NULL);\n\t\t\t\tpai = ai_list;\n\t\t\t\tNTP_INSIST(pai->ai_addr != NULL);\n\t\t\t\tNTP_INSIST(sizeof(addr) >=\n\t\t\t\t\t   pai->ai_addrlen);\n\t\t\t\tmemcpy(&addr, pai->ai_addr,\n\t\t\t\t       pai->ai_addrlen);\n\t\t\t\tNTP_INSIST(AF_INET == AF(&addr) ||\n\t\t\t\t\t   AF_INET6 == AF(&addr));\n\t\t\t}\n\n\t\t\tSET_HOSTMASK(&mask, AF(&addr));\n\n\t\t\t/* Resolve the mask */\n\t\t\tif (my_node->mask) {\n\t\t\t\tZERO_SOCK(&mask);\n\t\t\t\tAF(&mask) = my_node->mask->type;\n\t\t\t\tif (getnetnum(my_node->mask->address,\n\t\t\t\t\t      &mask, 1, t_MSK) != 1) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"restrict: ignoring line %d, mask '%s' unusable.\",\n\t\t\t\t\t\tmy_node->line_no,\n\t\t\t\t\t\tmy_node->mask->address);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Set the flags */\n\t\tif (restrict_default) {\n\t\t\tAF(&addr) = AF_INET;\n\t\t\tAF(&mask) = AF_INET;\n\t\t\thack_restrict(RESTRICT_FLAGS, &addr,\n\t\t\t\t      &mask, mflags, flags, 0);\n\t\t\tAF(&addr) = AF_INET6;\n\t\t\tAF(&mask) = AF_INET6;\n\t\t}\n\n\t\tdo {\n\t\t\thack_restrict(RESTRICT_FLAGS, &addr,\n\t\t\t\t      &mask, mflags, flags, 0);\n\t\t\tif (pai != NULL &&\n\t\t\t    NULL != (pai = pai->ai_next)) {\n\t\t\t\tNTP_INSIST(pai->ai_addr != NULL);\n\t\t\t\tNTP_INSIST(sizeof(addr) >=\n\t\t\t\t\t   pai->ai_addrlen);\n\t\t\t\tZERO_SOCK(&addr);\n\t\t\t\tmemcpy(&addr, pai->ai_addr,\n\t\t\t\t       pai->ai_addrlen);\n\t\t\t\tNTP_INSIST(AF_INET == AF(&addr) ||\n\t\t\t\t\t   AF_INET6 == AF(&addr));\n\t\t\t\tSET_HOSTMASK(&mask, AF(&addr));\n\t\t\t}\n\t\t} while (pai != NULL);\n\n\t\tif (ai_list != NULL)\n\t\t\tfreeaddrinfo(ai_list);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_access(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->mru_opts);\n\tFREE_ATTR_VAL_FIFO(ptree->discard_opts);\n\tFREE_RESTRICT_FIFO(ptree->restrict_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_tinker(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\ttinker;\n\tint\t\titem;\n\n\titem = -1;\t/* quiet warning */\n\ttinker = HEAD_PFIFO(ptree->tinker);\n\tfor (; tinker != NULL; tinker = tinker->link) {\n\t\tswitch (tinker->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Allan:\n\t\t\titem = LOOP_ALLAN;\n\t\t\tbreak;\n\n\t\tcase T_Dispersion:\n\t\t\titem = LOOP_PHI;\n\t\t\tbreak;\n\n\t\tcase T_Freq:\n\t\t\titem = LOOP_FREQ;\n\t\t\tbreak;\n\n\t\tcase T_Huffpuff:\n\t\t\titem = LOOP_HUFFPUFF;\n\t\t\tbreak;\n\n\t\tcase T_Panic:\n\t\t\titem = LOOP_PANIC;\n\t\t\tbreak;\n\n\t\tcase T_Step:\n\t\t\titem = LOOP_MAX;\n\t\t\tbreak;\n\n\t\tcase T_Stepout:\n\t\t\titem = LOOP_MINSTEP;\n\t\t\tbreak;\n\t\t}\n\t\tloop_config(item, tinker->value.d);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_tinker(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->tinker);\n}\n#endif\t/* FREE_CFG_T */\n\n\n/*\n * config_nic_rules - apply interface listen/ignore/drop items\n */\n#ifndef SIM\nvoid\nconfig_nic_rules(\n\tconfig_tree *ptree\n\t)\n{\n\tnic_rule_node *\tcurr_node;\n\tsockaddr_u\taddr;\n\tnic_rule_match\tmatch_type;\n\tnic_rule_action\taction;\n\tchar *\t\tif_name;\n\tchar *\t\tpchSlash;\n\tint\t\tprefixlen;\n\tint\t\taddrbits;\n\n\tcurr_node = HEAD_PFIFO(ptree->nic_rules);\n\n\tif (curr_node != NULL\n\t    && (HAVE_OPT( NOVIRTUALIPS ) || HAVE_OPT( INTERFACE ))) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"interface/nic rules are not allowed with --interface (-I) or --novirtualips (-L)%s\",\n\t\t\t(input_from_file) ? \", exiting\" : \"\");\n\t\tif (input_from_file)\n\t\t\texit(1);\n\t\telse\n\t\t\treturn;\n\t}\n\n\tfor (; curr_node != NULL; curr_node = curr_node->link) {\n\t\tprefixlen = -1;\n\t\tif_name = curr_node->if_name;\n\t\tif (if_name != NULL)\n\t\t\tif_name = estrdup(if_name);\n\n\t\tswitch (curr_node->match_class) {\n\n\t\tdefault:\n\t\t\t/*\n\t\t\t * this assignment quiets a gcc \"may be used\n\t\t\t * uninitialized\" warning and is here for no\n\t\t\t * other reason.\n\t\t\t */\n\t\t\tmatch_type = MATCH_ALL;\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase 0:\n\t\t\t/*\n\t\t\t * 0 is out of range for valid token T_...\n\t\t\t * and in a nic_rules_node indicates the\n\t\t\t * interface descriptor is either a name or\n\t\t\t * address, stored in if_name in either case.\n\t\t\t */\n\t\t\tNTP_INSIST(if_name != NULL);\n\t\t\tpchSlash = strchr(if_name, '/');\n\t\t\tif (pchSlash != NULL)\n\t\t\t\t*pchSlash = '\\0';\n\t\t\tif (is_ip_address(if_name, AF_UNSPEC, &addr)) {\n\t\t\t\tmatch_type = MATCH_IFADDR;\n\t\t\t\tif (pchSlash != NULL) {\n\t\t\t\t\tsscanf(pchSlash + 1, \"%d\",\n\t\t\t\t\t    &prefixlen);\n\t\t\t\t\taddrbits = 8 *\n\t\t\t\t\t    SIZEOF_INADDR(AF(&addr));\n\t\t\t\t\tprefixlen = max(-1, prefixlen);\n\t\t\t\t\tprefixlen = min(prefixlen,\n\t\t\t\t\t\t\taddrbits);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatch_type = MATCH_IFNAME;\n\t\t\t\tif (pchSlash != NULL)\n\t\t\t\t\t*pchSlash = '/';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_All:\n\t\t\tmatch_type = MATCH_ALL;\n\t\t\tbreak;\n\n\t\tcase T_Ipv4:\n\t\t\tmatch_type = MATCH_IPV4;\n\t\t\tbreak;\n\n\t\tcase T_Ipv6:\n\t\t\tmatch_type = MATCH_IPV6;\n\t\t\tbreak;\n\n\t\tcase T_Wildcard:\n\t\t\tmatch_type = MATCH_WILDCARD;\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (curr_node->action) {\n\n\t\tdefault:\n\t\t\t/*\n\t\t\t * this assignment quiets a gcc \"may be used\n\t\t\t * uninitialized\" warning and is here for no\n\t\t\t * other reason.\n\t\t\t */\n\t\t\taction = ACTION_LISTEN;\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Listen:\n\t\t\taction = ACTION_LISTEN;\n\t\t\tbreak;\n\n\t\tcase T_Ignore:\n\t\t\taction = ACTION_IGNORE;\n\t\t\tbreak;\n\n\t\tcase T_Drop:\n\t\t\taction = ACTION_DROP;\n\t\t\tbreak;\n\t\t}\n\n\t\tadd_nic_rule(match_type, if_name, prefixlen,\n\t\t\t     action);\n\t\ttimer_interfacetimeout(current_time + 2);\n\t\tif (if_name != NULL)\n\t\t\tfree(if_name);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_nic_rules(\n\tconfig_tree *ptree\n\t)\n{\n\tnic_rule_node *curr_node;\n\n\tif (ptree->nic_rules != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_node, *ptree->nic_rules, link);\n\t\t\tif (NULL == curr_node)\n\t\t\t\tbreak;\n\t\t\tif (curr_node->if_name != NULL)\n\t\t\t\tfree(curr_node->if_name);\n\t\t\tfree(curr_node);\n\t\t}\n\t\tfree(ptree->nic_rules);\n\t\tptree->nic_rules = NULL;\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\napply_enable_disable(\n\tattr_val_fifo *\tfifo,\n\tint\t\tenable\n\t)\n{\n\tattr_val *curr_flag;\n\tint option;\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n\tbc_entry *pentry;\n#endif\n\n\tfor (curr_flag = HEAD_PFIFO(fifo);\n\t     curr_flag != NULL;\n\t     curr_flag = curr_flag->link) {\n\n\t\toption = curr_flag->value.i;\n\t\tswitch (option) {\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"can not apply enable/disable token %d, unknown\",\n\t\t\t\toption);\n\t\t\tbreak;\n\n\t\tcase T_Auth:\n\t\t\tproto_config(PROTO_AUTHENTICATE, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Bclient:\n\t\t\tproto_config(PROTO_BROADCLIENT, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Calibrate:\n\t\t\tproto_config(PROTO_CAL, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Kernel:\n\t\t\tproto_config(PROTO_KERNEL, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Monitor:\n\t\t\tproto_config(PROTO_MONITOR, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Ntp:\n\t\t\tproto_config(PROTO_NTP, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Stats:\n\t\t\tproto_config(PROTO_FILEGEN, enable, 0., NULL);\n\t\t\tbreak;\n\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n\t\tcase T_Bc_bugXXXX:\n\t\t\tpentry = bc_list;\n\t\t\twhile (pentry->token) {\n\t\t\t\tif (pentry->token == option)\n\t\t\t\t\tbreak;\n\t\t\t\tpentry++;\n\t\t\t}\n\t\t\tif (!pentry->token) {\n\t\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\t\"compat token %d not in bc_list[]\",\n\t\t\t\t\toption);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpentry->enabled = enable;\n\t\t\tbreak;\n#endif\n\t\t}\n\t}\n}\n\n\nstatic void\nconfig_system_opts(\n\tconfig_tree *ptree\n\t)\n{\n\tapply_enable_disable(ptree->enable_opts, 1);\n\tapply_enable_disable(ptree->disable_opts, 0);\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_system_opts(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->enable_opts);\n\tFREE_ATTR_VAL_FIFO(ptree->disable_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_logconfig(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_lc;\n\n\tmy_lc = HEAD_PFIFO(ptree->logconfig);\n\tfor (; my_lc != NULL; my_lc = my_lc->link) {\n\t\tswitch (my_lc->attr) {\n\n\t\tcase '+':\n\t\t\tntp_syslogmask |= get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\n\t\tcase '-':\n\t\t\tntp_syslogmask &= ~get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\n\t\tcase '=':\n\t\t\tntp_syslogmask = get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_logconfig(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->logconfig);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_phone(\n\tconfig_tree *ptree\n\t)\n{\n\tint\t\ti;\n\tstring_node *\tsn;\n\n\ti = 0;\n\tsn = HEAD_PFIFO(ptree->phone);\n\tfor (; sn != NULL; sn = sn->link) {\n\t\t/* need to leave array entry for NULL terminator */\n\t\tif (i < COUNTOF(sys_phone) - 1) {\n\t\t\tsys_phone[i++] = estrdup(sn->s);\n\t\t\tsys_phone[i] = NULL;\n\t\t} else {\n\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\"phone: Number of phone entries exceeds %lu. Ignoring phone %s...\",\n\t\t\t\t(u_long)(COUNTOF(sys_phone) - 1), sn->s);\n\t\t}\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_phone(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_STRING_FIFO(ptree->phone);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_qos(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_qc;\n\tchar *\t\ts;\n#ifdef HAVE_IPTOS_SUPPORT\n\tunsigned int\tqtos = 0;\n#endif\n\n\tmy_qc = HEAD_PFIFO(ptree->qos);\n\tfor (; my_qc != NULL; my_qc = my_qc->link) {\n\t\ts = my_qc->value.s;\n#ifdef HAVE_IPTOS_SUPPORT\n\t\tif (!strcmp(s, \"lowdelay\"))\n\t\t\tqtos = CONF_QOS_LOWDELAY;\n\t\telse if (!strcmp(s, \"throughput\"))\n\t\t\tqtos = CONF_QOS_THROUGHPUT;\n\t\telse if (!strcmp(s, \"reliability\"))\n\t\t\tqtos = CONF_QOS_RELIABILITY;\n\t\telse if (!strcmp(s, \"mincost\"))\n\t\t\tqtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL\n\t\telse if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\"))\n\t\t\tqtos = CONF_QOS_CS0;\n\t\telse if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\"))\n\t\t\tqtos = CONF_QOS_CS1;\n\t\telse if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\"))\n\t\t\tqtos = CONF_QOS_CS2;\n\t\telse if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\"))\n\t\t\tqtos = CONF_QOS_CS3; \t/* overlapping prefix on keyword */\n\t\tif (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\"))\n\t\t\tqtos = CONF_QOS_CS4;\n\t\telse if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\"))\n\t\t\tqtos = CONF_QOS_CS5;\n\t\telse if(!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\"))\n\t\t\tqtos = CONF_QOS_CS6;\n\t\telse if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\"))\n\t\t\tqtos = CONF_QOS_CS7;\n#endif  /* IPTOS_PREC_INTERNETCONTROL */\n\t\tif (qtos == 0)\n\t\t\tmsyslog(LOG_ERR, \"parse error, qos %s not accepted\\n\", s);\n\t\telse\n\t\t\tqos = qtos;\n#endif  /* HAVE IPTOS_SUPPORT */\n\t\t/*\n\t\t * value is set, but not being effective. Need code to\n\t\t * change   the current connections to notice. Might\n\t\t * also  consider logging a message about the action.\n\t\t * XXX msyslog(LOG_INFO, \"QoS %s requested by config\\n\", s);\n\t\t */\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_qos(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->qos);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_setvar(\n\tconfig_tree *ptree\n\t)\n{\n\tsetvar_node *my_node;\n\tsize_t\tvarlen, vallen, octets;\n\tchar *\tstr;\n\n\tstr = NULL;\n\tmy_node = HEAD_PFIFO(ptree->setvar);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\tvarlen = strlen(my_node->var);\n\t\tvallen = strlen(my_node->val);\n\t\toctets = varlen + vallen + 1 + 1;\n\t\tstr = erealloc(str, octets);\n\t\tsnprintf(str, octets, \"%s=%s\", my_node->var,\n\t\t\t my_node->val);\n\t\tset_sys_var(str, octets, (my_node->isdefault)\n\t\t\t\t\t\t? DEF \n\t\t\t\t\t\t: 0);\n\t}\n\tif (str != NULL)\n\t\tfree(str);\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_setvar(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_SETVAR_FIFO(ptree->setvar);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_ttl(\n\tconfig_tree *ptree\n\t)\n{\n\tint i = 0;\n\tint_node *curr_ttl;\n\n\tcurr_ttl = HEAD_PFIFO(ptree->ttl);\n\tfor (; curr_ttl != NULL; curr_ttl = curr_ttl->link) {\n\t\tif (i < COUNTOF(sys_ttl))\n\t\t\tsys_ttl[i++] = (u_char)curr_ttl->i;\n\t\telse\n\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\"ttl: Number of TTL entries exceeds %lu. Ignoring TTL %d...\",\n\t\t\t\t(u_long)COUNTOF(sys_ttl), curr_ttl->i);\n\t}\n\tsys_ttlmax = i - 1;\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_ttl(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_INT_FIFO(ptree->ttl);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_trap(\n\tconfig_tree *ptree\n\t)\n{\n\taddr_opts_node *curr_trap;\n\tattr_val *curr_opt;\n\tsockaddr_u addr_sock;\n\tsockaddr_u peeraddr;\n\tstruct interface *localaddr;\n\tstruct addrinfo hints;\n\tchar port_text[8];\n\tsettrap_parms *pstp;\n\tu_short port;\n\tint err_flag;\n\tint rc;\n\n\t/* silence warning about addr_sock potentially uninitialized */\n\tAF(&addr_sock) = AF_UNSPEC;\n\n\tcurr_trap = HEAD_PFIFO(ptree->trap);\n\tfor (; curr_trap != NULL; curr_trap = curr_trap->link) {\n\t\terr_flag = 0;\n\t\tport = 0;\n\t\tlocaladdr = NULL;\n\n\t\tcurr_opt = HEAD_PFIFO(curr_trap->options);\n\t\tfor (; curr_opt != NULL; curr_opt = curr_opt->link) {\n\t\t\tif (T_Port == curr_opt->attr) {\n\t\t\t\tif (curr_opt->value.i < 1 \n\t\t\t\t    || curr_opt->value.i > USHRT_MAX) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"invalid port number \"\n\t\t\t\t\t\t\"%d, trap ignored\", \n\t\t\t\t\t\tcurr_opt->value.i);\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t}\n\t\t\t\tport = (u_short)curr_opt->value.i;\n\t\t\t}\n\t\t\telse if (T_Interface == curr_opt->attr) {\n\t\t\t\t/* Resolve the interface address */\n\t\t\t\tZERO_SOCK(&addr_sock);\n\t\t\t\tif (getnetnum(curr_opt->value.s,\n\t\t\t\t\t      &addr_sock, 1, t_UNK) != 1) {\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlocaladdr = findinterface(&addr_sock);\n\n\t\t\t\tif (NULL == localaddr) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"can't find interface with address %s\",\n\t\t\t\t\t\tstoa(&addr_sock));\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Now process the trap for the specified interface\n\t\t * and port number\n\t\t */\n\t\tif (!err_flag) {\n\t\t\tif (!port)\n\t\t\t\tport = TRAPPORT;\n\t\t\tZERO_SOCK(&peeraddr);\n\t\t\trc = getnetnum(curr_trap->addr->address,\n\t\t\t\t       &peeraddr, 1, t_UNK);\n\t\t\tif (1 != rc) {\n#ifndef WORKER\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"trap: unable to use IP address %s.\",\n\t\t\t\t\tcurr_trap->addr->address);\n#else\t/* WORKER follows */\n\t\t\t\t/*\n\t\t\t\t * save context and hand it off\n\t\t\t\t * for name resolution.\n\t\t\t\t */\n\t\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\t\thints.ai_protocol = IPPROTO_UDP;\n\t\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\t\tsnprintf(port_text, sizeof(port_text),\n\t\t\t\t\t \"%u\", port);\n\t\t\t\thints.ai_flags = Z_AI_NUMERICSERV;\n\t\t\t\tpstp = emalloc_zero(sizeof(*pstp));\n\t\t\t\tif (localaddr != NULL) {\n\t\t\t\t\thints.ai_family = localaddr->family;\n\t\t\t\t\tpstp->ifaddr_nonnull = 1;\n\t\t\t\t\tmemcpy(&pstp->ifaddr,\n\t\t\t\t\t       &localaddr->sin,\n\t\t\t\t\t       sizeof(pstp->ifaddr));\n\t\t\t\t}\n\t\t\t\trc = getaddrinfo_sometime(\n\t\t\t\t\tcurr_trap->addr->address,\n\t\t\t\t\tport_text, &hints,\n\t\t\t\t\tINITIAL_DNS_RETRY,\n\t\t\t\t\t&trap_name_resolved,\n\t\t\t\t\tpstp);\n\t\t\t\tif (!rc)\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"config_trap: getaddrinfo_sometime(%s,%s): %m\",\n\t\t\t\t\t\tcurr_trap->addr->address,\n\t\t\t\t\t\tport_text);\n#endif\t/* WORKER */\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* port is at same location for v4 and v6 */\n\t\t\tSET_PORT(&peeraddr, port);\n\n\t\t\tif (NULL == localaddr)\n\t\t\t\tlocaladdr = ANY_INTERFACE_CHOOSE(&peeraddr);\n\t\t\telse\n\t\t\t\tAF(&peeraddr) = AF(&addr_sock);\n\n\t\t\tif (!ctlsettrap(&peeraddr, localaddr, 0,\n\t\t\t\t\tNTP_VERSION))\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"set trap %s -> %s failed.\",\n\t\t\t\t\tlatoa(localaddr),\n\t\t\t\t\tstoa(&peeraddr));\n\t\t}\n\t}\n}\n\n\n/*\n * trap_name_resolved()\n *\n * Callback invoked when config_trap()'s DNS lookup completes.\n */\n# ifdef WORKER\nvoid\ntrap_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsettrap_parms *pstp;\n\tstruct interface *localaddr;\n\tsockaddr_u peeraddr;\n\n\tpstp = context;\n\tif (rescode) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"giving up resolving trap host %s: %s (%d)\",\n\t\t\tname, gai_strerror(rescode), rescode);\n\t\tfree(pstp);\n\t\treturn;\n\t}\n\tNTP_INSIST(sizeof(peeraddr) >= res->ai_addrlen);\n\tmemset(&peeraddr, 0, sizeof(peeraddr));\n\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\tlocaladdr = NULL;\n\tif (pstp->ifaddr_nonnull)\n\t\tlocaladdr = findinterface(&pstp->ifaddr);\n\tif (NULL == localaddr)\n\t\tlocaladdr = ANY_INTERFACE_CHOOSE(&peeraddr);\n\tif (!ctlsettrap(&peeraddr, localaddr, 0, NTP_VERSION))\n\t\tmsyslog(LOG_ERR, \"set trap %s -> %s failed.\",\n\t\t\tlatoa(localaddr), stoa(&peeraddr));\n\tfree(pstp);\n}\n# endif\t/* WORKER */\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_trap(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDR_OPTS_FIFO(ptree->trap);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_fudge(\n\tconfig_tree *ptree\n\t)\n{\n\taddr_opts_node *curr_fudge;\n\tattr_val *curr_opt;\n\tsockaddr_u addr_sock;\n\taddress_node *addr_node;\n\tstruct refclockstat clock_stat;\n\tint err_flag;\n\n\tcurr_fudge = HEAD_PFIFO(ptree->fudge);\n\tfor (; curr_fudge != NULL; curr_fudge = curr_fudge->link) {\n\t\terr_flag = 0;\n\n\t\t/* Get the reference clock address and\n\t\t * ensure that it is sane\n\t\t */\n\t\taddr_node = curr_fudge->addr;\n\t\tZERO_SOCK(&addr_sock);\n\t\tif (getnetnum(addr_node->address, &addr_sock, 1, t_REF)\n\t\t    != 1) {\n\t\t\terr_flag = 1;\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"unrecognized fudge reference clock address %s, line ignored\",\n\t\t\t\tstoa(&addr_sock));\n\t\t}\n\n\t\tif (!ISREFCLOCKADR(&addr_sock)) {\n\t\t\terr_flag = 1;\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"inappropriate address %s for the fudge command, line ignored\",\n\t\t\t\tstoa(&addr_sock));\n\t\t}\n\n\t\t/* Parse all the options to the fudge command */\n\t\tmemset(&clock_stat, 0, sizeof(clock_stat));\n\t\tcurr_opt = HEAD_PFIFO(curr_fudge->options);\n\t\tfor (; curr_opt != NULL; curr_opt = curr_opt->link) {\n\t\t\tswitch (curr_opt->attr) {\n\n\t\t\tcase T_Time1:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVETIME1;\n\t\t\t\tclock_stat.fudgetime1 = curr_opt->value.d;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Time2:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVETIME2;\n\t\t\t\tclock_stat.fudgetime2 = curr_opt->value.d;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Stratum:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEVAL1;\n\t\t\t\tclock_stat.fudgeval1 = curr_opt->value.i;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Refid:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEVAL2;\n\t\t\t\tclock_stat.fudgeval2 = 0;\n\t\t\t\tmemcpy(&clock_stat.fudgeval2,\n\t\t\t\t       curr_opt->value.s,\n\t\t\t\t       min(strlen(curr_opt->value.s), 4));\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag1:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG1;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG1;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG1;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag2:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG2;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG2;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG2;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag3:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG3;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG3;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG3;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag4:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG4;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG4;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG4;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Unexpected fudge flag %s (%d) for %s\\n\",\n\t\t\t\t\ttoken_name(curr_opt->attr),\n\t\t\t\t\tcurr_opt->attr, stoa(&addr_sock));\n\t\t\t\texit(curr_opt->attr ? curr_opt->attr : 1);\n\t\t\t}\n\t\t}\n# ifdef REFCLOCK\n\t\tif (!err_flag)\n\t\t\trefclock_control(&addr_sock, &clock_stat, NULL);\n# endif\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_fudge(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDR_OPTS_FIFO(ptree->fudge);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_vars(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *curr_var;\n\tint len;\n\n\tcurr_var = HEAD_PFIFO(ptree->vars);\n\tfor (; curr_var != NULL; curr_var = curr_var->link) {\n\t\t/* Determine which variable to set and set it */\n\t\tswitch (curr_var->attr) {\n\n\t\tcase T_Broadcastdelay:\n\t\t\tproto_config(PROTO_BROADDELAY, 0, curr_var->value.d, NULL);\n\t\t\tbreak;\n\t\tcase T_Tick:\n\t\t\tproto_config(PROTO_ADJ, 0, curr_var->value.d, NULL);\n\t\t\tbreak;\n\n\t\tcase T_Driftfile:\n\t\t\tif ('\\0' == curr_var->value.s[0]) {\n\t\t\t\tstats_drift_file = 0;\n\t\t\t\tmsyslog(LOG_INFO, \"config: driftfile disabled\\n\");\n\t\t\t} else\n\t\t\t\tstats_config(STATS_FREQ_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\tsys_ident = curr_var->value.s;\n\t\t\tbreak;\n\n\t\tcase T_WanderThreshold:\t\t/* FALLTHROUGH */\n\t\tcase T_Nonvolatile:\n\t\t\twander_threshold = curr_var->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Leapfile:\n\t\t\tstats_config(STATS_LEAP_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Pidfile:\n\t\t\tstats_config(STATS_PID_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Logfile:\n\t\t\tif (-1 == change_logfile(curr_var->value.s, 0))\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Cannot open logfile %s: %m\",\n\t\t\t\t\tcurr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Saveconfigdir:\n\t\t\tif (saveconfigdir != NULL)\n\t\t\t\tfree(saveconfigdir);\n\t\t\tlen = strlen(curr_var->value.s);\n\t\t\tif (0 == len) {\n\t\t\t\tsaveconfigdir = NULL;\n\t\t\t} else if (DIR_SEP != curr_var->value.s[len - 1]\n#ifdef SYS_WINNT\t/* slash is also a dir. sep. on Windows */\n\t\t\t\t   && '/' != curr_var->value.s[len - 1]\n#endif\n\t\t\t\t ) {\n\t\t\t\t\tlen++;\n\t\t\t\t\tsaveconfigdir = emalloc(len + 1);\n\t\t\t\t\tsnprintf(saveconfigdir, len + 1,\n\t\t\t\t\t\t \"%s%c\",\n\t\t\t\t\t\t curr_var->value.s,\n\t\t\t\t\t\t DIR_SEP);\n\t\t\t} else {\n\t\t\t\t\tsaveconfigdir = estrdup(\n\t\t\t\t\t    curr_var->value.s);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Automax:\n#ifdef AUTOKEY\n\t\t\tsys_automax = curr_var->value.i;\n#endif\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"config_vars(): unexpected token %d\",\n\t\t\t\tcurr_var->attr);\n\t\t}\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_vars(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->vars);\n}\n#endif\t/* FREE_CFG_T */\n\n\n/* Define a function to check if a resolved address is sane.\n * If yes, return 1, else return 0;\n */\nstatic int\nis_sane_resolved_address(\n\tsockaddr_u *\tpeeraddr,\n\tint\t\thmode\n\t)\n{\n\tif (!ISREFCLOCKADR(peeraddr) && ISBADADR(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\t/*\n\t * Shouldn't be able to specify multicast\n\t * address for server/peer!\n\t * and unicast address for manycastclient!\n\t */\n\tif ((T_Server == hmode || T_Peer == hmode || T_Pool == hmode)\n\t    && IS_MCAST(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\tif (T_Manycastclient == hmode && !IS_MCAST(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\n\tif (IS_IPV6(peeraddr) && !ipv6_works)\n\t\treturn 0;\n\n\t/* Ok, all tests succeeded, now we can return 1 */\n\treturn 1;\n}\n\n\n#ifndef SIM\nstatic u_char\nget_correct_host_mode(\n\tint token\n\t)\n{\n\tswitch (token) {\n\n\tcase T_Server:\n\tcase T_Pool:\n\tcase T_Manycastclient:\n\t\treturn MODE_CLIENT;\n\n\tcase T_Peer:\n\t\treturn MODE_ACTIVE;\n\n\tcase T_Broadcast:\n\t\treturn MODE_BROADCAST;\n\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n\n/*\n * peerflag_bits()\tget config_peers() peerflags value from a\n *\t\t\tpeer_node's queue of flag attr_val entries.\n */\nstatic int\npeerflag_bits(\n\tpeer_node *pn\n\t)\n{\n\tint peerflags;\n\tattr_val *option;\n\n\t/* translate peerflags options to bits */\n\tpeerflags = 0;\n\toption = HEAD_PFIFO(pn->peerflags);\n\tfor (; option != NULL; option = option->link) {\n\t\tswitch (option->value.i) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Autokey:\n\t\t\tpeerflags |= FLAG_SKEY;\n\t\t\tbreak;\n\n\t\tcase T_Burst:\n\t\t\tpeerflags |= FLAG_BURST;\n\t\t\tbreak;\n\n\t\tcase T_Iburst:\n\t\t\tpeerflags |= FLAG_IBURST;\n\t\t\tbreak;\n\n\t\tcase T_Noselect:\n\t\t\tpeerflags |= FLAG_NOSELECT;\n\t\t\tbreak;\n\n\t\tcase T_Preempt:\n\t\t\tpeerflags |= FLAG_PREEMPT;\n\t\t\tbreak;\n\n\t\tcase T_Prefer:\n\t\t\tpeerflags |= FLAG_PREFER;\n\t\t\tbreak;\n\n\t\tcase T_True:\n\t\t\tpeerflags |= FLAG_TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Xleave:\n\t\t\tpeerflags |= FLAG_XLEAVE;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn peerflags;\n}\n\n\nstatic void\nconfig_peers(\n\tconfig_tree *ptree\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tstruct addrinfo\t\thints;\n\tpeer_node *\t\tcurr_peer;\n\tpeer_resolved_ctx *\tctx;\n\tu_char\t\t\thmode;\n\n\t/* add servers named on the command line with iburst implied */\n\tfor (;\n\t     cmdline_server_count > 0;\n\t     cmdline_server_count--, cmdline_servers++) {\n\n\t\tZERO_SOCK(&peeraddr);\n\t\t/*\n\t\t * If we have a numeric address, we can safely\n\t\t * proceed in the mainline with it.  Otherwise, hand\n\t\t * the hostname off to the blocking child.\n\t\t */\n\t\tif (is_ip_address(*cmdline_servers, AF_UNSPEC,\n\t\t\t\t  &peeraddr)) {\n\n\t\t\tSET_PORT(&peeraddr, NTP_PORT);\n\t\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t\t\t\t     T_Server))\n\t\t\t\tpeer_config(\n\t\t\t\t\t&peeraddr,\n\t\t\t\t\tNULL,\n\t\t\t\t\tNULL,\n\t\t\t\t\tMODE_CLIENT,\n\t\t\t\t\tNTP_VERSION,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tFLAG_IBURST,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tNULL);\n\t\t} else {\n\t\t\t/* we have a hostname to resolve */\n# ifdef WORKER\n\t\t\tctx = emalloc_zero(sizeof(*ctx));\n\t\t\tctx->family = AF_UNSPEC;\n\t\t\tctx->host_mode = T_Server;\n\t\t\tctx->hmode = MODE_CLIENT;\n\t\t\tctx->version = NTP_VERSION;\n\t\t\tctx->flags = FLAG_IBURST;\n\n\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\thints.ai_family = (u_short)ctx->family;\n\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\thints.ai_protocol = IPPROTO_UDP;\n\n\t\t\tgetaddrinfo_sometime(*cmdline_servers,\n\t\t\t\t\t     \"ntp\", &hints,\n\t\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t\t     &peer_name_resolved,\n\t\t\t\t\t     (void *)ctx);\n# else\t/* !WORKER follows */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\t\tcurr_peer->addr->address);\n# endif\n\t\t}\n\t}\n\n\t/* add associations from the configuration file */\n\tcurr_peer = HEAD_PFIFO(ptree->peers);\n\tfor (; curr_peer != NULL; curr_peer = curr_peer->link) {\n\t\tZERO_SOCK(&peeraddr);\n\t\t/* Find the correct host-mode */\n\t\thmode = get_correct_host_mode(curr_peer->host_mode);\n\t\tNTP_INSIST(hmode != 0);\n\n\t\tif (T_Pool == curr_peer->host_mode) {\n\t\t\tAF(&peeraddr) = curr_peer->addr->type;\n\t\t\tpeer_config(\n\t\t\t\t&peeraddr,\n\t\t\t\tcurr_peer->addr->address,\n\t\t\t\tNULL,\n\t\t\t\thmode,\n\t\t\t\tcurr_peer->peerversion,\n\t\t\t\tcurr_peer->minpoll,\n\t\t\t\tcurr_peer->maxpoll,\n\t\t\t\tpeerflag_bits(curr_peer),\n\t\t\t\tcurr_peer->ttl,\n\t\t\t\tcurr_peer->peerkey,\n\t\t\t\tcurr_peer->group);\n\t\t/*\n\t\t * If we have a numeric address, we can safely\n\t\t * proceed in the mainline with it.  Otherwise, hand\n\t\t * the hostname off to the blocking child.\n\t\t */\n\t\t} else if (is_ip_address(curr_peer->addr->address,\n\t\t\t\t  curr_peer->addr->type, &peeraddr)) {\n\n\t\t\tSET_PORT(&peeraddr, NTP_PORT);\n\t\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t    curr_peer->host_mode))\n\t\t\t\tpeer_config(\n\t\t\t\t\t&peeraddr,\n\t\t\t\t\tNULL,\n\t\t\t\t\tNULL,\n\t\t\t\t\thmode,\n\t\t\t\t\tcurr_peer->peerversion,\n\t\t\t\t\tcurr_peer->minpoll,\n\t\t\t\t\tcurr_peer->maxpoll,\n\t\t\t\t\tpeerflag_bits(curr_peer),\n\t\t\t\t\tcurr_peer->ttl,\n\t\t\t\t\tcurr_peer->peerkey,\n\t\t\t\t\tcurr_peer->group);\n\t\t} else {\n\t\t\t/* we have a hostname to resolve */\n# ifdef WORKER\n\t\t\tctx = emalloc_zero(sizeof(*ctx));\n\t\t\tctx->family = curr_peer->addr->type;\n\t\t\tctx->host_mode = curr_peer->host_mode;\n\t\t\tctx->hmode = hmode;\n\t\t\tctx->version = curr_peer->peerversion;\n\t\t\tctx->minpoll = curr_peer->minpoll;\n\t\t\tctx->maxpoll = curr_peer->maxpoll;\n\t\t\tctx->flags = peerflag_bits(curr_peer);\n\t\t\tctx->ttl = curr_peer->ttl;\n\t\t\tctx->keyid = curr_peer->peerkey;\n\t\t\tctx->group = curr_peer->group;\n\n\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\thints.ai_family = ctx->family;\n\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\thints.ai_protocol = IPPROTO_UDP;\n\n\t\t\tgetaddrinfo_sometime(curr_peer->addr->address,\n\t\t\t\t\t     \"ntp\", &hints,\n\t\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t\t     &peer_name_resolved, ctx);\n# else\t/* !WORKER follows */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\t\tcurr_peer->addr->address);\n# endif\n\t\t}\n\t}\n}\n#endif\t/* !SIM */\n\n/*\n * peer_name_resolved()\n *\n * Callback invoked when config_peers()'s DNS lookup completes.\n */\n#ifdef WORKER\nvoid\npeer_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tpeer_resolved_ctx *\tctx;\n\tu_short\t\t\taf;\n\tconst char *\t\tfam_spec;\n\n\tctx = context;\n\n\tDPRINTF(1, (\"peer_name_resolved(%s) rescode %d\\n\", name, rescode));\n\n\tif (rescode) {\n#ifndef IGNORE_DNS_ERRORS\n\t\tfree(ctx);\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"giving up resolving host %s: %s (%d)\",\n\t\t\tname, gai_strerror(rescode), rescode);\n#else\t/* IGNORE_DNS_ERRORS follows */\n\t\tgetaddrinfo_sometime(name, service, hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     &peer_name_resolved, context);\n#endif\n\t\treturn;\n\t}\n\n\t/* Loop to configure a single association */\n\tfor (; res != NULL; res = res->ai_next) {\n\t\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t\t\t     ctx->host_mode)) {\n\t\t\tNLOG(NLOG_SYSINFO) {\n\t\t\t\taf = ctx->family;\n\t\t\t\tfam_spec = (AF_INET6 == af)\n\t\t\t\t\t       ? \"(AAAA) \"\n\t\t\t\t\t       : (AF_INET == af)\n\t\t\t\t\t\t     ? \"(A) \"\n\t\t\t\t\t\t     : \"\";\n\t\t\t\tmsyslog(LOG_INFO, \"DNS %s %s-> %s\",\n\t\t\t\t\tname, fam_spec,\n\t\t\t\t\tstoa(&peeraddr));\n\t\t\t}\n\t\t\tpeer_config(\n\t\t\t\t&peeraddr,\n\t\t\t\tNULL,\n\t\t\t\tNULL,\n\t\t\t\tctx->hmode,\n\t\t\t\tctx->version,\n\t\t\t\tctx->minpoll,\n\t\t\t\tctx->maxpoll,\n\t\t\t\tctx->flags,\n\t\t\t\tctx->ttl,\n\t\t\t\tctx->keyid,\n\t\t\t\tctx->group);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(ctx);\n}\n#endif\t/* WORKER */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_peers(\n\tconfig_tree *ptree\n\t)\n{\n\tpeer_node *curr_peer;\n\n\tif (ptree->peers != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_peer, *ptree->peers, link);\n\t\t\tif (NULL == curr_peer)\n\t\t\t\tbreak;\n\t\t\tdestroy_address_node(curr_peer->addr);\n\t\t\tdestroy_attr_val_fifo(curr_peer->peerflags);\n\t\t\tfree(curr_peer);\n\t\t}\n\t\tfree(ptree->peers);\n\t\tptree->peers = NULL;\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_unpeers(\n\tconfig_tree *ptree\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tstruct addrinfo\t\thints;\n\tunpeer_node *\t\tcurr_unpeer;\n\tstruct peer *\t\tp;\n\tconst char *\t\tname;\n\tint\t\t\trc;\n\n\tcurr_unpeer = HEAD_PFIFO(ptree->unpeers);\n\tfor (; curr_unpeer != NULL; curr_unpeer = curr_unpeer->link) {\n\t\t/*\n\t\t * Either AssocID will be zero, and we unpeer by name/\n\t\t * address addr, or it is nonzero and addr NULL.\n\t\t */\n\t\tif (curr_unpeer->assocID) {\n\t\t\tp = findpeerbyassoc(curr_unpeer->assocID);\n\t\t\tif (p != NULL) {\n\t\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\",\n\t\t\t\t\tstoa(&p->srcadr));\n\t\t\t\tpeer_clear(p, \"GONE\");\n\t\t\t\tunpeer(p);\n\t\t\t}\t\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tmemset(&peeraddr, 0, sizeof(peeraddr));\n\t\tAF(&peeraddr) = curr_unpeer->addr->type;\n\t\tname = curr_unpeer->addr->address;\n\t\trc = getnetnum(name, &peeraddr, 0, t_UNK);\n\t\t/* Do we have a numeric address? */\n\t\tif (rc > 0) {\n\t\t\tDPRINTF(1, (\"unpeer: searching for %s\\n\",\n\t\t\t\t    stoa(&peeraddr)));\n\t\t\tp = findexistingpeer(&peeraddr, NULL, NULL, -1);\n\t\t\tif (p != NULL) {\n\t\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\",\n\t\t\t\t\tstoa(&peeraddr));\n\t\t\t\tpeer_clear(p, \"GONE\");\n\t\t\t\tunpeer(p);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\t\t/* \n\t\t * It's not a numeric IP address, it's a hostname.\n\t\t * Check for associations with a matching hostname.\n\t\t */\n\t\tfor (p = peer_list; p != NULL; p = p->p_link)\n\t\t\tif (p->hostname != NULL)\n\t\t\t\tif (!strcasecmp(p->hostname, name))\n\t\t\t\t\tbreak;\n\t\tif (p != NULL) {\n\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\", name);\n\t\t\tpeer_clear(p, \"GONE\");\n\t\t\tunpeer(p);\n\t\t}\n\t\t/* Resolve the hostname to address(es). */\n# ifdef WORKER\n\t\tmemset(&hints, 0, sizeof(hints));\n\t\thints.ai_family = curr_unpeer->addr->type;\n\t\thints.ai_socktype = SOCK_DGRAM;\n\t\thints.ai_protocol = IPPROTO_UDP;\n\t\tgetaddrinfo_sometime(name, \"ntp\", &hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     &unpeer_name_resolved, NULL);\n# else\t/* !WORKER follows */\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\tname);\n# endif\n\t}\n}\n#endif\t/* !SIM */\n\n\n/*\n * unpeer_name_resolved()\n *\n * Callback invoked when config_unpeers()'s DNS lookup completes.\n */\n#ifdef WORKER\nvoid\nunpeer_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsockaddr_u\tpeeraddr;\n\tstruct peer *\tpeer;\n\tu_short\t\taf;\n\tconst char *\tfam_spec;\n\n\tDPRINTF(1, (\"unpeer_name_resolved(%s) rescode %d\\n\", name, rescode));\n\n\tif (rescode) {\n\t\tmsyslog(LOG_ERR, \"giving up resolving unpeer %s: %s (%d)\", \n\t\t\tname, gai_strerror(rescode), rescode);\n\t\treturn;\n\t}\n\t/*\n\t * Loop through the addresses found\n\t */\n\tfor (; res != NULL; res = res->ai_next) {\n\t\tNTP_INSIST(res->ai_addrlen <= sizeof(peeraddr));\n\t\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\t\tDPRINTF(1, (\"unpeer: searching for peer %s\\n\",\n\t\t\t    stoa(&peeraddr)));\n\t\tpeer = findexistingpeer(&peeraddr, NULL, NULL, -1);\n\t\tif (peer != NULL) {\n\t\t\taf = AF(&peeraddr);\n\t\t\tfam_spec = (AF_INET6 == af)\n\t\t\t\t       ? \"(AAAA) \"\n\t\t\t\t       : (AF_INET == af)\n\t\t\t\t\t     ? \"(A) \"\n\t\t\t\t\t     : \"\";\n\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s %s-> %s\", name,\n\t\t\t\tfam_spec, stoa(&peeraddr));\n\t\t\tpeer_clear(peer, \"GONE\");\n\t\t\tunpeer(peer);\n\t\t}\n\t}\n}\n#endif\t/* WORKER */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_unpeers(\n\tconfig_tree *ptree\n\t)\n{\n\tunpeer_node *curr_unpeer;\n\n\tif (ptree->unpeers != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_unpeer, *ptree->unpeers, link);\n\t\t\tif (NULL == curr_unpeer)\n\t\t\t\tbreak;\n\t\t\tdestroy_address_node(curr_unpeer->addr);\n\t\t\tfree(curr_unpeer);\n\t\t}\n\t\tfree(ptree->unpeers);\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifdef SIM\nstatic void\nconfig_sim(\n\tconfig_tree *ptree\n\t)\n{\n\tint i;\n\tserver_info *serv_info;\n\tattr_val *init_stmt;\n\tsim_node *sim_n;\n\n\t/* Check if a simulate block was found in the configuration code.\n\t * If not, return an error and exit\n\t */\n\tsim_n = HEAD_PFIFO(ptree->sim_details);\n\tif (NULL == sim_n) {\n\t\tfprintf(stderr, \"ERROR!! I couldn't find a \\\"simulate\\\" block for configuring the simulator.\\n\");\n\t\tfprintf(stderr, \"\\tCheck your configuration file.\\n\");\n\t\texit(1);\n\t}\n\n\t/* Process the initialization statements\n\t * -------------------------------------\n\t */\n\tinit_stmt = HEAD_PFIFO(sim_n->init_opts);\n\tfor (; init_stmt != NULL; init_stmt = init_stmt->link) {\n\t\tswitch(init_stmt->attr) {\n\n\t\tcase T_Beep_Delay:\n\t\t\tsimulation.beep_delay = init_stmt->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Sim_Duration:\n\t\t\tsimulation.end_time = init_stmt->value.d;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tfprintf(stderr,\n\t\t\t\t\"Unknown simulator init token %d\\n\",\n\t\t\t\tinit_stmt->attr);\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t/* Process the server list\n\t * -----------------------\n\t */\n\tsimulation.num_of_servers = 0;\n\tserv_info = HEAD_PFIFO(sim_n->servers);\n\tfor (; serv_info != NULL; serv_info = serv_info->link)\n\t\tsimulation.num_of_servers++;\n\tsimulation.servers = emalloc(simulation.num_of_servers *\n\t\t\t\t     sizeof(simulation.servers[0]));\n\n\ti = 0;\n\tserv_info = HEAD_PFIFO(sim_n->servers);\n\tfor (; serv_info != NULL; serv_info = serv_info->link) {\n\t\tif (NULL == serv_info) {\n\t\t\tfprintf(stderr, \"Simulator server list is corrupt\\n\");\n\t\t\texit(1);\n\t\t} else {\n\t\t\tsimulation.servers[i] = *serv_info;\n\t\t\tsimulation.servers[i].link = NULL;\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprintf(\"Creating server associations\\n\");\n\tcreate_server_associations();\n\tfprintf(stderr,\"\\tServer associations successfully created!!\\n\");\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_sim(\n\tconfig_tree *ptree\n\t)\n{\n\tsim_node *sim_n;\n\tserver_info *serv_n;\n\tscript_info *script_n;\n\n\tif (NULL == ptree->sim_details)\n\t\treturn;\n\tsim_n = HEAD_PFIFO(ptree->sim_details);\n\tfree(ptree->sim_details);\n\tptree->sim_details = NULL;\n\tif (NULL == sim_n)\n\t\treturn;\n\n\tFREE_ATTR_VAL_FIFO(sim_n->init_opts);\n\twhile (1) {\n\t\tUNLINK_FIFO(serv_n, *sim_n->servers, link);\n\t\tif (NULL == serv_n)\n\t\t\tbreak;\n\t\tscript_n = serv_n->curr_script;\n\t\twhile (script_n != NULL) {\n\t\t\tfree(script_n);\n\t\t\tif (serv_n->script != NULL)\n\t\t\t\tUNLINK_FIFO(script_n, *serv_n->script,\n\t\t\t\t\t    link);\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tif (serv_n->script != NULL)\n\t\t\tfree(serv_n->script);\n\t\tfree(serv_n);\n\t}\n\tfree(sim_n);\n}\n#endif\t/* FREE_CFG_T */\n#endif\t/* SIM */\n\n\n/* Define two different config functions. One for the daemon and the other for\n * the simulator. The simulator ignores a lot of the standard ntpd configuration\n * options\n */\n#ifndef SIM\nstatic void\nconfig_ntpd(\n\tconfig_tree *ptree\n\t)\n{\n\tconfig_nic_rules(ptree);\n\tio_open_sockets();\n\tconfig_monitor(ptree);\n\tconfig_auth(ptree);\n\tconfig_tos(ptree);\n\tconfig_access(ptree);\n\tconfig_tinker(ptree);\n\tconfig_system_opts(ptree);\n\tconfig_logconfig(ptree);\n\tconfig_phone(ptree);\n\tconfig_setvar(ptree);\n\tconfig_ttl(ptree);\n\tconfig_trap(ptree);\n\tconfig_vars(ptree);\n\tconfig_other_modes(ptree);\n\tconfig_peers(ptree);\n\tconfig_unpeers(ptree);\n\tconfig_fudge(ptree);\n\tconfig_qos(ptree);\n\n#ifdef TEST_BLOCKING_WORKER\n\t{\n\t\tstruct addrinfo hints;\n\n\t\tmemset(&hints, 0, sizeof(hints));\n\t\thints.ai_socktype = SOCK_STREAM;\n\t\thints.ai_protocol = IPPROTO_TCP;\n\t\tgetaddrinfo_sometime(\"www.cnn.com\", \"ntp\", &hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     gai_test_callback, (void *)1);\n\t\thints.ai_family = AF_INET6;\n\t\tgetaddrinfo_sometime(\"ipv6.google.com\", \"ntp\", &hints, \n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     gai_test_callback, (void *)0x600);\n\t}\n#endif\n}\n#endif\t/* !SIM */\n\n\n#ifdef SIM\nstatic void\nconfig_ntpdsim(\n\tconfig_tree *ptree\n\t)\n{\n\tprintf(\"Configuring Simulator...\\n\");\n\tprintf(\"Some ntpd-specific commands in the configuration file will be ignored.\\n\");\n\n\tconfig_tos(ptree);\n\tconfig_monitor(ptree);\n\tconfig_tinker(ptree);\n\tconfig_system_opts(ptree);\n\tconfig_logconfig(ptree);\n\tconfig_vars(ptree);\n\tconfig_sim(ptree);\n}\n#endif /* SIM */\n\n\n/*\n * config_remotely() - implements ntpd side of ntpq :config\n */\nvoid\nconfig_remotely(\n\tsockaddr_u *\tremote_addr\n\t)\n{\n\tstruct FILE_INFO remote_cuckoo;\n\tchar origin[128];\n\n\tsnprintf(origin, sizeof(origin), \"remote config from %s\",\n\t\t stoa(remote_addr));\n\tmemset(&remote_cuckoo, 0, sizeof(remote_cuckoo));\n\tremote_cuckoo.fname = origin;\n\tremote_cuckoo.line_no = 1;\n\tremote_cuckoo.col_no = 1;\n\tip_file = &remote_cuckoo;\n\tinput_from_file = 0;\n\n\tinit_syntax_tree(&cfgt);\n\tyyparse();\n\tcfgt.source.attr = CONF_SOURCE_NTPQ;\n\tcfgt.timestamp = time(NULL);\n\tcfgt.source.value.s = estrdup(stoa(remote_addr));\n\n\tDPRINTF(1, (\"Finished Parsing!!\\n\"));\n\n\tsave_and_apply_config_tree();\n\n\tinput_from_file = 1;\n}\n\n\n/*\n * getconfig() - process startup configuration file e.g /etc/ntp.conf\n */\nvoid\ngetconfig(\n\tint\targc,\n\tchar **\targv\n\t)\n{\n\tchar line[MAXLINE];\n\n#ifdef DEBUG\n\tatexit(free_all_config_trees);\n#endif\n#ifndef SYS_WINNT\n\tconfig_file = CONFIG_FILE;\n#else\n\ttemp = CONFIG_FILE;\n\tif (!ExpandEnvironmentStrings((LPCTSTR)temp, (LPTSTR)config_file_storage, (DWORD)sizeof(config_file_storage))) {\n\t\tmsyslog(LOG_ERR, \"ExpandEnvironmentStrings CONFIG_FILE failed: %m\\n\");\n\t\texit(1);\n\t}\n\tconfig_file = config_file_storage;\n\n\ttemp = ALT_CONFIG_FILE;\n\tif (!ExpandEnvironmentStrings((LPCTSTR)temp, (LPTSTR)alt_config_file_storage, (DWORD)sizeof(alt_config_file_storage))) {\n\t\tmsyslog(LOG_ERR, \"ExpandEnvironmentStrings ALT_CONFIG_FILE failed: %m\\n\");\n\t\texit(1);\n\t}\n\talt_config_file = alt_config_file_storage;\n#endif /* SYS_WINNT */\n\n\t/*\n\t * install a non default variable with this daemon version\n\t */\n\tsnprintf(line, sizeof(line), \"daemon_version=\\\"%s\\\"\", Version);\n\tset_sys_var(line, strlen(line)+1, RO);\n\n\t/*\n\t * Set up for the first time step to install a variable showing\n\t * which syscall is being used to step.\n\t */\n\tset_tod_using = &ntpd_set_tod_using;\n\n\t/*\n\t * On Windows, the variable has already been set, on the rest,\n\t * initialize it to \"UNKNOWN\".\n\t */\n#ifndef SYS_WINNT\n\tstrncpy(line, \"settimeofday=\\\"UNKNOWN\\\"\", sizeof(line));\n\tset_sys_var(line, strlen(line) + 1, RO);\n#endif\n\tgetCmdOpts(argc, argv);\n\tinit_syntax_tree(&cfgt);\n\tcurr_include_level = 0;\n\tif (\n\t\t(fp[curr_include_level] = F_OPEN(FindConfig(config_file), \"r\")) == NULL\n#ifdef HAVE_NETINFO\n\t\t/* If there is no config_file, try NetInfo. */\n\t\t&& check_netinfo && !(config_netinfo = get_netinfo_config())\n#endif /* HAVE_NETINFO */\n\t\t) {\n\t\tmsyslog(LOG_INFO, \"getconfig: Couldn't open <%s>\", FindConfig(config_file));\n#ifndef SYS_WINNT\n\t\tio_open_sockets();\n\n\t\treturn;\n#else\n\t\t/* Under WinNT try alternate_config_file name, first NTP.CONF, then NTP.INI */\n\n\t\tif ((fp[curr_include_level] = F_OPEN(FindConfig(alt_config_file), \"r\")) == NULL) {\n\n\t\t\t/*\n\t\t\t * Broadcast clients can sometimes run without\n\t\t\t * a configuration file.\n\t\t\t */\n\t\t\tmsyslog(LOG_INFO, \"getconfig: Couldn't open <%s>\", FindConfig(alt_config_file));\n\t\t\tio_open_sockets();\n\n\t\t\treturn;\n\t\t}\n\t\tcfgt.source.value.s = estrdup(alt_config_file);\n#endif\t/* SYS_WINNT */\n\t} else\n\t\tcfgt.source.value.s = estrdup(config_file);\n\n\n\t/*** BULK OF THE PARSER ***/\n#ifdef DEBUG\n\tyydebug = !!(debug >= 5);\n#endif\n\tip_file = fp[curr_include_level];\n\tyyparse();\n\t\n\tDPRINTF(1, (\"Finished Parsing!!\\n\"));\n\n\tcfgt.source.attr = CONF_SOURCE_FILE;\t\n\tcfgt.timestamp = time(NULL);\n\n\tsave_and_apply_config_tree();\n\n\twhile (curr_include_level != -1)\n\t\tFCLOSE(fp[curr_include_level--]);\n\n#ifdef HAVE_NETINFO\n\tif (config_netinfo)\n\t\tfree_netinfo_config(config_netinfo);\n#endif /* HAVE_NETINFO */\n}\n\n\nvoid\nsave_and_apply_config_tree(void)\n{\n\tconfig_tree *ptree;\n#ifndef SAVECONFIG\n\tconfig_tree *punlinked;\n#endif\n\n\t/*\n\t * Keep all the configuration trees applied since startup in\n\t * a list that can be used to dump the configuration back to\n\t * a text file.\n\t */\n\tptree = emalloc(sizeof(*ptree));\n\tmemcpy(ptree, &cfgt, sizeof(*ptree));\n\tmemset(&cfgt, 0, sizeof(cfgt));\n\t\n\tLINK_TAIL_SLIST(cfg_tree_history, ptree, link, config_tree);\n\n#ifdef SAVECONFIG\n\tif (HAVE_OPT( SAVECONFIGQUIT )) {\n\t\tFILE *dumpfile;\n\t\tint err;\n\t\tint dumpfailed;\n\n\t\tdumpfile = fopen(OPT_ARG( SAVECONFIGQUIT ), \"w\");\n\t\tif (NULL == dumpfile) {\n\t\t\terr = errno;\n\t\t\tfprintf(stderr,\n\t\t\t\t\"can not create save file %s, error %d %s\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ), err,\n\t\t\t\tstrerror(err));\n\t\t\texit(err);\n\t\t}\n\t\t\n\t\tdumpfailed = dump_all_config_trees(dumpfile, 0);\n\t\tif (dumpfailed)\n\t\t\tfprintf(stderr,\n\t\t\t\t\"--saveconfigquit %s error %d\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ),\n\t\t\t\tdumpfailed);\n\t\telse\n\t\t\tfprintf(stderr,\n\t\t\t\t\"configuration saved to %s\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ));\n\n\t\texit(dumpfailed);\n\t}\n#endif\t/* SAVECONFIG */\n\n\t/* The actual configuration done depends on whether we are configuring the\n\t * simulator or the daemon. Perform a check and call the appropriate\n\t * function as needed.\n\t */\n\n#ifndef SIM\n\tconfig_ntpd(ptree);\n#else\n\tconfig_ntpdsim(ptree);\n#endif\n\n\t/*\n\t * With configure --disable-saveconfig, there's no use keeping\n\t * the config tree around after application, so free it.\n\t */\n#ifndef SAVECONFIG\n\tUNLINK_SLIST(punlinked, cfg_tree_history, ptree, link,\n\t\t     config_tree);\n\tNTP_INSIST(punlinked == ptree);\n\tfree_config_tree(ptree);\n#endif\n}\n\n\nvoid\nntpd_set_tod_using(\n\tconst char *which\n\t)\n{\n\tchar line[128];\n\n\tsnprintf(line, sizeof(line), \"settimeofday=\\\"%s\\\"\", which);\n\tset_sys_var(line, strlen(line) + 1, RO);\n}\n\n\nstatic char *\nnormal_dtoa(\n\tdouble d\n\t)\n{\n\tchar *\tbuf;\n\tchar *\tpch_e;\n\tchar *\tpch_nz;\n\n\tLIB_GETBUF(buf);\n\tsnprintf(buf, LIB_BUFLENGTH, \"%g\", d);\n\n\t/* use lowercase 'e', strip any leading zeroes in exponent */\n\tpch_e = strchr(buf, 'e');\n\tif (NULL == pch_e) {\n\t\tpch_e = strchr(buf, 'E');\n\t\tif (NULL == pch_e)\n\t\t\treturn buf;\n\t\t*pch_e = 'e';\n\t}\n\tpch_e++;\n\tif ('-' == *pch_e)\n\t\tpch_e++;\n\tpch_nz = pch_e;\n\twhile ('0' == *pch_nz)\n\t\tpch_nz++;\n\tif (pch_nz == pch_e)\n\t\treturn buf;\n\tstrncpy(pch_e, pch_nz, LIB_BUFLENGTH - (pch_e - buf));\n\n\treturn buf;\n}\n\n\n/* FUNCTIONS COPIED FROM THE OLDER ntp_config.c\n * --------------------------------------------\n */\n\n\n/*\n * get_pfxmatch - find value for prefixmatch\n * and update char * accordingly\n */\nstatic unsigned long\nget_pfxmatch(\n\tchar ** s,\n\tstruct masks *m\n\t)\n{\n\twhile (m->name) {\n\t\tif (strncmp(*s, m->name, strlen(m->name)) == 0) {\n\t\t\t*s += strlen(m->name);\n\t\t\treturn m->mask;\n\t\t} else {\n\t\t\tm++;\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*\n * get_match - find logmask value\n */\nstatic unsigned long\nget_match(\n\tchar *s,\n\tstruct masks *m\n\t)\n{\n\twhile (m->name) {\n\t\tif (strcmp(s, m->name) == 0)\n\t\t\treturn m->mask;\n\t\telse\n\t\t\tm++;\n\t}\n\treturn 0;\n}\n\n/*\n * get_logmask - build bitmask for ntp_syslogmask\n */\nstatic unsigned long\nget_logmask(\n\tchar *s\n\t)\n{\n\tchar *t;\n\tunsigned long offset;\n\tunsigned long mask;\n\n\tt = s;\n\toffset = get_pfxmatch(&t, logcfg_class);\n\tmask   = get_match(t, logcfg_item);\n\n\tif (mask)\n\t\treturn mask << offset;\n\telse\n\t\tmsyslog(LOG_ERR, \"logconfig: illegal argument %s - ignored\", s);\n\n\treturn 0;\n}\n\n\n#ifdef HAVE_NETINFO\n\n/*\n * get_netinfo_config - find the nearest NetInfo domain with an ntp\n * configuration and initialize the configuration state.\n */\nstatic struct netinfo_config_state *\nget_netinfo_config(void)\n{\n\tni_status status;\n\tvoid *domain;\n\tni_id config_dir;\n\tstruct netinfo_config_state *config;\n\n\tif (ni_open(NULL, \".\", &domain) != NI_OK) return NULL;\n\n\twhile ((status = ni_pathsearch(domain, &config_dir, NETINFO_CONFIG_DIR)) == NI_NODIR) {\n\t\tvoid *next_domain;\n\t\tif (ni_open(domain, \"..\", &next_domain) != NI_OK) {\n\t\t\tni_free(next_domain);\n\t\t\tbreak;\n\t\t}\n\t\tni_free(domain);\n\t\tdomain = next_domain;\n\t}\n\tif (status != NI_OK) {\n\t\tni_free(domain);\n\t\treturn NULL;\n\t}\n\n\tconfig = emalloc(sizeof(*config));\n\tconfig->domain = domain;\n\tconfig->config_dir = config_dir;\n\tconfig->prop_index = 0;\n\tconfig->val_index = 0;\n\tconfig->val_list = NULL;\n\n\treturn config;\n}\n\n\n/*\n * free_netinfo_config - release NetInfo configuration state\n */\nstatic void\nfree_netinfo_config(\n\tstruct netinfo_config_state *config\n\t)\n{\n\tni_free(config->domain);\n\tfree(config);\n}\n\n\n/*\n * gettokens_netinfo - return tokens from NetInfo\n */\nstatic int\ngettokens_netinfo (\n\tstruct netinfo_config_state *config,\n\tchar **tokenlist,\n\tint *ntokens\n\t)\n{\n\tint prop_index = config->prop_index;\n\tint val_index = config->val_index;\n\tchar **val_list = config->val_list;\n\n\t/*\n\t * Iterate through each keyword and look for a property that matches it.\n\t */\n  again:\n\tif (!val_list) {\n\t\tfor (; prop_index < COUNTOF(keywords); prop_index++)\n\t\t{\n\t\t\tni_namelist namelist;\n\t\t\tstruct keyword current_prop = keywords[prop_index];\n\t\t\tni_index index;\n\n\t\t\t/*\n\t\t\t * For each value associated in the property, we're going to return\n\t\t\t * a separate line. We squirrel away the values in the config state\n\t\t\t * so the next time through, we don't need to do this lookup.\n\t\t\t */\n\t\t\tNI_INIT(&namelist);\n\t\t\tif (NI_OK == ni_lookupprop(config->domain,\n\t\t\t    &config->config_dir, current_prop.text,\n\t\t\t    &namelist)) {\n\n\t\t\t\t/* Found the property, but it has no values */\n\t\t\t\tif (namelist.ni_namelist_len == 0) continue;\n\n\t\t\t\tconfig->val_list = \n\t\t\t\t    emalloc(sizeof(char*) *\n\t\t\t\t    (namelist.ni_namelist_len + 1));\n\t\t\t\tval_list = config->val_list;\n\n\t\t\t\tfor (index = 0;\n\t\t\t\t     index < namelist.ni_namelist_len;\n\t\t\t\t     index++) {\n\t\t\t\t\tchar *value;\n\t\t\t\t\t\n\t\t\t\t\tvalue = namelist.ni_namelist_val[index];\n\t\t\t\t\tval_list[index] = estrdup(value);\n\t\t\t\t}\n\t\t\t\tval_list[index] = NULL;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tni_namelist_free(&namelist);\n\t\t}\n\t\tconfig->prop_index = prop_index;\n\t}\n\n\t/* No list; we're done here. */\n\tif (!val_list)\n\t\treturn CONFIG_UNKNOWN;\n\n\t/*\n\t * We have a list of values for the current property.\n\t * Iterate through them and return each in order.\n\t */\n\tif (val_list[val_index]) {\n\t\tint ntok = 1;\n\t\tint quoted = 0;\n\t\tchar *tokens = val_list[val_index];\n\n\t\tmsyslog(LOG_INFO, \"%s %s\", keywords[prop_index].text, val_list[val_index]);\n\n\t\t(const char*)tokenlist[0] = keywords[prop_index].text;\n\t\tfor (ntok = 1; ntok < MAXTOKENS; ntok++) {\n\t\t\ttokenlist[ntok] = tokens;\n\t\t\twhile (!ISEOL(*tokens) && (!ISSPACE(*tokens) || quoted))\n\t\t\t\tquoted ^= (*tokens++ == '\"');\n\n\t\t\tif (ISEOL(*tokens)) {\n\t\t\t\t*tokens = '\\0';\n\t\t\t\tbreak;\n\t\t\t} else {\t\t/* must be space */\n\t\t\t\t*tokens++ = '\\0';\n\t\t\t\twhile (ISSPACE(*tokens))\n\t\t\t\t\ttokens++;\n\t\t\t\tif (ISEOL(*tokens))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (ntok == MAXTOKENS) {\n\t\t\t/* HMS: chomp it to lose the EOL? */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"gettokens_netinfo: too many tokens.  Ignoring: %s\",\n\t\t\t\ttokens);\n\t\t} else {\n\t\t\t*ntokens = ntok + 1;\n\t\t}\n\n\t\tconfig->val_index++;\t/* HMS: Should this be in the 'else'? */\n\n\t\treturn keywords[prop_index].keytype;\n\t}\n\n\t/* We're done with the current property. */\n\tprop_index = ++config->prop_index;\n\n\t/* Free val_list and reset counters. */\n\tfor (val_index = 0; val_list[val_index]; val_index++)\n\t\tfree(val_list[val_index]);\n\tfree(val_list);\n\tval_list = config->val_list = NULL;\n\tval_index = config->val_index = 0;\n\n\tgoto again;\n}\n#endif /* HAVE_NETINFO */\n\n\n/*\n * getnetnum - return a net number (this is crude, but careful)\n *\n * returns 1 for success, and mysteriously, 0 for most failures, and\n * -1 if the address found is IPv6 and we believe IPv6 isn't working.\n */\n#ifndef SIM\nstatic int\ngetnetnum(\n\tconst char *num,\n\tsockaddr_u *addr,\n\tint complain,\n\tenum gnn_type a_type\t/* ignored */\n\t)\n{\n\tNTP_REQUIRE(AF_UNSPEC == AF(addr) ||\n\t\t    AF_INET == AF(addr) ||\n\t\t    AF_INET6 == AF(addr));\n\n\tif (!is_ip_address(num, AF(addr), addr))\n\t\treturn 0;\n\n\tif (IS_IPV6(addr) && !ipv6_works)\n\t\treturn -1;\n\n# ifdef ISC_PLATFORM_HAVESALEN\n\taddr->sa.sa_len = SIZEOF_SOCKADDR(AF(addr));\n# endif\n\tSET_PORT(addr, NTP_PORT);\n\n\tDPRINTF(2, (\"getnetnum given %s, got %s\\n\", num, stoa(addr)));\n\n\treturn 1;\n}\n#endif\t/* !SIM */\n", "/*\n * ntp_util.c - stuff I didn't have any other place for\n */\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include \"ntpd.h\"\n#include \"ntp_unixtime.h\"\n#include \"ntp_filegen.h\"\n#include \"ntp_if.h\"\n#include \"ntp_stdlib.h\"\n#include \"ntp_assert.h\"\n#include \"ntp_calendar.h\"\n#include \"lib_strbuf.h\"\n\n#include <stdio.h>\n#include <ctype.h>\n#include <sys/types.h>\n#ifdef HAVE_SYS_IOCTL_H\n# include <sys/ioctl.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#ifdef HAVE_IEEEFP_H\n# include <ieeefp.h>\n#endif\n#ifdef HAVE_MATH_H\n# include <math.h>\n#endif\n\n#ifdef\tDOSYNCTODR\n# if !defined(VMS)\n#  include <sys/resource.h>\n# endif /* VMS */\n#endif\n\n#if defined(VMS)\n# include <descrip.h>\n#endif /* VMS */\n\n/*\n * Defines used by the leapseconds stuff\n */\n#define\tMAX_TAI\t100\t\t\t/* max TAI offset (s) */\n#define\tL_DAY\t86400UL\t\t\t/* seconds per day */\n#define\tL_YEAR\t(L_DAY * 365)\t\t/* days per year */\n#define\tL_LYEAR\t(L_YEAR + L_DAY)\t/* days per leap year */\n#define\tL_4YEAR\t(L_LYEAR + 3 * L_YEAR)\t/* days per leap cycle */\n#define\tL_CENT\t(L_4YEAR * 25)\t\t/* days per century */\n\n/*\n * This contains odds and ends, including the hourly stats, various\n * configuration items, leapseconds stuff, etc.\n */\n/*\n * File names\n */\nstatic\tchar *key_file_name;\t\t/* keys file name */\nchar\t*leapseconds_file_name;\t\t/* leapseconds file name */\nchar\t*stats_drift_file;\t\t/* frequency file name */\nstatic\tchar *stats_temp_file;\t\t/* temp frequency file name */\nstatic double wander_resid;\t\t/* last frequency update */\ndouble\twander_threshold = 1e-7;\t/* initial frequency threshold */\n\n/*\n * Statistics file stuff\n */\n#ifndef NTP_VAR\n# ifndef SYS_WINNT\n#  define NTP_VAR \"/var/NTP/\"\t\t/* NOTE the trailing '/' */\n# else\n#  define NTP_VAR \"c:\\\\var\\\\ntp\\\\\"\t/* NOTE the trailing '\\\\' */\n# endif /* SYS_WINNT */\n#endif\n\n#ifndef MAXPATHLEN\n# define MAXPATHLEN 256\n#endif\n\n#ifdef DEBUG_TIMING\nstatic FILEGEN timingstats;\n#endif\n#ifdef AUTOKEY\nstatic FILEGEN cryptostats;\n#endif\t/* AUTOKEY */\n\nstatic\tchar statsdir[MAXPATHLEN] = NTP_VAR;\nstatic FILEGEN peerstats;\nstatic FILEGEN loopstats;\nstatic FILEGEN clockstats;\nstatic FILEGEN rawstats;\nstatic FILEGEN sysstats;\nstatic FILEGEN protostats;\n\n/*\n * This controls whether stats are written to the fileset. Provided\n * so that ntpdc can turn off stats when the file system fills up. \n */\nint stats_control;\n\n/*\n * Last frequency written to file.\n */\nstatic double prev_drift_comp;\t\t/* last frequency update */\n\n/*\n * Function prototypes\n */\nstatic\tint\tleap_file(FILE *);\nstatic\tvoid\trecord_sys_stats(void);\n\tvoid\tntpd_time_stepped(void);\n\n/* \n * Prototypes\n */\n#ifdef DEBUG\nvoid\tuninit_util(void);\n#endif\n\n\n/*\n * uninit_util - free memory allocated by init_util\n */\n#ifdef DEBUG\nvoid\nuninit_util(void)\n{\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n\tif (stats_drift_file) {\n\t\tfree(stats_drift_file);\n\t\tfree(stats_temp_file);\n\t\tstats_drift_file = NULL;\n\t\tstats_temp_file = NULL;\n\t}\n\tif (key_file_name) {\n\t\tfree(key_file_name);\n\t\tkey_file_name = NULL;\n\t}\n\tfilegen_unregister(\"peerstats\");\n\tfilegen_unregister(\"loopstats\");\n\tfilegen_unregister(\"clockstats\");\n\tfilegen_unregister(\"rawstats\");\n\tfilegen_unregister(\"sysstats\");\n\tfilegen_unregister(\"protostats\");\n#ifdef AUTOKEY\n\tfilegen_unregister(\"cryptostats\");\n#endif\t/* AUTOKEY */\n#ifdef DEBUG_TIMING\n\tfilegen_unregister(\"timingstats\");\n#endif\t/* DEBUG_TIMING */\n\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n}\n#endif /* DEBUG */\n\n\n/*\n * init_util - initialize the util module of ntpd\n */\nvoid\ninit_util(void)\n{\n\tfilegen_register(statsdir, \"peerstats\",\t  &peerstats);\n\tfilegen_register(statsdir, \"loopstats\",\t  &loopstats);\n\tfilegen_register(statsdir, \"clockstats\",  &clockstats);\n\tfilegen_register(statsdir, \"rawstats\",\t  &rawstats);\n\tfilegen_register(statsdir, \"sysstats\",\t  &sysstats);\n\tfilegen_register(statsdir, \"protostats\",  &protostats);\n#ifdef AUTOKEY\n\tfilegen_register(statsdir, \"cryptostats\", &cryptostats);\n#endif\t/* AUTOKEY */\n#ifdef DEBUG_TIMING\n\tfilegen_register(statsdir, \"timingstats\", &timingstats);\n#endif\t/* DEBUG_TIMING */\n\t/*\n\t * register with libntp ntp_set_tod() to call us back\n\t * when time is stepped.\n\t */\n\tstep_callback = &ntpd_time_stepped;\n#ifdef DEBUG\n\tatexit(&uninit_util);\n#endif /* DEBUG */\n}\n\n\n/*\n * hourly_stats - print some interesting stats\n */\nvoid\nwrite_stats(void)\n{\n\tFILE\t*fp;\n#ifdef DOSYNCTODR\n\tstruct timeval tv;\n#if !defined(VMS)\n\tint\tprio_set;\n#endif\n#ifdef HAVE_GETCLOCK\n\tstruct timespec ts;\n#endif\n\tint\to_prio;\n\n\t/*\n\t * Sometimes having a Sun can be a drag.\n\t *\n\t * The kernel variable dosynctodr controls whether the system's\n\t * soft clock is kept in sync with the battery clock. If it\n\t * is zero, then the soft clock is not synced, and the battery\n\t * clock is simply left to rot. That means that when the system\n\t * reboots, the battery clock (which has probably gone wacky)\n\t * sets the soft clock. That means ntpd starts off with a very\n\t * confused idea of what time it is. It then takes a large\n\t * amount of time to figure out just how wacky the battery clock\n\t * has made things drift, etc, etc. The solution is to make the\n\t * battery clock sync up to system time. The way to do THAT is\n\t * to simply set the time of day to the current time of day, but\n\t * as quickly as possible. This may, or may not be a sensible\n\t * thing to do.\n\t *\n\t * CAVEAT: settimeofday() steps the sun clock by about 800 us,\n\t *\t   so setting DOSYNCTODR seems a bad idea in the\n\t *\t   case of us resolution\n\t */\n\n#if !defined(VMS)\n\t/*\n\t * (prr) getpriority returns -1 on error, but -1 is also a valid\n\t * return value (!), so instead we have to zero errno before the\n\t * call and check it for non-zero afterwards.\n\t */\n\terrno = 0;\n\tprio_set = 0;\n\to_prio = getpriority(PRIO_PROCESS,0); /* Save setting */\n\n\t/*\n\t * (prr) if getpriority succeeded, call setpriority to raise\n\t * scheduling priority as high as possible.  If that succeeds\n\t * as well, set the prio_set flag so we remember to reset\n\t * priority to its previous value below.  Note that on Solaris\n\t * 2.6 (and beyond?), both getpriority and setpriority will fail\n\t * with ESRCH, because sched_setscheduler (called from main) put\n\t * us in the real-time scheduling class which setpriority\n\t * doesn't know about. Being in the real-time class is better\n\t * than anything setpriority can do, anyhow, so this error is\n\t * silently ignored.\n\t */\n\tif ((errno == 0) && (setpriority(PRIO_PROCESS,0,-20) == 0))\n\t\tprio_set = 1;\t/* overdrive */\n#endif /* VMS */\n#ifdef HAVE_GETCLOCK\n\t(void) getclock(TIMEOFDAY, &ts);\n\ttv.tv_sec = ts.tv_sec;\n\ttv.tv_usec = ts.tv_nsec / 1000;\n#else /*  not HAVE_GETCLOCK */\n\tGETTIMEOFDAY(&tv,(struct timezone *)NULL);\n#endif /* not HAVE_GETCLOCK */\n\tif (ntp_set_tod(&tv,(struct timezone *)NULL) != 0)\n\t\tmsyslog(LOG_ERR, \"can't sync battery time: %m\");\n#if !defined(VMS)\n\tif (prio_set)\n\t\tsetpriority(PRIO_PROCESS, 0, o_prio); /* downshift */\n#endif /* VMS */\n#endif /* DOSYNCTODR */\n\trecord_sys_stats();\n\tif (stats_drift_file != 0) {\n\n\t\t/*\n\t\t * When the frequency file is written, initialize the\n\t\t * prev_drift_comp and wander_resid. Thereafter,\n\t\t * reduce the wander_resid by half each hour. When\n\t\t * the difference between the prev_drift_comp and\n\t\t * drift_comp is less than the wander_resid, update\n\t\t * the frequncy file. This minimizes the file writes to\n\t\t * nonvolaile storage.\n\t\t */\n#ifdef DEBUG\n\t\tif (debug)\n\t\t\tprintf(\"write_stats: frequency %.6lf thresh %.6lf, freq %.6lf\\n\",\n\t\t\t    (prev_drift_comp - drift_comp) * 1e6, wander_resid *\n\t\t\t    1e6, drift_comp * 1e6);\n#endif\n\t\tif (fabs(prev_drift_comp - drift_comp) < wander_resid) {\n\t\t\twander_resid *= 0.5;\n\t\t\treturn;\n\t\t}\n\t\tprev_drift_comp = drift_comp;\n\t\twander_resid = wander_threshold;\n\t\tif ((fp = fopen(stats_temp_file, \"w\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"frequency file %s: %m\",\n\t\t\t    stats_temp_file);\n\t\t\treturn;\n\t\t}\n\t\tfprintf(fp, \"%.3f\\n\", drift_comp * 1e6);\n\t\t(void)fclose(fp);\n\t\t/* atomic */\n#ifdef SYS_WINNT\n\t\tif (_unlink(stats_drift_file)) /* rename semantics differ under NT */\n\t\t\tmsyslog(LOG_WARNING, \n\t\t\t\t\"Unable to remove prior drift file %s, %m\", \n\t\t\t\tstats_drift_file);\n#endif /* SYS_WINNT */\n\n#ifndef NO_RENAME\n\t\tif (rename(stats_temp_file, stats_drift_file))\n\t\t\tmsyslog(LOG_WARNING, \n\t\t\t\t\"Unable to rename temp drift file %s to %s, %m\", \n\t\t\t\tstats_temp_file, stats_drift_file);\n#else\n\t\t/* we have no rename NFS of ftp in use */\n\t\tif ((fp = fopen(stats_drift_file, \"w\")) ==\n\t\t    NULL) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"frequency file %s: %m\",\n\t\t\t    stats_drift_file);\n\t\t\treturn;\n\t\t}\n#endif\n\n#if defined(VMS)\n\t\t/* PURGE */\n\t\t{\n\t\t\t$DESCRIPTOR(oldvers,\";-1\");\n\t\t\tstruct dsc$descriptor driftdsc = {\n\t\t\t\tstrlen(stats_drift_file), 0, 0,\n\t\t\t\t    stats_drift_file };\n\t\t\twhile(lib$delete_file(&oldvers,\n\t\t\t    &driftdsc) & 1);\n\t\t}\n#endif\n\t}\n}\n\n\n/*\n * stats_config - configure the stats operation\n */\nvoid\nstats_config(\n\tint item,\n\tconst char *invalue\t/* only one type so far */\n\t)\n{\n\tFILE\t*fp;\n\tconst char *value;\n\tint\tlen;\n\tdouble\told_drift;\n#ifndef VMS\n\tconst char temp_ext[] = \".TEMP\";\n#else\n\tconst char temp_ext[] = \"-TEMP\";\n#endif\n\n\t/*\n\t * Expand environment strings under Windows NT, since the\n\t * command interpreter doesn't do this, the program must.\n\t */\n#ifdef SYS_WINNT\n\tchar newvalue[MAX_PATH], parameter[MAX_PATH];\n\n\tif (!ExpandEnvironmentStrings(invalue, newvalue, MAX_PATH)) {\n\t\tswitch (item) {\n\t\tcase STATS_FREQ_FILE:\n\t\t\tstrncpy(parameter, \"STATS_FREQ_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_LEAP_FILE:\n\t\t\tstrncpy(parameter, \"STATS_LEAP_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_STATSDIR:\n\t\t\tstrncpy(parameter, \"STATS_STATSDIR\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_PID_FILE:\n\t\t\tstrncpy(parameter, \"STATS_PID_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tstrncpy(parameter, \"UNKNOWN\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\t\t}\n\t\tvalue = invalue;\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"ExpandEnvironmentStrings(%s) failed: %m\\n\",\n\t\t\tparameter);\n\t} else {\n\t\tvalue = newvalue;\n\t}\n#else\t \n\tvalue = invalue;\n#endif /* SYS_WINNT */\n\n\tswitch (item) {\n\n\t/*\n\t * Open and read frequency file.\n\t */\n\tcase STATS_FREQ_FILE:\n\t\tif (!value || (len = strlen(value)) == 0)\n\t\t\tbreak;\n\n\t\tstats_drift_file = erealloc(stats_drift_file, len + 1);\n\t\tstats_temp_file = erealloc(stats_temp_file, \n\t\t    len + sizeof(\".TEMP\"));\n\t\tmemcpy(stats_drift_file, value, (size_t)(len+1));\n\t\tmemcpy(stats_temp_file, value, (size_t)len);\n\t\tmemcpy(stats_temp_file + len, temp_ext, sizeof(temp_ext));\n\n\t\t/*\n\t\t * Open drift file and read frequency. If the file is\n\t\t * missing or contains errors, tell the loop to reset.\n\t\t */\n\t\tif ((fp = fopen(stats_drift_file, \"r\")) == NULL)\n\t\t\tbreak;\n\n\t\tif (fscanf(fp, \"%lf\", &old_drift) != 1) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"format error frequency file %s\", \n\t\t\t\tstats_drift_file);\n\t\t\tfclose(fp);\n\t\t\tbreak;\n\n\t\t}\n\t\tfclose(fp);\n\t\tloop_config(LOOP_FREQ, old_drift);\n\t\tprev_drift_comp = drift_comp;\n\t\tbreak;\n\n\t/*\n\t * Specify statistics directory.\n\t */\n\tcase STATS_STATSDIR:\n\n\t\t/*\n\t\t * HMS: the following test is insufficient:\n\t\t * - value may be missing the DIR_SEP\n\t\t * - we still need the filename after it\n\t\t */\n\t\tif (strlen(value) >= sizeof(statsdir)) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"statsdir too long (>%d, sigh)\",\n\t\t\t    (int)sizeof(statsdir) - 1);\n\t\t} else {\n\t\t\tl_fp now;\n\t\t\tint add_dir_sep;\n\t\t\tint value_l = strlen(value);\n\n\t\t\t/* Add a DIR_SEP unless we already have one. */\n\t\t\tif (value_l == 0)\n\t\t\t\tadd_dir_sep = 0;\n\t\t\telse\n\t\t\t\tadd_dir_sep = (DIR_SEP !=\n\t\t\t\t    value[value_l - 1]);\n\n\t\t\tif (add_dir_sep)\n\t\t\t\tsnprintf(statsdir, sizeof(statsdir),\n\t\t\t\t    \"%s%c\", value, DIR_SEP);\n\t\t\telse\n\t\t\t\tsnprintf(statsdir, sizeof(statsdir),\n\t\t\t\t    \"%s\", value);\n\t\t\tget_systime(&now);\n\t\t\tif (peerstats.prefix == &statsdir[0] &&\n\t\t\t    peerstats.fp != NULL) {\n\t\t\t\tfclose(peerstats.fp);\n\t\t\t\tpeerstats.fp = NULL;\n\t\t\t\tfilegen_setup(&peerstats, now.l_ui);\n\t\t\t}\n\t\t\tif (loopstats.prefix == &statsdir[0] &&\n\t\t\t    loopstats.fp != NULL) {\n\t\t\t\tfclose(loopstats.fp);\n\t\t\t\tloopstats.fp = NULL;\n\t\t\t\tfilegen_setup(&loopstats, now.l_ui);\n\t\t\t}\n\t\t\tif (clockstats.prefix == &statsdir[0] &&\n\t\t\t    clockstats.fp != NULL) {\n\t\t\t\tfclose(clockstats.fp);\n\t\t\t\tclockstats.fp = NULL;\n\t\t\t\tfilegen_setup(&clockstats, now.l_ui);\n\t\t\t}\n\t\t\tif (rawstats.prefix == &statsdir[0] &&\n\t\t\t    rawstats.fp != NULL) {\n\t\t\t\tfclose(rawstats.fp);\n\t\t\t\trawstats.fp = NULL;\n\t\t\t\tfilegen_setup(&rawstats, now.l_ui);\n\t\t\t}\n\t\t\tif (sysstats.prefix == &statsdir[0] &&\n\t\t\t    sysstats.fp != NULL) {\n\t\t\t\tfclose(sysstats.fp);\n\t\t\t\tsysstats.fp = NULL;\n\t\t\t\tfilegen_setup(&sysstats, now.l_ui);\n\t\t\t}\n\t\t\tif (protostats.prefix == &statsdir[0] &&\n\t\t\t    protostats.fp != NULL) {\n\t\t\t\tfclose(protostats.fp);\n\t\t\t\tprotostats.fp = NULL;\n\t\t\t\tfilegen_setup(&protostats, now.l_ui);\n\t\t\t}\n#ifdef AUTOKEY\n\t\t\tif (cryptostats.prefix == &statsdir[0] &&\n\t\t\t    cryptostats.fp != NULL) {\n\t\t\t\tfclose(cryptostats.fp);\n\t\t\t\tcryptostats.fp = NULL;\n\t\t\t\tfilegen_setup(&cryptostats, now.l_ui);\n\t\t\t}\n#endif\t/* AUTOKEY */\n#ifdef DEBUG_TIMING\n\t\t\tif (timingstats.prefix == &statsdir[0] &&\n\t\t\t    timingstats.fp != NULL) {\n\t\t\t\tfclose(timingstats.fp);\n\t\t\t\ttimingstats.fp = NULL;\n\t\t\t\tfilegen_setup(&timingstats, now.l_ui);\n\t\t\t}\n#endif\t/* DEBUG_TIMING */\n\t\t}\n\t\tbreak;\n\n\t/*\n\t * Open pid file.\n\t */\n\tcase STATS_PID_FILE:\n\t\tif ((fp = fopen(value, \"w\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"pid file %s: %m\",\n\t\t\t    value);\n\t\t\tbreak;\n\t\t}\n\t\tfprintf(fp, \"%d\", (int)getpid());\n\t\tfclose(fp);;\n\t\tbreak;\n\n\t/*\n\t * Read leapseconds file.\n\t */\n\tcase STATS_LEAP_FILE:\n\t\tif ((fp = fopen(value, \"r\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"leapseconds file %s: %m\",\n\t\t\t    value);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (leap_file(fp) < 0)\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"format error leapseconds file %s\",\n\t\t\t    value);\n\t\telse\n\t\t\tmprintf_event(EVNT_TAI, NULL,\n\t\t\t\t      \"%d leap %s expire %s\", leap_tai,\n\t\t\t\t      fstostr(leap_sec),\n\t\t\t\t      fstostr(leap_expire));\n\t\tfclose(fp);\n\t\tbreak;\n\n\tdefault:\n\t\t/* oh well */\n\t\tbreak;\n\t}\n}\n\n\n/*\n * record_peer_stats - write peer statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past UTC midnight)\n * IP address\n * status word (hex)\n * offset\n * delay\n * dispersion\n * jitter\n*/\nvoid\nrecord_peer_stats(\n\tsockaddr_u *addr,\n\tint\tstatus,\n\tdouble\toffset,\t\t/* offset */\n\tdouble\tdelay,\t\t/* delay */\n\tdouble\tdispersion,\t/* dispersion */\n\tdouble\tjitter\t\t/* jitter */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&peerstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (peerstats.fp != NULL) {\n\t\tfprintf(peerstats.fp,\n\t\t    \"%lu %s %s %x %.9f %.9f %.9f %.9f\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(addr), status, offset,\n\t\t    delay, dispersion, jitter);\n\t\tfflush(peerstats.fp);\n\t}\n}\n\n\n/*\n * record_loop_stats - write loop filter statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past midnight)\n * offset\n * frequency (PPM)\n * jitter\n * wnder (PPM)\n * time constant (log2)\n */\nvoid\nrecord_loop_stats(\n\tdouble\toffset,\t\t/* offset */\n\tdouble\tfreq,\t\t/* frequency (PPM) */\n\tdouble\tjitter,\t\t/* jitter */\n\tdouble\twander,\t\t/* wander (PPM) */\n\tint spoll\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&loopstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (loopstats.fp != NULL) {\n\t\tfprintf(loopstats.fp, \"%lu %s %.9f %.3f %.9f %.6f %d\\n\",\n\t\t    day, ulfptoa(&now, 3), offset, freq * 1e6, jitter,\n\t\t    wander * 1e6, spoll);\n\t\tfflush(loopstats.fp);\n\t}\n}\n\n\n/*\n * record_clock_stats - write clock statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past midnight)\n * IP address\n * text message\n */\nvoid\nrecord_clock_stats(\n\tsockaddr_u *addr,\n\tconst char *text\t/* timecode string */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&clockstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (clockstats.fp != NULL) {\n\t\tfprintf(clockstats.fp, \"%lu %s %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(addr), text);\n\t\tfflush(clockstats.fp);\n\t}\n}\n\n\n/*\n * mprintf_clock_stats - write clock statistics to file with\n *\t\t\tmsnprintf-style formatting.\n */\nint\nmprintf_clock_stats(\n\tsockaddr_u *addr,\n\tconst char *fmt,\n\t...\n\t)\n{\n\tva_list\tap;\n\tint\trc;\n\tchar\tmsg[512];\n\n\tva_start(ap, fmt);\n\trc = mvsnprintf(msg, sizeof(msg), fmt, ap);\n\tva_end(ap);\n\tif (stats_control)\n\t\trecord_clock_stats(addr, msg);\n\n\treturn rc;\n}\n\n/*\n * record_raw_stats - write raw timestamps to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * peer ip address\n * IP address\n * t1 t2 t3 t4 timestamps\n */\nvoid\nrecord_raw_stats(\n\tsockaddr_u *srcadr,\n\tsockaddr_u *dstadr,\n\tl_fp\t*t1,\t\t/* originate timestamp */\n\tl_fp\t*t2,\t\t/* receive timestamp */\n\tl_fp\t*t3,\t\t/* transmit timestamp */\n\tl_fp\t*t4\t\t/* destination timestamp */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&rawstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (rawstats.fp != NULL) {\n\t\tfprintf(rawstats.fp, \"%lu %s %s %s %s %s %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(srcadr), dstadr ? \n\t\t    stoa(dstadr) : \"-\",\tulfptoa(t1, 9), ulfptoa(t2, 9),\n\t\t    ulfptoa(t3, 9), ulfptoa(t4, 9));\n\t\tfflush(rawstats.fp);\n\t}\n}\n\n\n/*\n * record_sys_stats - write system statistics to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * time since reset\n * packets recieved\n * packets for this host\n * current version\n * old version\n * access denied\n * bad length or format\n * bad authentication\n * declined\n * rate exceeded\n * KoD sent\n */\nvoid\nrecord_sys_stats(void)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&sysstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (sysstats.fp != NULL) {\n\t\tfprintf(sysstats.fp,\n\t\t    \"%lu %s %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu\\n\",\n\t\t    day, ulfptoa(&now, 3), current_time - sys_stattime,\n\t\t    sys_received, sys_processed, sys_newversion,\n\t\t    sys_oldversion, sys_restricted, sys_badlength,\n\t\t    sys_badauth, sys_declined, sys_limitrejected,\n\t\t    sys_kodsent);\n\t\tfflush(sysstats.fp);\n\t\tproto_clr_stats();\n\t}\n}\n\n\n/*\n * record_proto_stats - write system statistics to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * text message\n */\nvoid\nrecord_proto_stats(\n\tchar\t*str\t\t/* text string */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&protostats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (protostats.fp != NULL) {\n\t\tfprintf(protostats.fp, \"%lu %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), str);\n\t\tfflush(protostats.fp);\n\t}\n}\n\n\n#ifdef AUTOKEY\n/*\n * record_crypto_stats - write crypto statistics to file\n *\n * file format:\n * day (mjd)\n * time (s past midnight)\n * peer ip address\n * text message\n */\nvoid\nrecord_crypto_stats(\n\tsockaddr_u *addr,\n\tconst char *text\t/* text message */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&cryptostats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (cryptostats.fp != NULL) {\n\t\tif (addr == NULL)\n\t\t\tfprintf(cryptostats.fp, \"%lu %s 0.0.0.0 %s\\n\",\n\t\t\t    day, ulfptoa(&now, 3), text);\n\t\telse\n\t\t\tfprintf(cryptostats.fp, \"%lu %s %s %s\\n\",\n\t\t\t    day, ulfptoa(&now, 3), stoa(addr), text);\n\t\tfflush(cryptostats.fp);\n\t}\n}\n#endif\t/* AUTOKEY */\n\n\n#ifdef DEBUG_TIMING\n/*\n * record_timing_stats - write timing statistics to file\n *\n * file format:\n * day (mjd)\n * time (s past midnight)\n * text message\n */\nvoid\nrecord_timing_stats(\n\tconst char *text\t/* text message */\n\t)\n{\n\tstatic unsigned int flshcnt;\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&timingstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (timingstats.fp != NULL) {\n\t\tfprintf(timingstats.fp, \"%lu %s %s\\n\", day, lfptoa(&now,\n\t\t    3), text);\n\t\tif (++flshcnt % 100 == 0)\n\t\t\tfflush(timingstats.fp);\n\t}\n}\n#endif\n\n\n/*\n * leap_file - read leapseconds file\n *\n * Read the ERTS leapsecond file in NIST text format and extract the\n * NTP seconds of the latest leap and TAI offset after the leap.\n */\nstatic int\nleap_file(\n\tFILE\t*fp\t\t/* file handle */\n\t)\n{\n\tchar\tbuf[NTP_MAXSTRLEN]; /* file line buffer */\n\tu_long\tleap;\t\t/* NTP time at leap */\n\tu_long\texpire;\t\t/* NTP time when file expires */\n\tint\toffset;\t\t/* TAI offset at leap (s) */\n\tint\ti;\n\n\t/*\n\t * Read and parse the leapseconds file. Empty lines and comments\n\t * are ignored. A line beginning with #@ contains the file\n\t * expiration time in NTP seconds. Other lines begin with two\n\t * integers followed by junk or comments. The first integer is\n\t * the NTP seconds at the leap, the second is the TAI offset\n\t * after the leap.\n\t */\n\toffset = 0;\n\tleap = 0;\n\texpire = 0;\n\ti = 10;\n\twhile (fgets(buf, NTP_MAXSTRLEN - 1, fp) != NULL) {\n\t\tif (strlen(buf) < 1)\n\t\t\tcontinue;\n\n\t\tif (buf[0] == '#') {\n\t\t\tif (strlen(buf) < 3)\n\t\t\t\tcontinue;\n\n\t\t\t/*\n\t\t\t * Note the '@' flag was used only in the 2006\n\t\t\t * table; previious to that the flag was '$'.\n\t\t\t */\n\t\t\tif (buf[1] == '@' || buf[1] == '$') {\n\t\t\t\tif (sscanf(&buf[2], \"%lu\", &expire) !=\n\t\t\t\t    1)\n\t\t\t\t\treturn (-1);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (sscanf(buf, \"%lu %d\", &leap, &offset) == 2) {\n\n\t\t\t/*\n\t\t\t * Valid offsets must increase by one for each\n\t\t\t * leap.\n\t\t\t */\n\t\t\tif (i++ != offset)\n\t\t\t\treturn (-1);\n\t\t}\n\t}\n\n\t/*\n\t * There must be at least one leap.\n\t */\n\tif (i == 10)\n\t\treturn (-1);\n\n\tleap_tai = offset;\n\tleap_sec = leap;\n\tleap_expire = expire;\n\treturn (0);\n}\n\n\n/*\n * leap_month - returns seconds until the end of the month.\n */\nu_long\nleap_month(\n\tu_long\tsec\t\t/* current NTP second */\n\t)\n{\n\tint\t     leap;\n\tint32\t     year, month;\n\tu_int32\t     ndays;\n\tntpcal_split tmp;\n\tvint64\t     tvl;\n\n\t/* --*-- expand time and split to days */\n\ttvl   = ntpcal_ntp_to_ntp(sec, NULL);\n\ttmp   = ntpcal_daysplit(&tvl);\n\t/* --*-- split to years and days in year */\n\ttmp   = ntpcal_split_eradays(tmp.hi + DAY_NTP_STARTS - 1, &leap);\n\tyear  = tmp.hi;\n\t/* --*-- split days of year to month */\n\ttmp   = ntpcal_split_yeardays(tmp.lo, leap);\n\tmonth = tmp.hi;\n\t/* --*-- get nominal start of next month */\n\tndays = ntpcal_edate_to_eradays(year, month+1, 0) + 1 - DAY_NTP_STARTS;\n\t\n\treturn (u_int32)(ndays*SECSPERDAY - sec);\n}\n\n\n/*\n * getauthkeys - read the authentication keys from the specified file\n */\nvoid\ngetauthkeys(\n\tconst char *keyfile\n\t)\n{\n\tint len;\n\n\tlen = strlen(keyfile);\n\tif (!len)\n\t\treturn;\n\t\n#ifndef SYS_WINNT\n\tkey_file_name = erealloc(key_file_name, len + 1);\n\tmemcpy(key_file_name, keyfile, len + 1);\n#else\n\tkey_file_name = erealloc(key_file_name, _MAX_PATH);\n\tif (len + 1 > _MAX_PATH)\n\t\treturn;\n\tif (!ExpandEnvironmentStrings(keyfile, key_file_name,\n\t\t\t\t      _MAX_PATH)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"ExpandEnvironmentStrings(KEY_FILE) failed: %m\");\n\t\tstrncpy(key_file_name, keyfile, _MAX_PATH);\n\t}\n#endif /* SYS_WINNT */\n\n\tauthreadkeys(key_file_name);\n}\n\n\n/*\n * rereadkeys - read the authentication key file over again.\n */\nvoid\nrereadkeys(void)\n{\n\tif (NULL != key_file_name)\n\t\tauthreadkeys(key_file_name);\n}\n\n\n#if notyet\n/*\n * ntp_exit - document explicitly that ntpd has exited\n */\nvoid\nntp_exit(int retval)\n{\n\tmsyslog(LOG_ERR, \"EXITING with return code %d\", retval);\n\texit(retval);\n}\n#endif\n\n/*\n * fstostr - prettyprint NTP seconds\n */\nchar * fstostr(\n\ttime_t\tntp_stamp\n\t)\n{\n\tchar\t*\tbuf;\n\tstruct tm *\ttm;\n\ttime_t\t\tunix_stamp;\n\n\tLIB_GETBUF(buf);\n\tunix_stamp = ntp_stamp - JAN_1970;\n\ttm = gmtime(&unix_stamp);\n\tif (NULL == tm)\n#ifdef WAIT_FOR_NTP_CRYPTO_C_CALLERS_ABLE_TO_HANDLE_MORE_THAN_20_CHARS\n\t\tmsnprintf(buf, LIB_BUFLENGTH, \"gmtime: %m\");\n#else\n\t\tstrncpy(buf, \"gmtime() error\", LIB_BUFLENGTH);\n#endif\n\telse\n\t\tsnprintf(buf, LIB_BUFLENGTH, \"%04d%02d%02d%02d%02d\",\n\t\t\t tm->tm_year + 1900, tm->tm_mon + 1,\n\t\t\t tm->tm_mday, tm->tm_hour, tm->tm_min);\n\n\treturn buf;\n}\n\n\n/*\n * ntpd_time_stepped is called back by step_systime(), allowing ntpd\n * to do any one-time processing necessitated by the step.\n */\nvoid\nntpd_time_stepped(void)\n{\n\tu_int saved_mon_enabled;\n\n\t/*\n\t * flush the monitor MRU list which contains l_fp timestamps\n\t * which should not be compared across the step.\n\t */\n\tif (MON_OFF != mon_enabled) {\n\t\tsaved_mon_enabled = mon_enabled;\n\t\tmon_stop(MON_OFF);\n\t\tmon_start(saved_mon_enabled);\n\t}\n\n\t/* inform interpolating Windows code to allow time to go back */\n#ifdef SYS_WINNT\n\twin_time_stepped();\n#endif\n}\n"], "fixing_code": ["* [Bug 1773] openssl not detected during ./configure.\n* [Bug 1774] Segfaults if cryptostats enabled and built without OpenSSL.\n(4.2.7p111) 2011/01/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1772] refclock_open() return value check wrong for ACTS.\n* Default --with-openssl-libdir and --with-openssl-incdir to the values\n  from pkg-config, falling back on our usual search paths if pkg-config\n  is not available or does not have openssl.pc on PKG_CONFIG_PATH.\n* Change refclock_open() to return -1 on failure like open().\n* Update all refclock_open() callers to check for fd <= 0 indicating\n  failure, so they work with older and newer refclock_open() and can\n  easily backport.\n* Initialize refclockproc.rio.fd to -1, harmonize refclock shutdown\n  entrypoints to avoid crashing, particularly if refclock_open() fails.\n* Enable tickadj-like taming of wildly off-spec Windows clock using\n  NTPD_TICKADJ_PPM env. var. specifying baseline slew.\n(4.2.7p110) 2011/01/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1771] algorithmic error in 'clocktime()' fixed.\n* Unit tests extended for hard-coded system time.\n* make V=0 and configure --enable-silent-rules supported.\n* setvar modemsetup = ATE0... overrides ACTS driver default.\n* Preserve last timecode in ACTS driver (ntpq -ccv).\n* Tolerate previous ATE1 state when sending ACTS setup.\n* Enable raw tty line discipline in Windows port.\n* Allow tty open/close/open to succeed on Windows port.\n* Enable ACTS and CHU reference clock drivers on Windows.\n(4.2.7p109) 2011/01/02 Released by Harlan Stenn <stenn@ntp.org>\n* Remove nearly all strcpy() and most strcat() from NTP distribution.\n  One major pocket remains in ntp_crypto.c.  libopts & libisc also have\n  (safe) uses of strcpy() and strcat() remaining.\n* Documentation updates from Dave Mills.\n(4.2.7p108) 2011/01/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1764] Move Palisade modem control logic to configure.ac.\n* [Bug 1768] TIOCFLUSH undefined in linux for refclock_acts.\n* Autokey multiple identity group improvements from Dave Mills.\n* from 4.2.6p3: Update the copyright year.\n(4.2.7p107) 2010/12/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1764] Palisade driver doesn't build on Linux.\n* [Bug 1766] Oncore clock has offset/high jitter at startup.\n* Move ntp_control.h variable IDs to ntp_control.c, remove their use by\n  ntpq.  They are implementation details private to ntpd.  [Bug 597] was\n  caused by ntpq's reliance on these IDs it need not know about.\n* refclock_acts.c updates from Dave Mills.\n(4.2.7p106) 2010/12/30 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3: Update genCommitLog for the bk-5 release.\n(4.2.7p105) 2010/12/29 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p104) 2010/12/28 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3: Create and use scripts/check--help when generating\n  .texi files.\n* from 4.2.6p3: Update bk triggers for the bk-5 release.\n* Support for multiple Autokey identity groups from Dave Mills.\n* Documentation updates from Dave Mills.\n* Add ntpq kerninfo, authinfo, and sysinfo commands similar to ntpdc's.\n(4.2.7p103) 2010/12/24 Released by Harlan Stenn <stenn@ntp.org>\n* Add ntpq pstats command similar to ntpdc's.\n* Remove ntpq pstatus command, rv/readvar does the same and more.\n* Documentation updates from Dave Mills.\n(4.2.7p102) 2010/12/23 Released by Harlan Stenn <stenn@ntp.org>\n* Allow ntpq &1 associd use without preceding association-fetching.\n* Documentation updates from Dave Mills.\n(4.2.7p101) 2010/12/22 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3-RC12: Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre7.\n* from 4.2.6p3-RC12: Relax minimum Automake version to 1.10 with updated\n  libopts.m4.\n(4.2.7p100) 2010/12/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1743] from 4.2.6p3-RC12: Display timezone offset when showing\n  time for sntp in the local timezone (documentation updates).\n(4.2.7p99) 2010/12/21 Released by Harlan Stenn <stenn@ntp.org>\n* Add unit tests for msnprintf().\n(4.2.7p98) 2010/12/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1761] clockstuff/clktest-opts.h omitted from tarball.\n* [Bug 1762] from 4.2.6p3-RC12: manycastclient responses interfere.\n* Documentation updates from Dave Mills.\n(4.2.7p97) 2010/12/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1458] from 4.2.6p3-RC12: Can not compile NTP on FreeBSD 4.7.\n* [Bug 1760] from 4.2.6p3-RC12: ntpd Windows interpolation cannot be\n  disabled.\n* from 4.2.6p3-RC12: Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre5.\n* Documentation updates from Dave Mills.\n(4.2.7p96) 2010/12/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1758] from 4.2.6p3-RC12: setsockopt IPV6_MULTICAST_IF with wrong\n  ifindex.\n* Documentation updates from Dave Mills.\n(4.2.7p95) 2010/12/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1753] 4.2.7p94 faults on startup in newpeer(), strdup(NULL).\n* [Bug 1754] from 4.2.6p3-RC12: --version output should be more verbose.\n* [Bug 1757] from 4.2.6p3-RC12: oncore snprintf(\"%m\") doesn't expand %m.\n* from 4.2.6p3-RC12: Suppress ntp-keygen OpenSSL version display for\n  --help, --version, display both build and runtime OpenSSL versions\n  when they differ.\n* from 4.2.6p3-RC12: Upgrade to libopts 33.5.8 from AutoGen 5.11.6pre3.\n* Documentation updates from Dave Mills.\n(4.2.7p94) 2010/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1751] from 4.2.6p3-RC12: Support for Atari FreeMiNT OS.\n* Documentation updates from Dave Mills.\n(4.2.7p93) 2010/12/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1510] from 4.2.6p3-RC12: Add modes 20/21 for driver 8 to support\n  RAWDCF @ 75 baud.\n* [Bug 1741] from 4.2.6p3-RC12: Enable multicast reception on each\n  address (Windows).\n* from 4.2.6p3-RC12: Other manycastclient repairs:\n  Separate handling of scope ID embedded in many in6_addr from ifindex\n  used for IPv6 multicasting ioctls.\n  Add INT_PRIVACY endpt bit flag for IPv6 RFC 4941 privacy addresses.\n  Enable outbound multicast from only one address per interface in the\n  same subnet, and in that case prefer embedded MAC address modified\n  EUI-64 IPv6 addresses first, then static, and last RFC 4941 privacy\n  addresses.\n  Use setsockopt(IP[V6]_MULTICAST_IF) before each send to multicast to\n  select the local source address, using the correct socket is not\n  enough.\n* \"server ... ident <groupname>\" changes from Dave Mills.\n* Documentation updates from Dave Mills.\n(4.2.7p92) 2010/12/08 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1743] from 4.2.6p3-RC12: Display timezone offset when showing\n  time for sntp in the local timezone.\n(4.2.7p91) 2010/12/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1732] ntpd ties up CPU on disconnected USB device.\n* [Bug 1742] form 4.2.6p3-RC12: Fix a typo in an error message in the\n  \"build\" script.\n(4.2.7p90) 2010/12/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1738] Windows ntpd has wrong net adapter name.\n* [Bug 1740] ntpdc -c reslist packet count wrongly treated as signed.\n(4.2.7p89) 2010/12/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1736] tos int, bool options broken in 4.2.7p66.\n* from 4.2.6p3-RC12: Clean up the SNTP documentation.\n(4.2.7p88) 2010/12/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1735] 'clocktime()' aborts ntpd on bogus input\n(4.2.7p87) 2010/12/01 Released by Harlan Stenn <stenn@ntp.org>\n* from 4.2.6p3-RC12: Clean up m4 quoting in configure.ac, *.m4 files,\n  resolving intermittent AC_LANG_PROGRAM possibly undefined errors.\n(4.2.7p86) 2010/11/29 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p85) 2010/11/24 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p84) 2010/11/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1618] Unreachable code in jjy_start().\n* [Bug 1725] from 4.2.6p3-RC11: ntpd sends multicast from only one\n  address.\n* from 4.2.6p3-RC11: Upgrade libopts to 33.3.8.\n* from 4.2.6p3-RC11: Bump minimum Automake version to 1.11, required for\n  AM_COND_IF use in LIBOPTS_CHECK.\n* An almost complete rebuild of the initial loopfilter configuration\n  process, including the code that determines the interval between\n  frequency file updates, from Dave Mills.\n* Documentation updates from Dave Mills.\n* Add ntp-keygen -l/--lifetime to control certificate expiry.\n* JJY driver improvements for Tristate JJY01/02, including changes\n  to its clockstats format.\n* Add \"nonvolatile\" ntp.conf directive to control how often the\n  driftfile is written.\n(4.2.7p83) 2010/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1727] ntp-keygen PLEN, ILEN undeclared --without-crypto.\n* Remove top-level libopts, use sntp/libopts.\n* from 4.2.6p3-RC11: Remove log_msg() and debug_msg() from sntp in favor\n  of msyslog().\n* Documentation updates from Dave Mills.\n(4.2.7p82) 2010/11/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1728] from 4.2.6p3-RC11: In ntp_openssl.m4, don't add\n  -I/usr/include or -L/usr/lib to CPPFLAGS or LDFLAGS.\n(4.2.7p81) 2010/11/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1681] from 4.2.6p3-RC10: More sntp logging cleanup.\n* [Bug 1683] from 4.2.6p3-RC10: Non-localhost on loopback exempted from\n  nic rules.\n* [Bug 1719] Cleanup for ntp-keygen and fix -V crash, from Dave Mills.\n(4.2.7p80) 2010/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1574] from 4.2.6p3-RC9: sntp doesn't set tv_usec correctly.\n* [Bug 1681] from 4.2.6p3-RC9: sntp logging cleanup.\n* [Bug 1683] from 4.2.6p3-RC9: Interface binding does not seem to work\n  as intended.\n* [Bug 1708] make check fails with googletest 1.4.0.\n* [Bug 1709] from 4.2.6p3-RC9: ntpdate ignores replies with equal\n  receive and transmit timestamps.\n* [Bug 1715] sntp utilitiesTest.IPv6Address failed.\n* [Bug 1718] Improve gtest checks in configure.ac.\n(4.2.7p79) 2010/11/07 Released by Harlan Stenn <stenn@ntp.org>\n* Correct frequency estimate with no drift file, from David Mills.\n(4.2.7p78) 2010/11/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1697] filegen implementation should be improved.\n* Refactor calendar functions in terms of new common code.\n* Documentation updates from Dave Mills.\n(4.2.7p77) 2010/11/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1692] packageinfo.sh needs to be \"sourced\" using ./ .\n* [Bug 1695] ntpdate takes longer than necessary.\n(4.2.7p76) 2010/11/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1690] Unit tests fails to build on some systems.\n* [Bug 1691] Use first NMEA sentence each second.\n* Put the sntp tests under sntp/ .\n* ... and only build/run them if we have gtest.\n* Documentation updates from Dave Mills.\n(4.2.7p75) 2010/10/30 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Include Linus Karlsson's GSoC 2010 testing code.\n(4.2.7p74) 2010/10/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1685] from 4.2.6p3-RC8: NMEA driver mode byte confusion.\n* from 4.2.6p3-RC8: First cut at using scripts/checkChangeLog.\n* Documentation updates from Dave Mills.\n(4.2.7p73) 2010/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1680] Fix alignment of clock_select() arrays.\n* refinements to new startup behavior from David Mills.\n* For the bootstrap script, touch .html files last.\n* Add 'make check' test case that would have caught [Bug 1678].\n(4.2.7p72) 2010/10/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1679] Fix test for -lsocket.\n* Clean up missing ;; entries in configure.ac.\n(4.2.7p71) 2010/10/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1676] from 4.2.6p3-RC7: NMEA: $GPGLL did not work after fix\n  for Bug 1571.\n* [Bug 1678] \"restrict source\" treated as \"restrict default\".\n* from 4.2.6p3-RC7: Added scripts/checkChangeLog.\n(4.2.7p70) 2010/10/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1571] from 4.2.6p3-RC6: NMEA does not relate data to PPS edge.\n* [Bug 1572] from 4.2.p63-RC6: NMEA time adjustment for GPZDG buggy.\n* [Bug 1675] from 4.2.6p3-RC6: Prohibit includefile remote config.\n* Enable generating ntpd/ntp_keyword.h after keyword-gen.c changes on\n  Windows as well as POSIX platforms.\n* Fix from Dave Mills for a rare singularity in clock_combine().\n(4.2.7p69) 2010/10/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1671] Automatic delay calibration is sometimes inaccurate.\n(4.2.7p68) 2010/10/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1669] from 4.2.6p3-RC5: NTP fails to compile on IBM AIX 5.3.\n* [Bug 1670] Fix peer->bias and broadcastdelay.\n* Documentation updates from Dave Mills.\n* Documentation EOL cleanup.\n(4.2.7p67) 2010/10/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1649] from 4.2.6p3-RC5: Require NMEA checksum if $GPRMC or\n  previously seen.\n(4.2.7p66) 2010/10/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1277] Provide and use O(1) FIFOs, esp. in the config tree code.\n* Remove unused 'bias' configuration keyword.\n(4.2.7p65) 2010/10/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1584] from 4.2.6p3-RC4: wrong SNMP type for precision,\n  resolution.\n* Remove 'calldelay' and 'sign' remnants from parser, ntp_config.c.\n(4.2.7p64) 2010/10/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1584] from 4.2.6p3-RC3: ntpsnmpd OID must be mib-2.197.\n* [Bug 1659] from 4.2.6p3-RC4: Need CLOCK_TRUETIME not CLOCK_TRUE.\n* [Bug 1663] ntpdsim should not open net sockets.\n* [Bug 1665] from 4.2.6p3-RC4: is_anycast() u_int32_t should be u_int32.\n* from 4.2.6p3: ntpsnmpd, libntpq warning cleanup.\n* Remove 'calldelay' and 'sign' keywords (Dave Mills).\n* Documentation updates from Dave Mills.\n(4.2.7p63) 2010/10/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1080] from 4.2.6p3-RC3: ntpd on ipv6 routers very chatty.\n* Documentation nit cleanup.\n* Documentation updates from Dave Mills.\n(4.2.7p62) 2010/10/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 750] from 4.2.6p3-RC3: Non-existing device causes coredump with \n  RIPE-NCC driver.\n* [Bug 1567] from 4.2.6p3-RC3: Support Arbiter 1093C Satellite Clock on\n  Windows.\n* [Bug 1581] from 4.2.6p3-RC3: printf format string mismatch leftover.\n* [Bug 1659] from 4.2.6p3-RC3: Support Truetime Satellite Clocks on\n  Windows. \n* [Bug 1660] from 4.2.6p3-RC3: On some systems, test is in /usr/bin, not\n  /bin. \n* [Bug 1661] from 4.2.6p3-RC3: Re-indent refclock_ripencc.c.\n* Lose peer_count from ntp_peer.c and ntp_proto.c (Dave Mills).\n* Documentation updates from Dave Mills.\n(4.2.7p61) 2010/10/06 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation and code cleanup from Dave Mills. No more NTP_MAXASSOC.\n(4.2.7p60) 2010/10/04 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p59) 2010/10/02 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Variable name cleanup from Dave Mills.\n* [Bug 1657] darwin needs res_9_init, not res_init.\n(4.2.7p58) 2010/09/30 Released by Harlan Stenn <stenn@ntp.org>\n* Clock select bugfix from Dave Mills.\n* [Bug 1554] peer may stay selected as system peer after becoming\n  unreachable.\n* [Bug 1644] from 4.2.6p3-RC3: cvo.sh should use lsb_release to identify\n  linux distros.\n* [Bug 1646] ntpd crashes with relative path to logfile.\n(4.2.7p57) 2010/09/27 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p56) 2010/09/25 Released by Harlan Stenn <stenn@ntp.org>\n* Clock combining algorithm improvements from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1642] ntpdsim can't find simulate block in config file.\n* [Bug 1643] from 4.2.6p3-RC3: Range-check the decoding of the RIPE-NCC\n  status codes.\n(4.2.7p55) 2010/09/22 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1636] from 4.2.6p3-RC2: segfault after denied remote config.\n(4.2.7p54) 2010/09/21 Released by Harlan Stenn <stenn@ntp.org>\n* More Initial convergence improvements from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1635] from 4.2.6p3-RC2: \"filegen ... enable\" is not default.\n(4.2.7p53) 2010/09/20 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* More Initial convergence improvements from Dave Mills.\n(4.2.7p52) 2010/09/19 Released by Harlan Stenn <stenn@ntp.org>\n* Initial convergence improvements from Dave Mills.\n(4.2.7p51) 2010/09/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1344] from 4.2.6p3-RC1: ntpd on Windows exits without logging\n  cause.\n* [Bug 1629] 4.2.7p50 configure.ac changes invalidate config.cache.\n* [Bug 1630] 4.2.7p50 cannot bootstrap on Autoconf 2.61.\n(4.2.7p50) 2010/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup NTP_LIB_M.\n* [Bug 1628] Clean up -lxnet/-lsocket usage for (open)solaris.\n(4.2.7p49) 2010/09/13 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p48) 2010/09/12 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.7p47) 2010/09/11 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1588] finish configure --disable-autokey implementation.\n* [Bug 1616] refclock_acts.c: if (pp->leap == 2) is always false.\n* [Bug 1620] [Backward Incompatible] \"discard minimum\" value should be in\n  seconds, not log2 seconds.\n(4.2.7p46) 2010/09/10 Released by Harlan Stenn <stenn@ntp.org>\n* Use AC_SEARCH_LIBS instead of AC_CHECK_LIB for NTP_LIB_M.\n(4.2.7p45) 2010/09/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1578] Consistently use -lm when needed.\n(4.2.7p44) 2010/08/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1573] from 4.2.6p3-beta1: Miscalculation of offset in sntp.\n(4.2.7p43) 2010/08/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1602] Refactor some of the sntp/ directory to facililtate testing.\n(4.2.7p42) 2010/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1593] ntpd abort in free() with logconfig syntax error.\n* [Bug 1595] from 4.2.6p3-beta1: empty last line in key file causes\n  duplicate key to be added\n* [Bug 1597] from 4.2.6p3-beta1: packet processing ignores RATE KoD packets,\n  Because of a bug in string comparison.\n(4.2.7p41) 2010/07/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1581] from 4.2.6p3-beta1: ntp_intres.c size_t printf format\n  string mismatch.\n* [Bug 1586] ntpd 4.2.7p40 doesn't write to syslog after fork on QNX.\n* Avoid race with parallel builds using same source directory in\n  scripts/genver by using build directory for temporary files.\n* orphanwait documentation updates.\n(4.2.7p40) 2010/07/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1395] ease ntpdate elimination with ntpd -w/--wait-sync\n* [Bug 1396] allow servers on ntpd command line like ntpdate\n(4.2.7p39) 2010/07/09 Released by Harlan Stenn <stenn@ntp.org>\n* Fix typo in driver28.html.\n* [Bug 1581] from 4.2.6p2: size_t printf format string mismatches, IRIG\n  string buffers undersized.  Mostly backported from earlier ntp-dev\n  fixes by Juergen Perlinger.\n(4.2.7p38) 2010/06/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1570] backported to 4.2.6p2-RC7.\n* [Bug 1575] from 4.2.6p2-RC7: use 'snprintf' with LIB_BUFLENGTH in\n  inttoa.c, tvtoa.c and utvtoa.c\n* [Bug 1576] backported to 4.2.6p2-RC7.\n* Typo fix in a comment in ntp_proto.c.\n(4.2.7p37) 2010/06/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1576] sys/sysctl.h depends on sys/param.h on OpenBSD.\n(4.2.7p36) 2010/06/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1560] Initial support for orphanwait, from Dave Mills.\n* clock_filter()/reachability fixes from Dave Mills.\n(4.2.7p35) 2010/06/12 Released by Harlan Stenn <stenn@ntp.org>\n* Rewrite of multiprecision macros in 'ntp_fp.h' from J. Perlinger\n  <perlinger@ntp.org>\n* [Bug 715] from 4.2.6p2-RC6: libisc Linux IPv6 interface iteration\n  drops multicast flags.\n(4.2.7p34) 2010/06/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1570] serial clock drivers get outdated input from kernel tty\n  line buffer after startup\n(4.2.7p33) 2010/06/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1561] from 4.2.6p2-RC5: ntpq, ntpdc \"passwd\" prompts for MD5\n  password w/SHA1.\n* [Bug 1565] from 4.2.6p2-RC5: sntp/crypto.c compile fails on MacOS over\n  vsnprintf().\n* from 4.2.6p2-RC5: Windows port: do not exit in\n  ntp_timestamp_from_counter() without first logging the reason.\n(4.2.7p32) 2010/05/19 Released by Harlan Stenn <stenn@ntp.org>\n* Copyright file cleanup from Dave Mills.\n* [Bug 1555] from 4.2.6p2-RC4: sntp illegal C (mixed code and\n  declarations).\n* [Bug 1558] pool prototype associations have 0.0.0.0 for remote addr.\n* configure.ac: add --disable-autokey, #define AUTOKEY to enable future\n  support for building without Autokey, but with OpenSSL for its digest\n  algorithms (hash functions).  Code must be modified to use #ifdef\n  AUTOKEY instead of #ifdef OPENSSL where appropriate to complete this.\n* include/ntp_crypto.h: make assumption AUTOKEY implies OPENSSL explicit.\n(4.2.7p31) 2010/05/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1325] from 4.2.6p2-RC3: unreachable code sntp recv_bcst_data().\n* [Bug 1459] from 4.2.6p2-RC3: sntp MD5 authentication does not work\n  with ntpd.\n* [Bug 1552] from 4.2.6p2-RC3: update and complete broadcast and crypto\n  features in sntp.\n* [Bug 1553] from 4.2.6p2-RC3: sntp/configure.ac OpenSSL support.\n* from 4.2.6p2-RC3: Escape unprintable characters in a refid in ntpq -p\n  billboard.\n* from 4.2.6p2-RC3: Simplify hash client code by providing OpenSSL\n  EVP_*() API when built without OpenSSL.  (already in 4.2.7)\n* from 4.2.6p2-RC3: Do not depend on ASCII in sntp.\n(4.2.7p30) 2010/05/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1526] ntpd DNS pipe read EINTR with no network at startup.\n* Update the ChangeLog entries when merging items from -stable.\n(4.2.7p29) 2010/05/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1542] ntpd mrulist response may have incorrect last.older.\n* [Bug 1543] ntpq mrulist must refresh nonce when retrying.\n* [Bug 1544] ntpq mrulist sscanf timestamp format mismatch on 64-bit.\n* Windows compiling hints/winnt.html update from G. Sunil Tej.\n(4.2.7p28) 2010/05/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1512] from 4.2.6p2-RC3: ntpsnmpd should connect to net-snmpd\n  via a unix-domain socket by default.\n  Provide a command-line 'socket name' option.\n* [Bug 1538] from 4.2.6p2-RC3: update refclock_nmea.c's call to\n  getprotobyname().\n* [Bug 1541] from 4.2.6p2-RC3: Fix wrong keyword for \"maxclock\".\n(4.2.7p27) 2010/04/27 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p26) 2010/04/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1465] from 4.2.6p2-RC2: Make sure time from TS2100 is not\n  invalid (backport from -dev).\n* [Bug 1528] from 4.2.6p2-RC2: Fix EDITLINE_LIBS link order for ntpq\n  and ntpdc.\n* [Bug 1531] Require nonce with mrulist requests.\n* [Bug 1532] Remove ntpd support for ntpdc's monlist in favor of ntpq's\n  mrulist.\n* [Bug 1534] from 4.2.6p2-RC2: conflicts with VC++ 2010 errno.h.\n* [Bug 1535] from 4.2.6p2-RC2: \"restrict -4 default\" and \"restrict\n  -6 default\" ignored.\n(4.2.7p25) 2010/04/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1528] from 4.2.6p2-RC2: Remove --with-arlib from br-flock.\n* [Bug 1503] [Bug 1504] [Bug 1518] [Bug 1522] from 4.2.6p2-RC2:\n  all of which were fixed in 4.2.7 previously. \n(4.2.7p24) 2010/04/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1390] Control PPS on the Oncore M12.\n* [Bug 1518] Windows ntpd should lock to one processor more\n  conservatively.\n* [Bug 1520] '%u' formats for size_t gives warnings with 64-bit builds.\n* [Bug 1522] Enable range syntax \"trustedkey (301 ... 399)\".\n* Documentation updates for 4.2.7p22 changes and additions, updating\n  ntpdc.html, ntpq.html, accopt.html, confopt.html, manyopt.html,\n  miscopt.html, and miscopt.txt.\n* accopt.html: non-ntpport doc changes from Dave Mills.\n* Modify full MRU list preemption when full to match \"discard monitor\"\n  documentation, by removing exception for count == 1.\n(4.2.7p23) 2010/04/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1516] unpeer by IP address fails, DNS name works.\n* [Bug 1517] ntpq and ntpdc should verify reverse DNS before use.\n  ntpq and ntpdc now use the following format for showing purported\n  DNS names from IP address \"reverse\" DNS lookups when the DNS name\n  does not exist or does not include the original IP address among\n  the results: \"192.168.1.2 (fake.dns.local)\".\n(4.2.7p22) 2010/04/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1432] Don't set inheritable flag for linux capabilities.\n* [Bug 1465] Make sure time from TS2100 is not invalid.\n* [Bug 1483] AI_NUMERICSERV undefined in 4.2.7p20.\n* [Bug 1497] fudge is broken by getnetnum() change.\n* [Bug 1503] Auto-enabling of monitor for \"restrict ... limited\" wrong.\n* [Bug 1504] ntpdate tickles ntpd \"discard minimum 1\" rate limit if\n  \"restrict ... limited\" is used.\n* ntpdate: stop querying source after KoD packet response, log it.\n* ntpdate: rate limit each server to 2s between packets.\n* From J. N. Perlinger: avoid pointer wraparound warnings in dolfptoa(),\n  printf format mismatches with 64-bit size_t.\n* Broadcast client (ephemeral) associations should be demobilized only\n  if they are not heard from for 10 consecutive polls, regardless of\n  surviving the clock selection.  Fix from David Mills.\n* Add \"ntpq -c ifstats\" similar to \"ntpdc -c ifstats\".\n* Add \"ntpq -c sysstats\" similar to \"ntpdc -c sysstats\".\n* Add \"ntpq -c monstats\" to show monlist knobs and stats.\n* Add \"ntpq -c mrulist\" similar to \"ntpdc -c monlist\" but not\n  limited to 600 rows, and with filtering and sorting options:\n  ntpq -c \"mrulist mincount=2 laddr=192.168.1.2 sort=-avgint\"\n  ntpq -c \"mrulist sort=addr\"\n  ntpq -c \"mrulist mincount=2 sort=count\"\n  ntpq -c \"mrulist sort=-lstint\"\n* Modify internal representation of MRU list to use l_fp fixed-point\n  NTP timestamps instead of seconds since startup.  This increases the\n  resolution and substantially improves accuracy of sorts involving\n  timestamps, at the cost of flushing all MRU entries when the clock is\n  stepped, to ensure the timestamps can be compared with the current\n  get_systime() results.\n* Add ntp.conf \"mru\" directive to configure MRU parameters, such as\n  \"mru mindepth 600 maxage 64 maxdepth 5000 maxmem 1024\" or\n  \"mru initalloc 0 initmem 16 incalloc 99 incmem 4\".  Several pairs are\n  equivalent with one in units of MRU entries and its twin in units of\n  kilobytes of memory, so the last one used in ntp.conf controls:\n  maxdepth/maxmem, initalloc/initmem, incalloc/incmem.  With the above\n  values, ntpd will preallocate 16kB worth of MRU entries, allocating\n  4kB worth each time more are needed, with a hard limit of 1MB of MRU\n  entries.  Until there are more than 600 entries none would be reused.\n  Then only entries for addresses last seen 64 seconds or longer ago are\n  reused.\n* Limit \"ntpdc -c monlist\" response in ntpd to 600 entries, the previous\n  overall limit on the MRU list depth which was driven by the monlist\n  implementation limit of one request with a single multipacket\n  response.\n* New \"pool\" directive implementation modeled on manycastclient.\n* Do not abort on non-ASCII characters in ntp.conf, ignore them.\n* ntpq: increase response reassembly limit from 24 to 32 packets, add\n  discussion in comment regarding results with even larger MAXFRAGS.\n* ntpq: handle \"passwd MYPASSWORD\" (without prompting) as with ntpdc.\n* ntpdc: do not examine argument to \"passwd\" if not supplied.\n* configure: remove check for pointer type used with qsort(), we\n  require ANSI C which mandates void *.\n* Reset sys_kodsent to 0 in proto_clr_stats().\n* Add sptoa()/sockporttoa() similar to stoa()/socktoa() adding :port.\n* Use memcpy() instead of memmove() when buffers can not overlap.\n* Remove sockaddr_storage from our sockaddr_u union of sockaddr,\n  sockaddr_in, and sockaddr_in6, shaving about 100 bytes from its size\n  and substantially decreasing MRU entry memory consumption.\n* Extend ntpq readvar (alias rv) to allow fetching up to three named\n  variables in one operation:  ntpq -c \"rv 0 version offset frequency\".\n* ntpq: use srchost variable to show .POOL. prototype associations'\n  hostname instead of address 0.0.0.0.\n* \"restrict source ...\" configures override restrictions for time\n  sources, allows tight default restrictions to be used with the pool\n  directive (where server addresses are not known in advance).\n* Ignore \"preempt\" modifier on manycastclient and pool prototype\n  associations.  The resulting associations are preemptible, but the\n  prototype must not be.\n* Maintain and use linked list of associations (struct peer) in ntpd,\n  avoiding walking 128 hash table entries to iterate over peers.\n* Remove more workarounds unneeded since we require ISO C90 AKA ANSI C:\n  - remove fallback implementations for memmove(), memset, strstr().\n  - do not test for atexit() or memcpy().\n* Collapse a bunch of code duplication in ntpd/ntp_restrict.c added with\n  support for IPv6.\n* Correct some corner case failures in automatically enabling the MRU\n  list if any \"restrict ... limited\" is in effect, and in disabling MRU\n  maintenance. (ntp_monitor.c, ntp_restrict.c)\n* Reverse the internal sort order of the address restriction lists, but\n  preserve the same behavior.  This allows removal of special-case code\n  related to the default restrictions and more straightforward lookups\n  of restrictions for a given address (now, stop on first match).\n* Move ntp_restrict.c MRU doubly-linked list maintenance code into\n  ntp_lists.h macros, allowing more duplicated source excision.\n* Repair ntpdate.c to no longer test HAVE_TIMER_SETTIME.\n* Do not reference peer_node/unpeer_node after freeing when built with\n  --disable-saveconfig and using DNS.\n(4.2.7p21) 2010/03/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1514] from 4.2.6p1-RC6: Typo in ntp_proto.c: fabs(foo < .4)\n  should be fabs(foo) < .4.\n* [Bug 1464] from 4.2.6p1-RC6: synchronization source wrong for\n  refclocks ARCRON_MSF (27) and SHM (28).\n* From 4.2.6p1-RC6: Correct Windows port's refclock_open() to\n  return 0 on failure not -1.\n* From 4.2.6p1-RC6: Correct CHU, dumbclock, and WWVB drivers to\n  check for 0 returned from refclock_open() on failure.\n* From 4.2.6p1-RC6: Correct \"SIMUL=4 ./flock-build -1\" to\n  prioritize -1/--one.\n* [Bug 1306] constant conditionals in audio_gain().\n(4.2.7p20) 2010/02/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1483] hostname in ntp.conf \"restrict\" parameter rejected.\n* Use all addresses for each restrict by hostname.\n* Use async DNS to resolve trap directive hostnames.\n(4.2.7p19) 2010/02/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1338] Update the association type codes in ntpq.html.\n* [Bug 1478] from 4.2.6p1-RC5: linking fails: EVP_MD_pkey_type.\n* [Bug 1479] from 4.2.6p1-RC5: not finding readline headers.\n* [Bug 1484] from 4.2.6p1-RC5: ushort is not defined in QNX6.\n(4.2.7p18) 2010/02/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1480] from 4.2.6p1-RC5: snprintf() cleanup caused \n  unterminated refclock IDs.\n* Stop using getaddrinfo() to convert numeric address strings to on-wire\n  addresses in favor of is_ip_address() alone.\n(4.2.7p17) 2010/02/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1477] from 4.2.6p1-RC5: First non-gmake make in clone\n  w/VPATH can't make COPYRIGHT.\n* Attempts to cure CID 108 CID 118 CID 119 TAINTED_SCALAR warnings.\n* Broaden ylwrap workaround VPATH_HACK to all non-GNU make.\n(4.2.7p16) 2010/02/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1474] from 4.2.6p1-RC4: ntp_keygen LCRYPTO after libntp.a.\n* Include 4.2.6p1-RC4: Remove arlib.\n(4.2.7p15) 2010/02/03 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1455] from 4.2.6p1: ntpd does not try /etc/ntp.audio.\n* Include 4.2.6p1: Convert many sprintf() calls to snprintf(), also\n  strcpy(), strcat().\n* Include 4.2.6p1: Fix widely cut-n-pasted bug in refclock shutdown\n  after failed start.\n* Include 4.2.6p1: Remove some dead code checking for emalloc()\n  returning NULL.\n(4.2.7p14) 2010/02/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1338] ntpq displays incorrect association type codes.\n* [Bug 1469] u_int32, int32 changes broke HP-UX 10.20 build.\n* [Bug 1470] from 4.2.6p1: \"make distdir\" compiles keyword-gen.\n* [Bug 1471] CID 120 CID 121 CID 122 is_ip_address() uninit family.\n* [Bug 1472] CID 116 CID 117 minor warnings in new DNS code.\n* [Bug 1473] from 4.2.6p1: \"make distcheck\" version.m4 error.\n(4.2.7p13) 2010/01/31 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1467] from 4.2.6p1: Fix bogus rebuild of sntp/sntp.html.\n(4.2.7p12) 2010/01/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1468] 'make install' broken for root on default NFS mount.\n(4.2.7p11) 2010/01/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 47] Debugging and logging do not work after a fork.\n* [Bug 1010] getaddrinfo() could block and thus should not be called by\n  the main thread/process.\n* New async DNS resolver in ntpd allows nonblocking queries anytime,\n  instead of only once at startup.\n(4.2.7p10) 2010/01/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1140] from 4.2.6p1-RC5: Clean up debug.html, decode.html,\n  and ntpq.html.\n* Include 4.2.6p1-RC3: Use TZ=UTC instead of TZ= when calling date in\n  scripts/mkver.in .\n* [Bug 1448] from 4.2.6p1-RC3: Some macros not correctly conditionally\n  or absolutely defined on Windows.\n* [Bug 1449] from 4.2.6p1-RC3: ntpsim.h in ntp_config.c should be used\n  conditionally.\n* [Bug 1450] from 4.2.6p1-RC3: Option to exclude warnings not\n  unconditionally defined on Windows.\n(4.2.7p9) 2010/01/13 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.7p8) 2010/01/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 702] ntpd service logic should use libopts to examine cmdline.\n* [Bug 1451] from 4.2.6p1-RC3: sntp leaks KoD entry updating.\n* [Bug 1453] from 4.2.6p1-RC3: Use $CC in config.cache filename.\n(4.2.7p7) 2009/12/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 620] ntpdc getresponse() esize != *rsize s/b size != *rsize.\n* [Bug 1446] 4.2.7p6 requires autogen, missing ntpd.1, *.texi, *.menu.\n(4.2.7p6) 2009/12/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1443] Remove unnecessary dependencies on ntp_io.h\n* [Bug 1442] Move Windows functions into libntp files\n* [Bug 1127] from 4.2.6p1-RC3: Check the return of X590_verify().\n* [Bug 1439] from 4.2.6p1-RC3: .texi gen after binary is linked.\n* [Bug 1440] from 4.2.6p1-RC3: Update configure.ac to support kfreebsd.\n* [Bug 1445] from 4.2.6p1-RC3: IRIX does not have -lcap or support\n  linux capabilities.\n(4.2.7p5) 2009/12/25 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.6p1-RC2\n(4.2.7p4) 2009/12/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1429] ntpd -4 option does not reliably force IPv4 resolution.\n* [Bug 1431] System headers must come before ntp headers in ntp_intres.c .\n(4.2.7p3) 2009/12/22 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1426] scripts/VersionName needs . on the search path.\n* [Bug 1427] quote missing in ./build - shows up on NetBSD.\n* [Bug 1428] Use AC_HEADER_RESOLV to fix breaks from resolv.h\n(4.2.7p2) 2009/12/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1419] ntpdate, ntpdc, sntp, ntpd ignore configure --bindir.\n* [Bug 1421] add util/tg2, a clone of tg that works on Linux, NetBSD, and\n  FreeBSD\n(4.2.7p1) 2009/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1348] ntpd Windows port should wait for sendto() completion.\n* [Bug 1413] test OpenSSL headers regarding -Wno-strict-prototypes.\n* [Bug 1418] building ntpd/ntpdc/ntpq statically with ssl fails.\n(4.2.7p0) 2009/12/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1412] m4/os_cflags.m4 caches results that depend on $CC.\n* [Bug 1414] Enable \"make distcheck\" success with BSD make.\n(4.2.7) 2009/12/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1407] configure.ac: recent GNU Make -v does not include \"version\".\n---\n(4.2.6p3) 2011/01/03 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1764] Palisade driver doesn't build on Linux\n* Create and use scripts/check--help when generating .texi files.\n* Update bk triggers for the bk-5 release.\n* Update genCommitLog for the bk-5 release.\n* Update the copyright year.\n\n---\n(4.2.6p3-RC12) 2010/12/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1458] Can not compile NTP on FreeBSD 4.7.\n* [Bug 1510] Add modes 20/21 for driver 8 to support RAWDCF @ 75 baud.\n* [Bug 1618] Unreachable code in jjy_start(). (backport from ntp-dev)\n* [Bug 1719] ntp-keygen -V crash. (backport)\n* [Bug 1740] ntpdc treats many counters as signed. (backport)\n* [Bug 1741] Enable multicast reception on each address (Windows).\n* [Bug 1742] Fix a typo in an error message in the \"build\" script.\n* [Bug 1743] Display timezone offset when showing time for sntp in the\n  local timezone.\n* [Bug 1751] Support for Atari FreeMiNT OS.\n* [Bug 1754] --version output should be more verbose.\n* [Bug 1757] oncore snprintf(\"%m\") doesn't expand %m.\n* [Bug 1758] setsockopt IPV6_MULTICAST_IF with wrong ifindex.\n* [Bug 1760] ntpd Windows interpolation cannot be disabled.\n* [Bug 1762] manycastclient solicitation responses interfere.\n* Upgrade to libopts 34.0.9 from AutoGen 5.11.6pre7.\n* Relax minimum Automake version to 1.10 with updated libopts.m4.\n* Suppress ntp-keygen OpenSSL version display for --help, --version,\n  display both build and runtime OpenSSL versions when they differ.\n* Clean up m4 quoting in configure.ac, *.m4 files, resolving\n  intermittent AC_LANG_PROGRAM possibly undefined errors.\n* Clean up the SNTP documentation.\n* Other manycastclient repairs:\n  Separate handling of scope ID embedded in many in6_addr from ifindex\n  used for IPv6 multicasting ioctls.\n  Add INT_PRIVACY endpt bit flag for IPv6 RFC 4941 privacy addresses.\n  Enable outbound multicast from only one address per interface in the\n  same subnet, and in that case prefer embedded MAC address modified\n  EUI-64 IPv6 addresses first, then static, and last RFC 4941 privacy\n  addresses.\n  Use setsockopt(IP[V6]_MULTICAST_IF) before each send to multicast to\n  select the local source address, using the correct socket is not\n  enough.\n\n---\n(4.2.6p3-RC11) 2010/11/28 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1725] ntpd sends multicast from only one address.\n* [Bug 1728] In ntp_openssl.m4, don't add -I/usr/include or -L/usr/lib\n  to CPPFLAGS or LDFLAGS.\n* [Bug 1733] IRIX doesn't have 'head' (affects scripts/checkChangeLog).\n* Remove log_msg() and debug_msg() from sntp in favor of msyslog().\n* Use a single copy of libopts/, in sntp/.\n* Upgrade libopts to 33.3.8.\n* Bump minimum Automake version to 1.11, required for AM_COND_IF\n  use in LIBOPTS_CHECK.\n* Improvements to the 'build' script.\n\n---\n(4.2.6p3-RC10) 2010/11/14 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1681] More sntp logging cleanup.\n* [Bug 1683] Non-localhost on loopback exempted from nic rules.\n\n---\n(4.2.6p3-RC9) 2010/11/10 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1574] sntp:set_time doesn't set tv_usec correctly.\n* [Bug 1681] sntp logging cleanup.\n* [Bug 1683] Interface binding does not seem to work as intended.\n* [Bug 1691] Use first NMEA sentence each second.\n* [Bug 1692] packageinfo.sh needs to be \"sourced\" using ./ .\n* [Bug 1709] ntpdate ignores replies with equal receive and transmit\n  timestamps.\n* Backport sntp from -dev\n\n---\n(4.2.6p3-RC8) 2010/10/29 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1685] NMEA driver mode byte confusion.\n* First cut at using scripts/checkChangeLog.\n\n---\n(4.2.6p3-RC7) 2010/10/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1676] NMEA: $GPGLL did not work after fix for Bug 1571.\n* Added scripts/checkChangeLog.\n\n---\n(4.2.6p3-RC6) 2010/10/24 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1571] NMEA does not relate data to PPS edge.\n* [Bug 1572] NMEA time adjustment for GPZDG buggy.\n* [Bug 1675] Prohibit includefile remote config.\n\n---\n(4.2.6p3-RC5) 2010/10/22 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1649] Require NMEA checksum if $GPRMC or previously seen.\n* [Bug 1669] NTP 4.2.6p2 fails to compile on IBM AIX 5.3.\n\n---\n(4.2.6p3-RC4) 2010/10/16 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1584] wrong SNMP type for precision, resolution.\n* [Bug 1659] Need CLOCK_TRUETIME not CLOCK_TRUE.\n* [Bug 1665] is_anycast() u_int32_t should be u_int32.\n* ntpsnmpd, libntpq warning cleanup.\n\n---\n(4.2.6p3-RC3) 2010/10/14 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 750] Non-existing device causes coredump with RIPE-NCC driver.\n* [Bug 1080] ntpd on ipv6 routers very chatty.\n* [Bug 1567] Support Arbiter 1093C Satellite Clock on Windows.\n* [Bug 1581] printf format string mismatch leftover.\n* [Bug 1584] ntpsnmpd OID must be mib-2.197.\n* [Bug 1643] Range-check the decoding of the RIPE-NCC status codes.\n* [Bug 1644] cvo.sh should use lsb_release to identify linux distros.\n* [Bug 1659] Support Truetime Satellite Clocks on Windows.\n* [Bug 1660] On some systems, test is in /usr/bin, not /bin.\n* [Bug 1661] Re-indent refclock_ripencc.c.\n\n---\n(4.2.6p3-RC2) 2010/09/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1635] \"filegen ... enable\" is not default.\n* [Bug 1636] yyparse() segfault after denied filegen remote config.\n\n---\n(4.2.6p3-RC1) 2010/09/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1344] ntpd on Windows exits without logging cause.\n\n---\n(4.2.6p3-beta1) 2010/09/11 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1573] Miscalculation of offset in sntp.\n* [Bug 1595] empty last line in key file causes duplicate key to be added\n* [Bug 1597] packet processing ignores RATE KoD packets, because of\n  a bug in string comparison.\n* [Bug 1581] ntp_intres.c size_t printf format string mismatch.\n\n---\n(4.2.6p2) 2010/07/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1581] size_t printf format string mismatches, IRIG string buffers\n  undersized.  Mostly backported from earlier ntp-dev fixes by Juergen\n  Perlinger.\n\n---\n(4.2.6p2-RC7) 2010/06/19 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1570] serial clock drivers get outdated input from kernel tty\n  line buffer after startup\n* [Bug 1575] use 'snprintf' with LIB_BUFLENGTH in inttoa.c, tvtoa.c and\n  utvtoa.c\n* [Bug 1576] sys/sysctl.h depends on sys/param.h on OpenBSD.\n\n---\n(4.2.6p2-RC6) 2010/06/12 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 715] libisc Linux IPv6 interface iteration drops multicast flags.\n\n---\n(4.2.6p2-RC5) 2010/06/03 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1561] ntpq, ntpdc \"passwd\" prompts for MD5 password w/SHA1.\n* [Bug 1565] sntp/crypto.c compile fails on MacOS over vsnprintf().\n* Windows port: do not exit in ntp_timestamp_from_counter() without\n  first logging the reason.\n* Support \"passwd blah\" syntax in ntpq.\n\n---\n(4.2.6p2-RC4) 2010/05/19 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1555] 4.2.6p2-RC3 sntp illegal C (mixed code and declarations).\n\n---\n(4.2.6p2-RC3) 2010/05/11 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1325] unreachable code in sntp recv_bcst_data().\n* [Bug 1459] sntp MD5 authentication does not work with ntpd.\n* [Bug 1512] ntpsnmpd should connect to net-snmpd via a unix-domain\n  socket by default.  Provide a command-line 'socket name' option.\n* [Bug 1538] update refclock_nmea.c's call to getprotobyname().\n* [Bug 1541] Fix wrong keyword for \"maxclock\".\n* [Bug 1552] update and complete broadcast and crypto features in sntp.\n* [Bug 1553] sntp/configure.ac OpenSSL support.\n* Escape unprintable characters in a refid in ntpq -p billboard.\n* Simplify hash client code by providing OpenSSL EVP_*() API when built\n  without OpenSSL.  (from ntp-dev)\n* Do not depend on ASCII values for ('A' - '0'), ('a' - '0') in sntp.\n* Windows compiling hints/winnt.html update from G. Sunil Tej.\n\n---\n(4.2.6p2-RC2) 2010/04/27 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1465] Make sure time from TS2100 is not invalid (backport from\n  ntp-dev).\n* [Bug 1528] Fix EDITLINE_LIBS link order for ntpq and ntpdc.\n* [Bug 1534] win32/include/isc/net.h conflicts with VC++ 2010 errno.h.\n* [Bug 1535] \"restrict -4 default\" and \"restrict -6 default\" ignored.\n* Remove --with-arlib from br-flock.\n\n---\n(4.2.6p2-RC1) 2010/04/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1503] Auto-enabling of monitor for \"restrict ... limited\" wrong.\n* [Bug 1504] ntpdate tickles ntpd \"discard minimum 1\" rate limit if\n  \"restrict ... limited\" is used.\n* [Bug 1518] Windows ntpd should lock to one processor more\n  conservatively.\n* [Bug 1522] Enable range syntax \"trustedkey (301 ... 399)\".\n* Update html/authopt.html controlkey, requestkey, and trustedkey docs.\n\n---\n(4.2.6p1) 2010/04/09 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.6p1-RC6) 2010/03/31 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1514] Typo in ntp_proto.c: fabs(foo < .4) should be fabs(foo) < .4.\n* [Bug 1464] synchronization source wrong for refclocks ARCRON_MSF (27)\n  and SHM (28).\n* Correct Windows port's refclock_open() to return 0 on failure not -1.\n* Correct CHU, dumbclock, and WWVB drivers to check for 0 returned from\n  refclock_open() on failure.\n* Correct \"SIMUL=4 ./flock-build -1\" to prioritize -1/--one.\n\n---\n(4.2.6p1-RC5) 2010/02/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1140] Clean up debug.html, decode.html, and ntpq.html.\n* [Bug 1438] Remove dead code from sntp/networking.c.\n* [Bug 1477] 1st non-gmake make in clone w/VPATH can't make COPYRIGHT.\n* [Bug 1478] linking fails with undefined reference EVP_MD_pkey_type.\n* [Bug 1479] Compilation fails because of not finding readline headers.\n* [Bug 1480] snprintf() cleanup caused unterminated refclock IDs.\n* [Bug 1484] ushort is not defined in QNX6.\n\n---\n(4.2.6p1-RC4) 2010/02/04 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1455] ntpd does not try /etc/ntp.audio as documented.\n* [Bug 1467] Fix bogus rebuild of sntp/sntp.html\n* [Bug 1470] \"make distdir\" in $srcdir builds keyword-gen, libntp.a.\n* [Bug 1473] \"make distcheck\" before build can't make sntp/version.m4.\n* [Bug 1474] ntp_keygen needs LCRYPTO after libntp.a.\n* Convert many sprintf() calls to snprintf(), also strcpy(), strcat().\n* Fix widely cut-n-pasted bug in refclock shutdown after failed start.\n* Remove some dead code checking for emalloc() returning NULL.\n* Remove arlib.\n\n---\n(4.2.6p1-RC3) 2010/01/24 Released by Harlan Stenn <stenn@ntp.org>\n\n* Use TZ=UTC instead of TZ= when calling date in scripts/mkver.in .\n* [Bug 1448] Some macros not correctly conditionally or absolutely defined\n  on Windows.\n* [Bug 1449] ntpsim.h in ntp_config.c should be used conditionally.\n* [Bug 1450] Option to exclude warnings not unconditionally defined on Windows.\n* [Bug 1127] Properly check the return of X590_verify() - missed one.\n* [Bug 1439] .texi generation must wait until after binary is linked.\n* [Bug 1440] Update configure.ac to support kfreebsd.\n* [Bug 1445] IRIX does not have -lcap or support linux capabilities.\n* [Bug 1451] CID 115: sntp leaks KoD entry when updating existing.\n* [Bug 1453] Use $CC in config.cache filename in ./build script.\n\n---\n(4.2.6p1-RC2) 2009/12/25 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1411] Fix status messages in refclock_oncore.c.\n* [Bug 1416] MAXDNAME undefined on Solaris 2.6.\n* [Bug 1419] ntpdate, ntpdc, sntp, ntpd ignore configure --bindir.\n* [Bug 1424] Fix check for rtattr (rtnetlink.h).\n* [Bug 1425] unpeer by association ID sets up for duplicate free().\n* [Bug 1426] scripts/VersionName needs . on the search path.\n* [Bug 1427] quote missing in ./build - shows up on NetBSD.\n* [Bug 1428] Use AC_HEADER_RESOLV to fix breaks from resolv.h\n* [Bug 1429] ntpd -4 option does not reliably force IPv4 resolution.\n* [Bug 1431] System headers must come before ntp headers in ntp_intres.c .\n* [Bug 1434] HP-UX 11 ip_mreq undeclared, _HPUX_SOURCE helps some.\n* [Bug 1435] sntp: Test for -lresolv using the same tests as in ntp.\n\n---\n(4.2.6p1-RC1) 2009/12/20 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1409] Put refclock_neoclock4x.c under the NTP COPYRIGHT notice.\n  This should allow debian and other distros to add this refclock driver\n  in further distro releases.\n  Detect R2 hardware releases.\n* [Bug 1412] m4/os_cflags.m4 caches results that depend on $CC.\n* [Bug 1413] test OpenSSL headers regarding -Wno-strict-prototypes.\n* [Bug 1414] Enable \"make distcheck\" success with BSD make.\n* [Bug 1415] Fix Mac OS X link problem.\n* [Bug 1418] building ntpd/ntpdc/ntpq statically with ssl fails.\n* Build infrastructure updates to enable beta releases of ntp-stable.\n\n---\n(4.2.6) 2009/12/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Sec 1331] from4.2.4p8: DoS with mode 7 packets - CVE-2009-3563.\n* [Bug 508] Fixed leap second handling for Windows.\n(4.2.5p250-RC) 2009/11/30 Released by Harlan Stenn <stenn@ntp.org>\n* sntp documentation updates.\n* [Bug 761] internal resolver does not seem to honor -4/-6 qualifiers\n* [Bug 1386] Deferred DNS doesn't work on NetBSD\n* [Bug 1391] avoid invoking autogen twice for .c and .h files.\n* [Bug 1397] shmget() refclock_shm failing because of file mode.\n* Pass no_needed to ntp_intres as first part of fixing [Bug 975].\n* Add ./configure --enable-force-defer-DNS to help debugging.\n(4.2.5p249-RC) 2009/11/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1400] An empty KOD DB file causes sntp to coredump.\n* sntp: documentation cleanup.\n* sntp: clean up some error messages.\n* sntp: Use the precision to control how many offset digits are shown.\n* sntp: Show root dispersion.\n* Cleanup from the automake/autoconf upgrades.\n(4.2.5p248-RC) 2009/11/26 Released by Harlan Stenn <stenn@ntp.org>\n* Prepare for the generation of sntp.html.\n* Documentation changes from Dave Mills.\n* [Bug 1387] Storage leak in ntp_intres (minor).\n* [Bug 1389] buffer overflow in refclock_oncore.c\n* [Bug 1391] .texi usage text from installed, not built binaries.\n* [Bug 1392] intres retries duplicate assocations endlessly.\n* Correct *-opts.h dependency so default 'get' action isn't used.\n(4.2.5p247-RC) 2009/11/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1142] nodebug builds shed no light on -d, -D option failure.\n* [Bug 1179] point out the problem with -i/--jaildir and -u/--user when\n  they are disabled by configure.\n* [Bug 1308] support systems that lack fork().\n* [Bug 1343] sntp doesn't link on Solaris 7, needs -lresolv.\n(4.2.5p246-RC) 2009/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* Upgrade to autogen-5.10\n* [Bug 1378] Unnecessary resetting of peers during interface update.\n* [Bug 1382] p245 configure --disable-dependency-tracking won't build.\n* [Bug 1384] ntpq :config core dumped with a blank password.\n(4.2.5p245-RC) 2009/11/14 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup from Dave Mills.\n* [Bug 1343] sntp illegal C does not compile on Solaris 7.\n* [Bug 1381] Version .deps generated include file dependencies to allow\n  known dependency-breaking changes to force .deps to be cleaned,\n  triggered by changing the contents of deps-ver and/or sntp/deps-ver.\n(4.2.5p244-RC) 2009/11/12 Released by Harlan Stenn <stenn@ntp.org>\n* keygen.html updates from Dave Mills.\n* [Bug 1003] ntpdc unconfig command doesn't prompt for keyid.\n* [Bug 1376] Enable authenticated ntpq and ntpdc using newly-available\n  digest types.\n* ntp-keygen, Autokey OpenSSL build vs. run version mismatch is now a\n  non-fatal warning.\n(4.2.5p243-RC) 2009/11/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1226] Fix deferred DNS lookups.\n* new crypto signature cleanup.\n(4.2.5p242-RC) 2009/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1363] CID 92 clarify fallthrough case in clk_trimtsip.c\n* [Bug 1366] ioctl(TIOCSCTTY, 0) fails on NetBSD *[0-2].* > 3.99.7.\n* [Bug 1368] typos in libntp --without-crypto case\n* [Bug 1371] deferred DNS lookup failing with INFO_ERR_AUTH.\n* CID 87 dead code in ntpq.c atoascii().\n* Fix authenticated ntpdc, broken in p240.\n* Stub out isc/mem.h, shaving 47k from a MIPS ntpd binary.\n* Shrink keyword scanner FSM entries from 64 to 32 bits apiece.\n* Documention updates from Dave Mills.\n* authkeys.c cleanup from Dave Mills.\n(4.2.5p241-RC) 2009/11/07 Released by Harlan Stenn <stenn@ntp.org>\n* html/authopt.html update from Dave Mills.\n* Remove unused file from sntp/Makefile.am's distribution list.\n* new crypto signature cleanup.\n(4.2.5p240-RC) 2009/11/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1364] clock_gettime() not detected, need -lrt on Debian 5.0.3.\n* Provide all of OpenSSL's signature methods for ntp.keys (FIPS 140-2).\n(4.2.5p239-RC) 2009/10/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1357] bogus assert from refclock_shm.\n* [Bug 1359] Debug message cleanup.\n* CID 101: more pointer/array cleanup.\n* [Bug 1356] core dump from refclock_nmea when can't open /dev/gpsU.\n* [Bug 1358] AIX 4.3 sntp/networking.c IPV6_JOIN_GROUP undeclared.\n* CID 101: pointer/array cleanup.\n(4.2.5p238-RC) 2009/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* Changes from Dave Mills.\n* driver4.html updates from Dave Mills.\n* [Bug 1252] PPSAPI cleanup on ntpd/refclock_wwvb.c.\n* [Bug 1354] libtool error building after bootstrap with Autoconf 2.64.\n* Allow NTP_VPATH_HACK configure test to handle newer gmake versions.\n* CIDs 94-99 make it more clearly impossible for sock_hash() to return\n  a negative number.\n* CID 105, 106 ensure ntpdc arrays are not overrun even if callers\n  misbehave.\n* CID 113 use va_end() in refclock_true.c true_debug().\n* Get rid of configure tests for __ss_family and __ss_len when the more\n  common ss_family and ss_len are present.\n(4.2.5p237-RC) 2009/10/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 610] NMEA support for using PPSAPI on a different device.\n* [Bug 1238] use only fudge time2 to offset NMEA serial timestamp.\n* [Bug 1355] ntp-dev won't compile on OpenBSD 4.6.\n(4.2.5p236-RC) 2009/10/22 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup from Dave Mills.\n* [Bug 1343] ntpd/ntp_io.c close_fd() does not compile on Solaris 7.\n* [Bug 1353] ntpq \"rv 0 settimeofday\" always shows UNKNOWN on unix.\n* Do not attempt to execute built binaries from ntpd/Makefile when\n  cross-compiling (keyword-gen and ntpd --saveconfigquit).\n* sntp/main.c: Remove duplicate global adr_buf[] (also defined in\n  networking.c) which Piotr Grudzinski identified breaking his build.\n* Correct in6addr_any test in configure.ac to attempt link too.\n(4.2.5p235-RC) 2009/10/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1343] lib/isc build breaks on systems without IPv6 headers.\n(4.2.5p234-RC) 2009/10/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1339] redux, use unmodified lib/isc/win32/strerror.c and\n  move #define strerror... to a header not used by lib/isc code.\n* [Bug 1345] illegal 'grep' option prevents compilation.\n* [Bug 1346] keyword scanner broken where char defaults to unsigned.\n* [Bug 1347] ntpd/complete.conf missing multicastclient test case.\n(4.2.5p233-RC) 2009/10/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1337] cast setsockopt() v4 address pointer to void *.\n* [Bug 1342] ignore|drop one IPv6 address on an interface blocks all\n  addresses on that interface.\n* Documentation cleanup and updates.\n(4.2.5p232-RC) 2009/10/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1302] OpenSSL under Windows needs applink support.\n* [Bug 1337] fix incorrect args to setsockopt(fd, IP_MULTICAST_IF,...).\n* [Bug 1339] Fix Windows-only ntp_strerror() infinite recursion.\n* [Bug 1341] NMEA driver requires working PPSAPI #ifdef HAVE_PPSAPI.\n* Construct ntpd keyword scanner finite state machine at compile time\n  rather than at runtime, shrink entries from 40+ to 8 bytes.\n* Update documentation for ntpq --old-rv, saveconfig, saveconfigdir,\n  ntpd -I -L and -M, and interface/nic rules. (From Dave Hart)\n* [Bug 1337] fix incorrect args to setsockopt(fd, IP_MULTICAST_IF,...)\n(4.2.5p231-RC) 2009/10/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1335] Broadcast client degraded by wildcard default change.\n(4.2.5p230-RC) 2009/10/09 Released by Harlan Stenn <stenn@ntp.org>\n* Start the 4.2.6 Release Candidate cycle.\n* Broadcast and transit phase cleanup from Dave Mills.\n(4.2.5p229) 2009/10/07 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1334] ntpsnmpd undefined reference to `ntpqOptions'.\n* Change ntpsnmpd/Makefile.am include file order to fix FreeBSD build.\n(4.2.5p228) 2009/10/06 Released by Harlan Stenn <stenn@ntp.org>\n* Reclaim syntax tree memory after application in ntpd built with\n  configure --disable-saveconfig.\n* [Bug 1135] ntpq uses sizeof(u_long) where sizeof(u_int32) is meant.\n* [Bug 1333] ntpd --interface precedence over --novirtualips lost.\n(4.2.5p227) 2009/10/05 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1135] :config fails with \"Server disallowed request\"\n* [Bug 1330] disallow interface/nic rules when --novirtualips or\n  --interface are used.\n* [Bug 1332] ntpq -c 'rv 0 variablename' returns extra stuff.\n* Add test of ntpd --saveconfigquit fidelity using new complete.conf.\n* Documentation updates from Dave Hart/Dave Mills.\n(4.2.5p226) 2009/10/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1318] Allow multiple -g options on ntpd command line.\n* [Bug 1327] ntpq, ntpdc, ntp-keygen -d & -D should work with configure\n  --disable-debugging.\n* Add ntpd --saveconfigquit <filename> option for future build-time\n  testing of saveconfig fidelity.\n* Clockhop and autokey cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n(4.2.5p225) 2009/09/30 Released by Harlan Stenn <stenn@ntp.org>\n* authopt documentation changes from Dave Mills/Dave Hart.\n* [Bug 1324] support bracketed IPv6 numeric addresses for restrict.\n(4.2.5p224) 2009/09/29 Released by Harlan Stenn <stenn@ntp.org>\n* Clockhop and documentation fixes from Dave Mills.\n* Remove \"tos maxhop\" ntp.conf knob.\n(4.2.5p223) 2009/09/28 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1321] build doesn't work if . isn't on $PATH.\n* [Bug 1323] Implement \"revoke #\" to match documentation, deprecate\n  \"crypto revoke #\".\n(4.2.5p222) 2009/09/27 Released by Harlan Stenn <stenn@ntp.org>\n* Update libisc code using bind-9.6.1-P1.tar.gz, rearrange our copy to\n  mirror the upstream layout (lib/isc/...), and merge in NTP-local\n  modifications to libisc.  There is a new procedure to ease future\n  libisc merges using a separate \"upstream\" bk repo.  That will enable\n  normal bk pull automerge to handle carrying forward any local changes\n  and should enable us to take updated libisc snapshots more often.\n* Updated build and flock-build scripts.  flock-build --one is a way\n  to perform a flock-build compatible solitary build, handy for a repo\n  clone's first build on a machine with autoconf, automake, etc.\n* Compiling ntp_parser.y using BSD make correctly places ntp_parser.h\n  in the top-level ntpd directory instead of A.*/ntpd.\n* bootstrap script updated to remove potentially stale .deps dirs.\n* Remove unneeded Makefile.am files from the lib/isc/include tree.\n(4.2.5p221) 2009/09/26 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1316] segfault if refclock_nmea can't open file.\n* [Bug 1317] Distribute cvo.sh.\n(4.2.5p220) 2009/09/25 Released by Harlan Stenn <stenn@ntp.org>\n* Rearrange libisc code to match the upstream layout in BIND.  This is\n  step one of two, changing the layout but keeping our existing libisc.\n(4.2.5p219) 2009/09/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1315] \"interface ignore 0.0.0.0\" is ignored.\n* add implicit \"nic ignore all\" rule before any rules from ntp.conf, so\n  \"nic listen eth0\" alone means the same as \"-I eth0\".\n* add wildcard match class for interface/nic rules.\n* fix mistaken carryover of prefixlen from one rule to the next.\n* Ensure IPv6 localhost address ::1 is included in libisc's Windows IPv6\n  address enumeration, allowing ntpq and ntpdc's hardcoding to 127.0.0.1 \n  on Windows to end.\n(4.2.5p218) 2009/09/21 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1314] saveconfig emits -4 and -6 on when not given.\n* correct parsing and processing of setvar directive.\n* highlight location of ntpq :config syntax errors with ^.\n* clarify (former) NO_ARG, SINGLE_ARG, MULTIPLE_ARG renaming to\n  FOLLBY_TOKEN, FOLLBY_STRING, FOLLBY_STRINGS_TO_EOC.\n* parser, saveconfig cleanup to store T_ identifiers in syntax tree.\n(4.2.5p217) 2009/09/20 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1300] reject remote configuration of dangerous items.\n(4.2.5p216) 2009/09/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1312] ntpq/ntpdc MD5 passwords truncated to 8 chars on Suns.\n* CID 10 missing free(up); in refclock_palisade.c error return, again.\n* CID 83 added assertion to demonstrate config_nic_rules() does not\n  call strchr(NULL, '/').\n(4.2.5p215) 2009/09/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1292] Workaround last VC6 unsigned __int64 kink.\n(4.2.5p214) 2009/09/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1303] remove top-level \"autokey\" directive.\n* use \"nic listen 192.168.0.0/16\" instead of\n  \"nic listen 192.168.0.0 prefixlen 16\".\n(4.2.5p213) 2009/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1310] fix Thunderbolt mode in refclock_palisade.c\n(4.2.5p212) 2009/09/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 983] add interface [listen | ignore | drop] ... directive.\n* [Bug 1243] MD5auth_setkey zero-fills key from first zero octet.\n* [Bug 1295] leftover fix, do not crash on exit in free_config_trap()\n  when \"trap 1.2.3.4\" is used without any further options.\n* [Bug 1311] 4.2.5p211 doesn't build in no-debug mode.\n* document interface (alias nic) and unpeer.\n* Correct syntax error line & column numbers.\n* CID 79: kod_init_kod_db() fails to fclose(db_s) in two error paths.\n* CID 80: attempt to quiet Coverity false positive re: leaking \"reason\"\n  in main().\n* Documentation updates from Dave Mills.\n* CID 81: savedconfig leaked in save_config().\n* Make the code agree with the spec and the book (Dave Mills).\n(4.2.5p211) 2009/09/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 663] respect ntpq -c and -p order on command line.\n* [Bug 1292] more VC6 unsigned __int64 workarounds.\n* [Bug 1296] Added Support for Trimble Acutime Gold.\n(4.2.5p210) 2009/09/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1294] Use OPENSSL_INC and OPENSSL_LIB macros for Windows\n  and remove unnecessary reference to applink.c for Windows\n* [Bug 1295] trap directive options are not optional.\n* [Bug 1297] yylex() must always set yylval before returning.\n(4.2.5p209) 2009/09/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1290] Fix to use GETTIMEOFDAY macro\n* [Bug 1289] Update project files for VC6, VS2003, VS2005, VS 2008\n(4.2.5p208) 2009/08/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1293] make configuration dumper ready for release, specifically:\n* rename ntpq dumpcfg command to \"saveconfig\".\n* require authentication for saveconfig.\n* \"restrict ... nomodify\" prevents saveconfig and :config.\n* \"saveconfig .\" shorthand to save to startup configuration file.\n* support strftime() substitution in saveconfig arg to timestamp\n  the output filename, for example \"saveconfig %Y%m%d-%H%M%S.conf\".\n* display saveconfig response message from ntpd in ntpq.\n* save output filename in \"savedconfig\" variable, fetched with ntpq -c\n  \"rv 0 savedconfig\".\n* document saveconfig in html/ntpq.html.\n* add ./configure --disable-saveconfig to build a smaller ntpd.\n* log saveconfig failures and successes to syslog.\n(4.2.5p207) 2009/08/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1292] Minor Windows source tweaks for VC6-era SDK headers.\n(4.2.5p206) 2009/08/26 Released by Harlan Stenn <stenn@ntp.org>\n* accopt.html typo fixes from Dave Mills.\n* [Bug 1283] default to remembering KoD in sntp.\n* clean up numerous sntp/kod_management.c bugs.\n* use all addresses resolved from each DNS name in sntp.\n(4.2.5p205) 2009/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* accopt.html typo fixes from Dave Mills.\n* [Bug 1285] Log ntpq :config/config-from-file events.\n* [Bug 1286] dumpcfg omits statsdir, mangles filegen.\n(4.2.5p204) 2009/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1284] infinite loop in ntpd dumping more than one trustedkey\n(4.2.5p203) 2009/08/16 Released by Harlan Stenn <stenn@ntp.org>\n* Add ntpq -c dumpcfg, Google Summer of Code project of Max Kuehn\n(4.2.5p202) 2009/08/14 Released by Harlan Stenn <stenn@ntp.org>\n* install the binary and man page for sntp.\n(4.2.5p201) 2009/08/13 Released by Harlan Stenn <stenn@ntp.org>\n* sntp: out with the old, in with the new.\n(4.2.5p200) 2009/08/12 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1281] Build ntpd on Windows without big SDK download, burn,\n  and install by checking in essentially unchanging messages.mc build\n  products to avoid requiring mc.exe, which is not included with VC++\n  2008 EE.\n(4.2.5p199) 2009/08/09 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1279] Cleanup for warnings from Veracode static analysis.\n(4.2.5p198) 2009/08/03 Released by Harlan Stenn <stenn@ntp.org>\n* Upgrade to autogen-5.9.9-pre5.\n(4.2.5p197) 2009/07/30 Released by Harlan Stenn <stenn@ntp.org>\n* The build script now has . at the end of PATH for config.guess.\n(4.2.5p196) 2009/07/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1272] gsoc_sntp IPv6 build problems under HP-UX 10.\n* [Bug 1273] CID 10: Palisade leaks unit struct in error path.\n* [Bug 1274] CID 67: ensure resolve_hosts() output count and pointers\n  are consistent.\n* [Bug 1275] CID 45: CID 46: old sntp uses uninitialized guesses[0],\n  precs[0].\n* [Bug 1276] CID 52: crypto_xmit() may call crypto_alice[23]()\n  with NULL peer.\n(4.2.5p195) 2009/07/27 Released by Harlan Stenn <stenn@ntp.org>\n* cvo.sh: Add support for CentOS, Fedora, Slackware, SuSE, and QNX.\n(4.2.5p194) 2009/07/26 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Use scripts/cvo.sh in the build script to get better subdir names.\n(4.2.5p193) 2009/07/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1261] CID 34: simulate_server() rbuf.msg_flags uninitialized.\n* [Bug 1262] CID 35: xpkt.mac uninitialized in simulate_server().\n* [Bug 1263] CID 37: CID 38: CID 40: CID 43: multiple refclocks \n  uninitialized tm_zone (arc, chronolog, dumbclock, pcf).\n* [Bug 1264] CID 64: gsoc_sntp on_wire() frees wrong ptr receiving KoD.\n* [Bug 1265] CID 65: CID 66: gsoc_sntp on_wire() leaks x_pkt, r_pkt.\n* [Bug 1266] CID 39: datum_pts_start() uninitialized arg.c_ospeed.\n* [Bug 1267] CID 44: old sntp handle_saving() writes stack garbage to\n  file when clearing.\n* [Bug 1268] CID 63: resolve_hosts() leaks error message buffer.\n* [Bug 1269] CID 74: use assertion to ensure move_fd() does not return\n  negative descriptors.\n* [Bug 1270] CID 70: gsoc_sntp recv_bcst_data mdevadr.ipv6mr_interface\n  uninitialized.\n(4.2.5p192) 2009/07/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 965] CID 42: ss_family uninitialized.\n* [Bug 1250] CID 53: kod_init_kod_db() overruns kod_db malloc'd buffer.\n* [Bug 1251] CID 68: search_entry() mishandles dst argument.\n* [Bug 1252] CID 32: Quiet Coverity warning with assertion.\n* [Bug 1253] CID 50: gsoc_sntp/crypto.c auth_init() always returns a \n  list with one entry.\n* [Bug 1254] CID 56: tv_to_str() leaks a struct tm each call.\n* [Bug 1255] CID 55: pkt_output() leaks a copy of each packet.\n* [Bug 1256] CID 51: Coverity doesn't recognize our assertion macros as\n  terminal.\n* [Bug 1257] CID 57: gsoc_sntp auth_init() fails to fclose(keyfile).\n* [Bug 1258] CID 54: gsoc_sntp resolve_hosts() needs simplification.\n* [Bug 1259] CID 59: gsoc_sntp recv_bcast_data() fails to free(rdata)\n  on error paths.\n* [Bug 1260] CID 60: gsoc_sntp recvpkt() fails to free(rdata).\n* Updated to AutoGen-5.9.9pre2.\n(4.2.5p191) 2009/07/21 Released by Harlan Stenn <stenn@ntp.org>\n* Updated to AutoGen-5.9.9pre1.\n(4.2.5p190) 2009/07/20 Released by Harlan Stenn <stenn@ntp.org>\n* Updated to AutoGen-5.9.8.\n* [Bug 1248] RES_MSSNTP typo in ntp_proto.c.\n* [Bug 1246] use a common template for singly-linked lists, convert most\n  doubly-linked lists to singly-linked.\n* Log warning about signd blocking when restrict mssntp used.\n(4.2.5p189) 2009/07/16 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation cleanup from Dave Mills.\n(4.2.5p188) 2009/07/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1245] Broken xmt time sent in fast_xmit() of 4.2.5p187.\n(4.2.5p187) 2009/07/11 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1042] multicast listeners IPv4+6 ignore new interfaces.\n* [Bug 1237] Windows serial code treat CR and LF both as line\n  terminators.\n* [Bug 1238] use fudge time2 for serial timecode offset in NMEA driver.\n* [Bug 1242] Remove --enable-wintime, symmetric workaround is now\n  always enabled.\n* [Bug 1244] NTP_INSIST(fd != maxactivefd) failure in intres child\n* Added restrict keyword \"mssntp\" for Samba4 DC operation, by Dave Mills.\n(4.2.5p186) 2009/07/08 Released by Harlan Stenn <stenn@ntp.org>\n* ntp_proto.c cleanup from Dave Mills.\n(4.2.5p185) 2009/07/01 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* [Bug 1234] convert NMEA driver to use common PPSAPI code.\n* timepps-Solaris.h pps_handle_t changed from pointer to scalar\n* Spectracom refclock added to Windows port of ntpd\n* [Bug 1236] Declaration order fixed.\n* Bracket private ONCORE debug statements with #if 0 rather than #ifdef\n  DEBUG\n* Delete ONCORE debug statement that is now handled elsewhere.\n(4.2.5p184) 2009/06/24 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1233] atom refclock fudge time1 sign flipped in 4.2.5p164.\n(4.2.5p183) 2009/06/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1196] setsockopt(SO_EXCLUSIVEADDRUSE) can fail on Windows 2000\n  and earlier with WSAINVAL, do not log a complaint in that case.\n* [Bug 1210] ONCORE driver terminates ntpd without logging a reason.\n* [Bug 1218] Correct comment in refclock_oncore on /etc/ntp.oncore*\n  configuration file search order.\n* Change ONCORE driver to log using msyslog as well as to any\n  clockstats file.\n* [Bug 1231] ntpsnmpd build fails after sockaddr union changes.\n(4.2.5p182) 2009/06/18 Released by Harlan Stenn <stenn@ntp.org>\n* Add missing header dependencies to the ntpdc layout verification.\n* prefer.html updates from Dave Mills.\n* [Bug 1205] Add ntpd --usepcc and --pccfreq options on Windows\n* [Bug 1215] unpeer by association ID\n* [Bug 1225] Broadcast address miscalculated on Windows 4.2.5p180\n* [Bug 1229] autokey segfaults in cert_install().\n* Use a union for structs sockaddr, sockaddr_storage, sockaddr_in, and\n  sockaddr_in6 to remove casts and enable type checking.  Collapse\n  some previously separate IPv4/IPv6 paths into a single codepath.\n(4.2.5p181) 2009/06/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1206] Required compiler changes for Windows\n* [Bug 1084] PPSAPI for ntpd on Windows with DLL backends\n* [Bug 1204] Unix-style refclock device paths on Windows\n* [Bug 1205] partial fix, disable RDTSC use by default on Windows\n* [Bug 1208] decodenetnum() buffer overrun on [ with no ]\n* [Bug 1211] keysdir free()d twice #ifdef DEBUG\n* Enable ONCORE, ARCRON refclocks on Windows (untested)\n(4.2.5p180) 2009/05/29 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1200] Enable IPv6 in Windows port\n* Lose FLAG_FIXPOLL, from Dave Mills.\n(4.2.5p179) 2009/05/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1041] xmt -> aorg timestamp cleanup from Dave Mills,\n  reported by Dave Hart.\n* [Bug 1193] Compile error: conflicting types for emalloc.\n* [Bug 1196] VC6 winsock2.h does not define SO_EXCLUSIVEADDRUSE.\n* Leap/expire cleanup from Dave Mills.\n(4.2.5p178) 2009/05/21 Released by Harlan Stenn <stenn@ntp.org>\n* Provide erealloc() and estrdup(), a la emalloc().\n* Improve ntp.conf's parser error messages.\n* [Bug 320] \"restrict default ignore\" does not affect IPv6.\n* [Bug 1192] \"restrict -6 ...\" reports a syntax error.\n(4.2.5p177) 2009/05/18 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7\n* [Bug 1174] nmea_shutdown assumes that nmea has a unit assigned\n* [Bug 1190] NMEA refclock fudge flag4 1 obscures position in timecode\n* Update NMEA refclock documentation in html/drivers/driver20.html\n(4.2.5p176) 2009/05/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1154] mDNS registration should be done later, repeatedly and only\n  if asked for. (second try for fix)\n(4.2.5p175) 2009/05/12 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC7\n* [Bug 1180] ntpd won't start with more than ~1000 interfaces\n* [Bug 1182] Documentation typos and missing bits.\n* [Bug 1183] COM port support should extend past COM3\n* [Bug 1184] ntpd is deaf when restricted to second IP on the same net\n* Clean up configure.ac NTP_CACHEVERSION interface, display cache\n  version when clearing.  Fixes a regression.\n(4.2.5p174) 2009/05/09 Released by Harlan Stenn <stenn@ntp.org>\n* Stale leapsecond file fixes from Dave Mills.\n(4.2.5p173) 2009/05/08 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC6\n(4.2.5p172) 2009/05/06 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1175] Instability in PLL daemon mode.\n* [Bug 1176] refclock_parse.c does not compile without PPSAPI.\n(4.2.5p171) 2009/05/04 Released by Harlan Stenn <stenn@ntp.org>\n* Autokey documentation cleanup from Dave Mills.\n* [Bug 1171] line editing libs found without headers (Solaris 11)\n* [Bug 1173] NMEA refclock fails with Solaris PPSAPI\n* Fix problem linking msntp on Solaris when sntp subdir is configured\n  before parent caused by different gethostent library search order.\n* Do not clear config.cache when it is  empty.\n(4.2.5p170) 2009/05/02 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1152] adjust PARSE to new refclock_pps logic\n* Include 4.2.4p7-RC5\n* loopfilter FLL/PLL crossover cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* ntp-keygen cleanup from Dave Mills.\n* crypto API cleanup from Dave Mills.\n* Add NTP_CACHEVERSION mechanism to ignore incompatible config.cache\n* Enable gcc -Wstrict-overflow for gsoc_sntp as well\n(4.2.5p169) 2009/04/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1171] Note that we never look for -lreadline by default.\n* [Bug 1090] Fix bogus leap seconds in refclock_hpgps.\n(4.2.5p168) 2009/04/29 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC4\n* [Bug 1169] quiet compiler warnings\n* Re-enable gcc -Wstrict-prototypes when not building with OpenSSL\n* Enable gcc -Wstrict-overflow\n* ntpq/ntpdc emit newline after accepting password on Windows\n* Updates from Dave Mills:\n* ntp-keygen.c: Updates.\n* Fix the error return and syslog function ID in refclock_{param,ppsapi}.\n* Make sure syspoll is within the peer's minpoll/maxpoll bounds.\n* ntp_crypto.c: Use sign_siglen, not len. sign key filename cleanup.\n* Bump NTP_MAXEXTEN from 1024 to 2048, update values for some field lengths.\n* m4/ntp_lineeditlibs.m4: fix warnings from newer Autoconf\n* [Bug 1166] Remove truncation of position (blanking) code in refclock_nmea.c\n(4.2.5p167) 2009/04/26 Released by Harlan Stenn <stenn@ntp.org>\n* Crypto cleanup from Dave Mills.\n(4.2.5p166) 2009/04/25 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1165] Clean up small memory leaks in the  config file parser\n* Correct logconfig keyword declaration to MULTIPLE_ARG\n* Enable filename and line number leak reporting on Windows when built\n  DEBUG for all the typical C runtime allocators such as calloc,\n  malloc, and strdup.  Previously only emalloc calls were covered.\n* Add DEBUG-only code to free dynamically allocated memory that would\n  otherwise remain allocated at ntpd exit, to allow less forgivable\n  leaks to stand out in leaks reported after exit.\n* Ensure termination of strings in ports/winnt/libisc/isc_strerror.c\n  and quiet compiler warnings.\n* [Bug 1057] ntpdc unconfig failure\n* [Bug 1161] unpeer AKA unconfig command for ntpq :config\n* PPS and crypto cleanup in ntp_proto.c from Dave Mills.\n(4.2.5p165) 2009/04/23 Released by Harlan Stenn <stenn@ntp.org>\n* WWVB refclock cleanup from Dave Mills.\n* Code cleanup: requested_key -> request_key.\n* [Bug 833] ignore whitespace at end of remote configuration lines\n* [Bug 1033] ntpdc/ntpq crash prompting for keyid on Windows\n* [Bug 1028] Support for W32Time authentication via Samba.\n* quiet ntp_parser.c malloc redeclaration warning\n* Mitigation and PPS/PPSAPI cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* timepps-Solaris.h patches from Dave Hart.\n(4.2.5p164) 2009/04/22 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p7-RC3\n* PPS/PPSAPI cleanup from Dave Mills.\n* Documentation updates from Dave Mills.\n* [Bug 1125] C runtime per-thread initialization on Windows\n* [Bug 1152] temporarily disable refclock_parse, refclock_true until\n  maintainers can repair build break from pps_sample()\n* [Bug 1153] refclock_nmea should not mix UTC with GPS time\n* [Bug 1159] ntpq overlap diagnostic message test buggy\n(4.2.5p163) 2009/04/10 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.5p162) 2009/04/09 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Mitigation and PPS cleanup from Dave Mills.\n* Include 4.2.4p7-RC2\n* [Bug 216] New interpolation scheme for Windows eliminates 1ms jitter\n* remove a bunch of #ifdef SYS_WINNT from portable code\n* 64-bit time_t cleanup for building on newer Windows compilers\n* Only set CMOS clock during ntpd exit on Windows if the computer is\n  shutting down or restarting.\n* [Bug 1148] NMEA reference clock improvements\n* remove deleted gsoc_sntp/utilities.o from repository so that .o build\n  products can be cleaned up without corrupting the repository.\n(4.2.5p161) 2009/03/31 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n(4.2.5p160) 2009/03/30 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1141] refclock_report missing braces cause spurious \"peer event:\n  clock clk_unspec\" log entries\n* Include 4.2.4p7-RC1\n(4.2.5p159) 2009/03/28 Released by Harlan Stenn <stenn@ntp.org>\n* \"bias\" changes from Dave Mills.\n(4.2.5p158) 2009/01/30 Released by Harlan Stenn <stenn@ntp.org>\n* Fix [CID 72], a typo introduced at the latest fix to prettydate.c.\n(4.2.5p157) 2009/01/26 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup/fixes for ntp_proto.c and ntp_crypto.c from Dave Mills.\n(4.2.5p156) 2009/01/19 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1118] Fixed sign extension for 32 bit time_t in caljulian() and prettydate().\n  Fixed some compiler warnings about missing prototypes.\n  Fixed some other simple compiler warnings.\n* [Bug 1119] [CID 52] Avoid a possible null-dereference in ntp_crypto.c.\n* [Bug 1120] [CID 51] INSIST that peer is non-null before we dereference it.\n* [Bug 1121] [CID 47] double fclose() in ntp-keygen.c.\n(4.2.5p155) 2009/01/18 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* CHU frequency updates.\n* Design assertion fixes for ntp_crypto.c from Dave Mills.\n(4.2.5p154) 2009/01/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 992] support interface event change on Linux from\n  Miroslav Lichvar.\n(4.2.5p153) 2009/01/09 Released by Harlan Stenn <stenn@ntp.org>\n* Renamed gsoc_sntp/:fetch-stubs to gsoc_sntp/fetch-stubs to avoid\n  file name problems under Windows.\n  Removed German umlaut from log msg for 4.2.5p142.\n(4.2.5p152) 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n* Include 4.2.4p6: 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n(4.2.5p151) 2008/12/23 Released by Harlan Stenn <stenn@ntp.org>\n* Stats file logging cleanup from Dave Mills.\n(4.2.5p150) 2008/12/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1099] Fixed wrong behaviour in sntp's crypto.c.\n* [Bug 1103] Fix 64-bit issues in the new calendar code.\n(4.2.5p149) 2008/12/05 Released by Harlan Stenn <stenn@ntp.org>\n* Fixed mismatches in data types and OID definitions in ntpSnmpSubAgent.c\n* added a premliminary MIB file to ntpsnmpd (ntpv4-mib.mib)\n(4.2.5p148) 2008/12/04 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1070] Fix use of ntpq_parsestring() in ntpsnmpd.\n(4.2.5p147) 2008/11/27 Released by Harlan Stenn <stenn@ntp.org>\n* Update gsoc_sntp's GCC warning code.\n(4.2.5p146) 2008/11/26 Released by Harlan Stenn <stenn@ntp.org>\n* Update Solaris CFLAGS for gsoc_sntp.\n(4.2.5p145) 2008/11/20 Released by Harlan Stenn <stenn@ntp.org>\n* Deal with time.h for sntp under linux.\n* Provide rpl_malloc() for sntp for systems that need it.\n* Handle ss_len and socklen type for sntp.\n* Fixes to the sntp configure.ac script.\n* Provide INET6_ADDRSTRLEN if it is missing.\n* [Bug 1095] overflow in caljulian.c.\n(4.2.5p144) 2008/11/19 Released by Harlan Stenn <stenn@ntp.org>\n* Use int32, not int32_t.\n* Avoid the sched*() functions under OSF - link problems.\n(4.2.5p143) 2008/11/17 Released by Harlan Stenn <stenn@ntp.org>\n* sntp cleanup and fixes.\n(4.2.5p142) 2008/11/16 Released by Harlan Stenn <stenn@ntp.org>\n* Imported GSoC SNTP code from Johannes Maximilian Kuehn.\n(4.2.5p141) 2008/11/13 Released by Harlan Stenn <stenn@ntp.org>\n* New caltontp.c and calyearstart.c from Juergen Perlinger.\n(4.2.5p140) 2008/11/12 Released by Harlan Stenn <stenn@ntp.org>\n* Cleanup lint from the ntp_scanner files.\n* [Bug 1011] gmtime() returns NULL on windows where it would not under Unix.\n* Updated caljulian.c and prettydate.c from Juergen Perlinger.\n(4.2.5p139) 2008/11/11 Released by Harlan Stenn <stenn@ntp.org>\n* Typo fix to driver20.html.\n(4.2.5p138) 2008/11/10 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 474] --disable-ipv6 is broken.\n* IPv6 interfaces were being looked for twice.\n* SHM driver grabs more samples, add clockstats\n* decode.html and driver20.html updates from Dave Mills.\n(4.2.5p137) 2008/11/01 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1069] #undef netsnmp's PACKAGE_* macros.\n* [Bug 1068] Older versions of netsnmp do not have netsnmp_daemonize().\n(4.2.5p136) 2008/10/27 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1078] statsdir configuration parsing is broken.\n(4.2.5p135) 2008/09/23 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1072] clock_update should not allow updates older than sys_epoch.\n(4.2.5p134) 2008/09/17 Released by Harlan Stenn <stenn@ntp.org>\n* Clean up build process for ntpsnmpd.\n(4.2.5p133) 2008/09/16 Released by Harlan Stenn <stenn@ntp.org>\n* Add options processing to ntpsnmpd.\n* [Bug 1062] Check net-snmp headers before deciding to build ntpsnmpd.\n* Clean up the libntpq.a build.\n* Regenerate ntp_parser.[ch] from ntp_parser.y\n(4.2.5p132) 2008/09/15 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1067] Multicast DNS service registration must come after the fork\n  on Solaris.\n* [Bug 1066] Error messages should log as errors.\n(4.2.5p131) 2008/09/14 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1065] Re-enable support for the timingstats file.\n(4.2.5p130) 2008/09/13 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1064] Implement --with-net-snmp-config=progname\n* [Bug 1063] ntpSnmpSubagentObject.h is missing from the distribution.\n(4.2.5p129) 2008/09/11 Released by Harlan Stenn <stenn@ntp.org>\n* Quiet some libntpq-related warnings.\n(4.2.5p128) 2008/09/08 Released by Harlan Stenn <stenn@ntp.org>\n* Import Heiko Gerstung's GSoC2008 NTP MIB daemon.\n(4.2.5p127) 2008/09/01 Released by Harlan Stenn <stenn@ntp.org>\n* Regenerate ntpd/ntp_parser.c\n(4.2.5p126) 2008/08/31 Released by Harlan Stenn <stenn@ntp.org>\n* Stop libtool-1.5 from looking for C++ or Fortran.\n* [BUG 610] Documentation update for NMEA reference clock driver.\n* [Bug 828] Fix IPv4/IPv6 address parsing.\n* Changes from Dave Mills:\n  Documentation updates.\n  Fix a corner case where a frequency update was reported but not set.\n  When LEAP_NOTINSYNC->LEAP_NOWARNING, call crypto_update() if we have\n  crypto_flags.\n(4.2.5p125) 2008/08/18 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 1052] Add linuxPPS support to ONCORE driver.\n(4.2.5p124) 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* Documentation updates from Dave Mills.\n* Include 4.2.4p5: 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n* [Bug 861] leap info was not being transmitted.\n* [Bug 1046] refnumtoa.c is using the wrong header file.\n* [Bug 1047] enable/disable options processing fix.\n* header file cleanup.\n* [Bug 1037] buffer in subroutine was 1 byte short.\n* configure.ac: cleanup, add option for wintime, and lay the groundwork\n  for the changes needed for bug 1028.\n* Fixes from Dave Mills: 'bias' and 'interleave' work.  Separate\n  phase and frequency discipline (for long poll intervals).  Update\n  TAI function to match current leapsecond processing.\n* Documentation updates from Dave Mills.\n* [Bug 1037] Use all 16 of the MD5 passwords generated by ntp-keygen.\n* Fixed the incorrect edge parameter being passed to time_pps_kcbind in\n  NMEA refclock driver.\n* [Bug 399] NMEA refclock driver does not honor time1 offset if flag3 set.\n* [Bug 985] Modifications to NMEA reference clock driver to support Accord\n  GPS Clock.\n* poll time updates from Dave Mills.\n* local refclock documentation updates from Dave Mills.\n* [Bug 1022] Fix compilation problems with yesterday's commit.\n* Updates and cleanup from Dave Mills:\n  I've now spent eleven months of a sabbatical year - 7 days a week, 6-10\n  hours most days - working on NTP. I have carefully reviewed every major\n  algorithm, examined its original design and evolution from that design.\n  I've trimmed off dead code and briar patches and did zillions of tests\n  contrived to expose evil vulnerabilities. The development article is in\n  rather good shape and should be ready for prime time.\n\n  1. The protostats statistics files have been very useful in exposing\n  little twitches and turns when something hiccups, like a broken PPS\n  signal. Most of what used to be syslog messages are now repackaged as\n  protostats messages with optional syslog as well. These can also be sent\n  as traps which might be handy to tiggle a beeper or celltext. These, the\n  sysstats files and cryptostats files reveal the ambient health of a busy\n  server, monitor traffic and error counts and spot crypto attacks.\n\n  2. Close inspection of the clock discipline behavior at long poll\n  intervals (36 h) showed it not doing as well as it should. I redesigned\n  the FLL loop to improve nominal accuracy from  several tens of\n  milliseconds to something less than ten milliseconds.\n\n  3. Autokey (again). The enhanced error checking was becoming a major\n  pain. I found a way to toss out gobs of ugly fat code and replace the\n  function with a much simpler and more comprehensive scheme. It resists\n  bait-and-switch attacks and quickly detect cases when the protocol is\n  not correctly synchronized.\n\n  4. The interface code for the kernel PPS signal was not in sync with the\n  kernel code itself. Some error checks were duplicated and some\n  ineffective. I found none of the PPS-capable drivers, including the atom\n  driver, do anything when the prefer peer fails; the kernel PPS signal\n  remains in control. The atom driver now disables the kernel PPS when the\n  prefer peer comes bum. This is important when the prefer peer is not a\n  reference clock but a remote NTP server.\n\n  5. The flake restrict bit turned out to be really interesting,\n  especially with symmtric modes and of those especially those using\n  Autokey. Small changes in the recovery procedures when packets are lost\n  now avoid almost all scenarios which previously required protocol resets.\n\n  6. I've always been a little uncomfortable when using the clock filter\n  with long poll intervals because the samples become less and less\n  correlated as the sample age exceeds the Allan intercept. Various\n  schemes have been used over the years to cope with this fact. The latest\n  one and the one that works the best is to use a modified sort metric\n  where the delay is used when the age of the sample is less than the\n  intercept and the sum of delay and dispersion above that. The net result\n  is that, at small poll intervals the algorithm operates as a minimum\n  filter, while at larger poll intervals it morphs to FIFO. Left\n  unmodified, a sample could be used when twelve days old. This along with\n  the FLL modifications has made a dramatic improvement at large poll\n  intervals.\n\n- [Backward Incompatible] The 'state' variable is no longer reported or\n  available via ntpq output.  The following system status bit names\n  have been changed:\n  - sync_alarm -> leap_alarm\n  - sync_atomic -> sync_pps\n  - sync_lf_clock -> sync_lf_radio\n  - sync_hf_clock -> sync_hf_radio\n  - sync_uhf_clock -> sync_uhf_radio\n  - sync_local_proto -> sync_local\n  - sync_udp/time -> sync_other\n  Other names have been changed as well.  See the change history for\n  libntp/statestr.c for more details.\n  Other backward-incompatible changes in ntpq include:\n  - assID -> associd\n  - rootdispersion -> rootdisp\n  - pkt_head -> pkt_neader\n  See the change history for other details.\n\n* Updates and cleanup from Dave Mills.\n* [Bug 995] Remove spurious ; from ntp-keygen.c.\n* More cleanup and changes from Dave Mills.\n* [Bug 980] Direct help to stdout.\n---\n(4.2.4p8) 2009/12/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1331] DoS with mode 7 packets - CVE-2009-3563.\n\n---\n(4.2.4p7) 2009/05/18 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1151] Remote exploit if autokey is enabled - CVE-2009-1252.\n* [Bug 1187] Update the copyright date.\n* [Bug 1191] ntpd fails on Win2000 - \"Address already in use\" after fix\n  for [Sec 1149].\n\n---\n(4.2.4p7-RC7) 2009/05/12 Released by Harlan Stenn <stenn@ntp.org>\n\n* ntp.isc.org -> ntp.org cleanup.\n* [Bug 1178] Use prior FORCE_DNSRETRY behavior as needed at runtime,\n  add configure --enable-ignore-dns-errors to be even more stubborn\n\n---\n(4.2.4p7-RC6) 2009/05/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 784] Make --enable-linuxcaps the default when available\n* [Bug 1179] error messages for -u/--user and -i lacking droproot\n* Updated JJY reference clock driver from Takao Abe\n* [Bug 1071] Log a message and exit before trying to use FD_SET with a\n  descriptor larger than FD_SETSIZE, which will corrupt memory\n* On corruption of the iface list head in add_interface, log and exit\n\n---\n(4.2.4p7-RC5) 2009/05/02 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1172] 4.2.4p7-RC{3,4} fail to build on linux.\n* flock-build script unportable 'set -m' use removed\n\n---\n(4.2.4p7-RC4) 2009/04/29 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1167] use gcc -Winit-self only if it is understood\n\n---\n(4.2.4p7-RC3) 2009/04/22 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 787] Bug fixes for 64-bit time_t on Windows\n* [Bug 813] Conditional naming of Event\n* [Bug 1147] System errors should be logged to msyslog()\n* [Bug 1155] Fix compile problem on Windows with VS2005\n* [Bug 1156] lock_thread_to_processor() should be declared in header\n* [Bug 1157] quiet OpenSSL warnings, clean up configure.ac\n* [Bug 1158] support for aix6.1\n* [Bug 1160] MacOS X is like BSD regarding F_SETOWN\n\n---\n(4.2.4p7-RC2) 2009/04/09 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Sec 1144] limited buffer overflow in ntpq.  CVE-2009-0159\n* [Sec 1149] use SO_EXCLUSIVEADDRUSE on Windows\n\n---\n(4.2.4p7-RC1) 2009/03/30 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1131] UDP sockets should not use SIGPOLL on Solaris.\n* build system email address cleanup\n* [Bug 774] parsesolaris.c does not compile under the new Solaris\n* [Bug 873] Windows serial refclock proper TTY line discipline emulation\n* [Bug 1014] Enable building with VC9 (in Visual Studio 2008,\n  Visual C++ 2008, or SDK)\n* [Bug 1117] Deferred interface binding under Windows works only correctly\n  if FORCE_DNSRETRY is defined\n* [BUG 1124] Lock QueryPerformanceCounter() client threads to same CPU\n* DPRINTF macro made safer, always evaluates to a statement and will not\n  misassociate an else which follows the macro.\n\n---\n(4.2.4p6) 2009/01/08 Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 1113] Fixed build errors with recent versions of openSSL. \n* [Sec 1111] Fix incorrect check of EVP_VerifyFinal()'s return value.\n* Update the copyright year.\n\n---\n(4.2.4p5) 2008/08/17 Released by Harlan Stenn <stenn@ntp.org>\n\n* [BUG 1051] Month off by one in leap second message written to clockstats\n  file fixed.\n* [Bug 450] Windows only: Under original Windows NT we must not discard the\n  wildcard socket to workaround a bug in NT's getsockname().\n* [Bug 1038] Built-in getpass() function also prompts for password if\n  not built with DEBUG.\n* [Bug 841] Obsolete the \"dynamic\" keyword and make deferred binding\n  to local interfaces the default.\n  Emit a warning if that keyword is used for configuration.\n* [Bug 959] Refclock on Windows not properly releasing recvbuffs.\n* [Bug 993] Fix memory leak when fetching system messages.\n* much cleanup, fixes, and changes from Dave Mills.\n* ntp_control.c: LEAPTAB is a filestamp, not an unsigned.  From Dave Mills.\n* ntp_config.c: ntp_minpoll fixes from Dave Mills.\n* ntp-keygen updates from Dave Mills.\n* refresh epoch, throttle, and leap cleanup from Dave Mills.\n* Documentation cleanup from Dave Mills.\n* [Bug 918] Only use a native md5.h if MD5Init() is available.\n* [Bug 979] Provide ntptimeval if it is not otherwise present.\n* [Bug 634] Re-instantiate syslog() and logfiles after the daemon fork.\n* [Bug 952] Use md5 code with a friendlier license.\n* [Bug 977] Fix mismatching #ifdefs for builds without IPv6.\n* [Bug 830] Fix the checking order of the interface options.\n* Clean up the logfile/syslog setup.\n* [Bug 970] Lose obsolete -g flag to ntp-keygen.\n* The -e flag to ntp-keygen can write GQ keys now, too.\n* ntp_proto.c: sys_survivors and hpoll cleanup from Dave Mills.\n* ntp_loopfilter.c: sys_poll cleanup from Dave Mills.\n* refclock_wwv.c: maximum-likelihood digit and DSYNC fixes from Dave Mills.\n* [Bug 967] preemptable associations are lost forever on a step.\n* ntp_config.c: [CID 48] missing \"else\" clause.\n* [Bug 833] ntpq config keyword is quote-mark unfriendly.\n* Rename the ntpq \"config\" keyword to \":config\".\n* Dave Mills shifted some orphan processing.\n* Fix typos in the [Bug 963] patch.\n* bootstrap: squawk if genver fails.  Use -f with cp in case Dave does a chown.\n* Remove obsolete simulator command-line options.\n* ntp_request.c: [CID 36] zero sin_zero.\n* [Bug 963] get_systime() is too noisy.\n* [Bug 960] spurious syslog:crypto_setup:spurious crypto command\n* [Bug 964] Change *-*-linux* to *-*-*linux* to allow for uclinux.\n* Changes from Dave Mills:\n  - ntp_util.c: cleanup.\n  - ntp_timer.c: watch the non-burst packet rate.\n  - ntp_request.c: cleanup.\n  - ntp_restrict.c: RES_LIMITED cleanup.\n  - ntp_proto.c: RES_LIMITED, rate bucktes, counters, overall cleanup.\n  - ntp_peer.c: disallow peer_unconfig().\n  - ntp_monitor.c: RES_LIMITED cleanup.\n  - ntp_loopfilter.c: poll interval cleanup.\n  - ntp_crypto.c: volley -> retry.  Cleanup TAI leap message.\n  - ntp_config: average and minimum are ^2 values.\n  - ntpdc: unknownversion is really \"declined\", not \"bad version\".\n  - Packet retry cleanup.\n* [Bug 961] refclock_tpro.c:tpro_poll() calls refclock_receive() twice.\n* [Bug 957] Windows only: Let command line parameters from the Windows SCM GUI\n  override the standard parameters from the ImagePath registry key.\n* Added HAVE_INT32_T to the Windows config.h to avoid duplicate definitions.\n* Work around a VPATH difference in FreeBSD's 'make' command.\n* Update bugreport URL.\n* Update -I documentation.\n* [Bug 713] Fix bug reporting information.\n* A bug in the application of the negative-sawtooth for 12 channel receivers. \n* The removal of unneeded startup code used for the original LinuxPPS, it now\n  conforms to the PPSAPI and does not need special code.  \n* ntp-keygen.c: Coverity fixes [CID 33,47].\n* Volley cleanup from Dave Mills.\n* Fuzz cleanup from Dave Mills.\n* [Bug 861] Leap second cleanups from Dave Mills.\n* ntpsim.c: add missing protypes and fix [CID 34], a nit.\n* Upgraded bison at UDel.\n* Update br-flock and flock-build machine lists.\n* [Bug 752] QoS: add parse/config handling code. \n* Fix the #include order in tickadj.c for picky machines.\n* [Bug 752] QoS: On some systems, netinet/ip.h needs netinet/ip_systm.h.\n* [Bug 752] Update the QoS tagging (code only - configuration to follow).\n* Orphan mode and other protocol cleanup from Dave Mills.\n* Documentation cleanup from Dave Mills.\n* [Bug 940] ntp-keygen uses -v.  Disallow it as a shortcut for --version.\n* more cleanup to ntp_lineeditlibs.m4.\n* Documentation updates from Dave Mills.\n* -ledit cleanup for ntpdc and ntpq.\n* Association and other cleanup from Dave Mills.\n* NTP_UNREACH changes from Dave Mills.\n* Fix the readline history test.\n* [Bug 931] Require -lreadline to be asked for explicitly.\n* [Bug 764] When looking for -lreadline support, also try using -lncurses.\n* [Bug 909] Fix int32_t errors for ntohl().\n* [Bug 376/214] Enhancements to support multiple if names and IP addresses.\n* [Bug 929] int32_t is undefined on Windows.  Casting wrong.\n* [Bug 928] readlink missing braces.\n* [Bug 788] Update macros to support VS 2005.\n* ntpd/ntp_timer.c: add missing sys_tai parameter for debug printf\n* [Bug 917] config parse leaves files open\n* [Bug 912] detect conflicting enable/disable configuration on interfaces\n  sharing an IP address\n* [Bug 771] compare scopeid if available for IPv6 addresses\n* Lose obsolete crypto subcommands (Dave Mills).\n* WWV is an HF source, not an LF source (Dave Mills).\n* [Bug 899] Only show -i/--jaildir -u/--user options if we HAVE_DROPROOT.\n* [Bug 916] 'cryptosw' is undefined if built without OpenSSL.\n* [Bug 891] 'restrict' config file keyword does not work (partial fix).\n* [Bug 890] the crypto command seems to be required now.\n* [Bug 915] ntpd cores during processing of x509 certificates.\n* Crypto lint cleanup from Dave Mills.\n* [Bug 897] Check RAND_status() - we may not need a .rnd file.\n* Crypto cleanup from Dave Mills.\n* [Bug 911] Fix error message in cmd_args.c.\n* [Bug 895] Log assertion failures via syslog(), not stderr.\n* Documentation updates from Dave Mills.\n* Crypto cleanup from Dave Mills.\n* [Bug 905] ntp_crypto.c fails to compile without -DDEBUG.\n* Avoid double peer stats logging.\n* ntp-keygen cleanup from Dave Mills.\n* libopts needs to be built after ElectricFence.\n* [Bug 894] Initialize keysdir before calling crypto_setup().\n* Calysto cleanup for ntpq.\n* ntp-keygen -i takes an arg.\n* Cleanup and fixes from Dave Mills.\n* [Bug 887] Fix error in ntp_types.h (for sizeof int != 4).\n* Bug 880 bug fixes for Windows build\n* Improve Calysto support.\n* The \"revoke\" parameter is a crypto command.\n* The driftfile wander threshold is a real number.\n* [Bug 850] Fix the wander threshold parameter on the driftfile command.\n* ntp_io.c: Dead code cleanup - Coverity View 19.\n* Leap file related cleanup from Dave Mills.\n* ntp_peer.c: Set peer->srcadr before (not after) calling set_peerdstadr().\n* Initialize offset in leap_file() - Coverity View 17.\n* Use the correct stratum on KISS codes.\n* Fuzz bits cleanup.\n* Show more digits in some debug printf's.\n* Use drift_file_sw internally to control writing the drift file.\n* Implement the wander_threshold option for the driftfile config keyword.\n* reformat ntp_control.c; do not use c++ // comments.\n* [Bug 629] Undo bug #629 fixes as they cause more problems than were  being\n  solved\n* Changes from Dave Mills: in/out-bound data rates, leapsecond cleanup,\n  driftfile write cleanup, packet buffer length checks, documentation updates.\n* More assertion checks and malloc()->emalloc(), courtesy of Calysto.\n* [Bug 864] Place ntpd service in maintenance mode if using SMF on Solaris\n* [Bug 862] includefile nesting; preserve phonelist on reconfig.\n* [Bug 604] ntpd regularly dies on linux/alpha.\n* more leap second infrastructure fixes from Dave Mills.\n* [Bug 858] recent leapfile changes broke non-OpenSSL builds.\n* Use emalloc() instead of malloc() in refclock_datum.c (Calysto).\n* Start using 'design by contract' assertions.\n* [Bug 767] Fast sync to refclocks wanted.\n* Allow null driftfile.\n* Use YYERROR_VERBOSE for the new parser, and fix related BUILT_SOURCES.\n* [Bug 629] changes to ensure broadcast works including on wildcard addresses\n* [Bug 853] get_node() must return a pointer to maximally-aligned memory.\n* Initial leap file fixes from Dave Mills.\n* [Bug 858] Recent leapfile changes broke without OPENSSL.\n* Use a char for DIR_SEP, not a string.\n* [Bug 850] driftfile parsing changes.\n* driftfile maintenance changes from Dave Mills.  Use clock_phi instead of\n  stats_write_tolerance.\n* [Bug 828] refid string not being parsed correctly.\n* [Bug 846] Correct includefile parsing.\n* [Bug 827] New parsing code does not handle \"fudge\" correctly.\n* Enable debugging capability in the config parser.\n* [Bug 839] Crypto password not read from ntp.conf.\n* Have autogen produce writable output files.\n* [Bug 825] Correct logconfig -/+ keyword processing.\n* [Bug 828] Correct parsing of \" delimited strings.\n* Cleanup FILE * usage after fclose() in ntp_filegen.c.\n* [Bug 843] Windows Completion port code was incorrectly merged from -stable.\n* [Bug 840] do fudge configuration AFTER peers (thus refclocks) have been\n  configured.\n* [Bug 824] Added new parser modules to the Windows project file.\n* [Bug 832] Add libisc/log.c headers to the distribution.\n* [Bug 808] Only write the drift file if we are in state 4.\n* Initial import of libisc/log.c and friends.\n* [Bug 826] Fix redefinition of PI.\n* [Bug 825] ntp_scanner.c needs to #include <config.h> .\n* [Bug 824] New parser code has some build problems with the SIM code.\n* [Bug 817] Use longnames for setting ntp variables on the command-line;\n  Allowing '-v' with and without an arg to disambiguate usage is error-prone.\n* [Bug 822] set progname once, early.\n* [Bug 819] remove erroneous #if 0 in Windows completion port code.\n* The new config code missed an #ifdef for building without refclocks.\n* Distribute some files needed by the new config parsing code.\n* [Bug 819] Timeout for WaitForMultipleObjects was 500ms instead of INFINITE\n* Use autogen 5.9.1.\n* Fix clktest command-line arg processing.'\n* Audio documentation updates from Dave Mills.\n* New config file parsing code, from Sachin Kamboj.\n* fuzz bit cleanup from Dave Mills.\n* replay cleanup from Dave Mills.\n* [Bug 542] Tolerate missing directory separator at EO statsdir.\n* [Bug 812] ntpd should drop supplementary groups.\n* [Bug 815] Fix warning compiling 4.2.5p22 under Windows with VC6.\n* [Bug 740] Fix kernel/daemon startup drift anomaly.\n* refclock_wwv.c fixes from Dave Mills.\n* [Bug 810] Fix ntp-keygen documentation.\n* [Bug 787] Bug fixes for 64-bit time_t on Windows.\n* [Bug 796] Clean up duplicate #defines in ntp_control.c.\n* [Bug 569] Use the correct precision for the Leitch CSD-5300.\n* [Bug 795] Moved declaration of variable to top of function.\n* [Bug 798] ntpq [p typo crashes ntpq/ntpdc.\n* [Bug 786] Fix refclock_bancomm.c on Solaris.\n* [Bug 774] parsesolaris.c does not compile under the new Solaris.\n* [Bug 782] Remove P() macros from Windows files.\n* [Bug 778] ntpd fails to lock with drift=+500 when started with drift=-500.\n* [Bug 592] Trimble Thunderbolt GPS support.\n* IRIG, CHU, WWV, WWVB refclock improvements from Dave Mills.\n* [Bug 757] Lose ULONG_CONST().\n* [Bug 756] Require ANSI C (function prototypes).\n* codec (audio) and ICOM changes from Dave Mills.\n\n---\n\n* [Bug 450] Windows only: Under original Windows NT we must not discard the\n  wildcard socket to workaround a bug in NT's getsockname().\n* [Bug 1038] Built-in getpass() function also prompts for password if\n  not built with DEBUG.\n* [Bug 841] Obsolete the \"dynamic\" keyword and make deferred binding\n  to local interfaces the default.\n  Emit a warning if that keyword is used for configuration.\n* [Bug 959] Refclock on Windows not properly releasing recvbuffs.\n* [Bug 993] Fix memory leak when fetching system messages.\n* [Bug 987] Wake up the resolver thread/process when a new interface has\n  become available.\n* Correctly apply negative-sawtooth for oncore 12 channel receiver.\n* Startup code for original LinuxPPS removed.  LinuxPPS now conforms to\n  the PPSAPI.\n* [Bug 1000] allow implicit receive buffer allocation for Windows.\n  fixes startup for windows systems with many interfaces.\n  reduces dropped packets on network bursts.\n  additionally fix timer() starvation during high load.\n* [Bug 990] drop minimum time restriction for interface update interval.\n* [Bug 977] Fix mismatching #ifdefs for builds without IPv6.\n* Update the copyright year.\n* Build system cleanup (make autogen-generated files writable).\n* [Bug 957] Windows only: Let command line parameters from the Windows SCM GUI\n  override the standard parameters from the ImagePath registry key.\n* Fixes for ntpdate:\n* [Bug 532] nptdate timeout is too long if several servers are supplied.\n* [Bug 698] timeBeginPeriod is called without timeEndPeriod in some NTP tools.\n* [Bug 857] ntpdate debug mode adjusts system clock when it shouldn't.\n* [Bug 908] ntpdate crashes sometimes.\n* [Bug 982] ntpdate(and ntptimeset) buffer overrun if HAVE_POLL_H isn't set\n  (dup of 908).\n* [Bug 997] ntpdate buffer too small and unsafe.\n* ntpdate.c: Under Windows check whether NTP port in use under same conditions\n  as under other OSs.\n* ntpdate.c: Fixed some typos and indents (tabs/spaces).\n\n(4.2.4p4) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 902] Fix problems with the -6 flag.\n* Updated include/copyright.def (owner and year).\n* [Bug 878] Avoid ntpdc use of refid value as unterminated string.\n* [Bug 881] Corrected display of pll offset on 64bit systems.\n* [Bug 886] Corrected sign handling on 64bit in ntpdc loopinfo command.\n* [Bug 889] avoid malloc() interrupted by SIGIO risk\n* ntpd/refclock_parse.c: cleanup shutdown while the file descriptor is still\n  open.\n* [Bug 885] use emalloc() to get a message at the end of the memory\n  unsigned types cannot be less than 0\n  default_ai_family is a short\n  lose trailing , from enum list\n  clarify ntp_restrict.c for easier automated analysis\n* [Bug 884] don't access recv buffers after having them passed to the free\n  list.\n* [Bug 882] allow loopback interfaces to share addresses with other\n  interfaces.\n\n---\n(4.2.4p3) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 863] unable to stop ntpd on Windows as the handle reference for events\n  changed\n\n---\n(4.2.4p2) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 854] Broadcast address was not correctly set for interface addresses\n* [Bug 829] reduce syslog noise, while there fix Enabled/Disable logging\n  to reflect the actual configuration.\n* [Bug 795] Moved declaration of variable to top of function.\n* [Bug 789] Fix multicast client crypto authentication and make sure arriving\n  multicast packets do not disturb the autokey dance.\n* [Bug 785] improve handling of multicast interfaces\n  (multicast routers still need to run a multicast routing software/daemon)\n* ntpd/refclock_parse.c: cleanup shutdown while the file descriptor is still\n  open.\n* [Bug 885] use emalloc() to get a message at the end of the memory\n  unsigned types cannot be less than 0\n  default_ai_family is a short\n  lose trailing , from enum list\n* [Bug 884] don't access recv buffers after having them passed to the free list.\n* [Bug 882] allow loopback interfaces to share addresses with other interfaces.\n* [Bug 527] Don't write from source address length to wrong location\n* Upgraded autogen and libopts.\n* [Bug 811] ntpd should not read a .ntprc file.\n\n---\n(4.2.4p1) (skipped)\n\n---\n(4.2.4p0) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 793] Update Hans Lambermont's email address in ntpsweep.\n* [Bug 776] Remove unimplemented \"rate\" flag from ntpdate.\n* [Bug 586] Avoid lookups if AI_NUMERICHOST is set.\n* [Bug 770] Fix numeric parameters to ntp-keygen (Alain Guibert).\n* [Bug 768] Fix io_setbclient() error message.\n* [Bug 765] Use net_bind_service capability on linux.\n* [Bug 760] The background resolver must be aware of the 'dynamic' keyword.\n* [Bug 753] make union timestamp anonymous (Philip Prindeville).\n* confopt.html: move description for \"dynamic\" keyword into the right section.\n* pick the right type for the recv*() length argument.\n\n---\n(4.2.4) Released by Harlan Stenn <stenn@ntp.org>\n\n* monopt.html fixes from Dave Mills.\n* [Bug 452] Do not report kernel PLL/FLL flips.\n* [Bug 746] Expert mouseCLOCK USB v2.0 support added.'\n* driver8.html updates.\n* [Bug 747] Drop <NOBR> tags from ntpdc.html.\n* sntp now uses the returned precision to control decimal places.\n* sntp -u will use an unprivileged port for its queries.\n* [Bug 741] \"burst\" doesn't work with !unfit peers.\n* [Bug 735] Fix a make/gmake VPATH issue on Solaris.\n* [Bug 739] ntpd -x should not take an argument.\n* [Bug 737] Some systems need help providing struct iovec.\n* [Bug 717] Fix libopts compile problem.\n* [Bug 728] parse documentation fixes.\n* [Bug 734] setsockopt(..., IP_MULTICAST_IF, ...) fails on 64-bit platforms.\n* [Bug 732] C-DEX JST2000 patch from Hideo Kuramatsu.\n* [Bug 721] check for __ss_family and __ss_len separately.\n* [Bug 666] ntpq opeers displays jitter rather than dispersion.\n* [Bug 718] Use the recommended type for the saddrlen arg to getsockname().\n* [Bug 715] Fix a multicast issue under Linux.\n* [Bug 690] Fix a Windows DNS lookup buffer overflow.\n* [Bug 670] Resolved a Windows issue with the dynamic interface rescan code.\n* K&R C support is being deprecated.\n* [Bug 714] ntpq -p should conflict with -i, not -c.\n* WWV refclock improvements from Dave Mills.\n* [Bug 708] Use thread affinity only for the clock interpolation thread.\n* [Bug 706] ntpd can be running several times in parallel.\n* [Bug 704] Documentation typos.\n* [Bug 701] coverity: NULL dereference in ntp_peer.c\n* [Bug 695] libopts does not protect against macro collisions.\n* [Bug 693] __adjtimex is independent of ntp_{adj,get}time.\n* [Bug 692] sys_limitrejected was not being incremented.\n* [Bug 691] restrictions() assumption not always valid.\n* [Bug 689] Deprecate HEATH GC-1001 II; the driver never worked.\n* [Bug 688] Fix documentation typos.\n* [Bug 686] Handle leap seconds better under Windows.\n* [Bug 685] Use the Windows multimedia timer.\n* [Bug 684] Only allow debug options if debugging is enabled.\n* [Bug 683] Use the right version string.\n* [Bug 680] Fix the generated version string on Windows.\n* [Bug 678] Use the correct size for control messages.\n* [Bug 677] Do not check uint_t in configure.ac.\n* [Bug 676] Use the right value for msg_namelen.\n* [Bug 675] Make sure ntpd builds without debugging.\n* [Bug 672] Fix cross-platform structure padding/size differences.\n* [Bug 660] New TIMESTAMP code fails tp build on Solaris Express.\n* [Bug 659] libopts does not build under Windows.\n* [Bug 658] HP-UX with cc needs -Wp,-H8166 in CFLAGS.\n* [Bug 656] ntpdate doesn't work with multicast address.\n* [Bug 638] STREAMS_TLI is deprecated - remove it.\n* [Bug 635] Fix tOptions definition.\n* [Bug 628] Fallback to ntp discipline not working for large offsets.\n* [Bug 622] Dynamic interface tracking for ntpd.\n* [Bug 603] Don't link with libelf if it's not needed.\n* [Bug 523] ntpd service under Windows does't shut down properly.\n* [Bug 500] sntp should always be built.\n* [Bug 479] Fix the -P option.\n* [Bug 421] Support the bc637PCI-U card.\n* [Bug 342] Deprecate broken TRAK refclock driver.\n* [Bug 340] Deprecate broken MSF EES refclock driver.\n* [Bug 153] Don't do DNS lookups on address masks.\n* [Bug 143] Fix interrupted system call on HP-UX.\n* [Bug 42] Distribution tarballs should be signed.\n* Support separate PPS devices for PARSE refclocks.\n* [Bug 637, 51?] Dynamic interface scanning can now be done.\n* Options processing now uses GNU AutoGen.\n\n---\n(4.2.2p4) Released by Harlan Stenn <stenn@ntp.org>\n\n* [Bug 710] compat getnameinfo() has off-by-one error\n* [Bug 690] Buffer overflow in Windows when doing DNS Lookups\n\n---\n(4.2.2p3) Released by Harlan Stenn <stenn@ntp.org>\n\n* Make the ChangeLog file cleaner and easier to read\n* [Bug 601] ntpq's decodeint uses an extra level of indirection\n* [Bug 657] Different OSes need different sized args for IP_MULTICAST_LOOP\n* release engineering/build changes\n* Documentation fixes\n* Get sntp working under AIX-5\n\n---\n(4.2.2p2) (broken)\n\n* Get sntp working under AIX-5\n\n---\n(4.2.2p1)\n\n* [Bug 661] Use environment variable to specify the base path to openssl.\n* Resolve an ambiguity in the copyright notice\n* Added some new documentation files\n* URL cleanup in the documentation\n* [Bug 657]: IP_MULTICAST_LOOP uses a u_char value/size\n* quiet gcc4 complaints\n* more Coverity fixes\n* [Bug 614] manage file descriptors better\n* [Bug 632] update kernel PPS offsets when PPS offset is re-configured\n* [Bug 637] Ignore UP in*addr_any interfaces\n* [Bug 633] Avoid writing files in srcdir\n* release engineering/build changes\n\n---\n(4.2.2)\n\n* SNTP\n* Many bugfixes\n* Implements the current \"goal state\" of NTPv4\n* Autokey improvements\n* Much better IPv6 support\n* [Bug 360] ntpd loses handles with LAN connection disabled.\n* [Bug 239] Fix intermittent autokey failure with multicast clients.\n* Rewrite of the multicast code\n* New version numbering scheme\n\n---\n(4.2.0)\n\n* More stuff than I have time to document\n* IPv6 support\n* Bugfixes\n* call-gap filtering\n* wwv and chu refclock improvements\n* OpenSSL integration\n\n---\n(4.1.2)\n\n* clock state machine bugfix\n* Lose the source port check on incoming packets\n* (x)ntpdc compatibility patch\n* Virtual IP improvements\n* ntp_loopfilter fixes and improvements\n* ntpdc improvements\n* GOES refclock fix\n* JJY driver\n* Jupiter refclock fixes\n* Neoclock4X refclock fixes\n* AIX 5 port\n* bsdi port fixes\n* Cray unicos port upgrade\n* HP MPE/iX port\n* Win/NT port upgrade\n* Dynix PTX port fixes\n* Document conversion from CVS to BK\n* readline support for ntpq\n\n---\n(4.1.0)\n\n* CERT problem fixed (99k23)\n\n* Huff-n-Puff filter\n* Preparation for OpenSSL support\n* Resolver changes/improvements are not backward compatible with mode 7\n  requests (which are implementation-specific anyway)\n* leap second stuff\n* manycast should work now\n* ntp-genkeys does new good things.\n* scripts/ntp-close\n* PPS cleanup and improvements\n* readline support for ntpdc\n* Crypto/authentication rewrite\n* WINNT builds with MD5 by default\n* WINNT no longer requires Perl for building with Visual C++ 6.0\n* algorithmic improvements, bugfixes\n* Solaris dosynctodr info update\n* html/pic/* is *lots* smaller\n* New/updated drivers: Forum Graphic GPS, WWV/H, Heath GC-100 II, HOPF\n  serial and PCI, ONCORE, ulink331\n* Rewrite of the audio drivers\n\n---\n(4.0.99)\n\n* Driver updates: CHU, DCF, GPS/VME, Oncore, PCF, Ulink, WWVB, burst\n  If you use the ONCORE driver with a HARDPPS kernel module,\n  you *must* have a properly specified:\n\tpps <filename> [assert/clear] [hardpps]\n  line in the /etc/ntp.conf file.\n* PARSE cleanup\n* PPS cleanup\n* ntpd, ntpq, ntpdate cleanup and fixes\n* NT port improvements\n* AIX, BSDI, DEC OSF, FreeBSD, NetBSD, Reliant, SCO, Solaris port improvements\n\n---\n(4.0.98)\n\n* Solaris kernel FLL bug is fixed in 106541-07\n* Bug/lint cleanup\n* PPS cleanup\n* ReliantUNIX patches\n* NetInfo support\n* Ultralink driver\n* Trimble OEM Ace-II support\n* DCF77 power choices\n* Oncore improvements\n\n---\n(4.0.97)\n\n* NT patches\n* AIX,SunOS,IRIX portability\n* NeXT portability\n* ntptimeset utility added\n* cygwin portability patches\n\n---\n(4.0.96)\n\n* -lnsl, -lsocket, -lgen configuration patches\n* Y2K patches from AT&T\n* Linux portability cruft\n\n---\n(4.0.95)\n\n* NT port cleanup/replacement\n* a few portability fixes\n* VARITEXT Parse clock added\n\n---\n(4.0.94)\n\n* PPS updates (including ntp.config options)\n* Lose the old DES stuff in favor of the (optional) RSAREF stuff\n* html cleanup/updates\n* numerous drivers cleaned up\n* numerous portability patches and code cleanup\n\n---\n(4.0.93)\n\n* Oncore refclock needs PPS or one of two ioctls.\n* Don't make ntptime under Linux.  It doesn't compile for too many folks.\n* Autokey cleanup\n* ReliantUnix patches\n* html cleanup\n* tickadj cleanup\n* PARSE cleanup\n* IRIX -n32 cleanup\n* byte order cleanup\n* ntptrace improvements and patches\n* ntpdc improvements and patches\n* PPS cleanup\n* mx4200 cleanup\n* New clock state machine\n* SCO cleanup\n* Skip alias interfaces\n\n---\n(4.0.92)\n\n* chronolog and dumbclock refclocks\n* SCO updates\n* Cleanup/bugfixes\n* Y2K patches\n* Updated palisade driver\n* Plug memory leak\n* wharton kernel clock\n* Oncore clock upgrades\n* NMEA clock improvements\n* PPS improvements\n* AIX portability patches\n\n---\n(4.0.91)\n\n* New ONCORE driver\n* New MX4200 driver\n* Palisade improvements\n* config file bugfixes and problem reporting\n* autoconf upgrade and cleanup\n* HP-UX, IRIX lint cleanup\n* AIX portability patches\n* NT cleanup\n\n---\n(4.0.90)\n\n* Nanoseconds\n* New palisade driver\n* New Oncore driver\n\n---\n(4.0.73)\n\n* README.hackers added\n* PARSE driver is working again\n* Solaris 2.6 has nasty kernel bugs.  DO NOT enable pll!\n* DES is out of the distribution.\n\n---\n(4.0.72)\n\n* K&R C compiling should work again.\n* IRIG patches.\n* MX4200 driver patches.\n* Jupiter driver added.\n* Palisade driver added.  Needs work (ANSI, ntoh/hton, sizeof double, ???)\n", "dnl ######################################################################\ndnl OpenSSL support shared by top-level and sntp/configure.ac\nAC_DEFUN([NTP_OPENSSL], [\n\t\nAC_SUBST([OPENSSL])\nAC_SUBST([OPENSSL_INC])\nAC_SUBST([OPENSSL_LIB])\n\nAC_PATH_PROG([PKG_CONFIG], [pkg-config])\n\nAC_MSG_CHECKING([for openssl library directory])\nAC_ARG_WITH(\n    [openssl-libdir],\n    [AS_HELP_STRING(\n\t[--with-openssl-libdir], \n\t[+ =/something/reasonable]\n    )],\n    [ans=$withval],\n    [\n\tcase \"$build\" in\n\t $host) ans=yes ;;\n\t *)     ans=no ;;\n\tesac\n    ]\n)\ncase \"$ans\" in\n no) \n    ;;\n yes)\n    case \"$PKG_CONFIG\" in\n     '')\n\t;;\n     *)\n\tpkgans=\"`$PKG_CONFIG --libs-only-L openssl | sed -e 's/^-L//'`\" 2>/dev/null\n\ttest -f \"${pkgans}/pkgconfig/openssl.pc\" && ans=\"$pkgans\"\n\t;;\n    esac\n    ;;\n *) # Look where they said\n    ;;\nesac\ncase \"$ans\" in\n yes)\n    # Look in:\n    ans=\"/usr/lib /usr/lib/openssl /usr/sfw/lib\"\n    ans=\"$ans /usr/local/lib /usr/local/ssl/lib /lib\"\nesac\ncase \"$ans\" in\n no)\n    ;;\n *) # Look for libcrypto.a and libssl.a:\n    for i in $ans no\n    do\n\tcase \"$host\" in\n\t *-*-darwin*)\n\t    test -f $i/libcrypto.dylib -a -f $i/libssl.dylib && break\n\t    ;;\n\t *)\n\t    test -f $i/libcrypto.so -a -f $i/libssl.so && break\n\t    test -f $i/libcrypto.a -a -f $i/libssl.a && break\n\t    ;;\n\tesac\n    done\n    case \"$i\" in\n     no)\n\tans=no\n\tOPENSSL_LIB=\n\t;;\n     *) ans=$i\n\tOPENSSL_LIB=$ans\n\t;;\n    esac\n    ;;\nesac\nAC_MSG_RESULT([$ans])\n\nAC_MSG_CHECKING([for openssl include directory])\nAC_ARG_WITH(\n    [openssl-incdir],\n    [AS_HELP_STRING(\n\t[--with-openssl-incdir],\n\t[+ =/something/reasonable]\n    )],\n    [ans=$withval],\n    [\n\tcase \"$build\" in\n\t $host) ans=yes ;;\n\t *)     ans=no ;;\n\tesac\n    ]\n)\ncase \"$ans\" in\n no)\n    ;;\n yes) # look in:\n    case \"$PKG_CONFIG\" in\n     '')\n\t;;\n     *)\n\tpkgans=\"`$PKG_CONFIG --cflags-only-I openssl | sed -e 's/^-I//'`\" 2>/dev/null\n\ttest -f \"${pkgans}/pkgconfig/openssl.pc\" && ans=\"$pkgans\"\n\t;;\n    esac\n    ;;\n *) # Look where they said\n    ;;\nesac\ncase \"$ans\" in\n yes)\n    # Look in:\n    ans=\"/usr/include /usr/sfw/include /usr/local/include\"\n    ans=\"$ans /usr/local/ssl/include\"\nesac\ncase \"$ans\" in\n no)\n    ;;\n *) # look for openssl/opensslconf.h:\n    for i in $ans no\n    do\n\ttest -f $i/openssl/opensslconf.h && break\n    done\n    case \"$i\" in\n     no)\n\tans=no\n\tOPENSSL_INC=\n\t;;\n     *) ans=$i\n\tOPENSSL_INC=$ans\n\t;;\n    esac\n    ;;\nesac\nAC_MSG_RESULT([$ans])\n\nAC_MSG_CHECKING([if we will use crypto])\nAC_ARG_WITH(\n    [crypto],\n    [AS_HELP_STRING(\n\t[--with-crypto],\n\t[+ =openssl]\n    )],\n    [ans=$withval],\n    [ans=yes]\n)\ncase \"$ans\" in\n no)\n    ;;\n yes|openssl)\n    if test -z \"$OPENSSL_LIB\" -o -z \"$OPENSSL_INC\"\n    then\n\tans=no\n    else\n\tans=yes\n    fi\nesac\nntp_openssl=$ans\nAC_MSG_RESULT([$ans])\n\ncase \"$ntp_openssl\" in\n yes)\n    # We have OpenSSL inc/lib - use them.\n    case \"$OPENSSL_INC\" in\n     /usr/include)\n\t;;\n     *)\t\n\tCPPFLAGS=\"$CPPFLAGS -I$OPENSSL_INC\"\n\t;;\n    esac\n    case \"$OPENSSL_LIB\" in\n     /usr/lib)\n\t;;\n     *)\t\n\tLDFLAGS=\"$LDFLAGS -L$OPENSSL_LIB\"\n\tcase \"$need_dash_r\" in\n\t 1)\n\t    LDFLAGS=\"$LDFLAGS -R$OPENSSL_LIB\"\n\tesac\n\t;;\n    esac\n    AC_SUBST([LCRYPTO], [-lcrypto])\n    AC_DEFINE([OPENSSL], [1], [Use OpenSSL?])\nesac\n\n#\n# check for linking with -lcrypto failure, and try -lz -lcrypto.\n# Helps m68k-atari-mint\n#\ncase \"$ntp_openssl\" in\n yes)\n    NTPO_SAVED_LIBS=\"$LIBS\"\n    LIBS=\"$NTPO_SAVED_LIBS $LCRYPTO\"\n    AC_CACHE_CHECK(\n\t[if linking with $LCRYPTO alone works],\n\t[ntp_cv_bare_lcrypto],\n\t[AC_LINK_IFELSE(\n\t    [AC_LANG_PROGRAM(\n\t\t[[\n\t\t    #include \"openssl/err.h\"\n\t\t    #include \"openssl/evp.h\"\n\t\t]],\n\t\t[[\n\t\t    ERR_load_crypto_strings();\n\t\t    OpenSSL_add_all_algorithms();\n\t\t]]\n\t    )],\n\t    [ntp_cv_bare_lcrypto=yes],\n\t    [ntp_cv_bare_lcrypto=no]\n\t)]\n    )\n    case \"$ntp_cv_bare_lcrypto\" in\n     no)\n\tLIBS=\"$NTPO_SAVED_LIBS $LCRYPTO -lz\"\n\tAC_CACHE_CHECK(\n\t    [if linking with $LCRYPTO -lz works],\n\t    [ntp_cv_lcrypto_lz],\n\t    [AC_LINK_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t    [[\n\t\t\t#include \"openssl/err.h\"\n\t\t\t#include \"openssl/evp.h\"\n\t\t    ]],\n\t\t    [[\n\t\t\tERR_load_crypto_strings();\n\t\t\tOpenSSL_add_all_algorithms();\n\t\t    ]]\n\t\t)],\n\t\t[ntp_cv_lcrypto_lz=yes],\n\t\t[ntp_cv_lcrypto_lz=no]\n\t    )]\n\t)\n\tcase \"$ntp_cv_lcrypto_lz\" in\n\t yes)\n\t     LCRYPTO=\"$LCRYPTO -lz\"\n\tesac\n    esac\n    LIBS=\"$NTPO_SAVED_LIBS\"\n    AS_UNSET([NTPO_SAVED_LIBS])\nesac\n\n#\n# Older OpenSSL headers have a number of callback prototypes inside\n# other function prototypes which trigger copious warnings with gcc's\n# -Wstrict-prototypes, which is included in -Wall.\n#\n# An example:\n#\n# int i2d_RSA_NET(const RSA *a, unsigned char **pp, \n#\t\t  int (*cb)(), int sgckey);\n#\t\t  ^^^^^^^^^^^\n#\n# \n#\nopenssl_triggers_warnings=unknown\nSAVED_CFLAGS=\"$CFLAGS\"\n\ncase \"$GCC$ntp_openssl\" in\n yesyes)\n    CFLAGS=\"$CFLAGS -Werror\"\n    AC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t    [[\n\t    ]],\n\t    [[\n\t\t/* see if -Werror breaks gcc */\n\t    ]]\n\t)],\n\t[gcc_handles_Werror=yes],\n\t[gcc_handles_Werror=no]\n    )\n    case \"$gcc_handles_Werror\" in\n     no)\n\t# if this gcc doesn't do -Werror go ahead and use\n\t# -Wstrict-prototypes.\n\topenssl_triggers_warnings=yes\n\t;;\n     yes)\n\tCFLAGS=\"$CFLAGS -Wstrict-prototypes\"\n\tAC_COMPILE_IFELSE(\n\t    [AC_LANG_PROGRAM(\n\t\t[[\n\t\t    #include \"openssl/asn1_mac.h\"\n\t\t    #include \"openssl/bn.h\"\n\t\t    #include \"openssl/err.h\"\n\t\t    #include \"openssl/evp.h\"\n\t\t    #include \"openssl/pem.h\"\n\t\t    #include \"openssl/rand.h\"\n\t\t    #include \"openssl/x509v3.h\"\n\t\t]],\n\t\t[[\n\t\t    /* empty body */\n\t\t]]\n\t    )],\n\t    [openssl_triggers_warnings=no],\n\t    [openssl_triggers_warnings=yes]\n\t)\n    esac\n    case \"$openssl_triggers_warnings\" in\n     yes)\n\tCFLAGS=\"$SAVED_CFLAGS -Wno-strict-prototypes\"\n\t;;\n     *)\n\tCFLAGS=\"$SAVED_CFLAGS -Wstrict-prototypes\"\n    esac\n    ;;\n yesno)\n    # gcc without OpenSSL\n    CFLAGS=\"$SAVED_CFLAGS -Wstrict-prototypes\"\nesac\nAS_UNSET([SAVED_CFLAGS])\n])\ndnl ======================================================================\n", "/* ntp_config.c\n *\n * This file contains the ntpd configuration code.\n *\n * Written By:\tSachin Kamboj\n *\t\tUniversity of Delaware\n *\t\tNewark, DE 19711\n * Some parts borrowed from the older ntp_config.c\n * Copyright (c) 2006\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#ifdef HAVE_NETINFO\n# include <netinfo/ni.h>\n#endif\n\n#include <stdio.h>\n#include <ctype.h>\n#ifdef HAVE_SYS_PARAM_H\n# include <sys/param.h>\n#endif\n#include <signal.h>\n#ifndef SIGCHLD\n# define SIGCHLD SIGCLD\n#endif\n#ifdef HAVE_SYS_WAIT_H\n# include <sys/wait.h>\n#endif\n\n#include \"ntp.h\"\n#include \"ntpd.h\"\n#include \"ntp_io.h\"\n#include \"ntp_unixtime.h\"\n#include \"ntp_refclock.h\"\n#include \"ntp_filegen.h\"\n#include \"ntp_stdlib.h\"\n#include \"lib_strbuf.h\"\n#include \"ntp_assert.h\"\n#include \"ntpd-opts.h\"\n#include \"ntp_random.h\"\n#include \"ntp_workimpl.h\"\n#include <isc/net.h>\n#include <isc/result.h>\n\n\n/*\n * [Bug 467]: Some linux headers collide with CONFIG_PHONE and CONFIG_KEYS\n * so #include these later.\n */\n\n#include \"ntp_config.h\"\n#include \"ntp_cmdargs.h\"\n\n#include \"ntp_scanner.h\"\n#include \"ntp_parser.h\"\n\n\n/* list of servers from command line for config_peers() */\nint\tcmdline_server_count;\nchar **\tcmdline_servers;\n\n/*\n * \"logconfig\" building blocks\n */\nstruct masks {\n\tconst char *\tname;\n\tunsigned long\tmask;\n};\n\nstatic struct masks logcfg_class[] = {\n\t{ \"clock\",\tNLOG_OCLOCK },\n\t{ \"peer\",\tNLOG_OPEER },\n\t{ \"sync\",\tNLOG_OSYNC },\n\t{ \"sys\",\tNLOG_OSYS },\n\t{ NULL,\t\t0 }\n};\n\nstatic struct masks logcfg_item[] = {\n\t{ \"info\",\t\tNLOG_INFO },\n\t{ \"allinfo\",\t\tNLOG_SYSINFO|NLOG_PEERINFO|NLOG_CLOCKINFO|NLOG_SYNCINFO },\n\t{ \"events\",\t\tNLOG_EVENT },\n\t{ \"allevents\",\t\tNLOG_SYSEVENT|NLOG_PEEREVENT|NLOG_CLOCKEVENT|NLOG_SYNCEVENT },\n\t{ \"status\",\t\tNLOG_STATUS },\n\t{ \"allstatus\",\t\tNLOG_SYSSTATUS|NLOG_PEERSTATUS|NLOG_CLOCKSTATUS|NLOG_SYNCSTATUS },\n\t{ \"statistics\",\t\tNLOG_STATIST },\n\t{ \"allstatistics\",\tNLOG_SYSSTATIST|NLOG_PEERSTATIST|NLOG_CLOCKSTATIST|NLOG_SYNCSTATIST },\n\t{ \"allclock\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OCLOCK },\n\t{ \"allpeer\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OPEER },\n\t{ \"allsys\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OSYS },\n\t{ \"allsync\",\t\t(NLOG_INFO|NLOG_STATIST|NLOG_EVENT|NLOG_STATUS)<<NLOG_OSYNC },\n\t{ \"all\",\t\tNLOG_SYSMASK|NLOG_PEERMASK|NLOG_CLOCKMASK|NLOG_SYNCMASK },\n\t{ NULL,\t\t\t0 }\n};\n\ntypedef struct peer_resolved_ctx_tag {\n\tint\t\tflags;\n\tint\t\thost_mode;\t/* T_* token identifier */\n\tu_short\t\tfamily;\n\tkeyid_t\t\tkeyid;\n\tu_char\t\thmode;\t\t/* MODE_* */\n\tu_char\t\tversion;\n\tu_char\t\tminpoll;\n\tu_char\t\tmaxpoll;\n\tu_char\t\tttl;\n\tconst char *\tgroup;\n} peer_resolved_ctx;\n\n/* Limits */\n#define MAXPHONE\t10\t/* maximum number of phone strings */\n#define MAXPPS\t\t20\t/* maximum length of PPS device string */\n\n/*\n * Miscellaneous macros\n */\n#define ISEOL(c)\t((c) == '#' || (c) == '\\n' || (c) == '\\0')\n#define ISSPACE(c)\t((c) == ' ' || (c) == '\\t')\n\n/*\n * Definitions of things either imported from or exported to outside\n */\nextern int yydebug;\t\t\t/* ntp_parser.c (.y) */\nint curr_include_level;\t\t\t/* The current include level */\nstruct FILE_INFO *fp[MAXINCLUDELEVEL+1];\nconfig_tree cfgt;\t\t\t/* Parser output stored here */\nstruct config_tree_tag *cfg_tree_history;\t/* History of configs */\nchar\t*sys_phone[MAXPHONE] = {NULL};\t/* ACTS phone numbers */\nchar\tdefault_keysdir[] = NTP_KEYSDIR;\nchar\t*keysdir = default_keysdir;\t/* crypto keys directory */\nchar *\tsaveconfigdir;\n#if defined(HAVE_SCHED_SETSCHEDULER)\nint\tconfig_priority_override = 0;\nint\tconfig_priority;\n#endif\n\nconst char *config_file;\nchar default_ntp_signd_socket[] =\n#ifdef NTP_SIGND_PATH\n\t\t\t\t\tNTP_SIGND_PATH;\n#else\n\t\t\t\t\t\"\";\n#endif\nchar *ntp_signd_socket = default_ntp_signd_socket;\n#ifdef HAVE_NETINFO\nstruct netinfo_config_state *config_netinfo = NULL;\nint check_netinfo = 1;\n#endif /* HAVE_NETINFO */\n#ifdef SYS_WINNT\nchar *alt_config_file;\nLPTSTR temp;\nchar config_file_storage[MAX_PATH];\nchar alt_config_file_storage[MAX_PATH];\n#endif /* SYS_WINNT */\n\n#ifdef HAVE_NETINFO\n/*\n * NetInfo configuration state\n */\nstruct netinfo_config_state {\n\tvoid *domain;\t\t/* domain with config */\n\tni_id config_dir;\t/* ID config dir      */\n\tint prop_index;\t\t/* current property   */\n\tint val_index;\t\t/* current value      */\n\tchar **val_list;       \t/* value list         */\n};\n#endif\n\nstruct REMOTE_CONFIG_INFO remote_config;  /* Remote configuration buffer and\n\t\t\t\t\t     pointer info */\nint input_from_file = 1;     /* A boolean flag, which when set, indicates that\n\t\t\t        the input is to be taken from the configuration\n\t\t\t        file, instead of the remote-configuration buffer\n\t\t\t     */\n\nint old_config_style = 1;    /* A boolean flag, which when set,\n\t\t\t      * indicates that the old configuration\n\t\t\t      * format with a newline at the end of\n\t\t\t      * every command is being used\n\t\t\t      */\nint\tcryptosw;\t\t/* crypto command called */\n\nextern int sys_maxclock;\nextern char *stats_drift_file;\t/* name of the driftfile */\nextern char *leapseconds_file_name; /*name of the leapseconds file */\n#ifdef HAVE_IPTOS_SUPPORT\nextern unsigned int qos;\t\t\t\t/* QoS setting */\n#endif /* HAVE_IPTOS_SUPPORT */\n\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n/*\n * backwards compatibility flags\n */\nbc_entry bc_list[] = {\n\t{ T_Bc_bugXXXX,\t\t1\t}\t/* default enabled */\n};\n\n/*\n * declare an int pointer for each flag for quick testing without\n * walking bc_list.  If the pointer is consumed by libntp rather\n * than ntpd, declare it in a libntp source file pointing to storage\n * initialized with the appropriate value for other libntp clients, and\n * redirect it to point into bc_list during ntpd startup.\n */\nint *p_bcXXXX_enabled = &bc_list[0].enabled;\n#endif\n\n/* FUNCTION PROTOTYPES */\n\nstatic void init_syntax_tree(config_tree *);\nstatic void apply_enable_disable(attr_val_fifo *q, int enable);\n\n#ifdef FREE_CFG_T\nstatic void free_auth_node(config_tree *);\n\nstatic void free_config_other_modes(config_tree *);\nstatic void free_config_auth(config_tree *);\nstatic void free_config_tos(config_tree *);\nstatic void free_config_monitor(config_tree *);\nstatic void free_config_access(config_tree *);\nstatic void free_config_tinker(config_tree *);\nstatic void free_config_system_opts(config_tree *);\nstatic void free_config_logconfig(config_tree *);\nstatic void free_config_phone(config_tree *);\nstatic void free_config_qos(config_tree *);\nstatic void free_config_setvar(config_tree *);\nstatic void free_config_ttl(config_tree *);\nstatic void free_config_trap(config_tree *);\nstatic void free_config_fudge(config_tree *);\nstatic void free_config_vars(config_tree *);\nstatic void free_config_peers(config_tree *);\nstatic void free_config_unpeers(config_tree *);\nstatic void free_config_nic_rules(config_tree *);\n#ifdef SIM\nstatic void free_config_sim(config_tree *);\n#endif\nstatic void destroy_address_fifo(address_fifo *);\n#define FREE_ADDRESS_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_address_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\n       void free_all_config_trees(void);\t/* atexit() */\nstatic void free_config_tree(config_tree *ptree);\n#endif\t/* FREE_CFG_T */\n\nstatic void destroy_restrict_node(restrict_node *my_node);\nstatic int is_sane_resolved_address(sockaddr_u *peeraddr, int hmode);\nstatic void save_and_apply_config_tree(void);\nstatic void destroy_int_fifo(int_fifo *);\n#define FREE_INT_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_int_fifo(pf);\t\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_string_fifo(string_fifo *);\n#define FREE_STRING_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_string_fifo(pf);\t\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_attr_val_fifo(attr_val_fifo *);\n#define FREE_ATTR_VAL_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_attr_val_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_filegen_fifo(filegen_fifo *);\n#define FREE_FILEGEN_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_filegen_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_restrict_fifo(restrict_fifo *);\n#define FREE_RESTRICT_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_restrict_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_setvar_fifo(setvar_fifo *);\n#define FREE_SETVAR_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_setvar_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\nstatic void destroy_addr_opts_fifo(addr_opts_fifo *);\n#define FREE_ADDR_OPTS_FIFO(pf)\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tdestroy_addr_opts_fifo(pf);\t\\\n\t\t(pf) = NULL;\t\t\t\\\n\t} while (0)\n\nstatic void config_tos(config_tree *);\nstatic void config_monitor(config_tree *);\nstatic void config_tinker(config_tree *);\nstatic void config_system_opts(config_tree *);\nstatic void config_logconfig(config_tree *);\nstatic void config_vars(config_tree *);\n#ifdef SIM\nstatic sockaddr_u *get_next_address(address_node *addr);\nstatic void config_sim(config_tree *);\nstatic void config_ntpdsim(config_tree *);\n#else\t/* !SIM follows */\nstatic void config_ntpd(config_tree *);\nstatic void config_other_modes(config_tree *);\nstatic void config_auth(config_tree *);\nstatic void config_access(config_tree *);\nstatic void config_phone(config_tree *);\nstatic void config_qos(config_tree *);\nstatic void config_setvar(config_tree *);\nstatic void config_ttl(config_tree *);\nstatic void config_trap(config_tree *);\nstatic void config_fudge(config_tree *);\nstatic void config_peers(config_tree *);\nstatic void config_unpeers(config_tree *);\nstatic void config_nic_rules(config_tree *);\nstatic u_char get_correct_host_mode(int token);\nstatic int peerflag_bits(peer_node *);\n#endif\t/* !SIM */\n\n#ifdef WORKER\nvoid peer_name_resolved(int, int, void *, const char *, const char *,\n\t\t\tconst struct addrinfo *,\n\t\t\tconst struct addrinfo *);\nvoid unpeer_name_resolved(int, int, void *, const char *, const char *,\n\t\t\t  const struct addrinfo *,\n\t\t\t  const struct addrinfo *);\nvoid trap_name_resolved(int, int, void *, const char *, const char *,\n\t\t\tconst struct addrinfo *,\n\t\t\tconst struct addrinfo *);\n#endif\n\nenum gnn_type {\n\tt_UNK,\t\t/* Unknown */\n\tt_REF,\t\t/* Refclock */\n\tt_MSK\t\t/* Network Mask */\n};\n\nvoid ntpd_set_tod_using(const char *);\nstatic char * normal_dtoa(double);\nstatic unsigned long get_pfxmatch(char **s, struct masks *m);\nstatic unsigned long get_match(char *s, struct masks *m);\nstatic unsigned long get_logmask(char *s);\n#ifndef SIM\nstatic int getnetnum(const char *num, sockaddr_u *addr, int complain,\n\t\t     enum gnn_type a_type);\n#endif\n\n\n/* FUNCTIONS FOR INITIALIZATION\n * ----------------------------\n */\n\n#ifdef FREE_CFG_T\nstatic void\nfree_auth_node(\n\tconfig_tree *ptree\n\t)\n{\n\tif (ptree->auth.keys) {\n\t\tfree(ptree->auth.keys);\n\t\tptree->auth.keys = NULL;\n\t}\n\n\tif (ptree->auth.keysdir) {\n\t\tfree(ptree->auth.keysdir);\n\t\tptree->auth.keysdir = NULL;\n\t}\n\n\tif (ptree->auth.ntp_signd_socket) {\n\t\tfree(ptree->auth.ntp_signd_socket);\n\t\tptree->auth.ntp_signd_socket = NULL;\n\t}\n}\n#endif /* DEBUG */\n\n\nstatic void\ninit_syntax_tree(\n\tconfig_tree *ptree\n\t)\n{\n\tmemset(ptree, 0, sizeof(*ptree));\n}\n\n\n#ifdef FREE_CFG_T\nvoid\nfree_all_config_trees(void)\n{\n\tconfig_tree *ptree;\n\tconfig_tree *pnext;\n\n\tptree = cfg_tree_history;\n\n\twhile (ptree != NULL) {\n\t\tpnext = ptree->link;\n\t\tfree_config_tree(ptree);\n\t\tptree = pnext;\n\t}\n}\n\n\nstatic void\nfree_config_tree(\n\tconfig_tree *ptree\n\t)\n{\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n\n\tif (ptree->source.value.s != NULL)\n\t\tfree(ptree->source.value.s);\n\n\tfree_config_other_modes(ptree);\n\tfree_config_auth(ptree);\n\tfree_config_tos(ptree);\n\tfree_config_monitor(ptree);\n\tfree_config_access(ptree);\n\tfree_config_tinker(ptree);\n\tfree_config_system_opts(ptree);\n\tfree_config_logconfig(ptree);\n\tfree_config_phone(ptree);\n\tfree_config_qos(ptree);\n\tfree_config_setvar(ptree);\n\tfree_config_ttl(ptree);\n\tfree_config_trap(ptree);\n\tfree_config_fudge(ptree);\n\tfree_config_vars(ptree);\n\tfree_config_peers(ptree);\n\tfree_config_unpeers(ptree);\n\tfree_config_nic_rules(ptree);\n#ifdef SIM\n\tfree_config_sim(ptree);\n#endif\n\tfree_auth_node(ptree);\n\n\tfree(ptree);\n\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n}\n#endif /* FREE_CFG_T */\n\n\n#ifdef SAVECONFIG\n/* Dump all trees */\nint\ndump_all_config_trees(\n\tFILE *df,\n\tint comment\n\t) \n{\n\tconfig_tree *\tcfg_ptr;\n\tint\t\treturn_value;\n\n\treturn_value = 0;\n\tfor (cfg_ptr = cfg_tree_history;\n\t     cfg_ptr != NULL; \n\t     cfg_ptr = cfg_ptr->link) \n\t\treturn_value |= dump_config_tree(cfg_ptr, df, comment);\n\n\treturn return_value;\n}\n\n\n/* The config dumper */\nint\ndump_config_tree(\n\tconfig_tree *ptree,\n\tFILE *df,\n\tint comment\n\t)\n{\n\tpeer_node *peern;\n\tunpeer_node *unpeern;\n\tattr_val *atrv;\n\taddress_node *addr;\n\taddress_node *peer_addr;\n\taddress_node *fudge_addr;\n\tfilegen_node *fgen_node;\n\trestrict_node *rest_node;\n\taddr_opts_node *addr_opts;\n\tsetvar_node *setv_node;\n\tnic_rule_node *rule_node;\n\tint_node *i_n;\n\tint_node *flags;\n\tstring_node *str_node;\n\n\tconst char *s;\n\tchar *s1;\n\tchar *s2;\n\tchar timestamp[80];\n\tint enable;\n\n\tDPRINTF(1, (\"dump_config_tree(%p)\\n\", ptree));\n\n\tif (comment) {\n\t\tif (!strftime(timestamp, sizeof(timestamp),\n\t\t\t      \"%Y-%m-%d %H:%M:%S\",\n\t\t\t      localtime(&ptree->timestamp)))\n\t\t\ttimestamp[0] = '\\0';\n\n\t\tfprintf(df, \"# %s %s %s\\n\",\n\t\t\ttimestamp,\n\t\t\t(CONF_SOURCE_NTPQ == ptree->source.attr)\n\t\t\t    ? \"ntpq remote config from\"\n\t\t\t    : \"startup configuration file\",\n\t\t\tptree->source.value.s);\n\t}\n\n\t/* For options I didn't find documentation I'll just output its name and the cor. value */\n\tatrv = HEAD_PFIFO(ptree->vars);\n\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\tdefault:\n\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\"# unknown vars type %d (%s) for %s\\n\",\n\t\t\t\tatrv->type, token_name(atrv->type),\n\t\t\t\ttoken_name(atrv->attr));\n\t\t\tbreak;\n#endif\n\t\tcase T_Double:\n\t\t\tfprintf(df, \"%s %s\\n\", keyword(atrv->attr),\n\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\tbreak;\n\t\t\t\n\t\tcase T_Integer:\n\t\t\tfprintf(df, \"%s %d\\n\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\t\tbreak;\n\n\t\tcase T_String:\n\t\t\tfprintf(df, \"%s \\\"%s\\\"\", keyword(atrv->attr),\n\t\t\t\tatrv->value.s);\n\t\t\tif (T_Driftfile == atrv->attr &&\n\t\t\t    atrv->link != NULL &&\n\t\t\t    T_WanderThreshold == atrv->link->attr) {\n\t\t\t\tatrv = atrv->link;\n\t\t\t\tfprintf(df, \" %s\\n\",\n\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t} else {\n\t\t\t\tfprintf(df, \"\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->logconfig);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"logconfig\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %c%s\", atrv->attr, atrv->value.s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->stats_dir)\n\t\tfprintf(df, \"statsdir \\\"%s\\\"\\n\", ptree->stats_dir);\n\n\ti_n = HEAD_PFIFO(ptree->stats_list);\n\tif (i_n != NULL) {\n\t\tfprintf(df, \"statistics\");\n\t\tfor ( ; i_n != NULL; i_n = i_n->link)\n\t\t\tfprintf(df, \" %s\", keyword(i_n->i));\t\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tfgen_node = HEAD_PFIFO(ptree->filegen_opts);\n\tfor ( ; fgen_node != NULL; fgen_node = fgen_node->link) {\n\t\tatrv = HEAD_PFIFO(fgen_node->options);\n\t\tif (atrv != NULL) {\n\t\t\tfprintf(df, \"filegen %s\", \n\t\t\t\tkeyword(fgen_node->filegen_token));\n\t\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\t\tswitch (atrv->attr) {\n#ifdef DEBUG\n\t\t\t\tdefault:\n\t\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\t\"# unknown filegen option token %s\\n\"\n\t\t\t\t\t\t\"filegen %s\",\n\t\t\t\t\t\ttoken_name(atrv->attr),\n\t\t\t\t\t\tkeyword(fgen_node->filegen_token));\n\t\t\t\t\tbreak;\n#endif\n\t\t\t\tcase T_File:\n\t\t\t\t\tfprintf(df, \" file %s\",\n\t\t\t\t\t\tatrv->value.s);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Type:\n\t\t\t\t\tfprintf(df, \" type %s\",\n\t\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Flag:\n\t\t\t\t\tfprintf(df, \" %s\",\n\t\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->auth.crypto_cmd_list);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"crypto\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tfprintf(df, \" %s %s\", keyword(atrv->attr),\n\t\t\t\tatrv->value.s);\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->auth.revoke != 0)\n\t\tfprintf(df, \"revoke %d\\n\", ptree->auth.revoke);\n\n\tif (ptree->auth.keysdir != NULL)\n\t\tfprintf(df, \"keysdir \\\"%s\\\"\\n\", ptree->auth.keysdir);\n\n\tif (ptree->auth.keys != NULL)\n\t\tfprintf(df, \"keys \\\"%s\\\"\\n\", ptree->auth.keys);\n\n\tatrv = HEAD_PFIFO(ptree->auth.trusted_key_list);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"trustedkey\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tif (T_Integer == atrv->type)\n\t\t\t\tfprintf(df, \" %d\", atrv->value.i);\n\t\t\telse if (T_Intrange == atrv->type)\n\t\t\t\tfprintf(df, \" (%d ... %d)\",\n\t\t\t\t\tatrv->value.r.first,\n\t\t\t\t\tatrv->value.r.last);\n#ifdef DEBUG\n\t\t\telse\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown trustedkey attr type %d\\n\"\n\t\t\t\t\t\"trustedkey\", atrv->type);\n#endif\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->auth.control_key)\n\t\tfprintf(df, \"controlkey %d\\n\", ptree->auth.control_key);\n\n\tif (ptree->auth.request_key)\n\t\tfprintf(df, \"requestkey %d\\n\", ptree->auth.request_key);\n\n\t/* dump enable list, then disable list */\n\tfor (enable = 1; enable >= 0; enable--) {\n\t\tatrv = (enable)\n\t\t\t   ? HEAD_PFIFO(ptree->enable_opts)\n\t\t\t   : HEAD_PFIFO(ptree->disable_opts);\n\t\tif (atrv != NULL) {\n\t\t\tfprintf(df, (enable)\n\t\t\t\t\t? \"enable\"\n\t\t\t\t\t: \"disable\");\n\t\t\tfor ( ; atrv != NULL; atrv = atrv->link)\n\t\t\t\tfprintf(df, \" %s\",\n\t\t\t\t\tkeyword(atrv->value.i));\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->orphan_cmds);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"tos\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\t\tdefault:\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown tos attr type %d %s\\n\"\n\t\t\t\t\t\"tos\", atrv->type, \n\t\t\t\t\ttoken_name(atrv->type));\n\t\t\t\tbreak;\n#endif\n\t\t\tcase T_Double:\n\t\t\t\tfprintf(df, \" %s %s\", \n\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->tinker);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"tinker\");\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tNTP_INSIST(T_Double == atrv->type);\n\t\t\tfprintf(df, \" %s %s\", keyword(atrv->attr),\n\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tif (ptree->broadcastclient)\n\t\tfprintf(df, \"broadcastclient\\n\");\n\n\tpeern = HEAD_PFIFO(ptree->peers);\n\tfor ( ; peern != NULL; peern = peern->link) {\n\t\taddr = peern->addr;\n\t\tfprintf(df, \"%s\", keyword(peern->host_mode));\n\t\tswitch (addr->type) {\n#ifdef DEBUG\n\t\tdefault:\n\t\t\tfprintf(df, \"# dump error:\\n\"\n\t\t\t\t\"# unknown peer family %d for:\\n\"\n\t\t\t\t\"%s\", addr->type,\n\t\t\t\tkeyword(peern->host_mode));\n\t\t\tbreak;\n#endif\n\t\tcase AF_UNSPEC:\n\t\t\tbreak;\n\n\t\tcase AF_INET:\n\t\t\tfprintf(df, \" -4\");\n\t\t\tbreak;\n\n\t\tcase AF_INET6:\n\t\t\tfprintf(df, \" -6\");\n\t\t\tbreak;\n\t\t}\n\t\tfprintf(df, \" %s\", addr->address);\n\t\t\n\t\tif (peern->minpoll != 0)\n\t\t\tfprintf(df, \" minpoll %u\", peern->minpoll);\n\n\t\tif (peern->maxpoll != 0)\n\t\t\tfprintf(df, \" maxpoll %u\", peern->maxpoll);\n\n\t\tif (peern->ttl != 0) {\n\t\t\tif (strlen(addr->address) > 8\n\t\t\t    && !memcmp(addr->address, \"127.127.\", 8))\n\t\t\t\tfprintf(df, \" mode %u\", peern->ttl);\n\t\t\telse\n\t\t\t\tfprintf(df, \" ttl %u\", peern->ttl);\n\t\t}\n\n\t\tif (peern->peerversion != NTP_VERSION)\n\t\t\tfprintf(df, \" version %u\", peern->peerversion);\n\n\t\tif (peern->peerkey != 0)\n\t\t\tfprintf(df, \" key %u\", peern->peerkey);\n\n\t\tif (peern->group != NULL)\n\t\t\tfprintf(df, \" ident \\\"%s\\\"\", peern->group);\n\n\t\tatrv = HEAD_PFIFO(peern->peerflags);\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tNTP_INSIST(T_Flag == atrv->attr);\n\t\t\tNTP_INSIST(T_Integer == atrv->type);\n\t\t\tfprintf(df, \" %s\", keyword(atrv->value.i));\n\t\t}\n\n\t\tfprintf(df, \"\\n\");\n\t\t\n\t\taddr_opts = HEAD_PFIFO(ptree->fudge);\n\t\tfor ( ; addr_opts != NULL; addr_opts = addr_opts->link) {\n\t\t\tpeer_addr = peern->addr;\n\t\t\tfudge_addr = addr_opts->addr;\n\n\t\t\ts1 = peer_addr->address;\n\t\t\ts2 = fudge_addr->address;\n\n\t\t\tif (strcmp(s1, s2))\n\t\t\t\tcontinue;\n\n\t\t\tfprintf(df, \"fudge %s\", s1);\n\n\t\t\tfor (atrv = HEAD_PFIFO(addr_opts->options);\n\t\t\t     atrv != NULL;\n\t\t\t     atrv = atrv->link) {\n\n\t\t\t\tswitch (atrv->type) {\n#ifdef DEBUG\n\t\t\t\tdefault:\n\t\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\t\"# unknown fudge atrv->type %d\\n\"\n\t\t\t\t\t\t\"fudge %s\", atrv->type,\n\t\t\t\t\t\ts1);\n\t\t\t\t\tbreak;\n#endif\n\t\t\t\tcase T_Double:\n\t\t\t\t\tfprintf(df, \" %s %s\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tnormal_dtoa(atrv->value.d));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Integer:\n\t\t\t\t\tfprintf(df, \" %s %d\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tatrv->value.i);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_String:\n\t\t\t\t\tfprintf(df, \" %s %s\",\n\t\t\t\t\t\tkeyword(atrv->attr),\n\t\t\t\t\t\tatrv->value.s);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfprintf(df, \"\\n\");\n\t\t}\n\t}\n\n\taddr = HEAD_PFIFO(ptree->manycastserver);\n\tif (addr != NULL) {\n\t\tfprintf(df, \"manycastserver\");\n\t\tfor ( ; addr != NULL; addr = addr->link)\n\t\t\tfprintf(df, \" %s\", addr->address);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\taddr = HEAD_PFIFO(ptree->multicastclient);\n\tif (addr != NULL) {\n\t\tfprintf(df, \"multicastclient\");\n\t\tfor ( ; addr != NULL; addr = addr->link)\n\t\t\tfprintf(df, \" %s\", addr->address);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\t\n\tfor (unpeern = HEAD_PFIFO(ptree->unpeers);\n\t     unpeern != NULL;\n\t     unpeern = unpeern->link)\n\t\tfprintf(df, \"unpeer %s\\n\", unpeern->addr->address);\n\n\tatrv = HEAD_PFIFO(ptree->mru_opts);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"mru\");\n\t\tfor ( ;\tatrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s %d\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->discard_opts);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"discard\");\n\t\tfor ( ;\tatrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s %d\", keyword(atrv->attr),\n\t\t\t\tatrv->value.i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\t\n\tfor (rest_node = HEAD_PFIFO(ptree->restrict_opts);\n\t     rest_node != NULL; \n\t     rest_node = rest_node->link) {\n\n\t\tif (NULL == rest_node->addr) {\n\t\t\ts = \"default\";\t\t\t\n\t\t\tflags = HEAD_PFIFO(rest_node->flags);\n\t\t\tfor ( ; flags != NULL; flags = flags->link)\n\t\t\t\tif (T_Source == flags->i) {\n\t\t\t\t\ts = \"source\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t} else {\n\t\t\ts = rest_node->addr->address;\n\t\t}\n\t\tfprintf(df, \"restrict %s\", s);\n\t\tif (rest_node->mask != NULL)\n\t\t\tfprintf(df, \" mask %s\",\n\t\t\t\trest_node->mask->address);\n\t\tflags = HEAD_PFIFO(rest_node->flags);\n\t\tfor ( ; flags != NULL; flags = flags->link)\n\t\t\tif (T_Source != flags->i)\n\t\t\t\tfprintf(df, \" %s\", keyword(flags->i));\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\trule_node = HEAD_PFIFO(ptree->nic_rules);\n\tfor ( ; rule_node != NULL; rule_node = rule_node->link) {\n\t\tfprintf(df, \"interface %s %s\\n\",\n\t\t\tkeyword(rule_node->action),\n\t\t\t(rule_node->match_class)\n\t\t\t    ? keyword(rule_node->match_class)\n\t\t\t    : rule_node->if_name);\n\t}\n\n\tstr_node = HEAD_PFIFO(ptree->phone);\n\tif (str_node != NULL) {\n\t\tfprintf(df, \"phone\");\n\t\tfor ( ; str_node != NULL; str_node = str_node->link)\n\t\t\tfprintf(df, \" \\\"%s\\\"\", str_node->s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tatrv = HEAD_PFIFO(ptree->qos);\n\tif (atrv != NULL) {\n\t\tfprintf(df, \"qos\");\n\t\tfor (; atrv != NULL; atrv = atrv->link)\n\t\t\tfprintf(df, \" %s\", atrv->value.s);\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\tsetv_node = HEAD_PFIFO(ptree->setvar);\n\tfor ( ; setv_node != NULL; setv_node = setv_node->link) {\n\t\ts1 = quote_if_needed(setv_node->var);\n\t\ts2 = quote_if_needed(setv_node->val);\n\t\tfprintf(df, \"setvar %s = %s\", s1, s2);\n\t\tfree(s1);\n\t\tfree(s2);\n\t\tif (setv_node->isdefault)\n\t\t\tfprintf(df, \" default\");\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\ti_n = HEAD_PFIFO(ptree->ttl);\n\tif (i_n != NULL) {\n\t\tfprintf(df, \"ttl\");\n\t\tfor( ; i_n != NULL; i_n = i_n->link)\n\t\t\tfprintf(df, \" %d\", i_n->i);\n\t\tfprintf(df, \"\\n\");\n\t}\n\t\n\taddr_opts = HEAD_PFIFO(ptree->trap);\n\tfor ( ; addr_opts != NULL; addr_opts = addr_opts->link) {\n\t\taddr = addr_opts->addr;\n\t\tfprintf(df, \"trap %s\", addr->address);\n\t\tatrv = HEAD_PFIFO(addr_opts->options);\n\t\tfor ( ; atrv != NULL; atrv = atrv->link) {\n\t\t\tswitch (atrv->attr) {\n#ifdef DEBUG\n\t\t\tdefault:\n\t\t\t\tfprintf(df, \"\\n# dump error:\\n\"\n\t\t\t\t\t\"# unknown trap token %d\\n\"\n\t\t\t\t\t\"trap %s\", atrv->attr,\n\t\t\t\t\taddr->address);\n\t\t\t\tbreak;\n#endif\n\t\t\tcase T_Port:\n\t\t\t\tfprintf(df, \" port %d\", atrv->value.i);\n\t\t\t\tbreak;\n\n\t\t\tcase T_Interface:\n\t\t\t\tfprintf(df, \" interface %s\",\n\t\t\t\t\tatrv->value.s);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfprintf(df, \"\\n\");\n\t}\n\n\treturn 0;\n}\n#endif\t/* SAVECONFIG */\n\t\n\n\n/* generic fifo routines for structs linked by 1st member */\nvoid *\nappend_gen_fifo(\n\tvoid *fifo,\n\tvoid *entry\n\t)\n{\n\tgen_fifo *pf;\n\tgen_node *pe;\n\n\tpf = fifo;\n\tpe = entry;\n\tif (NULL == pf)\n\t\tpf = emalloc_zero(sizeof(*pf));\n\tif (pe != NULL)\n\t\tLINK_FIFO(*pf, pe, link);\n\n\treturn pf;\n}\n\n\nvoid *\nconcat_gen_fifos(\n\tvoid *first,\n\tvoid *second\n\t)\n{\n\tgen_fifo *pf1;\n\tgen_fifo *pf2;\n\n\tpf1 = first;\n\tpf2 = second;\n\tif (NULL == pf1)\n\t\treturn pf2;\n\telse if (NULL == pf2)\n\t\treturn pf1;\n\n\tCONCAT_FIFO(*pf1, *pf2, link);\n\tfree(pf2);\n\n\treturn pf1;\n}\n\n\n/* FUNCTIONS FOR CREATING NODES ON THE SYNTAX TREE\n * -----------------------------------------------\n */\n\nattr_val *\ncreate_attr_dval(\n\tint attr,\n\tdouble value\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.d = value;\n\tmy_val->type = T_Double;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_ival(\n\tint attr,\n\tint value\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.i = value;\n\tmy_val->type = T_Integer;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_rangeval(\n\tint\tattr,\n\tint\tfirst,\n\tint\tlast\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tmy_val->value.r.first = first;\n\tmy_val->value.r.last = last;\n\tmy_val->type = T_Intrange;\n\n\treturn my_val;\n}\n\n\nattr_val *\ncreate_attr_sval(\n\tint attr,\n\tchar *s\n\t)\n{\n\tattr_val *my_val;\n\n\tmy_val = emalloc_zero(sizeof(*my_val));\n\tmy_val->attr = attr;\n\tif (NULL == s)\t\t\t/* free() hates NULL */\n\t\ts = estrdup(\"\");\n\tmy_val->value.s = s;\n\tmy_val->type = T_String;\n\n\treturn my_val;\n}\n\n\nint_node *\ncreate_int_node(\n\tint val\n\t)\n{\n\tint_node *i_n;\n\t\n\ti_n = emalloc_zero(sizeof(*i_n));\n\ti_n->i = val;\n\n\treturn i_n;\n}\n\n\nstring_node *\ncreate_string_node(\n\tchar *str\n\t)\n{\n\tstring_node *sn;\n\t\n\tsn = emalloc_zero(sizeof(*sn));\n\tsn->s = str;\n\n\treturn sn;\n}\n\n\naddress_node *\ncreate_address_node(\n\tchar *\taddr,\n\tint\ttype\n\t)\n{\n\taddress_node *my_node;\n\n\tNTP_REQUIRE(NULL != addr);\n\tNTP_REQUIRE(AF_INET == type || \n\t\t    AF_INET6 == type || AF_UNSPEC == type);\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->address = addr;\n\tmy_node->type = (u_short)type;\n\n\treturn my_node;\n}\n\n\nvoid\ndestroy_address_node(\n\taddress_node *my_node\n\t)\n{\n\tif (NULL == my_node)\n\t\treturn;\n\tNTP_REQUIRE(NULL != my_node->address);\n\n\tfree(my_node->address);\n\tfree(my_node);\n}\n\n\npeer_node *\ncreate_peer_node(\n\tint\t\thmode,\n\taddress_node *\taddr,\n\tattr_val_fifo *\toptions\n\t)\n{\n\tpeer_node *my_node;\n\tattr_val *option;\n\tint freenode;\n\tint errflag = 0;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\n\t/* Initialize node values to default */\n\tmy_node->peerversion = NTP_VERSION;\n\n\t/* Now set the node to the read values */\n\tmy_node->host_mode = hmode;\n\tmy_node->addr = addr;\n\n\t/*\n\t * the options FIFO mixes items that will be saved in the\n\t * peer_node as explicit members, such as minpoll, and\n\t * those that are moved intact to the peer_node's peerflags\n\t * FIFO.  The options FIFO is consumed and reclaimed here.\n\t */\n\n\twhile (options != NULL) {\n\t\tUNLINK_FIFO(option, *options, link);\n\t\tif (NULL == option) {\n\t\t\tfree(options);\n\t\t\tbreak;\n\t\t}\n\n\t\tfreenode = 1;\n\t\t/* Check the kind of option being set */\n\t\tswitch (option->attr) {\n\n\t\tcase T_Flag:\n\t\t\tAPPEND_G_FIFO(my_node->peerflags, option);\n\t\t\tfreenode = 0;\n\t\t\tbreak;\n\n\t\tcase T_Minpoll:\n\t\t\tif (option->value.i < NTP_MINPOLL ||\n\t\t\t    option->value.i > UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\t\"minpoll: provided value (%d) is out of range [%d-%d])\",\n\t\t\t\t\toption->value.i, NTP_MINPOLL,\n\t\t\t\t\tUCHAR_MAX);\n\t\t\t\tmy_node->minpoll = NTP_MINPOLL;\n\t\t\t} else {\n\t\t\t\tmy_node->minpoll = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Maxpoll:\n\t\t\tif (option->value.i < 0 ||\n\t\t\t    option->value.i > NTP_MAXPOLL) {\n\t\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\t\"maxpoll: provided value (%d) is out of range [0-%d])\",\n\t\t\t\t\toption->value.i, NTP_MAXPOLL);\n\t\t\t\tmy_node->maxpoll = NTP_MAXPOLL;\n\t\t\t} else {\n\t\t\t\tmy_node->maxpoll = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Ttl:\n\t\t\tif (option->value.u >= MAX_TTL) {\n\t\t\t\tmsyslog(LOG_ERR, \"ttl: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->ttl = (u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Mode:\n\t\t\tif (option->value.u >= UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"mode: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->ttl = (u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Key:\n\t\t\tif (option->value.u >= KEYID_T_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"key: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->peerkey = \n\t\t\t\t\t(keyid_t)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Version:\n\t\t\tif (option->value.u >= UCHAR_MAX) {\n\t\t\t\tmsyslog(LOG_ERR, \"version: invalid argument\");\n\t\t\t\terrflag = 1;\n\t\t\t} else {\n\t\t\t\tmy_node->peerversion = \n\t\t\t\t\t(u_char)option->value.u;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\tmy_node->group = option->value.s;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\"Unknown peer/server option token %s\",\n\t\t\t\ttoken_name(option->attr));\n\t\t\terrflag = 1;\n\t\t}\n\t\tif (freenode)\n\t\t\tfree(option);\n\t}\n\n\t/* Check if errors were reported. If yes, ignore the node */\n\tif (errflag) {\n\t\tfree(my_node);\n\t\tmy_node = NULL;\n\t}\n\n\treturn my_node;\n}\n\n\nunpeer_node *\ncreate_unpeer_node(\n\taddress_node *addr\n\t)\n{\n\tunpeer_node *\tmy_node;\n\tu_int\t\tu;\n\tchar *\t\tpch;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\n\t/*\n\t * From the parser's perspective an association ID fits into\n\t * its generic T_String definition of a name/address \"address\".\n\t * We treat all valid 16-bit numbers as association IDs.\n\t */\n\tpch = addr->address;\n\twhile (*pch && isdigit(*pch))\n\t\tpch++;\n\n\tif (!*pch \n\t    && 1 == sscanf(addr->address, \"%u\", &u)\n\t    && u <= ASSOCID_MAX) {\n\t\tmy_node->assocID = (associd_t)u;\n\t\tdestroy_address_node(addr);\n\t\tmy_node->addr = NULL;\n\t} else {\n\t\tmy_node->assocID = 0;\n\t\tmy_node->addr = addr;\n\t}\n\n\treturn my_node;\n}\n\nfilegen_node *\ncreate_filegen_node(\n\tint\t\tfilegen_token,\n\tattr_val_fifo *\toptions\n\t)\n{\n\tfilegen_node *my_node;\n\t\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->filegen_token = filegen_token;\n\tmy_node->options = options;\n\n\treturn my_node;\n}\n\n\nrestrict_node *\ncreate_restrict_node(\n\taddress_node *\taddr,\n\taddress_node *\tmask,\n\tint_fifo *\tflags,\n\tint\t\tline_no\n\t)\n{\n\trestrict_node *my_node;\n\t\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->addr = addr;\n\tmy_node->mask = mask;\n\tmy_node->flags = flags;\n\tmy_node->line_no = line_no;\n\n\treturn my_node;\n}\n\n\nstatic void\ndestroy_restrict_node(\n\trestrict_node *my_node\n\t)\n{\n\t/* With great care, free all the memory occupied by\n\t * the restrict node\n\t */\n\tdestroy_address_node(my_node->addr);\n\tdestroy_address_node(my_node->mask);\n\tdestroy_int_fifo(my_node->flags);\n\tfree(my_node);\n}\n\n\nstatic void\ndestroy_int_fifo(\n\tint_fifo *\tfifo\n\t)\n{\n\tint_node *\ti_n;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(i_n, *fifo, link);\n\t\t\tif (i_n != NULL)\n\t\t\t\tfree(i_n);\n\t\t} while (i_n != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_string_fifo(\n\tstring_fifo *\tfifo\n\t)\n{\n\tstring_node *\tsn;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(sn, *fifo, link);\n\t\t\tif (sn != NULL) {\n\t\t\t\tif (sn->s != NULL)\n\t\t\t\t\tfree(sn->s);\n\t\t\t\tfree(sn);\n\t\t\t}\n\t\t} while (sn != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_attr_val_fifo(\n\tattr_val_fifo *\tav_fifo\n\t)\n{\n\tattr_val *\tav;\n\n\tif (av_fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(av, *av_fifo, link);\n\t\t\tif (av != NULL) {\n\t\t\t\tif (T_String == av->type)\n\t\t\t\t\tfree(av->value.s);\n\t\t\t\tfree(av);\n\t\t\t}\n\t\t} while (av != NULL);\n\t\tfree(av_fifo);\n\t}\n}\n\n\nstatic void\ndestroy_filegen_fifo(\n\tfilegen_fifo *\tfifo\n\t)\n{\n\tfilegen_node *\tfg;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(fg, *fifo, link);\n\t\t\tif (fg != NULL) {\n\t\t\t\tdestroy_attr_val_fifo(fg->options);\n\t\t\t\tfree(fg);\n\t\t\t}\n\t\t} while (fg != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_restrict_fifo(\n\trestrict_fifo *\tfifo\n\t)\n{\n\trestrict_node *\trn;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(rn, *fifo, link);\n\t\t\tif (rn != NULL)\n\t\t\t\tdestroy_restrict_node(rn);\n\t\t} while (rn != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_setvar_fifo(\n\tsetvar_fifo *\tfifo\n\t)\n{\n\tsetvar_node *\tsv;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(sv, *fifo, link);\n\t\t\tif (sv != NULL) {\n\t\t\t\tfree(sv->var);\n\t\t\t\tfree(sv->val);\n\t\t\t\tfree(sv);\n\t\t\t}\n\t\t} while (sv != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nstatic void\ndestroy_addr_opts_fifo(\n\taddr_opts_fifo *\tfifo\n\t)\n{\n\taddr_opts_node *\taon;\n\n\tif (fifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(aon, *fifo, link);\n\t\t\tif (aon != NULL) {\n\t\t\t\tdestroy_address_node(aon->addr);\n\t\t\t\tdestroy_attr_val_fifo(aon->options);\n\t\t\t\tfree(aon);\n\t\t\t}\n\t\t} while (aon != NULL);\n\t\tfree(fifo);\n\t}\n}\n\n\nsetvar_node *\ncreate_setvar_node(\n\tchar *\tvar,\n\tchar *\tval,\n\tint\tisdefault\n\t)\n{\n\tsetvar_node *\tmy_node;\n\tchar *\t\tpch;\n\n\t/* do not allow = in the variable name */\n\tpch = strchr(var, '=');\n\tif (NULL != pch)\n\t\t*pch = '\\0';\n\n\t/* Now store the string into a setvar_node */\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->var = var;\n\tmy_node->val = val;\n\tmy_node->isdefault = isdefault;\n\n\treturn my_node;\n}\n\n\nnic_rule_node *\ncreate_nic_rule_node(\n\tint match_class,\n\tchar *if_name,\t/* interface name or numeric address */\n\tint action\n\t)\n{\n\tnic_rule_node *my_node;\n\t\n\tNTP_REQUIRE(match_class != 0 || if_name != NULL);\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->match_class = match_class;\n\tmy_node->if_name = if_name;\n\tmy_node->action = action;\n\n\treturn my_node;\n}\n\n\naddr_opts_node *\ncreate_addr_opts_node(\n\taddress_node *\taddr,\n\tattr_val_fifo *\toptions\n\t)\n{\n\taddr_opts_node *my_node;\n\n\tmy_node = emalloc_zero(sizeof(*my_node));\n\tmy_node->addr = addr;\n\tmy_node->options = options;\n\n\treturn my_node;\n}\n\n\nscript_info *\ncreate_sim_script_info(\n\tdouble\t\tduration,\n\tattr_val_fifo *\tscript_queue\n\t)\n{\n#ifndef SIM\n\treturn NULL;\n#else\t/* SIM follows */\n\tscript_info *my_info;\n\tattr_val *my_attr_val;\n\n\tmy_info = emalloc_zero(sizeof(*my_info));\n\n\t/* Initialize Script Info with default values*/\n\tmy_info->duration = duration;\n\tmy_info->prop_delay = NET_DLY;\n\tmy_info->proc_delay = PROC_DLY;\n\n\t/* Traverse the script_queue and fill out non-default values */\n\t\n\tfor (my_attr_val = HEAD_PFIFO(script_queue);\n\t     my_attr_val != NULL;\n\t     my_attr_val = my_attr_val->link) {\n\n\t\t/* Set the desired value */\n\t\tswitch (my_attr_val->attr) {\n\n\t\tcase T_Freq_Offset:\n\t\t\tmy_info->freq_offset = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Wander:\n\t\t\tmy_info->wander = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Jitter:\n\t\t\tmy_info->jitter = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Prop_Delay:\n\t\t\tmy_info->prop_delay = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Proc_Delay:\n\t\t\tmy_info->proc_delay = my_attr_val->value.d;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR, \"Unknown script token %d\",\n\t\t\t\tmy_attr_val->attr);\n\t\t}\n\t}\n\n\treturn my_info;\n#endif\t/* SIM */\n}\n\n\n#ifdef SIM\nstatic sockaddr_u *\nget_next_address(\n\taddress_node *addr\n\t)\n{\n\tconst char addr_prefix[] = \"192.168.0.\";\n\tstatic int curr_addr_num = 1;\n#define ADDR_LENGTH 16 + 1\t/* room for 192.168.1.255 */\n\tchar addr_string[ADDR_LENGTH];\n\tsockaddr_u *final_addr;\n\tstruct addrinfo *ptr;\n\tint gai_error;\n\t\n\tfinal_addr = emalloc(sizeof(*final_addr));\n\n\tif (addr->type == T_String) {\n\t\tsnprintf(addr_string, sizeof(addr_string), \"%s%d\",\n\t\t\t addr_prefix, curr_addr_num++);\n\t\tprintf(\"Selecting ip address %s for hostname %s\\n\",\n\t\t       addr_string, addr->address);\n\t\tgai_error = getaddrinfo(addr_string, \"ntp\", NULL, &ptr);\n\t} else {\n\t\tgai_error = getaddrinfo(addr->address, \"ntp\", NULL, &ptr);\n\t}\n\n\tif (gai_error) {\n\t\tfprintf(stderr, \"ERROR!! Could not get a new address\\n\");\n\t\texit(1);\n\t}\n\tmemcpy(final_addr, ptr->ai_addr, ptr->ai_addrlen);\n\tfprintf(stderr, \"Successful in setting ip address of simulated server to: %s\\n\",\n\t\tstoa(final_addr));\n\tfreeaddrinfo(ptr);\n\n\treturn final_addr;\n}\n#endif /* SIM */\n\n\nserver_info *\ncreate_sim_server(\n\taddress_node *\t\taddr,\n\tdouble\t\t\tserver_offset,\n\tscript_info_fifo *\tscript\n\t)\n{\n#ifndef SIM\n\treturn NULL;\n#else\t/* SIM follows */\n\tserver_info *my_info;\n\n\tmy_info = emalloc_zero(sizeof(*my_info));\n\tmy_info->server_time = server_offset;\n\tmy_info->addr = get_next_address(addr);\n\tmy_info->script = script;\n\tUNLINK_FIFO(my_info->curr_script, *my_info->script, link);\n\n\treturn my_info;\n#endif\t/* SIM */\n}\n\nsim_node *\ncreate_sim_node(\n\tattr_val_fifo *\t\tinit_opts,\n\tserver_info_fifo *\tservers\n\t)\n{\n\tsim_node *my_node;\n\t\n\tmy_node = emalloc(sizeof(*my_node));\n\tmy_node->init_opts = init_opts;\n\tmy_node->servers = servers;\n\n\treturn my_node;\n}\n\n\n\n\n/* FUNCTIONS FOR PERFORMING THE CONFIGURATION\n * ------------------------------------------\n */\n\n#ifndef SIM\nstatic void\nconfig_other_modes(\n\tconfig_tree *\tptree\n\t)\n{\n\tsockaddr_u\taddr_sock;\n\taddress_node *\taddr_node;\n\n\tif (ptree->broadcastclient)\n\t\tproto_config(PROTO_BROADCLIENT, ptree->broadcastclient,\n\t\t\t     0., NULL);\n\n\taddr_node = HEAD_PFIFO(ptree->manycastserver);\n\twhile (addr_node != NULL) {\n\t\tZERO_SOCK(&addr_sock);\n\t\tAF(&addr_sock) = addr_node->type;\n\t\tif (1 == getnetnum(addr_node->address, &addr_sock, 1,\n\t\t\t\t   t_UNK)) {\n\t\t\tproto_config(PROTO_MULTICAST_ADD,\n\t\t\t\t     0, 0., &addr_sock);\n\t\t\tsys_manycastserver = 1;\n\t\t}\n\t\taddr_node = addr_node->link;\n\t}\n\n\t/* Configure the multicast clients */\n\taddr_node = HEAD_PFIFO(ptree->multicastclient);\n\tif (addr_node != NULL) {\n\t\tdo {\n\t\t\tZERO_SOCK(&addr_sock);\n\t\t\tAF(&addr_sock) = addr_node->type;\n\t\t\tif (1 == getnetnum(addr_node->address,\n\t\t\t\t\t   &addr_sock, 1, t_UNK)) {\n\t\t\t\tproto_config(PROTO_MULTICAST_ADD, 0, 0.,\n\t\t\t\t\t     &addr_sock);\n\t\t\t}\n\t\t\taddr_node = addr_node->link;\n\t\t} while (addr_node != NULL);\n\t\tproto_config(PROTO_MULTICAST_ADD, 1, 0., NULL);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\ndestroy_address_fifo(\n\taddress_fifo *\tpfifo\n\t)\n{\n\taddress_node *\taddr_node;\n\n\tif (pfifo != NULL) {\n\t\tdo {\n\t\t\tUNLINK_FIFO(addr_node, *pfifo, link);\n\t\t\tif (addr_node != NULL)\n\t\t\t\tdestroy_address_node(addr_node);\n\t\t} while (addr_node != NULL);\n\t\tfree(pfifo);\n\t}\n}\n\n\nstatic void\nfree_config_other_modes(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDRESS_FIFO(ptree->manycastserver);\n\tFREE_ADDRESS_FIFO(ptree->multicastclient);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_auth(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_val;\n\tint\t\tfirst;\n\tint\t\tlast;\n\tint\t\ti;\n#ifdef AUTOKEY\n\tint\t\titem;\n#endif\n\n\t/* Crypto Command */\n#ifdef AUTOKEY\n\titem = -1;\t/* quiet warning */\n\tmy_val = HEAD_PFIFO(ptree->auth.crypto_cmd_list);\n\tfor (; my_val != NULL; my_val = my_val->link) {\n\t\tswitch (my_val->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Host:\n\t\t\titem = CRYPTO_CONF_PRIV;\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\titem = CRYPTO_CONF_IDENT;\n\t\t\tbreak;\n\n\t\tcase T_Pw:\n\t\t\titem = CRYPTO_CONF_PW;\n\t\t\tbreak;\n\n\t\tcase T_Randfile:\n\t\t\titem = CRYPTO_CONF_RAND;\n\t\t\tbreak;\n\n\t\tcase T_Digest:\n\t\t\titem = CRYPTO_CONF_NID;\n\t\t\tbreak;\n\t\t}\n\t\tcrypto_config(item, my_val->value.s);\n\t}\n#endif\t/* AUTOKEY */\n\n\t/* Keysdir Command */\n\tif (ptree->auth.keysdir) {\n\t\tif (keysdir != default_keysdir)\n\t\t\tfree(keysdir);\n\t\tkeysdir = estrdup(ptree->auth.keysdir);\n\t}\n\n\n\t/* ntp_signd_socket Command */\n\tif (ptree->auth.ntp_signd_socket) {\n\t\tif (ntp_signd_socket != default_ntp_signd_socket)\n\t\t\tfree(ntp_signd_socket);\n\t\tntp_signd_socket = estrdup(ptree->auth.ntp_signd_socket);\n\t}\n\n#ifdef AUTOKEY\n\tif (ptree->auth.cryptosw && !cryptosw) {\n\t\tcrypto_setup();\n\t\tcryptosw = 1;\n\t}\n#endif\t/* AUTOKEY */\n\n\t/* Keys Command */\n\tif (ptree->auth.keys)\n\t\tgetauthkeys(ptree->auth.keys);\n\n\t/* Control Key Command */\n\tif (ptree->auth.control_key)\n\t\tctl_auth_keyid = (keyid_t)ptree->auth.control_key;\n\n\t/* Requested Key Command */\n\tif (ptree->auth.request_key) {\n\t\tDPRINTF(4, (\"set info_auth_keyid to %08lx\\n\",\n\t\t\t    (u_long) ptree->auth.request_key));\n\t\tinfo_auth_keyid = (keyid_t)ptree->auth.request_key;\n\t}\n\n\t/* Trusted Key Command */\n\tmy_val = HEAD_PFIFO(ptree->auth.trusted_key_list);\n\tfor (; my_val != NULL; my_val = my_val->link) {\n\t\tif (T_Integer == my_val->type)\n\t\t\tauthtrust(my_val->value.i, 1);\n\t\telse if (T_Intrange == my_val->type) {\n\t\t\tfirst = my_val->value.r.first;\n\t\t\tlast = my_val->value.r.last;\n\t\t\tif (first > last || first < 1 || last > 65534)\n\t\t\t\tmsyslog(LOG_NOTICE,\n\t\t\t\t\t\"Ignoring invalid trustedkey range %d ... %d, min 1 max 65534.\",\n\t\t\t\t\tfirst, last);\n\t\t\telse\n\t\t\t\tfor (i = first; i <= last; i++)\n\t\t\t\t\tauthtrust((keyid_t)i, 1);\n\t\t}\n\t}\n\n#ifdef AUTOKEY\n\t/* crypto revoke command */\n\tif (ptree->auth.revoke)\n\t\tsys_revoke = 1 << ptree->auth.revoke;\n#endif\t/* AUTOKEY */\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_auth(\n\tconfig_tree *ptree\n\t)\n{\n\tdestroy_attr_val_fifo(ptree->auth.crypto_cmd_list);\n\tptree->auth.crypto_cmd_list = NULL;\n\tdestroy_attr_val_fifo(ptree->auth.trusted_key_list);\n\tptree->auth.trusted_key_list = NULL;\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_tos(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *tos;\n\tint item;\n\n\titem = -1;\t/* quiet warning */\n\ttos = HEAD_PFIFO(ptree->orphan_cmds);\n\tfor (; tos != NULL; tos = tos->link) {\n\t\tswitch(tos->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Ceiling:\n\t\t\titem = PROTO_CEILING;\n\t\t\tbreak;\n\n\t\tcase T_Floor:\n\t\t\titem = PROTO_FLOOR;\n\t\t\tbreak;\n\n\t\tcase T_Cohort:\n\t\t\titem = PROTO_COHORT;\n\t\t\tbreak;\n\n\t\tcase T_Orphan:\n\t\t\titem = PROTO_ORPHAN;\n\t\t\tbreak;\n\n\t\tcase T_Orphanwait:\n\t\t\titem = PROTO_ORPHWAIT;\n\t\t\tbreak;\n\n\t\tcase T_Mindist:\n\t\t\titem = PROTO_MINDISP;\n\t\t\tbreak;\n\n\t\tcase T_Maxdist:\n\t\t\titem = PROTO_MAXDIST;\n\t\t\tbreak;\n\n\t\tcase T_Minclock:\n\t\t\titem = PROTO_MINCLOCK;\n\t\t\tbreak;\n\n\t\tcase T_Maxclock:\n\t\t\titem = PROTO_MAXCLOCK;\n\t\t\tbreak;\n\n\t\tcase T_Minsane:\n\t\t\titem = PROTO_MINSANE;\n\t\t\tbreak;\n\n\t\tcase T_Beacon:\n\t\t\titem = PROTO_BEACON;\n\t\t\tbreak;\n\t\t}\n\t\tproto_config(item, 0, tos->value.d, NULL);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_tos(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->orphan_cmds);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_monitor(\n\tconfig_tree *ptree\n\t)\n{\n\tint_node *pfilegen_token;\n\tconst char *filegen_string;\n\tconst char *filegen_file;\n\tFILEGEN *filegen;\n\tfilegen_node *my_node;\n\tattr_val *my_opts;\n\tint filegen_type;\n\tint filegen_flag;\n\n\t/* Set the statistics directory */\n\tif (ptree->stats_dir)\n\t\tstats_config(STATS_STATSDIR, ptree->stats_dir);\n\n\t/* NOTE:\n\t * Calling filegen_get is brain dead. Doing a string\n\t * comparison to find the relavant filegen structure is\n\t * expensive.\n\t *\n\t * Through the parser, we already know which filegen is\n\t * being specified. Hence, we should either store a\n\t * pointer to the specified structure in the syntax tree\n\t * or an index into a filegen array.\n\t *\n\t * Need to change the filegen code to reflect the above.\n\t */\n\n\t/* Turn on the specified statistics */\n\tpfilegen_token = HEAD_PFIFO(ptree->stats_list);\n\tfor (; pfilegen_token != NULL; pfilegen_token = pfilegen_token->link) {\n\t\tfilegen_string = keyword(pfilegen_token->i);\n\t\tfilegen = filegen_get(filegen_string);\n\t\tif (NULL == filegen) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"stats %s unrecognized\",\n\t\t\t\tfilegen_string);\n\t\t\tcontinue;\n\t\t}\n\t\tDPRINTF(4, (\"enabling filegen for %s statistics '%s%s'\\n\",\n\t\t\t    filegen_string, filegen->prefix, \n\t\t\t    filegen->basename));\n\t\tfilegen->flag |= FGEN_FLAG_ENABLED;\n\t}\n\n\t/* Configure the statistics with the options */\n\tmy_node = HEAD_PFIFO(ptree->filegen_opts);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\tfilegen_file = keyword(my_node->filegen_token);\n\t\tfilegen = filegen_get(filegen_file);\n\t\tif (NULL == filegen) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"filegen category '%s' unrecognized\",\n\t\t\t\tfilegen_file);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Initialize the filegen variables to their pre-configuration states */\n\t\tfilegen_flag = filegen->flag;\n\t\tfilegen_type = filegen->type;\n\n\t\t/* \"filegen ... enabled\" is the default (when filegen is used) */\n\t\tfilegen_flag |= FGEN_FLAG_ENABLED;\n\n\t\tmy_opts = HEAD_PFIFO(my_node->options);\n\t\tfor (; my_opts != NULL; my_opts = my_opts->link) {\n\t\t\tswitch (my_opts->attr) {\n\n\t\t\tcase T_File:\n\t\t\t\tfilegen_file = my_opts->value.s;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Type:\n\t\t\t\tswitch (my_opts->value.i) {\n\n\t\t\t\tdefault:\n\t\t\t\t\tNTP_INSIST(0);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_None:\n\t\t\t\t\tfilegen_type = FILEGEN_NONE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Pid:\n\t\t\t\t\tfilegen_type = FILEGEN_PID;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Day:\n\t\t\t\t\tfilegen_type = FILEGEN_DAY;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Week:\n\t\t\t\t\tfilegen_type = FILEGEN_WEEK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Month:\n\t\t\t\t\tfilegen_type = FILEGEN_MONTH;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Year:\n\t\t\t\t\tfilegen_type = FILEGEN_YEAR;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Age:\n\t\t\t\t\tfilegen_type = FILEGEN_AGE;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag:\n\t\t\t\tswitch (my_opts->value.i) {\n\n\t\t\t\tcase T_Link:\n\t\t\t\t\tfilegen_flag |= FGEN_FLAG_LINK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Nolink:\n\t\t\t\t\tfilegen_flag &= ~FGEN_FLAG_LINK;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Enable:\n\t\t\t\t\tfilegen_flag |= FGEN_FLAG_ENABLED;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase T_Disable:\n\t\t\t\t\tfilegen_flag &= ~FGEN_FLAG_ENABLED;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\t\t\"Unknown filegen flag token %d\",\n\t\t\t\t\t\tmy_opts->value.i);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Unknown filegen option token %d\",\n\t\t\t\t\tmy_opts->attr);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\tfilegen_config(filegen, filegen_file, filegen_type,\n\t\t\t       filegen_flag);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_monitor(\n\tconfig_tree *ptree\n\t)\n{\n\tif (ptree->stats_dir) {\n\t\tfree(ptree->stats_dir);\n\t\tptree->stats_dir = NULL;\n\t}\n\n\tFREE_INT_FIFO(ptree->stats_list);\n\tFREE_FILEGEN_FIFO(ptree->filegen_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_access(\n\tconfig_tree *ptree\n\t)\n{\n\tstatic int\t\twarned_signd;\n\tattr_val *\t\tmy_opt;\n\trestrict_node *\t\tmy_node;\n\tint_node *\t\tcurr_flag;\n\tsockaddr_u\t\taddr;\n\tsockaddr_u\t\tmask;\n\tstruct addrinfo\t\thints;\n\tstruct addrinfo *\tai_list;\n\tstruct addrinfo *\tpai;\n\tint\t\t\trc;\n\tint\t\t\trestrict_default;\n\tu_short\t\t\tflags;\n\tu_short\t\t\tmflags;\n\tint\t\t\trange_err;\n\tconst char *\t\tsignd_warning =\n#ifdef HAVE_NTP_SIGND\n\t    \"MS-SNTP signd operations currently block ntpd degrading service to all clients.\";\n#else\n\t    \"mssntp restrict bit ignored, this ntpd was configured without --enable-ntp-signd.\";\n#endif\n\n\t/* Configure the mru options */\n\tmy_opt = HEAD_PFIFO(ptree->mru_opts);\n\tfor (; my_opt != NULL; my_opt = my_opt->link) {\n\n\t\trange_err = FALSE;\n\n\t\tswitch (my_opt->attr) {\n\n\t\tcase T_Incalloc:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_incalloc = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Incmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_incalloc = (my_opt->value.u * 1024)\n\t\t\t\t\t\t/ sizeof(mon_entry);\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Initalloc:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_initalloc = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Initmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_initalloc = (my_opt->value.u * 1024)\n\t\t\t\t\t\t / sizeof(mon_entry);\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Mindepth:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_mindepth = my_opt->value.u;\n\t\t\telse\n\t\t\t\trange_err = TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Maxage:\n\t\t\tmru_maxage = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tcase T_Maxdepth:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_maxdepth = my_opt->value.u;\n\t\t\telse\n\t\t\t\tmru_maxdepth = UINT_MAX;\n\t\t\tbreak;\n\n\t\tcase T_Maxmem:\n\t\t\tif (0 <= my_opt->value.i)\n\t\t\t\tmru_maxdepth = my_opt->value.u * 1024 /\n\t\t\t\t\t       sizeof(mon_entry);\n\t\t\telse\n\t\t\t\tmru_maxdepth = UINT_MAX;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"Unknown mru option %s (%d)\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->attr);\n\t\t\texit(1);\n\t\t}\n\t\tif (range_err)\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"mru %s %d out of range, ignored.\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->value.i);\n\t}\n\n\t/* Configure the discard options */\n\tmy_opt = HEAD_PFIFO(ptree->discard_opts);\n\tfor (; my_opt != NULL; my_opt = my_opt->link) {\n\n\t\tswitch (my_opt->attr) {\n\n\t\tcase T_Average:\n\t\t\tif (0 <= my_opt->value.i &&\n\t\t\t    my_opt->value.i <= UCHAR_MAX)\n\t\t\t\tntp_minpoll = (u_char)my_opt->value.u;\n\t\t\telse\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"discard average %d out of range, ignored.\",\n\t\t\t\t\tmy_opt->value.i);\n\t\t\tbreak;\n\n\t\tcase T_Minimum:\n\t\t\tntp_minpkt = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tcase T_Monitor:\n\t\t\tmon_age = my_opt->value.i;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"Unknown discard option %s (%d)\",\n\t\t\t\tkeyword(my_opt->attr), my_opt->attr);\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t/* Configure the restrict options */\n\tmy_node = HEAD_PFIFO(ptree->restrict_opts);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\t/* Parse the flags */\n\t\tflags = 0;\n\t\tmflags = 0;\n\n\t\tcurr_flag = HEAD_PFIFO(my_node->flags);\n\t\tfor (; curr_flag != NULL; curr_flag = curr_flag->link) {\n\t\t\tswitch (curr_flag->i) {\n\n\t\t\tdefault:\n\t\t\t\tNTP_INSIST(0);\n\t\t\t\tbreak;\n\n\t\t\tcase T_Ntpport:\n\t\t\t\tmflags |= RESM_NTPONLY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Source:\n\t\t\t\tmflags |= RESM_SOURCE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flake:\n\t\t\t\tflags |= RES_FLAKE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Ignore:\n\t\t\t\tflags |= RES_IGNORE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Kod:\n\t\t\t\tflags |= RES_KOD;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Mssntp:\n\t\t\t\tflags |= RES_MSSNTP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Limited:\n\t\t\t\tflags |= RES_LIMITED;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Lowpriotrap:\n\t\t\t\tflags |= RES_LPTRAP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Nomodify:\n\t\t\t\tflags |= RES_NOMODIFY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Nopeer:\n\t\t\t\tflags |= RES_NOPEER;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Noquery:\n\t\t\t\tflags |= RES_NOQUERY;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Noserve:\n\t\t\t\tflags |= RES_DONTSERVE;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Notrap:\n\t\t\t\tflags |= RES_NOTRAP;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Notrust:\n\t\t\t\tflags |= RES_DONTTRUST;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Version:\n\t\t\t\tflags |= RES_VERSION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((RES_MSSNTP & flags) && !warned_signd) {\n\t\t\twarned_signd = 1;\n\t\t\tfprintf(stderr, \"%s\\n\", signd_warning);\n\t\t\tmsyslog(LOG_WARNING, signd_warning);\n\t\t}\n\n\t\tZERO_SOCK(&addr);\n\t\tai_list = NULL;\n\t\tpai = NULL;\n\t\trestrict_default = 0;\n\n\t\tif (NULL == my_node->addr) {\n\t\t\tZERO_SOCK(&mask);\n\t\t\tif (!(RESM_SOURCE & mflags)) {\n\t\t\t\t/*\n\t\t\t\t * The user specified a default rule\n\t\t\t\t * without a -4 / -6 qualifier, add to\n\t\t\t\t * both lists\n\t\t\t\t */\n\t\t\t\trestrict_default = 1;\n\t\t\t} else {\n\t\t\t\t/* apply \"restrict source ...\" */\n\t\t\t\tDPRINTF(1, (\"restrict source template mflags %x flags %x\\n\",\n\t\t\t\t\tmflags, flags));\n\t\t\t\thack_restrict(RESTRICT_FLAGS, NULL,\n\t\t\t\t\t      NULL, mflags, flags, 0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} else {\n\t\t\t/* Resolve the specified address */\n\t\t\tAF(&addr) = (u_short)my_node->addr->type;\n\n\t\t\tif (getnetnum(my_node->addr->address,\n\t\t\t\t      &addr, 1, t_UNK) != 1) {\n\t\t\t\t/*\n\t\t\t\t * Attempt a blocking lookup.  This\n\t\t\t\t * is in violation of the nonblocking\n\t\t\t\t * design of ntpd's mainline code.  The\n\t\t\t\t * alternative of running without the\n\t\t\t\t * restriction until the name resolved\n\t\t\t\t * seems worse.\n\t\t\t\t * Ideally some scheme could be used for\n\t\t\t\t * restrict directives in the startup\n\t\t\t\t * ntp.conf to delay starting up the\n\t\t\t\t * protocol machinery until after all\n\t\t\t\t * restrict hosts have been resolved.\n\t\t\t\t */\n\t\t\t\tai_list = NULL;\n\t\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\t\thints.ai_protocol = IPPROTO_UDP;\n\t\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\t\thints.ai_family = my_node->addr->type;\n\t\t\t\trc = getaddrinfo(my_node->addr->address,\n\t\t\t\t\t\t \"ntp\", &hints,\n\t\t\t\t\t\t &ai_list);\n\t\t\t\tif (rc) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"restrict: ignoring line %d, address/host '%s' unusable.\",\n\t\t\t\t\t\tmy_node->line_no,\n\t\t\t\t\t\tmy_node->addr->address);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNTP_INSIST(ai_list != NULL);\n\t\t\t\tpai = ai_list;\n\t\t\t\tNTP_INSIST(pai->ai_addr != NULL);\n\t\t\t\tNTP_INSIST(sizeof(addr) >=\n\t\t\t\t\t   pai->ai_addrlen);\n\t\t\t\tmemcpy(&addr, pai->ai_addr,\n\t\t\t\t       pai->ai_addrlen);\n\t\t\t\tNTP_INSIST(AF_INET == AF(&addr) ||\n\t\t\t\t\t   AF_INET6 == AF(&addr));\n\t\t\t}\n\n\t\t\tSET_HOSTMASK(&mask, AF(&addr));\n\n\t\t\t/* Resolve the mask */\n\t\t\tif (my_node->mask) {\n\t\t\t\tZERO_SOCK(&mask);\n\t\t\t\tAF(&mask) = my_node->mask->type;\n\t\t\t\tif (getnetnum(my_node->mask->address,\n\t\t\t\t\t      &mask, 1, t_MSK) != 1) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"restrict: ignoring line %d, mask '%s' unusable.\",\n\t\t\t\t\t\tmy_node->line_no,\n\t\t\t\t\t\tmy_node->mask->address);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Set the flags */\n\t\tif (restrict_default) {\n\t\t\tAF(&addr) = AF_INET;\n\t\t\tAF(&mask) = AF_INET;\n\t\t\thack_restrict(RESTRICT_FLAGS, &addr,\n\t\t\t\t      &mask, mflags, flags, 0);\n\t\t\tAF(&addr) = AF_INET6;\n\t\t\tAF(&mask) = AF_INET6;\n\t\t}\n\n\t\tdo {\n\t\t\thack_restrict(RESTRICT_FLAGS, &addr,\n\t\t\t\t      &mask, mflags, flags, 0);\n\t\t\tif (pai != NULL &&\n\t\t\t    NULL != (pai = pai->ai_next)) {\n\t\t\t\tNTP_INSIST(pai->ai_addr != NULL);\n\t\t\t\tNTP_INSIST(sizeof(addr) >=\n\t\t\t\t\t   pai->ai_addrlen);\n\t\t\t\tZERO_SOCK(&addr);\n\t\t\t\tmemcpy(&addr, pai->ai_addr,\n\t\t\t\t       pai->ai_addrlen);\n\t\t\t\tNTP_INSIST(AF_INET == AF(&addr) ||\n\t\t\t\t\t   AF_INET6 == AF(&addr));\n\t\t\t\tSET_HOSTMASK(&mask, AF(&addr));\n\t\t\t}\n\t\t} while (pai != NULL);\n\n\t\tif (ai_list != NULL)\n\t\t\tfreeaddrinfo(ai_list);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_access(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->mru_opts);\n\tFREE_ATTR_VAL_FIFO(ptree->discard_opts);\n\tFREE_RESTRICT_FIFO(ptree->restrict_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_tinker(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\ttinker;\n\tint\t\titem;\n\n\titem = -1;\t/* quiet warning */\n\ttinker = HEAD_PFIFO(ptree->tinker);\n\tfor (; tinker != NULL; tinker = tinker->link) {\n\t\tswitch (tinker->attr) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Allan:\n\t\t\titem = LOOP_ALLAN;\n\t\t\tbreak;\n\n\t\tcase T_Dispersion:\n\t\t\titem = LOOP_PHI;\n\t\t\tbreak;\n\n\t\tcase T_Freq:\n\t\t\titem = LOOP_FREQ;\n\t\t\tbreak;\n\n\t\tcase T_Huffpuff:\n\t\t\titem = LOOP_HUFFPUFF;\n\t\t\tbreak;\n\n\t\tcase T_Panic:\n\t\t\titem = LOOP_PANIC;\n\t\t\tbreak;\n\n\t\tcase T_Step:\n\t\t\titem = LOOP_MAX;\n\t\t\tbreak;\n\n\t\tcase T_Stepout:\n\t\t\titem = LOOP_MINSTEP;\n\t\t\tbreak;\n\t\t}\n\t\tloop_config(item, tinker->value.d);\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_tinker(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->tinker);\n}\n#endif\t/* FREE_CFG_T */\n\n\n/*\n * config_nic_rules - apply interface listen/ignore/drop items\n */\n#ifndef SIM\nvoid\nconfig_nic_rules(\n\tconfig_tree *ptree\n\t)\n{\n\tnic_rule_node *\tcurr_node;\n\tsockaddr_u\taddr;\n\tnic_rule_match\tmatch_type;\n\tnic_rule_action\taction;\n\tchar *\t\tif_name;\n\tchar *\t\tpchSlash;\n\tint\t\tprefixlen;\n\tint\t\taddrbits;\n\n\tcurr_node = HEAD_PFIFO(ptree->nic_rules);\n\n\tif (curr_node != NULL\n\t    && (HAVE_OPT( NOVIRTUALIPS ) || HAVE_OPT( INTERFACE ))) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"interface/nic rules are not allowed with --interface (-I) or --novirtualips (-L)%s\",\n\t\t\t(input_from_file) ? \", exiting\" : \"\");\n\t\tif (input_from_file)\n\t\t\texit(1);\n\t\telse\n\t\t\treturn;\n\t}\n\n\tfor (; curr_node != NULL; curr_node = curr_node->link) {\n\t\tprefixlen = -1;\n\t\tif_name = curr_node->if_name;\n\t\tif (if_name != NULL)\n\t\t\tif_name = estrdup(if_name);\n\n\t\tswitch (curr_node->match_class) {\n\n\t\tdefault:\n\t\t\t/*\n\t\t\t * this assignment quiets a gcc \"may be used\n\t\t\t * uninitialized\" warning and is here for no\n\t\t\t * other reason.\n\t\t\t */\n\t\t\tmatch_type = MATCH_ALL;\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase 0:\n\t\t\t/*\n\t\t\t * 0 is out of range for valid token T_...\n\t\t\t * and in a nic_rules_node indicates the\n\t\t\t * interface descriptor is either a name or\n\t\t\t * address, stored in if_name in either case.\n\t\t\t */\n\t\t\tNTP_INSIST(if_name != NULL);\n\t\t\tpchSlash = strchr(if_name, '/');\n\t\t\tif (pchSlash != NULL)\n\t\t\t\t*pchSlash = '\\0';\n\t\t\tif (is_ip_address(if_name, AF_UNSPEC, &addr)) {\n\t\t\t\tmatch_type = MATCH_IFADDR;\n\t\t\t\tif (pchSlash != NULL) {\n\t\t\t\t\tsscanf(pchSlash + 1, \"%d\",\n\t\t\t\t\t    &prefixlen);\n\t\t\t\t\taddrbits = 8 *\n\t\t\t\t\t    SIZEOF_INADDR(AF(&addr));\n\t\t\t\t\tprefixlen = max(-1, prefixlen);\n\t\t\t\t\tprefixlen = min(prefixlen,\n\t\t\t\t\t\t\taddrbits);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatch_type = MATCH_IFNAME;\n\t\t\t\tif (pchSlash != NULL)\n\t\t\t\t\t*pchSlash = '/';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_All:\n\t\t\tmatch_type = MATCH_ALL;\n\t\t\tbreak;\n\n\t\tcase T_Ipv4:\n\t\t\tmatch_type = MATCH_IPV4;\n\t\t\tbreak;\n\n\t\tcase T_Ipv6:\n\t\t\tmatch_type = MATCH_IPV6;\n\t\t\tbreak;\n\n\t\tcase T_Wildcard:\n\t\t\tmatch_type = MATCH_WILDCARD;\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (curr_node->action) {\n\n\t\tdefault:\n\t\t\t/*\n\t\t\t * this assignment quiets a gcc \"may be used\n\t\t\t * uninitialized\" warning and is here for no\n\t\t\t * other reason.\n\t\t\t */\n\t\t\taction = ACTION_LISTEN;\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Listen:\n\t\t\taction = ACTION_LISTEN;\n\t\t\tbreak;\n\n\t\tcase T_Ignore:\n\t\t\taction = ACTION_IGNORE;\n\t\t\tbreak;\n\n\t\tcase T_Drop:\n\t\t\taction = ACTION_DROP;\n\t\t\tbreak;\n\t\t}\n\n\t\tadd_nic_rule(match_type, if_name, prefixlen,\n\t\t\t     action);\n\t\ttimer_interfacetimeout(current_time + 2);\n\t\tif (if_name != NULL)\n\t\t\tfree(if_name);\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_nic_rules(\n\tconfig_tree *ptree\n\t)\n{\n\tnic_rule_node *curr_node;\n\n\tif (ptree->nic_rules != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_node, *ptree->nic_rules, link);\n\t\t\tif (NULL == curr_node)\n\t\t\t\tbreak;\n\t\t\tif (curr_node->if_name != NULL)\n\t\t\t\tfree(curr_node->if_name);\n\t\t\tfree(curr_node);\n\t\t}\n\t\tfree(ptree->nic_rules);\n\t\tptree->nic_rules = NULL;\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\napply_enable_disable(\n\tattr_val_fifo *\tfifo,\n\tint\t\tenable\n\t)\n{\n\tattr_val *curr_flag;\n\tint option;\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n\tbc_entry *pentry;\n#endif\n\n\tfor (curr_flag = HEAD_PFIFO(fifo);\n\t     curr_flag != NULL;\n\t     curr_flag = curr_flag->link) {\n\n\t\toption = curr_flag->value.i;\n\t\tswitch (option) {\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"can not apply enable/disable token %d, unknown\",\n\t\t\t\toption);\n\t\t\tbreak;\n\n\t\tcase T_Auth:\n\t\t\tproto_config(PROTO_AUTHENTICATE, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Bclient:\n\t\t\tproto_config(PROTO_BROADCLIENT, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Calibrate:\n\t\t\tproto_config(PROTO_CAL, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Kernel:\n\t\t\tproto_config(PROTO_KERNEL, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Monitor:\n\t\t\tproto_config(PROTO_MONITOR, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Ntp:\n\t\t\tproto_config(PROTO_NTP, enable, 0., NULL);\n\t\t\tbreak;\n\n\t\tcase T_Stats:\n\t\t\tproto_config(PROTO_FILEGEN, enable, 0., NULL);\n\t\t\tbreak;\n\n#ifdef BC_LIST_FRAMEWORK_NOT_YET_USED\n\t\tcase T_Bc_bugXXXX:\n\t\t\tpentry = bc_list;\n\t\t\twhile (pentry->token) {\n\t\t\t\tif (pentry->token == option)\n\t\t\t\t\tbreak;\n\t\t\t\tpentry++;\n\t\t\t}\n\t\t\tif (!pentry->token) {\n\t\t\t\tmsyslog(LOG_ERR, \n\t\t\t\t\t\"compat token %d not in bc_list[]\",\n\t\t\t\t\toption);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpentry->enabled = enable;\n\t\t\tbreak;\n#endif\n\t\t}\n\t}\n}\n\n\nstatic void\nconfig_system_opts(\n\tconfig_tree *ptree\n\t)\n{\n\tapply_enable_disable(ptree->enable_opts, 1);\n\tapply_enable_disable(ptree->disable_opts, 0);\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_system_opts(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->enable_opts);\n\tFREE_ATTR_VAL_FIFO(ptree->disable_opts);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_logconfig(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_lc;\n\n\tmy_lc = HEAD_PFIFO(ptree->logconfig);\n\tfor (; my_lc != NULL; my_lc = my_lc->link) {\n\t\tswitch (my_lc->attr) {\n\n\t\tcase '+':\n\t\t\tntp_syslogmask |= get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\n\t\tcase '-':\n\t\t\tntp_syslogmask &= ~get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\n\t\tcase '=':\n\t\t\tntp_syslogmask = get_logmask(my_lc->value.s);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_logconfig(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->logconfig);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_phone(\n\tconfig_tree *ptree\n\t)\n{\n\tint\t\ti;\n\tstring_node *\tsn;\n\n\ti = 0;\n\tsn = HEAD_PFIFO(ptree->phone);\n\tfor (; sn != NULL; sn = sn->link) {\n\t\t/* need to leave array entry for NULL terminator */\n\t\tif (i < COUNTOF(sys_phone) - 1) {\n\t\t\tsys_phone[i++] = estrdup(sn->s);\n\t\t\tsys_phone[i] = NULL;\n\t\t} else {\n\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\"phone: Number of phone entries exceeds %lu. Ignoring phone %s...\",\n\t\t\t\t(u_long)(COUNTOF(sys_phone) - 1), sn->s);\n\t\t}\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_phone(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_STRING_FIFO(ptree->phone);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_qos(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *\tmy_qc;\n\tchar *\t\ts;\n#ifdef HAVE_IPTOS_SUPPORT\n\tunsigned int\tqtos = 0;\n#endif\n\n\tmy_qc = HEAD_PFIFO(ptree->qos);\n\tfor (; my_qc != NULL; my_qc = my_qc->link) {\n\t\ts = my_qc->value.s;\n#ifdef HAVE_IPTOS_SUPPORT\n\t\tif (!strcmp(s, \"lowdelay\"))\n\t\t\tqtos = CONF_QOS_LOWDELAY;\n\t\telse if (!strcmp(s, \"throughput\"))\n\t\t\tqtos = CONF_QOS_THROUGHPUT;\n\t\telse if (!strcmp(s, \"reliability\"))\n\t\t\tqtos = CONF_QOS_RELIABILITY;\n\t\telse if (!strcmp(s, \"mincost\"))\n\t\t\tqtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL\n\t\telse if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\"))\n\t\t\tqtos = CONF_QOS_CS0;\n\t\telse if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\"))\n\t\t\tqtos = CONF_QOS_CS1;\n\t\telse if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\"))\n\t\t\tqtos = CONF_QOS_CS2;\n\t\telse if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\"))\n\t\t\tqtos = CONF_QOS_CS3; \t/* overlapping prefix on keyword */\n\t\tif (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\"))\n\t\t\tqtos = CONF_QOS_CS4;\n\t\telse if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\"))\n\t\t\tqtos = CONF_QOS_CS5;\n\t\telse if(!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\"))\n\t\t\tqtos = CONF_QOS_CS6;\n\t\telse if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\"))\n\t\t\tqtos = CONF_QOS_CS7;\n#endif  /* IPTOS_PREC_INTERNETCONTROL */\n\t\tif (qtos == 0)\n\t\t\tmsyslog(LOG_ERR, \"parse error, qos %s not accepted\\n\", s);\n\t\telse\n\t\t\tqos = qtos;\n#endif  /* HAVE IPTOS_SUPPORT */\n\t\t/*\n\t\t * value is set, but not being effective. Need code to\n\t\t * change   the current connections to notice. Might\n\t\t * also  consider logging a message about the action.\n\t\t * XXX msyslog(LOG_INFO, \"QoS %s requested by config\\n\", s);\n\t\t */\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_qos(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->qos);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_setvar(\n\tconfig_tree *ptree\n\t)\n{\n\tsetvar_node *my_node;\n\tsize_t\tvarlen, vallen, octets;\n\tchar *\tstr;\n\n\tstr = NULL;\n\tmy_node = HEAD_PFIFO(ptree->setvar);\n\tfor (; my_node != NULL; my_node = my_node->link) {\n\t\tvarlen = strlen(my_node->var);\n\t\tvallen = strlen(my_node->val);\n\t\toctets = varlen + vallen + 1 + 1;\n\t\tstr = erealloc(str, octets);\n\t\tsnprintf(str, octets, \"%s=%s\", my_node->var,\n\t\t\t my_node->val);\n\t\tset_sys_var(str, octets, (my_node->isdefault)\n\t\t\t\t\t\t? DEF \n\t\t\t\t\t\t: 0);\n\t}\n\tif (str != NULL)\n\t\tfree(str);\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_setvar(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_SETVAR_FIFO(ptree->setvar);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_ttl(\n\tconfig_tree *ptree\n\t)\n{\n\tint i = 0;\n\tint_node *curr_ttl;\n\n\tcurr_ttl = HEAD_PFIFO(ptree->ttl);\n\tfor (; curr_ttl != NULL; curr_ttl = curr_ttl->link) {\n\t\tif (i < COUNTOF(sys_ttl))\n\t\t\tsys_ttl[i++] = (u_char)curr_ttl->i;\n\t\telse\n\t\t\tmsyslog(LOG_INFO,\n\t\t\t\t\"ttl: Number of TTL entries exceeds %lu. Ignoring TTL %d...\",\n\t\t\t\t(u_long)COUNTOF(sys_ttl), curr_ttl->i);\n\t}\n\tsys_ttlmax = i - 1;\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_ttl(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_INT_FIFO(ptree->ttl);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_trap(\n\tconfig_tree *ptree\n\t)\n{\n\taddr_opts_node *curr_trap;\n\tattr_val *curr_opt;\n\tsockaddr_u addr_sock;\n\tsockaddr_u peeraddr;\n\tstruct interface *localaddr;\n\tstruct addrinfo hints;\n\tchar port_text[8];\n\tsettrap_parms *pstp;\n\tu_short port;\n\tint err_flag;\n\tint rc;\n\n\t/* silence warning about addr_sock potentially uninitialized */\n\tAF(&addr_sock) = AF_UNSPEC;\n\n\tcurr_trap = HEAD_PFIFO(ptree->trap);\n\tfor (; curr_trap != NULL; curr_trap = curr_trap->link) {\n\t\terr_flag = 0;\n\t\tport = 0;\n\t\tlocaladdr = NULL;\n\n\t\tcurr_opt = HEAD_PFIFO(curr_trap->options);\n\t\tfor (; curr_opt != NULL; curr_opt = curr_opt->link) {\n\t\t\tif (T_Port == curr_opt->attr) {\n\t\t\t\tif (curr_opt->value.i < 1 \n\t\t\t\t    || curr_opt->value.i > USHRT_MAX) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"invalid port number \"\n\t\t\t\t\t\t\"%d, trap ignored\", \n\t\t\t\t\t\tcurr_opt->value.i);\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t}\n\t\t\t\tport = (u_short)curr_opt->value.i;\n\t\t\t}\n\t\t\telse if (T_Interface == curr_opt->attr) {\n\t\t\t\t/* Resolve the interface address */\n\t\t\t\tZERO_SOCK(&addr_sock);\n\t\t\t\tif (getnetnum(curr_opt->value.s,\n\t\t\t\t\t      &addr_sock, 1, t_UNK) != 1) {\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlocaladdr = findinterface(&addr_sock);\n\n\t\t\t\tif (NULL == localaddr) {\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"can't find interface with address %s\",\n\t\t\t\t\t\tstoa(&addr_sock));\n\t\t\t\t\terr_flag = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Now process the trap for the specified interface\n\t\t * and port number\n\t\t */\n\t\tif (!err_flag) {\n\t\t\tif (!port)\n\t\t\t\tport = TRAPPORT;\n\t\t\tZERO_SOCK(&peeraddr);\n\t\t\trc = getnetnum(curr_trap->addr->address,\n\t\t\t\t       &peeraddr, 1, t_UNK);\n\t\t\tif (1 != rc) {\n#ifndef WORKER\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"trap: unable to use IP address %s.\",\n\t\t\t\t\tcurr_trap->addr->address);\n#else\t/* WORKER follows */\n\t\t\t\t/*\n\t\t\t\t * save context and hand it off\n\t\t\t\t * for name resolution.\n\t\t\t\t */\n\t\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\t\thints.ai_protocol = IPPROTO_UDP;\n\t\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\t\tsnprintf(port_text, sizeof(port_text),\n\t\t\t\t\t \"%u\", port);\n\t\t\t\thints.ai_flags = Z_AI_NUMERICSERV;\n\t\t\t\tpstp = emalloc_zero(sizeof(*pstp));\n\t\t\t\tif (localaddr != NULL) {\n\t\t\t\t\thints.ai_family = localaddr->family;\n\t\t\t\t\tpstp->ifaddr_nonnull = 1;\n\t\t\t\t\tmemcpy(&pstp->ifaddr,\n\t\t\t\t\t       &localaddr->sin,\n\t\t\t\t\t       sizeof(pstp->ifaddr));\n\t\t\t\t}\n\t\t\t\trc = getaddrinfo_sometime(\n\t\t\t\t\tcurr_trap->addr->address,\n\t\t\t\t\tport_text, &hints,\n\t\t\t\t\tINITIAL_DNS_RETRY,\n\t\t\t\t\t&trap_name_resolved,\n\t\t\t\t\tpstp);\n\t\t\t\tif (!rc)\n\t\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\t\"config_trap: getaddrinfo_sometime(%s,%s): %m\",\n\t\t\t\t\t\tcurr_trap->addr->address,\n\t\t\t\t\t\tport_text);\n#endif\t/* WORKER */\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* port is at same location for v4 and v6 */\n\t\t\tSET_PORT(&peeraddr, port);\n\n\t\t\tif (NULL == localaddr)\n\t\t\t\tlocaladdr = ANY_INTERFACE_CHOOSE(&peeraddr);\n\t\t\telse\n\t\t\t\tAF(&peeraddr) = AF(&addr_sock);\n\n\t\t\tif (!ctlsettrap(&peeraddr, localaddr, 0,\n\t\t\t\t\tNTP_VERSION))\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"set trap %s -> %s failed.\",\n\t\t\t\t\tlatoa(localaddr),\n\t\t\t\t\tstoa(&peeraddr));\n\t\t}\n\t}\n}\n\n\n/*\n * trap_name_resolved()\n *\n * Callback invoked when config_trap()'s DNS lookup completes.\n */\n# ifdef WORKER\nvoid\ntrap_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsettrap_parms *pstp;\n\tstruct interface *localaddr;\n\tsockaddr_u peeraddr;\n\n\tpstp = context;\n\tif (rescode) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"giving up resolving trap host %s: %s (%d)\",\n\t\t\tname, gai_strerror(rescode), rescode);\n\t\tfree(pstp);\n\t\treturn;\n\t}\n\tNTP_INSIST(sizeof(peeraddr) >= res->ai_addrlen);\n\tmemset(&peeraddr, 0, sizeof(peeraddr));\n\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\tlocaladdr = NULL;\n\tif (pstp->ifaddr_nonnull)\n\t\tlocaladdr = findinterface(&pstp->ifaddr);\n\tif (NULL == localaddr)\n\t\tlocaladdr = ANY_INTERFACE_CHOOSE(&peeraddr);\n\tif (!ctlsettrap(&peeraddr, localaddr, 0, NTP_VERSION))\n\t\tmsyslog(LOG_ERR, \"set trap %s -> %s failed.\",\n\t\t\tlatoa(localaddr), stoa(&peeraddr));\n\tfree(pstp);\n}\n# endif\t/* WORKER */\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_trap(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDR_OPTS_FIFO(ptree->trap);\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_fudge(\n\tconfig_tree *ptree\n\t)\n{\n\taddr_opts_node *curr_fudge;\n\tattr_val *curr_opt;\n\tsockaddr_u addr_sock;\n\taddress_node *addr_node;\n\tstruct refclockstat clock_stat;\n\tint err_flag;\n\n\tcurr_fudge = HEAD_PFIFO(ptree->fudge);\n\tfor (; curr_fudge != NULL; curr_fudge = curr_fudge->link) {\n\t\terr_flag = 0;\n\n\t\t/* Get the reference clock address and\n\t\t * ensure that it is sane\n\t\t */\n\t\taddr_node = curr_fudge->addr;\n\t\tZERO_SOCK(&addr_sock);\n\t\tif (getnetnum(addr_node->address, &addr_sock, 1, t_REF)\n\t\t    != 1) {\n\t\t\terr_flag = 1;\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"unrecognized fudge reference clock address %s, line ignored\",\n\t\t\t\tstoa(&addr_sock));\n\t\t}\n\n\t\tif (!ISREFCLOCKADR(&addr_sock)) {\n\t\t\terr_flag = 1;\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"inappropriate address %s for the fudge command, line ignored\",\n\t\t\t\tstoa(&addr_sock));\n\t\t}\n\n\t\t/* Parse all the options to the fudge command */\n\t\tmemset(&clock_stat, 0, sizeof(clock_stat));\n\t\tcurr_opt = HEAD_PFIFO(curr_fudge->options);\n\t\tfor (; curr_opt != NULL; curr_opt = curr_opt->link) {\n\t\t\tswitch (curr_opt->attr) {\n\n\t\t\tcase T_Time1:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVETIME1;\n\t\t\t\tclock_stat.fudgetime1 = curr_opt->value.d;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Time2:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVETIME2;\n\t\t\t\tclock_stat.fudgetime2 = curr_opt->value.d;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Stratum:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEVAL1;\n\t\t\t\tclock_stat.fudgeval1 = curr_opt->value.i;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Refid:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEVAL2;\n\t\t\t\tclock_stat.fudgeval2 = 0;\n\t\t\t\tmemcpy(&clock_stat.fudgeval2,\n\t\t\t\t       curr_opt->value.s,\n\t\t\t\t       min(strlen(curr_opt->value.s), 4));\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag1:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG1;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG1;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG1;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag2:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG2;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG2;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG2;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag3:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG3;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG3;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG3;\n\t\t\t\tbreak;\n\n\t\t\tcase T_Flag4:\n\t\t\t\tclock_stat.haveflags |= CLK_HAVEFLAG4;\n\t\t\t\tif (curr_opt->value.i)\n\t\t\t\t\tclock_stat.flags |= CLK_FLAG4;\n\t\t\t\telse\n\t\t\t\t\tclock_stat.flags &= ~CLK_FLAG4;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Unexpected fudge flag %s (%d) for %s\\n\",\n\t\t\t\t\ttoken_name(curr_opt->attr),\n\t\t\t\t\tcurr_opt->attr, stoa(&addr_sock));\n\t\t\t\texit(curr_opt->attr ? curr_opt->attr : 1);\n\t\t\t}\n\t\t}\n# ifdef REFCLOCK\n\t\tif (!err_flag)\n\t\t\trefclock_control(&addr_sock, &clock_stat, NULL);\n# endif\n\t}\n}\n#endif\t/* !SIM */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_fudge(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ADDR_OPTS_FIFO(ptree->fudge);\n}\n#endif\t/* FREE_CFG_T */\n\n\nstatic void\nconfig_vars(\n\tconfig_tree *ptree\n\t)\n{\n\tattr_val *curr_var;\n\tint len;\n\n\tcurr_var = HEAD_PFIFO(ptree->vars);\n\tfor (; curr_var != NULL; curr_var = curr_var->link) {\n\t\t/* Determine which variable to set and set it */\n\t\tswitch (curr_var->attr) {\n\n\t\tcase T_Broadcastdelay:\n\t\t\tproto_config(PROTO_BROADDELAY, 0, curr_var->value.d, NULL);\n\t\t\tbreak;\n\t\tcase T_Tick:\n\t\t\tproto_config(PROTO_ADJ, 0, curr_var->value.d, NULL);\n\t\t\tbreak;\n\n\t\tcase T_Driftfile:\n\t\t\tif ('\\0' == curr_var->value.s[0]) {\n\t\t\t\tstats_drift_file = 0;\n\t\t\t\tmsyslog(LOG_INFO, \"config: driftfile disabled\\n\");\n\t\t\t} else\n\t\t\t\tstats_config(STATS_FREQ_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Ident:\n\t\t\tsys_ident = curr_var->value.s;\n\t\t\tbreak;\n\n\t\tcase T_WanderThreshold:\t\t/* FALLTHROUGH */\n\t\tcase T_Nonvolatile:\n\t\t\twander_threshold = curr_var->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Leapfile:\n\t\t\tstats_config(STATS_LEAP_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Pidfile:\n\t\t\tstats_config(STATS_PID_FILE, curr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Logfile:\n\t\t\tif (-1 == change_logfile(curr_var->value.s, 0))\n\t\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\t\"Cannot open logfile %s: %m\",\n\t\t\t\t\tcurr_var->value.s);\n\t\t\tbreak;\n\n\t\tcase T_Saveconfigdir:\n\t\t\tif (saveconfigdir != NULL)\n\t\t\t\tfree(saveconfigdir);\n\t\t\tlen = strlen(curr_var->value.s);\n\t\t\tif (0 == len) {\n\t\t\t\tsaveconfigdir = NULL;\n\t\t\t} else if (DIR_SEP != curr_var->value.s[len - 1]\n#ifdef SYS_WINNT\t/* slash is also a dir. sep. on Windows */\n\t\t\t\t   && '/' != curr_var->value.s[len - 1]\n#endif\n\t\t\t\t ) {\n\t\t\t\t\tlen++;\n\t\t\t\t\tsaveconfigdir = emalloc(len + 1);\n\t\t\t\t\tsnprintf(saveconfigdir, len + 1,\n\t\t\t\t\t\t \"%s%c\",\n\t\t\t\t\t\t curr_var->value.s,\n\t\t\t\t\t\t DIR_SEP);\n\t\t\t} else {\n\t\t\t\t\tsaveconfigdir = estrdup(\n\t\t\t\t\t    curr_var->value.s);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase T_Automax:\n#ifdef AUTOKEY\n\t\t\tsys_automax = curr_var->value.i;\n#endif\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"config_vars(): unexpected token %d\",\n\t\t\t\tcurr_var->attr);\n\t\t}\n\t}\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_vars(\n\tconfig_tree *ptree\n\t)\n{\n\tFREE_ATTR_VAL_FIFO(ptree->vars);\n}\n#endif\t/* FREE_CFG_T */\n\n\n/* Define a function to check if a resolved address is sane.\n * If yes, return 1, else return 0;\n */\nstatic int\nis_sane_resolved_address(\n\tsockaddr_u *\tpeeraddr,\n\tint\t\thmode\n\t)\n{\n\tif (!ISREFCLOCKADR(peeraddr) && ISBADADR(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\t/*\n\t * Shouldn't be able to specify multicast\n\t * address for server/peer!\n\t * and unicast address for manycastclient!\n\t */\n\tif ((T_Server == hmode || T_Peer == hmode || T_Pool == hmode)\n\t    && IS_MCAST(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\tif (T_Manycastclient == hmode && !IS_MCAST(peeraddr)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"attempt to configure invalid address %s\",\n\t\t\tstoa(peeraddr));\n\t\treturn 0;\n\t}\n\n\tif (IS_IPV6(peeraddr) && !ipv6_works)\n\t\treturn 0;\n\n\t/* Ok, all tests succeeded, now we can return 1 */\n\treturn 1;\n}\n\n\n#ifndef SIM\nstatic u_char\nget_correct_host_mode(\n\tint token\n\t)\n{\n\tswitch (token) {\n\n\tcase T_Server:\n\tcase T_Pool:\n\tcase T_Manycastclient:\n\t\treturn MODE_CLIENT;\n\n\tcase T_Peer:\n\t\treturn MODE_ACTIVE;\n\n\tcase T_Broadcast:\n\t\treturn MODE_BROADCAST;\n\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n\n/*\n * peerflag_bits()\tget config_peers() peerflags value from a\n *\t\t\tpeer_node's queue of flag attr_val entries.\n */\nstatic int\npeerflag_bits(\n\tpeer_node *pn\n\t)\n{\n\tint peerflags;\n\tattr_val *option;\n\n\t/* translate peerflags options to bits */\n\tpeerflags = 0;\n\toption = HEAD_PFIFO(pn->peerflags);\n\tfor (; option != NULL; option = option->link) {\n\t\tswitch (option->value.i) {\n\n\t\tdefault:\n\t\t\tNTP_INSIST(0);\n\t\t\tbreak;\n\n\t\tcase T_Autokey:\n\t\t\tpeerflags |= FLAG_SKEY;\n\t\t\tbreak;\n\n\t\tcase T_Burst:\n\t\t\tpeerflags |= FLAG_BURST;\n\t\t\tbreak;\n\n\t\tcase T_Iburst:\n\t\t\tpeerflags |= FLAG_IBURST;\n\t\t\tbreak;\n\n\t\tcase T_Noselect:\n\t\t\tpeerflags |= FLAG_NOSELECT;\n\t\t\tbreak;\n\n\t\tcase T_Preempt:\n\t\t\tpeerflags |= FLAG_PREEMPT;\n\t\t\tbreak;\n\n\t\tcase T_Prefer:\n\t\t\tpeerflags |= FLAG_PREFER;\n\t\t\tbreak;\n\n\t\tcase T_True:\n\t\t\tpeerflags |= FLAG_TRUE;\n\t\t\tbreak;\n\n\t\tcase T_Xleave:\n\t\t\tpeerflags |= FLAG_XLEAVE;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn peerflags;\n}\n\n\nstatic void\nconfig_peers(\n\tconfig_tree *ptree\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tstruct addrinfo\t\thints;\n\tpeer_node *\t\tcurr_peer;\n\tpeer_resolved_ctx *\tctx;\n\tu_char\t\t\thmode;\n\n\t/* add servers named on the command line with iburst implied */\n\tfor (;\n\t     cmdline_server_count > 0;\n\t     cmdline_server_count--, cmdline_servers++) {\n\n\t\tZERO_SOCK(&peeraddr);\n\t\t/*\n\t\t * If we have a numeric address, we can safely\n\t\t * proceed in the mainline with it.  Otherwise, hand\n\t\t * the hostname off to the blocking child.\n\t\t */\n\t\tif (is_ip_address(*cmdline_servers, AF_UNSPEC,\n\t\t\t\t  &peeraddr)) {\n\n\t\t\tSET_PORT(&peeraddr, NTP_PORT);\n\t\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t\t\t\t     T_Server))\n\t\t\t\tpeer_config(\n\t\t\t\t\t&peeraddr,\n\t\t\t\t\tNULL,\n\t\t\t\t\tNULL,\n\t\t\t\t\tMODE_CLIENT,\n\t\t\t\t\tNTP_VERSION,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tFLAG_IBURST,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tNULL);\n\t\t} else {\n\t\t\t/* we have a hostname to resolve */\n# ifdef WORKER\n\t\t\tctx = emalloc_zero(sizeof(*ctx));\n\t\t\tctx->family = AF_UNSPEC;\n\t\t\tctx->host_mode = T_Server;\n\t\t\tctx->hmode = MODE_CLIENT;\n\t\t\tctx->version = NTP_VERSION;\n\t\t\tctx->flags = FLAG_IBURST;\n\n\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\thints.ai_family = (u_short)ctx->family;\n\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\thints.ai_protocol = IPPROTO_UDP;\n\n\t\t\tgetaddrinfo_sometime(*cmdline_servers,\n\t\t\t\t\t     \"ntp\", &hints,\n\t\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t\t     &peer_name_resolved,\n\t\t\t\t\t     (void *)ctx);\n# else\t/* !WORKER follows */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\t\tcurr_peer->addr->address);\n# endif\n\t\t}\n\t}\n\n\t/* add associations from the configuration file */\n\tcurr_peer = HEAD_PFIFO(ptree->peers);\n\tfor (; curr_peer != NULL; curr_peer = curr_peer->link) {\n\t\tZERO_SOCK(&peeraddr);\n\t\t/* Find the correct host-mode */\n\t\thmode = get_correct_host_mode(curr_peer->host_mode);\n\t\tNTP_INSIST(hmode != 0);\n\n\t\tif (T_Pool == curr_peer->host_mode) {\n\t\t\tAF(&peeraddr) = curr_peer->addr->type;\n\t\t\tpeer_config(\n\t\t\t\t&peeraddr,\n\t\t\t\tcurr_peer->addr->address,\n\t\t\t\tNULL,\n\t\t\t\thmode,\n\t\t\t\tcurr_peer->peerversion,\n\t\t\t\tcurr_peer->minpoll,\n\t\t\t\tcurr_peer->maxpoll,\n\t\t\t\tpeerflag_bits(curr_peer),\n\t\t\t\tcurr_peer->ttl,\n\t\t\t\tcurr_peer->peerkey,\n\t\t\t\tcurr_peer->group);\n\t\t/*\n\t\t * If we have a numeric address, we can safely\n\t\t * proceed in the mainline with it.  Otherwise, hand\n\t\t * the hostname off to the blocking child.\n\t\t */\n\t\t} else if (is_ip_address(curr_peer->addr->address,\n\t\t\t\t  curr_peer->addr->type, &peeraddr)) {\n\n\t\t\tSET_PORT(&peeraddr, NTP_PORT);\n\t\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t    curr_peer->host_mode))\n\t\t\t\tpeer_config(\n\t\t\t\t\t&peeraddr,\n\t\t\t\t\tNULL,\n\t\t\t\t\tNULL,\n\t\t\t\t\thmode,\n\t\t\t\t\tcurr_peer->peerversion,\n\t\t\t\t\tcurr_peer->minpoll,\n\t\t\t\t\tcurr_peer->maxpoll,\n\t\t\t\t\tpeerflag_bits(curr_peer),\n\t\t\t\t\tcurr_peer->ttl,\n\t\t\t\t\tcurr_peer->peerkey,\n\t\t\t\t\tcurr_peer->group);\n\t\t} else {\n\t\t\t/* we have a hostname to resolve */\n# ifdef WORKER\n\t\t\tctx = emalloc_zero(sizeof(*ctx));\n\t\t\tctx->family = curr_peer->addr->type;\n\t\t\tctx->host_mode = curr_peer->host_mode;\n\t\t\tctx->hmode = hmode;\n\t\t\tctx->version = curr_peer->peerversion;\n\t\t\tctx->minpoll = curr_peer->minpoll;\n\t\t\tctx->maxpoll = curr_peer->maxpoll;\n\t\t\tctx->flags = peerflag_bits(curr_peer);\n\t\t\tctx->ttl = curr_peer->ttl;\n\t\t\tctx->keyid = curr_peer->peerkey;\n\t\t\tctx->group = curr_peer->group;\n\n\t\t\tmemset(&hints, 0, sizeof(hints));\n\t\t\thints.ai_family = ctx->family;\n\t\t\thints.ai_socktype = SOCK_DGRAM;\n\t\t\thints.ai_protocol = IPPROTO_UDP;\n\n\t\t\tgetaddrinfo_sometime(curr_peer->addr->address,\n\t\t\t\t\t     \"ntp\", &hints,\n\t\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t\t     &peer_name_resolved, ctx);\n# else\t/* !WORKER follows */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\t\tcurr_peer->addr->address);\n# endif\n\t\t}\n\t}\n}\n#endif\t/* !SIM */\n\n/*\n * peer_name_resolved()\n *\n * Callback invoked when config_peers()'s DNS lookup completes.\n */\n#ifdef WORKER\nvoid\npeer_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tpeer_resolved_ctx *\tctx;\n\tu_short\t\t\taf;\n\tconst char *\t\tfam_spec;\n\n\tctx = context;\n\n\tDPRINTF(1, (\"peer_name_resolved(%s) rescode %d\\n\", name, rescode));\n\n\tif (rescode) {\n#ifndef IGNORE_DNS_ERRORS\n\t\tfree(ctx);\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"giving up resolving host %s: %s (%d)\",\n\t\t\tname, gai_strerror(rescode), rescode);\n#else\t/* IGNORE_DNS_ERRORS follows */\n\t\tgetaddrinfo_sometime(name, service, hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     &peer_name_resolved, context);\n#endif\n\t\treturn;\n\t}\n\n\t/* Loop to configure a single association */\n\tfor (; res != NULL; res = res->ai_next) {\n\t\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\t\tif (is_sane_resolved_address(&peeraddr,\n\t\t\t\t\t     ctx->host_mode)) {\n\t\t\tNLOG(NLOG_SYSINFO) {\n\t\t\t\taf = ctx->family;\n\t\t\t\tfam_spec = (AF_INET6 == af)\n\t\t\t\t\t       ? \"(AAAA) \"\n\t\t\t\t\t       : (AF_INET == af)\n\t\t\t\t\t\t     ? \"(A) \"\n\t\t\t\t\t\t     : \"\";\n\t\t\t\tmsyslog(LOG_INFO, \"DNS %s %s-> %s\",\n\t\t\t\t\tname, fam_spec,\n\t\t\t\t\tstoa(&peeraddr));\n\t\t\t}\n\t\t\tpeer_config(\n\t\t\t\t&peeraddr,\n\t\t\t\tNULL,\n\t\t\t\tNULL,\n\t\t\t\tctx->hmode,\n\t\t\t\tctx->version,\n\t\t\t\tctx->minpoll,\n\t\t\t\tctx->maxpoll,\n\t\t\t\tctx->flags,\n\t\t\t\tctx->ttl,\n\t\t\t\tctx->keyid,\n\t\t\t\tctx->group);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(ctx);\n}\n#endif\t/* WORKER */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_peers(\n\tconfig_tree *ptree\n\t)\n{\n\tpeer_node *curr_peer;\n\n\tif (ptree->peers != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_peer, *ptree->peers, link);\n\t\t\tif (NULL == curr_peer)\n\t\t\t\tbreak;\n\t\t\tdestroy_address_node(curr_peer->addr);\n\t\t\tdestroy_attr_val_fifo(curr_peer->peerflags);\n\t\t\tfree(curr_peer);\n\t\t}\n\t\tfree(ptree->peers);\n\t\tptree->peers = NULL;\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifndef SIM\nstatic void\nconfig_unpeers(\n\tconfig_tree *ptree\n\t)\n{\n\tsockaddr_u\t\tpeeraddr;\n\tstruct addrinfo\t\thints;\n\tunpeer_node *\t\tcurr_unpeer;\n\tstruct peer *\t\tp;\n\tconst char *\t\tname;\n\tint\t\t\trc;\n\n\tcurr_unpeer = HEAD_PFIFO(ptree->unpeers);\n\tfor (; curr_unpeer != NULL; curr_unpeer = curr_unpeer->link) {\n\t\t/*\n\t\t * Either AssocID will be zero, and we unpeer by name/\n\t\t * address addr, or it is nonzero and addr NULL.\n\t\t */\n\t\tif (curr_unpeer->assocID) {\n\t\t\tp = findpeerbyassoc(curr_unpeer->assocID);\n\t\t\tif (p != NULL) {\n\t\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\",\n\t\t\t\t\tstoa(&p->srcadr));\n\t\t\t\tpeer_clear(p, \"GONE\");\n\t\t\t\tunpeer(p);\n\t\t\t}\t\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tmemset(&peeraddr, 0, sizeof(peeraddr));\n\t\tAF(&peeraddr) = curr_unpeer->addr->type;\n\t\tname = curr_unpeer->addr->address;\n\t\trc = getnetnum(name, &peeraddr, 0, t_UNK);\n\t\t/* Do we have a numeric address? */\n\t\tif (rc > 0) {\n\t\t\tDPRINTF(1, (\"unpeer: searching for %s\\n\",\n\t\t\t\t    stoa(&peeraddr)));\n\t\t\tp = findexistingpeer(&peeraddr, NULL, NULL, -1);\n\t\t\tif (p != NULL) {\n\t\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\",\n\t\t\t\t\tstoa(&peeraddr));\n\t\t\t\tpeer_clear(p, \"GONE\");\n\t\t\t\tunpeer(p);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\t\t/* \n\t\t * It's not a numeric IP address, it's a hostname.\n\t\t * Check for associations with a matching hostname.\n\t\t */\n\t\tfor (p = peer_list; p != NULL; p = p->p_link)\n\t\t\tif (p->hostname != NULL)\n\t\t\t\tif (!strcasecmp(p->hostname, name))\n\t\t\t\t\tbreak;\n\t\tif (p != NULL) {\n\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s\", name);\n\t\t\tpeer_clear(p, \"GONE\");\n\t\t\tunpeer(p);\n\t\t}\n\t\t/* Resolve the hostname to address(es). */\n# ifdef WORKER\n\t\tmemset(&hints, 0, sizeof(hints));\n\t\thints.ai_family = curr_unpeer->addr->type;\n\t\thints.ai_socktype = SOCK_DGRAM;\n\t\thints.ai_protocol = IPPROTO_UDP;\n\t\tgetaddrinfo_sometime(name, \"ntp\", &hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     &unpeer_name_resolved, NULL);\n# else\t/* !WORKER follows */\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"hostname %s can not be used, please use IP address instead.\\n\",\n\t\t\tname);\n# endif\n\t}\n}\n#endif\t/* !SIM */\n\n\n/*\n * unpeer_name_resolved()\n *\n * Callback invoked when config_unpeers()'s DNS lookup completes.\n */\n#ifdef WORKER\nvoid\nunpeer_name_resolved(\n\tint\t\t\trescode,\n\tint\t\t\tgai_errno,\n\tvoid *\t\t\tcontext,\n\tconst char *\t\tname,\n\tconst char *\t\tservice,\n\tconst struct addrinfo *\thints,\n\tconst struct addrinfo *\tres\n\t)\n{\n\tsockaddr_u\tpeeraddr;\n\tstruct peer *\tpeer;\n\tu_short\t\taf;\n\tconst char *\tfam_spec;\n\n\tDPRINTF(1, (\"unpeer_name_resolved(%s) rescode %d\\n\", name, rescode));\n\n\tif (rescode) {\n\t\tmsyslog(LOG_ERR, \"giving up resolving unpeer %s: %s (%d)\", \n\t\t\tname, gai_strerror(rescode), rescode);\n\t\treturn;\n\t}\n\t/*\n\t * Loop through the addresses found\n\t */\n\tfor (; res != NULL; res = res->ai_next) {\n\t\tNTP_INSIST(res->ai_addrlen <= sizeof(peeraddr));\n\t\tmemcpy(&peeraddr, res->ai_addr, res->ai_addrlen);\n\t\tDPRINTF(1, (\"unpeer: searching for peer %s\\n\",\n\t\t\t    stoa(&peeraddr)));\n\t\tpeer = findexistingpeer(&peeraddr, NULL, NULL, -1);\n\t\tif (peer != NULL) {\n\t\t\taf = AF(&peeraddr);\n\t\t\tfam_spec = (AF_INET6 == af)\n\t\t\t\t       ? \"(AAAA) \"\n\t\t\t\t       : (AF_INET == af)\n\t\t\t\t\t     ? \"(A) \"\n\t\t\t\t\t     : \"\";\n\t\t\tmsyslog(LOG_NOTICE, \"unpeered %s %s-> %s\", name,\n\t\t\t\tfam_spec, stoa(&peeraddr));\n\t\t\tpeer_clear(peer, \"GONE\");\n\t\t\tunpeer(peer);\n\t\t}\n\t}\n}\n#endif\t/* WORKER */\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_unpeers(\n\tconfig_tree *ptree\n\t)\n{\n\tunpeer_node *curr_unpeer;\n\n\tif (ptree->unpeers != NULL) {\n\t\twhile (1) {\n\t\t\tUNLINK_FIFO(curr_unpeer, *ptree->unpeers, link);\n\t\t\tif (NULL == curr_unpeer)\n\t\t\t\tbreak;\n\t\t\tdestroy_address_node(curr_unpeer->addr);\n\t\t\tfree(curr_unpeer);\n\t\t}\n\t\tfree(ptree->unpeers);\n\t}\n}\n#endif\t/* FREE_CFG_T */\n\n\n#ifdef SIM\nstatic void\nconfig_sim(\n\tconfig_tree *ptree\n\t)\n{\n\tint i;\n\tserver_info *serv_info;\n\tattr_val *init_stmt;\n\tsim_node *sim_n;\n\n\t/* Check if a simulate block was found in the configuration code.\n\t * If not, return an error and exit\n\t */\n\tsim_n = HEAD_PFIFO(ptree->sim_details);\n\tif (NULL == sim_n) {\n\t\tfprintf(stderr, \"ERROR!! I couldn't find a \\\"simulate\\\" block for configuring the simulator.\\n\");\n\t\tfprintf(stderr, \"\\tCheck your configuration file.\\n\");\n\t\texit(1);\n\t}\n\n\t/* Process the initialization statements\n\t * -------------------------------------\n\t */\n\tinit_stmt = HEAD_PFIFO(sim_n->init_opts);\n\tfor (; init_stmt != NULL; init_stmt = init_stmt->link) {\n\t\tswitch(init_stmt->attr) {\n\n\t\tcase T_Beep_Delay:\n\t\t\tsimulation.beep_delay = init_stmt->value.d;\n\t\t\tbreak;\n\n\t\tcase T_Sim_Duration:\n\t\t\tsimulation.end_time = init_stmt->value.d;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tfprintf(stderr,\n\t\t\t\t\"Unknown simulator init token %d\\n\",\n\t\t\t\tinit_stmt->attr);\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t/* Process the server list\n\t * -----------------------\n\t */\n\tsimulation.num_of_servers = 0;\n\tserv_info = HEAD_PFIFO(sim_n->servers);\n\tfor (; serv_info != NULL; serv_info = serv_info->link)\n\t\tsimulation.num_of_servers++;\n\tsimulation.servers = emalloc(simulation.num_of_servers *\n\t\t\t\t     sizeof(simulation.servers[0]));\n\n\ti = 0;\n\tserv_info = HEAD_PFIFO(sim_n->servers);\n\tfor (; serv_info != NULL; serv_info = serv_info->link) {\n\t\tif (NULL == serv_info) {\n\t\t\tfprintf(stderr, \"Simulator server list is corrupt\\n\");\n\t\t\texit(1);\n\t\t} else {\n\t\t\tsimulation.servers[i] = *serv_info;\n\t\t\tsimulation.servers[i].link = NULL;\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprintf(\"Creating server associations\\n\");\n\tcreate_server_associations();\n\tfprintf(stderr,\"\\tServer associations successfully created!!\\n\");\n}\n\n\n#ifdef FREE_CFG_T\nstatic void\nfree_config_sim(\n\tconfig_tree *ptree\n\t)\n{\n\tsim_node *sim_n;\n\tserver_info *serv_n;\n\tscript_info *script_n;\n\n\tif (NULL == ptree->sim_details)\n\t\treturn;\n\tsim_n = HEAD_PFIFO(ptree->sim_details);\n\tfree(ptree->sim_details);\n\tptree->sim_details = NULL;\n\tif (NULL == sim_n)\n\t\treturn;\n\n\tFREE_ATTR_VAL_FIFO(sim_n->init_opts);\n\twhile (1) {\n\t\tUNLINK_FIFO(serv_n, *sim_n->servers, link);\n\t\tif (NULL == serv_n)\n\t\t\tbreak;\n\t\tscript_n = serv_n->curr_script;\n\t\twhile (script_n != NULL) {\n\t\t\tfree(script_n);\n\t\t\tif (serv_n->script != NULL)\n\t\t\t\tUNLINK_FIFO(script_n, *serv_n->script,\n\t\t\t\t\t    link);\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tif (serv_n->script != NULL)\n\t\t\tfree(serv_n->script);\n\t\tfree(serv_n);\n\t}\n\tfree(sim_n);\n}\n#endif\t/* FREE_CFG_T */\n#endif\t/* SIM */\n\n\n/* Define two different config functions. One for the daemon and the other for\n * the simulator. The simulator ignores a lot of the standard ntpd configuration\n * options\n */\n#ifndef SIM\nstatic void\nconfig_ntpd(\n\tconfig_tree *ptree\n\t)\n{\n\tconfig_nic_rules(ptree);\n\tio_open_sockets();\n\tconfig_monitor(ptree);\n\tconfig_auth(ptree);\n\tconfig_tos(ptree);\n\tconfig_access(ptree);\n\tconfig_tinker(ptree);\n\tconfig_system_opts(ptree);\n\tconfig_logconfig(ptree);\n\tconfig_phone(ptree);\n\tconfig_setvar(ptree);\n\tconfig_ttl(ptree);\n\tconfig_trap(ptree);\n\tconfig_vars(ptree);\n\tconfig_other_modes(ptree);\n\tconfig_peers(ptree);\n\tconfig_unpeers(ptree);\n\tconfig_fudge(ptree);\n\tconfig_qos(ptree);\n\n#ifdef TEST_BLOCKING_WORKER\n\t{\n\t\tstruct addrinfo hints;\n\n\t\tmemset(&hints, 0, sizeof(hints));\n\t\thints.ai_socktype = SOCK_STREAM;\n\t\thints.ai_protocol = IPPROTO_TCP;\n\t\tgetaddrinfo_sometime(\"www.cnn.com\", \"ntp\", &hints,\n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     gai_test_callback, (void *)1);\n\t\thints.ai_family = AF_INET6;\n\t\tgetaddrinfo_sometime(\"ipv6.google.com\", \"ntp\", &hints, \n\t\t\t\t     INITIAL_DNS_RETRY,\n\t\t\t\t     gai_test_callback, (void *)0x600);\n\t}\n#endif\n}\n#endif\t/* !SIM */\n\n\n#ifdef SIM\nstatic void\nconfig_ntpdsim(\n\tconfig_tree *ptree\n\t)\n{\n\tprintf(\"Configuring Simulator...\\n\");\n\tprintf(\"Some ntpd-specific commands in the configuration file will be ignored.\\n\");\n\n\tconfig_tos(ptree);\n\tconfig_monitor(ptree);\n\tconfig_tinker(ptree);\n\tconfig_system_opts(ptree);\n\tconfig_logconfig(ptree);\n\tconfig_vars(ptree);\n\tconfig_sim(ptree);\n}\n#endif /* SIM */\n\n\n/*\n * config_remotely() - implements ntpd side of ntpq :config\n */\nvoid\nconfig_remotely(\n\tsockaddr_u *\tremote_addr\n\t)\n{\n\tstruct FILE_INFO remote_cuckoo;\n\tchar origin[128];\n\n\tsnprintf(origin, sizeof(origin), \"remote config from %s\",\n\t\t stoa(remote_addr));\n\tmemset(&remote_cuckoo, 0, sizeof(remote_cuckoo));\n\tremote_cuckoo.fname = origin;\n\tremote_cuckoo.line_no = 1;\n\tremote_cuckoo.col_no = 1;\n\tip_file = &remote_cuckoo;\n\tinput_from_file = 0;\n\n\tinit_syntax_tree(&cfgt);\n\tyyparse();\n\tcfgt.source.attr = CONF_SOURCE_NTPQ;\n\tcfgt.timestamp = time(NULL);\n\tcfgt.source.value.s = estrdup(stoa(remote_addr));\n\n\tDPRINTF(1, (\"Finished Parsing!!\\n\"));\n\n\tsave_and_apply_config_tree();\n\n\tinput_from_file = 1;\n}\n\n\n/*\n * getconfig() - process startup configuration file e.g /etc/ntp.conf\n */\nvoid\ngetconfig(\n\tint\targc,\n\tchar **\targv\n\t)\n{\n\tchar line[MAXLINE];\n\n#ifdef DEBUG\n\tatexit(free_all_config_trees);\n#endif\n#ifndef SYS_WINNT\n\tconfig_file = CONFIG_FILE;\n#else\n\ttemp = CONFIG_FILE;\n\tif (!ExpandEnvironmentStrings((LPCTSTR)temp, (LPTSTR)config_file_storage, (DWORD)sizeof(config_file_storage))) {\n\t\tmsyslog(LOG_ERR, \"ExpandEnvironmentStrings CONFIG_FILE failed: %m\\n\");\n\t\texit(1);\n\t}\n\tconfig_file = config_file_storage;\n\n\ttemp = ALT_CONFIG_FILE;\n\tif (!ExpandEnvironmentStrings((LPCTSTR)temp, (LPTSTR)alt_config_file_storage, (DWORD)sizeof(alt_config_file_storage))) {\n\t\tmsyslog(LOG_ERR, \"ExpandEnvironmentStrings ALT_CONFIG_FILE failed: %m\\n\");\n\t\texit(1);\n\t}\n\talt_config_file = alt_config_file_storage;\n#endif /* SYS_WINNT */\n\n\t/*\n\t * install a non default variable with this daemon version\n\t */\n\tsnprintf(line, sizeof(line), \"daemon_version=\\\"%s\\\"\", Version);\n\tset_sys_var(line, strlen(line)+1, RO);\n\n\t/*\n\t * Set up for the first time step to install a variable showing\n\t * which syscall is being used to step.\n\t */\n\tset_tod_using = &ntpd_set_tod_using;\n\n\t/*\n\t * On Windows, the variable has already been set, on the rest,\n\t * initialize it to \"UNKNOWN\".\n\t */\n#ifndef SYS_WINNT\n\tstrncpy(line, \"settimeofday=\\\"UNKNOWN\\\"\", sizeof(line));\n\tset_sys_var(line, strlen(line) + 1, RO);\n#endif\n\tgetCmdOpts(argc, argv);\n\tinit_syntax_tree(&cfgt);\n\tcurr_include_level = 0;\n\tif (\n\t\t(fp[curr_include_level] = F_OPEN(FindConfig(config_file), \"r\")) == NULL\n#ifdef HAVE_NETINFO\n\t\t/* If there is no config_file, try NetInfo. */\n\t\t&& check_netinfo && !(config_netinfo = get_netinfo_config())\n#endif /* HAVE_NETINFO */\n\t\t) {\n\t\tmsyslog(LOG_INFO, \"getconfig: Couldn't open <%s>\", FindConfig(config_file));\n#ifndef SYS_WINNT\n\t\tio_open_sockets();\n\n\t\treturn;\n#else\n\t\t/* Under WinNT try alternate_config_file name, first NTP.CONF, then NTP.INI */\n\n\t\tif ((fp[curr_include_level] = F_OPEN(FindConfig(alt_config_file), \"r\")) == NULL) {\n\n\t\t\t/*\n\t\t\t * Broadcast clients can sometimes run without\n\t\t\t * a configuration file.\n\t\t\t */\n\t\t\tmsyslog(LOG_INFO, \"getconfig: Couldn't open <%s>\", FindConfig(alt_config_file));\n\t\t\tio_open_sockets();\n\n\t\t\treturn;\n\t\t}\n\t\tcfgt.source.value.s = estrdup(alt_config_file);\n#endif\t/* SYS_WINNT */\n\t} else\n\t\tcfgt.source.value.s = estrdup(config_file);\n\n\n\t/*** BULK OF THE PARSER ***/\n#ifdef DEBUG\n\tyydebug = !!(debug >= 5);\n#endif\n\tip_file = fp[curr_include_level];\n\tyyparse();\n\t\n\tDPRINTF(1, (\"Finished Parsing!!\\n\"));\n\n\tcfgt.source.attr = CONF_SOURCE_FILE;\t\n\tcfgt.timestamp = time(NULL);\n\n\tsave_and_apply_config_tree();\n\n\twhile (curr_include_level != -1)\n\t\tFCLOSE(fp[curr_include_level--]);\n\n#ifdef HAVE_NETINFO\n\tif (config_netinfo)\n\t\tfree_netinfo_config(config_netinfo);\n#endif /* HAVE_NETINFO */\n}\n\n\nvoid\nsave_and_apply_config_tree(void)\n{\n\tconfig_tree *ptree;\n#ifndef SAVECONFIG\n\tconfig_tree *punlinked;\n#endif\n\n\t/*\n\t * Keep all the configuration trees applied since startup in\n\t * a list that can be used to dump the configuration back to\n\t * a text file.\n\t */\n\tptree = emalloc(sizeof(*ptree));\n\tmemcpy(ptree, &cfgt, sizeof(*ptree));\n\tmemset(&cfgt, 0, sizeof(cfgt));\n\t\n\tLINK_TAIL_SLIST(cfg_tree_history, ptree, link, config_tree);\n\n#ifdef SAVECONFIG\n\tif (HAVE_OPT( SAVECONFIGQUIT )) {\n\t\tFILE *dumpfile;\n\t\tint err;\n\t\tint dumpfailed;\n\n\t\tdumpfile = fopen(OPT_ARG( SAVECONFIGQUIT ), \"w\");\n\t\tif (NULL == dumpfile) {\n\t\t\terr = errno;\n\t\t\tfprintf(stderr,\n\t\t\t\t\"can not create save file %s, error %d %s\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ), err,\n\t\t\t\tstrerror(err));\n\t\t\texit(err);\n\t\t}\n\t\t\n\t\tdumpfailed = dump_all_config_trees(dumpfile, 0);\n\t\tif (dumpfailed)\n\t\t\tfprintf(stderr,\n\t\t\t\t\"--saveconfigquit %s error %d\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ),\n\t\t\t\tdumpfailed);\n\t\telse\n\t\t\tfprintf(stderr,\n\t\t\t\t\"configuration saved to %s\\n\",\n\t\t\t\tOPT_ARG( SAVECONFIGQUIT ));\n\n\t\texit(dumpfailed);\n\t}\n#endif\t/* SAVECONFIG */\n\n\t/* The actual configuration done depends on whether we are configuring the\n\t * simulator or the daemon. Perform a check and call the appropriate\n\t * function as needed.\n\t */\n\n#ifndef SIM\n\tconfig_ntpd(ptree);\n#else\n\tconfig_ntpdsim(ptree);\n#endif\n\n\t/*\n\t * With configure --disable-saveconfig, there's no use keeping\n\t * the config tree around after application, so free it.\n\t */\n#ifndef SAVECONFIG\n\tUNLINK_SLIST(punlinked, cfg_tree_history, ptree, link,\n\t\t     config_tree);\n\tNTP_INSIST(punlinked == ptree);\n\tfree_config_tree(ptree);\n#endif\n}\n\n\nvoid\nntpd_set_tod_using(\n\tconst char *which\n\t)\n{\n\tchar line[128];\n\n\tsnprintf(line, sizeof(line), \"settimeofday=\\\"%s\\\"\", which);\n\tset_sys_var(line, strlen(line) + 1, RO);\n}\n\n\nstatic char *\nnormal_dtoa(\n\tdouble d\n\t)\n{\n\tchar *\tbuf;\n\tchar *\tpch_e;\n\tchar *\tpch_nz;\n\n\tLIB_GETBUF(buf);\n\tsnprintf(buf, LIB_BUFLENGTH, \"%g\", d);\n\n\t/* use lowercase 'e', strip any leading zeroes in exponent */\n\tpch_e = strchr(buf, 'e');\n\tif (NULL == pch_e) {\n\t\tpch_e = strchr(buf, 'E');\n\t\tif (NULL == pch_e)\n\t\t\treturn buf;\n\t\t*pch_e = 'e';\n\t}\n\tpch_e++;\n\tif ('-' == *pch_e)\n\t\tpch_e++;\n\tpch_nz = pch_e;\n\twhile ('0' == *pch_nz)\n\t\tpch_nz++;\n\tif (pch_nz == pch_e)\n\t\treturn buf;\n\tstrncpy(pch_e, pch_nz, LIB_BUFLENGTH - (pch_e - buf));\n\n\treturn buf;\n}\n\n\n/* FUNCTIONS COPIED FROM THE OLDER ntp_config.c\n * --------------------------------------------\n */\n\n\n/*\n * get_pfxmatch - find value for prefixmatch\n * and update char * accordingly\n */\nstatic unsigned long\nget_pfxmatch(\n\tchar ** s,\n\tstruct masks *m\n\t)\n{\n\twhile (m->name) {\n\t\tif (strncmp(*s, m->name, strlen(m->name)) == 0) {\n\t\t\t*s += strlen(m->name);\n\t\t\treturn m->mask;\n\t\t} else {\n\t\t\tm++;\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*\n * get_match - find logmask value\n */\nstatic unsigned long\nget_match(\n\tchar *s,\n\tstruct masks *m\n\t)\n{\n\twhile (m->name) {\n\t\tif (strcmp(s, m->name) == 0)\n\t\t\treturn m->mask;\n\t\telse\n\t\t\tm++;\n\t}\n\treturn 0;\n}\n\n/*\n * get_logmask - build bitmask for ntp_syslogmask\n */\nstatic unsigned long\nget_logmask(\n\tchar *s\n\t)\n{\n\tchar *t;\n\tunsigned long offset;\n\tunsigned long mask;\n\n\tt = s;\n\toffset = get_pfxmatch(&t, logcfg_class);\n\tmask   = get_match(t, logcfg_item);\n\n\tif (mask)\n\t\treturn mask << offset;\n\telse\n\t\tmsyslog(LOG_ERR, \"logconfig: illegal argument %s - ignored\", s);\n\n\treturn 0;\n}\n\n\n#ifdef HAVE_NETINFO\n\n/*\n * get_netinfo_config - find the nearest NetInfo domain with an ntp\n * configuration and initialize the configuration state.\n */\nstatic struct netinfo_config_state *\nget_netinfo_config(void)\n{\n\tni_status status;\n\tvoid *domain;\n\tni_id config_dir;\n\tstruct netinfo_config_state *config;\n\n\tif (ni_open(NULL, \".\", &domain) != NI_OK) return NULL;\n\n\twhile ((status = ni_pathsearch(domain, &config_dir, NETINFO_CONFIG_DIR)) == NI_NODIR) {\n\t\tvoid *next_domain;\n\t\tif (ni_open(domain, \"..\", &next_domain) != NI_OK) {\n\t\t\tni_free(next_domain);\n\t\t\tbreak;\n\t\t}\n\t\tni_free(domain);\n\t\tdomain = next_domain;\n\t}\n\tif (status != NI_OK) {\n\t\tni_free(domain);\n\t\treturn NULL;\n\t}\n\n\tconfig = emalloc(sizeof(*config));\n\tconfig->domain = domain;\n\tconfig->config_dir = config_dir;\n\tconfig->prop_index = 0;\n\tconfig->val_index = 0;\n\tconfig->val_list = NULL;\n\n\treturn config;\n}\n\n\n/*\n * free_netinfo_config - release NetInfo configuration state\n */\nstatic void\nfree_netinfo_config(\n\tstruct netinfo_config_state *config\n\t)\n{\n\tni_free(config->domain);\n\tfree(config);\n}\n\n\n/*\n * gettokens_netinfo - return tokens from NetInfo\n */\nstatic int\ngettokens_netinfo (\n\tstruct netinfo_config_state *config,\n\tchar **tokenlist,\n\tint *ntokens\n\t)\n{\n\tint prop_index = config->prop_index;\n\tint val_index = config->val_index;\n\tchar **val_list = config->val_list;\n\n\t/*\n\t * Iterate through each keyword and look for a property that matches it.\n\t */\n  again:\n\tif (!val_list) {\n\t\tfor (; prop_index < COUNTOF(keywords); prop_index++)\n\t\t{\n\t\t\tni_namelist namelist;\n\t\t\tstruct keyword current_prop = keywords[prop_index];\n\t\t\tni_index index;\n\n\t\t\t/*\n\t\t\t * For each value associated in the property, we're going to return\n\t\t\t * a separate line. We squirrel away the values in the config state\n\t\t\t * so the next time through, we don't need to do this lookup.\n\t\t\t */\n\t\t\tNI_INIT(&namelist);\n\t\t\tif (NI_OK == ni_lookupprop(config->domain,\n\t\t\t    &config->config_dir, current_prop.text,\n\t\t\t    &namelist)) {\n\n\t\t\t\t/* Found the property, but it has no values */\n\t\t\t\tif (namelist.ni_namelist_len == 0) continue;\n\n\t\t\t\tconfig->val_list = \n\t\t\t\t    emalloc(sizeof(char*) *\n\t\t\t\t    (namelist.ni_namelist_len + 1));\n\t\t\t\tval_list = config->val_list;\n\n\t\t\t\tfor (index = 0;\n\t\t\t\t     index < namelist.ni_namelist_len;\n\t\t\t\t     index++) {\n\t\t\t\t\tchar *value;\n\t\t\t\t\t\n\t\t\t\t\tvalue = namelist.ni_namelist_val[index];\n\t\t\t\t\tval_list[index] = estrdup(value);\n\t\t\t\t}\n\t\t\t\tval_list[index] = NULL;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tni_namelist_free(&namelist);\n\t\t}\n\t\tconfig->prop_index = prop_index;\n\t}\n\n\t/* No list; we're done here. */\n\tif (!val_list)\n\t\treturn CONFIG_UNKNOWN;\n\n\t/*\n\t * We have a list of values for the current property.\n\t * Iterate through them and return each in order.\n\t */\n\tif (val_list[val_index]) {\n\t\tint ntok = 1;\n\t\tint quoted = 0;\n\t\tchar *tokens = val_list[val_index];\n\n\t\tmsyslog(LOG_INFO, \"%s %s\", keywords[prop_index].text, val_list[val_index]);\n\n\t\t(const char*)tokenlist[0] = keywords[prop_index].text;\n\t\tfor (ntok = 1; ntok < MAXTOKENS; ntok++) {\n\t\t\ttokenlist[ntok] = tokens;\n\t\t\twhile (!ISEOL(*tokens) && (!ISSPACE(*tokens) || quoted))\n\t\t\t\tquoted ^= (*tokens++ == '\"');\n\n\t\t\tif (ISEOL(*tokens)) {\n\t\t\t\t*tokens = '\\0';\n\t\t\t\tbreak;\n\t\t\t} else {\t\t/* must be space */\n\t\t\t\t*tokens++ = '\\0';\n\t\t\t\twhile (ISSPACE(*tokens))\n\t\t\t\t\ttokens++;\n\t\t\t\tif (ISEOL(*tokens))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (ntok == MAXTOKENS) {\n\t\t\t/* HMS: chomp it to lose the EOL? */\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"gettokens_netinfo: too many tokens.  Ignoring: %s\",\n\t\t\t\ttokens);\n\t\t} else {\n\t\t\t*ntokens = ntok + 1;\n\t\t}\n\n\t\tconfig->val_index++;\t/* HMS: Should this be in the 'else'? */\n\n\t\treturn keywords[prop_index].keytype;\n\t}\n\n\t/* We're done with the current property. */\n\tprop_index = ++config->prop_index;\n\n\t/* Free val_list and reset counters. */\n\tfor (val_index = 0; val_list[val_index]; val_index++)\n\t\tfree(val_list[val_index]);\n\tfree(val_list);\n\tval_list = config->val_list = NULL;\n\tval_index = config->val_index = 0;\n\n\tgoto again;\n}\n#endif /* HAVE_NETINFO */\n\n\n/*\n * getnetnum - return a net number (this is crude, but careful)\n *\n * returns 1 for success, and mysteriously, 0 for most failures, and\n * -1 if the address found is IPv6 and we believe IPv6 isn't working.\n */\n#ifndef SIM\nstatic int\ngetnetnum(\n\tconst char *num,\n\tsockaddr_u *addr,\n\tint complain,\n\tenum gnn_type a_type\t/* ignored */\n\t)\n{\n\tNTP_REQUIRE(AF_UNSPEC == AF(addr) ||\n\t\t    AF_INET == AF(addr) ||\n\t\t    AF_INET6 == AF(addr));\n\n\tif (!is_ip_address(num, AF(addr), addr))\n\t\treturn 0;\n\n\tif (IS_IPV6(addr) && !ipv6_works)\n\t\treturn -1;\n\n# ifdef ISC_PLATFORM_HAVESALEN\n\taddr->sa.sa_len = SIZEOF_SOCKADDR(AF(addr));\n# endif\n\tSET_PORT(addr, NTP_PORT);\n\n\tDPRINTF(2, (\"getnetnum given %s, got %s\\n\", num, stoa(addr)));\n\n\treturn 1;\n}\n#endif\t/* !SIM */\n", "/*\n * ntp_util.c - stuff I didn't have any other place for\n */\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include \"ntpd.h\"\n#include \"ntp_unixtime.h\"\n#include \"ntp_filegen.h\"\n#include \"ntp_if.h\"\n#include \"ntp_stdlib.h\"\n#include \"ntp_assert.h\"\n#include \"ntp_calendar.h\"\n#include \"lib_strbuf.h\"\n\n#include <stdio.h>\n#include <ctype.h>\n#include <sys/types.h>\n#ifdef HAVE_SYS_IOCTL_H\n# include <sys/ioctl.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#ifdef HAVE_IEEEFP_H\n# include <ieeefp.h>\n#endif\n#ifdef HAVE_MATH_H\n# include <math.h>\n#endif\n\n#ifdef\tDOSYNCTODR\n# if !defined(VMS)\n#  include <sys/resource.h>\n# endif /* VMS */\n#endif\n\n#if defined(VMS)\n# include <descrip.h>\n#endif /* VMS */\n\n/*\n * Defines used by the leapseconds stuff\n */\n#define\tMAX_TAI\t100\t\t\t/* max TAI offset (s) */\n#define\tL_DAY\t86400UL\t\t\t/* seconds per day */\n#define\tL_YEAR\t(L_DAY * 365)\t\t/* days per year */\n#define\tL_LYEAR\t(L_YEAR + L_DAY)\t/* days per leap year */\n#define\tL_4YEAR\t(L_LYEAR + 3 * L_YEAR)\t/* days per leap cycle */\n#define\tL_CENT\t(L_4YEAR * 25)\t\t/* days per century */\n\n/*\n * This contains odds and ends, including the hourly stats, various\n * configuration items, leapseconds stuff, etc.\n */\n/*\n * File names\n */\nstatic\tchar *key_file_name;\t\t/* keys file name */\nchar\t*leapseconds_file_name;\t\t/* leapseconds file name */\nchar\t*stats_drift_file;\t\t/* frequency file name */\nstatic\tchar *stats_temp_file;\t\t/* temp frequency file name */\nstatic double wander_resid;\t\t/* last frequency update */\ndouble\twander_threshold = 1e-7;\t/* initial frequency threshold */\n\n/*\n * Statistics file stuff\n */\n#ifndef NTP_VAR\n# ifndef SYS_WINNT\n#  define NTP_VAR \"/var/NTP/\"\t\t/* NOTE the trailing '/' */\n# else\n#  define NTP_VAR \"c:\\\\var\\\\ntp\\\\\"\t/* NOTE the trailing '\\\\' */\n# endif /* SYS_WINNT */\n#endif\n\n#ifndef MAXPATHLEN\n# define MAXPATHLEN 256\n#endif\n\n\nstatic\tchar statsdir[MAXPATHLEN] = NTP_VAR;\nstatic FILEGEN peerstats;\nstatic FILEGEN loopstats;\nstatic FILEGEN clockstats;\nstatic FILEGEN rawstats;\nstatic FILEGEN sysstats;\nstatic FILEGEN protostats;\nstatic FILEGEN cryptostats;\nstatic FILEGEN timingstats;\n\n/*\n * This controls whether stats are written to the fileset. Provided\n * so that ntpdc can turn off stats when the file system fills up. \n */\nint stats_control;\n\n/*\n * Last frequency written to file.\n */\nstatic double prev_drift_comp;\t\t/* last frequency update */\n\n/*\n * Function prototypes\n */\nstatic\tint\tleap_file(FILE *);\nstatic\tvoid\trecord_sys_stats(void);\n\tvoid\tntpd_time_stepped(void);\n\n/* \n * Prototypes\n */\n#ifdef DEBUG\nvoid\tuninit_util(void);\n#endif\n\n\n/*\n * uninit_util - free memory allocated by init_util\n */\n#ifdef DEBUG\nvoid\nuninit_util(void)\n{\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n\tif (stats_drift_file) {\n\t\tfree(stats_drift_file);\n\t\tfree(stats_temp_file);\n\t\tstats_drift_file = NULL;\n\t\tstats_temp_file = NULL;\n\t}\n\tif (key_file_name) {\n\t\tfree(key_file_name);\n\t\tkey_file_name = NULL;\n\t}\n\tfilegen_unregister(\"peerstats\");\n\tfilegen_unregister(\"loopstats\");\n\tfilegen_unregister(\"clockstats\");\n\tfilegen_unregister(\"rawstats\");\n\tfilegen_unregister(\"sysstats\");\n\tfilegen_unregister(\"protostats\");\n#ifdef AUTOKEY\n\tfilegen_unregister(\"cryptostats\");\n#endif\t/* AUTOKEY */\n#ifdef DEBUG_TIMING\n\tfilegen_unregister(\"timingstats\");\n#endif\t/* DEBUG_TIMING */\n\n#if defined(_MSC_VER) && defined (_DEBUG)\n\t_CrtCheckMemory();\n#endif\n}\n#endif /* DEBUG */\n\n\n/*\n * init_util - initialize the util module of ntpd\n */\nvoid\ninit_util(void)\n{\n\tfilegen_register(statsdir, \"peerstats\",\t  &peerstats);\n\tfilegen_register(statsdir, \"loopstats\",\t  &loopstats);\n\tfilegen_register(statsdir, \"clockstats\",  &clockstats);\n\tfilegen_register(statsdir, \"rawstats\",\t  &rawstats);\n\tfilegen_register(statsdir, \"sysstats\",\t  &sysstats);\n\tfilegen_register(statsdir, \"protostats\",  &protostats);\n\tfilegen_register(statsdir, \"cryptostats\", &cryptostats);\n\tfilegen_register(statsdir, \"timingstats\", &timingstats);\n\t/*\n\t * register with libntp ntp_set_tod() to call us back\n\t * when time is stepped.\n\t */\n\tstep_callback = &ntpd_time_stepped;\n#ifdef DEBUG\n\tatexit(&uninit_util);\n#endif /* DEBUG */\n}\n\n\n/*\n * hourly_stats - print some interesting stats\n */\nvoid\nwrite_stats(void)\n{\n\tFILE\t*fp;\n#ifdef DOSYNCTODR\n\tstruct timeval tv;\n#if !defined(VMS)\n\tint\tprio_set;\n#endif\n#ifdef HAVE_GETCLOCK\n\tstruct timespec ts;\n#endif\n\tint\to_prio;\n\n\t/*\n\t * Sometimes having a Sun can be a drag.\n\t *\n\t * The kernel variable dosynctodr controls whether the system's\n\t * soft clock is kept in sync with the battery clock. If it\n\t * is zero, then the soft clock is not synced, and the battery\n\t * clock is simply left to rot. That means that when the system\n\t * reboots, the battery clock (which has probably gone wacky)\n\t * sets the soft clock. That means ntpd starts off with a very\n\t * confused idea of what time it is. It then takes a large\n\t * amount of time to figure out just how wacky the battery clock\n\t * has made things drift, etc, etc. The solution is to make the\n\t * battery clock sync up to system time. The way to do THAT is\n\t * to simply set the time of day to the current time of day, but\n\t * as quickly as possible. This may, or may not be a sensible\n\t * thing to do.\n\t *\n\t * CAVEAT: settimeofday() steps the sun clock by about 800 us,\n\t *\t   so setting DOSYNCTODR seems a bad idea in the\n\t *\t   case of us resolution\n\t */\n\n#if !defined(VMS)\n\t/*\n\t * (prr) getpriority returns -1 on error, but -1 is also a valid\n\t * return value (!), so instead we have to zero errno before the\n\t * call and check it for non-zero afterwards.\n\t */\n\terrno = 0;\n\tprio_set = 0;\n\to_prio = getpriority(PRIO_PROCESS,0); /* Save setting */\n\n\t/*\n\t * (prr) if getpriority succeeded, call setpriority to raise\n\t * scheduling priority as high as possible.  If that succeeds\n\t * as well, set the prio_set flag so we remember to reset\n\t * priority to its previous value below.  Note that on Solaris\n\t * 2.6 (and beyond?), both getpriority and setpriority will fail\n\t * with ESRCH, because sched_setscheduler (called from main) put\n\t * us in the real-time scheduling class which setpriority\n\t * doesn't know about. Being in the real-time class is better\n\t * than anything setpriority can do, anyhow, so this error is\n\t * silently ignored.\n\t */\n\tif ((errno == 0) && (setpriority(PRIO_PROCESS,0,-20) == 0))\n\t\tprio_set = 1;\t/* overdrive */\n#endif /* VMS */\n#ifdef HAVE_GETCLOCK\n\t(void) getclock(TIMEOFDAY, &ts);\n\ttv.tv_sec = ts.tv_sec;\n\ttv.tv_usec = ts.tv_nsec / 1000;\n#else /*  not HAVE_GETCLOCK */\n\tGETTIMEOFDAY(&tv,(struct timezone *)NULL);\n#endif /* not HAVE_GETCLOCK */\n\tif (ntp_set_tod(&tv,(struct timezone *)NULL) != 0)\n\t\tmsyslog(LOG_ERR, \"can't sync battery time: %m\");\n#if !defined(VMS)\n\tif (prio_set)\n\t\tsetpriority(PRIO_PROCESS, 0, o_prio); /* downshift */\n#endif /* VMS */\n#endif /* DOSYNCTODR */\n\trecord_sys_stats();\n\tif (stats_drift_file != 0) {\n\n\t\t/*\n\t\t * When the frequency file is written, initialize the\n\t\t * prev_drift_comp and wander_resid. Thereafter,\n\t\t * reduce the wander_resid by half each hour. When\n\t\t * the difference between the prev_drift_comp and\n\t\t * drift_comp is less than the wander_resid, update\n\t\t * the frequncy file. This minimizes the file writes to\n\t\t * nonvolaile storage.\n\t\t */\n#ifdef DEBUG\n\t\tif (debug)\n\t\t\tprintf(\"write_stats: frequency %.6lf thresh %.6lf, freq %.6lf\\n\",\n\t\t\t    (prev_drift_comp - drift_comp) * 1e6, wander_resid *\n\t\t\t    1e6, drift_comp * 1e6);\n#endif\n\t\tif (fabs(prev_drift_comp - drift_comp) < wander_resid) {\n\t\t\twander_resid *= 0.5;\n\t\t\treturn;\n\t\t}\n\t\tprev_drift_comp = drift_comp;\n\t\twander_resid = wander_threshold;\n\t\tif ((fp = fopen(stats_temp_file, \"w\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"frequency file %s: %m\",\n\t\t\t    stats_temp_file);\n\t\t\treturn;\n\t\t}\n\t\tfprintf(fp, \"%.3f\\n\", drift_comp * 1e6);\n\t\t(void)fclose(fp);\n\t\t/* atomic */\n#ifdef SYS_WINNT\n\t\tif (_unlink(stats_drift_file)) /* rename semantics differ under NT */\n\t\t\tmsyslog(LOG_WARNING, \n\t\t\t\t\"Unable to remove prior drift file %s, %m\", \n\t\t\t\tstats_drift_file);\n#endif /* SYS_WINNT */\n\n#ifndef NO_RENAME\n\t\tif (rename(stats_temp_file, stats_drift_file))\n\t\t\tmsyslog(LOG_WARNING, \n\t\t\t\t\"Unable to rename temp drift file %s to %s, %m\", \n\t\t\t\tstats_temp_file, stats_drift_file);\n#else\n\t\t/* we have no rename NFS of ftp in use */\n\t\tif ((fp = fopen(stats_drift_file, \"w\")) ==\n\t\t    NULL) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"frequency file %s: %m\",\n\t\t\t    stats_drift_file);\n\t\t\treturn;\n\t\t}\n#endif\n\n#if defined(VMS)\n\t\t/* PURGE */\n\t\t{\n\t\t\t$DESCRIPTOR(oldvers,\";-1\");\n\t\t\tstruct dsc$descriptor driftdsc = {\n\t\t\t\tstrlen(stats_drift_file), 0, 0,\n\t\t\t\t    stats_drift_file };\n\t\t\twhile(lib$delete_file(&oldvers,\n\t\t\t    &driftdsc) & 1);\n\t\t}\n#endif\n\t}\n}\n\n\n/*\n * stats_config - configure the stats operation\n */\nvoid\nstats_config(\n\tint item,\n\tconst char *invalue\t/* only one type so far */\n\t)\n{\n\tFILE\t*fp;\n\tconst char *value;\n\tint\tlen;\n\tdouble\told_drift;\n#ifndef VMS\n\tconst char temp_ext[] = \".TEMP\";\n#else\n\tconst char temp_ext[] = \"-TEMP\";\n#endif\n\n\t/*\n\t * Expand environment strings under Windows NT, since the\n\t * command interpreter doesn't do this, the program must.\n\t */\n#ifdef SYS_WINNT\n\tchar newvalue[MAX_PATH], parameter[MAX_PATH];\n\n\tif (!ExpandEnvironmentStrings(invalue, newvalue, MAX_PATH)) {\n\t\tswitch (item) {\n\t\tcase STATS_FREQ_FILE:\n\t\t\tstrncpy(parameter, \"STATS_FREQ_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_LEAP_FILE:\n\t\t\tstrncpy(parameter, \"STATS_LEAP_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_STATSDIR:\n\t\t\tstrncpy(parameter, \"STATS_STATSDIR\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tcase STATS_PID_FILE:\n\t\t\tstrncpy(parameter, \"STATS_PID_FILE\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tstrncpy(parameter, \"UNKNOWN\",\n\t\t\t\tsizeof(parameter));\n\t\t\tbreak;\n\t\t}\n\t\tvalue = invalue;\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"ExpandEnvironmentStrings(%s) failed: %m\\n\",\n\t\t\tparameter);\n\t} else {\n\t\tvalue = newvalue;\n\t}\n#else\t \n\tvalue = invalue;\n#endif /* SYS_WINNT */\n\n\tswitch (item) {\n\n\t/*\n\t * Open and read frequency file.\n\t */\n\tcase STATS_FREQ_FILE:\n\t\tif (!value || (len = strlen(value)) == 0)\n\t\t\tbreak;\n\n\t\tstats_drift_file = erealloc(stats_drift_file, len + 1);\n\t\tstats_temp_file = erealloc(stats_temp_file, \n\t\t    len + sizeof(\".TEMP\"));\n\t\tmemcpy(stats_drift_file, value, (size_t)(len+1));\n\t\tmemcpy(stats_temp_file, value, (size_t)len);\n\t\tmemcpy(stats_temp_file + len, temp_ext, sizeof(temp_ext));\n\n\t\t/*\n\t\t * Open drift file and read frequency. If the file is\n\t\t * missing or contains errors, tell the loop to reset.\n\t\t */\n\t\tif ((fp = fopen(stats_drift_file, \"r\")) == NULL)\n\t\t\tbreak;\n\n\t\tif (fscanf(fp, \"%lf\", &old_drift) != 1) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t\t\"format error frequency file %s\", \n\t\t\t\tstats_drift_file);\n\t\t\tfclose(fp);\n\t\t\tbreak;\n\n\t\t}\n\t\tfclose(fp);\n\t\tloop_config(LOOP_FREQ, old_drift);\n\t\tprev_drift_comp = drift_comp;\n\t\tbreak;\n\n\t/*\n\t * Specify statistics directory.\n\t */\n\tcase STATS_STATSDIR:\n\n\t\t/*\n\t\t * HMS: the following test is insufficient:\n\t\t * - value may be missing the DIR_SEP\n\t\t * - we still need the filename after it\n\t\t */\n\t\tif (strlen(value) >= sizeof(statsdir)) {\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"statsdir too long (>%d, sigh)\",\n\t\t\t    (int)sizeof(statsdir) - 1);\n\t\t} else {\n\t\t\tl_fp now;\n\t\t\tint add_dir_sep;\n\t\t\tint value_l = strlen(value);\n\n\t\t\t/* Add a DIR_SEP unless we already have one. */\n\t\t\tif (value_l == 0)\n\t\t\t\tadd_dir_sep = 0;\n\t\t\telse\n\t\t\t\tadd_dir_sep = (DIR_SEP !=\n\t\t\t\t    value[value_l - 1]);\n\n\t\t\tif (add_dir_sep)\n\t\t\t\tsnprintf(statsdir, sizeof(statsdir),\n\t\t\t\t    \"%s%c\", value, DIR_SEP);\n\t\t\telse\n\t\t\t\tsnprintf(statsdir, sizeof(statsdir),\n\t\t\t\t    \"%s\", value);\n\t\t\tget_systime(&now);\n\t\t\tif (peerstats.prefix == &statsdir[0] &&\n\t\t\t    peerstats.fp != NULL) {\n\t\t\t\tfclose(peerstats.fp);\n\t\t\t\tpeerstats.fp = NULL;\n\t\t\t\tfilegen_setup(&peerstats, now.l_ui);\n\t\t\t}\n\t\t\tif (loopstats.prefix == &statsdir[0] &&\n\t\t\t    loopstats.fp != NULL) {\n\t\t\t\tfclose(loopstats.fp);\n\t\t\t\tloopstats.fp = NULL;\n\t\t\t\tfilegen_setup(&loopstats, now.l_ui);\n\t\t\t}\n\t\t\tif (clockstats.prefix == &statsdir[0] &&\n\t\t\t    clockstats.fp != NULL) {\n\t\t\t\tfclose(clockstats.fp);\n\t\t\t\tclockstats.fp = NULL;\n\t\t\t\tfilegen_setup(&clockstats, now.l_ui);\n\t\t\t}\n\t\t\tif (rawstats.prefix == &statsdir[0] &&\n\t\t\t    rawstats.fp != NULL) {\n\t\t\t\tfclose(rawstats.fp);\n\t\t\t\trawstats.fp = NULL;\n\t\t\t\tfilegen_setup(&rawstats, now.l_ui);\n\t\t\t}\n\t\t\tif (sysstats.prefix == &statsdir[0] &&\n\t\t\t    sysstats.fp != NULL) {\n\t\t\t\tfclose(sysstats.fp);\n\t\t\t\tsysstats.fp = NULL;\n\t\t\t\tfilegen_setup(&sysstats, now.l_ui);\n\t\t\t}\n\t\t\tif (protostats.prefix == &statsdir[0] &&\n\t\t\t    protostats.fp != NULL) {\n\t\t\t\tfclose(protostats.fp);\n\t\t\t\tprotostats.fp = NULL;\n\t\t\t\tfilegen_setup(&protostats, now.l_ui);\n\t\t\t}\n#ifdef AUTOKEY\n\t\t\tif (cryptostats.prefix == &statsdir[0] &&\n\t\t\t    cryptostats.fp != NULL) {\n\t\t\t\tfclose(cryptostats.fp);\n\t\t\t\tcryptostats.fp = NULL;\n\t\t\t\tfilegen_setup(&cryptostats, now.l_ui);\n\t\t\t}\n#endif\t/* AUTOKEY */\n#ifdef DEBUG_TIMING\n\t\t\tif (timingstats.prefix == &statsdir[0] &&\n\t\t\t    timingstats.fp != NULL) {\n\t\t\t\tfclose(timingstats.fp);\n\t\t\t\ttimingstats.fp = NULL;\n\t\t\t\tfilegen_setup(&timingstats, now.l_ui);\n\t\t\t}\n#endif\t/* DEBUG_TIMING */\n\t\t}\n\t\tbreak;\n\n\t/*\n\t * Open pid file.\n\t */\n\tcase STATS_PID_FILE:\n\t\tif ((fp = fopen(value, \"w\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"pid file %s: %m\",\n\t\t\t    value);\n\t\t\tbreak;\n\t\t}\n\t\tfprintf(fp, \"%d\", (int)getpid());\n\t\tfclose(fp);;\n\t\tbreak;\n\n\t/*\n\t * Read leapseconds file.\n\t */\n\tcase STATS_LEAP_FILE:\n\t\tif ((fp = fopen(value, \"r\")) == NULL) {\n\t\t\tmsyslog(LOG_ERR, \"leapseconds file %s: %m\",\n\t\t\t    value);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (leap_file(fp) < 0)\n\t\t\tmsyslog(LOG_ERR,\n\t\t\t    \"format error leapseconds file %s\",\n\t\t\t    value);\n\t\telse\n\t\t\tmprintf_event(EVNT_TAI, NULL,\n\t\t\t\t      \"%d leap %s expire %s\", leap_tai,\n\t\t\t\t      fstostr(leap_sec),\n\t\t\t\t      fstostr(leap_expire));\n\t\tfclose(fp);\n\t\tbreak;\n\n\tdefault:\n\t\t/* oh well */\n\t\tbreak;\n\t}\n}\n\n\n/*\n * record_peer_stats - write peer statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past UTC midnight)\n * IP address\n * status word (hex)\n * offset\n * delay\n * dispersion\n * jitter\n*/\nvoid\nrecord_peer_stats(\n\tsockaddr_u *addr,\n\tint\tstatus,\n\tdouble\toffset,\t\t/* offset */\n\tdouble\tdelay,\t\t/* delay */\n\tdouble\tdispersion,\t/* dispersion */\n\tdouble\tjitter\t\t/* jitter */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&peerstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (peerstats.fp != NULL) {\n\t\tfprintf(peerstats.fp,\n\t\t    \"%lu %s %s %x %.9f %.9f %.9f %.9f\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(addr), status, offset,\n\t\t    delay, dispersion, jitter);\n\t\tfflush(peerstats.fp);\n\t}\n}\n\n\n/*\n * record_loop_stats - write loop filter statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past midnight)\n * offset\n * frequency (PPM)\n * jitter\n * wnder (PPM)\n * time constant (log2)\n */\nvoid\nrecord_loop_stats(\n\tdouble\toffset,\t\t/* offset */\n\tdouble\tfreq,\t\t/* frequency (PPM) */\n\tdouble\tjitter,\t\t/* jitter */\n\tdouble\twander,\t\t/* wander (PPM) */\n\tint spoll\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&loopstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (loopstats.fp != NULL) {\n\t\tfprintf(loopstats.fp, \"%lu %s %.9f %.3f %.9f %.6f %d\\n\",\n\t\t    day, ulfptoa(&now, 3), offset, freq * 1e6, jitter,\n\t\t    wander * 1e6, spoll);\n\t\tfflush(loopstats.fp);\n\t}\n}\n\n\n/*\n * record_clock_stats - write clock statistics to file\n *\n * file format:\n * day (MJD)\n * time (s past midnight)\n * IP address\n * text message\n */\nvoid\nrecord_clock_stats(\n\tsockaddr_u *addr,\n\tconst char *text\t/* timecode string */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&clockstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (clockstats.fp != NULL) {\n\t\tfprintf(clockstats.fp, \"%lu %s %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(addr), text);\n\t\tfflush(clockstats.fp);\n\t}\n}\n\n\n/*\n * mprintf_clock_stats - write clock statistics to file with\n *\t\t\tmsnprintf-style formatting.\n */\nint\nmprintf_clock_stats(\n\tsockaddr_u *addr,\n\tconst char *fmt,\n\t...\n\t)\n{\n\tva_list\tap;\n\tint\trc;\n\tchar\tmsg[512];\n\n\tva_start(ap, fmt);\n\trc = mvsnprintf(msg, sizeof(msg), fmt, ap);\n\tva_end(ap);\n\tif (stats_control)\n\t\trecord_clock_stats(addr, msg);\n\n\treturn rc;\n}\n\n/*\n * record_raw_stats - write raw timestamps to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * peer ip address\n * IP address\n * t1 t2 t3 t4 timestamps\n */\nvoid\nrecord_raw_stats(\n\tsockaddr_u *srcadr,\n\tsockaddr_u *dstadr,\n\tl_fp\t*t1,\t\t/* originate timestamp */\n\tl_fp\t*t2,\t\t/* receive timestamp */\n\tl_fp\t*t3,\t\t/* transmit timestamp */\n\tl_fp\t*t4\t\t/* destination timestamp */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&rawstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (rawstats.fp != NULL) {\n\t\tfprintf(rawstats.fp, \"%lu %s %s %s %s %s %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), stoa(srcadr), dstadr ? \n\t\t    stoa(dstadr) : \"-\",\tulfptoa(t1, 9), ulfptoa(t2, 9),\n\t\t    ulfptoa(t3, 9), ulfptoa(t4, 9));\n\t\tfflush(rawstats.fp);\n\t}\n}\n\n\n/*\n * record_sys_stats - write system statistics to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * time since reset\n * packets recieved\n * packets for this host\n * current version\n * old version\n * access denied\n * bad length or format\n * bad authentication\n * declined\n * rate exceeded\n * KoD sent\n */\nvoid\nrecord_sys_stats(void)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&sysstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (sysstats.fp != NULL) {\n\t\tfprintf(sysstats.fp,\n\t\t    \"%lu %s %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu\\n\",\n\t\t    day, ulfptoa(&now, 3), current_time - sys_stattime,\n\t\t    sys_received, sys_processed, sys_newversion,\n\t\t    sys_oldversion, sys_restricted, sys_badlength,\n\t\t    sys_badauth, sys_declined, sys_limitrejected,\n\t\t    sys_kodsent);\n\t\tfflush(sysstats.fp);\n\t\tproto_clr_stats();\n\t}\n}\n\n\n/*\n * record_proto_stats - write system statistics to file\n *\n * file format\n * day (MJD)\n * time (s past midnight)\n * text message\n */\nvoid\nrecord_proto_stats(\n\tchar\t*str\t\t/* text string */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&protostats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (protostats.fp != NULL) {\n\t\tfprintf(protostats.fp, \"%lu %s %s\\n\", day,\n\t\t    ulfptoa(&now, 3), str);\n\t\tfflush(protostats.fp);\n\t}\n}\n\n\n#ifdef AUTOKEY\n/*\n * record_crypto_stats - write crypto statistics to file\n *\n * file format:\n * day (mjd)\n * time (s past midnight)\n * peer ip address\n * text message\n */\nvoid\nrecord_crypto_stats(\n\tsockaddr_u *addr,\n\tconst char *text\t/* text message */\n\t)\n{\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&cryptostats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (cryptostats.fp != NULL) {\n\t\tif (addr == NULL)\n\t\t\tfprintf(cryptostats.fp, \"%lu %s 0.0.0.0 %s\\n\",\n\t\t\t    day, ulfptoa(&now, 3), text);\n\t\telse\n\t\t\tfprintf(cryptostats.fp, \"%lu %s %s %s\\n\",\n\t\t\t    day, ulfptoa(&now, 3), stoa(addr), text);\n\t\tfflush(cryptostats.fp);\n\t}\n}\n#endif\t/* AUTOKEY */\n\n\n#ifdef DEBUG_TIMING\n/*\n * record_timing_stats - write timing statistics to file\n *\n * file format:\n * day (mjd)\n * time (s past midnight)\n * text message\n */\nvoid\nrecord_timing_stats(\n\tconst char *text\t/* text message */\n\t)\n{\n\tstatic unsigned int flshcnt;\n\tl_fp\tnow;\n\tu_long\tday;\n\n\tif (!stats_control)\n\t\treturn;\n\n\tget_systime(&now);\n\tfilegen_setup(&timingstats, now.l_ui);\n\tday = now.l_ui / 86400 + MJD_1900;\n\tnow.l_ui %= 86400;\n\tif (timingstats.fp != NULL) {\n\t\tfprintf(timingstats.fp, \"%lu %s %s\\n\", day, lfptoa(&now,\n\t\t    3), text);\n\t\tif (++flshcnt % 100 == 0)\n\t\t\tfflush(timingstats.fp);\n\t}\n}\n#endif\n\n\n/*\n * leap_file - read leapseconds file\n *\n * Read the ERTS leapsecond file in NIST text format and extract the\n * NTP seconds of the latest leap and TAI offset after the leap.\n */\nstatic int\nleap_file(\n\tFILE\t*fp\t\t/* file handle */\n\t)\n{\n\tchar\tbuf[NTP_MAXSTRLEN]; /* file line buffer */\n\tu_long\tleap;\t\t/* NTP time at leap */\n\tu_long\texpire;\t\t/* NTP time when file expires */\n\tint\toffset;\t\t/* TAI offset at leap (s) */\n\tint\ti;\n\n\t/*\n\t * Read and parse the leapseconds file. Empty lines and comments\n\t * are ignored. A line beginning with #@ contains the file\n\t * expiration time in NTP seconds. Other lines begin with two\n\t * integers followed by junk or comments. The first integer is\n\t * the NTP seconds at the leap, the second is the TAI offset\n\t * after the leap.\n\t */\n\toffset = 0;\n\tleap = 0;\n\texpire = 0;\n\ti = 10;\n\twhile (fgets(buf, NTP_MAXSTRLEN - 1, fp) != NULL) {\n\t\tif (strlen(buf) < 1)\n\t\t\tcontinue;\n\n\t\tif (buf[0] == '#') {\n\t\t\tif (strlen(buf) < 3)\n\t\t\t\tcontinue;\n\n\t\t\t/*\n\t\t\t * Note the '@' flag was used only in the 2006\n\t\t\t * table; previious to that the flag was '$'.\n\t\t\t */\n\t\t\tif (buf[1] == '@' || buf[1] == '$') {\n\t\t\t\tif (sscanf(&buf[2], \"%lu\", &expire) !=\n\t\t\t\t    1)\n\t\t\t\t\treturn (-1);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (sscanf(buf, \"%lu %d\", &leap, &offset) == 2) {\n\n\t\t\t/*\n\t\t\t * Valid offsets must increase by one for each\n\t\t\t * leap.\n\t\t\t */\n\t\t\tif (i++ != offset)\n\t\t\t\treturn (-1);\n\t\t}\n\t}\n\n\t/*\n\t * There must be at least one leap.\n\t */\n\tif (i == 10)\n\t\treturn (-1);\n\n\tleap_tai = offset;\n\tleap_sec = leap;\n\tleap_expire = expire;\n\treturn (0);\n}\n\n\n/*\n * leap_month - returns seconds until the end of the month.\n */\nu_long\nleap_month(\n\tu_long\tsec\t\t/* current NTP second */\n\t)\n{\n\tint\t     leap;\n\tint32\t     year, month;\n\tu_int32\t     ndays;\n\tntpcal_split tmp;\n\tvint64\t     tvl;\n\n\t/* --*-- expand time and split to days */\n\ttvl   = ntpcal_ntp_to_ntp(sec, NULL);\n\ttmp   = ntpcal_daysplit(&tvl);\n\t/* --*-- split to years and days in year */\n\ttmp   = ntpcal_split_eradays(tmp.hi + DAY_NTP_STARTS - 1, &leap);\n\tyear  = tmp.hi;\n\t/* --*-- split days of year to month */\n\ttmp   = ntpcal_split_yeardays(tmp.lo, leap);\n\tmonth = tmp.hi;\n\t/* --*-- get nominal start of next month */\n\tndays = ntpcal_edate_to_eradays(year, month+1, 0) + 1 - DAY_NTP_STARTS;\n\t\n\treturn (u_int32)(ndays*SECSPERDAY - sec);\n}\n\n\n/*\n * getauthkeys - read the authentication keys from the specified file\n */\nvoid\ngetauthkeys(\n\tconst char *keyfile\n\t)\n{\n\tint len;\n\n\tlen = strlen(keyfile);\n\tif (!len)\n\t\treturn;\n\t\n#ifndef SYS_WINNT\n\tkey_file_name = erealloc(key_file_name, len + 1);\n\tmemcpy(key_file_name, keyfile, len + 1);\n#else\n\tkey_file_name = erealloc(key_file_name, _MAX_PATH);\n\tif (len + 1 > _MAX_PATH)\n\t\treturn;\n\tif (!ExpandEnvironmentStrings(keyfile, key_file_name,\n\t\t\t\t      _MAX_PATH)) {\n\t\tmsyslog(LOG_ERR,\n\t\t\t\"ExpandEnvironmentStrings(KEY_FILE) failed: %m\");\n\t\tstrncpy(key_file_name, keyfile, _MAX_PATH);\n\t}\n#endif /* SYS_WINNT */\n\n\tauthreadkeys(key_file_name);\n}\n\n\n/*\n * rereadkeys - read the authentication key file over again.\n */\nvoid\nrereadkeys(void)\n{\n\tif (NULL != key_file_name)\n\t\tauthreadkeys(key_file_name);\n}\n\n\n#if notyet\n/*\n * ntp_exit - document explicitly that ntpd has exited\n */\nvoid\nntp_exit(int retval)\n{\n\tmsyslog(LOG_ERR, \"EXITING with return code %d\", retval);\n\texit(retval);\n}\n#endif\n\n/*\n * fstostr - prettyprint NTP seconds\n */\nchar * fstostr(\n\ttime_t\tntp_stamp\n\t)\n{\n\tchar\t*\tbuf;\n\tstruct tm *\ttm;\n\ttime_t\t\tunix_stamp;\n\n\tLIB_GETBUF(buf);\n\tunix_stamp = ntp_stamp - JAN_1970;\n\ttm = gmtime(&unix_stamp);\n\tif (NULL == tm)\n#ifdef WAIT_FOR_NTP_CRYPTO_C_CALLERS_ABLE_TO_HANDLE_MORE_THAN_20_CHARS\n\t\tmsnprintf(buf, LIB_BUFLENGTH, \"gmtime: %m\");\n#else\n\t\tstrncpy(buf, \"gmtime() error\", LIB_BUFLENGTH);\n#endif\n\telse\n\t\tsnprintf(buf, LIB_BUFLENGTH, \"%04d%02d%02d%02d%02d\",\n\t\t\t tm->tm_year + 1900, tm->tm_mon + 1,\n\t\t\t tm->tm_mday, tm->tm_hour, tm->tm_min);\n\n\treturn buf;\n}\n\n\n/*\n * ntpd_time_stepped is called back by step_systime(), allowing ntpd\n * to do any one-time processing necessitated by the step.\n */\nvoid\nntpd_time_stepped(void)\n{\n\tu_int saved_mon_enabled;\n\n\t/*\n\t * flush the monitor MRU list which contains l_fp timestamps\n\t * which should not be compared across the step.\n\t */\n\tif (MON_OFF != mon_enabled) {\n\t\tsaved_mon_enabled = mon_enabled;\n\t\tmon_stop(MON_OFF);\n\t\tmon_start(saved_mon_enabled);\n\t}\n\n\t/* inform interpolating Windows code to allow time to go back */\n#ifdef SYS_WINNT\n\twin_time_stepped();\n#endif\n}\n"], "filenames": ["ChangeLog", "m4/ntp_openssl.m4", "ntpd/ntp_config.c", "ntpd/ntp_util.c"], "buggy_code_start_loc": [0, 34, 2017, 83], "buggy_code_end_loc": [0, 118, 2028, 182], "fixing_code_start_loc": [1, 34, 2018, 82], "fixing_code_end_loc": [3, 113, 2041, 173], "type": "CWE-20", "message": "ntp_openssl.m4 in ntpd in NTP before 4.2.7p112 allows remote attackers to cause a denial of service (segmentation fault) via a crafted statistics or filegen configuration command that is not enabled during compilation.", "other": {"cve": {"id": "CVE-2015-5195", "sourceIdentifier": "secalert@redhat.com", "published": "2017-07-21T14:29:00.820", "lastModified": "2023-02-13T00:51:07.040", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ntp_openssl.m4 in ntpd in NTP before 4.2.7p112 allows remote attackers to cause a denial of service (segmentation fault) via a crafted statistics or filegen configuration command that is not enabled during compilation."}, {"lang": "es", "value": "ntp_openssl.m4 en ntpd en NTP anterior a 4.2.7p112, permite a los atacantes remotos causar una denegaci\u00f3n de servicio (fallo de segmentaci\u00f3n) por medio de un comando de configuraci\u00f3n statistics o filegen creadas que no est\u00e1 habilitado durante la compilaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:21:*:*:*:*:*:*:*", "matchCriteriaId": "56BDB5A0-0839-4A20-A003-B8CD56F48171"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:22:*:*:*:*:*:*:*", "matchCriteriaId": "253C303A-E577-4488-93E6-68A8DD942C38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EE249E1B-A1FD-4E08-AA71-A0E1F10FFE97"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C068A4-3780-4EAB-A937-6082DF847564"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_hpc_node:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C2FAC325-6EEB-466D-9EBA-8ED4DBC9CFBF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_hpc_node:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "3C84489B-B08C-4854-8A12-D01B6E45CF79"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "9BBCD86A-E6C7-4444-9D74-F861084090F0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "E5ED5807-55B7-47C5-97A6-03233F4FBC3A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "825ECE2D-E232-46E0-A047-074B34DB1E97"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B6B7CAD7-9D4E-4FDB-88E3-1E583210A01F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B5A6F2F3-4894-4392-8296-3B8DD2679084"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:15.04:*:*:*:*:*:*:*", "matchCriteriaId": "F38D3B7E-8429-473F-BB31-FC3583EE5A5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:15.10:*:*:*:*:*:*:*", "matchCriteriaId": "E88A537F-F4D0-46B9-9E37-965233C2A355"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ntp:ntp:*:p111:*:*:*:*:*:*", "versionEndIncluding": "4.2.7", "matchCriteriaId": "6A000FAF-D608-42CE-A557-87DD26581BD7"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-November/170926.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-October/169167.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-September/166992.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-0780.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-2583.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2015/dsa-3388", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2015/08/25/3", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.oracle.com/technetwork/topics/security/linuxbulletinapr2016-2952096.html", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/76474", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-2783-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1254544", "source": "secalert@redhat.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/ntp-project/ntp/commit/52e977d79a0c4ace997e5c74af429844da2f27be", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www-01.ibm.com/support/docview.wss?uid=isg3T1024157", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://www-01.ibm.com/support/docview.wss?uid=swg21985122", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://www-01.ibm.com/support/docview.wss?uid=swg21986956", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://www-01.ibm.com/support/docview.wss?uid=swg21988706", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://www-01.ibm.com/support/docview.wss?uid=swg21989542", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ntp-project/ntp/commit/52e977d79a0c4ace997e5c74af429844da2f27be"}}