{"buggy_code": ["<?php\n\n/**\n * This module provides for editing site-specific text files and\n * for uploading site-specific image files.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2010-2016 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once('../globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Core\\Header;\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"File management\")]);\n    exit;\n}\n\n$imagedir     = \"$OE_SITE_DIR/images\";\n$educationdir = \"$OE_SITE_DIR/documents/education\";\n\nif (!empty($_POST['bn_save'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    /** This is a feature that allows editing of configuration files. Uncomment this\n        at your own risk, since it is considered a critical security vulnerability if\n        OpenEMR is not configured correctly.\n    // Prepare array of names of editable files, relative to the site directory.\n    $my_files = array(\n    'config.php',\n    'faxcover.txt',\n    'faxtitle.eps',\n    'referral_template.html',\n    'statement.inc.php',\n    'letter_templates/custom_pdf.php',\n    );\n    // Append LBF plugin filenames to the array.\n    $lres = sqlStatement('SELECT grp_form_id FROM layout_group_properties ' .\n    \"WHERE grp_form_id LIKE 'LBF%' AND grp_group_id = '' AND grp_activity = 1 ORDER BY grp_seq, grp_title\");\n    while ($lrow = sqlFetchArray($lres)) {\n    $option_id = $lrow['grp_form_id']; // should start with LBF\n    $my_files[] = \"LBF/$option_id.plugin.php\";\n    }\n    $form_filename = $_REQUEST['form_filename'];\n    // Sanity check to prevent evildoing.\n    if (!in_array($form_filename, $my_files)) {\n    $form_filename = '';\n    }\n    $filepath = \"$OE_SITE_DIR/$form_filename\";\n    if ($form_filename) {\n        // Textareas, at least in Firefox, return a \\r\\n at the end of each line\n        // even though only \\n was originally there.  For consistency with\n        // normal OpenEMR usage we translate those back.\n        file_put_contents($filepath, str_replace(\n            \"\\r\\n\",\n            \"\\n\",\n            $_POST['form_filedata']\n        ));\n        $form_filename = '';\n    }\n    */\n\n    // Handle image uploads.\n    if (is_uploaded_file($_FILES['form_image']['tmp_name']) && $_FILES['form_image']['size']) {\n        $form_dest_filename = $_POST['form_dest_filename'];\n        if ($form_dest_filename == '') {\n            $form_dest_filename = $_FILES['form_image']['name'];\n        }\n\n        $form_dest_filename = basename($form_dest_filename);\n        if ($form_dest_filename == '') {\n            die(xlt('Cannot find a destination filename'));\n        }\n\n        $path_parts = pathinfo($form_dest_filename);\n        if (!in_array(strtolower($path_parts['extension']), array('gif','jpg','jpe','jpeg','png','svg'))) {\n            die(xlt('Only images files are accepted'));\n        }\n\n        $imagepath = \"$imagedir/$form_dest_filename\";\n        // If the site's image directory does not yet exist, create it.\n        if (!is_dir($imagedir)) {\n            mkdir($imagedir);\n        }\n\n        if (is_file($imagepath)) {\n            unlink($imagepath);\n        }\n\n        $tmp_name = $_FILES['form_image']['tmp_name'];\n        if (!move_uploaded_file($_FILES['form_image']['tmp_name'], $imagepath)) {\n            die(xlt('Unable to create') . \" '\" . text($imagepath) . \"'\");\n        }\n    }\n\n    // Handle PDF uploads for patient education.\n    if (is_uploaded_file($_FILES['form_education']['tmp_name']) && $_FILES['form_education']['size']) {\n        $form_dest_filename = $_FILES['form_education']['name'];\n        $form_dest_filename = strtolower(basename($form_dest_filename));\n        if (substr($form_dest_filename, -4) != '.pdf') {\n            die(xlt('Filename must end with \".pdf\"'));\n        }\n\n        $educationpath = \"$educationdir/$form_dest_filename\";\n        // If the site's education directory does not yet exist, create it.\n        if (!is_dir($educationdir)) {\n            mkdir($educationdir);\n        }\n\n        if (is_file($educationpath)) {\n            unlink($educationpath);\n        }\n\n        $tmp_name = $_FILES['form_education']['tmp_name'];\n        if (!move_uploaded_file($tmp_name, $educationpath)) {\n            die(text(xl('Unable to create') . \" '$educationpath'\"));\n        }\n    }\n}\n\n/**\n * Thumbnails generator\n * generating  thumbnail image to all images files from documents table\n */\n\nif (isset($_POST['generate_thumbnails'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $thumb_generator = new ThumbnailGenerator();\n    $results = $thumb_generator->generate_all();\n\n    $thumbnail_msg = \"<p class='text-success'>\" . xlt('Generated thumbnail(s)') . \" : \" . text($results['sum_success']) . \"</p>\";\n    $thumbnail_msg .= \"<p class='text-danger'>\" . xlt('Failed to generate') . \" : \" .  text($results['sum_failed']) . \"</p>\";\n    foreach ($results['failed'] as $key => $file) {\n        $num = $key + 1;\n        $thumbnail_msg .= \"<p class='text-danger' style='font-size: 11px'> \" . text($num) . \". \" . text($file) . \"</p>\";\n    }\n} else {\n    $count_not_generated = ThumbnailGenerator::count_not_generated();\n\n    $thumbnail_msg = \"<p>\" .  xlt('Files with empty thumbnail') . \": \" . text($count_not_generated) . \" </p>\";\n}\n\n\n/**\n * White list files.\n * Security feature that enable to upload only file with mime-type from white list.\n * Important to prevention upload of virus script.\n * Dependence - turn on global setting 'secure_upload'\n */\n\nif ($GLOBALS['secure_upload']) {\n    $mime_types  = array('image/*', 'text/*', 'audio/*', 'video/*');\n\n    // Get cURL resource\n    $curl = curl_init();\n\n    curl_setopt_array($curl, array(\n        CURLOPT_RETURNTRANSFER => 1,\n        CURLOPT_URL => 'https://cdn.rawgit.com/jshttp/mime-db/master/db.json',\n        CURLOPT_CONNECTTIMEOUT => 5,\n        CURLOPT_TIMEOUT => 5\n    ));\n   // Send the request & save response to $resp\n    $resp = curl_exec($curl);\n    $httpinfo = curl_getinfo($curl);\n    if ($resp && $httpinfo['http_code'] == 200 && $httpinfo['content_type'] == 'application/json;charset=utf-8') {\n        $all_mime_types = json_decode($resp, true);\n        foreach ($all_mime_types as $name => $value) {\n            $mime_types[] = $name;\n        }\n    } else {\n        error_log('Get list of mime-type error: \"' . errorLogEscape(curl_error($curl)) . '\" - Code: ' . errorLogEscape(curl_errno($curl)));\n        $mime_types_list = array(\n            'application/pdf',\n            'image/jpeg',\n            'image/png',\n            'image/gif',\n            'application/msword',\n            'application/vnd.oasis.opendocument.spreadsheet',\n            'text/plain'\n        );\n        $mime_types = array_merge($mime_types, $mime_types_list);\n    }\n\n    curl_close($curl);\n\n    if (isset($_POST['submit_form'])) {\n        //verify csrf\n        if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n            CsrfUtils::csrfNotVerified();\n        }\n\n        $new_white_list = empty($_POST['white_list']) ? array() : $_POST['white_list'];\n\n        // truncate white list from list_options table\n        sqlStatement(\"DELETE FROM `list_options` WHERE `list_id` = 'files_white_list'\");\n        foreach ($new_white_list as $mimetype) {\n            sqlStatement(\"INSERT INTO `list_options` (`list_id`, `option_id`, `title`, `activity`)  VALUES ('files_white_list', ?, ?, 1)\", array($mimetype, $mimetype));\n        }\n\n        $white_list = $new_white_list;\n    } else {\n        $white_list = array();\n        $lres = sqlStatement(\"SELECT option_id FROM list_options WHERE list_id = 'files_white_list' AND activity = 1\");\n        while ($lrow = sqlFetchArray($lres)) {\n            $white_list[] = $lrow['option_id'];\n        }\n    }\n}\n\n\n?>\n<html>\n\n<head>\n<title><?php echo xlt('File management'); ?></title>\n\n    <?php Header::setupHeader(); ?>\n\n<style>\n.dehead {\n    font-family: sans-serif;\n    font-size: 0.8125rem;\n    font-weight: bold;\n}\n .detail {\n     font-family: sans-serif;\n     font-size: 0.8125rem;\n     font-weight: normal;\n}\n#generate_thumb {\n     width: 95%;\n     margin: 50px auto;\n     border: 2px solid var(--gray);\n}\n#file_type_whitelist {\n    width: 95%;\n    margin: 50px auto;\n}\n#generate_thumb table {\n     font-size: 14px;\n     text-align: center;\n}\n#generate_thumb table td {\n     border-right: 1px solid var(--gray);\n     padding: 0 15px;\n}\n</style>\n\n<script>\n// This is invoked when a filename selection changes in the drop-list.\n// In this case anything else entered into the form is discarded.\nfunction msfFileChanged() {\n    top.restoreSession();\n    document.forms[0].submit();\n}\n</script>\n\n</head>\n\n<body class=\"body_top\">\n<form method='post' action='manage_site_files.php' enctype='multipart/form-data'\n onsubmit='return top.restoreSession()'>\n<input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n\n<center>\n\n<table class=\"table table-bordered border-dark\">\n\n<?php /** This is a feature that allows editing of configuration files. Uncomment this\nat your own risk, since it is considered a critical security vulnerability if\nOpenEMR is not configured correctly. ?>\n <tr class='bg-light dehead'>\n  <td colspan='2' align='center'><?php echo xlt('Edit File in') . \" \" . text($OE_SITE_DIR); ?></td>\n </tr>\n <tr>\n  <td valign='top' class='detail' nowrap>\n   <select name='form_filename' onchange='msfFileChanged()' class=\"form-control\">\n    <option value=''></option>\n<?php\nforeach ($my_files as $filename) {\n    echo \"    <option value='\" . attr($filename) . \"'\";\n    if ($filename == $form_filename) {\n        echo \" selected\";\n    }\n    echo \">\" . text($filename) . \"</option>\\n\";\n}\n?>\n   </select>\n   <br />\n   <textarea name='form_filedata' rows='25' class=\"w-100 form-control\"><?php\n    if ($form_filename) {\n        echo text(@file_get_contents($filepath));\n    }\n?></textarea>\n  </td>\n </tr>\n<?php */ ?>\n\n <tr class='dehead bg-light'>\n  <td colspan='2' class='text-center'><?php echo text(xl('Upload Image to') . \" $imagedir\"); ?></td>\n </tr>\n\n <tr>\n  <td valign='top' class='detail' nowrap>\n    <?php echo xlt('Source File'); ?>:\n   <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"12000000\" />\n   <input type=\"file\" name=\"form_image\" size=\"40\" />&nbsp;\n    <?php echo xlt('Destination Filename'); ?>:\n   <select name='form_dest_filename' class='form-control'>\n    <option value=''>(<?php echo xlt('Use source filename'); ?>)</option>\n<?php\n  // Generate an <option> for each file already in the images directory.\n  $dh = opendir($imagedir);\nif (!$dh) {\n    die(text(xl('Cannot read directory') . \" '$imagedir'\"));\n}\n\n  $imagesslist = array();\nwhile (false !== ($sfname = readdir($dh))) {\n    if (substr($sfname, 0, 1) == '.') {\n        continue;\n    }\n\n    if ($sfname == 'CVS') {\n        continue;\n    }\n\n    $imageslist[$sfname] = $sfname;\n}\n\n  closedir($dh);\n  ksort($imageslist);\nforeach ($imageslist as $sfname) {\n    echo \"    <option value='\" . attr($sfname) . \"'\";\n    echo \">\" . text($sfname) . \"</option>\\n\";\n}\n?>\n   </select>\n  </td>\n </tr>\n\n <tr class='dehead bg-light'>\n  <td colspan='2' align='center'><?php echo text(xl('Upload Patient Education PDF to') . \" $educationdir\"); ?></td>\n </tr>\n <tr>\n  <td valign='top' class='detail' nowrap>\n    <?php echo xlt('Source File'); ?>:\n   <input type=\"file\" name=\"form_education\" size=\"40\" />&nbsp;\n    <?php echo xlt('Name must be like codetype_code_language.pdf, for example icd9_274.11_en.pdf'); ?>\n  </td>\n </tr>\n\n</table>\n\n<input type='submit' class=\"btn btn-primary\" name='bn_save' value='<?php echo xla('Save'); ?>' />\n\n</center>\n\n</form>\n\n<div id=\"generate_thumb\">\n    <table class=\"w-100\">\n        <tr>\n            <td class=\"thumb_title\" style=\"width: 33%\">\n                <strong><?php echo xlt('Generate Thumbnails')?></strong>\n            </td>\n            <td class=\"thumb_msg\" style=\"width: 50%\">\n                <span><?php echo $thumbnail_msg ?></span>\n            </td>\n            <td  class=\"thumb_form\" style=\"width: 17%; border-right: none\">\n                <form method='post' action='manage_site_files.php#generate_thumb'>\n                    <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n                    <input style=\"margin-top: 10px\" class=\"btn btn-primary\" type=\"submit\" name=\"generate_thumbnails\" value=\"<?php echo xla('Generate') ?>\" />\n                </form>\n            </td>\n        </tr>\n    </table>\n</div>\n\n<?php if ($GLOBALS['secure_upload']) { ?>\n<div id=\"file_type_whitelist\">\n    <h2><?php echo xlt('Create custom white list of MIME content type of a files to secure your documents system');?></h2>\n    <form id=\"whitelist_form\" method=\"post\">\n        <div class=\"subject-black-list\">\n            <div class=\"top-list\">\n                <h2 class=\"text-center\"><?php echo xlt('Black list'); ?></h2>\n                <div class=\"form-row align-items-center\">\n                    <div class=\"col-2\">\n                        <label for=\"filter-black-list\" class=\"font-weight-bold\"><?php echo xlt('Filter');?>:</label>\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"text\" id=\"filter-black-list\" class=\"form-control\" />\n                    </div>\n                </div>\n            </div>\n            <select multiple=\"multiple\" id='black-list' class=\"form-control\">\n                <?php\n                foreach ($mime_types as $type) {\n                    if (!in_array($type, $white_list)) {\n                        echo \"<option value='\" . attr($type) . \"'> \" . text($type) . \"</option>\";\n                    }\n                }\n                ?>\n            </select>\n        </div>\n\n        <div class=\"subject-info-arrows\">\n            <input type=\"button\" id=\"btnAllRight\" value=\">>\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnRight\" value=\">\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnLeft\" value=\"<\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnAllLeft\" value=\"<<\" class=\"btn btn-secondary btn-sm\" />\n        </div>\n\n        <div class=\"subject-white-list\">\n            <div class=\"top-list\">\n                <h2 class=\"text-center\"><?php echo xlt('White list'); ?></h2>\n                <div class=\"form-row\">\n                    <div class=\"col-2\">\n                        <label><?php echo xlt('Add manually');?>:</label>\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"text\" id=\"add-manually-input\" class=\"form-control\" />\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"button\" class=\"btn btn-primary\" id=\"add-manually\" value=\"+\" />\n                    </div>\n                </div>\n            </div>\n            <select name=\"white_list[]\" multiple=\"multiple\" id='white-list' class=\"form-control\">\n                <?php\n                foreach ($white_list as $type) {\n                    echo \"<option value='\" . attr($type) . \"'> \" . text($type) . \"</option>\";\n                }\n                ?>\n            </select>\n        </div>\n        <div class=\"subject-info-save\">\n            <input type=\"button\" id=\"submit-whitelist\" class=\"btn btn-primary\" value=\"<?php echo xla('Save'); ?>\" />\n            <input type=\"hidden\" name=\"submit_form\" value=\"1\" />\n            <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n        </div>\n    </form>\n\n</div>\n\n<script>\n\n    (function () {\n        $('#btnRight').click(function (e) {\n            var selectedOpts = $('#black-list option:selected');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#white-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnAllRight').click(function (e) {\n            var selectedOpts = $('#black-list option');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#white-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnLeft').click(function (e) {\n            var selectedOpts = $('#white-list option:selected');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#black-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnAllLeft').click(function (e) {\n            var selectedOpts = $('#white-list option');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#black-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        var storeElements = [];\n\n        $('#filter-black-list').on('keyup', function() {\n            var val = this.value.toLowerCase();\n\n            $('#black-list  option').each(function(){\n\n                if(this.value.toLowerCase().indexOf( val ) == -1){\n                    if(storeElements.indexOf(this) == -1){\n                        storeElements.unshift(this)\n                    }\n                    $(this).remove();\n                }\n            });\n\n            $(storeElements).each(function(key, element){\n\n                if(element.value.toLowerCase().indexOf( val ) > -1){\n\n                    $('#black-list').prepend(element);\n                    storeElements.splice(key, 1)\n                }\n\n            });\n\n        });\n\n        $('#add-manually').on('click', function () {\n            var new_type = $(\"#add-manually-input\").val();\n            if(new_type.length < 1)return;\n            $('#white-list').prepend(\"<option value=\"+new_type+\">\"+new_type+\"</option>\")\n        })\n\n        $('#submit-whitelist').on('click', function () {\n            $('#white-list option').prop('selected', true);\n            $('#whitelist_form').submit();\n        })\n\n    }(jQuery));\n\n</script>\n\n\n<?php } ?>\n\n</body>\n</html>\n"], "fixing_code": ["<?php\n\n/**\n * This module provides for editing site-specific text files and\n * for uploading site-specific image files.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2010-2016 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once('../globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Core\\Header;\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"File management\")]);\n    exit;\n}\n\n$imagedir     = \"$OE_SITE_DIR/images\";\n$educationdir = \"$OE_SITE_DIR/documents/education\";\n\nif (!empty($_POST['bn_save'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    /** This is a feature that allows editing of configuration files. Uncomment this\n        at your own risk, since it is considered a critical security vulnerability if\n        OpenEMR is not configured correctly.\n    // Prepare array of names of editable files, relative to the site directory.\n    $my_files = array(\n    'config.php',\n    'faxcover.txt',\n    'faxtitle.eps',\n    'referral_template.html',\n    'statement.inc.php',\n    'letter_templates/custom_pdf.php',\n    );\n    // Append LBF plugin filenames to the array.\n    $lres = sqlStatement('SELECT grp_form_id FROM layout_group_properties ' .\n    \"WHERE grp_form_id LIKE 'LBF%' AND grp_group_id = '' AND grp_activity = 1 ORDER BY grp_seq, grp_title\");\n    while ($lrow = sqlFetchArray($lres)) {\n    $option_id = $lrow['grp_form_id']; // should start with LBF\n    $my_files[] = \"LBF/$option_id.plugin.php\";\n    }\n    $form_filename = $_REQUEST['form_filename'];\n    // Sanity check to prevent evildoing.\n    if (!in_array($form_filename, $my_files)) {\n    $form_filename = '';\n    }\n    $filepath = \"$OE_SITE_DIR/$form_filename\";\n    if ($form_filename) {\n        // Textareas, at least in Firefox, return a \\r\\n at the end of each line\n        // even though only \\n was originally there.  For consistency with\n        // normal OpenEMR usage we translate those back.\n        file_put_contents($filepath, str_replace(\n            \"\\r\\n\",\n            \"\\n\",\n            $_POST['form_filedata']\n        ));\n        $form_filename = '';\n    }\n    */\n\n    // Handle image uploads.\n    if (is_uploaded_file($_FILES['form_image']['tmp_name']) && $_FILES['form_image']['size']) {\n        $form_dest_filename = $_POST['form_dest_filename'];\n        if ($form_dest_filename == '') {\n            $form_dest_filename = $_FILES['form_image']['name'];\n        }\n\n        $form_dest_filename = basename($form_dest_filename);\n        if ($form_dest_filename == '') {\n            die(xlt('Cannot find a destination filename'));\n        }\n\n        $path_parts = pathinfo($form_dest_filename);\n        if (!in_array(strtolower($path_parts['extension']), array('gif','jpg','jpe','jpeg','png','svg'))) {\n            die(xlt('Only images files are accepted'));\n        }\n\n        $imagepath = \"$imagedir/$form_dest_filename\";\n        // If the site's image directory does not yet exist, create it.\n        if (!is_dir($imagedir)) {\n            mkdir($imagedir);\n        }\n\n        if (is_file($imagepath)) {\n            unlink($imagepath);\n        }\n\n        $tmp_name = $_FILES['form_image']['tmp_name'];\n        if (!move_uploaded_file($_FILES['form_image']['tmp_name'], $imagepath)) {\n            die(xlt('Unable to create') . \" '\" . text($imagepath) . \"'\");\n        }\n    }\n\n    // Handle PDF uploads for patient education.\n    if (is_uploaded_file($_FILES['form_education']['tmp_name']) && $_FILES['form_education']['size']) {\n        $form_dest_filename = $_FILES['form_education']['name'];\n        $form_dest_filename = strtolower(basename($form_dest_filename));\n        if (substr($form_dest_filename, -4) != '.pdf') {\n            die(xlt('Filename must end with \".pdf\"'));\n        }\n\n        $educationpath = \"$educationdir/$form_dest_filename\";\n        // If the site's education directory does not yet exist, create it.\n        if (!is_dir($educationdir)) {\n            mkdir($educationdir);\n        }\n\n        if (is_file($educationpath)) {\n            unlink($educationpath);\n        }\n\n        $tmp_name = $_FILES['form_education']['tmp_name'];\n        if (!move_uploaded_file($tmp_name, $educationpath)) {\n            die(text(xl('Unable to create') . \" '$educationpath'\"));\n        }\n    }\n}\n\n/**\n * Thumbnails generator\n * generating  thumbnail image to all images files from documents table\n */\n\nif (isset($_POST['generate_thumbnails'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $thumb_generator = new ThumbnailGenerator();\n    $results = $thumb_generator->generate_all();\n\n    $thumbnail_msg = \"<p class='text-success'>\" . xlt('Generated thumbnail(s)') . \" : \" . text($results['sum_success']) . \"</p>\";\n    $thumbnail_msg .= \"<p class='text-danger'>\" . xlt('Failed to generate') . \" : \" .  text($results['sum_failed']) . \"</p>\";\n    foreach ($results['failed'] as $key => $file) {\n        $num = $key + 1;\n        $thumbnail_msg .= \"<p class='text-danger' style='font-size: 11px'> \" . text($num) . \". \" . text($file) . \"</p>\";\n    }\n} else {\n    $count_not_generated = ThumbnailGenerator::count_not_generated();\n\n    $thumbnail_msg = \"<p>\" .  xlt('Files with empty thumbnail') . \": \" . text($count_not_generated) . \" </p>\";\n}\n\n\n/**\n * White list files.\n * Security feature that enable to upload only file with mime-type from white list.\n * Important to prevention upload of virus script.\n * Dependence - turn on global setting 'secure_upload'\n */\n\nif ($GLOBALS['secure_upload']) {\n    $mime_types  = array('image/*', 'text/*', 'audio/*', 'video/*');\n\n    // Get cURL resource\n    $curl = curl_init();\n\n    curl_setopt_array($curl, array(\n        CURLOPT_RETURNTRANSFER => 1,\n        CURLOPT_URL => 'https://cdn.rawgit.com/jshttp/mime-db/master/db.json',\n        CURLOPT_CONNECTTIMEOUT => 5,\n        CURLOPT_TIMEOUT => 5\n    ));\n   // Send the request & save response to $resp\n    $resp = curl_exec($curl);\n    $httpinfo = curl_getinfo($curl);\n    if ($resp && $httpinfo['http_code'] == 200 && $httpinfo['content_type'] == 'application/json;charset=utf-8') {\n        $all_mime_types = json_decode($resp, true);\n        foreach ($all_mime_types as $name => $value) {\n            $mime_types[] = $name;\n        }\n    } else {\n        error_log('Get list of mime-type error: \"' . errorLogEscape(curl_error($curl)) . '\" - Code: ' . errorLogEscape(curl_errno($curl)));\n        $mime_types_list = array(\n            'application/pdf',\n            'image/jpeg',\n            'image/png',\n            'image/gif',\n            'application/msword',\n            'application/vnd.oasis.opendocument.spreadsheet',\n            'text/plain'\n        );\n        $mime_types = array_merge($mime_types, $mime_types_list);\n    }\n\n    curl_close($curl);\n\n    if (isset($_POST['submit_form'])) {\n        //verify csrf\n        if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n            CsrfUtils::csrfNotVerified();\n        }\n\n        $new_white_list = empty($_POST['white_list']) ? array() : $_POST['white_list'];\n\n        // truncate white list from list_options table\n        sqlStatement(\"DELETE FROM `list_options` WHERE `list_id` = 'files_white_list'\");\n        foreach ($new_white_list as $mimetype) {\n            sqlStatement(\"INSERT INTO `list_options` (`list_id`, `option_id`, `title`, `activity`)  VALUES ('files_white_list', ?, ?, 1)\", array($mimetype, $mimetype));\n        }\n\n        $white_list = $new_white_list;\n    } else {\n        $white_list = array();\n        $lres = sqlStatement(\"SELECT option_id FROM list_options WHERE list_id = 'files_white_list' AND activity = 1\");\n        while ($lrow = sqlFetchArray($lres)) {\n            $white_list[] = $lrow['option_id'];\n        }\n    }\n}\n\n\n?>\n<html>\n\n<head>\n<title><?php echo xlt('File management'); ?></title>\n\n    <?php Header::setupHeader(); ?>\n\n<style>\n.dehead {\n    font-family: sans-serif;\n    font-size: 0.8125rem;\n    font-weight: bold;\n}\n .detail {\n     font-family: sans-serif;\n     font-size: 0.8125rem;\n     font-weight: normal;\n}\n#generate_thumb {\n     width: 95%;\n     margin: 50px auto;\n     border: 2px solid var(--gray);\n}\n#file_type_whitelist {\n    width: 95%;\n    margin: 50px auto;\n}\n#generate_thumb table {\n     font-size: 14px;\n     text-align: center;\n}\n#generate_thumb table td {\n     border-right: 1px solid var(--gray);\n     padding: 0 15px;\n}\n</style>\n\n<script>\n// This is invoked when a filename selection changes in the drop-list.\n// In this case anything else entered into the form is discarded.\nfunction msfFileChanged() {\n    top.restoreSession();\n    document.forms[0].submit();\n}\n</script>\n\n</head>\n\n<body class=\"body_top\">\n<form method='post' action='manage_site_files.php' enctype='multipart/form-data'\n onsubmit='return top.restoreSession()'>\n<input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n\n<center>\n\n<table class=\"table table-bordered border-dark\">\n\n<?php /** This is a feature that allows editing of configuration files. Uncomment this\nat your own risk, since it is considered a critical security vulnerability if\nOpenEMR is not configured correctly. ?>\n <tr class='bg-light dehead'>\n  <td colspan='2' align='center'><?php echo xlt('Edit File in') . \" \" . text($OE_SITE_DIR); ?></td>\n </tr>\n <tr>\n  <td valign='top' class='detail' nowrap>\n   <select name='form_filename' onchange='msfFileChanged()' class=\"form-control\">\n    <option value=''></option>\n<?php\nforeach ($my_files as $filename) {\n    echo \"    <option value='\" . attr($filename) . \"'\";\n    if ($filename == $form_filename) {\n        echo \" selected\";\n    }\n    echo \">\" . text($filename) . \"</option>\\n\";\n}\n?>\n   </select>\n   <br />\n   <textarea name='form_filedata' rows='25' class=\"w-100 form-control\"><?php\n    if ($form_filename) {\n        echo text(@file_get_contents($filepath));\n    }\n?></textarea>\n  </td>\n </tr>\n<?php */ ?>\n\n <tr class='dehead bg-light'>\n  <td colspan='2' class='text-center'><?php echo text(xl('Upload Image to') . \" $imagedir\"); ?></td>\n </tr>\n\n <tr>\n  <td valign='top' class='detail' nowrap>\n    <?php echo xlt('Source File'); ?>:\n   <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"12000000\" />\n   <input type=\"file\" name=\"form_image\" size=\"40\" />&nbsp;\n    <?php echo xlt('Destination Filename'); ?>:\n   <select name='form_dest_filename' class='form-control'>\n    <option value=''>(<?php echo xlt('Use source filename'); ?>)</option>\n<?php\n  // Generate an <option> for each file already in the images directory.\n  $dh = opendir($imagedir);\nif (!$dh) {\n    die(text(xl('Cannot read directory') . \" '$imagedir'\"));\n}\n\n  $imagesslist = array();\nwhile (false !== ($sfname = readdir($dh))) {\n    if (substr($sfname, 0, 1) == '.') {\n        continue;\n    }\n\n    if ($sfname == 'CVS') {\n        continue;\n    }\n\n    $imageslist[$sfname] = $sfname;\n}\n\n  closedir($dh);\n  ksort($imageslist);\nforeach ($imageslist as $sfname) {\n    echo \"    <option value='\" . attr($sfname) . \"'\";\n    echo \">\" . text($sfname) . \"</option>\\n\";\n}\n?>\n   </select>\n  </td>\n </tr>\n\n <tr class='dehead bg-light'>\n  <td colspan='2' align='center'><?php echo text(xl('Upload Patient Education PDF to') . \" $educationdir\"); ?></td>\n </tr>\n <tr>\n  <td valign='top' class='detail' nowrap>\n    <?php echo xlt('Source File'); ?>:\n   <input type=\"file\" name=\"form_education\" size=\"40\" />&nbsp;\n    <?php echo xlt('Name must be like codetype_code_language.pdf, for example icd9_274.11_en.pdf'); ?>\n  </td>\n </tr>\n\n</table>\n\n<input type='submit' class=\"btn btn-primary\" name='bn_save' value='<?php echo xla('Save'); ?>' />\n\n</center>\n\n</form>\n\n<div id=\"generate_thumb\">\n    <table class=\"w-100\">\n        <tr>\n            <td class=\"thumb_title\" style=\"width: 33%\">\n                <strong><?php echo xlt('Generate Thumbnails')?></strong>\n            </td>\n            <td class=\"thumb_msg\" style=\"width: 50%\">\n                <span><?php echo $thumbnail_msg ?></span>\n            </td>\n            <td  class=\"thumb_form\" style=\"width: 17%; border-right: none\">\n                <form method='post' action='manage_site_files.php#generate_thumb'>\n                    <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n                    <input style=\"margin-top: 10px\" class=\"btn btn-primary\" type=\"submit\" name=\"generate_thumbnails\" value=\"<?php echo xla('Generate') ?>\" />\n                </form>\n            </td>\n        </tr>\n    </table>\n</div>\n\n<?php if ($GLOBALS['secure_upload']) { ?>\n<div id=\"file_type_whitelist\">\n    <h2><?php echo xlt('Create custom white list of MIME content type of a files to secure your documents system');?></h2>\n    <form id=\"whitelist_form\" method=\"post\">\n        <div class=\"subject-black-list\">\n            <div class=\"top-list\">\n                <h2 class=\"text-center\"><?php echo xlt('Black list'); ?></h2>\n                <div class=\"form-row align-items-center\">\n                    <div class=\"col-2\">\n                        <label for=\"filter-black-list\" class=\"font-weight-bold\"><?php echo xlt('Filter');?>:</label>\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"text\" id=\"filter-black-list\" class=\"form-control\" />\n                    </div>\n                </div>\n            </div>\n            <select multiple=\"multiple\" id='black-list' class=\"form-control\">\n                <?php\n                foreach ($mime_types as $type) {\n                    if (!in_array($type, $white_list)) {\n                        echo \"<option value='\" . attr($type) . \"'> \" . text($type) . \"</option>\";\n                    }\n                }\n                ?>\n            </select>\n        </div>\n\n        <div class=\"subject-info-arrows\">\n            <input type=\"button\" id=\"btnAllRight\" value=\">>\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnRight\" value=\">\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnLeft\" value=\"<\" class=\"btn btn-secondary btn-sm\" /><br />\n            <input type=\"button\" id=\"btnAllLeft\" value=\"<<\" class=\"btn btn-secondary btn-sm\" />\n        </div>\n\n        <div class=\"subject-white-list\">\n            <div class=\"top-list\">\n                <h2 class=\"text-center\"><?php echo xlt('White list'); ?></h2>\n                <div class=\"form-row\">\n                    <div class=\"col-2\">\n                        <label><?php echo xlt('Add manually');?>:</label>\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"text\" id=\"add-manually-input\" class=\"form-control\" />\n                    </div>\n                    <div class=\"col\">\n                        <input type=\"button\" class=\"btn btn-primary\" id=\"add-manually\" value=\"+\" />\n                    </div>\n                </div>\n            </div>\n            <select name=\"white_list[]\" multiple=\"multiple\" id='white-list' class=\"form-control\">\n                <?php\n                foreach ($white_list as $type) {\n                    echo \"<option value='\" . attr($type) . \"'> \" . text($type) . \"</option>\";\n                }\n                ?>\n            </select>\n        </div>\n        <div class=\"subject-info-save\">\n            <input type=\"button\" id=\"submit-whitelist\" class=\"btn btn-primary\" value=\"<?php echo xla('Save'); ?>\" />\n            <input type=\"hidden\" name=\"submit_form\" value=\"1\" />\n            <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n        </div>\n    </form>\n\n</div>\n\n<script>\n\n    (function () {\n        $('#btnRight').click(function (e) {\n            var selectedOpts = $('#black-list option:selected');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#white-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnAllRight').click(function (e) {\n            var selectedOpts = $('#black-list option');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#white-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnLeft').click(function (e) {\n            var selectedOpts = $('#white-list option:selected');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#black-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        $('#btnAllLeft').click(function (e) {\n            var selectedOpts = $('#white-list option');\n            if (selectedOpts.length == 0) {\n                e.preventDefault();\n            }\n\n            $('#black-list').append($(selectedOpts).clone());\n            $(selectedOpts).remove();\n            e.preventDefault();\n        });\n\n        var storeElements = [];\n\n        $('#filter-black-list').on('keyup', function() {\n            var val = this.value.toLowerCase();\n\n            $('#black-list  option').each(function(){\n\n                if(this.value.toLowerCase().indexOf( val ) == -1){\n                    if(storeElements.indexOf(this) == -1){\n                        storeElements.unshift(this)\n                    }\n                    $(this).remove();\n                }\n            });\n\n            $(storeElements).each(function(key, element){\n\n                if(element.value.toLowerCase().indexOf( val ) > -1){\n\n                    $('#black-list').prepend(element);\n                    storeElements.splice(key, 1)\n                }\n\n            });\n\n        });\n\n        $('#add-manually').on('click', function () {\n            var new_type = $(\"#add-manually-input\").val();\n            if(new_type.length < 1)return;\n            $('#white-list').prepend(\"<option value='\" + jsAttr(new_type) + \"'>\" + jsText(new_type) + \"</option>\")\n        })\n\n        $('#submit-whitelist').on('click', function () {\n            $('#white-list option').prop('selected', true);\n            $('#whitelist_form').submit();\n        })\n\n    }(jQuery));\n\n</script>\n\n\n<?php } ?>\n\n</body>\n</html>\n"], "filenames": ["interface/super/manage_site_files.php"], "buggy_code_start_loc": [540], "buggy_code_end_loc": [541], "fixing_code_start_loc": [540], "fixing_code_end_loc": [541], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository openemr/openemr prior to 7.0.0.1.", "other": {"cve": {"id": "CVE-2022-2729", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-09T12:15:08.170", "lastModified": "2022-08-12T14:17:06.250", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository openemr/openemr prior to 7.0.0.1."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - DOM en el repositorio de GitHub openemr/openemr versiones anteriores a 7.0.0.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.1", "matchCriteriaId": "5BE76D51-2D38-44E8-9ED0-630F49F42168"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/74d21039aec641b2c406e3baf238ae4602a968b6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/13b58e74-2dd0-4eec-9f3a-554485701540", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/74d21039aec641b2c406e3baf238ae4602a968b6"}}