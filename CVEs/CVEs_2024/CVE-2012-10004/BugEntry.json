{"buggy_code": ["<?php\n\n/**\n * @file\n * Basic cart admin settings forms\n */\n\n/**\n * Callback for the admin configuration page\n */\nfunction basic_cart_admin_content_type() {\n  $node_types = node_type_get_types();\n  if (empty($node_types)) {\n    return NULL;\n  }\n\n  $options = array();\n  foreach ($node_types as $node_type => $type) {\n    $options[$node_type] = check_plain($type->name);\n  }\n\n  $form['content_type'] = array(\n    '#title' => t('Content type selection'),\n    '#type' => 'fieldset',\n    '#description' => t('Please select the content types for which you wish to have the \"Add to cart\" option.'),\n  );\n\n  $form['content_type']['types'] = array(\n    '#title' => t('Content types'),\n    '#type' => 'checkboxes',\n    '#options' => $options,\n    '#default_value' => variable_get('basic_cart_content_types', array()),\n  );\n\n  $form['messages'] = array(\n    '#title' => t('Email messages'),\n    '#type' => 'fieldset',\n    '#description' => t('Here you can customize the mails sent to the site administrator and customer, after an order is placed.'),\n  );\n\n  $form['messages']['admin_subject'] = array(\n    '#title' => t('Subject'),\n    '#type' => 'textfield',\n    '#description' => t(\"Subject field for the administrator's email.\"),\n    '#default_value' => variable_get('basic_cart_admin_subject'),\n  );\n\n  $form['messages']['admin_message'] = array(\n    '#title' => t('Admin email'),\n    '#type' => 'textarea',\n    '#description' => t('This email will be sent to the site administrator just after an order is placed. Availabale tokes: %CUSTOMER_NAME, %CUSTOMER_EMAIL, %CUSTOMER_PHONE, %CUSTOMER_ADDRESS, %CUSTOMER_MESSAGE, %ORDER_DETAILS'),\n    '#default_value' => variable_get('basic_cart_admin_message'),\n  );\n\n  $form['messages']['send_user_message'] = array(\n    '#title' => t('Send an email to the customer after an order is placed'),\n    '#type' => 'checkbox',\n    '#default_value' => variable_get('basic_cart_send_user_message'),\n  );\n\n  $form['messages']['user_subject'] = array(\n    '#title' => t('Subject'),\n    '#type' => 'textfield',\n    '#description' => t(\"Subject field for the user's email.\"),\n    '#default_value' => variable_get('basic_cart_user_subject'),\n  );\n\n  $form['messages']['user_message'] = array(\n    '#title' => t('User email'),\n    '#type' => 'textarea',\n    '#description' => t('This email will be sent to the user just after an order is placed. Availabale tokes: %CUSTOMER_NAME, %CUSTOMER_EMAIL, %CUSTOMER_PHONE, %CUSTOMER_ADDRESS, %CUSTOMER_MESSAGE, %ORDER_DETAILS'),\n    '#default_value' => variable_get('basic_cart_user_message'),\n  );\n\n  $form['thank_you'] = array(\n    '#title' => t('Thank you page'),\n    '#type' => 'fieldset',\n    '#description' => t('Here you can customize the thank you page.'),\n  );\n\n  $form['thank_you']['thank_you_title'] = array(\n    '#title' => t('Title'),\n    '#type' => 'textfield',\n    '#description' => t('Thank you page title.'),\n    '#default_value' => variable_get('basic_cart_thank_you_title'),\n  );\n\n  $form['thank_you']['thank_you_message'] = array(\n    '#title' => t('Text'),\n    '#type' => 'textarea',\n    '#description' => t('Thank you page text.'),\n    '#default_value' => variable_get('basic_cart_thank_you_message'),\n  );\n\n  $form['save'] = array(\n    '#type' => 'submit',\n    '#value' => t('Save configuration'),\n  );\n\n  return $form;\n}\n\n\n/**\n * Callback for the admin configuration page submit function\n */\nfunction basic_cart_admin_content_type_submit($form_id, $form_state) {\n  $types = $form_state['values']['types'];\n  $selected_types = array();\n  foreach ($types as $type) {\n    if (!empty($type)) {\n      $selected_types[] = $type;\n    }\n  }\n\n  // Content types.\n  variable_set('basic_cart_content_types', $selected_types);\n\n  // Admin message.\n  variable_set('basic_cart_admin_message', $form_state['values']['admin_message']);\n  variable_set('basic_cart_admin_subject', $form_state['values']['admin_subject']);\n\n  // User message.\n  variable_set('basic_cart_send_user_message', $form_state['values']['send_user_message']);\n  variable_set('basic_cart_user_message', $form_state['values']['user_message']);\n  variable_set('basic_cart_user_subject', $form_state['values']['user_subject']);\n\n  // Thank you message.\n  variable_set('basic_cart_thank_you_title', $form_state['values']['thank_you_title']);\n  variable_set('basic_cart_thank_you_message', $form_state['values']['thank_you_message']);\n\n  // Message.\n  drupal_set_message(t('The configuration options have been saved.'));\n}\n", "<?php\n\n/**\n * @file\n * Basic cart shopping cart implementation functions\n */\n\n/**\n * Callback function for cart listing.\n */\nfunction basic_cart_cart() {\n  $cart = basic_cart_get_cart();\n  if (!empty($cart)) {\n    foreach ($cart as $nid => $node) {\n      $body = field_get_items('node', $node, 'body');\n      $description = isset($body[0]['value']) ? check_plain($body[0]['value']) : '';\n      $cart[$nid]->basic_cart_node_description = $description;\n    }\n  }\n  $form = drupal_get_form('basic_cart_cart_form');\n  return theme('basic_cart_cart_render', array('cart' => $cart, 'is_checkout' => FALSE, 'form' => $form));\n}\n\n/**\n * Shopping cart form.\n */\nfunction basic_cart_cart_form() {\n  $cart = basic_cart_get_cart();\n  if (is_array($cart) && !empty($cart)) {\n    foreach ($cart as $nid => $node) {\n      $form['quantity_nid_' . $nid] = array(\n        '#type' => 'textfield',\n        '#size' => 1,\n        '#default_value' => $node->basic_cart_quantity,\n      );\n    }\n\n    $form['update'] = array(\n      '#type' => 'submit',\n      '#value' => t('Update'),\n    );\n\n    $form['checkout'] = array(\n      '#type' => 'submit',\n      '#value' => t('Checkout'),\n    );\n\n    return $form;\n  }\n}\n\n/**\n * Shopping cart form.\n */\nfunction basic_cart_cart_form_submit($form_id, $form_state) {\n  foreach ($form_state['values'] as $field => $value) {\n    if (strpos($field, 'quantity_nid_') !== FALSE) {\n      $nid = (int) str_replace('quantity_nid_', '', $field);\n      $quantity = (int) $value;\n      if ($quantity > 0) {\n        $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity = $quantity;\n      }\n      // If the quantity is zero, we just remove the node from the cart.\n      elseif ($quantity == 0) {\n        unset($_SESSION['basic_cart']['cart'][$nid]);\n      }\n    }\n  }\n\n  if ($form_state['values']['op'] == t('Checkout')) {\n    drupal_goto('checkout');\n  }\n  else {\n    drupal_set_message(t('Shopping cart updated.'));\n  }\n}\n\n/**\n * Callback function for cart/add/.\n *\n * @param int $nid\n *   We are using the node id to store the node in the shopping cart\n */\nfunction basic_cart_add_to_cart($nid = NULL) {\n  $nid = (int) $nid;\n  if ($nid > 0) {\n    // If a node is added more times, just update the quantity.\n    $cart = basic_cart_get_cart();\n    if (!empty($cart) && in_array($nid, array_keys($cart))) {\n      $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity++;\n    }\n    else {\n      // Slower, but easyer to implement.\n      $node = node_load($nid);\n      $node->basic_cart_quantity = 1;\n      $_SESSION['basic_cart']['cart'][$nid] = $node;\n    }\n\n  }\n  drupal_goto('cart');\n}\n\n/**\n * Callback function for cart/remove/.\n *\n * @param int $nid\n *   We are using the node id to remove the node in the shopping cart\n */\nfunction basic_cart_remove_from_cart($nid = NULL) {\n  $nid = (int) $nid;\n  if ($nid > 0) {\n    unset($_SESSION['basic_cart']['cart'][$nid]);\n  }\n  drupal_goto('cart');\n}\n\n/**\n * Function for shopping cart retrieval.\n *\n * @param int $nid\n *   We are using the node id to store the node in the shopping cart\n *\n * @return mixed\n *   Returning the shopping cart contents.\n *   An empty array if there is nothing in the cart\n */\nfunction basic_cart_get_cart($nid = NULL) {\n  if (isset($nid)) {\n    return $_SESSION['basic_cart']['cart'][$nid];\n  }\n  if (isset($_SESSION['basic_cart']['cart'])) {\n    return $_SESSION['basic_cart']['cart'];\n  }\n  // Empty cart.\n  return array();\n}\n\n/**\n * Shopping cart reset.\n */\nfunction basic_cart_empty_cart() {\n  unset($_SESSION['basic_cart']['cart']);\n}\n\n/**\n * Checkout\n */\n\n/**\n * Checkout form implementation.\n */\nfunction basic_cart_checkout() {\n  $cart = theme('basic_cart_cart_render', array('cart' => basic_cart_get_cart(), 'is_checkout' => TRUE));\n  $form = drupal_render(drupal_get_form('basic_cart_checkout_form'));\n  // If the cart is empty, we don't want to show the checkout form.\n  $shopping_cart = basic_cart_get_cart();\n  if (empty($shopping_cart)) {\n    return $cart;\n  }\n  return $cart . $form;\n}\n\n/**\n * Checkout form.\n */\nfunction basic_cart_checkout_form() {\n  $form['basic_cart_checkout_name'] = array(\n    '#title' => t('Name'),\n    '#type' => 'textfield',\n    '#required' => TRUE,\n    '#description' => t('Please enter your name.'),\n  );\n\n  $form['basic_cart_checkout_email'] = array(\n    '#title' => t('Email'),\n    '#type' => 'textfield',\n    '#required' => TRUE,\n    '#description' => t('Please enter your email.'),\n  );\n\n  $form['basic_cart_checkout_phone'] = array(\n    '#title' => t('Phone'),\n    '#type' => 'textfield',\n    '#description' => t('Please enter your phone.'),\n  );\n\n  $form['basic_cart_checkout_address'] = array(\n    '#title' => t('Address'),\n    '#type' => 'textfield',\n    '#description' => t('Please enter your address.'),\n  );\n\n  $form['basic_cart_checkout_message'] = array(\n    '#title' => t('Message'),\n    '#type' => 'textarea',\n    '#description' => t('If you have something to tell us, please fill the message area.'),\n  );\n\n  $form['basic_cart_checkout_submit'] = array(\n    '#type' => 'submit',\n    '#value' => t('Submit order'),\n  );\n\n  return $form;\n}\n\n/**\n * Checkout form validation.\n */\nfunction basic_cart_checkout_form_validate($form, &$form_state) {\n  if (!valid_email_address($form_state['values']['basic_cart_checkout_email'])) {\n    form_set_error('basic_cart_checkout_email', t('Please enter a valid email address.'));\n  }\n}\n\n/**\n * Checkout form submit proccess.\n * Sending the 2 mails.\n */\nfunction basic_cart_checkout_form_submit($form, &$form_state) {\n  // %ORDER_DETAILS% placeholder.\n  $order_details = '';\n  $cart = basic_cart_get_cart();\n  foreach ($cart as $nid => $node) {\n    $order_details .= $node->basic_cart_quantity . ' x ' . $node->title . \"\\n\";\n  }\n  $order_details .= \"\\n\";\n  // Pleaceholder replacement.\n  $search = array('%CUSTOMER_NAME', '%CUSTOMER_EMAIL', '%CUSTOMER_PHONE', '%CUSTOMER_ADDRESS', '%CUSTOMER_MESSAGE', '%ORDER_DETAILS');\n  $replace = array(\n    $form_state['values']['basic_cart_checkout_name'], $form_state['values']['basic_cart_checkout_email'],\n    $form_state['values']['basic_cart_checkout_phone'], $form_state['values']['basic_cart_checkout_address'],\n    $form_state['values']['basic_cart_checkout_message'], $order_details,\n  );\n\n  // Admin mail.\n  $message_html = variable_get('basic_cart_admin_message');\n  $message_html = str_replace($search, $replace, $message_html);\n\n  // Sending mail.\n  $my_module = 'basic_cart';\n  $my_mail_token = 'checkout';\n  $from = variable_get('site_mail');\n\n  $message = array(\n    'id' => $my_module . '_' . $my_mail_token,\n    'to' => $from,\n    'subject' => variable_get('basic_cart_admin_subject'),\n    'body' => $message_html,\n    'headers' => array(\n      'From' => $from,\n      'Sender' => $from,\n      'Return-Path' => $from,\n    ),\n  );\n  $system = drupal_mail_system($my_module, $my_mail_token);\n  $mails_sent = 0;\n  if ($system->mail($message)) {\n    $mails_sent++;\n  }\n  // User email.\n  $send_user_mail = variable_get('basic_cart_send_user_message');\n  if ($send_user_mail) {\n    $message_html = variable_get('basic_cart_user_message');\n    $message_html = str_replace($search, $replace, $message_html);\n\n    $message = array(\n      'id' => $my_module . '_' . $my_mail_token,\n      'to' => $form_state['values']['basic_cart_checkout_email'],\n      'subject' => variable_get('basic_cart_user_subject'),\n      'body' => $message_html,\n      'headers' => array(\n        'From' => $from,\n        'Sender' => $from,\n        'Return-Path' => $from,\n      ),\n    );\n    $system = drupal_mail_system($my_module, $my_mail_token);\n    if ($system->mail($message)) {\n      $mails_sent++;\n    }\n  }\n\n  if ($mails_sent == 2) {\n    basic_cart_empty_cart();\n    drupal_goto('checkout/thank-you');\n  }\n  else {\n    drupal_set_message(t('There was a problem in submitting your order. Please try again later.'), 'error');\n  }\n}\n\n/**\n * Callback for thank you page.\n */\nfunction basic_cart_checkout_thank_you() {\n  $title = variable_get('basic_cart_thank_you_title');\n  drupal_set_title($title);\n  $message = variable_get('basic_cart_thank_you_message');\n  return nl2br($message);\n}\n", "<?php\n/**\n * @file\n * Basic cart shopping cart html template\n */\n?>\n\n<?php if( empty($cart) ): ?>\n  <p><?php print t('Your shopping cart is empty.'); ?></p>\n<?php else: ?>\n  <form accept-charset=\"UTF-8\" id=\"basic-cart-cart-form\" method=\"post\">\n  <div class=\"basic-cart-cart basic-cart-grid\">\n    <?php if(is_array($cart) && count($cart) >= 1): ?>\n      <?php foreach($cart as $nid => $node): ?>\n        <div class=\"basic-cart-cart-contents row\">\n\n            <div class=\"basic-cart-cart-quantity cell\">\n              <?php if(!$is_checkout): ?>\n                <div class=\"cell\"><?php print drupal_render($form['quantity_nid_' . $nid]); ?></div>\n              <?php else: ?>\n                <div class=\"cell\"><?php print $node->basic_cart_quantity; ?></div>\n              <?php endif; ?>\n              <div class=\"cell basic-cart-cart-x\">x</div>\n            </div>\n\n            <div class=\"basic-cart-cart-node-title cell\">\n              <?php print l($node->title, 'node/' . $node->nid); ?><br />\n              <span class=\"basic-cart-cart-node-summary\">\n                <?php if(drupal_strlen($node->basic_cart_node_description) > 50): ?>\n                  <?php print truncate_utf8($node->basic_cart_node_description, 50); ?> ... \n                <?php else: ?>\n                  <?php print $node->basic_cart_node_description; ?>\n                <?php endif; ?>\n              </span>\n            </div>\n          \n            <?php if(!$is_checkout): ?>\n              <div class=\"basic-cart-delete-image cell\">\n                <?php print l('<img src=\"' . $base_path . drupal_get_path('module', 'basic_cart') . '/images/delete.gif\" border=\"0\" />', 'cart/remove/' . $nid, array('html' => TRUE)); ?>\n              </div>\n            <?php endif; ?>\n        </div>\n      <?php endforeach; ?>\n      <?php if(!$is_checkout): ?>\n        <div class=\"basic-cart-cart-checkout-button row\">\n          <?php print drupal_render($form['update']); ?>\n          <?php print drupal_render($form['checkout']); ?>\n        </div>\n      <?php endif; ?>\n    <?php endif; ?>\n  </div>\n  <?php print drupal_render($form); ?>\n  </form>\n<?php endif; ?>\n", "<?php\n/**\n * @file\n * Basic cart shopping cart block\n */\n?>\n\n<?php if( empty($cart) ): ?>\n  <p><?php print t('Your cart is empty.'); ?></p>\n<?php else: ?>\n  <div class=\"basic-cart-grid\">\n    <?php if(is_array($cart) && count($cart) >= 1): ?>\n      <?php foreach($cart as $nid => $node): ?>\n        <div class=\"basic-cart-cart-contents row\">\n            <div class=\"basic-cart-cart-quantity cell\"><?php print $node->basic_cart_quantity; ?> x </div>\n            <div class=\"basic-cart-cart-node-title cell\"><?php print l($node->title, 'node/' . $node->nid); ?></div>\n        </div>\n      <?php endforeach; ?>\n      <div class=\"basic-cart-cart-checkout-button basic-cart-cart-checkout-button-block row\">\n        <?php print l(t('View cart'), 'cart', array('attributes' => array('class' => array('button')))); ?>\n      </div>\n    <?php endif; ?>\n  </div>\n<?php endif; ?>\n"], "fixing_code": ["<?php\n\n/**\n * @file\n * Basic cart admin settings forms\n */\n\n/**\n * Callback for the admin configuration page\n */\nfunction basic_cart_admin_content_type() {\n  $node_types = node_type_get_types();\n  if (empty($node_types)) {\n    return NULL;\n  }\n\n  $options = array();\n  foreach ($node_types as $node_type => $type) {\n    $options[$node_type] = check_plain($type->name);\n  }\n\n  $form['content_type'] = array(\n    '#title' => t('Content type selection'),\n    '#type' => 'fieldset',\n    '#description' => t('Please select the content types for which you wish to have the \"Add to cart\" option.'),\n  );\n\n  $form['content_type']['basic_cart_content_types'] = array(\n    '#title' => t('Content types'),\n    '#type' => 'checkboxes',\n    '#options' => $options,\n    '#default_value' => variable_get('basic_cart_content_types', array()),\n  );\n\n  $form['messages'] = array(\n    '#title' => t('Email messages'),\n    '#type' => 'fieldset',\n    '#description' => t('Here you can customize the mails sent to the site administrator and customer, after an order is placed.'),\n  );\n\n  $form['messages']['basic_cart_admin_subject'] = array(\n    '#title' => t('Subject'),\n    '#type' => 'textfield',\n    '#description' => t(\"Subject field for the administrator's email.\"),\n    '#default_value' => variable_get('basic_cart_admin_subject'),\n  );\n\n  $form['messages']['basic_cart_admin_message'] = array(\n    '#title' => t('Admin email'),\n    '#type' => 'textarea',\n    '#description' => t('This email will be sent to the site administrator just after an order is placed. Availabale tokes: %CUSTOMER_NAME, %CUSTOMER_EMAIL, %CUSTOMER_PHONE, %CUSTOMER_ADDRESS, %CUSTOMER_MESSAGE, %ORDER_DETAILS'),\n    '#default_value' => variable_get('basic_cart_admin_message'),\n  );\n\n  $form['messages']['basic_cart_send_user_message'] = array(\n    '#title' => t('Send an email to the customer after an order is placed'),\n    '#type' => 'checkbox',\n    '#default_value' => variable_get('basic_cart_send_user_message'),\n  );\n\n  $form['messages']['basic_cart_user_subject'] = array(\n    '#title' => t('Subject'),\n    '#type' => 'textfield',\n    '#description' => t(\"Subject field for the user's email.\"),\n    '#default_value' => variable_get('basic_cart_user_subject'),\n  );\n\n  $form['messages']['basic_cart_user_message'] = array(\n    '#title' => t('User email'),\n    '#type' => 'textarea',\n    '#description' => t('This email will be sent to the user just after an order is placed. Availabale tokes: %CUSTOMER_NAME, %CUSTOMER_EMAIL, %CUSTOMER_PHONE, %CUSTOMER_ADDRESS, %CUSTOMER_MESSAGE, %ORDER_DETAILS'),\n    '#default_value' => variable_get('basic_cart_user_message'),\n  );\n\n  $form['thank_you'] = array(\n    '#title' => t('Thank you page'),\n    '#type' => 'fieldset',\n    '#description' => t('Here you can customize the thank you page.'),\n  );\n\n  $form['thank_you']['basic_cart_thank_you_title'] = array(\n    '#title' => t('Title'),\n    '#type' => 'textfield',\n    '#description' => t('Thank you page title.'),\n    '#default_value' => variable_get('basic_cart_thank_you_title'),\n  );\n\n  $form['thank_you']['basic_cart_thank_you_message'] = array(\n    '#title' => t('Text'),\n    '#type' => 'textarea',\n    '#description' => t('Thank you page text.'),\n    '#default_value' => variable_get('basic_cart_thank_you_message'),\n  );\n\n  return system_settings_form($form);\n}\n", "<?php\n\n/**\n * @file\n * Basic cart shopping cart implementation functions\n */\n\n/**\n * Callback function for cart listing.\n */\nfunction basic_cart_cart() {\n  $cart = basic_cart_get_cart();\n  if (!empty($cart)) {\n    foreach ($cart as $nid => $node) {\n      $body = field_get_items('node', $node, 'body');\n      $description = isset($body[0]['value']) ? check_plain($body[0]['value']) : '';\n      $cart[$nid]->basic_cart_node_description = $description;\n    }\n  }\n  $form = drupal_get_form('basic_cart_cart_form');\n  return theme('basic_cart_cart_render', array('cart' => $cart, 'is_checkout' => FALSE, 'form' => $form));\n}\n\n/**\n * Shopping cart form.\n */\nfunction basic_cart_cart_form() {\n  $cart = basic_cart_get_cart();\n  if (is_array($cart) && !empty($cart)) {\n    foreach ($cart as $nid => $node) {\n      $form['quantity_nid_' . $nid] = array(\n        '#type' => 'textfield',\n        '#size' => 1,\n        '#default_value' => $node->basic_cart_quantity,\n      );\n    }\n\n    $form['update'] = array(\n      '#type' => 'submit',\n      '#value' => t('Update'),\n    );\n\n    $form['checkout'] = array(\n      '#type' => 'submit',\n      '#value' => t('Checkout'),\n    );\n\n    return $form;\n  }\n}\n\n/**\n * Shopping cart form.\n */\nfunction basic_cart_cart_form_submit($form_id, $form_state) {\n  foreach ($form_state['values'] as $field => $value) {\n    if (strpos($field, 'quantity_nid_') !== FALSE) {\n      $nid = (int) str_replace('quantity_nid_', '', $field);\n      $quantity = (int) $value;\n      if ($quantity > 0) {\n        $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity = $quantity;\n      }\n      // If the quantity is zero, we just remove the node from the cart.\n      elseif ($quantity == 0) {\n        unset($_SESSION['basic_cart']['cart'][$nid]);\n      }\n    }\n  }\n\n  if ($form_state['values']['op'] == t('Checkout')) {\n    drupal_goto('checkout');\n  }\n  else {\n    drupal_set_message(t('Shopping cart updated.'));\n  }\n}\n\n/**\n * Callback function for cart/add/.\n *\n * @param int $nid\n *   We are using the node id to store the node in the shopping cart\n */\nfunction basic_cart_add_to_cart($nid = NULL) {\n  $nid = (int) $nid;\n  if ($nid > 0) {\n    // If a node is added more times, just update the quantity.\n    $cart = basic_cart_get_cart();\n    if (!empty($cart) && in_array($nid, array_keys($cart))) {\n      $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity++;\n    }\n    else {\n      // Slower, but easyer to implement.\n      $node = node_load($nid);\n      $node->basic_cart_quantity = 1;\n      $_SESSION['basic_cart']['cart'][$nid] = $node;\n    }\n\n  }\n  drupal_goto('cart');\n}\n\n/**\n * Callback function for cart/remove/.\n *\n * @param int $nid\n *   We are using the node id to remove the node in the shopping cart\n */\nfunction basic_cart_remove_from_cart($nid = NULL) {\n  $nid = (int) $nid;\n  if ($nid > 0) {\n    unset($_SESSION['basic_cart']['cart'][$nid]);\n  }\n  drupal_goto('cart');\n}\n\n/**\n * Function for shopping cart retrieval.\n *\n * @param int $nid\n *   We are using the node id to store the node in the shopping cart\n *\n * @return mixed\n *   Returning the shopping cart contents.\n *   An empty array if there is nothing in the cart\n */\nfunction basic_cart_get_cart($nid = NULL) {\n  if (isset($nid)) {\n    return $_SESSION['basic_cart']['cart'][$nid];\n  }\n  if (isset($_SESSION['basic_cart']['cart'])) {\n    return $_SESSION['basic_cart']['cart'];\n  }\n  // Empty cart.\n  return array();\n}\n\n/**\n * Shopping cart reset.\n */\nfunction basic_cart_empty_cart() {\n  unset($_SESSION['basic_cart']['cart']);\n}\n\n/**\n * Checkout\n */\n\n/**\n * Checkout form implementation.\n */\nfunction basic_cart_checkout() {\n  $cart = theme('basic_cart_cart_render', array('cart' => basic_cart_get_cart(), 'is_checkout' => TRUE));\n  $form = drupal_render(drupal_get_form('basic_cart_checkout_form'));\n  // If the cart is empty, we don't want to show the checkout form.\n  $shopping_cart = basic_cart_get_cart();\n  if (empty($shopping_cart)) {\n    return $cart;\n  }\n  return $cart . $form;\n}\n\n/**\n * Checkout form.\n */\nfunction basic_cart_checkout_form() {\n  $form['basic_cart_checkout_name'] = array(\n    '#title' => t('Name'),\n    '#type' => 'textfield',\n    '#required' => TRUE,\n    '#description' => t('Please enter your name.'),\n  );\n\n  $form['basic_cart_checkout_email'] = array(\n    '#title' => t('Email'),\n    '#type' => 'textfield',\n    '#required' => TRUE,\n    '#description' => t('Please enter your email.'),\n  );\n\n  $form['basic_cart_checkout_phone'] = array(\n    '#title' => t('Phone'),\n    '#type' => 'textfield',\n    '#description' => t('Please enter your phone.'),\n  );\n\n  $form['basic_cart_checkout_address'] = array(\n    '#title' => t('Address'),\n    '#type' => 'textfield',\n    '#description' => t('Please enter your address.'),\n  );\n\n  $form['basic_cart_checkout_message'] = array(\n    '#title' => t('Message'),\n    '#type' => 'textarea',\n    '#description' => t('If you have something to tell us, please fill the message area.'),\n  );\n\n  $form['basic_cart_checkout_submit'] = array(\n    '#type' => 'submit',\n    '#value' => t('Submit order'),\n  );\n\n  return $form;\n}\n\n/**\n * Checkout form validation.\n */\nfunction basic_cart_checkout_form_validate($form, &$form_state) {\n  if (!valid_email_address($form_state['values']['basic_cart_checkout_email'])) {\n    form_set_error('basic_cart_checkout_email', t('Please enter a valid email address.'));\n  }\n}\n\n/**\n * Checkout form submit proccess.\n * Sending the 2 mails.\n */\nfunction basic_cart_checkout_form_submit($form, &$form_state) {\n  // %ORDER_DETAILS% placeholder.\n  $order_details = '';\n  $cart = basic_cart_get_cart();\n  foreach ($cart as $nid => $node) {\n    $order_details .= $node->basic_cart_quantity . ' x ' . $node->title . \"\\n\";\n  }\n  $order_details .= \"\\n\";\n  // Pleaceholder replacement.\n  $search = array('%CUSTOMER_NAME', '%CUSTOMER_EMAIL', '%CUSTOMER_PHONE', '%CUSTOMER_ADDRESS', '%CUSTOMER_MESSAGE', '%ORDER_DETAILS');\n  $replace = array(\n    $form_state['values']['basic_cart_checkout_name'], $form_state['values']['basic_cart_checkout_email'],\n    $form_state['values']['basic_cart_checkout_phone'], $form_state['values']['basic_cart_checkout_address'],\n    $form_state['values']['basic_cart_checkout_message'], $order_details,\n  );\n\n  // Admin mail.\n  $message_html = variable_get('basic_cart_admin_message');\n  $message_html = str_replace($search, $replace, $message_html);\n  $params['admin_message'] = filter_xss($message_html);\n\n  $site_mail = variable_get('site_mail');\n\n  // Sending mail.\n  $message = drupal_mail('basic_cart', 'admin_mail', $site_mail, language_default(), $params);\n\n  $mails_sent = 0;\n  if ($message['result']) {\n    $mails_sent++;\n  }\n  \n  // User email.\n  $send_user_mail = variable_get('basic_cart_send_user_message');\n  if ($send_user_mail) {\n    $message_html = variable_get('basic_cart_user_message');\n    $message_html = str_replace($search, $replace, $message_html);\n    $params['user_message'] = filter_xss($message_html);\n\n    // Sending mail.\n    $message = drupal_mail('basic_cart', 'user_mail', $form_state['values']['basic_cart_checkout_email'], language_default(), $params);\n\n    if ($message['result']) {\n      $mails_sent++;\n    }\n  }\n\n  if ($mails_sent == 2) {\n    basic_cart_empty_cart();\n    drupal_goto('checkout/thank-you');\n  }\n  else {\n    drupal_set_message(t('There was a problem in submitting your order. Please try again later.'), 'error');\n  }\n}\n\n\n/**\n * Implements hook_mail().\n */\nfunction basic_cart_mail($key, &$message, $params) {\n  switch($key) {\n    case 'admin_mail':\n      $message['subject'] = check_plain(variable_get('basic_cart_admin_subject'));\n      $message['body'][] = $params['admin_message'];\n      break;\n\n    case 'user_mail':\n      $message['subject'] = check_plain(variable_get('basic_cart_user_subject'));\n      $message['body'][] = $params['user_message'];\n      break;\n  }\n}\n\n/**\n * Callback for thank you page.\n */\nfunction basic_cart_checkout_thank_you() {\n  $title = variable_get('basic_cart_thank_you_title');\n  drupal_set_title($title);\n  $message = variable_get('basic_cart_thank_you_message');\n  return nl2br(filter_xss($message));\n}\n", "<?php\n/**\n * @file\n * Basic cart shopping cart html template\n */\n\n?>\n\n<?php if( empty($cart) ): ?>\n  <p><?php print t('Your shopping cart is empty.'); ?></p>\n<?php else: ?>\n  <form accept-charset=\"UTF-8\" id=\"basic-cart-cart-form\" method=\"post\">\n  <div class=\"basic-cart-cart basic-cart-grid\">\n    <?php if(is_array($cart) && count($cart) >= 1): ?>\n      <?php foreach($cart as $nid => $node): ?>\n        <div class=\"basic-cart-cart-contents row\">\n\n            <div class=\"basic-cart-cart-quantity cell\">\n              <?php if(!$is_checkout): ?>\n                <div class=\"cell\"><?php print drupal_render($form['quantity_nid_' . $nid]); ?></div>\n              <?php else: ?>\n                <div class=\"cell\"><?php print $node->basic_cart_quantity; ?></div>\n              <?php endif; ?>\n              <div class=\"cell basic-cart-cart-x\">x</div>\n            </div>\n\n            <div class=\"basic-cart-cart-node-title cell\">\n              <?php print l($node->title, 'node/' . $node->nid); ?><br />\n              <span class=\"basic-cart-cart-node-summary\">\n                <?php if(drupal_strlen($node->basic_cart_node_description) > 50): ?>\n                  <?php print truncate_utf8($node->basic_cart_node_description, 50); ?> ... \n                <?php else: ?>\n                  <?php print $node->basic_cart_node_description; ?>\n                <?php endif; ?>\n              </span>\n            </div>\n          \n            <?php if(!$is_checkout): ?>\n              <div class=\"basic-cart-delete-image cell\">\n                <?php \n                $variables = array(\n                  'path' => $base_path . drupal_get_path('module', 'basic_cart') . '/images/delete.gif',\n                  'alt' => t('Remove from cart'),\n                  'title' => t('Remove from cart'),\n                  'attributes' => array('class' => 'basic-cart-delete-image-image'),\n                );\n                print l(theme('image', $variables), 'cart/remove/' . $nid, array('html' => TRUE));\n                ?>\n              </div>\n            <?php endif; ?>\n        </div>\n      <?php endforeach; ?>\n      <?php if(!$is_checkout): ?>\n        <div class=\"basic-cart-cart-checkout-button row\">\n          <?php print drupal_render($form['update']); ?>\n          <?php print drupal_render($form['checkout']); ?>\n        </div>\n      <?php endif; ?>\n    <?php endif; ?>\n  </div>\n  <?php print drupal_render($form); ?>\n  </form>\n<?php endif; ?>\n", "<?php\n/**\n * @file\n * Basic cart shopping cart block\n */\n\n?>\n\n<?php if( empty($cart) ): ?>\n  <p><?php print t('Your cart is empty.'); ?></p>\n<?php else: ?>\n  <div class=\"basic-cart-grid\">\n    <?php if(is_array($cart) && count($cart) >= 1): ?>\n      <?php foreach($cart as $nid => $node): ?>\n        <div class=\"basic-cart-cart-contents row\">\n            <div class=\"basic-cart-cart-quantity cell\"><?php print $node->basic_cart_quantity; ?> x </div>\n            <div class=\"basic-cart-cart-node-title cell\"><?php print l($node->title, 'node/' . $node->nid); ?></div>\n        </div>\n      <?php endforeach; ?>\n      <div class=\"basic-cart-cart-checkout-button basic-cart-cart-checkout-button-block row\">\n        <?php print l(t('View cart'), 'cart', array('attributes' => array('class' => array('button')))); ?>\n      </div>\n    <?php endif; ?>\n  </div>\n<?php endif; ?>\n"], "filenames": ["basic_cart.admin.inc", "basic_cart.cart.inc", "basic_cart_cart_render.tpl.php", "basic_cart_cart_render_block.tpl.php"], "buggy_code_start_loc": [28, 238, 5, 5], "buggy_code_end_loc": [135, 302, 40, 5], "fixing_code_start_loc": [28, 239, 6, 6], "fixing_code_end_loc": [96, 302, 49, 7], "type": "CWE-79", "message": "A vulnerability was found in backdrop-contrib Basic Cart. It has been classified as problematic. Affected is the function basic_cart_checkout_form_submit of the file basic_cart.cart.inc. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.x-1.1.1 is able to address this issue. The name of the patch is a10424ccd4b3b4b433cf33b73c1ad608b11890b4. It is recommended to upgrade the affected component. VDB-217950 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2012-10004", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-11T07:15:09.917", "lastModified": "2023-01-18T18:07:12.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in backdrop-contrib Basic Cart. It has been classified as problematic. Affected is the function basic_cart_checkout_form_submit of the file basic_cart.cart.inc. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.x-1.1.1 is able to address this issue. The name of the patch is a10424ccd4b3b4b433cf33b73c1ad608b11890b4. It is recommended to upgrade the affected component. VDB-217950 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:backdropcms:basic_cart:*:*:*:*:*:backdrop:*:*", "versionEndExcluding": "1.x-1.1.1", "matchCriteriaId": "47E828C6-9611-4C54-8243-DA9FDE111483"}]}]}], "references": [{"url": "https://github.com/backdrop-contrib/basic_cart/commit/a10424ccd4b3b4b433cf33b73c1ad608b11890b4", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/backdrop-contrib/basic_cart/releases/tag/1.x-1.1.1", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217950", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217950", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/backdrop-contrib/basic_cart/commit/a10424ccd4b3b4b433cf33b73c1ad608b11890b4"}}