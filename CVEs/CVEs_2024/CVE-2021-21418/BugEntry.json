{"buggy_code": ["<?php\n/**\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityManager;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Ps_Emailsubscription extends Module implements WidgetInterface\n{\n    /**\n     * @var string Name of the module running on PS 1.6.x. Used for data migration.\n     */\n    const PS_16_EQUIVALENT_MODULE = 'blocknewsletter';\n\n    const GUEST_NOT_REGISTERED = -1;\n    const CUSTOMER_NOT_REGISTERED = 0;\n    const GUEST_REGISTERED = 1;\n    const CUSTOMER_REGISTERED = 2;\n\n    const LEGAL_PRIVACY = 'LEGAL_PRIVACY';\n\n    protected $_origin_newsletter;\n\n    const TPL_COLUMN = 'ps_emailsubscription-column.tpl';\n    const TPL_DEFAULT = 'ps_emailsubscription.tpl';\n\n    /**\n     * @param EntityManager $entity_manager\n     */\n    public function __construct(EntityManager $entity_manager)\n    {\n        $this->name = 'ps_emailsubscription';\n        $this->need_instance = 0;\n\n        $this->controllers = array('verification', 'subscription');\n\n        $this->bootstrap = true;\n        parent::__construct();\n\n        $this->displayName = $this->trans('Newsletter subscription', array(), 'Modules.Emailsubscription.Admin');\n        $this->description = $this->trans('Keep in touch with your customers the way you want, add a form to the homepage of your store and allow all the curious to subscribe to your newsletter.', array(), 'Modules.Emailsubscription.Admin');\n        $this->confirmUninstall = $this->trans('Are you sure that you want to delete all of your contacts?', array(), 'Modules.Emailsubscription.Admin');\n        $this->ps_versions_compliancy = array('min' => '1.7.1.0', 'max' => _PS_VERSION_);\n\n        $this->entity_manager = $entity_manager;\n\n        $this->version = '2.6.0';\n        $this->author = 'PrestaShop';\n        $this->error = false;\n        $this->valid = false;\n        $this->_files = array(\n            'name' => array('newsletter_conf', 'newsletter_voucher'),\n            'ext' => array(\n                0 => 'html',\n                1 => 'txt',\n            ),\n        );\n\n        $this->_searched_email = null;\n\n        $this->_html = '';\n        if ($this->id) {\n            $this->file = 'export_' . Configuration::get('PS_NEWSLETTER_RAND') . '.csv';\n            $this->post_valid = array();\n\n            // Getting data...\n            $countries = Country::getCountries($this->context->language->id);\n\n            // ...formatting array\n            $countries_list = array($this->trans('All countries', array(), 'Admin.Global'));\n            foreach ($countries as $country) {\n                $countries_list[$country['id_country']] = $country['name'];\n            }\n        }\n    }\n\n    public function install()\n    {\n        if (!parent::install()\n            || !$this->registerHook(\n                array(\n                    'actionFrontControllerSetMedia',\n                    'displayFooterBefore',\n                    'actionCustomerAccountAdd',\n                    'actionObjectCustomerUpdateBefore',\n                    'additionalCustomerFormFields',\n                    'displayAdminCustomersForm',\n                    'registerGDPRConsent',\n                    'actionDeleteGDPRCustomer',\n                    'actionExportGDPRData',\n                    'actionCustomerAccountUpdate',\n                )\n            )\n        ) {\n            return false;\n        }\n\n        if ($this->uninstallPrestaShop16Module()) {\n            // 1.6 Module exist and was uninstalled\n            Db::getInstance()->execute('RENAME TABLE `' . _DB_PREFIX_ . 'newsletter` to `' . _DB_PREFIX_ . 'emailsubscription`');\n        } else {\n            Configuration::updateValue('PS_NEWSLETTER_RAND', mt_rand() . mt_rand());\n            Configuration::updateValue('NW_SALT', Tools::passwdGen(16));\n        }\n\n        // New data\n        $conditions = array();\n        $languages = Language::getLanguages(false);\n        foreach ($languages as $lang) {\n            $conditions[(int) $lang['id_lang']] = $this->getConditionFixtures($lang);\n        }\n        Configuration::updateValue('NW_CONDITIONS', $conditions, true);\n\n        return Db::getInstance()->execute('\n        CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'emailsubscription` (\n            `id` int(6) NOT NULL AUTO_INCREMENT,\n            `id_shop` INTEGER UNSIGNED NOT NULL DEFAULT \\'1\\',\n            `id_shop_group` INTEGER UNSIGNED NOT NULL DEFAULT \\'1\\',\n            `email` varchar(255) NOT NULL,\n            `newsletter_date_add` DATETIME NULL,\n            `ip_registration_newsletter` varchar(15) NOT NULL,\n            `http_referer` VARCHAR(255) NULL,\n            `active` TINYINT(1) NOT NULL DEFAULT \\'0\\',\n            `id_lang` int(10) NOT NULL DEFAULT \\'0\\',\n            PRIMARY KEY(`id`)\n        ) ENGINE=' . _MYSQL_ENGINE_ . ' default CHARSET=utf8');\n    }\n\n    public function uninstall()\n    {\n        Db::getInstance()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'emailsubscription');\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Migrate data from 1.6 equivalent module (if applicable), then uninstall\n     */\n    public function uninstallPrestaShop16Module()\n    {\n        if (!Module::isInstalled(self::PS_16_EQUIVALENT_MODULE)) {\n            return false;\n        }\n        $oldModule = Module::getInstanceByName(self::PS_16_EQUIVALENT_MODULE);\n\n        if ($oldModule) {\n            // This closure calls the parent class to prevent data to be erased\n            // It allows the new module to be configured without migration\n            $parentUninstallClosure = function () {\n                return parent::uninstall();\n            };\n\n            $parentUninstallClosure = $parentUninstallClosure->bindTo($oldModule, get_class($oldModule));\n            $parentUninstallClosure();\n        }\n\n        return true;\n    }\n\n    public function getContent()\n    {\n        if (Tools::isSubmit('submitUpdate')) {\n            Configuration::updateValue('NW_CONFIRMATION_EMAIL', (bool) Tools::getValue('NW_CONFIRMATION_EMAIL'));\n            Configuration::updateValue('NW_VERIFICATION_EMAIL', (bool) Tools::getValue('NW_VERIFICATION_EMAIL'));\n\n            $conditions = array();\n            $languages = Language::getLanguages(false);\n            foreach ($languages as $lang) {\n                if (Tools::getIsset('NW_CONDITIONS_' . $lang['id_lang'])) {\n                    $conditions[$lang['id_lang']] = Tools::getValue('NW_CONDITIONS_' . $lang['id_lang']);\n                }\n            }\n\n            Configuration::updateValue('NW_CONDITIONS', $conditions, true);\n            $voucher = Tools::getValue('NW_VOUCHER_CODE');\n\n            if ($voucher && !Validate::isDiscountName($voucher)) {\n                $this->_html .= $this->displayError($this->trans('The voucher code is invalid.', array(), 'Admin.Notifications.Error'));\n            } else {\n                Configuration::updateValue('NW_VOUCHER_CODE', pSQL($voucher));\n                $this->_html .= $this->displayConfirmation($this->trans('Settings updated', array(), 'Admin.Notifications.Success'));\n            }\n\n        } elseif (Tools::isSubmit('subscribedmerged')) {\n            $id = Tools::getValue('id');\n\n            if (preg_match('/(^N)/', $id)) {\n                $id = (int) Tools::substr($id, 1);\n                $sql = 'UPDATE ' . _DB_PREFIX_ . 'emailsubscription SET active = 0 WHERE id = ' . $id;\n                Db::getInstance()->execute($sql);\n            } else {\n                $c = new Customer((int) $id);\n                $c->newsletter = (int) !$c->newsletter;\n                $c->update();\n            }\n\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&conf=4&token=' . Tools::getAdminTokenLite('AdminModules'));\n\n        } elseif (Tools::isSubmit('submitExport') && $action = Tools::getValue('action')) {\n            $this->export_csv();\n        } elseif (Tools::isSubmit('searchEmail')) {\n            $this->_searched_email = Tools::getValue('searched_email');\n        }\n\n        $this->_html .= $this->renderForm();\n        $this->_html .= $this->renderSearchForm();\n        $this->_html .= $this->renderList();\n\n        $this->_html .= $this->renderExportForm();\n\n        return $this->_html;\n    }\n\n    public function renderList()\n    {\n        $fields_list = array(\n            'id' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'shop_name' => array(\n                'title' => $this->trans('Shop', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'gender' => array(\n                'title' => $this->trans('Gender', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'lastname' => array(\n                'title' => $this->trans('Lastname', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'firstname' => array(\n                'title' => $this->trans('Firstname', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'email' => array(\n                'title' => $this->trans('Email', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'subscribed' => array(\n                'title' => $this->trans('Subscribed', array(), 'Modules.Emailsubscription.Admin'),\n                'type' => 'bool',\n                'active' => 'subscribed',\n                'search' => false,\n            ),\n            'iso_code' => array(\n                'title' => $this->trans('Iso language', array(), 'Modules.Emailsubscription.Admin'),\n                'search' => false,\n            ),\n            'newsletter_date_add' => array(\n                'title' => $this->trans('Subscribed on', array(), 'Modules.Emailsubscription.Admin'),\n                'type' => 'date',\n                'search' => false,\n            ),\n        );\n\n        if (!Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n            unset($fields_list['shop_name']);\n        }\n\n        $helper_list = new HelperList();\n        $helper_list->module = $this;\n        $helper_list->title = $this->trans('Newsletter registrations', array(), 'Modules.Emailsubscription.Admin');\n        $helper_list->shopLinkType = '';\n        $helper_list->no_link = true;\n        $helper_list->show_toolbar = true;\n        $helper_list->simple_header = false;\n        $helper_list->identifier = 'id';\n        $helper_list->table = 'merged';\n        $helper_list->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name;\n        $helper_list->token = Tools::getAdminTokenLite('AdminModules');\n        $helper_list->actions = array('viewCustomer');\n\n        // This is needed for displayEnableLink to avoid code duplication\n        $this->_helperlist = $helper_list;\n\n        /* Retrieve list data */\n        $subscribers = $this->getSubscribers();\n        $helper_list->listTotal = count($subscribers);\n\n        /* Paginate the result */\n        $page = ($page = Tools::getValue('submitFilter' . $helper_list->table)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper_list->table . '_pagination')) ? $pagination : 50;\n        $subscribers = $this->paginateSubscribers($subscribers, $page, $pagination);\n\n        return $helper_list->generateList($subscribers, $fields_list);\n    }\n\n    public function displayViewCustomerLink($token = null, $id, $name = null)\n    {\n        $this->smarty->assign(array(\n            'href' => 'index.php?controller=AdminCustomers&id_customer=' . (int) $id . '&updatecustomer&token=' . Tools::getAdminTokenLite('AdminCustomers'),\n            'action' => $this->trans('View', array(), 'Admin.Actions'),\n            'disable' => !((int) $id > 0),\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_viewcustomer.tpl');\n    }\n\n    public function displayEnableLink($token, $id, $value, $active, $id_category = null, $id_product = null, $ajax = false)\n    {\n        $this->smarty->assign(array(\n            'ajax' => $ajax,\n            'enabled' => (bool) $value,\n            'url_enable' => $this->_helperlist->currentIndex . '&' . $this->_helperlist->identifier . '=' . $id . '&' . $active . $this->_helperlist->table . ($ajax ? '&action=' . $active . $this->_helperlist->table . '&ajax=' . (int) $ajax : '') . ((int) $id_category && (int) $id_product ? '&id_category=' . (int) $id_category : '') . '&token=' . $token,\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_enable.tpl');\n    }\n\n    public function displayUnsubscribeLink($token = null, $id, $name = null)\n    {\n        $this->smarty->assign(array(\n            'href' => $this->_helperlist->currentIndex . '&subscribedcustomer&' . $this->_helperlist->identifier . '=' . $id . '&token=' . $token,\n            'action' => $this->trans('Unsubscribe', array(), 'Modules.Emailsubscription.Admin'),\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_unsubscribe.tpl');\n    }\n\n    /**\n     * Check if this mail is registered for newsletters.\n     *\n     * @param string $customer_email\n     *\n     * @return int -1 = not a customer and not registered\n     *             0 = customer not registered\n     *             1 = registered in block\n     *             2 = registered in customer\n     */\n    public function isNewsletterRegistered($customer_email)\n    {\n        $sql = 'SELECT `email`\n                FROM ' . _DB_PREFIX_ . 'emailsubscription\n                WHERE `email` = \\'' . pSQL($customer_email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        if (Db::getInstance()->getRow($sql)) {\n            return self::GUEST_REGISTERED;\n        }\n\n        $sql = 'SELECT `newsletter`\n                FROM ' . _DB_PREFIX_ . 'customer\n                WHERE `email` = \\'' . pSQL($customer_email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        if (!$registered = Db::getInstance()->getRow($sql)) {\n            return self::GUEST_NOT_REGISTERED;\n        }\n\n        if ($registered['newsletter'] == '1') {\n            return self::CUSTOMER_REGISTERED;\n        }\n\n        return self::CUSTOMER_NOT_REGISTERED;\n    }\n\n    /**\n     * Register in email subscription.\n     *\n     * @param string|null $hookName For widgets displayed by a hook, hook name must be passed\n     * as multiple hooks might be used, so it is necessary to know which one was used for\n     * submitting the form\n     *\n     * @return bool|string\n     */\n    public function newsletterRegistration($hookName = null)\n    {\n        $isPrestaShopVersionOver177 = version_compare(_PS_VERSION_, '1.7.7', '>=');\n\n        if ($isPrestaShopVersionOver177 && ($hookName !== null)) {\n            if (empty($_POST['blockHookName']) || $_POST['blockHookName'] !== $hookName) {\n                return false;\n            }\n        }\n\n        // hook for newsletter registration/unregistration : fill-in hookError string is there is an error\n        $hookError = null;\n        Hook::exec(\n            'actionNewsletterRegistrationBefore',\n            [\n                'hookName' => $hookName,\n                'email' => $_POST['email'],\n                'action' => $_POST['action'],\n                'hookError' => &$hookError,\n            ]\n        );\n        if ($hookError !== null) {\n            return $this->error = $hookError;\n        }\n\n        if (empty($_POST['email']) || !Validate::isEmail($_POST['email'])) {\n            return $this->error = $this->trans('Invalid email address.', array(), 'Shop.Notifications.Error');\n\n        } elseif ($_POST['action'] == '1') {\n            $register_status = $this->isNewsletterRegistered($_POST['email']);\n\n            if ($register_status < 1) {\n                return $this->error = $this->trans('This email address is not registered.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            if (!$this->unregister($_POST['email'], $register_status)) {\n                return $this->error = $this->trans('An error occurred while attempting to unsubscribe.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            return $this->valid = $this->trans('Unsubscription successful.', array(), 'Modules.Emailsubscription.Shop');\n\n        } elseif ($_POST['action'] == '0') {\n\n            $register_status = $this->isNewsletterRegistered($_POST['email']);\n            if ($register_status > 0) {\n                return $this->error = $this->trans('This email address is already registered.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            $email = pSQL($_POST['email']);\n            if (!$this->isRegistered($register_status)) {\n                if (Configuration::get('NW_VERIFICATION_EMAIL')) {\n\n                    // create an unactive entry in the newsletter database\n                    if ($register_status == self::GUEST_NOT_REGISTERED) {\n                        $this->registerGuest($email, false);\n                    }\n\n                    if (!$token = $this->getToken($email, $register_status)) {\n                        return $this->error = $this->trans('An error occurred during the subscription process.', array(), 'Modules.Emailsubscription.Shop');\n                    }\n\n                    $this->sendVerificationEmail($email, $token);\n\n                    return $this->valid = $this->trans('A verification email has been sent. Please check your inbox.', array(), 'Modules.Emailsubscription.Shop');\n\n                } else {\n                    if ($this->register($email, $register_status)) {\n                        $this->valid = $this->trans('You have successfully subscribed to this newsletter.', array(), 'Modules.Emailsubscription.Shop');\n                    } else {\n                        return $this->error = $this->trans('An error occurred during the subscription process.', array(), 'Modules.Emailsubscription.Shop');\n                    }\n\n                    if ($code = Configuration::get('NW_VOUCHER_CODE')) {\n                        $this->sendVoucher($email, $code);\n                    }\n\n                    if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n                        $this->sendConfirmationEmail($email);\n                    }\n                }\n            }\n        }\n        // hook\n        Hook::exec(\n            'actionNewsletterRegistrationAfter',\n            [\n                'hookName' => $hookName,\n                'email' => $_POST['email'],\n                'action' => $_POST['action'],\n                'error' => &$this->error,\n            ]\n        );\n    }\n\n    public function getSubscribers()\n    {\n        $dbquery = new DbQuery();\n        $dbquery->select('c.`id_customer` AS `id`, s.`name` AS `shop_name`, gl.`name` AS `gender`, c.`lastname`, c.`firstname`, c.`email`, c.`newsletter` AS `subscribed`, c.`newsletter_date_add`, l.`iso_code`');\n        $dbquery->from('customer', 'c');\n        $dbquery->leftJoin('shop', 's', 's.id_shop = c.id_shop');\n        $dbquery->leftJoin('gender', 'g', 'g.id_gender = c.id_gender');\n        $dbquery->leftJoin('gender_lang', 'gl', 'g.id_gender = gl.id_gender AND gl.id_lang = ' . (int) $this->context->employee->id_lang);\n        $dbquery->where('c.`newsletter` = 1');\n        $dbquery->leftJoin('lang', 'l', 'l.id_lang = c.id_lang');\n        if ($this->_searched_email) {\n            $dbquery->where('c.`email` LIKE \\'%' . pSQL($this->_searched_email) . '%\\' ');\n        }\n\n        $customers = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($dbquery->build());\n\n        $dbquery = new DbQuery();\n        $dbquery->select('CONCAT(\\'N\\', e.`id`) AS `id`, s.`name` AS `shop_name`, NULL AS `gender`, NULL AS `lastname`, NULL AS `firstname`, e.`email`, e.`active` AS `subscribed`, e.`newsletter_date_add`, l.`iso_code`');\n        $dbquery->from('emailsubscription', 'e');\n        $dbquery->leftJoin('shop', 's', 's.id_shop = e.id_shop');\n        $dbquery->leftJoin('lang', 'l', 'l.id_lang = e.id_lang');\n        $dbquery->where('e.`active` = 1');\n        if ($this->_searched_email) {\n            $dbquery->where('e.`email` LIKE \\'%' . pSQL($this->_searched_email) . '%\\' ');\n        }\n\n        $non_customers = Db::getInstance()->executeS($dbquery->build());\n\n        $subscribers = array_merge($customers, $non_customers);\n\n        return $subscribers;\n    }\n\n    public function paginateSubscribers($subscribers, $page = 1, $pagination = 50)\n    {\n        if (count($subscribers) > $pagination) {\n            $subscribers = array_slice($subscribers, $pagination * ($page - 1), $pagination);\n        }\n\n        return $subscribers;\n    }\n\n    /**\n     * Return true if the registered status correspond to a registered user.\n     *\n     * @param int $register_status\n     *\n     * @return bool\n     */\n    protected function isRegistered($register_status)\n    {\n        return in_array(\n            $register_status,\n            array(self::GUEST_REGISTERED, self::CUSTOMER_REGISTERED)\n        );\n    }\n\n    /**\n     * Subscribe an email to the newsletter. It will create an entry in the newsletter table\n     * or update the customer table depending of the register status.\n     *\n     * @param string $email\n     * @param int $register_status\n     */\n    protected function register($email, $register_status)\n    {\n        if ($register_status == self::GUEST_NOT_REGISTERED) {\n            return $this->registerGuest($email);\n        }\n\n        if ($register_status == self::CUSTOMER_NOT_REGISTERED) {\n            return $this->registerUser($email);\n        }\n\n        return false;\n    }\n\n    protected function unregister($email, $register_status)\n    {\n        if ($register_status == self::GUEST_REGISTERED) {\n            $sql = 'DELETE FROM ' . _DB_PREFIX_ . 'emailsubscription WHERE `email` = \\'' . pSQL($_POST['email']) . '\\' AND id_shop = ' . $this->context->shop->id;\n        } elseif ($register_status == self::CUSTOMER_REGISTERED) {\n            $sql = 'UPDATE ' . _DB_PREFIX_ . 'customer SET `newsletter` = 0 WHERE `email` = \\'' . pSQL($_POST['email']) . '\\' AND id_shop = ' . $this->context->shop->id;\n        }\n\n        if (!isset($sql) || !Db::getInstance()->execute($sql)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Subscribe a customer to the newsletter.\n     *\n     * @param string $email\n     *\n     * @return bool\n     */\n    protected function registerUser($email)\n    {\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'customer\n                SET `newsletter` = 1, newsletter_date_add = NOW(), `ip_registration_newsletter` = \\'' . pSQL(Tools::getRemoteAddr()) . '\\'\n                WHERE `email` = \\'' . pSQL($email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Subscribe a guest to the newsletter.\n     *\n     * @param string $email\n     * @param bool $active\n     *\n     * @return bool\n     */\n    protected function registerGuest($email, $active = true)\n    {\n        $sql = 'INSERT INTO ' . _DB_PREFIX_ . 'emailsubscription (id_shop, id_shop_group, email, newsletter_date_add, ip_registration_newsletter, http_referer, active, id_lang)\n                VALUES\n                (' . $this->context->shop->id . ',\n                ' . $this->context->shop->id_shop_group . ',\n                \\'' . pSQL($email) . '\\',\n                NOW(),\n                \\'' . pSQL(Tools::getRemoteAddr()) . '\\',\n                (\n                    SELECT c.http_referer\n                    FROM ' . _DB_PREFIX_ . 'connections c\n                    WHERE c.id_guest = ' . (int) $this->context->customer->id . '\n                    ORDER BY c.date_add DESC LIMIT 1\n                ),\n                ' . (int) $active . ',\n                ' . $this->context->language->id . '\n                )';\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    public function activateGuest($email)\n    {\n        return Db::getInstance()->execute(\n            'UPDATE `' . _DB_PREFIX_ . 'emailsubscription`\n                        SET `active` = 1\n                        WHERE `email` = \\'' . pSQL($email) . '\\''\n        );\n    }\n\n    /**\n     * Returns a guest email by token.\n     *\n     * @param string $token\n     *\n     * @return string email\n     */\n    protected function getGuestEmailByToken($token)\n    {\n        $sql = 'SELECT `email`\n                FROM `' . _DB_PREFIX_ . 'emailsubscription`\n                WHERE MD5(CONCAT( `email` , `newsletter_date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) = \\'' . pSQL($token) . '\\'\n                AND `active` = 0';\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Returns a customer email by token.\n     *\n     * @param string $token\n     *\n     * @return string email\n     */\n    protected function getUserEmailByToken($token)\n    {\n        $sql = 'SELECT `email`\n                FROM `' . _DB_PREFIX_ . 'customer`\n                WHERE MD5(CONCAT( `email` , `date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) = \\'' . pSQL($token) . '\\'\n                AND `newsletter` = 0';\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Return a token associated to an user.\n     *\n     * @param string $email\n     * @param string $register_status\n     */\n    protected function getToken($email, $register_status)\n    {\n        if (in_array($register_status, array(self::GUEST_NOT_REGISTERED, self::GUEST_REGISTERED))) {\n            $sql = 'SELECT MD5(CONCAT( `email` , `newsletter_date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) as token\n                    FROM `' . _DB_PREFIX_ . 'emailsubscription`\n                    WHERE `active` = 0\n                    AND `email` = \\'' . pSQL($email) . '\\'';\n        } elseif ($register_status == self::CUSTOMER_NOT_REGISTERED) {\n            $sql = 'SELECT MD5(CONCAT( `email` , `date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\' )) as token\n                    FROM `' . _DB_PREFIX_ . 'customer`\n                    WHERE `newsletter` = 0\n                    AND `email` = \\'' . pSQL($email) . '\\'';\n        }\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Ends the registration process to the newsletter.\n     *\n     * @param string $token\n     *\n     * @return string\n     */\n    public function confirmEmail($token)\n    {\n        $activated = false;\n\n        if ($email = $this->getGuestEmailByToken($token)) {\n            $activated = $this->activateGuest($email);\n        } elseif ($email = $this->getUserEmailByToken($token)) {\n            $activated = $this->registerUser($email);\n        }\n\n        if (!$activated) {\n            return $this->trans('This email is already registered and/or invalid.', array(), 'Modules.Emailsubscription.Shop');\n        }\n\n        if ($discount = Configuration::get('NW_VOUCHER_CODE')) {\n            $this->sendVoucher($email, $discount);\n        }\n\n        if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n            $this->sendConfirmationEmail($email);\n        }\n\n        return $this->trans('Thank you for subscribing to our newsletter.', array(), 'Modules.Emailsubscription.Shop');\n    }\n\n    /**\n     * Send the confirmation mails to the given $email address if needed.\n     *\n     * @param string $email Email where to send the confirmation\n     *\n     * @note the email has been verified and might not yet been registered. Called by AuthController::processCustomerNewsletter\n     */\n    public function confirmSubscription($email)\n    {\n        if ($email) {\n            if ($discount = Configuration::get('NW_VOUCHER_CODE')) {\n                $this->sendVoucher($email, $discount);\n            }\n\n            if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n                $this->sendConfirmationEmail($email);\n            }\n        }\n    }\n\n    /**\n     * Send an email containing a voucher code.\n     *\n     * @param $email\n     * @param $code\n     *\n     * @return bool|int\n     */\n    protected function sendVoucher($email, $code)\n    {\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_voucher',\n            $this->trans(\n                'Newsletter voucher',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(\n                '{discount}' => $code,\n            ),\n            $email,\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    /**\n     * Send a confirmation email.\n     *\n     * @param string $email\n     *\n     * @return bool\n     */\n    protected function sendConfirmationEmail($email)\n    {\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_conf',\n            $this->trans(\n                'Newsletter confirmation',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(),\n            pSQL($email),\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    /**\n     * Send a verification email.\n     *\n     * @param string $email\n     * @param string $token\n     *\n     * @return bool\n     */\n    protected function sendVerificationEmail($email, $token)\n    {\n        $verif_url = Context::getContext()->link->getModuleLink(\n            'ps_emailsubscription', 'verification', array(\n                'token' => $token,\n            )\n        );\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_verif',\n            $this->trans(\n                'Email verification',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(\n                '{verif_url}' => $verif_url,\n            ),\n            $email,\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        if ($hookName == null && isset($configuration['hook'])) {\n            $hookName = $configuration['hook'];\n        }\n\n        $template_file = ($hookName == 'displayLeftColumn') ? self::TPL_COLUMN : self::TPL_DEFAULT;\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n        $this->context->smarty->assign(array(\n            'id_module' => $this->id,\n            'hookName' => $hookName,\n        ));\n\n        return $this->fetch('module:ps_emailsubscription/views/templates/hook/' . $template_file);\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $variables['value'] = '';\n        $variables['msg'] = '';\n        $variables['conditions'] = Configuration::get('NW_CONDITIONS', $this->context->language->id);\n\n        if (Tools::isSubmit('submitNewsletter')) {\n            $this->error = $this->valid = '';\n            $this->newsletterRegistration($hookName);\n\n            if ($this->error) {\n                $variables['value'] = Tools::getValue('email', '');\n                $variables['msg'] = $this->error;\n                $variables['nw_error'] = true;\n            } elseif ($this->valid) {\n                $variables['value'] = Tools::getValue('email', '');\n                $variables['msg'] = $this->valid;\n                $variables['nw_error'] = false;\n            }\n        }\n\n        return $variables;\n    }\n\n    public function hookActionFrontControllerSetMedia()\n    {\n        Media::addJsDef([\n            'psemailsubscription_subscription' => $this->context->link->getModuleLink($this->name, 'subscription', [], true),\n        ]);\n\n        $this->context->controller->registerJavascript('modules-psemailsubscription', 'modules/' . $this->name . '/views/js/ps_emailsubscription.js');\n    }\n\n    /**\n     * Deletes duplicates email in newsletter table.\n     *\n     * @param $params\n     *\n     * @return bool\n     */\n    public function hookActionCustomerAccountAdd($params)\n    {\n        //if e-mail of the created user address has already been added to the newsletter through the ps_emailsubscription module,\n        //we delete it from ps_emailsubscription table to prevent duplicates\n        if (empty($params['newCustomer'])) {\n            return;\n        }\n        $id_shop = $params['newCustomer']->id_shop;\n        $email = $params['newCustomer']->email;\n        $newsletter = $params['newCustomer']->newsletter;\n        if (Validate::isEmail($email)) {\n            if ($params['newCustomer']->newsletter && $code = Configuration::get('NW_VOUCHER_CODE')) {\n                $this->sendVoucher($email, $code);\n            }\n\n            return (bool) Db::getInstance()->execute('DELETE FROM ' . _DB_PREFIX_ . 'emailsubscription WHERE id_shop=' . (int) $id_shop . ' AND email=\\'' . pSQL($email) . \"'\");\n        }\n\n        if ($newsletter) {\n            if (Configuration::get('NW_CONFIRMATION_EMAIL')) {// send confirmation email\n                $this->sendConfirmationEmail($params['newCustomer']->email);\n            }\n            if ($code = Configuration::get('NW_VOUCHER_CODE')) {// send voucher\n                $this->sendVoucher($params['newCustomer']->email, $code);\n            }\n        }\n\n        return true;\n    }\n\n   public function hookActionObjectCustomerUpdateBefore($params)\n   {\n       $customer = new Customer($params['object']->id);\n       $this->_origin_newsletter = (int)$customer->newsletter;\n   }\n\n    public function hookActionCustomerAccountUpdate($params)\n    {\n        if ($this->_origin_newsletter || !$params['customer']->newsletter) {\n            return;\n        }\n        if (Configuration::get('NW_CONFIRMATION_EMAIL')) {// send confirmation email\n            $this->sendConfirmationEmail($params['customer']->email);\n        }\n        if ($code = Configuration::get('NW_VOUCHER_CODE')) {\n            $cartRule = CartRuleCore::getCartsRuleByCode($code, Context::getContext()->language->id);\n            if (! Order::getDiscountsCustomer($params['customer']->id, $cartRule[0])) {// send voucher\n                $this->sendVoucher($params['customer']->email, $code);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Add an extra FormField to ask for newsletter registration.\n     *\n     * @param $params\n     *\n     * @return bool\n     */\n    public function hookAdditionalCustomerFormFields($params)\n    {\n        $label = $this->trans(\n            'Sign up for our newsletter[1][2]%conditions%[/2]',\n            array(\n                '[1]' => '<br>',\n                '[2]' => '<em>',\n                '%conditions%' => Configuration::get('NW_CONDITIONS', $this->context->language->id),\n                '[/2]' => '</em>',\n            ),\n            'Modules.Emailsubscription.Shop'\n        );\n\n        return array(\n            (new FormField())\n                ->setName('newsletter')\n                ->setType('checkbox')\n                ->setLabel($label), );\n    }\n\n    public function renderForm()\n    {\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Settings', array(), 'Admin.Global'),\n                    'icon' => 'icon-cogs',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'switch',\n                        'label' => $this->trans('Would you like to send a verification email after subscription?', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_VERIFICATION_EMAIL',\n                        'values' => array(\n                            array(\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', array(), 'Admin.Global'),\n                            ),\n                            array(\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', array(), 'Admin.Global'),\n                            ),\n                        ),\n                    ),\n                    array(\n                        'type' => 'switch',\n                        'label' => $this->trans('Would you like to send a confirmation email after subscription?', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_CONFIRMATION_EMAIL',\n                        'values' => array(\n                            array(\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', array(), 'Admin.Global'),\n                            ),\n                            array(\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', array(), 'Admin.Global'),\n                            ),\n                        ),\n                    ),\n                    array(\n                        'type' => 'text',\n                        'label' => $this->trans('Welcome voucher code', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_VOUCHER_CODE',\n                        'class' => 'fixed-width-md',\n                        'desc' => $this->trans('Leave blank to disable by default.', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                    array(\n                        'type' => 'textarea',\n                        'label' => $this->trans('Newsletter conditions', array(), 'Modules.Emailsubscription.Admin'),\n                        'lang' => true,\n                        'name' => 'NW_CONDITIONS',\n                        'cols' => 40,\n                        'rows' => 100,\n                        'hint' => $this->trans(\n                            'This text will be displayed beneath the newsletter subscribe button.',\n                            array(),\n                            'Modules.Emailsubscription.Admin'\n                        ),\n                        'desc' => $this->trans('Leave blank to disable by default.', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Save', array(), 'Admin.Actions'),\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->table;\n\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitUpdate';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function renderExportForm()\n    {\n        // Getting data...\n        $countries = Country::getCountries($this->context->language->id);\n\n        // ...formatting array\n        $countries_list = array(array('id' => 0, 'name' => $this->trans('All countries', array(), 'Admin.Global')));\n        foreach ($countries as $country) {\n            $countries_list[] = array('id' => $country['id_country'], 'name' => $country['name']);\n        }\n\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Export customers\\' addresses', array(), 'Modules.Emailsubscription.Admin'),\n                    'icon' => 'icon-envelope',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Customers\\' country', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers by country.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'COUNTRY',\n                        'required' => false,\n                        'default_value' => (int) $this->context->country->id,\n                        'options' => array(\n                            'query' => $countries_list,\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Newsletter subscribers', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers who have subscribed to the newsletter or not, and who have an account or not.', array(), 'Modules.Emailsubscription.Admin'),\n                        'hint' => $this->trans('Customers can subscribe to your newsletter when registering, or by entering their email in the newsletter form.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'SUSCRIBERS',\n                        'required' => false,\n                        'default_value' => 1,\n                        'options' => array(\n                            'query' => array(\n                                array('id' => 0, 'name' => $this->trans('All subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 1, 'name' => $this->trans('Subscribers with account', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 2, 'name' => $this->trans('Subscribers without account', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 3, 'name' => $this->trans('Non-subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                            ),\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Partner offers subscribers', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers who have agreed to receive your partners\\' offers or not.', array(), 'Modules.Emailsubscription.Admin'),\n                        'hint' => $this->trans('Partner offers subscribers have agreed to receive your partners\\' offers.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'OPTIN',\n                        'required' => false,\n                        'default_value' => 1,\n                        'options' => array(\n                            'query' => array(\n                                array('id' => 0, 'name' => $this->trans('All customers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 2, 'name' => $this->trans('Partner offers subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 1, 'name' => $this->trans('Partner offers non-subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                            ),\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'hidden',\n                        'name' => 'action',\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Export .CSV file', array(), 'Admin.Actions'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitExport',\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->table;\n\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'btnSubmit';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function renderSearchForm()\n    {\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Search for addresses', array(), 'Modules.Emailsubscription.Admin'),\n                    'icon' => 'icon-search',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'text',\n                        'label' => $this->trans('Email address to search', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'searched_email',\n                        'class' => 'fixed-width-xxl',\n                        'desc' => $this->trans('Example: contact@prestashop.com or @prestashop.com', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Search', array(), 'Admin.Actions'),\n                    'icon' => 'process-icon-refresh',\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'searchEmail';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => array('searched_email' => $this->_searched_email),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function getConfigFieldsValues()\n    {\n        $conditions = array();\n        $languages = Language::getLanguages(false);\n        foreach ($languages as $lang) {\n            $conditions[$lang['id_lang']] = Tools::getValue(\n                'NW_CONDITIONS_' . $lang['id_lang'],\n                Configuration::get('NW_CONDITIONS', $lang['id_lang']\n                )\n            );\n        }\n\n        return array(\n            'NW_VERIFICATION_EMAIL' => Tools::getValue('NW_VERIFICATION_EMAIL', Configuration::get('NW_VERIFICATION_EMAIL')),\n            'NW_CONFIRMATION_EMAIL' => Tools::getValue('NW_CONFIRMATION_EMAIL', Configuration::get('NW_CONFIRMATION_EMAIL')),\n            'NW_VOUCHER_CODE' => Tools::getValue('NW_VOUCHER_CODE', Configuration::get('NW_VOUCHER_CODE')),\n            'NW_CONDITIONS' => $conditions,\n            'COUNTRY' => Tools::getValue('COUNTRY'),\n            'SUSCRIBERS' => Tools::getValue('SUSCRIBERS'),\n            'OPTIN' => Tools::getValue('OPTIN'),\n            'action' => 'customers',\n        );\n    }\n\n    public function export_csv()\n    {\n        if (!isset($this->context)) {\n            $this->context = Context::getContext();\n        }\n\n        $result = $this->getCustomers();\n\n        if ($result) {\n            if (!$nb = count($result)) {\n                $this->_html .= $this->displayError($this->trans('No customers found with these filters!', array(), 'Modules.Emailsubscription.Admin'));\n\n            } elseif ($fd = @fopen(dirname(__FILE__) . '/' . strval(preg_replace('#\\.{2,}#', '.', Tools::getValue('action'))) . '_' . $this->file, 'w')) {\n                $header = array('id', 'shop_name', 'gender', 'lastname', 'firstname', 'email', 'subscribed', 'subscribed_on', 'iso_language');\n                $array_to_export = array_merge(array($header), $result);\n\n                foreach ($array_to_export as $tab) {\n                    $this->myFputCsv($fd, $tab);\n                }\n\n                fclose($fd);\n\n                $this->_html .= $this->displayConfirmation(\n                    sprintf($this->trans('The .CSV file has been successfully exported: %d customers found.', array(), 'Modules.Emailsubscription.Admin'), $nb) . '<br />\n                <a href=\"' . $this->context->shop->getBaseURI() . 'modules/ps_emailsubscription/' . Tools::safeOutput(strval(Tools::getValue('action'))) . '_' . $this->file . '\">\n                <b>' . $this->trans('Download the file', array(), 'Modules.Emailsubscription.Admin') . ' ' . $this->file . '</b>\n                </a>\n                <br />\n                <ol style=\"margin-top: 10px;\">\n                    <li style=\"color: red;\">' .\n                    $this->trans('WARNING: When opening this .csv file with Excel, choose UTF-8 encoding to avoid strange characters.', array(), 'Modules.Emailsubscription.Admin') .\n                    '</li>\n                </ol>');\n            } else {\n                $this->_html .= $this->displayError($this->trans('Error: Write access limited', array(), 'Modules.Emailsubscription.Admin') . ' ' . dirname(__FILE__) . '/' . strval(Tools::getValue('action')) . '_' . $this->file . ' !');\n            }\n        } else {\n            $this->_html .= $this->displayError($this->trans('No result found!', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n\n    private function getCMSRoles()\n    {\n        $cms_repository = $this->entity_manager->getRepository('CMS');\n        $id_lang = Context::getContext()->employee->id_lang;\n        $id_shop = Context::getContext()->shop->id;\n        $cms_pages = array();\n\n        $fake_object = new stdClass();\n        $fake_object->id = 0;\n        $fake_object->name = $this->trans('-- Select associated page --', array(), 'Modules.Emailsubscription.Admin');\n        $cms_pages[-1] = $fake_object;\n        unset($fake_object);\n\n        foreach ($cms_repository->i10nFindAll($id_lang, $id_shop) as $cms_page) {\n            $object = new stdClass();\n            $object->id = $cms_page->id;\n            $object->name = $cms_page->meta_title;\n            $cms_pages[] = $object;\n        }\n\n        return $cms_pages;\n    }\n\n    private function getCustomers()\n    {\n        $id_shop = false;\n\n        // Get the value to know with subscrib I need to take 1 with account 2 without 0 both 3 not subscrib\n        $who = (int) Tools::getValue('SUSCRIBERS');\n\n        // get optin 0 for all 1 no optin 2 with optin\n        $optin = (int) Tools::getValue('OPTIN');\n\n        $country = (int) Tools::getValue('COUNTRY');\n\n        if (Context::getContext()->cookie->shopContext) {\n            $id_shop = (int) Context::getContext()->shop->id;\n        }\n\n        $customers = array();\n        if ($who == 1 || $who == 0 || $who == 3) {\n            $dbquery = new DbQuery();\n            $dbquery->select('c.`id_customer` AS `id`, s.`name` AS `shop_name`, gl.`name` AS `gender`, c.`lastname`, c.`firstname`, c.`email`, c.`newsletter` AS `subscribed`, c.`newsletter_date_add`, l.`iso_code`');\n            $dbquery->from('customer', 'c');\n            $dbquery->leftJoin('shop', 's', 's.id_shop = c.id_shop');\n            $dbquery->leftJoin('gender', 'g', 'g.id_gender = c.id_gender');\n            $dbquery->leftJoin('gender_lang', 'gl', 'g.id_gender = gl.id_gender AND gl.id_lang = ' . $this->context->employee->id_lang);\n            $dbquery->where('c.`newsletter` = ' . ($who == 3 ? 0 : 1));\n            $dbquery->leftJoin('lang', 'l', 'l.id_lang = c.id_lang');\n            if ($optin == 2 || $optin == 1) {\n                $dbquery->where('c.`optin` = ' . ($optin == 1 ? 0 : 1));\n            }\n            if ($country) {\n                $dbquery->where('(SELECT COUNT(a.`id_address`) as nb_country\n                                                    FROM `' . _DB_PREFIX_ . 'address` a\n                                                    WHERE a.deleted = 0\n                                                    AND a.`id_customer` = c.`id_customer`\n                                                    AND a.`id_country` = ' . $country . ') >= 1');\n            }\n            if ($id_shop) {\n                $dbquery->where('c.`id_shop` = ' . $id_shop);\n            }\n\n            $customers = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($dbquery->build());\n        }\n\n        $non_customers = array();\n        if (($who == 0 || $who == 2) && (!$optin || $optin == 2) && !$country) {\n            $dbquery = new DbQuery();\n            $dbquery->select('CONCAT(\\'N\\', e.`id`) AS `id`, s.`name` AS `shop_name`, NULL AS `gender`, NULL AS `lastname`, NULL AS `firstname`, e.`email`, e.`active` AS `subscribed`, e.`newsletter_date_add`, l.`iso_code`');\n            $dbquery->from('emailsubscription', 'e');\n            $dbquery->leftJoin('shop', 's', 's.id_shop = e.id_shop');\n            $dbquery->where('e.`active` = 1');\n            $dbquery->leftJoin('lang', 'l', 'l.id_lang = e.id_lang');\n            if ($id_shop) {\n                $dbquery->where('e.`id_shop` = ' . $id_shop);\n            }\n            $non_customers = Db::getInstance()->executeS($dbquery->build());\n        }\n\n        $subscribers = array_merge($customers, $non_customers);\n\n        return $subscribers;\n    }\n\n    private function myFputCsv($fd, $array)\n    {\n        $line = implode(';', $array);\n        $line .= \"\\n\";\n        if (!fwrite($fd, $line, 4096)) {\n            $this->post_errors[] = $this->trans('Error: Write access limited', array(), 'Modules.Emailsubscription.Admin') . ' ' . dirname(__FILE__) . '/' . $this->file . ' !';\n        }\n    }\n\n    private function getConditionFixtures($lang)\n    {\n        $locale = $lang['locale'];\n\n        return\n            $this->trans('You may unsubscribe at any moment. For that purpose, please find our contact info in the legal notice.', array(), 'Modules.Emailsubscription.Shop', $locale)\n        ;\n    }\n\n    /**\n     * This hook allow you to add new fields in the admin customer form\n     *\n     * @return string\n     */\n    public function hookDisplayAdminCustomersForm()\n    {\n        $newsletter = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue('SELECT `newsletter`\n            FROM ' . _DB_PREFIX_ . 'customer\n            WHERE `id_customer` = ' . (int) Tools::getValue('id_customer', 0));\n\n        $input = array(\n            'type' => 'switch',\n            'label' => $this->trans('Newsletter', array(), 'Admin.Orderscustomers.Feature'),\n            'name' => 'newsletter',\n            'required' => false,\n            'class' => 't',\n            'is_bool' => true,\n            'value' => $newsletter,\n            'values' => array(\n                array(\n                    'id' => 'newsletter_on',\n                    'value' => 1,\n                    'label' => $this->trans('Enabled', array(), 'Admin.Global'),\n                ),\n                array(\n                    'id' => 'newsletter_off',\n                    'value' => 0,\n                    'label' => $this->trans('Disabled', array(), 'Admin.Global'),\n                ),\n            ),\n            'hint' => $this->trans('This customer will receive your newsletter via email.', array(), 'Admin.Orderscustomers.Help'),\n        );\n        $this->context->smarty->assign(array('input' => $input));\n\n        return $this->display(__FILE__, 'views/templates/admin/newsletter_subscribe.tpl');\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (!empty($customer['email']) && Validate::isEmail($customer['email'])) {\n            $sql = 'DELETE FROM ' . _DB_PREFIX_ . \"emailsubscription WHERE email = '\" . pSQL($customer['email']) . \"'\";\n            if (Db::getInstance()->execute($sql)) {\n                return json_encode(true);\n            }\n\n            return json_encode($this->trans('Newsletter subscription: no email to delete, this customer has not registered.', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (!Tools::isEmpty($customer['email']) && Validate::isEmail($customer['email'])) {\n            $sql = 'SELECT * FROM ' . _DB_PREFIX_ . \"emailsubscription WHERE email = '\" . pSQL($customer['email']) . \"'\";\n            if ($res = Db::getInstance()->executeS($sql)) {\n                return json_encode($res);\n            }\n\n            return json_encode($this->trans('Newsletter subscription: no email to export, this customer has not registered.', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n}\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n{extends file='page.tpl'}\n\n{block name=\"page_content\"}\n  <h1>{l s='Newsletter subscription' d='Modules.Emailsubscription.Shop'}</h1>\n\n  <p class=\"alert {if $variables.nw_error}alert-danger{else}alert-success{/if}\">\n    {$variables.msg}\n  </p>\n\n  {if $variables.conditions}\n    <p>{$variables.conditions nofilter}</p>\n  {/if}\n\n{/block}\n\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n\n<div class=\"email_subscription block_newsletter\" id=\"blockEmailSubscription_{$hookName}\">\n  <h4>{l s='Newsletter' d='Modules.Emailsubscription.Shop'}</h4>\n  {if $msg}\n    <p class=\"notification {if $nw_error}notification-error{else}notification-success{/if}\">{$msg}</p>\n  {/if}\n  <form action=\"{$urls.current_url}#blockEmailSubscription_{$hookName}\" method=\"post\">\n    <input type=\"email\" name=\"email\" value=\"{$value}\" placeholder=\"{l s='Your e-mail' d='Modules.Emailsubscription.Shop'}\" required />\n    {if $conditions}\n      <p>{$conditions nofilter}</p>\n    {/if}\n    {hook h='displayNewsletterRegistration'}\n    <input type=\"hidden\" name=\"blockHookName\" value=\"{$hookName}\" />\n    <input type=\"submit\" name=\"submitNewsletter\" value=\"ok\" />\n    {hook h='displayGDPRConsent' id_module=$id_module}\n    <input type=\"hidden\" name=\"action\" value=\"0\" />\n  </form>\n</div>\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n\n<div class=\"email_subscription block_newsletter\" id=\"blockEmailSubscription_{$hookName}\">\n  <h4>{l s='Newsletter' d='Modules.Emailsubscription.Shop'}</h4>\n  {if $msg}\n    <p class=\"notification {if $nw_error}notification-error{else}notification-success{/if}\">{$msg}</p>\n  {/if}\n  <form action=\"{$urls.current_url}#blockEmailSubscription_{$hookName}\" method=\"post\">\n    <input type=\"email\" name=\"email\" value=\"{$value}\" placeholder=\"{l s='Your e-mail' d='Modules.Emailsubscription.Shop'}\" required />\n    {if $conditions}\n      <p>{$conditions nofilter}</p>\n    {/if}\n    {hook h='displayNewsletterRegistration'}\n    <input type=\"hidden\" value=\"{$hookName}\" name=\"blockHookName\" />\n    <input type=\"submit\" value=\"ok\" name=\"submitNewsletter\" />\n    {hook h='displayGDPRConsent' id_module=$id_module}\n    <input type=\"hidden\" name=\"action\" value=\"0\" />\n  </form>\n</div>\n"], "fixing_code": ["<?php\n/**\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Database\\EntityManager;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Ps_Emailsubscription extends Module implements WidgetInterface\n{\n    /**\n     * @var string Name of the module running on PS 1.6.x. Used for data migration.\n     */\n    const PS_16_EQUIVALENT_MODULE = 'blocknewsletter';\n\n    const GUEST_NOT_REGISTERED = -1;\n    const CUSTOMER_NOT_REGISTERED = 0;\n    const GUEST_REGISTERED = 1;\n    const CUSTOMER_REGISTERED = 2;\n\n    const LEGAL_PRIVACY = 'LEGAL_PRIVACY';\n\n    protected $_origin_newsletter;\n\n    const TPL_COLUMN = 'ps_emailsubscription-column.tpl';\n    const TPL_DEFAULT = 'ps_emailsubscription.tpl';\n\n    /**\n     * @param EntityManager $entity_manager\n     */\n    public function __construct(EntityManager $entity_manager)\n    {\n        $this->name = 'ps_emailsubscription';\n        $this->need_instance = 0;\n\n        $this->controllers = array('verification', 'subscription');\n\n        $this->bootstrap = true;\n        parent::__construct();\n\n        $this->displayName = $this->trans('Newsletter subscription', array(), 'Modules.Emailsubscription.Admin');\n        $this->description = $this->trans('Keep in touch with your customers the way you want, add a form to the homepage of your store and allow all the curious to subscribe to your newsletter.', array(), 'Modules.Emailsubscription.Admin');\n        $this->confirmUninstall = $this->trans('Are you sure that you want to delete all of your contacts?', array(), 'Modules.Emailsubscription.Admin');\n        $this->ps_versions_compliancy = array('min' => '1.7.1.0', 'max' => _PS_VERSION_);\n\n        $this->entity_manager = $entity_manager;\n\n        $this->version = '2.6.0';\n        $this->author = 'PrestaShop';\n        $this->error = false;\n        $this->valid = false;\n        $this->_files = array(\n            'name' => array('newsletter_conf', 'newsletter_voucher'),\n            'ext' => array(\n                0 => 'html',\n                1 => 'txt',\n            ),\n        );\n\n        $this->_searched_email = null;\n\n        $this->_html = '';\n        if ($this->id) {\n            $this->file = 'export_' . Configuration::get('PS_NEWSLETTER_RAND') . '.csv';\n            $this->post_valid = array();\n\n            // Getting data...\n            $countries = Country::getCountries($this->context->language->id);\n\n            // ...formatting array\n            $countries_list = array($this->trans('All countries', array(), 'Admin.Global'));\n            foreach ($countries as $country) {\n                $countries_list[$country['id_country']] = $country['name'];\n            }\n        }\n    }\n\n    public function install()\n    {\n        if (!parent::install()\n            || !$this->registerHook(\n                array(\n                    'actionFrontControllerSetMedia',\n                    'displayFooterBefore',\n                    'actionCustomerAccountAdd',\n                    'actionObjectCustomerUpdateBefore',\n                    'additionalCustomerFormFields',\n                    'displayAdminCustomersForm',\n                    'registerGDPRConsent',\n                    'actionDeleteGDPRCustomer',\n                    'actionExportGDPRData',\n                    'actionCustomerAccountUpdate',\n                )\n            )\n        ) {\n            return false;\n        }\n\n        if ($this->uninstallPrestaShop16Module()) {\n            // 1.6 Module exist and was uninstalled\n            Db::getInstance()->execute('RENAME TABLE `' . _DB_PREFIX_ . 'newsletter` to `' . _DB_PREFIX_ . 'emailsubscription`');\n        } else {\n            Configuration::updateValue('PS_NEWSLETTER_RAND', mt_rand() . mt_rand());\n            Configuration::updateValue('NW_SALT', Tools::passwdGen(16));\n        }\n\n        // New data\n        $conditions = array();\n        $languages = Language::getLanguages(false);\n        foreach ($languages as $lang) {\n            $conditions[(int) $lang['id_lang']] = $this->getConditionFixtures($lang);\n        }\n        Configuration::updateValue('NW_CONDITIONS', $conditions, true);\n\n        return Db::getInstance()->execute('\n        CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'emailsubscription` (\n            `id` int(6) NOT NULL AUTO_INCREMENT,\n            `id_shop` INTEGER UNSIGNED NOT NULL DEFAULT \\'1\\',\n            `id_shop_group` INTEGER UNSIGNED NOT NULL DEFAULT \\'1\\',\n            `email` varchar(255) NOT NULL,\n            `newsletter_date_add` DATETIME NULL,\n            `ip_registration_newsletter` varchar(15) NOT NULL,\n            `http_referer` VARCHAR(255) NULL,\n            `active` TINYINT(1) NOT NULL DEFAULT \\'0\\',\n            `id_lang` int(10) NOT NULL DEFAULT \\'0\\',\n            PRIMARY KEY(`id`)\n        ) ENGINE=' . _MYSQL_ENGINE_ . ' default CHARSET=utf8');\n    }\n\n    public function uninstall()\n    {\n        Db::getInstance()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'emailsubscription');\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Migrate data from 1.6 equivalent module (if applicable), then uninstall\n     */\n    public function uninstallPrestaShop16Module()\n    {\n        if (!Module::isInstalled(self::PS_16_EQUIVALENT_MODULE)) {\n            return false;\n        }\n        $oldModule = Module::getInstanceByName(self::PS_16_EQUIVALENT_MODULE);\n\n        if ($oldModule) {\n            // This closure calls the parent class to prevent data to be erased\n            // It allows the new module to be configured without migration\n            $parentUninstallClosure = function () {\n                return parent::uninstall();\n            };\n\n            $parentUninstallClosure = $parentUninstallClosure->bindTo($oldModule, get_class($oldModule));\n            $parentUninstallClosure();\n        }\n\n        return true;\n    }\n\n    public function getContent()\n    {\n        if (Tools::isSubmit('submitUpdate')) {\n            Configuration::updateValue('NW_CONFIRMATION_EMAIL', (bool) Tools::getValue('NW_CONFIRMATION_EMAIL'));\n            Configuration::updateValue('NW_VERIFICATION_EMAIL', (bool) Tools::getValue('NW_VERIFICATION_EMAIL'));\n\n            $conditions = array();\n            $languages = Language::getLanguages(false);\n            foreach ($languages as $lang) {\n                if (Tools::getIsset('NW_CONDITIONS_' . $lang['id_lang'])) {\n                    $conditions[$lang['id_lang']] = Tools::getValue('NW_CONDITIONS_' . $lang['id_lang']);\n                }\n            }\n\n            Configuration::updateValue('NW_CONDITIONS', $conditions, true);\n            $voucher = Tools::getValue('NW_VOUCHER_CODE');\n\n            if ($voucher && !Validate::isDiscountName($voucher)) {\n                $this->_html .= $this->displayError($this->trans('The voucher code is invalid.', array(), 'Admin.Notifications.Error'));\n            } else {\n                Configuration::updateValue('NW_VOUCHER_CODE', pSQL($voucher));\n                $this->_html .= $this->displayConfirmation($this->trans('Settings updated', array(), 'Admin.Notifications.Success'));\n            }\n\n        } elseif (Tools::isSubmit('subscribedmerged')) {\n            $id = Tools::getValue('id');\n\n            if (preg_match('/(^N)/', $id)) {\n                $id = (int) Tools::substr($id, 1);\n                $sql = 'UPDATE ' . _DB_PREFIX_ . 'emailsubscription SET active = 0 WHERE id = ' . $id;\n                Db::getInstance()->execute($sql);\n            } else {\n                $c = new Customer((int) $id);\n                $c->newsletter = (int) !$c->newsletter;\n                $c->update();\n            }\n\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&conf=4&token=' . Tools::getAdminTokenLite('AdminModules'));\n\n        } elseif (Tools::isSubmit('submitExport') && $action = Tools::getValue('action')) {\n            $this->export_csv();\n        } elseif (Tools::isSubmit('searchEmail')) {\n            $this->_searched_email = Tools::getValue('searched_email');\n        }\n\n        $this->_html .= $this->renderForm();\n        $this->_html .= $this->renderSearchForm();\n        $this->_html .= $this->renderList();\n\n        $this->_html .= $this->renderExportForm();\n\n        return $this->_html;\n    }\n\n    public function renderList()\n    {\n        $fields_list = array(\n            'id' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'shop_name' => array(\n                'title' => $this->trans('Shop', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'gender' => array(\n                'title' => $this->trans('Gender', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'lastname' => array(\n                'title' => $this->trans('Lastname', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'firstname' => array(\n                'title' => $this->trans('Firstname', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'email' => array(\n                'title' => $this->trans('Email', array(), 'Admin.Global'),\n                'search' => false,\n            ),\n            'subscribed' => array(\n                'title' => $this->trans('Subscribed', array(), 'Modules.Emailsubscription.Admin'),\n                'type' => 'bool',\n                'active' => 'subscribed',\n                'search' => false,\n            ),\n            'iso_code' => array(\n                'title' => $this->trans('Iso language', array(), 'Modules.Emailsubscription.Admin'),\n                'search' => false,\n            ),\n            'newsletter_date_add' => array(\n                'title' => $this->trans('Subscribed on', array(), 'Modules.Emailsubscription.Admin'),\n                'type' => 'date',\n                'search' => false,\n            ),\n        );\n\n        if (!Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n            unset($fields_list['shop_name']);\n        }\n\n        $helper_list = new HelperList();\n        $helper_list->module = $this;\n        $helper_list->title = $this->trans('Newsletter registrations', array(), 'Modules.Emailsubscription.Admin');\n        $helper_list->shopLinkType = '';\n        $helper_list->no_link = true;\n        $helper_list->show_toolbar = true;\n        $helper_list->simple_header = false;\n        $helper_list->identifier = 'id';\n        $helper_list->table = 'merged';\n        $helper_list->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name;\n        $helper_list->token = Tools::getAdminTokenLite('AdminModules');\n        $helper_list->actions = array('viewCustomer');\n\n        // This is needed for displayEnableLink to avoid code duplication\n        $this->_helperlist = $helper_list;\n\n        /* Retrieve list data */\n        $subscribers = $this->getSubscribers();\n        $helper_list->listTotal = count($subscribers);\n\n        /* Paginate the result */\n        $page = ($page = Tools::getValue('submitFilter' . $helper_list->table)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper_list->table . '_pagination')) ? $pagination : 50;\n        $subscribers = $this->paginateSubscribers($subscribers, $page, $pagination);\n\n        return $helper_list->generateList($subscribers, $fields_list);\n    }\n\n    public function displayViewCustomerLink($token = null, $id, $name = null)\n    {\n        $this->smarty->assign(array(\n            'href' => 'index.php?controller=AdminCustomers&id_customer=' . (int) $id . '&updatecustomer&token=' . Tools::getAdminTokenLite('AdminCustomers'),\n            'action' => $this->trans('View', array(), 'Admin.Actions'),\n            'disable' => !((int) $id > 0),\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_viewcustomer.tpl');\n    }\n\n    public function displayEnableLink($token, $id, $value, $active, $id_category = null, $id_product = null, $ajax = false)\n    {\n        $this->smarty->assign(array(\n            'ajax' => $ajax,\n            'enabled' => (bool) $value,\n            'url_enable' => $this->_helperlist->currentIndex . '&' . $this->_helperlist->identifier . '=' . $id . '&' . $active . $this->_helperlist->table . ($ajax ? '&action=' . $active . $this->_helperlist->table . '&ajax=' . (int) $ajax : '') . ((int) $id_category && (int) $id_product ? '&id_category=' . (int) $id_category : '') . '&token=' . $token,\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_enable.tpl');\n    }\n\n    public function displayUnsubscribeLink($token = null, $id, $name = null)\n    {\n        $this->smarty->assign(array(\n            'href' => $this->_helperlist->currentIndex . '&subscribedcustomer&' . $this->_helperlist->identifier . '=' . $id . '&token=' . $token,\n            'action' => $this->trans('Unsubscribe', array(), 'Modules.Emailsubscription.Admin'),\n        ));\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_unsubscribe.tpl');\n    }\n\n    /**\n     * Check if this mail is registered for newsletters.\n     *\n     * @param string $customer_email\n     *\n     * @return int -1 = not a customer and not registered\n     *             0 = customer not registered\n     *             1 = registered in block\n     *             2 = registered in customer\n     */\n    public function isNewsletterRegistered($customer_email)\n    {\n        $sql = 'SELECT `email`\n                FROM ' . _DB_PREFIX_ . 'emailsubscription\n                WHERE `email` = \\'' . pSQL($customer_email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        if (Db::getInstance()->getRow($sql)) {\n            return self::GUEST_REGISTERED;\n        }\n\n        $sql = 'SELECT `newsletter`\n                FROM ' . _DB_PREFIX_ . 'customer\n                WHERE `email` = \\'' . pSQL($customer_email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        if (!$registered = Db::getInstance()->getRow($sql)) {\n            return self::GUEST_NOT_REGISTERED;\n        }\n\n        if ($registered['newsletter'] == '1') {\n            return self::CUSTOMER_REGISTERED;\n        }\n\n        return self::CUSTOMER_NOT_REGISTERED;\n    }\n\n    /**\n     * Register in email subscription.\n     *\n     * @param string|null $hookName For widgets displayed by a hook, hook name must be passed\n     * as multiple hooks might be used, so it is necessary to know which one was used for\n     * submitting the form\n     *\n     * @return bool|string\n     */\n    public function newsletterRegistration($hookName = null)\n    {\n        $isPrestaShopVersionOver177 = version_compare(_PS_VERSION_, '1.7.7', '>=');\n\n        if ($isPrestaShopVersionOver177 && ($hookName !== null)) {\n            if (empty($_POST['blockHookName']) || $_POST['blockHookName'] !== $hookName) {\n                return false;\n            }\n        }\n\n        // hook for newsletter registration/unregistration : fill-in hookError string is there is an error\n        $hookError = null;\n        Hook::exec(\n            'actionNewsletterRegistrationBefore',\n            [\n                'hookName' => $hookName,\n                'email' => $_POST['email'],\n                'action' => $_POST['action'],\n                'hookError' => &$hookError,\n            ]\n        );\n        if ($hookError !== null) {\n            return $this->error = $hookError;\n        }\n\n        if (empty($_POST['email']) || !Validate::isEmail($_POST['email'])) {\n            return $this->error = $this->trans('Invalid email address.', array(), 'Shop.Notifications.Error');\n\n        } elseif ($_POST['action'] == '1') {\n            $register_status = $this->isNewsletterRegistered($_POST['email']);\n\n            if ($register_status < 1) {\n                return $this->error = $this->trans('This email address is not registered.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            if (!$this->unregister($_POST['email'], $register_status)) {\n                return $this->error = $this->trans('An error occurred while attempting to unsubscribe.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            return $this->valid = $this->trans('Unsubscription successful.', array(), 'Modules.Emailsubscription.Shop');\n\n        } elseif ($_POST['action'] == '0') {\n\n            $register_status = $this->isNewsletterRegistered($_POST['email']);\n            if ($register_status > 0) {\n                return $this->error = $this->trans('This email address is already registered.', array(), 'Modules.Emailsubscription.Shop');\n            }\n\n            $email = pSQL($_POST['email']);\n            if (!$this->isRegistered($register_status)) {\n                if (Configuration::get('NW_VERIFICATION_EMAIL')) {\n\n                    // create an unactive entry in the newsletter database\n                    if ($register_status == self::GUEST_NOT_REGISTERED) {\n                        $this->registerGuest($email, false);\n                    }\n\n                    if (!$token = $this->getToken($email, $register_status)) {\n                        return $this->error = $this->trans('An error occurred during the subscription process.', array(), 'Modules.Emailsubscription.Shop');\n                    }\n\n                    $this->sendVerificationEmail($email, $token);\n\n                    return $this->valid = $this->trans('A verification email has been sent. Please check your inbox.', array(), 'Modules.Emailsubscription.Shop');\n\n                } else {\n                    if ($this->register($email, $register_status)) {\n                        $this->valid = $this->trans('You have successfully subscribed to this newsletter.', array(), 'Modules.Emailsubscription.Shop');\n                    } else {\n                        return $this->error = $this->trans('An error occurred during the subscription process.', array(), 'Modules.Emailsubscription.Shop');\n                    }\n\n                    if ($code = Configuration::get('NW_VOUCHER_CODE')) {\n                        $this->sendVoucher($email, $code);\n                    }\n\n                    if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n                        $this->sendConfirmationEmail($email);\n                    }\n                }\n            }\n        }\n        // hook\n        Hook::exec(\n            'actionNewsletterRegistrationAfter',\n            [\n                'hookName' => $hookName,\n                'email' => $_POST['email'],\n                'action' => $_POST['action'],\n                'error' => &$this->error,\n            ]\n        );\n    }\n\n    public function getSubscribers()\n    {\n        $dbquery = new DbQuery();\n        $dbquery->select('c.`id_customer` AS `id`, s.`name` AS `shop_name`, gl.`name` AS `gender`, c.`lastname`, c.`firstname`, c.`email`, c.`newsletter` AS `subscribed`, c.`newsletter_date_add`, l.`iso_code`');\n        $dbquery->from('customer', 'c');\n        $dbquery->leftJoin('shop', 's', 's.id_shop = c.id_shop');\n        $dbquery->leftJoin('gender', 'g', 'g.id_gender = c.id_gender');\n        $dbquery->leftJoin('gender_lang', 'gl', 'g.id_gender = gl.id_gender AND gl.id_lang = ' . (int) $this->context->employee->id_lang);\n        $dbquery->where('c.`newsletter` = 1');\n        $dbquery->leftJoin('lang', 'l', 'l.id_lang = c.id_lang');\n        if ($this->_searched_email) {\n            $dbquery->where('c.`email` LIKE \\'%' . pSQL($this->_searched_email) . '%\\' ');\n        }\n\n        $customers = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($dbquery->build());\n\n        $dbquery = new DbQuery();\n        $dbquery->select('CONCAT(\\'N\\', e.`id`) AS `id`, s.`name` AS `shop_name`, NULL AS `gender`, NULL AS `lastname`, NULL AS `firstname`, e.`email`, e.`active` AS `subscribed`, e.`newsletter_date_add`, l.`iso_code`');\n        $dbquery->from('emailsubscription', 'e');\n        $dbquery->leftJoin('shop', 's', 's.id_shop = e.id_shop');\n        $dbquery->leftJoin('lang', 'l', 'l.id_lang = e.id_lang');\n        $dbquery->where('e.`active` = 1');\n        if ($this->_searched_email) {\n            $dbquery->where('e.`email` LIKE \\'%' . pSQL($this->_searched_email) . '%\\' ');\n        }\n\n        $non_customers = Db::getInstance()->executeS($dbquery->build());\n\n        $subscribers = array_merge($customers, $non_customers);\n\n        return $subscribers;\n    }\n\n    public function paginateSubscribers($subscribers, $page = 1, $pagination = 50)\n    {\n        if (count($subscribers) > $pagination) {\n            $subscribers = array_slice($subscribers, $pagination * ($page - 1), $pagination);\n        }\n\n        return $subscribers;\n    }\n\n    /**\n     * Return true if the registered status correspond to a registered user.\n     *\n     * @param int $register_status\n     *\n     * @return bool\n     */\n    protected function isRegistered($register_status)\n    {\n        return in_array(\n            $register_status,\n            array(self::GUEST_REGISTERED, self::CUSTOMER_REGISTERED)\n        );\n    }\n\n    /**\n     * Subscribe an email to the newsletter. It will create an entry in the newsletter table\n     * or update the customer table depending of the register status.\n     *\n     * @param string $email\n     * @param int $register_status\n     */\n    protected function register($email, $register_status)\n    {\n        if ($register_status == self::GUEST_NOT_REGISTERED) {\n            return $this->registerGuest($email);\n        }\n\n        if ($register_status == self::CUSTOMER_NOT_REGISTERED) {\n            return $this->registerUser($email);\n        }\n\n        return false;\n    }\n\n    protected function unregister($email, $register_status)\n    {\n        if ($register_status == self::GUEST_REGISTERED) {\n            $sql = 'DELETE FROM ' . _DB_PREFIX_ . 'emailsubscription WHERE `email` = \\'' . pSQL($_POST['email']) . '\\' AND id_shop = ' . $this->context->shop->id;\n        } elseif ($register_status == self::CUSTOMER_REGISTERED) {\n            $sql = 'UPDATE ' . _DB_PREFIX_ . 'customer SET `newsletter` = 0 WHERE `email` = \\'' . pSQL($_POST['email']) . '\\' AND id_shop = ' . $this->context->shop->id;\n        }\n\n        if (!isset($sql) || !Db::getInstance()->execute($sql)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Subscribe a customer to the newsletter.\n     *\n     * @param string $email\n     *\n     * @return bool\n     */\n    protected function registerUser($email)\n    {\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'customer\n                SET `newsletter` = 1, newsletter_date_add = NOW(), `ip_registration_newsletter` = \\'' . pSQL(Tools::getRemoteAddr()) . '\\'\n                WHERE `email` = \\'' . pSQL($email) . '\\'\n                AND id_shop = ' . $this->context->shop->id;\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Subscribe a guest to the newsletter.\n     *\n     * @param string $email\n     * @param bool $active\n     *\n     * @return bool\n     */\n    protected function registerGuest($email, $active = true)\n    {\n        $sql = 'INSERT INTO ' . _DB_PREFIX_ . 'emailsubscription (id_shop, id_shop_group, email, newsletter_date_add, ip_registration_newsletter, http_referer, active, id_lang)\n                VALUES\n                (' . $this->context->shop->id . ',\n                ' . $this->context->shop->id_shop_group . ',\n                \\'' . pSQL($email) . '\\',\n                NOW(),\n                \\'' . pSQL(Tools::getRemoteAddr()) . '\\',\n                (\n                    SELECT c.http_referer\n                    FROM ' . _DB_PREFIX_ . 'connections c\n                    WHERE c.id_guest = ' . (int) $this->context->customer->id . '\n                    ORDER BY c.date_add DESC LIMIT 1\n                ),\n                ' . (int) $active . ',\n                ' . $this->context->language->id . '\n                )';\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    public function activateGuest($email)\n    {\n        return Db::getInstance()->execute(\n            'UPDATE `' . _DB_PREFIX_ . 'emailsubscription`\n                        SET `active` = 1\n                        WHERE `email` = \\'' . pSQL($email) . '\\''\n        );\n    }\n\n    /**\n     * Returns a guest email by token.\n     *\n     * @param string $token\n     *\n     * @return string email\n     */\n    protected function getGuestEmailByToken($token)\n    {\n        $sql = 'SELECT `email`\n                FROM `' . _DB_PREFIX_ . 'emailsubscription`\n                WHERE MD5(CONCAT( `email` , `newsletter_date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) = \\'' . pSQL($token) . '\\'\n                AND `active` = 0';\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Returns a customer email by token.\n     *\n     * @param string $token\n     *\n     * @return string email\n     */\n    protected function getUserEmailByToken($token)\n    {\n        $sql = 'SELECT `email`\n                FROM `' . _DB_PREFIX_ . 'customer`\n                WHERE MD5(CONCAT( `email` , `date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) = \\'' . pSQL($token) . '\\'\n                AND `newsletter` = 0';\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Return a token associated to an user.\n     *\n     * @param string $email\n     * @param string $register_status\n     */\n    protected function getToken($email, $register_status)\n    {\n        if (in_array($register_status, array(self::GUEST_NOT_REGISTERED, self::GUEST_REGISTERED))) {\n            $sql = 'SELECT MD5(CONCAT( `email` , `newsletter_date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\')) as token\n                    FROM `' . _DB_PREFIX_ . 'emailsubscription`\n                    WHERE `active` = 0\n                    AND `email` = \\'' . pSQL($email) . '\\'';\n        } elseif ($register_status == self::CUSTOMER_NOT_REGISTERED) {\n            $sql = 'SELECT MD5(CONCAT( `email` , `date_add`, \\'' . pSQL(Configuration::get('NW_SALT')) . '\\' )) as token\n                    FROM `' . _DB_PREFIX_ . 'customer`\n                    WHERE `newsletter` = 0\n                    AND `email` = \\'' . pSQL($email) . '\\'';\n        }\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Ends the registration process to the newsletter.\n     *\n     * @param string $token\n     *\n     * @return string\n     */\n    public function confirmEmail($token)\n    {\n        $activated = false;\n\n        if ($email = $this->getGuestEmailByToken($token)) {\n            $activated = $this->activateGuest($email);\n        } elseif ($email = $this->getUserEmailByToken($token)) {\n            $activated = $this->registerUser($email);\n        }\n\n        if (!$activated) {\n            return $this->trans('This email is already registered and/or invalid.', array(), 'Modules.Emailsubscription.Shop');\n        }\n\n        if ($discount = Configuration::get('NW_VOUCHER_CODE')) {\n            $this->sendVoucher($email, $discount);\n        }\n\n        if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n            $this->sendConfirmationEmail($email);\n        }\n\n        return $this->trans('Thank you for subscribing to our newsletter.', array(), 'Modules.Emailsubscription.Shop');\n    }\n\n    /**\n     * Send the confirmation mails to the given $email address if needed.\n     *\n     * @param string $email Email where to send the confirmation\n     *\n     * @note the email has been verified and might not yet been registered. Called by AuthController::processCustomerNewsletter\n     */\n    public function confirmSubscription($email)\n    {\n        if ($email) {\n            if ($discount = Configuration::get('NW_VOUCHER_CODE')) {\n                $this->sendVoucher($email, $discount);\n            }\n\n            if (Configuration::get('NW_CONFIRMATION_EMAIL')) {\n                $this->sendConfirmationEmail($email);\n            }\n        }\n    }\n\n    /**\n     * Send an email containing a voucher code.\n     *\n     * @param $email\n     * @param $code\n     *\n     * @return bool|int\n     */\n    protected function sendVoucher($email, $code)\n    {\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_voucher',\n            $this->trans(\n                'Newsletter voucher',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(\n                '{discount}' => $code,\n            ),\n            $email,\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    /**\n     * Send a confirmation email.\n     *\n     * @param string $email\n     *\n     * @return bool\n     */\n    protected function sendConfirmationEmail($email)\n    {\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_conf',\n            $this->trans(\n                'Newsletter confirmation',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(),\n            pSQL($email),\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    /**\n     * Send a verification email.\n     *\n     * @param string $email\n     * @param string $token\n     *\n     * @return bool\n     */\n    protected function sendVerificationEmail($email, $token)\n    {\n        $verif_url = Context::getContext()->link->getModuleLink(\n            'ps_emailsubscription', 'verification', array(\n                'token' => $token,\n            )\n        );\n        $language = new Language($this->context->language->id);\n\n        return Mail::Send(\n            $this->context->language->id,\n            'newsletter_verif',\n            $this->trans(\n                'Email verification',\n                array(),\n                'Emails.Subject',\n                $language->locale\n            ),\n            array(\n                '{verif_url}' => $verif_url,\n            ),\n            $email,\n            null,\n            null,\n            null,\n            null,\n            null,\n            dirname(__FILE__) . '/mails/',\n            false,\n            $this->context->shop->id\n        );\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        if ($hookName == null && isset($configuration['hook'])) {\n            $hookName = $configuration['hook'];\n        }\n\n        $template_file = ($hookName == 'displayLeftColumn') ? self::TPL_COLUMN : self::TPL_DEFAULT;\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n        $this->context->smarty->assign(array(\n            'id_module' => $this->id,\n            'hookName' => $hookName,\n        ));\n\n        return $this->fetch('module:ps_emailsubscription/views/templates/hook/' . $template_file);\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $variables['value'] = '';\n        $variables['msg'] = '';\n        $variables['conditions'] = Configuration::get('NW_CONDITIONS', $this->context->language->id);\n\n        if (Tools::isSubmit('submitNewsletter')) {\n            $this->error = $this->valid = '';\n            $this->newsletterRegistration($hookName);\n\n            if ($this->error) {\n                $variables['value'] = Tools::getValue('email', '');\n                $variables['msg'] = $this->error;\n                $variables['nw_error'] = true;\n            } elseif ($this->valid) {\n                $variables['value'] = Tools::getValue('email', '');\n                $variables['msg'] = $this->valid;\n                $variables['nw_error'] = false;\n            }\n        }\n\n        return $variables;\n    }\n\n    public function hookActionFrontControllerSetMedia()\n    {\n        Media::addJsDef([\n            'psemailsubscription_subscription' => $this->context->link->getModuleLink($this->name, 'subscription', [], true),\n        ]);\n\n        $this->context->controller->registerJavascript('modules-psemailsubscription', 'modules/' . $this->name . '/views/js/ps_emailsubscription.js');\n    }\n\n    /**\n     * Deletes duplicates email in newsletter table.\n     *\n     * @param $params\n     *\n     * @return bool\n     */\n    public function hookActionCustomerAccountAdd($params)\n    {\n        //if e-mail of the created user address has already been added to the newsletter through the ps_emailsubscription module,\n        //we delete it from ps_emailsubscription table to prevent duplicates\n        if (empty($params['newCustomer'])) {\n            return;\n        }\n        $id_shop = $params['newCustomer']->id_shop;\n        $email = $params['newCustomer']->email;\n        $newsletter = $params['newCustomer']->newsletter;\n        if (Validate::isEmail($email)) {\n            if ($params['newCustomer']->newsletter && $code = Configuration::get('NW_VOUCHER_CODE')) {\n                $this->sendVoucher($email, $code);\n            }\n\n            return (bool) Db::getInstance()->execute('DELETE FROM ' . _DB_PREFIX_ . 'emailsubscription WHERE id_shop=' . (int) $id_shop . ' AND email=\\'' . pSQL($email) . \"'\");\n        }\n\n        if ($newsletter) {\n            if (Configuration::get('NW_CONFIRMATION_EMAIL')) {// send confirmation email\n                $this->sendConfirmationEmail($params['newCustomer']->email);\n            }\n            if ($code = Configuration::get('NW_VOUCHER_CODE')) {// send voucher\n                $this->sendVoucher($params['newCustomer']->email, $code);\n            }\n        }\n\n        return true;\n    }\n\n   public function hookActionObjectCustomerUpdateBefore($params)\n   {\n       $customer = new Customer($params['object']->id);\n       $this->_origin_newsletter = (int)$customer->newsletter;\n   }\n\n    public function hookActionCustomerAccountUpdate($params)\n    {\n        if ($this->_origin_newsletter || !$params['customer']->newsletter) {\n            return;\n        }\n        if (Configuration::get('NW_CONFIRMATION_EMAIL')) {// send confirmation email\n            $this->sendConfirmationEmail($params['customer']->email);\n        }\n        if ($code = Configuration::get('NW_VOUCHER_CODE')) {\n            $cartRule = CartRuleCore::getCartsRuleByCode($code, Context::getContext()->language->id);\n            if (! Order::getDiscountsCustomer($params['customer']->id, $cartRule[0])) {// send voucher\n                $this->sendVoucher($params['customer']->email, $code);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Add an extra FormField to ask for newsletter registration.\n     *\n     * @param $params\n     *\n     * @return bool\n     */\n    public function hookAdditionalCustomerFormFields($params)\n    {\n        $label = $this->trans(\n            'Sign up for our newsletter[1][2]%conditions%[/2]',\n            array(\n                '[1]' => '<br>',\n                '[2]' => '<em>',\n                '%conditions%' => Tools::htmlentitiesUTF8(\n                    Configuration::get('NW_CONDITIONS', $this->context->language->id)\n                ),\n                '[/2]' => '</em>',\n            ),\n            'Modules.Emailsubscription.Shop'\n        );\n\n        return array(\n            (new FormField())\n                ->setName('newsletter')\n                ->setType('checkbox')\n                ->setLabel($label), );\n    }\n\n    public function renderForm()\n    {\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Settings', array(), 'Admin.Global'),\n                    'icon' => 'icon-cogs',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'switch',\n                        'label' => $this->trans('Would you like to send a verification email after subscription?', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_VERIFICATION_EMAIL',\n                        'values' => array(\n                            array(\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', array(), 'Admin.Global'),\n                            ),\n                            array(\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', array(), 'Admin.Global'),\n                            ),\n                        ),\n                    ),\n                    array(\n                        'type' => 'switch',\n                        'label' => $this->trans('Would you like to send a confirmation email after subscription?', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_CONFIRMATION_EMAIL',\n                        'values' => array(\n                            array(\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', array(), 'Admin.Global'),\n                            ),\n                            array(\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', array(), 'Admin.Global'),\n                            ),\n                        ),\n                    ),\n                    array(\n                        'type' => 'text',\n                        'label' => $this->trans('Welcome voucher code', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'NW_VOUCHER_CODE',\n                        'class' => 'fixed-width-md',\n                        'desc' => $this->trans('Leave blank to disable by default.', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                    array(\n                        'type' => 'textarea',\n                        'label' => $this->trans('Newsletter conditions', array(), 'Modules.Emailsubscription.Admin'),\n                        'lang' => true,\n                        'name' => 'NW_CONDITIONS',\n                        'cols' => 40,\n                        'rows' => 100,\n                        'hint' => $this->trans(\n                            'This text will be displayed beneath the newsletter subscribe button.',\n                            array(),\n                            'Modules.Emailsubscription.Admin'\n                        ),\n                        'desc' => $this->trans('Leave blank to disable by default.', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Save', array(), 'Admin.Actions'),\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->table;\n\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitUpdate';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function renderExportForm()\n    {\n        // Getting data...\n        $countries = Country::getCountries($this->context->language->id);\n\n        // ...formatting array\n        $countries_list = array(array('id' => 0, 'name' => $this->trans('All countries', array(), 'Admin.Global')));\n        foreach ($countries as $country) {\n            $countries_list[] = array('id' => $country['id_country'], 'name' => $country['name']);\n        }\n\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Export customers\\' addresses', array(), 'Modules.Emailsubscription.Admin'),\n                    'icon' => 'icon-envelope',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Customers\\' country', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers by country.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'COUNTRY',\n                        'required' => false,\n                        'default_value' => (int) $this->context->country->id,\n                        'options' => array(\n                            'query' => $countries_list,\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Newsletter subscribers', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers who have subscribed to the newsletter or not, and who have an account or not.', array(), 'Modules.Emailsubscription.Admin'),\n                        'hint' => $this->trans('Customers can subscribe to your newsletter when registering, or by entering their email in the newsletter form.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'SUSCRIBERS',\n                        'required' => false,\n                        'default_value' => 1,\n                        'options' => array(\n                            'query' => array(\n                                array('id' => 0, 'name' => $this->trans('All subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 1, 'name' => $this->trans('Subscribers with account', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 2, 'name' => $this->trans('Subscribers without account', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 3, 'name' => $this->trans('Non-subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                            ),\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'select',\n                        'label' => $this->trans('Partner offers subscribers', array(), 'Modules.Emailsubscription.Admin'),\n                        'desc' => $this->trans('Filter customers who have agreed to receive your partners\\' offers or not.', array(), 'Modules.Emailsubscription.Admin'),\n                        'hint' => $this->trans('Partner offers subscribers have agreed to receive your partners\\' offers.', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'OPTIN',\n                        'required' => false,\n                        'default_value' => 1,\n                        'options' => array(\n                            'query' => array(\n                                array('id' => 0, 'name' => $this->trans('All customers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 2, 'name' => $this->trans('Partner offers subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                                array('id' => 1, 'name' => $this->trans('Partner offers non-subscribers', array(), 'Modules.Emailsubscription.Admin')),\n                            ),\n                            'id' => 'id',\n                            'name' => 'name',\n                        ),\n                    ),\n                    array(\n                        'type' => 'hidden',\n                        'name' => 'action',\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Export .CSV file', array(), 'Admin.Actions'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitExport',\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->table;\n\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'btnSubmit';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function renderSearchForm()\n    {\n        $fields_form = array(\n            'form' => array(\n                'legend' => array(\n                    'title' => $this->trans('Search for addresses', array(), 'Modules.Emailsubscription.Admin'),\n                    'icon' => 'icon-search',\n                ),\n                'input' => array(\n                    array(\n                        'type' => 'text',\n                        'label' => $this->trans('Email address to search', array(), 'Modules.Emailsubscription.Admin'),\n                        'name' => 'searched_email',\n                        'class' => 'fixed-width-xxl',\n                        'desc' => $this->trans('Example: contact@prestashop.com or @prestashop.com', array(), 'Modules.Emailsubscription.Admin'),\n                    ),\n                ),\n                'submit' => array(\n                    'title' => $this->trans('Search', array(), 'Admin.Actions'),\n                    'icon' => 'process-icon-refresh',\n                ),\n            ),\n        );\n\n        $helper = new HelperForm();\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'searchEmail';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = array(\n            'fields_value' => array('searched_email' => $this->_searched_email),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        );\n\n        return $helper->generateForm(array($fields_form));\n    }\n\n    public function getConfigFieldsValues()\n    {\n        $conditions = array();\n        $languages = Language::getLanguages(false);\n        foreach ($languages as $lang) {\n            $conditions[$lang['id_lang']] = Tools::getValue(\n                'NW_CONDITIONS_' . $lang['id_lang'],\n                Configuration::get('NW_CONDITIONS', $lang['id_lang']\n                )\n            );\n        }\n\n        return array(\n            'NW_VERIFICATION_EMAIL' => Tools::getValue('NW_VERIFICATION_EMAIL', Configuration::get('NW_VERIFICATION_EMAIL')),\n            'NW_CONFIRMATION_EMAIL' => Tools::getValue('NW_CONFIRMATION_EMAIL', Configuration::get('NW_CONFIRMATION_EMAIL')),\n            'NW_VOUCHER_CODE' => Tools::getValue('NW_VOUCHER_CODE', Configuration::get('NW_VOUCHER_CODE')),\n            'NW_CONDITIONS' => $conditions,\n            'COUNTRY' => Tools::getValue('COUNTRY'),\n            'SUSCRIBERS' => Tools::getValue('SUSCRIBERS'),\n            'OPTIN' => Tools::getValue('OPTIN'),\n            'action' => 'customers',\n        );\n    }\n\n    public function export_csv()\n    {\n        if (!isset($this->context)) {\n            $this->context = Context::getContext();\n        }\n\n        $result = $this->getCustomers();\n\n        if ($result) {\n            if (!$nb = count($result)) {\n                $this->_html .= $this->displayError($this->trans('No customers found with these filters!', array(), 'Modules.Emailsubscription.Admin'));\n\n            } elseif ($fd = @fopen(dirname(__FILE__) . '/' . strval(preg_replace('#\\.{2,}#', '.', Tools::getValue('action'))) . '_' . $this->file, 'w')) {\n                $header = array('id', 'shop_name', 'gender', 'lastname', 'firstname', 'email', 'subscribed', 'subscribed_on', 'iso_language');\n                $array_to_export = array_merge(array($header), $result);\n\n                foreach ($array_to_export as $tab) {\n                    $this->myFputCsv($fd, $tab);\n                }\n\n                fclose($fd);\n\n                $this->_html .= $this->displayConfirmation(\n                    sprintf($this->trans('The .CSV file has been successfully exported: %d customers found.', array(), 'Modules.Emailsubscription.Admin'), $nb) . '<br />\n                <a href=\"' . $this->context->shop->getBaseURI() . 'modules/ps_emailsubscription/' . Tools::safeOutput(strval(Tools::getValue('action'))) . '_' . $this->file . '\">\n                <b>' . $this->trans('Download the file', array(), 'Modules.Emailsubscription.Admin') . ' ' . $this->file . '</b>\n                </a>\n                <br />\n                <ol style=\"margin-top: 10px;\">\n                    <li style=\"color: red;\">' .\n                    $this->trans('WARNING: When opening this .csv file with Excel, choose UTF-8 encoding to avoid strange characters.', array(), 'Modules.Emailsubscription.Admin') .\n                    '</li>\n                </ol>');\n            } else {\n                $this->_html .= $this->displayError($this->trans('Error: Write access limited', array(), 'Modules.Emailsubscription.Admin') . ' ' . dirname(__FILE__) . '/' . strval(Tools::getValue('action')) . '_' . $this->file . ' !');\n            }\n        } else {\n            $this->_html .= $this->displayError($this->trans('No result found!', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n\n    private function getCMSRoles()\n    {\n        $cms_repository = $this->entity_manager->getRepository('CMS');\n        $id_lang = Context::getContext()->employee->id_lang;\n        $id_shop = Context::getContext()->shop->id;\n        $cms_pages = array();\n\n        $fake_object = new stdClass();\n        $fake_object->id = 0;\n        $fake_object->name = $this->trans('-- Select associated page --', array(), 'Modules.Emailsubscription.Admin');\n        $cms_pages[-1] = $fake_object;\n        unset($fake_object);\n\n        foreach ($cms_repository->i10nFindAll($id_lang, $id_shop) as $cms_page) {\n            $object = new stdClass();\n            $object->id = $cms_page->id;\n            $object->name = $cms_page->meta_title;\n            $cms_pages[] = $object;\n        }\n\n        return $cms_pages;\n    }\n\n    private function getCustomers()\n    {\n        $id_shop = false;\n\n        // Get the value to know with subscrib I need to take 1 with account 2 without 0 both 3 not subscrib\n        $who = (int) Tools::getValue('SUSCRIBERS');\n\n        // get optin 0 for all 1 no optin 2 with optin\n        $optin = (int) Tools::getValue('OPTIN');\n\n        $country = (int) Tools::getValue('COUNTRY');\n\n        if (Context::getContext()->cookie->shopContext) {\n            $id_shop = (int) Context::getContext()->shop->id;\n        }\n\n        $customers = array();\n        if ($who == 1 || $who == 0 || $who == 3) {\n            $dbquery = new DbQuery();\n            $dbquery->select('c.`id_customer` AS `id`, s.`name` AS `shop_name`, gl.`name` AS `gender`, c.`lastname`, c.`firstname`, c.`email`, c.`newsletter` AS `subscribed`, c.`newsletter_date_add`, l.`iso_code`');\n            $dbquery->from('customer', 'c');\n            $dbquery->leftJoin('shop', 's', 's.id_shop = c.id_shop');\n            $dbquery->leftJoin('gender', 'g', 'g.id_gender = c.id_gender');\n            $dbquery->leftJoin('gender_lang', 'gl', 'g.id_gender = gl.id_gender AND gl.id_lang = ' . $this->context->employee->id_lang);\n            $dbquery->where('c.`newsletter` = ' . ($who == 3 ? 0 : 1));\n            $dbquery->leftJoin('lang', 'l', 'l.id_lang = c.id_lang');\n            if ($optin == 2 || $optin == 1) {\n                $dbquery->where('c.`optin` = ' . ($optin == 1 ? 0 : 1));\n            }\n            if ($country) {\n                $dbquery->where('(SELECT COUNT(a.`id_address`) as nb_country\n                                                    FROM `' . _DB_PREFIX_ . 'address` a\n                                                    WHERE a.deleted = 0\n                                                    AND a.`id_customer` = c.`id_customer`\n                                                    AND a.`id_country` = ' . $country . ') >= 1');\n            }\n            if ($id_shop) {\n                $dbquery->where('c.`id_shop` = ' . $id_shop);\n            }\n\n            $customers = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($dbquery->build());\n        }\n\n        $non_customers = array();\n        if (($who == 0 || $who == 2) && (!$optin || $optin == 2) && !$country) {\n            $dbquery = new DbQuery();\n            $dbquery->select('CONCAT(\\'N\\', e.`id`) AS `id`, s.`name` AS `shop_name`, NULL AS `gender`, NULL AS `lastname`, NULL AS `firstname`, e.`email`, e.`active` AS `subscribed`, e.`newsletter_date_add`, l.`iso_code`');\n            $dbquery->from('emailsubscription', 'e');\n            $dbquery->leftJoin('shop', 's', 's.id_shop = e.id_shop');\n            $dbquery->where('e.`active` = 1');\n            $dbquery->leftJoin('lang', 'l', 'l.id_lang = e.id_lang');\n            if ($id_shop) {\n                $dbquery->where('e.`id_shop` = ' . $id_shop);\n            }\n            $non_customers = Db::getInstance()->executeS($dbquery->build());\n        }\n\n        $subscribers = array_merge($customers, $non_customers);\n\n        return $subscribers;\n    }\n\n    private function myFputCsv($fd, $array)\n    {\n        $line = implode(';', $array);\n        $line .= \"\\n\";\n        if (!fwrite($fd, $line, 4096)) {\n            $this->post_errors[] = $this->trans('Error: Write access limited', array(), 'Modules.Emailsubscription.Admin') . ' ' . dirname(__FILE__) . '/' . $this->file . ' !';\n        }\n    }\n\n    private function getConditionFixtures($lang)\n    {\n        $locale = $lang['locale'];\n\n        return\n            $this->trans('You may unsubscribe at any moment. For that purpose, please find our contact info in the legal notice.', array(), 'Modules.Emailsubscription.Shop', $locale)\n        ;\n    }\n\n    /**\n     * This hook allow you to add new fields in the admin customer form\n     *\n     * @return string\n     */\n    public function hookDisplayAdminCustomersForm()\n    {\n        $newsletter = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue('SELECT `newsletter`\n            FROM ' . _DB_PREFIX_ . 'customer\n            WHERE `id_customer` = ' . (int) Tools::getValue('id_customer', 0));\n\n        $input = array(\n            'type' => 'switch',\n            'label' => $this->trans('Newsletter', array(), 'Admin.Orderscustomers.Feature'),\n            'name' => 'newsletter',\n            'required' => false,\n            'class' => 't',\n            'is_bool' => true,\n            'value' => $newsletter,\n            'values' => array(\n                array(\n                    'id' => 'newsletter_on',\n                    'value' => 1,\n                    'label' => $this->trans('Enabled', array(), 'Admin.Global'),\n                ),\n                array(\n                    'id' => 'newsletter_off',\n                    'value' => 0,\n                    'label' => $this->trans('Disabled', array(), 'Admin.Global'),\n                ),\n            ),\n            'hint' => $this->trans('This customer will receive your newsletter via email.', array(), 'Admin.Orderscustomers.Help'),\n        );\n        $this->context->smarty->assign(array('input' => $input));\n\n        return $this->display(__FILE__, 'views/templates/admin/newsletter_subscribe.tpl');\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (!empty($customer['email']) && Validate::isEmail($customer['email'])) {\n            $sql = 'DELETE FROM ' . _DB_PREFIX_ . \"emailsubscription WHERE email = '\" . pSQL($customer['email']) . \"'\";\n            if (Db::getInstance()->execute($sql)) {\n                return json_encode(true);\n            }\n\n            return json_encode($this->trans('Newsletter subscription: no email to delete, this customer has not registered.', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (!Tools::isEmpty($customer['email']) && Validate::isEmail($customer['email'])) {\n            $sql = 'SELECT * FROM ' . _DB_PREFIX_ . \"emailsubscription WHERE email = '\" . pSQL($customer['email']) . \"'\";\n            if ($res = Db::getInstance()->executeS($sql)) {\n                return json_encode($res);\n            }\n\n            return json_encode($this->trans('Newsletter subscription: no email to export, this customer has not registered.', array(), 'Modules.Emailsubscription.Admin'));\n        }\n    }\n}\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n{extends file='page.tpl'}\n\n{block name=\"page_content\"}\n  <h1>{l s='Newsletter subscription' d='Modules.Emailsubscription.Shop'}</h1>\n\n  <p class=\"alert {if $variables.nw_error}alert-danger{else}alert-success{/if}\">\n    {$variables.msg}\n  </p>\n\n  {if $variables.conditions}\n    <p>{$variables.conditions}</p>\n  {/if}\n\n{/block}\n\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n\n<div class=\"email_subscription block_newsletter\" id=\"blockEmailSubscription_{$hookName}\">\n  <h4>{l s='Newsletter' d='Modules.Emailsubscription.Shop'}</h4>\n  {if $msg}\n    <p class=\"notification {if $nw_error}notification-error{else}notification-success{/if}\">{$msg}</p>\n  {/if}\n  <form action=\"{$urls.current_url}#blockEmailSubscription_{$hookName}\" method=\"post\">\n    <input type=\"email\" name=\"email\" value=\"{$value}\" placeholder=\"{l s='Your e-mail' d='Modules.Emailsubscription.Shop'}\" required />\n    {if $conditions}\n      <p>{$conditions}</p>\n    {/if}\n    {hook h='displayNewsletterRegistration'}\n    <input type=\"hidden\" name=\"blockHookName\" value=\"{$hookName}\" />\n    <input type=\"submit\" name=\"submitNewsletter\" value=\"ok\" />\n    {hook h='displayGDPRConsent' id_module=$id_module}\n    <input type=\"hidden\" name=\"action\" value=\"0\" />\n  </form>\n</div>\n", "{*\n * 2007-2020 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2020 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n\n<div class=\"email_subscription block_newsletter\" id=\"blockEmailSubscription_{$hookName}\">\n  <h4>{l s='Newsletter' d='Modules.Emailsubscription.Shop'}</h4>\n  {if $msg}\n    <p class=\"notification {if $nw_error}notification-error{else}notification-success{/if}\">{$msg}</p>\n  {/if}\n  <form action=\"{$urls.current_url}#blockEmailSubscription_{$hookName}\" method=\"post\">\n    <input type=\"email\" name=\"email\" value=\"{$value}\" placeholder=\"{l s='Your e-mail' d='Modules.Emailsubscription.Shop'}\" required />\n    {if $conditions}\n      <p>{$conditions}</p>\n    {/if}\n    {hook h='displayNewsletterRegistration'}\n    <input type=\"hidden\" value=\"{$hookName}\" name=\"blockHookName\" />\n    <input type=\"submit\" value=\"ok\" name=\"submitNewsletter\" />\n    {hook h='displayGDPRConsent' id_module=$id_module}\n    <input type=\"hidden\" name=\"action\" value=\"0\" />\n  </form>\n</div>\n"], "filenames": ["ps_emailsubscription.php", "views/templates/front/subscription_execution.tpl", "views/templates/hook/ps_emailsubscription-column.tpl", "views/templates/hook/ps_emailsubscription.tpl"], "buggy_code_start_loc": [980, 35, 34, 34], "buggy_code_end_loc": [981, 36, 35, 35], "fixing_code_start_loc": [980, 35, 34, 34], "fixing_code_end_loc": [983, 36, 35, 35], "type": "CWE-79", "message": "ps_emailsubscription is a newsletter subscription module for the PrestaShop platform. An employee can inject javascript in the newsletter condition field that will then be executed on the front office The issue has been fixed in 2.6.1", "other": {"cve": {"id": "CVE-2021-21418", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-31T18:15:14.503", "lastModified": "2021-04-06T12:04:21.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ps_emailsubscription is a newsletter subscription module for the PrestaShop platform. An employee can inject javascript in the newsletter condition field that will then be executed on the front office The issue has been fixed in 2.6.1"}, {"lang": "es", "value": "ps_emailsubscription es un m\u00f3dulo de suscripci\u00f3n al bolet\u00edn para la plataforma PrestaShop.&#xa0;Un empleado puede inyectar javascript en el campo de condici\u00f3n del bolet\u00edn que luego se ejecutar\u00e1 en la oficina principal. El problema se ha solucionado en la versi\u00f3n 2.6.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:ps_emailsubscription:*:*:*:*:*:prestashop:*:*", "versionStartIncluding": "2.6.0", "versionEndExcluding": "2.6.1", "matchCriteriaId": "A29287B9-1B47-4CE8-AE05-170793901CC1"}]}]}], "references": [{"url": "https://github.com/PrestaShop/ps_emailsubscription/commit/664ffb225e2afb4a32640bbedad667dc6e660b70", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/ps_emailsubscription/releases/tag/v2.6.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/ps_emailsubscription/security/advisories/GHSA-vwfx-hh3w-fj99", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/prestashop/ps_emailsubscription", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/ps_emailsubscription/commit/664ffb225e2afb4a32640bbedad667dc6e660b70"}}