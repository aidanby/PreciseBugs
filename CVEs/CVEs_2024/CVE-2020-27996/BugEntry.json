{"buggy_code": ["using SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.DevTools.Models\n{\n\tpublic class BackendExtensionModel : ModelBase\n\t{\n\t\tpublic string Welcome { get; set; }\n\n        public int ProductId { get; set; }\n    }\n}", "using System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing SmartStore.Core.Domain.Catalog;\nusing SmartStore.Web.Framework;\nusing SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.GoogleMerchantCenter.Models\n{\n\tpublic class FeedGoogleMerchantCenterModel\n\t{\n\t\tpublic int GridPageSize { get; set; }\n\t\tpublic string LanguageSeoCode { get; set; }\n\t\tpublic string[] EnergyEfficiencyClasses { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.SearchProductName\")]\n\t\tpublic string SearchProductName { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.SearchIsTouched\")]\n\t\tpublic string SearchIsTouched { get; set; }\n\t}\n\n\tpublic class GoogleProductModel : ModelBase\n\t{\n\t\tpublic int TotalCount { get; set; }\n\n\t\t// This attribute is required to disable editing.\n\t\t[ScaffoldColumn(false)]\n\t\tpublic int ProductId \n\t\t{ \n\t\t\tget { return Id; }\n\t\t\tset { Id = value; }\n\t\t}\n\t\tpublic int Id { get; set; }\n\n\t\t// This attribute is required to disable editing.\n\t\t[ReadOnly(true)]\n\t\t[ScaffoldColumn(false)]\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Products.ProductName\")]\n\t\tpublic string Name { get; set; }\n\n\t\tpublic string SKU { get; set; }\n\t\tpublic int ProductTypeId { get; set; }\n\t\tpublic ProductType ProductType { get { return (ProductType)ProductTypeId; } }\n\t\tpublic string ProductTypeName { get; set; }\n\t\tpublic string ProductTypeLabelHint\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tswitch (ProductType)\n\t\t\t\t{\n\t\t\t\t\tcase ProductType.SimpleProduct:\n\t\t\t\t\t\treturn \"secondary d-none\";\n\t\t\t\t\tcase ProductType.GroupedProduct:\n\t\t\t\t\t\treturn \"success\";\n\t\t\t\t\tcase ProductType.BundledProduct:\n\t\t\t\t\t\treturn \"info\";\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Products.GoogleCategory\")]\n\t\tpublic string Taxonomy { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Gender\")]\n\t\tpublic string Gender { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.AgeGroup\")]\n\t\tpublic string AgeGroup { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Color\")]\n\t\tpublic string Color { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Size\")]\n\t\tpublic string Size { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Material\")]\n\t\tpublic string Material { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Pattern\")]\n\t\tpublic string Pattern { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Common.Export\")]\n\t\tpublic int Export { get; set; }\n\t\t[SmartResourceDisplayName(\"Common.Export\")]\n\t\tpublic bool Export2\n\t\t{\n\t\t\tget { return Export != 0; }\n\t\t\tset { Export = (value ? 1 : 0); }\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Multipack\")]\n\t\tpublic int Multipack { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Multipack\")]\n\t\tpublic int? Multipack2\n\t\t{\n\t\t\tget { return Multipack > 0 ? Multipack : (int?)null; }\n\t\t\tset { Multipack = (value ?? 0); }\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.IsBundle\")]\n\t\tpublic bool? IsBundle { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.IsAdult\")]\n\t\tpublic bool? IsAdult { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.EnergyEfficiencyClass\")]\n\t\tpublic string EnergyEfficiencyClass { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel0\")]\n\t\tpublic string CustomLabel0 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel1\")]\n\t\tpublic string CustomLabel1 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel2\")]\n\t\tpublic string CustomLabel2 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel3\")]\n\t\tpublic string CustomLabel3 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel4\")]\n\t\tpublic string CustomLabel4 { get; set; }\n\n\t\tpublic string GenderLocalize { get; set; }\n\t\tpublic string AgeGroupLocalize { get; set; }\n\t\tpublic string Export2Localize { get; set; }\n\t\tpublic string IsBundleLocalize { get; set; }\n\t\tpublic string IsAdultLocalize { get; set; }\n\t}\n}", "using System;\nusing System.Collections.Generic;\nusing System.Web.Mvc;\nusing Newtonsoft.Json;\nusing SmartStore.Core.Infrastructure;\n\nnamespace SmartStore.Web.Framework.Modelling\n{\n    [Serializable]\n\tpublic sealed class CustomPropertiesDictionary : Dictionary<string, object>\n\t{\n\t}\n\n\t[Serializable]\n\tpublic abstract partial class ModelBase\n    {\n\t\tprivate readonly static ContextState<Dictionary<ModelBase, IDictionary<string, object>>> _contextState;\n\n\t\tstatic ModelBase()\n\t\t{\n\t\t\t_contextState = new ContextState<Dictionary<ModelBase, IDictionary<string, object>>>(\"ModelBase.CustomThreadProperties\");\n\t\t}\n\n\t\tprotected ModelBase()\n        {\n\t\t\tCustomProperties = new CustomPropertiesDictionary();\n        }\n        \n        public virtual void BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)\n        {\n        }\n\n\t\t/// <summary>\n\t\t/// Gets a custom property value either from the thread local or the static storage (in this particular order)\n\t\t/// </summary>\n\t\t/// <typeparam name=\"TProperty\">Type of property</typeparam>\n\t\t/// <param name=\"key\">Custom property key</param>\n\t\t/// <returns>The property value or null</returns>\n\t\tpublic TProperty Get<TProperty>(string key)\n\t\t{\n\t\t\tGuard.NotEmpty(key, nameof(key));\n\n\t\t\tIDictionary<string, object> dict;\n\t\t\tobject value;\n\n\t\t\tif (TryGetCustomThreadProperties(false, out dict) && dict.TryGetValue(key, out value))\n\t\t\t{\n\t\t\t\treturn (TProperty)value;\n\t\t\t}\n\n\t\t\tif (CustomProperties.TryGetValue(key, out value))\n\t\t\t{\n\t\t\t\treturn (TProperty)value;\n\t\t\t}\n\n\t\t\treturn default(TProperty);\n\t\t}\n\n        /// <summary>\n        /// Use this property to store any custom value for your models. \n        /// </summary>\n\t\tpublic CustomPropertiesDictionary CustomProperties { get; set; }\n\n\t\t/// <summary>\n\t\t/// A data bag for custom model properties which only\n\t\t/// lives during a thread/request lifecycle\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Use thread properties whenever you need to persist request-scoped data,\n\t\t/// but the model is potentially cached statically.\n\t\t/// </remarks>\n\t\t[JsonIgnore]\n\t\tpublic IDictionary<string, object> CustomThreadProperties\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tIDictionary<string, object> dict;\n\t\t\t\tTryGetCustomThreadProperties(true, out dict);\n\t\t\t\treturn dict;\n\t\t\t}\n\t\t}\n\n\t\tprivate bool TryGetCustomThreadProperties(bool create, out IDictionary<string, object> dict)\n\t\t{\n\t\t\tdict = null;\n\t\t\tvar state = _contextState.GetState();\n\n\t\t\tif (state == null && create)\n\t\t\t{\n\t\t\t\tstate = new Dictionary<ModelBase, IDictionary<string, object>>();\n\t\t\t\t_contextState.SetState(state);\n\t\t\t}\n\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tif (!state.TryGetValue(this, out dict))\n\t\t\t\t{\n\t\t\t\t\tif (create)\n\t\t\t\t\t{\n\t\t\t\t\t\tdict = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);\n\t\t\t\t\t\tstate[this] = dict;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn dict != null;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n    public abstract partial class EntityModelBase : ModelBase\n    {\n        [SmartResourceDisplayName(\"Admin.Common.Entity.Fields.Id\")]\n        public virtual int Id { get; set; }\n\n        /// <remarks>\n        /// This property is required for serialization JSON data of Telerik grids.\n        /// Without a lower case Id property in JSON results its AJAX operations do not work correctly.\n        /// Occurs since RouteCollection.LowercaseUrls was set to true in Global.asax.\n        /// </remarks>\n        [JsonProperty(\"id\")]\n        internal int EntityId => Id;\n    }\n\n\n\tpublic abstract partial class TabbableModel : EntityModelBase\n\t{\n\t\tpublic virtual string[] LoadedTabs { get; set; }\n\t}\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Web.Mvc;\nusing SmartStore.Core.Html;\nusing SmartStore.Web.Framework.Security;\n\nnamespace SmartStore.Web.Framework.Modelling\n{\n\tpublic class SmartModelBinder : DefaultModelBinder\n    {\n        public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)\n        {\n\t\t\tvar modelType = bindingContext.ModelType;\n\n\t\t\tif (modelType == typeof(CustomPropertiesDictionary))\n\t\t\t{\n\t\t\t\treturn BindCustomPropertiesDictioary(controllerContext, bindingContext);\n\t\t\t}\n\n\t\t\tvar model = base.BindModel(controllerContext, bindingContext);\n\n            if (model is ModelBase)\n            {\n                ((ModelBase)model).BindModel(controllerContext, bindingContext);\n            }\n\n            return model;\n        }\n\n        protected override void SetProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor property, object value)\n\t\t{\n\t\t\tvar attrs = property.Attributes;\n\t\t\tvar sanitizeHtmlAttr = attrs.OfType<SanitizeHtmlAttribute>().FirstOrDefault();\n\n\t\t\tif (property.PropertyType == typeof(string) && sanitizeHtmlAttr != null && value is string input && !string.IsNullOrWhiteSpace(input))\n\t\t\t{\n\t\t\t\tvalue = HtmlUtils.SanitizeHtml(input, sanitizeHtmlAttr.IsFragment);\n\t\t\t}\n\n\t\t\tbase.SetProperty(controllerContext, bindingContext, property, value);\n\t\t}\n\n\t\tprivate CustomPropertiesDictionary BindCustomPropertiesDictioary(ControllerContext controllerContext, ModelBindingContext bindingContext)\n\t\t{\n\t\t\tvar model = bindingContext.Model as CustomPropertiesDictionary ?? new CustomPropertiesDictionary();\n\n\t\t\tvar keys = GetValueProviderKeys(controllerContext, bindingContext.ModelName + \"[\");\n\t\t\tif (keys.Count == 0)\n\t\t\t{\n\t\t\t\treturn model;\n\t\t\t}\n\n\t\t\tforeach (var key in keys)\n\t\t\t{\n\t\t\t\tvar keyName = GetKeyName(key);\n\t\t\t\tif (keyName == null || model.ContainsKey(keyName))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar valueBinder = this.Binders.DefaultBinder;\n\n\t\t\t\tvar subPropertyName = GetSubPropertyName(key);\n\t\t\t\tif (subPropertyName.IsCaseInsensitiveEqual(\"__Type__\"))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (subPropertyName == null)\n\t\t\t\t{\n\t\t\t\t\tvar simpleBindingContext = new ModelBindingContext\n\t\t\t\t\t{\n\t\t\t\t\t\tModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(null, GetValueType(keys, key, bindingContext.ValueProvider)),\n\t\t\t\t\t\tModelName = key,\n\t\t\t\t\t\tModelState = bindingContext.ModelState,\n\t\t\t\t\t\tPropertyFilter = bindingContext.PropertyFilter,\n\t\t\t\t\t\tValueProvider = bindingContext.ValueProvider\n\t\t\t\t\t};\n\t\t\t\t\tvar value = valueBinder.BindModel(controllerContext, simpleBindingContext);\n\t\t\t\t\tmodel[keyName] = value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Is Complex type\n\t\t\t\t\tvar modelName = key.Substring(0, key.Length - subPropertyName.Length - 1);\n\t\t\t\t\tvar valueType = GetValueType(keys, modelName, bindingContext.ValueProvider);\n\t\t\t\t\tvalueBinder = this.Binders.GetBinder(valueType);\n\t\t\t\t\tvar complexBindingContext = new ModelBindingContext\n\t\t\t\t\t{\n\t\t\t\t\t\tModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(null, valueType),\n\t\t\t\t\t\tModelName = key.Substring(0, key.Length - subPropertyName.Length - 1),\n\t\t\t\t\t\tModelState = bindingContext.ModelState,\n\t\t\t\t\t\tPropertyFilter = bindingContext.PropertyFilter,\n\t\t\t\t\t\tValueProvider = bindingContext.ValueProvider\n\t\t\t\t\t};\n\t\t\t\t\tvar value = valueBinder.BindModel(controllerContext, complexBindingContext);\n\t\t\t\t\tmodel[keyName] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn model;\n\t\t}\n\n\t\tprivate HashSet<string> GetValueProviderKeys(ControllerContext context, string prefix)\n\t\t{\n\t\t\tvar keys = context.HttpContext.Request.Form.Keys.Cast<string>()\n\t\t\t\t.Concat(((IDictionary<string, object>)context.RouteData.Values).Keys.Cast<string>())\n\t\t\t\t.Concat(context.HttpContext.Request.QueryString.Keys.Cast<string>())\n\t\t\t\t.Concat(context.HttpContext.Request.Files.Keys.Cast<string>())\n\t\t\t\t.Where(x => x.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase));\n\n\t\t\treturn new HashSet<string>(keys, StringComparer.InvariantCultureIgnoreCase);\n\t\t}\n\n\t\tprivate string GetKeyName(string key)\n\t\t{\n\t\t\tint startBracket = key.IndexOf(\"[\");\n\t\t\tint endBracket = key.IndexOf(\"]\", startBracket);\n\n\t\t\tif (endBracket == -1)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn key.Substring(startBracket + 1, endBracket - startBracket - 1);\n\t\t}\n\n\t\tprivate string GetSubPropertyName(string key)\n\t\t{\n\t\t\tvar parts = key.Split('.');\n\t\t\tif (parts.Length > 1)\n\t\t\t{\n\t\t\t\treturn parts[1];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate Type GetValueType(HashSet<string> keys, string prefix, IValueProvider valueProvider)\n\t\t{\n\t\t\tvar typeKey = prefix + \".__Type__\";\n\t\t\tif (keys.Contains(typeKey))\n\t\t\t{\n\t\t\t\tvar type = Type.GetType(valueProvider.GetValue(typeKey).AttemptedValue, true);\n\t\t\t\treturn type;\n\t\t\t}\n\n\t\t\treturn typeof(object);\n\t\t}\n    }\n}\n"], "fixing_code": ["using SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.DevTools.Models\n{\n\t[CustomModelPart]\n\tpublic class BackendExtensionModel : ModelBase\n\t{\n\t\tpublic string Welcome { get; set; }\n        public int ProductId { get; set; }\n    }\n}", "using System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing SmartStore.Core.Domain.Catalog;\nusing SmartStore.Web.Framework;\nusing SmartStore.Web.Framework.Modelling;\n\nnamespace SmartStore.GoogleMerchantCenter.Models\n{\n\tpublic class FeedGoogleMerchantCenterModel\n\t{\n\t\tpublic int GridPageSize { get; set; }\n\t\tpublic string LanguageSeoCode { get; set; }\n\t\tpublic string[] EnergyEfficiencyClasses { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.SearchProductName\")]\n\t\tpublic string SearchProductName { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.SearchIsTouched\")]\n\t\tpublic string SearchIsTouched { get; set; }\n\t}\n\n\t[CustomModelPart]\n\tpublic class GoogleProductModel : ModelBase\n\t{\n\t\tpublic int TotalCount { get; set; }\n\n\t\t// This attribute is required to disable editing.\n\t\t[ScaffoldColumn(false)]\n\t\tpublic int ProductId \n\t\t{ \n\t\t\tget { return Id; }\n\t\t\tset { Id = value; }\n\t\t}\n\t\tpublic int Id { get; set; }\n\n\t\t// This attribute is required to disable editing.\n\t\t[ReadOnly(true)]\n\t\t[ScaffoldColumn(false)]\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Products.ProductName\")]\n\t\tpublic string Name { get; set; }\n\n\t\tpublic string SKU { get; set; }\n\t\tpublic int ProductTypeId { get; set; }\n\t\tpublic ProductType ProductType { get { return (ProductType)ProductTypeId; } }\n\t\tpublic string ProductTypeName { get; set; }\n\t\tpublic string ProductTypeLabelHint\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tswitch (ProductType)\n\t\t\t\t{\n\t\t\t\t\tcase ProductType.SimpleProduct:\n\t\t\t\t\t\treturn \"secondary d-none\";\n\t\t\t\t\tcase ProductType.GroupedProduct:\n\t\t\t\t\t\treturn \"success\";\n\t\t\t\t\tcase ProductType.BundledProduct:\n\t\t\t\t\t\treturn \"info\";\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Products.GoogleCategory\")]\n\t\tpublic string Taxonomy { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Gender\")]\n\t\tpublic string Gender { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.AgeGroup\")]\n\t\tpublic string AgeGroup { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Color\")]\n\t\tpublic string Color { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Size\")]\n\t\tpublic string Size { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Material\")]\n\t\tpublic string Material { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Pattern\")]\n\t\tpublic string Pattern { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Common.Export\")]\n\t\tpublic int Export { get; set; }\n\t\t[SmartResourceDisplayName(\"Common.Export\")]\n\t\tpublic bool Export2\n\t\t{\n\t\t\tget { return Export != 0; }\n\t\t\tset { Export = (value ? 1 : 0); }\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Multipack\")]\n\t\tpublic int Multipack { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.Multipack\")]\n\t\tpublic int? Multipack2\n\t\t{\n\t\t\tget { return Multipack > 0 ? Multipack : (int?)null; }\n\t\t\tset { Multipack = (value ?? 0); }\n\t\t}\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.IsBundle\")]\n\t\tpublic bool? IsBundle { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.IsAdult\")]\n\t\tpublic bool? IsAdult { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.EnergyEfficiencyClass\")]\n\t\tpublic string EnergyEfficiencyClass { get; set; }\n\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel0\")]\n\t\tpublic string CustomLabel0 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel1\")]\n\t\tpublic string CustomLabel1 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel2\")]\n\t\tpublic string CustomLabel2 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel3\")]\n\t\tpublic string CustomLabel3 { get; set; }\n\t\t[SmartResourceDisplayName(\"Plugins.Feed.Froogle.CustomLabel4\")]\n\t\tpublic string CustomLabel4 { get; set; }\n\n\t\tpublic string GenderLocalize { get; set; }\n\t\tpublic string AgeGroupLocalize { get; set; }\n\t\tpublic string Export2Localize { get; set; }\n\t\tpublic string IsBundleLocalize { get; set; }\n\t\tpublic string IsAdultLocalize { get; set; }\n\t}\n}", "using System;\nusing System.Collections.Generic;\nusing System.Web.Mvc;\nusing Newtonsoft.Json;\nusing SmartStore.Core.Infrastructure;\n\nnamespace SmartStore.Web.Framework.Modelling\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\n\tpublic sealed class CustomModelPartAttribute : Attribute\n    {\n    }\n\t\n\t[Serializable]\n\tpublic sealed class CustomPropertiesDictionary : Dictionary<string, object>\n\t{\n\t}\n\n\t[Serializable]\n\tpublic abstract partial class ModelBase\n    {\n\t\tprivate readonly static ContextState<Dictionary<ModelBase, IDictionary<string, object>>> _contextState;\n\n\t\tstatic ModelBase()\n\t\t{\n\t\t\t_contextState = new ContextState<Dictionary<ModelBase, IDictionary<string, object>>>(\"ModelBase.CustomThreadProperties\");\n\t\t}\n\n\t\tprotected ModelBase()\n        {\n\t\t\tCustomProperties = new CustomPropertiesDictionary();\n        }\n        \n        public virtual void BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)\n        {\n        }\n\n\t\t/// <summary>\n\t\t/// Gets a custom property value either from the thread local or the static storage (in this particular order)\n\t\t/// </summary>\n\t\t/// <typeparam name=\"TProperty\">Type of property</typeparam>\n\t\t/// <param name=\"key\">Custom property key</param>\n\t\t/// <returns>The property value or null</returns>\n\t\tpublic TProperty Get<TProperty>(string key)\n\t\t{\n\t\t\tGuard.NotEmpty(key, nameof(key));\n\n\t\t\tIDictionary<string, object> dict;\n\n\t\t\tif (TryGetCustomThreadProperties(false, out dict) && dict.TryGetValue(key, out var value))\n\t\t\t{\n\t\t\t\treturn (TProperty)value;\n\t\t\t}\n\n\t\t\tif (CustomProperties.TryGetValue(key, out value))\n\t\t\t{\n\t\t\t\treturn (TProperty)value;\n\t\t\t}\n\n\t\t\treturn default(TProperty);\n\t\t}\n\n        /// <summary>\n        /// Use this property to store any custom value for your models. \n        /// </summary>\n\t\tpublic CustomPropertiesDictionary CustomProperties { get; set; }\n\n\t\t/// <summary>\n\t\t/// A data bag for custom model properties which only\n\t\t/// lives during a thread/request lifecycle\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Use thread properties whenever you need to persist request-scoped data,\n\t\t/// but the model is potentially cached statically.\n\t\t/// </remarks>\n\t\t[JsonIgnore]\n\t\tpublic IDictionary<string, object> CustomThreadProperties\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tIDictionary<string, object> dict;\n\t\t\t\tTryGetCustomThreadProperties(true, out dict);\n\t\t\t\treturn dict;\n\t\t\t}\n\t\t}\n\n\t\tprivate bool TryGetCustomThreadProperties(bool create, out IDictionary<string, object> dict)\n\t\t{\n\t\t\tdict = null;\n\t\t\tvar state = _contextState.GetState();\n\n\t\t\tif (state == null && create)\n\t\t\t{\n\t\t\t\tstate = new Dictionary<ModelBase, IDictionary<string, object>>();\n\t\t\t\t_contextState.SetState(state);\n\t\t\t}\n\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tif (!state.TryGetValue(this, out dict))\n\t\t\t\t{\n\t\t\t\t\tif (create)\n\t\t\t\t\t{\n\t\t\t\t\t\tdict = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);\n\t\t\t\t\t\tstate[this] = dict;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn dict != null;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n    public abstract partial class EntityModelBase : ModelBase\n    {\n        [SmartResourceDisplayName(\"Admin.Common.Entity.Fields.Id\")]\n        public virtual int Id { get; set; }\n\n        /// <remarks>\n        /// This property is required for serialization JSON data of Telerik grids.\n        /// Without a lower case Id property in JSON results its AJAX operations do not work correctly.\n        /// Occurs since RouteCollection.LowercaseUrls was set to true in Global.asax.\n        /// </remarks>\n        [JsonProperty(\"id\")]\n        internal int EntityId => Id;\n    }\n\n\n\tpublic abstract partial class TabbableModel : EntityModelBase\n\t{\n\t\tpublic virtual string[] LoadedTabs { get; set; }\n\t}\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Security;\nusing System.Web.Mvc;\nusing SmartStore.Core.Html;\nusing SmartStore.Web.Framework.Security;\n\nnamespace SmartStore.Web.Framework.Modelling\n{\n\tpublic class SmartModelBinder : DefaultModelBinder\n    {\n        public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)\n        {\n\t\t\tvar modelType = bindingContext.ModelType;\n\n\t\t\tif (modelType == typeof(CustomPropertiesDictionary))\n\t\t\t{\n\t\t\t\treturn BindCustomPropertiesDictioary(controllerContext, bindingContext);\n\t\t\t}\n\n\t\t\tvar model = base.BindModel(controllerContext, bindingContext);\n\n            if (model is ModelBase)\n            {\n                ((ModelBase)model).BindModel(controllerContext, bindingContext);\n            }\n\n            return model;\n        }\n\n        protected override void SetProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor property, object value)\n\t\t{\n\t\t\tvar attrs = property.Attributes;\n\t\t\tvar sanitizeHtmlAttr = attrs.OfType<SanitizeHtmlAttribute>().FirstOrDefault();\n\n\t\t\tif (property.PropertyType == typeof(string) && sanitizeHtmlAttr != null && value is string input && !string.IsNullOrWhiteSpace(input))\n\t\t\t{\n\t\t\t\tvalue = HtmlUtils.SanitizeHtml(input, sanitizeHtmlAttr.IsFragment);\n\t\t\t}\n\n\t\t\tbase.SetProperty(controllerContext, bindingContext, property, value);\n\t\t}\n\n\t\tprivate CustomPropertiesDictionary BindCustomPropertiesDictioary(ControllerContext controllerContext, ModelBindingContext bindingContext)\n\t\t{\n\t\t\tvar model = bindingContext.Model as CustomPropertiesDictionary ?? new CustomPropertiesDictionary();\n\n\t\t\tvar keys = GetValueProviderKeys(controllerContext, bindingContext.ModelName + \"[\");\n\t\t\tif (keys.Count == 0)\n\t\t\t{\n\t\t\t\treturn model;\n\t\t\t}\n\n\t\t\tforeach (var key in keys)\n\t\t\t{\n\t\t\t\tvar keyName = GetKeyName(key);\n\t\t\t\tif (keyName == null || model.ContainsKey(keyName))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar valueBinder = this.Binders.DefaultBinder;\n\n\t\t\t\tvar subPropertyName = GetSubPropertyName(key);\n\t\t\t\tif (subPropertyName.IsCaseInsensitiveEqual(\"__Type__\"))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (subPropertyName == null)\n\t\t\t\t{\n\t\t\t\t\tvar simpleBindingContext = new ModelBindingContext\n\t\t\t\t\t{\n\t\t\t\t\t\tModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(null, GetValueType(keys, key, bindingContext.ValueProvider)),\n\t\t\t\t\t\tModelName = key,\n\t\t\t\t\t\tModelState = bindingContext.ModelState,\n\t\t\t\t\t\tPropertyFilter = bindingContext.PropertyFilter,\n\t\t\t\t\t\tValueProvider = bindingContext.ValueProvider\n\t\t\t\t\t};\n\t\t\t\t\tvar value = valueBinder.BindModel(controllerContext, simpleBindingContext);\n\t\t\t\t\tmodel[keyName] = value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Is Complex type\n\t\t\t\t\tvar modelName = key.Substring(0, key.Length - subPropertyName.Length - 1);\n\t\t\t\t\tvar valueType = GetValueType(keys, modelName, bindingContext.ValueProvider);\n\t\t\t\t\tif (!valueType.HasAttribute<CustomModelPartAttribute>(false))\n                    {\n\t\t\t\t\t\tthrow new SecurityException(\"For security reasons complex types in '{0}' must be decorated with the '{1}' attribute.\".FormatInvariant(\n\t\t\t\t\t\t\ttypeof(CustomPropertiesDictionary).AssemblyQualifiedNameWithoutVersion(), \n\t\t\t\t\t\t\ttypeof(CustomModelPartAttribute).AssemblyQualifiedNameWithoutVersion()));\n                    }\n\n\t\t\t\t\tvalueBinder = this.Binders.GetBinder(valueType);\n\t\t\t\t\tvar complexBindingContext = new ModelBindingContext\n\t\t\t\t\t{\n\t\t\t\t\t\tModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(null, valueType),\n\t\t\t\t\t\tModelName = key.Substring(0, key.Length - subPropertyName.Length - 1),\n\t\t\t\t\t\tModelState = bindingContext.ModelState,\n\t\t\t\t\t\tPropertyFilter = bindingContext.PropertyFilter,\n\t\t\t\t\t\tValueProvider = bindingContext.ValueProvider\n\t\t\t\t\t};\n\t\t\t\t\tvar value = valueBinder.BindModel(controllerContext, complexBindingContext);\n\t\t\t\t\tmodel[keyName] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn model;\n\t\t}\n\n\t\tprivate HashSet<string> GetValueProviderKeys(ControllerContext context, string prefix)\n\t\t{\n\t\t\tvar keys = context.HttpContext.Request.Form.Keys.Cast<string>()\n\t\t\t\t.Concat(((IDictionary<string, object>)context.RouteData.Values).Keys.Cast<string>())\n\t\t\t\t.Concat(context.HttpContext.Request.QueryString.Keys.Cast<string>())\n\t\t\t\t.Concat(context.HttpContext.Request.Files.Keys.Cast<string>())\n\t\t\t\t.Where(x => x.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase));\n\n\t\t\treturn new HashSet<string>(keys, StringComparer.InvariantCultureIgnoreCase);\n\t\t}\n\n\t\tprivate string GetKeyName(string key)\n\t\t{\n\t\t\tint startBracket = key.IndexOf(\"[\");\n\t\t\tint endBracket = key.IndexOf(\"]\", startBracket);\n\n\t\t\tif (endBracket == -1)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn key.Substring(startBracket + 1, endBracket - startBracket - 1);\n\t\t}\n\n\t\tprivate string GetSubPropertyName(string key)\n\t\t{\n\t\t\tvar parts = key.Split('.');\n\t\t\tif (parts.Length > 1)\n\t\t\t{\n\t\t\t\treturn parts[1];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate Type GetValueType(HashSet<string> keys, string prefix, IValueProvider valueProvider)\n\t\t{\n\t\t\tvar typeKey = prefix + \".__Type__\";\n\t\t\tif (keys.Contains(typeKey))\n\t\t\t{\n\t\t\t\tvar type = Type.GetType(valueProvider.GetValue(typeKey).AttemptedValue, true);\n\t\t\t\treturn type;\n\t\t\t}\n\n\t\t\treturn typeof(object);\n\t\t}\n    }\n}\n"], "filenames": ["src/Plugins/SmartStore.DevTools/Models/BackendExtensionModel.cs", "src/Plugins/SmartStore.GoogleMerchantCenter/Models/FeedGoogleMerchantCenterModel.cs", "src/Presentation/SmartStore.Web.Framework/Modelling/ModelBase.cs", "src/Presentation/SmartStore.Web.Framework/Modelling/SmartModelBinder.cs"], "buggy_code_start_loc": [4, 21, 9, 4], "buggy_code_end_loc": [9, 21, 47, 84], "fixing_code_start_loc": [5, 22, 9, 5], "fixing_code_end_loc": [8, 23, 51, 93], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in SmartStoreNET before 4.0.1. It does not properly consider the need for a CustomModelPartAttribute decoration in certain ModelBase.CustomProperties situations.", "other": {"cve": {"id": "CVE-2020-27996", "sourceIdentifier": "cve@mitre.org", "published": "2020-10-29T18:15:12.693", "lastModified": "2021-03-04T20:09:19.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in SmartStoreNET before 4.0.1. It does not properly consider the need for a CustomModelPartAttribute decoration in certain ModelBase.CustomProperties situations."}, {"lang": "es", "value": "Se detect\u00f3 un problema en SmartStoreNET versiones anteriores a 4.0.1.&#xa0;No considera apropiadamente la necesidad de una decoraci\u00f3n CustomModelPartAttribute en determinadas situaciones de ModelBase.CustomProperties"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:smartstore:smartstorenet:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.1", "matchCriteriaId": "45758406-F192-455F-9B66-AD02F13EECBF"}]}]}], "references": [{"url": "https://github.com/smartstore/SmartStoreNET/commit/8702c6140f4fc91956ef35dba12d24492fb3f768", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/smartstore/SmartStoreNET/compare/4.0.0...4.0.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2020-138-139-SmartstoreAG-SmartStoreNET", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/smartstore/SmartStoreNET/commit/8702c6140f4fc91956ef35dba12d24492fb3f768"}}