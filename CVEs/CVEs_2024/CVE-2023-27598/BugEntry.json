{"buggy_code": ["/*\n * via parsing automaton\n *\n * Copyright (C) 2001-2003 FhG Fokus\n *\n * This file is part of opensips, a free SIP server.\n *\n * opensips is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version\n *\n * opensips is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n\n\n/*\n *  2003-01-21  added rport parsing code, contributed by\n *               Maxim Sobolev  <sobomax@FreeBSD.org>\n *  2003-01-23  added extra via param parsing code (i=...), used\n *               by tcp to identify the sending socket, by andrei\n *  2003-01-23  fixed rport parsing code to accept rport w/o any value,\n *               by andrei\n *  2003-01-27  modified parse_via to set new via_param->start member and\n *               via->params.s (andrei)\n *  2003-01-28  zero-terminations replaced with VIA_ZT (jiri)\n *  2003-02-28  scratchpad compatibility abandoned (jiri)\n *  2003-04-26  ZSW (jiri)\n *  2003-06-23  fixed  parse_via_param [op].* param. parsing bug (andrei)\n *  2003-07-02  added support for TLS parsing in via (andrei)\n *  2003-10-27  added support for alias via param parsing [see\n *               draft-ietf-sip-connect-reuse-00.txt.]  (andrei)\n *  2004-03-31  fixed rport set instead of i bug (andrei)\n *  2005-03-02  if via has multiple bodies, and one of them is bad set\n *               also the first one as bad (andrei)\n */\n\n\n\n#include <stdlib.h>\n#include <string.h>\n#include \"../dprint.h\"\n#include \"../ut.h\"\n#include \"../ip_addr.h\"\n#include \"../mem/mem.h\"\n#include \"parse_via.h\"\n#include \"parse_def.h\"\n\n\n\n/* main via states (uri:port ...) */\nenum {\n\tF_HOST, P_HOST,\n\tL_PORT, F_PORT, P_PORT,\n\tL_PARAM, F_PARAM, P_PARAM,\n\tL_VIA, F_VIA,\n\tF_COMMENT, P_COMMENT,\n\tF_IP6HOST, P_IP6HOST,\n\tF_CRLF,\n\tF_LF,\n\tF_CR,\n\tEND_OF_HEADER\n};\n\n\n/* first via part state */\nenum {\n\tF_SIP = 100,\n\tSIP1, SIP2, FIN_SIP,\n\tL_VER, F_VER,\n\tVER1, VER2, FIN_VER,\n\tUDP1, UDP2, FIN_UDP,\n\tTCP_TLS1, TCP2, FIN_TCP,\n\tTLS2, FIN_TLS,\n\tSCTP1, SCTP2, SCTP3, FIN_SCTP,\n\tWS1, WS_WSS, FIN_WS, FIN_WSS,\n\tOTHER_PROTO,\n\tL_PROTO, F_PROTO\n};\n\n\n/* param related states\n * WARNING: keep in sync with parse_via.h, PARAM_HIDDEN, ...\n */\nenum {\n\tL_VALUE = 200, F_VALUE, P_VALUE, P_STRING,\n\tHIDDEN1, HIDDEN2, HIDDEN3, HIDDEN4, HIDDEN5,\n\tTTL1, TTL2,\n\tBRANCH1, BRANCH2, BRANCH3, BRANCH4, BRANCH5,\n\tMADDR1, MADDR2, MADDR3, MADDR4,\n\tRECEIVED1, RECEIVED2, RECEIVED3, RECEIVED4, RECEIVED5, RECEIVED6,\n\tRECEIVED7,\n\tRPORT1, RPORT2, RPORT3,\n\tALIAS1, ALIAS2, ALIAS3, ALIAS4,\n\t     /* fin states (227-...)*/\n\tFIN_HIDDEN = 230, FIN_TTL, FIN_BRANCH,\n\tFIN_MADDR, FIN_RECEIVED, FIN_RPORT, FIN_I, FIN_ALIAS\n\t     /*GEN_PARAM,\n\t       PARAM_ERROR*/ /* declared in msg_parser.h*/\n};\n\n\n/* entry state must be F_PARAM, or saved_state=F_PARAM and\n * state=F_{LF,CR,CRLF}!\n * output state = L_PARAM or F_PARAM or END_OF_HEADER\n * (and saved_state= last state); everything else => error\n * WARNING: param->start must be filled before, it's used in param->size\n * computation.\n */\nstatic /*inline*/ char* parse_via_param(char* p, char* end,\n\t\t\t\t\t\t\t\t\t\tunsigned char* pstate,\n\t\t\t\t    \t\t\t\t\tunsigned char* psaved_state,\n\t\t\t\t\t\t\t\t\t\tstruct via_param* param)\n{\n\tchar* tmp;\n\tregister unsigned char state;\n\tunsigned char saved_state;\n\n\tstate=*pstate;\n\n\tsaved_state=*psaved_state;\n\tparam->type=PARAM_ERROR;\n\n\tfor (tmp=p;tmp<end;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase '\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/* \\n and \\r*/\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '=':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_RPORT: /* rport can appear w/o a value */\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tLM_ERR(\"new via found (',') when '=' expected\"\n\t\t\t\t\t\t\t\t\"(state %d=)\\n\", state);\n\t\t\t\t\t\tgoto parse_error; /* or we could ignore this bad param*/\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t/* param names */\n\t\t\tcase 'h':\n\t\t\tcase 'H':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=HIDDEN1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH5:\n\t\t\t\t\t\tstate=FIN_BRANCH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\tcase 'I':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=FIN_I;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN1:\n\t\t\t\t\t\tstate=HIDDEN2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED4:\n\t\t\t\t\t\tstate=RECEIVED5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS2:\n\t\t\t\t\t\tstate=ALIAS3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'D':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN2:\n\t\t\t\t\t\tstate=HIDDEN3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN3:\n\t\t\t\t\t\tstate=HIDDEN4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR2:\n\t\t\t\t\t\tstate=MADDR3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR3:\n\t\t\t\t\t\tstate=MADDR4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED7:\n\t\t\t\t\t\tstate=FIN_RECEIVED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN4:\n\t\t\t\t\t\tstate=HIDDEN5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED1:\n\t\t\t\t\t\tstate=RECEIVED2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED3:\n\t\t\t\t\t\tstate=RECEIVED4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED6:\n\t\t\t\t\t\tstate=RECEIVED7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\tcase 'N':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN5:\n\t\t\t\t\t\tstate=FIN_HIDDEN;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH3:\n\t\t\t\t\t\tstate=BRANCH4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\tcase 'T':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=TTL1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TTL1:\n\t\t\t\t\t\tstate=TTL2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT3:\n\t\t\t\t\t\tstate=FIN_RPORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\tcase 'L':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TTL2:\n\t\t\t\t\t\tstate=FIN_TTL;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS1:\n\t\t\t\t\t\tstate=ALIAS2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'm':\n\t\t\tcase 'M':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=MADDR1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\tcase 'A':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=ALIAS1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR1:\n\t\t\t\t\t\tstate=MADDR2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH2:\n\t\t\t\t\t\tstate=BRANCH3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS3:\n\t\t\t\t\t\tstate=ALIAS4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\tcase 'R':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase MADDR4:\n\t\t\t\t\t\tstate=FIN_MADDR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=RECEIVED1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH1:\n\t\t\t\t\t\tstate=BRANCH2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT2:\n\t\t\t\t\t\tstate=RPORT3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\tcase 'C':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED2:\n\t\t\t\t\t\tstate=RECEIVED3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH4:\n\t\t\t\t\t\tstate=BRANCH5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'v':\n\t\t\tcase 'V':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED5:\n\t\t\t\t\t\tstate=RECEIVED6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\tcase 'B':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=BRANCH1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tcase 'P':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED1:\n\t\t\t\t\t\tstate=RPORT1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\tcase 'O':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT1:\n\t\t\t\t\t\tstate=RPORT2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\tcase 'S':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS4:\n\t\t\t\t\t\tstate=FIN_ALIAS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t}\n\t}/* for tmp*/\n\n\t/* end of packet? => error, no cr/lf,',' found!!!*/\n\tsaved_state=state;\n\tstate=END_OF_HEADER;\n\tgoto parse_error;\n\n find_value:\n\ttmp++;\n\tfor(;*tmp;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase '\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '=':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak; /* what to do? */\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tif (param->type==FIN_RPORT){\n\t\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\t\tparam->value.s=0; /* null value */\n\t\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t/* no break */\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tif (param->type==FIN_RPORT){\n\t\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\t\tparam->value.s=0; /* null value */\n\t\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t/* no break */\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak; /* what to do? */\n\t\t\tcase '\"':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tstate=P_STRING;\n\t\t\t\t\t\tparam->value.s=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tstate=P_VALUE;\n\t\t\t\t\t\tparam->value.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t}\n\t} /* for2 tmp*/\n\n\t/* end of buff and no CR/LF =>error*/\n\tsaved_state=state;\n\tstate=END_OF_HEADER;\n\tgoto parse_error;\n\n endofparam:\n endofvalue:\n\tparam->size=tmp-param->start;\nnormal_exit:\n\t*pstate=state;\n\t*psaved_state=saved_state;\n\tLM_DBG(\"found param type %d, <%.*s> = <%.*s>; state=%d\\n\", param->type,\n\t\t\tparam->name.len, ZSW(param->name.s),\n\t\t\t(param->value.len?param->value.len:3),\n\t\t\t(param->value.len?param->value.s:\"n/a\"), state);\n\treturn tmp;\n\n end_via:\n\t     /* if we are here we found an \"unexpected\" end of via\n\t      *  (cr/lf). This is valid only if the param type is GEN_PARAM or\n\t\t  *  RPORT (the only ones which can miss the value; HIDDEN is a\n\t\t  *  special case )*/\n\tif ((param->type==GEN_PARAM)||(param->type==PARAM_RPORT)){\n\t\tsaved_state=L_PARAM; /* change the saved_state, we have an unknown\n\t\t                        param. w/o a value */\n\t\t/* param->size should be computed before */\n\t\tgoto normal_exit;\n\t}\n\t*pstate=state;\n\t*psaved_state=saved_state;\n\tLM_DBG(\"error on  param type %d, <%.*s>, state=%d, saved_state=%d\\n\",\n\t\tparam->type, param->name.len, ZSW(param->name.s), state, saved_state);\n\nparse_error:\n\tLM_ERR(\"parse_via_param\\n\");\n\tparam->type=PARAM_ERROR;\n\t*pstate=PARAM_ERROR;\n\t*psaved_state=state;\n\treturn tmp;\n}\n\n\n\n/*\n * call it with a vb initialized to 0\n * returns: pointer after the parsed parts and sets vb->error\n * WARNING: don't forget to cleanup on error with free_via_list(vb)!\n */\nchar* parse_via(char* buffer, char* end, struct via_body *vbody)\n{\n\tchar* tmp;\n\tchar* param_start;\n\tunsigned char state;\n\tunsigned char saved_state;\n\tint c_nest;\n\tint err;\n\tstruct via_body* vb;\n\tstruct via_param* param;\n\n\tvb=vbody; /* keep orignal vbody value, needed to set the error member\n\t\t\t\t in case of multiple via bodies in the same header */\nparse_again:\n\tvb->error=PARSE_ERROR;\n\t/* parse start of via ( SIP/2.0/UDP    )*/\n\tstate=F_SIP;\n\tsaved_state=0; /*it should generate error if it's used without set*/\n\tparam_start=0;\n\tfor(tmp=buffer;tmp<end;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase'\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER: /* eat space */\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_SCTP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WSS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_CR: /* header continues on this line */\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WSS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF: /*end of line ?next header?*/\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '/':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\t\tstate=F_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tstate=F_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t/* match SIP*/\n\t\t\tcase 'S':\n\t\t\tcase 's':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\t\tstate=SIP1;\n\t\t\t\t\t\tvb->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\t\tstate=FIN_TLS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=SCTP1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WS1:\n\t\t\t\t\t\tstate=WS_WSS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\t\tstate=FIN_WSS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\tcase 'i':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase SIP1:\n\t\t\t\t\t\tstate=SIP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tcase 'P':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase SIP2:\n\t\t\t\t\t\tstate=FIN_SIP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* allow p in PROTO */\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\t\tstate=FIN_UDP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\t\tstate=FIN_TCP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\t\tstate=FIN_SCTP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\tcase 'u':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=UDP1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\tcase 'd':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\t\tstate=UDP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'T':\n\t\t\tcase 't':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=TCP_TLS1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\t\tstate=SCTP3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\tcase 'c':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\t\tstate=TCP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\t\tstate=SCTP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\tcase 'l':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\t\tstate=TLS2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'W':\n\t\t\tcase 'w':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=WS1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/*match 2.0*/\n\t\t\tcase '2':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\t\tstate=VER1;\n\t\t\t\t\t\tvb->version.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase VER1:\n\t\t\t\t\t\tstate=VER2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\t break;\n\t\t\tcase '0':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase VER2:\n\t\t\t\t\t\tstate=FIN_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t} /* for tmp*/\n\n\t/* we should not be here! if everything is ok > main_via*/\n\tLM_ERR(\"bad via: end of packet on state=%d\\n\", state);\n\tgoto parse_error;\n\n main_via:\n\t/* inc tmp to point to the next char*/\n\ttmp++;\n\tc_nest=0;\n\t/*state should always be F_HOST here*/;\n\tfor(;*tmp;tmp++){\n\t\tswitch(*tmp){\n\t\tcase ' ':\n\t\tcase '\\t':\n\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t state=L_PORT;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_IP6HOST: /*no spaces allowed*/\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\"bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now =' '*/\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c>, state=%d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t saved_state=L_PORT;\n\t\t\t\t\t\t state=F_LF;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"BUG on <%c>\\n\",*tmp);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t saved_state=L_PORT;\n\t\t\t\t\t\t state=F_CR;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c>\\n\",*tmp);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase ':':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tstate=P_IP6HOST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark  end of host*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\t\tstate=F_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\tLM_ERR(\"bad port\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> in state %d\\n\",\n\t\t\t\t\t\t\t*tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\tLM_ERR(\"bad char in compact via\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" no host found\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\t/* fall through */\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tLM_ERR(\" bad char <%c> in state %d\\n\",\n\t\t\t\t\t\t\t*tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tLM_ERR(\"null param?\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\t/*hmm next, param?*/\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> in next via\\n\", *tmp);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\"no host found\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t/* do  nothing,  eat \",\"*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase '(':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST: /*must be terminated in ']'*/\n\t\t\t\t\t\tLM_ERR(\" on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->params.len=tmp-vb->params.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tvb->params.len=tmp-vb->params.s;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tif (c_nest){\n\t\t\t\t\t\t\tc_nest--;\n\t\t\t\t\t\t\tif(c_nest==0){\n\t\t\t\t\t\t\t\tstate=L_VIA;\n\t\t\t\t\t\t\t\tvb->comment.len=tmp-vb->comment.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tLM_ERR(\" missing '(' - nesting= %d\\n\", c_nest);\n\t\t\t\t\t\t\t goto parse_error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\t\tvb->host.s=tmp; /* mark start here (include [])*/\n\t\t\t\t\t\tstate=F_IP6HOST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=(tmp-vb->host.s)+1; /* include \"]\" */\n\t\t\t\t\t\tstate=L_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\t\tstate=P_HOST;\n\t\t\t\t\t\tvb->host.s=tmp;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*check if host allowed char*/\n\t\t\t\t\t\tif ( (*tmp<'a' || *tmp>'z') && (*tmp<'A' || *tmp>'Z')\n\t\t\t\t\t\t&& (*tmp<'0' || *tmp>'9') && *tmp!='-' && *tmp!='.')\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tstate=P_PORT;\n\t\t\t\t\t\tvb->port_str.s=tmp;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*check if number*/\n\t\t\t\t\t\tif ( *tmp<'0' || *tmp>'9' )\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\t/*state=P_PARAM*/;\n\t\t\t\t\t\tif(vb->params.s==0) vb->params.s=param_start;\n\t\t\t\t\t\tparam=pkg_malloc(sizeof(struct via_param));\n\t\t\t\t\t\tif (param==0){\n\t\t\t\t\t\t\tLM_ERR(\"no pkg memory left\\n\");\n\t\t\t\t\t\t\tgoto error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmemset(param,0, sizeof(struct via_param));\n\t\t\t\t\t\tparam->start=param_start;\n\t\t\t\t\t\ttmp=parse_via_param(tmp, end, &state, &saved_state,\n\t\t\t\t\t\t\t\t\t\t\tparam);\n\n\t\t\t\t\t\tswitch(state){\n\t\t\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t\t\tvb->params.len=tmp - vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t\t\tvb->params.len=param->start+param->size\n\t\t\t\t\t\t\t\t\t\t\t\t-vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase END_OF_HEADER:\n\t\t\t\t\t\t\t\tvb->params.len=param->start+param->size\n\t\t\t\t\t\t\t\t\t\t\t\t-vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_ERROR:\n\t\t\t\t\t\t\t\tpkg_free(param);\n\t\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tpkg_free(param);\n\t\t\t\t\t\t\t\tLM_ERR(\" after parse_via_param: invalid \"\n\t\t\t\t\t\t\t\t\t\t\"char <%c> on state %d\\n\",*tmp, state);\n\t\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*add param to the list*/\n\t\t\t\t\t\tif (vb->last_param)\tvb->last_param->next=param;\n\t\t\t\t\t\telse\t\t\t\tvb->param_lst=param;\n\t\t\t\t\t\tvb->last_param=param;\n\t\t\t\t\t\t/* update param. shortcuts */\n\t\t\t\t\t\tswitch(param->type){\n\t\t\t\t\t\t\tcase PARAM_BRANCH:\n\t\t\t\t\t\t\t\tvb->branch=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_RECEIVED:\n\t\t\t\t\t\t\t\tvb->received=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_RPORT:\n\t\t\t\t\t\t\t\tvb->rport=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_I:\n\t\t\t\t\t\t\t\tvb->i=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_ALIAS:\n\t\t\t\t\t\t\t\tvb->alias=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_MADDR:\n\t\t\t\t\t\t\t\tvb->maddr=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (state==END_OF_HEADER){\n\t\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t/*vb->next=tmp;*/ /*???*/\n\t\t\t\t\t\tgoto nextvia;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d (default)\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tstate=P_IP6HOST;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\t/*check if host allowed char*/\n\t\t\t\t\t\tif ( (*tmp<'a' || *tmp>'f') && (*tmp<'A' || *tmp>'F')\n\t\t\t\t\t\t&& (*tmp<'0' || *tmp>'9') && *tmp!=':')\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"invalid char <%c> in state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\n\n\t\t}\n\t}\n\n\tLM_DBG(\"end of packet reached, state=%d\\n\", state);\n\tgoto endofpacket; /*end of packet, probably should be goto error*/\n\nendofheader:\n\tstate=saved_state;\n\tLM_DBG(\"end of header reached, state=%d\\n\", state);\nendofpacket:\n\t/* check if error*/\n\tswitch(state){\n\t\tcase P_HOST:\n\t\tcase L_PORT:\n\t\tcase P_PORT:\n\t\tcase L_PARAM:\n\t\tcase P_PARAM:\n\t\tcase P_VALUE:\n\t\tcase GEN_PARAM:\n\t\tcase FIN_HIDDEN:\n\t\tcase L_VIA:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLM_ERR(\" invalid via - end of header in state %d\\n\", state);\n\t\t\tgoto parse_error;\n\t}\n\n\n\t/*\n\tif (proto) printf(\"<SIP/2.0/%s>\\n\", proto);\n\tif (host) printf(\"host= <%s>\\n\", host);\n\tif (port_str) printf(\"port= <%s>\\n\", port_str);\n\tif (param) printf(\"params= <%s>\\n\", param);\n\tif (comment) printf(\"comment= <%s>\\n\", comment);\n\tif(next_via) printf(\"next_via= <%s>\\n\", next_via);\n\t*/\n\t/*LM_DBG(\"rest=<%s>\\n\", tmp);*/\n\n\tvb->error=PARSE_OK;\n\tvb->bsize=tmp-buffer;\n\tif (vb->port_str.s){\n\t\tvb->port=str2s(vb->port_str.s, vb->port_str.len, &err);\n\t\tif (err){\n\t\t\t\t\tLM_ERR(\" invalid port number <%.*s>\\n\",\n\t\t\t\t\t\tvb->port_str.len, ZSW(vb->port_str.s));\n\t\t\t\t\tgoto parse_error;\n\t\t}\n\t}\n\treturn tmp;\nnextvia:\n\tLM_DBG(\"next_via\\n\");\n\tvb->error=PARSE_OK;\n\tvb->bsize=tmp-buffer;\n\tif (vb->port_str.s){\n\t\tvb->port=str2s(vb->port_str.s, vb->port_str.len, &err);\n\t\tif (err){\n\t\t\t\t\tLM_ERR(\" invalid port number <%.*s>\\n\",\n\t\t\t\t\t\tvb->port_str.len, ZSW(vb->port_str.s));\n\t\t\t\t\tgoto parse_error;\n\t\t}\n\t}\n\tvb->next=pkg_malloc(sizeof(struct via_body));\n\tif (vb->next==0){\n\t\tLM_ERR(\" out of pkg memory\\n\");\n\t\tgoto error;\n\t}\n\tvb=vb->next;\n\tmemset(vb, 0, sizeof(struct via_body));\n\tbuffer=tmp;\n\tgoto parse_again;\n\nparse_error:\n\tif (end>buffer){\n\t\tLM_ERR(\" <%.*s>\\n\", (int)(end-buffer), ZSW(buffer));\n\t}\n\tif ((tmp>buffer)&&(tmp<end)){\n\t\tLM_ERR(\"parsed so far:<%.*s>\\n\",\n\t\t\t\t(int)(tmp-buffer), ZSW(buffer) );\n\t}else{\n\t\tLM_ERR(\"via parse failed\\n\");\n\t}\nerror:\n\tvb->error=PARSE_ERROR;\n\tvbody->error=PARSE_ERROR; /* make sure the first via body is marked\n\t\t\t\t\t\t\t\t as bad also */\n\treturn tmp;\n}\n\n\nstatic inline void free_via_param_list(struct via_param* vp)\n{\n\tstruct via_param* foo;\n\twhile(vp){\n\t\tfoo=vp;\n\t\tvp=vp->next;\n\t\tpkg_free(foo);\n\t}\n}\n\n\nvoid free_via_list(struct via_body* vb)\n{\n\tstruct via_body* foo;\n\twhile(vb){\n\t\tfoo=vb;\n\t\tvb=vb->next;\n\t\tif (foo->param_lst) free_via_param_list(foo->param_lst);\n\t\tpkg_free(foo);\n\t}\n}\n"], "fixing_code": ["/*\n * via parsing automaton\n *\n * Copyright (C) 2001-2003 FhG Fokus\n *\n * This file is part of opensips, a free SIP server.\n *\n * opensips is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version\n *\n * opensips is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n\n\n/*\n *  2003-01-21  added rport parsing code, contributed by\n *               Maxim Sobolev  <sobomax@FreeBSD.org>\n *  2003-01-23  added extra via param parsing code (i=...), used\n *               by tcp to identify the sending socket, by andrei\n *  2003-01-23  fixed rport parsing code to accept rport w/o any value,\n *               by andrei\n *  2003-01-27  modified parse_via to set new via_param->start member and\n *               via->params.s (andrei)\n *  2003-01-28  zero-terminations replaced with VIA_ZT (jiri)\n *  2003-02-28  scratchpad compatibility abandoned (jiri)\n *  2003-04-26  ZSW (jiri)\n *  2003-06-23  fixed  parse_via_param [op].* param. parsing bug (andrei)\n *  2003-07-02  added support for TLS parsing in via (andrei)\n *  2003-10-27  added support for alias via param parsing [see\n *               draft-ietf-sip-connect-reuse-00.txt.]  (andrei)\n *  2004-03-31  fixed rport set instead of i bug (andrei)\n *  2005-03-02  if via has multiple bodies, and one of them is bad set\n *               also the first one as bad (andrei)\n */\n\n\n\n#include <stdlib.h>\n#include <string.h>\n#include \"../dprint.h\"\n#include \"../ut.h\"\n#include \"../ip_addr.h\"\n#include \"../mem/mem.h\"\n#include \"parse_via.h\"\n#include \"parse_def.h\"\n\n\n\n/* main via states (uri:port ...) */\nenum {\n\tF_HOST, P_HOST,\n\tL_PORT, F_PORT, P_PORT,\n\tL_PARAM, F_PARAM, P_PARAM,\n\tL_VIA, F_VIA,\n\tF_COMMENT, P_COMMENT,\n\tF_IP6HOST, P_IP6HOST,\n\tF_CRLF,\n\tF_LF,\n\tF_CR,\n\tEND_OF_HEADER\n};\n\n\n/* first via part state */\nenum {\n\tF_SIP = 100,\n\tSIP1, SIP2, FIN_SIP,\n\tL_VER, F_VER,\n\tVER1, VER2, FIN_VER,\n\tUDP1, UDP2, FIN_UDP,\n\tTCP_TLS1, TCP2, FIN_TCP,\n\tTLS2, FIN_TLS,\n\tSCTP1, SCTP2, SCTP3, FIN_SCTP,\n\tWS1, WS_WSS, FIN_WS, FIN_WSS,\n\tOTHER_PROTO,\n\tL_PROTO, F_PROTO\n};\n\n\n/* param related states\n * WARNING: keep in sync with parse_via.h, PARAM_HIDDEN, ...\n */\nenum {\n\tL_VALUE = 200, F_VALUE, P_VALUE, P_STRING,\n\tHIDDEN1, HIDDEN2, HIDDEN3, HIDDEN4, HIDDEN5,\n\tTTL1, TTL2,\n\tBRANCH1, BRANCH2, BRANCH3, BRANCH4, BRANCH5,\n\tMADDR1, MADDR2, MADDR3, MADDR4,\n\tRECEIVED1, RECEIVED2, RECEIVED3, RECEIVED4, RECEIVED5, RECEIVED6,\n\tRECEIVED7,\n\tRPORT1, RPORT2, RPORT3,\n\tALIAS1, ALIAS2, ALIAS3, ALIAS4,\n\t     /* fin states (227-...)*/\n\tFIN_HIDDEN = 230, FIN_TTL, FIN_BRANCH,\n\tFIN_MADDR, FIN_RECEIVED, FIN_RPORT, FIN_I, FIN_ALIAS\n\t     /*GEN_PARAM,\n\t       PARAM_ERROR*/ /* declared in msg_parser.h*/\n};\n\n\n/* entry state must be F_PARAM, or saved_state=F_PARAM and\n * state=F_{LF,CR,CRLF}!\n * output state = L_PARAM or F_PARAM or END_OF_HEADER\n * (and saved_state= last state); everything else => error\n * WARNING: param->start must be filled before, it's used in param->size\n * computation.\n */\nstatic /*inline*/ char* parse_via_param(char* p, char* end,\n\t\t\t\t\t\t\t\t\t\tunsigned char* pstate,\n\t\t\t\t    \t\t\t\t\tunsigned char* psaved_state,\n\t\t\t\t\t\t\t\t\t\tstruct via_param* param)\n{\n\tchar* tmp;\n\tregister unsigned char state;\n\tunsigned char saved_state;\n\n\tstate=*pstate;\n\n\tsaved_state=*psaved_state;\n\tparam->type=PARAM_ERROR;\n\n\tfor (tmp=p;tmp<end;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase '\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=L_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/* \\n and \\r*/\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tsaved_state=L_VALUE;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '=':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tgoto find_value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_RPORT: /* rport can appear w/o a value */\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofparam;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_HIDDEN:\n\t\t\t\t\tcase FIN_RPORT:\n\t\t\t\t\tcase FIN_ALIAS:\n\t\t\t\t\t\tparam->type=state;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase FIN_BRANCH:\n\t\t\t\t\tcase FIN_MADDR:\n\t\t\t\t\tcase FIN_TTL:\n\t\t\t\t\tcase FIN_RECEIVED:\n\t\t\t\t\tcase FIN_I:\n\t\t\t\t\t\tLM_ERR(\"new via found (',') when '=' expected\"\n\t\t\t\t\t\t\t\t\"(state %d=)\\n\", state);\n\t\t\t\t\t\tgoto parse_error; /* or we could ignore this bad param*/\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparam->type=GEN_PARAM;\n\t\t\t\t\t\tparam->name.len=tmp-param->name.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t/* param names */\n\t\t\tcase 'h':\n\t\t\tcase 'H':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=HIDDEN1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH5:\n\t\t\t\t\t\tstate=FIN_BRANCH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\tcase 'I':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=FIN_I;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN1:\n\t\t\t\t\t\tstate=HIDDEN2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED4:\n\t\t\t\t\t\tstate=RECEIVED5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS2:\n\t\t\t\t\t\tstate=ALIAS3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'D':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN2:\n\t\t\t\t\t\tstate=HIDDEN3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN3:\n\t\t\t\t\t\tstate=HIDDEN4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR2:\n\t\t\t\t\t\tstate=MADDR3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR3:\n\t\t\t\t\t\tstate=MADDR4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED7:\n\t\t\t\t\t\tstate=FIN_RECEIVED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN4:\n\t\t\t\t\t\tstate=HIDDEN5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED1:\n\t\t\t\t\t\tstate=RECEIVED2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED3:\n\t\t\t\t\t\tstate=RECEIVED4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED6:\n\t\t\t\t\t\tstate=RECEIVED7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\tcase 'N':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDDEN5:\n\t\t\t\t\t\tstate=FIN_HIDDEN;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH3:\n\t\t\t\t\t\tstate=BRANCH4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\tcase 'T':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=TTL1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TTL1:\n\t\t\t\t\t\tstate=TTL2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT3:\n\t\t\t\t\t\tstate=FIN_RPORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\tcase 'L':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TTL2:\n\t\t\t\t\t\tstate=FIN_TTL;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS1:\n\t\t\t\t\t\tstate=ALIAS2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'm':\n\t\t\tcase 'M':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=MADDR1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\tcase 'A':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=ALIAS1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MADDR1:\n\t\t\t\t\t\tstate=MADDR2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH2:\n\t\t\t\t\t\tstate=BRANCH3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS3:\n\t\t\t\t\t\tstate=ALIAS4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\tcase 'R':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase MADDR4:\n\t\t\t\t\t\tstate=FIN_MADDR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=RECEIVED1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH1:\n\t\t\t\t\t\tstate=BRANCH2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT2:\n\t\t\t\t\t\tstate=RPORT3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\tcase 'C':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED2:\n\t\t\t\t\t\tstate=RECEIVED3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BRANCH4:\n\t\t\t\t\t\tstate=BRANCH5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'v':\n\t\t\tcase 'V':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED5:\n\t\t\t\t\t\tstate=RECEIVED6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\tcase 'B':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=BRANCH1;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tcase 'P':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RECEIVED1:\n\t\t\t\t\t\tstate=RPORT1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\tcase 'O':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RPORT1:\n\t\t\t\t\t\tstate=RPORT2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\tcase 'S':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALIAS4:\n\t\t\t\t\t\tstate=FIN_ALIAS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t\t\tparam->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GEN_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate=GEN_PARAM;\n\t\t\t\t}\n\t\t}\n\t}/* for tmp*/\n\n\t/* end of packet? => error, no cr/lf,',' found!!!*/\n\tsaved_state=state;\n\tstate=END_OF_HEADER;\n\tgoto parse_error;\n\n find_value:\n\ttmp++;\n\tfor(;*tmp;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase '\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\tcase F_VALUE: /*eat space*/\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tparam->size=tmp-param->start;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '=':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tstate=F_VALUE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak; /* what to do? */\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tif (param->type==FIN_RPORT){\n\t\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\t\tparam->value.s=0; /* null value */\n\t\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t/* no break */\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tcase L_VALUE:\n\t\t\t\t\t\tif (param->type==FIN_RPORT){\n\t\t\t\t\t\t\tparam->value.len=0;\n\t\t\t\t\t\t\tparam->value.s=0; /* null value */\n\t\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t/* no break */\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak; /* what to do? */\n\t\t\tcase '\"':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tstate=P_STRING;\n\t\t\t\t\t\tparam->value.s=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tparam->value.len=tmp-param->value.s;\n\t\t\t\t\t\tgoto endofvalue;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VALUE:\n\t\t\t\t\t\tstate=P_VALUE;\n\t\t\t\t\t\tparam->value.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_VALUE:\n\t\t\t\t\tcase P_STRING:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=END_OF_HEADER;\n\t\t\t\t\t\tgoto end_via;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t}\n\t} /* for2 tmp*/\n\n\t/* end of buff and no CR/LF =>error*/\n\tsaved_state=state;\n\tstate=END_OF_HEADER;\n\tgoto parse_error;\n\n endofparam:\n endofvalue:\n\tparam->size=tmp-param->start;\nnormal_exit:\n\t*pstate=state;\n\t*psaved_state=saved_state;\n\tLM_DBG(\"found param type %d, <%.*s> = <%.*s>; state=%d\\n\", param->type,\n\t\t\tparam->name.len, ZSW(param->name.s),\n\t\t\t(param->value.len?param->value.len:3),\n\t\t\t(param->value.len?param->value.s:\"n/a\"), state);\n\treturn tmp;\n\n end_via:\n\t     /* if we are here we found an \"unexpected\" end of via\n\t      *  (cr/lf). This is valid only if the param type is GEN_PARAM or\n\t\t  *  RPORT (the only ones which can miss the value; HIDDEN is a\n\t\t  *  special case )*/\n\tif ((param->type==GEN_PARAM)||(param->type==PARAM_RPORT)){\n\t\tsaved_state=L_PARAM; /* change the saved_state, we have an unknown\n\t\t                        param. w/o a value */\n\t\t/* param->size should be computed before */\n\t\tgoto normal_exit;\n\t}\n\t*pstate=state;\n\t*psaved_state=saved_state;\n\tLM_DBG(\"error on  param type %d, <%.*s>, state=%d, saved_state=%d\\n\",\n\t\tparam->type, param->name.len, ZSW(param->name.s), state, saved_state);\n\nparse_error:\n\tLM_ERR(\"parse_via_param\\n\");\n\tparam->type=PARAM_ERROR;\n\t*pstate=PARAM_ERROR;\n\t*psaved_state=state;\n\treturn tmp;\n}\n\n\n\n/*\n * call it with a vb initialized to 0\n * returns: pointer after the parsed parts and sets vb->error\n * WARNING: don't forget to cleanup on error with free_via_list(vb)!\n */\nchar* parse_via(char* buffer, char* end, struct via_body *vbody)\n{\n\tchar* tmp;\n\tchar* param_start;\n\tunsigned char state;\n\tunsigned char saved_state;\n\tint c_nest;\n\tint err;\n\tstruct via_body* vb;\n\tstruct via_param* param;\n\n\tvb=vbody; /* keep orignal vbody value, needed to set the error member\n\t\t\t\t in case of multiple via bodies in the same header */\nparse_again:\n\tvb->error=PARSE_ERROR;\n\t/* parse start of via ( SIP/2.0/UDP    )*/\n\tstate=F_SIP;\n\tsaved_state=0; /*it should generate error if it's used without set*/\n\tparam_start=0;\n\tfor(tmp=buffer;tmp<end;tmp++){\n\t\tswitch(*tmp){\n\t\t\tcase ' ':\n\t\t\tcase'\\t':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER: /* eat space */\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_SCTP;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WSS;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_CR: /* header continues on this line */\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\t/* finished proto parsing */\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=F_HOST; /* start looking for host*/\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tsaved_state=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_UDP;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TCP;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_TLS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_WSS;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tvb->transport.len=tmp-vb->transport.s;\n\t\t\t\t\t\tvb->proto=PROTO_OTHER;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=F_HOST;\n\t\t\t\t\t\tgoto main_via;\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=L_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tsaved_state=L_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_LF: /*end of line ?next header?*/\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '/':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase FIN_SIP:\n\t\t\t\t\t\tvb->name.len=tmp-vb->name.s;\n\t\t\t\t\t\tstate=F_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIN_VER:\n\t\t\t\t\t\tvb->version.len=tmp-vb->version.s;\n\t\t\t\t\t\tstate=F_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VER:\n\t\t\t\t\t\tstate=F_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PROTO:\n\t\t\t\t\t\tstate=F_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t/* match SIP*/\n\t\t\tcase 'S':\n\t\t\tcase 's':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_SIP:\n\t\t\t\t\t\tstate=SIP1;\n\t\t\t\t\t\tvb->name.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\t\tstate=FIN_TLS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=SCTP1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WS1:\n\t\t\t\t\t\tstate=WS_WSS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\t\tstate=FIN_WSS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\tcase 'i':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase SIP1:\n\t\t\t\t\t\tstate=SIP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tcase 'P':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase SIP2:\n\t\t\t\t\t\tstate=FIN_SIP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* allow p in PROTO */\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\t\tstate=FIN_UDP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\t\tstate=FIN_TCP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\t\tstate=FIN_SCTP;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\tcase 'u':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=UDP1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\tcase 'd':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\t\tstate=UDP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'T':\n\t\t\tcase 't':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=TCP_TLS1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\t\tstate=SCTP3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\tcase 'c':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\t\tstate=TCP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\t\tstate=SCTP2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\tcase 'l':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\t\tstate=TLS2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'W':\n\t\t\tcase 'w':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=WS1;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/*match 2.0*/\n\t\t\tcase '2':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_VER:\n\t\t\t\t\t\tstate=VER1;\n\t\t\t\t\t\tvb->version.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase VER1:\n\t\t\t\t\t\tstate=VER2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\t break;\n\t\t\tcase '0':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase VER2:\n\t\t\t\t\t\tstate=FIN_VER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_PROTO:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tvb->transport.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OTHER_PROTO:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UDP1:\n\t\t\t\t\tcase UDP2:\n\t\t\t\t\tcase FIN_UDP:\n\t\t\t\t\tcase TCP_TLS1:\n\t\t\t\t\tcase TCP2:\n\t\t\t\t\tcase FIN_TCP:\n\t\t\t\t\tcase TLS2:\n\t\t\t\t\tcase FIN_TLS:\n\t\t\t\t\tcase SCTP1:\n\t\t\t\t\tcase SCTP2:\n\t\t\t\t\tcase SCTP3:\n\t\t\t\t\tcase FIN_SCTP:\n\t\t\t\t\tcase WS1:\n\t\t\t\t\tcase WS_WSS:\n\t\t\t\t\tcase FIN_WS:\n\t\t\t\t\tcase FIN_WSS:\n\t\t\t\t\t\tstate=OTHER_PROTO;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> on state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t} /* for tmp*/\n\n\t/* we should not be here! if everything is ok > main_via*/\n\tLM_ERR(\"bad via: end of packet on state=%d\\n\", state);\n\tgoto parse_error;\n\n main_via:\n\t/* inc tmp to point to the next char*/\n\ttmp++;\n\tc_nest=0;\n\t/*state should always be F_HOST here*/;\n\tfor(;*tmp;tmp++){\n\t\tswitch(*tmp){\n\t\tcase ' ':\n\t\tcase '\\t':\n\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t state=L_PORT;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tstate=L_PARAM;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_IP6HOST: /*no spaces allowed*/\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\"bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now =' '*/\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c>, state=%d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t saved_state=L_PORT;\n\t\t\t\t\t\t state=F_LF;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_LF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\tstate=F_CRLF;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"BUG on <%c>\\n\",*tmp);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:/*eat the spaces*/\n\t\t\t\t\tcase L_PORT: /*eat the spaces*/\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase L_PARAM: /* eat the space */\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA: /* eat the space */\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tsaved_state=state;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t /*mark end of host*/\n\t\t\t\t\t\t vb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\t saved_state=L_PORT;\n\t\t\t\t\t\t state=F_CR;\n\t\t\t\t\t\t break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*end of port */\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t/*\t*tmp=0;*/ /*!?end of param*/\n\t\t\t\t\t\tsaved_state=L_PARAM;\n\t\t\t\t\t\tstate=F_CR;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c>\\n\",*tmp);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase ':':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tstate=P_IP6HOST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark  end of host*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\t\tstate=F_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\tLM_ERR(\"bad port\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> in state %d\\n\",\n\t\t\t\t\t\t\t*tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\tLM_ERR(\"bad char in compact via\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ';':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" no host found\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\t/* fall through */\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tLM_ERR(\" bad char <%c> in state %d\\n\",\n\t\t\t\t\t\t\t*tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tLM_ERR(\"null param?\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\t/*hmm next, param?*/\n\t\t\t\t\t\tstate=F_PARAM;\n\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\tLM_ERR(\"bad char <%c> in next via\\n\", *tmp);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\"no host found\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" bad ipv6 reference\\n\");\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tstate=F_VIA;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\tLM_ERR(\"invalid char <%c> in state %d\\n\", *tmp,state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t/* do  nothing,  eat \",\"*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT: /*everything is allowed in a comment*/\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase '(':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST: /*must be terminated in ']'*/\n\t\t\t\t\t\tLM_ERR(\" on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=tmp-vb->host.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->port_str.len=tmp-vb->port_str.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->params.len=tmp-vb->params.s;\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tstate=F_COMMENT;\n\t\t\t\t\t\tvb->params.len=tmp-vb->params.s;\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\t\tc_nest++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tif (c_nest){\n\t\t\t\t\t\t\tc_nest--;\n\t\t\t\t\t\t\tif(c_nest==0){\n\t\t\t\t\t\t\t\tstate=L_VIA;\n\t\t\t\t\t\t\t\tvb->comment.len=tmp-vb->comment.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tLM_ERR(\" missing '(' - nesting= %d\\n\", c_nest);\n\t\t\t\t\t\t\t goto parse_error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\tLM_ERR(\" on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"on <%c> state %d\\n\", *tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\t\tvb->host.s=tmp; /* mark start here (include [])*/\n\t\t\t\t\t\tstate=F_IP6HOST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\t/*mark the end*/\n\t\t\t\t\t\tvb->host.len=(tmp-vb->host.s)+1; /* include \"]\" */\n\t\t\t\t\t\tstate=L_PORT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tcase F_COMMENT:/*everything is allowed in a comment*/\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tswitch(state){\n\t\t\t\t\tcase F_HOST:\n\t\t\t\t\t\tstate=P_HOST;\n\t\t\t\t\t\tvb->host.s=tmp;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_HOST:\n\t\t\t\t\t\t/*check if host allowed char*/\n\t\t\t\t\t\tif ( (*tmp<'a' || *tmp>'z') && (*tmp<'A' || *tmp>'Z')\n\t\t\t\t\t\t&& (*tmp<'0' || *tmp>'9') && *tmp!='-' && *tmp!='.')\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PORT:\n\t\t\t\t\t\tstate=P_PORT;\n\t\t\t\t\t\tvb->port_str.s=tmp;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_PORT:\n\t\t\t\t\t\t/*check if number*/\n\t\t\t\t\t\tif ( *tmp<'0' || *tmp>'9' )\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\t/*state=P_PARAM*/;\n\t\t\t\t\t\tif(vb->params.s==0) vb->params.s=param_start;\n\t\t\t\t\t\tparam=pkg_malloc(sizeof(struct via_param));\n\t\t\t\t\t\tif (param==0){\n\t\t\t\t\t\t\tLM_ERR(\"no pkg memory left\\n\");\n\t\t\t\t\t\t\tgoto error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmemset(param,0, sizeof(struct via_param));\n\t\t\t\t\t\tparam->start=param_start;\n\t\t\t\t\t\ttmp=parse_via_param(tmp, end, &state, &saved_state,\n\t\t\t\t\t\t\t\t\t\t\tparam);\n\n\t\t\t\t\t\tswitch(state){\n\t\t\t\t\t\t\tcase F_PARAM:\n\t\t\t\t\t\t\t\tparam_start=tmp+1;\n\t\t\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\t\t\tcase F_LF:\n\t\t\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t\t\tvb->params.len=tmp - vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t\t\tvb->params.len=param->start+param->size\n\t\t\t\t\t\t\t\t\t\t\t\t-vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase END_OF_HEADER:\n\t\t\t\t\t\t\t\tvb->params.len=param->start+param->size\n\t\t\t\t\t\t\t\t\t\t\t\t-vb->params.s;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_ERROR:\n\t\t\t\t\t\t\t\tpkg_free(param);\n\t\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tpkg_free(param);\n\t\t\t\t\t\t\t\tLM_ERR(\" after parse_via_param: invalid \"\n\t\t\t\t\t\t\t\t\t\t\"char <%c> on state %d\\n\",*tmp, state);\n\t\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*add param to the list*/\n\t\t\t\t\t\tif (vb->last_param)\tvb->last_param->next=param;\n\t\t\t\t\t\telse\t\t\t\tvb->param_lst=param;\n\t\t\t\t\t\tvb->last_param=param;\n\t\t\t\t\t\t/* update param. shortcuts */\n\t\t\t\t\t\tswitch(param->type){\n\t\t\t\t\t\t\tcase PARAM_BRANCH:\n\t\t\t\t\t\t\t\tvb->branch=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_RECEIVED:\n\t\t\t\t\t\t\t\tvb->received=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_RPORT:\n\t\t\t\t\t\t\t\tvb->rport=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_I:\n\t\t\t\t\t\t\t\tvb->i=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_ALIAS:\n\t\t\t\t\t\t\t\tvb->alias=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PARAM_MADDR:\n\t\t\t\t\t\t\t\tvb->maddr=param;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (state==END_OF_HEADER){\n\t\t\t\t\t\t\tstate=saved_state;\n\t\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_PARAM:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_VIA:\n\t\t\t\t\t\t/*vb->next=tmp;*/ /*???*/\n\t\t\t\t\t\tgoto nextvia;\n\t\t\t\t\tcase L_PORT:\n\t\t\t\t\tcase L_PARAM:\n\t\t\t\t\tcase L_VIA:\n\t\t\t\t\t\tLM_ERR(\"on <%c> state %d (default)\\n\",*tmp, state);\n\t\t\t\t\t\tgoto  parse_error;\n\t\t\t\t\tcase F_COMMENT:\n\t\t\t\t\t\tstate=P_COMMENT;\n\t\t\t\t\t\tvb->comment.s=tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase P_COMMENT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_IP6HOST:\n\t\t\t\t\t\tstate=P_IP6HOST;\n\t\t\t\t\t\t//break;\n\t\t\t\t\tcase P_IP6HOST:\n\t\t\t\t\t\t/*check if host allowed char*/\n\t\t\t\t\t\tif ( (*tmp<'a' || *tmp>'f') && (*tmp<'A' || *tmp>'F')\n\t\t\t\t\t\t&& (*tmp<'0' || *tmp>'9') && *tmp!=':')\n\t\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase F_CRLF:\n\t\t\t\t\tcase F_LF:\n\t\t\t\t\tcase F_CR:\n\t\t\t\t\t\t/*previous=crlf and now !=' '*/\n\t\t\t\t\t\tgoto endofheader;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tLM_CRIT(\"invalid char <%c> in state %d\\n\",*tmp, state);\n\t\t\t\t\t\tgoto parse_error;\n\t\t\t\t}\n\n\n\t\t}\n\t}\n\n\tLM_DBG(\"end of packet reached, state=%d\\n\", state);\n\tgoto endofpacket; /*end of packet, probably should be goto error*/\n\nendofheader:\n\tstate=saved_state;\n\tLM_DBG(\"end of header reached, state=%d\\n\", state);\nendofpacket:\n\t/* check if error*/\n\tswitch(state){\n\t\tcase P_HOST:\n\t\tcase L_PORT:\n\t\tcase P_PORT:\n\t\tcase L_PARAM:\n\t\tcase P_PARAM:\n\t\tcase P_VALUE:\n\t\tcase GEN_PARAM:\n\t\tcase FIN_HIDDEN:\n\t\tcase L_VIA:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLM_ERR(\" invalid via - end of header in state %d\\n\", state);\n\t\t\tgoto parse_error;\n\t}\n\n\n\t/*\n\tif (proto) printf(\"<SIP/2.0/%s>\\n\", proto);\n\tif (host) printf(\"host= <%s>\\n\", host);\n\tif (port_str) printf(\"port= <%s>\\n\", port_str);\n\tif (param) printf(\"params= <%s>\\n\", param);\n\tif (comment) printf(\"comment= <%s>\\n\", comment);\n\tif(next_via) printf(\"next_via= <%s>\\n\", next_via);\n\t*/\n\t/*LM_DBG(\"rest=<%s>\\n\", tmp);*/\n\n\tvb->error=PARSE_OK;\n\tvb->bsize=tmp-buffer;\n\tif (vb->port_str.s){\n\t\tvb->port=str2s(vb->port_str.s, vb->port_str.len, &err);\n\t\tif (err){\n\t\t\t\t\tLM_ERR(\" invalid port number <%.*s>\\n\",\n\t\t\t\t\t\tvb->port_str.len, ZSW(vb->port_str.s));\n\t\t\t\t\tgoto parse_error;\n\t\t}\n\t}\n\treturn tmp;\nnextvia:\n\tLM_DBG(\"next_via\\n\");\n\tvb->error=PARSE_OK;\n\tvb->bsize=tmp-buffer;\n\tif (vb->port_str.s){\n\t\tvb->port=str2s(vb->port_str.s, vb->port_str.len, &err);\n\t\tif (err){\n\t\t\t\t\tLM_ERR(\" invalid port number <%.*s>\\n\",\n\t\t\t\t\t\tvb->port_str.len, ZSW(vb->port_str.s));\n\t\t\t\t\tgoto parse_error;\n\t\t}\n\t}\n\tvb->next=pkg_malloc(sizeof(struct via_body));\n\tif (vb->next==0){\n\t\tLM_ERR(\" out of pkg memory\\n\");\n\t\tgoto error;\n\t}\n\tvb=vb->next;\n\tmemset(vb, 0, sizeof(struct via_body));\n\tbuffer=tmp;\n\tgoto parse_again;\n\nparse_error:\n\tif (end>buffer){\n\t\tLM_ERR(\" <%.*s>\\n\", (int)(end-buffer), ZSW(buffer));\n\t}\n\tif ((tmp>buffer)&&(tmp<end)){\n\t\tLM_ERR(\"parsed so far:<%.*s>\\n\",\n\t\t\t\t(int)(tmp-buffer), ZSW(buffer) );\n\t}else{\n\t\tLM_ERR(\"via parse failed\\n\");\n\t}\nerror:\n\tvb->error=PARSE_ERROR;\n\tvbody->error=PARSE_ERROR; /* make sure the first via body is marked\n\t\t\t\t\t\t\t\t as bad also */\n\treturn tmp;\n}\n\n\nstatic inline void free_via_param_list(struct via_param* vp)\n{\n\tstruct via_param* foo;\n\twhile(vp){\n\t\tfoo=vp;\n\t\tvp=vp->next;\n\t\tpkg_free(foo);\n\t}\n}\n\n\nvoid free_via_list(struct via_body* vb)\n{\n\tstruct via_body* foo;\n\twhile(vb){\n\t\tfoo=vb;\n\t\tvb=vb->next;\n\t\tif (foo->param_lst) free_via_param_list(foo->param_lst);\n\t\tpkg_free(foo);\n\t}\n}\n"], "filenames": ["parser/parse_via.c"], "buggy_code_start_loc": [1807], "buggy_code_end_loc": [1808], "fixing_code_start_loc": [1806], "fixing_code_end_loc": [1806], "type": "CWE-908", "message": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.7 and 3.2.4, sending a malformed `Via` header to OpenSIPS triggers a segmentation fault when the function `calc_tag_suffix` is called. A specially crafted `Via` header, which is deemed correct by the parser, will pass uninitialized strings to the function `MD5StringArray` which leads to the crash. Abuse of this vulnerability leads to Denial of Service due to a crash. Since the uninitialized string points to memory location `0x0`, no further exploitation appears to be possible. No special network privileges are required to perform this attack, as long as the OpenSIPS configuration makes use of functions such as `sl_send_reply` or `sl_gen_totag` that trigger the vulnerable code. This issue has been fixed in versions 3.1.7 and 3.2.4.", "other": {"cve": {"id": "CVE-2023-27598", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-15T21:15:09.143", "lastModified": "2023-03-21T19:14:05.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.7 and 3.2.4, sending a malformed `Via` header to OpenSIPS triggers a segmentation fault when the function `calc_tag_suffix` is called. A specially crafted `Via` header, which is deemed correct by the parser, will pass uninitialized strings to the function `MD5StringArray` which leads to the crash. Abuse of this vulnerability leads to Denial of Service due to a crash. Since the uninitialized string points to memory location `0x0`, no further exploitation appears to be possible. No special network privileges are required to perform this attack, as long as the OpenSIPS configuration makes use of functions such as `sl_send_reply` or `sl_gen_totag` that trigger the vulnerable code. This issue has been fixed in versions 3.1.7 and 3.2.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-908"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-908"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opensips:opensips:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.7", "matchCriteriaId": "8EF642AA-D786-40DF-801D-515888AF89BE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:opensips:opensips:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.2.0", "versionEndExcluding": "3.2.4", "matchCriteriaId": "34713A76-CAED-43CF-A77C-73F1C36208AA"}]}]}], "references": [{"url": "https://github.com/OpenSIPS/opensips/commit/ab611f74f69d9c42be5401c40d56ea06a58f5dd7", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenSIPS/opensips/security/advisories/GHSA-wxfg-3gwh-rhvx", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://opensips.org/pub/audit-2022/opensips-audit-technical-report-full.pdf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenSIPS/opensips/commit/ab611f74f69d9c42be5401c40d56ea06a58f5dd7"}}