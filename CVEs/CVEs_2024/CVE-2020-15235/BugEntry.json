{"buggy_code": ["import time\nfrom pydoc import locate\n\nfrom django.conf import settings\n\nDEFAULT_CONFIG = {\n    'config_version': 4,\n    'flag_prefix': 'ractf',\n    'graph_members': 10,\n    'register_end_time': -1,\n    'end_time': time.time() + 7 * 24 * 60 * 60,\n    'start_time': time.time(),\n    'register_start_time': time.time(),\n    'team_size': -1,\n    'email_regex': '',\n    'email_domain': '',\n    'login_provider': 'basic_auth',\n    'registration_provider': 'basic_auth',\n    'token_provider': 'basic_auth',\n    'enable_bot_users': True,\n    'enable_ctftime': True,\n    'enable_flag_submission': True,\n    'enable_flag_submission_after_competition': True,\n    'enable_force_admin_2fa': False,\n    'enable_track_incorrect_submissions': True,\n    'enable_login': True,\n    'enable_prelogin': True,\n    'enable_maintenance_mode': False,\n    'enable_registration': True,\n    'enable_scoreboard': True,\n    'enable_scoring': True,\n    'enable_solve_broadcast': True,\n    'enable_teams': True,\n    'enable_team_join': True,\n    'enable_view_challenges_after_competion': True,\n    'enable_team_leave': False,\n    'invite_required': False,\n    'hide_scoreboard_at': -1,\n    'setup_wizard_complete': False,\n    'sensitive_fields': ['sensitive_fields', 'enable_force_admin_2fa']\n}\n\nbackend = locate(settings.CONFIG['BACKEND'])()\nbackend.load(defaults=DEFAULT_CONFIG)\n\n\ndef get(key):\n    return backend.get(key)\n\n\ndef set(key, value):\n    backend.set(key, value)\n\n\ndef get_all():\n    return backend.get_all()\n\n\ndef get_all_non_sensitive():\n    sensitive = backend.get('sensitive_fields')\n    config = backend.get_all()\n    for field in sensitive:\n        del config[field]\n    return config\n\n\ndef set_bulk(values: dict):\n    for key, value in values.items():\n        set(key, value)\n\n\ndef add_plugin_config(name, config):\n    DEFAULT_CONFIG[name] = config\n", "from rest_framework.status import HTTP_400_BAD_REQUEST\nfrom rest_framework.views import APIView\n\nfrom backend.response import FormattedResponse\nfrom config import config\nfrom backend.permissions import AdminOrAnonymousReadOnly\n\n\nclass ConfigView(APIView):\n    throttle_scope = \"config\"\n    permission_classes = (AdminOrAnonymousReadOnly,)\n\n    def get(self, request, name=None):\n        if name is None:\n            if request.user.is_staff:\n                return FormattedResponse(config.get_all())\n            return FormattedResponse(config.get_all_non_sensitive())\n        return FormattedResponse(config.get(name))\n\n    def post(self, request, name):\n        if \"value\" not in request.data:\n            return FormattedResponse(status=HTTP_400_BAD_REQUEST)\n        config.set(name, request.data.get(\"value\"))\n        return FormattedResponse()\n\n    def patch(self, request, name):\n        if \"value\" not in request.data:\n            return FormattedResponse(status=HTTP_400_BAD_REQUEST)\n        if config.get(name) is not None and isinstance(config.get(name), list):\n            config.set(\"name\", config.get(name).append(request.data[\"value\"]))\n            return FormattedResponse()\n        config.set(name, request.data.get(\"value\"))\n        return FormattedResponse()\n"], "fixing_code": ["import time\nfrom pydoc import locate\n\nfrom django.conf import settings\n\nDEFAULT_CONFIG = {\n    'config_version': 4,\n    'flag_prefix': 'ractf',\n    'graph_members': 10,\n    'register_end_time': -1,\n    'end_time': time.time() + 7 * 24 * 60 * 60,\n    'start_time': time.time(),\n    'register_start_time': time.time(),\n    'team_size': -1,\n    'email_regex': '',\n    'email_domain': '',\n    'login_provider': 'basic_auth',\n    'registration_provider': 'basic_auth',\n    'token_provider': 'basic_auth',\n    'enable_bot_users': True,\n    'enable_ctftime': True,\n    'enable_flag_submission': True,\n    'enable_flag_submission_after_competition': True,\n    'enable_force_admin_2fa': False,\n    'enable_track_incorrect_submissions': True,\n    'enable_login': True,\n    'enable_prelogin': True,\n    'enable_maintenance_mode': False,\n    'enable_registration': True,\n    'enable_scoreboard': True,\n    'enable_scoring': True,\n    'enable_solve_broadcast': True,\n    'enable_teams': True,\n    'enable_team_join': True,\n    'enable_view_challenges_after_competion': True,\n    'enable_team_leave': False,\n    'invite_required': False,\n    'hide_scoreboard_at': -1,\n    'setup_wizard_complete': False,\n    'sensitive_fields': ['sensitive_fields', 'enable_force_admin_2fa']\n}\n\nbackend = locate(settings.CONFIG['BACKEND'])()\nbackend.load(defaults=DEFAULT_CONFIG)\n\n\ndef get(key):\n    return backend.get(key)\n\n\ndef set(key, value):\n    backend.set(key, value)\n\n\ndef get_all():\n    return backend.get_all()\n\n\ndef get_all_non_sensitive():\n    sensitive = backend.get('sensitive_fields')\n    config = backend.get_all()\n    for field in sensitive:\n        del config[field]\n    return config\n\n\ndef is_sensitive(key):\n    return key in backend.get('sensitive_fields')\n\n\ndef set_bulk(values: dict):\n    for key, value in values.items():\n        set(key, value)\n\n\ndef add_plugin_config(name, config):\n    DEFAULT_CONFIG[name] = config\n", "from rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_403_FORBIDDEN\nfrom rest_framework.views import APIView\n\nfrom backend.response import FormattedResponse\nfrom config import config\nfrom backend.permissions import AdminOrAnonymousReadOnly\n\n\nclass ConfigView(APIView):\n    throttle_scope = \"config\"\n    permission_classes = (AdminOrAnonymousReadOnly,)\n\n    def get(self, request, name=None):\n        if name is None:\n            if request.user.is_superuser:\n                return FormattedResponse(config.get_all())\n            return FormattedResponse(config.get_all_non_sensitive())\n        if not config.is_sensitive(name) or request.is_superuser:\n            return FormattedResponse(config.get(name))\n        return FormattedResponse(status=HTTP_403_FORBIDDEN)\n\n    def post(self, request, name):\n        if \"value\" not in request.data:\n            return FormattedResponse(status=HTTP_400_BAD_REQUEST)\n        config.set(name, request.data.get(\"value\"))\n        return FormattedResponse()\n\n    def patch(self, request, name):\n        if \"value\" not in request.data:\n            return FormattedResponse(status=HTTP_400_BAD_REQUEST)\n        if config.get(name) is not None and isinstance(config.get(name), list):\n            config.set(\"name\", config.get(name).append(request.data[\"value\"]))\n            return FormattedResponse()\n        config.set(name, request.data.get(\"value\"))\n        return FormattedResponse()\n"], "filenames": ["src/config/config.py", "src/config/views.py"], "buggy_code_start_loc": [66, 1], "buggy_code_end_loc": [66, 19], "fixing_code_start_loc": [67, 1], "fixing_code_end_loc": [71, 21], "type": "CWE-200", "message": "In RACTF before commit f3dc89b, unauthenticated users are able to get the value of sensitive config keys that would normally be hidden to everyone except admins. All versions after commit f3dc89b9f6ab1544a289b3efc06699b13d63e0bd(3/10/20) are patched.", "other": {"cve": {"id": "CVE-2020-15235", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-05T16:15:12.237", "lastModified": "2020-10-19T18:53:09.600", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In RACTF before commit f3dc89b, unauthenticated users are able to get the value of sensitive config keys that would normally be hidden to everyone except admins. All versions after commit f3dc89b9f6ab1544a289b3efc06699b13d63e0bd(3/10/20) are patched."}, {"lang": "es", "value": "En RACTF versiones anteriores al commit f3dc89b, los usuarios no autenticados pueden ser capaces de obtener el valor de las claves de configuraci\u00f3n confidenciales que normalmente estar\u00edan ocultas para todos excepto para los administradores.&#xa0;Todas las versiones posteriores a la confirmaci\u00f3n f3dc89b9f6ab1544a289b3efc06699b13d63e0bd (10/3/20) est\u00e1n parcheadas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ractf:core:*:*:*:*:*:*:*:*", "versionEndIncluding": "41edf92", "matchCriteriaId": "89D2540B-5B14-4984-B6F1-D43546474CEA"}]}]}], "references": [{"url": "https://github.com/ractf/core/commit/f3dc89b9f6ab1544a289b3efc06699b13d63e0bd", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/ractf/core/security/advisories/GHSA-ph67-c355-52vm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ractf/core/commit/f3dc89b9f6ab1544a289b3efc06699b13d63e0bd"}}