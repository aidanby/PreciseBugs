{"buggy_code": ["language: node_js\n\nnode_js:\n  - \"6\"\n  - \"8\"\n  - \"10\"\n", "####0.2.0\n - Updating dependencies\n\n####0.1.3\n - Added support for resolving AAAA and NS records\n - Upgrading to latest shelljs dependency\n", "node-dns-sync\n=============\n\n[![Build Status](https://travis-ci.org/skoranga/node-dns-sync.png)](https://travis-ci.org/skoranga/node-dns-sync)\n\nSync/Blocking DNS resolve. Main usecase is in node server startup.\n\n### How to Use\n```javascript\nvar dnsSync = require('dns-sync');\n\nconsole.log(dnsSync.resolve('www.paypal.com'));     //should return the IP address\nconsole.log(dnsSync.resolve('www.yahoo.com'));\nconsole.log(dnsSync.resolve('www.non-host.something')); //should return null\n\nconsole.log(dnsSync.resolve('www.google.com', 'AAAA')); //should return AAAA records\nconsole.log(dnsSync.resolve('google.com', 'NS'));   //should return NS record\n```\n", "'use strict';\n\nvar util = require('util'),\n    path = require('path'),\n    shell = require('shelljs'),\n    debug = require('debug')('dns-sync');\n\n//source - http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address\nvar ValidHostnameRegex = new RegExp(\"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$\");\n\nfunction isValidHostName(hostname) {\n    return ValidHostnameRegex.test(hostname);\n}\n/**\n * Resolve hostname to IP address,\n * returns null in case of error\n */\nmodule.exports = {\n    lookup: function lookup(hostname) {\n        return module.exports.resolve(hostname);\n    },\n    resolve: function resolve(hostname, type) {\n        var nodeBinary = process.execPath;\n\n        if (!isValidHostName(hostname)) {\n            console.error('Invalid hostname:', hostname);\n            return null;\n        }\n\n        var scriptPath = path.join(__dirname, \"../scripts/dns-lookup-script\"),\n            response,\n            cmd = util.format('\"%s\" \"%s\" %s %s', nodeBinary, scriptPath, hostname, type || '');\n\n        response = shell.exec(cmd, {silent: true});\n        if (response && response.code === 0) {\n            return JSON.parse(response.stdout);\n        }\n        debug('hostname', \"fail to resolve hostname \" + hostname);\n        return null;\n    }\n};\n", "{\n  \"name\": \"dns-sync\",\n  \"version\": \"0.2.0\",\n  \"description\": \"dns-sync\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"lint\": \"eslint .\"\n  },\n  \"homepage\": \"https://github.com/skoranga/node-dns-sync\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:skoranga/node-dns-sync.git\"\n  },\n  \"keywords\": [\n    \"dns sync\",\n    \"server startup\",\n    \"nodejs\"\n  ],\n  \"author\": \"Sanjeev Koranga\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"dependencies\": {\n    \"debug\": \"^4\",\n    \"shelljs\": \"~0.8\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^6\",\n    \"eslint\": \"^6\",\n    \"eslint-plugin-standard\": \"^4\"\n  }\n}\n", "'use strict';\n\nvar assert = require('assert'),\n    dnsSync = require('../index');\n\ndescribe('dns sync', function () {\n\n    it('should resolve dns', function () {\n        assert.ok(dnsSync.resolve('www.example.com'));\n        assert.ok(dnsSync.resolve('www.paypal.com'));\n        assert.ok(dnsSync.resolve('www.google.com'));\n        assert.ok(dnsSync.resolve('www.yahoo.com'));\n    });\n\n    it('should fail to resolve dns', function () {\n        assert.ok(!dnsSync.resolve('www.example.con'));\n        assert.ok(!dnsSync.resolve('www.paypal.con'));\n        assert.ok(!dnsSync.resolve('www.not-google.first'));\n        assert.ok(!dnsSync.resolve('www.hello-yahoo.next'));\n    });\n\n    it('should fail to resolve invalid dns', function () {\n        assert.ok(!dnsSync.resolve(\"$(id > /tmp/foo)'\"));\n        assert.ok(!dnsSync.resolve(\"cd /tmp; rm -f /tmp/echo; env 'x=() { (a)=>' bash -c \\\"echo date\\\"; cat /tmp/echo\"));\n        assert.ok(!dnsSync.resolve(\"$(grep -l -z '[^)]=() {' /proc/[1-9]*/environ | cut -d/ -f3)'\"));\n    });\n\n    it('should resolve AAAA records if asked', function () {\n        var aaaa = dnsSync.resolve('www.google.com', 'AAAA');\n        assert.ok(aaaa);\n        assert.ok(aaaa[0].match(/^([0-9a-f]{2,4}(:|$))+/));\n        assert.ok(dnsSync.resolve('www.google.com') !== aaaa);\n    });\n\n    it('should resolve NS records if asked', function () {\n        var ns = dnsSync.resolve('google.com', 'NS');\n        assert.ok(ns);\n        assert.ok(ns.length >= 1);\n        assert.ok(ns[0].match(/^ns[0-9]+\\.google\\.com$/));\n    });\n});\n"], "fixing_code": ["language: node_js\n\nnode_js:\n  - \"6\"\n  - \"8\"\n  - \"10\"\n  - \"12\"\n  - \"14\"\n", "CHANGELOG\n==========\n\n0.2.1\n-----\n\n- Allowing only valid rrtypes as per https://nodejs.org/api/dns.html#dns_dns_resolve_hostname_rrtype_callback.\n\n0.2.0\n-----\n\n- Updating dependencies\n\n0.1.3\n-----\n\n- Added support for resolving AAAA and NS records\n- Upgrading to latest shelljs dependency\n", "node-dns-sync\n=============\n\n[![Build Status](https://travis-ci.org/skoranga/node-dns-sync.png)](https://travis-ci.org/skoranga/node-dns-sync)\n\nSync/Blocking DNS resolve. Main usecase is in node server startup.\n\nHow to Use\n-------\n\n```javascript\nvar dnsSync = require('dns-sync');\n\nconsole.log(dnsSync.resolve('www.paypal.com'));     //should return the IP address\nconsole.log(dnsSync.resolve('www.yahoo.com'));\nconsole.log(dnsSync.resolve('www.non-host.something')); //should return null\n\nconsole.log(dnsSync.resolve('www.google.com', 'AAAA')); //should return AAAA records\nconsole.log(dnsSync.resolve('google.com', 'NS'));   //should return NS record\n```\n", "'use strict';\n\nvar util = require('util'),\n    path = require('path'),\n    shell = require('shelljs'),\n    debug = require('debug')('dns-sync');\n\n//source - http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address\nvar ValidHostnameRegex = new RegExp(\"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$\");\n\n// https://nodejs.org/api/dns.html#dns_dns_resolve_hostname_rrtype_callback\nvar RRecordTypes = [\n    'A',\n    'AAAA',\n    'NS',\n    'NAPTR',\n    'CNAME',\n    'SOA',\n    'SRV',\n    'PTR',\n    'MX',\n    'TXT',\n    'ANY'];\n\nfunction isValidHostName(hostname) {\n    return ValidHostnameRegex.test(hostname);\n}\n/**\n * Resolve hostname to IP address,\n * returns null in case of error\n */\nmodule.exports = {\n    lookup: function lookup(hostname) {\n        return module.exports.resolve(hostname);\n    },\n    resolve: function resolve(hostname, type) {\n        var nodeBinary = process.execPath;\n\n        if (!isValidHostName(hostname)) {\n            console.error('Invalid hostname:', hostname);\n            return null;\n        }\n        if (typeof type !== 'undefined' && RRecordTypes.indexOf(type) === -1) {\n            console.error('Invalid rrtype:', type);\n            return null;\n        }\n\n        var scriptPath = path.join(__dirname, \"../scripts/dns-lookup-script\"),\n            response,\n            cmd = util.format('\"%s\" \"%s\" %s %s', nodeBinary, scriptPath, hostname, type || '');\n\n        response = shell.exec(cmd, {silent: true});\n        if (response && response.code === 0) {\n            return JSON.parse(response.stdout);\n        }\n        debug('hostname', \"fail to resolve hostname \" + hostname);\n        return null;\n    }\n};\n", "{\n  \"name\": \"dns-sync\",\n  \"version\": \"0.2.1\",\n  \"description\": \"dns-sync\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"lint\": \"eslint .\"\n  },\n  \"homepage\": \"https://github.com/skoranga/node-dns-sync\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:skoranga/node-dns-sync.git\"\n  },\n  \"keywords\": [\n    \"dns sync\",\n    \"server startup\",\n    \"nodejs\"\n  ],\n  \"author\": \"Sanjeev Koranga\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"dependencies\": {\n    \"debug\": \"^4\",\n    \"shelljs\": \"~0.8\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^6\",\n    \"eslint\": \"^6\",\n    \"eslint-plugin-standard\": \"^4\"\n  }\n}\n", "'use strict';\n\nvar assert = require('assert'),\n    fs = require('fs'),\n    dnsSync = require('../index');\n\ndescribe('dns sync', function () {\n\n    it('should resolve dns', function () {\n        assert.ok(dnsSync.resolve('www.example.com'));\n        assert.ok(dnsSync.resolve('www.paypal.com'));\n        assert.ok(dnsSync.resolve('www.google.com'));\n        assert.ok(dnsSync.resolve('www.yahoo.com'));\n    });\n\n    it('should fail to resolve dns', function () {\n        assert.ok(!dnsSync.resolve('www.example.con'));\n        assert.ok(!dnsSync.resolve('www.paypal.con'));\n        assert.ok(!dnsSync.resolve('www.not-google.first'));\n        assert.ok(!dnsSync.resolve('www.hello-yahoo.next'));\n    });\n\n    it('should fail to resolve invalid dns', function () {\n        assert.ok(!dnsSync.resolve(\"$(id > /tmp/foo)'\"));\n        assert.ok(!dnsSync.resolve(\"cd /tmp; rm -f /tmp/echo; env 'x=() { (a)=>' bash -c \\\"echo date\\\"; cat /tmp/echo\"));\n        assert.ok(!dnsSync.resolve(\"$(grep -l -z '[^)]=() {' /proc/[1-9]*/environ | cut -d/ -f3)'\"));\n    });\n\n    it('should resolve AAAA records if asked', function () {\n        var aaaa = dnsSync.resolve('www.google.com', 'AAAA');\n        assert.ok(aaaa);\n        assert.ok(aaaa[0].match(/^([0-9a-f]{2,4}(:|$))+/));\n        assert.ok(dnsSync.resolve('www.google.com') !== aaaa);\n    });\n\n    it('should resolve NS records if asked', function () {\n        var ns = dnsSync.resolve('google.com', 'NS');\n        assert.ok(ns);\n        assert.ok(ns.length >= 1);\n        assert.ok(ns[0].match(/^ns[0-9]+\\.google\\.com$/));\n    });\n\n    it('should fail to resolve if invalid record is asked', function () {\n        var rs1 = dnsSync.resolve('www.google.com', 'Test');\n        var rs2 = dnsSync.resolve('www.google.com', ' && touch test.txt');\n        assert.ok(!rs1);\n        assert.ok(!rs2);\n        assert.ok(!fs.existsSync('test.txt'));\n    });\n});\n"], "filenames": [".travis.yml", "CHANGELOG.md", "README.md", "lib/dns-sync.js", "package.json", "test/test.js"], "buggy_code_start_loc": [6, 1, 8, 9, 3, 3], "buggy_code_end_loc": [6, 7, 9, 28, 4, 40], "fixing_code_start_loc": [7, 1, 8, 10, 3, 4], "fixing_code_end_loc": [9, 19, 11, 47, 4, 50], "type": "CWE-77", "message": "node-dns-sync (npm module dns-sync) through 0.2.0 allows execution of arbitrary commands . This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This has been fixed in 0.2.1.", "other": {"cve": {"id": "CVE-2020-11079", "sourceIdentifier": "security-advisories@github.com", "published": "2020-05-28T19:15:10.640", "lastModified": "2021-11-03T20:07:52.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "node-dns-sync (npm module dns-sync) through 0.2.0 allows execution of arbitrary commands . This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This has been fixed in 0.2.1."}, {"lang": "es", "value": "node-dns-sync (m\u00f3dulo npm dns-sync) versiones hasta 0.2.0, permite una ejecuci\u00f3n de comandos arbitrarios. Este problema puede conllevar a una ejecuci\u00f3n de c\u00f3digo remota si un cliente de la biblioteca llama al m\u00e9todo vulnerable con una entrada no confiable. Esto ha sido corregido en la versi\u00f3n 0.2.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:node-dns-sync_project:node-dns-sync:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.2.1", "matchCriteriaId": "760512AD-7379-4BB0-B697-FE41B887DD0C"}]}]}], "references": [{"url": "https://github.com/skoranga/node-dns-sync/commit/cb10a5ac7913eacc031ade7d91596277f31645dc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/skoranga/node-dns-sync/security/advisories/GHSA-wh69-wc6q-7888", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/skoranga/node-dns-sync/commit/cb10a5ac7913eacc031ade7d91596277f31645dc"}}