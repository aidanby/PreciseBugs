{"buggy_code": ["<?php\n\nnamespace Wallabag\\ApiBundle\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\nuse Wallabag\\ApiBundle\\Entity\\Client;\nuse Wallabag\\ApiBundle\\Form\\Type\\ClientType;\nuse Wallabag\\ApiBundle\\Repository\\ClientRepository;\n\nclass DeveloperController extends AbstractController\n{\n    /**\n     * List all clients and link to create a new one.\n     *\n     * @Route(\"/developer\", name=\"developer\")\n     *\n     * @return Response\n     */\n    public function indexAction(ClientRepository $repo)\n    {\n        $clients = $repo->findByUser($this->getUser()->getId());\n\n        return $this->render('@WallabagCore/Developer/index.html.twig', [\n            'clients' => $clients,\n        ]);\n    }\n\n    /**\n     * Create a client (an app).\n     *\n     * @Route(\"/developer/client/create\", name=\"developer_create_client\")\n     *\n     * @return Response\n     */\n    public function createClientAction(Request $request, EntityManagerInterface $entityManager, TranslatorInterface $translator)\n    {\n        $client = new Client($this->getUser());\n        $clientForm = $this->createForm(ClientType::class, $client);\n        $clientForm->handleRequest($request);\n\n        if ($clientForm->isSubmitted() && $clientForm->isValid()) {\n            $client->setAllowedGrantTypes(['token', 'authorization_code', 'password', 'refresh_token']);\n            $entityManager->persist($client);\n            $entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                $translator->trans('flashes.developer.notice.client_created', ['%name%' => $client->getName()])\n            );\n\n            return $this->render('@WallabagCore/Developer/client_parameters.html.twig', [\n                'client_id' => $client->getPublicId(),\n                'client_secret' => $client->getSecret(),\n                'client_name' => $client->getName(),\n            ]);\n        }\n\n        return $this->render('@WallabagCore/Developer/client.html.twig', [\n            'form' => $clientForm->createView(),\n        ]);\n    }\n\n    /**\n     * Remove a client.\n     *\n     * @Route(\"/developer/client/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"developer_delete_client\")\n     *\n     * @return RedirectResponse\n     */\n    public function deleteClientAction(Client $client, EntityManagerInterface $entityManager, TranslatorInterface $translator)\n    {\n        if (null === $this->getUser() || $client->getUser()->getId() !== $this->getUser()->getId()) {\n            throw $this->createAccessDeniedException('You can not access this client.');\n        }\n\n        $entityManager->remove($client);\n        $entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            $translator->trans('flashes.developer.notice.client_deleted', ['%name%' => $client->getName()])\n        );\n\n        return $this->redirect($this->generateUrl('developer'));\n    }\n\n    /**\n     * Display developer how to use an existing app.\n     *\n     * @Route(\"/developer/howto/first-app\", name=\"developer_howto_firstapp\")\n     *\n     * @return Response\n     */\n    public function howtoFirstAppAction()\n    {\n        return $this->render('@WallabagCore/Developer/howto_app.html.twig',\n        [\n            'wallabag_url' => $this->getParameter('domain_name'),\n        ]);\n    }\n}\n", "{% extends \"@WallabagCore/layout.html.twig\" %}\n\n{% block title %}{{ 'developer.page_title'|trans }}{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n    <div class=\"col s12\">\n        <div class=\"card-panel settings\">\n\n            <div class=\"row\">\n                <h3>{{ 'developer.welcome_message'|trans }}</h3>\n\n                <h4>{{ 'developer.documentation'|trans }}</h4>\n\n                <ul>\n                    <li><a href=\"{{ path('developer_howto_firstapp') }}\">{{ 'developer.how_to_first_app'|trans }}</a></li>\n                    <li><a href=\"https://doc.wallabag.org/en/developer/api/readme.html\">{{ 'developer.full_documentation'|trans }}</a></li>\n                    <li><a href=\"{{ path('nelmio_api_doc.swagger_ui') }}\">{{ 'developer.list_methods'|trans }}</a></li>\n                </ul>\n\n                <h4>{{ 'developer.clients.title'|trans }}</h4>\n                <ul>\n                    <li><a href=\"{{ path('developer_create_client') }}\" class=\"waves-effect waves-light btn\">{{ 'developer.clients.create_new'|trans }}</a></li>\n                </ul>\n\n                <h4>{{ 'developer.existing_clients.title'|trans }}</h4>\n                {% if clients %}\n                    <ul class=\"collapsible\" data-collapsible=\"expandable\">\n                        {% for client in clients %}\n                            <li>\n                                <div class=\"collapsible-header\">{{ client.name }} - #{{ client.id }}</div>\n                                <div class=\"collapsible-body\">\n                                    <table class=\"striped\">\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_id'|trans }}</td>\n                                            <td>\n                                                <strong><code>{{ client.clientId }}</code></strong>\n                                                <button class=\"btn\" data-clipboard-text=\"{{ client.clientId }}\">{{ 'developer.client.copy_to_clipboard'|trans }}</button>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_secret'|trans }}</td>\n                                            <td>\n                                                <strong><code>{{ client.secret }}</code></strong>\n                                                <button class=\"btn\" data-clipboard-text=\"{{ client.secret }}\">{{ 'developer.client.copy_to_clipboard'|trans }}</button>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_uris'|trans }}</td>\n                                            <td><strong><code>{{ client.redirectUris|json_encode() }}</code></strong></td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_grant_types'|trans }}</td>\n                                            <td><strong><code>{{ client.allowedGrantTypes|json_encode() }}</code></strong></td>\n                                        </tr>\n                                    </table>\n\n                                    <p>{{ 'developer.remove.warn_message_1'|trans({'%name%': client.name}) }}</p>\n                                    <p>{{ 'developer.remove.warn_message_2'|trans({'%name%': client.name}) }}</p>\n                                    <p>\n                                        <a class=\"waves-effect waves-light red btn\" href=\"{{ path('developer_delete_client', {'id': client.id}) }}\">{{ 'developer.remove.action'|trans({'%name%': client.name}) }}</a>\n                                    </p>\n                                </div>\n                            </li>\n                        {% endfor %}\n                    </ul>\n                {% else %}\n                    {{ 'developer.existing_clients.no_client'|trans }}\n                {% endif %}\n            </div>\n\n        </div>\n    </div>\n</div>\n\n{% endblock %}\n", "<?php\n\nnamespace Tests\\Wallabag\\ApiBundle\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\ApiBundle\\Entity\\Client;\n\nclass DeveloperControllerTest extends WallabagCoreTestCase\n{\n    public function testCreateClient()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $nbClients = $em->getRepository(Client::class)->findAll();\n\n        $crawler = $client->request('GET', '/developer/client/create');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=client_save]')->form();\n\n        $data = [\n            'client[name]' => 'My app',\n        ];\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $newNbClients = $em->getRepository(Client::class)->findAll();\n        $this->assertGreaterThan(\\count($nbClients), \\count($newNbClients));\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('.settings table strong')->extract(['_text']));\n        $this->assertStringContainsString('My app', $alert[0]);\n    }\n\n    public function testCreateToken()\n    {\n        $client = $this->getTestClient();\n        $apiClient = $this->createApiClientForUser('admin');\n\n        $client->request('POST', '/oauth/v2/token', [\n            'grant_type' => 'password',\n            'client_id' => $apiClient->getPublicId(),\n            'client_secret' => $apiClient->getSecret(),\n            'username' => 'admin',\n            'password' => 'mypassword',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $data = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('access_token', $data);\n        $this->assertArrayHasKey('expires_in', $data);\n        $this->assertArrayHasKey('token_type', $data);\n        $this->assertArrayHasKey('refresh_token', $data);\n    }\n\n    public function testCreateTokenWithBadClientId()\n    {\n        $client = $this->getTestClient();\n        $client->request('POST', '/oauth/v2/token', [\n            'grant_type' => 'password',\n            'client_id' => '$WALLABAG_CLIENT_ID',\n            'client_secret' => 'secret',\n            'username' => 'admin',\n            'password' => 'mypassword',\n        ]);\n\n        $this->assertSame(400, $client->getResponse()->getStatusCode());\n    }\n\n    public function testListingClient()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $nbClients = $em->getRepository(Client::class)->findAll();\n\n        $crawler = $client->request('GET', '/developer');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $this->assertSame(\\count($nbClients), $crawler->filter('ul[class=collapsible] li')->count());\n    }\n\n    public function testDeveloperHowto()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/developer/howto/first-app');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testRemoveClient()\n    {\n        $client = $this->getTestClient();\n        $adminApiClient = $this->createApiClientForUser('admin');\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        // Try to remove an admin's client with a wrong user\n        $this->logInAs('bob');\n        $client->request('GET', '/developer');\n        $this->assertStringContainsString('no_client', $client->getResponse()->getContent());\n\n        $this->logInAs('bob');\n        $client->request('GET', '/developer/client/delete/' . $adminApiClient->getId());\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        // Try to remove the admin's client with the good user\n        $this->logInAs('admin');\n        $crawler = $client->request('GET', '/developer');\n\n        $link = $crawler\n            ->filter('div[class=collapsible-body] p a')\n            ->eq(0)\n            ->link()\n        ;\n\n        $client->click($link);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $this->assertNull(\n            $em->getRepository(Client::class)->find($adminApiClient->getId()),\n            'The client should have been removed'\n        );\n    }\n\n    /**\n     * @param string $username\n     * @param array  $grantTypes\n     *\n     * @return Client\n     */\n    private function createApiClientForUser($username, $grantTypes = ['password'])\n    {\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $userManager = $client->getContainer()->get('fos_user.user_manager.test');\n        $user = $userManager->findUserBy(['username' => $username]);\n        $apiClient = new Client($user);\n        $apiClient->setName('My app');\n        $apiClient->setAllowedGrantTypes($grantTypes);\n        $em->persist($apiClient);\n        $em->flush();\n\n        return $apiClient;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Wallabag\\ApiBundle\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\nuse Wallabag\\ApiBundle\\Entity\\Client;\nuse Wallabag\\ApiBundle\\Form\\Type\\ClientType;\nuse Wallabag\\ApiBundle\\Repository\\ClientRepository;\n\nclass DeveloperController extends AbstractController\n{\n    /**\n     * List all clients and link to create a new one.\n     *\n     * @Route(\"/developer\", name=\"developer\")\n     *\n     * @return Response\n     */\n    public function indexAction(ClientRepository $repo)\n    {\n        $clients = $repo->findByUser($this->getUser()->getId());\n\n        return $this->render('@WallabagCore/Developer/index.html.twig', [\n            'clients' => $clients,\n        ]);\n    }\n\n    /**\n     * Create a client (an app).\n     *\n     * @Route(\"/developer/client/create\", name=\"developer_create_client\")\n     *\n     * @return Response\n     */\n    public function createClientAction(Request $request, EntityManagerInterface $entityManager, TranslatorInterface $translator)\n    {\n        $client = new Client($this->getUser());\n        $clientForm = $this->createForm(ClientType::class, $client);\n        $clientForm->handleRequest($request);\n\n        if ($clientForm->isSubmitted() && $clientForm->isValid()) {\n            $client->setAllowedGrantTypes(['token', 'authorization_code', 'password', 'refresh_token']);\n            $entityManager->persist($client);\n            $entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                $translator->trans('flashes.developer.notice.client_created', ['%name%' => $client->getName()])\n            );\n\n            return $this->render('@WallabagCore/Developer/client_parameters.html.twig', [\n                'client_id' => $client->getPublicId(),\n                'client_secret' => $client->getSecret(),\n                'client_name' => $client->getName(),\n            ]);\n        }\n\n        return $this->render('@WallabagCore/Developer/client.html.twig', [\n            'form' => $clientForm->createView(),\n        ]);\n    }\n\n    /**\n     * Remove a client.\n     *\n     * @Route(\"/developer/client/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"developer_delete_client\", methods={\"POST\"})\n     *\n     * @return RedirectResponse\n     */\n    public function deleteClientAction(Request $request, Client $client, EntityManagerInterface $entityManager, TranslatorInterface $translator)\n    {\n\n        if (!$this->isCsrfTokenValid('delete-client', $request->request->get('token'))) {\n            throw $this->createAccessDeniedException('Bad CSRF token.');\n        }\n\n        if (null === $this->getUser() || $client->getUser()->getId() !== $this->getUser()->getId()) {\n            throw $this->createAccessDeniedException('You can not access this client.');\n        }\n\n        $entityManager->remove($client);\n        $entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            $translator->trans('flashes.developer.notice.client_deleted', ['%name%' => $client->getName()])\n        );\n\n        return $this->redirect($this->generateUrl('developer'));\n    }\n\n    /**\n     * Display developer how to use an existing app.\n     *\n     * @Route(\"/developer/howto/first-app\", name=\"developer_howto_firstapp\")\n     *\n     * @return Response\n     */\n    public function howtoFirstAppAction()\n    {\n        return $this->render('@WallabagCore/Developer/howto_app.html.twig',\n        [\n            'wallabag_url' => $this->getParameter('domain_name'),\n        ]);\n    }\n}\n", "{% extends \"@WallabagCore/layout.html.twig\" %}\n\n{% block title %}{{ 'developer.page_title'|trans }}{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n    <div class=\"col s12\">\n        <div class=\"card-panel settings\">\n\n            <div class=\"row\">\n                <h3>{{ 'developer.welcome_message'|trans }}</h3>\n\n                <h4>{{ 'developer.documentation'|trans }}</h4>\n\n                <ul>\n                    <li><a href=\"{{ path('developer_howto_firstapp') }}\">{{ 'developer.how_to_first_app'|trans }}</a></li>\n                    <li><a href=\"https://doc.wallabag.org/en/developer/api/readme.html\">{{ 'developer.full_documentation'|trans }}</a></li>\n                    <li><a href=\"{{ path('nelmio_api_doc.swagger_ui') }}\">{{ 'developer.list_methods'|trans }}</a></li>\n                </ul>\n\n                <h4>{{ 'developer.clients.title'|trans }}</h4>\n                <ul>\n                    <li><a href=\"{{ path('developer_create_client') }}\" class=\"waves-effect waves-light btn\">{{ 'developer.clients.create_new'|trans }}</a></li>\n                </ul>\n\n                <h4>{{ 'developer.existing_clients.title'|trans }}</h4>\n                {% if clients %}\n                    <ul class=\"collapsible\" data-collapsible=\"expandable\">\n                        {% for client in clients %}\n                            <li>\n                                <div class=\"collapsible-header\">{{ client.name }} - #{{ client.id }}</div>\n                                <div class=\"collapsible-body\">\n                                    <table class=\"striped\">\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_id'|trans }}</td>\n                                            <td>\n                                                <strong><code>{{ client.clientId }}</code></strong>\n                                                <button class=\"btn\" data-clipboard-text=\"{{ client.clientId }}\">{{ 'developer.client.copy_to_clipboard'|trans }}</button>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_secret'|trans }}</td>\n                                            <td>\n                                                <strong><code>{{ client.secret }}</code></strong>\n                                                <button class=\"btn\" data-clipboard-text=\"{{ client.secret }}\">{{ 'developer.client.copy_to_clipboard'|trans }}</button>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_uris'|trans }}</td>\n                                            <td><strong><code>{{ client.redirectUris|json_encode() }}</code></strong></td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'developer.existing_clients.field_grant_types'|trans }}</td>\n                                            <td><strong><code>{{ client.allowedGrantTypes|json_encode() }}</code></strong></td>\n                                        </tr>\n                                    </table>\n\n                                    <p>{{ 'developer.remove.warn_message_1'|trans({'%name%': client.name}) }}</p>\n                                    <p>{{ 'developer.remove.warn_message_2'|trans({'%name%': client.name}) }}</p>\n                                    <form action=\"{{ path('developer_delete_client', { id: client.id }) }}\" method=\"post\" name=\"delete-client\">\n                                        <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('delete-client') }}\" />\n\n                                        <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'developer.remove.action'|trans({'%name%': client.name}) }}</button>\n                                    </form>\n                                </div>\n                            </li>\n                        {% endfor %}\n                    </ul>\n                {% else %}\n                    {{ 'developer.existing_clients.no_client'|trans }}\n                {% endif %}\n            </div>\n\n        </div>\n    </div>\n</div>\n\n{% endblock %}\n", "<?php\n\nnamespace Tests\\Wallabag\\ApiBundle\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\ApiBundle\\Entity\\Client;\n\nclass DeveloperControllerTest extends WallabagCoreTestCase\n{\n    public function testCreateClient()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $nbClients = $em->getRepository(Client::class)->findAll();\n\n        $crawler = $client->request('GET', '/developer/client/create');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=client_save]')->form();\n\n        $data = [\n            'client[name]' => 'My app',\n        ];\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $newNbClients = $em->getRepository(Client::class)->findAll();\n        $this->assertGreaterThan(\\count($nbClients), \\count($newNbClients));\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('.settings table strong')->extract(['_text']));\n        $this->assertStringContainsString('My app', $alert[0]);\n    }\n\n    public function testCreateToken()\n    {\n        $client = $this->getTestClient();\n        $apiClient = $this->createApiClientForUser('admin');\n\n        $client->request('POST', '/oauth/v2/token', [\n            'grant_type' => 'password',\n            'client_id' => $apiClient->getPublicId(),\n            'client_secret' => $apiClient->getSecret(),\n            'username' => 'admin',\n            'password' => 'mypassword',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $data = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('access_token', $data);\n        $this->assertArrayHasKey('expires_in', $data);\n        $this->assertArrayHasKey('token_type', $data);\n        $this->assertArrayHasKey('refresh_token', $data);\n    }\n\n    public function testCreateTokenWithBadClientId()\n    {\n        $client = $this->getTestClient();\n        $client->request('POST', '/oauth/v2/token', [\n            'grant_type' => 'password',\n            'client_id' => '$WALLABAG_CLIENT_ID',\n            'client_secret' => 'secret',\n            'username' => 'admin',\n            'password' => 'mypassword',\n        ]);\n\n        $this->assertSame(400, $client->getResponse()->getStatusCode());\n    }\n\n    public function testListingClient()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $nbClients = $em->getRepository(Client::class)->findAll();\n\n        $crawler = $client->request('GET', '/developer');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $this->assertSame(\\count($nbClients), $crawler->filter('ul[class=collapsible] li')->count());\n    }\n\n    public function testDeveloperHowto()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/developer/howto/first-app');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testRemoveClient()\n    {\n        $client = $this->getTestClient();\n        $adminApiClient = $this->createApiClientForUser('admin');\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        // Try to remove an admin's client with a wrong user\n        $this->logInAs('bob');\n        $client->request('GET', '/developer');\n        $this->assertStringContainsString('no_client', $client->getResponse()->getContent());\n\n        $this->logInAs('bob');\n        $client->request('POST', '/developer/client/delete/' . $adminApiClient->getId());\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        // Try to remove the admin's client with the good user\n        $this->logInAs('admin');\n        $crawler = $client->request('GET', '/developer');\n\n        $form = $crawler->filter('form[name=delete-client]')->form();\n\n        $client->submit($form);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $this->assertNull(\n            $em->getRepository(Client::class)->find($adminApiClient->getId()),\n            'The client should have been removed'\n        );\n    }\n\n    /**\n     * @param string $username\n     * @param array  $grantTypes\n     *\n     * @return Client\n     */\n    private function createApiClientForUser($username, $grantTypes = ['password'])\n    {\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $userManager = $client->getContainer()->get('fos_user.user_manager.test');\n        $user = $userManager->findUserBy(['username' => $username]);\n        $apiClient = new Client($user);\n        $apiClient->setName('My app');\n        $apiClient->setAllowedGrantTypes($grantTypes);\n        $em->persist($apiClient);\n        $em->flush();\n\n        return $apiClient;\n    }\n}\n"], "filenames": ["src/Wallabag/ApiBundle/Controller/DeveloperController.php", "src/Wallabag/CoreBundle/Resources/views/Developer/index.html.twig", "tests/Wallabag/ApiBundle/Controller/DeveloperControllerTest.php"], "buggy_code_start_loc": [72, 60, 107], "buggy_code_end_loc": [77, 63, 121], "fixing_code_start_loc": [72, 60, 107], "fixing_code_end_loc": [83, 65, 117], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository wallabag/wallabag prior to 2.6.3.", "other": {"cve": {"id": "CVE-2023-4455", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-21T10:15:10.037", "lastModified": "2023-08-24T21:11:31.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository wallabag/wallabag prior to 2.6.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wallabag:wallabag:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.3", "matchCriteriaId": "81130FEB-7979-4BD8-A893-EF6A91CE66D5"}]}]}], "references": [{"url": "https://github.com/wallabag/wallabag/commit/ffcc5c9062fcc8cd922d7d6d65edbe5efae96806", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/5ab1b206-5fe8-4737-b275-d705e76f193a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wallabag/wallabag/commit/ffcc5c9062fcc8cd922d7d6d65edbe5efae96806"}}