{"buggy_code": ["-- Copyright 2008 Steven Barth <steven@midlink.org>\n-- Copyright 2011 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nmodule(\"luci.controller.admin.status\", package.seeall)\n\nfunction index()\n\tentry({\"admin\", \"status\"}, alias(\"admin\", \"status\", \"overview\"), _(\"Status\"), 20).index = true\n\tentry({\"admin\", \"status\", \"overview\"}, template(\"admin_status/index\"), _(\"Overview\"), 1)\n\n\tentry({\"admin\", \"status\", \"iptables\"}, template(\"admin_status/iptables\"), _(\"Firewall\"), 2).leaf = true\n\tentry({\"admin\", \"status\", \"iptables_action\"}, post(\"action_iptables\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"routes\"}, template(\"admin_status/routes\"), _(\"Routes\"), 3)\n\tentry({\"admin\", \"status\", \"syslog\"}, call(\"action_syslog\"), _(\"System Log\"), 4)\n\tentry({\"admin\", \"status\", \"dmesg\"}, call(\"action_dmesg\"), _(\"Kernel Log\"), 5)\n\tentry({\"admin\", \"status\", \"processes\"}, cbi(\"admin_status/processes\"), _(\"Processes\"), 6)\n\n\tentry({\"admin\", \"status\", \"realtime\"}, alias(\"admin\", \"status\", \"realtime\", \"load\"), _(\"Realtime Graphs\"), 7)\n\n\tentry({\"admin\", \"status\", \"realtime\", \"load\"}, template(\"admin_status/load\"), _(\"Load\"), 1).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"load_status\"}, call(\"action_load\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"realtime\", \"bandwidth\"}, template(\"admin_status/bandwidth\"), _(\"Traffic\"), 2).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"bandwidth_status\"}, call(\"action_bandwidth\")).leaf = true\n\n\tif nixio.fs.access(\"/etc/config/wireless\") then\n\t\tentry({\"admin\", \"status\", \"realtime\", \"wireless\"}, template(\"admin_status/wireless\"), _(\"Wireless\"), 3).leaf = true\n\t\tentry({\"admin\", \"status\", \"realtime\", \"wireless_status\"}, call(\"action_wireless\")).leaf = true\n\tend\n\n\tentry({\"admin\", \"status\", \"realtime\", \"connections\"}, template(\"admin_status/connections\"), _(\"Connections\"), 4).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"connections_status\"}, call(\"action_connections\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"nameinfo\"}, call(\"action_nameinfo\")).leaf = true\nend\n\nfunction action_syslog()\n\tlocal syslog = luci.sys.syslog()\n\tluci.template.render(\"admin_status/syslog\", {syslog=syslog})\nend\n\nfunction action_dmesg()\n\tlocal dmesg = luci.sys.dmesg()\n\tluci.template.render(\"admin_status/dmesg\", {dmesg=dmesg})\nend\n\nfunction action_iptables()\n\tif luci.http.formvalue(\"zero\") then\n\t\tif luci.http.formvalue(\"family\") == \"6\" then\n\t\t\tluci.util.exec(\"/usr/sbin/ip6tables -Z\")\n\t\telse\n\t\t\tluci.util.exec(\"/usr/sbin/iptables -Z\")\n\t\tend\n\telseif luci.http.formvalue(\"restart\") then\n\t\tluci.util.exec(\"/etc/init.d/firewall restart\")\n\tend\n\n\tluci.http.redirect(luci.dispatcher.build_url(\"admin/status/iptables\"))\nend\n\nfunction action_bandwidth(iface)\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -i %q 2>/dev/null\" % iface)\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_wireless(iface)\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -r %q 2>/dev/null\" % iface)\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_load()\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -l 2>/dev/null\")\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_connections()\n\tlocal sys = require \"luci.sys\"\n\n\tluci.http.prepare_content(\"application/json\")\n\n\tluci.http.write(\"{ connections: \")\n\tluci.http.write_json(sys.net.conntrack())\n\n\tlocal bwc = io.popen(\"luci-bwc -c 2>/dev/null\")\n\tif bwc then\n\t\tluci.http.write(\", statistics: [\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\n\n\tluci.http.write(\" }\")\nend\n\nfunction action_nameinfo(...)\n\tlocal util = require \"luci.util\"\n\n\tluci.http.prepare_content(\"application/json\")\n\tluci.http.write_json(util.ubus(\"network.rrdns\", \"lookup\", {\n\t\taddrs = { ... },\n\t\ttimeout = 5000,\n\t\tlimit = 1000\n\t}) or { })\nend\n"], "fixing_code": ["-- Copyright 2008 Steven Barth <steven@midlink.org>\n-- Copyright 2011 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nmodule(\"luci.controller.admin.status\", package.seeall)\n\nfunction index()\n\tentry({\"admin\", \"status\"}, alias(\"admin\", \"status\", \"overview\"), _(\"Status\"), 20).index = true\n\tentry({\"admin\", \"status\", \"overview\"}, template(\"admin_status/index\"), _(\"Overview\"), 1)\n\n\tentry({\"admin\", \"status\", \"iptables\"}, template(\"admin_status/iptables\"), _(\"Firewall\"), 2).leaf = true\n\tentry({\"admin\", \"status\", \"iptables_action\"}, post(\"action_iptables\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"routes\"}, template(\"admin_status/routes\"), _(\"Routes\"), 3)\n\tentry({\"admin\", \"status\", \"syslog\"}, call(\"action_syslog\"), _(\"System Log\"), 4)\n\tentry({\"admin\", \"status\", \"dmesg\"}, call(\"action_dmesg\"), _(\"Kernel Log\"), 5)\n\tentry({\"admin\", \"status\", \"processes\"}, cbi(\"admin_status/processes\"), _(\"Processes\"), 6)\n\n\tentry({\"admin\", \"status\", \"realtime\"}, alias(\"admin\", \"status\", \"realtime\", \"load\"), _(\"Realtime Graphs\"), 7)\n\n\tentry({\"admin\", \"status\", \"realtime\", \"load\"}, template(\"admin_status/load\"), _(\"Load\"), 1).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"load_status\"}, call(\"action_load\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"realtime\", \"bandwidth\"}, template(\"admin_status/bandwidth\"), _(\"Traffic\"), 2).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"bandwidth_status\"}, call(\"action_bandwidth\")).leaf = true\n\n\tif nixio.fs.access(\"/etc/config/wireless\") then\n\t\tentry({\"admin\", \"status\", \"realtime\", \"wireless\"}, template(\"admin_status/wireless\"), _(\"Wireless\"), 3).leaf = true\n\t\tentry({\"admin\", \"status\", \"realtime\", \"wireless_status\"}, call(\"action_wireless\")).leaf = true\n\tend\n\n\tentry({\"admin\", \"status\", \"realtime\", \"connections\"}, template(\"admin_status/connections\"), _(\"Connections\"), 4).leaf = true\n\tentry({\"admin\", \"status\", \"realtime\", \"connections_status\"}, call(\"action_connections\")).leaf = true\n\n\tentry({\"admin\", \"status\", \"nameinfo\"}, call(\"action_nameinfo\")).leaf = true\nend\n\nfunction action_syslog()\n\tlocal syslog = luci.sys.syslog()\n\tluci.template.render(\"admin_status/syslog\", {syslog=syslog})\nend\n\nfunction action_dmesg()\n\tlocal dmesg = luci.sys.dmesg()\n\tluci.template.render(\"admin_status/dmesg\", {dmesg=dmesg})\nend\n\nfunction action_iptables()\n\tif luci.http.formvalue(\"zero\") then\n\t\tif luci.http.formvalue(\"family\") == \"6\" then\n\t\t\tluci.util.exec(\"/usr/sbin/ip6tables -Z\")\n\t\telse\n\t\t\tluci.util.exec(\"/usr/sbin/iptables -Z\")\n\t\tend\n\telseif luci.http.formvalue(\"restart\") then\n\t\tluci.util.exec(\"/etc/init.d/firewall restart\")\n\tend\n\n\tluci.http.redirect(luci.dispatcher.build_url(\"admin/status/iptables\"))\nend\n\nfunction action_bandwidth(iface)\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -i '%s' 2>/dev/null\" % iface:gsub(\"'\", \"\"))\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_wireless(iface)\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -r '%s' 2>/dev/null\" % iface:gsub(\"'\", \"\"))\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_load()\n\tluci.http.prepare_content(\"application/json\")\n\n\tlocal bwc = io.popen(\"luci-bwc -l 2>/dev/null\")\n\tif bwc then\n\t\tluci.http.write(\"[\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\nend\n\nfunction action_connections()\n\tlocal sys = require \"luci.sys\"\n\n\tluci.http.prepare_content(\"application/json\")\n\n\tluci.http.write(\"{ connections: \")\n\tluci.http.write_json(sys.net.conntrack())\n\n\tlocal bwc = io.popen(\"luci-bwc -c 2>/dev/null\")\n\tif bwc then\n\t\tluci.http.write(\", statistics: [\")\n\n\t\twhile true do\n\t\t\tlocal ln = bwc:read(\"*l\")\n\t\t\tif not ln then break end\n\t\t\tluci.http.write(ln)\n\t\tend\n\n\t\tluci.http.write(\"]\")\n\t\tbwc:close()\n\tend\n\n\tluci.http.write(\" }\")\nend\n\nfunction action_nameinfo(...)\n\tlocal util = require \"luci.util\"\n\n\tluci.http.prepare_content(\"application/json\")\n\tluci.http.write_json(util.ubus(\"network.rrdns\", \"lookup\", {\n\t\taddrs = { ... },\n\t\ttimeout = 5000,\n\t\tlimit = 1000\n\t}) or { })\nend\n"], "filenames": ["modules/luci-mod-admin-full/luasrc/controller/admin/status.lua"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [84], "fixing_code_start_loc": [65], "fixing_code_end_loc": [84], "type": "CWE-78", "message": "In OpenWrt LuCI through 0.10, the endpoints admin/status/realtime/bandwidth_status and admin/status/realtime/wireless_status of the web application are affected by a command injection vulnerability.", "other": {"cve": {"id": "CVE-2019-12272", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-23T15:30:12.560", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OpenWrt LuCI through 0.10, the endpoints admin/status/realtime/bandwidth_status and admin/status/realtime/wireless_status of the web application are affected by a command injection vulnerability."}, {"lang": "es", "value": "En OpenWrt LuCI hasta versi\u00f3n 0.10, los endpoints admin/status/realtime/bandwidth_status y admin/status/realtime/wireless_status de la aplicaci\u00f3n web se ven afectados por una vulnerabilidad de inyecci\u00f3n de comandos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openwrt:luci:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.10.0", "matchCriteriaId": "3A2B45D2-429E-4EC4-9655-884B69816000"}]}]}], "references": [{"url": "https://github.com/openwrt/luci/commit/9e4b8a91384562e3baee724a52b72e30b1aa006d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openwrt/luci/commits/master", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openwrt/luci/commit/9e4b8a91384562e3baee724a52b72e30b1aa006d"}}