{"buggy_code": ["<?php\n/**\n * Settings management and UI\n *\n * @since 0.2.0\n */\nnamespace wpCloud\\StatelessMedia {\n\n  if( !class_exists( 'wpCloud\\StatelessMedia\\Settings' ) ) {\n\n    final class Settings extends \\UsabilityDynamics\\Settings {\n\n      /**\n       * @var false|null|string\n       */\n      public $setup_wizard_ui = null;\n\n      /**\n       * @var Array\n       */\n      public $wildcards = array();\n\n      /**\n       * @var false|null|string\n       */\n      public $stateless_settings = null;\n\n      /**\n       * Instance of\n       *  - ud_get_stateless_media\n       *  - wpCloud\\StatelessMedia\\Bootstrap\n       * @var false|null|string\n       */\n      public $bootstrap = null;\n\n      private $settings = array(\n        'mode'                   => array('WP_STATELESS_MEDIA_MODE', 'ephemeral'),\n        'body_rewrite'           => array('WP_STATELESS_MEDIA_BODY_REWRITE', 'false'),\n        'body_rewrite_types'     => array('WP_STATELESS_MEDIA_BODY_REWRITE_TYPES', 'jpg jpeg png gif pdf'),\n        'bucket'                 => array('WP_STATELESS_MEDIA_BUCKET', ''),\n        'root_dir'               => array('WP_STATELESS_MEDIA_ROOT_DIR', ['/%date_year/date_month%/', '/sites/%site_id%/%date_year/date_month%/']),\n        'key_json'               => array('WP_STATELESS_MEDIA_JSON_KEY', ''),\n        'cache_control'          => array('WP_STATELESS_MEDIA_CACHE_CONTROL', ''),\n        'delete_remote'          => array('WP_STATELESS_MEDIA_DELETE_REMOTE', 'true'),\n        'custom_domain'          => array('WP_STATELESS_MEDIA_CUSTOM_DOMAIN', ''),\n        'organize_media'         => array('', 'true'),\n        'hashify_file_name'      => array(['WP_STATELESS_MEDIA_HASH_FILENAME' => 'WP_STATELESS_MEDIA_CACHE_BUSTING'], 'false'),\n      );\n\n      private $network_only_settings = array(\n        'hide_settings_panel'   => array('WP_STATELESS_MEDIA_HIDE_SETTINGS_PANEL', false),\n        'hide_setup_assistant'  => array('WP_STATELESS_MEDIA_HIDE_SETUP_ASSISTANT', false),\n      );\n\n      private $strings = array(\n        'network' => 'Currently configured via Network Settings.',\n        'constant' => 'Currently configured via a constant.',\n        'environment' => 'Currently configured via an environment variable.',\n      );\n\n      /**\n       *\n       * Settings constructor.\n       * @param null $bootstrap\n       */\n      public function __construct($bootstrap = null) {\n        $this->bootstrap = $bootstrap ? $bootstrap : ud_get_stateless_media();\n\n\n        /* Add 'Settings' link for SM plugin on plugins page. */\n        $_basename = plugin_basename( $this->bootstrap->boot_file );\n\n        parent::__construct( array(\n          'store'       => 'options',\n          'format'      => 'json',\n          'data'        => array(\n            'sm' => array()\n          )\n        ));\n\n        // Setting sm variable\n        $this->refresh();\n\n        $this->set('page_url.stateless_setup', $this->bootstrap->get_settings_page_url('?page=stateless-setup'));\n        $this->set('page_url.stateless_settings', $this->bootstrap->get_settings_page_url('?page=stateless-settings'));\n\n        /** Register options */\n        add_action( 'init', array( $this, 'init' ), 3 );\n        // apply wildcard to root dir.\n        add_filter( 'wp_stateless_handle_root_dir', array( $this, 'root_dir_wildcards' ), 10, 3);\n\n        // Parse root dir by wildcards\n        add_filter( 'wp_stateless_unhandle_root_dir', array( $this, 'parse_root_dir_wildcards' ), 10, 3);\n\n        $site_url = parse_url( site_url() );\n        $site_url['path'] = isset($site_url['path']) ? $site_url['path'] : '';\n        $this->wildcards = array(\n          'sites'         => [\n            'sites',\n            __(\"sites\", $this->bootstrap->domain),\n            __(\"Sites uses for multisite.\", $this->bootstrap->domain),\n          ],\n          '%site_id%'         => [\n            get_current_blog_id(),\n            __(\"site id\", $this->bootstrap->domain),\n            __(\"Site ID, for example 1.\", $this->bootstrap->domain),\n          ],\n          '%site_url%'        => [\n            trim( $site_url['host'] . $site_url['path'], '/ ' ),\n            __(\"site url\", $this->bootstrap->domain),\n            __(\"Site URL, for example example.com/site-1.\", $this->bootstrap->domain),\n          ],\n          '%site_url_host%'   => [\n            trim( $site_url['host'], '/ ' ),\n            __(\"host name\", $this->bootstrap->domain),\n            __(\"Host name, for example example.com.\", $this->bootstrap->domain),\n          ],\n          '%site_url_path%'   => [\n            trim( $site_url['path'], '/ ' ),\n            __(\"site path\", $this->bootstrap->domain),\n            __(\"Site path, for example site-1.\", $this->bootstrap->domain),\n          ],\n          '%date_year/date_month%' => [\n            date('Y').'/'.date('m'),\n            __(\"year and monthnum\", $this->bootstrap->domain),\n            __(\"The year of the post, four digits, for example 2004. Month of the year, for example 05\", $this->bootstrap->domain),\n            \"\\d{4}\\/\\d{2}\"\n          ]\n        );\n      }\n\n      /**\n       * Init\n       */\n      public function init(){\n        $this->save_media_settings();\n\n        add_action('admin_menu', array( $this, 'admin_menu' ));\n        /**\n         * Manage specific Network Settings\n         */\n        if( is_network_admin() ) {\n          add_action( 'network_admin_menu', array( $this, 'network_admin_menu' ));\n        }\n\n      }\n\n      /**\n       * Refresh settings\n       */\n      public function refresh() {\n        $this->set( \"sm.readonly\", []);\n        $google_app_key_file = getenv('GOOGLE_APPLICATION_CREDENTIALS') ?: getenv('GOOGLE_APPLICATION_CREDENTIALS');\n\n        foreach ($this->settings as $option => $array) {\n          $value    = '';\n          $_option  = 'sm_' . $option;\n          $constant = $array[0]; // Constant name\n          $default  = is_array($array[1]) ? $array[1] : array($array[1], $array[1]); // Default value\n\n          // Getting settings\n          $value = get_option($_option, $default[0]);\n\n          if ($option == 'body_rewrite_types' && empty($value) && !is_multisite()) {\n            $value = $default[0];\n          }\n\n          if ($option == 'hashify_file_name' && in_array($this->get(\"sm.mode\"), array( 'stateless', 'ephemeral' ) )) {\n            $value = true;\n          }\n\n          // If constant is set then override by constant\n          if(is_array($constant)){\n            foreach($constant as $old_const => $new_const){\n              if(defined($new_const)){\n                $value = constant($new_const);\n                $this->set( \"sm.readonly.{$option}\", \"constant\" );\n                break;\n              }\n              if(is_string($old_const) && defined($old_const)){\n                $value = constant($old_const);\n                $this->bootstrap->errors->add( array(\n                  'key' => $new_const,\n                  'title' => sprintf( __( \"%s: Deprecated Notice (%s)\", $this->bootstrap->domain ), $this->bootstrap->name, $new_const ),\n                  'message' => sprintf(__(\"<i>%s</i> constant is deprecated, please use <i>%s</i> instead.\", $this->bootstrap->domain), $old_const, $new_const),\n                ), 'notice' );\n                $this->set( \"sm.readonly.{$option}\", \"constant\" );\n                break;\n              }\n            }\n          }\n          elseif(defined($constant)){\n            $value = constant($constant);\n            $this->set( \"sm.readonly.{$option}\", \"constant\" );\n          }\n\n          // Getting network settings\n          if(is_multisite() && $option != 'organize_media' && !$this->get( \"sm.readonly.{$option}\")){\n\n            $network = get_site_option( $_option, $default[1] );\n            // If network settings available then override by network settings.\n            if($network || is_network_admin()){\n              $value = $network;\n              if(!is_network_admin())\n                $this->set( \"sm.readonly.{$option}\", \"network\" );\n            }\n\n          }\n\n          // Converting to string true false for angular.\n          if(is_bool($value)){\n            $value = $value === true ? \"true\" : \"false\";\n          }\n\n          $this->set( \"sm.$option\", $value);\n        }\n\n        // Network only settings, to hide settings page\n        foreach ($this->network_only_settings as $option => $array) {\n          $value    = '';\n          $_option  = 'sm_' . $option;\n          $constant = $array[0]; // Constant name\n          $default  = $array[1]; // Default value\n\n          // If constant is set then override by constant\n          if(is_array($constant)){\n            foreach($constant as $old_const => $new_const){\n              if(defined($new_const)){\n                $value = constant($new_const);\n                break;\n              }\n              if(is_string($old_const) && defined($old_const)){\n                $value = constant($old_const);\n                trigger_error(__(sprintf(\"<i>%s</i> constant is deprecated, please use <i>%s</i> instead.\", $old_const, $new_const)), E_USER_WARNING);\n                break;\n              }\n            }\n          }\n          elseif(defined($constant)){\n            $value = constant($constant);\n          }\n          // Getting network settings\n          elseif(is_multisite()){\n            $value = get_site_option( $_option, $default );\n          }\n\n          // Converting to string true false for angular.\n          if(is_bool($value)){\n            $value = $value === true ? \"true\" : \"false\";\n          }\n\n          $this->set( \"sm.$option\", $value);\n        }\n\n        /**\n         * JSON key file path\n         */\n        /* Use constant value for JSON key file path, if set. */\n        if (defined('WP_STATELESS_MEDIA_KEY_FILE_PATH') || $google_app_key_file !== false) {\n          /* Maybe fix the path to p12 file. */\n          $key_file_path = (defined('WP_STATELESS_MEDIA_KEY_FILE_PATH')) ? WP_STATELESS_MEDIA_KEY_FILE_PATH : $google_app_key_file;\n\n          if( !empty( $key_file_path ) ) {\n            $upload_dir = wp_upload_dir();\n            /* Check if file exists */\n            switch( true ) {\n              /* Determine if default path is correct */\n              case (file_exists($key_file_path)):\n                /* Path is correct. Do nothing */\n                break;\n              /* Look using WP root. */\n              case (file_exists( ABSPATH . $key_file_path ) ):\n                $key_file_path = ABSPATH . $key_file_path;\n                break;\n              /* Look in wp-content dir */\n              case (file_exists( WP_CONTENT_DIR . $key_file_path ) ):\n                $key_file_path = WP_CONTENT_DIR . $key_file_path;\n                break;\n              /* Look in uploads dir */\n              case (file_exists( wp_normalize_path( $upload_dir[ 'basedir' ] ) . '/' . $key_file_path ) ):\n                $key_file_path = wp_normalize_path( $upload_dir[ 'basedir' ] ) . '/' . $key_file_path;\n                break;\n              /* Look using Plugin root */\n              case (file_exists($this->bootstrap->path( $key_file_path, 'dir') ) ):\n                $key_file_path = $this->bootstrap->path( $key_file_path, 'dir' );\n                break;\n\n            }\n            if(is_readable($key_file_path)) {\n              $this->set( 'sm.key_json', file_get_contents($key_file_path) );\n              if(defined('WP_STATELESS_MEDIA_KEY_FILE_PATH'))\n                $this->set( \"sm.readonly.key_json\", \"constant\" );\n              else\n                $this->set(\"sm.readonly.key_json\", \"environment\");\n            }\n          }\n        }\n\n        $this->set( 'sm.strings', $this->strings );\n      }\n\n      /**\n       * Remove settings\n       * @param bool $network\n       */\n      public function reset($network = false) {\n        foreach ($this->settings as $option => $array) {\n          if($option == 'organize_media')\n            continue;\n          $_option = 'sm_' . $option;\n\n          if($network && current_user_can('manage_network')){\n            delete_site_option($_option);\n            delete_option($_option);\n          }\n          else{\n            delete_option($_option);\n          }\n        }\n\n        foreach ($this->network_only_settings as $option => $array) {\n          $_option = 'sm_' . $option;\n          if($network && current_user_can('manage_network')){\n            delete_site_option($_option);\n            delete_option($_option);\n          }\n        }\n\n        $this->set('sm', []);\n        $this->refresh();\n      }\n\n      /**\n       * Replacing wildcards with real values\n       * @param $root_dir\n       * @param bool $regex\n       * @param array $current_values\n       * @return mixed|null|string|string[]\n       *\n       */\n      public function root_dir_wildcards( $root_dir, $regex = false, $current_values = [] ) {\n\n        $not_allowed_char = '/[^A-Za-z0-9\\/_.\\.\\-]/';\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n\n        if($regex){\n          $root_dir = preg_quote($root_dir);\n          $not_allowed_char = '/[^A-Za-z0-9\\/_.\\.\\-\\\\\\\\{}]/';\n        }\n\n        if ( is_array( $wildcards ) && !empty( $wildcards ) ) {\n          foreach ($wildcards as $wildcard => $values) {\n            if (!empty($wildcard)) {\n              $replace = $values[0];\n              if($regex){\n                $replace = isset($values[3]) ? $values[3] : preg_quote($values[0]);\n              }\n              if ( isset($current_values[$wildcard]) ) {\n                $replace = $current_values[$wildcard];\n              }\n              $root_dir = str_replace($wildcard, $replace, $root_dir);\n            }\n          }\n        }\n\n        //removing all special chars except slash\n        $root_dir = preg_replace($not_allowed_char, '', $root_dir);\n        $root_dir = preg_replace('/(\\/+)/', '/', $root_dir);\n        $root_dir = trim( $root_dir, '/ ' ); // Remove any forward slash and empty space.\n\n        return $root_dir;\n      }\n\n\n      /**\n       * Parse path by wildcards and return array ('wildcard' => 'value')\n       * The perpose of this filter is to return Y/M or other dynamic fields from the file path.\n       * For now only Y/M is dynamic. We will get it via using regex.\n       * @param $path\n       * @return array\n       */\n      public function parse_root_dir_wildcards ( $path ) {\n        $result = [];\n\n        /**\n         * removing GS host from path\n         */\n        $gs_url =  $this->bootstrap->get_gs_host();\n        if( 0 === strpos( $path, $gs_url . '/' ) ) {\n          $path = substr( $path, strlen( $gs_url . '/' ) );\n        }\n\n        /**\n         * removing filename and last slash\n         */\n        $path = untrailingslashit( str_replace(basename($path), '', $path) );\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n\n        /**\n         * Checking if a wildcard have regex field in it.\n         * Then return the matching value using regex.\n         */\n        foreach ($wildcards as $key => $value) {\n          if(isset($value[3])){\n            if(preg_match(\"@\" . $value[3] . \"@\", $path, $matches)){\n              $result[$key] = $matches[0];\n            }\n          }\n        }\n\n        return $result;\n      }\n\n\n\n      /**\n       * Add menu options\n       */\n      public function admin_menu() {\n        $key_json = $this->get('sm.key_json');\n        if($this->get('sm.hide_setup_assistant') != 'true' && empty($key_json) ){\n          $this->setup_wizard_ui = add_media_page( __( 'Stateless Setup', $this->bootstrap->domain ), __( 'Stateless Setup', $this->bootstrap->domain ), 'manage_options', 'stateless-setup', array($this, 'setup_wizard_interface') );\n        }\n\n        if($this->get('sm.hide_settings_panel') != 'true'){\n          $this->stateless_settings = add_media_page( __( 'Stateless Settings', $this->bootstrap->domain ), __( 'Stateless Settings', $this->bootstrap->domain ), 'manage_options', 'stateless-settings', array($this, 'settings_interface') );\n        }\n      }\n\n      /**\n       * Add menu options\n       * @param $slug\n       */\n      public function network_admin_menu($slug) {\n        $this->setup_wizard_ui = add_submenu_page( 'settings.php', __( 'Stateless Setup', $this->bootstrap->domain ), __( 'Stateless Setup', $this->bootstrap->domain ), 'manage_options', 'stateless-setup', array($this, 'setup_wizard_interface') );\n        $this->stateless_settings = add_submenu_page( 'settings.php', __( 'Stateless Settings', $this->bootstrap->domain ), __( 'Stateless Settings', $this->bootstrap->domain ), 'manage_options', 'stateless-settings', array($this, 'settings_interface') );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function settings_interface() {\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n        $wildcard_year_month = '%date_year/date_month%';\n        $root_dir = $this->get( 'sm.root_dir' );\n\n        $use_year_month = (strpos($root_dir, $wildcard_year_month) !== false) ?: false;\n\n        /**\n         * removing year/month wildcard\n         */\n        if ($use_year_month) {\n          $root_dir = str_replace($wildcard_year_month, '%YM%', $root_dir);\n        }\n\n        /**\n         * preparing array with wildcards\n         */\n        $root_dir_values = explode('/', $root_dir);\n\n        /**\n         * adding year/month wildcard\n         */\n        if ($use_year_month) {\n          if ( !empty($root_dir_values) ) {\n            foreach( $root_dir_values as $k=>$root_dir_value ) {\n              if ( $root_dir_value == '%YM%' ) {\n                $root_dir_values[$k] = $wildcard_year_month;\n              }\n            }\n          } else {\n            $root_dir_values[] = $wildcard_year_month;\n          }\n        }\n\n        /**\n         * first slash\n         */\n        array_unshift($root_dir_values , '/');\n\n        /**\n         * removing empty values\n         */\n        $root_dir_values = array_filter($root_dir_values);\n\n        /**\n         * merging user's wildcards with default values\n         */\n        if (!empty($root_dir_values)) {\n          $wildcards = array_merge(array_flip($root_dir_values), $wildcards);\n        }\n\n        include $this->bootstrap->path( '/static/views/settings_interface.php', 'dir' );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function regenerate_interface() {\n        include $this->bootstrap->path( '/static/views/regenerate_interface.php', 'dir' );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function setup_wizard_interface() {\n        include ud_get_stateless_media()->path( '/static/views/setup_wizard_interface.php', 'dir' );\n      }\n\n      /**\n       * Handles saving SM data.\n       *\n       * @author alim@UD\n       */\n      public function save_media_settings(){\n        if(isset($_POST['action']) && $_POST['action'] == 'stateless_settings' && wp_verify_nonce( $_POST['_smnonce'], 'wp-stateless-settings' )){\n\n          $settings = apply_filters('stateless::settings::save', sanitize_text_field($_POST['sm']));\n          $root_dir_value = false;\n\n          foreach ( $settings as $name => $value ) {\n\n            /**\n             * root_dir settings\n             */\n            if ( 'root_dir' == $name && is_array($value) ) {\n              //managed in WP-Stateless settings (via Bucket Folder control)\n              if ( in_array('%date_year/date_month%', $value)) {\n                update_option( 'uploads_use_yearmonth_folders', '1'  );\n              } else {\n                update_option( 'uploads_use_yearmonth_folders', '0'  );\n              }\n\n              /**\n               * preparing path from tags\n               */\n              $value = implode('/', $value);\n              $root_dir_value = true;\n            }\n\n            $option = 'sm_'. $name;\n\n            if($name == 'organize_media'){\n              $option = 'uploads_use_yearmonth_folders';\n            }\n            elseif($name == 'key_json'){\n              $value = stripslashes($value);\n            }\n\n            // Be sure to cleanup values before saving\n            $value = trim($value);\n\n            if(is_network_admin()){\n              update_site_option( $option, $value );\n            }\n            else{\n              update_option( $option, $value );\n            }\n          }\n\n          if ( !$root_dir_value ) {\n            if(is_network_admin()){\n              update_site_option( 'sm_root_dir', '' );\n            }\n            else{\n              update_option( 'sm_root_dir', '' );\n            }\n          }\n\n          $this->bootstrap->flush_transients();\n          $this->refresh();\n        }\n      }\n\n      /**\n       * Wrapper for setting value.\n       * @param string $key\n       * @param bool $value\n       * @param bool $bypass_validation\n       * @return \\UsabilityDynamics\\Settings\n       */\n      public function set( $key = '', $value = false, $bypass_validation = false ) {\n        return parent::set( $key, $value, $bypass_validation );\n      }\n\n    }\n\n  }\n\n}\n"], "fixing_code": ["<?php\n/**\n * Settings management and UI\n *\n * @since 0.2.0\n */\nnamespace wpCloud\\StatelessMedia {\n\n  if( !class_exists( 'wpCloud\\StatelessMedia\\Settings' ) ) {\n\n    final class Settings extends \\UsabilityDynamics\\Settings {\n\n      /**\n       * @var false|null|string\n       */\n      public $setup_wizard_ui = null;\n\n      /**\n       * @var Array\n       */\n      public $wildcards = array();\n\n      /**\n       * @var false|null|string\n       */\n      public $stateless_settings = null;\n\n      /**\n       * Instance of\n       *  - ud_get_stateless_media\n       *  - wpCloud\\StatelessMedia\\Bootstrap\n       * @var false|null|string\n       */\n      public $bootstrap = null;\n\n      private $settings = array(\n        'mode'                   => array('WP_STATELESS_MEDIA_MODE', 'ephemeral'),\n        'body_rewrite'           => array('WP_STATELESS_MEDIA_BODY_REWRITE', 'false'),\n        'body_rewrite_types'     => array('WP_STATELESS_MEDIA_BODY_REWRITE_TYPES', 'jpg jpeg png gif pdf'),\n        'bucket'                 => array('WP_STATELESS_MEDIA_BUCKET', ''),\n        'root_dir'               => array('WP_STATELESS_MEDIA_ROOT_DIR', ['/%date_year/date_month%/', '/sites/%site_id%/%date_year/date_month%/']),\n        'key_json'               => array('WP_STATELESS_MEDIA_JSON_KEY', ''),\n        'cache_control'          => array('WP_STATELESS_MEDIA_CACHE_CONTROL', ''),\n        'delete_remote'          => array('WP_STATELESS_MEDIA_DELETE_REMOTE', 'true'),\n        'custom_domain'          => array('WP_STATELESS_MEDIA_CUSTOM_DOMAIN', ''),\n        'organize_media'         => array('', 'true'),\n        'hashify_file_name'      => array(['WP_STATELESS_MEDIA_HASH_FILENAME' => 'WP_STATELESS_MEDIA_CACHE_BUSTING'], 'false'),\n      );\n\n      private $network_only_settings = array(\n        'hide_settings_panel'   => array('WP_STATELESS_MEDIA_HIDE_SETTINGS_PANEL', false),\n        'hide_setup_assistant'  => array('WP_STATELESS_MEDIA_HIDE_SETUP_ASSISTANT', false),\n      );\n\n      private $strings = array(\n        'network' => 'Currently configured via Network Settings.',\n        'constant' => 'Currently configured via a constant.',\n        'environment' => 'Currently configured via an environment variable.',\n      );\n\n      /**\n       *\n       * Settings constructor.\n       * @param null $bootstrap\n       */\n      public function __construct($bootstrap = null) {\n        $this->bootstrap = $bootstrap ? $bootstrap : ud_get_stateless_media();\n\n\n        /* Add 'Settings' link for SM plugin on plugins page. */\n        $_basename = plugin_basename( $this->bootstrap->boot_file );\n\n        parent::__construct( array(\n          'store'       => 'options',\n          'format'      => 'json',\n          'data'        => array(\n            'sm' => array()\n          )\n        ));\n\n        // Setting sm variable\n        $this->refresh();\n\n        $this->set('page_url.stateless_setup', $this->bootstrap->get_settings_page_url('?page=stateless-setup'));\n        $this->set('page_url.stateless_settings', $this->bootstrap->get_settings_page_url('?page=stateless-settings'));\n\n        /** Register options */\n        add_action( 'init', array( $this, 'init' ), 3 );\n        // apply wildcard to root dir.\n        add_filter( 'wp_stateless_handle_root_dir', array( $this, 'root_dir_wildcards' ), 10, 3);\n\n        // Parse root dir by wildcards\n        add_filter( 'wp_stateless_unhandle_root_dir', array( $this, 'parse_root_dir_wildcards' ), 10, 3);\n\n        $site_url = parse_url( site_url() );\n        $site_url['path'] = isset($site_url['path']) ? $site_url['path'] : '';\n        $this->wildcards = array(\n          'sites'         => [\n            'sites',\n            __(\"sites\", $this->bootstrap->domain),\n            __(\"Sites uses for multisite.\", $this->bootstrap->domain),\n          ],\n          '%site_id%'         => [\n            get_current_blog_id(),\n            __(\"site id\", $this->bootstrap->domain),\n            __(\"Site ID, for example 1.\", $this->bootstrap->domain),\n          ],\n          '%site_url%'        => [\n            trim( $site_url['host'] . $site_url['path'], '/ ' ),\n            __(\"site url\", $this->bootstrap->domain),\n            __(\"Site URL, for example example.com/site-1.\", $this->bootstrap->domain),\n          ],\n          '%site_url_host%'   => [\n            trim( $site_url['host'], '/ ' ),\n            __(\"host name\", $this->bootstrap->domain),\n            __(\"Host name, for example example.com.\", $this->bootstrap->domain),\n          ],\n          '%site_url_path%'   => [\n            trim( $site_url['path'], '/ ' ),\n            __(\"site path\", $this->bootstrap->domain),\n            __(\"Site path, for example site-1.\", $this->bootstrap->domain),\n          ],\n          '%date_year/date_month%' => [\n            date('Y').'/'.date('m'),\n            __(\"year and monthnum\", $this->bootstrap->domain),\n            __(\"The year of the post, four digits, for example 2004. Month of the year, for example 05\", $this->bootstrap->domain),\n            \"\\d{4}\\/\\d{2}\"\n          ]\n        );\n      }\n\n      /**\n       * Init\n       */\n      public function init(){\n        $this->save_media_settings();\n\n        add_action('admin_menu', array( $this, 'admin_menu' ));\n        /**\n         * Manage specific Network Settings\n         */\n        if( is_network_admin() ) {\n          add_action( 'network_admin_menu', array( $this, 'network_admin_menu' ));\n        }\n\n      }\n\n      /**\n       * Refresh settings\n       */\n      public function refresh() {\n        $this->set( \"sm.readonly\", []);\n        $google_app_key_file = getenv('GOOGLE_APPLICATION_CREDENTIALS') ?: getenv('GOOGLE_APPLICATION_CREDENTIALS');\n\n        foreach ($this->settings as $option => $array) {\n          $value    = '';\n          $_option  = 'sm_' . $option;\n          $constant = $array[0]; // Constant name\n          $default  = is_array($array[1]) ? $array[1] : array($array[1], $array[1]); // Default value\n\n          // Getting settings\n          $value = get_option($_option, $default[0]);\n\n          if ($option == 'body_rewrite_types' && empty($value) && !is_multisite()) {\n            $value = $default[0];\n          }\n\n          if ($option == 'hashify_file_name' && in_array($this->get(\"sm.mode\"), array( 'stateless', 'ephemeral' ) )) {\n            $value = true;\n          }\n\n          // If constant is set then override by constant\n          if(is_array($constant)){\n            foreach($constant as $old_const => $new_const){\n              if(defined($new_const)){\n                $value = constant($new_const);\n                $this->set( \"sm.readonly.{$option}\", \"constant\" );\n                break;\n              }\n              if(is_string($old_const) && defined($old_const)){\n                $value = constant($old_const);\n                $this->bootstrap->errors->add( array(\n                  'key' => $new_const,\n                  'title' => sprintf( __( \"%s: Deprecated Notice (%s)\", $this->bootstrap->domain ), $this->bootstrap->name, $new_const ),\n                  'message' => sprintf(__(\"<i>%s</i> constant is deprecated, please use <i>%s</i> instead.\", $this->bootstrap->domain), $old_const, $new_const),\n                ), 'notice' );\n                $this->set( \"sm.readonly.{$option}\", \"constant\" );\n                break;\n              }\n            }\n          }\n          elseif(defined($constant)){\n            $value = constant($constant);\n            $this->set( \"sm.readonly.{$option}\", \"constant\" );\n          }\n\n          // Getting network settings\n          if(is_multisite() && $option != 'organize_media' && !$this->get( \"sm.readonly.{$option}\")){\n\n            $network = get_site_option( $_option, $default[1] );\n            // If network settings available then override by network settings.\n            if($network || is_network_admin()){\n              $value = $network;\n              if(!is_network_admin())\n                $this->set( \"sm.readonly.{$option}\", \"network\" );\n            }\n\n          }\n\n          // Converting to string true false for angular.\n          if(is_bool($value)){\n            $value = $value === true ? \"true\" : \"false\";\n          }\n\n          $this->set( \"sm.$option\", $value);\n        }\n\n        // Network only settings, to hide settings page\n        foreach ($this->network_only_settings as $option => $array) {\n          $value    = '';\n          $_option  = 'sm_' . $option;\n          $constant = $array[0]; // Constant name\n          $default  = $array[1]; // Default value\n\n          // If constant is set then override by constant\n          if(is_array($constant)){\n            foreach($constant as $old_const => $new_const){\n              if(defined($new_const)){\n                $value = constant($new_const);\n                break;\n              }\n              if(is_string($old_const) && defined($old_const)){\n                $value = constant($old_const);\n                trigger_error(__(sprintf(\"<i>%s</i> constant is deprecated, please use <i>%s</i> instead.\", $old_const, $new_const)), E_USER_WARNING);\n                break;\n              }\n            }\n          }\n          elseif(defined($constant)){\n            $value = constant($constant);\n          }\n          // Getting network settings\n          elseif(is_multisite()){\n            $value = get_site_option( $_option, $default );\n          }\n\n          // Converting to string true false for angular.\n          if(is_bool($value)){\n            $value = $value === true ? \"true\" : \"false\";\n          }\n\n          $this->set( \"sm.$option\", $value);\n        }\n\n        /**\n         * JSON key file path\n         */\n        /* Use constant value for JSON key file path, if set. */\n        if (defined('WP_STATELESS_MEDIA_KEY_FILE_PATH') || $google_app_key_file !== false) {\n          /* Maybe fix the path to p12 file. */\n          $key_file_path = (defined('WP_STATELESS_MEDIA_KEY_FILE_PATH')) ? WP_STATELESS_MEDIA_KEY_FILE_PATH : $google_app_key_file;\n\n          if( !empty( $key_file_path ) ) {\n            $upload_dir = wp_upload_dir();\n            /* Check if file exists */\n            switch( true ) {\n              /* Determine if default path is correct */\n              case (file_exists($key_file_path)):\n                /* Path is correct. Do nothing */\n                break;\n              /* Look using WP root. */\n              case (file_exists( ABSPATH . $key_file_path ) ):\n                $key_file_path = ABSPATH . $key_file_path;\n                break;\n              /* Look in wp-content dir */\n              case (file_exists( WP_CONTENT_DIR . $key_file_path ) ):\n                $key_file_path = WP_CONTENT_DIR . $key_file_path;\n                break;\n              /* Look in uploads dir */\n              case (file_exists( wp_normalize_path( $upload_dir[ 'basedir' ] ) . '/' . $key_file_path ) ):\n                $key_file_path = wp_normalize_path( $upload_dir[ 'basedir' ] ) . '/' . $key_file_path;\n                break;\n              /* Look using Plugin root */\n              case (file_exists($this->bootstrap->path( $key_file_path, 'dir') ) ):\n                $key_file_path = $this->bootstrap->path( $key_file_path, 'dir' );\n                break;\n\n            }\n            if(is_readable($key_file_path)) {\n              $this->set( 'sm.key_json', file_get_contents($key_file_path) );\n              if(defined('WP_STATELESS_MEDIA_KEY_FILE_PATH'))\n                $this->set( \"sm.readonly.key_json\", \"constant\" );\n              else\n                $this->set(\"sm.readonly.key_json\", \"environment\");\n            }\n          }\n        }\n\n        $this->set( 'sm.strings', $this->strings );\n      }\n\n      /**\n       * Remove settings\n       * @param bool $network\n       */\n      public function reset($network = false) {\n        foreach ($this->settings as $option => $array) {\n          if($option == 'organize_media')\n            continue;\n          $_option = 'sm_' . $option;\n\n          if($network && current_user_can('manage_network')){\n            delete_site_option($_option);\n            delete_option($_option);\n          }\n          else{\n            delete_option($_option);\n          }\n        }\n\n        foreach ($this->network_only_settings as $option => $array) {\n          $_option = 'sm_' . $option;\n          if($network && current_user_can('manage_network')){\n            delete_site_option($_option);\n            delete_option($_option);\n          }\n        }\n\n        $this->set('sm', []);\n        $this->refresh();\n      }\n\n      /**\n       * Replacing wildcards with real values\n       * @param $root_dir\n       * @param bool $regex\n       * @param array $current_values\n       * @return mixed|null|string|string[]\n       *\n       */\n      public function root_dir_wildcards( $root_dir, $regex = false, $current_values = [] ) {\n\n        $not_allowed_char = '/[^A-Za-z0-9\\/_.\\.\\-]/';\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n\n        if($regex){\n          $root_dir = preg_quote($root_dir);\n          $not_allowed_char = '/[^A-Za-z0-9\\/_.\\.\\-\\\\\\\\{}]/';\n        }\n\n        if ( is_array( $wildcards ) && !empty( $wildcards ) ) {\n          foreach ($wildcards as $wildcard => $values) {\n            if (!empty($wildcard)) {\n              $replace = $values[0];\n              if($regex){\n                $replace = isset($values[3]) ? $values[3] : preg_quote($values[0]);\n              }\n              if ( isset($current_values[$wildcard]) ) {\n                $replace = $current_values[$wildcard];\n              }\n              $root_dir = str_replace($wildcard, $replace, $root_dir);\n            }\n          }\n        }\n\n        //removing all special chars except slash\n        $root_dir = preg_replace($not_allowed_char, '', $root_dir);\n        $root_dir = preg_replace('/(\\/+)/', '/', $root_dir);\n        $root_dir = trim( $root_dir, '/ ' ); // Remove any forward slash and empty space.\n\n        return $root_dir;\n      }\n\n\n      /**\n       * Parse path by wildcards and return array ('wildcard' => 'value')\n       * The perpose of this filter is to return Y/M or other dynamic fields from the file path.\n       * For now only Y/M is dynamic. We will get it via using regex.\n       * @param $path\n       * @return array\n       */\n      public function parse_root_dir_wildcards ( $path ) {\n        $result = [];\n\n        /**\n         * removing GS host from path\n         */\n        $gs_url =  $this->bootstrap->get_gs_host();\n        if( 0 === strpos( $path, $gs_url . '/' ) ) {\n          $path = substr( $path, strlen( $gs_url . '/' ) );\n        }\n\n        /**\n         * removing filename and last slash\n         */\n        $path = untrailingslashit( str_replace(basename($path), '', $path) );\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n\n        /**\n         * Checking if a wildcard have regex field in it.\n         * Then return the matching value using regex.\n         */\n        foreach ($wildcards as $key => $value) {\n          if(isset($value[3])){\n            if(preg_match(\"@\" . $value[3] . \"@\", $path, $matches)){\n              $result[$key] = $matches[0];\n            }\n          }\n        }\n\n        return $result;\n      }\n\n\n\n      /**\n       * Add menu options\n       */\n      public function admin_menu() {\n        $key_json = $this->get('sm.key_json');\n        if($this->get('sm.hide_setup_assistant') != 'true' && empty($key_json) ){\n          $this->setup_wizard_ui = add_media_page( __( 'Stateless Setup', $this->bootstrap->domain ), __( 'Stateless Setup', $this->bootstrap->domain ), 'manage_options', 'stateless-setup', array($this, 'setup_wizard_interface') );\n        }\n\n        if($this->get('sm.hide_settings_panel') != 'true'){\n          $this->stateless_settings = add_media_page( __( 'Stateless Settings', $this->bootstrap->domain ), __( 'Stateless Settings', $this->bootstrap->domain ), 'manage_options', 'stateless-settings', array($this, 'settings_interface') );\n        }\n      }\n\n      /**\n       * Add menu options\n       * @param $slug\n       */\n      public function network_admin_menu($slug) {\n        $this->setup_wizard_ui = add_submenu_page( 'settings.php', __( 'Stateless Setup', $this->bootstrap->domain ), __( 'Stateless Setup', $this->bootstrap->domain ), 'manage_options', 'stateless-setup', array($this, 'setup_wizard_interface') );\n        $this->stateless_settings = add_submenu_page( 'settings.php', __( 'Stateless Settings', $this->bootstrap->domain ), __( 'Stateless Settings', $this->bootstrap->domain ), 'manage_options', 'stateless-settings', array($this, 'settings_interface') );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function settings_interface() {\n        $wildcards = apply_filters('wp_stateless_root_dir_wildcard', $this->wildcards);\n        $wildcard_year_month = '%date_year/date_month%';\n        $root_dir = $this->get( 'sm.root_dir' );\n\n        $use_year_month = (strpos($root_dir, $wildcard_year_month) !== false) ?: false;\n\n        /**\n         * removing year/month wildcard\n         */\n        if ($use_year_month) {\n          $root_dir = str_replace($wildcard_year_month, '%YM%', $root_dir);\n        }\n\n        /**\n         * preparing array with wildcards\n         */\n        $root_dir_values = explode('/', $root_dir);\n\n        /**\n         * adding year/month wildcard\n         */\n        if ($use_year_month) {\n          if ( !empty($root_dir_values) ) {\n            foreach( $root_dir_values as $k=>$root_dir_value ) {\n              if ( $root_dir_value == '%YM%' ) {\n                $root_dir_values[$k] = $wildcard_year_month;\n              }\n            }\n          } else {\n            $root_dir_values[] = $wildcard_year_month;\n          }\n        }\n\n        /**\n         * first slash\n         */\n        array_unshift($root_dir_values , '/');\n\n        /**\n         * removing empty values\n         */\n        $root_dir_values = array_filter($root_dir_values);\n\n        /**\n         * merging user's wildcards with default values\n         */\n        if (!empty($root_dir_values)) {\n          $wildcards = array_merge(array_flip($root_dir_values), $wildcards);\n        }\n\n        include $this->bootstrap->path( '/static/views/settings_interface.php', 'dir' );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function regenerate_interface() {\n        include $this->bootstrap->path( '/static/views/regenerate_interface.php', 'dir' );\n      }\n\n      /**\n       * Draw interface\n       */\n      public function setup_wizard_interface() {\n        include ud_get_stateless_media()->path( '/static/views/setup_wizard_interface.php', 'dir' );\n      }\n\n      /**\n       * Handles saving SM data.\n       *\n       * @author alim@UD\n       */\n      public function save_media_settings(){\n        if(isset($_POST['action']) && $_POST['action'] == 'stateless_settings' && wp_verify_nonce( $_POST['_smnonce'], 'wp-stateless-settings' )){\n\n          $settings = apply_filters('stateless::settings::save', $_POST['sm']);\n          $root_dir_value = false;\n\n          foreach ( $settings as $name => $value ) {\n            /**\n             * Sanitize POST data\n             */\n            $value = sanitize_text_field($value);\n            /**\n             * root_dir settings\n             */\n            if ( 'root_dir' == $name && is_array($value) ) {\n              //managed in WP-Stateless settings (via Bucket Folder control)\n              if ( in_array('%date_year/date_month%', $value)) {\n                update_option( 'uploads_use_yearmonth_folders', '1'  );\n              } else {\n                update_option( 'uploads_use_yearmonth_folders', '0'  );\n              }\n\n              /**\n               * preparing path from tags\n               */\n              $value = implode('/', $value);\n              $root_dir_value = true;\n            }\n\n            $option = 'sm_'. $name;\n\n            if($name == 'organize_media'){\n              $option = 'uploads_use_yearmonth_folders';\n            }\n            elseif($name == 'key_json'){\n              $value = stripslashes($value);\n            }\n\n            // Be sure to cleanup values before saving\n            $value = trim($value);\n\n            if(is_network_admin()){\n              update_site_option( $option, $value );\n            }\n            else{\n              update_option( $option, $value );\n            }\n          }\n\n          if ( !$root_dir_value ) {\n            if(is_network_admin()){\n              update_site_option( 'sm_root_dir', '' );\n            }\n            else{\n              update_option( 'sm_root_dir', '' );\n            }\n          }\n\n          $this->bootstrap->flush_transients();\n          $this->refresh();\n        }\n      }\n\n      /**\n       * Wrapper for setting value.\n       * @param string $key\n       * @param bool $value\n       * @param bool $bypass_validation\n       * @return \\UsabilityDynamics\\Settings\n       */\n      public function set( $key = '', $value = false, $bypass_validation = false ) {\n        return parent::set( $key, $value, $bypass_validation );\n      }\n\n    }\n\n  }\n\n}\n"], "filenames": ["lib/classes/class-settings.php"], "buggy_code_start_loc": [518], "buggy_code_end_loc": [523], "fixing_code_start_loc": [518], "fixing_code_end_loc": [526], "type": "CWE-79", "message": "A vulnerability was found in UDX Stateless Media Plugin 3.1.1. It has been declared as problematic. This vulnerability affects the function setup_wizard_interface of the file lib/classes/class-settings.php. The manipulation of the argument settings leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 3.2.0 is able to address this issue. The name of the patch is 6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a. It is recommended to upgrade the affected component. VDB-220750 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4905", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-13T21:15:13.710", "lastModified": "2023-02-23T15:29:00.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in UDX Stateless Media Plugin 3.1.1. It has been declared as problematic. This vulnerability affects the function setup_wizard_interface of the file lib/classes/class-settings.php. The manipulation of the argument settings leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 3.2.0 is able to address this issue. The name of the patch is 6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a. It is recommended to upgrade the affected component. VDB-220750 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:udx:stateless_media_plugin:3.1.1:*:*:*:*:wordpress:*:*", "matchCriteriaId": "50981405-77C5-4EE9-A29C-E788FFA01F0C"}]}]}], "references": [{"url": "https://github.com/udx/wp-stateless/commit/6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/udx/wp-stateless/pull/630", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://github.com/udx/wp-stateless/releases/tag/3.2.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.220750", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.220750", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/udx/wp-stateless/commit/6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a"}}