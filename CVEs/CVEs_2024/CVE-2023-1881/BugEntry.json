{"buggy_code": ["<?php\n\n\nfunction user_ip()\n{\n    $ipaddress = '127.0.0.1';\n\n    if (isset($_SERVER['HTTP_CF_CONNECTING_IP'])) {\n        $ipaddress = $_SERVER['HTTP_CF_CONNECTING_IP'];\n    }  else if (isset($_SERVER['HTTP_CLIENT_IP'])) {\n        $ipaddress = $_SERVER['HTTP_CLIENT_IP'];\n    } else if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n        $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } else if (isset($_SERVER['HTTP_X_FORWARDED'])) {\n        $ipaddress = $_SERVER['HTTP_X_FORWARDED'];\n    } else if (isset($_SERVER['HTTP_FORWARDED_FOR'])) {\n        $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];\n    } else if (isset($_SERVER['HTTP_FORWARDED'])) {\n        $ipaddress = $_SERVER['HTTP_FORWARDED'];\n    } else if (isset($_SERVER['HTTP_X_CLUSTER_CLIENT_IP'])) {\n        $ipaddress = $_SERVER['HTTP_X_CLUSTER_CLIENT_IP'];\n    } else if (isset($_SERVER['HTTP_X_REAL_IP'])) {\n        $ipaddress = $_SERVER['HTTP_X_REAL_IP'];\n    } else if (isset($_SERVER['REMOTE_ADDR'])) {\n        $ipaddress = $_SERVER['REMOTE_ADDR'];\n    }\n\n    return $ipaddress;\n}\n\n\nif (!defined('MW_USER_IP')) {\n    define('MW_USER_IP', user_ip());\n}\n\n\nfunction forgot_password_url()\n{\n    return app()->user_manager->forgot_password_url();\n}\n\nfunction register_url()\n{\n    return app()->user_manager->register_url();\n}\n\nfunction get_user_by_id($params = false)\n{\n    return app()->user_manager->get_by_id($params);\n}\n\nif (!function_exists('mw_csrf_token')) {\n    function mw_csrf_token($form_name = false)\n    {\n        return app()->user_manager->csrf_token($form_name);\n    }\n}\nfunction csrf_form($form_name = false)\n{\n    return app()->user_manager->csrf_form($form_name);\n}\n\nfunction logout_url()\n{\n    return app()->user_manager->logout_url();\n}\n\nfunction login_url()\n{\n    return app()->user_manager->login_url();\n}\n\nfunction profile_url()\n{\n    return app()->user_manager->profile_url();\n}\n\nfunction session_set($key, $val)\n{\n    return app()->user_manager->session_set($key, $val);\n}\n\nfunction session_append_array($key, $array)\n{\n    $oldArray = session_get($key);\n    if (is_array($oldArray) && !empty($oldArray)) {\n        $newArray = array_merge($oldArray, $array);\n    } else {\n        $newArray = $array;\n    }\n\n    return session_set($key, $newArray);\n}\n\nfunction session_get($name)\n{\n    return app()->user_manager->session_get($name);\n}\n\nfunction session_del($name)\n{\n    return app()->user_manager->session_del($name);\n}\n\nfunction session_end()\n{\n    return app()->user_manager->session_end();\n}\n\nfunction session_all()\n{\n    return app()->user_manager->session_all();\n}\n\nfunction api_login($api_key = false)\n{\n    return app()->user_manager->api_login($api_key);\n}\n\n\nfunction user_social_login($params)\n{\n    return app()->user_manager->social_login($params);\n}\n\n\nfunction logout()\n{\n    return app()->user_manager->logout();\n}\n\nfunction user_register($params)\n{\n    return app()->user_manager->register($params);\n}\n\n\n/**\n * Allows you to save users in the database.\n *\n * By default it have security rules.\n *\n * If you are admin you can save any user in the system;\n *\n * However if you are regular user you must post param id with the current user id;\n *\n * @param  $params\n * @param  $params ['id'] = $user_id; // REQUIRED , you must set the user id.\n *                 For security reasons, to make new user please use user_register() function that requires captcha\n *                 or write your own save_user wrapper function that sets  mw_var('force_save_user',true);\n *                 and pass its params to save_user();\n * @param  $params ['is_active'] = 1; //default is 'n'\n *\n * @usage\n *\n * $upd = array();\n * $upd['id'] = 1;\n * $upd['email'] = $params['new_email'];\n * $upd['password'] = $params['passwordhash'];\n * mw_var('force_save_user', false|true); // if true you want to make new user or foce save ... skips id check and is admin check\n * mw_var('save_user_no_pass_hash', false|true); //if true skips pass hash function and saves password it as is in the request, please hash the password before that or ensure its hashed\n * $s = save_user($upd);\n *\n * @return bool|int\n */\nfunction save_user($params)\n{\n    return app()->user_manager->save($params);\n}\n\n\nfunction delete_user($data)\n{\n    return app()->user_manager->delete($data);\n}\n\n\nfunction social_login_process()\n{\n    return app()->user_manager->social_login_process();\n}\n\n\nfunction user_reset_password_from_link($params)\n{\n    return app()->user_manager->reset_password_from_link($params);\n}\n\n\nfunction user_send_forgot_password($params)\n{\n    return app()->user_manager->send_forgot_password($params);\n}\n\n\nfunction user_make_logged($params)\n{\n    return app()->user_manager->make_logged($params);\n}\n\n\nfunction user_login($params)\n{\n    return app()->user_manager->login($params);\n}\n\n\nfunction is_logged()\n{\n\n    $is = app()->user_manager->is_logged();\n    if (defined('MW_API_CALL')) {\n        app()->event_manager->trigger('mw.user.is_logged');\n    }\n\n    return $is;\n}\n\nfunction user_id()\n{\n    return app()->user_manager->id();\n}\n\nfunction has_access($function_name = '')\n{\n    return app()->user_manager->has_access($function_name);\n}\n\nfunction must_have_access($permission = '')\n{\n    if (!user_can_access($permission)) {\n        $file = debug_backtrace()[0]['file'];\n        mw_error('Permission denied! You dont have access to see this page.');\n    }\n}\n\nfunction only_admin_access()\n{\n    return app()->user_manager->admin_access();\n}\n\nfunction is_admin()\n{\n    if(app()->bound('user_manager')){\n        return app()->user_manager->is_admin();\n    }\n}\n\nfunction is_live_edit()\n{\n    if (!is_admin()) {\n        return false;\n    }\n\n\n    $editModeParam = app()->url_manager->param('editmode');\n    if ($editModeParam == 'n') {\n        return false;\n    }\n\n\n    $editModeParam = app()->url_manager->param('editmode');\n    if ($editModeParam == 'y') {\n        return true;\n    }\n\n    $editModeParam2 = app()->url_manager->param('editmode',true);\n    if ($editModeParam2 == 'y') {\n        return true;\n    }\n\n    if(defined('IN_EDIT') and IN_EDIT){\n        return true;\n    }\n\n    $editModeSession = app()->user_manager->session_get('editmode');\n\n    if ($editModeSession == true and !defined('IN_EDIT')) {\n        define('IN_EDIT', true);\n        return true;\n    }\n\n    return $editModeSession;\n}\n\n/**\n * @function user_name\n * gets the user's FULL name\n *\n * @param        $user_id the id of the user. If false it will use the curent user (you)\n * @param string $mode full|first|last|username\n *                        'full' //prints full name (first +last)\n *                        'first' //prints first name\n *                        'last' //prints last name\n *                        'username' //prints username\n *\n * @return string\n */\nfunction user_name($user_id = false, $mode = 'full')\n{\n    return app()->user_manager->name($user_id, $mode);\n}\n\n\nfunction user_email($user_id = false)\n{\n    return user_name($user_id, $mode = 'email');\n}\n\nfunction user_picture($user_id = false)\n{\n    return app()->user_manager->picture($user_id);\n}\n\n/**\n * @function get_users\n *\n * @param array|bool|string $params array|string;\n * @params $params['username'] string username for user\n * @params $params['email'] string email for user\n *\n *\n * @usage    get_users('email=my_email');\n *\n * @return array of users;\n */\nfunction get_users($params = false)\n{\n    return app()->user_manager->get_all($params);\n}\n\n/**\n * get_user.\n *\n * get_user get the user info from the DB\n *\n * @category users\n *\n * @author   Microweber\n *\n * @link     http://microweber.com\n *\n * @param bool $id\n *\n *\n * @return array\n */\nfunction get_user($id = false)\n{\n    return app()->user_manager->get($id);\n}\n\n\nfunction user_can_access($permission)\n{\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n    return false;\n   // return $user->can($permission);\n}\n\nfunction module_permissions($module)\n{\n\n    return \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n}\n\nfunction user_can_destroy_module($module)\n{\n //   $permissions = \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n   /* if ($user->can($permissions['destroy'])) {\n        return true;\n    }*/\n\n    return false;\n}\n\nfunction user_can_view_module($module)\n{\n\n    //$permissions = \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n /*   if ($user->can($permissions['index'])) {\n        return true;\n    }*/\n\n    return false;\n\n}\n\n\n\nfunction detect_user_id_from_params($params){\n\n    if (!empty($params)) {\n        if (isset($params['username']) || isset($params['email'])) {\n\n            if (isset($params['username']) && $params['username'] != false and filter_var($params['username'], FILTER_VALIDATE_EMAIL)) {\n                $params['email'] = $params['username'];\n            }\n\n            $findUserId = false;\n            $findByUsername = false;\n\n            if (isset($params['username'])) {\n                $findByUsername = \\MicroweberPackages\\User\\Models\\User::where('username', $params['username'])->first();\n            }\n\n            if ($findByUsername) {\n                $findUserId = $findByUsername->id;\n            } else {\n                if (isset($params['email'])) {\n                    $findByEmail = \\MicroweberPackages\\User\\Models\\User::where('email', $params['email'])->first();\n                    if ($findByEmail) {\n                        $findUserId = $findByEmail->id;\n                    }\n                }\n            }\n\n            if (!$findUserId) {\n                return false;\n            }\n\n            return $findUserId;\n        }\n    }\n\n    return false;\n}\n", "<?php\n\nnamespace MicroweberPackages\\SiteStats;\n\n\nuse MicroweberPackages\\SiteStats\\Models\\Browsers;\nuse MicroweberPackages\\SiteStats\\Models\\Geoip;\nuse MicroweberPackages\\SiteStats\\Models\\Log;\nuse MicroweberPackages\\SiteStats\\Models\\Referrers;\nuse MicroweberPackages\\SiteStats\\Models\\ReferrersDomains;\nuse MicroweberPackages\\SiteStats\\Models\\ReferrersPaths;\nuse MicroweberPackages\\SiteStats\\Models\\Sessions;\nuse MicroweberPackages\\SiteStats\\Models\\StatsUrl;\nuse Jenssegers\\Agent\\Agent;\nuse GeoIp2\\Database\\Reader;\n\n\nclass Tracker\n{\n\n    function track()\n    {\n        $track = array();\n        $data = $this->_collect_user_data();\n        $data['updated_at'] = date(\"Y-m-d H:i:s\");\n\n        $track[] = $data;\n\n        return $this->process_buffer($track);\n\n\n    }\n\n    function track_buffered()\n    {\n\n\n        $buffer = cache_get('stats_buffer_visits', 'site_stats');\n        $buffer_skip = cache_get('stats_buffer_timeout', 'site_stats');\n        if (!$buffer_skip) {\n            cache_save('skip', 'stats_buffer_timeout', 'site_stats', 1);\n        }\n        if (!is_array($buffer)) {\n            $buffer = array();\n        }\n\n\n        $data = $this->_collect_user_data();\n\n        $buffer_key = 'stat' . crc32($data['referrer'] . $data['session_id']);\n\n\n        if (!isset($buffer[$buffer_key])) {\n            $data['updated_at'] = date(\"Y-m-d H:i:s\");\n            $buffer[$buffer_key] = $data;\n            cache_save($buffer, 'stats_buffer_visits', 'site_stats');\n        }\n\n\n        if (!$buffer_skip) {\n            return $this->process_buffer();\n        }\n        return true;\n    }\n\n    function process_buffer($track_data = false)\n    {\n\n        if ($track_data != false) {\n            $buffer = $track_data;\n        } else {\n            $buffer = cache_get('stats_buffer_visits', 'site_stats');\n\n        }\n        if (is_array($buffer) and !empty($buffer)) {\n\n            $log = new Log();\n\n            foreach ($buffer as $key => $item) {\n                $browser_id = false;\n                $language = false;\n\n                if (isset($item['language']) and $item['language']) {\n                    $language = $item['language'];\n                }\n                if (isset($item['browser_agent']) and $item['browser_agent']) {\n                    $hash = md5($item['browser_agent']);\n\n                    $browser_data = array(\n                        'browser_agent_hash' => $hash,\n                        'browser_agent' => $item['browser_agent']\n                    );\n\n\n                    $related_data = new Browsers();\n                    $related_data = $related_data->firstOrCreate([\n                        'browser_agent_hash' => $hash\n                    ], array_merge($browser_data, $this->_parse_agent($item['browser_agent'])));\n                    if ($related_data->id) {\n                        $browser_id = $related_data->id;\n                    }\n                }\n\n\n                $session_original_ref_id = false;\n                $ref = false;\n                if (isset($item['referrer']) and $item['referrer']) {\n                    $hash = md5($item['referrer']);\n                    $ref = $item['referrer'];\n                    $related_data = new Referrers();\n                    $is_internal = false;\n                    if (strstr($item['referrer'], site_url())) {\n                        $is_internal = true;\n                    }\n                    $related_data = $related_data->firstOrCreate([\n                        'referrer_hash' => $hash\n                    ], [\n                        'referrer_hash' => $hash,\n                        'referrer_domain_id' => $this->_referrer_domain_id($ref),\n                        'referrer_path_id' => $this->_referrer_path_id($ref),\n                        'is_internal' => $is_internal,\n                        'referrer' => $ref\n                    ]);\n                    if ($related_data->id) {\n                        $item['referrer_id'] = $related_data->id;\n                        // if (!$is_internal) {\n                        $session_original_ref_id = $item['referrer_id'];\n                        // }\n                    }\n                }\n\n                if (isset($item['session_id']) and $item['session_id']\n                    and isset($item['user_ip'])\n                    and isset($item['user_id'])\n                ) {\n\n                    $hash = $item['session_id'];\n                    $related_data = new Sessions();\n                    $related_data = $related_data->firstOrCreate([\n                        'session_id' => $hash\n                    ], [\n                        'browser_id' => $browser_id,\n                        'referrer_id' => $session_original_ref_id,\n                        'language' => $language,\n                        'session_id' => $hash,\n                        'geoip_id' => $this->_geo_ip_id($item['user_ip']),\n                        'referrer_domain_id' => $this->_referrer_domain_id($ref),\n                        'referrer_path_id' => $this->_referrer_path_id($ref),\n                        'user_id' => $item['user_id'],\n                        'user_ip' => $item['user_ip']\n                    ]);\n                    if ($related_data->id) {\n                        $item['session_id_key'] = $related_data->id;\n\n                    }\n                }\n\n                if (isset($item['visit_url']) and $item['visit_url']) {\n                    $hash = md5($item['visit_url']);\n                    $related_data = new StatsUrl();\n\n                    $related_data = $related_data->firstOrCreate([\n                        'url_hash' => $hash\n                    ], [\n                        'url_hash' => $hash,\n                        'content_id' => $item['content_id'],\n                        'category_id' => $item['category_id'],\n                        'url' => $item['visit_url']\n                    ]);\n                    if ($related_data->id) {\n                        $item['url_id'] = $related_data->id;\n                    }\n\n                }\n\n\n                $existing = false;\n\n                if (isset($item['url_id']) and isset($item['session_id_key'])) {\n\n                    $existing_log = new Log();\n\n                    $check_existing = $existing_log->where('url_id', $item['url_id'])\n                          ->where('session_id_key', $item['session_id_key'])\n                        ->limit(1)->first();\n\n                    if ($check_existing and $check_existing->id) {\n                        $existing = $check_existing->id;\n\n                    }\n                    if ($check_existing and isset($item['updated_at'])) {\n                        $existing_log = $check_existing;\n\n                       // $existing_log->where('id', intval($existing));\n                      //  $existing_log->where('id', intval($existing))->increment('view_count', 1, $track);\n                        $view_count_log =  $check_existing;\n                        $view_count = 0;\n\n                        if($view_count_log){\n                            $view_count  =intval( $existing_log->view_count);\n                        }\n\n                        $view_count = intval($view_count) + 1;\n\n                        $view_count_log->updated_at = $item['updated_at'];\n                        $view_count_log->view_count = $view_count;\n                        $view_count_log->save();\n\n\n\n                    } else {\n                        $log->create($item);\n\n                    }\n                }\n                unset($buffer[$key]);\n            }\n\n        }\n        if ($track_data == false) {\n            cache_save($buffer, 'stats_buffer_visits', 'site_stats');\n        }\n        return true;\n    }\n\n\n    private function _collect_user_data()\n    {\n\n        $data = array();\n        $data['user_ip'] = user_ip();\n        if (isset($_SERVER['HTTP_USER_AGENT'])) {\n            $data['browser_agent'] = $_SERVER['HTTP_USER_AGENT'];\n        }\n        if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);\n            $data['language'] = $lang;\n        }\n\n\n        $last_page = url_current(true);\n\n        $ref = false;\n        if ($last_page == false) {\n            $last_page = $_SERVER['PHP_SELF'];\n\n\n        }\n\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref = $_SERVER['HTTP_REFERER'];\n        }\n\n        if (is_ajax()) {\n            if (isset($_POST['referrer'])) {\n                $ref = $_POST['referrer'];\n            }\n        }\n\n\n        if ($last_page) {\n            $last_page = rtrim($last_page, '?');\n            $last_page = rtrim($last_page, '#');\n        }\n\n        if (strstr($ref, admin_url())) {\n            return;\n        }\n\n        $data['visit_url'] = $last_page;\n        $data['referrer'] = $ref;\n        $data['session_id'] = mw()->user_manager->session_id();\n        $data['user_id'] = mw()->user_manager->id();\n        $data['content_id'] = content_id();\n        $data['category_id'] = category_id();\n\n        return $data;\n    }\n\n\n    private function _parse_agent($browser_agent_string)\n    {\n\n        $return = array();\n        $agent = new Agent();\n        $agent->setUserAgent($browser_agent_string);\n\n\n        $platform = $agent->platform();\n        $version = $agent->version($platform);\n\n\n        $return['platform'] = $platform;\n        $return['platform_version'] = $version;\n\n\n        $browser = $agent->browser();\n        $version = $agent->version($browser);\n\n        $return['browser'] = $browser;\n        $return['browser_version'] = $version;\n\n\n        $return['is_desktop'] = $agent->isDesktop();\n        $return['is_phone'] = $agent->isPhone();\n        $return['is_mobile'] = $agent->isMobile();\n        $return['is_tablet'] = $agent->isTablet();\n\n\n        $return['browser_version'] = $version;\n        $return['browser_version'] = $version;\n\n        $return['device'] = $agent->device();\n\n\n        $langs = $agent->languages();\n        if ($langs and !empty($langs)) {\n            $return['language'] = array_pop($langs);\n        }\n\n\n        $is_robot = $agent->isRobot();\n        if ($is_robot) {\n            $return['is_robot'] = $is_robot;\n            $return['robot_name'] = $agent->robot();\n        }\n        return $return;\n\n    }\n\n    private function _geo_ip_id($ip)\n    {\n        $ip = $this->__parse_geo_ip_country($ip);\n\n        if ($ip and isset($ip['country_code'])) {\n            $data = new Geoip();\n            $data = $data->firstOrCreate([\n                'country_code' => $ip['country_code']\n            ], $ip);\n\n            if ($data->id) {\n                return $data->id;\n            }\n\n\n        }\n    }\n\n\n    private function _referrer_domain_id($referrer_url = false)\n    {\n\n        if (!$referrer_url) {\n            return;\n        }\n\n        $parse = parse_url($referrer_url);\n\n        if (isset($parse['host']) and $parse['host']) {\n\n            $domain = $parse['host']; //referrer_domain\n            if ($domain) {\n                $data = new ReferrersDomains();\n                $data = $data->firstOrCreate([\n                    'referrer_domain' => $domain\n                ], array('referrer_domain' => $domain));\n\n                if ($data->id) {\n                    return $data->id;\n                }\n\n\n            }\n        }\n    }\n\n\n    private function _referrer_path_id($referrer_url = false)\n    {\n\n        if (!$referrer_url) {\n            return;\n        }\n\n        $parse = parse_url($referrer_url);\n\n        if (isset($parse['host']) and $parse['host']) {\n            if (isset($parse['path']) and $parse['path']) {\n\n                $domain = $parse['host'];\n                $path = $parse['path'];\n                $domain_id = $this->_referrer_domain_id($referrer_url);\n                if ($domain_id) {\n                    $data = new ReferrersPaths();\n                    $data = $data->firstOrCreate([\n                        'referrer_path' => $path,\n                        'referrer_domain_id' => $domain_id\n                    ], array('referrer_domain_id' => $domain_id, 'referrer_path' => $path));\n\n                    if ($data->id) {\n                        return $data->id;\n                    }\n\n\n                }\n            }\n        }\n    }\n\n\n    private function __parse_geo_ip_country($ip)\n    {\n\n        $return = array();\n        $return['country_name'] = 'unknown';\n        $return['country_code'] = 'unknown';\n\n        if (filter_var($ip, FILTER_VALIDATE_IP) === false) {\n            return $return;\n        }\n\n        $mmdb = normalize_path(dirname(MW_PATH) . 'Utils/ThirdPartyLibs/geoip_lite/GeoLite2-Country.mmdb', false);\n\n        if (is_file($mmdb)) {\n\n            try {\n                $reader = new Reader($mmdb);\n                $record = $reader->country($ip);\n                 if ($record) {\n                    $return['country_code'] = $record->country->isoCode;\n                    $return['country_name'] = $record->country->name;\n                }\n                unset($reader);\n            } catch (\\Exception $e) {\n\n            }\n\n\n        }\n\n        return $return;\n    }\n\n\n}\n"], "fixing_code": ["<?php\n\n\nfunction user_ip()\n{\n    $ipaddress = '127.0.0.1';\n    $ipaddressDefault = '127.0.0.1';\n\n    if (isset($_SERVER['HTTP_CF_CONNECTING_IP'])) {\n        $ipaddress = $_SERVER['HTTP_CF_CONNECTING_IP'];\n    } else if (isset($_SERVER['HTTP_CLIENT_IP'])) {\n        $ipaddress = $_SERVER['HTTP_CLIENT_IP'];\n    } else if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n        $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } else if (isset($_SERVER['HTTP_X_FORWARDED'])) {\n        $ipaddress = $_SERVER['HTTP_X_FORWARDED'];\n    } else if (isset($_SERVER['HTTP_FORWARDED_FOR'])) {\n        $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];\n    } else if (isset($_SERVER['HTTP_FORWARDED'])) {\n        $ipaddress = $_SERVER['HTTP_FORWARDED'];\n    } else if (isset($_SERVER['HTTP_X_CLUSTER_CLIENT_IP'])) {\n        $ipaddress = $_SERVER['HTTP_X_CLUSTER_CLIENT_IP'];\n    } else if (isset($_SERVER['HTTP_X_REAL_IP'])) {\n        $ipaddress = $_SERVER['HTTP_X_REAL_IP'];\n    } else if (isset($_SERVER['REMOTE_ADDR'])) {\n        $ipaddress = $_SERVER['REMOTE_ADDR'];\n    }\n\n    $ipv4_validation_regex = \"/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\";\n    $ipv6_validation_regex = \"/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/\";\n\n    if (!preg_match($ipv4_validation_regex, $ipaddress) and !preg_match($ipv6_validation_regex, $ipaddress)) {\n        //invalid ip is sent, so we return default ip\n        return $ipaddressDefault;\n    }\n\n\n    return $ipaddress;\n}\n\n\nif (!defined('MW_USER_IP')) {\n    define('MW_USER_IP', user_ip());\n}\n\n\nfunction forgot_password_url()\n{\n    return app()->user_manager->forgot_password_url();\n}\n\nfunction register_url()\n{\n    return app()->user_manager->register_url();\n}\n\nfunction get_user_by_id($params = false)\n{\n    return app()->user_manager->get_by_id($params);\n}\n\nif (!function_exists('mw_csrf_token')) {\n    function mw_csrf_token($form_name = false)\n    {\n        return app()->user_manager->csrf_token($form_name);\n    }\n}\nfunction csrf_form($form_name = false)\n{\n    return app()->user_manager->csrf_form($form_name);\n}\n\nfunction logout_url()\n{\n    return app()->user_manager->logout_url();\n}\n\nfunction login_url()\n{\n    return app()->user_manager->login_url();\n}\n\nfunction profile_url()\n{\n    return app()->user_manager->profile_url();\n}\n\nfunction session_set($key, $val)\n{\n    return app()->user_manager->session_set($key, $val);\n}\n\nfunction session_append_array($key, $array)\n{\n    $oldArray = session_get($key);\n    if (is_array($oldArray) && !empty($oldArray)) {\n        $newArray = array_merge($oldArray, $array);\n    } else {\n        $newArray = $array;\n    }\n\n    return session_set($key, $newArray);\n}\n\nfunction session_get($name)\n{\n    return app()->user_manager->session_get($name);\n}\n\nfunction session_del($name)\n{\n    return app()->user_manager->session_del($name);\n}\n\nfunction session_end()\n{\n    return app()->user_manager->session_end();\n}\n\nfunction session_all()\n{\n    return app()->user_manager->session_all();\n}\n\nfunction api_login($api_key = false)\n{\n    return app()->user_manager->api_login($api_key);\n}\n\n\nfunction user_social_login($params)\n{\n    return app()->user_manager->social_login($params);\n}\n\n\nfunction logout()\n{\n    return app()->user_manager->logout();\n}\n\nfunction user_register($params)\n{\n    return app()->user_manager->register($params);\n}\n\n\n/**\n * Allows you to save users in the database.\n *\n * By default it have security rules.\n *\n * If you are admin you can save any user in the system;\n *\n * However if you are regular user you must post param id with the current user id;\n *\n * @param  $params\n * @param  $params ['id'] = $user_id; // REQUIRED , you must set the user id.\n *                 For security reasons, to make new user please use user_register() function that requires captcha\n *                 or write your own save_user wrapper function that sets  mw_var('force_save_user',true);\n *                 and pass its params to save_user();\n * @param  $params ['is_active'] = 1; //default is 'n'\n *\n * @usage\n *\n * $upd = array();\n * $upd['id'] = 1;\n * $upd['email'] = $params['new_email'];\n * $upd['password'] = $params['passwordhash'];\n * mw_var('force_save_user', false|true); // if true you want to make new user or foce save ... skips id check and is admin check\n * mw_var('save_user_no_pass_hash', false|true); //if true skips pass hash function and saves password it as is in the request, please hash the password before that or ensure its hashed\n * $s = save_user($upd);\n *\n * @return bool|int\n */\nfunction save_user($params)\n{\n    return app()->user_manager->save($params);\n}\n\n\nfunction delete_user($data)\n{\n    return app()->user_manager->delete($data);\n}\n\n\nfunction social_login_process()\n{\n    return app()->user_manager->social_login_process();\n}\n\n\nfunction user_reset_password_from_link($params)\n{\n    return app()->user_manager->reset_password_from_link($params);\n}\n\n\nfunction user_send_forgot_password($params)\n{\n    return app()->user_manager->send_forgot_password($params);\n}\n\n\nfunction user_make_logged($params)\n{\n    return app()->user_manager->make_logged($params);\n}\n\n\nfunction user_login($params)\n{\n    return app()->user_manager->login($params);\n}\n\n\nfunction is_logged()\n{\n\n    $is = app()->user_manager->is_logged();\n    if (defined('MW_API_CALL')) {\n        app()->event_manager->trigger('mw.user.is_logged');\n    }\n\n    return $is;\n}\n\nfunction user_id()\n{\n    return app()->user_manager->id();\n}\n\nfunction has_access($function_name = '')\n{\n    return app()->user_manager->has_access($function_name);\n}\n\nfunction must_have_access($permission = '')\n{\n    if (!user_can_access($permission)) {\n        $file = debug_backtrace()[0]['file'];\n        mw_error('Permission denied! You dont have access to see this page.');\n    }\n}\n\nfunction only_admin_access()\n{\n    return app()->user_manager->admin_access();\n}\n\nfunction is_admin()\n{\n    if (app()->bound('user_manager')) {\n        return app()->user_manager->is_admin();\n    }\n}\n\nfunction is_live_edit()\n{\n    if (!is_admin()) {\n        return false;\n    }\n\n\n    $editModeParam = app()->url_manager->param('editmode');\n    if ($editModeParam == 'n') {\n        return false;\n    }\n\n\n    $editModeParam = app()->url_manager->param('editmode');\n    if ($editModeParam == 'y') {\n        return true;\n    }\n\n    $editModeParam2 = app()->url_manager->param('editmode', true);\n    if ($editModeParam2 == 'y') {\n        return true;\n    }\n\n    if (defined('IN_EDIT') and IN_EDIT) {\n        return true;\n    }\n\n    $editModeSession = app()->user_manager->session_get('editmode');\n\n    if ($editModeSession == true and !defined('IN_EDIT')) {\n        define('IN_EDIT', true);\n        return true;\n    }\n\n    return $editModeSession;\n}\n\n/**\n * @function user_name\n * gets the user's FULL name\n *\n * @param        $user_id the id of the user. If false it will use the curent user (you)\n * @param string $mode full|first|last|username\n *                        'full' //prints full name (first +last)\n *                        'first' //prints first name\n *                        'last' //prints last name\n *                        'username' //prints username\n *\n * @return string\n */\nfunction user_name($user_id = false, $mode = 'full')\n{\n    return app()->user_manager->name($user_id, $mode);\n}\n\n\nfunction user_email($user_id = false)\n{\n    return user_name($user_id, $mode = 'email');\n}\n\nfunction user_picture($user_id = false)\n{\n    return app()->user_manager->picture($user_id);\n}\n\n/**\n * @function get_users\n *\n * @param array|bool|string $params array|string;\n * @params $params['username'] string username for user\n * @params $params['email'] string email for user\n *\n *\n * @usage    get_users('email=my_email');\n *\n * @return array of users;\n */\nfunction get_users($params = false)\n{\n    return app()->user_manager->get_all($params);\n}\n\n/**\n * get_user.\n *\n * get_user get the user info from the DB\n *\n * @param bool $id\n *\n *\n * @return array\n * @link     http://microweber.com\n *\n * @category users\n *\n * @author   Microweber\n *\n */\nfunction get_user($id = false)\n{\n    return app()->user_manager->get($id);\n}\n\n\nfunction user_can_access($permission)\n{\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n    return false;\n    // return $user->can($permission);\n}\n\nfunction module_permissions($module)\n{\n\n    return \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n}\n\nfunction user_can_destroy_module($module)\n{\n    //   $permissions = \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n    /* if ($user->can($permissions['destroy'])) {\n         return true;\n     }*/\n\n    return false;\n}\n\nfunction user_can_view_module($module)\n{\n\n    //$permissions = \\MicroweberPackages\\Role\\Repositories\\Permission::generateModulePermissionsSlugs($module);\n\n    $user = \\Illuminate\\Support\\Facades\\Auth::user();\n    if (!$user) {\n        return false;\n    }\n\n    if ($user->is_admin == 1) {\n        return true;\n    }\n\n    /*   if ($user->can($permissions['index'])) {\n           return true;\n       }*/\n\n    return false;\n\n}\n\n\nfunction detect_user_id_from_params($params)\n{\n\n    if (!empty($params)) {\n        if (isset($params['username']) || isset($params['email'])) {\n\n            if (isset($params['username']) && $params['username'] != false and filter_var($params['username'], FILTER_VALIDATE_EMAIL)) {\n                $params['email'] = $params['username'];\n            }\n\n            $findUserId = false;\n            $findByUsername = false;\n\n            if (isset($params['username'])) {\n                $findByUsername = \\MicroweberPackages\\User\\Models\\User::where('username', $params['username'])->first();\n            }\n\n            if ($findByUsername) {\n                $findUserId = $findByUsername->id;\n            } else {\n                if (isset($params['email'])) {\n                    $findByEmail = \\MicroweberPackages\\User\\Models\\User::where('email', $params['email'])->first();\n                    if ($findByEmail) {\n                        $findUserId = $findByEmail->id;\n                    }\n                }\n            }\n\n            if (!$findUserId) {\n                return false;\n            }\n\n            return $findUserId;\n        }\n    }\n\n    return false;\n}\n", "<?php\n\nnamespace MicroweberPackages\\SiteStats;\n\n\nuse MicroweberPackages\\SiteStats\\Models\\Browsers;\nuse MicroweberPackages\\SiteStats\\Models\\Geoip;\nuse MicroweberPackages\\SiteStats\\Models\\Log;\nuse MicroweberPackages\\SiteStats\\Models\\Referrers;\nuse MicroweberPackages\\SiteStats\\Models\\ReferrersDomains;\nuse MicroweberPackages\\SiteStats\\Models\\ReferrersPaths;\nuse MicroweberPackages\\SiteStats\\Models\\Sessions;\nuse MicroweberPackages\\SiteStats\\Models\\StatsUrl;\nuse Jenssegers\\Agent\\Agent;\nuse GeoIp2\\Database\\Reader;\n\n\nclass Tracker\n{\n\n    function track()\n    {\n        $track = array();\n        $data = $this->_collect_user_data();\n        $data['updated_at'] = date(\"Y-m-d H:i:s\");\n\n        $track[] = $data;\n\n        return $this->process_buffer($track);\n\n\n    }\n\n    function track_buffered()\n    {\n\n\n        $buffer = cache_get('stats_buffer_visits', 'site_stats');\n        $buffer_skip = cache_get('stats_buffer_timeout', 'site_stats');\n        if (!$buffer_skip) {\n            cache_save('skip', 'stats_buffer_timeout', 'site_stats', 1);\n        }\n        if (!is_array($buffer)) {\n            $buffer = array();\n        }\n\n\n        $data = $this->_collect_user_data();\n\n        $buffer_key = 'stat' . crc32($data['referrer'] . $data['session_id']);\n\n\n        if (!isset($buffer[$buffer_key])) {\n            $data['updated_at'] = date(\"Y-m-d H:i:s\");\n            $buffer[$buffer_key] = $data;\n            cache_save($buffer, 'stats_buffer_visits', 'site_stats');\n        }\n\n\n        if (!$buffer_skip) {\n            return $this->process_buffer();\n        }\n        return true;\n    }\n\n    function process_buffer($track_data = false)\n    {\n\n        if ($track_data != false) {\n            $buffer = $track_data;\n        } else {\n            $buffer = cache_get('stats_buffer_visits', 'site_stats');\n\n        }\n        if (is_array($buffer) and !empty($buffer)) {\n\n            $log = new Log();\n\n            foreach ($buffer as $key => $item) {\n                $browser_id = false;\n                $language = false;\n\n                $item = array_map('strip_tags', $item);\n                $item = array_map('e', $item);\n                 if (isset($item['language']) and $item['language']) {\n                    $language = $item['language'];\n                }\n                if (isset($item['browser_agent']) and $item['browser_agent']) {\n                    $hash = md5($item['browser_agent']);\n\n                    $browser_data = array(\n                        'browser_agent_hash' => $hash,\n                        'browser_agent' => $item['browser_agent']\n                    );\n\n\n                    $related_data = new Browsers();\n                    $related_data = $related_data->firstOrCreate([\n                        'browser_agent_hash' => $hash\n                    ], array_merge($browser_data, $this->_parse_agent($item['browser_agent'])));\n                    if ($related_data->id) {\n                        $browser_id = $related_data->id;\n                    }\n                }\n\n\n                $session_original_ref_id = false;\n                $ref = false;\n                if (isset($item['referrer']) and $item['referrer']) {\n                    $hash = md5($item['referrer']);\n                    $ref = $item['referrer'];\n                    $related_data = new Referrers();\n                    $is_internal = false;\n                    if (strstr($item['referrer'], site_url())) {\n                        $is_internal = true;\n                    }\n                    $related_data = $related_data->firstOrCreate([\n                        'referrer_hash' => $hash\n                    ], [\n                        'referrer_hash' => $hash,\n                        'referrer_domain_id' => $this->_referrer_domain_id($ref),\n                        'referrer_path_id' => $this->_referrer_path_id($ref),\n                        'is_internal' => $is_internal,\n                        'referrer' => $ref\n                    ]);\n                    if ($related_data->id) {\n                        $item['referrer_id'] = $related_data->id;\n                        // if (!$is_internal) {\n                        $session_original_ref_id = $item['referrer_id'];\n                        // }\n                    }\n                }\n\n                if (isset($item['session_id']) and $item['session_id']\n                    and isset($item['user_ip'])\n                    and isset($item['user_id'])\n                ) {\n\n                    $hash = $item['session_id'];\n                    $related_data = new Sessions();\n                    $related_data = $related_data->firstOrCreate([\n                        'session_id' => $hash\n                    ], [\n                        'browser_id' => $browser_id,\n                        'referrer_id' => $session_original_ref_id,\n                        'language' => $language,\n                        'session_id' => $hash,\n                        'geoip_id' => $this->_geo_ip_id($item['user_ip']),\n                        'referrer_domain_id' => $this->_referrer_domain_id($ref),\n                        'referrer_path_id' => $this->_referrer_path_id($ref),\n                        'user_id' => $item['user_id'],\n                        'user_ip' => $item['user_ip']\n                    ]);\n                    if ($related_data->id) {\n                        $item['session_id_key'] = $related_data->id;\n\n                    }\n                }\n\n                if (isset($item['visit_url']) and $item['visit_url']) {\n                    $hash = md5($item['visit_url']);\n                    $related_data = new StatsUrl();\n\n                    $related_data = $related_data->firstOrCreate([\n                        'url_hash' => $hash\n                    ], [\n                        'url_hash' => $hash,\n                        'content_id' => $item['content_id'],\n                        'category_id' => $item['category_id'],\n                        'url' => $item['visit_url']\n                    ]);\n                    if ($related_data->id) {\n                        $item['url_id'] = $related_data->id;\n                    }\n\n                }\n\n\n                $existing = false;\n\n                if (isset($item['url_id']) and isset($item['session_id_key'])) {\n\n                    $existing_log = new Log();\n\n                    $check_existing = $existing_log->where('url_id', $item['url_id'])\n                          ->where('session_id_key', $item['session_id_key'])\n                        ->limit(1)->first();\n\n                    if ($check_existing and $check_existing->id) {\n                        $existing = $check_existing->id;\n\n                    }\n                    if ($check_existing and isset($item['updated_at'])) {\n                        $existing_log = $check_existing;\n\n                       // $existing_log->where('id', intval($existing));\n                      //  $existing_log->where('id', intval($existing))->increment('view_count', 1, $track);\n                        $view_count_log =  $check_existing;\n                        $view_count = 0;\n\n                        if($view_count_log){\n                            $view_count  =intval( $existing_log->view_count);\n                        }\n\n                        $view_count = intval($view_count) + 1;\n\n                        $view_count_log->updated_at = $item['updated_at'];\n                        $view_count_log->view_count = $view_count;\n                        $view_count_log->save();\n\n\n\n                    } else {\n                        $log->create($item);\n\n                    }\n                }\n                unset($buffer[$key]);\n            }\n\n        }\n        if ($track_data == false) {\n            cache_save($buffer, 'stats_buffer_visits', 'site_stats');\n        }\n        return true;\n    }\n\n\n    private function _collect_user_data()\n    {\n\n        $data = array();\n        $data['user_ip'] = user_ip();\n        if (isset($_SERVER['HTTP_USER_AGENT'])) {\n            $data['browser_agent'] = $_SERVER['HTTP_USER_AGENT'];\n        }\n        if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);\n            $data['language'] = $lang;\n        }\n\n\n        $last_page = url_current(true);\n\n        $ref = false;\n        if ($last_page == false) {\n            $last_page = $_SERVER['PHP_SELF'];\n\n\n        }\n\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref = $_SERVER['HTTP_REFERER'];\n        }\n\n        if (is_ajax()) {\n            if (isset($_POST['referrer'])) {\n                $ref = $_POST['referrer'];\n            }\n        }\n        $ref = e($ref);\n\n        if ($last_page) {\n            $last_page = e($last_page);\n\n            $last_page = rtrim($last_page, '?');\n            $last_page = rtrim($last_page, '#');\n        }\n\n        if (strstr($ref, admin_url())) {\n            return;\n        }\n\n        $data['visit_url'] = $last_page;\n        $data['referrer'] = $ref;\n        $data['session_id'] = mw()->user_manager->session_id();\n        $data['user_id'] = mw()->user_manager->id();\n        $data['content_id'] = content_id();\n        $data['category_id'] = category_id();\n\n        return $data;\n    }\n\n\n    private function _parse_agent($browser_agent_string)\n    {\n\n        $return = array();\n        $agent = new Agent();\n        $agent->setUserAgent($browser_agent_string);\n\n\n        $platform = $agent->platform();\n        $version = $agent->version($platform);\n\n\n        $return['platform'] = $platform;\n        $return['platform_version'] = $version;\n\n\n        $browser = $agent->browser();\n        $version = $agent->version($browser);\n\n        $return['browser'] = $browser;\n        $return['browser_version'] = $version;\n\n\n        $return['is_desktop'] = $agent->isDesktop();\n        $return['is_phone'] = $agent->isPhone();\n        $return['is_mobile'] = $agent->isMobile();\n        $return['is_tablet'] = $agent->isTablet();\n\n\n        $return['browser_version'] = $version;\n        $return['browser_version'] = $version;\n\n        $return['device'] = $agent->device();\n\n\n        $langs = $agent->languages();\n        if ($langs and !empty($langs)) {\n            $return['language'] = array_pop($langs);\n        }\n\n\n        $is_robot = $agent->isRobot();\n        if ($is_robot) {\n            $return['is_robot'] = $is_robot;\n            $return['robot_name'] = $agent->robot();\n        }\n        return $return;\n\n    }\n\n    private function _geo_ip_id($ip)\n    {\n        $ip = $this->__parse_geo_ip_country($ip);\n\n        if ($ip and isset($ip['country_code'])) {\n            $data = new Geoip();\n            $data = $data->firstOrCreate([\n                'country_code' => $ip['country_code']\n            ], $ip);\n\n            if ($data->id) {\n                return $data->id;\n            }\n\n\n        }\n    }\n\n\n    private function _referrer_domain_id($referrer_url = false)\n    {\n\n        if (!$referrer_url) {\n            return;\n        }\n\n        $parse = parse_url($referrer_url);\n\n        if (isset($parse['host']) and $parse['host']) {\n\n            $domain = $parse['host']; //referrer_domain\n            if ($domain) {\n                $data = new ReferrersDomains();\n                $data = $data->firstOrCreate([\n                    'referrer_domain' => $domain\n                ], array('referrer_domain' => $domain));\n\n                if ($data->id) {\n                    return $data->id;\n                }\n\n\n            }\n        }\n    }\n\n\n    private function _referrer_path_id($referrer_url = false)\n    {\n\n        if (!$referrer_url) {\n            return;\n        }\n\n        $parse = parse_url($referrer_url);\n\n        if (isset($parse['host']) and $parse['host']) {\n            if (isset($parse['path']) and $parse['path']) {\n\n                $domain = $parse['host'];\n                $path = $parse['path'];\n                $domain_id = $this->_referrer_domain_id($referrer_url);\n                if ($domain_id) {\n                    $data = new ReferrersPaths();\n                    $data = $data->firstOrCreate([\n                        'referrer_path' => $path,\n                        'referrer_domain_id' => $domain_id\n                    ], array('referrer_domain_id' => $domain_id, 'referrer_path' => $path));\n\n                    if ($data->id) {\n                        return $data->id;\n                    }\n\n\n                }\n            }\n        }\n    }\n\n\n    private function __parse_geo_ip_country($ip)\n    {\n\n        $return = array();\n        $return['country_name'] = 'unknown';\n        $return['country_code'] = 'unknown';\n\n        if (filter_var($ip, FILTER_VALIDATE_IP) === false) {\n            return $return;\n        }\n\n        $mmdb = normalize_path(dirname(MW_PATH) . 'Utils/ThirdPartyLibs/geoip_lite/GeoLite2-Country.mmdb', false);\n\n        if (is_file($mmdb)) {\n\n            try {\n                $reader = new Reader($mmdb);\n                $record = $reader->country($ip);\n                 if ($record) {\n                    $return['country_code'] = $record->country->isoCode;\n                    $return['country_name'] = $record->country->name;\n                }\n                unset($reader);\n            } catch (\\Exception $e) {\n\n            }\n\n\n        }\n\n        return $return;\n    }\n\n\n}\n"], "filenames": ["src/MicroweberPackages/User/helpers/helpers.php", "userfiles/modules/site_stats/src/Tracker.php"], "buggy_code_start_loc": [6, 83], "buggy_code_end_loc": [420, 261], "fixing_code_start_loc": [7, 83], "fixing_code_end_loc": [430, 266], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 1.3.3.", "other": {"cve": {"id": "CVE-2023-1881", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-05T17:15:07.177", "lastModified": "2023-04-11T16:43:53.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 1.3.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.3", "matchCriteriaId": "846F2D65-6C3F-4D7E-902B-774E7890DCC1"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/8d039de2d615956f6df8df0bb1045ff3be88f183", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d5ebc2bd-8638-41c4-bf72-7c906c601344", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/8d039de2d615956f6df8df0bb1045ff3be88f183"}}