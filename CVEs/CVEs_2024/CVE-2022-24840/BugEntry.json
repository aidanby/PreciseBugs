{"buggy_code": ["import base64\nimport logging\nimport pathlib\nimport uuid\n\nfrom django.conf import settings\nfrom django.utils.functional import cached_property\nfrom storages.utils import safe_join\n\nfrom s3file.storages import storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileInputMixin:\n    \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n\n    needs_multipart_form = False\n    upload_path = str(\n        getattr(settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\"))\n    )\n    upload_path = safe_join(str(storage.location), upload_path)\n    expires = settings.SESSION_COOKIE_AGE\n\n    @property\n    def bucket_name(self):\n        return storage.bucket.name\n\n    @property\n    def client(self):\n        return storage.connection.meta.client\n\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n\n        accept = attrs.get(\"accept\")\n        response = self.client.generate_presigned_post(\n            self.bucket_name,\n            str(pathlib.PurePosixPath(self.upload_folder, \"${filename}\")),\n            Conditions=self.get_conditions(accept),\n            ExpiresIn=self.expires,\n        )\n\n        defaults = {\n            \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n        }\n        defaults[\"data-url\"] = response[\"url\"]\n        defaults.update(attrs)\n\n        try:\n            defaults[\"class\"] += \" s3file\"\n        except KeyError:\n            defaults[\"class\"] = \"s3file\"\n        return defaults\n\n    def get_conditions(self, accept):\n        conditions = [\n            {\"bucket\": self.bucket_name},\n            [\"starts-with\", \"$key\", str(self.upload_folder)],\n            {\"success_action_status\": \"201\"},\n        ]\n        if accept and \",\" not in accept:\n            top_type, sub_type = accept.split(\"/\", 1)\n            if sub_type == \"*\":\n                conditions.append([\"starts-with\", \"$Content-Type\", \"%s/\" % top_type])\n            else:\n                conditions.append({\"Content-Type\": accept})\n        else:\n            conditions.append([\"starts-with\", \"$Content-Type\", \"\"])\n\n        return conditions\n\n    @cached_property\n    def upload_folder(self):\n        return str(\n            pathlib.PurePosixPath(\n                self.upload_path,\n                base64.urlsafe_b64encode(uuid.uuid4().bytes)\n                .decode(\"utf-8\")\n                .rstrip(\"=\\n\"),\n            )\n        )  # S3 uses POSIX paths\n\n    class Media:\n        js = (\"s3file/js/s3file.js\" if settings.DEBUG else \"s3file/js/s3file.min.js\",)\n", "import logging\nimport pathlib\n\nfrom s3file.storages import local_dev, storage\n\nfrom . import views\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        file_fields = request.POST.getlist(\"s3file\")\n        for field_name in file_fields:\n            paths = request.POST.getlist(field_name)\n            request.FILES.setlist(field_name, list(self.get_files_from_storage(paths)))\n\n        if local_dev and request.path == \"/__s3_mock__/\":\n            return views.S3MockView.as_view()(request)\n\n        return self.get_response(request)\n\n    @staticmethod\n    def get_files_from_storage(paths):\n        \"\"\"Return S3 file where the name does not include the path.\"\"\"\n        for path in paths:\n            path = pathlib.PurePosixPath(path)\n            try:\n                location = storage.aws_location\n            except AttributeError:\n                location = storage.location\n            try:\n                f = storage.open(str(path.relative_to(location)))\n                f.name = path.name\n                yield f\n            except (OSError, ValueError):\n                logger.exception(\"File not found: %s\", path)\n", "'use strict';\n\n(function () {\n  function parseURL (text) {\n    var xml = new window.DOMParser().parseFromString(text, 'text/xml')\n    var tag = xml.getElementsByTagName('Key')[0]\n    return decodeURI(tag.childNodes[0].nodeValue)\n  }\n\n  function waitForAllFiles (form) {\n    if (window.uploading !== 0) {\n      setTimeout(function () {\n        waitForAllFiles(form)\n      }, 100)\n    } else {\n      window.HTMLFormElement.prototype.submit.call(form)\n    }\n  }\n\n  function request (method, url, data, fileInput, file, form) {\n    file.loaded = 0\n    return new Promise(function (resolve, reject) {\n      var xhr = new window.XMLHttpRequest()\n\n      xhr.onload = function () {\n        if (xhr.status === 201) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.statusText)\n        }\n      }\n\n      xhr.upload.onprogress = function (e) {\n        var diff = e.loaded - file.loaded\n        form.loaded += diff\n        fileInput.loaded += diff\n        file.loaded = e.loaded\n        var defaultEventData = {\n          currentFile: file,\n          currentFileName: file.name,\n          currentFileProgress: Math.min(e.loaded / e.total, 1),\n          originalEvent: e\n        }\n        form.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(form.loaded / form.total, 1),\n            loaded: form.loaded,\n            total: form.total\n          }, defaultEventData)\n        }))\n        fileInput.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(fileInput.loaded / fileInput.total, 1),\n            loaded: fileInput.loaded,\n            total: fileInput.total\n          }, defaultEventData)\n        }))\n      }\n\n      xhr.onerror = function () {\n        reject(xhr.statusText)\n      }\n\n      xhr.open(method, url)\n      xhr.send(data)\n    })\n  }\n\n  function uploadFiles (form, fileInput, name) {\n    var url = fileInput.getAttribute('data-url')\n    fileInput.loaded = 0\n    fileInput.total = 0\n    var promises = Array.from(fileInput.files).map(function (file) {\n      form.total += file.size\n      fileInput.total += file.size\n      var s3Form = new window.FormData()\n      Array.from(fileInput.attributes).forEach(function (attr) {\n        var name = attr.name\n\n        if (name.startsWith('data-fields')) {\n          name = name.replace('data-fields-', '')\n          s3Form.append(name, attr.value)\n        }\n      })\n      s3Form.append('success_action_status', '201')\n      s3Form.append('Content-Type', file.type)\n      s3Form.append('file', file)\n      return request('POST', url, s3Form, fileInput, file, form)\n    })\n    Promise.all(promises).then(function (results) {\n      results.forEach(function (result) {\n        var hiddenFileInput = document.createElement('input')\n        hiddenFileInput.type = 'hidden'\n        hiddenFileInput.name = name\n        hiddenFileInput.value = parseURL(result)\n        form.appendChild(hiddenFileInput)\n      })\n      fileInput.name = ''\n      window.uploading -= 1\n    }, function (err) {\n      console.log(err)\n      fileInput.setCustomValidity(err)\n      fileInput.reportValidity()\n    })\n  }\n\n  function clickSubmit (e) {\n    var submitButton = e.target\n    var form = submitButton.closest('form')\n    var submitInput = document.createElement('input')\n    submitInput.type = 'hidden'\n    submitInput.value = submitButton.value || '1'\n    submitInput.name = submitButton.name\n    form.appendChild(submitInput)\n  }\n\n  function uploadS3Inputs (form) {\n    window.uploading = 0\n    form.loaded = 0\n    form.total = 0\n    var inputs = Array.from(form.querySelectorAll('.s3file'))\n\n    inputs.forEach(function (input) {\n      var hiddenS3Input = document.createElement('input')\n      hiddenS3Input.type = 'hidden'\n      hiddenS3Input.name = 's3file'\n      hiddenS3Input.value = input.name\n      form.appendChild(hiddenS3Input)\n    })\n    inputs.forEach(function (input) {\n      window.uploading += 1\n      uploadFiles(form, input, input.name)\n    })\n    waitForAllFiles(form)\n  }\n\n  document.addEventListener('DOMContentLoaded', function () {\n    var forms = Array.from(document.querySelectorAll('.s3file')).map(function (input) {\n      return input.closest('form')\n    })\n    forms = new Set(forms)\n    forms.forEach(function (form) {\n      form.addEventListener('submit', function (e) {\n        e.preventDefault()\n        uploadS3Inputs(e.target)\n      })\n      var submitButtons = form.querySelectorAll('input[type=submit], button[type=submit]')\n      Array.from(submitButtons).forEach(function (submitButton) {\n        submitButton.addEventListener('click', clickSubmit)\n      })\n    })\n  })\n})()\n", "import base64\nimport hashlib\nimport hmac\nimport logging\n\nfrom django import http\nfrom django.conf import settings\nfrom django.core.files.storage import default_storage\nfrom django.views import generic\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )\n", "import os\nimport tempfile\n\nimport pytest\nfrom django.core.files.base import ContentFile\nfrom django.utils.encoding import force_str\nfrom selenium import webdriver\nfrom selenium.common.exceptions import WebDriverException\n\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.headless = True\n    try:\n        b = webdriver.Chrome(options=chrome_options)\n    except WebDriverException as e:\n        pytest.skip(force_str(e))\n    else:\n        yield b\n        b.quit()\n\n\n@pytest.fixture\ndef upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef another_upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"another_%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef yet_another_upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"yet_another_%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef filemodel(request, db):\n    from tests.testapp.models import FileModel\n\n    return FileModel.objects.create(\n        file=ContentFile(request.node.name, \"%s.txt\" % request.node.name)\n    )\n", "import json\nimport os\nfrom contextlib import contextmanager\n\nimport pytest\nfrom django.forms import ClearableFileInput\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.expected_conditions import staleness_of\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom s3file.storages import storage\nfrom tests.testapp.forms import UploadForm\n\ntry:\n    from django.urls import reverse\nexcept ImportError:\n    # Django 1.8 support\n    from django.core.urlresolvers import reverse\n\n\n@contextmanager\ndef wait_for_page_load(driver, timeout=30):\n    old_page = driver.find_element(By.TAG_NAME, \"html\")\n    yield\n    WebDriverWait(driver, timeout).until(staleness_of(old_page))\n\n\nclass TestS3FileInput:\n    @property\n    def url(self):\n        return reverse(\"upload\")\n\n    @pytest.fixture\n    def freeze(self, monkeypatch):\n        \"\"\"Freeze datetime and UUID.\"\"\"\n        monkeypatch.setattr(\n            \"s3file.forms.S3FileInputMixin.upload_folder\",\n            os.path.join(storage.aws_location, \"tmp\"),\n        )\n\n    def test_value_from_datadict(self, client, upload_file):\n        print(storage.location)\n        with open(upload_file) as f:\n            uploaded_file = storage.save(\"test.jpg\", f)\n        response = client.post(\n            reverse(\"upload\"),\n            {\n                \"file\": json.dumps([uploaded_file]),\n                \"s3file\": '[\"file\"]',\n            },\n        )\n\n        assert response.status_code == 201\n\n    def test_value_from_datadict_initial_data(self, filemodel):\n        form = UploadForm(instance=filemodel)\n        assert filemodel.file.name in form.as_p(), form.as_p()\n        assert not form.is_valid()\n\n    def test_file_does_not_exist_no_fallback(self, filemodel):\n        form = UploadForm(\n            data={\"file\": \"foo.bar\", \"s3file\": \"file\"},\n            instance=filemodel,\n        )\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_no_file_uploaded(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid(), form.errors\n        assert not form.has_changed()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_fallback(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_clear(self, filemodel):\n        form = UploadForm(data={\"file-clear\": \"1\"}, instance=filemodel)\n        assert form.is_valid()\n        assert not form.cleaned_data[\"file\"]\n\n    def test_build_attr(self):\n        assert set(ClearableFileInput().build_attrs({}).keys()) == {\n            \"class\",\n            \"data-url\",\n            \"data-fields-x-amz-algorithm\",\n            \"data-fields-x-amz-date\",\n            \"data-fields-x-amz-signature\",\n            \"data-fields-x-amz-credential\",\n            \"data-fields-policy\",\n            \"data-fields-key\",\n        }\n        assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n        assert (\n            ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n            == \"my-class s3file\"\n        )\n\n    def test_get_conditions(self, freeze):\n        conditions = ClearableFileInput().get_conditions(None)\n        assert all(\n            condition in conditions\n            for condition in [\n                {\"bucket\": \"test-bucket\"},\n                {\"success_action_status\": \"201\"},\n                [\"starts-with\", \"$key\", \"custom/location/tmp\"],\n                [\"starts-with\", \"$Content-Type\", \"\"],\n            ]\n        ), conditions\n\n    def test_accept(self):\n        widget = ClearableFileInput()\n        assert \"accept\" not in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(None)\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/*\"})\n        assert 'accept=\"image/*\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"image/\"] in widget.get_conditions(\n            \"image/*\"\n        )\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/jpeg\"})\n        assert 'accept=\"image/jpeg\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert {\"Content-Type\": \"image/jpeg\"} in widget.get_conditions(\"image/jpeg\")\n\n        widget = ClearableFileInput(attrs={\"accept\": \"application/pdf,image/*\"})\n        assert 'accept=\"application/pdf,image/*\"' in widget.render(\n            name=\"file\",\n            value=\"test.jpg\",\n        )\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n        assert {\"Content-Type\": \"application/pdf\"} not in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n\n    def test_no_js_error(self, driver, live_server):\n        driver.get(live_server + self.url)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert(self, request, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        with wait_for_page_load(driver, timeout=10):\n            file_input.submit()\n        assert storage.exists(\"tmp/%s.txt\" % request.node.name)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save_continue\" in driver.page_source\n        assert \"continue_value\" in driver.page_source\n\n    def test_progress(self, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"POST\"][\"progress\"] == \"1\"\n\n    def test_multi_file(\n        self,\n        driver,\n        live_server,\n        freeze,\n        upload_file,\n        another_upload_file,\n        yet_another_upload_file,\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(\" \\n \".join([upload_file, another_upload_file]))\n        file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n        file_input.send_keys(yet_another_upload_file)\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"FILES\"] == {\n            \"file\": [\n                os.path.basename(upload_file),\n                os.path.basename(another_upload_file),\n            ],\n            \"other_file\": [os.path.basename(yet_another_upload_file)],\n        }\n\n    def test_media(self):\n        assert ClearableFileInput().media._js == [\"s3file/js/s3file.js\"]\n\n    def test_upload_folder(self):\n        assert \"custom/location/tmp/s3file/\" in ClearableFileInput().upload_folder\n        assert len(os.path.basename(ClearableFileInput().upload_folder)) == 22\n", "import os\n\nfrom django.core.files.base import ContentFile\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom s3file.middleware import S3FileMiddleware\nfrom s3file.storages import storage\n\n\nclass TestS3FileMiddleware:\n    def test_get_files_from_storage(self):\n        content = b\"test_get_files_from_storage\"\n        name = storage.save(\n            \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n        )\n        files = S3FileMiddleware.get_files_from_storage(\n            [os.path.join(storage.aws_location, name)]\n        )\n        file = next(files)\n        assert file.read() == content\n\n    def test_process_request(self, rf):\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__multiple_files(self, rf):\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": [\n                    \"custom/location/tmp/s3file/s3_file.txt\",\n                    \"custom/location/tmp/s3file/s3_other_file.txt\",\n                ],\n                \"s3file\": [\"file\", \"other_file\"],\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        files = request.FILES.getlist(\"file\")\n        assert files[0].read() == b\"s3file\"\n        assert files[1].read() == b\"other s3file\"\n\n    def test_process_request__no_location(self, rf, settings):\n        settings.AWS_LOCATION = \"\"\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\", data={\"file\": \"tmp/s3file/s3_file.txt\", \"s3file\": \"file\"}\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__no_file(self, rf, caplog):\n        request = rf.post(\"/\", data={\"file\": \"does_not_exist.txt\", \"s3file\": \"file\"})\n        S3FileMiddleware(lambda x: None)(request)\n        assert not request.FILES.getlist(\"file\")\n        assert \"File not found: does_not_exist.txt\" in caplog.text\n"], "fixing_code": ["import base64\nimport logging\nimport pathlib\nimport uuid\n\nfrom django.conf import settings\nfrom django.core import signing\nfrom django.utils.functional import cached_property\nfrom storages.utils import safe_join\n\nfrom s3file.storages import storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileInputMixin:\n    \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n\n    needs_multipart_form = False\n    upload_path = safe_join(\n        str(storage.aws_location),\n        str(\n            getattr(\n                settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\")\n            )\n        ),\n    )\n    expires = settings.SESSION_COOKIE_AGE\n\n    @property\n    def bucket_name(self):\n        return storage.bucket.name\n\n    @property\n    def client(self):\n        return storage.connection.meta.client\n\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n\n        accept = attrs.get(\"accept\")\n        response = self.client.generate_presigned_post(\n            self.bucket_name,\n            str(pathlib.PurePosixPath(self.upload_folder, \"${filename}\")),\n            Conditions=self.get_conditions(accept),\n            ExpiresIn=self.expires,\n        )\n\n        defaults = {\n            \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n        }\n        defaults[\"data-url\"] = response[\"url\"]\n        signer = signing.Signer(\n            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n        )\n        print(self.upload_folder)\n        defaults[\"data-s3f-signature\"] = signer.signature(self.upload_folder)\n        defaults.update(attrs)\n\n        try:\n            defaults[\"class\"] += \" s3file\"\n        except KeyError:\n            defaults[\"class\"] = \"s3file\"\n        return defaults\n\n    def get_conditions(self, accept):\n        conditions = [\n            {\"bucket\": self.bucket_name},\n            [\"starts-with\", \"$key\", str(self.upload_folder)],\n            {\"success_action_status\": \"201\"},\n        ]\n        if accept and \",\" not in accept:\n            top_type, sub_type = accept.split(\"/\", 1)\n            if sub_type == \"*\":\n                conditions.append([\"starts-with\", \"$Content-Type\", \"%s/\" % top_type])\n            else:\n                conditions.append({\"Content-Type\": accept})\n        else:\n            conditions.append([\"starts-with\", \"$Content-Type\", \"\"])\n\n        return conditions\n\n    @cached_property\n    def upload_folder(self):\n        return str(\n            pathlib.PurePosixPath(\n                self.upload_path,\n                base64.urlsafe_b64encode(uuid.uuid4().bytes)\n                .decode(\"utf-8\")\n                .rstrip(\"=\\n\"),\n            )\n        )  # S3 uses POSIX paths\n\n    class Media:\n        js = (\"s3file/js/s3file.js\" if settings.DEBUG else \"s3file/js/s3file.min.js\",)\n", "import logging\nimport pathlib\n\nfrom django.core import signing\nfrom django.core.exceptions import PermissionDenied, SuspiciousFileOperation\nfrom django.utils.crypto import constant_time_compare\n\nfrom . import views\nfrom .forms import S3FileInputMixin\nfrom .storages import local_dev, storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        file_fields = request.POST.getlist(\"s3file\")\n        for field_name in file_fields:\n\n            paths = request.POST.getlist(field_name)\n            if paths:\n                try:\n                    signature = request.POST[f\"{field_name}-s3f-signature\"]\n                except KeyError:\n                    raise PermissionDenied(\"No signature provided.\")\n                try:\n                    request.FILES.setlist(\n                        field_name, list(self.get_files_from_storage(paths, signature))\n                    )\n                except SuspiciousFileOperation as e:\n                    raise PermissionDenied(\"Illegal file name!\") from e\n\n        if local_dev and request.path == \"/__s3_mock__/\":\n            return views.S3MockView.as_view()(request)\n\n        return self.get_response(request)\n\n    @staticmethod\n    def get_files_from_storage(paths, signature):\n        \"\"\"Return S3 file where the name does not include the path.\"\"\"\n        try:\n            location = storage.aws_location\n        except AttributeError:\n            location = storage.location\n        signer = signing.Signer(\n            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n        )\n        for path in paths:\n            path = pathlib.PurePosixPath(path)\n            print(path)\n            print(signer.signature(path.parent), signature)\n            if not constant_time_compare(signer.signature(path.parent), signature):\n                raise PermissionDenied(\"Illegal signature!\")\n            try:\n                relative_path = str(path.relative_to(location))\n            except ValueError as e:\n                raise SuspiciousFileOperation(\n                    f\"Path is not inside the designated upload location: {path}\"\n                ) from e\n\n            try:\n                f = storage.open(relative_path)\n                f.name = path.name\n                yield f\n            except (OSError, ValueError):\n                logger.exception(\"File not found: %s\", path)\n", "'use strict';\n\n(function () {\n  function parseURL (text) {\n    var xml = new window.DOMParser().parseFromString(text, 'text/xml')\n    var tag = xml.getElementsByTagName('Key')[0]\n    return decodeURI(tag.childNodes[0].nodeValue)\n  }\n\n  function waitForAllFiles (form) {\n    if (window.uploading !== 0) {\n      setTimeout(function () {\n        waitForAllFiles(form)\n      }, 100)\n    } else {\n      window.HTMLFormElement.prototype.submit.call(form)\n    }\n  }\n\n  function request (method, url, data, fileInput, file, form) {\n    file.loaded = 0\n    return new Promise(function (resolve, reject) {\n      var xhr = new window.XMLHttpRequest()\n\n      xhr.onload = function () {\n        if (xhr.status === 201) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.statusText)\n        }\n      }\n\n      xhr.upload.onprogress = function (e) {\n        var diff = e.loaded - file.loaded\n        form.loaded += diff\n        fileInput.loaded += diff\n        file.loaded = e.loaded\n        var defaultEventData = {\n          currentFile: file,\n          currentFileName: file.name,\n          currentFileProgress: Math.min(e.loaded / e.total, 1),\n          originalEvent: e\n        }\n        form.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(form.loaded / form.total, 1),\n            loaded: form.loaded,\n            total: form.total\n          }, defaultEventData)\n        }))\n        fileInput.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(fileInput.loaded / fileInput.total, 1),\n            loaded: fileInput.loaded,\n            total: fileInput.total\n          }, defaultEventData)\n        }))\n      }\n\n      xhr.onerror = function () {\n        reject(xhr.statusText)\n      }\n\n      xhr.open(method, url)\n      xhr.send(data)\n    })\n  }\n\n  function uploadFiles (form, fileInput, name) {\n    var url = fileInput.getAttribute('data-url')\n    fileInput.loaded = 0\n    fileInput.total = 0\n    var promises = Array.from(fileInput.files).map(function (file) {\n      form.total += file.size\n      fileInput.total += file.size\n      var s3Form = new window.FormData()\n      Array.from(fileInput.attributes).forEach(function (attr) {\n        var name = attr.name\n\n        if (name.startsWith('data-fields')) {\n          name = name.replace('data-fields-', '')\n          s3Form.append(name, attr.value)\n        }\n      })\n      s3Form.append('success_action_status', '201')\n      s3Form.append('Content-Type', file.type)\n      s3Form.append('file', file)\n      return request('POST', url, s3Form, fileInput, file, form)\n    })\n    Promise.all(promises).then(function (results) {\n      results.forEach(function (result) {\n        var hiddenFileInput = document.createElement('input')\n        hiddenFileInput.type = 'hidden'\n        hiddenFileInput.name = name\n        hiddenFileInput.value = parseURL(result)\n        form.appendChild(hiddenFileInput)\n        var hiddenSignatureInput = document.createElement('input')\n        hiddenSignatureInput.type = 'hidden'\n        hiddenSignatureInput.name = name + '-s3f-signature'\n        console.log(fileInput.dataset.s3fSignature)\n        hiddenSignatureInput.value = fileInput.dataset.s3fSignature\n        form.appendChild(hiddenSignatureInput)\n      })\n      fileInput.name = ''\n      window.uploading -= 1\n    }, function (err) {\n      console.log(err)\n      fileInput.setCustomValidity(err)\n      fileInput.reportValidity()\n    })\n  }\n\n  function clickSubmit (e) {\n    var submitButton = e.target\n    var form = submitButton.closest('form')\n    var submitInput = document.createElement('input')\n    submitInput.type = 'hidden'\n    submitInput.value = submitButton.value || '1'\n    submitInput.name = submitButton.name\n    form.appendChild(submitInput)\n  }\n\n  function uploadS3Inputs (form) {\n    window.uploading = 0\n    form.loaded = 0\n    form.total = 0\n    var inputs = Array.from(form.querySelectorAll('.s3file'))\n\n    inputs.forEach(function (input) {\n      var hiddenS3Input = document.createElement('input')\n      hiddenS3Input.type = 'hidden'\n      hiddenS3Input.name = 's3file'\n      hiddenS3Input.value = input.name\n      form.appendChild(hiddenS3Input)\n    })\n    inputs.forEach(function (input) {\n      window.uploading += 1\n      uploadFiles(form, input, input.name)\n    })\n    waitForAllFiles(form)\n  }\n\n  document.addEventListener('DOMContentLoaded', function () {\n    var forms = Array.from(document.querySelectorAll('.s3file')).map(function (input) {\n      return input.closest('form')\n    })\n    forms = new Set(forms)\n    forms.forEach(function (form) {\n      form.addEventListener('submit', function (e) {\n        e.preventDefault()\n        uploadS3Inputs(e.target)\n      })\n      var submitButtons = form.querySelectorAll('input[type=submit], button[type=submit]')\n      Array.from(submitButtons).forEach(function (submitButton) {\n        submitButton.addEventListener('click', clickSubmit)\n      })\n    })\n  })\n})()\n", "import base64\nimport hashlib\nimport hmac\nimport logging\nfrom pathlib import Path\n\nfrom django import http\nfrom django.conf import settings\nfrom django.core.files.storage import default_storage\nfrom django.views import generic\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )\n", "import tempfile\nfrom pathlib import Path\n\nimport pytest\nfrom django.core.files.base import ContentFile\nfrom django.utils.encoding import force_str\nfrom selenium import webdriver\nfrom selenium.common.exceptions import WebDriverException\n\nfrom s3file.storages import storage\n\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.headless = True\n    try:\n        b = webdriver.Chrome(options=chrome_options)\n    except WebDriverException as e:\n        pytest.skip(force_str(e))\n    else:\n        yield b\n        b.quit()\n\n\n@pytest.fixture\ndef freeze_upload_folder(monkeypatch):\n    \"\"\"Freeze datetime and UUID.\"\"\"\n    upload_folder = Path(storage.aws_location) / \"tmp\" / \"s3file\"\n    monkeypatch.setattr(\n        \"s3file.forms.S3FileInputMixin.upload_folder\",\n        str(upload_folder),\n    )\n    return upload_folder\n\n\n@pytest.fixture\ndef upload_file(request, freeze_upload_folder):\n    path = Path(tempfile.mkdtemp()) / freeze_upload_folder / f\"{request.node.name}.txt\"\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef another_upload_file(request, freeze_upload_folder):\n    path = (\n        Path(tempfile.mkdtemp())\n        / freeze_upload_folder\n        / f\"another_{request.node.name}.txt\"\n    )\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef yet_another_upload_file(request, freeze_upload_folder):\n    path = (\n        Path(tempfile.mkdtemp())\n        / freeze_upload_folder\n        / f\"yet_another_{request.node.name}.txt\"\n    )\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef filemodel(request, db):\n    from tests.testapp.models import FileModel\n\n    return FileModel.objects.create(\n        file=ContentFile(request.node.name, \"%s.txt\" % request.node.name)\n    )\n", "import json\nimport os\nfrom contextlib import contextmanager\n\nimport pytest\nfrom django.forms import ClearableFileInput\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.expected_conditions import staleness_of\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom s3file.storages import storage\nfrom tests.testapp.forms import UploadForm\n\ntry:\n    from django.urls import reverse\nexcept ImportError:\n    # Django 1.8 support\n    from django.core.urlresolvers import reverse\n\n\n@contextmanager\ndef wait_for_page_load(driver, timeout=30):\n    old_page = driver.find_element(By.TAG_NAME, \"html\")\n    yield\n    WebDriverWait(driver, timeout).until(staleness_of(old_page))\n\n\nclass TestS3FileInput:\n    @property\n    def url(self):\n        return reverse(\"upload\")\n\n    def test_value_from_datadict(self, freeze_upload_folder, client, upload_file):\n        with open(upload_file) as f:\n            uploaded_file = storage.save(freeze_upload_folder / \"test.jpg\", f)\n        response = client.post(\n            reverse(\"upload\"),\n            {\n                \"file\": f\"custom/location/{uploaded_file}\",\n                \"file-s3f-signature\": \"m94qBxBsnMIuIICiY133kX18KkllSPMVbhGAdAwNn1A\",\n                \"s3file\": \"file\",\n            },\n        )\n\n        assert response.status_code == 201\n\n    def test_value_from_datadict_initial_data(self, filemodel):\n        form = UploadForm(instance=filemodel)\n        assert filemodel.file.name in form.as_p(), form.as_p()\n        assert not form.is_valid()\n\n    def test_file_does_not_exist_no_fallback(self, filemodel):\n        form = UploadForm(\n            data={\"file\": \"foo.bar\", \"s3file\": \"file\"},\n            instance=filemodel,\n        )\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_no_file_uploaded(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid(), form.errors\n        assert not form.has_changed()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_fallback(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_clear(self, filemodel):\n        form = UploadForm(data={\"file-clear\": \"1\"}, instance=filemodel)\n        assert form.is_valid()\n        assert not form.cleaned_data[\"file\"]\n\n    def test_build_attr(self, freeze_upload_folder):\n        assert set(ClearableFileInput().build_attrs({}).keys()) == {\n            \"class\",\n            \"data-url\",\n            \"data-fields-x-amz-algorithm\",\n            \"data-fields-x-amz-date\",\n            \"data-fields-x-amz-signature\",\n            \"data-fields-x-amz-credential\",\n            \"data-fields-policy\",\n            \"data-fields-key\",\n            \"data-s3f-signature\",\n        }\n        assert (\n            ClearableFileInput().build_attrs({})[\"data-s3f-signature\"]\n            == \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\"\n        )\n        assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n        assert (\n            ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n            == \"my-class s3file\"\n        )\n\n    def test_get_conditions(self, freeze_upload_folder):\n        conditions = ClearableFileInput().get_conditions(None)\n        assert all(\n            condition in conditions\n            for condition in [\n                {\"bucket\": \"test-bucket\"},\n                {\"success_action_status\": \"201\"},\n                [\"starts-with\", \"$key\", \"custom/location/tmp/s3file\"],\n                [\"starts-with\", \"$Content-Type\", \"\"],\n            ]\n        ), conditions\n\n    def test_accept(self):\n        widget = ClearableFileInput()\n        assert \"accept\" not in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(None)\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/*\"})\n        assert 'accept=\"image/*\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"image/\"] in widget.get_conditions(\n            \"image/*\"\n        )\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/jpeg\"})\n        assert 'accept=\"image/jpeg\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert {\"Content-Type\": \"image/jpeg\"} in widget.get_conditions(\"image/jpeg\")\n\n        widget = ClearableFileInput(attrs={\"accept\": \"application/pdf,image/*\"})\n        assert 'accept=\"application/pdf,image/*\"' in widget.render(\n            name=\"file\",\n            value=\"test.jpg\",\n        )\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n        assert {\"Content-Type\": \"application/pdf\"} not in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n\n    def test_no_js_error(self, driver, live_server):\n        driver.get(live_server + self.url)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert(\n        self, request, driver, live_server, upload_file, freeze_upload_folder\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        with wait_for_page_load(driver, timeout=10):\n            file_input.submit()\n        assert storage.exists(\"tmp/s3file/%s.txt\" % request.node.name)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert_submit_value(\n        self, driver, live_server, upload_file, freeze_upload_folder\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save_continue\" in driver.page_source\n        assert \"continue_value\" in driver.page_source\n\n    def test_progress(self, driver, live_server, upload_file, freeze_upload_folder):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"POST\"][\"progress\"] == \"1\"\n\n    def test_multi_file(\n        self,\n        driver,\n        live_server,\n        freeze_upload_folder,\n        upload_file,\n        another_upload_file,\n        yet_another_upload_file,\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(\n            \" \\n \".join(\n                [\n                    str(freeze_upload_folder / upload_file),\n                    str(freeze_upload_folder / another_upload_file),\n                ]\n            )\n        )\n        file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n        file_input.send_keys(str(freeze_upload_folder / yet_another_upload_file))\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"FILES\"] == {\n            \"file\": [\n                os.path.basename(upload_file),\n                os.path.basename(another_upload_file),\n            ],\n            \"other_file\": [os.path.basename(yet_another_upload_file)],\n        }\n\n    def test_media(self):\n        assert ClearableFileInput().media._js == [\"s3file/js/s3file.js\"]\n\n    def test_upload_folder(self):\n        assert \"custom/location/tmp/s3file/\" in ClearableFileInput().upload_folder\n        assert len(os.path.basename(ClearableFileInput().upload_folder)) == 22\n", "import os\n\nimport pytest\nfrom django.core.exceptions import PermissionDenied, SuspiciousFileOperation\nfrom django.core.files.base import ContentFile\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom s3file.middleware import S3FileMiddleware\nfrom s3file.storages import storage\n\n\nclass TestS3FileMiddleware:\n    def test_get_files_from_storage(self, freeze_upload_folder):\n        content = b\"test_get_files_from_storage\"\n        name = storage.save(\n            \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n        )\n        files = S3FileMiddleware.get_files_from_storage(\n            [os.path.join(storage.aws_location, name)],\n            \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n        )\n        file = next(files)\n        assert file.read() == content\n\n    def test_process_request(self, freeze_upload_folder, rf):\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__location_escape(self, freeze_upload_folder, rf):\n        storage.save(\"secrets/passwords.txt\", ContentFile(b\"keep this secret\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/secrets/passwords.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n        assert \"Illegal signature!\" in str(e.value)\n\n    def test_process_request__multiple_files(self, freeze_upload_folder, rf):\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": [\n                    \"custom/location/tmp/s3file/s3_file.txt\",\n                    \"custom/location/tmp/s3file/s3_other_file.txt\",\n                ],\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                \"other_file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                \"s3file\": [\"file\", \"other_file\"],\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        files = request.FILES.getlist(\"file\")\n        assert files[0].read() == b\"s3file\"\n        assert files[1].read() == b\"other s3file\"\n\n    def test_process_request__no_location(self, freeze_upload_folder, rf, settings):\n        settings.AWS_LOCATION = \"\"\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": f\"tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"scjzm3N8njBQIVSGEhOchtM0TkGyb2U6OXGLVlRUZhY\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__no_file(self, freeze_upload_folder, rf, caplog):\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/does_not_exist.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert not request.FILES.getlist(\"file\")\n        assert (\n            \"File not found: custom/location/tmp/s3file/does_not_exist.txt\"\n            in caplog.text\n        )\n\n    def test_process_request__no_signature(self, rf, caplog):\n        request = rf.post(\n            \"/\", data={\"file\": \"tmp/s3file/does_not_exist.txt\", \"s3file\": \"file\"}\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n\n    def test_process_request__wrong_signature(self, rf, caplog):\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"tmp/s3file/does_not_exist.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"fake\",\n            },\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n"], "filenames": ["s3file/forms.py", "s3file/middleware.py", "s3file/static/s3file/js/s3file.js", "s3file/views.py", "tests/conftest.py", "tests/test_forms.py", "tests/test_middleware.py"], "buggy_code_start_loc": [6, 4, 96, 4, 1, 34, 2], "buggy_code_end_loc": [47, 37, 96, 4, 49, 215, 80], "fixing_code_start_loc": [7, 4, 97, 5, 0, 34, 3], "fixing_code_end_loc": [58, 66, 103, 6, 70, 223, 134], "type": "CWE-22", "message": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version.", "other": {"cve": {"id": "CVE-2022-24840", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-09T04:15:10.707", "lastModified": "2022-06-17T15:50:50.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version."}, {"lang": "es", "value": "django-s3file es una entrada ligera de subida de archivos para Django y Amazon S3 . En versiones anteriores a 5.5.1, era posible recorrer todo el bucket de AWS S3 y en la mayor\u00eda de los casos acceder o eliminar archivos. Si el ajuste \"AWS_LOCATION\" estaba configurado, el recorrido se limitaba s\u00f3lo a esa ubicaci\u00f3n. El problema fue detectado por el mantenedor. No se presentan informes de que la vulnerabilidad sea conocida o explotada por terceros, antes de la publicaci\u00f3n del parche. La vulnerabilidad ha sido corregida en versi\u00f3n 5.5.1 y superiores. No se presenta ninguna mitigaci\u00f3n viable. Debemos instar a todos los usuarios a actualizar inmediatamente a la versi\u00f3n parcheada"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:django-s3file_project:django-s3file:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.5.1", "matchCriteriaId": "A7EFD2FC-D3B5-4C07-ABA9-66B318FD04F1"}]}]}], "references": [{"url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318"}}