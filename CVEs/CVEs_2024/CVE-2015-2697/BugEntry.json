{"buggy_code": ["/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/* lib/krb5/krb/bld_princ.c - Build a principal from a list of strings */\n/*\n * Copyright 1991 by the Massachusetts Institute of Technology.\n * All Rights Reserved.\n *\n * Export of this software from the United States of America may\n *   require a specific license from the United States Government.\n *   It is the responsibility of any person or organization contemplating\n *   export to obtain such a license before exporting.\n *\n * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and\n * distribute this software and its documentation for any purpose and\n * without fee is hereby granted, provided that the above copyright\n * notice appear in all copies and that both that copyright notice and\n * this permission notice appear in supporting documentation, and that\n * the name of M.I.T. not be used in advertising or publicity pertaining\n * to distribution of the software without specific, written prior\n * permission.  Furthermore if you modify this software you must label\n * your software as modified software and not distribute it in such a\n * fashion that it might be confused with the original M.I.T. software.\n * M.I.T. makes no representations about the suitability of\n * this software for any purpose.  It is provided \"as is\" without express\n * or implied warranty.\n */\n\n#include \"k5-int.h\"\n\nstatic krb5_error_code\nbuild_principal_va(krb5_context context, krb5_principal princ,\n                   unsigned int rlen, const char *realm, va_list ap)\n{\n    krb5_error_code retval = 0;\n    char *r = NULL;\n    krb5_data *data = NULL;\n    krb5_int32 count = 0;\n    krb5_int32 size = 2;  /* initial guess at needed space */\n    char *component = NULL;\n\n    data = malloc(size * sizeof(krb5_data));\n    if (!data) { retval = ENOMEM; }\n\n    if (!retval) {\n        r = strdup(realm);\n        if (!r) { retval = ENOMEM; }\n    }\n\n    while (!retval && (component = va_arg(ap, char *))) {\n        if (count == size) {\n            krb5_data *new_data = NULL;\n\n            size *= 2;\n            new_data = realloc(data, size * sizeof(krb5_data));\n            if (new_data) {\n                data = new_data;\n            } else {\n                retval = ENOMEM;\n            }\n        }\n\n        if (!retval) {\n            data[count].length = strlen(component);\n            data[count].data = strdup(component);\n            if (!data[count].data) { retval = ENOMEM; }\n            count++;\n        }\n    }\n\n    if (!retval) {\n        princ->type = KRB5_NT_UNKNOWN;\n        princ->magic = KV5M_PRINCIPAL;\n        princ->realm = make_data(r, rlen);\n        princ->data = data;\n        princ->length = count;\n        r = NULL;    /* take ownership */\n        data = NULL; /* take ownership */\n    }\n\n    if (data) {\n        while (--count >= 0) {\n            free(data[count].data);\n        }\n        free(data);\n    }\n    free(r);\n\n    return retval;\n}\n\nkrb5_error_code KRB5_CALLCONV\nkrb5_build_principal_va(krb5_context context,\n                        krb5_principal princ,\n                        unsigned int rlen,\n                        const char *realm,\n                        va_list ap)\n{\n    return build_principal_va(context, princ, rlen, realm, ap);\n}\n\nkrb5_error_code KRB5_CALLCONV\nkrb5_build_principal_alloc_va(krb5_context context,\n                              krb5_principal *princ,\n                              unsigned int rlen,\n                              const char *realm,\n                              va_list ap)\n{\n    krb5_error_code retval = 0;\n    krb5_principal p;\n\n    p = malloc(sizeof(krb5_principal_data));\n    if (p == NULL)\n        return ENOMEM;\n\n    retval = build_principal_va(context, p, rlen, realm, ap);\n    if (retval) {\n        free(p);\n        return retval;\n    }\n\n    *princ = p;\n    return 0;\n}\n\nkrb5_error_code KRB5_CALLCONV_C\nkrb5_build_principal(krb5_context context,\n                     krb5_principal * princ,\n                     unsigned int rlen,\n                     const char * realm, ...)\n{\n    krb5_error_code retval = 0;\n    va_list ap;\n\n    va_start(ap, realm);\n    retval = krb5_build_principal_alloc_va(context, princ, rlen, realm, ap);\n    va_end(ap);\n\n    return retval;\n}\n\n/*Anonymous and well known principals*/\nstatic const char anon_realm_str[] = KRB5_ANONYMOUS_REALMSTR;\nstatic const krb5_data anon_realm_data = {\n    KV5M_DATA, sizeof(anon_realm_str) - 1, (char *) anon_realm_str\n};\nstatic const char wellknown_str[] = KRB5_WELLKNOWN_NAMESTR;\nstatic const char anon_str[] = KRB5_ANONYMOUS_PRINCSTR;\nstatic const krb5_data anon_princ_data[] = {\n    { KV5M_DATA, sizeof(wellknown_str) - 1, (char *) wellknown_str },\n    { KV5M_DATA, sizeof(anon_str) - 1, (char *) anon_str }\n};\n\nconst krb5_principal_data anon_princ = {\n    KV5M_PRINCIPAL,\n    { KV5M_DATA, sizeof(anon_realm_str) - 1, (char *) anon_realm_str },\n    (krb5_data *) anon_princ_data, 2, KRB5_NT_WELLKNOWN\n};\n\nconst krb5_data * KRB5_CALLCONV\nkrb5_anonymous_realm()\n{\n    return &anon_realm_data;\n}\n\nkrb5_const_principal KRB5_CALLCONV\nkrb5_anonymous_principal()\n{\n    return &anon_princ;\n}\n"], "fixing_code": ["/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/* lib/krb5/krb/bld_princ.c - Build a principal from a list of strings */\n/*\n * Copyright 1991 by the Massachusetts Institute of Technology.\n * All Rights Reserved.\n *\n * Export of this software from the United States of America may\n *   require a specific license from the United States Government.\n *   It is the responsibility of any person or organization contemplating\n *   export to obtain such a license before exporting.\n *\n * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and\n * distribute this software and its documentation for any purpose and\n * without fee is hereby granted, provided that the above copyright\n * notice appear in all copies and that both that copyright notice and\n * this permission notice appear in supporting documentation, and that\n * the name of M.I.T. not be used in advertising or publicity pertaining\n * to distribution of the software without specific, written prior\n * permission.  Furthermore if you modify this software you must label\n * your software as modified software and not distribute it in such a\n * fashion that it might be confused with the original M.I.T. software.\n * M.I.T. makes no representations about the suitability of\n * this software for any purpose.  It is provided \"as is\" without express\n * or implied warranty.\n */\n\n#include \"k5-int.h\"\n\nstatic krb5_error_code\nbuild_principal_va(krb5_context context, krb5_principal princ,\n                   unsigned int rlen, const char *realm, va_list ap)\n{\n    krb5_error_code retval = 0;\n    char *r = NULL;\n    krb5_data *data = NULL;\n    krb5_int32 count = 0;\n    krb5_int32 size = 2;  /* initial guess at needed space */\n    char *component = NULL;\n\n    data = malloc(size * sizeof(krb5_data));\n    if (!data) { retval = ENOMEM; }\n\n    if (!retval)\n        r = k5memdup0(realm, rlen, &retval);\n\n    while (!retval && (component = va_arg(ap, char *))) {\n        if (count == size) {\n            krb5_data *new_data = NULL;\n\n            size *= 2;\n            new_data = realloc(data, size * sizeof(krb5_data));\n            if (new_data) {\n                data = new_data;\n            } else {\n                retval = ENOMEM;\n            }\n        }\n\n        if (!retval) {\n            data[count].length = strlen(component);\n            data[count].data = strdup(component);\n            if (!data[count].data) { retval = ENOMEM; }\n            count++;\n        }\n    }\n\n    if (!retval) {\n        princ->type = KRB5_NT_UNKNOWN;\n        princ->magic = KV5M_PRINCIPAL;\n        princ->realm = make_data(r, rlen);\n        princ->data = data;\n        princ->length = count;\n        r = NULL;    /* take ownership */\n        data = NULL; /* take ownership */\n    }\n\n    if (data) {\n        while (--count >= 0) {\n            free(data[count].data);\n        }\n        free(data);\n    }\n    free(r);\n\n    return retval;\n}\n\nkrb5_error_code KRB5_CALLCONV\nkrb5_build_principal_va(krb5_context context,\n                        krb5_principal princ,\n                        unsigned int rlen,\n                        const char *realm,\n                        va_list ap)\n{\n    return build_principal_va(context, princ, rlen, realm, ap);\n}\n\nkrb5_error_code KRB5_CALLCONV\nkrb5_build_principal_alloc_va(krb5_context context,\n                              krb5_principal *princ,\n                              unsigned int rlen,\n                              const char *realm,\n                              va_list ap)\n{\n    krb5_error_code retval = 0;\n    krb5_principal p;\n\n    p = malloc(sizeof(krb5_principal_data));\n    if (p == NULL)\n        return ENOMEM;\n\n    retval = build_principal_va(context, p, rlen, realm, ap);\n    if (retval) {\n        free(p);\n        return retval;\n    }\n\n    *princ = p;\n    return 0;\n}\n\nkrb5_error_code KRB5_CALLCONV_C\nkrb5_build_principal(krb5_context context,\n                     krb5_principal * princ,\n                     unsigned int rlen,\n                     const char * realm, ...)\n{\n    krb5_error_code retval = 0;\n    va_list ap;\n\n    va_start(ap, realm);\n    retval = krb5_build_principal_alloc_va(context, princ, rlen, realm, ap);\n    va_end(ap);\n\n    return retval;\n}\n\n/*Anonymous and well known principals*/\nstatic const char anon_realm_str[] = KRB5_ANONYMOUS_REALMSTR;\nstatic const krb5_data anon_realm_data = {\n    KV5M_DATA, sizeof(anon_realm_str) - 1, (char *) anon_realm_str\n};\nstatic const char wellknown_str[] = KRB5_WELLKNOWN_NAMESTR;\nstatic const char anon_str[] = KRB5_ANONYMOUS_PRINCSTR;\nstatic const krb5_data anon_princ_data[] = {\n    { KV5M_DATA, sizeof(wellknown_str) - 1, (char *) wellknown_str },\n    { KV5M_DATA, sizeof(anon_str) - 1, (char *) anon_str }\n};\n\nconst krb5_principal_data anon_princ = {\n    KV5M_PRINCIPAL,\n    { KV5M_DATA, sizeof(anon_realm_str) - 1, (char *) anon_realm_str },\n    (krb5_data *) anon_princ_data, 2, KRB5_NT_WELLKNOWN\n};\n\nconst krb5_data * KRB5_CALLCONV\nkrb5_anonymous_realm()\n{\n    return &anon_realm_data;\n}\n\nkrb5_const_principal KRB5_CALLCONV\nkrb5_anonymous_principal()\n{\n    return &anon_princ;\n}\n"], "filenames": ["src/lib/krb5/krb/bld_princ.c"], "buggy_code_start_loc": [43], "buggy_code_end_loc": [47], "fixing_code_start_loc": [43], "fixing_code_end_loc": [45], "type": "CWE-125", "message": "The build_principal_va function in lib/krb5/krb/bld_princ.c in MIT Kerberos 5 (aka krb5) before 1.14 allows remote authenticated users to cause a denial of service (out-of-bounds read and KDC crash) via an initial '\\0' character in a long realm field within a TGS request.", "other": {"cve": {"id": "CVE-2015-2697", "sourceIdentifier": "cve@mitre.org", "published": "2015-11-09T03:59:03.343", "lastModified": "2021-02-02T19:06:45.520", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The build_principal_va function in lib/krb5/krb/bld_princ.c in MIT Kerberos 5 (aka krb5) before 1.14 allows remote authenticated users to cause a denial of service (out-of-bounds read and KDC crash) via an initial '\\0' character in a long realm field within a TGS request."}, {"lang": "es", "value": "La funci\u00f3n build_principal_va en lib/krb5/krb/bld_princ.c en MIT Kerberos 5 (tambi\u00e9n conocido como krb5) en versiones anteriores a 1.14 permite a usuarios remotos autenticados provocar una denegaci\u00f3n de servicio (lectura fuera de rango y ca\u00edda de KDC) a trav\u00e9s de un car\u00e1cter inicial '\\0' en un campo realm largo dentro de una solicitud TGS."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mit:kerberos_5:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.14", "matchCriteriaId": "0A215EB7-53BD-44AD-B546-DDF20B3797A6"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:oracle:solaris:11.3:*:*:*:*:*:*:*", "matchCriteriaId": "79A602C5-61FE-47BA-9786-F045B6C6DBA8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:-:*:*:*", "matchCriteriaId": "CB66DB75-2B16-4EBF-9B93-CE49D8086E41"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:esm:*:*:*", "matchCriteriaId": "815D70A8-47D3-459C-A32C-9FEACA0659D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:15.04:*:*:*:*:*:*:*", "matchCriteriaId": "F38D3B7E-8429-473F-BB31-FC3583EE5A5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:15.10:*:*:*:*:*:*:*", "matchCriteriaId": "E88A537F-F4D0-46B9-9E37-965233C2A355"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_desktop:12:-:*:*:*:*:*:*", "matchCriteriaId": "D2DF4815-B8CB-4AD3-B91D-2E09A8E318E9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:-:*:*:*:*:*:*", "matchCriteriaId": "15FC9014-BD85-4382-9D04-C0703E901D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_software_development_kit:12:-:*:*:*:*:*:*", "matchCriteriaId": "1831D45A-EE6E-4220-8F8C-248B69520948"}]}]}], "references": [{"url": "http://krbdev.mit.edu/rt/Ticket/Display.html?id=8252", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-11/msg00006.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-11/msg00014.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-11/msg00022.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.debian.org/security/2015/dsa-3395", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.oracle.com/technetwork/topics/security/bulletinapr2016-2952098.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/77581", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1034084", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-2810-1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/krb5/krb5/commit/f0c094a1b745d91ef2f9a4eae2149aac026a5789", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201611-14", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/krb5/krb5/commit/f0c094a1b745d91ef2f9a4eae2149aac026a5789"}}