{"buggy_code": ["/*\n * Copyright (C) 2012 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage retrofit2;\n\nimport java.io.IOException;\nimport javax.annotation.Nullable;\nimport okhttp3.FormBody;\nimport okhttp3.Headers;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okio.Buffer;\nimport okio.BufferedSink;\n\nfinal class RequestBuilder {\n  private static final char[] HEX_DIGITS =\n      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n  private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = \" \\\"<>^`{}|\\\\?#\";\n\n  private final String method;\n\n  private final HttpUrl baseUrl;\n  private @Nullable String relativeUrl;\n  private @Nullable HttpUrl.Builder urlBuilder;\n\n  private final Request.Builder requestBuilder;\n  private @Nullable MediaType contentType;\n\n  private final boolean hasBody;\n  private @Nullable MultipartBody.Builder multipartBuilder;\n  private @Nullable FormBody.Builder formBuilder;\n  private @Nullable RequestBody body;\n\n  RequestBuilder(String method, HttpUrl baseUrl,\n      @Nullable String relativeUrl, @Nullable Headers headers, @Nullable MediaType contentType,\n      boolean hasBody, boolean isFormEncoded, boolean isMultipart) {\n    this.method = method;\n    this.baseUrl = baseUrl;\n    this.relativeUrl = relativeUrl;\n    this.requestBuilder = new Request.Builder();\n    this.contentType = contentType;\n    this.hasBody = hasBody;\n\n    if (headers != null) {\n      requestBuilder.headers(headers);\n    }\n\n    if (isFormEncoded) {\n      // Will be set to 'body' in 'build'.\n      formBuilder = new FormBody.Builder();\n    } else if (isMultipart) {\n      // Will be set to 'body' in 'build'.\n      multipartBuilder = new MultipartBody.Builder();\n      multipartBuilder.setType(MultipartBody.FORM);\n    }\n  }\n\n  void setRelativeUrl(Object relativeUrl) {\n    this.relativeUrl = relativeUrl.toString();\n  }\n\n  void addHeader(String name, String value) {\n    if (\"Content-Type\".equalsIgnoreCase(name)) {\n      try {\n        contentType = MediaType.get(value);\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"Malformed content type: \" + value, e);\n      }\n    } else {\n      requestBuilder.addHeader(name, value);\n    }\n  }\n\n  void addPathParam(String name, String value, boolean encoded) {\n    if (relativeUrl == null) {\n      // The relative URL is cleared when the first query parameter is set.\n      throw new AssertionError();\n    }\n    relativeUrl = relativeUrl.replace(\"{\" + name + \"}\", canonicalizeForPath(value, encoded));\n  }\n\n  private static String canonicalizeForPath(String input, boolean alreadyEncoded) {\n    int codePoint;\n    for (int i = 0, limit = input.length(); i < limit; i += Character.charCount(codePoint)) {\n      codePoint = input.codePointAt(i);\n      if (codePoint < 0x20 || codePoint >= 0x7f\n          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1\n          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {\n        // Slow path: the character at i requires encoding!\n        Buffer out = new Buffer();\n        out.writeUtf8(input, 0, i);\n        canonicalizeForPath(out, input, i, limit, alreadyEncoded);\n        return out.readUtf8();\n      }\n    }\n\n    // Fast path: no characters required encoding.\n    return input;\n  }\n\n  private static void canonicalizeForPath(Buffer out, String input, int pos, int limit,\n      boolean alreadyEncoded) {\n    Buffer utf8Buffer = null; // Lazily allocated.\n    int codePoint;\n    for (int i = pos; i < limit; i += Character.charCount(codePoint)) {\n      codePoint = input.codePointAt(i);\n      if (alreadyEncoded\n          && (codePoint == '\\t' || codePoint == '\\n' || codePoint == '\\f' || codePoint == '\\r')) {\n        // Skip this character.\n      } else if (codePoint < 0x20 || codePoint >= 0x7f\n          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1\n          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {\n        // Percent encode this character.\n        if (utf8Buffer == null) {\n          utf8Buffer = new Buffer();\n        }\n        utf8Buffer.writeUtf8CodePoint(codePoint);\n        while (!utf8Buffer.exhausted()) {\n          int b = utf8Buffer.readByte() & 0xff;\n          out.writeByte('%');\n          out.writeByte(HEX_DIGITS[(b >> 4) & 0xf]);\n          out.writeByte(HEX_DIGITS[b & 0xf]);\n        }\n      } else {\n        // This character doesn't need encoding. Just copy it over.\n        out.writeUtf8CodePoint(codePoint);\n      }\n    }\n  }\n\n  void addQueryParam(String name, @Nullable String value, boolean encoded) {\n    if (relativeUrl != null) {\n      // Do a one-time combination of the built relative URL and the base URL.\n      urlBuilder = baseUrl.newBuilder(relativeUrl);\n      if (urlBuilder == null) {\n        throw new IllegalArgumentException(\n            \"Malformed URL. Base: \" + baseUrl + \", Relative: \" + relativeUrl);\n      }\n      relativeUrl = null;\n    }\n\n    if (encoded) {\n      //noinspection ConstantConditions Checked to be non-null by above 'if' block.\n      urlBuilder.addEncodedQueryParameter(name, value);\n    } else {\n      //noinspection ConstantConditions Checked to be non-null by above 'if' block.\n      urlBuilder.addQueryParameter(name, value);\n    }\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isFormEncoded was true.\n  void addFormField(String name, String value, boolean encoded) {\n    if (encoded) {\n      formBuilder.addEncoded(name, value);\n    } else {\n      formBuilder.add(name, value);\n    }\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isMultipart was true.\n  void addPart(Headers headers, RequestBody body) {\n    multipartBuilder.addPart(headers, body);\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isMultipart was true.\n  void addPart(MultipartBody.Part part) {\n    multipartBuilder.addPart(part);\n  }\n\n  void setBody(RequestBody body) {\n    this.body = body;\n  }\n\n  Request.Builder get() {\n    HttpUrl url;\n    HttpUrl.Builder urlBuilder = this.urlBuilder;\n    if (urlBuilder != null) {\n      url = urlBuilder.build();\n    } else {\n      // No query parameters triggered builder creation, just combine the relative URL and base URL.\n      //noinspection ConstantConditions Non-null if urlBuilder is null.\n      url = baseUrl.resolve(relativeUrl);\n      if (url == null) {\n        throw new IllegalArgumentException(\n            \"Malformed URL. Base: \" + baseUrl + \", Relative: \" + relativeUrl);\n      }\n    }\n\n    RequestBody body = this.body;\n    if (body == null) {\n      // Try to pull from one of the builders.\n      if (formBuilder != null) {\n        body = formBuilder.build();\n      } else if (multipartBuilder != null) {\n        body = multipartBuilder.build();\n      } else if (hasBody) {\n        // Body is absent, make an empty body.\n        body = RequestBody.create(null, new byte[0]);\n      }\n    }\n\n    MediaType contentType = this.contentType;\n    if (contentType != null) {\n      if (body != null) {\n        body = new ContentTypeOverridingRequestBody(body, contentType);\n      } else {\n        requestBuilder.addHeader(\"Content-Type\", contentType.toString());\n      }\n    }\n\n    return requestBuilder\n        .url(url)\n        .method(method, body);\n  }\n\n  private static class ContentTypeOverridingRequestBody extends RequestBody {\n    private final RequestBody delegate;\n    private final MediaType contentType;\n\n    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {\n      this.delegate = delegate;\n      this.contentType = contentType;\n    }\n\n    @Override public MediaType contentType() {\n      return contentType;\n    }\n\n    @Override public long contentLength() throws IOException {\n      return delegate.contentLength();\n    }\n\n    @Override public void writeTo(BufferedSink sink) throws IOException {\n      delegate.writeTo(sink);\n    }\n  }\n}\n", "/*\n * Copyright (C) 2013 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage retrofit2;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.ResponseBody;\nimport okio.Buffer;\nimport org.junit.Test;\nimport retrofit2.helpers.NullObjectConverterFactory;\nimport retrofit2.helpers.ToStringConverterFactory;\nimport retrofit2.http.Body;\nimport retrofit2.http.DELETE;\nimport retrofit2.http.Field;\nimport retrofit2.http.FieldMap;\nimport retrofit2.http.FormUrlEncoded;\nimport retrofit2.http.GET;\nimport retrofit2.http.HEAD;\nimport retrofit2.http.HTTP;\nimport retrofit2.http.Header;\nimport retrofit2.http.HeaderMap;\nimport retrofit2.http.Headers;\nimport retrofit2.http.Multipart;\nimport retrofit2.http.OPTIONS;\nimport retrofit2.http.PATCH;\nimport retrofit2.http.POST;\nimport retrofit2.http.PUT;\nimport retrofit2.http.Part;\nimport retrofit2.http.PartMap;\nimport retrofit2.http.Path;\nimport retrofit2.http.Query;\nimport retrofit2.http.QueryMap;\nimport retrofit2.http.QueryName;\nimport retrofit2.http.Url;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.fail;\n\n@SuppressWarnings({\"UnusedParameters\", \"unused\"}) // Parameters inspected reflectively.\npublic final class RequestFactoryTest {\n  private static final MediaType TEXT_PLAIN = MediaType.get(\"text/plain\");\n\n  @Test public void customMethodNoBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM1\", path = \"/foo\")\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"CUSTOM1\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void customMethodWithBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM2\", path = \"/foo\", hasBody = true)\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"CUSTOM2\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void onlyOneEncodingIsAllowedMultipartFirst() {\n    class Example {\n      @Multipart //\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Only one encoding annotation is allowed.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void onlyOneEncodingIsAllowedFormEncodingFirst() {\n    class Example {\n      @FormUrlEncoded //\n      @Multipart //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Only one encoding annotation is allowed.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void invalidPathParam() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Path(\"hey!\") String thing) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Path parameter name must match \\\\{([a-zA-Z][a-zA-Z0-9_-]*)\\\\}.\"\n              + \" Found: hey! (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void pathParamNotAllowedInQuery() throws Exception {\n    class Example {\n      @GET(\"/foo?bar={bar}\") //\n      Call<ResponseBody> method(@Path(\"bar\") String thing) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"URL query string \\\"bar={bar}\\\" must not have replace block.\"\n              + \" For dynamic query parameters use @Query.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Body @Query(\"nope\") String o) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multiple Retrofit annotations found, only one allowed. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @interface NonNull {}\n\n  @Test public void multipleParameterAnnotationsOnlyOneRetrofitAllowed() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Query(\"maybe\") @NonNull Object o) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"yep\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/?maybe=yep\");\n  }\n\n  @Test public void twoMethodsFail() {\n    class Example {\n      @PATCH(\"/foo\") //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n        assertThat(e.getMessage())\n            .isIn(\"Only one HTTP method is allowed. Found: PATCH and POST.\\n    for method Example.method\",\n                  \"Only one HTTP method is allowed. Found: POST and PATCH.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void lackingMethod() {\n    class Example {\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"HTTP method annotation is required (e.g., @GET, @POST, etc.).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitMultipartForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Part(\"a\") int a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters can only be used with multipart encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitMultipartWithPartMapForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@PartMap Map<String, String> params) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap parameters can only be used with multipart encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartFailsOnNonBodyMethod() {\n    class Example {\n      @Multipart //\n      @GET(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartFailsWithNoParts() {\n    class Example {\n      @Multipart //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multipart method must contain at least one @Part.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitFormEncodingByFieldForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Field(\"a\") int a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Field parameters can only be used with form encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitFormEncodingByFieldMapForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@FieldMap parameters can only be used with form encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void formEncodingFailsOnNonBodyMethod() {\n    class Example {\n      @FormUrlEncoded //\n      @GET(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void formEncodingFailsWithNoParts() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Form-encoded method must contain at least one @Field.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headersFailWhenEmptyOnMethod() {\n    class Example {\n      @GET(\"/\") //\n      @Headers({}) //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Headers annotation is empty.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headersFailWhenMalformed() {\n    class Example {\n      @GET(\"/\") //\n      @Headers(\"Malformed\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"Malformed\\\"\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void pathParamNonPathParamAndTypedBytes() {\n    class Example {\n      @PUT(\"/{a}\") //\n      Call<ResponseBody> method(@Path(\"a\") int a, @Path(\"b\") int b, @Body int c) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"URL \\\"/{a}\\\" does not contain \\\"{b}\\\". (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void parameterWithoutAnnotation() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(String a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"No Retrofit annotation found. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void nonBodyHttpMethodWithSingleEntity() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Body String o) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Non-body HTTP method cannot contain @Body.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void queryMapMustBeAMap() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap List<String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@QueryMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void queryMapSupportsSubclasses() {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Foo a) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/?hello=world\");\n  }\n\n  @Test public void queryMapRejectsNull() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map was null.\");\n    }\n  }\n\n  @Test public void queryMapRejectsNullKeys() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Map<String, String> queryParams = new LinkedHashMap<>();\n    queryParams.put(\"ping\", \"pong\");\n    queryParams.put(null, \"kat\");\n\n    try {\n      buildRequest(Example.class, queryParams);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map contained null key.\");\n    }\n  }\n\n  @Test public void queryMapRejectsNullValues() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Map<String, String> queryParams = new LinkedHashMap<>();\n    queryParams.put(\"ping\", \"pong\");\n    queryParams.put(\"kit\", null);\n\n    try {\n      buildRequest(Example.class, queryParams);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map contained null value for key 'kit'.\");\n    }\n  }\n\n  @Test public void getWithHeaderMap() {\n    class Example {\n      @GET(\"/search\")\n      Call<ResponseBody> method(@HeaderMap Map<String, Object> headers) {\n        return null;\n      }\n    }\n\n    Map<String, Object> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(\"Accept-Charset\", \"utf-8\");\n\n    Request request = buildRequest(Example.class, headers);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/search\");\n    assertThat(request.body()).isNull();\n    assertThat(request.headers().size()).isEqualTo(2);\n    assertThat(request.header(\"Accept\")).isEqualTo(\"text/plain\");\n    assertThat(request.header(\"Accept-Charset\")).isEqualTo(\"utf-8\");\n  }\n\n  @Test public void headerMapMustBeAMap() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap List<String> headers) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@HeaderMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headerMapSupportsSubclasses() {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @GET(\"/search\")\n      Call<ResponseBody> method(@HeaderMap Foo headers) {\n        return null;\n      }\n    }\n\n    Foo headers = new Foo();\n    headers.put(\"Accept\", \"text/plain\");\n\n    Request request = buildRequest(Example.class, headers);\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/search\");\n    assertThat(request.headers().size()).isEqualTo(1);\n    assertThat(request.header(\"Accept\")).isEqualTo(\"text/plain\");\n  }\n\n  @Test public void headerMapRejectsNull() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, (Map<String, String>) null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map was null.\");\n    }\n  }\n\n  @Test public void headerMapRejectsNullKeys() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    Map<String, String> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(null, \"utf-8\");\n\n    try {\n      buildRequest(Example.class, headers);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map contained null key.\");\n    }\n  }\n\n  @Test public void headerMapRejectsNullValues() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    Map<String, String> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(\"Accept-Charset\", null);\n\n    try {\n      buildRequest(Example.class, headers);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map contained null value for key 'Accept-Charset'.\");\n    }\n  }\n\n  @Test public void twoBodies() {\n    class Example {\n      @PUT(\"/\") //\n      Call<ResponseBody> method(@Body String o1, @Body String o2) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multiple @Body method annotations found. (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void bodyInNonBodyRequest() {\n    class Example {\n      @Multipart //\n      @PUT(\"/\") //\n      Call<ResponseBody> method(@Part(\"one\") String o1, @Body String o2) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Body parameters cannot be used with form or multi-part encoding. (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void get() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void delete() {\n    class Example {\n      @DELETE(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"DELETE\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertNull(request.body());\n  }\n\n  @Test public void head() {\n    class Example {\n      @HEAD(\"/foo/bar/\") //\n      Call<Void> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"HEAD\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headWithoutVoidThrows() {\n    class Example {\n      @HEAD(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"HEAD method must use Void as response type.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void post() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void put() {\n    class Example {\n      @PUT(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"PUT\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void patch() {\n    class Example {\n      @PATCH(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"PATCH\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void options() {\n    class Example {\n      @OPTIONS(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"OPTIONS\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"po ng\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/po%20ng/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUnusedAndInvalidNamedPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/{kit,kat}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/%7Bkit,kat%7D/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"po%20ng\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/po%20ng/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathSegments() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/pong/more\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz/pong/more/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUnencodedPathSegmentsPreventsRequestSplitting() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = false) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/\\r\\nheader: blue\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz%2F%0D%0Aheader:%20blue/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathStillPreventsRequestSplitting() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/\\r\\npong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz/pong/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void pathParamRequired() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Path parameter \\\"ping\\\" value must not be null.\");\n    }\n  }\n\n  @Test public void getWithQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(value = \"pi%20ng\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"p%20o%20n%20g\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?pi%20ng=p%20o%20n%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void queryParamOptionalOmitsQuery() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new Object[] { null });\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n  }\n\n  @Test public void queryParamOptional() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"foo\") String foo, @Query(\"ping\") String ping,\n          @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", null, \"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?foo=bar&kit=kat\");\n  }\n\n  @Test public void getWithQueryUrlAndParam() {\n    class Example {\n      @GET(\"/foo/bar/?hi=mom\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hi=mom&ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQuery() {\n    class Example {\n      @GET(\"/foo/bar/?hi=mom\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hi=mom\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit,\n          @Query(\"riff\") String riff) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", \"kat\", \"raff\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/?kit=kat&riff=raff\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Query(\"kit\") String kit, @Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"kat\", \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @Query. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryNameThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@QueryName String kit, @Path(\"ping\") String ping) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"kat\", \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @QueryName. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryMapThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Path(\"ping\") String ping) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @QueryMap. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithPathAndQueryQuestionMarkParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong?\", \"kat?\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString())\n        .isEqualTo(\"http://example.com/foo/bar/pong%3F/?kit=kat%3F\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryAmpersandParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong&\", \"kat&\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong&/?kit=kat%26\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryHashParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong#\", \"kat#\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong%23/?kit=kat%23\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") List<Object> keys) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(1, 2, null, \"three\", \"1\");\n    Request request = buildRequest(Example.class, values);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=three&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") Object[] keys) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\", \"1\" };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=three&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamPrimitiveArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") int[] keys) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3, 1 };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=3&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryNameParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName(encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"p%20o%20n%20g\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?p%20o%20n%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void queryNameParamOptionalOmitsQuery() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new Object[] { null });\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n  }\n\n  @Test public void getWithQueryNameParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName List<Object> keys) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(1, 2, null, \"three\", \"1\");\n    Request request = buildRequest(Example.class, values);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&three&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName Object[] keys) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\", \"1\" };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&three&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParamPrimitiveArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName int[] keys) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3, 1 };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&3&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamMap() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, Object> query) {\n        return null;\n      }\n    }\n\n    Map<String, Object> params = new LinkedHashMap<>();\n    params.put(\"kit\", \"kat\");\n    params.put(\"ping\", \"pong\");\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?kit=kat&ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryParamMap() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryMap(encoded = true) Map<String, Object> query) {\n        return null;\n      }\n    }\n\n    Map<String, Object> params = new LinkedHashMap<>();\n    params.put(\"kit\", \"k%20t\");\n    params.put(\"pi%20ng\", \"p%20g\");\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?kit=k%20t&pi%20ng=p%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getAbsoluteUrl() {\n    class Example {\n      @GET(\"http://example2.com/foo/bar/\")\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithStringUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithJavaUriUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url URI url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, URI.create(\"foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithStringUrlAbsolute() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"https://example2.com/foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"https://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithJavaUriUrlAbsolute() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url URI url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, URI.create(\"https://example2.com/foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"https://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUrlAbsoluteSameHost() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"http://example.com/foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithHttpUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url HttpUrl url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, HttpUrl.get(\"http://example.com/foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url()).isEqualTo(HttpUrl.get(\"http://example.com/foo/bar/\"));\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithNullUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url HttpUrl url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, (HttpUrl) null);\n      fail();\n    } catch (NullPointerException expected) {\n      assertThat(expected).hasMessage(\"@Url parameter is null.\");\n    }\n  }\n\n  @Test public void getWithNonStringUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.\"\n              + \" (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getUrlAndUrlParamThrows() {\n    class Example {\n      @GET(\"foo/bar\")\n      Call<ResponseBody> method(@Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Url cannot be used with @GET URL (parameter #1)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithoutUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Missing either @GET URL or @Url parameter.\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithUrlThenPathThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url, @Path(\"hey\") String hey) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Path parameters may not be used with @Url. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithPathThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Path(\"hey\") String hey, @Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Path can only be used with relative url on @GET (parameter #1)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryThenUrlThrows() {\n    class Example {\n      @GET(\"foo/bar\")\n      Call<ResponseBody> method(@Query(\"hey\") String hey, @Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"hey\", \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @Query. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryNameThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@QueryName String name, @Url String url) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @QueryName. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryMapThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Url String url) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @QueryMap. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithUrlThenQuery() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url, @Query(\"hey\") String hey) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"foo/bar/\", \"hey!\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hey=hey%21\");\n  }\n\n  @Test public void postWithUrl() {\n    class Example {\n      @POST\n      Call<ResponseBody> method(@Url String url, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, \"http://example.com/foo/bar\", body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void normalPostWithPathParam() {\n    class Example {\n      @POST(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Hi!\");\n    Request request = buildRequest(Example.class, \"pong\", body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/\");\n    assertBody(request.body(), \"Hi!\");\n  }\n\n  @Test public void emptyBody() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"\");\n  }\n\n  @Test public void customMethodEmptyBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM\", path = \"/foo/bar/\", hasBody = true) //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"CUSTOM\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"\");\n  }\n\n  @Test public void bodyRequired() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Body parameter value must not be null.\");\n    }\n  }\n\n  @Test public void bodyWithPathParams() {\n    class Example {\n      @POST(\"/foo/bar/{ping}/{kit}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Body RequestBody body, @Path(\"kit\") String kit) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Hi!\");\n    Request request = buildRequest(Example.class, \"pong\", body, \"kat\");\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/kat/\");\n    assertBody(request.body(), \"Hi!\");\n  }\n\n  @Test public void simpleMultipart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String ping, @Part(\"kit\") RequestBody kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", RequestBody.create(\n        TEXT_PLAIN, \"kat\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartArray() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String[] ping) {\n        return null;\n      }\n    }\n\n    Request request =\n        buildRequest(Example.class, new Object[] { new String[] { \"pong1\", \"pong2\" } });\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong1\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong2\\r\\n--\");\n  }\n\n  @Test public void multipartRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part RequestBody part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartIterableRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part List<RequestBody> part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartArrayRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part RequestBody[] part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartOkHttpPartForbidsName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"name\") MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartOkHttpPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request = buildRequest(Example.class, part);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpIterablePart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part List<MultipartBody.Part> part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part1 = MultipartBody.Part.createFormData(\"foo\", \"bar\");\n    MultipartBody.Part part2 = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request = buildRequest(Example.class, Arrays.asList(part1, part2));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"foo\\\"\\r\\n\")\n        .contains(\"\\r\\nbar\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpArrayPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part[] part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part1 = MultipartBody.Part.createFormData(\"foo\", \"bar\");\n    MultipartBody.Part part2 = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request =\n        buildRequest(Example.class, new Object[] { new MultipartBody.Part[] { part1, part2 } });\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"foo\\\"\\r\\n\")\n        .contains(\"\\r\\nbar\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpPartWithFilename() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part =\n        MultipartBody.Part.createFormData(\"kit\", \"kit.txt\", RequestBody.create(null, \"kat\"));\n    Request request = buildRequest(Example.class, part);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"; filename=\\\"kit.txt\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartIterable() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") List<String> ping) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, Arrays.asList(\"pong1\", \"pong2\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong1\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong2\\r\\n--\");\n  }\n\n  @Test public void multipartIterableOkHttpPart() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") List<MultipartBody.Part> part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartArrayOkHttpPart() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") MultipartBody.Part[] part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartWithEncoding() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(value = \"ping\", encoding = \"8-bit\") String ping,\n          @Part(value = \"kit\", encoding = \"7-bit\") RequestBody kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", RequestBody.create(\n        TEXT_PLAIN, \"kat\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"Content-Transfer-Encoding: 7-bit\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMap() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", RequestBody.create(null, \"kat\"));\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMapWithEncoding() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap(encoding = \"8-bit\") Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", RequestBody.create(null, \"kat\"));\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMapRejectsNonStringKeys() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<Object, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap keys must be of type String: class java.lang.Object (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsOkHttpPartValues() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, MultipartBody.Part> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap values cannot be MultipartBody.Part. Use @Part List<Part> or a different value type instead. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNull() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map was null.\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNullKeys() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(null, RequestBody.create(null, \"kat\"));\n\n    try {\n      buildRequest(Example.class, params);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map contained null key.\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNullValues() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", null);\n\n    try {\n      buildRequest(Example.class, params);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map contained null value for key 'kit'.\");\n    }\n  }\n\n  @Test public void multipartPartMapMustBeMap() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap List<Object> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.emptyList());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapSupportsSubclasses() throws IOException {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Foo parts) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    Buffer buffer = new Buffer();\n    request.body().writeTo(buffer);\n    assertThat(buffer.readUtf8())\n        .contains(\"name=\\\"hello\\\"\")\n        .contains(\"\\r\\n\\r\\nworld\\r\\n--\");\n  }\n\n  @Test public void multipartNullRemovesPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String ping, @Part(\"fizz\") String fizz) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\", null);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong\\r\\n--\");\n  }\n\n  @Test public void multipartPartOptional() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") RequestBody ping) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalStateException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Multipart body must have at least one part.\");\n    }\n  }\n\n  @Test public void simpleFormEncoded() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") String foo, @Field(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", \"pong\");\n    assertBody(request.body(), \"foo=bar&ping=pong\");\n  }\n\n  @Test public void formEncodedWithEncodedNameFieldParam() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(value = \"na%20me\", encoded = true) String foo) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"ba%20r\");\n    assertBody(request.body(), \"na%20me=ba%20r\");\n  }\n\n  @Test public void formEncodedFieldOptional() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") String foo, @Field(\"ping\") String ping,\n          @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", null, \"kat\");\n    assertBody(request.body(), \"foo=bar&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldList() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") List<Object> fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(\"foo\", \"bar\", null, 3);\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=foo&foo=bar&foo=3&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldArray() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") Object[] fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\" };\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=1&foo=2&foo=three&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldPrimitiveArray() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") int[] fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3 };\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=1&foo=2&foo=3&kit=kat\");\n  }\n\n  @Test public void formEncodedWithEncodedNameFieldParamMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@FieldMap(encoded = true) Map<String, Object> fieldMap) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"k%20it\", \"k%20at\");\n    fieldMap.put(\"pin%20g\", \"po%20ng\");\n\n    Request request = buildRequest(Example.class, fieldMap);\n    assertBody(request.body(), \"k%20it=k%20at&pin%20g=po%20ng\");\n  }\n\n  @Test public void formEncodedFieldMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> fieldMap) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(\"ping\", \"pong\");\n\n    Request request = buildRequest(Example.class, fieldMap);\n    assertBody(request.body(), \"kit=kat&ping=pong\");\n  }\n\n  @Test public void fieldMapRejectsNull() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map was null.\");\n    }\n  }\n\n  @Test public void fieldMapRejectsNullKeys() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(null, \"pong\");\n\n    try {\n      buildRequest(Example.class, fieldMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map contained null key.\");\n    }\n  }\n\n  @Test public void fieldMapRejectsNullValues() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(\"foo\", null);\n\n    try {\n      buildRequest(Example.class, fieldMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map contained null value for key 'foo'.\");\n    }\n  }\n\n  @Test public void fieldMapMustBeAMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap List<String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@FieldMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void fieldMapSupportsSubclasses() throws IOException {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Foo a) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    Buffer buffer = new Buffer();\n    request.body().writeTo(buffer);\n    assertThat(buffer.readUtf8()).isEqualTo(\"hello=world\");\n  }\n\n  @Test public void simpleHeaders() {\n    class Example {\n      @GET(\"/foo/bar/\")\n      @Headers({\n          \"ping: pong\",\n          \"kit: kat\"\n      })\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.get(\"kit\")).isEqualTo(\"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headersDoNotOverwriteEachOther() {\n    class Example {\n      @GET(\"/foo/bar/\")\n      @Headers({\n          \"ping: pong\",\n          \"kit: kat\",\n          \"kit: -kat\",\n      })\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(3);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.values(\"kit\")).containsOnly(\"kat\", \"-kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamToString() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"kit\") BigInteger kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new BigInteger(\"1234\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(1);\n    assertThat(headers.get(\"kit\")).isEqualTo(\"1234\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      @Headers(\"ping: pong\") //\n      Call<ResponseBody> method(@Header(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"kat\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.get(\"kit\")).isEqualTo(\"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"foo\") List<String> kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, Arrays.asList(\"bar\", null, \"baz\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.values(\"foo\")).containsExactly(\"bar\", \"baz\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"foo\") String[] kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, (Object) new String[] { \"bar\", null, \"baz\" });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.values(\"foo\")).containsExactly(\"bar\", \"baz\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void contentTypeAnnotationHeaderOverrides() {\n    class Example {\n      @POST(\"/\") //\n      @Headers(\"Content-Type: text/not-plain\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.body().contentType().toString()).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void malformedContentTypeHeaderThrows() {\n    class Example {\n      @POST(\"/\") //\n      @Headers(\"Content-Type: hello, world!\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    try {\n      buildRequest(Example.class, body);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Malformed content type: hello, world!\\n\"\n          + \"    for method Example.method\");\n      assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class); // OkHttp's cause.\n    }\n  }\n\n  @Test public void contentTypeAnnotationHeaderAddsHeaderWithNoBody() {\n    class Example {\n      @DELETE(\"/\") //\n      @Headers(\"Content-Type: text/not-plain\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.headers().get(\"Content-Type\")).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void contentTypeParameterHeaderOverrides() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Header(\"Content-Type\") String contentType, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Plain\");\n    Request request = buildRequest(Example.class, \"text/not-plain\", body);\n    assertThat(request.body().contentType().toString()).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void malformedContentTypeParameterThrows() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Header(\"Content-Type\") String contentType, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    try {\n      buildRequest(Example.class, \"hello, world!\", body);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Malformed content type: hello, world!\");\n      assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class); // OkHttp's cause.\n    }\n  }\n\n  @Test public void malformedAnnotationRelativeUrlThrows() {\n    class Example {\n      @GET(\"ftp://example.org\")\n      Call<ResponseBody> get() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Malformed URL. Base: http://example.com/, Relative: ftp://example.org\");\n    }\n  }\n\n  @Test public void malformedParameterRelativeUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> get(@Url String relativeUrl) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, \"ftp://example.org\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Malformed URL. Base: http://example.com/, Relative: ftp://example.org\");\n    }\n  }\n\n  @Test public void multipartPartsShouldBeInOrder() throws IOException {\n    class Example {\n      @Multipart\n      @POST(\"/foo\")\n      Call<ResponseBody> get(@Part(\"first\") String data, @Part(\"second\") String dataTwo, @Part(\"third\") String dataThree) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"firstParam\", \"secondParam\", \"thirdParam\");\n    MultipartBody body = (MultipartBody) request.body();\n\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String readBody = buffer.readUtf8();\n\n    assertThat(readBody.indexOf(\"firstParam\")).isLessThan(readBody.indexOf(\"secondParam\"));\n    assertThat(readBody.indexOf(\"secondParam\")).isLessThan(readBody.indexOf(\"thirdParam\"));\n  }\n\n  @Test public void queryParamsSkippedIfConvertedToNull() throws Exception {\n    class Example {\n      @GET(\"/query\") Call<ResponseBody> queryPath(@Query(\"a\") Object a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Request request = buildRequest(Example.class, retrofitBuilder, \"Ignored\");\n\n    assertThat(request.url().toString()).doesNotContain(\"Ignored\");\n  }\n\n  @Test public void queryParamMapsConvertedToNullShouldError() throws Exception {\n    class Example {\n      @GET(\"/query\") Call<ResponseBody> queryPath(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Map<String, String> queryMap = Collections.singletonMap(\"kit\", \"kat\");\n\n    try {\n      buildRequest(Example.class, retrofitBuilder, queryMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessageContaining(\n          \"Query map value 'kat' converted to null by retrofit2.helpers.NullObjectConverterFactory$1 for key 'kit'.\");\n    }\n  }\n\n  @Test public void fieldParamsSkippedIfConvertedToNull() throws Exception {\n    class Example {\n      @FormUrlEncoded\n      @POST(\"/query\") Call<ResponseBody> queryPath(@Field(\"a\") Object a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Request request = buildRequest(Example.class, retrofitBuilder, \"Ignored\");\n\n    assertThat(request.url().toString()).doesNotContain(\"Ignored\");\n  }\n\n  @Test public void fieldParamMapsConvertedToNullShouldError() throws Exception {\n    class Example {\n      @FormUrlEncoded\n      @POST(\"/query\") Call<ResponseBody> queryPath(@FieldMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Map<String, String> queryMap = Collections.singletonMap(\"kit\", \"kat\");\n\n    try {\n      buildRequest(Example.class, retrofitBuilder, queryMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessageContaining(\n          \"Field map value 'kat' converted to null by retrofit2.helpers.NullObjectConverterFactory$1 for key 'kit'.\");\n    }\n  }\n\n  private static void assertBody(RequestBody body, String expected) {\n    assertThat(body).isNotNull();\n    Buffer buffer = new Buffer();\n    try {\n      body.writeTo(buffer);\n      assertThat(buffer.readUtf8()).isEqualTo(expected);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  static <T> Request buildRequest(Class<T> cls, Retrofit.Builder builder, Object... args) {\n    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {\n      @Override public okhttp3.Call newCall(Request request) {\n        throw new UnsupportedOperationException(\"Not implemented\");\n      }\n    };\n\n    Retrofit retrofit = builder.callFactory(callFactory).build();\n\n    Method method = TestingUtils.onlyMethod(cls);\n    try {\n      return RequestFactory.parseAnnotations(retrofit, method).create(args);\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new AssertionError(e);\n    }\n  }\n\n  static <T> Request buildRequest(Class<T> cls, Object... args) {\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com/\")\n        .addConverterFactory(new ToStringConverterFactory());\n\n    return buildRequest(cls, retrofitBuilder, args);\n  }\n}\n"], "fixing_code": ["/*\n * Copyright (C) 2012 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage retrofit2;\n\nimport java.io.IOException;\nimport java.util.regex.Pattern;\nimport javax.annotation.Nullable;\nimport okhttp3.FormBody;\nimport okhttp3.Headers;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okio.Buffer;\nimport okio.BufferedSink;\n\nfinal class RequestBuilder {\n  private static final char[] HEX_DIGITS =\n      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n  private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = \" \\\"<>^`{}|\\\\?#\";\n\n  /**\n   * Matches strings that contain {@code .} or {@code ..} as a complete path segment. This also\n   * matches dots in their percent-encoded form, {@code %2E}.\n   *\n   * <p>It is okay to have these strings within a larger path segment (like {@code a..z} or {@code\n   * index.html}) but when alone they have a special meaning. A single dot resolves to no path\n   * segment so {@code /one/./three/} becomes {@code /one/three/}. A double-dot pops the preceding\n   * directory, so {@code /one/../three/} becomes {@code /three/}.\n   *\n   * <p>We forbid these in Retrofit paths because they're likely to have the unintended effect.\n   * For example, passing {@code ..} to {@code DELETE /account/book/{isbn}/} yields {@code DELETE\n   * /account/}.\n   */\n  private static final Pattern PATH_TRAVERSAL = Pattern.compile(\"(.*/)?(\\\\.|%2e|%2E){1,2}(/.*)?\");\n\n  private final String method;\n\n  private final HttpUrl baseUrl;\n  private @Nullable String relativeUrl;\n  private @Nullable HttpUrl.Builder urlBuilder;\n\n  private final Request.Builder requestBuilder;\n  private @Nullable MediaType contentType;\n\n  private final boolean hasBody;\n  private @Nullable MultipartBody.Builder multipartBuilder;\n  private @Nullable FormBody.Builder formBuilder;\n  private @Nullable RequestBody body;\n\n  RequestBuilder(String method, HttpUrl baseUrl,\n      @Nullable String relativeUrl, @Nullable Headers headers, @Nullable MediaType contentType,\n      boolean hasBody, boolean isFormEncoded, boolean isMultipart) {\n    this.method = method;\n    this.baseUrl = baseUrl;\n    this.relativeUrl = relativeUrl;\n    this.requestBuilder = new Request.Builder();\n    this.contentType = contentType;\n    this.hasBody = hasBody;\n\n    if (headers != null) {\n      requestBuilder.headers(headers);\n    }\n\n    if (isFormEncoded) {\n      // Will be set to 'body' in 'build'.\n      formBuilder = new FormBody.Builder();\n    } else if (isMultipart) {\n      // Will be set to 'body' in 'build'.\n      multipartBuilder = new MultipartBody.Builder();\n      multipartBuilder.setType(MultipartBody.FORM);\n    }\n  }\n\n  void setRelativeUrl(Object relativeUrl) {\n    this.relativeUrl = relativeUrl.toString();\n  }\n\n  void addHeader(String name, String value) {\n    if (\"Content-Type\".equalsIgnoreCase(name)) {\n      try {\n        contentType = MediaType.get(value);\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"Malformed content type: \" + value, e);\n      }\n    } else {\n      requestBuilder.addHeader(name, value);\n    }\n  }\n\n  void addPathParam(String name, String value, boolean encoded) {\n    if (relativeUrl == null) {\n      // The relative URL is cleared when the first query parameter is set.\n      throw new AssertionError();\n    }\n    String replacement = canonicalizeForPath(value, encoded);\n    String newRelativeUrl = relativeUrl.replace(\"{\" + name + \"}\", replacement);\n    if (PATH_TRAVERSAL.matcher(newRelativeUrl).matches()) {\n      throw new IllegalArgumentException(\n          \"@Path parameters shouldn't perform path traversal ('.' or '..'): \" + value);\n    }\n    relativeUrl = newRelativeUrl;\n  }\n\n  private static String canonicalizeForPath(String input, boolean alreadyEncoded) {\n    int codePoint;\n    for (int i = 0, limit = input.length(); i < limit; i += Character.charCount(codePoint)) {\n      codePoint = input.codePointAt(i);\n      if (codePoint < 0x20 || codePoint >= 0x7f\n          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1\n          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {\n        // Slow path: the character at i requires encoding!\n        Buffer out = new Buffer();\n        out.writeUtf8(input, 0, i);\n        canonicalizeForPath(out, input, i, limit, alreadyEncoded);\n        return out.readUtf8();\n      }\n    }\n\n    // Fast path: no characters required encoding.\n    return input;\n  }\n\n  private static void canonicalizeForPath(Buffer out, String input, int pos, int limit,\n      boolean alreadyEncoded) {\n    Buffer utf8Buffer = null; // Lazily allocated.\n    int codePoint;\n    for (int i = pos; i < limit; i += Character.charCount(codePoint)) {\n      codePoint = input.codePointAt(i);\n      if (alreadyEncoded\n          && (codePoint == '\\t' || codePoint == '\\n' || codePoint == '\\f' || codePoint == '\\r')) {\n        // Skip this character.\n      } else if (codePoint < 0x20 || codePoint >= 0x7f\n          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1\n          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {\n        // Percent encode this character.\n        if (utf8Buffer == null) {\n          utf8Buffer = new Buffer();\n        }\n        utf8Buffer.writeUtf8CodePoint(codePoint);\n        while (!utf8Buffer.exhausted()) {\n          int b = utf8Buffer.readByte() & 0xff;\n          out.writeByte('%');\n          out.writeByte(HEX_DIGITS[(b >> 4) & 0xf]);\n          out.writeByte(HEX_DIGITS[b & 0xf]);\n        }\n      } else {\n        // This character doesn't need encoding. Just copy it over.\n        out.writeUtf8CodePoint(codePoint);\n      }\n    }\n  }\n\n  void addQueryParam(String name, @Nullable String value, boolean encoded) {\n    if (relativeUrl != null) {\n      // Do a one-time combination of the built relative URL and the base URL.\n      urlBuilder = baseUrl.newBuilder(relativeUrl);\n      if (urlBuilder == null) {\n        throw new IllegalArgumentException(\n            \"Malformed URL. Base: \" + baseUrl + \", Relative: \" + relativeUrl);\n      }\n      relativeUrl = null;\n    }\n\n    if (encoded) {\n      //noinspection ConstantConditions Checked to be non-null by above 'if' block.\n      urlBuilder.addEncodedQueryParameter(name, value);\n    } else {\n      //noinspection ConstantConditions Checked to be non-null by above 'if' block.\n      urlBuilder.addQueryParameter(name, value);\n    }\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isFormEncoded was true.\n  void addFormField(String name, String value, boolean encoded) {\n    if (encoded) {\n      formBuilder.addEncoded(name, value);\n    } else {\n      formBuilder.add(name, value);\n    }\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isMultipart was true.\n  void addPart(Headers headers, RequestBody body) {\n    multipartBuilder.addPart(headers, body);\n  }\n\n  @SuppressWarnings(\"ConstantConditions\") // Only called when isMultipart was true.\n  void addPart(MultipartBody.Part part) {\n    multipartBuilder.addPart(part);\n  }\n\n  void setBody(RequestBody body) {\n    this.body = body;\n  }\n\n  Request.Builder get() {\n    HttpUrl url;\n    HttpUrl.Builder urlBuilder = this.urlBuilder;\n    if (urlBuilder != null) {\n      url = urlBuilder.build();\n    } else {\n      // No query parameters triggered builder creation, just combine the relative URL and base URL.\n      //noinspection ConstantConditions Non-null if urlBuilder is null.\n      url = baseUrl.resolve(relativeUrl);\n      if (url == null) {\n        throw new IllegalArgumentException(\n            \"Malformed URL. Base: \" + baseUrl + \", Relative: \" + relativeUrl);\n      }\n    }\n\n    RequestBody body = this.body;\n    if (body == null) {\n      // Try to pull from one of the builders.\n      if (formBuilder != null) {\n        body = formBuilder.build();\n      } else if (multipartBuilder != null) {\n        body = multipartBuilder.build();\n      } else if (hasBody) {\n        // Body is absent, make an empty body.\n        body = RequestBody.create(null, new byte[0]);\n      }\n    }\n\n    MediaType contentType = this.contentType;\n    if (contentType != null) {\n      if (body != null) {\n        body = new ContentTypeOverridingRequestBody(body, contentType);\n      } else {\n        requestBuilder.addHeader(\"Content-Type\", contentType.toString());\n      }\n    }\n\n    return requestBuilder\n        .url(url)\n        .method(method, body);\n  }\n\n  private static class ContentTypeOverridingRequestBody extends RequestBody {\n    private final RequestBody delegate;\n    private final MediaType contentType;\n\n    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {\n      this.delegate = delegate;\n      this.contentType = contentType;\n    }\n\n    @Override public MediaType contentType() {\n      return contentType;\n    }\n\n    @Override public long contentLength() throws IOException {\n      return delegate.contentLength();\n    }\n\n    @Override public void writeTo(BufferedSink sink) throws IOException {\n      delegate.writeTo(sink);\n    }\n  }\n}\n", "/*\n * Copyright (C) 2013 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage retrofit2;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.ResponseBody;\nimport okio.Buffer;\nimport org.junit.Test;\nimport retrofit2.helpers.NullObjectConverterFactory;\nimport retrofit2.helpers.ToStringConverterFactory;\nimport retrofit2.http.Body;\nimport retrofit2.http.DELETE;\nimport retrofit2.http.Field;\nimport retrofit2.http.FieldMap;\nimport retrofit2.http.FormUrlEncoded;\nimport retrofit2.http.GET;\nimport retrofit2.http.HEAD;\nimport retrofit2.http.HTTP;\nimport retrofit2.http.Header;\nimport retrofit2.http.HeaderMap;\nimport retrofit2.http.Headers;\nimport retrofit2.http.Multipart;\nimport retrofit2.http.OPTIONS;\nimport retrofit2.http.PATCH;\nimport retrofit2.http.POST;\nimport retrofit2.http.PUT;\nimport retrofit2.http.Part;\nimport retrofit2.http.PartMap;\nimport retrofit2.http.Path;\nimport retrofit2.http.Query;\nimport retrofit2.http.QueryMap;\nimport retrofit2.http.QueryName;\nimport retrofit2.http.Url;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.fail;\n\n@SuppressWarnings({\"UnusedParameters\", \"unused\"}) // Parameters inspected reflectively.\npublic final class RequestFactoryTest {\n  private static final MediaType TEXT_PLAIN = MediaType.get(\"text/plain\");\n\n  @Test public void customMethodNoBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM1\", path = \"/foo\")\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"CUSTOM1\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void customMethodWithBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM2\", path = \"/foo\", hasBody = true)\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"CUSTOM2\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void onlyOneEncodingIsAllowedMultipartFirst() {\n    class Example {\n      @Multipart //\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Only one encoding annotation is allowed.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void onlyOneEncodingIsAllowedFormEncodingFirst() {\n    class Example {\n      @FormUrlEncoded //\n      @Multipart //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Only one encoding annotation is allowed.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void invalidPathParam() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Path(\"hey!\") String thing) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Path parameter name must match \\\\{([a-zA-Z][a-zA-Z0-9_-]*)\\\\}.\"\n              + \" Found: hey! (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void pathParamNotAllowedInQuery() throws Exception {\n    class Example {\n      @GET(\"/foo?bar={bar}\") //\n      Call<ResponseBody> method(@Path(\"bar\") String thing) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"URL query string \\\"bar={bar}\\\" must not have replace block.\"\n              + \" For dynamic query parameters use @Query.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Body @Query(\"nope\") String o) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multiple Retrofit annotations found, only one allowed. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @interface NonNull {}\n\n  @Test public void multipleParameterAnnotationsOnlyOneRetrofitAllowed() throws Exception {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Query(\"maybe\") @NonNull Object o) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"yep\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/?maybe=yep\");\n  }\n\n  @Test public void twoMethodsFail() {\n    class Example {\n      @PATCH(\"/foo\") //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n        assertThat(e.getMessage())\n            .isIn(\"Only one HTTP method is allowed. Found: PATCH and POST.\\n    for method Example.method\",\n                  \"Only one HTTP method is allowed. Found: POST and PATCH.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void lackingMethod() {\n    class Example {\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"HTTP method annotation is required (e.g., @GET, @POST, etc.).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitMultipartForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Part(\"a\") int a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters can only be used with multipart encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitMultipartWithPartMapForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@PartMap Map<String, String> params) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap parameters can only be used with multipart encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartFailsOnNonBodyMethod() {\n    class Example {\n      @Multipart //\n      @GET(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartFailsWithNoParts() {\n    class Example {\n      @Multipart //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multipart method must contain at least one @Part.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitFormEncodingByFieldForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Field(\"a\") int a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Field parameters can only be used with form encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void implicitFormEncodingByFieldMapForbidden() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@FieldMap parameters can only be used with form encoding. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void formEncodingFailsOnNonBodyMethod() {\n    class Example {\n      @FormUrlEncoded //\n      @GET(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void formEncodingFailsWithNoParts() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Form-encoded method must contain at least one @Field.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headersFailWhenEmptyOnMethod() {\n    class Example {\n      @GET(\"/\") //\n      @Headers({}) //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Headers annotation is empty.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headersFailWhenMalformed() {\n    class Example {\n      @GET(\"/\") //\n      @Headers(\"Malformed\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"Malformed\\\"\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void pathParamNonPathParamAndTypedBytes() {\n    class Example {\n      @PUT(\"/{a}\") //\n      Call<ResponseBody> method(@Path(\"a\") int a, @Path(\"b\") int b, @Body int c) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"URL \\\"/{a}\\\" does not contain \\\"{b}\\\". (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void parameterWithoutAnnotation() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(String a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"No Retrofit annotation found. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void nonBodyHttpMethodWithSingleEntity() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@Body String o) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Non-body HTTP method cannot contain @Body.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void queryMapMustBeAMap() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap List<String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@QueryMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void queryMapSupportsSubclasses() {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Foo a) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/?hello=world\");\n  }\n\n  @Test public void queryMapRejectsNull() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map was null.\");\n    }\n  }\n\n  @Test public void queryMapRejectsNullKeys() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Map<String, String> queryParams = new LinkedHashMap<>();\n    queryParams.put(\"ping\", \"pong\");\n    queryParams.put(null, \"kat\");\n\n    try {\n      buildRequest(Example.class, queryParams);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map contained null key.\");\n    }\n  }\n\n  @Test public void queryMapRejectsNullValues() {\n    class Example {\n      @GET(\"/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Map<String, String> queryParams = new LinkedHashMap<>();\n    queryParams.put(\"ping\", \"pong\");\n    queryParams.put(\"kit\", null);\n\n    try {\n      buildRequest(Example.class, queryParams);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Query map contained null value for key 'kit'.\");\n    }\n  }\n\n  @Test public void getWithHeaderMap() {\n    class Example {\n      @GET(\"/search\")\n      Call<ResponseBody> method(@HeaderMap Map<String, Object> headers) {\n        return null;\n      }\n    }\n\n    Map<String, Object> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(\"Accept-Charset\", \"utf-8\");\n\n    Request request = buildRequest(Example.class, headers);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/search\");\n    assertThat(request.body()).isNull();\n    assertThat(request.headers().size()).isEqualTo(2);\n    assertThat(request.header(\"Accept\")).isEqualTo(\"text/plain\");\n    assertThat(request.header(\"Accept-Charset\")).isEqualTo(\"utf-8\");\n  }\n\n  @Test public void headerMapMustBeAMap() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap List<String> headers) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@HeaderMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void headerMapSupportsSubclasses() {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @GET(\"/search\")\n      Call<ResponseBody> method(@HeaderMap Foo headers) {\n        return null;\n      }\n    }\n\n    Foo headers = new Foo();\n    headers.put(\"Accept\", \"text/plain\");\n\n    Request request = buildRequest(Example.class, headers);\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/search\");\n    assertThat(request.headers().size()).isEqualTo(1);\n    assertThat(request.header(\"Accept\")).isEqualTo(\"text/plain\");\n  }\n\n  @Test public void headerMapRejectsNull() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, (Map<String, String>) null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map was null.\");\n    }\n  }\n\n  @Test public void headerMapRejectsNullKeys() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    Map<String, String> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(null, \"utf-8\");\n\n    try {\n      buildRequest(Example.class, headers);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map contained null key.\");\n    }\n  }\n\n  @Test public void headerMapRejectsNullValues() {\n    class Example {\n      @GET(\"/\")\n      Call<ResponseBody> method(@HeaderMap Map<String, String> headers) {\n        return null;\n      }\n    }\n\n    Map<String, String> headers = new LinkedHashMap<>();\n    headers.put(\"Accept\", \"text/plain\");\n    headers.put(\"Accept-Charset\", null);\n\n    try {\n      buildRequest(Example.class, headers);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Header map contained null value for key 'Accept-Charset'.\");\n    }\n  }\n\n  @Test public void twoBodies() {\n    class Example {\n      @PUT(\"/\") //\n      Call<ResponseBody> method(@Body String o1, @Body String o2) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Multiple @Body method annotations found. (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void bodyInNonBodyRequest() {\n    class Example {\n      @Multipart //\n      @PUT(\"/\") //\n      Call<ResponseBody> method(@Part(\"one\") String o1, @Body String o2) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Body parameters cannot be used with form or multi-part encoding. (parameter #2)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void get() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void delete() {\n    class Example {\n      @DELETE(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"DELETE\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertNull(request.body());\n  }\n\n  @Test public void head() {\n    class Example {\n      @HEAD(\"/foo/bar/\") //\n      Call<Void> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"HEAD\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headWithoutVoidThrows() {\n    class Example {\n      @HEAD(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"HEAD method must use Void as response type.\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void post() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void put() {\n    class Example {\n      @PUT(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"PUT\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void patch() {\n    class Example {\n      @PATCH(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.method()).isEqualTo(\"PATCH\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void options() {\n    class Example {\n      @OPTIONS(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"OPTIONS\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"po ng\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/po%20ng/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUnusedAndInvalidNamedPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/{kit,kat}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/%7Bkit,kat%7D/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"po%20ng\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/po%20ng/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathSegments() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/pong/more\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz/pong/more/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUnencodedPathSegmentsPreventsRequestSplitting() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = false) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/\\r\\nheader: blue\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz%2F%0D%0Aheader:%20blue/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedPathStillPreventsRequestSplitting() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"baz/\\r\\npong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/baz/pong/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void pathParametersAndPathTraversal() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\") String ping) {\n        return null;\n      }\n    }\n\n    assertMalformedRequest(Example.class, \".\");\n    assertMalformedRequest(Example.class, \"..\");\n\n    assertThat(buildRequest(Example.class, \"./a\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/.%2Fa/\");\n    assertThat(buildRequest(Example.class, \"a/.\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/a%2F./\");\n    assertThat(buildRequest(Example.class, \"a/..\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/a%2F../\");\n    assertThat(buildRequest(Example.class, \"../a\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/..%2Fa/\");\n    assertThat(buildRequest(Example.class, \"..\\\\..\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/..%5C../\");\n\n    assertThat(buildRequest(Example.class, \"%2E\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/%252E/\");\n    assertThat(buildRequest(Example.class, \"%2E%2E\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/%252E%252E/\");\n  }\n\n  @Test public void encodedPathParametersAndPathTraversal() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n\n    assertMalformedRequest(Example.class, \".\");\n    assertMalformedRequest(Example.class, \"%2E\");\n    assertMalformedRequest(Example.class, \"%2e\");\n    assertMalformedRequest(Example.class, \"..\");\n    assertMalformedRequest(Example.class, \"%2E.\");\n    assertMalformedRequest(Example.class, \"%2e.\");\n    assertMalformedRequest(Example.class, \".%2E\");\n    assertMalformedRequest(Example.class, \".%2e\");\n    assertMalformedRequest(Example.class, \"%2E%2e\");\n    assertMalformedRequest(Example.class, \"%2e%2E\");\n    assertMalformedRequest(Example.class, \"./a\");\n    assertMalformedRequest(Example.class, \"a/.\");\n    assertMalformedRequest(Example.class, \"../a\");\n    assertMalformedRequest(Example.class, \"a/..\");\n    assertMalformedRequest(Example.class, \"a/../b\");\n    assertMalformedRequest(Example.class, \"a/%2e%2E/b\");\n\n    assertThat(buildRequest(Example.class, \"...\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/.../\");\n    assertThat(buildRequest(Example.class, \"a..b\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/a..b/\");\n    assertThat(buildRequest(Example.class, \"a..\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/a../\");\n    assertThat(buildRequest(Example.class, \"a..b\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/a..b/\");\n    assertThat(buildRequest(Example.class, \"..b\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/..b/\");\n    assertThat(buildRequest(Example.class, \"..\\\\..\").url().encodedPath())\n        .isEqualTo(\"/foo/bar/..%5C../\");\n  }\n\n  @Test public void dotDotsOkayWhenNotFullPathSegment() {\n    class Example {\n      @GET(\"/foo{ping}bar/\") //\n      Call<ResponseBody> method(@Path(value = \"ping\", encoded = true) String ping) {\n        return null;\n      }\n    }\n\n    assertMalformedRequest(Example.class, \"/./\");\n    assertMalformedRequest(Example.class, \"/../\");\n\n    assertThat(buildRequest(Example.class, \".\").url().encodedPath()).isEqualTo(\"/foo.bar/\");\n    assertThat(buildRequest(Example.class, \"..\").url().encodedPath()).isEqualTo(\"/foo..bar/\");\n  }\n\n  @Test public void pathParamRequired() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Path parameter \\\"ping\\\" value must not be null.\");\n    }\n  }\n\n  @Test public void getWithQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(value = \"pi%20ng\", encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"p%20o%20n%20g\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?pi%20ng=p%20o%20n%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void queryParamOptionalOmitsQuery() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new Object[] { null });\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n  }\n\n  @Test public void queryParamOptional() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"foo\") String foo, @Query(\"ping\") String ping,\n          @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", null, \"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?foo=bar&kit=kat\");\n  }\n\n  @Test public void getWithQueryUrlAndParam() {\n    class Example {\n      @GET(\"/foo/bar/?hi=mom\") //\n      Call<ResponseBody> method(@Query(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hi=mom&ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQuery() {\n    class Example {\n      @GET(\"/foo/bar/?hi=mom\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hi=mom\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit,\n          @Query(\"riff\") String riff) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", \"kat\", \"raff\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/?kit=kat&riff=raff\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Query(\"kit\") String kit, @Path(\"ping\") String ping) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"kat\", \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @Query. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryNameThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@QueryName String kit, @Path(\"ping\") String ping) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"kat\", \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @QueryName. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryMapThenPathThrows() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Path(\"ping\") String ping) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"pong\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Path parameter must not come after a @QueryMap. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithPathAndQueryQuestionMarkParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong?\", \"kat?\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString())\n        .isEqualTo(\"http://example.com/foo/bar/pong%3F/?kit=kat%3F\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryAmpersandParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong&\", \"kat&\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong&/?kit=kat%26\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithPathAndQueryHashParam() {\n    class Example {\n      @GET(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Query(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong#\", \"kat#\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong%23/?kit=kat%23\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") List<Object> keys) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(1, 2, null, \"three\", \"1\");\n    Request request = buildRequest(Example.class, values);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=three&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") Object[] keys) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\", \"1\" };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=three&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamPrimitiveArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Query(\"key\") int[] keys) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3, 1 };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?key=1&key=2&key=3&key=1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryNameParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName(encoded = true) String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"p%20o%20n%20g\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?p%20o%20n%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void queryNameParamOptionalOmitsQuery() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new Object[] { null });\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n  }\n\n  @Test public void getWithQueryNameParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName List<Object> keys) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(1, 2, null, \"three\", \"1\");\n    Request request = buildRequest(Example.class, values);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&three&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName Object[] keys) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\", \"1\" };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&three&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryNameParamPrimitiveArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryName int[] keys) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3, 1 };\n    Request request = buildRequest(Example.class, new Object[] { values });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?1&2&3&1\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithQueryParamMap() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryMap Map<String, Object> query) {\n        return null;\n      }\n    }\n\n    Map<String, Object> params = new LinkedHashMap<>();\n    params.put(\"kit\", \"kat\");\n    params.put(\"ping\", \"pong\");\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?kit=kat&ping=pong\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithEncodedQueryParamMap() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@QueryMap(encoded = true) Map<String, Object> query) {\n        return null;\n      }\n    }\n\n    Map<String, Object> params = new LinkedHashMap<>();\n    params.put(\"kit\", \"k%20t\");\n    params.put(\"pi%20ng\", \"p%20g\");\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?kit=k%20t&pi%20ng=p%20g\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getAbsoluteUrl() {\n    class Example {\n      @GET(\"http://example2.com/foo/bar/\")\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithStringUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithJavaUriUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url URI url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, URI.create(\"foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithStringUrlAbsolute() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"https://example2.com/foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"https://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithJavaUriUrlAbsolute() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url URI url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, URI.create(\"https://example2.com/foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"https://example2.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithUrlAbsoluteSameHost() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"http://example.com/foo/bar/\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithHttpUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url HttpUrl url) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, HttpUrl.get(\"http://example.com/foo/bar/\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url()).isEqualTo(HttpUrl.get(\"http://example.com/foo/bar/\"));\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void getWithNullUrl() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url HttpUrl url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, (HttpUrl) null);\n      fail();\n    } catch (NullPointerException expected) {\n      assertThat(expected).hasMessage(\"@Url parameter is null.\");\n    }\n  }\n\n  @Test public void getWithNonStringUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.\"\n              + \" (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getUrlAndUrlParamThrows() {\n    class Example {\n      @GET(\"foo/bar\")\n      Call<ResponseBody> method(@Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Url cannot be used with @GET URL (parameter #1)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithoutUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Missing either @GET URL or @Url parameter.\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithUrlThenPathThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url, @Path(\"hey\") String hey) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Path parameters may not be used with @Url. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithPathThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Path(\"hey\") String hey, @Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"foo/bar\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"@Path can only be used with relative url on @GET (parameter #1)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryThenUrlThrows() {\n    class Example {\n      @GET(\"foo/bar\")\n      Call<ResponseBody> method(@Query(\"hey\") String hey, @Url Object url) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, \"hey\", \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @Query. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryNameThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@QueryName String name, @Url String url) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @QueryName. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithQueryMapThenUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Url String url) {\n        throw new AssertionError();\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.singletonMap(\"kit\", \"kat\"), \"foo/bar/\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A @Url parameter must not come after a @QueryMap. (parameter #2)\\n\"\n          + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void getWithUrlThenQuery() {\n    class Example {\n      @GET\n      Call<ResponseBody> method(@Url String url, @Query(\"hey\") String hey) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"foo/bar/\", \"hey!\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/?hey=hey%21\");\n  }\n\n  @Test public void postWithUrl() {\n    class Example {\n      @POST\n      Call<ResponseBody> method(@Url String url, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, \"http://example.com/foo/bar\", body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar\");\n    assertBody(request.body(), \"hi\");\n  }\n\n  @Test public void normalPostWithPathParam() {\n    class Example {\n      @POST(\"/foo/bar/{ping}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Hi!\");\n    Request request = buildRequest(Example.class, \"pong\", body);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/\");\n    assertBody(request.body(), \"Hi!\");\n  }\n\n  @Test public void emptyBody() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"\");\n  }\n\n  @Test public void customMethodEmptyBody() {\n    class Example {\n      @HTTP(method = \"CUSTOM\", path = \"/foo/bar/\", hasBody = true) //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"CUSTOM\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertBody(request.body(), \"\");\n  }\n\n  @Test public void bodyRequired() {\n    class Example {\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Body parameter value must not be null.\");\n    }\n  }\n\n  @Test public void bodyWithPathParams() {\n    class Example {\n      @POST(\"/foo/bar/{ping}/{kit}/\") //\n      Call<ResponseBody> method(@Path(\"ping\") String ping, @Body RequestBody body, @Path(\"kit\") String kit) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Hi!\");\n    Request request = buildRequest(Example.class, \"pong\", body, \"kat\");\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/pong/kat/\");\n    assertBody(request.body(), \"Hi!\");\n  }\n\n  @Test public void simpleMultipart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String ping, @Part(\"kit\") RequestBody kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", RequestBody.create(\n        TEXT_PLAIN, \"kat\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartArray() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String[] ping) {\n        return null;\n      }\n    }\n\n    Request request =\n        buildRequest(Example.class, new Object[] { new String[] { \"pong1\", \"pong2\" } });\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong1\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong2\\r\\n--\");\n  }\n\n  @Test public void multipartRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part RequestBody part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartIterableRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part List<RequestBody> part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartArrayRequiresName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part RequestBody[] part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartOkHttpPartForbidsName() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"name\") MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartOkHttpPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request = buildRequest(Example.class, part);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpIterablePart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part List<MultipartBody.Part> part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part1 = MultipartBody.Part.createFormData(\"foo\", \"bar\");\n    MultipartBody.Part part2 = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request = buildRequest(Example.class, Arrays.asList(part1, part2));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"foo\\\"\\r\\n\")\n        .contains(\"\\r\\nbar\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpArrayPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part[] part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part1 = MultipartBody.Part.createFormData(\"foo\", \"bar\");\n    MultipartBody.Part part2 = MultipartBody.Part.createFormData(\"kit\", \"kat\");\n    Request request =\n        buildRequest(Example.class, new Object[] { new MultipartBody.Part[] { part1, part2 } });\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"foo\\\"\\r\\n\")\n        .contains(\"\\r\\nbar\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartOkHttpPartWithFilename() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part MultipartBody.Part part) {\n        return null;\n      }\n    }\n\n    MultipartBody.Part part =\n        MultipartBody.Part.createFormData(\"kit\", \"kit.txt\", RequestBody.create(null, \"kat\"));\n    Request request = buildRequest(Example.class, part);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"; filename=\\\"kit.txt\\\"\\r\\n\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartIterable() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") List<String> ping) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, Arrays.asList(\"pong1\", \"pong2\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong1\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong2\\r\\n--\");\n  }\n\n  @Test public void multipartIterableOkHttpPart() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") List<MultipartBody.Part> part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartArrayOkHttpPart() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") MultipartBody.Part[] part) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@Part parameters using the MultipartBody.Part must not include a part name in the annotation. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartWithEncoding() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(value = \"ping\", encoding = \"8-bit\") String ping,\n          @Part(value = \"kit\", encoding = \"7-bit\") RequestBody kit) {\n        return null;\n      }\n    }\n\n    Request request = buildRequest(Example.class, \"pong\", RequestBody.create(\n        TEXT_PLAIN, \"kat\"));\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"Content-Transfer-Encoding: 7-bit\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMap() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", RequestBody.create(null, \"kat\"));\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMapWithEncoding() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap(encoding = \"8-bit\") Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", RequestBody.create(null, \"kat\"));\n\n    Request request = buildRequest(Example.class, params);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\\r\\n\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\npong\\r\\n--\");\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"kit\\\"\")\n        .contains(\"Content-Transfer-Encoding: 8-bit\")\n        .contains(\"\\r\\nkat\\r\\n--\");\n  }\n\n  @Test public void multipartPartMapRejectsNonStringKeys() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<Object, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap keys must be of type String: class java.lang.Object (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsOkHttpPartValues() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, MultipartBody.Part> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap values cannot be MultipartBody.Part. Use @Part List<Part> or a different value type instead. (parameter #1)\\n\"\n              + \"    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNull() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map was null.\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNullKeys() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(null, RequestBody.create(null, \"kat\"));\n\n    try {\n      buildRequest(Example.class, params);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map contained null key.\");\n    }\n  }\n\n  @Test public void multipartPartMapRejectsNullValues() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {\n        return null;\n      }\n    }\n\n    Map<String, RequestBody> params = new LinkedHashMap<>();\n    params.put(\"ping\", RequestBody.create(null, \"pong\"));\n    params.put(\"kit\", null);\n\n    try {\n      buildRequest(Example.class, params);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Part map contained null value for key 'kit'.\");\n    }\n  }\n\n  @Test public void multipartPartMapMustBeMap() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap List<Object> parts) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, Collections.emptyList());\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@PartMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void multipartPartMapSupportsSubclasses() throws IOException {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@PartMap Foo parts) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    Buffer buffer = new Buffer();\n    request.body().writeTo(buffer);\n    assertThat(buffer.readUtf8())\n        .contains(\"name=\\\"hello\\\"\")\n        .contains(\"\\r\\n\\r\\nworld\\r\\n--\");\n  }\n\n  @Test public void multipartNullRemovesPart() throws IOException {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") String ping, @Part(\"fizz\") String fizz) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"pong\", null);\n    assertThat(request.method()).isEqualTo(\"POST\");\n    assertThat(request.headers().size()).isZero();\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n\n    RequestBody body = request.body();\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String bodyString = buffer.readUtf8();\n\n    assertThat(bodyString)\n        .contains(\"Content-Disposition: form-data;\")\n        .contains(\"name=\\\"ping\\\"\")\n        .contains(\"\\r\\npong\\r\\n--\");\n  }\n\n  @Test public void multipartPartOptional() {\n    class Example {\n      @Multipart //\n      @POST(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Part(\"ping\") RequestBody ping) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalStateException e) {\n      assertThat(e.getMessage()).isEqualTo(\"Multipart body must have at least one part.\");\n    }\n  }\n\n  @Test public void simpleFormEncoded() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") String foo, @Field(\"ping\") String ping) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", \"pong\");\n    assertBody(request.body(), \"foo=bar&ping=pong\");\n  }\n\n  @Test public void formEncodedWithEncodedNameFieldParam() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(value = \"na%20me\", encoded = true) String foo) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"ba%20r\");\n    assertBody(request.body(), \"na%20me=ba%20r\");\n  }\n\n  @Test public void formEncodedFieldOptional() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") String foo, @Field(\"ping\") String ping,\n          @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"bar\", null, \"kat\");\n    assertBody(request.body(), \"foo=bar&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldList() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") List<Object> fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    List<Object> values = Arrays.<Object>asList(\"foo\", \"bar\", null, 3);\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=foo&foo=bar&foo=3&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldArray() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") Object[] fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    Object[] values = { 1, 2, null, \"three\" };\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=1&foo=2&foo=three&kit=kat\");\n  }\n\n  @Test public void formEncodedFieldPrimitiveArray() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@Field(\"foo\") int[] fields, @Field(\"kit\") String kit) {\n        return null;\n      }\n    }\n\n    int[] values = { 1, 2, 3 };\n    Request request = buildRequest(Example.class, values, \"kat\");\n    assertBody(request.body(), \"foo=1&foo=2&foo=3&kit=kat\");\n  }\n\n  @Test public void formEncodedWithEncodedNameFieldParamMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@FieldMap(encoded = true) Map<String, Object> fieldMap) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"k%20it\", \"k%20at\");\n    fieldMap.put(\"pin%20g\", \"po%20ng\");\n\n    Request request = buildRequest(Example.class, fieldMap);\n    assertBody(request.body(), \"k%20it=k%20at&pin%20g=po%20ng\");\n  }\n\n  @Test public void formEncodedFieldMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/foo\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> fieldMap) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(\"ping\", \"pong\");\n\n    Request request = buildRequest(Example.class, fieldMap);\n    assertBody(request.body(), \"kit=kat&ping=pong\");\n  }\n\n  @Test public void fieldMapRejectsNull() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    try {\n      buildRequest(Example.class, new Object[] { null });\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map was null.\");\n    }\n  }\n\n  @Test public void fieldMapRejectsNullKeys() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(null, \"pong\");\n\n    try {\n      buildRequest(Example.class, fieldMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map contained null key.\");\n    }\n  }\n\n  @Test public void fieldMapRejectsNullValues() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Map<String, Object> a) {\n        return null;\n      }\n    }\n\n    Map<String, Object> fieldMap = new LinkedHashMap<>();\n    fieldMap.put(\"kit\", \"kat\");\n    fieldMap.put(\"foo\", null);\n\n    try {\n      buildRequest(Example.class, fieldMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Field map contained null value for key 'foo'.\");\n    }\n  }\n\n  @Test public void fieldMapMustBeAMap() {\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap List<String> a) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"@FieldMap parameter type must be Map. (parameter #1)\\n    for method Example.method\");\n    }\n  }\n\n  @Test public void fieldMapSupportsSubclasses() throws IOException {\n    class Foo extends HashMap<String, String> {\n    }\n\n    class Example {\n      @FormUrlEncoded //\n      @POST(\"/\") //\n      Call<ResponseBody> method(@FieldMap Foo a) {\n        return null;\n      }\n    }\n\n    Foo foo = new Foo();\n    foo.put(\"hello\", \"world\");\n\n    Request request = buildRequest(Example.class, foo);\n    Buffer buffer = new Buffer();\n    request.body().writeTo(buffer);\n    assertThat(buffer.readUtf8()).isEqualTo(\"hello=world\");\n  }\n\n  @Test public void simpleHeaders() {\n    class Example {\n      @GET(\"/foo/bar/\")\n      @Headers({\n          \"ping: pong\",\n          \"kit: kat\"\n      })\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.get(\"kit\")).isEqualTo(\"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headersDoNotOverwriteEachOther() {\n    class Example {\n      @GET(\"/foo/bar/\")\n      @Headers({\n          \"ping: pong\",\n          \"kit: kat\",\n          \"kit: -kat\",\n      })\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(3);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.values(\"kit\")).containsOnly(\"kat\", \"-kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamToString() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"kit\") BigInteger kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, new BigInteger(\"1234\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(1);\n    assertThat(headers.get(\"kit\")).isEqualTo(\"1234\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParam() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      @Headers(\"ping: pong\") //\n      Call<ResponseBody> method(@Header(\"kit\") String kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"kat\");\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.get(\"ping\")).isEqualTo(\"pong\");\n    assertThat(headers.get(\"kit\")).isEqualTo(\"kat\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamList() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"foo\") List<String> kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, Arrays.asList(\"bar\", null, \"baz\"));\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.values(\"foo\")).containsExactly(\"bar\", \"baz\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void headerParamArray() {\n    class Example {\n      @GET(\"/foo/bar/\") //\n      Call<ResponseBody> method(@Header(\"foo\") String[] kit) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, (Object) new String[] { \"bar\", null, \"baz\" });\n    assertThat(request.method()).isEqualTo(\"GET\");\n    okhttp3.Headers headers = request.headers();\n    assertThat(headers.size()).isEqualTo(2);\n    assertThat(headers.values(\"foo\")).containsExactly(\"bar\", \"baz\");\n    assertThat(request.url().toString()).isEqualTo(\"http://example.com/foo/bar/\");\n    assertThat(request.body()).isNull();\n  }\n\n  @Test public void contentTypeAnnotationHeaderOverrides() {\n    class Example {\n      @POST(\"/\") //\n      @Headers(\"Content-Type: text/not-plain\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    Request request = buildRequest(Example.class, body);\n    assertThat(request.body().contentType().toString()).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void malformedContentTypeHeaderThrows() {\n    class Example {\n      @POST(\"/\") //\n      @Headers(\"Content-Type: hello, world!\") //\n      Call<ResponseBody> method(@Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    try {\n      buildRequest(Example.class, body);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Malformed content type: hello, world!\\n\"\n          + \"    for method Example.method\");\n      assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class); // OkHttp's cause.\n    }\n  }\n\n  @Test public void contentTypeAnnotationHeaderAddsHeaderWithNoBody() {\n    class Example {\n      @DELETE(\"/\") //\n      @Headers(\"Content-Type: text/not-plain\") //\n      Call<ResponseBody> method() {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class);\n    assertThat(request.headers().get(\"Content-Type\")).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void contentTypeParameterHeaderOverrides() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Header(\"Content-Type\") String contentType, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"Plain\");\n    Request request = buildRequest(Example.class, \"text/not-plain\", body);\n    assertThat(request.body().contentType().toString()).isEqualTo(\"text/not-plain\");\n  }\n\n  @Test public void malformedContentTypeParameterThrows() {\n    class Example {\n      @POST(\"/\") //\n      Call<ResponseBody> method(@Header(\"Content-Type\") String contentType, @Body RequestBody body) {\n        return null;\n      }\n    }\n    RequestBody body = RequestBody.create(TEXT_PLAIN, \"hi\");\n    try {\n      buildRequest(Example.class, \"hello, world!\", body);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"Malformed content type: hello, world!\");\n      assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class); // OkHttp's cause.\n    }\n  }\n\n  @Test public void malformedAnnotationRelativeUrlThrows() {\n    class Example {\n      @GET(\"ftp://example.org\")\n      Call<ResponseBody> get() {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Malformed URL. Base: http://example.com/, Relative: ftp://example.org\");\n    }\n  }\n\n  @Test public void malformedParameterRelativeUrlThrows() {\n    class Example {\n      @GET\n      Call<ResponseBody> get(@Url String relativeUrl) {\n        return null;\n      }\n    }\n    try {\n      buildRequest(Example.class, \"ftp://example.org\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\n          \"Malformed URL. Base: http://example.com/, Relative: ftp://example.org\");\n    }\n  }\n\n  @Test public void multipartPartsShouldBeInOrder() throws IOException {\n    class Example {\n      @Multipart\n      @POST(\"/foo\")\n      Call<ResponseBody> get(@Part(\"first\") String data, @Part(\"second\") String dataTwo, @Part(\"third\") String dataThree) {\n        return null;\n      }\n    }\n    Request request = buildRequest(Example.class, \"firstParam\", \"secondParam\", \"thirdParam\");\n    MultipartBody body = (MultipartBody) request.body();\n\n    Buffer buffer = new Buffer();\n    body.writeTo(buffer);\n    String readBody = buffer.readUtf8();\n\n    assertThat(readBody.indexOf(\"firstParam\")).isLessThan(readBody.indexOf(\"secondParam\"));\n    assertThat(readBody.indexOf(\"secondParam\")).isLessThan(readBody.indexOf(\"thirdParam\"));\n  }\n\n  @Test public void queryParamsSkippedIfConvertedToNull() throws Exception {\n    class Example {\n      @GET(\"/query\") Call<ResponseBody> queryPath(@Query(\"a\") Object a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Request request = buildRequest(Example.class, retrofitBuilder, \"Ignored\");\n\n    assertThat(request.url().toString()).doesNotContain(\"Ignored\");\n  }\n\n  @Test public void queryParamMapsConvertedToNullShouldError() throws Exception {\n    class Example {\n      @GET(\"/query\") Call<ResponseBody> queryPath(@QueryMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Map<String, String> queryMap = Collections.singletonMap(\"kit\", \"kat\");\n\n    try {\n      buildRequest(Example.class, retrofitBuilder, queryMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessageContaining(\n          \"Query map value 'kat' converted to null by retrofit2.helpers.NullObjectConverterFactory$1 for key 'kit'.\");\n    }\n  }\n\n  @Test public void fieldParamsSkippedIfConvertedToNull() throws Exception {\n    class Example {\n      @FormUrlEncoded\n      @POST(\"/query\") Call<ResponseBody> queryPath(@Field(\"a\") Object a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Request request = buildRequest(Example.class, retrofitBuilder, \"Ignored\");\n\n    assertThat(request.url().toString()).doesNotContain(\"Ignored\");\n  }\n\n  @Test public void fieldParamMapsConvertedToNullShouldError() throws Exception {\n    class Example {\n      @FormUrlEncoded\n      @POST(\"/query\") Call<ResponseBody> queryPath(@FieldMap Map<String, String> a) {\n        return null;\n      }\n    }\n\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com\")\n        .addConverterFactory(new NullObjectConverterFactory());\n\n    Map<String, String> queryMap = Collections.singletonMap(\"kit\", \"kat\");\n\n    try {\n      buildRequest(Example.class, retrofitBuilder, queryMap);\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessageContaining(\n          \"Field map value 'kat' converted to null by retrofit2.helpers.NullObjectConverterFactory$1 for key 'kit'.\");\n    }\n  }\n\n  private static void assertBody(RequestBody body, String expected) {\n    assertThat(body).isNotNull();\n    Buffer buffer = new Buffer();\n    try {\n      body.writeTo(buffer);\n      assertThat(buffer.readUtf8()).isEqualTo(expected);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  static <T> Request buildRequest(Class<T> cls, Retrofit.Builder builder, Object... args) {\n    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {\n      @Override public okhttp3.Call newCall(Request request) {\n        throw new UnsupportedOperationException(\"Not implemented\");\n      }\n    };\n\n    Retrofit retrofit = builder.callFactory(callFactory).build();\n\n    Method method = TestingUtils.onlyMethod(cls);\n    try {\n      return RequestFactory.parseAnnotations(retrofit, method).create(args);\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new AssertionError(e);\n    }\n  }\n\n  static <T> Request buildRequest(Class<T> cls, Object... args) {\n    Retrofit.Builder retrofitBuilder = new Retrofit.Builder()\n        .baseUrl(\"http://example.com/\")\n        .addConverterFactory(new ToStringConverterFactory());\n\n    return buildRequest(cls, retrofitBuilder, args);\n  }\n\n  static void assertMalformedRequest(Class<?> cls, Object... args) {\n    try {\n      Request request = buildRequest(cls, args);\n      fail(\"expected a malformed request but was \" + request);\n    } catch (IllegalArgumentException expected) {\n    }\n  }\n}\n"], "filenames": ["retrofit/src/main/java/retrofit2/RequestBuilder.java", "retrofit/src/test/java/retrofit2/RequestFactoryTest.java"], "buggy_code_start_loc": [18, 880], "buggy_code_end_loc": [95, 2785], "fixing_code_start_loc": [19, 881], "fixing_code_end_loc": [117, 2876], "type": "CWE-22", "message": "Square Retrofit version versions from (including) 2.0 and 2.5.0 (excluding) contains a Directory Traversal vulnerability in RequestBuilder class, method addPathParameter that can result in By manipulating the URL an attacker could add or delete resources otherwise unavailable to her.. This attack appear to be exploitable via An attacker should have access to an encoded path parameter on POST, PUT or DELETE request.. This vulnerability appears to have been fixed in 2.5.0 and later.", "other": {"cve": {"id": "CVE-2018-1000850", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-20T15:29:02.423", "lastModified": "2019-10-17T22:15:12.867", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Square Retrofit version versions from (including) 2.0 and 2.5.0 (excluding) contains a Directory Traversal vulnerability in RequestBuilder class, method addPathParameter that can result in By manipulating the URL an attacker could add or delete resources otherwise unavailable to her.. This attack appear to be exploitable via An attacker should have access to an encoded path parameter on POST, PUT or DELETE request.. This vulnerability appears to have been fixed in 2.5.0 and later."}, {"lang": "es", "value": "Square Retrofit, desde la versi\u00f3n 2.0 (incluida) y 2.5.0 (excluida), contiene una vulnerabilidad de salto de directorio en la clase RequestBuilder, m\u00e9todo addPathParameter. Al manipular la URL, un atacante podr\u00eda a\u00f1adir o eliminar recursos que no estar\u00edan disponibles. Para que el ataque sea explotable, un atacante deber\u00eda tener acceso a un par\u00e1metro path cifrado en las peticiones POST, PUT o DELETE. La vulnerabilidad parece haber sido solucionada en las versiones 2.5.0 y siguientes."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:squareup:retrofit:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.5.0", "matchCriteriaId": "D1F642F3-1814-4D87-8C53-059F499EA23B"}]}]}], "references": [{"url": "https://access.redhat.com/errata/RHSA-2019:3892", "source": "cve@mitre.org"}, {"url": "https://github.com/square/retrofit/blob/master/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/square/retrofit/commit/b9a7f6ad72073ddd40254c0058710e87a073047d#diff-943ec7ed35e68201824904d1dc0ec982", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://ihacktoprotect.com/post/retrofit-path-traversal/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/square/retrofit/commit/b9a7f6ad72073ddd40254c0058710e87a073047d#diff-943ec7ed35e68201824904d1dc0ec982"}}