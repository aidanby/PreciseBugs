{"buggy_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with unit drop down menu.\n *\n * @property integer $maxlength\n * @property boolean $mandatory\n * @property string  $placeholder\n * @property array   $options\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass InputUnit extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Units\n\t * @var array\n\t */\n\tprotected $arrUnits = array();\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mandatory':\n\t\t\t\tif ($varValue)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['required'] = 'required';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($this->arrAttributes['required']);\n\t\t\t\t}\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\n\t\t\tcase 'placeholder':\n\t\t\t\t$this->arrAttributes['placeholder'] = $varValue;\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrUnits = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Do not validate unit fields\n\t *\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k != 'unit')\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\tforeach ($this->arrUnits as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array('value'=>$this->varValue);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<input type=\"text\" name=\"%s[value]\" id=\"ctrl_%s\" class=\"tl_text_unit%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\"> <select name=\"%s[unit]\" class=\"tl_select_unit\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\t$this->strName,\n\t\t\t$this->strId,\n\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\tStringUtil::specialchars($this->varValue['value']),\n\t\t\t$this->getAttributes(),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(InputUnit::class, 'InputUnit');\n", "<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with interval drop down menu.\n *\n * @property integer $maxlength\n * @property array   $options\n * @property boolean $mandatory\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass TimePeriod extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Units\n\t * @var array\n\t */\n\tprotected $arrUnits = array();\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mandatory':\n\t\t\t\tif ($varValue)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['required'] = 'required';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($this->arrAttributes['required']);\n\t\t\t\t}\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrUnits = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Do not validate unit fields\n\t *\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k != 'unit')\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\t// Add an empty option if there are none (see #5067)\n\t\tif (empty($this->arrUnits))\n\t\t{\n\t\t\t$this->arrUnits = array(array('value'=>'', 'label'=>'-'));\n\t\t}\n\n\t\tforeach ($this->arrUnits as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array('value'=>$this->varValue);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<input type=\"text\" name=\"%s[value]\" id=\"ctrl_%s\" class=\"tl_text_interval%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\"> <select name=\"%s[unit]\" class=\"tl_select_interval\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\t$this->strName,\n\t\t\t$this->strId,\n\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\tStringUtil::specialchars($this->varValue['value']),\n\t\t\t$this->getAttributes(),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(TimePeriod::class, 'TimePeriod');\n", "<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with unit drop down menu.\n *\n * @property integer $maxlength\n * @property array   $options\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass TrblField extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Units\n\t * @var array\n\t */\n\tprotected $arrUnits = array();\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrUnits = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Do not validate unit fields\n\t *\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k != 'unit')\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\tforeach ($this->arrUnits as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\t$arrFields = array();\n\t\t$arrKeys = array('top', 'right', 'bottom', 'left');\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array();\n\t\t}\n\n\t\tforeach ($arrKeys as $strKey)\n\t\t{\n\t\t\t$arrFields[] = sprintf(\n\t\t\t\t'<input type=\"text\" name=\"%s[%s]\" id=\"ctrl_%s\" class=\"tl_text_trbl trbl_%s%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\">',\n\t\t\t\t$this->strName,\n\t\t\t\t$strKey,\n\t\t\t\t$this->strId . '_' . $strKey,\n\t\t\t\t$strKey,\n\t\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\t\tStringUtil::specialchars(@$this->varValue[$strKey]), // see #4979\n\t\t\t\t$this->getAttributes()\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'%s <select name=\"%s[unit]\" class=\"tl_select_unit\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\timplode(' ', $arrFields),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(TrblField::class, 'TrblField');\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with unit drop down menu.\n *\n * @property integer $maxlength\n * @property boolean $mandatory\n * @property string  $placeholder\n * @property array   $options\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass InputUnit extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mandatory':\n\t\t\t\tif ($varValue)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['required'] = 'required';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($this->arrAttributes['required']);\n\t\t\t\t}\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\n\t\t\tcase 'placeholder':\n\t\t\t\t$this->arrAttributes['placeholder'] = $varValue;\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrOptions = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k == 'unit')\n\t\t\t{\n\t\t\t\tif (!$this->isValidOption($v))\n\t\t\t\t{\n\t\t\t\t\t$varInput[$k] = '';\n\t\t\t\t\t$this->addError($GLOBALS['TL_LANG']['ERR']['invalid']);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\tforeach ($this->arrOptions as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array('value'=>$this->varValue);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<input type=\"text\" name=\"%s[value]\" id=\"ctrl_%s\" class=\"tl_text_unit%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\"> <select name=\"%s[unit]\" class=\"tl_select_unit\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\t$this->strName,\n\t\t\t$this->strId,\n\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\tStringUtil::specialchars($this->varValue['value']),\n\t\t\t$this->getAttributes(),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(InputUnit::class, 'InputUnit');\n", "<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with interval drop down menu.\n *\n * @property integer $maxlength\n * @property array   $options\n * @property boolean $mandatory\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass TimePeriod extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'mandatory':\n\t\t\t\tif ($varValue)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['required'] = 'required';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($this->arrAttributes['required']);\n\t\t\t\t}\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrOptions = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k == 'unit')\n\t\t\t{\n\t\t\t\tif (!$this->isValidOption($v))\n\t\t\t\t{\n\t\t\t\t\t$varInput[$k] = '';\n\t\t\t\t\t$this->addError($GLOBALS['TL_LANG']['ERR']['invalid']);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\t// Add an empty option if there are none (see #5067)\n\t\tif (empty($this->arrOptions))\n\t\t{\n\t\t\t$this->arrOptions = array(array('value'=>'', 'label'=>'-'));\n\t\t}\n\n\t\tforeach ($this->arrOptions as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array('value'=>$this->varValue);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<input type=\"text\" name=\"%s[value]\" id=\"ctrl_%s\" class=\"tl_text_interval%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\"> <select name=\"%s[unit]\" class=\"tl_select_interval\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\t$this->strName,\n\t\t\t$this->strId,\n\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\tStringUtil::specialchars($this->varValue['value']),\n\t\t\t$this->getAttributes(),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(TimePeriod::class, 'TimePeriod');\n", "<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\n/**\n * Provide methods to handle text fields with unit drop down menu.\n *\n * @property integer $maxlength\n * @property array   $options\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass TrblField extends Widget\n{\n\t/**\n\t * Submit user input\n\t * @var boolean\n\t */\n\tprotected $blnSubmitInput = true;\n\n\t/**\n\t * Template\n\t * @var string\n\t */\n\tprotected $strTemplate = 'be_widget';\n\n\t/**\n\t * Add specific attributes\n\t *\n\t * @param string $strKey\n\t * @param mixed  $varValue\n\t */\n\tpublic function __set($strKey, $varValue)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'maxlength':\n\t\t\t\tif ($varValue > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->arrAttributes['maxlength'] = $varValue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'options':\n\t\t\t\t$this->arrOptions = StringUtil::deserialize($varValue);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tparent::__set($strKey, $varValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param mixed $varInput\n\t *\n\t * @return mixed\n\t */\n\tprotected function validator($varInput)\n\t{\n\t\tforeach ($varInput as $k=>$v)\n\t\t{\n\t\t\tif ($k == 'unit')\n\t\t\t{\n\t\t\t\tif (!$this->isValidOption($v))\n\t\t\t\t{\n\t\t\t\t\t$varInput[$k] = '';\n\t\t\t\t\t$this->addError($GLOBALS['TL_LANG']['ERR']['invalid']);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$varInput[$k] = parent::validator($v);\n\t\t\t}\n\t\t}\n\n\t\treturn $varInput;\n\t}\n\n\t/**\n\t * Only check against the unit values (see #7246)\n\t *\n\t * @param array $arrOption The options array\n\t *\n\t * @return string The \"selected\" attribute or an empty string\n\t */\n\tprotected function isSelected($arrOption)\n\t{\n\t\tif (empty($this->varValue) && empty($_POST) && $arrOption['default'])\n\t\t{\n\t\t\treturn $this->optionSelected(1, 1);\n\t\t}\n\n\t\tif (empty($this->varValue) || !\\is_array($this->varValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $this->optionSelected($arrOption['value'], $this->varValue['unit']);\n\t}\n\n\t/**\n\t * Generate the widget and return it as string\n\t *\n\t * @return string\n\t */\n\tpublic function generate()\n\t{\n\t\t$arrUnits = array();\n\n\t\tforeach ($this->arrOptions as $arrUnit)\n\t\t{\n\t\t\t$arrUnits[] = sprintf(\n\t\t\t\t'<option value=\"%s\"%s>%s</option>',\n\t\t\t\tStringUtil::specialchars($arrUnit['value']),\n\t\t\t\t$this->isSelected($arrUnit),\n\t\t\t\t$arrUnit['label']\n\t\t\t);\n\t\t}\n\n\t\t$arrFields = array();\n\t\t$arrKeys = array('top', 'right', 'bottom', 'left');\n\n\t\tif (!\\is_array($this->varValue))\n\t\t{\n\t\t\t$this->varValue = array();\n\t\t}\n\n\t\tforeach ($arrKeys as $strKey)\n\t\t{\n\t\t\t$arrFields[] = sprintf(\n\t\t\t\t'<input type=\"text\" name=\"%s[%s]\" id=\"ctrl_%s\" class=\"tl_text_trbl trbl_%s%s\" value=\"%s\"%s onfocus=\"Backend.getScrollOffset()\">',\n\t\t\t\t$this->strName,\n\t\t\t\t$strKey,\n\t\t\t\t$this->strId . '_' . $strKey,\n\t\t\t\t$strKey,\n\t\t\t\t($this->strClass ? ' ' . $this->strClass : ''),\n\t\t\t\tStringUtil::specialchars(@$this->varValue[$strKey]), // see #4979\n\t\t\t\t$this->getAttributes()\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'%s <select name=\"%s[unit]\" class=\"tl_select_unit\" onfocus=\"Backend.getScrollOffset()\"%s>%s</select>%s',\n\t\t\timplode(' ', $arrFields),\n\t\t\t$this->strName,\n\t\t\t$this->getAttribute('disabled'),\n\t\t\timplode('', $arrUnits),\n\t\t\t$this->wizard\n\t\t);\n\t}\n}\n\nclass_alias(TrblField::class, 'TrblField');\n"], "filenames": ["core-bundle/src/Resources/contao/widgets/InputUnit.php", "core-bundle/src/Resources/contao/widgets/TimePeriod.php", "core-bundle/src/Resources/contao/widgets/TrblField.php"], "buggy_code_start_loc": [38, 37, 36], "buggy_code_end_loc": [138, 139, 120], "fixing_code_start_loc": [37, 36, 35], "fixing_code_end_loc": [138, 139, 120], "type": "CWE-79", "message": "Contao is an open source content management system. Starting in version 4.0.0 and prior to versions 4.9.42, 4.13.28, and 5.1.10, it is possible for untrusted backend users to inject malicious code into headline fields in the back end, which will be executed both in the element preview (back end) and on the website (front end). Installations are only affected if there are untrusted back end users who have the rights to modify headline fields, or other fields using the input unit widget. Contao 4.9.42, 4.13.28, and 5.1.10 have a patch for this issue. As a workaround, disable the login for all untrusted back end users.", "other": {"cve": {"id": "CVE-2023-36806", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-25T19:15:11.550", "lastModified": "2023-11-15T03:21:03.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Contao is an open source content management system. Starting in version 4.0.0 and prior to versions 4.9.42, 4.13.28, and 5.1.10, it is possible for untrusted backend users to inject malicious code into headline fields in the back end, which will be executed both in the element preview (back end) and on the website (front end). Installations are only affected if there are untrusted back end users who have the rights to modify headline fields, or other fields using the input unit widget. Contao 4.9.42, 4.13.28, and 5.1.10 have a patch for this issue. As a workaround, disable the login for all untrusted back end users."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.9.42", "matchCriteriaId": "15E0A7C9-3A78-4D4B-8871-FD3299C55F06"}, {"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.10.0", "versionEndExcluding": "4.13.28", "matchCriteriaId": "D5DDD8AD-0906-478A-BAB4-5B0B4C50C517"}, {"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.1.10", "matchCriteriaId": "11B3001D-C6B9-44C3-B477-ECD0C4BD3397"}]}]}], "references": [{"url": "https://github.com/contao/contao/commit/5c9aff32cfc1f7dc452a045862ac2f86a6b9b4b4", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/contao/contao/commit/c98585d36baa25fda69c062421e7e7eadc53c82b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/contao/contao/commit/ccb64c777eb0f9c0e6490c9135d80e915d37cd32", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/contao/contao/security/advisories/GHSA-4gpr-p634-922x", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://herolab.usd.de/security-advisories/usd-2023-0020/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/contao/contao/commit/5c9aff32cfc1f7dc452a045862ac2f86a6b9b4b4"}}