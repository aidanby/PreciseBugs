{"buggy_code": ["<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n/*\n * LimeSurvey\n * Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n * All rights reserved.\n * License: GNU/GPL License v2 or later, see LICENSE.php\n * LimeSurvey is free software. This version may have been modified pursuant\n * to the GNU General Public License, and as distributed it includes or\n * is derivative of works licensed under the GNU General Public License or\n * other free or open source software licenses.\n * See COPYRIGHT.php for copyright notices and details.\n *\n */\n\nfunction subval_sort($a, $subkey, $order)\n{\n    $b = array();\n    $c = array();\n    foreach ($a as $k => $v)\n    {\n        $b[$k] = strtolower($v[$subkey]);\n    }\n    if ($order == \"asc\")\n    {\n        asort($b, SORT_REGULAR);\n    }\n    else\n    {\n        arsort($b, SORT_REGULAR);\n    }\n    foreach ($b as $key => $val)\n    {\n        $c[] = $a[$key];\n    }\n    return $c;\n}\n\n\n/*\n * This is the main controller for Participants Panel\n */\nclass participantsaction extends Survey_Common_Action\n{\n    public function runWithParams($params)\n    {\n        if (!Permission::model()->hasGlobalPermission('participantpanel','read'))\n        {\n            die('No permission');\n        }\n        parent::runWithParams($params);\n    }\n\n\n    \n    /**\n     * Loads jqGrid for the view\n     * @param string $sScript Subaction\n     */\n    private function _loadjqGrid($sScript = '', $aData = array())\n    {\n        $aData['aAttributes'] = ParticipantAttributeName::model()->getAllAttributes();\n        App()->getClientScript()->registerPackage('jqgrid');\n        if (!empty($sScript))\n        {\n            App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . $sScript . '.js');\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', $sScript), $aData);\n        }\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param string|array $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = 'participants', $aViewUrls = array(), $aData = array())\n    {\n        App()->getClientScript()->registerPackage('bootstrap-multiselect');\n        $aData['display']['menu_bars'] = false;    \n        foreach((array) $aViewUrls as $sViewUrl)\n        {\n            $a_ViewUrls[] = $sViewUrl . '_view';\n        }\n        parent::_renderWrappedTemplate($sAction, $a_ViewUrls, $aData);\n    }\n    \n    /**\n     * Export to csv using optional search/filter\n     * \n     * @param type $search  CDCriteria?\n     * @paran mixed $mAttributeIDs Empty array for no attributes, or array of attribute IDs or null for all attributes \n     */\n    private function csvExport($search = null, $aAttributeIDs=null) {\n        Yii::app()->loadHelper('export');      \n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n\n        $query = Participant::model()->getParticipants(0, 0, $aAttributeIDs, null, $search, $iUserID);\n        if (!$query)\n            return false;\n\n        // Field names in the first row\n        $fields = array('participant_id', 'firstname', 'lastname', 'email', 'language', 'blacklisted', 'owner_uid');\n        $outputarray = array(); // The array to be passed to the export helper to be written to a csv file\n        \n        $outputarray[0] = $fields; //fields written to output array\n\n        // If attribute fields are selected, add them to the output\n        if ($aAttributeIDs==null)\n        {\n            $aAttributes = ParticipantAttributeName::model()->getAllAttributes();\n        }   \n        else\n        {\n            foreach ($aAttributeIDs as $value)\n            {\n                if ($value==0) continue;\n                $fields[] = 'a'.$value;\n                $attributename = ParticipantAttributeName::model()->getAttributeNames($value);\n                $outputarray[0][] = $attributename[0]['attribute_name'];\n            }\n        }    \n\n        $fieldKeys = array_flip($fields);\n        $fieldNeededKeys=array_fill_keys($outputarray[0], '');\n        foreach ($query as $field => $aData)\n        {\n            $outputarray[] = array_merge($fieldNeededKeys,array_intersect_key($aData, $fieldKeys));\n        }\n        CPDBExport($outputarray, \"central_\" . time());\n    }\n    \n    /**\n     * Returns a string with the number of participants available for export or 0\n     * \n     * @param type $search\n     * @return string|0\n     */\n    protected function csvExportCount($search = null)\n    {\n        $clang = $this->getController()->lang;\n        \n        $attid = ParticipantAttributeName::model()->getVisibleAttributes();\n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n        \n\n        $count = Participant::model()->getParticipantsCount($attid, $search, $iUserID);\n\n        if ($count > 0) {\n            return sprintf($clang->ngT(\"Export %s participant to CSV\",\"Export %s participants to CSV\", $count),$count);\n        } else {\n            return $count;\n        }\n    }\n\n    /**\n     * Loads the view 'participantsPanel'\n     */\n    function index()\n    {\n        $iUserID = Yii::app()->session['loginID'];\n\n        // if superadmin all the records in the cpdb will be displayed\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iTotalRecords = Participant::model()->count();\n        }\n        // if not only the participants on which he has right on (shared and owned)\n        else\n        {\n            $iTotalRecords = Participant::model()->getParticipantsOwnerCount($iUserID);\n        }\n        // gets the count of participants, their attributes and other such details\n        $aData = array(\n            'totalrecords' => $iTotalRecords,\n            'owned' => Participant::model()->count('owner_uid = ' . $iUserID),\n            'shared' => Participant::model()->getParticipantsSharedCount($iUserID),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes(),\n            'attributecount' => ParticipantAttributeName::model()->count(),\n            'blacklisted' => Participant::model()->count('owner_uid = ' . $iUserID . ' AND blacklisted = \\'Y\\'')\n        );\n        // loads the participant panel and summary view\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'summary'), $aData);\n    }\n\n    /**\n     * Loads the view 'importCSV'\n     */\n    function importCSV()\n    {\n        $aData = array(\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'importCSV'),$aData);\n    }\n\n    /**\n     * Loads the view 'displayParticipants' which contains the main grid\n     */\n    function displayParticipants()\n    {\n        $lang = Yii::app()->session['adminlang'];\n        // loads the survey names to be shown in add to survey\n        // if user is superadmin, all survey names\n        $sSearchCondition=Yii::app()->request->getPost('searchcondition','');\n        $urlSearch=!empty($sSearchCondition) ? \"getParticipantsResults_json\" : \"getParticipants_json\";\n\n        //Get list of surveys.\n        //Should be all surveys owned by user (or all surveys for super admin)\n        $surveys = Survey::model();\n        //!!! Is this even possible to execute?\n        if (!Permission::model()->hasGlobalPermission('superadmin','read'))\n            $surveys->permission(Yii::app()->user->getId());\n\n        $aSurveyNames = $surveys->model()->with(array('languagesettings'=>array('condition'=>'surveyls_language=language'), 'owner'))->findAll();\n\n        /* Build a list of surveys that have tokens tables */\n        $tSurveyNames=array();\n        foreach($aSurveyNames as $row)\n        {\n            $row = array_merge($row->attributes, $row->defaultlanguage->attributes);\n            $bTokenExists = tableExists('{{tokens_' . $row['sid'] . '}}');\n            if ($bTokenExists) //If tokens table exists\n            {\n                $tSurveyNames[]=$row;\n            }\n        }\n        // data to be passed to view\n        $aData = array(\n            'names' => User::model()->findAll(),\n            'attributes' => ParticipantAttributeName::model()->getVisibleAttributes(),\n            'allattributes' => ParticipantAttributeName::model()->getAllAttributes(),\n            'attributeValues' => ParticipantAttributeName::model()->getAllAttributesValues(),\n            'surveynames' => $aSurveyNames,\n            'tokensurveynames' => $tSurveyNames,\n            'urlsearch' => $urlSearch,\n            'sSearchCondition' => $sSearchCondition,\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        App()->getClientScript()->registerPackage('jqgrid');\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl')  . 'displayParticipants.css');\n        \n\n        // loads the participant panel view and display participant view\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'displayParticipants'), $aData);\n    }\n\n    /**\n     * Loads the view 'blacklistControl'\n     */\n    function blacklistControl()\n    {\n        $aData = array(\n            'blacklistallsurveys' => Yii::app()->getConfig('blacklistallsurveys'),\n            'blacklistnewsurveys' => Yii::app()->getConfig('blacklistnewsurveys'),\n            'blockaddingtosurveys' => Yii::app()->getConfig('blockaddingtosurveys'),\n            'hideblacklisted' => Yii::app()->getConfig('hideblacklisted'),\n            'deleteblacklisted' => Yii::app()->getConfig('deleteblacklisted'),\n            'allowunblacklist' => Yii::app()->getConfig('allowunblacklist'),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'blacklist'), $aData);\n    }\n\n    /**\n     * Loads the view 'userControl'\n     */\n    function userControl()\n    {\n        $aData = array(\n            'userideditable' => Yii::app()->getConfig('userideditable'),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'userControl'), $aData);\n    }\n\n    /**\n     * Loads the view 'sharePanel'\n     */\n    function sharePanel()\n    {\n        $this->_loadjqGrid('sharePanel');\n    }\n\n    /**\n     * Sends the shared participant info to the share panel using JSON encoding\n     * Called after the share panel grid is loaded\n     * Returns the json depending on the user logged in by checking it from the session\n     * @return JSON encoded string containg sharing information\n     */\n    function getShareInfo_json()\n    {\n        $aData = new stdClass();\n        $aData->page = 1;\n\n        // If super administrator all the share info in the links table will be shown\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $records = Participant::model()->getParticipantSharedAll();\n            $aData->records = count($records);\n            $aData->total = ceil($aData->records / 10);\n            $i = 0;\n\n            foreach ($records as $row)\n            {\n                $oShared = User::model()->getName($row['share_uid']); //for conversion of uid to human readable names\n                $owner = User::model()->getName($row['owner_uid']);\n                $aData->rows[$i]['id'] = $row['participant_id'].\"--\".$row['share_uid']; //This is the unique combination per record\n                $aData->rows[$i]['cell'] = array($row['firstname'], $row['lastname'], $row['email'], $oShared[0]['full_name'], $row['share_uid'], $owner[0]['full_name'], $row['date_added'], $row['can_edit']);\n                $i++;\n            }\n\n            echo ls_json_encode($aData);\n        }\n        // otherwise only the shared participants by that user\n        else\n        {\n            $records = Participant::model()->getParticipantShared(Yii::app()->session['loginID']);\n            $aData->records = count($records);\n            $aData->total = ceil($aData->records / 10);\n            $i = 0;\n\n            foreach ($records as $row)\n            {\n                $sharename = User::model()->getName($row['share_uid']); //for conversion of uid to human readable names\n                $aData->rows[$i]['id'] = $row['participant_id'];\n                $aData['rows'][$i]['cell'] = array($row['firstname'], $row['lastname'], $row['email'], $sharename['full_name'], $row['share_uid'], $row['date_added'], $row['can_edit']);\n                $i++;\n            }\n\n            echo ls_json_encode($aData);\n        }\n    }\n\n    /**\n     * Takes the edit call from the share panel, which either edits or deletes the share information\n     * Basically takes the call on can_edit\n     */\n    function editShareInfo()\n    {\n        $operation = Yii::app()->request->getPost('oper');\n        $shareIds = Yii::app()->request->getPost('id');\n        if ($operation == 'del') // If operation is delete , it will delete, otherwise edit it\n        {\n            ParticipantShare::model()->deleteRow($shareIds);\n        }\n        else\n        {\n            $aData = array(\n                'participant_id' => Yii::app()->request->getPost('participant_id'),\n                'can_edit' => Yii::app()->request->getPost('can_edit'),\n                'share_uid' => Yii::app()->request->getPost('shared_uid')\n            );\n            ParticipantShare::model()->updateShare($aData);\n        }\n    }\n\n    /**\n     * Loads the view 'attributeControl'\n     */\n    function attributeControl()\n    {\n        $this->_loadjqGrid('attributeControl');\n    }\n\n    /**\n     * Sends the attributes info using JSON encoding\n     * Called after the Attribute management grid is loaded\n     * @return JSON encoded string containg sharing information\n     */\n    function getAttributeInfo_json()\n    {\n        $clang = Yii::app()->lang;\n        $page = Yii::app()->request->getPost('page');\n        $limit = Yii::app()->request->getPost('rows');\n        $limit = isset($limit) ? $limit : 50; //Stop division by zero errors\n        $records = ParticipantAttributeName::model()->with('participant_attribute_names_lang')->findAll(array('order'=>'attribute_name'));\n        $attribute_types = array(\n            'DD' => $clang->gT(\"Drop-down list\"),\n            'DP' => $clang->gT(\"Date\"),\n            'TB' => $clang->gT(\"Text box\")\n        );\n        $aData = new stdClass();\n        $aData->page = $page;\n        $aData->records = count($records);\n        $aData->total = ceil(ParticipantAttributeName::model()->getCPDBAttributes(true) / $limit);\n        $i = 0;\n        foreach($records as $row) { //Iterate through each attribute\n            $sAttributeCaption=$row->defaultname; //Choose the first item by default\n            foreach($row->participant_attribute_names_lang as $names) { //Iterate through each language version of this attribute\n                if($names->lang == Yii::app()->session['adminlang']) {$sAttributeCaption= $sAttributeCaption.\" ({$names->attribute_name})\";} //Override the default with the admin language version if found\n            }\n            $aData->rows[$i]['id'] = $row->attribute_id;\n            $aData->rows[$i]['cell'] = array('', $sAttributeCaption, $attribute_types[$row->attribute_type], $row->visible);\n            $i++;\n        }\n\n        \n        echo ls_json_encode($aData);\n    }\n\n    /**\n     * Takes the edit call from the share panel, which either edits or deletes the share information\n     * Basically takes the call on can_edit\n     */\n    function editAttributeInfo()\n    {    \n        $clang = Yii::app()->lang;\n        $operation = Yii::app()->request->getPost('oper');\n\n        if ($operation == 'del' && Yii::app()->request->getPost('id'))\n        {\n            $aAttributeIds = (array) explode(',', Yii::app()->request->getPost('id'));\n            $aAttributeIds = array_map('trim', $aAttributeIds);\n            $aAttributeIds = array_map('intval', $aAttributeIds);\n\n            foreach ($aAttributeIds as $iAttributeId)\n            {\n                ParticipantAttributeName::model()->delAttribute($iAttributeId);\n            }\n        }\n        elseif ($operation == 'add' && Yii::app()->request->getPost('attribute_name'))\n        {\n            $aData = array(\n                'defaultname' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_name' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n                'visible' => Yii::app()->request->getPost('visible')? 'TRUE' : 'FALSE'\n            );\n            echo ParticipantAttributeName::model()->storeAttribute($aData);\n        }\n        elseif ($operation == 'edit' && Yii::app()->request->getPost('id'))\n        {\n            $aData = array(\n                'attribute_id' => Yii::app()->request->getPost('id'),\n                'attribute_name' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n                'visible' => Yii::app()->request->getPost('visible','FALSE') != 'FALSE' ? 'TRUE' : 'FALSE'\n            );\n            ParticipantAttributeName::model()->saveAttribute($aData);\n            $clang->eT(\"Attribute display setting updated\");\n        }\n\n    }\n\n    /**\n     * Takes the delete call from the display participants and take appropriate action depending on the condition\n     */\n    function delParticipant()\n    {\n        if (Permission::model()->hasGlobalPermission('participantpanel','delete'))\n        {\n            $selectoption = Yii::app()->request->getPost('selectedoption');\n            $iParticipantId = Yii::app()->request->getPost('participant_id');\n\n            //echo $selectoption.\" -- \".$iParticipantId.\"<br />\"; die();\n\n            // Deletes from participants only\n            if ($selectoption == 'po')\n            {\n                Participant::model()->deleteParticipants($iParticipantId);\n            }\n            // Deletes from central and token table\n            elseif ($selectoption == 'ptt')\n            {\n                Participant::model()->deleteParticipantToken($iParticipantId);\n            }\n            // Deletes from central , token and assosiated responses as well\n            elseif ($selectoption == 'ptta')\n            {\n                Participant::model()->deleteParticipantTokenAnswer($iParticipantId);\n            }\n        }\n    }\n\n    /**\n     * Resposible for editing data on the jqGrid\n     */\n    function editParticipant()\n    {\n        $sOperation = Yii::app()->request->getPost('oper');\n\n        // if edit it will update the row\n        if ($sOperation == 'edit' && Permission::model()->hasGlobalPermission('participantpanel','update') && Participant::model()->is_owner(Yii::app()->request->getPost('id')))\n        {\n            $aData = array(\n                'participant_id' => Yii::app()->request->getPost('id'),\n                'firstname' => Yii::app()->request->getPost('firstname'),\n                'lastname' => Yii::app()->request->getPost('lastname'),\n                'email' => Yii::app()->request->getPost('email'),\n                'language' => Yii::app()->request->getPost('language'),\n                'blacklisted' => Yii::app()->request->getPost('blacklisted')\n            );\n            Participant::model()->updateRow($aData);\n        }\n        // if add it will insert a new row\n        elseif ($sOperation == 'add' && Permission::model()->hasGlobalPermission('participantpanel','create'))\n        {\n            $uuid = $this->gen_uuid();\n            $aData = array(\n                'participant_id' => $uuid,\n                'firstname' => Yii::app()->request->getPost('firstname'),\n                'lastname' => Yii::app()->request->getPost('lastname'),\n                'email' => Yii::app()->request->getPost('email'),\n                'language' => Yii::app()->request->getPost('language'),\n                'blacklisted' => Yii::app()->request->getPost('blacklisted'),\n                'owner_uid' => Yii::app()->session['loginID'],\n                'created_by' => Yii::app()->session['loginID']\n            );\n            Participant::model()->insertParticipant($aData);\n        }\n    }\n\n    /**\n     * Stores the user control setting to the database\n     */\n    function storeUserControlValues()\n    {\n        if ($find = SettingGlobal::model()->findByPk('userideditable'))\n        {\n            SettingGlobal::model()->updateByPk('userideditable', array('stg_value'=>Yii::app()->request->getPost('userideditable')));\n        }\n        else\n        {\n            $stg = new SettingGlobal;\n            $stg ->stg_name='userideditable';\n            $stg ->stg_value=Yii::app()->request->getPost('userideditable');\n            $stg->save();\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/userControl'));\n    }\n\n    /**\n     * Stores the blacklist setting to the database\n     */\n    function storeBlacklistValues()\n    {\n        $values = Array('blacklistallsurveys', 'blacklistnewsurveys', 'blockaddingtosurveys', 'hideblacklisted', 'deleteblacklisted', 'allowunblacklist', 'userideditable');\n        foreach ($values as $value)\n        {\n            if ($find = SettingGlobal::model()->findByPk($value))\n            {\n                SettingGlobal::model()->updateByPk($value, array('stg_value'=>Yii::app()->request->getPost($value)));\n            }\n            else\n            {\n                $stg = new SettingGlobal;\n                $stg ->stg_name=$value;\n                $stg ->stg_value=Yii::app()->request->getPost($value);\n                $stg->save();\n            }\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/blacklistControl'));\n    }\n\n    /**\n     * Receives an ajax call containing the participant id in the fourth segment of the url\n     * Supplies list of survey links - surveys of which this participant is on the tokens table\n     * URL: [localurl]/limesurvey/admin/participants/getSurveyInfo_json/pid/[participant_id]\n     * RETURNS: json data containing linked survey information (Survey name, survey id, token_id and date_added)\n     */\n    function getSurveyInfo_json()\n    {\n        $participantid = Yii::app()->request->getQuery('pid');\n        $records = SurveyLink::model()->findAllByAttributes((array('participant_id' => $participantid)));\n        $aData = new stdClass();\n        $aData->page = 1;\n        $aData->records = count($records);\n        $aData->total = ceil($aData->records / 10);\n        $i = 0;\n        foreach ($records as $row)\n        {\n            $oSurvey=Survey::model()->with(array('languagesettings'=>array('condition'=>'surveyls_language=language')))->findByAttributes(array('sid' => $row['survey_id']));            \n            foreach($oSurvey->languagesettings as $oLanguageSetting)\n            {\n                $surveyname= $oLanguageSetting->surveyls_title;\n            }\n            $surveylink = \"\";\n            /* Check permissions of each survey before creating a link*/\n            if (!Permission::model()->hasSurveyPermission($row['survey_id'], 'tokens', 'read'))\n            {\n                $surveylink = $row['survey_id'];\n            } else\n            {\n                $surveylink = '<a href=' . Yii::app()->getController()->createUrl(\"/admin/tokens/sa/browse/surveyid/{$row['survey_id']}\") . '>' . $row['survey_id'].'</a>';\n            }\n            $aData->rows[$i]['cell'] = array($surveyname, $surveylink, $row['token_id'], $row['date_created'], $row['date_invited'], $row['date_completed']);\n            $i++;\n        }\n\n        echo ls_json_encode($aData);\n    }\n\n    /**\n     * Returns the count of the participants in the CSV and show it in the title of the modal box\n     * This is to give the user the hint to see the number of participants he is exporting\n     */\n    function exporttocsvcount()\n    {\n        $searchconditionurl = Yii::app()->request->getPost('searchURL');\n        $searchcondition  = Yii::app()->request->getPost('searchcondition');\n        $searchconditionurl = basename($searchconditionurl);\n        \n        if ($searchconditionurl != 'getParticipants_json') // if there is a search condition then only the participants that match the search criteria are counted\n        {\n            $condition = explode(\"||\", $searchcondition);\n            $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        } else {\n            $search = null;\n        }\n        \n        echo $this->csvExportCount($search);\n    }\n\n    /**\n     * Outputs the count of participants when using the export all button on the top\n     */\n    function exporttocsvcountAll()\n    {\n        echo $this->csvExportCount();\n    }\n\n    /**\n     * Responsible to export all the participants in the central table\n     */\n    function exporttocsvAll()\n    {\n        $this->csvExport(); // no search\n    }\n\n    /**\n     * Similar to export to all message where it counts the number to participants to be copied\n     * and echo them to be displayed in modal box header\n     */\n    function getaddtosurveymsg()\n    {\n        $searchcondition = basename(Yii::app()->request->getPost('searchcondition'));\n\n        // If there is a search condition in the url of the jqGrid\n        if ($searchcondition != 'getParticipants_json')\n        {\n            $participantid = \"\";\n            $condition = explode(\"||\", $searchcondition);\n\n            $query = Participant::model()->getParticipantsSearchMultiple($condition, 0, 0);\n\n            printf( $this->getController()->lang->gT(\"%s participant(s) are to be copied \"), count($query));\n        }\n        // if there is no search condition the participants will be counted on the basis of who is logged in\n        else\n        {\n            if (Permission::model()->hasGlobalPermission('superadmin','read')) //If super admin all the participants will be visible\n            {\n                $count = Participant::model()->getParticipantsCountWithoutLimit();\n            }\n            else\n            {\n                $query = Participant::model()->getParticipantsOwner(Yii::app()->session['loginID']);\n                $count = count($query);\n            }\n\n            printf($this->getController()->lang->gT(\"%s participant(s) are to be copied \"), $count);\n        }\n    }\n\n    /**\n     * Gets the ids of participants to be copied to the individual survey\n     */\n    function getSearchIDs()\n    {\n        $searchcondition = Yii::app()->request->getPost('searchcondition'); // get the search condition from the URL\n        $sSearchURL = basename(Yii::app()->request->getPost('searchURL')); // get the search condition from the URL\n        /* a search contains posted data inside $_POST['searchcondition'].\n        * Each separate query is made up of 3 fields, separated by double-pipes (\"|\")\n        * EG: fname||eq||jason||lname||ct||c\n        *\n        */\n        if ($sSearchURL != 'getParticipants_json') // if there is a search condition present\n        {\n            $participantid = \"\";\n            $condition = explode(\"||\", $searchcondition);  // explode the condition to the array\n            $query = Participant::model()->getParticipantsSearchMultiple($condition, 0, 0);\n\n            foreach ($query as $key => $value)\n            {\n                if (Permission::model()->hasGlobalPermission('superadmin','read'))\n                {\n                    $participantid .= \",\" . $value['participant_id']; // combine the participant id's in an string\n                } else\n                {\n                    if(Participant::model()->is_owner($value['participant_id']))\n                    {\n                        $participantid .= \",\" . $value['participant_id']; // combine the participant id's in an string\n                    }\n                }\n            }\n            echo $participantid; //echo the participant id's\n        }\n        else// if no search condition\n        {\n            $participantid = \"\"; // initiallise the participant id to blank\n            if (Permission::model()->hasGlobalPermission('superadmin','read')) //If super admin all the participants will be visible\n            {\n                $query = Participant::model()->getParticipantsWithoutLimit(); // get all the participant id if it is a super admin\n            }\n            else // get participants on which the user has right on\n            {\n                $query = Participant::model()->getParticipantsOwner(Yii::app()->session['loginID']);\n            }\n\n            foreach ($query as $key => $value)\n            {\n                $participantid = $participantid . \",\" . $value['participant_id']; // combine the participant id's in an string\n            }\n            echo $participantid; //echo the participant id's\n        }\n    }\n\n    /**\n     * Exports participants as CSV - receiver function for the GUI\n     */\n    function exporttocsv()\n    {\n        if (Yii::app()->request->getPost('searchcondition','') != '') // if there is a search condition then only the participants that match the search criteria are counted\n        {\n            $condition = explode(\"%7C%7C\", Yii::app()->request->getPost('searchcondition',''));\n            $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        } else {\n            $search = null;\n        }\n        $aAttributes=explode('+',Yii::app()->request->getPost('attributes',''));\n        $this->csvExport($search,$aAttributes);\n    }\n\n    /**\n     * Equal to getParticipants_json() but now with a search\n     */\n    function getParticipantsResults_json()\n    {\n        $searchcondition = Yii::app()->request->getpost('searchcondition');\n        $finalcondition = array();\n        $condition = explode(\"||\", $searchcondition);\n        $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        return $this->getParticipants_json($search);\n    }\n\n    /*\n       * Sends the data in JSON format extracted from the database to be displayed using the jqGrid\n    */\n    function getParticipants_json($search = null)\n    {\n        $page = Yii::app()->request->getPost('page');\n        $limit = Yii::app()->request->getPost('rows');\n        $limit = isset($limit) ? $limit : 50; //Stop division by zero errors\n\n        $attid = ParticipantAttributeName::model()->getVisibleAttributes();\n        $participantfields = array('participant_id', 'can_edit', 'firstname', 'lastname', 'email', 'blacklisted', 'survey', 'language', 'owner_uid');\n        foreach ($attid as $key => $value)\n        {\n            array_push($participantfields, $value['attribute_id']);\n        }\n        $sidx = Yii::app()->request->getPost('sidx');\n        $sidx = !empty($sidx) ? $sidx : \"lastname\";\n        $sord = Yii::app()->request->getPost('sord');\n        $sord = !empty($sord) ? $sord : \"asc\";\n        $order = $sidx. \" \". $sord;\n        \n        $aData = new stdClass;\n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n        $aData->records = Participant::model()->getParticipantsCount($attid, $search, $iUserID);\n        $aData->total = ceil($aData->records / $limit);\n        if ($page>$aData->total) {\n            $page = $aData->total;\n        }\n        $aData->page = $page;\n        $records = Participant::model()->getParticipants($page, $limit,$attid, $order, $search, $iUserID);\n        \n        \n        $aRowToAdd=array();\n        foreach ($records as $key => $row)\n        {            \n            if (array_key_exists('can_edit', $row)) {\n                $sCanEdit = $row['can_edit'];\n                if (is_null($sCanEdit)) {\n                    $sCanEdit = 'true';\n                }\n            } else {\n                // Super admin\n                $sCanEdit = \"true\";\n            }\n            if (trim($row['ownername'])=='') {\n                $row['ownername']=$row['username'];   \n            }\n            $aRowToAdd['cell'] = array($row['participant_id'], $sCanEdit, htmlspecialchars($row['firstname']), htmlspecialchars($row['lastname']), htmlspecialchars($row['email']), $row['blacklisted'], $row['survey'], $row['language'], $row['ownername']);\n            $aRowToAdd['id'] = $row['participant_id'];\n            // add attribute values\n            foreach($row as $key=>$attvalue)\n            {\n                if(preg_match('/^a\\d+$/', $key))\n                {\n                    $aRowToAdd['cell'][] = $attvalue;\n                }\n            }\n            \n            $aData->rows[] = $aRowToAdd;\n        }\n\n        echo ls_json_encode($aData);\n    }\n\n    /*\n     * Fetches the attributes of a participant to be displayed in the attribute subgrid\n     */\n    function getAttribute_json()\n    {\n        $iParticipantId = Yii::app()->request->getQuery('pid');\n        $records = ParticipantAttributeName::model()->getParticipantVisibleAttribute($iParticipantId);\n        $records = subval_sort($records, \"attribute_name\", \"asc\");\n\n        $i = 0;\n\n        $doneattributes = array(); //If the user has any actual attribute values, they'll be stored here\n\n        /* Iterate through each attribute owned by this user */\n        foreach ($records as $row)\n        {\n            $outputs[$i] = array(\"\", $row['participant_id'].\"_\".$row['attribute_id'], $row['attribute_type'], $row['attribute_id'], $row['attribute_name'], $row['value']);\n            /* Collect allowed values for a DropDown attribute */\n            if ($row['attribute_type'] == \"DD\")\n            {\n                $attvalues = ParticipantAttributeName::model()->getAttributesValues($row['attribute_id']);\n                if (!empty($attvalues))\n                {\n                    $attval = \"\";\n                    foreach ($attvalues as $val)\n                    {\n                        $attval .= $val['value'] . \":\" . $val['value'];\n                        $attval .= \";\";\n                    }\n                    $attval = substr($attval, 0, -1);\n                    array_push($outputs[$i], $attval);\n                }\n                else\n                {\n                    array_push($outputs[$i], \"\");\n                }\n            }\n            else\n            {\n                array_push($outputs[$i], \"\");\n            }\n            array_push($doneattributes, $row['attribute_id']);\n            $i++;\n        }\n\n        /* Build a list of attribute names for which this user has NO values stored, keep it in $attributenotdone */\n        $attributenotdone=array();\n        /* The user has NO values stored against any attribute */\n        if (count($doneattributes) == 0)\n        {\n            $attributenotdone = ParticipantAttributeName::model()->getCPDBAttributes();\n        }\n        /* The user has SOME values stored against attributes */\n        else\n        {\n            $attributenotdone = ParticipantAttributeName::model()->getnotaddedAttributes($doneattributes);\n        }\n\n        /* Go through the empty attributes and build an entry in the output for them */\n        foreach ($attributenotdone as $row)\n        {\n            $outputs[$i] = array(\"\", $iParticipantId.\"_\".$row['attribute_id'], $row['attribute_type'], $row['attribute_id'], $row['attribute_name'], \"\");\n            if ($row['attribute_type'] == \"DD\")\n            {\n                $attvalues = ParticipantAttributeName::model()->getAttributesValues($row['attribute_id']);\n                if (!empty($attvalues))\n                {\n                    $attval = \"\";\n                    foreach ($attvalues as $val)\n                    {\n                        $attval .= $val['value'] . \":\" . $val['value'];\n                        $attval .= \";\";\n                    }\n                    $attval = substr($attval, 0, -1);\n                    array_push($outputs[$i], $attval);\n                }\n                else\n                {\n                    array_push($outputs[$i], \"\");\n                }\n            }\n            else\n            {\n                array_push($outputs[$i], \"\");\n            }\n            $i++;\n        }\n        $outputs=subval_sort($outputs, 3, \"asc\");\n\n        $aData = new stdClass();\n        $aData->page = 1;\n        $aData->rows[0]['id'] = $iParticipantId;\n        $aData->rows[0]['cell'] = array();\n        $aData->records = count($outputs);\n        $aData->total = ceil($aData->records / 10);\n        foreach($outputs as $key=>$output) {\n            $aData->rows[$key]['id']=$output[1];\n            $aData->rows[$key]['cell']=$output;\n        }\n        /* TODO: It'd be nice to do a natural sort on the attribute list at some point.\n                 Currently they're returned in order of attributes WITH values, then WITHOUT values\n         */\n\n        echo ls_json_encode($aData);\n    }\n\n    /*\n     * Responsible for showing the additional attribute for central database\n     */\n    function viewAttribute()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $aData = array(\n            'attributes' => ParticipantAttributeName::model()->getAttribute($iAttributeId),\n            'attributenames' => ParticipantAttributeName::model()->getAttributeNames($iAttributeId),\n            'attributevalues' => ParticipantAttributeName::model()->getAttributesValues($iAttributeId),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl').'participants.css');\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl').'viewAttribute.css');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"viewAttribute.js\");\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'viewAttribute'), $aData);\n    }\n\n    /*\n     * Responsible for saving the additional attribute. It iterates through all the new attributes added dynamically\n     * and iterates through them\n     */\n    function saveAttribute()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $aData = array(\n            'attribute_id' => $iAttributeId,\n            'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n            'defaultname' => Yii::app()->request->getPost('defaultname'),\n            'visible' => Yii::app()->request->getPost('visible')\n        );\n        ParticipantAttributeName::model()->saveAttribute($aData);\n\n        foreach ($_POST as $key => $value)\n        {\n            // check for language code in the post variables this is a hack as the only way to check for language data\n            if (strlen($key) == 2)\n            {\n                $langdata = array(\n                    'attribute_id' => $iAttributeId,\n                    'attribute_name' => $value,\n                    'lang' => $key\n                );\n\n                ParticipantAttributeName::model()->saveAttributeLanguages($langdata);\n            }\n        }\n        if (Yii::app()->request->getPost('langdata'))\n        {\n            $langdata = array(\n                'attribute_id' => $iAttributeId,\n                'attribute_name' => Yii::app()->request->getPost('attname'),\n                'lang' => Yii::app()->request->getPost('langdata')\n            );\n\n            ParticipantAttributeName::model()->saveAttributeLanguages($langdata);\n        }\n        /* Create new attribute value */\n        if (Yii::app()->request->getPost('attribute_value_name_1') || Yii::app()->request->getPost('attribute_value_name_1') == \"0\")\n        {\n            $i = 1;\n            $attvaluename = 'attribute_value_name_' . $i;\n            while (array_key_exists($attvaluename, $_POST) && $_POST[$attvaluename] != \"\")\n            {\n                if ($_POST[$attvaluename] != \"\")\n                {\n                    $aDatavalues[$i] = array(\n                        'attribute_id' => $iAttributeId,\n                        'value' => Yii::app()->request->getPost($attvaluename)\n                    );\n                }\n                $attvaluename = 'attribute_value_name_' . ++$i;\n            };\n            ParticipantAttributeName::model()->storeAttributeValues($aDatavalues);\n        }\n        /* Save updated attribute values */\n        if (Yii::app()->request->getPost('editbox') || Yii::app()->request->getPost('editbox')==\"0\")\n        {\n            $editattvalue = array(\n                'attribute_id' => $iAttributeId,\n                'value_id' => Yii::app()->request->getPost('value_id'),\n                'value' => Yii::app()->request->getPost('editbox')\n            );\n            ParticipantAttributeName::model()->saveAttributeValue($editattvalue);\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/attributeControl'));\n    }\n\n    /*\n     * Responsible for deleting the additional attribute values in case of drop down.\n     */\n    function delAttributeValues()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $iValueId = Yii::app()->request->getQuery('vid');\n        ParticipantAttributeName::model()->delAttributeValues($iAttributeId, $iValueId);\n        Yii::app()->getController()->redirect(array('/admin/participants/sa/viewAttribute/aid/' . $iAttributeId));\n    }\n\n    /*\n     * Responsible for editing the additional attributes values\n     */\n    function editAttributevalue()\n    {\n        if (Yii::app()->request->getPost('oper') == \"edit\" && (Yii::app()->request->getPost('attvalue') || Yii::app()->request->getPost('attvalue')==\"0\"))\n        {\n            $pid = explode('_',Yii::app()->request->getPost('participant_id'));\n            $iAttributeId =  Yii::app()->request->getPost('attid');\n            if (Permission::model()->hasGlobalPermission('participantpanel','update') && Participant::model()->is_owner($pid[0]))\n            {\n                $aData = array('participant_id' => $pid[0], 'attribute_id' => $iAttributeId, 'value' => Yii::app()->request->getPost('attvalue'));\n                ParticipantAttributeName::model()->editParticipantAttributeValue($aData);\n            }\n        }\n    }\n\n    function attributeMapCSV()\n    {\n\n        $clang = $this->getController()->lang;\n        if ($_FILES['the_file']['name']=='')\n        {                                                                                                                     \n            Yii::app()->setFlashMessage($clang->gT('Please select a file to import!'),'error');\n            Yii::app()->getController()->redirect(array('admin/participants/sa/importCSV'));\n        }\n        $sRandomFileName=randomChars(20);\n        $sFilePath = Yii::app()->getConfig('tempdir') . DIRECTORY_SEPARATOR . $sRandomFileName;\n        $aPathinfo = pathinfo($_FILES['the_file']['name']);\n        $sExtension = $aPathinfo['extension'];\n        if (strtolower($sExtension)=='csv')\n        {\n            $bMoveFileResult = @move_uploaded_file($_FILES['the_file']['tmp_name'], $sFilePath);\n            $errorinupload = '';\n            $filterblankemails = Yii::app()->request->getPost('filterbea');\n        }\n        else\n        {\n            $templateData['errorinupload']['error'] = $clang->gT(\"This is not a .csv file.\");\n            $templateData['aAttributes'] = ParticipantAttributeName::model()->getAllAttributes();\n            $templateData['aGlobalErrors'] = array();\n          //  $errorinupload = array('error' => $this->upload->display_errors());\n          //  Yii::app()->session['summary'] = array('errorinupload' => $errorinupload);\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),$templateData);\n            exit;\n        }\n        \n\n        if (!$bMoveFileResult)\n        {\n            $templateData['error_msg'] = sprintf($clang->gT(\"An error occurred uploading your file. This may be caused by incorrect permissions in your %s folder.\"), Yii::app()->getConfig('tempdir'));\n            $errorinupload = array('error' => $this->upload->display_errors());\n            Yii::app()->session['summary'] = array('errorinupload' => $errorinupload);\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),array('aAttributes' => ParticipantAttributeName::model()->getAllAttributes()));\n        }\n        else\n        {\n            $aData = array('upload_data' => $_FILES['the_file']);\n            $sFileName = $_FILES['the_file']['name'];\n\n            $regularfields = array('firstname', 'participant_id', 'lastname', 'email', 'language', 'blacklisted', 'owner_uid');\n            $csvread = fopen($sFilePath, 'r');\n\n            $separator = Yii::app()->request->getPost('separatorused');\n            $firstline = fgetcsv($csvread, 1000, ',');\n            $selectedcsvfields = array();\n            foreach ($firstline as $key => $value)\n            {\n                $testvalue = preg_replace('/[^(\\x20-\\x7F)]*/','', $value); //Remove invalid characters from string\n                if (!in_array(strtolower($testvalue), $regularfields))\n                {\n                    array_push($selectedcsvfields, $value);\n                }\n                $fieldlist[]=$value;\n            }\n            $iLineCount = count(array_filter(array_filter(file($sFilePath),'trim')));\n\n            $attributes = ParticipantAttributeName::model()->model()->getCPDBAttributes();\n            $aData = array(\n                'attributes' => $attributes,\n                'firstline' => $selectedcsvfields,\n                'fullfilepath' => $sRandomFileName,\n                'linecount' => $iLineCount - 1,\n                'filterbea' => $filterblankemails,\n                'participant_id_exists' => in_array('participant_id', $fieldlist)\n            );\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') . \"attributeMapCSV.css\");\n        App()->getClientScript()->registerPackage('qTip2');\n        App()->getClientScript()->registerPackage('jquery-nestedSortable');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMapCSV.js\");\n        \n        $sAttributeMapJS=\"var copyUrl = '\".App()->createUrl(\"admin/participants/sa/uploadCSV\").\"';\\n\"\n                        .\"var displayParticipants = '\".App()->createUrl(\"admin/participants/sa/displayParticipants\").\"';\\n\"\n                        .\"var mapCSVcancelled = '\".App()->createUrl(\"admin/participants/sa/mapCSVcancelled\").\"';\\n\"\n                        .\"var characterset = '\".sanitize_paranoid_string($_POST['characterset']).\"';\\n\"\n                        .\"var okBtn = '\".$clang->gT(\"OK\").\"';\\n\"\n                        .\"var processed = '\".$clang->gT(\"Summary\").\"';\\n\"\n                        .\"var summary = '\".$clang->gT(\"Upload summary\").\"';\\n\"\n                        .\"var notPairedErrorTxt = '\".$clang->gT(\"You have to pair this field with an existing attribute.\").\"';\\n\"\n                        .\"var onlyOnePairedErrorTxt = '\".$clang->gT(\"Only one CSV attribute is mapped with central attribute.\").\"';\\n\"\n                        .\"var cannotAcceptErrorTxt='\".$clang->gT(\"This list cannot accept token attributes.\").\"';\\n\"\n                        .\"var separator = '\".sanitize_paranoid_string($_POST['separatorused']).\"';\\n\"\n                        .\"var thefilepath = '\".$sRandomFileName.\"';\\n\"\n                        .\"var filterblankemails = '\".$filterblankemails.\"';\\n\";\n        App()->getClientScript()->registerScript(\"sAttributeMapJS\",$sAttributeMapJS,CClientScript::POS_BEGIN);\n            $this->_renderWrappedTemplate('participants', 'attributeMapCSV', $aData);\n        }\n    }\n\n    /*\n     * Uploads the file to the server and process it for valid enteries and import them into database\n     */\n    function uploadCSV()\n    {\n        $clang = $this->getController()->lang;\n        unset(Yii::app()->session['summary']);\n        $characterset = Yii::app()->request->getPost('characterset');\n        $separator = Yii::app()->request->getPost('separatorused');\n        $newarray = Yii::app()->request->getPost('newarray');\n        $mappedarray = Yii::app()->request->getPost('mappedarray',false);\n        $filterblankemails = Yii::app()->request->getPost('filterbea');\n        $overwrite = Yii::app()->request->getPost('overwrite');\n        $sFilePath = Yii::app()->getConfig('tempdir') . '/' . basename(Yii::app()->request->getPost('fullfilepath'));\n        $errorinupload = \"\";\n        $recordcount = 0;\n        $mandatory = 0;\n        $mincriteria = 0;\n        $imported = 0;\n        $dupcount = 0;\n        $overwritten = 0;\n        $dupreason=\"nameemail\"; //Default duplicate comparison method\n        $duplicatelist = array();\n        $invalidemaillist = array();\n        $invalidformatlist = array();\n        $invalidattribute = array();\n        $invalidparticipantid = array();\n        $aGlobalErrors=array();\n        /* If no mapped array */\n        if(!$mappedarray)\n            $mappedarray=array();\n        /* Adjust system settings to read file with MAC line endings */\n        @ini_set('auto_detect_line_endings', true);\n        /* Open the uploaded file into an array */\n        $tokenlistarray = file($sFilePath);\n\n        // open it and trim the endings\n        $separator = Yii::app()->request->getPost('separatorused');\n        $uploadcharset = Yii::app()->request->getPost('characterset');\n        /* The $newarray contains a list of fields that will be used\n           to create new attributes */\n        if (!empty($newarray))\n        {\n            /* Create a new entry in the lime_participant_attribute_names table,\n               and it's associated lime_participant_attribute_names_lang table\n               for each NEW attribute being created in this import process */\n            foreach ($newarray as $key => $value)\n            {\n                $aData = array('attribute_type' => 'TB', 'defaultname' => $value, 'visible' => 'FALSE');\n                $insertid = ParticipantAttributeName::model()->storeAttributeCSV($aData);\n                /* Keep a record of the attribute_id for this new attribute\n                   in the $mappedarray string. For example, if the new attribute\n                   has attribute_id of 35 and is called \"gender\",\n                   $mappedarray['35']='gender' */\n                $mappedarray[$insertid] = $value;\n            }\n        }\n        if (!isset($uploadcharset))\n        {\n            $uploadcharset = 'auto';\n        }\n        foreach ($tokenlistarray as $buffer) //Iterate through the CSV file line by line\n        {\n            $buffer = @mb_convert_encoding($buffer, \"UTF-8\", $uploadcharset);\n            $firstname = \"\";\n            $lastname = \"\";\n            $email = \"\";\n            $language = \"\";\n            if ($recordcount == 0) {\n                //The first time we iterate through the file we look at the very\n                //first line, which contains field names, not values to import\n                // Pick apart the first line\n                $buffer = removeBOM($buffer);\n                $attrid = ParticipantAttributeName::model()->getAttributeID();\n                $allowedfieldnames = array('participant_id', 'firstname', 'lastname', 'email', 'language', 'blacklisted');\n                $aFilterDuplicateFields = array('firstname', 'lastname', 'email');\n                if (!empty($mappedarray))\n                {\n                    foreach ($mappedarray as $key => $value)\n                    {\n                        array_push($allowedfieldnames, strtolower($value));\n                    }\n                }\n                //For Attributes\n                switch ($separator)\n                {\n                    case 'comma':\n                        $separator = ',';\n                        break;\n                    case 'semicolon':\n                        $separator = ';';\n                        break;\n                    default:\n                        $comma = substr_count($buffer, ',');\n                        $semicolon = substr_count($buffer, ';');\n                        if ($semicolon > $comma)\n                            $separator = ';'; else\n                            $separator = ',';\n                }\n                $firstline = convertCSVRowToArray($buffer, $separator, '\"');\n                $firstline = array_map('trim', $firstline);\n                $ignoredcolumns = array();\n                //now check the first line for invalid fields\n                foreach ($firstline as $index => $fieldname)\n                {\n                    $firstline[$index] = preg_replace(\"/(.*) <[^,]*>$/\", \"$1\", $fieldname);\n                    $fieldname = $firstline[$index];\n                    if (!in_array(strtolower($fieldname), $allowedfieldnames) && !in_array($fieldname,$mappedarray))\n                    {\n                        $ignoredcolumns[] = $fieldname;\n                    } else {\n                        $firstline[$index] = strtolower($fieldname);\n                    }\n                }\n                if ((!in_array('firstname', $firstline) && !in_array('lastname', $firstline) && !in_array('email', $firstline)) && !in_array('participant_id', $firstline))\n                {\n                    $recordcount = count($tokenlistarray);\n                    break;\n                }\n            } else {\n                // After looking at the first line, we now import the actual values\n                $line = convertCSVRowToArray($buffer, $separator, '\"');\n                // Discard lines where the number of fields do not match\n                if (count($firstline) != count($line))\n                {\n                    $invalidformatlist[] = $recordcount.','.count($line).','.count($firstline);\n                    $recordcount++;\n                    continue;\n                }\n                $writearray = array_combine($firstline, $line);\n                //kick out ignored columns\n                foreach ($ignoredcolumns as $column)\n                {\n                    unset($writearray[$column]);\n                }\n                // Add aFilterDuplicateFields not in CSV to writearray : quick fix \n                foreach($aFilterDuplicateFields as $sFilterDuplicateField){\n                    if(!in_array($sFilterDuplicateField, $firstline))\n                        $writearray[$sFilterDuplicateField]=\"\";\n                }\n                $invalidemail = false;\n                $dupfound = false;\n                $thisduplicate = 0;\n\n                //Check for duplicate participants\n                $aData = array(\n                         'firstname' => $writearray['firstname'],\n                         'lastname' => $writearray['lastname'],\n                         'email' => $writearray['email'],\n                         'owner_uid' => Yii::app()->session['loginID']\n                         );\n                //HACK - converting into SQL instead of doing an array search\n                if(in_array('participant_id', $firstline)) {\n                    $dupreason=\"participant_id\";\n                    $aData = \"participant_id = \".Yii::app()->db->quoteValue($writearray['participant_id']);\n                } else {\n                    $dupreason=\"nameemail\";\n                    $aData = \"firstname = \".Yii::app()->db->quoteValue($writearray['firstname']).\" AND lastname = \".Yii::app()->db->quoteValue($writearray['lastname']).\" AND email = \".Yii::app()->db->quoteValue($writearray['email']).\" AND owner_uid = '\".Yii::app()->session['loginID'].\"'\";\n                }\n                //End of HACK\n                $aData = Participant::model()->checkforDuplicate($aData, \"participant_id\");\n                if ($aData !== false) {\n                    $thisduplicate = 1;\n                    $dupcount++;\n                    if($overwrite==\"true\")\n                    {\n                        //Although this person already exists, we want to update the mapped attribute values\n                        if (!empty($mappedarray)) {\n                            //The mapped array contains the attributes we are\n                            //saving in this import\n                            foreach ($mappedarray as $attid => $attname) {\n                                if (!empty($attname)) {\n                                    $bData = array('participant_id' => $aData,\n                                                       'attribute_id' => $attid,\n                                                       'value' => $writearray[strtolower($attname)]);\n                                         ParticipantAttribute::model()->updateParticipantAttributeValue($bData);\n                                } else {\n                                    //If the value is empty, don't write the value\n                                }\n                            }\n                            $overwritten++;\n                        }\n                    }\n                }\n                if ($thisduplicate == 1) {\n                    $dupfound = true;\n                    $duplicatelist[] = $writearray['firstname'] . \" \" . $writearray['lastname'] . \" (\" . $writearray['email'] . \")\";\n                }\n\n                //Checking the email address is in a valid format\n                $invalidemail = false;\n                $writearray['email'] = trim($writearray['email']);\n                if ($writearray['email'] != '') {\n                    $aEmailAddresses = explode(';', $writearray['email']);\n                    // Ignore additional email addresses\n                    $sEmailaddress = $aEmailAddresses[0];\n                    if (!validateEmailAddress($sEmailaddress)) {\n                        $invalidemail = true;\n                        $invalidemaillist[] = $line[0] . \" \" . $line[1] . \" (\" . $line[2] . \")\";\n                    }\n                }\n                if (!$dupfound && !$invalidemail) {\n                    //If it isn't a duplicate value or an invalid email, process the entry as a new participant\n\n                       //First, process the known fields\n                    if (!isset($writearray['participant_id']) || $writearray['participant_id'] == \"\") {\n                        $uuid = $this->gen_uuid(); //Generate a UUID for the new participant\n                        $writearray['participant_id'] = $uuid;\n                    }\n                    if (isset($writearray['emailstatus']) && trim($writearray['emailstatus'] == '')) {\n                        unset($writearray['emailstatus']);\n                    }\n                    if (!isset($writearray['language']) || $writearray['language'] == \"\") {\n                        $writearray['language'] = \"en\";\n                    }\n                    if (!isset($writearray['blacklisted']) || $writearray['blacklisted'] == \"\") {\n                        $writearray['blacklisted'] = \"N\";\n                    }\n                    $writearray['owner_uid'] = Yii::app()->session['loginID'];\n                    if (isset($writearray['validfrom']) && trim($writearray['validfrom'] == '')) {\n                        unset($writearray['validfrom']);\n                    }\n                    if (isset($writearray['validuntil']) && trim($writearray['validuntil'] == '')) {\n                        unset($writearray['validuntil']);\n                    }\n                    $dontimport=false;\n                    if (($filterblankemails == \"accept\" && $writearray['email'] == \"\")) {\n                        //The mandatory fields of email, firstname and lastname\n                        //must be filled, but one or more are empty\n                        $mandatory++;\n                        $dontimport=true;\n                    } else {\n                        foreach ($writearray as $key => $value) {\n                            if (!empty($mappedarray)) {\n                                //The mapped array contains the attributes we are\n                                //saving in this import\n                                if (in_array($key, $allowedfieldnames)) {\n                                    foreach ($mappedarray as $attid => $attname) {\n                                        if (strtolower($attname) == $key) {\n                                            if (!empty($value)) {\n                                                $aData = array('participant_id' => $writearray['participant_id'],\n                                                               'attribute_id' => $attid,\n                                                               'value' => $value);\n                                                 ParticipantAttributeName::model()->saveParticipantAttributeValue($aData);\n                                            } else {\n                                                //If the value is empty, don't write the value\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //If any of the mandatory fields are blank, then don't import this user\n                    if(!$dontimport)\n                    {\n                        Participant::model()->insertParticipantCSV($writearray);\n                        $imported++;\n                    }\n                }\n                $mincriteria++;\n            }\n            $recordcount++;\n        }\n\n        unlink($sFilePath);\n        $aData = array();\n        $aData['clang'] = $clang;\n        $aData['recordcount'] = $recordcount - 1;\n        $aData['duplicatelist'] = $duplicatelist;\n        $aData['mincriteria'] = $mincriteria;\n        $aData['imported'] = $imported;\n        $aData['errorinupload'] = $errorinupload;\n        $aData['invalidemaillist'] = $invalidemaillist;\n        $aData['aInvalidFormatlist'] = $invalidformatlist;\n        $aData['mandatory'] = $mandatory;\n        $aData['invalidattribute'] = $invalidattribute;\n        $aData['invalidparticipantid'] = $invalidparticipantid;\n        $aData['overwritten'] = $overwritten;\n        $aData['dupreason'] = $dupreason;\n        $aData['aGlobalErrors'] = $aGlobalErrors;\n        $this->getController()->renderPartial('/admin/participants/uploadSummary_view', $aData);\n    }\n\n    function summaryview()\n    {                                                          \n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),array('aAttributes' => ParticipantAttributeName::model()->getAllAttributes()));\n    }\n\n    /*\n     * Responsible for setting the session variables for attribute map page redirect\n     */\n    function setSession()\n    {\n        unset(Yii::app()->session['participantid']);\n        Yii::app()->session['participantid'] = Yii::app()->request->getPost('participantid');\n    }\n\n    /*\n     * Generation of unique id\n     */\n    function gen_uuid()\n    {\n        return sprintf(\n                '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0x0fff) | 0x4000,\n                mt_rand(0, 0x3fff) | 0x8000,\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff)\n        );\n    }\n\n    /*\n     * Stores the shared participant information in participant_shares\n     */\n    function shareParticipants()\n    {\n        $clang = $this->getController()->lang;\n        $iParticipantId = Yii::app()->request->getPost('participantid');\n        $iShareUserId = Yii::app()->request->getPost('shareuser');\n        $bCanEdit = Yii::app()->request->getPost('can_edit');\n\n        $i = 0;\n        foreach ($iParticipantId as $iId)\n        {\n            $time = time();\n            $aData = array('participant_id' => $iId,\n                'share_uid' => $iShareUserId,\n                'date_added' => date('Y-m-d H:i:s', $time),\n                'can_edit' => $bCanEdit);\n            ParticipantShare::model()->storeParticipantShare($aData);\n            $i++;\n        }\n\n        printf($clang->gT(\"%s participants have been shared\"), $i);\n    }\n\n    /*\n     * Responsible for copying the participant from tokens to the central Database\n     *\n     * TODO: Most of the work for this function is in the participants model file\n     *       but it doesn't belong there.\n     */\n    function addToCentral()\n    {\n        $newarr = Yii::app()->request->getPost('newarr');\n        $mapped = Yii::app()->request->getPost('mapped');\n        $overwriteauto = Yii::app()->request->getPost('overwriteauto');\n        $overwriteman = Yii::app()->request->getPost('overwriteman');\n        $createautomap = Yii::app()->request->getPost('createautomap');\n\n        $response = Participant::model()->copyToCentral(Yii::app()->request->getPost('surveyid'), $newarr, $mapped, $overwriteauto, $overwriteman, $createautomap);\n        $clang = $this->getController()->lang;\n\n        printf($clang->gT(\"%s participants have been copied to the central participants table\"), $response['success']);\n        if($response['duplicate'] > 0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['overwriteman']==\"true\" || $response['overwriteauto']) {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the token records\");\n        }\n    }\n\n    /*\n     * Responsible for adding the participant to the specified survey\n     */\n    function addToToken()\n    {\n        $response = Participant::model()->copytoSurvey(Yii::app()->request\n                                                         ->getPost('participantid'),\n                                               Yii::app()->request\n                                                         ->getPost('surveyid'), Yii::app()\n                                                         ->request->getPost('attributeid')\n                                               );\n        $clang = $this->getController()->lang;\n\n        printf($clang->gT(\"%s participants have been copied to the survey token table\"), $response['success']);\n        if($response['duplicate']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['overwrite']==\"true\") {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the participants records\");\n        }\n    }\n\n    /*\n     * Responsible for adding the participant to the specified survey with attribute mapping\n     */\n    function addToTokenattmap()\n    {\n        $iParticipantId = Yii::app()->request->getPost('participant_id');\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $mapped = Yii::app()->request->getPost('mapped');\n        $newcreate = Yii::app()->request->getPost('newarr');\n        $overwriteauto = Yii::app()->request->getPost('overwrite');\n        $overwriteman = Yii::app()->request->getPost('overwriteman');\n        $overwritest = Yii::app()->request->getPost('overwritest');\n        $createautomap = Yii::app()->request->getPost('createautomap');\n\n        $clang = $this->getController()->lang;\n        if (empty($newcreate[0])) { $newcreate = array(); }\n\n        $response = Participant::model()->copyCPBDAttributesToTokens($iSurveyId, $mapped, $newcreate, $iParticipantId, $overwriteauto, $overwriteman, $overwritest, $createautomap);\n\n        printf($clang->gT(\"%s participants have been copied to the survey token table\"), $response['success']);\n        if($response['duplicate']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['blacklistskipped']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were skipped because they are blacklisted\"), $response['blacklistskipped']);\n        }\n        if($response['overwriteauto']==\"true\" || $response['overwriteman']==\"true\") {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the participants records\");\n        }\n    }\n\n    /*\n     * Responsible for attribute mapping while copying participants from cpdb to token's table\n     */\n    function attributeMap()\n    {\n        Yii::app()->loadHelper('common');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMap.js\");\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') .\"attributeMap.css\");\n\n        $iSurveyId = Yii::app()->request->getPost('survey_id');\n        $redirect = Yii::app()->request->getPost('redirect');\n        $count = Yii::app()->request->getPost('count');\n        $iParticipantId = Yii::app()->request->getPost('participant_id');\n        $attributes = ParticipantAttributeName::model()->getCPDBAttributes();\n        $tokenattributefieldnames = getTokenFieldsAndNames($iSurveyId, TRUE);\n        /* $arr = Yii::app()->db\n                         ->createCommand()\n                         ->select('*')\n                         ->from(\"{{tokens_$iSurveyId}}\")\n                         ->queryRow();\n\n        if (is_array($arr))\n        {\n            $tokenfieldnames = array_keys($arr);\n            $tokenattributefieldnames = array_filter($tokenfieldnames, 'filterForAttributes');\n        }\n        else\n        {\n            $tokenattributefieldnames = array();\n        } */\n\n        $selectedattribute = array(); //List of existing attribute fields that are not mapped\n        $selectedcentralattribute = array(); //List of attributes that haven't already been mapped\n        $alreadymappedattid = array(); //List of fields already mapped to this tokens table\n        $alreadymappedattname = array();\n        $i = 0;\n        $j = 0;\n\n        foreach ($tokenattributefieldnames as $key => $value)\n        {\n            if (is_numeric($key[10])) //Assumes that if the 11th character is a number, it must be a token-table created attribute\n            {\n                $selectedattribute[$key] = $value['description'];\n                $i++;\n            }\n            else\n            {\n                array_push($alreadymappedattid, substr($key, 15));\n            }\n        }\n        foreach ($attributes as $row)\n        {\n            if (!in_array($row['attribute_id'], $alreadymappedattid))\n            {\n                $selectedcentralattribute[$row['attribute_id']] = $row['attribute_name'];\n            }\n            else\n            {\n                array_push($alreadymappedattname, $row['attribute_name']);\n            }\n        }\n\n        $aData = array(\n            'selectedcentralattribute' => $selectedcentralattribute,\n            'selectedtokenattribute' => $selectedattribute,\n            'alreadymappedattributename' => $alreadymappedattname,\n            'survey_id' => $iSurveyId,\n            'redirect' => $redirect,\n            'participant_id' => $iParticipantId,\n            'count' => $count\n        );\n\n        $this->_renderWrappedTemplate('participants', 'attributeMap', $aData);\n    }\n\n    /*\n     * This function is responsible for attribute mapping while copying participants from tokens to CPDB\n     */\n    function attributeMapToken()\n    {\n        Yii::app()->loadHelper('common');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMapToken.js\");\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') .\"attributeMapToken.css\");\n\n        $iSurveyID = (int)Yii::app()->request->getQuery('sid');\n        $aCPDBAttributes = ParticipantAttributeName::model()->getCPDBAttributes();\n        $aTokenAttributes = getTokenFieldsAndNames($iSurveyID, TRUE);\n\n        $selectedattribute = array();\n        $selectedcentralattribute = array();\n        $alreadymappedattid = array();\n        $alreadymappedattdisplay = array();\n        $alreadymappedattnames = array();\n        $i = 0;\n        $j = 0;\n\n        foreach ($aTokenAttributes as $key => $value)\n        {\n            if ($value['cpdbmap']=='')\n            {\n                $selectedattribute[$value['description']] = $key;\n            }\n            else\n            {\n                $attributeid=$value['cpdbmap'];\n                $continue=false;\n                foreach($aCPDBAttributes as $attribute) {\n                    if($attribute['attribute_id']==$attributeid) {\n                        $continue=true;\n                    }\n                }\n                if($continue) {\n                    $alreadymappedattid[]=$attributeid;\n                    $alreadymappedattdisplay[]=$key;\n                    $alreadymappedattnames[$key]=$value['description'];\n                } else {\n                    $selectedattribute[$value['description']]=$key;\n                }\n            }\n        }\n        foreach ($aCPDBAttributes as $row)\n        {\n            if (!in_array($row['attribute_id'], $alreadymappedattid))\n            {\n                $selectedcentralattribute[$row['attribute_id']] = $row['attribute_name'];\n            }\n        }\n\n        $aData = array(\n            'attribute' => $selectedcentralattribute,\n            'tokenattribute' => $selectedattribute,\n            'alreadymappedattributename' => $alreadymappedattdisplay,\n            'alreadymappedattdescription' => $alreadymappedattnames\n        );\n\n        $this->_renderWrappedTemplate('participants', 'attributeMapToken', $aData);\n    }\n\n    /**\n    * This function deletes the uploaded csv file if the import is cancelled\n    *\n    */\n    function mapCSVcancelled()\n    {\n        unlink(Yii::app()->getConfig('tempdir') . '/' . basename(Yii::app()->request->getPost('fullfilepath')));\n    }\n\n\n    function blacklistParticipant()\n    {\n        $this->load->model('participants_model');\n        $iParticipantId = $this->uri->segment(4);\n        $iSurveyId = $this->uri->segment(5);\n        $clang = $this->limesurvey_lang;\n        if (!is_numeric($iSurveyId))\n        {\n            $blacklist = $this->uri->segment(5);\n            if ($blacklist == 'Y' || $blacklist == 'N')\n            {\n                $aData = array('blacklisted' => $blacklist, 'participant_id' => $iParticipantId);\n                $aData = $this->participants_model->blacklistparticipantglobal($aData);\n                $aData['global'] = 1;\n                $aData['clang'] = $clang;\n                $aData['blacklist'] = $blacklist;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n            else\n            {\n                $aData['is_participant'] = 0;\n                $aData['is_updated'] = 0;\n                $aData['clang'] = $clang;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n        }\n        else\n        {\n            $blacklist = $this->uri->segment(6);\n            if ($blacklist == 'Y' || $blacklist == 'N')\n            {\n                $aData = array('blacklisted' => $blacklist);\n                $aData = $this->participants_model->blacklistparticipantlocal($aData, $iSurveyId, $iParticipantId);\n                $aData['global'] = 1;\n                $aData['clang'] = $clang;\n                $aData['local'] = 1;\n                $aData['blacklist'] = $blacklist;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n            else\n            {\n                $aData['is_participant'] = 0;\n                $aData['is_updated'] = 0;\n                $aData['clang'] = $clang;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n        }\n    }\n\n}\n\n?>\n"], "fixing_code": ["<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n/*\n * LimeSurvey\n * Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n * All rights reserved.\n * License: GNU/GPL License v2 or later, see LICENSE.php\n * LimeSurvey is free software. This version may have been modified pursuant\n * to the GNU General Public License, and as distributed it includes or\n * is derivative of works licensed under the GNU General Public License or\n * other free or open source software licenses.\n * See COPYRIGHT.php for copyright notices and details.\n *\n */\n\nfunction subval_sort($a, $subkey, $order)\n{\n    $b = array();\n    $c = array();\n    foreach ($a as $k => $v)\n    {\n        $b[$k] = strtolower($v[$subkey]);\n    }\n    if ($order == \"asc\")\n    {\n        asort($b, SORT_REGULAR);\n    }\n    else\n    {\n        arsort($b, SORT_REGULAR);\n    }\n    foreach ($b as $key => $val)\n    {\n        $c[] = $a[$key];\n    }\n    return $c;\n}\n\n\n/*\n * This is the main controller for Participants Panel\n */\nclass participantsaction extends Survey_Common_Action\n{\n    public function runWithParams($params)\n    {\n        if (!Permission::model()->hasGlobalPermission('participantpanel','read'))\n        {\n            die('No permission');\n        }\n        parent::runWithParams($params);\n    }\n\n\n    \n    /**\n     * Loads jqGrid for the view\n     * @param string $sScript Subaction\n     */\n    private function _loadjqGrid($sScript = '', $aData = array())\n    {\n        $aData['aAttributes'] = ParticipantAttributeName::model()->getAllAttributes();\n        App()->getClientScript()->registerPackage('jqgrid');\n        if (!empty($sScript))\n        {\n            App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . $sScript . '.js');\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', $sScript), $aData);\n        }\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param string|array $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = 'participants', $aViewUrls = array(), $aData = array())\n    {\n        App()->getClientScript()->registerPackage('bootstrap-multiselect');\n        $aData['display']['menu_bars'] = false;    \n        foreach((array) $aViewUrls as $sViewUrl)\n        {\n            $a_ViewUrls[] = $sViewUrl . '_view';\n        }\n        parent::_renderWrappedTemplate($sAction, $a_ViewUrls, $aData);\n    }\n    \n    /**\n     * Export to csv using optional search/filter\n     * \n     * @param type $search  CDCriteria?\n     * @paran mixed $mAttributeIDs Empty array for no attributes, or array of attribute IDs or null for all attributes \n     */\n    private function csvExport($search = null, $aAttributeIDs=null) {\n        Yii::app()->loadHelper('export');      \n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n\n        $query = Participant::model()->getParticipants(0, 0, $aAttributeIDs, null, $search, $iUserID);\n        if (!$query)\n            return false;\n\n        // Field names in the first row\n        $fields = array('participant_id', 'firstname', 'lastname', 'email', 'language', 'blacklisted', 'owner_uid');\n        $outputarray = array(); // The array to be passed to the export helper to be written to a csv file\n        \n        $outputarray[0] = $fields; //fields written to output array\n\n        // If attribute fields are selected, add them to the output\n        if ($aAttributeIDs==null)\n        {\n            $aAttributes = ParticipantAttributeName::model()->getAllAttributes();\n        }   \n        else\n        {\n            foreach ($aAttributeIDs as $value)\n            {\n                if ($value==0) continue;\n                $fields[] = 'a'.$value;\n                $attributename = ParticipantAttributeName::model()->getAttributeNames($value);\n                $outputarray[0][] = $attributename[0]['attribute_name'];\n            }\n        }    \n\n        $fieldKeys = array_flip($fields);\n        $fieldNeededKeys=array_fill_keys($outputarray[0], '');\n        foreach ($query as $field => $aData)\n        {\n            $outputarray[] = array_merge($fieldNeededKeys,array_intersect_key($aData, $fieldKeys));\n        }\n        CPDBExport($outputarray, \"central_\" . time());\n    }\n    \n    /**\n     * Returns a string with the number of participants available for export or 0\n     * \n     * @param type $search\n     * @return string|0\n     */\n    protected function csvExportCount($search = null)\n    {\n        $clang = $this->getController()->lang;\n        \n        $attid = ParticipantAttributeName::model()->getVisibleAttributes();\n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n        \n\n        $count = Participant::model()->getParticipantsCount($attid, $search, $iUserID);\n\n        if ($count > 0) {\n            return sprintf($clang->ngT(\"Export %s participant to CSV\",\"Export %s participants to CSV\", $count),$count);\n        } else {\n            return $count;\n        }\n    }\n\n    /**\n     * Loads the view 'participantsPanel'\n     */\n    function index()\n    {\n        $iUserID = Yii::app()->session['loginID'];\n\n        // if superadmin all the records in the cpdb will be displayed\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iTotalRecords = Participant::model()->count();\n        }\n        // if not only the participants on which he has right on (shared and owned)\n        else\n        {\n            $iTotalRecords = Participant::model()->getParticipantsOwnerCount($iUserID);\n        }\n        // gets the count of participants, their attributes and other such details\n        $aData = array(\n            'totalrecords' => $iTotalRecords,\n            'owned' => Participant::model()->count('owner_uid = ' . $iUserID),\n            'shared' => Participant::model()->getParticipantsSharedCount($iUserID),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes(),\n            'attributecount' => ParticipantAttributeName::model()->count(),\n            'blacklisted' => Participant::model()->count('owner_uid = ' . $iUserID . ' AND blacklisted = \\'Y\\'')\n        );\n        // loads the participant panel and summary view\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'summary'), $aData);\n    }\n\n    /**\n     * Loads the view 'importCSV'\n     */\n    function importCSV()\n    {\n        $aData = array(\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'importCSV'),$aData);\n    }\n\n    /**\n     * Loads the view 'displayParticipants' which contains the main grid\n     */\n    function displayParticipants()\n    {\n        $lang = Yii::app()->session['adminlang'];\n        // loads the survey names to be shown in add to survey\n        // if user is superadmin, all survey names\n        $sSearchCondition=Yii::app()->request->getPost('searchcondition','');\n        $urlSearch=!empty($sSearchCondition) ? \"getParticipantsResults_json\" : \"getParticipants_json\";\n\n        //Get list of surveys.\n        //Should be all surveys owned by user (or all surveys for super admin)\n        $surveys = Survey::model();\n        //!!! Is this even possible to execute?\n        if (!Permission::model()->hasGlobalPermission('superadmin','read'))\n            $surveys->permission(Yii::app()->user->getId());\n\n        $aSurveyNames = $surveys->model()->with(array('languagesettings'=>array('condition'=>'surveyls_language=language'), 'owner'))->findAll();\n\n        /* Build a list of surveys that have tokens tables */\n        $tSurveyNames=array();\n        foreach($aSurveyNames as $row)\n        {\n            $row = array_merge($row->attributes, $row->defaultlanguage->attributes);\n            $bTokenExists = tableExists('{{tokens_' . $row['sid'] . '}}');\n            if ($bTokenExists) //If tokens table exists\n            {\n                $tSurveyNames[]=$row;\n            }\n        }\n        // data to be passed to view\n        $aData = array(\n            'names' => User::model()->findAll(),\n            'attributes' => ParticipantAttributeName::model()->getVisibleAttributes(),\n            'allattributes' => ParticipantAttributeName::model()->getAllAttributes(),\n            'attributeValues' => ParticipantAttributeName::model()->getAllAttributesValues(),\n            'surveynames' => $aSurveyNames,\n            'tokensurveynames' => $tSurveyNames,\n            'urlsearch' => $urlSearch,\n            'sSearchCondition' => $sSearchCondition,\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        App()->getClientScript()->registerPackage('jqgrid');\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl')  . 'displayParticipants.css');\n        \n\n        // loads the participant panel view and display participant view\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'displayParticipants'), $aData);\n    }\n\n    /**\n     * Loads the view 'blacklistControl'\n     */\n    function blacklistControl()\n    {\n        $aData = array(\n            'blacklistallsurveys' => Yii::app()->getConfig('blacklistallsurveys'),\n            'blacklistnewsurveys' => Yii::app()->getConfig('blacklistnewsurveys'),\n            'blockaddingtosurveys' => Yii::app()->getConfig('blockaddingtosurveys'),\n            'hideblacklisted' => Yii::app()->getConfig('hideblacklisted'),\n            'deleteblacklisted' => Yii::app()->getConfig('deleteblacklisted'),\n            'allowunblacklist' => Yii::app()->getConfig('allowunblacklist'),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'blacklist'), $aData);\n    }\n\n    /**\n     * Loads the view 'userControl'\n     */\n    function userControl()\n    {\n        $aData = array(\n            'userideditable' => Yii::app()->getConfig('userideditable'),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'userControl'), $aData);\n    }\n\n    /**\n     * Loads the view 'sharePanel'\n     */\n    function sharePanel()\n    {\n        $this->_loadjqGrid('sharePanel');\n    }\n\n    /**\n     * Sends the shared participant info to the share panel using JSON encoding\n     * Called after the share panel grid is loaded\n     * Returns the json depending on the user logged in by checking it from the session\n     * @return JSON encoded string containg sharing information\n     */\n    function getShareInfo_json()\n    {\n        $aData = new stdClass();\n        $aData->page = 1;\n\n        // If super administrator all the share info in the links table will be shown\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $records = Participant::model()->getParticipantSharedAll();\n            $aData->records = count($records);\n            $aData->total = ceil($aData->records / 10);\n            $i = 0;\n\n            foreach ($records as $row)\n            {\n                $oShared = User::model()->getName($row['share_uid']); //for conversion of uid to human readable names\n                $owner = User::model()->getName($row['owner_uid']);\n                $aData->rows[$i]['id'] = $row['participant_id'].\"--\".$row['share_uid']; //This is the unique combination per record\n                $aData->rows[$i]['cell'] = array($row['firstname'], $row['lastname'], $row['email'], $oShared[0]['full_name'], $row['share_uid'], $owner[0]['full_name'], $row['date_added'], $row['can_edit']);\n                $i++;\n            }\n\n            echo ls_json_encode($aData);\n        }\n        // otherwise only the shared participants by that user\n        else\n        {\n            $records = Participant::model()->getParticipantShared(Yii::app()->session['loginID']);\n            $aData->records = count($records);\n            $aData->total = ceil($aData->records / 10);\n            $i = 0;\n\n            foreach ($records as $row)\n            {\n                $sharename = User::model()->getName($row['share_uid']); //for conversion of uid to human readable names\n                $aData->rows[$i]['id'] = $row['participant_id'];\n                $aData['rows'][$i]['cell'] = array($row['firstname'], $row['lastname'], $row['email'], $sharename['full_name'], $row['share_uid'], $row['date_added'], $row['can_edit']);\n                $i++;\n            }\n\n            echo ls_json_encode($aData);\n        }\n    }\n\n    /**\n     * Takes the edit call from the share panel, which either edits or deletes the share information\n     * Basically takes the call on can_edit\n     */\n    function editShareInfo()\n    {\n        $operation = Yii::app()->request->getPost('oper');\n        $shareIds = Yii::app()->request->getPost('id');\n        if ($operation == 'del') // If operation is delete , it will delete, otherwise edit it\n        {\n            ParticipantShare::model()->deleteRow($shareIds);\n        }\n        else\n        {\n            $aData = array(\n                'participant_id' => Yii::app()->request->getPost('participant_id'),\n                'can_edit' => Yii::app()->request->getPost('can_edit'),\n                'share_uid' => Yii::app()->request->getPost('shared_uid')\n            );\n            ParticipantShare::model()->updateShare($aData);\n        }\n    }\n\n    /**\n     * Loads the view 'attributeControl'\n     */\n    function attributeControl()\n    {\n        $this->_loadjqGrid('attributeControl');\n    }\n\n    /**\n     * Sends the attributes info using JSON encoding\n     * Called after the Attribute management grid is loaded\n     * @return JSON encoded string containg sharing information\n     */\n    function getAttributeInfo_json()\n    {\n        $clang = Yii::app()->lang;\n        $page = Yii::app()->request->getPost('page');\n        $limit = Yii::app()->request->getPost('rows');\n        $limit = isset($limit) ? $limit : 50; //Stop division by zero errors\n        $records = ParticipantAttributeName::model()->with('participant_attribute_names_lang')->findAll(array('order'=>'attribute_name'));\n        $attribute_types = array(\n            'DD' => $clang->gT(\"Drop-down list\"),\n            'DP' => $clang->gT(\"Date\"),\n            'TB' => $clang->gT(\"Text box\")\n        );\n        $aData = new stdClass();\n        $aData->page = $page;\n        $aData->records = count($records);\n        $aData->total = ceil(ParticipantAttributeName::model()->getCPDBAttributes(true) / $limit);\n        $i = 0;\n        foreach($records as $row) { //Iterate through each attribute\n            $sAttributeCaption=$row->defaultname; //Choose the first item by default\n            foreach($row->participant_attribute_names_lang as $names) { //Iterate through each language version of this attribute\n                if($names->lang == Yii::app()->session['adminlang']) {$sAttributeCaption= $sAttributeCaption.\" ({$names->attribute_name})\";} //Override the default with the admin language version if found\n            }\n            $aData->rows[$i]['id'] = $row->attribute_id;\n            $aData->rows[$i]['cell'] = array('', $sAttributeCaption, $attribute_types[$row->attribute_type], $row->visible);\n            $i++;\n        }\n\n        \n        echo ls_json_encode($aData);\n    }\n\n    /**\n     * Takes the edit call from the share panel, which either edits or deletes the share information\n     * Basically takes the call on can_edit\n     */\n    function editAttributeInfo()\n    {    \n        $clang = Yii::app()->lang;\n        $operation = Yii::app()->request->getPost('oper');\n\n        if ($operation == 'del' && Yii::app()->request->getPost('id'))\n        {\n            $aAttributeIds = (array) explode(',', Yii::app()->request->getPost('id'));\n            $aAttributeIds = array_map('trim', $aAttributeIds);\n            $aAttributeIds = array_map('intval', $aAttributeIds);\n\n            foreach ($aAttributeIds as $iAttributeId)\n            {\n                ParticipantAttributeName::model()->delAttribute($iAttributeId);\n            }\n        }\n        elseif ($operation == 'add' && Yii::app()->request->getPost('attribute_name'))\n        {\n            $aData = array(\n                'defaultname' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_name' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n                'visible' => Yii::app()->request->getPost('visible')? 'TRUE' : 'FALSE'\n            );\n            echo ParticipantAttributeName::model()->storeAttribute($aData);\n        }\n        elseif ($operation == 'edit' && Yii::app()->request->getPost('id'))\n        {\n            $aData = array(\n                'attribute_id' => Yii::app()->request->getPost('id'),\n                'attribute_name' => Yii::app()->request->getPost('attribute_name'),\n                'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n                'visible' => Yii::app()->request->getPost('visible','FALSE') != 'FALSE' ? 'TRUE' : 'FALSE'\n            );\n            ParticipantAttributeName::model()->saveAttribute($aData);\n            $clang->eT(\"Attribute display setting updated\");\n        }\n\n    }\n\n    /**\n     * Takes the delete call from the display participants and take appropriate action depending on the condition\n     */\n    function delParticipant()\n    {\n        if (Permission::model()->hasGlobalPermission('participantpanel','delete'))\n        {\n            $selectoption = Yii::app()->request->getPost('selectedoption');\n            $iParticipantId = Yii::app()->request->getPost('participant_id');\n\n            //echo $selectoption.\" -- \".$iParticipantId.\"<br />\"; die();\n\n            // Deletes from participants only\n            if ($selectoption == 'po')\n            {\n                Participant::model()->deleteParticipants($iParticipantId);\n            }\n            // Deletes from central and token table\n            elseif ($selectoption == 'ptt')\n            {\n                Participant::model()->deleteParticipantToken($iParticipantId);\n            }\n            // Deletes from central , token and assosiated responses as well\n            elseif ($selectoption == 'ptta')\n            {\n                Participant::model()->deleteParticipantTokenAnswer($iParticipantId);\n            }\n        }\n    }\n\n    /**\n     * Resposible for editing data on the jqGrid\n     */\n    function editParticipant()\n    {\n        $sOperation = Yii::app()->request->getPost('oper');\n\n        // if edit it will update the row\n        if ($sOperation == 'edit' && Permission::model()->hasGlobalPermission('participantpanel','update') && Participant::model()->is_owner(Yii::app()->request->getPost('id')))\n        {\n            $aData = array(\n                'participant_id' => Yii::app()->request->getPost('id'),\n                'firstname' => Yii::app()->request->getPost('firstname'),\n                'lastname' => Yii::app()->request->getPost('lastname'),\n                'email' => Yii::app()->request->getPost('email'),\n                'language' => Yii::app()->request->getPost('language'),\n                'blacklisted' => Yii::app()->request->getPost('blacklisted')\n            );\n            Participant::model()->updateRow($aData);\n        }\n        // if add it will insert a new row\n        elseif ($sOperation == 'add' && Permission::model()->hasGlobalPermission('participantpanel','create'))\n        {\n            $uuid = $this->gen_uuid();\n            $aData = array(\n                'participant_id' => $uuid,\n                'firstname' => Yii::app()->request->getPost('firstname'),\n                'lastname' => Yii::app()->request->getPost('lastname'),\n                'email' => Yii::app()->request->getPost('email'),\n                'language' => Yii::app()->request->getPost('language'),\n                'blacklisted' => Yii::app()->request->getPost('blacklisted'),\n                'owner_uid' => Yii::app()->session['loginID'],\n                'created_by' => Yii::app()->session['loginID']\n            );\n            Participant::model()->insertParticipant($aData);\n        }\n    }\n\n    /**\n     * Stores the user control setting to the database\n     */\n    function storeUserControlValues()\n    {\n        if ($find = SettingGlobal::model()->findByPk('userideditable'))\n        {\n            SettingGlobal::model()->updateByPk('userideditable', array('stg_value'=>Yii::app()->request->getPost('userideditable')));\n        }\n        else\n        {\n            $stg = new SettingGlobal;\n            $stg ->stg_name='userideditable';\n            $stg ->stg_value=Yii::app()->request->getPost('userideditable');\n            $stg->save();\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/userControl'));\n    }\n\n    /**\n     * Stores the blacklist setting to the database\n     */\n    function storeBlacklistValues()\n    {\n        $values = Array('blacklistallsurveys', 'blacklistnewsurveys', 'blockaddingtosurveys', 'hideblacklisted', 'deleteblacklisted', 'allowunblacklist', 'userideditable');\n        foreach ($values as $value)\n        {\n            if ($find = SettingGlobal::model()->findByPk($value))\n            {\n                SettingGlobal::model()->updateByPk($value, array('stg_value'=>Yii::app()->request->getPost($value)));\n            }\n            else\n            {\n                $stg = new SettingGlobal;\n                $stg ->stg_name=$value;\n                $stg ->stg_value=Yii::app()->request->getPost($value);\n                $stg->save();\n            }\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/blacklistControl'));\n    }\n\n    /**\n     * Receives an ajax call containing the participant id in the fourth segment of the url\n     * Supplies list of survey links - surveys of which this participant is on the tokens table\n     * URL: [localurl]/limesurvey/admin/participants/getSurveyInfo_json/pid/[participant_id]\n     * RETURNS: json data containing linked survey information (Survey name, survey id, token_id and date_added)\n     */\n    function getSurveyInfo_json()\n    {\n        $participantid = Yii::app()->request->getQuery('pid');\n        $records = SurveyLink::model()->findAllByAttributes((array('participant_id' => $participantid)));\n        $aData = new stdClass();\n        $aData->page = 1;\n        $aData->records = count($records);\n        $aData->total = ceil($aData->records / 10);\n        $i = 0;\n        foreach ($records as $row)\n        {\n            $oSurvey=Survey::model()->with(array('languagesettings'=>array('condition'=>'surveyls_language=language')))->findByAttributes(array('sid' => $row['survey_id']));            \n            foreach($oSurvey->languagesettings as $oLanguageSetting)\n            {\n                $surveyname= $oLanguageSetting->surveyls_title;\n            }\n            $surveylink = \"\";\n            /* Check permissions of each survey before creating a link*/\n            if (!Permission::model()->hasSurveyPermission($row['survey_id'], 'tokens', 'read'))\n            {\n                $surveylink = $row['survey_id'];\n            } else\n            {\n                $surveylink = '<a href=' . Yii::app()->getController()->createUrl(\"/admin/tokens/sa/browse/surveyid/{$row['survey_id']}\") . '>' . $row['survey_id'].'</a>';\n            }\n            $aData->rows[$i]['cell'] = array($surveyname, $surveylink, $row['token_id'], $row['date_created'], $row['date_invited'], $row['date_completed']);\n            $i++;\n        }\n\n        echo ls_json_encode($aData);\n    }\n\n    /**\n     * Returns the count of the participants in the CSV and show it in the title of the modal box\n     * This is to give the user the hint to see the number of participants he is exporting\n     */\n    function exporttocsvcount()\n    {\n        $searchconditionurl = Yii::app()->request->getPost('searchURL');\n        $searchcondition  = Yii::app()->request->getPost('searchcondition');\n        $searchconditionurl = basename($searchconditionurl);\n        \n        if ($searchconditionurl != 'getParticipants_json') // if there is a search condition then only the participants that match the search criteria are counted\n        {\n            $condition = explode(\"||\", $searchcondition);\n            $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        } else {\n            $search = null;\n        }\n        \n        echo $this->csvExportCount($search);\n    }\n\n    /**\n     * Outputs the count of participants when using the export all button on the top\n     */\n    function exporttocsvcountAll()\n    {\n        echo $this->csvExportCount();\n    }\n\n    /**\n     * Responsible to export all the participants in the central table\n     */\n    function exporttocsvAll()\n    {\n        $this->csvExport(); // no search\n    }\n\n    /**\n     * Similar to export to all message where it counts the number to participants to be copied\n     * and echo them to be displayed in modal box header\n     */\n    function getaddtosurveymsg()\n    {\n        $searchcondition = basename(Yii::app()->request->getPost('searchcondition'));\n\n        // If there is a search condition in the url of the jqGrid\n        if ($searchcondition != 'getParticipants_json')\n        {\n            $participantid = \"\";\n            $condition = explode(\"||\", $searchcondition);\n\n            $query = Participant::model()->getParticipantsSearchMultiple($condition, 0, 0);\n\n            printf( $this->getController()->lang->gT(\"%s participant(s) are to be copied \"), count($query));\n        }\n        // if there is no search condition the participants will be counted on the basis of who is logged in\n        else\n        {\n            if (Permission::model()->hasGlobalPermission('superadmin','read')) //If super admin all the participants will be visible\n            {\n                $count = Participant::model()->getParticipantsCountWithoutLimit();\n            }\n            else\n            {\n                $query = Participant::model()->getParticipantsOwner(Yii::app()->session['loginID']);\n                $count = count($query);\n            }\n\n            printf($this->getController()->lang->gT(\"%s participant(s) are to be copied \"), $count);\n        }\n    }\n\n    /**\n     * Gets the ids of participants to be copied to the individual survey\n     */\n    function getSearchIDs()\n    {\n        $searchcondition = Yii::app()->request->getPost('searchcondition'); // get the search condition from the URL\n        $sSearchURL = basename(Yii::app()->request->getPost('searchURL')); // get the search condition from the URL\n        /* a search contains posted data inside $_POST['searchcondition'].\n        * Each separate query is made up of 3 fields, separated by double-pipes (\"|\")\n        * EG: fname||eq||jason||lname||ct||c\n        *\n        */\n        if ($sSearchURL != 'getParticipants_json') // if there is a search condition present\n        {\n            $participantid = \"\";\n            $condition = explode(\"||\", $searchcondition);  // explode the condition to the array\n            $query = Participant::model()->getParticipantsSearchMultiple($condition, 0, 0);\n\n            foreach ($query as $key => $value)\n            {\n                if (Permission::model()->hasGlobalPermission('superadmin','read'))\n                {\n                    $participantid .= \",\" . $value['participant_id']; // combine the participant id's in an string\n                } else\n                {\n                    if(Participant::model()->is_owner($value['participant_id']))\n                    {\n                        $participantid .= \",\" . $value['participant_id']; // combine the participant id's in an string\n                    }\n                }\n            }\n            echo $participantid; //echo the participant id's\n        }\n        else// if no search condition\n        {\n            $participantid = \"\"; // initiallise the participant id to blank\n            if (Permission::model()->hasGlobalPermission('superadmin','read')) //If super admin all the participants will be visible\n            {\n                $query = Participant::model()->getParticipantsWithoutLimit(); // get all the participant id if it is a super admin\n            }\n            else // get participants on which the user has right on\n            {\n                $query = Participant::model()->getParticipantsOwner(Yii::app()->session['loginID']);\n            }\n\n            foreach ($query as $key => $value)\n            {\n                $participantid = $participantid . \",\" . $value['participant_id']; // combine the participant id's in an string\n            }\n            echo $participantid; //echo the participant id's\n        }\n    }\n\n    /**\n     * Exports participants as CSV - receiver function for the GUI\n     */\n    function exporttocsv()\n    {\n        if (Yii::app()->request->getPost('searchcondition','') != '') // if there is a search condition then only the participants that match the search criteria are counted\n        {\n            $condition = explode(\"%7C%7C\", Yii::app()->request->getPost('searchcondition',''));\n            $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        } else {\n            $search = null;\n        }\n        $aAttributes=explode('+',Yii::app()->request->getPost('attributes',''));\n        $this->csvExport($search,$aAttributes);\n    }\n\n    /**\n     * Equal to getParticipants_json() but now with a search\n     */\n    function getParticipantsResults_json()\n    {\n        $searchcondition = Yii::app()->request->getpost('searchcondition');\n        $finalcondition = array();\n        $condition = explode(\"||\", $searchcondition);\n        $search = Participant::model()->getParticipantsSearchMultipleCondition($condition);\n        return $this->getParticipants_json($search);\n    }\n\n    /*\n       * Sends the data in JSON format extracted from the database to be displayed using the jqGrid\n    */\n    function getParticipants_json($search = null)\n    {\n        $page = (int) Yii::app()->request->getPost('page');\n        $limit = (int) Yii::app()->request->getPost('rows');\n        $limit = empty($limit) ? $limit : 50; //Stop division by zero errors\n\n        $attid = ParticipantAttributeName::model()->getVisibleAttributes();\n        $participantfields = array('participant_id', 'can_edit', 'firstname', 'lastname', 'email', 'blacklisted', 'survey', 'language', 'owner_uid');\n        foreach ($attid as $key => $value)\n        {\n            array_push($participantfields, $value['attribute_id']);\n        }\n        $sidx = Yii::app()->request->getPost('sidx');\n        $sidx = in_array($sidx,$participantfields) ? $sidx : \"lastname\";\n        $sord = Yii::app()->request->getPost('sord');\n        $sord = ($sord=='desc') ? 'desc' : 'asc';\n        $order = $sidx. \" \". $sord;\n                                                 \n        \n        $aData = new stdClass;\n        \n        //If super admin all the participants will be visible\n        if (Permission::model()->hasGlobalPermission('superadmin','read'))\n        {\n            $iUserID = null;\n        } else {\n            $iUserID = Yii::app()->session['loginID'];\n        }\n        $aData->records = Participant::model()->getParticipantsCount($attid, $search, $iUserID);\n        $aData->total = ceil($aData->records / $limit);\n        if ($page>$aData->total) {\n            $page = $aData->total;\n        }\n        $aData->page = $page;\n        $records = Participant::model()->getParticipants($page, $limit,$attid, $order, $search, $iUserID);\n        \n        \n        $aRowToAdd=array();\n        foreach ($records as $key => $row)\n        {            \n            if (array_key_exists('can_edit', $row)) {\n                $sCanEdit = $row['can_edit'];\n                if (is_null($sCanEdit)) {\n                    $sCanEdit = 'true';\n                }\n            } else {\n                // Super admin\n                $sCanEdit = \"true\";\n            }\n            if (trim($row['ownername'])=='') {\n                $row['ownername']=$row['username'];   \n            }\n            $aRowToAdd['cell'] = array($row['participant_id'], $sCanEdit, htmlspecialchars($row['firstname']), htmlspecialchars($row['lastname']), htmlspecialchars($row['email']), $row['blacklisted'], $row['survey'], $row['language'], $row['ownername']);\n            $aRowToAdd['id'] = $row['participant_id'];\n            // add attribute values\n            foreach($row as $key=>$attvalue)\n            {\n                if(preg_match('/^a\\d+$/', $key))\n                {\n                    $aRowToAdd['cell'][] = $attvalue;\n                }\n            }\n            \n            $aData->rows[] = $aRowToAdd;\n        }\n\n        echo ls_json_encode($aData);\n    }\n\n    /*\n     * Fetches the attributes of a participant to be displayed in the attribute subgrid\n     */\n    function getAttribute_json()\n    {\n        $iParticipantId = Yii::app()->request->getQuery('pid');\n        $records = ParticipantAttributeName::model()->getParticipantVisibleAttribute($iParticipantId);\n        $records = subval_sort($records, \"attribute_name\", \"asc\");\n\n        $i = 0;\n\n        $doneattributes = array(); //If the user has any actual attribute values, they'll be stored here\n\n        /* Iterate through each attribute owned by this user */\n        foreach ($records as $row)\n        {\n            $outputs[$i] = array(\"\", $row['participant_id'].\"_\".$row['attribute_id'], $row['attribute_type'], $row['attribute_id'], $row['attribute_name'], $row['value']);\n            /* Collect allowed values for a DropDown attribute */\n            if ($row['attribute_type'] == \"DD\")\n            {\n                $attvalues = ParticipantAttributeName::model()->getAttributesValues($row['attribute_id']);\n                if (!empty($attvalues))\n                {\n                    $attval = \"\";\n                    foreach ($attvalues as $val)\n                    {\n                        $attval .= $val['value'] . \":\" . $val['value'];\n                        $attval .= \";\";\n                    }\n                    $attval = substr($attval, 0, -1);\n                    array_push($outputs[$i], $attval);\n                }\n                else\n                {\n                    array_push($outputs[$i], \"\");\n                }\n            }\n            else\n            {\n                array_push($outputs[$i], \"\");\n            }\n            array_push($doneattributes, $row['attribute_id']);\n            $i++;\n        }\n\n        /* Build a list of attribute names for which this user has NO values stored, keep it in $attributenotdone */\n        $attributenotdone=array();\n        /* The user has NO values stored against any attribute */\n        if (count($doneattributes) == 0)\n        {\n            $attributenotdone = ParticipantAttributeName::model()->getCPDBAttributes();\n        }\n        /* The user has SOME values stored against attributes */\n        else\n        {\n            $attributenotdone = ParticipantAttributeName::model()->getnotaddedAttributes($doneattributes);\n        }\n\n        /* Go through the empty attributes and build an entry in the output for them */\n        foreach ($attributenotdone as $row)\n        {\n            $outputs[$i] = array(\"\", $iParticipantId.\"_\".$row['attribute_id'], $row['attribute_type'], $row['attribute_id'], $row['attribute_name'], \"\");\n            if ($row['attribute_type'] == \"DD\")\n            {\n                $attvalues = ParticipantAttributeName::model()->getAttributesValues($row['attribute_id']);\n                if (!empty($attvalues))\n                {\n                    $attval = \"\";\n                    foreach ($attvalues as $val)\n                    {\n                        $attval .= $val['value'] . \":\" . $val['value'];\n                        $attval .= \";\";\n                    }\n                    $attval = substr($attval, 0, -1);\n                    array_push($outputs[$i], $attval);\n                }\n                else\n                {\n                    array_push($outputs[$i], \"\");\n                }\n            }\n            else\n            {\n                array_push($outputs[$i], \"\");\n            }\n            $i++;\n        }\n        $outputs=subval_sort($outputs, 3, \"asc\");\n\n        $aData = new stdClass();\n        $aData->page = 1;\n        $aData->rows[0]['id'] = $iParticipantId;\n        $aData->rows[0]['cell'] = array();\n        $aData->records = count($outputs);\n        $aData->total = ceil($aData->records / 10);\n        foreach($outputs as $key=>$output) {\n            $aData->rows[$key]['id']=$output[1];\n            $aData->rows[$key]['cell']=$output;\n        }\n        /* TODO: It'd be nice to do a natural sort on the attribute list at some point.\n                 Currently they're returned in order of attributes WITH values, then WITHOUT values\n         */\n\n        echo ls_json_encode($aData);\n    }\n\n    /*\n     * Responsible for showing the additional attribute for central database\n     */\n    function viewAttribute()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $aData = array(\n            'attributes' => ParticipantAttributeName::model()->getAttribute($iAttributeId),\n            'attributenames' => ParticipantAttributeName::model()->getAttributeNames($iAttributeId),\n            'attributevalues' => ParticipantAttributeName::model()->getAttributesValues($iAttributeId),\n            'aAttributes' => ParticipantAttributeName::model()->getAllAttributes()\n        );\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl').'participants.css');\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl').'viewAttribute.css');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"viewAttribute.js\");\n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'viewAttribute'), $aData);\n    }\n\n    /*\n     * Responsible for saving the additional attribute. It iterates through all the new attributes added dynamically\n     * and iterates through them\n     */\n    function saveAttribute()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $aData = array(\n            'attribute_id' => $iAttributeId,\n            'attribute_type' => Yii::app()->request->getPost('attribute_type'),\n            'defaultname' => Yii::app()->request->getPost('defaultname'),\n            'visible' => Yii::app()->request->getPost('visible')\n        );\n        ParticipantAttributeName::model()->saveAttribute($aData);\n\n        foreach ($_POST as $key => $value)\n        {\n            // check for language code in the post variables this is a hack as the only way to check for language data\n            if (strlen($key) == 2)\n            {\n                $langdata = array(\n                    'attribute_id' => $iAttributeId,\n                    'attribute_name' => $value,\n                    'lang' => $key\n                );\n\n                ParticipantAttributeName::model()->saveAttributeLanguages($langdata);\n            }\n        }\n        if (Yii::app()->request->getPost('langdata'))\n        {\n            $langdata = array(\n                'attribute_id' => $iAttributeId,\n                'attribute_name' => Yii::app()->request->getPost('attname'),\n                'lang' => Yii::app()->request->getPost('langdata')\n            );\n\n            ParticipantAttributeName::model()->saveAttributeLanguages($langdata);\n        }\n        /* Create new attribute value */\n        if (Yii::app()->request->getPost('attribute_value_name_1') || Yii::app()->request->getPost('attribute_value_name_1') == \"0\")\n        {\n            $i = 1;\n            $attvaluename = 'attribute_value_name_' . $i;\n            while (array_key_exists($attvaluename, $_POST) && $_POST[$attvaluename] != \"\")\n            {\n                if ($_POST[$attvaluename] != \"\")\n                {\n                    $aDatavalues[$i] = array(\n                        'attribute_id' => $iAttributeId,\n                        'value' => Yii::app()->request->getPost($attvaluename)\n                    );\n                }\n                $attvaluename = 'attribute_value_name_' . ++$i;\n            };\n            ParticipantAttributeName::model()->storeAttributeValues($aDatavalues);\n        }\n        /* Save updated attribute values */\n        if (Yii::app()->request->getPost('editbox') || Yii::app()->request->getPost('editbox')==\"0\")\n        {\n            $editattvalue = array(\n                'attribute_id' => $iAttributeId,\n                'value_id' => Yii::app()->request->getPost('value_id'),\n                'value' => Yii::app()->request->getPost('editbox')\n            );\n            ParticipantAttributeName::model()->saveAttributeValue($editattvalue);\n        }\n        Yii::app()->getController()->redirect(array('admin/participants/sa/attributeControl'));\n    }\n\n    /*\n     * Responsible for deleting the additional attribute values in case of drop down.\n     */\n    function delAttributeValues()\n    {\n        $iAttributeId = Yii::app()->request->getQuery('aid');\n        $iValueId = Yii::app()->request->getQuery('vid');\n        ParticipantAttributeName::model()->delAttributeValues($iAttributeId, $iValueId);\n        Yii::app()->getController()->redirect(array('/admin/participants/sa/viewAttribute/aid/' . $iAttributeId));\n    }\n\n    /*\n     * Responsible for editing the additional attributes values\n     */\n    function editAttributevalue()\n    {\n        if (Yii::app()->request->getPost('oper') == \"edit\" && (Yii::app()->request->getPost('attvalue') || Yii::app()->request->getPost('attvalue')==\"0\"))\n        {\n            $pid = explode('_',Yii::app()->request->getPost('participant_id'));\n            $iAttributeId =  Yii::app()->request->getPost('attid');\n            if (Permission::model()->hasGlobalPermission('participantpanel','update') && Participant::model()->is_owner($pid[0]))\n            {\n                $aData = array('participant_id' => $pid[0], 'attribute_id' => $iAttributeId, 'value' => Yii::app()->request->getPost('attvalue'));\n                ParticipantAttributeName::model()->editParticipantAttributeValue($aData);\n            }\n        }\n    }\n\n    function attributeMapCSV()\n    {\n\n        $clang = $this->getController()->lang;\n        if ($_FILES['the_file']['name']=='')\n        {                                                                                                                     \n            Yii::app()->setFlashMessage($clang->gT('Please select a file to import!'),'error');\n            Yii::app()->getController()->redirect(array('admin/participants/sa/importCSV'));\n        }\n        $sRandomFileName=randomChars(20);\n        $sFilePath = Yii::app()->getConfig('tempdir') . DIRECTORY_SEPARATOR . $sRandomFileName;\n        $aPathinfo = pathinfo($_FILES['the_file']['name']);\n        $sExtension = $aPathinfo['extension'];\n        if (strtolower($sExtension)=='csv')\n        {\n            $bMoveFileResult = @move_uploaded_file($_FILES['the_file']['tmp_name'], $sFilePath);\n            $errorinupload = '';\n            $filterblankemails = Yii::app()->request->getPost('filterbea');\n        }\n        else\n        {\n            $templateData['errorinupload']['error'] = $clang->gT(\"This is not a .csv file.\");\n            $templateData['aAttributes'] = ParticipantAttributeName::model()->getAllAttributes();\n            $templateData['aGlobalErrors'] = array();\n          //  $errorinupload = array('error' => $this->upload->display_errors());\n          //  Yii::app()->session['summary'] = array('errorinupload' => $errorinupload);\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),$templateData);\n            exit;\n        }\n        \n\n        if (!$bMoveFileResult)\n        {\n            $templateData['error_msg'] = sprintf($clang->gT(\"An error occurred uploading your file. This may be caused by incorrect permissions in your %s folder.\"), Yii::app()->getConfig('tempdir'));\n            $errorinupload = array('error' => $this->upload->display_errors());\n            Yii::app()->session['summary'] = array('errorinupload' => $errorinupload);\n            $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),array('aAttributes' => ParticipantAttributeName::model()->getAllAttributes()));\n        }\n        else\n        {\n            $aData = array('upload_data' => $_FILES['the_file']);\n            $sFileName = $_FILES['the_file']['name'];\n\n            $regularfields = array('firstname', 'participant_id', 'lastname', 'email', 'language', 'blacklisted', 'owner_uid');\n            $csvread = fopen($sFilePath, 'r');\n\n            $separator = Yii::app()->request->getPost('separatorused');\n            $firstline = fgetcsv($csvread, 1000, ',');\n            $selectedcsvfields = array();\n            foreach ($firstline as $key => $value)\n            {\n                $testvalue = preg_replace('/[^(\\x20-\\x7F)]*/','', $value); //Remove invalid characters from string\n                if (!in_array(strtolower($testvalue), $regularfields))\n                {\n                    array_push($selectedcsvfields, $value);\n                }\n                $fieldlist[]=$value;\n            }\n            $iLineCount = count(array_filter(array_filter(file($sFilePath),'trim')));\n\n            $attributes = ParticipantAttributeName::model()->model()->getCPDBAttributes();\n            $aData = array(\n                'attributes' => $attributes,\n                'firstline' => $selectedcsvfields,\n                'fullfilepath' => $sRandomFileName,\n                'linecount' => $iLineCount - 1,\n                'filterbea' => $filterblankemails,\n                'participant_id_exists' => in_array('participant_id', $fieldlist)\n            );\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') . \"attributeMapCSV.css\");\n        App()->getClientScript()->registerPackage('qTip2');\n        App()->getClientScript()->registerPackage('jquery-nestedSortable');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMapCSV.js\");\n        \n        $sAttributeMapJS=\"var copyUrl = '\".App()->createUrl(\"admin/participants/sa/uploadCSV\").\"';\\n\"\n                        .\"var displayParticipants = '\".App()->createUrl(\"admin/participants/sa/displayParticipants\").\"';\\n\"\n                        .\"var mapCSVcancelled = '\".App()->createUrl(\"admin/participants/sa/mapCSVcancelled\").\"';\\n\"\n                        .\"var characterset = '\".sanitize_paranoid_string($_POST['characterset']).\"';\\n\"\n                        .\"var okBtn = '\".$clang->gT(\"OK\").\"';\\n\"\n                        .\"var processed = '\".$clang->gT(\"Summary\").\"';\\n\"\n                        .\"var summary = '\".$clang->gT(\"Upload summary\").\"';\\n\"\n                        .\"var notPairedErrorTxt = '\".$clang->gT(\"You have to pair this field with an existing attribute.\").\"';\\n\"\n                        .\"var onlyOnePairedErrorTxt = '\".$clang->gT(\"Only one CSV attribute is mapped with central attribute.\").\"';\\n\"\n                        .\"var cannotAcceptErrorTxt='\".$clang->gT(\"This list cannot accept token attributes.\").\"';\\n\"\n                        .\"var separator = '\".sanitize_paranoid_string($_POST['separatorused']).\"';\\n\"\n                        .\"var thefilepath = '\".$sRandomFileName.\"';\\n\"\n                        .\"var filterblankemails = '\".$filterblankemails.\"';\\n\";\n        App()->getClientScript()->registerScript(\"sAttributeMapJS\",$sAttributeMapJS,CClientScript::POS_BEGIN);\n            $this->_renderWrappedTemplate('participants', 'attributeMapCSV', $aData);\n        }\n    }\n\n    /*\n     * Uploads the file to the server and process it for valid enteries and import them into database\n     */\n    function uploadCSV()\n    {\n        $clang = $this->getController()->lang;\n        unset(Yii::app()->session['summary']);\n        $characterset = Yii::app()->request->getPost('characterset');\n        $separator = Yii::app()->request->getPost('separatorused');\n        $newarray = Yii::app()->request->getPost('newarray');\n        $mappedarray = Yii::app()->request->getPost('mappedarray',false);\n        $filterblankemails = Yii::app()->request->getPost('filterbea');\n        $overwrite = Yii::app()->request->getPost('overwrite');\n        $sFilePath = Yii::app()->getConfig('tempdir') . '/' . basename(Yii::app()->request->getPost('fullfilepath'));\n        $errorinupload = \"\";\n        $recordcount = 0;\n        $mandatory = 0;\n        $mincriteria = 0;\n        $imported = 0;\n        $dupcount = 0;\n        $overwritten = 0;\n        $dupreason=\"nameemail\"; //Default duplicate comparison method\n        $duplicatelist = array();\n        $invalidemaillist = array();\n        $invalidformatlist = array();\n        $invalidattribute = array();\n        $invalidparticipantid = array();\n        $aGlobalErrors=array();\n        /* If no mapped array */\n        if(!$mappedarray)\n            $mappedarray=array();\n        /* Adjust system settings to read file with MAC line endings */\n        @ini_set('auto_detect_line_endings', true);\n        /* Open the uploaded file into an array */\n        $tokenlistarray = file($sFilePath);\n\n        // open it and trim the endings\n        $separator = Yii::app()->request->getPost('separatorused');\n        $uploadcharset = Yii::app()->request->getPost('characterset');\n        /* The $newarray contains a list of fields that will be used\n           to create new attributes */\n        if (!empty($newarray))\n        {\n            /* Create a new entry in the lime_participant_attribute_names table,\n               and it's associated lime_participant_attribute_names_lang table\n               for each NEW attribute being created in this import process */\n            foreach ($newarray as $key => $value)\n            {\n                $aData = array('attribute_type' => 'TB', 'defaultname' => $value, 'visible' => 'FALSE');\n                $insertid = ParticipantAttributeName::model()->storeAttributeCSV($aData);\n                /* Keep a record of the attribute_id for this new attribute\n                   in the $mappedarray string. For example, if the new attribute\n                   has attribute_id of 35 and is called \"gender\",\n                   $mappedarray['35']='gender' */\n                $mappedarray[$insertid] = $value;\n            }\n        }\n        if (!isset($uploadcharset))\n        {\n            $uploadcharset = 'auto';\n        }\n        foreach ($tokenlistarray as $buffer) //Iterate through the CSV file line by line\n        {\n            $buffer = @mb_convert_encoding($buffer, \"UTF-8\", $uploadcharset);\n            $firstname = \"\";\n            $lastname = \"\";\n            $email = \"\";\n            $language = \"\";\n            if ($recordcount == 0) {\n                //The first time we iterate through the file we look at the very\n                //first line, which contains field names, not values to import\n                // Pick apart the first line\n                $buffer = removeBOM($buffer);\n                $attrid = ParticipantAttributeName::model()->getAttributeID();\n                $allowedfieldnames = array('participant_id', 'firstname', 'lastname', 'email', 'language', 'blacklisted');\n                $aFilterDuplicateFields = array('firstname', 'lastname', 'email');\n                if (!empty($mappedarray))\n                {\n                    foreach ($mappedarray as $key => $value)\n                    {\n                        array_push($allowedfieldnames, strtolower($value));\n                    }\n                }\n                //For Attributes\n                switch ($separator)\n                {\n                    case 'comma':\n                        $separator = ',';\n                        break;\n                    case 'semicolon':\n                        $separator = ';';\n                        break;\n                    default:\n                        $comma = substr_count($buffer, ',');\n                        $semicolon = substr_count($buffer, ';');\n                        if ($semicolon > $comma)\n                            $separator = ';'; else\n                            $separator = ',';\n                }\n                $firstline = convertCSVRowToArray($buffer, $separator, '\"');\n                $firstline = array_map('trim', $firstline);\n                $ignoredcolumns = array();\n                //now check the first line for invalid fields\n                foreach ($firstline as $index => $fieldname)\n                {\n                    $firstline[$index] = preg_replace(\"/(.*) <[^,]*>$/\", \"$1\", $fieldname);\n                    $fieldname = $firstline[$index];\n                    if (!in_array(strtolower($fieldname), $allowedfieldnames) && !in_array($fieldname,$mappedarray))\n                    {\n                        $ignoredcolumns[] = $fieldname;\n                    } else {\n                        $firstline[$index] = strtolower($fieldname);\n                    }\n                }\n                if ((!in_array('firstname', $firstline) && !in_array('lastname', $firstline) && !in_array('email', $firstline)) && !in_array('participant_id', $firstline))\n                {\n                    $recordcount = count($tokenlistarray);\n                    break;\n                }\n            } else {\n                // After looking at the first line, we now import the actual values\n                $line = convertCSVRowToArray($buffer, $separator, '\"');\n                // Discard lines where the number of fields do not match\n                if (count($firstline) != count($line))\n                {\n                    $invalidformatlist[] = $recordcount.','.count($line).','.count($firstline);\n                    $recordcount++;\n                    continue;\n                }\n                $writearray = array_combine($firstline, $line);\n                //kick out ignored columns\n                foreach ($ignoredcolumns as $column)\n                {\n                    unset($writearray[$column]);\n                }\n                // Add aFilterDuplicateFields not in CSV to writearray : quick fix \n                foreach($aFilterDuplicateFields as $sFilterDuplicateField){\n                    if(!in_array($sFilterDuplicateField, $firstline))\n                        $writearray[$sFilterDuplicateField]=\"\";\n                }\n                $invalidemail = false;\n                $dupfound = false;\n                $thisduplicate = 0;\n\n                //Check for duplicate participants\n                $aData = array(\n                         'firstname' => $writearray['firstname'],\n                         'lastname' => $writearray['lastname'],\n                         'email' => $writearray['email'],\n                         'owner_uid' => Yii::app()->session['loginID']\n                         );\n                //HACK - converting into SQL instead of doing an array search\n                if(in_array('participant_id', $firstline)) {\n                    $dupreason=\"participant_id\";\n                    $aData = \"participant_id = \".Yii::app()->db->quoteValue($writearray['participant_id']);\n                } else {\n                    $dupreason=\"nameemail\";\n                    $aData = \"firstname = \".Yii::app()->db->quoteValue($writearray['firstname']).\" AND lastname = \".Yii::app()->db->quoteValue($writearray['lastname']).\" AND email = \".Yii::app()->db->quoteValue($writearray['email']).\" AND owner_uid = '\".Yii::app()->session['loginID'].\"'\";\n                }\n                //End of HACK\n                $aData = Participant::model()->checkforDuplicate($aData, \"participant_id\");\n                if ($aData !== false) {\n                    $thisduplicate = 1;\n                    $dupcount++;\n                    if($overwrite==\"true\")\n                    {\n                        //Although this person already exists, we want to update the mapped attribute values\n                        if (!empty($mappedarray)) {\n                            //The mapped array contains the attributes we are\n                            //saving in this import\n                            foreach ($mappedarray as $attid => $attname) {\n                                if (!empty($attname)) {\n                                    $bData = array('participant_id' => $aData,\n                                                       'attribute_id' => $attid,\n                                                       'value' => $writearray[strtolower($attname)]);\n                                         ParticipantAttribute::model()->updateParticipantAttributeValue($bData);\n                                } else {\n                                    //If the value is empty, don't write the value\n                                }\n                            }\n                            $overwritten++;\n                        }\n                    }\n                }\n                if ($thisduplicate == 1) {\n                    $dupfound = true;\n                    $duplicatelist[] = $writearray['firstname'] . \" \" . $writearray['lastname'] . \" (\" . $writearray['email'] . \")\";\n                }\n\n                //Checking the email address is in a valid format\n                $invalidemail = false;\n                $writearray['email'] = trim($writearray['email']);\n                if ($writearray['email'] != '') {\n                    $aEmailAddresses = explode(';', $writearray['email']);\n                    // Ignore additional email addresses\n                    $sEmailaddress = $aEmailAddresses[0];\n                    if (!validateEmailAddress($sEmailaddress)) {\n                        $invalidemail = true;\n                        $invalidemaillist[] = $line[0] . \" \" . $line[1] . \" (\" . $line[2] . \")\";\n                    }\n                }\n                if (!$dupfound && !$invalidemail) {\n                    //If it isn't a duplicate value or an invalid email, process the entry as a new participant\n\n                       //First, process the known fields\n                    if (!isset($writearray['participant_id']) || $writearray['participant_id'] == \"\") {\n                        $uuid = $this->gen_uuid(); //Generate a UUID for the new participant\n                        $writearray['participant_id'] = $uuid;\n                    }\n                    if (isset($writearray['emailstatus']) && trim($writearray['emailstatus'] == '')) {\n                        unset($writearray['emailstatus']);\n                    }\n                    if (!isset($writearray['language']) || $writearray['language'] == \"\") {\n                        $writearray['language'] = \"en\";\n                    }\n                    if (!isset($writearray['blacklisted']) || $writearray['blacklisted'] == \"\") {\n                        $writearray['blacklisted'] = \"N\";\n                    }\n                    $writearray['owner_uid'] = Yii::app()->session['loginID'];\n                    if (isset($writearray['validfrom']) && trim($writearray['validfrom'] == '')) {\n                        unset($writearray['validfrom']);\n                    }\n                    if (isset($writearray['validuntil']) && trim($writearray['validuntil'] == '')) {\n                        unset($writearray['validuntil']);\n                    }\n                    $dontimport=false;\n                    if (($filterblankemails == \"accept\" && $writearray['email'] == \"\")) {\n                        //The mandatory fields of email, firstname and lastname\n                        //must be filled, but one or more are empty\n                        $mandatory++;\n                        $dontimport=true;\n                    } else {\n                        foreach ($writearray as $key => $value) {\n                            if (!empty($mappedarray)) {\n                                //The mapped array contains the attributes we are\n                                //saving in this import\n                                if (in_array($key, $allowedfieldnames)) {\n                                    foreach ($mappedarray as $attid => $attname) {\n                                        if (strtolower($attname) == $key) {\n                                            if (!empty($value)) {\n                                                $aData = array('participant_id' => $writearray['participant_id'],\n                                                               'attribute_id' => $attid,\n                                                               'value' => $value);\n                                                 ParticipantAttributeName::model()->saveParticipantAttributeValue($aData);\n                                            } else {\n                                                //If the value is empty, don't write the value\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //If any of the mandatory fields are blank, then don't import this user\n                    if(!$dontimport)\n                    {\n                        Participant::model()->insertParticipantCSV($writearray);\n                        $imported++;\n                    }\n                }\n                $mincriteria++;\n            }\n            $recordcount++;\n        }\n\n        unlink($sFilePath);\n        $aData = array();\n        $aData['clang'] = $clang;\n        $aData['recordcount'] = $recordcount - 1;\n        $aData['duplicatelist'] = $duplicatelist;\n        $aData['mincriteria'] = $mincriteria;\n        $aData['imported'] = $imported;\n        $aData['errorinupload'] = $errorinupload;\n        $aData['invalidemaillist'] = $invalidemaillist;\n        $aData['aInvalidFormatlist'] = $invalidformatlist;\n        $aData['mandatory'] = $mandatory;\n        $aData['invalidattribute'] = $invalidattribute;\n        $aData['invalidparticipantid'] = $invalidparticipantid;\n        $aData['overwritten'] = $overwritten;\n        $aData['dupreason'] = $dupreason;\n        $aData['aGlobalErrors'] = $aGlobalErrors;\n        $this->getController()->renderPartial('/admin/participants/uploadSummary_view', $aData);\n    }\n\n    function summaryview()\n    {                                                          \n        $this->_renderWrappedTemplate('participants', array('participantsPanel', 'uploadSummary'),array('aAttributes' => ParticipantAttributeName::model()->getAllAttributes()));\n    }\n\n    /*\n     * Responsible for setting the session variables for attribute map page redirect\n     */\n    function setSession()\n    {\n        unset(Yii::app()->session['participantid']);\n        Yii::app()->session['participantid'] = Yii::app()->request->getPost('participantid');\n    }\n\n    /*\n     * Generation of unique id\n     */\n    function gen_uuid()\n    {\n        return sprintf(\n                '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0x0fff) | 0x4000,\n                mt_rand(0, 0x3fff) | 0x8000,\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff),\n                mt_rand(0, 0xffff)\n        );\n    }\n\n    /*\n     * Stores the shared participant information in participant_shares\n     */\n    function shareParticipants()\n    {\n        $clang = $this->getController()->lang;\n        $iParticipantId = Yii::app()->request->getPost('participantid');\n        $iShareUserId = Yii::app()->request->getPost('shareuser');\n        $bCanEdit = Yii::app()->request->getPost('can_edit');\n\n        $i = 0;\n        foreach ($iParticipantId as $iId)\n        {\n            $time = time();\n            $aData = array('participant_id' => $iId,\n                'share_uid' => $iShareUserId,\n                'date_added' => date('Y-m-d H:i:s', $time),\n                'can_edit' => $bCanEdit);\n            ParticipantShare::model()->storeParticipantShare($aData);\n            $i++;\n        }\n\n        printf($clang->gT(\"%s participants have been shared\"), $i);\n    }\n\n    /*\n     * Responsible for copying the participant from tokens to the central Database\n     *\n     * TODO: Most of the work for this function is in the participants model file\n     *       but it doesn't belong there.\n     */\n    function addToCentral()\n    {\n        $newarr = Yii::app()->request->getPost('newarr');\n        $mapped = Yii::app()->request->getPost('mapped');\n        $overwriteauto = Yii::app()->request->getPost('overwriteauto');\n        $overwriteman = Yii::app()->request->getPost('overwriteman');\n        $createautomap = Yii::app()->request->getPost('createautomap');\n\n        $response = Participant::model()->copyToCentral(Yii::app()->request->getPost('surveyid'), $newarr, $mapped, $overwriteauto, $overwriteman, $createautomap);\n        $clang = $this->getController()->lang;\n\n        printf($clang->gT(\"%s participants have been copied to the central participants table\"), $response['success']);\n        if($response['duplicate'] > 0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['overwriteman']==\"true\" || $response['overwriteauto']) {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the token records\");\n        }\n    }\n\n    /*\n     * Responsible for adding the participant to the specified survey\n     */\n    function addToToken()\n    {\n        $response = Participant::model()->copytoSurvey(Yii::app()->request\n                                                         ->getPost('participantid'),\n                                               Yii::app()->request\n                                                         ->getPost('surveyid'), Yii::app()\n                                                         ->request->getPost('attributeid')\n                                               );\n        $clang = $this->getController()->lang;\n\n        printf($clang->gT(\"%s participants have been copied to the survey token table\"), $response['success']);\n        if($response['duplicate']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['overwrite']==\"true\") {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the participants records\");\n        }\n    }\n\n    /*\n     * Responsible for adding the participant to the specified survey with attribute mapping\n     */\n    function addToTokenattmap()\n    {\n        $iParticipantId = Yii::app()->request->getPost('participant_id');\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $mapped = Yii::app()->request->getPost('mapped');\n        $newcreate = Yii::app()->request->getPost('newarr');\n        $overwriteauto = Yii::app()->request->getPost('overwrite');\n        $overwriteman = Yii::app()->request->getPost('overwriteman');\n        $overwritest = Yii::app()->request->getPost('overwritest');\n        $createautomap = Yii::app()->request->getPost('createautomap');\n\n        $clang = $this->getController()->lang;\n        if (empty($newcreate[0])) { $newcreate = array(); }\n\n        $response = Participant::model()->copyCPBDAttributesToTokens($iSurveyId, $mapped, $newcreate, $iParticipantId, $overwriteauto, $overwriteman, $overwritest, $createautomap);\n\n        printf($clang->gT(\"%s participants have been copied to the survey token table\"), $response['success']);\n        if($response['duplicate']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were not copied because they already existed\"), $response['duplicate']);\n        }\n        if($response['blacklistskipped']>0) {\n            echo \"\\r\\n\";\n            printf($clang->gT(\"%s entries were skipped because they are blacklisted\"), $response['blacklistskipped']);\n        }\n        if($response['overwriteauto']==\"true\" || $response['overwriteman']==\"true\") {\n            echo \"\\r\\n\";\n            $clang->eT(\"Attribute values for existing participants have been updated from the participants records\");\n        }\n    }\n\n    /*\n     * Responsible for attribute mapping while copying participants from cpdb to token's table\n     */\n    function attributeMap()\n    {\n        Yii::app()->loadHelper('common');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMap.js\");\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') .\"attributeMap.css\");\n\n        $iSurveyId = Yii::app()->request->getPost('survey_id');\n        $redirect = Yii::app()->request->getPost('redirect');\n        $count = Yii::app()->request->getPost('count');\n        $iParticipantId = Yii::app()->request->getPost('participant_id');\n        $attributes = ParticipantAttributeName::model()->getCPDBAttributes();\n        $tokenattributefieldnames = getTokenFieldsAndNames($iSurveyId, TRUE);\n        /* $arr = Yii::app()->db\n                         ->createCommand()\n                         ->select('*')\n                         ->from(\"{{tokens_$iSurveyId}}\")\n                         ->queryRow();\n\n        if (is_array($arr))\n        {\n            $tokenfieldnames = array_keys($arr);\n            $tokenattributefieldnames = array_filter($tokenfieldnames, 'filterForAttributes');\n        }\n        else\n        {\n            $tokenattributefieldnames = array();\n        } */\n\n        $selectedattribute = array(); //List of existing attribute fields that are not mapped\n        $selectedcentralattribute = array(); //List of attributes that haven't already been mapped\n        $alreadymappedattid = array(); //List of fields already mapped to this tokens table\n        $alreadymappedattname = array();\n        $i = 0;\n        $j = 0;\n\n        foreach ($tokenattributefieldnames as $key => $value)\n        {\n            if (is_numeric($key[10])) //Assumes that if the 11th character is a number, it must be a token-table created attribute\n            {\n                $selectedattribute[$key] = $value['description'];\n                $i++;\n            }\n            else\n            {\n                array_push($alreadymappedattid, substr($key, 15));\n            }\n        }\n        foreach ($attributes as $row)\n        {\n            if (!in_array($row['attribute_id'], $alreadymappedattid))\n            {\n                $selectedcentralattribute[$row['attribute_id']] = $row['attribute_name'];\n            }\n            else\n            {\n                array_push($alreadymappedattname, $row['attribute_name']);\n            }\n        }\n\n        $aData = array(\n            'selectedcentralattribute' => $selectedcentralattribute,\n            'selectedtokenattribute' => $selectedattribute,\n            'alreadymappedattributename' => $alreadymappedattname,\n            'survey_id' => $iSurveyId,\n            'redirect' => $redirect,\n            'participant_id' => $iParticipantId,\n            'count' => $count\n        );\n\n        $this->_renderWrappedTemplate('participants', 'attributeMap', $aData);\n    }\n\n    /*\n     * This function is responsible for attribute mapping while copying participants from tokens to CPDB\n     */\n    function attributeMapToken()\n    {\n        Yii::app()->loadHelper('common');\n        App()->getClientScript()->registerScriptFile(Yii::app()->getConfig('adminscripts') . \"attributeMapToken.js\");\n        App()->getClientScript()->registerCssFile(Yii::app()->getConfig('adminstyleurl') .\"attributeMapToken.css\");\n\n        $iSurveyID = (int)Yii::app()->request->getQuery('sid');\n        $aCPDBAttributes = ParticipantAttributeName::model()->getCPDBAttributes();\n        $aTokenAttributes = getTokenFieldsAndNames($iSurveyID, TRUE);\n\n        $selectedattribute = array();\n        $selectedcentralattribute = array();\n        $alreadymappedattid = array();\n        $alreadymappedattdisplay = array();\n        $alreadymappedattnames = array();\n        $i = 0;\n        $j = 0;\n\n        foreach ($aTokenAttributes as $key => $value)\n        {\n            if ($value['cpdbmap']=='')\n            {\n                $selectedattribute[$value['description']] = $key;\n            }\n            else\n            {\n                $attributeid=$value['cpdbmap'];\n                $continue=false;\n                foreach($aCPDBAttributes as $attribute) {\n                    if($attribute['attribute_id']==$attributeid) {\n                        $continue=true;\n                    }\n                }\n                if($continue) {\n                    $alreadymappedattid[]=$attributeid;\n                    $alreadymappedattdisplay[]=$key;\n                    $alreadymappedattnames[$key]=$value['description'];\n                } else {\n                    $selectedattribute[$value['description']]=$key;\n                }\n            }\n        }\n        foreach ($aCPDBAttributes as $row)\n        {\n            if (!in_array($row['attribute_id'], $alreadymappedattid))\n            {\n                $selectedcentralattribute[$row['attribute_id']] = $row['attribute_name'];\n            }\n        }\n\n        $aData = array(\n            'attribute' => $selectedcentralattribute,\n            'tokenattribute' => $selectedattribute,\n            'alreadymappedattributename' => $alreadymappedattdisplay,\n            'alreadymappedattdescription' => $alreadymappedattnames\n        );\n\n        $this->_renderWrappedTemplate('participants', 'attributeMapToken', $aData);\n    }\n\n    /**\n    * This function deletes the uploaded csv file if the import is cancelled\n    *\n    */\n    function mapCSVcancelled()\n    {\n        unlink(Yii::app()->getConfig('tempdir') . '/' . basename(Yii::app()->request->getPost('fullfilepath')));\n    }\n\n\n    function blacklistParticipant()\n    {\n        $this->load->model('participants_model');\n        $iParticipantId = $this->uri->segment(4);\n        $iSurveyId = $this->uri->segment(5);\n        $clang = $this->limesurvey_lang;\n        if (!is_numeric($iSurveyId))\n        {\n            $blacklist = $this->uri->segment(5);\n            if ($blacklist == 'Y' || $blacklist == 'N')\n            {\n                $aData = array('blacklisted' => $blacklist, 'participant_id' => $iParticipantId);\n                $aData = $this->participants_model->blacklistparticipantglobal($aData);\n                $aData['global'] = 1;\n                $aData['clang'] = $clang;\n                $aData['blacklist'] = $blacklist;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n            else\n            {\n                $aData['is_participant'] = 0;\n                $aData['is_updated'] = 0;\n                $aData['clang'] = $clang;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n        }\n        else\n        {\n            $blacklist = $this->uri->segment(6);\n            if ($blacklist == 'Y' || $blacklist == 'N')\n            {\n                $aData = array('blacklisted' => $blacklist);\n                $aData = $this->participants_model->blacklistparticipantlocal($aData, $iSurveyId, $iParticipantId);\n                $aData['global'] = 1;\n                $aData['clang'] = $clang;\n                $aData['local'] = 1;\n                $aData['blacklist'] = $blacklist;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n            else\n            {\n                $aData['is_participant'] = 0;\n                $aData['is_updated'] = 0;\n                $aData['clang'] = $clang;\n                $this->load->view('admin/participants/blacklist_view', $aData);\n            }\n        }\n    }\n\n}\n\n?>\n"], "filenames": ["application/controllers/admin/participantsaction.php"], "buggy_code_start_loc": [766], "buggy_code_end_loc": [780], "fixing_code_start_loc": [766], "fixing_code_end_loc": [782], "type": "CWE-89", "message": "SQL injection vulnerability in CPDB in application/controllers/admin/participantsaction.php in LimeSurvey 2.05+ Build 140618 allows remote attackers to execute arbitrary SQL commands via the sidx parameter in a JSON request to admin/participants/sa/getParticipants_json, related to a search parameter.", "other": {"cve": {"id": "CVE-2014-5017", "sourceIdentifier": "cve@mitre.org", "published": "2014-07-21T14:55:07.160", "lastModified": "2014-07-22T14:01:32.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in CPDB in application/controllers/admin/participantsaction.php in LimeSurvey 2.05+ Build 140618 allows remote attackers to execute arbitrary SQL commands via the sidx parameter in a JSON request to admin/participants/sa/getParticipants_json, related to a search parameter."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n SQL en CPDB en application/controllers/admin/participantsaction.php en LimeSurvey 2.05+ Build 140618 permite a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s del par\u00e1metro sidx en una solicitud JSON en admin/participants/sa/getParticipants_json, relacionado con un par\u00e1metro de b\u00fasqueda."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:2.05\\+:*:*:*:*:*:*:*", "matchCriteriaId": "311BFB28-CA38-4085-9A74-E9A7CE85E1AB"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/127369/Lime-Survey-2.05-Build-140618-XSS-SQL-Injection.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/LimeSurvey/LimeSurvey/commit/9938bcd1df8ea27052557c722a67b00c0e7d6cb6", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/9938bcd1df8ea27052557c722a67b00c0e7d6cb6"}}