{"buggy_code": ["<?php\n/**\n*\n* @package Search Results\n* @copyright (c) 2014 John Peskens (http://ForumHulp.com)\n* @license http://opensource.org/licenses/gpl-2.0.php GNU General Public License v2\n*\n*/\n\nnamespace forumhulp\\searchresults\\event;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\n/**\n* Event listener\n*/\nclass listener implements EventSubscriberInterface\n{\n\tprotected $config;\n\tprotected $helper;\n\tprotected $user;\n\tprotected $request;\n\tprotected $db;\n\tprotected $log;\n\tprotected $phpbb_root_path;\n\tprotected $php_ext;\n\tprotected $searchresults_table;\n\n\t/**\n\t* Constructor\n\t*/\n\tpublic function __construct(\\phpbb\\config\\config $config, \\phpbb\\controller\\helper $helper, \\phpbb\\user $user, \\phpbb\\request\\request $request, \\phpbb\\db\\driver\\driver_interface $db, \\phpbb\\log\\log $log, $phpbb_root_path, $php_ext, $searchresults_table)\n\t{\n\t\t$this->config = $config;\n\t\t$this->helper = $helper;\n\t\t$this->user = $user;\n\t\t$this->request = $request;\n\t\t$this->db = $db;\n\t\t$this->log = $log;\n\t\t$this->phpbb_root_path = $phpbb_root_path;\n\t\t$this->php_ext = $php_ext;\n\t\t$this->searchresults_table = $searchresults_table;\n\t}\n\n\tstatic public function getSubscribedEvents()\n\t{\n\t\treturn array(\n\t\t\t'core.search_results_modify_search_title'\t=> 'list_keywords',\n\t\t\t'core.acp_board_config_edit_add'\t\t\t=> 'load_config_on_setup',\n\t\t);\n\t}\n\n\tpublic function list_keywords($event)\n\t{\n\t\t$keywords = $this->request->variable('keywords', '');\n\t\t$match\t\t= array('#\\sand\\s#iu', '#\\sor\\s#iu', '#\\snot\\s#iu', '#(^|\\s)\\+#', '#(^|\\s)-#', '#(^|\\s)\\|#');\n\t\t$replace\t= array(' +', ' |', ' -', ' +', ' -', ' |');\n\t\t$keywords = preg_replace($match, $replace, $keywords);\n\n\t\t// Filter out as above\n\t\t$split_keywords = preg_replace(\"#[\\n\\r\\t]+#\", ' ', trim(htmlspecialchars_decode(strtolower($keywords))));\n\n\t\t// Split words\n\t\t$split_keywords = preg_replace('#([^\\p{L}\\p{N}\\'*\"()])#u', '$1$1', str_replace('\\'\\'', '\\' \\'', trim($split_keywords)));\n\t\t$matches = array();\n\t\tpreg_match_all('#(?:[^\\p{L}\\p{N}*\"()]|^)([+\\-|]?(?:[\\p{L}\\p{N}*\"()]+\\'?)*[\\p{L}\\p{N}*\"()])(?:[^\\p{L}\\p{N}*\"()]|$)#u', $split_keywords, $matches);\n\t\t$this->split_words = $matches[1];\n\n\t\tforeach($this->split_words as $word)\n\t\t{\n\t\t\tif (strlen($word) <= $this->config['fulltext_native_min_chars'])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$sql = 'SELECT word_id FROM ' . SEARCH_WORDLIST_TABLE . ' WHERE word_text = \"' . $word . '\"';\n\t\t\t$resulttemp = $this->db->sql_query($sql);\n\t\t\t$found = ($rowtemp = $this->db->sql_fetchrow($resulttemp));\n\n\t\t\t$sql = 'SELECT search_keywords, last_time FROM ' . $this->searchresults_table . ' WHERE search_keywords = \"' . $word . '\"';\n\t\t\t$result = $this->db->sql_query($sql);\n\t\t\t$used = ($row = $this->db->sql_fetchrow($result));\n\t\t\t$this->db->sql_freeresult($result);\n\n\t\t\t$fields = array('last_time' => time(), 'in_post' => ($found) ? 1 : 0);\n\t\t\tif (!$used)\n\t\t\t{\n\t\t\t\t$fields += array(\n\t\t\t\t\t'search_keywords' => $word,\n\t\t\t\t\t'hits' => 1,\n\t\t\t\t\t'first_time' => time(),\n\t\t\t\t);\n\t\t\t\t$sql = 'INSERT INTO ' . $this->searchresults_table . ' ' . $this->db->sql_build_array('INSERT', $fields);\n\t\t\t} else\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . $this->searchresults_table . ' SET hits = hits + 1, ' . $this->db->sql_build_array('UPDATE', $fields) . '\n\t\t\t\t\t\tWHERE search_keywords = \"' . $word . '\"';\n\t\t\t}\n\t\t\t$this->db->sql_query($sql);\n\t\t}\n\t}\n\n\tpublic function search_result($event)\n\t{\n\t\t$sql = 'SELECT search_time, search_keywords, search_authors FROM ' . SEARCH_RESULTS_TABLE;\n\t\t$result = $this->db->sql_query($sql);\n\t\twhile ($row = $this->db->sql_fetchrow($result))\n\t\t{\n\t\t\t$sql = 'SELECT search_keywords, last_time FROM ' . $this->searchresults_table . ' WHERE search_keywords = \\'' . $this->db->sql_escape($row['search_keywords']) . '\\'';\n\t\t\t$resulttemp = $this->db->sql_query($sql);\n\t\t\t$found = ($rowtemp = $this->db->sql_fetchrow($resulttemp));\n\t\t\t$this->db->sql_freeresult($resulttemp);\n\n\t\t\t$fields = array('last_time' => $row['search_time']);\n\t\t\tif (!$found)\n\t\t\t{\n\t\t\t\t$fields += array(\n\t\t\t\t\t'search_keywords' => $row['search_keywords'],\n\t\t\t\t\t'hits' => 1,\n\t\t\t\t\t'first_time' => $row['search_time'],\n\t\t\t\t);\n\t\t\t\t$sql = 'INSERT INTO ' . $this->searchresults_table . ' ' . $this->db->sql_build_array('INSERT', $fields);\n\t\t\t} else if ($row['search_time'] != $rowtemp['last_time'])\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . $this->searchresults_table . ' SET hits = hits + 1, ' . $this->db->sql_build_array('UPDATE', $fields) . '\n\t\t\t\t\t\tWHERE search_keywords = \\'' . $this->db->sql_escape($row['search_keywords']) . '\\'';\n\t\t\t}\n\t\t\t$this->db->sql_query($sql);\n\n\t\t}\n\t\tif ($this->config['prune_searchresults'])\n\t\t{\n\t\t\t$sql = 'SELECT hits, last_time FROM ' . $this->searchresults_table . ' ORDER BY hits DESC LIMIT '. $this->config['prune_searchresults'] .', 1';\n\t\t\t$result = $this->db->sql_query($sql);\n\n\t\t\t$prune = $this->db->sql_fetchrow($result);\n\t\t\tif ($prune)\n\t\t\t{\n\t\t\t\t$sql = 'DELETE FROM ' . $this->searchresults_table . ' WHERE hits < ' . $prune['hits'] . ' AND last_time < ' . $prune['last_time'];\n\t\t\t\t$this->db->sql_query($sql);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function load_config_on_setup($event)\n\t{\n\t\tif ($event['mode'] == 'features')\n\t\t{\n\t\t\t$display_vars = $event['display_vars'];\n\n\t\t\t$add_config_var['prune_searchresults'] =\n\t\t\t\tarray(\n\t\t\t\t\t'lang' \t\t=> 'PRUNE_SEARCHRESULTS',\n\t\t\t\t\t'validate'\t=> 'int',\n\t\t\t\t\t'type'\t\t=> 'number:0:99',\n\t\t\t\t\t'explain'\t=> true\n\t\t\t\t);\n\t\t\t$display_vars['vars'] = phpbb_insert_config_array($display_vars['vars'], $add_config_var, array('after' =>'allow_quick_reply'));\n\t\t\t$event['display_vars'] = array('title' => $display_vars['title'], 'vars' => $display_vars['vars']);\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n*\n* @package Search Results\n* @copyright (c) 2014 John Peskens (http://ForumHulp.com)\n* @license http://opensource.org/licenses/gpl-2.0.php GNU General Public License v2\n*\n*/\n\nnamespace forumhulp\\searchresults\\event;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\n/**\n* Event listener\n*/\nclass listener implements EventSubscriberInterface\n{\n\tprotected $config;\n\tprotected $helper;\n\tprotected $user;\n\tprotected $request;\n\tprotected $db;\n\tprotected $log;\n\tprotected $phpbb_root_path;\n\tprotected $php_ext;\n\tprotected $searchresults_table;\n\n\t/**\n\t* Constructor\n\t*/\n\tpublic function __construct(\\phpbb\\config\\config $config, \\phpbb\\controller\\helper $helper, \\phpbb\\user $user, \\phpbb\\request\\request $request, \\phpbb\\db\\driver\\driver_interface $db, \\phpbb\\log\\log $log, $phpbb_root_path, $php_ext, $searchresults_table)\n\t{\n\t\t$this->config = $config;\n\t\t$this->helper = $helper;\n\t\t$this->user = $user;\n\t\t$this->request = $request;\n\t\t$this->db = $db;\n\t\t$this->log = $log;\n\t\t$this->phpbb_root_path = $phpbb_root_path;\n\t\t$this->php_ext = $php_ext;\n\t\t$this->searchresults_table = $searchresults_table;\n\t}\n\n\tstatic public function getSubscribedEvents()\n\t{\n\t\treturn array(\n\t\t\t'core.search_results_modify_search_title'\t=> 'list_keywords',\n\t\t\t'core.acp_board_config_edit_add'\t\t\t=> 'load_config_on_setup',\n\t\t);\n\t}\n\n\tpublic function list_keywords($event)\n\t{\n\t\t$keywords = $this->request->variable('keywords', '');\n\t\t$match\t\t= array('#\\sand\\s#iu', '#\\sor\\s#iu', '#\\snot\\s#iu', '#(^|\\s)\\+#', '#(^|\\s)-#', '#(^|\\s)\\|#');\n\t\t$replace\t= array(' +', ' |', ' -', ' +', ' -', ' |');\n\t\t$keywords = preg_replace($match, $replace, $keywords);\n\n\t\t// Filter out as above\n\t\t$split_keywords = preg_replace(\"#[\\n\\r\\t]+#\", ' ', trim(htmlspecialchars_decode(strtolower($keywords))));\n\n\t\t// Split words\n\t\t$split_keywords = preg_replace('#([^\\p{L}\\p{N}\\'*\"()])#u', '$1$1', str_replace('\\'\\'', '\\' \\'', trim($split_keywords)));\n\t\t$matches = array();\n\t\tpreg_match_all('#(?:[^\\p{L}\\p{N}*\"()]|^)([+\\-|]?(?:[\\p{L}\\p{N}*\"()]+\\'?)*[\\p{L}\\p{N}*\"()])(?:[^\\p{L}\\p{N}*\"()]|$)#u', $split_keywords, $matches);\n\t\t$this->split_words = $matches[1];\n\n\t\tforeach($this->split_words as $word)\n\t\t{\n\t\t\tif (strlen($word) <= $this->config['fulltext_native_min_chars'])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$sql = 'SELECT word_id FROM ' . SEARCH_WORDLIST_TABLE . ' WHERE word_text = \"' . $this->db->sql_escape($word) . '\"';\n\t\t\t$resulttemp = $this->db->sql_query($sql);\n\t\t\t$found = ($rowtemp = $this->db->sql_fetchrow($resulttemp));\n\n\t\t\t$sql = 'SELECT search_keywords, last_time FROM ' . $this->searchresults_table . ' WHERE search_keywords = \"' . $this->db->sql_escape($word) . '\"';\n\t\t\t$result = $this->db->sql_query($sql);\n\t\t\t$used = ($row = $this->db->sql_fetchrow($result));\n\t\t\t$this->db->sql_freeresult($result);\n\n\t\t\t$fields = array('last_time' => time(), 'in_post' => ($found) ? 1 : 0);\n\t\t\tif (!$used)\n\t\t\t{\n\t\t\t\t$fields += array(\n\t\t\t\t\t'search_keywords' => $word,\n\t\t\t\t\t'hits' => 1,\n\t\t\t\t\t'first_time' => time(),\n\t\t\t\t);\n\t\t\t\t$sql = 'INSERT INTO ' . $this->searchresults_table . ' ' . $this->db->sql_build_array('INSERT', $fields);\n\t\t\t} else\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . $this->searchresults_table . ' SET hits = hits + 1, ' . $this->db->sql_build_array('UPDATE', $fields) . '\n\t\t\t\t\t\tWHERE search_keywords = \"' . $word . '\"';\n\t\t\t}\n\t\t\t$this->db->sql_query($sql);\n\t\t}\n\t}\n\n\tpublic function search_result($event)\n\t{\n\t\t$sql = 'SELECT search_time, search_keywords, search_authors FROM ' . SEARCH_RESULTS_TABLE;\n\t\t$result = $this->db->sql_query($sql);\n\t\twhile ($row = $this->db->sql_fetchrow($result))\n\t\t{\n\t\t\t$sql = 'SELECT search_keywords, last_time FROM ' . $this->searchresults_table . ' WHERE search_keywords = \\'' . $this->db->sql_escape($row['search_keywords']) . '\\'';\n\t\t\t$resulttemp = $this->db->sql_query($sql);\n\t\t\t$found = ($rowtemp = $this->db->sql_fetchrow($resulttemp));\n\t\t\t$this->db->sql_freeresult($resulttemp);\n\n\t\t\t$fields = array('last_time' => $row['search_time']);\n\t\t\tif (!$found)\n\t\t\t{\n\t\t\t\t$fields += array(\n\t\t\t\t\t'search_keywords' => $row['search_keywords'],\n\t\t\t\t\t'hits' => 1,\n\t\t\t\t\t'first_time' => $row['search_time'],\n\t\t\t\t);\n\t\t\t\t$sql = 'INSERT INTO ' . $this->searchresults_table . ' ' . $this->db->sql_build_array('INSERT', $fields);\n\t\t\t} else if ($row['search_time'] != $rowtemp['last_time'])\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . $this->searchresults_table . ' SET hits = hits + 1, ' . $this->db->sql_build_array('UPDATE', $fields) . '\n\t\t\t\t\t\tWHERE search_keywords = \\'' . $this->db->sql_escape($row['search_keywords']) . '\\'';\n\t\t\t}\n\t\t\t$this->db->sql_query($sql);\n\n\t\t}\n\t\tif ($this->config['prune_searchresults'])\n\t\t{\n\t\t\t$sql = 'SELECT hits, last_time FROM ' . $this->searchresults_table . ' ORDER BY hits DESC LIMIT '. $this->config['prune_searchresults'] .', 1';\n\t\t\t$result = $this->db->sql_query($sql);\n\n\t\t\t$prune = $this->db->sql_fetchrow($result);\n\t\t\tif ($prune)\n\t\t\t{\n\t\t\t\t$sql = 'DELETE FROM ' . $this->searchresults_table . ' WHERE hits < ' . $prune['hits'] . ' AND last_time < ' . $prune['last_time'];\n\t\t\t\t$this->db->sql_query($sql);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function load_config_on_setup($event)\n\t{\n\t\tif ($event['mode'] == 'features')\n\t\t{\n\t\t\t$display_vars = $event['display_vars'];\n\n\t\t\t$add_config_var['prune_searchresults'] =\n\t\t\t\tarray(\n\t\t\t\t\t'lang' \t\t=> 'PRUNE_SEARCHRESULTS',\n\t\t\t\t\t'validate'\t=> 'int',\n\t\t\t\t\t'type'\t\t=> 'number:0:99',\n\t\t\t\t\t'explain'\t=> true\n\t\t\t\t);\n\t\t\t$display_vars['vars'] = phpbb_insert_config_array($display_vars['vars'], $add_config_var, array('after' =>'allow_quick_reply'));\n\t\t\t$event['display_vars'] = array('title' => $display_vars['title'], 'vars' => $display_vars['vars']);\n\t\t}\n\t}\n}\n"], "filenames": ["event/listener.php"], "buggy_code_start_loc": [76], "buggy_code_end_loc": [81], "fixing_code_start_loc": [76], "fixing_code_end_loc": [81], "type": "CWE-89", "message": "A vulnerability was found in ForumHulp searchresults. It has been rated as critical. Affected by this issue is the function list_keywords of the file event/listener.php. The manipulation of the argument word leads to sql injection. The name of the patch is dd8a312bb285ad9735a8e1da58e9e955837b7322. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217628.", "other": {"cve": {"id": "CVE-2016-15013", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T20:15:09.233", "lastModified": "2023-01-12T20:36:50.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in ForumHulp searchresults. It has been rated as critical. Affected by this issue is the function list_keywords of the file event/listener.php. The manipulation of the argument word leads to sql injection. The name of the patch is dd8a312bb285ad9735a8e1da58e9e955837b7322. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217628."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:forumhulp:search_results:*:*:*:*:*:*:*:*", "versionEndExcluding": "2016-10-25", "matchCriteriaId": "36F0B825-B7BD-4BF7-843F-5AEF751D065D"}]}]}], "references": [{"url": "https://github.com/ForumHulp/searchresults/commit/dd8a312bb285ad9735a8e1da58e9e955837b7322", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ForumHulp/searchresults/pull/2", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217628", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217628", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/ForumHulp/searchresults/commit/dd8a312bb285ad9735a8e1da58e9e955837b7322"}}