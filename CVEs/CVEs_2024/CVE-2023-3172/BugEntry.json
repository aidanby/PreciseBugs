{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Http\\HttpClient;\nuse Froxlor\\Install\\AutoUpdate;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Response;\n\nif ($page != 'error') {\n\t// check for webupdate to be enabled\n\tif (Settings::Config('enable_webupdate') != true) {\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => 'error',\n\t\t\t'errno' => 11\n\t\t]);\n\t}\n}\n\n// display initial version check\nif ($page == 'overview') {\n\t// log our actions\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"checking auto-update\");\n\n\t// check for new version\n\ttry {\n\t\t$result = AutoUpdate::checkVersion();\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\n\tif ($result == 1) {\n\n\t\t// anzeige \u00fcber version-status mit ggfls. formular\n\t\t// zum update schritt #1 -> download\n\t\t$text = lng('admin.newerversionavailable') . ' ' . lng('admin.newerversiondetails', [AutoUpdate::getFromResult('version'), Froxlor::VERSION]);\n\n\t\t$upd_formfield = [\n\t\t\t'updates' => [\n\t\t\t\t'title' => lng('update.update'),\n\t\t\t\t'image' => 'fa-solid fa-download',\n\t\t\t\t'sections' => [\n\t\t\t\t\t'section_autoupd' => [\n\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t'newversion' => ['type' => 'hidden', 'value' => AutoUpdate::getFromResult('version')]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'buttons' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\n\t\tUI::view('user/form-note.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'autoupdate', 'page' => 'getdownload']),\n\t\t\t'formdata' => $upd_formfield['updates'],\n\t\t\t// alert\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => $text\n\t\t]);\n\t} else if ($result < 0 || $result > 1) {\n\t\t// remote errors\n\t\tif ($result < 0) {\n\t\t\tResponse::dynamicError(AutoUpdate::getLastError());\n\t\t} else {\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'error',\n\t\t\t\t'errno' => $result\n\t\t\t]);\n\t\t}\n\t} else {\n\t\t// no new version\n\t\tResponse::standardSuccess('update.noupdatesavail', (Settings::Get('system.update_channel') == 'testing' ? lng('serversettings.uc_testing') . ' ' : ''));\n\t}\n} // download the new archive\nelseif ($page == 'getdownload') {\n\t// retrieve the new version from the form\n\t$newversion = isset($_POST['newversion']) ? $_POST['newversion'] : null;\n\n\t$result = 6;\n\t// valid?\n\tif ($newversion !== null) {\n\t\t$result = AutoUpdate::downloadZip($newversion);\n\t\tif (!is_numeric($result)) {\n\t\t\t// to the next step\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'extract',\n\t\t\t\t'archive' => $result\n\t\t\t]);\n\t\t}\n\t}\n\tResponse::redirectTo($filename, [\n\t\t'page' => 'error',\n\t\t'errno' => $result\n\t]);\n} // extract and install new version\nelseif ($page == 'extract') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$toExtract = isset($_POST['archive']) ? $_POST['archive'] : null;\n\t\t$localArchive = Froxlor::getInstallDir() . '/updates/' . $toExtract;\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"Extracting \" . $localArchive . \" to \" . Froxlor::getInstallDir());\n\t\t$result = AutoUpdate::extractZip($localArchive);\n\t\tif ($result > 0) {\n\t\t\t// error\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'error',\n\t\t\t\t'errno' => $result\n\t\t\t]);\n\t\t}\n\t\t// redirect to update-page\n\t\tResponse::redirectTo('admin_updates.php');\n\t} else {\n\t\t$toExtract = isset($_GET['archive']) ? $_GET['archive'] : null;\n\t\t$localArchive = Froxlor::getInstallDir() . '/updates/' . $toExtract;\n\t}\n\n\tif (!file_exists($localArchive)) {\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => 'error',\n\t\t\t'errno' => 7\n\t\t]);\n\t}\n\n\t$text = lng('admin.extractdownloadedzip', [$toExtract]);\n\n\t$upd_formfield = [\n\t\t'updates' => [\n\t\t\t'title' => lng('update.update'),\n\t\t\t'image' => 'fa-solid fa-download',\n\t\t\t'sections' => [\n\t\t\t\t'section_autoupd' => [\n\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t'archive' => ['type' => 'hidden', 'value' => $toExtract]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\t'buttons' => [\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t'type' => 'reset'\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t];\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'autoupdate', 'page' => 'extract']),\n\t\t'formdata' => $upd_formfield['updates'],\n\t\t// alert\n\t\t'type' => 'warning',\n\t\t'alert_msg' => $text\n\t]);\n} // display error\nelseif ($page == 'error') {\n\t// retrieve error-number via url-parameter\n\t$errno = isset($_GET['errno']) ? (int)$_GET['errno'] : 0;\n\n\t// 2 = no Zlib\n\t// 3 = custom version detected\n\t// 4 = could not store archive to local hdd\n\t// 5 = some weird value came from version.froxlor.org\n\t// 6 = download without valid version\n\t// 7 = local archive does not exist\n\t// 8 = could not extract archive\n\t// 9 = checksum mismatch\n\t// 10 = <php-7.4\n\t// 11 = enable_webupdate = false\n\t$errmsg = 'autoupdate_' . $errno;\n\tif ($errno == 3) {\n\t\t$errmsg = 'customized_version';\n\t}\n\tResponse::standardError($errmsg);\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\FileDir;\nuse Froxlor\\Install\\AutoUpdate;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Response;\n\nif ($page != 'error') {\n\t// check for webupdate to be enabled\n\tif (Settings::Config('enable_webupdate') != true) {\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => 'error',\n\t\t\t'errno' => 11\n\t\t]);\n\t}\n}\n\n// display initial version check\nif ($page == 'overview') {\n\t// log our actions\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"checking auto-update\");\n\n\t// check for new version\n\ttry {\n\t\t$result = AutoUpdate::checkVersion();\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\n\tif ($result == 1) {\n\n\t\t// anzeige \u00fcber version-status mit ggfls. formular\n\t\t// zum update schritt #1 -> download\n\t\t$text = lng('admin.newerversionavailable') . ' ' . lng('admin.newerversiondetails', [AutoUpdate::getFromResult('version'), Froxlor::VERSION]);\n\n\t\t$upd_formfield = [\n\t\t\t'updates' => [\n\t\t\t\t'title' => lng('update.update'),\n\t\t\t\t'image' => 'fa-solid fa-download',\n\t\t\t\t'sections' => [\n\t\t\t\t\t'section_autoupd' => [\n\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t'newversion' => ['type' => 'hidden', 'value' => AutoUpdate::getFromResult('version')]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'buttons' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\n\t\tUI::view('user/form-note.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'autoupdate', 'page' => 'getdownload']),\n\t\t\t'formdata' => $upd_formfield['updates'],\n\t\t\t// alert\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => $text\n\t\t]);\n\t} else if ($result < 0 || $result > 1) {\n\t\t// remote errors\n\t\tif ($result < 0) {\n\t\t\tResponse::dynamicError(AutoUpdate::getLastError());\n\t\t} else {\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'error',\n\t\t\t\t'errno' => $result\n\t\t\t]);\n\t\t}\n\t} else {\n\t\t// no new version\n\t\tResponse::standardSuccess('update.noupdatesavail', (Settings::Get('system.update_channel') == 'testing' ? lng('serversettings.uc_testing') . ' ' : ''));\n\t}\n} // download the new archive\nelseif ($page == 'getdownload') {\n\t// retrieve the new version from the form\n\t$newversion = isset($_POST['newversion']) ? $_POST['newversion'] : null;\n\n\t$result = 6;\n\t// valid?\n\tif ($newversion !== null) {\n\t\t$result = AutoUpdate::downloadZip($newversion);\n\t\tif (!is_numeric($result)) {\n\t\t\t// to the next step\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'extract',\n\t\t\t\t'archive' => $result\n\t\t\t]);\n\t\t}\n\t}\n\tResponse::redirectTo($filename, [\n\t\t'page' => 'error',\n\t\t'errno' => $result\n\t]);\n} // extract and install new version\nelseif ($page == 'extract') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$toExtract = isset($_POST['archive']) ? $_POST['archive'] : null;\n\t\t$localArchive = FileDir::makeCorrectFile(Froxlor::getInstallDir() . '/updates/' . $toExtract);\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"Extracting \" . $localArchive . \" to \" . Froxlor::getInstallDir());\n\t\t$result = AutoUpdate::extractZip($localArchive);\n\t\tif ($result > 0) {\n\t\t\t// error\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => 'error',\n\t\t\t\t'errno' => $result\n\t\t\t]);\n\t\t}\n\t\t// redirect to update-page\n\t\tResponse::redirectTo('admin_updates.php');\n\t} else {\n\t\t$toExtract = isset($_GET['archive']) ? $_GET['archive'] : null;\n\t\t$localArchive = FileDir::makeCorrectFile(Froxlor::getInstallDir() . '/updates/' . $toExtract);\n\t}\n\n\tif (!file_exists($localArchive)) {\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => 'error',\n\t\t\t'errno' => 7\n\t\t]);\n\t}\n\n\t$text = lng('admin.extractdownloadedzip', [$toExtract]);\n\n\t$upd_formfield = [\n\t\t'updates' => [\n\t\t\t'title' => lng('update.update'),\n\t\t\t'image' => 'fa-solid fa-download',\n\t\t\t'sections' => [\n\t\t\t\t'section_autoupd' => [\n\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t'archive' => ['type' => 'hidden', 'value' => $toExtract]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\t'buttons' => [\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t'type' => 'reset'\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t];\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'autoupdate', 'page' => 'extract']),\n\t\t'formdata' => $upd_formfield['updates'],\n\t\t// alert\n\t\t'type' => 'warning',\n\t\t'alert_msg' => $text\n\t]);\n} // display error\nelseif ($page == 'error') {\n\t// retrieve error-number via url-parameter\n\t$errno = isset($_GET['errno']) ? (int)$_GET['errno'] : 0;\n\n\t// 2 = no Zlib\n\t// 3 = custom version detected\n\t// 4 = could not store archive to local hdd\n\t// 5 = some weird value came from version.froxlor.org\n\t// 6 = download without valid version\n\t// 7 = local archive does not exist\n\t// 8 = could not extract archive\n\t// 9 = checksum mismatch\n\t// 10 = <php-7.4\n\t// 11 = enable_webupdate = false\n\t$errmsg = 'autoupdate_' . $errno;\n\tif ($errno == 3) {\n\t\t$errmsg = 'customized_version';\n\t}\n\tResponse::standardError($errmsg);\n}\n"], "filenames": ["admin_autoupdate.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [150], "fixing_code_start_loc": [31], "fixing_code_end_loc": [150], "type": "CWE-22", "message": "Path Traversal in GitHub repository froxlor/froxlor prior to 2.0.20.", "other": {"cve": {"id": "CVE-2023-3172", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-09T01:15:30.237", "lastModified": "2023-06-14T18:21:14.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Path Traversal in GitHub repository froxlor/froxlor prior to 2.0.20."}, {"lang": "es", "value": "Salto de ruta en el repositorio de GitHub de froxlor/froxlor anterior a 2.0.20."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.20", "matchCriteriaId": "7FE0153D-83B4-43BA-A1F8-D90020C9B465"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/da810ea95393dfaec68a70e30b7c887c50563a7e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e50966cd-9222-46b9-aedc-1feb3f2a0b0e", "source": "security@huntr.dev", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/da810ea95393dfaec68a70e30b7c887c50563a7e"}}