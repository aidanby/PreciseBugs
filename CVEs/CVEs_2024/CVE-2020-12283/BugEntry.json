{"buggy_code": ["package auth\n\nimport (\n\t\"net/url\"\n\t\"strings\"\n)\n\n// SafeRedirectURL returns a safe redirect URL based on the input, to protect against open-redirect vulnerabilities.\n//\n// \ud83d\udea8 SECURITY: Handlers MUST call this on any redirection destination URL derived from untrusted\n// user input, or else there is a possible open-redirect vulnerability.\nfunc SafeRedirectURL(urlStr string) string {\n\tu, err := url.Parse(urlStr)\n\tif err != nil || !strings.HasPrefix(u.Path, \"/\") {\n\t\treturn \"/\"\n\t}\n\n\t// Only take certain known-safe fields.\n\tu = &url.URL{Path: u.Path, RawQuery: u.RawQuery}\n\treturn u.String()\n}\n", "package auth\n\nimport \"testing\"\n\nfunc TestSafeRedirectURL(t *testing.T) {\n\ttests := map[string]string{\n\t\t\"\":               \"/\",\n\t\t\"/\":              \"/\",\n\t\t\"a@b.com:c\":      \"/\",\n\t\t\"a@b.com/c\":      \"/\",\n\t\t\"//a\":            \"/\",\n\t\t\"http://a.com/b\": \"/b\",\n\t\t\"//a.com/b\":      \"/b\",\n\t\t\"//a@b.com/c\":    \"/c\",\n\t\t\"/a?b\":           \"/a?b\",\n\t}\n\tfor input, want := range tests {\n\t\tgot := SafeRedirectURL(input)\n\t\tif got != want {\n\t\t\tt.Errorf(\"%q: got %q, want %q\", input, got, want)\n\t\t}\n\t}\n}\n"], "fixing_code": ["package auth\n\nimport (\n\t\"net/url\"\n\t\"path\"\n\t\"strings\"\n)\n\n// SafeRedirectURL returns a safe redirect URL based on the input, to protect against open-redirect vulnerabilities.\n//\n// \ud83d\udea8 SECURITY: Handlers MUST call this on any redirection destination URL derived from untrusted\n// user input, or else there is a possible open-redirect vulnerability.\nfunc SafeRedirectURL(urlStr string) string {\n\tu, err := url.Parse(urlStr)\n\tif err != nil || !strings.HasPrefix(u.Path, \"/\") {\n\t\treturn \"/\"\n\t}\n\n\t// Make sure u.Path always starts with a single slash.\n\tu.Path = path.Clean(u.Path)\n\n\t// Only take certain known-safe fields.\n\tu = &url.URL{Path: u.Path, RawQuery: u.RawQuery}\n\treturn u.String()\n}\n", "package auth\n\nimport \"testing\"\n\nfunc TestSafeRedirectURL(t *testing.T) {\n\ttests := map[string]string{\n\t\t\"\":                   \"/\",\n\t\t\"/\":                  \"/\",\n\t\t\"a@b.com:c\":          \"/\",\n\t\t\"a@b.com/c\":          \"/\",\n\t\t\"//a\":                \"/\",\n\t\t\"http://a.com/b\":     \"/b\",\n\t\t\"//a.com/b\":          \"/b\",\n\t\t\"//a@b.com/c\":        \"/c\",\n\t\t\"/a?b\":               \"/a?b\",\n\t\t\"//foo//example.com\": \"/example.com\",\n\t}\n\tfor input, want := range tests {\n\t\tgot := SafeRedirectURL(input)\n\t\tif got != want {\n\t\t\tt.Errorf(\"%q: got %q, want %q\", input, got, want)\n\t\t}\n\t}\n}\n"], "filenames": ["cmd/frontend/auth/redirect.go", "cmd/frontend/auth/redirect_test.go"], "buggy_code_start_loc": [4, 7], "buggy_code_end_loc": [17, 16], "fixing_code_start_loc": [5, 7], "fixing_code_end_loc": [22, 17], "type": "CWE-601", "message": "Sourcegraph before 3.15.1 has a vulnerable authentication workflow because of improper validation in the SafeRedirectURL method in cmd/frontend/auth/redirect.go, such as for the //foo//example.com substring.", "other": {"cve": {"id": "CVE-2020-12283", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-30T05:15:11.947", "lastModified": "2021-03-04T21:10:40.313", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sourcegraph before 3.15.1 has a vulnerable authentication workflow because of improper validation in the SafeRedirectURL method in cmd/frontend/auth/redirect.go, such as for the //foo//example.com substring."}, {"lang": "es", "value": "Sourcegraph versiones anteriores a 3.15.1, hay un flujo de trabajo de autenticaci\u00f3n vulnerable debido a una comprobaci\u00f3n inapropiada en el m\u00e9todo SafeRedirectURL en el archivo cmd/frontend/auth/redirect.go, tal y como para la subcadena //foo//example.com."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sourcegraph:sourcegraph:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.15.1", "matchCriteriaId": "20A6A2ED-E938-4AAA-ACDF-A362E9E4CBE2"}]}]}], "references": [{"url": "https://github.com/sourcegraph/sourcegraph/blob/master/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sourcegraph/sourcegraph/compare/v3.15.0...v3.15.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/sourcegraph/sourcegraph/pull/10167", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64"}}