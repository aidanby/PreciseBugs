{"buggy_code": ["class CommentsController < ApplicationController\n\t  before_action :logged_in_user, only: [:create, :destroy]\n\n  def new\n  \t@comment = Comment.new(parent_id: params[:parent_id])\n\n  \trespond_to do |format|\n  \t format.html\n  \t format.js\n  \tend\n  end\n\n  def create\n  \t@post = Post.find(session[:current_post_id])\n\n  \tif params[:parent_id].to_i > 0\n    parent = Comment.find_by_id(params[:parent_id])\n    @comment = parent.comments.build(comment_params)\n    @comment.user_id = session[:user_id]\n    else\n    @comment = @post.comments.build(comment_params)\n    @comment.user_id = session[:user_id]\n    end\n\n    if @comment.save\n      flash[:success] = \"Comment created!\"\n      redirect_to @post\n    else\n      @feed_items = []\n\t\t\t\trender 'new'\n\t    end\n  end\n\n  def destroy\n  \t@post = Post.find(session[:current_post_id])\n  \t@comment = Comment.find(params[:id])\n    @comment.destroy\n    flash[:success] = \"Comment deleted\"\n    redirect_to @post\n  end\n\n# VOTES\n  def upvote\n    @comment = Comment.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @comment.votes.create\n      @vote.update_attributes(isUpvote: true, user_id: current_user.id)\n      @comment.user.increment_karma(1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, true)\n      #changing existing vote from -1 to a +1, so karma adjusted by 2\n      @comment.user.increment_karma(2)\n      redirect_to request.referrer\n    end\n  end\n\n  def unvote\n    if current_user_existing_vote.nil?\n      # nothing to change since no existing vote\n      redirect_to request.referrer\n    else\n      @comment = Comment.find(params[:id])\n      # first find out whether the existing vote was +1 or -1\n      if current_user_existing_vote.isUpvote\n        @comment.user.increment_karma(-1)\n      else\n        @comment.user.increment_karma(1)\n      end\n      current_user_existing_vote.destroy\n      redirect_to request.referrer\n    end\n  end\n\n  def downvote\n    @comment = Comment.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @comment.votes.create\n      @vote.update_attributes(isUpvote: false, user_id: current_user.id)\n      @comment.user.increment_karma(-1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, false)\n      #changing existing vote from +1 to a -1, so karma adjusted by -2\n      @comment.user.increment_karma(-2)\n      redirect_to request.referrer\n    end  \n  end\n\n  private\n\n    def comment_params\n      params.require(:comment).permit(:content)\n    end\n\n    def current_user_existing_vote\n      @vote = current_user.votes.find_by(comment_id: params[:id])\n    end\nend\n", "class PostsController < ApplicationController\n\n  before_action :logged_in_user, only: [:create, :destroy]\n  before_action :correct_user,   only: :destroy\n\n  def index\n    @posts = Post.all\n  end\n\n  def show\n    @post = Post.find(params[:id])\n    @comments = @post.comments\n    @comment = Comment.new\n    session[:current_post_id] = params[:id]\n  end\n\n  def new\n  \tif logged_in?\n\t    @post = current_user.posts.build \n\t  else\n\t  \tredirect_to login_url\n\t  end\t\n  end\n\n  def create\n    @post = current_user.posts.build(post_params)\n\n    subreddits = Subreddit.where(subname: @post.subname)\n    if subreddits.first\n      @post.subreddit_id = subreddits.first.id\n      if @post.save\n      flash[:success] = \"Post created!\"\n      redirect_to posts_url\n      else\n        @feed_items = []\n          render 'new'\n      end\n    else\n      if @post.save\n      else\n          render 'new'\n      end\n    end\n  end\n\n  def destroy\n    @post.destroy\n    flash[:success] = \"Post deleted\"\n    redirect_to request.referrer || root_url\n    # TODO: redirect causes error if you delete from posts/post_id\n  end\n\n#VOTES\n  def upvote\n    @post = Post.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @post.votes.create\n      @vote.update_attributes(isUpvote: true, user_id: current_user.id)\n      @post.user.increment_karma(1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, true)\n      #changing existing vote from -1 to a +1, so karma adjusted by 2\n      @post.user.increment_karma(2)\n      redirect_to request.referrer\n    end\n\n  end\n\n  def unvote\n    if current_user_existing_vote.nil?\n      # nothing to change since no existing vote\n      redirect_to request.referrer\n    else\n      @post = Post.find(params[:id])\n      # first find out whether the existing vote was +1 or -1\n      if current_user_existing_vote.isUpvote\n        @post.user.increment_karma(-1)\n      else\n        @post.user.increment_karma(1)\n      end\n      current_user_existing_vote.destroy\n      redirect_to request.referrer\n    end\n  end\n\n  def downvote\n    @post = Post.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @post.votes.create\n      @vote.update_attributes(isUpvote: false, user_id: current_user.id)\n      @post.user.increment_karma(-1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, false)\n      #changing existing vote from +1 to a -1, so karma adjusted by -2\n      @post.user.increment_karma(-2)\n      redirect_to request.referrer\n    end  \n  end\n\n  private\n\n    def post_params\n      params.require(:post).permit(:title, :link, :body, :subname)\n    end\n    \n    def correct_user\n      @post = current_user.posts.find_by(id: params[:id])\n      redirect_to root_url if @post.nil?\n    end\n\n    def current_user_existing_vote\n      @vote = current_user.votes.find_by(post_id: params[:id])\n    end\nend\n"], "fixing_code": ["class CommentsController < ApplicationController\n\t  before_action :logged_in_user, only: [:create, :destroy]\n\n  def new\n  \t@comment = Comment.new(parent_id: params[:parent_id])\n\n  \trespond_to do |format|\n  \t format.html\n  \t format.js\n  \tend\n  end\n\n  def create\n  \t@post = Post.find(session[:current_post_id])\n\n  \tif params[:parent_id].to_i > 0\n    parent = Comment.find_by_id(params[:parent_id])\n    @comment = parent.comments.build(comment_params)\n    @comment.user_id = session[:user_id]\n    else\n    @comment = @post.comments.build(comment_params)\n    @comment.user_id = session[:user_id]\n    end\n\n    if @comment.save\n      flash[:success] = \"Comment created!\"\n      redirect_to @post\n    else\n      @feed_items = []\n\t\t\t\trender 'new'\n\t    end\n  end\n\n  def destroy\n  \t@post = Post.find(session[:current_post_id])\n  \t@comment = Comment.find(params[:id])\n    @comment.destroy\n    flash[:success] = \"Comment deleted\"\n    redirect_to @post\n  end\n\n# VOTES\n  def upvote\n    @comment = Comment.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @comment.votes.create\n      @vote.update_attributes(isUpvote: true, user_id: current_user.id)\n      @comment.user.increment_karma(1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, true)\n      #changing existing vote from -1 to a +1, so karma adjusted by 2\n      @comment.user.increment_karma(2)\n      redirect_to request.referrer\n    end\n  end\n\n  def unvote\n    if current_user_existing_vote.nil?\n      # nothing to change since no existing vote\n      redirect_to request.referrer\n    else\n      @comment = Comment.find(params[:id])\n      # first find out whether the existing vote was +1 or -1\n      if current_user_existing_vote.isUpvote\n        @comment.user.increment_karma(-1)\n      else\n        @comment.user.increment_karma(1)\n      end\n      current_user_existing_vote.destroy\n      redirect_to request.referrer\n    end\n  end\n\n  def downvote\n    @comment = Comment.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @comment.votes.create\n      @vote.update_attributes(isUpvote: false, user_id: current_user.id)\n      @comment.user.increment_karma(-1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, false)\n      #changing existing vote from +1 to a -1, so karma adjusted by -2\n      @comment.user.increment_karma(-2)\n      redirect_to request.referrer\n    end  \n  end\n\n  private\n\n    def comment_params\n      params.require(:comment).permit(:content)\n    end\n\n    def current_user_existing_vote\n      @vote = current_user.votes.find_by(votable_id: params[:id])\n    end\nend\n", "class PostsController < ApplicationController\n\n  before_action :logged_in_user, only: [:create, :destroy]\n  before_action :correct_user,   only: :destroy\n\n  def index\n    @posts = Post.all\n  end\n\n  def show\n    @post = Post.find(params[:id])\n    @comments = @post.comments\n    @comment = Comment.new\n    session[:current_post_id] = params[:id]\n  end\n\n  def new\n  \tif logged_in?\n\t    @post = current_user.posts.build \n\t  else\n\t  \tredirect_to login_url\n\t  end\t\n  end\n\n  def create\n    @post = current_user.posts.build(post_params)\n\n    subreddits = Subreddit.where(subname: @post.subname)\n    if subreddits.first\n      @post.subreddit_id = subreddits.first.id\n      if @post.save\n      flash[:success] = \"Post created!\"\n      redirect_to posts_url\n      else\n        @feed_items = []\n          render 'new'\n      end\n    else\n      if @post.save\n      else\n          render 'new'\n      end\n    end\n  end\n\n  def destroy\n    @post.destroy\n    flash[:success] = \"Post deleted\"\n    redirect_to request.referrer || root_url\n    # TODO: redirect causes error if you delete from posts/post_id\n  end\n\n#VOTES\n  def upvote\n    @post = Post.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @post.votes.create\n      @vote.update_attributes(isUpvote: true, user_id: current_user.id)\n      @post.user.increment_karma(1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, true)\n      #changing existing vote from -1 to a +1, so karma adjusted by 2\n      @post.user.increment_karma(2)\n      redirect_to request.referrer\n    end\n\n  end\n\n  def unvote\n    if current_user_existing_vote.nil?\n      # nothing to change since no existing vote\n      redirect_to request.referrer\n    else\n      @post = Post.find(params[:id])\n      # first find out whether the existing vote was +1 or -1\n      if current_user_existing_vote.isUpvote\n        @post.user.increment_karma(-1)\n      else\n        @post.user.increment_karma(1)\n      end\n      current_user_existing_vote.destroy\n      redirect_to request.referrer\n    end\n  end\n\n  def downvote\n    @post = Post.find(params[:id])\n    if current_user_existing_vote.nil?\n      @vote = @post.votes.create\n      @vote.update_attributes(isUpvote: false, user_id: current_user.id)\n      @post.user.increment_karma(-1)\n      redirect_to request.referrer\n    else\n      current_user_existing_vote.update_attribute(:isUpvote, false)\n      #changing existing vote from +1 to a -1, so karma adjusted by -2\n      @post.user.increment_karma(-2)\n      redirect_to request.referrer\n    end  \n  end\n\n  private\n\n    def post_params\n      params.require(:post).permit(:title, :link, :body, :subname)\n    end\n    \n    def correct_user\n      @post = current_user.posts.find_by(id: params[:id])\n      redirect_to root_url if @post.nil?\n    end\n\n    def current_user_existing_vote\n      # @vote = current_user.votes.find_by(post_id: params[:id])\n      @vote = current_user.votes.find_by(votable_id: params[:id])\n    end\nend\n"], "filenames": ["app/controllers/comments_controller.rb", "app/controllers/posts_controller.rb"], "buggy_code_start_loc": [97, 114], "buggy_code_end_loc": [98, 115], "fixing_code_start_loc": [97, 114], "fixing_code_end_loc": [98, 116], "type": "CWE-284", "message": "A vulnerability classified as critical was found in koroket RedditOnRails. This vulnerability affects unknown code of the component Vote Handler. The manipulation leads to improper access controls. The attack can be initiated remotely. The name of the patch is 7f3c7407d95d532fcc342b00d68d0ea09ca71030. It is recommended to apply a patch to fix this issue. VDB-217594 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125054", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T09:15:21.197", "lastModified": "2023-01-12T16:52:05.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in koroket RedditOnRails. This vulnerability affects unknown code of the component Vote Handler. The manipulation leads to improper access controls. The attack can be initiated remotely. The name of the patch is 7f3c7407d95d532fcc342b00d68d0ea09ca71030. It is recommended to apply a patch to fix this issue. VDB-217594 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:reddit-on-rails_project:reddit-on-rails:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "2014-12-19", "matchCriteriaId": "B1BE2CF6-38C4-488C-ACED-F6905E898211"}]}]}], "references": [{"url": "https://github.com/koroket/RedditOnRails/commit/7f3c7407d95d532fcc342b00d68d0ea09ca71030", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217594", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217594", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/koroket/RedditOnRails/commit/7f3c7407d95d532fcc342b00d68d0ea09ca71030"}}