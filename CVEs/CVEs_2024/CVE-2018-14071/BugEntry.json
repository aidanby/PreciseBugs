{"buggy_code": ["<?php \r\n/**\r\n * Geo Mashup Data Access\r\n *\r\n * @package GeoMashup\r\n */\r\n\r\n// Init at load time - just adds hooks\r\nGeoMashupDB::init();\r\n\r\n/**\r\n * Static class to provide a namespace for Geo Mashup data functions.\r\n *\r\n * @since 1.2\r\n * @package GeoMashup\r\n */\r\nclass GeoMashupDB {\r\n\t/**\r\n\t * Current installed database version.\r\n\t * \r\n\t * @since 1.4\r\n\t * @var string \r\n\t */\r\n\tprivate static $installed_version = null;\r\n\t/**\r\n\t * Flag for objects that have geodata fields copied to.\r\n\t * Key $meta_type-$object_id, value true.\r\n\t * \r\n\t * @since 1.4\r\n\t * @var array  \r\n\t */\r\n\tprivate static $copied_to_geodata = array();\r\n\t/**\r\n\t * Meta keys used to store geodata\r\n\t *\r\n\t * @since 1.4\r\n\t * @var array\r\n\t */\r\n\tprivate static $geodata_keys = array( 'geo_latitude', 'geo_longitude', 'geo_address' );\r\n\t/**\r\n\t * The last geocode error, or empty if no error.\r\n\t * @var WP_Error\r\n\t */\r\n\tpublic static $geocode_error = array();\r\n\r\n\t/**\r\n\t * WordPress action to set up data-related WordPress hooks.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function init() {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\t// Enable the geo_mashup_query var\r\n\t\tadd_filter( 'query_vars', array( 'GeoMashupDB', 'query_vars' ) );\r\n\t\tadd_filter( 'posts_fields', array( 'GeoMashupDB', 'posts_fields' ), 10, 2 );\r\n\t\tadd_filter( 'posts_join', array( 'GeoMashupDB', 'posts_join' ), 10, 2 );\r\n\t\tadd_filter( 'posts_where', array( 'GeoMashupDB', 'posts_where' ), 10, 2 );\r\n\t\tadd_action( 'parse_query', array( 'GeoMashupDB', 'parse_query' ) );\r\n\r\n\t\t// Some caching plugins don't implement this\r\n\t\tif ( function_exists( 'wp_cache_add_global_groups' ) )\r\n\t\t\twp_cache_add_global_groups( array( 'geo_mashup_object_locations', 'geo_mashup_locations' ) );\r\n\r\n\t\t// Avoid orphans\r\n\t\tadd_action( 'delete_post', array( 'GeoMashupDB', 'delete_post' ) );\r\n\t\tadd_action( 'delete_comment', array( 'GeoMashupDB', 'delete_comment' ) );\r\n\t\tadd_action( 'delete_user', array( 'GeoMashupDB', 'delete_user' ) );\r\n\r\n\t\tif ( 'true' == $geo_mashup_options->get( 'overall', 'copy_geodata' ) or '' != $geo_mashup_options->get( 'overall', 'import_custom_field' ) )\r\n\t\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Add hooks to synchronize Geo Mashup ojbect locations with WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function add_geodata_sync_hooks() {\r\n\t\tadd_filter( 'update_post_metadata', array( 'GeoMashupDB', 'filter_update_post_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_filter( 'update_user_metadata', array( 'GeoMashupDB', 'filter_update_user_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tadd_filter( 'update_comment_metadata', array( 'GeoMashupDB', 'filter_update_comment_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\t// AJAX calls use a slightly different hook - triksy!\r\n\t\tadd_action( 'added_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\r\n\t\tadd_action( 'geo_mashup_added_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t\tadd_action( 'geo_mashup_updated_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove hooks to synchronize Geo Mashup ojbect locations with WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function remove_geodata_sync_hooks() {\r\n\t\tremove_filter( 'update_post_metadata', array( 'GeoMashupDB', 'filter_update_post_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_filter( 'update_user_metadata', array( 'GeoMashupDB', 'filter_update_user_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tremove_filter( 'update_comment_metadata', array( 'GeoMashupDB', 'filter_update_comment_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\t// AJAX calls use a slightly different hook - triksy!\r\n\t\tremove_action( 'added_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\r\n\t\tremove_action( 'geo_mashup_added_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t\tremove_action( 'geo_mashup_updated_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup post location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_post_meta( $meta_id, $post_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'post', $meta_id, $post_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup user location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_user_meta( $meta_id, $user_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'user', $meta_id, $user_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup comment location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_comment_meta( $meta_id, $comment_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'comment', $meta_id, $comment_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t * \r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_post_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['post-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_user_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['user-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_comment_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['comment-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a Geo Mashup object location from WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t * @see http://codex.wordpress.org/Geodata\r\n\t */\r\n\tprivate static function copy_from_geodata( $meta_type, $meta_id, $object_id, $meta_key, $meta_value ) {\r\n\t\tglobal $geo_mashup_options, $wpdb;\r\n\r\n\t\t// Do nothing if meta_key is not a known location field\r\n\t\t$location_keys = array();\r\n\t\t$is_copy_geodata_on = ( 'true' === $geo_mashup_options->get( 'overall', 'copy_geodata' ) );\r\n\t\t$copy_imported_geodata = false;\r\n\t\tif ( $is_copy_geodata_on ) {\r\n\t\t\t$location_keys = array_merge( $location_keys, array( 'geo_latitude', 'geo_longitude', 'geo_lat_lng' ) );\r\n\t\t}\r\n\t\t$import_custom_keys = preg_split( '/\\s*,\\s*/', trim( $geo_mashup_options->get( 'overall', 'import_custom_field' ) ) );\r\n\t\t$location_keys = array_merge( $location_keys, $import_custom_keys );\r\n\t\tif ( ! in_array( $meta_key, $location_keys ) ) \r\n\t\t\treturn;\r\n\r\n\t\t$existing_location = self::get_object_location( $meta_type, $object_id );\r\n\r\n\t\t$location = array();\r\n\r\n\t\t// Do nothing unless both latitude and longitude exist for the object\r\n\t\tif ( 'geo_lat_lng' == $meta_key ) {\r\n\r\n\t\t\t$lat_lng = preg_split( '/\\s*[, ]\\s*/', trim( $meta_value ) );\r\n\t\t\tif ( 2 != count( $lat_lng ) ) {\r\n\t\t\t\treturn; \r\n\t\t\t}\r\n\t\t\t$location['lat'] = $lat_lng[0];\r\n\t\t\t$location['lng'] = $lat_lng[1];\r\n\r\n\t\t} else if ( 'geo_latitude' == $meta_key ) {\r\n\r\n\t\t\t$location['lat'] = $meta_value;\r\n\t\t\t$lng = get_metadata( $meta_type, $object_id, 'geo_longitude', true );\r\n\t\t\tif ( empty( $lng ) )\r\n\t\t\t\treturn;\r\n\t\t\t$location['lng'] = $lng;\r\n\r\n\t\t} else if ( 'geo_longitude' == $meta_key ) {\r\n\r\n\t\t\t$location['lng'] = $meta_value;\r\n\t\t\t$lat = get_metadata( $meta_type, $object_id, 'geo_latitude', true );\r\n\t\t\tif ( empty( $lat ) )\r\n\t\t\t\treturn;\r\n\t\t\t$location['lat'] = $lat;\r\n\r\n\t\t} else if ( in_array( $meta_key, $import_custom_keys ) ) {\r\n\r\n\t\t\t$lat_lng = preg_split( '/\\s*[, ]\\s*/', trim( $meta_value ) );\r\n\t\t\tif ( count( $lat_lng ) == 2 and is_numeric( $lat_lng[0] ) and is_numeric( $lat_lng[1] ) ) {\r\n\t\t\t\t$location['lat'] = $lat_lng[0];\r\n\t\t\t\t$location['lng'] = $lat_lng[1];\r\n\t\t\t} else if ( !empty( $meta_value ) ) {\r\n\t\t\t\t$geocode_values = array();\r\n\t\t\t\tforeach( $import_custom_keys as $import_custom_key ) {\r\n\t\t\t\t\tif ( $meta_key == $import_custom_key ) {\r\n\t\t\t\t\t\t$geocode_values[] = $meta_value;\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// All keys must have a value - do nothing if not\r\n\t\t\t\t\t\tif ( !metadata_exists( $meta_type, $object_id, $import_custom_key ) )\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t$geocode_values[] = get_metadata( $meta_type, $object_id, $import_custom_key, true );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$location = self::blank_location( ARRAY_A );\r\n\t\t\t\tself::geocode( implode( ',', $geocode_values ), $location );\r\n\t\t\t\tif ( self::$geocode_error ) {\r\n\t\t\t\t\tupdate_metadata( $meta_type, $object_id, 'geocoding_error', self::$geocode_error->get_error_message() );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ( $is_copy_geodata_on ) {\r\n\t\t\t\t\t$copy_imported_geodata = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Do nothing if the location already exists\r\n\t\tif ( !empty( $existing_location ) ) {\r\n\t\t\t$epsilon = 0.00001;\r\n\t\t\tif ( abs( $location['lat'] - $existing_location->lat ) < $epsilon and abs( $location['lng'] - $existing_location->lng ) < $epsilon )\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Save the location, attempt reverse geocoding\r\n\t\tself::remove_geodata_sync_hooks();\r\n\t\t// Use geo date if it exists\r\n\t\t$geo_date = get_metadata( $meta_type, $object_id, 'geo_date', true );\r\n\t\t$location_id = self::set_object_location( $meta_type, $object_id, $location, null, $geo_date );\r\n\t\tif ( $copy_imported_geodata ) {\r\n\t\t\tself::copy_to_geodata( $meta_type, $object_id, $geo_date, $location_id );\r\n\t\t}\r\n\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Update object geodata if needed.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param string $meta_type 'post','user','comment'\r\n\t * @param int $object_id\r\n\t * @param string $geo_date\r\n\t * @param int $location_id The location to copy from.\r\n\t */\r\n\tpublic static function copy_to_geodata( $meta_type, $object_id, $geo_date, $location_id ) {\r\n\r\n\t\t$geo_latitude = get_metadata( $meta_type, $object_id, 'geo_latitude', true );\r\n\t\t$geo_longitude = get_metadata( $meta_type, $object_id, 'geo_longitude', true );\r\n\t\t$existing_object_location = self::get_object_location( $meta_type, $object_id );\r\n\r\n\t\t// Do nothing if the geodata already exists\r\n\t\tif ( $geo_latitude and $geo_longitude ) {\r\n\t\t\t$epsilon = 0.00001;\r\n\t\t\tif ( abs( $geo_latitude - $existing_object_location->lat ) < $epsilon and abs( $geo_longitude - $existing_object_location->lng ) < $epsilon )\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tself::remove_geodata_sync_hooks();\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_latitude', $existing_object_location->lat );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_longitude', $existing_object_location->lng );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_address', $existing_object_location->address );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_date', $existing_object_location->geo_date );\r\n\t\tself::$copied_to_geodata[$meta_type . '-' . $object_id] = true;\r\n\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Set the installed database version.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param string $new_version \r\n\t */\r\n\tprivate static function set_installed_version( $new_version ) {\r\n\t\tself::$installed_version = $new_version;\r\n\t\tupdate_option( 'geo_mashup_db_version', $new_version );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the installed database version.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @return string The installed database version.\r\n\t */\r\n\tpublic static function installed_version() {\r\n\r\n\t\tif ( is_null( self::$installed_version ) ) {\r\n\t\t\tself::$installed_version = get_option( 'geo_mashup_db_version' );\r\n\t\t}\r\n\t\treturn self::$installed_version;\r\n\t}\r\n\r\n\t/**\r\n\t * Get or set storage information for an object name.\r\n\t *\r\n\t * Potentially you could add storage information for a new kind of object:\r\n\t * <code>\r\n\t * GeoMashupDB::object_storage( 'foo', array(\r\n\t * \t'table' => $wpdb->prefix . 'foos',\r\n\t * \t'id_column' => 'foo_id',\r\n\t * \t'label_column' => 'foo_display_name',\r\n\t * \t'sort' => 'foo_order ASC' )\r\n\t * ); \r\n\t * </code>\r\n\t * Would add the necessary information for a custom table of foo objects. By convention the\r\n\t * object name is the singular form of the table name without a prefix.\r\n\t *\r\n\t * @since 1.3\r\n\t * \r\n\t * @param string $object_name A type of object to be stored, default is 'post', 'user', and 'comment'.\r\n\t * @param array $new_storage If provided, adds or replaces the storage information for the object name.\r\n\t * @return array|bool The storage information array, or false if not found.\r\n\t */\r\n\tpublic static function object_storage( $object_name, $new_storage = null ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $objects = null;\r\n\t\t\r\n\t\tif ( is_null( $objects ) ) {\r\n\t\t\t$objects = array( \r\n\t\t\t\t'post' => array( \r\n\t\t\t\t\t'table' => $wpdb->posts, \r\n\t\t\t\t\t'id_column' => 'ID', \r\n\t\t\t\t\t'label_column' => 'post_title', \r\n\t\t\t\t\t'date_column' => 'post_date',\r\n\t\t\t\t\t'sort' => 'post_status ASC, geo_date DESC' ),\r\n\t\t\t\t'user' => array( \r\n\t\t\t\t\t'table' => $wpdb->users, \r\n\t\t\t\t\t'id_column' => 'ID', \r\n\t\t\t\t\t'label_column' => 'display_name',\r\n\t\t\t\t\t'date_column' => 'user_registered',\r\n\t\t\t \t\t'sort' => 'display_name ASC' ),\r\n\t\t\t\t'comment' => array( \r\n\t\t\t\t\t'table' => $wpdb->comments, \r\n\t\t\t\t\t'id_column' => 'comment_ID', \r\n\t\t\t\t\t'label_column' => 'comment_author',\r\n\t\t\t\t\t'date_column' => 'comment_date',\r\n\t\t\t \t\t'sort' => 'comment_date DESC'\t) \r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( !empty( $new_storage ) ) {\r\n\t\t\t$objects[$object_name] = $new_storage;\r\n\t\t} \r\n\t\treturn ( isset( $objects[$object_name] ) ) ? $objects[$object_name] : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a conventional object name given a table name.\r\n\t *\r\n\t * @since 1.7\r\n\t *\r\n\t * @param string $table\r\n\t * @return string\r\n\t */\r\n\tpublic static function table_to_object_name( $table ) {\r\n\t\tglobal $wpdb;\r\n\t\t$object_name = str_replace( $wpdb->prefix, '', $table );\r\n\t\tif ( 's' === substr( $object_name, -1 ) ) {\r\n\t\t\t$object_name = substr( $object_name, 0, strlen( $object_name ) - 1 );\r\n\t\t}\r\n\t\treturn $object_name;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle joining of WordPress queries with Geo Mashup tables.\r\n\t * \r\n\t * Use the public wrapper GeoMashup::join_post_queries()\r\n\t * \r\n\t * @since 1.3\r\n\t * @deprecated Use the geo_mashup_query query var\r\n\t *\r\n\t * @param bool $new_value If provided, replaces the current active state.\r\n\t * @return bool The current state.\r\n\t */\r\n\tpublic static function join_post_queries( $new_value = null) {\r\n\t\tstatic $active = null;\r\n\r\n\t\tif ( is_bool( $new_value ) ) {\r\n\t\t\t_deprecated_function( __METHOD__, '1.7', 'the geo_mashup_query query var' );\r\n\t\t\t$active = $new_value;\r\n\t\t}\r\n\r\n\t\treturn $active;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to add Geo Mashup public query variables.\r\n\t *\r\n\t * query_vars {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by Wordpress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function query_vars( $public_query_vars ) {\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$public_query_vars[] = 'geo_mashup_date';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_saved_name';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_country_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_postal_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_admin_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_locality';\r\n\t\t}\r\n\t\treturn $public_query_vars;\r\n\t}\r\n\r\n\t/**\r\n\t * Set or get custom data associated with a WP_Query object.\r\n\t *\r\n\t * @since 1.7\r\n\t *\r\n\t * @param WP_Query $query\r\n\t * @param string $key Optional - return all data for the query if missing.\r\n\t * @param mixed $value Optional - set or overwrite data for the key if present.\r\n\t * @return mixed Extension data if present.\r\n\t */\r\n\tprivate static function query_extension( $query, $key = null, $value = null ) {\r\n\t\tstatic $extensions = array();\r\n\r\n\t\t$hash = spl_object_hash( $query );\r\n\r\n\t\tif ( is_null( $key ) )\r\n\t\t\treturn $extensions;\r\n\r\n\t\tif ( !isset( $extensions[$hash] ) )\r\n\t\t\t$extensions[$hash] = array();\r\n\r\n\t\tif ( !is_null( $value ) )\r\n\t\t\t$extensions[$hash][$key] = $value;\r\n\t\telse if ( !isset( $extensions[$hash][$key] ) )\r\n\t\t\treturn null;\r\n\r\n\t\treturn $extensions[$hash][$key];\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to capture custom orderby field before it is removed.\r\n\t *\r\n\t * parse_query {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t * @access private\r\n\t * @static\r\n\t */\r\n\tpublic static function parse_query( $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( !self::join_post_queries() )\r\n\t\t\treturn;\r\n\r\n\t\t// Check for geo mashup fields in the orderby before they are removed as invalid\r\n\t\tswitch ( $query->query_vars['orderby'] ) {\r\n\t\t\tcase 'geo_mashup_date':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_location_relationships.geo_date' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_locality':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.locality_name' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_saved_name':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.saved_name' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_country_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.country_code' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_admin_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.admin_code' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_postal_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.postal_code' );\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to add Geo Mashup fields to WordPress post queries.\r\n\t *\r\n\t * posts_fields {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_fields( $fields, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$fields .= ',' . $wpdb->prefix . 'geo_mashup_location_relationships.geo_date' .\r\n\t\t\t\t',' . $wpdb->prefix . 'geo_mashup_locations.*';\r\n\t\t}\r\n\r\n\t\treturn $fields;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to join Geo Mashup tables to WordPress post queries.\r\n\t * \r\n\t * posts_join {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_join( $join, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$gmlr = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t\t$gml = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t\t$join .= \" INNER JOIN $gmlr ON ($gmlr.object_name = 'post' AND $gmlr.object_id = $wpdb->posts.ID)\" .\r\n\t\t\t\t\" INNER JOIN $gml ON ($gml.id = $gmlr.location_id) \";\r\n\t\t}\r\n\r\n\t\treturn $join;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to incorporate geo mashup query vars in WordPress post queries.\r\n\t *\r\n\t * posts_where {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_where( $where, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( !self::join_post_queries() )\r\n\t\t\treturn $where;\r\n\r\n\t\t$gmlr = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t$gml = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$geo_date = get_query_var( 'geo_mashup_date' );\r\n\t\tif ( $geo_date ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gmlr.geo_date = %s \", $geo_date );\r\n\t\t}\r\n\t\t$saved_name = get_query_var( 'geo_mashup_saved_name' );\r\n\t\tif ( $saved_name ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.saved_name = %s \", $saved_name );\r\n\t\t}\r\n\t\t$locality = get_query_var( 'geo_mashup_locality' );\r\n\t\tif ( $locality ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.locality_name = %s \", $locality );\r\n\t\t}\r\n\t\t$country_code = get_query_var( 'geo_mashup_country_code' );\r\n\t\tif ( $country_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.country_code = %s \", $country_code );\r\n\t\t}\r\n\t\t$admin_code = get_query_var( 'geo_mashup_admin_code' );\r\n\t\tif ( $admin_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.admin_code = %s \", $admin_code );\r\n\t\t}\r\n\t\t$postal_code = get_query_var( 'geo_mashup_postal_code' );\r\n\t\tif ( $postal_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.postal_code = %s \", $postal_code );\r\n\t\t}\r\n\r\n\t\treturn $where;\r\n\t}\r\n\r\n\t/**\r\n\t * Append to the activation log.\r\n\t * \r\n\t * Add a message and optionally write the activation log.\r\n\t * Needs to be written before the end of the request or it will not be saved.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $message The message to append.\r\n\t * @param boolean $write Whether to save the log.\r\n\t * @return string The current log.\r\n\t */\r\n\tpublic static function activation_log( $message = null, $write = false ) {\r\n\t\tstatic $log = null;\r\n\r\n\t\tif ( is_null( $log ) ) {\r\n\t\t\t$log = get_option( 'geo_mashup_activation_log' );\r\n\t\t}\r\n\t\tif ( ! is_null( $message ) ) {\r\n\t\t\t$log .= \"\\n\" . $message;\r\n\t\t}\r\n\t\tif ( $write ) {\r\n\t\t\tupdate_option( 'geo_mashup_activation_log', $log );\r\n\t\t}\r\n\t\treturn $log;\r\n\t}\r\n\r\n\t/**\r\n\t * Install or update Geo Mashup tables.\r\n\t *\r\n\t * @uses GeoMashupDB::activation_log()\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function install() {\r\n\t\tglobal $wpdb, $geo_mashup_options;\r\n\r\n\t\tself::activation_log( date( 'r' ) . ' ' . __( 'Activating Geo Mashup', 'GeoMashup' ) );\r\n\t\t$location_table_name = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$relationships_table_name = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t$administrative_names_table_name = $wpdb->prefix . 'geo_mashup_administrative_names';\r\n\r\n\t\t$charset_collate = '';\r\n\r\n\t\tif ( ! empty($wpdb->charset) )\r\n\t\t\t$charset_collate = \"DEFAULT CHARACTER SET $wpdb->charset\";\r\n\t\tif ( ! empty($wpdb->collate) )\r\n\t\t\t$charset_collate .= \" COLLATE $wpdb->collate\";\r\n\r\n\t\tif ( self::installed_version() != GEO_MASHUP_DB_VERSION ) {\r\n\t\t\t$sql = \"\r\n\t\t\t\tCREATE TABLE $location_table_name (\r\n\t\t\t\t\tid MEDIUMINT(9) NOT NULL AUTO_INCREMENT,\r\n\t\t\t\t\tlat FLOAT(11,7) NOT NULL,\r\n\t\t\t\t\tlng FLOAT(11,7) NOT NULL,\r\n\t\t\t\t\taddress TINYTEXT NULL,\r\n\t\t\t\t\tsaved_name VARCHAR(100) NULL,\r\n\t\t\t\t\tgeoname TINYTEXT NULL, \r\n\t\t\t\t\tpostal_code TINYTEXT NULL,\r\n\t\t\t\t\tcountry_code VARCHAR(2) NULL,\r\n\t\t\t\t\tadmin_code VARCHAR(20) NULL,\r\n\t\t\t\t\tsub_admin_code VARCHAR(80) NULL,\r\n\t\t\t\t\tlocality_name TINYTEXT NULL,\r\n\t\t\t\t\tPRIMARY KEY  (id),\r\n\t\t\t\t\tUNIQUE KEY saved_name (saved_name),\r\n\t\t\t\t\tUNIQUE KEY latlng (lat,lng),\r\n\t\t\t\t\tKEY lat (lat),\r\n\t\t\t\t\tKEY lng (lng)\r\n\t\t\t\t) $charset_collate;\r\n\t\t\t\tCREATE TABLE $relationships_table_name (\r\n\t\t\t\t\tobject_name VARCHAR(80) NOT NULL,\r\n\t\t\t\t\tobject_id BIGINT(20) NOT NULL,\r\n\t\t\t\t\tlocation_id MEDIUMINT(9) NOT NULL,\r\n\t\t\t\t\tgeo_date DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n\t\t\t\t\tPRIMARY KEY  (object_name,object_id,location_id),\r\n\t\t\t\t\tKEY object_name (object_name,object_id),\r\n\t\t\t\t\tKEY object_date_key (object_name,geo_date)\r\n\t\t\t\t) $charset_collate;\r\n\t\t\t\tCREATE TABLE $administrative_names_table_name (\r\n\t\t\t\t\tcountry_code VARCHAR(2) NOT NULL,\r\n\t\t\t\t\tadmin_code VARCHAR(20) NOT NULL,\r\n\t\t\t\t\tisolanguage VARCHAR(7) NOT NULL,\r\n\t\t\t\t\tgeoname_id MEDIUMINT(9) NULL,\r\n\t\t\t\t\tname VARCHAR(200) NOT NULL,\r\n\t\t\t\t\tPRIMARY KEY  (country_code,admin_code,isolanguage)\r\n\t\t\t\t) $charset_collate;\";\r\n\t\t\trequire_once( ABSPATH . 'wp-admin/includes/upgrade.php' );\r\n\t\t\t// Capture error messages - some are ok\r\n\t\t\t$old_show_errors = $wpdb->show_errors( true );\r\n\t\t\tob_start();\r\n\t\t\tdbDelta( $sql );\r\n\t\t\t$errors = ob_get_contents();\r\n\t\t\tob_end_clean();\r\n\t\t\t$have_create_errors = preg_match( '/^(CREATE|INSERT|UPDATE)/m', $errors );\r\n\t\t\t$have_bad_alter_errors = preg_match( '/^ALTER TABLE.*ADD (?!KEY|PRIMARY KEY|UNIQUE KEY)/m', $errors ); \r\n\t\t\t$have_bad_errors = $have_create_errors || $have_bad_alter_errors;\r\n\t\t\tif ( $errors && $have_bad_errors ) {\r\n\t\t\t\t// Any errors other than duplicate or multiple primary key could be trouble\r\n\t\t\t\tself::activation_log( $errors, true );\r\n\t\t\t} else {\r\n\t\t\t\tself::convert_prior_locations();\r\n\t\t\t\tself::set_installed_version( GEO_MASHUP_DB_VERSION );\r\n\t\t\t}\r\n\t\t\t$wpdb->show_errors( $old_show_errors );\r\n\t\t}\r\n\t\tif ( self::installed_version() == GEO_MASHUP_DB_VERSION ) {\r\n\t\t\tif ( 'true' == $geo_mashup_options->get( 'overall', 'copy_geodata' ) )\r\n\t\t\t\tself::duplicate_geodata();\r\n\t\t\tself::activation_log( __( 'Geo Mashup database is up to date.', 'GeoMashup' ), true );\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tself::activation_log( __( 'Geo Mashup database upgrade failed.', 'GeoMashup' ), true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Try to get a language-sensitive place administrative name.\r\n\t *\r\n\t * First look in the names cached in the database, then query geonames.org for it.\r\n\t * If a name can't be found for the requested language, a default name is returned,\r\n\t * usually in the local language. If nothing can be found, returns NULL.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $country_code Two-character ISO country code.\r\n\t * @param string $admin_code Code for the administrative area within the country, or NULL to get the country name.\r\n\t * @param string $language Language code, defaults to the WordPress locale language.\r\n\t * @return string|null Place name in the appropriate language, or if not available in the default language.\r\n\t */\r\n\tpublic static function get_administrative_name( $country_code, $admin_code = null, $language = '' ) {\r\n\t\t$language = self::primary_language_code( $language );\r\n\t\t$name = GeoMashupDB::get_cached_administrative_name( $country_code, $admin_code, $language );\r\n\t\tif ( empty( $name ) ) {\r\n\t\t\t// Look it up with Geonames\r\n\t\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\t\t\t$geocoder = new GeoMashupGeonamesGeocoder();\r\n\t\t\t$name = $geocoder->get_administrative_name( $country_code, $admin_code );\r\n\t\t\tif ( is_wp_error( $name ) )\r\n\t\t\t\t$name = null;\r\n\t\t}\r\n\t\treturn $name;\r\n\t}\r\n\r\n\t/** \r\n\t * Look in the database for a cached administrative name. \r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $country_code Two-character ISO country code.\r\n\t * @param string $admin_code Code for the administrative area within the country, or NULL to get the country name.\r\n\t * @param string $language Language code, defaults to the WordPress locale language.\r\n\t * @return string|null Place name or NULL.\r\n\t */\r\n\tprivate static function get_cached_administrative_name( $country_code, $admin_code = '', $language = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$language = self::primary_language_code( $language );\r\n\t\t$select_string = \"SELECT name\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_administrative_names\r\n\t\t\tWHERE \" . \r\n\t\t\t$wpdb->prepare( 'isolanguage = %s AND country_code = %s AND admin_code = %s', $language, $country_code, $admin_code ); \r\n\r\n\t\treturn $wpdb->get_var( $select_string );\r\n\t}\r\n\r\n\t/** \r\n\t * Trim a locale or browser accepted languages string down to the 2 or 3 character\r\n\t * primary language code.\r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $language Local or language code string, NULL for blog locale.\r\n\t * @return string Two (rarely three?) character language code.\r\n\t */\r\n\tpublic static function primary_language_code( $language = null ) {\r\n\t\tif ( empty( $language ) ) {\r\n\t\t\t$language = get_locale( );\r\n\t\t}\r\n\t\tif ( strlen( $language ) > 3 ) {\r\n\t\t\tif ( ctype_alpha( $language[2] ) ) {\r\n\t\t\t\t$language = substr( $language, 0, 3 );\r\n\t\t\t} else {\r\n\t\t\t\t$language = substr( $language, 0, 2 );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $language;\r\n\t}\r\n\r\n\t/**\r\n\t * Try to fill in coordinates and other fields of a location from a textual\r\n\t * location search.\r\n\t *\r\n\t * Multiple geocoding services may be used. Google services are only used\r\n\t * if the default map provider is Google.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param mixed $query The search string.\r\n\t * @param array $location The location array to geocode, modified.\r\n\t * @param string $language \r\n\t * @return bool Whether a lookup succeeded.\r\n\t */\r\n\tpublic static function geocode( $query, &$location, $language = '' ) {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\tif ( empty( $location ) ) {\r\n\t\t\t$location = self::blank_location();\r\n\t\t} else if ( !is_array( $location ) and !is_object( $location ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$status = false;\r\n\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\r\n\t\t// Try GeoCoding services (google, nominatim, geonames) until one gives an answer\r\n\t\t$results = array();\r\n\t\tif ( $geo_mashup_options->get( 'overall', 'google_server_key' ) ) {\r\n\t\t\t// Only try the google service if a google server key is present\r\n\t\t\t$google_geocoder = new GeoMashupGoogleGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $google_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t\t$nominatim_geocoder = new GeoMashupNominatimGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $nominatim_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t\t$geonames_geocoder = new GeoMashupGeonamesGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $geonames_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t} else {\r\n\t\t\tself::fill_empty_location_fields( $location, $results[0] );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\t\treturn $status;\r\n\t}\r\n\r\n\t/**\r\n\t * Check a location for empty fields.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param array $location The location to check.\r\n\t * @param array $fields The fields to check.\r\n\t * @return bool Whether any of the specified fields are empty.\r\n\t */\r\n\tpublic static function are_any_location_fields_empty( $location, $fields = null ) {\r\n\t\tif ( ! is_array( $location ) ) {\r\n\t\t\t$location = (array)$location;\r\n\t\t}\r\n\t\tif ( is_null( $fields ) ) {\r\n\t\t\t$fields = array_keys( $location );\r\n\t\t}\r\n\t\tforeach( $fields as $field ) {\r\n\t\t\tif ( empty( $location[$field] ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copy empty fields in one location array from another.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param array $primary Location to copy to, modified.\r\n\t * @param array $secondary Location to copy from.\r\n\t */\r\n\tprivate static function fill_empty_location_fields( &$primary, $secondary ) {\r\n\t\t$secondary = (array)$secondary;\r\n\t\tforeach( $primary as $field => $value ) {\r\n\t\t\tif ( empty( $value ) and !empty( $secondary[$field] ) ) {\r\n\t\t\t\tif ( is_object( $primary ) )\r\n\t\t\t\t\t$primary->$field = $secondary[$field];\r\n\t\t\t\telse\r\n\t\t\t\t\t$primary[$field] = $secondary[$field];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add missing location fields, and update country and admin codes with\r\n\t * authoritative Geonames values.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param array $location The location to geocode, modified.\r\n\t * @param string $language Optional ISO language code.\r\n\t * @return bool Success.\r\n\t */\r\n\tprivate static function reverse_geocode_location( &$location, $language = '' ) {\r\n\r\n\t\t// Coordinates are required\r\n\t\tif ( self::are_any_location_fields_empty( $location, array( 'lat', 'lng' ) ) ) \r\n\t\t\treturn false;\r\n\r\n\t\t// Don't bother unless there are missing geocodable fields\r\n\t\t$geocodable_fields = array( 'country_code', 'admin_code', 'address', 'locality_name', 'postal_code' );\r\n\t\t$have_empties = self::are_any_location_fields_empty( $location, $geocodable_fields );\r\n\t\tif ( ! $have_empties ) \r\n\t\t\treturn false;\r\n\r\n\t\t$status = false;\r\n\r\n\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\r\n\t\t$geonames_geocoder = new GeoMashupGeonamesGeocoder();\r\n\t\t$geonames_results = $geonames_geocoder->reverse_geocode( $location['lat'], $location['lng'] );\r\n\t\tif ( is_wp_error( $geonames_results ) or empty( $geonames_results ) ) {\r\n\t\t\tself::$geocode_error = $geonames_results;\r\n\t\t} else {\r\n\t\t\tif ( !empty( $geonames_results[0]->admin_code ) )\r\n\t\t\t\t$location['admin_code'] = $geonames_results[0]->admin_code;\r\n\t\t\tif ( !empty( $geonames_results[0]->country_code ) )\r\n\t\t\t\t$location['country_code'] = $geonames_results[0]->country_code;\r\n\t\t\tself::fill_empty_location_fields( $location, (array)($geonames_results[0]) );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\r\n\t\t$have_empties = self::are_any_location_fields_empty( $location, $geocodable_fields );\r\n\t\t$alternate_geocoder = self::make_alternate_reverse_geocoder();\r\n\t\tif ( $have_empties and $alternate_geocoder ) {\r\n\t\t\t$next_results = $alternate_geocoder->reverse_geocode( $location['lat'], $location['lng'] );\r\n\t\t\tif ( is_wp_error( $next_results ) or empty( $next_results ) )\r\n\t\t\t\tself::$geocode_error = $next_results;\r\n\t\t\telse\r\n\t\t\t\tself::fill_empty_location_fields( $location, (array)($next_results[0]) );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\t\treturn $status;\r\n\t}\r\n\r\n\tprivate static function make_alternate_reverse_geocoder() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\t// Choose a geocoding service based on the default API in use\r\n\t\tif ( $geo_mashup_options->get( 'overall', 'google_server_key' ) ) {\r\n\t\t\treturn new GeoMashupGoogleGeocoder();\r\n\t\t} else if ( 'openlayers' == $geo_mashup_options->get( 'overall', 'map_api' ) ) {\r\n\t\t\treturn new GeoMashupNominatimGeocoder();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Try to reverse-geocode all locations with relevant missing data.\r\n\t *\r\n\t * Used by the options page. Tries to comply with the PHP maximum execution \r\n\t * time, and delay requests if Google sends a 604.\r\n\t * \r\n\t * @since 1.3\r\n\t * @return string An HTML log of the actions performed.\r\n\t */\r\n\tpublic static function bulk_reverse_geocode() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$log = date( 'r' ) . '<br/>';\r\n\t\t$select_string = 'SELECT * ' .\r\n\t\t\t\"FROM {$wpdb->prefix}geo_mashup_locations \". \r\n\t\t\t\"WHERE country_code IS NULL \".\r\n\t\t\t\"OR admin_code IS NULL \" .\r\n\t\t\t\"OR address IS NULL \" .\r\n\t\t\t\"OR locality_name IS NULL \" .\r\n\t\t\t\"OR postal_code IS NULL \";\r\n\t\t$locations = $wpdb->get_results( $select_string, ARRAY_A );\r\n\t\tif ( empty( $locations ) ) {\r\n\t\t\t$log .= __( 'No locations found with missing address fields.', 'GeoMashup' ) . '<br/>';\r\n\t\t\treturn $log;\r\n\t\t}\r\n\t\t$log .= __( 'Locations to geocode: ', 'GeoMashup' ) . count( $locations ) . '<br />';\r\n\t\t$time_limit = ini_get( 'max_execution_time' );\r\n\t\tif ( empty( $time_limit ) || !is_numeric( $time_limit ) ) {\r\n\t\t\t$time_limit = 270;\r\n\t\t} else {\r\n\t\t\t$time_limit -= ( $time_limit / 10 );\r\n\t\t}\r\n\t\t$delay = 100000; // one tenth of a second\r\n\t\t$log .= __( 'Time limit: ', 'GeoMashup' ) . $time_limit . '<br />';\r\n\t\t$start_time = time();\r\n\t\tforeach ( $locations as $location ) {\r\n\t\t\t$set_id = self::set_location( $location, true );\r\n\t\t\tif ( is_wp_error( $set_id ) ) {\r\n\t\t\t\t$log .= 'error: ' . $set_id->get_error_message() . ' ';\r\n\t\t\t} else {\r\n\t\t\t\t$log .= 'id: ' . $location['id'] . ' '; \r\n\t\t\t}\r\n\t\t\tif ( !empty( self::$geocode_error ) ) {\r\n\t\t\t\t$delay += 100000;\r\n\t\t\t\t$log .= __( 'Lookup error:', 'GeoMashup' ) . ' ' . self::$geocode_error->get_error_message() .\r\n\t\t\t\t\t\t' ' . __( 'Increasing delay to', 'GeoMashup' ) . ' ' . ( $delay / 1000000 ) .\r\n\t\t\t\t\t\t'<br/>';\r\n\t\t\t} else if ( isset( $location['address'] ) ) {\r\n\t\t\t\t$log .= __( 'address', 'GeoMashup' ) . ': ' . $location['address'];\r\n\t\t\t\tif ( isset( $location['postal_code'] ) ) \r\n\t\t\t\t\t$log .= ' ' .  __( 'postal code', 'GeoMashup' ) . ': ' . $location['postal_code'];\r\n\t\t\t\t$log .= '<br />';\r\n\t\t\t} else {\r\n\t\t\t\t$log .= '(' .$location['lat'] . ', ' . $location['lng'] . ') ' . \r\n\t\t\t\t\t\t__( 'No address info found.', 'GeoMashup' ) .  '<br/>';\r\n\t\t\t}\r\n\t\t\tif ( time() - $start_time > $time_limit ) {\r\n\t\t\t\t$log .= __( 'Time limit exceeded, retry to continue.', 'GeoMashup' ) . '<br />';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tusleep( $delay );\r\n\t\t}\r\n\t\treturn $log;\r\n\t}\r\n\t\t\t\r\n\t/**\r\n\t * Store an administrative name in the database to prevent future web service lookups.\r\n\t * \r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $country_code \r\n\t * @param string $admin_code \r\n\t * @param string $isolanguage \r\n\t * @param string $name \r\n\t * @param string $geoname_id \r\n\t * @return int Rows affected.\r\n\t */\r\n\tpublic static function cache_administrative_name( $country_code, $admin_code, $isolanguage, $name, $geoname_id = null ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$table_name = $wpdb->prefix . 'geo_mashup_administrative_names';\r\n\t\t$cached_name = self::get_cached_administrative_name( $country_code, $admin_code, $isolanguage );\r\n\t\t$rows = 0;\r\n\t\tif ( empty( $cached_name ) ) {\r\n\t\t\t$rows = $wpdb->insert( $table_name, compact( 'country_code', 'admin_code', 'isolanguage', 'name', 'geoname_id' ) );\r\n\t\t} else if ( $cached_name != $name ) {\r\n\t\t\t$rows = $wpdb->update( $table_name, compact( 'name' ), compact( 'country_code', 'admin_code', 'name' ) );\r\n\t\t}\r\n\t\treturn $rows;\r\n\t}\r\n\r\n\t/**\r\n\t * Copy missing geo data to and from the standard location (http://codex.wordpress.org/Geodata)\r\n\t * for posts, users, and comments.\r\n\t *\r\n\t * @since 1.4\r\n\t * @return bool True if no more orphan locations can be found.\r\n\t */\r\n\tpublic static function duplicate_geodata() {\r\n\t\tself::duplicate_geodata_type( 'post' );\r\n\t\tself::duplicate_geodata_type( 'user' );\r\n\t\tself::duplicate_geodata_type( 'comment' );\r\n\t\tself::activation_log( __( 'Geodata duplication done.', 'GeoMashup' ), true );\r\n\t}\r\n\r\n\t/**\r\n\t * Copy missing geo data to and from the standard location (http://codex.wordpress.org/Geodata)\r\n\t * for a specific object type.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @global object $wpdb\r\n\t * @param string $meta_type One of the WP meta types, 'post', 'user', 'comment'\r\n\t * @return bool True if no more orphan locations can be found.\r\n\t */\r\n\tprivate static function duplicate_geodata_type( $meta_type ) {\r\n\t\tglobal $wpdb;\r\n\t\t$object_storage = self::object_storage( $meta_type );\r\n\t\t$meta_type = esc_sql( $meta_type );\r\n\t\t$meta_type_id = $meta_type . '_id';\r\n\t\t$meta_table = $meta_type . 'meta';\r\n\t\t// Copy from meta table to geo mashup\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$meta_select = \"SELECT pmlat.{$meta_type_id} as object_id, pmlat.meta_value as lat, pmlng.meta_value as lng, pmaddr.meta_value as address, o.{$object_storage['date_column']} as object_date\r\n\t\t\tFROM {$object_storage['table']} o\r\n\t\t\tINNER JOIN {$wpdb->$meta_table} pmlat ON pmlat.{$meta_type_id} = o.{$object_storage['id_column']} AND pmlat.meta_key = 'geo_latitude'\r\n\t\t\tINNER JOIN {$wpdb->$meta_table} pmlng ON pmlng.{$meta_type_id} = o.{$object_storage['id_column']} AND pmlng.meta_key = 'geo_longitude'\r\n\t\t\tLEFT JOIN {$wpdb->$meta_table} pmaddr ON pmaddr.{$meta_type_id} = o.{$object_storage['id_column']} AND pmaddr.meta_key = 'geo_address'\r\n\t\t\tLEFT JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = o.{$object_storage['id_column']} AND gmlr.object_name = '{$meta_type}'\r\n\t\t\tWHERE pmlat.meta_key = 'geo_latitude' \r\n\t\t\tAND gmlr.object_id IS NULL\";\r\n\r\n\t\t$wpdb->query( $meta_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_metadata = $wpdb->last_result;\r\n\t\tif ( $unconverted_metadata ) {\r\n\t\t\t$msg = sprintf( __( 'Copying missing %s geodata from WordPress', 'GeoMashup' ), $meta_type );\r\n\t\t\tself::activation_log( $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_metadata as $objectmeta ) {\r\n\t\t\t\t$object_id = $objectmeta->object_id;\r\n\t\t\t\t$location = array( 'lat' => trim( $objectmeta->lat ), 'lng' => trim( $objectmeta->lng ), 'address' => trim( $objectmeta->address ) );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 10 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_object_location( $meta_type, $object_id, $location, $do_lookups, $objectmeta->object_date );\r\n\t\t\t\tif ( !is_wp_error( $set_id ) ) {\r\n\t\t\t\t\tself::activation_log( 'OK: ' . $meta_type . ' id ' . $object_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to duplicate WordPress location (%s). You can edit %s with id %s ' .\r\n\t\t\t\t\t\t'to update the location, and try again.', 'GeoMashup' ),\r\n\t\t\t\t\t\t$objectmeta->lat . ',' . $objectmeta->lng, $meta_type, $object_id );\r\n\t\t\t\t\t$msg .= ' (' . $set_id->get_error_message() . ')';\r\n\t\t\t\t\tself::activation_log( $msg, true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy from Geo Mashup to missing object meta\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$geomashup_select = \"SELECT gmlr.object_id, gml.lat, gml.lng, gml.address\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\r\n\t\t\tLEFT JOIN {$wpdb->$meta_table} pmlat ON pmlat.{$meta_type_id} = gmlr.object_id AND pmlat.meta_key = 'geo_latitude'\r\n\t\t\tWHERE gmlr.object_name = '{$meta_type}'\r\n\t\t\tAND pmlat.{$meta_type_id} IS NULL\";\r\n\r\n\t\t$wpdb->query( $geomashup_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error, true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_geomashup_objects = $wpdb->last_result;\r\n\t\tif ( $unconverted_geomashup_objects ) {\r\n\t\t\t$msg = sprintf( __( 'Copying missing %s geodata from Geo Mashup', 'GeoMashup' ), $meta_type );\r\n\t\t\tself::activation_log( date( 'r' ) . ' ' . $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_geomashup_objects as $location ) {\r\n\t\t\t\t$lat_success = update_metadata( $meta_type, $location->object_id, 'geo_latitude', $location->lat );\r\n\t\t\t\t$lng_success = update_metadata( $meta_type, $location->object_id, 'geo_longitude', $location->lng );\r\n\t\t\t\tif ( ! empty( $location->address ) ) {\r\n\t\t\t\t\tupdate_metadata( $meta_type, $location->object_id, 'geo_address', $location->address );\r\n\t\t\t\t}\r\n\t\t\t\tif ( $lat_success and $lng_success ) {\r\n\t\t\t\t\tself::activation_log( 'OK: ' . $meta_type . ' id ' . $location->object_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to duplicate Geo Mashup location for %s (%s).', 'GeoMashup' ), $meta_type, $location->object_id );\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$wpdb->query( $meta_select );\r\n\r\n\t\treturn ( empty( $wpdb->last_result ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Convert Geo plugin locations to Geo Mashup format.\r\n\t *\r\n\t * @since 1.2\r\n\t * @return bool True if no more unconverted locations can be found.\r\n\t */\r\n\tprivate static function convert_prior_locations( ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$unconverted_select = \"SELECT pm.post_id, pm.meta_value\r\n\t\t\tFROM {$wpdb->postmeta} pm\r\n\t\t\tLEFT JOIN {$wpdb->postmeta} lpm ON lpm.post_id = pm.post_id \r\n\t\t\tAND lpm.meta_key = '_geo_converted'\r\n\t\t\tLEFT JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = pm.post_id\r\n\t\t\tAND gmlr.object_name = 'post'\r\n\t\t\tWHERE pm.meta_key = '_geo_location' \r\n\t\t\tAND length( pm.meta_value ) > 3\r\n\t\t\tAND pm.meta_value LIKE '%,%'\r\n\t\t\tAND lpm.post_id IS NULL \r\n\t\t\tAND gmlr.object_id IS NULL\";\r\n\r\n\t\t$wpdb->query( $unconverted_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error, true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_metadata = $wpdb->last_result;\r\n\t\tif ( $unconverted_metadata ) {\r\n\t\t\t$msg = __( 'Converting old locations', 'GeoMashup' );\r\n\t\t\tself::activation_log( date( 'r' ) . ' ' . $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_metadata as $postmeta ) {\r\n\t\t\t\t$post_id = $postmeta->post_id;\r\n\t\t\t\tlist( $lat, $lng ) = explode( ',', $postmeta->meta_value );\r\n\t\t\t\t$location = array( 'lat' => trim( $lat ), 'lng' => trim( $lng ) );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 10 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_object_location( 'post', $post_id, $location, $do_lookups );\r\n\t\t\t\tif ( !is_wp_error( $set_id ) ) {\r\n\t\t\t\t\tadd_post_meta( $post_id, '_geo_converted', $wpdb->prefix . 'geo_mashup_locations.id = ' . $set_id );\r\n\t\t\t\t\tself::activation_log( 'OK: post_id ' . $post_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to convert location (%s). You can %s edit the post %s ' .\r\n\t\t\t\t\t\t'to update the location, and try again.', 'GeoMashup' ),\r\n\t\t\t\t\t\t$postmeta->meta_value, '<a href=\"post.php?action=edit&post=' . $post_id . '\">', '</a>');\r\n\t\t\t\t\t$msg .= ' (' . $set_id->get_error_message() . ')';\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$geo_locations = get_option( 'geo_locations' );\r\n\t\tif ( is_array( $geo_locations ) ) {\r\n\t\t\t$msg = __( 'Converting saved locations', 'GeoMashup' );\r\n\t\t\tself::activation_log( $msg );\r\n\t\t\tforeach ( $geo_locations as $saved_name => $coordinates ) {\r\n\t\t\t\tlist( $lat, $lng, $converted ) = explode( ',', $coordinates );\r\n\t\t\t\t$location = array( 'lat' => trim( $lat ), 'lng' => trim( $lng ), 'saved_name' => $saved_name );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 15 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_location( $location, $do_lookups );\r\n\t\t\t\tif ( ! is_wp_error( $set_id ) ) {\r\n\t\t\t\t\t$geo_locations[$saved_name] .= ',' . $wpdb->prefix . 'geo_mashup_locations.id=' . $set_id;\r\n\t\t\t\t\t$msg = __( 'OK: ', 'GeoMashup' ) . $saved_name . '<br/>';\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = $saved_name . ' - ' . \r\n\t\t\t\t\t\tsprintf( __( \"Failed to convert saved location (%s). \" .\r\n\t\t\t\t\t\t\t\"You'll have to save it again, sorry.\", 'GeoMashup' ),\r\n\t\t\t\t\t\t$coordinates );\r\n\t\t\t\t\tself::activation_log( $set_id->get_error_message() );\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete_option( 'geo_locations', $geo_locations );\r\n\t\t}\r\n\r\n\t\t$geo_date_update = \"UPDATE {$wpdb->prefix}geo_mashup_location_relationships gmlr, $wpdb->posts p \" .\r\n\t\t\t\"SET gmlr.geo_date = p.post_date \" .\r\n\t\t\t\"WHERE gmlr.object_name='post' \" .\r\n\t\t\t\"AND gmlr.object_id = p.ID \" .\r\n\t\t\t\"AND gmlr.geo_date = '0000-00-00 00:00:00'\";\r\n\r\n\t\t$geo_date_count = $wpdb->query( $geo_date_update );\r\n\r\n\t\tif ( $geo_date_count === false ) {\r\n\t\t\t$msg = __( 'Failed to initialize geo dates from post dates: ', 'GeoMashup' );\r\n\t\t\t$msg .= $wpdb->last_error;\r\n\t\t} else {\r\n\t\t\t$msg = sprintf( __( 'Initialized %d geo dates from corresponding post dates.', 'GeoMashup' ), $geo_date_count );\r\n\t\t}\r\n\r\n\t\tself::activation_log( $msg, true );\r\n\r\n\t\t$wpdb->query( $unconverted_select );\r\n\r\n\t\treturn ( empty( $wpdb->last_result ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Get a blank location.\r\n\t *\r\n\t * Used to return object fields too - use blank_object_location for that if desired.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @param string $format OBJECT or ARRAY_A\r\n\t * @return array|object Empty location.\r\n\t */\r\n\tpublic static function blank_location( $format = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $blank_location = null;\r\n\t\tif ( is_null( $blank_location ) ) {\r\n\t\t\t$wpdb->query(\"SELECT * FROM {$wpdb->prefix}geo_mashup_locations WHERE 1=2\" );\r\n\t\t\t$col_info = $wpdb->get_col_info();\r\n\t\t\t$blank_location = array();\r\n\t\t\tforeach( $col_info as $col_name ) {\r\n\t\t\t\t$blank_location[$col_name] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $format == OBJECT ) {\r\n\t\t\treturn (object) $blank_location;\r\n\t\t} else {\r\n\t\t\treturn $blank_location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get a blank object location.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $format OBJECT or ARRAY_A\r\n\t * @return array|object Empty object location.\r\n\t */\r\n\tpublic static function blank_object_location( $format = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $blank_object_location = null;\r\n\t\tif ( is_null( $blank_object_location ) ) {\r\n\t\t\t$wpdb->query(\"SELECT * FROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\t\t\tJOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\r\n\t\t\t\t\tWHERE 1=2\" );\r\n\t\t\t$col_info = $wpdb->get_col_info();\r\n\t\t\t$blank_object_location = array();\r\n\t\t\tforeach( $col_info as $col_name ) {\r\n\t\t\t\t$blank_object_location[$col_name] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $format == OBJECT ) {\r\n\t\t\treturn (object) $blank_object_location;\r\n\t\t} else {\r\n\t\t\treturn $blank_object_location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get distinct values of one or more object location fields.\r\n\t *\r\n\t * Can be used to get a list of countries with locations, for example.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @param string $names Comma separated table field names.\r\n\t * @param array $where Associtive array of conditional field names and values.\r\n\t * @return array WP_DB query results.\r\n\t */\r\n\tpublic static function get_distinct_located_values( $names, $where = null ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( is_string( $names ) ) {\r\n\t\t\t$names = preg_split( '/\\s*,\\s*/', $names );\r\n\t\t}\r\n\t\t$wheres = array( );\r\n\t\tforeach( $names as $name ) {\r\n\t\t\t$wheres[] = esc_sql( $name ) . ' IS NOT NULL';\r\n\t\t}\r\n\t\t$names = implode( ',', $names );\r\n\r\n\t\tif ( is_object( $where ) ) {\r\n\t\t\t$where = (array) $where;\r\n\t\t}\r\n\r\n\t\t$select_string = 'SELECT DISTINCT ' . esc_sql( $names ) . \"\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\tJOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\";\r\n\r\n\t\tif ( is_array( $where ) && !empty( $where ) ) {\r\n\t\t\tforeach ( $where as $name => $value ) {\r\n\t\t\t\t$wheres[] = esc_sql( $name ) . ' = \\'' . esc_sql( $value ) .'\\'';\r\n\t\t\t}\r\n\t\t\t$select_string .= ' WHERE ' . implode( ' AND ', $wheres );\r\n\t\t}\r\n\t\t$select_string .= ' ORDER BY ' . esc_sql( $names );\r\n\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the location of a post.\r\n\t *\r\n\t * @since 1.2\r\n\t * @uses GeoMashupDB::get_object_location()\r\n\t * \r\n\t * @param id $post_id \r\n\t * @return object Post location.\r\n\t */\r\n\tpublic static function get_post_location( $post_id ) {\r\n\t\treturn self::get_object_location( 'post', $post_id );\r\n\t}\r\n\r\n\t/**\r\n\t * Format a query result as an object or array.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $obj To be formatted.\r\n\t * @param constant $output Format.\r\n\t * @return object|array Result.\r\n\t */\r\n\tprivate static function translate_object( $obj, $output = OBJECT ) {\r\n\t\tif ( !is_object( $obj ) ) {\r\n\t\t\treturn $obj;\r\n\t\t}\r\n\r\n\t\tif ( $output == OBJECT ) {\r\n\t\t} elseif ( $output == ARRAY_A ) {\r\n\t\t\t$obj = get_object_vars($obj);\r\n\t\t} elseif ( $output == ARRAY_N ) {\r\n\t\t\t$obj = array_values(get_object_vars($obj));\r\n\t\t}\r\n\t\treturn $obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the location of an object.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param int $object_id Object\r\n\t * @param string $output (optional) one of ARRAY_A | ARRAY_N | OBJECT constants.  Return an\r\n\t * \t\tassociative array (column => value, ...), a numerically indexed array (0 => value, ...)\r\n\t * \t\tor an object ( ->column = value ), respectively.\r\n\t * @return object|array Result or null if not found.\r\n\t */\r\n\tpublic static function get_object_location( $object_name, $object_id, $output = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$cache_id = $object_name . '-' . $object_id;\r\n\r\n\t\t$object_location = wp_cache_get( $cache_id, 'geo_mashup_object_locations' );\r\n\t\tif ( !$object_location ) {\r\n\t\t\t$object_store = self::object_storage( $object_name );\r\n\t\t\t$field_string = \"gmlr.object_id, gmlr.geo_date, o.{$object_store['label_column']} as label, gml.*\";\r\n\r\n\t\t\tif ( 'post' == $object_name )\r\n\t\t\t\t$field_string .= ', o.post_author';\r\n\r\n\t\t\t$select_string = \"SELECT {$field_string}\r\n\t\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr \" .\r\n\t\t\t\t$wpdb->prepare( 'ON gmlr.object_name = %s AND gmlr.location_id = gml.id ', $object_name ) .\r\n\t\t\t\t\"INNER JOIN {$object_store['table']} o ON o.{$object_store['id_column']} = gmlr.object_id \" .\r\n\t\t\t\t$wpdb->prepare( 'WHERE gmlr.object_id = %d', $object_id ); \r\n\r\n\t\t\t$object_location = $wpdb->get_row( $select_string );\r\n\t\t\twp_cache_add( $cache_id, $object_location, 'geo_mashup_object_locations' );\r\n\t\t}\r\n\t\treturn self::translate_object( $object_location, $output );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get a location by ID.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param int $location_id\r\n\t * @param string $output (optional) one of ARRAY_A | ARRAY_N | OBJECT constants.  Return an \r\n\t * \t\tassociative array (column => value, ...), a numerically indexed array (0 => value, ...) \r\n\t * \t\tor an object ( ->column = value ), respectively.\r\n\t * @return object|array Result or null if not found.\r\n\t */\r\n\tpublic static function get_location( $location_id, $output = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$location = wp_cache_get( $location_id, 'geo_mashup_locations' );\r\n\t\tif ( !$location ) {\r\n\t\t\t$location = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM {$wpdb->prefix}geo_mashup_locations WHERE id = %d\", $location_id ) );\r\n\t\t\twp_cache_add( $location_id, $location, 'geo_mashup_locations' );\r\n\t\t}\r\n\t\treturn self::translate_object( $location, $output );\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations of posts.\r\n\t * \r\n\t * @since 1.2\r\n\t * @uses GeoMashupDB::get_object_locations()\r\n\t * \r\n\t * @param string $query_args Same as GeoMashupDB::get_object_locations()\r\n\t * @return array Array of matching rows.\r\n\t */\r\n\tpublic static function get_post_locations( $query_args = '' ) {\r\n\t\treturn self::get_object_locations( $query_args );\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations of objects.\r\n\t *\r\n\t * <code>\r\n\t * $results = GeoMashupDB::get_object_locations( array( \r\n\t * \t'object_name' => 'user', \r\n\t * \t'minlat' => 30,\r\n\t * \t'maxlat' => 40, \r\n\t * \t'minlon' => -106, \r\n\t * \t'maxlat' => -103 ) \r\n\t * );\r\n\t * </code>\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $query_args Override default args.\r\n\t * @return array Array of matching rows.\r\n\t */\r\n\tpublic static function get_object_locations( $query_args = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$default_args = array( \r\n\t\t\t'minlat' => null, \r\n\t\t\t'maxlat' => null, \r\n\t\t\t'minlon' => null, \r\n\t\t\t'maxlon' => null,\r\n\t\t\t'radius_km' => null,\r\n\t\t\t'radius_mi' => null,\r\n\t\t\t'map_cat' => null,\r\n\t\t\t'tax_query' => null,\r\n\t\t\t'map_post_type' => 'any',\r\n\t\t\t'object_name' => 'post',\r\n\t\t\t'show_future' => 'false', \r\n\t\t\t'suppress_filters' => false,\r\n\t \t\t'limit' => 0,\r\n\t\t\t'map_offset' => 0,\r\n\t\t);\r\n\t\t$query_args = wp_parse_args( $query_args, $default_args );\r\n\t\t\r\n\t\t// Construct the query \r\n\t\t$object_name = $query_args['object_name'];\r\n\t\t$object_store = self::object_storage( $object_name );\r\n\t\tif ( empty( $object_store ) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Giving tables an alias was a mistake, now filters depend on them\r\n\t\t$field_string = \"gmlr.object_id, gmlr.geo_date, o.{$object_store['label_column']} as label, gml.*\";\r\n\t\t$table_string = \"{$wpdb->prefix}geo_mashup_locations gml \" . \r\n\t\t\t\"INNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr \" .\r\n\t\t\t$wpdb->prepare( 'ON gmlr.object_name = %s AND gmlr.location_id = gml.id ', $object_name ) .\r\n\t\t\t\"INNER JOIN {$object_store['table']} o ON o.{$object_store['id_column']} = gmlr.object_id\";\r\n\t\t$wheres = array( );\r\n\t\t$groupby = '';\r\n\t\t$having = '';\r\n\r\n\t\tif ( 'post' == $object_name ) {\r\n\t\t\t$field_string .= ', o.post_author';\r\n\t\t\tif ( $query_args['show_future'] == 'true' ) {\r\n\t\t\t\t$wheres[] = 'post_status in ( \\'publish\\',\\'future\\' )';\r\n\t\t\t} else if ( $query_args['show_future'] == 'only' ) {\r\n\t\t\t\t$wheres[] = 'post_status = \\'future\\'';\r\n\t\t\t} else {\r\n\t\t\t\t$wheres[] = 'post_status = \\'publish\\'';\r\n\t\t\t}\r\n\r\n\t\t} else if ( 'comment' == $object_name ) {\r\n\t\t\t$wheres[] = 'comment_approved = \\'1\\'';\r\n\t\t}\r\n\r\n\t\t$location_args = wp_array_slice_assoc( $query_args, array_keys( GM_Location_Query::get_defaults() ) );\r\n\t\t$location_query = new GM_Location_Query( $location_args );\r\n\r\n\t\t// Handle inclusion and exclusion of terms\r\n\t\tif ( ! empty( $query_args['tax_query'] ) and is_array( $query_args['tax_query'] ) )\r\n\t\t\t$tax_query = $query_args['tax_query'];\r\n\t\telse\r\n\t\t\t$tax_query = array();\r\n\r\n\t\tif ( ! empty( $query_args['map_cat'] ) ) {\r\n\r\n\t\t\t$cats = preg_split( '/[,\\s]+/', $query_args['map_cat'] );\r\n\r\n\t\t\t$escaped_include_ids = array();\r\n\t\t\t$escaped_exclude_ids = array();\r\n\r\n\t\t\tforeach( $cats as $cat ) {\r\n\r\n\t\t\t\tif ( is_numeric( $cat ) ) {\r\n\r\n\t\t\t\t\tif ( $cat < 0 ) {\r\n\t\t\t\t\t\t$escaped_exclude_ids[] = abs( $cat );\r\n\t\t\t\t\t\t$escaped_exclude_ids = array_merge( $escaped_exclude_ids, get_term_children( $cat, 'category' ) );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$escaped_include_ids[] = intval( $cat );\r\n\t\t\t\t\t\t$escaped_include_ids = array_merge( $escaped_include_ids, get_term_children( $cat, 'category' ) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Slugs might begin with a dash, so we only include them\r\n\t\t\t\t\t$term = get_term_by( 'slug', $cat, 'category' );\r\n\t\t\t\t\tif ( $term ) {\r\n\t\t\t\t\t\t$escaped_include_ids[] = $term->term_id;\r\n\t\t\t\t\t\t$escaped_include_ids = array_merge( $escaped_include_ids, get_term_children( $term->term_id, 'category' ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\r\n\t\t\tif ( ! empty( $escaped_include_ids ) ) {\r\n\t\t\t\t$tax_query[] = array(\r\n\t\t\t\t\t'taxonomy' => 'category',\r\n\t\t\t\t\t'terms' => $escaped_include_ids,\r\n\t\t\t\t\t'field' => 'term_id',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! empty( $escaped_exclude_ids ) ) {\r\n\t\t\t\t$tax_query[] = array(\r\n\t\t\t\t\t'taxonomy' => 'category',\r\n\t\t\t\t\t'terms' => $escaped_exclude_ids,\r\n\t\t\t\t\t'operator' => 'NOT IN',\r\n\t\t\t\t\t'field' => 'term_id',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t} // end if map_cat exists \r\n\r\n\t\tif ( !empty( $tax_query ) ) {\r\n\t\t\t$tax_clauses = get_tax_sql( $tax_query, 'o', $object_store['id_column'] );\r\n\t\t\t$table_string .= $tax_clauses['join'];\r\n\t\t\t$wheres[] = preg_replace( '/^ AND/', '', $tax_clauses['where'] );\r\n\t\t\t$groupby = 'GROUP BY gmlr.object_id';\r\n\t\t}\r\n\r\n\t\tif ( 'post' == $object_name ) {\r\n\t\t\t// Handle inclusion and exclusion of post types\r\n\t\t\tif ( 'any' == $query_args['map_post_type'] ) {\r\n\t\t\t\t$include_post_types = '';\r\n\t\t\t\t$searchable_post_types = GeoMashup::get_searchable_post_types();\r\n\r\n\t\t\t\tif ( ! empty( $searchable_post_types ) )\r\n\t\t\t\t\t$include_post_types .= \"o.post_type IN ('\" . join(\"', '\", array_map( 'esc_sql', $searchable_post_types ) ) . \"')\";\r\n\r\n\t\t\t\t$wheres[] = $include_post_types;\r\n\t\t\t} else {\r\n\t\t\t\tif ( !is_array( $query_args['map_post_type'] ) ) \r\n\t\t\t\t\t$query_args['map_post_type'] = preg_split( '/[,\\s]+/', $query_args['map_post_type'] );\r\n\t\t\t\t$wheres[] = \"o.post_type IN ('\" . join(\"', '\", $query_args['map_post_type']) . \"')\";\r\n\t\t\t}\r\n\t\t} \r\n\r\n\t\tif ( ! empty( $query_args['object_id'] ) ) {\r\n\t\t\t$wheres[] = 'gmlr.object_id = ' . esc_sql( $query_args['object_id'] );\r\n\t\t} else if ( ! empty( $query_args['object_ids'] ) ) {\r\n\t\t\t$wheres[] = 'gmlr.object_id IN ( ' . esc_sql( $query_args['object_ids'] ) .' )';\r\n\t\t}\r\n\r\n\t\tif ( ! empty( $query_args['exclude_object_ids'] ) ) \r\n\t\t\t$wheres[] = 'gmlr.object_id NOT IN ( ' . esc_sql( $query_args['exclude_object_ids'] ) . ' )';\r\n\r\n\t\tlist( $l_cols, $l_join, $l_where, $l_groupby ) = $location_query->get_sql( 'o', $object_store['id_column'] );\r\n\t\t$field_string .= $l_cols;\r\n\t\t$table_string .= $l_join;\r\n\t\tif ( empty( $groupby ) and !empty( $l_groupby ) )\r\n\t\t\t$groupby = 'GROUP BY ' . $l_groupby;\r\n\t\t$where = ( empty( $wheres ) ) ? '' :  'WHERE ' . implode( ' AND ', $wheres ) . $l_where;\r\n\t\t$sort = ( isset( $query_args['sort'] ) ) ? $query_args['sort'] : $object_store['sort'];\r\n\t\t$sort = ( empty( $sort ) ) ? '' : 'ORDER BY ' . esc_sql( $sort );\r\n\t\t$offset = absint( $query_args['map_offset'] );\r\n\t\t$limit = absint( $query_args['limit'] );\r\n\t\tif ( $limit or $offset )\r\n\t\t\t$limit = \" LIMIT {$offset},{$limit}\";\r\n\t\telse\r\n\t\t\t$limit = '';\r\n\r\n\t\tif ( ! $query_args['suppress_filters'] ) {\r\n\t\t\t$field_string = apply_filters( 'geo_mashup_locations_fields', $field_string, $query_args );\r\n\t\t\t$table_string = apply_filters( 'geo_mashup_locations_join', $table_string, $query_args );\r\n\t\t\t$where = apply_filters( 'geo_mashup_locations_where', $where, $query_args );\r\n\t\t\t$sort = apply_filters( 'geo_mashup_locations_orderby', $sort, $query_args );\r\n\t\t\t$groupby = apply_filters( 'geo_mashup_locations_groupby', $groupby, $query_args );\r\n\t\t\t$limit = apply_filters( 'geo_mashup_locations_limits', $limit, $query_args );\r\n\t\t}\r\n\t\t\r\n\t\t$query_string = \"SELECT $field_string FROM $table_string $where $groupby $having $sort $limit\";\r\n\r\n\t\t$wpdb->query( $query_string );\r\n\t\t\r\n\t\treturn $wpdb->last_result;\r\n\t}\r\n\r\n\t/**\r\n\t * Save an object location in the database.\r\n\t *\r\n\t * Object data is saved in the geo_mashup_location_relationships table, and \r\n\t * location data is saved in geo_mashup_locations.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses do_action() Calls 'geo_mashup_added_object_location' with the object name,\r\n\t *       object id, geo date, and location array\r\n\t * @uses do_action() Calls 'geo_mashup_updated_object_location' with the object name,\r\n\t *       object id, geo date, and location array\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param id $object_id ID of the object to save the location for.\r\n\t * @param id|array $location If an ID, the location is not modified. If an array of valid location fields,\r\n\t * \t\tthe location is added or updated. If empty, the object location is deleted.\r\n\t * @param bool $do_lookups Whether to try looking up missing location information, which can take extra time.\r\n\t * \t\tDefault is to use the saved option.\r\n\t * @param string $geo_date Optional geo date to associate with the object.\r\n\t * @return id|WP_Error The location ID now assiociated with the object.\r\n\t */\r\n\tpublic static function set_object_location( $object_name, $object_id, $location, $do_lookups = null, $geo_date = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( is_numeric( $location ) ) {\r\n\t\t\t$location_id = $location;\r\n\t\t} \r\n\r\n\t\tif ( !isset( $location_id ) ) {\r\n\t\t\t$location_id = self::set_location( $location, $do_lookups );\r\n\t\t\tif ( is_wp_error( $location_id ) ) {\r\n\t\t\t\treturn $location_id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( !is_numeric( $location_id ) ) {\r\n\t\t\tself::delete_object_location( $object_name, $object_id );\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif ( empty( $geo_date ) ) {\r\n\t\t\t$geo_date = date( 'Y-m-d H:i:s' );\r\n\t\t} else {\r\n\t\t\t$geo_date = date( 'Y-m-d H:i:s', strtotime( $geo_date ) );\r\n\t\t}\r\n\r\n\t\t$relationship_table = \"{$wpdb->prefix}geo_mashup_location_relationships\"; \r\n\t\t$select_string = \"SELECT * FROM $relationship_table \" .\r\n\t\t\t$wpdb->prepare( 'WHERE object_name = %s AND object_id = %d', $object_name, $object_id );\r\n\r\n\t\t$db_location = $wpdb->get_row( $select_string, ARRAY_A );\r\n\r\n\t\t$set_id = null;\r\n\t\tif ( empty( $db_location ) ) {\r\n\t\t\tif ( $wpdb->insert( $relationship_table, compact( 'object_name', 'object_id', 'location_id', 'geo_date' ) ) ) {\r\n\t\t\t\t$set_id = $location_id;\r\n\t\t\t} else { \r\n\t\t\t\treturn new WP_Error( 'db_insert_error', $wpdb->last_error );\r\n\t\t\t}\r\n\t\t\tdo_action( 'geo_mashup_added_object_location', $object_name, $object_id, $geo_date, $location_id );\r\n\t\t} else {\r\n\t\t\t$wpdb->update( $relationship_table, compact( 'location_id', 'geo_date' ), compact( 'object_name', 'object_id' ) );\r\n\t\t\tif ( $wpdb->last_error ) \r\n\t\t\t\treturn new WP_Error( 'db_update_error', $wpdb->last_error );\r\n\t\t\t$set_id = $location_id;\r\n\t\t\tdo_action( 'geo_mashup_updated_object_location', $object_name, $object_id, $geo_date, $location_id );\r\n\t\t}\r\n\t\twp_cache_delete( $object_name . '-' . $object_id, 'geo_mashup_object_locations');\r\n\r\n\t\treturn $set_id;\r\n\t}\r\n\r\n\t/**\r\n\t * Save a location.\r\n\t *\r\n\t * This can create a new location or update an existing one. If a location exists within 5 decimal\r\n\t * places of the passed in coordinates, it will be updated. If the saved_name of a different location\r\n\t * is given, it will be removed from the other location and saved with this one. Blank fields will not\r\n\t * replace existing data.\r\n\t * \r\n\t * @since 1.2\r\n\t * @uses do_action() Calls 'geo_mashup_added_location' with the location array added\r\n\t * @uses do_action() Calls 'geo_mashup_updated_location' with the location array updated\r\n\t *\r\n\t * @param array $location Location to save, may be modified to match actual saved data.\r\n\t * @param bool $do_lookups Whether to try to look up address information before saving,\r\n\t * \t\tdefault is to use the saved option.\r\n\t * @return id|WP_Error The location ID saved, or a WordPress error.\r\n\t */\r\n\tpublic static function set_location( &$location, $do_lookups = null ) {\r\n\t\tglobal $wpdb, $geo_mashup_options;\r\n\r\n\t\tif ( is_null( $do_lookups ) ) {\r\n\t\t\t$do_lookups = ( $geo_mashup_options->get( 'overall', 'enable_reverse_geocoding' ) == 'true' );\r\n\t\t}\r\n\r\n\t\t$input_type = ARRAY_A;\r\n\t\tif ( is_object( $location ) ) {\r\n\t\t\t$input_type = OBJECT;\r\n\t\t\t$location = (array) $location;\r\n\t\t}\r\n\r\n\t\t// Check for existing location ID\r\n\t\t$location_table = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$select_string = \"SELECT id, saved_name FROM $location_table \";\r\n\r\n\t\t// If local has a different floating point format, change it temporarily\r\n\t\t$changed_locale = false;\r\n\t\tif ( (string) 1.1 != '1.1' ) {\r\n\t\t\t$original_locale = setlocale( constant( 'LC_NUMERIC' ), null );\r\n\t\t\tsetlocale( constant( 'LC_NUMERIC' ), 'en_US' );\r\n\t\t\t$changed_locale = true;\r\n\t\t}\r\n\r\n\t\tif ( isset( $location['id'] ) && is_numeric( $location['id'] ) ) {\r\n\r\n\t\t\t$select_string .= $wpdb->prepare( 'WHERE id = %d', $location['id'] );\r\n\r\n\t\t} else if ( isset( $location['lat'] ) and is_numeric( $location['lat'] ) and isset( $location['lng'] ) and is_numeric( $location['lng'] ) ) {\r\n\r\n\t\t\t// The database might round these, but let's be explicit and stymy evildoers too\r\n\t\t\t$location['lat'] = round( $location['lat'], 7 );\r\n\t\t\t$location['lng'] = round( $location['lng'], 7 );\r\n\r\n\t\t\t// MySql appears to only distinguish 5 decimal places, ~8 feet, in the index\r\n\t\t\t$delta = 0.00001;\r\n\t\t\t$select_string .= $wpdb->prepare( 'WHERE lat BETWEEN %f AND %f AND lng BETWEEN %f AND %f', \r\n\t\t\t\t$location['lat'] - $delta, $location['lat'] + $delta, $location['lng'] - $delta, $location['lng'] + $delta );\r\n\r\n\t\t} else {\r\n\t\t\tif ( $changed_locale )\r\n\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\treturn new WP_Error( 'invalid_location', __( 'A location must have an ID or coordinates to be saved.', 'GeoMashup' ) );\r\n\t\t}\r\n\r\n\t\t$db_location = $wpdb->get_row( $select_string, ARRAY_A );\r\n\r\n\t\t$found_saved_name = '';\r\n\t\tif ( ! empty( $db_location ) ) {\r\n\t\t\t// Use the existing ID\r\n\t\t\t$location['id'] = $db_location['id']; \r\n\t\t\t$found_saved_name = $db_location['saved_name'];\r\n\t\t}\r\n\r\n\t\t// Reverse geocode\r\n\t\tif ( $do_lookups ) {\r\n\t\t\tself::reverse_geocode_location( $location );\r\n\t\t}\r\n\r\n\t\t// Don't set blank entries (use the set_null pseudo field)\r\n\t\tforeach ( $location as $name => $value ) {\r\n\t\t\tif ( !is_numeric( $value ) && empty( $value ) ) {\r\n\t\t\t\tunset( $location[$name] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Replace any existing saved name\r\n\t\tif ( ! empty( $location['saved_name'] ) and $found_saved_name != $location['saved_name'] ) {\r\n\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $location_table SET saved_name = NULL WHERE saved_name = %s\", $location['saved_name'] ) );\r\n\t\t}\r\n\r\n\t\tself::truncate_location_fields( $location );\r\n\r\n\t\t$set_id = null;\r\n\r\n\t\tif ( empty( $location['id'] ) ) {\r\n\r\n\t\t\t// Create a new location\r\n\t\t\tif ( $wpdb->insert( $location_table, $location ) ) {\r\n\t\t\t\t$set_id = $wpdb->insert_id;\r\n\t\t\t} else {\r\n\t\t\t\tif ( $changed_locale )\r\n\t\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\t\treturn new WP_Error( 'db_insert_error', $wpdb->last_error );\r\n\t\t\t}\r\n\t\t\tdo_action( 'geo_mashup_added_location', $location );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Update existing location, except for coordinates\r\n\t\t\t$tmp_lat = $location['lat']; \r\n\t\t\t$tmp_lng = $location['lng']; \r\n\t\t\tunset( $location['lat'] );\r\n\t\t\tunset( $location['lng'] );\r\n\t\t\tif ( !empty ( $location ) ) {\r\n\r\n\t\t\t\tif ( isset( $location['set_null'] ) ) {\r\n\t\t\t\t\t// WP doesn't yet have a mechanism for setting NULLs, https://core.trac.wordpress.org/ticket/15158\r\n\t\t\t\t\t$null_fields = $location['set_null'];\r\n\t\t\t\t\tif ( !is_array( $null_fields ) ) \r\n\t\t\t\t\t\t$null_fields = explode( ',', $null_fields );\r\n\t\t\t\t\t$null_fields = array_map( create_function( '$field', 'return $field . \"=NULL\";' ), $null_fields );\r\n\t\t\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $location_table SET \" . implode( ',', $null_fields) . \" WHERE id=%d\", $db_location['id'] ) );\r\n\t\t\t\t\tunset( $location['set_null'] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$wpdb->update( $location_table, $location, array( 'id' => $db_location['id'] ) );\r\n\t\t\t\tif ( $wpdb->last_error ) {\r\n\t\t\t\t\tif ( $changed_locale )\r\n\t\t\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\t\t\treturn new WP_Error( 'db_update_error', $wpdb->last_error );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$set_id = $db_location['id'];\r\n\t\t\tdo_action( 'geo_mashup_updated_location', $location );\r\n\t\t\t$location['lat'] = $tmp_lat;\r\n\t\t\t$location['lng'] = $tmp_lng;\r\n\r\n\t\t}\r\n\r\n\t\tif ( $changed_locale )\r\n\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\r\n\t\twp_cache_delete( $set_id, 'geo_mashup_locations' );\r\n\r\n\t\tif( OBJECT === $input_type )\r\n\t\t\t$location = (object) $location;\r\n\r\n\t\treturn $set_id;\r\n\t}\r\n\r\n\t/**\r\n\t * Cut location fields to maximum length.\r\n\t * @since 1.8.5\r\n\t * @param array $location\r\n\t */\r\n\tstatic private function truncate_location_fields( &$location ) {\r\n\t\tif ( isset( $location['saved_name'] ) )\r\n\t\t\t$location['saved_name'] = mb_substr( $location['saved_name'], 0, 100 );\r\n\t\tif ( isset( $location['country_code'] ) )\r\n\t\t\t$location['country_code'] = mb_substr( $location['country_code'], 0, 2 );\r\n\t\tif ( isset( $location['admin_code'] ) )\r\n\t\t\t$location['admin_code'] = mb_substr( $location['admin_code'], 0, 20 );\r\n\t\tif ( isset( $location['sub_admin_code'] ) )\r\n\t\t\t$location['sub_admin_code'] = mb_substr( $location['sub_admin_code'], 0, 80 );\r\n\t}\r\n\r\n\t/**\r\n\t * Delete an object location or locations.\r\n\t * \r\n\t * This removes the association of an object with a location, but does NOT\r\n\t * delete the location.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses do_action() Calls 'geo_mashup_deleted_object_location' with the object location\r\n\t * \t\tobject that was deleted.\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param id|array $object_ids Object ID or array of IDs to remove the locations of.\r\n\t * @return int|WP_Error Rows affected or WordPress error.\r\n\t */\r\n\tpublic static function delete_object_location( $object_name, $object_ids ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$object_ids = ( is_array( $object_ids ) ? $object_ids : array( $object_ids ) );\r\n\t\t$rows_affected = 0;\r\n\t\tforeach( $object_ids as $object_id ) {\r\n\t\t\t$object_location = self::get_object_location( $object_name, $object_id );\r\n\t\t\tif ( $object_location ) {\r\n\t\t\t\t$delete_string = \"DELETE FROM {$wpdb->prefix}geo_mashup_location_relationships \" .\r\n\t\t\t\t\t$wpdb->prepare( 'WHERE object_name = %s AND object_id = %d', $object_name, $object_id );\r\n\t\t\t\t$rows_affected += $wpdb->query( $delete_string );\r\n\t\t\t\tif ( $wpdb->last_error )\r\n\t\t\t\t\treturn new WP_Error( 'delete_object_location_error', $wpdb->last_error );\r\n\r\n\t\t\t\twp_cache_delete( $object_name . '-' . $object_id, 'geo_mashup_object_locations' );\r\n\r\n\t\t\t\tdo_action( 'geo_mashup_deleted_object_location', $object_location );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $rows_affected;\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a location or locations.\r\n\t *\r\n\t * @since 1.2\r\n\t * @uses do_action() Calls 'geo_mashup_deleted_location' with the location object deleted.\r\n\t * \r\n\t * @param id|array $ids Location ID or array of IDs to delete.\r\n\t * @return int|WP_Error Rows affected or Wordpress error.\r\n\t */\r\n\tpublic static function delete_location( $ids ) {\r\n\t\tglobal $wpdb;\r\n\t\t$ids = ( is_array( $ids ) ? $ids : array( $ids ) );\r\n\t\t$rows_affected = 0;\r\n\t\tforeach( $ids as $id ) {\r\n\t\t\t$location = self::get_location( $id );\r\n\t\t\tif ( $location ) {\r\n\t\t\t\t$rows_affected += $wpdb->query( $wpdb->prepare( \"DELETE FROM {$wpdb->prefix}geo_mashup_locations WHERE id = %d\", $id ) );\r\n\t\t\t\tif ( $wpdb->last_error )\r\n\t\t\t\t\treturn new WP_Error( 'delete_location_error', $wpdb->last_error );\r\n\t\t\t\twp_cache_delete( $id, 'geo_mashup_locations' );\r\n\t\t\t\tdo_action( 'geo_mashup_deleted_location', $location );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $rows_affected;\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations with saved names.\r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @return array|WP_Error Array of location rows or WP_Error.\r\n\t */\r\n\tpublic static function get_saved_locations() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$location_table = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$wpdb->query( \"SELECT * FROM $location_table WHERE saved_name IS NOT NULL ORDER BY saved_name ASC\" );\r\n\t\tif ( $wpdb->last_error ) \r\n\t\t\treturn new WP_Error( 'saved_locations_error', $wpdb->last_error );\r\n\r\n\t\treturn $wpdb->last_result;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the number of located posts in a category.\r\n\t * \r\n\t * @since 1.2\r\n\t *\r\n\t * @param id $category_id \r\n\t * @return int\r\n\t */\r\n\tpublic static function category_located_post_count( $category_id ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$select_string = \"SELECT count(*) FROM {$wpdb->posts} p \r\n\t\t\tINNER JOIN {$wpdb->term_relationships} tr ON tr.object_id = p.ID \r\n\t\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON tt.term_taxonomy_id = tr.term_taxonomy_id\r\n\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = p.ID AND gmlr.object_name = 'post'\r\n\t\t\tWHERE tt.term_id = \" . esc_sql( $category_id ) .\"\r\n\t\t\tAND p.post_status='publish'\";\r\n\t\treturn $wpdb->get_var( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get categories that contain located objects.\r\n\t *\r\n\t * Not sufficient - probably want parent categories.\r\n\t *\r\n\t * @return array Located category id, name, slug, description, and parent id\r\n\t */\r\n\tprivate static function get_located_categories() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$select_string = \"SELECT DISTINCT t.term_id, t.name, t.slug, tt.description, tt.parent\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_location_relationships gmlr\r\n\t\t\tINNER JOIN {$wpdb->term_relationships} tr ON tr.object_id = gmlr.object_id\r\n\t\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON tt.term_taxonomy_id = tr.term_taxonomy_id\r\n\t\t\tINNER JOIN {$wpdb->terms} t ON t.term_id = tt.term_id\r\n\t\t\tWHERE tt.taxonomy='category'\r\n\t\t\tORDER BY t.slug ASC\";\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get multiple comments.\r\n\t *\r\n\t * What is the WordPress way? Expect deprecation.\r\n\t * \r\n\t * @return array Comments.\r\n\t */\r\n\tpublic static function get_comment_in( $args ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$default_args = array( 'comment__in' => '' );\r\n\t\t$args = wp_parse_args( $args, $default_args );\r\n\t\tif ( is_array( $args['comment__in'] ) ) {\r\n\t\t\t$comment_ids = implode( ',', $args['comment__in'] );\r\n\t\t} else {\r\n\t\t\t$comment_ids = ( isset( $args['comment__in'] ) ) ? $args['comment__in'] : '0';\r\n\t\t}\r\n\t\t$select_string = \"SELECT * FROM $wpdb->comments WHERE comment_ID IN (\" .\r\n\t\t\timplode( ',', wp_parse_id_list( $args['comment__in'] ) ) . ') ORDER BY comment_date_gmt DESC';\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get multiple users.\r\n\t *\r\n\t * Now just a wrapper for get_users().\r\n\t * \r\n\t * @return array Users.\r\n\t */\r\n\tpublic static function get_user_in( $args ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( isset( $args['user__in'] ) ) {\r\n\t\t\t$args['include'] = $args['user__in'];\r\n\t\t\tunset( $args['user__in'] );\r\n\t\t}\r\n\t\treturn get_users( $args );\r\n\t}\r\n\r\n\t/**\r\n\t * When a post is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_post {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_post( $id ) {\r\n\t\treturn self::delete_object_location( 'post', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a comment is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_comment {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_comment( $id ) {\r\n\t\treturn self::delete_object_location( 'comment', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a user is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_user {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_user( $id ) {\r\n\t\treturn self::delete_object_location( 'user', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * Geo Mashup action to echo post meta keys that match a jQuery suggest query.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function post_meta_key_suggest() {\r\n\t\tglobal $wpdb;\r\n\t\tif ( isset( $_GET['q'] ) ) {\r\n\t\t\t$limit = (int) apply_filters( 'postmeta_form_limit', 30 );\r\n\t\t\t$terms = explode( ',', $_GET['q'] );\r\n\t\t\t$stub = trim( array_pop( $terms ) );\r\n\t\t\t$like = esc_sql( $stub );\r\n\t\t\t$keys = $wpdb->get_col( \"\r\n\t\t\t\tSELECT meta_key\r\n\t\t\t\tFROM $wpdb->postmeta\r\n\t\t\t\tGROUP BY meta_key\r\n\t\t\t\tHAVING meta_key LIKE '$like%'\r\n\t\t\t\tORDER BY meta_key\r\n\t\t\t\tLIMIT $limit\" );\r\n\t\t\tforeach( $keys as $key ) {\r\n\t\t\t\techo \"$key\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\texit;\r\n\t}\r\n}\r\n", "<?php\r\n/** \r\n * Geo Mashup \"core\" implementation of location management user interfaces.\r\n *\r\n * Theoretically, everything done here could be done in a separate plugin.\r\n *\r\n * @package GeoMashup\r\n */\r\n\r\n/**\r\n * A base class for managing user interfaces for collecting and storing location.\r\n *\r\n * This could be extended to make the existing editor work for new objects in a separate plugin.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupUIManager {\r\n\t/**\r\n\t * Retrieve a single instaniated subclass by name.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $name The class name of the manager.\r\n\t * @return GeoMashupPostUIManager|GeoMashupUserUIManager|GeoMashupCommentUIManager The singleton object.\r\n\t */\r\n\tpublic static function get_instance( $name ) {\r\n\t\tstatic $instances = array();\r\n\r\n\t\tif ( ! isset( $instances[$name] ) ) {\r\n\t\t\t$instances[$name] = new $name();\r\n\t\t}\r\n\t\treturn $instances[$name];\r\n\t}\r\n\r\n\t/**\r\n\t * Queue UI styles to match the jQuery version.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic function enqueue_jquery_styles() {\r\n\t\tGeoMashup::register_style( 'jquery-smoothness', 'css/jquery-ui.1.7.smoothness.css', false, GEO_MASHUP_VERSION, 'screen' );\r\n\t\twp_enqueue_style( 'jquery-smoothness' );\r\n\t}\r\n\r\n\t/**\r\n\t * Queue styles and scripts for the location editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function enqueue_form_client_items() {\r\n\t\tglobal $geo_mashup_options, $geo_mashup_custom;\r\n\t\t\r\n\t\tGeoMashup::register_style( 'geo-mashup-edit-form', 'css/location-editor.css', false, GEO_MASHUP_VERSION, 'screen' );\r\n\t\twp_enqueue_style( 'geo-mashup-edit-form' );\r\n\r\n\t\tGeoMashup::register_script( \r\n\t\t\t\t'mxn', \r\n\t\t\t\t'js/mxn/mxn.js', \r\n\t\t\t\tnull, \r\n\t\t\t\tGEO_MASHUP_VERSION , \r\n\t\t\t\ttrue);\r\n\t\t\t\t\r\n\t\tGeoMashup::register_script( \r\n\t\t\t\t'mxn-core', \r\n\t\t\t\t'js/mxn/mxn.core.js', \r\n\t\t\t\tarray( 'mxn' ), \r\n\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\ttrue );\r\n\r\n\t\t$map_api = $geo_mashup_options->get( 'overall', 'map_api' );\r\n\t\t$copy_geodata = $geo_mashup_options->get( 'overall', 'copy_geodata' );\r\n\t\t$geonames_username = $geo_mashup_options->get( 'overall', 'geonames_username' );\r\n\t\t$ajax_nonce = wp_create_nonce('geo-mashup-ajax-edit');\r\n\t\t$ajax_url = admin_url( 'admin-ajax.php' );\r\n\t\t$geo_mashup_url_path = GEO_MASHUP_URL_PATH;\r\n\t\twp_localize_script( 'mxn-core', 'geo_mashup_location_editor_settings', compact( 'map_api', 'copy_geodata', 'ajax_url', 'geo_mashup_url_path', 'geonames_username' ) );\r\n\t\t$required_scripts = array( 'jquery');\r\n\t\tif ( 'googlev3' == $map_api ) {\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'google-maps-3',\r\n\t\t\t\t\t'//maps.google.com/maps/api/js?key=' . $geo_mashup_options->get( 'overall', 'googlev3_key' ) . '&amp;language=' . GeoMashup::get_language_code(),\r\n\t\t\t\t\tnull, \r\n\t\t\t\t\t'', \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\tGeoMashup::register_script( \r\n\t\t\t\t\t'mxn-google-3', \r\n\t\t\t\t\t'js/mxn/mxn.googlev3.core.js', \r\n\t\t\t\t\tarray( 'mxn-core', 'google-maps-3' ), \r\n\t\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\tGeoMashup::register_script( \r\n\t\t\t\t\t'mxn-google-3-gm', \r\n\t\t\t\t\t'js/mxn/mxn.googlev3.geo-mashup.js', \r\n\t\t\t\t\tarray( 'mxn-google-3' ), \r\n\t\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\t\t\r\n\t\t\t$required_scripts[] = 'mxn-google-3-gm';\r\n\t\t} else if ( 'openlayers' == $map_api ) {\r\n\t\t\twp_register_script( \r\n\t\t\t\t\t'openlayers', \r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js',\r\n\t\t\t\t\tnull, \r\n\t\t\t\t\t'latest', \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\twp_register_script( \r\n\t\t\t\t\t'openstreetmap', \r\n\t\t\t\t\t'//www.openstreetmap.org/openlayers/OpenStreetMap.js',\r\n\t\t\t\t\t array( 'openlayers' ),\r\n\t\t\t\t\t'latest',\r\n\t\t\t\t\t true );\r\n\t\t\t\t\t \r\n\t\t\tGeoMashup::register_script( \r\n\t\t\t\t\t'mxn-openlayers',\r\n\t\t\t\t\t'js/mxn/mxn.openlayers.core.js', \r\n\t\t\t\t\tarray( 'mxn-core', 'openstreetmap' ), \r\n\t\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\tGeoMashup::register_script( \r\n\t\t\t\t\t'mxn-openlayers-gm', \r\n\t\t\t\t\t'js/mxn/mxn.openlayers.geo-mashup.js', \r\n\t\t\t\t\tarray( 'mxn-openlayers' ), \r\n\t\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\t$required_scripts[] = 'mxn-openlayers-gm';\r\n\t\t} elseif ( 'leaflet' == $map_api ) {\r\n\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'leaflet',\r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js',\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'0.7',\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\twp_enqueue_style(\r\n\t\t\t\t\t'leaflet',\r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css',\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'0.7' );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn-leaflet',\r\n\t\t\t\t'js/mxn/mxn.leaflet.core.js',\r\n\t\t\t\tarray( 'mxn-core', 'leaflet' ),\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-leaflet-kml',\r\n\t\t\t\t\t'js/leaflet/KML.js',\r\n\t\t\t\t\tarray( 'mxn-leaflet' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn-leaflet-gm',\r\n\t\t\t\t'js/mxn/mxn.leaflet.geo-mashup.js',\r\n\t\t\t\tarray( 'mxn-leaflet-kml' ),\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\t\t$required_scripts[] = 'mxn-leaflet-gm';\r\n\t\t}\r\n\r\n\t\tGeoMashup::register_script( \r\n\t\t\t\t'geo-mashup-location-editor', \r\n\t\t\t\t'js/location-editor.js', \r\n\t\t\t\t$required_scripts, \r\n\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\ttrue );\r\n\t\t\t\t\r\n\t\twp_enqueue_script( 'geo-mashup-location-editor' );\r\n\r\n\t\tGeoMashup::register_script( \r\n\t\t\t\t'jquery-ui-datepicker', \r\n\t\t\t\t'js/jquery-ui.1.7.3.datepicker.js', \r\n\t\t\t\tarray( 'jquery', 'jquery-ui-core'), \r\n\t\t\t\t'1.7.3', \r\n\t\t\t\ttrue );\r\n\t\t\t\t\r\n\t\twp_enqueue_script( 'jquery-ui-datepicker' );\r\n\r\n\t\tif ( isset( $geo_mashup_custom ) ) {\r\n\t\t\t$custom_url = $geo_mashup_custom->file_url( 'location-editor.js' );\r\n\t\t\tif ( ! empty( $custom_url ) ) {\r\n\t\t\t\twp_enqueue_script( \r\n\t\t\t\t\t'geo-mashup-location-editor-custom', \r\n\t\t\t\t\t$custom_url, \r\n\t\t\t\t\tarray( 'geo-mashup-location-editor' ),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\ttrue );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the appropriate action from posted data.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tprivate function get_submit_action() {\r\n\r\n\t\t$action = null;\r\n\r\n\t\tif ( isset( $_POST['geo_mashup_add_location'] ) or isset( $_POST['geo_mashup_update_location'] ) ) {\r\n\r\n\t\t\t// Clients without javascript may need server side geocoding\r\n\t\t\tif ( ! empty( $_POST['geo_mashup_search'] ) and isset( $_POST['geo_mashup_no_js'] ) and 'true' == $_POST['geo_mashup_no_js'] ) {\r\n\r\n\t\t\t\t$action = 'geocode';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t$action = 'save';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( isset( $_POST['geo_mashup_changed'] ) and 'true' == $_POST['geo_mashup_changed'] and ! empty( $_POST['geo_mashup_location'] ) ) {\r\n\r\n\t\t\t// The geo mashup submit button wasn't used, but a change was made and the post saved\r\n\t\t\t$action = 'save';\r\n\t\t\t\t \r\n\t\t} else if ( isset( $_POST['geo_mashup_delete_location'] ) ) {\r\n\r\n\t\t\t$action = 'delete';\r\n\r\n\t\t} else if ( ! empty( $_POST['geo_mashup_location_id'] ) and empty( $_POST['geo_mashup_location'] ) ) {\r\n\r\n\t\t\t// There was a location, but it was cleared before this save\r\n\t\t\t$action = 'delete';\r\n\r\n\t\t}\r\n\t\treturn $action;\r\n\t}\r\n\r\n\t/**\r\n\t * Save an object location from data posted by the location editor.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t * @uses GeoMashupDB::delete_location()\r\n\t *\r\n\t * @param string $object_name The name of the object being edited.\r\n\t * @param string $object_id The ID of the object being edited.\r\n\t * @return bool|WP_Error True or a WordPress error.\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id ) {\r\n\r\n\t\t// Check the nonce\r\n\t\tif ( empty( $_POST['geo_mashup_nonce'] ) || !wp_verify_nonce( $_POST['geo_mashup_nonce'], 'geo-mashup-edit' ) ) {\r\n\t\t\treturn new WP_Error( 'invalid_request', __( 'Object location not saved - invalid request.', 'GeoMashup' ) );\r\n\t\t}\r\n\t\t\r\n\t\t$action = $this->get_submit_action();\r\n\r\n\t\tif ( 'save' == $action or 'geocode' == $action ) {\r\n\r\n\t\t\t$date_string = $_POST['geo_mashup_date'] . ' ' . $_POST['geo_mashup_hour'] . ':' . \r\n\t\t\t\t$_POST['geo_mashup_minute'] . ':00';\r\n\t\t\t$geo_date = date( 'Y-m-d H:i:s', strtotime( $date_string ) );\r\n\r\n\t\t\t$post_location = array();\r\n\t\t\t// If PHP has added slashes, WP will do it again before saving\r\n\t\t\t$post_location['saved_name'] = stripslashes( $_POST['geo_mashup_location_name'] );\r\n\r\n\t\t\tif ( 'geocode' == $action ) {\r\n\r\n\t\t\t\t$status = GeoMashupDB::geocode( $_POST['geo_mashup_search'], $post_location );\r\n\t\t\t\tif ( $status != 200 ) {\r\n\t\t\t\t\t$post_location = array();\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( ! empty( $_POST['geo_mashup_select'] ) ) {\r\n\t\t\t\t\t$selected_items = explode( '|', $_POST['geo_mashup_select'] );\r\n\t\t\t\t\t$post_location = intval( $selected_items[0] );\r\n\t\t\t\t} else { \r\n\t\t\t\t\t$post_location['id'] = $_POST['geo_mashup_location_id'];\r\n\t\t\t\t\tlist( $lat, $lng ) = explode( ',', $_POST['geo_mashup_location'] );\r\n\t\t\t\t\t$post_location['lat'] = trim( $lat );\r\n\t\t\t\t\t$post_location['lng'] = trim( $lng );\r\n\t\t\t\t\t$post_location['geoname'] = $_POST['geo_mashup_geoname'];\r\n\t\t\t\t\t$post_location['address'] = stripslashes( $_POST['geo_mashup_address'] );\r\n\t\t\t\t\t$post_location['postal_code'] = $_POST['geo_mashup_postal_code'];\r\n\t\t\t\t\t$post_location['country_code'] = $_POST['geo_mashup_country_code'];\r\n\t\t\t\t\t$post_location['admin_code'] = $_POST['geo_mashup_admin_code'];\r\n\t\t\t\t\t$post_location['sub_admin_code'] = $_POST['geo_mashup_sub_admin_code'];\r\n\t\t\t\t\t$post_location['locality_name'] = $_POST['geo_mashup_locality_name'];\r\n\t\t\t\t\tif ( !empty( $_POST['geo_mashup_null_fields'] ) )\r\n\t\t\t\t\t\t$post_location['set_null'] = $_POST['geo_mashup_null_fields'];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( ! empty( $post_location ) ) {\r\n\t\t\t\t$error = GeoMashupDB::set_object_location( $object_name, $object_id, $post_location, true, $geo_date );\r\n\t\t\t\tif ( is_wp_error( $error ) ) \r\n\t\t\t\t\treturn $error;\r\n\t\t\t}\r\n\r\n\t\t} else if ( 'delete' == $action ) {\r\n\r\n\t\t\t$error = GeoMashupDB::delete_object_location( $object_name, $object_id );\r\n\t\t\tif ( is_wp_error( $error ) ) \r\n\t\t\t\treturn $error;\r\n\r\n\t\t}\r\n\t\t// If geodata was manually updated but Geo Mashup location was not,\r\n\t\t// they may be out of sync now. Allowing that for now.\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * A manager for user location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupUserUIManager extends GeoMashupUIManager {\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses parent::get_instance()\r\n\t *\r\n     * @param string $name The class name, this class by default.\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance( $name = __CLASS__ ) {\r\n\t\treturn parent::get_instance( $name );\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t * @access private\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options \r\n\t * @global string $pagenow The WordPress-supplied requested filename.\r\n\t * @uses apply_filters geo_mashup_load_user_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options, $pagenow;\r\n\r\n\t\t// Enable this interface when the option is set and we're on a destination page\r\n\t\t$enabled = is_admin() &&\r\n\t\t\t$geo_mashup_options->get( 'overall', 'located_object_name', 'user' ) == 'true' &&\r\n\t\t\tpreg_match( '/(user-edit|profile).php/', $pagenow );\r\n\t\t$enabled = apply_filters( 'geo_mashup_load_user_editor', $enabled );\r\n\r\n\t\t// If enabled, register all the interface elements\r\n\t\tif ( $enabled ) { \r\n\r\n\t\t\t// Form generation\r\n\t\t\tadd_action( 'show_user_profile', array( &$this, 'print_form' ) );\r\n\t\t\tadd_action( 'edit_user_profile', array( &$this, 'print_form' ) );\r\n\t\t\t// MAYBEDO: add location to registration page?\r\n\r\n\t\t\t// Form processing\r\n\t\t\tadd_action( 'personal_options_update', array( &$this, 'save_user'));\r\n\t\t\tadd_action( 'edit_user_profile_update', array( &$this, 'save_user'));\r\n\r\n\t\t\t$this->enqueue_form_client_items();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the user location editor form.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses edit-form.php\r\n\t */\r\n\tpublic function print_form() {\r\n\t\tglobal $user_id;\r\n\r\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/edit-form.php');\r\n\t\tif ( isset( $_GET['user_id'] ) ) {\r\n\t\t\t$object_id = $_GET['user_id'];\r\n\t\t} else {\r\n\t\t\t$object_id = $user_id;\r\n\t\t}\r\n\t\techo '<h3>' . __( 'Location', 'GeoMashup' ) . '</h3>';\r\n\t\tgeo_mashup_edit_form( 'user', $object_id, get_class( $this ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Handle old non-strict method calls with only one argument.\r\n\t *\r\n\t * @param string $object_name\r\n\t * @param null|int $object_id\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id = null ) {\r\n\t\t// resolve old non-strict one argument calls\r\n\t\tif ( is_null( $object_id ) )\r\n\t\t\t$object_id = intval( $object_name );\r\n\r\n\t\t// We only know how to save posts\r\n\t\t$object_name = 'user';\r\n\t\treturn parent::save_posted_object_location( $object_name, $object_id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a user is saved, also save any posted location.\r\n\t *\r\n\t * save_user {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t * @return bool|WP_Error \r\n\t */\r\n\tpublic function save_user() {\r\n\t\tif ( empty( $_POST['user_id'] ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$user_id = $_POST['user_id'];\r\n\r\n\t\tif ( !is_numeric( $user_id ) ) {\r\n\t\t\treturn $user_id;\r\n\t\t}\r\n\r\n\t\tif ( !current_user_can( 'edit_user', $user_id ) ) {\r\n\t\t\treturn $user_id;\r\n\t\t}\r\n\r\n\t\treturn $this->save_posted_object_location( $user_id );\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupUserUIManager::get_instance();\r\n\r\n/**\r\n * A manager for post/page location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupPostUIManager extends GeoMashupUIManager {\r\n\t/**\r\n\t * Location found in geo_mashup_save_location shortcode.\r\n\t * \r\n\t * @since 1.3\r\n\t * @var array\r\n\t */\r\n\tprivate $inline_location;\r\n\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses parent::get_instance()\r\n\t *\r\n     * @param string $name The class name, this class by default.\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance( $name = __CLASS__ ) {\r\n\t\treturn parent::get_instance( 'GeoMashupPostUIManager' );\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant post editing requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options \r\n\t * @global string $pagenow The WordPress-supplied requested filename.\r\n\t * @uses apply_filters geo_mashup_load_location_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options, $pagenow;\r\n\r\n\t\t// Uploadable geo content type expansion always enabled\r\n\t\tadd_filter( 'upload_mimes', array( &$this, 'upload_mimes' ) );\r\n\r\n\t\t// Queue inline location handlers - these could be used in nearly any request\r\n\r\n\t\t// Pre-save filter checks saved content for inline location tags\r\n\t\tadd_filter( 'content_save_pre', array( &$this, 'content_save_pre') );\r\n\r\n\t\t// Save post handles both inline and form processing\r\n\t\tadd_action( 'save_post', array( &$this, 'save_post'), 10, 2 );\r\n\r\n\t\t// Browser upload processing\r\n\t\tadd_filter( 'wp_handle_upload', array( &$this, 'wp_handle_upload' ) );\r\n\r\n\t\t// Enable front or back end ajax edits\r\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_edit', array( 'GeoMashup', 'ajax_edit' ) );\r\n\t\tadd_action( 'wp_ajax_geo_mashup_edit', array( 'GeoMashup', 'ajax_edit' ) );\r\n\r\n\t\t// Form generation\r\n\t\tadd_action( 'admin_menu', array( &$this, 'admin_menu' ) );\r\n\r\n\t\t// Queue scripts later, when we can determine post type, front or back end\r\n\t\tadd_action( 'admin_enqueue_scripts', array( &$this, 'enqueue_scripts' ) );\r\n\t\tadd_action( 'wp_enqueue_scripts', array( &$this, 'enqueue_scripts' ) );\r\n\r\n\t\tif ( 'async-upload.php' === $pagenow ) {\r\n\r\n\t\t\t// Flash upload display\r\n\t\t\tadd_filter( 'media_meta', array( &$this, 'media_meta' ), 10, 2 );\r\n\r\n\t\t} else if ( 'upload.php' === $pagenow or 'media-upload.php' === $pagenow ) {\r\n\r\n\t\t\t// Browser upload display\r\n\t\t\tadd_action( 'admin_print_scripts', array( &$this, 'admin_print_scripts' ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Queue scripts if the post type is enabled.\r\n\t *\r\n\t * Monitor for checking post type: http://core.trac.wordpress.org/ticket/14886\r\n\t *\r\n\t * @since 1.4\r\n\t * @uses apply_filters geo_mashup_load_location_editor intended for enabling a front end interface\r\n\t *\r\n\t * @global array $geo_mashup_options\r\n\t * @global string $pagenow\r\n\t * @global object $post\r\n\t */\r\n\tpublic function enqueue_scripts() {\r\n\t\tglobal $geo_mashup_options, $pagenow, $post;\r\n\r\n\t\t// The location editor works only on posts\r\n\t\tif ( empty( $post ) )\r\n\t\t\treturn null;\r\n\r\n\t\t$load_location_editor = (\r\n\t\t\t\tis_admin() and\r\n\t\t\t\tpreg_match( '/(post|page)(-new|).php/', $pagenow ) and\r\n\t\t\t\tin_array( $post->post_type, $geo_mashup_options->get( 'overall', 'located_post_types' ) )\r\n\t\t\t\t);\r\n\t\t$load_location_editor = apply_filters( 'geo_mashup_load_location_editor', $load_location_editor );\r\n\r\n\t\t// If we're on a post editing page, queue up the form interface elements\r\n\t\tif ( $load_location_editor ) {\r\n\r\n\t\t\t$this->enqueue_form_client_items();\r\n\r\n\t\t} \r\n\t}\r\n\r\n\t/**\r\n\t * Add a location meta box to the post editors.\r\n\t * \r\n\t * admin_menu {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by Wordpress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function admin_menu() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\t// Not adding a menu, but at this stage add_meta_box is defined, so we can add the location form\r\n\t\tforeach ( $geo_mashup_options->get( 'overall', 'located_post_types' ) as $post_type ) {\r\n\t\t\tadd_meta_box( 'geo_mashup_post_edit', __( 'Location', 'GeoMashup' ), array( &$this, 'print_form' ), $post_type, 'advanced' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the post editor form.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses edit-form.php\r\n\t */\r\n\tpublic function print_form() {\r\n\t\tglobal $post_ID;\r\n\r\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/edit-form.php');\r\n\t\tgeo_mashup_edit_form( 'post', $post_ID, get_class( $this ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Handle old non-strict method calls with only one argument.\r\n\t *\r\n\t * @param string $object_name\r\n\t * @param null|int $object_id\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id = null ) {\r\n\t\t// resolve old non-strict one argument calls\r\n\t\tif ( is_null( $object_id ) )\r\n\t\t\t$object_id = intval( $object_name );\r\n\r\n\t\t// We only know how to save posts\r\n\t\t$object_name = 'post';\r\n\t\treturn parent::save_posted_object_location( $object_name, $object_id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a post is saved, save any posted location for it.\r\n\t * \r\n\t * save_post {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t *\r\n\t * @param id $post_id \r\n\t * @param object $post \r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_post($post_id, $post) {\r\n\t\tif ( 'revision' == $post->post_type ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WP has already saved the post - allow location saving without added capability checks\r\n\r\n\t\tif ( !empty( $this->inline_location ) ) {\r\n\t\t\t$geo_date = '';\r\n\t\t\tif ( isset( $this->inline_location['geo_date'] ) ) {\r\n\t\t\t\t$geo_date = $this->inline_location['geo_date'];\r\n\t\t\t\tunset( $this->inline_location['geo_date'] );\r\n\t\t\t}\r\n\t\t\t$location_id = GeoMashupDB::set_object_location( 'post', $post_id, $this->inline_location, true, $geo_date );\r\n\t\t\tif ( is_wp_error( $location_id ) ) {\r\n\t\t\t\tupdate_post_meta( $post_id, 'geo_mashup_save_location_error', $location_id->get_error_message() );\r\n\t\t\t}\r\n\t\t\t$this->inline_location = null;\r\n\t\t}\r\n\r\n\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\r\n\t\treturn $this->save_posted_object_location( $post_id );\r\n\t}\r\n\r\n\t/**\r\n\t * Extract inline save location shortcodes from post content before it is saved.\r\n\t *\r\n\t * content_save_pre {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by Wordpress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic function content_save_pre( $content ) {\r\n\t\t// Piggyback on the shortcode interface to find inline tags [geo_mashup_save_location ...] \r\n\t\tadd_shortcode( 'geo_mashup_save_location', 'is_null' );\r\n\t\t$pattern = get_shortcode_regex( );\r\n\t\treturn preg_replace_callback('/'.$pattern.'/s', array( &$this, 'replace_save_pre_shortcode' ), $content);\r\n\t}\r\n\r\n\t/**\r\n\t * Store the inline location from a save location shortcode before it is removed.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param array $shortcode_match \r\n\t * @return The matched content, or an empty string if it was a save location shortcode.\r\n\t */\r\n\tpublic function replace_save_pre_shortcode( $shortcode_match ) {\r\n\t\t$content = $shortcode_match[0];\r\n\t\t$tag_index = array_search( 'geo_mashup_save_location',  $shortcode_match ); \r\n\t\tif ( $tag_index !== false ) {\r\n\t\t\t// There is an inline location - save the attributes\r\n\t\t\t$this->inline_location = shortcode_parse_atts( stripslashes( $shortcode_match[$tag_index+1] ) );\r\n\r\n\t\t\t// If lat and lng are missing, try to geocode based on address\r\n\t\t\t$success = false;\r\n\t\t\tif ( ( empty( $this->inline_location['lat'] ) or empty( $this->inline_location['lng'] ) ) and !empty( $this->inline_location['address'] ) ) {\r\n\t\t\t\t$query = $this->inline_location['address'];\r\n\t\t\t\t$this->inline_location = GeoMashupDB::blank_object_location( ARRAY_A );\r\n\t\t\t\t$success = GeoMashupDB::geocode( $query, $this->inline_location );\r\n\t\t\t\tif ( !$success ) {\r\n\t\t\t\t\t// Delay and try again\r\n\t\t\t\t\tsleep( 1 );\r\n\t\t\t\t\t$success = GeoMashupDB::geocode( $query, $this->inline_location );\r\n\t\t\t\t}\r\n\t\t\t} else if ( is_numeric ( $this->inline_location['lat'] ) and is_numeric( $this->inline_location['lng'] ) ) {\r\n\t\t\t\t// lat and lng were supplied\r\n\t\t\t\t$success = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ( $success ) {\r\n\t\t\t\t// Remove the tag\r\n\t\t\t\t$content = '';\r\n\t\t\t} else {\r\n\t\t\t\t$message = ( is_wp_error( GeoMashupDB::$geocode_error ) ? GeoMashupDB::$geocode_error->get_error_message() : __( 'Address not found - try making it less detailed', 'GeoMashup' ) );\r\n\t\t\t\t$content = str_replace( ']', ' geocoding_error=\"' . $message . '\"]', $content );\r\n\t\t\t\t$this->inline_location = null;\r\n\t\t\t}\r\n\t\t} \r\n\t\treturn $content;\r\n\t}\r\n\r\n\t/**\r\n\t * Add AJAX uploaded KML to the location editor map.\r\n\t *\r\n\t * media_meta {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic function media_meta( $content, $post ) {\r\n\t\t// Only chance to run some javascript after an ajax upload?\r\n\t\tif ( 'attachment' == $post->post_type ) {\r\n\t\t\t$url = wp_get_attachment_url( $post->ID );\r\n\t\t\tif ( '.km' == substr( $url, -4, 3 ) ) {\r\n\t\t\t\t$content .= '<script type=\"text/javascript\"> ' .\r\n\t\t\t\t\t'if (\\'GeoMashupLocationEditor\\' in parent) parent.GeoMashupLocationEditor.loadKml(\\''.$url.'\\');' .\r\n\t\t\t\t\t'</script>';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $content;\r\n\t}\r\n\r\n\t/**\r\n\t * Add Browser-uploaded KML to the location editor map.\r\n\t *\r\n\t * admin_print_scripts {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic function admin_print_scripts( $not_used ) {\r\n\t\t// Load any uploaded KML into the search map - only works with browser uploader\r\n\t\t\r\n\t\t// See if wp_upload_handler found uploaded KML\r\n\t\t$kml_url = get_transient( 'gm_uploaded_kml_url' );\r\n\t\tif (strlen($kml_url) > 0) {\r\n\t\t\t// Load the KML in the location editor\r\n\t\t\techo '\r\n\t\t\t\t<script type=\"text/javascript\"> \r\n\t\t\t\t\tif (\\'GeoMashupLocationEditor\\' in parent) parent.GeoMashupLocationEditor.loadKml(\\'' . $kml_url . '\\');\r\n\t\t\t\t</script>';\r\n\t\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add geo mime types to allowable uploads.\r\n\t * \r\n\t * upload_mimes {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function upload_mimes( $mimes ) {\r\n\t\t$mimes['kml'] = 'application/vnd.google-earth.kml+xml';\r\n\t\t$mimes['kmz'] = 'application/vnd.google-earth.kmz';\r\n\t\t$mimes['gpx'] = 'application/octet-stream';\r\n\t\treturn $mimes;\r\n\t}\r\n\r\n\t/**\r\n\t * If an upload is KML, put the URL in an option to be loaded in the response \r\n\t * \r\n\t * wp_handle_upload {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function wp_handle_upload( $args ) {\r\n\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\t\tif ( is_array( $args ) && isset( $args['file'] ) ) {\r\n\t\t\tif ( stripos( $args['file'], '.km' ) == strlen( $args['file'] ) - 4 ) {\r\n\t\t\t\tset_transient( 'gm_uploaded_kml_url', $args['url'] );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $args;\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupPostUIManager::get_instance();\r\n\r\n/**\r\n * A manager for comment location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupCommentUIManager {\r\n\t/**\r\n\t * Whether to put the comment form script in the footer.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tprivate $add_form_script = false;\r\n\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance() {\r\n\t\tstatic $instance = null;\r\n\t\tif ( is_null( $instance ) ) {\r\n\t\t\t$instance = new GeoMashupCommentUIManager();\r\n\t\t}\r\n\t\treturn $instance;\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options \r\n\t * @uses apply_filters geo_mashup_load_comment_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\t$load_comment_editor = ( !is_admin() && $geo_mashup_options->get( 'overall', 'located_object_name', 'comment' ) == 'true' ); \r\n\t\t$load_comment_editor = apply_filters( 'geo_mashup_load_comment_editor', $load_comment_editor );\r\n\r\n\t\t// If enabled, register all the interface elements\r\n\t\tif ( $load_comment_editor ) {\r\n\r\n\t\t\t// Form generation\r\n\t\t\tadd_action( 'comment_form', array( &$this, 'print_form' ) );\r\n\r\n\t\t\t// Form script\r\n\t\t\tadd_action( 'wp_footer', array( &$this, 'wp_footer' ) );\r\n\r\n\t\t\t// Form processing\r\n\t\t\tadd_action( 'comment_post', array( &$this, 'save_comment'), 10, 2 );\r\n\r\n\t\t\twp_enqueue_script( 'geo-mashup-loader' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the comment location editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t * @access public\r\n\t */\r\n\tpublic function print_form() {\r\n\t\t$this->add_form_script = true;\r\n\r\n\t\t// If there's a logged in user with a location, use that as a default.\r\n\t\t// The client-side location will override it if available\r\n\t\t$user = wp_get_current_user();\r\n\t\tif ( $user ) \r\n\t\t\t$default_location = GeoMashupDB::get_object_location( 'user', $user->ID );\r\n\t\tif ( !$default_location )\r\n\t\t\t$default_location = GeoMashupDB::blank_object_location();\r\n\t\t$default_summary = ( empty( $default_location->locality_name ) ? '' : $default_location->locality_name . ', ' ) .\r\n\t\t\t\t( empty( $default_location->admin_code ) ? '' : $default_location->admin_code );\r\n\r\n\t\t// Print the form\r\n\t\tprintf( '<label id=\"geo-mashup-summary-label\" for=\"geo-mashup-summary-input\" style=\"display:none;\">%s</label>', __( 'Written from (location)', 'GeoMashup' ) );\r\n\t\tprintf( '<input id=\"geo-mashup-summary-input\" style=\"display:none;\" type=\"text\" size=\"25\" value=\"%s\" />', $default_summary );\r\n\t\tprintf( '<img id=\"geo-mashup-busy-icon\" style=\"display:none;\" src=\"%s\" alt=\"%s\" />', path_join( GEO_MASHUP_URL_PATH, 'images/busy_icon.gif' ), __( 'Loading...', 'GeoMashup' ) );\r\n\t\t$input_format = '<input id=\"geo-mashup-%s-input\" name=\"comment_location[%s]\" type=\"hidden\" value=\"%s\" />';\r\n\t\tprintf( $input_format, 'lat', 'lat', $default_location->lat );\r\n\t\tprintf( $input_format, 'lng', 'lng', $default_location->lng );\r\n\t}\r\n\r\n\t/**\r\n\t * Print the form script in the footer if it's needed.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic function wp_footer() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\tif ( $this->add_form_script ) {\r\n\t\t\tGeoMashup::register_script( \r\n\t\t\t\t\t'geo-mashup-comment-form', \r\n\t\t\t\t\t'js/comment-form.js', \r\n\t\t\t\t\tarray( 'jquery' ), \r\n\t\t\t\t\tGEO_MASHUP_VERSION, \r\n\t\t\t\t\ttrue );\r\n\t\t\t\t\t\r\n\t\t\twp_localize_script( 'geo-mashup-comment-form', 'geo_mashup_comment_form_settings', array( 'geonames_username' => $geo_mashup_options->get( 'overall', 'geonames_username' ) ) );\r\n\t\t\twp_print_scripts( 'geo-mashup-comment-form' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a comment is saved, save any posted location with it.\r\n\t *\r\n\t * save_comment {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t */\r\n\tpublic function save_comment( $comment_id = 0, $approval = '' ) {\r\n\t\tif ( !$comment_id || 'spam' === $approval || empty( $_POST['comment_location'] ) || !is_array( $_POST['comment_location'] ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGeoMashupDB::set_object_location( 'comment', $comment_id, $_POST['comment_location'] );\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupCommentUIManager::get_instance();\r\n", "<?php \n/*\nPlugin Name: Geo Mashup\nPlugin URI: https://wordpress.org/plugins/geo-mashup/\nDescription: Save location for posts and pages, or even users and comments. Display these locations on Google, Leaflet, and OSM maps. Make WordPress into your GeoCMS.\nVersion: 1.10.4\nAuthor: Dylan Kuhn\nText Domain: GeoMashup\nDomain Path: /lang\nAuthor URI: http://www.cyberhobo.net/\nMinimum WordPress Version Required: 3.0\nLicense: GPL2+\n*/\n\n/*  Copyright 2015  Dylan Kuhn  (email : cyberhobo@cyberhobo.net)\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2 or later, as\n    published by the Free Software Foundation.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n/**\n * The main Geo Mashup plugin file loaded by WordPress.\n *\n * @package GeoMashup\n */\n\nif ( !class_exists( 'GeoMashup' ) ) {\n/**\n * The Geo Mashup static class.\n *\n * Used primarily for namespace, with methods called using the scope operator,\n * like echo GeoMashup::map();\n *\n * @package GeoMashup\n * @since 1.0\n * @access public\n * @static\n */\nclass GeoMashup {\n\t/**\n\t * Whether to add the click-to-load map script.\n\t *\n\t * @since 1.4\n\t * @var bool\n\t */\n\tprivate static $add_loader_script = false;\n\n\t/**\n\t * The basename of the Geo Mashup Search plugin when deactivated.\n\t * \n\t * @since 1.5\n\t * @var string\n\t */\n\tprivate static $deactivate_geo_search_basename = '';\n\n\t/**\n\t * Freemius integration.\n\t *\n\t * @since 1.10\n\t * @var Freemius\n\t */\n\tprivate static $freemius;\n\n\t/**\n\t * Load Geo Mashup.\n\t * \n\t * Initializations that can be done before init(). \n\t *\n\t * @since 1.2\n\t */\n\tpublic static function load() {\n\t\tGeoMashup::load_constants();\n\t\tload_plugin_textdomain( 'GeoMashup', '', path_join( GEO_MASHUP_DIRECTORY, 'lang' ) );\n\n\t\tGeoMashup::load_dependencies();\n\t\tGeoMashup::load_hooks();\n\t}\n\n\t/**\n\t *\tTest to see if the current request is for the Geo Mashup options page.\n\t *\n\t * @since 1.4\n\t *\n\t * @return bool Whether this is a an options page request.\n\t */\n\tpublic static function is_options_page() {\n\t\t// We may need this before $pagenow is set, but maybe this method won't always work?\n\t\treturn ( is_admin() and isset($_GET['page']) and GEO_MASHUP_PLUGIN_NAME === $_GET['page'] );\n\t}\n\n\t/**\n\t * WordPress init action.\n\t *\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action},\n\t * called by WordPress.\n\t *\n\t * @since 1.2\n\t */\n\tpublic static function init() {\n\t\tif ( GEO_MASHUP_DB_VERSION != GeoMashupDB::installed_version() ) {\n\t\t\t// We're active but not installed - try once more to install\n\t\t\tGeoMashupDB::install();\n\t\t}\n\t\tGeoMashup::load_styles();\n\t\tGeoMashup::load_scripts();\n\t}\n\n\t/**\n\t * Load relevant dependencies.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_dependencies() {\n\t\tglobal $geo_mashup_options;\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-options.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/gm-location-query.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/post-query.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-db.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-ui-managers.php' );\n\n\t\tif ( ! defined( 'GEO_MASHUP_UNIT_TESTING' ) &&\n             ! defined( 'GEO_MASHUP_FREEMIUS_OPT_OUT') &&\n             is_admin() ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/freemius.php' );\n\t\t\tself::$freemius = new GeoMashupFreemius();\n\t\t\tself::$freemius->load();\n\t\t}\n\n\t\tif ( $geo_mashup_options->get( 'overall', 'enable_geo_search' ) == 'true' ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-search.php' );\n\t\t}\n\n\t}\n\n\t/**\n\t * Load available integrations.\n\t *\n\t * @since 1.10.0\n\t */\n\tpublic static function load_integrations() {\n\n\t\tif ( defined( 'ICL_LANGUAGE_CODE' ) ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/wpml.php' );\n\t\t\tadd_action( 'wpml_loaded', array( 'GeoMashupWPML', 'load' ) );\n\t\t}\n\n\t\tif ( defined( 'SNAZZY_VERSION_NUMBER' ) ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/snazzy-maps.php' );\n\t\t\tGeoMashupSnazzyMaps::load();\n\t\t}\n\t}\n\n\t/**\n\t * Load relevant hooks.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_hooks() {\n\t\tglobal $geo_mashup_options;\n\n\t\tadd_action( 'init', array( __CLASS__, 'init' ) );\n\t\tadd_action( 'wp_scheduled_delete', array( __CLASS__, 'action_wp_scheduled_delete' ) );\n\n\t\tadd_action( 'plugins_loaded', array( __CLASS__, 'dependent_init' ), -1 );\n\t\tadd_action( 'plugins_loaded', array( __CLASS__, 'load_integrations' ) );\n\n\t\tadd_action( 'wp_ajax_geo_mashup_query', array( __CLASS__, 'geo_query') );\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_query', array( __CLASS__, 'geo_query') );\n\t\tadd_action( 'wp_ajax_geo_mashup_kml_attachments', array( __CLASS__, 'ajax_kml_attachments') );\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_kml_attachments', array( __CLASS__, 'ajax_kml_attachments') );\n\t\tadd_action( 'wp_ajax_geo_mashup_suggest_custom_keys', array( 'GeoMashupDB', 'post_meta_key_suggest' ) );\n\t\t\n\t\tregister_activation_hook( __FILE__, array( __CLASS__, 'activation_hook' ) );\n\n\t\tif (is_admin()) {\n\n\n\t\t\t// To add Geo Mashup settings page\n\t\t\tadd_action('admin_menu', array(__CLASS__, 'admin_menu'));\n\n\t\t\t// To make important announcements\n\t\t\tadd_action( 'admin_notices', array( __CLASS__, 'admin_notices' ) );\n\n\t\t\t// To add plugin listing links\n\t\t\tadd_filter( 'plugin_action_links', array( __CLASS__, 'plugin_action_links' ), 10, 2 );\n\t\t\tadd_filter( 'plugin_row_meta', array( __CLASS__, 'plugin_row_meta' ), 10, 2 );\n\n\t\t\t// Enqueue widget assets in admin\n\t\t\tadd_action( 'admin_enqueue_scripts', array( __CLASS__, 'widget_scripts'));\n\n\t\t} else {\n\n\t\t\t// This is a non-admin request\n\n\t\t\tif ($geo_mashup_options->get('overall','add_category_links') == 'true') {\n\t\t\t\t// To add map links to a category list - flaky, requires non-empty category description\n\t\t\t\tadd_filter('list_cats', array(__CLASS__, 'list_cats'), 10, 2);\n\t\t\t}\n\n\t\t\t// To output location meta tags in the page head\n\t\t\tadd_action('wp_head', array(__CLASS__, 'wp_head'));\n\n\t\t\t// To add footer output (like scripts)\n\t\t\tadd_action( 'wp_footer', array( __CLASS__, 'wp_footer' ) );\n\n\t\t\t// To allow shortcodes in the text widget\n\t\t\tif ( ! has_filter( 'widget_text', 'do_shortcode' ) ) {\n\t\t\t\tadd_filter( 'widget_text', 'do_shortcode', 11 );\n\t\t\t}\n\n\t\t\t// To add the GeoRSS namespace to feeds (not available for RSS 0.92)\n\t\t\tadd_action('rss2_ns', array(__CLASS__, 'rss_ns'));\n\t\t\tadd_action('atom_ns', array(__CLASS__, 'rss_ns'));\n\n\t\t\t// To add GeoRSS location to feeds\n\t\t\tadd_action('rss2_item', array(__CLASS__, 'rss_item'));\n\t\t\tadd_action('atom_entry', array(__CLASS__, 'rss_item'));\n\n\t\t\t// To add custom renderings\n\t\t\tadd_filter( 'query_vars', array( __CLASS__, 'query_vars' ) );\n\t\t\tadd_action( 'template_redirect', array( __CLASS__, 'template_redirect' ) );\n\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/shortcodes.php');\n\t\n\t\t}\n\t}\n\n\t/**\n\t * Define Geo Mashup constants. \n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_constants() {\n\t\tdefine('GEO_MASHUP_PLUGIN_NAME', plugin_basename(__FILE__));\n\t\tdefine('GEO_MASHUP_DIR_PATH', dirname( __FILE__ ));\n\t\tdefine('GEO_MASHUP_DIRECTORY', dirname( GEO_MASHUP_PLUGIN_NAME ) );\n\t\tdefine('GEO_MASHUP_URL_PATH', trim( plugin_dir_url( __FILE__ ), '/' ) );\n\t\tdefine('GEO_MASHUP_MAX_ZOOM', 20);\n\t\tdefine('GEO_MASHUP_VERSION', '1.10.4');\n\t\tdefine('GEO_MASHUP_DB_VERSION', '1.3');\n\t}\n\n\t/**\n\t * Load relevant scripts.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_scripts() {\n\t\tif ( self::is_options_page() ) {\n\t\t\twp_enqueue_script( 'jquery-ui-tabs' );\n\t\t\twp_enqueue_script( 'suggest' );\n\t\t\tif ( isset( $_POST['geo_mashup_run_tests'] ) ){\n\t\t\t\tself::register_script( 'qunit', 'js/qunit.js', array( 'jquery' ), GEO_MASHUP_VERSION, true );\n\t\t\t\tself::register_script( 'qunit-close-enough', 'js/qunit-close-enough.js', array( 'qunit' ), GEO_MASHUP_VERSION, true );\n\t\t\t\tself::register_script( 'geo-mashup-tests', 'js/qunit-tests.js', array( 'qunit-close-enough' ), GEO_MASHUP_VERSION, true );\n\t\t\t\twp_enqueue_script( 'geo-mashup-tests' );\n\t\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/tests.php' );\n\t\t\t}\n\t\t}\n\t\tif (is_admin()){\n\t\t\tself::register_script( 'geo-mashup-widget','js/widget.js', array( 'jquery' ), GEO_MASHUP_VERSION, true );\n\t\t}\n\t}\n\n\t/**\n\t * Load relevant styles.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_styles() {\n\t\tif ( self::is_options_page() ) {\n\t\t\tself::register_style( 'jquery-smoothness', 'css/jquery-ui.1.7.smoothness.css', array(), GEO_MASHUP_VERSION, 'screen' );\n\t\t\twp_enqueue_style( 'jquery-smoothness' );\n\t\t\tif ( isset( $_POST['geo_mashup_run_tests'] ) ){\n\t\t\t\tself::register_style( 'qunit', 'css/qunit.css', array(), GEO_MASHUP_VERSION, 'screen' );\n\t\t\t\twp_enqueue_style( 'qunit' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * WordPress hook to perform activation tasks.\n\t * \n\t * @since 1.4\n\t */\n\tpublic static function activation_hook() {\n\t\tglobal $geo_mashup_options;\n\t\tGeoMashupDB::install();\n\t\tif ( '' == $geo_mashup_options->get( 'overall', 'version' ) and '' != $geo_mashup_options->get( 'overall', 'google_key' ) ) {\n\t\t\t// Upgrading from a pre-1.4 version - don't set the default provider to Google v3\n\t\t\t$geo_mashup_options->set_valid_options(\n\t\t\t\tarray(\n\t\t\t\t\t'overall' => array(\n\t\t\t\t\t\t'map_api' => 'google',\n\t\t\t\t\t\t'version' => GEO_MASHUP_VERSION\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$geo_mashup_options->save();\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to supply an init action for plugins that would like to use Geo Mashup APIs.\n\t * \n\t * @since 1.4\n\t * @uses do_action() geo_mashup_init Fired when Geo Mashup is loaded and ready.\n\t */\n\tpublic static function dependent_init() {\n\t\tglobal $geo_mashup_options;\n\n\t\tdo_action( 'geo_mashup_init' );\n\n\t\tif ( class_exists( 'GeoMashupSearch' ) and defined( 'GeoMashupSearch::VERSION' ) ) {\n\n\t\t\t// The old search plugin is active - enable native geo search and flag for deactivation\n\t\t\tself::$deactivate_geo_search_basename = GeoMashupSearch::get_instance()->basename;\n\t\t\t$geo_mashup_options->set_valid_options(\n\t\t\t\tarray(\n\t\t\t\t\t'overall' => array(\n\t\t\t\t\t\t'enable_geo_search' => 'true',\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$geo_mashup_options->save();\n\t\t}\n\n\n\t}\n\n\t/**\n\t * WordPress action to remove expired Geo Mashup transients.\n\t * \n\t * @since 1.4.6\n\t * @uses apply_filters() geo_mashup_disable_scheduled_delete A way to disable the scheduled delete.\n\t */\n\tpublic static function action_wp_scheduled_delete() {\n\t\tglobal $wpdb, $_wp_using_ext_object_cache;\n\n\t\t\n\t\tif ( $_wp_using_ext_object_cache || apply_filters( 'geo_mashup_disable_scheduled_delete', false ) || defined( 'GEO_MASHUP_DISABLE_SCHEDULED_DELETE' ) )\n\t\t\treturn;\n\n\t\t$time = time();\n\t\t$expired = $wpdb->get_col( \"SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_gm%' AND option_value < {$time};\" );\n\n\t\tforeach( $expired as $transient ) {\n\t\t\t$key = str_replace('_transient_timeout_', '', $transient);\n\t\t\tdelete_transient($key);\n\t\t}\n\t\t$wpdb->query( \"OPTIMIZE TABLE {$wpdb->options}\" );\n\t}\n\n\t/**\n\t * Register the Geo Mashup script appropriate for the request.\n\t *\n\t * @since 1.4\n\t * \n\t * @param string $handle Global tag for the script.\n\t * @param string $src Path to the script from the root directory of Geo Mashup.\n\t * @param array $deps Array of dependency handles.\n\t * @param string|bool $ver Script version.\n\t * @param bool $in_footer Whether the script can be loaded in the footer.\n\t */\n\tpublic static function register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {\n\t\t// Use the minified version if SCRIPT_DEBUG is not set and it exists\n\t\tif ( ( !defined( 'SCRIPT_DEBUG' ) or !SCRIPT_DEBUG ) and '.js' === substr( $src, -3 ) ) {\n\t\t\t$min_src = substr( $src, 0, -3 ) . '.min.js';\n\t\t\tif ( is_readable( GEO_MASHUP_DIR_PATH . '/' . $min_src ) ) {\n\t\t\t\t$src = $min_src;\n\t\t\t}\n\t\t}\n\t\twp_register_script(\n\t\t\t\t$handle, \n\t\t\t\tplugins_url( $src, __FILE__ ), \n\t\t\t\t$deps, \n\t\t\t\t$ver, \n\t\t\t\t$in_footer );\n\t}\n\n\t/**\n\t * Register the Geo Mashup style appropriate for the request.\n\t *\n\t * @since 1.4\n\t *\n\t * @param string $handle Global tag for the style.\n\t * @param string $src Path to the stylesheet from the root directory of Geo Mashup.\n\t * @param array $deps Array of dependency handles.\n\t * @param string|bool $ver Script version.\n\t * @param string $media Stylesheet media target.\n\t */\n\tpublic static function register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {\n\t\t// Use the minified version if SCRIPT_DEBUG is not set and it exists\n\t\tif ( ( !defined( 'SCRIPT_DEBUG' ) or !SCRIPT_DEBUG ) and '.css' === substr( $src, -4 ) ) {\n\t\t\t$min_src = substr( $src, 0, -4 ) . '.min.css';\n\t\t\tif ( is_readable( GEO_MASHUP_DIR_PATH . '/' . $min_src ) ) {\n\t\t\t\t$src = $min_src;\n\t\t\t}\n\t\t}\n\n\t\twp_register_style( $handle, plugins_url( $src, __FILE__ ), $deps, $ver, $media );\n\t}\n\n\t/**\n\t * WordPress action to add things like scripts to the footer.\n\t * \n\t * @since 1.4\n\t */\n\tpublic static function wp_footer() {\n\t\tif ( self::$add_loader_script ) {\n\t\t\tself::register_script( \n\t\t\t\t'geo-mashup-loader', \n\t\t\t\t'js/loader.js', \n\t\t\t\tarray(), \n\t\t\t\tGEO_MASHUP_VERSION, \n\t\t\t\ttrue );\n\t\t\t\t\n\t\t\twp_print_scripts( 'geo-mashup-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * WordPress filter to add Geo Mashup query variables.\n\t *\n\t * @since 1.3\n\t * @param array $public_query_vars\n\t * @return array\n\t */\n\tpublic static function query_vars( $public_query_vars ) {\n\t\t$public_query_vars[] = 'geo_mashup_content';\n\t\treturn $public_query_vars;\n\t}\n\n\t/**\n\t *\tLocate a Geo Mashup template.\n\t * \n\t * Geo Mashup looks for templates given a certain base name. Given a base \n\t * name of 'info-window', it will return the first of:\n\t * \t'geo-mashup-info-window.php' in the active theme directory\n\t * \t'info-window.php' in the geo-mashup-custom plugin directory\n\t * \t'default-templates/info-window.php' in the geo-mashup plugin directory\n\t *\n\t * @since 1.4\n\t * \n\t * @param string $template_base The base name of the template.\n\t * @return string The file path of the template found.\n\t */\n\tpublic static function locate_template( $template_base ) {\n\t\tglobal $geo_mashup_custom;\n\t\t$template = locate_template( array(\"geo-mashup-$template_base.php\") );\n\t\tif ( empty( $template ) and isset( $geo_mashup_custom ) and $geo_mashup_custom->file_url( $template_base . '.php' ) ) {\n\t\t\t$template = path_join( $geo_mashup_custom->dir_path, $template_base . '.php' );\n\t\t}\n\t\tif ( empty( $template ) or !is_readable( $template ) ) {\n\t\t\t$template = path_join( GEO_MASHUP_DIR_PATH, \"default-templates/$template_base.php\" );\n\t\t}\n\t\tif ( empty( $template ) or !is_readable( $template ) ) {\n\t\t\t// If all else fails, just use the default info window template\n\t\t\t$template = path_join( GEO_MASHUP_DIR_PATH, 'default-templates/info-window.php' );\n\t\t}\n\t\treturn $template;\n\t}\n\n\t/**\n\t * WordPress action to deliver templated Geo Mashup content.\n\t *\n\t * @since 1.3\n\t *\n\t * @uses geo_query\n\t * @uses render_map\n\t */\n\tpublic static function template_redirect() {\n\t\t$geo_mashup_content = get_query_var( 'geo_mashup_content' );\n\t\tif ( ! empty( $geo_mashup_content ) ) {\n\n\t\t\t// The parameter's purpose is to get us here, we can remove it now\n\t\t\tunset( $_GET['geo_mashup_content'] );\n\n\t\t\t// Call the function corresponding to the content request\n\t\t\t// This provides some security, as only implemented methods will be executed\n\t\t\t$method = str_replace( '-', '_', $geo_mashup_content );\n\t\t\tcall_user_func( array( __CLASS__, $method ) );\n\t\t\texit();\n\t\t}\n\t}\n\n\t/**\n\t * Process an AJAX geo query.\n\t *\n\t * @since 1.3\n\t * @uses geo-query.php\n\t */\n\tpublic static function geo_query() {\n\t\trequire_once( 'geo-query.php' );\n\t\texit();\n\t}\n\n\t/**\n\t * Process an iframe map request.\n\t *\n\t * @since 1.3\n\t * @uses render-map.php\n\t */\n\tprivate static function render_map() {\n\t\trequire_once( 'render-map.php' );\n\t\tGeoMashupRenderMap::render_map();\n\t\texit();\n\t}\n\n\t/**\n\t * WordPress action to perform an ajax edit operation and echo results.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function ajax_edit() {\n\t\tcheck_ajax_referer( 'geo-mashup-edit', 'geo_mashup_nonce' );\n\t\tunset( $_GET['_wpnonce'] );\n\n\t\t$status = array( 'request' => 'ajax-edit', 'code' => 200 );\n\t\tif ( isset( $_POST['geo_mashup_object_id'] ) ) {\n\t\t\t$status['object_id'] = $_POST['geo_mashup_object_id'];\n\t\t} else {\n\t\t\t$status['code'] = 400;\n\t\t\t$status['message'] = __( 'No object id posted.', 'GeoMashup' );\n\t\t\t$status['object_id'] = '?';\n\t\t}\n\n\t\t/** @todo add an option for a user capability check here? */\n\n\t\tif ( 200 == $status['code'] and ! empty( $_POST['geo_mashup_ui_manager'] ) ) {\n\t\t\t$ui_manager = GeoMashupUIManager::get_instance( $_POST['geo_mashup_ui_manager'] );\n\t\t\t$result = $ui_manager->save_posted_object_location( $status['object_id'] );\n\t\t\tif ( is_wp_error( $result ) ) {\n\t\t\t\t$status['code'] = 500;\n\t\t\t\t$status['message'] = $result->get_error_message();\n\t\t\t}\n\t\t}\n\n\t\tif ( 200 == $status['code'] ) {\n\t\t\tif ( ! empty( $_REQUEST['geo_mashup_update_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location updated.', 'GeoMashup' );\n\t\t\t} else if ( ! empty( $_REQUEST['geo_mashup_delete_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location deleted.', 'GeoMashup' );\n\t\t\t} else if ( ! empty( $_REQUEST['geo_mashup_add_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location added.', 'GeoMashup' );\n\t\t\t}\n\t\t} \n\n\t\techo json_encode( array( 'status' => $status ) );\n\t\texit();\n\t}\n\n\t/**\n\t * Toggle limiting of query_posts to located posts only, \n\t * with Geo Mashup query extensions.\n\t *\n\t * When enabled, only posts with locations will be returned from\n\t * WordPress query_posts() and related functions. Also adds Geo Mashup\n\t * public query variables.\n\t *\n\t * Caution - what if a future Geo Mashup incorporates multiple locations per object?\n\t *\n\t * @since 1.3\n\t *\n\t * @param bool $yes_or_no Whether to activate the join or not.\n\t */\n\tpublic static function join_post_queries( $yes_or_no ) {\n\t\tGeoMashupDB::join_post_queries( $yes_or_no );\n\t}\n\n\t/**\n\t * Helper to turn a string of key-value pairs into an associative array.\n\t *\n\t * @since 1.0\n\t *\n\t * @param string $glue1 Pair separator.\n\t * @param string $glue2 Key/value separator.\n\t * @param string $str String to explode. \n\t * @return array The associative array.\n\t */\n\tpublic static function explode_assoc($glue1, $glue2, $str) {\n\t\t$array2=explode($glue2, $str);\n\t\t$array3=array();\n\t\tforeach($array2 as  $val) {\n\t\t\t$pos=strpos($val,$glue1);\n\t\t\t$key=substr($val,0,$pos);\n\t\t\t$array3[$key] =substr($val,$pos+1,strlen($val));\n\t\t}\n\t\treturn $array3;\n\t}\n\n\t/**\n\t * Helper to turn an associative array into a string of key-value pairs.\n\t * \n\t * @since 1.0\n\t *\n\t * @param string $inner_glue Key/value separator.\n\t * @param string $outer_glue Pair separator.\n\t * @param array $array Array to implode.\n\t * @param mixed $skip_empty Whether to include empty values in output.\n\t * @param mixed $urlencoded Whether to URL encode the output.\n\t * @return string The imploded string.\n\t */\n\tpublic static function implode_assoc($inner_glue, $outer_glue, $array, $skip_empty=false, $urlencoded=false) {\n\t$output = array();\n\t\tforeach($array as $key=>$item) {\n\t\t\tif (!$skip_empty || isset($item)) {\n\t\t\t\tif ($urlencoded)\n\t\t\t\t\t$output[] = preg_replace('/\\s/', ' ', $key.$inner_glue.urlencode($item));\n\t\t\t\telse\n\t\t\t\t\t$output[] = preg_replace('/\\s/', ' ', $key.$inner_glue.$item);\n\t\t\t}\n\t\t}\n\t\treturn implode($outer_glue, $output);\n\t}\n\n\t/**\n\t * Guess the best language code for the current context.\n\t * \n\t * Takes some plugins and common practices into account.\n\t * \n\t * @since 1.4\n\t * \n\t * @return string Language code.\n\t */\n\tpublic static function get_language_code() {\n\t\tif ( isset( $_GET['lang'] ) ) {\n\t\t\t// A language override technique is to use this querystring parameter\n\t\t\t$language_code = $_GET['lang'];\n\t\t} else if ( function_exists( 'qtrans_getLanguage' ) ) {\n\t\t\t// qTranslate integration\n\t\t\t$language_code = qtrans_getLanguage();\n\t\t} else {\n\t\t\t$language_code = get_locale();\n\t\t}\n\t\treturn apply_filters( 'geo_mashup_get_language_code', $language_code );\n\t}\n\n\t/**\n\t * Get post types available for location searches.\n\t * \n\t * This includes post types included via the located_post_types option,\n\t * as well as post types registered with exclude_from_search set to \n\t * <em>false</em>.\n\t * \n\t * @since 1.4.5\n\t * \n\t * @return array Array of post type strings.\n\t */\n\tpublic static function get_searchable_post_types() {\n\t\tglobal $geo_mashup_options;\n\t\t$located_types = $geo_mashup_options->get( 'overall', 'located_post_types' );\n\t\t$searchable_types = array_keys( get_post_types( array('exclude_from_search' => false) ) );\n\t\treturn array_unique( array_merge( $located_types, $searchable_types ) );\n\t}\n\n\t/**\n\t * Get an array of URLs of KML or KMZ attachments for a post.\n\t * \n\t * @since 1.1\n\t *\n\t * @param int $post_id\n\t * @return array Array of URL strings.\n\t */\n\tpublic static function get_kml_attachment_urls($post_id) {\n\t\tif ( empty( $post_id ) ) {\n\t\t\treturn array();\n\t\t}\n\t\t$args = array(\n\t\t\t'post_type' => 'attachment',\n\t\t\t'numberposts' => -1,\n\t\t\t'post_status' => null,\n\t\t\t'post_mime_type' => array(\n\t\t\t\t'application/vnd.google-earth.kml+xml',\n\t\t\t\t'application/vnd.google-earth.kmz',\n\t\t\t\t'application/octet-stream'\n\t\t\t),\n\t\t\t'post_parent' => $post_id\n\t\t\t); \n\t\t$attachments = get_posts($args);\n\t\t$urls = array();\n\t\tif ($attachments) {\n\t\t\tforeach ($attachments as $attachment) {\n\t\t\t\t$url = wp_get_attachment_url( $attachment->ID ); \n\t\t\t\t// Backwards compatibility: include KML attachments with the incorrect octet-stream mime type\n\t\t\t\tif ( 'application/octet-stream' != $attachment->post_mime_type or 'kml' == substr( $url, -3 ) ) {\n\t\t\t\t\tarray_push( $urls, $url );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $urls;\n\t}\n\n\t/**\n\t * Echo a JSONP array of URLs of KML or KMZ attachments for posts.\n\t *\n\t * since 1.4\n\t */\n\tpublic static function ajax_kml_attachments() {\n\t\t$urls = array(); \n\t\tif ( !empty( $_REQUEST['post_ids'] ) ) {\n\t\t\t$post_ids = array_map( 'intval', explode( ',', $_REQUEST['post_ids'] ) );\n\t\t\tforeach( $post_ids as $post_id ) {\n\t\t\t\t$urls = array_merge( $urls, self::get_kml_attachment_urls( $post_id ) );\n\t\t\t}\n\t\t}\n\t\t$json = json_encode( $urls );\n\t\tif ( isset( $_REQUEST['callback'] ) )\n\t\t\t$json = $_REQUEST['callback'] . '(' . $json . ')';\n\t\techo $json;\n\t\texit();\n\t}\n\n\t/**\n\t * WordPress action to add relevant geo meta tags to the document head.\n\t *\n\t * wp_head {@link http://codex.wordpress.org/Plugin_API/Action_Reference#TemplateActions action},\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function wp_head() {\n\t\tglobal $wp_query;\n\n\t\tif (is_single())\n\t\t{\n\t\t\t$loc = GeoMashupDB::get_object_location( 'post', $wp_query->post->ID );\n\t\t\tif (!empty($loc)) {\n\t\t\t\t$title = esc_html(convert_chars(strip_tags(get_bloginfo('name')).\" - \".$wp_query->post->post_title));\n\t\t\t\techo '<meta name=\"ICBM\" content=\"' . esc_attr( $loc->lat . ', ' . $loc->lng ) . '\" />' . \"\\n\";\n\t\t\t\techo '<meta name=\"dcterms.title\" content=\"' . esc_attr( $title ) . '\" />' . \"\\n\";\n\t\t\t\techo '<meta name=\"geo.position\" content=\"' .  esc_attr( $loc->lat . ';' . $loc->lng ) . '\" />' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Query object locations and return JSON.\n\t *\n\t * Offers customization per object location via a filter, geo_mashup_locations_json_object.\n\t *\n\t * @since 1.2\n\t * @uses GeoMashupDB::get_object_locations()\n\t * @uses apply_filters() the_title Filter post titles.\n\t * @uses apply_filters() geo_mashup_locations_json_object Filter each location associative array before conversion to JSON.\n\t * @global array $geo_mashup_options\n\t *\n\t * @param string|array $query_args Query variables for GeoMashupDB::get_object_locations().\n\t * @param string $format (optional) 'JSON' (default) or ARRAY_A\n\t * @return string Queried object locations JSON ( { \"object\" : [...] } ).\n\t */\n\tpublic static function get_locations_json( $query_args, $format = 'JSON' ) {\n\t\t$default_args = array( 'object_name' => 'post' );\n\t\t$query_args = wp_parse_args( $query_args, $default_args );\n\t\t$json_objects = array();\n\t\t$objects = GeoMashupDB::get_object_locations( $query_args );\n\t\tif ( $objects ) {\n\t\t\tforeach ($objects as $object) {\n\t\t\t\t$obj = self::augment_map_object_location( $query_args['object_name'], $object );\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$json_objects[] = $obj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( ARRAY_A == $format ) \n\t\t\treturn array( 'objects' => $json_objects );\n\t\telse\n\t\t\treturn json_encode( array( 'objects' => $json_objects ) );\n\t}\n\n\t/**\n\t * Convert deprecated attribute names.\n\t *\n\t * @since 1.3\n\t * \n\t * @param array $atts Attributes to modify.\n\t * @return array\n\t */\n\tprivate static function convert_map_attributes( $atts ) {\n\t\t$attribute_conversions = array( \n\t\t\t'auto_open_info_window' => 'auto_info_open',\n\t\t\t'open_post_id' => 'open_object_id'\n\t\t);\n\t\tforeach ( $attribute_conversions as $old_key => $new_key ) {\n\t\t\tif ( isset( $atts[$old_key] ) ) {\n\t\t\t\tif ( ! isset( $atts[$new_key] ) ) {\n\t\t\t\t\t$atts[$new_key] = $atts[$old_key];\n\t\t\t\t}\n\t\t\t\tunset( $atts[$old_key] );\n\t\t\t}\n\t\t}\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * Augment an object location for display.\n\t *\n\t * Adds term data, object type, author, and label.\n\t * @since 1.5\n\t *\n\t * @param string $object_name The object type, e.g. 'post', 'user', etc.\n\t * @param object $object_location The object location data.\n\t * @return array The augmented object location data.\n\t */\n\tprivate static function augment_map_object_location( $object_name, $object_location ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$term_ids_by_taxonomy = array();\n\t\t$author_name = '';\n\t\tif ( 'post' == $object_name ) {\n\n\t\t\t// Filter the title\n\t\t\t$object_location->label = sanitize_text_field( apply_filters( 'the_title', $object_location->label, $object_location->object_id ) );\n\n\t\t\t// Add terms\n\t\t\tif ( defined( 'GEO_MASHUP_DISABLE_CATEGORIES' ) and GEO_MASHUP_DISABLE_CATEGORIES ) \n\t\t\t\t$include_taxonomies = array();\n\t\t\telse\n\t\t\t\t$include_taxonomies = $geo_mashup_options->get( 'overall', 'include_taxonomies' );\n\t\t\t\n\t\t\tforeach( $include_taxonomies as $include_taxonomy ) {\n\t\t\t\t$term_ids_by_taxonomy[$include_taxonomy] = array();\n\t\t\t\t// Not using wp_get_object_terms(), which doesn't allow for persistent caching\n\t\t\t\t$tax_terms = get_the_terms( $object_location->object_id, $include_taxonomy );\n\t\t\t\tif ( $tax_terms ) {\n\t\t\t\t\t// terms are sometimes indexed in order, sometimes by id, so wp_list_pluck() doesn't work\n\t\t\t\t\tforeach ( $tax_terms as $term ) {\n\t\t\t\t\t\t$term_ids_by_taxonomy[$include_taxonomy][] = $term->term_id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add post author name\n\t\t\tif ( defined( 'GEO_MASHUP_DISABLE_AUTHOR_NAME' ) and GEO_MASHUP_DISABLE_AUTHOR_NAME ) \n\t\t\t\t$author = null;\n\t\t\telse\n\t\t\t\t$author = get_userdata( $object_location->post_author );\n\n\t\t\tif ( empty( $author ) ) \n\t\t\t\t$author_name = '';\n\t\t\telse \n\t\t\t\t$author_name = $author->display_name;\n\t\t}\n\n\t\t$augmented_object = array(\n\t\t\t'object_name' => $object_name,\n\t\t\t'object_id' => $object_location->object_id,\n\t\t\t// We should be able to use real UTF-8 characters in titles\n\t\t\t// Helps with the spelling-out of entities in tooltips\n\t\t\t'title' => html_entity_decode( $object_location->label, ENT_COMPAT, 'UTF-8' ),\n\t\t\t'lat' => $object_location->lat,\n\t\t\t'lng' => $object_location->lng,\n\t\t\t'author_name' => $author_name,\n\t\t\t'terms' => $term_ids_by_taxonomy,\n\t\t);\n\n\t\t// Allow companion plugins to add data with legacy filter name\n\t\treturn apply_filters( 'geo_mashup_locations_json_object', $augmented_object, $object_location );\n\t}\n\n\t/**\n\t * Build the data for a javascript map.\n\t *\n\t * Parameters are used both to retrieve data and as options to\n\t * eventually pass to the javascript.\n\t *\n\t * @since 1.4\n\t * @uses GeoMashup::get_locations_json()\n\t *\n\t * @global array $geo_mashup_options\n\t * @global object $geo_mashup_custom\n\t * @param array $query Query parameters\n\t * @return array|WP_Error Map data ready to be rendered, or a message\n\t */\n\tpublic static function build_map_data( $query ) {\n\t\tglobal $geo_mashup_options, $geo_mashup_custom;\n\t\t$defaults = array(\n\t\t\t'map_api' => $geo_mashup_options->get( 'overall', 'map_api' )\n\t\t);\n\t\t$query = wp_parse_args( $query, $defaults );\n\t\t$object_id = isset( $query['object_id'] ) ? $query['object_id'] : 0;\n\t\tunset( $query['object_id'] );\n\n\t\t$map_data = $query + array(\n\t\t\t'ajaxurl' => admin_url( 'admin-ajax.php' ),\n\t\t\t'siteurl' => home_url( '/' ), // qTranslate doesn't work with get_option( 'home' )\n\t\t\t'url_path' => GEO_MASHUP_URL_PATH,\n\t\t\t'template_url_path' => get_stylesheet_directory_uri()\n\t\t);\n\t\tif ( isset( $geo_mashup_custom ) ) {\n\t\t\t$map_data['custom_url_path'] = $geo_mashup_custom->url_path;\n\t\t}\n\n\t\t$map_content = ( isset( $query['map_content'] ) ) ? $query['map_content'] : null;\n\t\t$object_name = ( isset( $query['object_name'] ) ) ? $query['object_name'] : 'post';\n\n\t\tif ( $map_content == 'single') {\n\n\t\t\t$object_location = GeoMashupDB::get_object_location( $object_name, $object_id );\n\t\t\tif ( !empty( $object_location ) ) {\n\t\t\t\t$augmented_location = self::augment_map_object_location( $object_name, $object_location );\n\t\t\t\t$map_data['object_data'] = array( 'objects' => array( $augmented_location ) );\n\t\t\t}\n\n\t\t\t$options = $geo_mashup_options->get( 'single_map' );\n\t\t\t$map_data = array_merge ( $options, $map_data );\n\n\t\t\tif ( 'post' == $object_name ) {\n\t\t\t\t$kml_urls = self::get_kml_attachment_urls( $object_id );\n\t\t\t\tif (count($kml_urls)>0) {\n\t\t\t\t\t$map_data['load_kml'] = array_pop( $kml_urls );\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else { // $map_content != 'single'\n\n\t\t\t$map_data['context_object_id'] = $object_id;\n\n\t\t\tif ( $map_content == 'contextual' ) {\n\n\t\t\t\t$options = $geo_mashup_options->get( 'context_map' );\n\t\t\t\t// If desired we could make these real options\n\t\t\t\t$options['auto_info_open'] = 'false';\n\n\t\t\t} else { // $map_content == 'global'\n\n\t\t\t\t$options = $geo_mashup_options->get( 'global_map' );\n\n\t\t\t\t// Term options handled during render\n\t\t\t\tunset( $options['term_options'] );\n\n\t\t\t\tif ( empty( $query['show_future'] ) )\n\t\t\t\t\t$query['show_future'] = $options['show_future'];\n\n\t\t\t\tif ( is_null( $map_content ) ) \n\t\t\t\t\t$options['map_content'] = 'global';\n\n\t\t\t}\n\n\t\t\t// Determine which taxonomies to include, if any\n\t\t\tif ( ( defined( 'GEO_MASHUP_DISABLE_CATEGORIES' ) and GEO_MASHUP_DISABLE_CATEGORIES ) )\n\t\t\t\t$options['include_taxonomies'] = array();\n\t\t\telse\n\t\t\t\t$options['include_taxonomies'] = $geo_mashup_options->get( 'overall', 'include_taxonomies' );\n\n\t\t\tif ( isset( $options['add_google_bar'] ) and 'true' == $options['add_google_bar'] ) {\n\t\t\t\t$options['adsense_code'] = $geo_mashup_options->get( 'overall', 'adsense_code' );\n\t\t\t}\n\n\t\t\t// We have a lot map control parameters that don't effect the locations query,\n\t\t\t// but only the relevant ones are used\n\t\t\t$map_data['object_data'] = self::get_locations_json( $query, ARRAY_A );\n\n\t\t\t// Incorporate parameters from the query and options\n\t\t\t$map_data = array_merge( $query, $map_data );\n\t\t\t$map_data = array_merge( $options, $map_data );\n\n\t\t} // $map_content != 'single'\n\n\t\tif ( empty( $map_data['object_data']['objects'] ) and !isset( $map_data['load_empty_map'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_map_data_error',\n\t\t\t\t__( 'Geo Mashup omitted a map with no located objects found.', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\t\tunset( $map_data['load_empty_map'] );\n\n\t\treturn $map_data;\n\t}\n\n\t/**\n\t * Make an URL with querystring added to the site's home URL.\n\t *\n\t * @since 1.4\n\t *\n\t * @static\n\t * @param array $query Associative array of querystring parameters.\n\t * @return string HTML-ready URL.\n\t */\n\tpublic static function build_home_url( $query = array() ) {\n\n\t\t// We want domain changes or language parameters from WPML\n\t\t// It won't provide them for any path but '/'\n\t\t$home_url = home_url( '/' );\n\t\t$home_url_parts = parse_url( $home_url );\n\n\t\t// Language plugins may also add query parameters to home_url(). We'll add to these.\n\t\t$home_url_query_parts = array();\n\t\tif ( !empty( $home_url_parts['query'] ) ) {\n\t\t\twp_parse_str( $home_url_parts['query'], $home_url_query_parts );\n\t\t\t$query = array_merge( $home_url_query_parts, $query );\n\t\t}\n\n\t\tif ( !empty( $query ) )\n\t\t\t$home_url = htmlspecialchars( add_query_arg( $query, $home_url ) );\n\n\t\treturn $home_url;\n\t}\n\n\t/**\n\t * Add a default 'lang' attribute if there is none and a language plugin can provide one.\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function maybe_add_language_attribute( $atts ) {\n\t\tif ( !empty( $atts['lang'] ) ) {\n\t\t\treturn $atts;\n\t\t}\n\t\tif ( function_exists( 'qtrans_getLanguage' ) ) {\n\t\t\t// qTranslate integration\n\t\t\t$atts['lang'] = qtrans_getLanguage();\n\t\t} else if ( defined( 'ICL_LANGUAGE_CODE' ) ) {\n\t\t\t// WPML integration\n\t\t\t$atts['lang'] = ICL_LANGUAGE_CODE;\n\t\t}\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * Find the ID and location of the container object if it exists\n\t * @since 1.9.0\n\t * @param string $object_name\n\t * @return int|null|string\n\t */\n\tprivate static function context_object_id( $object_name ) {\n\t\tglobal $wp_query, $in_comment_loop;\n\n\t\tif ( 'post' == $object_name and $wp_query->in_the_loop ) {\n\t\t\treturn $wp_query->post->ID;\n\t\t}\n\n\t\tif ( 'comment' == $object_name and $in_comment_loop ) {\n\t\t\treturn get_comment_ID();\n\t\t}\n\n\t\tif ( 'user' == $object_name and $wp_query->post ) {\n\t\t\treturn $wp_query->post->post_author;\n\t\t}\n\n\t\treturn null;\n\t}\n\t/**\n\t * If no object ID has been supplied, try to determine one contextually.\n\t * @since 1.9.0\n\t * @param array $atts May add object_id\n\t * @param string $object_name\n\t * @return string\n\t */\n\tprivate static function resolve_map_content( &$atts, $object_name ) {\n\t\t// Map content type isn't required, if empty we'll choose one\n\t\t$map_content = isset( $atts['map_content'] ) ? $atts['map_content'] : null;\n\n\t\t$context_object_id = self::context_object_id( $object_name );\n\n\t\t$context_location = null;\n\n\t\tif ( empty( $atts['object_id'] ) and ! empty( $context_object_id ) ) {\n\t\t\t// If we found a context object, we'll query for that by default\n\t\t\t$atts['object_id'] = $context_object_id;\n\t\t\t$context_location = GeoMashupDB::get_object_location( $object_name, $context_object_id );\n\t\t}\n\n\t\tif ( empty( $atts['object_id'] ) and 'single' == $map_content and 'post' == $object_name ) {\n\t\t\t// In secondary post loops we won't find a context object\n\t\t\t// but can at least allow explicit single maps\n\t\t\t$atts['object_id'] = get_the_ID();\n\t\t}\n\n\t\tif ( empty( $map_content ) and !empty( $atts['object_ids'] ) ) {\n\t\t\t$map_content = 'global';\n\t\t}\n\n\t\tif ( empty( $map_content ) ) {\n\n\t\t\tif ( empty( $context_object_id ) ) {\n\t\t\t\t$map_content = 'contextual';\n\t\t\t} else if ( empty( $context_location ) ) {\n\t\t\t\t// Not located, go global\n\t\t\t\t$map_content = 'global';\n\t\t\t} else {\n\t\t\t\t// Located, go single\n\t\t\t\t$map_content = 'single';\n\t\t\t}\n\n\t\t} else if ( $map_content instanceof WP_Query ) {\n\n\t\t\t// We've been given a post query, put its contents in a global map\n\t\t\t$atts['object_ids'] = implode( ',', wp_list_pluck( $map_content->posts, 'ID' ) );\n\t\t\t$map_content = 'global';\n\n\t\t}\n\n\t\treturn $map_content;\n\t}\n\n\t/**\n\t * Get a context object's ID according to name.\n\t * @since 1.9.0\n\t * @param string $object_name\n\t * @param object $context_object\n\t * @return int|null\n\t */\n\tprivate static function object_id_by_name( $object_name, $context_object ) {\n\t\tif ( 'post' == $object_name ) {\n\t\t\treturn $context_object->ID;\n\t\t}\n\t\tif ( 'user' == $object_name ) {\n\t\t\treturn $context_object->post_author;\n\t\t}\n\t\tif ( 'comment' == $object_name ) {\n\t\t\treturn $context_object->comment_ID;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, object_ids, and error_comment\n\t * @param string $object_name\n\t * @param array $click_to_load_options\n\t * @return array\n\t */\n\tprivate static function add_contextual_attributes( $atts, $object_name, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options, $wp_query;\n\n\t\t$atts['map_content'] = 'contextual';\n\t\t$atts += $geo_mashup_options->get( 'context_map', $click_to_load_options );\n\t\t$object_ids = array();\n\t\tif ( 'comment' == $object_name ) {\n\t\t\t$context_objects = $wp_query->comments;\n\t\t} else {\n\t\t\t$context_objects = $wp_query->posts;\n\t\t}\n\t\tif ( !is_array( $context_objects ) ) {\n\t\t\t$atts['error_comment'] = '<!-- ' . __( 'Geo Mashup found no objects to map in this context', 'GeoMashup' ) . '-->';\n\t\t\treturn $atts;\n\t\t}\n\t\tforeach ( $context_objects as $context_object ) {\n\t\t\t$object_ids[] = self::object_id_by_name( $object_name, $context_object );\n\t\t}\n\t\t$atts['object_ids'] = implode( ',', $object_ids );\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, error_comment\n\t * @param string $object_name\n\t * @param array $click_to_load_options\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_single_attributes( $atts, $object_name, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$atts['map_content'] = 'single';\n\t\t$atts += $geo_mashup_options->get( 'single_map', $click_to_load_options );\n\t\tif ( empty( $atts['object_id'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_single_attribute_error',\n\t\t\t\t__( 'Geo Mashup found no current object to map', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\n\t\t$single_location = GeoMashupDB::get_object_location( $object_name, $atts['object_id'] );\n\t\tif ( empty( $single_location ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_single_attribute_error',\n\t\t\t\t__( 'Geo Mashup omitted a map for an object with no location', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, ignore_url, limit, and error_comment\n\t * @param array $click_to_load_options\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_global_attributes( $atts, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options;\n\n\t\tif ( isset( $_GET['template'] ) and 'full-post' == $_GET['template'] ) {\n\t\t\t// Global maps tags in response to a full-post query can infinitely nest, prevent this\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_global_attribute_error',\n\t\t\t\t__( 'Geo Mashup map omitted to avoid nesting maps', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\t\t$atts['map_content'] = 'global';\n\n\t\t// Global maps on a page will make use of query string arguments unless directed otherwise\n\t\t$ignore_url = false;\n\t\tif ( isset( $atts['ignore_url'] ) && 'true' == $atts['ignore_url'] ) {\n\t\t\t$ignore_url = true;\n\t\t\tunset( $atts['ignore_url'] );\n\t\t}\n\n\t\tif ( isset( $_SERVER['QUERY_STRING'] ) and !$ignore_url ) {\n\t\t\t$atts = wp_parse_args( $_SERVER['QUERY_STRING'], $atts );\n\t\t}\n\n\t\t$atts += $geo_mashup_options->get( 'global_map', $click_to_load_options );\n\n\t\t// Don't query more than max_posts\n\t\t$max_posts = $geo_mashup_options->get( 'global', 'max_posts' );\n\t\tif ( empty( $atts['limit'] ) and !empty( $max_posts ) ) {\n\t\t\t$atts['limit'] = $max_posts;\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @staticvar $map_number Used to index maps per request.\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function parse_map_attributes( $atts ) {\n\t\tstatic $map_number = 1;\n\n\t\t$atts = wp_parse_args( $atts );\n\n\t\tif ( !isset( $atts['name'] ) ) {\n\t\t\t$atts['name'] = 'gm-map-' . $map_number;\n\t\t\t$map_number++;\n\t\t}\n\n\t\t$atts = self::maybe_add_language_attribute( $atts );\n\n\t\treturn self::convert_map_attributes( $atts );\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_map_content_attributes( array $atts ) {\n\n\t\t// Default query is for posts\n\t\t$object_name = ( isset( $atts['object_name'] ) ) ? $atts['object_name'] : 'post';\n\n\t\t$map_content = self::resolve_map_content( $atts, $object_name );\n\n\t\t$click_to_load_options = array( 'click_to_load', 'click_to_load_text' );\n\n\t\tif ( 'contextual' == $map_content ) {\n\n\t\t\t$atts = self::add_contextual_attributes( $atts, $object_name, $click_to_load_options );\n\n\t\t} else if ( 'single' == $map_content ) {\n\n\t\t\t$atts = self::add_single_attributes( $atts, $object_name, $click_to_load_options );\n\n\t\t} else if ( 'global' == $map_content ) {\n\n\t\t\t$atts = self::add_global_attributes( $atts, $click_to_load_options );\n\n\t\t} else {\n\n\t\t\t$atts = new WP_Error(\n\t\t\t\t'geo_mashup_map_content_attributes',\n\t\t\t\t'Unrecognized value for map_content: \"'.$map_content.'\"'\n\t\t\t);\n\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts limit may be added\n\t * @param array $map_data\n\t * @param string $click_to_load\n\t * @param string $click_to_load_text\n\t * @return mixed|string|void\n\t */\n\tprivate static function build_map_image( &$atts, $map_data, $click_to_load, $click_to_load_text ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t// Static maps have a limit of 50 markers: http://code.google.com/apis/maps/documentation/staticmaps/#Markers\n\t\t$atts['limit'] = empty( $atts['limit'] ) ? 50 : $atts['limit'];\n\n\t\tif ( empty( $map_data['object_data']['objects'] ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$key = $geo_mashup_options->get( 'overall', 'googlev3_key' );\n\t\t$dimensions = intval( $map_data['width'] ) . 'x' . intval( $map_data['height'] );\n\t\t$map_image = '<img src=\"http://maps.google.com/maps/api/staticmap?size=' . $dimensions . '&amp;key=' . $key;\n\t\tif ( count( $map_data['object_data']['objects'] ) == 1) {\n\t\t\t$map_image .= '&amp;center=' . $map_data['object_data']['objects'][0]['lat'] . ',' .\n\t\t\t\t$map_data['object_data']['objects'][0]['lng'];\n\t\t}\n\t\t$map_image .= '&amp;zoom=' . $map_data['zoom'] . '&amp;markers=size:small|color:red';\n\t\tforeach( $map_data['object_data']['objects'] as $location ) {\n\t\t\t// TODO: Try to use the correct color for the category? Draw category lines?\n\t\t\t$map_image .= '|' . $location['lat'] . ',' . $location['lng'];\n\t\t}\n\t\t$map_image .= '\" alt=\"geo_mashup_map\"';\n\t\tif ($click_to_load == 'true') {\n\t\t\t$map_image .= '\" title=\"'.$click_to_load_text.'\"';\n\t\t}\n\t\t$map_image .= ' />';\n\n\t\treturn apply_filters( 'geo_mashup_static_map', $map_image, $map_data, compact('click_to_load', 'click_to_load_text' ) );\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @param string $atts_md5\n\t * @return array\n\t */\n\tprivate static function src_args( $atts, $atts_md5 ) {\n\t\t$src_args = array(\n\t\t\t'geo_mashup_content' => 'render-map',\n\t\t\t'map_data_key' => $atts_md5,\n\t\t);\n\n\t\tif ( !empty( $atts['lang'] ) ) {\n\t\t\t$src_args['lang'] = $atts['lang'];\n\t\t}\n\n\t\treturn $src_args;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function maybe_compress_object_ids( array $atts ) {\n\t\tif ( !isset( $atts['object_ids'] ) or strlen( $atts['object_ids'] ) <= 1800 ) {\n\t\t\treturn $atts;\n\t\t}\n\n\t\tif ( !class_exists( 'GM_Int_list' ) ) {\n\t\t\tinclude GEO_MASHUP_DIR_PATH . '/gm-int-list.php';\n\t\t}\n\n\t\t$id_list = new GM_Int_List( $atts['object_ids'] );\n\t\t$atts['oids'] = $id_list->compressed();\n\t\tunset( $atts['object_ids'] );\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $map_data\n\t * @param string $iframe_src\n\t * @param string $click_to_load_text\n\t * @param bool $static\n\t * @param string $map_image\n\t * @return string\n\t */\n\tprivate static function click_to_load_content( $map_data, $iframe_src, $click_to_load_text, $static, $map_image ) {\n\n\t\tif ( is_feed() ) {\n\t\t\treturn \"<a href=\\\"{$iframe_src}\\\">$click_to_load_text</a>\";\n\t\t}\n\n\t\t$width_style = self::dimension_style_value( $map_data['width'] );\n\t\t$height_style = self::dimension_style_value( $map_data['height'] );\n\n\t\tself::$add_loader_script = true;\n\n\t\t$style = \"height: {$height_style}; width: {$width_style}; background-color: #ddd;\".\n\t\t\t\"background-image: url(\".GEO_MASHUP_URL_PATH.\"/images/wp-gm-pale.png);\".\n\t\t\t\"background-repeat: no-repeat;background-position:center; cursor: pointer;\";\n\n\t\t$name = $map_data['name'];\n\n\t\t$content = \"<div class=\\\"gm-map\\\" style=\\\"$style\\\" \" .\n\t\t\t\"onclick=\\\"GeoMashupLoader.addMapFrame(this,'$iframe_src','{$height_style}','{$width_style}','{$name}')\\\">\";\n\n\t\tif ( $static ) {\n\t\t\t// TODO: test whether click to load really works with a static map\n\t\t\t$content .= $map_image . '</div>';\n\t\t} else {\n\t\t\t$content .= \"<p style=\\\"text-align:center;\\\">$click_to_load_text</p></div>\";\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $map_data\n\t * @param string $iframe_src\n\t * @return string\n\t */\n\tprivate static function interactive_map_content( $map_data, $iframe_src ) {\n\n\t\t$div_styles = 'position: relative;';\n\t\tif ( empty( $map_data['shape'] ) ) {\n\t\t\t$div_styles .= sprintf(\n\t\t\t\t'height: %s; width: %s;',\n\t\t\t\tself::dimension_style_value( $map_data['height'] ),\n\t\t\t\tself::dimension_style_value( $map_data['width'] )\n\t\t\t);\n\t\t} else {\n\t\t\t$div_styles .= sprintf(\n\t\t\t\t'padding-bottom: %s; height: 0; width: 100%%;',\n\t\t\t\t$map_data['shape']\n\t\t\t);\n\t\t}\n\n\t\t$frame_styles = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; overflow: hidden;';\n\n\t\treturn sprintf(\n\t\t\t\"<div class=\\\"gm-map\\\" style=\\\"%s\\\"><iframe name=\\\"%s\\\" src=\\\"%s\\\" style=\\\"%s\\\"></iframe></div>\",\n\t\t\t$div_styles,\n\t\t\t$map_data['name'],\n\t\t\t$iframe_src,\n\t\t\t$frame_styles\n\t\t);\n\t}\n\n\t/**\n\t * Format a map dimension attribute as a CSS style value.\n\t * @since 1.9.0\n\t * @param string $dimension\n\t * @return string\n\t */\n\tprivate static function dimension_style_value( $dimension ) {\n\t\t$units = ( '%' === substr( $dimension, -1 ) ) ? '%' : 'px';\n\t\treturn intval( $dimension ) . $units;\n\t}\n\n\t/**\n\t * The map template tag.\n\t *\n\t * Returns HTML for a Google map. Must use with echo in a template: echo GeoMashup::map();.\n\t *\n\t * @since 1.0\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#map tag parameter documentation\n\t * @uses $_SERVER['QUERY_STRING'] The first global map on a page uses query string parameters like tag parameters.\n\t * @uses apply_filters() geo_mashup_static_map Modify a static map image generated by geo mashup.\n\t *\n\t * @param string|array $atts Template tag parameters.\n\t * @return string The HTML for the requested map.\n\t */\n\tpublic static function map( $atts = null ) {\n\n\t\t$atts = self::parse_map_attributes( $atts );\n\n\t\t$static = (bool)( !empty( $atts['static'] ) and 'true' == $atts['static'] );\n\t\tunset( $atts['static'] );\n\n\t\t$atts = self::add_map_content_attributes( $atts );\n\n\t\tif ( is_wp_error( $atts ) ) {\n\t\t\treturn '<!--' . $atts->get_error_message() . '-->';\n\t\t}\n\n\t\t$click_to_load = $atts['click_to_load'];\n\t\tunset( $atts['click_to_load'] );\n\n\t\t$click_to_load_text = $atts['click_to_load_text'];\n\t\tunset( $atts['click_to_load_text'] );\n\n\t\t$map_data = self::build_map_data( $atts );\n\n\t\tif ( is_wp_error( $map_data ) ) {\n\t\t\treturn '<!--' . $map_data->get_error_message() . '-->';\n\t\t}\n\n\t\t$map_image = $static ? self::build_map_image( $atts, $map_data, $click_to_load, $click_to_load_text ) : '';\n\n\t\t$atts_md5 =  md5( serialize( $atts ) );\n\t\tset_transient( 'gmm' . $atts_md5, $map_data, 20 );\n\n\t\t$src_args = self::src_args( $atts, $atts_md5 );\n\n\t\t$atts = self::maybe_compress_object_ids( $atts );\n\n\t\t$iframe_src = self::build_home_url( $src_args + $atts );\n\n\t\tif ($click_to_load == 'true') {\n\t\t\t$content = self::click_to_load_content( $map_data, $iframe_src, $click_to_load_text, $static, $map_image );\n\t\t} else if ( $static ) {\n\t\t\t$content = \"<div class=\\\"gm-map\\\">$map_image</div>\";\n\t\t} else {\n\t\t\t$content = self::interactive_map_content( $map_data, $iframe_src );\n\t\t}\n\n\t\treturn apply_filters( 'geo_mashup_map_content', $content, $map_data );\n\t}\n\n\t/**\n\t * Full post template tag.\n\t *\n\t * Returns a placeholder where a related map should display the full post content \n\t * of the currently selected marker.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#Full_Post\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function full_post($args = null) {\n\t\t$args = wp_parse_args($args);\n\t\t$for_map = 'gm';\n\t\tif ( !empty( $args['for_map'] ) ) {\n\t\t\t$for_map = $args['for_map'];\n\t\t}\n\t\t// It's nice if click-to-load works in the full post display\n\t\tself::$add_loader_script = true;\n\n\t\treturn '<div id=\"' . $for_map . '-post\"></div>';\n\t}\n\n\t/**\n\t * Category name template tag.\n\t *\n\t * If there is a map_cat parameter, return the name of that category.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#Category_Name\n\t * \n\t * @param string|array $option_args Template tag arguments.\n\t * @return string Category name.\n\t */\n\tpublic static function category_name($option_args = null) {\n\t\t$category_name = '';\n\t\tif (is_string($option_args)) {\n\t\t\t$option_args = wp_parse_args($option_args);\n\t\t}\n\t\tif (is_page() && isset($_SERVER['QUERY_STRING'])) {\n\t\t\t$option_args = $option_args + self::explode_assoc('=','&amp;',$_SERVER['QUERY_STRING']);\n\t\t}\n\t\tif (isset($option_args['map_cat'])) {\n\t\t\t$category_name = get_cat_name($option_args['map_cat']);\n\t\t}\n\t\treturn $category_name;\n\t}\n\n\t/**\n\t * Term legend template tag.\n\t * \n\t * Returns a placeholder where a related map should display a legend for the \n\t * terms of the displayed content.\n\t * \n\t * @since 1.5\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#term-legend\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function term_legend($args = null) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$id = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) \n\t\t\t$id = $args['for_map'];\n\n\t\tif ( !empty( $args['taxonomy'] ) ) \n\t\t\t$id .= '-' . esc_attr ( $args['taxonomy'] );\n\n\t\t$id .= '-legend';\n\n\t\t$classes = array();\n\n\t\tif ( !empty( $args['noninteractive'] ) && 'false' != $args['noninteractive'] )\n\t\t\t$classes[] = 'noninteractive';\n\n\t\tif ( !empty( $args['check_all'] ) && 'true' != $args['check_all'] )\n\t\t\t$classes[] = 'check-all-off';\n\n\t\tif ( !empty( $args['default_off'] ) && 'false' != $args['default_off'] )\n\t\t\t$classes[] = 'default-off';\n\n\t\tif ( !empty( $args['format'] ) ) \n\t\t\t$classes[] = 'format-' . esc_attr( $args['format'] );\n\t\t\n\t\tif ( isset( $args['titles'] ) ) {\n\t\t\tif ( $args['titles'] && 'false' != $args['titles'] )\n\t\t\t\t$classes[] = 'titles-on';\n\t\t\telse\n\t\t\t\t$classes[] = 'titles-off';\n\t\t}\n\n\t\treturn '<div id=\"' . $id . '\" class=\"' . implode( ' ', $classes ) . '\"></div>';\n\t}\n\n\t/**\n\t * Category (term) legend template tag.\n\t *\n\t * Returns a placeholder where a related map should display a legend for the \n\t * terms of the displayed content. Used to display only categories, now displays\n\t * all included terms.\n\t *\n\t * @since 1.1\n\t * @deprecated \n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#category-legend\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function category_legend($args = null) {\n\t\treturn self::term_legend( $args );\n\t}\n\n\t/**\n\t * If the option is set, add a map link to category lists.\n\t *\n\t * list_cats {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Category_Filters filter}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function list_cats($content, $category = null) {\n\t\tglobal $geo_mashup_options;\n\n\t\tif ( $category and 'category' == $category->taxonomy ) {\n\t\t\t$count = GeoMashupDB::category_located_post_count( $category->cat_ID );\n\t\t\t// Add map link only if there are geo-located posts to see\n\t\t\tif ($count) {\n\t\t\t\t// This feature doesn't work unless there is a category description\n\t\t\t\tif ( empty( $category->description ) ) {\n\t\t\t\t\treturn $content . $geo_mashup_options->get('overall', 'category_link_separator') . \n\t\t\t\t\t\t__( 'You must add a description to this category to use this Geo Mashup feature.', 'GeoMashup' );\n\t\t\t\t}\n\t\t\t\t$url = get_page_link($geo_mashup_options->get('overall', 'mashup_page'));\n\t\t\t\tif (strstr($url,'?')) {\n\t\t\t\t\t$url .= '&amp;';\n\t\t\t\t} else {\n\t\t\t\t\t$url .= '?';\n\t\t\t\t}\n\t\t\t\t$link = '<a href=\"'.$url.'map_cat='.$category->cat_ID.'&amp;zoom='.$geo_mashup_options->get('overall', 'category_zoom').\n\t\t\t\t\t'\" title=\"'.$geo_mashup_options->get('overall', 'category_link_text').'\">';\n\t\t\t\treturn $content.'</a>'.$geo_mashup_options->get('overall', 'category_link_separator').$link.\n\t\t\t\t\t$geo_mashup_options->get('overall', 'category_link_text');\n\t\t\t}\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * WordPress action to add the Geo Mashup Options settings admin page.\n\t *\n\t * admin_menu {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function admin_menu() {\n\t\tif (function_exists('add_options_page')) {\n\t\t\tadd_options_page(__('Geo Mashup Options','GeoMashup'), __('Geo Mashup','GeoMashup'), 'manage_options', __FILE__, array( __CLASS__, 'options_page'));\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to display important messages in the admin.\n\t * \n\t * admin_notices {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function admin_notices() {\n\t\tglobal $geo_mashup_options;\n\n\t\t$message = array();\n\t\tif ( !empty( self::$deactivate_geo_search_basename ) ) {\n\t\t\tdeactivate_plugins( GeoMashupSearch::get_instance()->basename );\n\t\t\t$message_format = __( 'Geo Mashup now includes search, deactivating the old %s plugin. It\\'s safe to delete it.', 'GeoMashup' );\n\t\t\t$message[] = sprintf( $message_format, self::$deactivate_geo_search_basename );\n\t\t}\n\n\t\tif ( ! self::is_options_page() ) {\n\t\t\t// We're not looking at the settings, but it may be important to do so\n\t\t\tif ( GEO_MASHUP_DB_VERSION != GeoMashupDB::installed_version() and current_user_can( 'manage_options' ) ) {\n\t\t\t\t$message_format = __( 'Geo Mashup needs to upgrade its database, visit the <a href=\"%s\">settings</a> to do it now.', 'GeoMashup' );\n\t\t\t\t$message[] = sprintf( $message_format, admin_url( 'options-general.php?page=' . GEO_MASHUP_PLUGIN_NAME ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $message ) ) {\n\t\t\techo '<div class=\"error fade\"><p>' . implode( '</p><p>', $message ) . '</p></div>';\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to add custom action links to the plugin listing.\n\t * \n\t * plugin_action_links {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Advanced_WordPress_Filters filter},\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function plugin_action_links( $links, $file ) {\n\t\tif ( GEO_MASHUP_PLUGIN_NAME == $file ) {\n\t\t\t$settings_link = '<a href=\"' . admin_url( 'options-general.php?page=' . GEO_MASHUP_PLUGIN_NAME ) .'\">' .\n\t\t\t\t__( 'Settings' ) . '</a>';\n\t\t\tarray_unshift( $links, $settings_link );\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t * WordPress action to add custom meta links to the plugin listing.\n\t * \n\t * plugin_row_meta {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Advanced_WordPress_Filters filter},\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function plugin_row_meta( $links, $file ) {\n\t\tif ( GEO_MASHUP_PLUGIN_NAME == $file ) {\n\t\t\t$links[] = '<a href=\"https://github.com/cyberhobo/wordpress-geo-mashup/wiki/Getting-Started\">' .\n\t\t\t\t__( 'Documentation', 'GeoMashup' ) . '</a>';\n\t\t\t$links[] = '<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=11045324\">' .\n\t\t\t\t__( 'Donate', 'GeoMashup' ) . '</a>';\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t * WordPress action to produce the Geo Mashup Options admin page.\n\t *\n\t * Called by the WordPress admin.\n\t * \n\t * @since 1.0\n\t */\n\tpublic static function options_page() {\n\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'options.php' ) );\n\t\tgeo_mashup_options_page();\n\t}\n\n\t/**\n\t * Get the location of the current loop object, if any.\n\t *\n\t * Does not work in non-global loops, such as are made with WP_Query.\n\t *\n\t * @since 1.3\n\t *\n\t * @param string $output ARRAY_A | ARRAY_N | OBJECT\n\t * @param string $object_name Kind of object we're looking for, 'post', 'user', 'comment'.\n\t * @return object|bool Location object or false if none.\n\t */\n\tpublic static function current_location( $output = OBJECT, $object_name = '' ) {\n\t\tglobal $in_comment_loop, $in_user_loop, $user;\n\n\t\t$location = false;\n\n\t\t// Find the context\n\t\tif ( $object_name == 'comment' ) {\n\t\t\t$object_id =  get_comment_ID();\n\t\t} else if ( $object_name == 'user' ) {\n\t\t\t$object_id = $user->ID;\n\t\t} else if ( $object_name == 'post' ) {\n\t\t\t$object_id = get_the_ID();\n\t\t} else if ( $in_comment_loop ) {\n\t\t\t$object_name = 'comment';\n\t\t\t$object_id = get_comment_ID();\n\t\t} else if ( $in_user_loop ) {\n\t\t\t$object_name = 'user';\n\t\t\t$object_id = $user->ID;\n\t\t} else if ( in_the_loop() ) {\n\t\t\t$object_name = 'post';\n\t\t\t$object_id = get_the_ID();\n\t\t} else {\n\t\t\t$object_name = $object_id = '';\n\t\t}\n\t\t\t\n\t\tif ( $object_name && $object_id )\n\t\t\t$location = GeoMashupDB::get_object_location( $object_name, $object_id, $output );\n\n\t\treturn $location;\n\t}\n\n\t/**\n\t * Look at global loops first, then try to guess a current location if needed.\n\t *\n\t * @uses current_location()\n\t *\n\t * @param string $output ARRAY_A | ARRAY_N | OBJECT\n\t * @param string $object_name Kind of object we're looking for, 'post', 'user', 'comment'.\n\t * @return object|bool Location object or false if none.\n\t */\n\tpublic static function current_location_guess( $output = OBJECT, $object_name = '' ) {\n\t\tglobal $post, $comment, $user;\n\n\t\t$location = self::current_location( $output, $object_name );\n\t\tif ( !$location ) {\n\t\t\tif ( $post and !in_array( $object_name, array( 'comment', 'user' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'post', $post->ID, $output );\n\t\t\tif ( !$location and $comment and !in_array( $object_name, array( 'post', 'user' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'comment', $comment->comment_ID, $output );\n\t\t\tif ( !$location and $user and !in_array( $object_name, array( 'post', 'comment' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'user', $user->ID, $output );\n\t\t}\n\t\treturn $location;\n\t}\n\n\t/**\n\t * A template tag to insert location information.\n\t *\n\t * @since 1.3\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string The information requested, empty string if none.\n\t */\n\tpublic static function location_info( $args = '' ) {\n\t\t/** @var $fields string|array  */\n\t\t/** @var $separator string  */\n\t\t/** @var $format string  */\n\t\t/** @var $object_name string  */\n\t\t/** @var $object_id int  */\n\t\t$defaults = array(\n\t\t\t'fields' => 'address', \n\t\t\t'separator' => ',', \n\t\t\t'format' => '',\n\t\t\t'object_name' => null, \n\t\t\t'object_id' => null );\n\t\t$args = wp_parse_args( $args, $defaults );\n\t\textract( $args, EXTR_SKIP );\n\t\t$info = '';\n\n\t\tif ( $object_name && $object_id )\n\t\t\t$location = GeoMashupDB::get_object_location( $object_name, $object_id, ARRAY_A );\n\t\telse\n\t\t\t$location = self::current_location_guess( ARRAY_A, $object_name );\n\n\t\tif ( !empty( $location ) ) {\n\t\t\t$fields = preg_split( '/\\s*,\\s*/', $fields );\n\t\t\t$values = array();\n\t\t\tforeach( $fields as $field ) {\n\t\t\t\tif ( isset( $location[$field] ) ) {\n\t\t\t\t\tarray_push( $values, $location[$field] );\n\t\t\t\t} else {\n\t\t\t\t\tif ( 'country_name' == $field ) { \n\t\t\t\t\t\tarray_push( $values, GeoMashupDB::get_administrative_name( $location['country_code'] ) );\n\t\t\t\t\t} else if ( 'admin_name' == $field ) {\n\t\t\t\t\t\tarray_push( $values, GeoMashupDB::get_administrative_name( $location['country_code'], $location['admin_code'] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarray_push( $values, '' );\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}\n\t\t\tif ( empty( $format ) ) {\n\t\t\t\t$info = implode( $separator, $values );\n\t\t\t} else {\n\t\t\t\t$info = vsprintf( $format, $values );\n\t\t\t}\n\t\t}\n\t\treturn $info;\n\t}\t\n\n\t/**\n\t * A template tag to insert a link to a post on the mashup.\n\t * \n\t * @see show_on_map_link()\n\t */\n\tpublic static function post_link($option_args = '') {\n\t\treturn self::show_on_map_link($option_args);\n\t}\n\n\t/**\n\t * A template tag to return an URL for the current location on the \n\t * global map page. \n\t *\n\t * @since 1.3\n\t * @todo What would happen if the global map is not a post map?\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string The URL, empty if no current location is found.\n\t */\n\tpublic static function show_on_map_link_url( $args = null ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$defaults = array( 'zoom' => '' );\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t$args = array_filter( $args );\n\n\t\t$url = '';\n\t\t$location = self::current_location_guess();\n\n\t\tif ( $location ) {\n\t\t\t$url = get_page_link($geo_mashup_options->get('overall', 'mashup_page'));\n\n\t\t\tif ( !$url )\n\t\t\t\treturn '';\n\n\t\t\t$args['center_lat'] = $location->lat;\n\t\t\t$args['center_lng'] = $location->lng;\n\n\t\t\tif ( $geo_mashup_options->get( 'global_map', 'auto_info_open' ) == 'true' )\n\t\t\t\t$args['open_object_id'] = $location->object_id;\n\n\t\t\t$url = htmlentities( add_query_arg( $args, $url ) );\n\t\t}\n\t\treturn $url;\n\t}\n\n\t/**\n\t * A template tag to insert a link to the current location post on the \n\t * global map page. \n\t *\n\t * @since 1.3\n\t *\n\t * @param string|array $args Tag arguments.\n\t * @return string The link HTML, empty if no current location is found.\n\t */\n\tpublic static function show_on_map_link( $args = null ) {\n\t\t$defaults = array( 'text' => __( 'Show on map', 'GeoMashup' ),\n\t\t\t 'display' => false,\n\t\t\t 'zoom' => '',\n\t\t\t 'show_icon' => true );\n\t\t$options = wp_parse_args($args, $defaults);\n\t\t$link = '';\n\t\t$url = self::show_on_map_link_url( array_intersect_key( $options, array( 'zoom' => true ) ) );\n\t\tif ( $url ) {\n\t\t\t$icon = '';\n\t\t\tif ($options['show_icon'] && strcmp( $options['show_icon'], 'false' ) != 0) {\n\t\t\t\t$icon = '<img src=\"'.GEO_MASHUP_URL_PATH.\n\t\t\t\t\t'/images/geotag_16.png\" alt=\"'.__('Geotag Icon','GeoMashup').'\"/>';\n\t\t\t}\n\t\t\t$link = '<a class=\"gm-link\" href=\"'.$url.'\">'.\n\t\t\t\t$icon.' '.$options['text'].'</a>';\n\t\t\tif ($options['display']) {\n\t\t\t\techo $link;\n\t\t\t}\n\t\t}\n\t\treturn $link;\n\t}\n\n\t/** \n\t * Visible posts list template tag.\n\t *\n\t * Returns a placeholder where a related map should display a list\n\t * of the currently visible posts.\n\t *\n\t * @since 1.2\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#visible-posts-list\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function visible_posts_list($args = null) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$list_html = '';\n\n\t\t$for_map = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) {\n\t\t\t$for_map = $args['for_map'];\n\t\t}\t\n\t\tif ( !empty( $args['heading_text'] ) ) {\n\t\t\t$heading_div = '<div id=\"' . $for_map . '-visible-list-header\" style=\"display:none;\">';\n\t\t\t$heading_tags = '<h2>';\n\t\t\tif ( !empty( $args['heading_tags'] ) ) {\n\t\t\t\t$heading_tags = $args['heading_tags'];\n\t\t\t}\n\t\t\t$list_html .= balanceTags( $heading_div . $heading_tags . $args['heading_text'], true );\n\t\t}\n\t\t$list_html .= '<div id=\"' . $for_map . '-visible-list\"></div>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List located posts template tag.\n\t *\n\t * Returns an HTML list of all located posts.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#list-located-posts\n\t *\n\t * @param string|array $option_args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\tpublic static function list_located_posts( $option_args = null ) {\n\t\t$option_args = wp_parse_args( $option_args );\n\t\t$option_args['object_name'] = 'post';\n\t\t$list_html = '<ul class=\"gm-index-posts\">';\n\t\t$locs = GeoMashupDB::get_object_locations( $option_args );\n\t\tif ($locs) {\n\t\t\tforeach ($locs as $loc) {\n\t\t\t\t$list_html .= '<li><a href=\"'.get_permalink($loc->object_id).'\">'.\n\t\t\t\t\t$loc->label.\"</a></li>\\n\";\n\t\t\t}\n\t\t}\n\t\t$list_html .= '</ul>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List located posts by area template tag.\n\t *\n\t * Returns an HTML list of all located posts by country and state. May try to look up \n\t * this information when absent.\n\t *\n\t * @since 1.2\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#list-located-posts-by-area\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\tpublic static function list_located_posts_by_area( $args ) {\n\t\tstatic $instance_count = 1;\n\t\t\n\t\t$args = wp_parse_args( $args );\n\n\t\tif ( $instance_count > 1 )\n\t\t\t$id_suffix = '-' . $instance_count;\n\t\telse\n\t\t\t$id_suffix = '';\n\n\t\t$list_html = '<div id=\"gm-area-list' . $id_suffix . '\" class=\"gm-area-list\">';\n\n\t\t$countries = GeoMashupDB::get_distinct_located_values( 'country_code', array( 'object_name' => 'post' ) );\n\t\t$country_count = count( $countries );\n\t\t$country_heading = '';\n\t\tforeach ( $countries as $country ) {\n\t\t\tif ( $country_count > 1 ) {\n\t\t\t\t$country_name = GeoMashupDB::get_administrative_name( $country->country_code ); \n\t\t\t\t$country_name = $country_name ? $country_name : $country->country_code;\n\t\t\t\t$country_heading = '<h3 id=\"' . $country->country_code . $id_suffix . '\">' . $country_name . '</h3>';\n\t\t\t}\n\n\t\t\t$states = GeoMashupDB::get_distinct_located_values( \n\t\t\t\t'admin_code', \n\t\t\t\tarray( 'country_code' => $country->country_code, 'object_name' => 'post' ) \n\t\t\t);\n\t\t\tif ( empty( $states ) ) {\n\t\t\t\t$states = array( (object) array( 'admin_code' => null ) );\n\t\t\t}\n\t\t\tforeach ($states as $state ) { \n\t\t\t\t$location_query = array( \n\t\t\t\t\t'object_name' => 'post',\n\t\t\t\t\t'country_code' => $country->country_code,\n\t\t\t\t\t'admin_code' => $state->admin_code,\n\t\t\t\t\t'sort' => 'post_title'\n\t\t\t\t);\n\t\t\t\t$post_locations = GeoMashupDB::get_object_locations( $location_query );\n\t\t\t\tif ( count( $post_locations ) > 0 ) {\n\t\t\t\t\tif ( ! empty( $country_heading ) ) {\n\t\t\t\t\t\t$list_html .= $country_heading;\n\t\t\t\t\t\t$country_heading = '';\n\t\t\t\t\t}\n\t\t\t\t\tif ( null != $states[0]->admin_code ) {\n\t\t\t\t\t\t$state_name = GeoMashupDB::get_administrative_name( $country->country_code, $state->admin_code );\n\t\t\t\t\t\t$state_name = $state_name ? $state_name : $state->admin_code;\n\t\t\t\t\t\t$list_html .= '<h4 id=\"' . $country->country_code . '-' . $state->admin_code . $id_suffix . '\">' . $state_name . '</h4>';\n\t\t\t\t\t}\n\t\t\t\t\t$list_html .= '<ul class=\"gm-index-posts\">';\n\t\t\t\t\tforeach ( $post_locations as $post_location ) { \n\t\t\t\t\t\t$list_html .= '<li><a href=\"' . \n\t\t\t\t\t\t\tget_permalink( $post_location->object_id ) .\n\t\t\t\t\t\t\t'\">' .\n\t\t\t\t\t\t\t$post_location->label .\n\t\t\t\t\t\t\t'</a>';\n\t\t\t\t\t\tif ( isset( $args['include_address'] ) && $args['include_address'] == 'true' ) {\n\t\t\t\t\t\t\t$list_html .= '<p>' . $post_location->address . '</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$list_html .= '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$list_html .= '</ul>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$list_html .= '</div>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List nearby items.\n\t *\n\t * Returns an HTML list of objects near the current reference, the current post by default.\n\t *\n\t * @since 1.5\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#nearby-list\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\t public static function nearby_list( $args = '' ) {\n\n\t\tif ( ! class_exists( 'GeoMashupSearch' ) )\n\t\t\treturn __( 'Enable the geo search widget in the Geo Mashup settings to power the nearby list!', 'GeoMashup' );\n\n\t\t$default_args = array(\n\t\t\t'template' => 'nearby-list',\n\t\t\t'object_name' => 'post',\n\t\t\t'radius' => '50',\n\t \t);\n\t\t$args = wp_parse_args( $args, $default_args );\n\t\t$template = $args['template'];\n\t\tunset( $args['template'] );\n\t\t\n\t\tif ( !isset( $args['near_lat'] ) and !isset( $args['location_text'] ) ) {\n\n\t\t\t// Look near an object\n\t\t\tif ( isset( $args['object_id'] ) ) {\n\n\t\t\t\t// We were given an ID\n\t\t\t\t$object_id = $args['object_id'];\n\t\t\t\tunset( $args['object_id'] );\n\n\t\t\t} else {\n\n\t\t\t\t// Use the current loop ID\n\t\t\t\t$object_id = get_the_ID();\n\n\t\t\t}\n\n\t\t\t// Use the reference object location\n\t\t\t$near_location = GeoMashupDB::get_object_location( $args['object_name'], $object_id );\n\t\t\tif ( $near_location ) {\n\t\t\t\t$args['near_lat'] = $near_location->lat;\n\t\t\t\t$args['near_lng'] = $near_location->lng;\n\t\t\t\tif ( empty( $args['exclude_object_ids'] ) )\n\t\t\t\t\t$args['exclude_object_ids'] = $object_id;\n\t\t\t\telse\n\t\t\t\t\t$args['exclude_object_ids'] .= ',' . $object_id;\n\t\t\t}\n\t\t}\n\n\t\t$geo_search = new GeoMashupSearch( $args );\n\t\tob_start();\n\t\t$geo_search->load_template( $template );\n\t\treturn ob_get_clean();\n\t }\n\n\t/**\n\t * Post coordinates template tag.\n\t *\n\t * Get the coordinates of the current post. \n\t *\n\t * @since 1.0\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#post-coordinates\n\t * @deprecated 1.3 Use GeoMashup::current_location()\n\t *\n\t * @param int $places Maximum number of decimal places to use.\n\t * @return array Array containing 'lat' and 'lng' keys.\n\t */\n\tpublic static function post_coordinates($places = 10) {\n\t\tglobal $post;\n\n\t\t$location = GeoMashupDB::get_object_location( 'post', $post->ID );\n\t\t$coordinates = array();\n\t\tif ( !empty( $location ) ) {\n\t\t\t$lat = $location->lat;\n\t\t\t$lng = $location->lng;\n\t\t\t$lat_dec_pos = strpos($lat,'.');\n\t\t\tif ($lat_dec_pos !== false) {\n\t\t\t\t$lat = substr($lat, 0, $lat_dec_pos+$places+1);\n\t\t\t}\n\t\t\t$lng_dec_pos = strpos($lng,'.');\n\t\t\tif ($lng_dec_pos !== false) {\n\t\t\t\t$lng = substr($lng, 0, $lng_dec_pos+$places+1);\n\t\t\t}\n\t\t\t$coordinates['lat'] = $lat;\n\t\t\t$coordinates['lng'] = $lng;\n\t\t}\n\t\treturn $coordinates;\n\t}\n\n\t/**\n\t * WordPress action to emit GeoRSS namespace.\n\t *\n\t * rss_ns {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Feed_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function rss_ns() {\n\t\techo 'xmlns:georss=\"http://www.georss.org/georss\" ';\n\t}\n\n\t/**\n\t * WordPress action to emit GeoRSS tags.\n\t *\n\t * rss_item {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Feed_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function rss_item() {\n\t\tglobal $wp_query;\n\n\t\t// Using Simple GeoRSS for now\n\t\t$location = GeoMashupDB::get_object_location( 'post', $wp_query->post->ID );\n\t\tif ( !empty( $location ) ) {\n\t\t\techo '<georss:point>' . esc_html( $location->lat . ' ' . $location->lng ) . '</georss:point>';\n\t\t}\n\t}\n\n\t/**\n\t * Tabbed category index template tag.\n\t *\n\t * Returns a placeholder where a related map should display a list\n\t * of map objects by category, organized into HTML suited for presentation \n\t * as tabs.\n\t *\n\t * @since 1.2\n\t * @link https://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#tabbed-term-index\n\t * @deprecated Use GeoMashup::tabbed_term_index()\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function tabbed_category_index( $args ) {\n\t\treturn self::tabbed_term_index( $args );\n\t}\n\n\t/**\n\t * Tabbed term index template tag.\n\t */\n\tpublic static function tabbed_term_index( $args ) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$id = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) \n\t\t\t$id = $args['for_map'];\n\n\t\tif ( !empty( $args['taxonomy'] ) ) \n\t\t\t$id .= '-' . esc_attr ( $args['taxonomy'] );\n\n\t\t$id .= '-tabbed-index';\n\n\t\t$classes = array();\n\n\t\tif ( !empty( $args['show_inactive_tab_markers'] ) && 'false' != $args['show_inactive_tab_markers'] )\n\t\t\t$classes[] = 'show-inactive-tab-markers';\n\n\t\tif ( !empty( $args['start_tab_term'] ) ) \n\t\t\t$classes[] = 'start-tab-term-' . absint( $args['start_tab_term'] );\n\n\t\tif ( !empty( $args['tab_index_group_size'] ) ) \n\t\t\t$classes[] = 'tab-index-group-size-' . absint( $args['tab_index_group_size'] );\n\n\t\tif ( !empty( $args['disable_tab_auto_select'] ) && 'false' != $args['disable_tab_auto_select'] )\n\t\t\t$classes[] = 'disable-tab-auto-select';\n\n\t\treturn '<div id=\"' . $id . '\" class=\"' . implode( ' ', $classes ) . '\"></div>';\n\t}\n\t/**\n\t * Enqueue widget assets in admin.\n\t */\t\n\tpublic static function widget_scripts() {\n\t\twp_enqueue_script( 'geo-mashup-widget' );\n\t}\t\t\n} // class GeoMashup\nGeoMashup::load();\n} // class exists\n", "<?php\r\n/**\r\n * Respond to Geo Mashup AJAX requests for object locations.\r\n *\r\n * @since 1.0\r\n * @package GeoMashup\r\n */\r\n\r\nif ( ( isset( $_GET['output'] ) and 'json' == $_GET['output'] ) or empty( $_GET['object_ids'] ) ) {\r\n\tGeoMashupQuery::generate_location_json( );\r\n} else {\r\n\tGeoMashupQuery::generate_object_html( );\r\n}\r\n\r\n/**\r\n * Class for query handling namespace\r\n *\r\n * @since 1.2\r\n * @package GeoMashup\r\n * @access public\r\n * @static\r\n */\r\nclass GeoMashupQuery {\r\n\r\n\t/**\r\n\t * Strip content in square brackets.\r\n\t *\r\n\t * Shortcodes are not registered in the bare-bones query environments, \r\n\t * but we can strip all bracketed content.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $content Content to strip square brackets from\r\n\t * @return string Content minus square brackets\r\n\t */\r\n\tpublic static function strip_brackets( $content ) {\r\n\t\treturn preg_replace( '/\\[.*?\\]/', '', $content );\r\n\t}\r\n\r\n\t/**\r\n\t * Strip map shortcodes.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $content \r\n\t * @return string Content without map shortcodes.\r\n\t */\r\n\tpublic static function strip_map_shortcodes( $content ) {\r\n\t\treturn preg_replace( '/\\[geo_mashup_map.*?\\]/', '', $content );\r\n\t}\r\n\r\n\t/**\r\n\t * Use templates to output content for objects.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function generate_object_html( ) {\r\n\t\tglobal $comments, $users;\r\n\r\n\t\t$object_ids = $_GET['object_ids'];\r\n\t\tif ( !is_array( $object_ids ) ) {\r\n\t\t\t$object_ids = explode( ',', $object_ids );\r\n\t\t}\r\n\t\t$object_name = ( isset( $_GET['object_name'] ) ) ? $_GET['object_name'] : 'post';\r\n\t\t$template_base = ( isset( $_GET['template'] ) ) ? $_GET['template'] : '';\r\n\r\n\t\tswitch ( $object_name ) {\r\n\t\t\tcase 'post':\r\n\t\t\t\t$query_vars = array( \r\n\t\t\t\t\t'post__in' => $object_ids, \r\n\t\t\t\t\t'post_type' => GeoMashup::get_searchable_post_types(), \r\n\t\t\t\t\t'post_status' => 'publish,future' \r\n\t\t\t\t);\r\n\t\t\t\t// Don't filter this query through other plugins (e.g. event-calendar)\r\n\t\t\t\t$query_vars['suppress_filters'] = true;\r\n\t\t\t\t// No sticky posts please\r\n\t\t\t\tif ( function_exists( 'get_queried_object' ) )\r\n\t\t\t\t\t$query_vars['ignore_sticky_posts'] = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$query_vars['caller_get_posts'] = true; // Necessary only for WP 3.0 support\r\n\t\t\t\t// Don't limit the number of results\r\n\t\t\t\t$query_vars['posts_per_page'] = -1;\r\n\r\n\t\t\t\tquery_posts( $query_vars );\r\n\t\t\t\t\r\n\t\t\t\tif ( have_posts() ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'info-window' : $template_base;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'comment':\r\n\t\t\t\t$comments = GeoMashupDB::get_comment_in( array( 'comment__in' => $object_ids ) );\r\n\t\t\t\tif ( !empty( $comments ) ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'comment' : $template_base;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'user':\r\n\t\t\t\t$users = GeoMashupDB::get_user_in( array( 'user__in' => $object_ids ) );\r\n\t\t\t\tif (!empty( $users ) ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'user' : $template_base;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tload_template( GeoMashup::locate_template( $template_base ) );\r\n\t}\r\n\r\n\t/** \r\n\t * Set the comment global. \r\n\t *\r\n\t * Not sure why WP 2.7 comment templating requires this for callbacks, but it does.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $comment The comment object to make global.\r\n\t */\r\n\tpublic static function set_the_comment( $comment ) {\r\n\t\t$GLOBALS['comment'] = $comment;\r\n\t}\r\n\r\n\t/** \r\n\t * Wrap access to comments global.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @return bool Whether there are any comments to be listed.\r\n\t */\r\n\tpublic static function have_comments( ) {\r\n\t\tglobal $comments;\r\n\r\n\t\treturn ( !empty( $comments ) );\r\n\t}\r\n\r\n\t/**\r\n\t * A wrapper for wp_list_comments when it exists,\r\n\t * otherwise a simple comment loop.\r\n\t *\r\n\t * @since 1.3\r\n\t * @see wp_list_comments()\r\n\t *\r\n\t * @param string|array $args Formatting options\r\n\t */\r\n\tpublic static function list_comments( $args = '' ) {\r\n\t\tglobal $comments, $in_comment_loop;\r\n\r\n\t\tif ( function_exists( 'wp_list_comments' ) ) {\r\n\t\t\twp_list_comments( $args, $comments );\r\n\t\t} else {\r\n\t\t\tif ( empty( $comments ) ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t$args = wp_parse_args( $args );\r\n\t\t\t$in_comment_loop = true;\r\n\t\t\tforeach( $comments as $comment) {\r\n\t\t\t\tif ( !empty( $args['callback'] ) ) {\r\n\t\t\t\t\tcall_user_func( $args['callback'], $comment, $args, 1 );\r\n\t\t\t\t} else {\r\n\t\t\t\t\techo '<p>' . esc_html( $comment->comment_author ) . ':<br/>' . esc_html( $comment->comment_content ) . '</p>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$in_comment_loop = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** \r\n\t * Set the user global. \r\n\t *\r\n\t * Probably only Geo Mashup using it here for a templated list of users.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $user The user object to make global.\r\n\t */\r\n\tpublic static function set_the_user( $user ) {\r\n\t\t$GLOBALS['user'] = $user;\r\n\t}\r\n\r\n\t/** \r\n\t * Wrap access to users global. \r\n\t *\r\n\t * Probably only Geo Mashup using it here for a templated list of users.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @returns bool Whether there are any users to be listed.\r\n\t */\r\n\tpublic static function have_users( ) {\r\n\t\tglobal $users;\r\n\r\n\t\treturn ( !empty( $users ) );\r\n\t}\r\n\r\n\t/**\r\n\t * A simple user loop that takes a callback option for formatting.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string|array $args Formatting options\r\n\t */\r\n\tpublic static function list_users( $args = '' ) {\r\n\t\tglobal $users, $in_user_loop;\r\n\r\n\t\tif ( empty( $users ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$defaults = array( 'callback' => '' );\r\n\t\t$args = wp_parse_args( $args, $defaults );\r\n\t\t$in_user_loop = true;\r\n\t\tforeach( $users as $user) {\r\n\t\t\tif ( !empty( $args['callback'] ) ) {\r\n\t\t\t\tcall_user_func( $args['callback'], $user, $args );\r\n\t\t\t} else {\r\n\t\t\t\techo '<p>' . esc_html( $user->display_name ) .\r\n\t\t\t\t\t( empty( $user->user_url ) ? '' : ' - ' . $user->url ) . '</p>';\r\n\t\t\t}\r\n\t\t}\r\n\t\t$in_user_loop = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Run a query for object locations from GET parameters and print JSON results.\r\n\t * \r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function generate_location_json( ) {\r\n\t\t/* TODO: Try to track modification?\r\n\t\tif ( !empty( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) ) {\r\n\t\t\t$http_time = strtotime( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );\r\n\t\t\t$mod_time = strtotime( $post->post_modified_gmt . ' GMT' );\r\n\t\t\tif ($mod_time <= $http_time) {\r\n\t\t\t\treturn status_header(304); // Not modified\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatus_header(200);\r\n\t\theader( 'Last-Modified: ' . mysql2date( 'D, d M Y H:i:s', $post->post_modified_gmt, false ) . ' GMT' );\r\n\t\theader( 'Content-type: text/xml; charset='.get_settings('blog_charset'), true);\r\n\t\theader( 'Cache-control: max-age=300, must-revalidate', true);\r\n\t\theader( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 300 ) . \" GMT\" );\r\n\t\theader( 'Pragma:' );\r\n\t\t */\r\n\t\tstatus_header(200);\r\n\t\theader('Content-type: application/json; charset='.get_option('blog_charset'), true);\r\n\t\theader('Cache-Control: no-cache;', true);\r\n\t\theader('Expires: -1;', true);\r\n\r\n\t\t$json = GeoMashup::get_locations_json($_REQUEST);\r\n\t\tif ( isset( $_REQUEST['callback'] ) )\r\n\t\t\t$json = $_REQUEST['callback'] . '(' . $json . ')';\r\n\t\techo $json;\r\n\t}\r\n}\r\n"], "fixing_code": ["<?php \r\n/**\r\n * Geo Mashup Data Access\r\n *\r\n * @package GeoMashup\r\n */\r\n\r\n// Init at load time - just adds hooks\r\nGeoMashupDB::init();\r\n\r\n/**\r\n * Static class to provide a namespace for Geo Mashup data functions.\r\n *\r\n * @since 1.2\r\n * @package GeoMashup\r\n */\r\nclass GeoMashupDB {\r\n\t/**\r\n\t * Current installed database version.\r\n\t * \r\n\t * @since 1.4\r\n\t * @var string \r\n\t */\r\n\tprivate static $installed_version = null;\r\n\t/**\r\n\t * Flag for objects that have geodata fields copied to.\r\n\t * Key $meta_type-$object_id, value true.\r\n\t * \r\n\t * @since 1.4\r\n\t * @var array  \r\n\t */\r\n\tprivate static $copied_to_geodata = array();\r\n\t/**\r\n\t * Meta keys used to store geodata\r\n\t *\r\n\t * @since 1.4\r\n\t * @var array\r\n\t */\r\n\tprivate static $geodata_keys = array( 'geo_latitude', 'geo_longitude', 'geo_address' );\r\n\t/**\r\n\t * The last geocode error, or empty if no error.\r\n\t * @var WP_Error\r\n\t */\r\n\tpublic static $geocode_error = array();\r\n\r\n\t/**\r\n\t * WordPress action to set up data-related WordPress hooks.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function init() {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\t// Enable the geo_mashup_query var\r\n\t\tadd_filter( 'query_vars', array( 'GeoMashupDB', 'query_vars' ) );\r\n\t\tadd_filter( 'posts_fields', array( 'GeoMashupDB', 'posts_fields' ), 10, 2 );\r\n\t\tadd_filter( 'posts_join', array( 'GeoMashupDB', 'posts_join' ), 10, 2 );\r\n\t\tadd_filter( 'posts_where', array( 'GeoMashupDB', 'posts_where' ), 10, 2 );\r\n\t\tadd_action( 'parse_query', array( 'GeoMashupDB', 'parse_query' ) );\r\n\r\n\t\t// Some caching plugins don't implement this\r\n\t\tif ( function_exists( 'wp_cache_add_global_groups' ) )\r\n\t\t\twp_cache_add_global_groups( array( 'geo_mashup_object_locations', 'geo_mashup_locations' ) );\r\n\r\n\t\t// Avoid orphans\r\n\t\tadd_action( 'delete_post', array( 'GeoMashupDB', 'delete_post' ) );\r\n\t\tadd_action( 'delete_comment', array( 'GeoMashupDB', 'delete_comment' ) );\r\n\t\tadd_action( 'delete_user', array( 'GeoMashupDB', 'delete_user' ) );\r\n\r\n\t\tif ( 'true' == $geo_mashup_options->get( 'overall', 'copy_geodata' ) or '' != $geo_mashup_options->get( 'overall', 'import_custom_field' ) )\r\n\t\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Add hooks to synchronize Geo Mashup ojbect locations with WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function add_geodata_sync_hooks() {\r\n\t\tadd_filter( 'update_post_metadata', array( 'GeoMashupDB', 'filter_update_post_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_filter( 'update_user_metadata', array( 'GeoMashupDB', 'filter_update_user_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tadd_filter( 'update_comment_metadata', array( 'GeoMashupDB', 'filter_update_comment_metadata' ), 10, 5 );\r\n\t\tadd_action( 'added_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\t// AJAX calls use a slightly different hook - triksy!\r\n\t\tadd_action( 'added_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tadd_action( 'updated_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\r\n\t\tadd_action( 'geo_mashup_added_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t\tadd_action( 'geo_mashup_updated_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove hooks to synchronize Geo Mashup ojbect locations with WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function remove_geodata_sync_hooks() {\r\n\t\tremove_filter( 'update_post_metadata', array( 'GeoMashupDB', 'filter_update_post_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_post_meta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_filter( 'update_user_metadata', array( 'GeoMashupDB', 'filter_update_user_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_user_meta', array( 'GeoMashupDB', 'action_added_user_meta' ), 10, 4 );\r\n\t\tremove_filter( 'update_comment_metadata', array( 'GeoMashupDB', 'filter_update_comment_metadata' ), 10, 5 );\r\n\t\tremove_action( 'added_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_comment_meta', array( 'GeoMashupDB', 'action_added_comment_meta' ), 10, 4 );\r\n\t\t// AJAX calls use a slightly different hook - triksy!\r\n\t\tremove_action( 'added_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\t\tremove_action( 'updated_postmeta', array( 'GeoMashupDB', 'action_added_post_meta' ), 10, 4 );\r\n\r\n\t\tremove_action( 'geo_mashup_added_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t\tremove_action( 'geo_mashup_updated_object_location', array( 'GeoMashupDB', 'copy_to_geodata' ), 10, 4 );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup post location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_post_meta( $meta_id, $post_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'post', $meta_id, $post_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup user location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_user_meta( $meta_id, $user_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'user', $meta_id, $user_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to update Geo Mashup comment location when geodata custom fields are updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function action_added_comment_meta( $meta_id, $comment_id, $meta_key, $meta_value ) {\r\n\t\tself::copy_from_geodata( 'comment', $meta_id, $comment_id, $meta_key, $meta_value );\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t * \r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_post_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['post-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_user_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['user-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to prevent updates to geodata fields we've already updated.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function filter_update_comment_metadata( $ok, $object_id, $meta_key, $meta_value, $prev_value ) {\r\n\t\tif ( !in_array( $meta_key, self::$geodata_keys ) )\r\n\t\t\treturn $ok;\r\n\t\tif ( isset( self::$copied_to_geodata['comment-' . $object_id] ) )\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t\treturn $ok;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a Geo Mashup object location from WordPress geodata.\r\n\t *\r\n\t * @since 1.4\r\n\t * @see http://codex.wordpress.org/Geodata\r\n\t */\r\n\tprivate static function copy_from_geodata( $meta_type, $meta_id, $object_id, $meta_key, $meta_value ) {\r\n\t\tglobal $geo_mashup_options, $wpdb;\r\n\r\n\t\t// Do nothing if meta_key is not a known location field\r\n\t\t$location_keys = array();\r\n\t\t$is_copy_geodata_on = ( 'true' === $geo_mashup_options->get( 'overall', 'copy_geodata' ) );\r\n\t\t$copy_imported_geodata = false;\r\n\t\tif ( $is_copy_geodata_on ) {\r\n\t\t\t$location_keys = array_merge( $location_keys, array( 'geo_latitude', 'geo_longitude', 'geo_lat_lng' ) );\r\n\t\t}\r\n\t\t$import_custom_keys = preg_split( '/\\s*,\\s*/', trim( $geo_mashup_options->get( 'overall', 'import_custom_field' ) ) );\r\n\t\t$location_keys = array_merge( $location_keys, $import_custom_keys );\r\n\t\tif ( ! in_array( $meta_key, $location_keys ) ) \r\n\t\t\treturn;\r\n\r\n\t\t$existing_location = self::get_object_location( $meta_type, $object_id );\r\n\r\n\t\t$location = array();\r\n\r\n\t\t// Do nothing unless both latitude and longitude exist for the object\r\n\t\tif ( 'geo_lat_lng' == $meta_key ) {\r\n\r\n\t\t\t$lat_lng = preg_split( '/\\s*[, ]\\s*/', trim( $meta_value ) );\r\n\t\t\tif ( 2 != count( $lat_lng ) ) {\r\n\t\t\t\treturn; \r\n\t\t\t}\r\n\t\t\t$location['lat'] = $lat_lng[0];\r\n\t\t\t$location['lng'] = $lat_lng[1];\r\n\r\n\t\t} else if ( 'geo_latitude' == $meta_key ) {\r\n\r\n\t\t\t$location['lat'] = $meta_value;\r\n\t\t\t$lng = get_metadata( $meta_type, $object_id, 'geo_longitude', true );\r\n\t\t\tif ( empty( $lng ) )\r\n\t\t\t\treturn;\r\n\t\t\t$location['lng'] = $lng;\r\n\r\n\t\t} else if ( 'geo_longitude' == $meta_key ) {\r\n\r\n\t\t\t$location['lng'] = $meta_value;\r\n\t\t\t$lat = get_metadata( $meta_type, $object_id, 'geo_latitude', true );\r\n\t\t\tif ( empty( $lat ) )\r\n\t\t\t\treturn;\r\n\t\t\t$location['lat'] = $lat;\r\n\r\n\t\t} else if ( in_array( $meta_key, $import_custom_keys ) ) {\r\n\r\n\t\t\t$lat_lng = preg_split( '/\\s*[, ]\\s*/', trim( $meta_value ) );\r\n\t\t\tif ( count( $lat_lng ) == 2 and is_numeric( $lat_lng[0] ) and is_numeric( $lat_lng[1] ) ) {\r\n\t\t\t\t$location['lat'] = $lat_lng[0];\r\n\t\t\t\t$location['lng'] = $lat_lng[1];\r\n\t\t\t} else if ( !empty( $meta_value ) ) {\r\n\t\t\t\t$geocode_values = array();\r\n\t\t\t\tforeach( $import_custom_keys as $import_custom_key ) {\r\n\t\t\t\t\tif ( $meta_key == $import_custom_key ) {\r\n\t\t\t\t\t\t$geocode_values[] = $meta_value;\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// All keys must have a value - do nothing if not\r\n\t\t\t\t\t\tif ( !metadata_exists( $meta_type, $object_id, $import_custom_key ) )\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t$geocode_values[] = get_metadata( $meta_type, $object_id, $import_custom_key, true );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$location = self::blank_location( ARRAY_A );\r\n\t\t\t\tself::geocode( implode( ',', $geocode_values ), $location );\r\n\t\t\t\tif ( self::$geocode_error ) {\r\n\t\t\t\t\tupdate_metadata( $meta_type, $object_id, 'geocoding_error', self::$geocode_error->get_error_message() );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ( $is_copy_geodata_on ) {\r\n\t\t\t\t\t$copy_imported_geodata = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Do nothing if the location already exists\r\n\t\tif ( !empty( $existing_location ) ) {\r\n\t\t\t$epsilon = 0.00001;\r\n\t\t\tif ( abs( $location['lat'] - $existing_location->lat ) < $epsilon and abs( $location['lng'] - $existing_location->lng ) < $epsilon )\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Save the location, attempt reverse geocoding\r\n\t\tself::remove_geodata_sync_hooks();\r\n\t\t// Use geo date if it exists\r\n\t\t$geo_date = get_metadata( $meta_type, $object_id, 'geo_date', true );\r\n\t\t$location_id = self::set_object_location( $meta_type, $object_id, $location, null, $geo_date );\r\n\t\tif ( $copy_imported_geodata ) {\r\n\t\t\tself::copy_to_geodata( $meta_type, $object_id, $geo_date, $location_id );\r\n\t\t}\r\n\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Update object geodata if needed.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param string $meta_type 'post','user','comment'\r\n\t * @param int $object_id\r\n\t * @param string $geo_date\r\n\t * @param int $location_id The location to copy from.\r\n\t */\r\n\tpublic static function copy_to_geodata( $meta_type, $object_id, $geo_date, $location_id ) {\r\n\r\n\t\t$geo_latitude = get_metadata( $meta_type, $object_id, 'geo_latitude', true );\r\n\t\t$geo_longitude = get_metadata( $meta_type, $object_id, 'geo_longitude', true );\r\n\t\t$existing_object_location = self::get_object_location( $meta_type, $object_id );\r\n\r\n\t\t// Do nothing if the geodata already exists\r\n\t\tif ( $geo_latitude and $geo_longitude ) {\r\n\t\t\t$epsilon = 0.00001;\r\n\t\t\tif ( abs( $geo_latitude - $existing_object_location->lat ) < $epsilon and abs( $geo_longitude - $existing_object_location->lng ) < $epsilon )\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tself::remove_geodata_sync_hooks();\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_latitude', $existing_object_location->lat );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_longitude', $existing_object_location->lng );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_address', $existing_object_location->address );\r\n\t\tupdate_metadata( $meta_type, $object_id, 'geo_date', $existing_object_location->geo_date );\r\n\t\tself::$copied_to_geodata[$meta_type . '-' . $object_id] = true;\r\n\t\tself::add_geodata_sync_hooks();\r\n\t}\r\n\r\n\t/**\r\n\t * Set the installed database version.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param string $new_version \r\n\t */\r\n\tprivate static function set_installed_version( $new_version ) {\r\n\t\tself::$installed_version = $new_version;\r\n\t\tupdate_option( 'geo_mashup_db_version', $new_version );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the installed database version.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @return string The installed database version.\r\n\t */\r\n\tpublic static function installed_version() {\r\n\r\n\t\tif ( is_null( self::$installed_version ) ) {\r\n\t\t\tself::$installed_version = get_option( 'geo_mashup_db_version' );\r\n\t\t}\r\n\t\treturn self::$installed_version;\r\n\t}\r\n\r\n\t/**\r\n\t * Get or set storage information for an object name.\r\n\t *\r\n\t * Potentially you could add storage information for a new kind of object:\r\n\t * <code>\r\n\t * GeoMashupDB::object_storage( 'foo', array(\r\n\t * \t'table' => $wpdb->prefix . 'foos',\r\n\t * \t'id_column' => 'foo_id',\r\n\t * \t'label_column' => 'foo_display_name',\r\n\t * \t'sort' => 'foo_order ASC' )\r\n\t * ); \r\n\t * </code>\r\n\t * Would add the necessary information for a custom table of foo objects. By convention the\r\n\t * object name is the singular form of the table name without a prefix.\r\n\t *\r\n\t * @since 1.3\r\n\t * \r\n\t * @param string $object_name A type of object to be stored, default is 'post', 'user', and 'comment'.\r\n\t * @param array $new_storage If provided, adds or replaces the storage information for the object name.\r\n\t * @return array|bool The storage information array, or false if not found.\r\n\t */\r\n\tpublic static function object_storage( $object_name, $new_storage = null ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $objects = null;\r\n\t\t\r\n\t\tif ( is_null( $objects ) ) {\r\n\t\t\t$objects = array( \r\n\t\t\t\t'post' => array( \r\n\t\t\t\t\t'table' => $wpdb->posts, \r\n\t\t\t\t\t'id_column' => 'ID', \r\n\t\t\t\t\t'label_column' => 'post_title', \r\n\t\t\t\t\t'date_column' => 'post_date',\r\n\t\t\t\t\t'sort' => 'post_status ASC, geo_date DESC' ),\r\n\t\t\t\t'user' => array( \r\n\t\t\t\t\t'table' => $wpdb->users, \r\n\t\t\t\t\t'id_column' => 'ID', \r\n\t\t\t\t\t'label_column' => 'display_name',\r\n\t\t\t\t\t'date_column' => 'user_registered',\r\n\t\t\t \t\t'sort' => 'display_name ASC' ),\r\n\t\t\t\t'comment' => array( \r\n\t\t\t\t\t'table' => $wpdb->comments, \r\n\t\t\t\t\t'id_column' => 'comment_ID', \r\n\t\t\t\t\t'label_column' => 'comment_author',\r\n\t\t\t\t\t'date_column' => 'comment_date',\r\n\t\t\t \t\t'sort' => 'comment_date DESC'\t) \r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ( !empty( $new_storage ) ) {\r\n\t\t\t$objects[$object_name] = $new_storage;\r\n\t\t} \r\n\t\treturn ( isset( $objects[$object_name] ) ) ? $objects[$object_name] : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a conventional object name given a table name.\r\n\t *\r\n\t * @since 1.7\r\n\t *\r\n\t * @param string $table\r\n\t * @return string\r\n\t */\r\n\tpublic static function table_to_object_name( $table ) {\r\n\t\tglobal $wpdb;\r\n\t\t$object_name = str_replace( $wpdb->prefix, '', $table );\r\n\t\tif ( 's' === substr( $object_name, -1 ) ) {\r\n\t\t\t$object_name = substr( $object_name, 0, strlen( $object_name ) - 1 );\r\n\t\t}\r\n\t\treturn $object_name;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle joining of WordPress queries with Geo Mashup tables.\r\n\t * \r\n\t * Use the public wrapper GeoMashup::join_post_queries()\r\n\t * \r\n\t * @since 1.3\r\n\t * @deprecated Use the geo_mashup_query query var\r\n\t *\r\n\t * @param bool $new_value If provided, replaces the current active state.\r\n\t * @return bool The current state.\r\n\t */\r\n\tpublic static function join_post_queries( $new_value = null) {\r\n\t\tstatic $active = null;\r\n\r\n\t\tif ( is_bool( $new_value ) ) {\r\n\t\t\t_deprecated_function( __METHOD__, '1.7', 'the geo_mashup_query query var' );\r\n\t\t\t$active = $new_value;\r\n\t\t}\r\n\r\n\t\treturn $active;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to add Geo Mashup public query variables.\r\n\t *\r\n\t * query_vars {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by Wordpress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function query_vars( $public_query_vars ) {\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$public_query_vars[] = 'geo_mashup_date';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_saved_name';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_country_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_postal_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_admin_code';\r\n\t\t\t$public_query_vars[] = 'geo_mashup_locality';\r\n\t\t}\r\n\t\treturn $public_query_vars;\r\n\t}\r\n\r\n\t/**\r\n\t * Set or get custom data associated with a WP_Query object.\r\n\t *\r\n\t * @since 1.7\r\n\t *\r\n\t * @param WP_Query $query\r\n\t * @param string $key Optional - return all data for the query if missing.\r\n\t * @param mixed $value Optional - set or overwrite data for the key if present.\r\n\t * @return mixed Extension data if present.\r\n\t */\r\n\tprivate static function query_extension( $query, $key = null, $value = null ) {\r\n\t\tstatic $extensions = array();\r\n\r\n\t\t$hash = spl_object_hash( $query );\r\n\r\n\t\tif ( is_null( $key ) )\r\n\t\t\treturn $extensions;\r\n\r\n\t\tif ( !isset( $extensions[$hash] ) )\r\n\t\t\t$extensions[$hash] = array();\r\n\r\n\t\tif ( !is_null( $value ) )\r\n\t\t\t$extensions[$hash][$key] = $value;\r\n\t\telse if ( !isset( $extensions[$hash][$key] ) )\r\n\t\t\treturn null;\r\n\r\n\t\treturn $extensions[$hash][$key];\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress action to capture custom orderby field before it is removed.\r\n\t *\r\n\t * parse_query {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t * @access private\r\n\t * @static\r\n\t */\r\n\tpublic static function parse_query( $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( !self::join_post_queries() )\r\n\t\t\treturn;\r\n\r\n\t\t// Check for geo mashup fields in the orderby before they are removed as invalid\r\n\t\tswitch ( $query->query_vars['orderby'] ) {\r\n\t\t\tcase 'geo_mashup_date':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_location_relationships.geo_date' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_locality':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.locality_name' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_saved_name':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.saved_name' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_country_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.country_code' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_admin_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.admin_code' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'geo_mashup_postal_code':\r\n\t\t\t\tself::query_extension( $query, 'orderby', $wpdb->prefix . 'geo_mashup_locations.postal_code' );\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to add Geo Mashup fields to WordPress post queries.\r\n\t *\r\n\t * posts_fields {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_fields( $fields, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$fields .= ',' . $wpdb->prefix . 'geo_mashup_location_relationships.geo_date' .\r\n\t\t\t\t',' . $wpdb->prefix . 'geo_mashup_locations.*';\r\n\t\t}\r\n\r\n\t\treturn $fields;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to join Geo Mashup tables to WordPress post queries.\r\n\t * \r\n\t * posts_join {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_join( $join, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( self::join_post_queries() ) {\r\n\t\t\t$gmlr = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t\t$gml = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t\t$join .= \" INNER JOIN $gmlr ON ($gmlr.object_name = 'post' AND $gmlr.object_id = $wpdb->posts.ID)\" .\r\n\t\t\t\t\" INNER JOIN $gml ON ($gml.id = $gmlr.location_id) \";\r\n\t\t}\r\n\r\n\t\treturn $join;\r\n\t}\r\n\r\n\t/**\r\n\t * WordPress filter to incorporate geo mashup query vars in WordPress post queries.\r\n\t *\r\n\t * posts_where {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function posts_where( $where, $query ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( !self::join_post_queries() )\r\n\t\t\treturn $where;\r\n\r\n\t\t$gmlr = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t$gml = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$geo_date = get_query_var( 'geo_mashup_date' );\r\n\t\tif ( $geo_date ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gmlr.geo_date = %s \", $geo_date );\r\n\t\t}\r\n\t\t$saved_name = get_query_var( 'geo_mashup_saved_name' );\r\n\t\tif ( $saved_name ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.saved_name = %s \", $saved_name );\r\n\t\t}\r\n\t\t$locality = get_query_var( 'geo_mashup_locality' );\r\n\t\tif ( $locality ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.locality_name = %s \", $locality );\r\n\t\t}\r\n\t\t$country_code = get_query_var( 'geo_mashup_country_code' );\r\n\t\tif ( $country_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.country_code = %s \", $country_code );\r\n\t\t}\r\n\t\t$admin_code = get_query_var( 'geo_mashup_admin_code' );\r\n\t\tif ( $admin_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.admin_code = %s \", $admin_code );\r\n\t\t}\r\n\t\t$postal_code = get_query_var( 'geo_mashup_postal_code' );\r\n\t\tif ( $postal_code ) {\r\n\t\t\t$where .= $wpdb->prepare( \" AND $gml.postal_code = %s \", $postal_code );\r\n\t\t}\r\n\r\n\t\treturn $where;\r\n\t}\r\n\r\n\t/**\r\n\t * Append to the activation log.\r\n\t * \r\n\t * Add a message and optionally write the activation log.\r\n\t * Needs to be written before the end of the request or it will not be saved.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $message The message to append.\r\n\t * @param boolean $write Whether to save the log.\r\n\t * @return string The current log.\r\n\t */\r\n\tpublic static function activation_log( $message = null, $write = false ) {\r\n\t\tstatic $log = null;\r\n\r\n\t\tif ( is_null( $log ) ) {\r\n\t\t\t$log = get_option( 'geo_mashup_activation_log' );\r\n\t\t}\r\n\t\tif ( ! is_null( $message ) ) {\r\n\t\t\t$log .= \"\\n\" . $message;\r\n\t\t}\r\n\t\tif ( $write ) {\r\n\t\t\tupdate_option( 'geo_mashup_activation_log', $log );\r\n\t\t}\r\n\t\treturn $log;\r\n\t}\r\n\r\n\t/**\r\n\t * Install or update Geo Mashup tables.\r\n\t *\r\n\t * @uses GeoMashupDB::activation_log()\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function install() {\r\n\t\tglobal $wpdb, $geo_mashup_options;\r\n\r\n\t\tself::activation_log( date( 'r' ) . ' ' . __( 'Activating Geo Mashup', 'GeoMashup' ) );\r\n\t\t$location_table_name = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$relationships_table_name = $wpdb->prefix . 'geo_mashup_location_relationships';\r\n\t\t$administrative_names_table_name = $wpdb->prefix . 'geo_mashup_administrative_names';\r\n\r\n\t\t$charset_collate = '';\r\n\r\n\t\tif ( ! empty($wpdb->charset) )\r\n\t\t\t$charset_collate = \"DEFAULT CHARACTER SET $wpdb->charset\";\r\n\t\tif ( ! empty($wpdb->collate) )\r\n\t\t\t$charset_collate .= \" COLLATE $wpdb->collate\";\r\n\r\n\t\tif ( self::installed_version() != GEO_MASHUP_DB_VERSION ) {\r\n\t\t\t$sql = \"\r\n\t\t\t\tCREATE TABLE $location_table_name (\r\n\t\t\t\t\tid MEDIUMINT(9) NOT NULL AUTO_INCREMENT,\r\n\t\t\t\t\tlat FLOAT(11,7) NOT NULL,\r\n\t\t\t\t\tlng FLOAT(11,7) NOT NULL,\r\n\t\t\t\t\taddress TINYTEXT NULL,\r\n\t\t\t\t\tsaved_name VARCHAR(100) NULL,\r\n\t\t\t\t\tgeoname TINYTEXT NULL, \r\n\t\t\t\t\tpostal_code TINYTEXT NULL,\r\n\t\t\t\t\tcountry_code VARCHAR(2) NULL,\r\n\t\t\t\t\tadmin_code VARCHAR(20) NULL,\r\n\t\t\t\t\tsub_admin_code VARCHAR(80) NULL,\r\n\t\t\t\t\tlocality_name TINYTEXT NULL,\r\n\t\t\t\t\tPRIMARY KEY  (id),\r\n\t\t\t\t\tUNIQUE KEY saved_name (saved_name),\r\n\t\t\t\t\tUNIQUE KEY latlng (lat,lng),\r\n\t\t\t\t\tKEY lat (lat),\r\n\t\t\t\t\tKEY lng (lng)\r\n\t\t\t\t) $charset_collate;\r\n\t\t\t\tCREATE TABLE $relationships_table_name (\r\n\t\t\t\t\tobject_name VARCHAR(80) NOT NULL,\r\n\t\t\t\t\tobject_id BIGINT(20) NOT NULL,\r\n\t\t\t\t\tlocation_id MEDIUMINT(9) NOT NULL,\r\n\t\t\t\t\tgeo_date DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n\t\t\t\t\tPRIMARY KEY  (object_name,object_id,location_id),\r\n\t\t\t\t\tKEY object_name (object_name,object_id),\r\n\t\t\t\t\tKEY object_date_key (object_name,geo_date)\r\n\t\t\t\t) $charset_collate;\r\n\t\t\t\tCREATE TABLE $administrative_names_table_name (\r\n\t\t\t\t\tcountry_code VARCHAR(2) NOT NULL,\r\n\t\t\t\t\tadmin_code VARCHAR(20) NOT NULL,\r\n\t\t\t\t\tisolanguage VARCHAR(7) NOT NULL,\r\n\t\t\t\t\tgeoname_id MEDIUMINT(9) NULL,\r\n\t\t\t\t\tname VARCHAR(200) NOT NULL,\r\n\t\t\t\t\tPRIMARY KEY  (country_code,admin_code,isolanguage)\r\n\t\t\t\t) $charset_collate;\";\r\n\t\t\trequire_once( ABSPATH . 'wp-admin/includes/upgrade.php' );\r\n\t\t\t// Capture error messages - some are ok\r\n\t\t\t$old_show_errors = $wpdb->show_errors( true );\r\n\t\t\tob_start();\r\n\t\t\tdbDelta( $sql );\r\n\t\t\t$errors = ob_get_contents();\r\n\t\t\tob_end_clean();\r\n\t\t\t$have_create_errors = preg_match( '/^(CREATE|INSERT|UPDATE)/m', $errors );\r\n\t\t\t$have_bad_alter_errors = preg_match( '/^ALTER TABLE.*ADD (?!KEY|PRIMARY KEY|UNIQUE KEY)/m', $errors ); \r\n\t\t\t$have_bad_errors = $have_create_errors || $have_bad_alter_errors;\r\n\t\t\tif ( $errors && $have_bad_errors ) {\r\n\t\t\t\t// Any errors other than duplicate or multiple primary key could be trouble\r\n\t\t\t\tself::activation_log( $errors, true );\r\n\t\t\t} else {\r\n\t\t\t\tself::convert_prior_locations();\r\n\t\t\t\tself::set_installed_version( GEO_MASHUP_DB_VERSION );\r\n\t\t\t}\r\n\t\t\t$wpdb->show_errors( $old_show_errors );\r\n\t\t}\r\n\t\tif ( self::installed_version() == GEO_MASHUP_DB_VERSION ) {\r\n\t\t\tif ( 'true' == $geo_mashup_options->get( 'overall', 'copy_geodata' ) )\r\n\t\t\t\tself::duplicate_geodata();\r\n\t\t\tself::activation_log( __( 'Geo Mashup database is up to date.', 'GeoMashup' ), true );\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tself::activation_log( __( 'Geo Mashup database upgrade failed.', 'GeoMashup' ), true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Try to get a language-sensitive place administrative name.\r\n\t *\r\n\t * First look in the names cached in the database, then query geonames.org for it.\r\n\t * If a name can't be found for the requested language, a default name is returned,\r\n\t * usually in the local language. If nothing can be found, returns NULL.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $country_code Two-character ISO country code.\r\n\t * @param string $admin_code Code for the administrative area within the country, or NULL to get the country name.\r\n\t * @param string $language Language code, defaults to the WordPress locale language.\r\n\t * @return string|null Place name in the appropriate language, or if not available in the default language.\r\n\t */\r\n\tpublic static function get_administrative_name( $country_code, $admin_code = null, $language = '' ) {\r\n\t\t$language = self::primary_language_code( $language );\r\n\t\t$name = GeoMashupDB::get_cached_administrative_name( $country_code, $admin_code, $language );\r\n\t\tif ( empty( $name ) ) {\r\n\t\t\t// Look it up with Geonames\r\n\t\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\t\t\t$geocoder = new GeoMashupGeonamesGeocoder();\r\n\t\t\t$name = $geocoder->get_administrative_name( $country_code, $admin_code );\r\n\t\t\tif ( is_wp_error( $name ) )\r\n\t\t\t\t$name = null;\r\n\t\t}\r\n\t\treturn $name;\r\n\t}\r\n\r\n\t/** \r\n\t * Look in the database for a cached administrative name. \r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $country_code Two-character ISO country code.\r\n\t * @param string $admin_code Code for the administrative area within the country, or NULL to get the country name.\r\n\t * @param string $language Language code, defaults to the WordPress locale language.\r\n\t * @return string|null Place name or NULL.\r\n\t */\r\n\tprivate static function get_cached_administrative_name( $country_code, $admin_code = '', $language = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$language = self::primary_language_code( $language );\r\n\t\t$select_string = \"SELECT name\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_administrative_names\r\n\t\t\tWHERE \" . \r\n\t\t\t$wpdb->prepare( 'isolanguage = %s AND country_code = %s AND admin_code = %s', $language, $country_code, $admin_code ); \r\n\r\n\t\treturn $wpdb->get_var( $select_string );\r\n\t}\r\n\r\n\t/** \r\n\t * Trim a locale or browser accepted languages string down to the 2 or 3 character\r\n\t * primary language code.\r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $language Local or language code string, NULL for blog locale.\r\n\t * @return string Two (rarely three?) character language code.\r\n\t */\r\n\tpublic static function primary_language_code( $language = null ) {\r\n\t\tif ( empty( $language ) ) {\r\n\t\t\t$language = get_locale( );\r\n\t\t}\r\n\t\tif ( strlen( $language ) > 3 ) {\r\n\t\t\tif ( ctype_alpha( $language[2] ) ) {\r\n\t\t\t\t$language = substr( $language, 0, 3 );\r\n\t\t\t} else {\r\n\t\t\t\t$language = substr( $language, 0, 2 );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $language;\r\n\t}\r\n\r\n\t/**\r\n\t * Try to fill in coordinates and other fields of a location from a textual\r\n\t * location search.\r\n\t *\r\n\t * Multiple geocoding services may be used. Google services are only used\r\n\t * if the default map provider is Google.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param mixed $query The search string.\r\n\t * @param array $location The location array to geocode, modified.\r\n\t * @param string $language \r\n\t * @return bool Whether a lookup succeeded.\r\n\t */\r\n\tpublic static function geocode( $query, &$location, $language = '' ) {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\tif ( empty( $location ) ) {\r\n\t\t\t$location = self::blank_location();\r\n\t\t} else if ( !is_array( $location ) and !is_object( $location ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$status = false;\r\n\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\r\n\t\t// Try GeoCoding services (google, nominatim, geonames) until one gives an answer\r\n\t\t$results = array();\r\n\t\tif ( $geo_mashup_options->get( 'overall', 'google_server_key' ) ) {\r\n\t\t\t// Only try the google service if a google server key is present\r\n\t\t\t$google_geocoder = new GeoMashupGoogleGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $google_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t\t$nominatim_geocoder = new GeoMashupNominatimGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $nominatim_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t\t$geonames_geocoder = new GeoMashupGeonamesGeocoder( array( 'language' => $language ) );\r\n\t\t\t$results = $geonames_geocoder->geocode( $query );\r\n\t\t}\r\n\t\tif ( is_wp_error( $results ) or empty( $results ) ) {\r\n\t\t\tself::$geocode_error = $results;\r\n\t\t} else {\r\n\t\t\tself::fill_empty_location_fields( $location, $results[0] );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\t\treturn $status;\r\n\t}\r\n\r\n\t/**\r\n\t * Check a location for empty fields.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param array $location The location to check.\r\n\t * @param array $fields The fields to check.\r\n\t * @return bool Whether any of the specified fields are empty.\r\n\t */\r\n\tpublic static function are_any_location_fields_empty( $location, $fields = null ) {\r\n\t\tif ( ! is_array( $location ) ) {\r\n\t\t\t$location = (array)$location;\r\n\t\t}\r\n\t\tif ( is_null( $fields ) ) {\r\n\t\t\t$fields = array_keys( $location );\r\n\t\t}\r\n\t\tforeach( $fields as $field ) {\r\n\t\t\tif ( empty( $location[$field] ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copy empty fields in one location array from another.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param array $primary Location to copy to, modified.\r\n\t * @param array $secondary Location to copy from.\r\n\t */\r\n\tprivate static function fill_empty_location_fields( &$primary, $secondary ) {\r\n\t\t$secondary = (array)$secondary;\r\n\t\tforeach( $primary as $field => $value ) {\r\n\t\t\tif ( empty( $value ) and !empty( $secondary[$field] ) ) {\r\n\t\t\t\tif ( is_object( $primary ) )\r\n\t\t\t\t\t$primary->$field = $secondary[$field];\r\n\t\t\t\telse\r\n\t\t\t\t\t$primary[$field] = $secondary[$field];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add missing location fields, and update country and admin codes with\r\n\t * authoritative Geonames values.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param array $location The location to geocode, modified.\r\n\t * @param string $language Optional ISO language code.\r\n\t * @return bool Success.\r\n\t */\r\n\tprivate static function reverse_geocode_location( &$location, $language = '' ) {\r\n\r\n\t\t// Coordinates are required\r\n\t\tif ( self::are_any_location_fields_empty( $location, array( 'lat', 'lng' ) ) ) \r\n\t\t\treturn false;\r\n\r\n\t\t// Don't bother unless there are missing geocodable fields\r\n\t\t$geocodable_fields = array( 'country_code', 'admin_code', 'address', 'locality_name', 'postal_code' );\r\n\t\t$have_empties = self::are_any_location_fields_empty( $location, $geocodable_fields );\r\n\t\tif ( ! $have_empties ) \r\n\t\t\treturn false;\r\n\r\n\t\t$status = false;\r\n\r\n\t\tif ( !class_exists( 'GeoMashupHttpGeocoder' ) )\r\n\t\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'geo-mashup-geocoders.php' ) );\r\n\r\n\t\t$geonames_geocoder = new GeoMashupGeonamesGeocoder();\r\n\t\t$geonames_results = $geonames_geocoder->reverse_geocode( $location['lat'], $location['lng'] );\r\n\t\tif ( is_wp_error( $geonames_results ) or empty( $geonames_results ) ) {\r\n\t\t\tself::$geocode_error = $geonames_results;\r\n\t\t} else {\r\n\t\t\tif ( !empty( $geonames_results[0]->admin_code ) )\r\n\t\t\t\t$location['admin_code'] = $geonames_results[0]->admin_code;\r\n\t\t\tif ( !empty( $geonames_results[0]->country_code ) )\r\n\t\t\t\t$location['country_code'] = $geonames_results[0]->country_code;\r\n\t\t\tself::fill_empty_location_fields( $location, (array)($geonames_results[0]) );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\r\n\t\t$have_empties = self::are_any_location_fields_empty( $location, $geocodable_fields );\r\n\t\t$alternate_geocoder = self::make_alternate_reverse_geocoder();\r\n\t\tif ( $have_empties and $alternate_geocoder ) {\r\n\t\t\t$next_results = $alternate_geocoder->reverse_geocode( $location['lat'], $location['lng'] );\r\n\t\t\tif ( is_wp_error( $next_results ) or empty( $next_results ) )\r\n\t\t\t\tself::$geocode_error = $next_results;\r\n\t\t\telse\r\n\t\t\t\tself::fill_empty_location_fields( $location, (array)($next_results[0]) );\r\n\t\t\t$status = true;\r\n\t\t}\r\n\t\treturn $status;\r\n\t}\r\n\r\n\tprivate static function make_alternate_reverse_geocoder() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\t// Choose a geocoding service based on the default API in use\r\n\t\tif ( $geo_mashup_options->get( 'overall', 'google_server_key' ) ) {\r\n\t\t\treturn new GeoMashupGoogleGeocoder();\r\n\t\t} else if ( 'openlayers' == $geo_mashup_options->get( 'overall', 'map_api' ) ) {\r\n\t\t\treturn new GeoMashupNominatimGeocoder();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Try to reverse-geocode all locations with relevant missing data.\r\n\t *\r\n\t * Used by the options page. Tries to comply with the PHP maximum execution \r\n\t * time, and delay requests if Google sends a 604.\r\n\t * \r\n\t * @since 1.3\r\n\t * @return string An HTML log of the actions performed.\r\n\t */\r\n\tpublic static function bulk_reverse_geocode() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$log = date( 'r' ) . '<br/>';\r\n\t\t$select_string = 'SELECT * ' .\r\n\t\t\t\"FROM {$wpdb->prefix}geo_mashup_locations \". \r\n\t\t\t\"WHERE country_code IS NULL \".\r\n\t\t\t\"OR admin_code IS NULL \" .\r\n\t\t\t\"OR address IS NULL \" .\r\n\t\t\t\"OR locality_name IS NULL \" .\r\n\t\t\t\"OR postal_code IS NULL \";\r\n\t\t$locations = $wpdb->get_results( $select_string, ARRAY_A );\r\n\t\tif ( empty( $locations ) ) {\r\n\t\t\t$log .= __( 'No locations found with missing address fields.', 'GeoMashup' ) . '<br/>';\r\n\t\t\treturn $log;\r\n\t\t}\r\n\t\t$log .= __( 'Locations to geocode: ', 'GeoMashup' ) . count( $locations ) . '<br />';\r\n\t\t$time_limit = ini_get( 'max_execution_time' );\r\n\t\tif ( empty( $time_limit ) || !is_numeric( $time_limit ) ) {\r\n\t\t\t$time_limit = 270;\r\n\t\t} else {\r\n\t\t\t$time_limit -= ( $time_limit / 10 );\r\n\t\t}\r\n\t\t$delay = 100000; // one tenth of a second\r\n\t\t$log .= __( 'Time limit: ', 'GeoMashup' ) . $time_limit . '<br />';\r\n\t\t$start_time = time();\r\n\t\tforeach ( $locations as $location ) {\r\n\t\t\t$set_id = self::set_location( $location, true );\r\n\t\t\tif ( is_wp_error( $set_id ) ) {\r\n\t\t\t\t$log .= 'error: ' . $set_id->get_error_message() . ' ';\r\n\t\t\t} else {\r\n\t\t\t\t$log .= 'id: ' . $location['id'] . ' '; \r\n\t\t\t}\r\n\t\t\tif ( !empty( self::$geocode_error ) ) {\r\n\t\t\t\t$delay += 100000;\r\n\t\t\t\t$log .= __( 'Lookup error:', 'GeoMashup' ) . ' ' . self::$geocode_error->get_error_message() .\r\n\t\t\t\t\t\t' ' . __( 'Increasing delay to', 'GeoMashup' ) . ' ' . ( $delay / 1000000 ) .\r\n\t\t\t\t\t\t'<br/>';\r\n\t\t\t} else if ( isset( $location['address'] ) ) {\r\n\t\t\t\t$log .= __( 'address', 'GeoMashup' ) . ': ' . $location['address'];\r\n\t\t\t\tif ( isset( $location['postal_code'] ) ) \r\n\t\t\t\t\t$log .= ' ' .  __( 'postal code', 'GeoMashup' ) . ': ' . $location['postal_code'];\r\n\t\t\t\t$log .= '<br />';\r\n\t\t\t} else {\r\n\t\t\t\t$log .= '(' .$location['lat'] . ', ' . $location['lng'] . ') ' . \r\n\t\t\t\t\t\t__( 'No address info found.', 'GeoMashup' ) .  '<br/>';\r\n\t\t\t}\r\n\t\t\tif ( time() - $start_time > $time_limit ) {\r\n\t\t\t\t$log .= __( 'Time limit exceeded, retry to continue.', 'GeoMashup' ) . '<br />';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tusleep( $delay );\r\n\t\t}\r\n\t\treturn $log;\r\n\t}\r\n\t\t\t\r\n\t/**\r\n\t * Store an administrative name in the database to prevent future web service lookups.\r\n\t * \r\n\t * @since 1.2\r\n\t *\r\n\t * @param string $country_code \r\n\t * @param string $admin_code \r\n\t * @param string $isolanguage \r\n\t * @param string $name \r\n\t * @param string $geoname_id \r\n\t * @return int Rows affected.\r\n\t */\r\n\tpublic static function cache_administrative_name( $country_code, $admin_code, $isolanguage, $name, $geoname_id = null ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$table_name = $wpdb->prefix . 'geo_mashup_administrative_names';\r\n\t\t$cached_name = self::get_cached_administrative_name( $country_code, $admin_code, $isolanguage );\r\n\t\t$rows = 0;\r\n\t\tif ( empty( $cached_name ) ) {\r\n\t\t\t$rows = $wpdb->insert( $table_name, compact( 'country_code', 'admin_code', 'isolanguage', 'name', 'geoname_id' ) );\r\n\t\t} else if ( $cached_name != $name ) {\r\n\t\t\t$rows = $wpdb->update( $table_name, compact( 'name' ), compact( 'country_code', 'admin_code', 'name' ) );\r\n\t\t}\r\n\t\treturn $rows;\r\n\t}\r\n\r\n\t/**\r\n\t * Copy missing geo data to and from the standard location (http://codex.wordpress.org/Geodata)\r\n\t * for posts, users, and comments.\r\n\t *\r\n\t * @since 1.4\r\n\t * @return bool True if no more orphan locations can be found.\r\n\t */\r\n\tpublic static function duplicate_geodata() {\r\n\t\tself::duplicate_geodata_type( 'post' );\r\n\t\tself::duplicate_geodata_type( 'user' );\r\n\t\tself::duplicate_geodata_type( 'comment' );\r\n\t\tself::activation_log( __( 'Geodata duplication done.', 'GeoMashup' ), true );\r\n\t}\r\n\r\n\t/**\r\n\t * Copy missing geo data to and from the standard location (http://codex.wordpress.org/Geodata)\r\n\t * for a specific object type.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @global object $wpdb\r\n\t * @param string $meta_type One of the WP meta types, 'post', 'user', 'comment'\r\n\t * @return bool True if no more orphan locations can be found.\r\n\t */\r\n\tprivate static function duplicate_geodata_type( $meta_type ) {\r\n\t\tglobal $wpdb;\r\n\t\t$object_storage = self::object_storage( $meta_type );\r\n\t\t$meta_type = esc_sql( $meta_type );\r\n\t\t$meta_type_id = $meta_type . '_id';\r\n\t\t$meta_table = $meta_type . 'meta';\r\n\t\t// Copy from meta table to geo mashup\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$meta_select = \"SELECT pmlat.{$meta_type_id} as object_id, pmlat.meta_value as lat, pmlng.meta_value as lng, pmaddr.meta_value as address, o.{$object_storage['date_column']} as object_date\r\n\t\t\tFROM {$object_storage['table']} o\r\n\t\t\tINNER JOIN {$wpdb->$meta_table} pmlat ON pmlat.{$meta_type_id} = o.{$object_storage['id_column']} AND pmlat.meta_key = 'geo_latitude'\r\n\t\t\tINNER JOIN {$wpdb->$meta_table} pmlng ON pmlng.{$meta_type_id} = o.{$object_storage['id_column']} AND pmlng.meta_key = 'geo_longitude'\r\n\t\t\tLEFT JOIN {$wpdb->$meta_table} pmaddr ON pmaddr.{$meta_type_id} = o.{$object_storage['id_column']} AND pmaddr.meta_key = 'geo_address'\r\n\t\t\tLEFT JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = o.{$object_storage['id_column']} AND gmlr.object_name = '{$meta_type}'\r\n\t\t\tWHERE pmlat.meta_key = 'geo_latitude' \r\n\t\t\tAND gmlr.object_id IS NULL\";\r\n\r\n\t\t$wpdb->query( $meta_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_metadata = $wpdb->last_result;\r\n\t\tif ( $unconverted_metadata ) {\r\n\t\t\t$msg = sprintf( __( 'Copying missing %s geodata from WordPress', 'GeoMashup' ), $meta_type );\r\n\t\t\tself::activation_log( $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_metadata as $objectmeta ) {\r\n\t\t\t\t$object_id = $objectmeta->object_id;\r\n\t\t\t\t$location = array( 'lat' => trim( $objectmeta->lat ), 'lng' => trim( $objectmeta->lng ), 'address' => trim( $objectmeta->address ) );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 10 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_object_location( $meta_type, $object_id, $location, $do_lookups, $objectmeta->object_date );\r\n\t\t\t\tif ( !is_wp_error( $set_id ) ) {\r\n\t\t\t\t\tself::activation_log( 'OK: ' . $meta_type . ' id ' . $object_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to duplicate WordPress location (%s). You can edit %s with id %s ' .\r\n\t\t\t\t\t\t'to update the location, and try again.', 'GeoMashup' ),\r\n\t\t\t\t\t\t$objectmeta->lat . ',' . $objectmeta->lng, $meta_type, $object_id );\r\n\t\t\t\t\t$msg .= ' (' . $set_id->get_error_message() . ')';\r\n\t\t\t\t\tself::activation_log( $msg, true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy from Geo Mashup to missing object meta\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$geomashup_select = \"SELECT gmlr.object_id, gml.lat, gml.lng, gml.address\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\r\n\t\t\tLEFT JOIN {$wpdb->$meta_table} pmlat ON pmlat.{$meta_type_id} = gmlr.object_id AND pmlat.meta_key = 'geo_latitude'\r\n\t\t\tWHERE gmlr.object_name = '{$meta_type}'\r\n\t\t\tAND pmlat.{$meta_type_id} IS NULL\";\r\n\r\n\t\t$wpdb->query( $geomashup_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error, true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_geomashup_objects = $wpdb->last_result;\r\n\t\tif ( $unconverted_geomashup_objects ) {\r\n\t\t\t$msg = sprintf( __( 'Copying missing %s geodata from Geo Mashup', 'GeoMashup' ), $meta_type );\r\n\t\t\tself::activation_log( date( 'r' ) . ' ' . $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_geomashup_objects as $location ) {\r\n\t\t\t\t$lat_success = update_metadata( $meta_type, $location->object_id, 'geo_latitude', $location->lat );\r\n\t\t\t\t$lng_success = update_metadata( $meta_type, $location->object_id, 'geo_longitude', $location->lng );\r\n\t\t\t\tif ( ! empty( $location->address ) ) {\r\n\t\t\t\t\tupdate_metadata( $meta_type, $location->object_id, 'geo_address', $location->address );\r\n\t\t\t\t}\r\n\t\t\t\tif ( $lat_success and $lng_success ) {\r\n\t\t\t\t\tself::activation_log( 'OK: ' . $meta_type . ' id ' . $location->object_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to duplicate Geo Mashup location for %s (%s).', 'GeoMashup' ), $meta_type, $location->object_id );\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$wpdb->query( $meta_select );\r\n\r\n\t\treturn ( empty( $wpdb->last_result ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Convert Geo plugin locations to Geo Mashup format.\r\n\t *\r\n\t * @since 1.2\r\n\t * @return bool True if no more unconverted locations can be found.\r\n\t */\r\n\tprivate static function convert_prior_locations( ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t// NOT EXISTS doesn't work in MySQL 4, use left joins instead\r\n\t\t$unconverted_select = \"SELECT pm.post_id, pm.meta_value\r\n\t\t\tFROM {$wpdb->postmeta} pm\r\n\t\t\tLEFT JOIN {$wpdb->postmeta} lpm ON lpm.post_id = pm.post_id \r\n\t\t\tAND lpm.meta_key = '_geo_converted'\r\n\t\t\tLEFT JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = pm.post_id\r\n\t\t\tAND gmlr.object_name = 'post'\r\n\t\t\tWHERE pm.meta_key = '_geo_location' \r\n\t\t\tAND length( pm.meta_value ) > 3\r\n\t\t\tAND pm.meta_value LIKE '%,%'\r\n\t\t\tAND lpm.post_id IS NULL \r\n\t\t\tAND gmlr.object_id IS NULL\";\r\n\r\n\t\t$wpdb->query( $unconverted_select );\r\n\r\n\t\tif ($wpdb->last_error) {\r\n\t\t\tself::activation_log( $wpdb->last_error, true );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$unconverted_metadata = $wpdb->last_result;\r\n\t\tif ( $unconverted_metadata ) {\r\n\t\t\t$msg = __( 'Converting old locations', 'GeoMashup' );\r\n\t\t\tself::activation_log( date( 'r' ) . ' ' . $msg );\r\n\t\t\t$start_time = time();\r\n\t\t\tforeach ( $unconverted_metadata as $postmeta ) {\r\n\t\t\t\t$post_id = $postmeta->post_id;\r\n\t\t\t\tlist( $lat, $lng ) = explode( ',', $postmeta->meta_value );\r\n\t\t\t\t$location = array( 'lat' => trim( $lat ), 'lng' => trim( $lng ) );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 10 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_object_location( 'post', $post_id, $location, $do_lookups );\r\n\t\t\t\tif ( !is_wp_error( $set_id ) ) {\r\n\t\t\t\t\tadd_post_meta( $post_id, '_geo_converted', $wpdb->prefix . 'geo_mashup_locations.id = ' . $set_id );\r\n\t\t\t\t\tself::activation_log( 'OK: post_id ' . $post_id );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = sprintf( __( 'Failed to convert location (%s). You can %s edit the post %s ' .\r\n\t\t\t\t\t\t'to update the location, and try again.', 'GeoMashup' ),\r\n\t\t\t\t\t\t$postmeta->meta_value, '<a href=\"post.php?action=edit&post=' . $post_id . '\">', '</a>');\r\n\t\t\t\t\t$msg .= ' (' . $set_id->get_error_message() . ')';\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$geo_locations = get_option( 'geo_locations' );\r\n\t\tif ( is_array( $geo_locations ) ) {\r\n\t\t\t$msg = __( 'Converting saved locations', 'GeoMashup' );\r\n\t\t\tself::activation_log( $msg );\r\n\t\t\tforeach ( $geo_locations as $saved_name => $coordinates ) {\r\n\t\t\t\tlist( $lat, $lng, $converted ) = explode( ',', $coordinates );\r\n\t\t\t\t$location = array( 'lat' => trim( $lat ), 'lng' => trim( $lng ), 'saved_name' => $saved_name );\r\n\t\t\t\t$do_lookups = ( ( time() - $start_time ) < 15 ) ? true : false;\r\n\t\t\t\t$set_id = self::set_location( $location, $do_lookups );\r\n\t\t\t\tif ( ! is_wp_error( $set_id ) ) {\r\n\t\t\t\t\t$geo_locations[$saved_name] .= ',' . $wpdb->prefix . 'geo_mashup_locations.id=' . $set_id;\r\n\t\t\t\t\t$msg = __( 'OK: ', 'GeoMashup' ) . $saved_name . '<br/>';\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$msg = $saved_name . ' - ' . \r\n\t\t\t\t\t\tsprintf( __( \"Failed to convert saved location (%s). \" .\r\n\t\t\t\t\t\t\t\"You'll have to save it again, sorry.\", 'GeoMashup' ),\r\n\t\t\t\t\t\t$coordinates );\r\n\t\t\t\t\tself::activation_log( $set_id->get_error_message() );\r\n\t\t\t\t\tself::activation_log( $msg );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete_option( 'geo_locations', $geo_locations );\r\n\t\t}\r\n\r\n\t\t$geo_date_update = \"UPDATE {$wpdb->prefix}geo_mashup_location_relationships gmlr, $wpdb->posts p \" .\r\n\t\t\t\"SET gmlr.geo_date = p.post_date \" .\r\n\t\t\t\"WHERE gmlr.object_name='post' \" .\r\n\t\t\t\"AND gmlr.object_id = p.ID \" .\r\n\t\t\t\"AND gmlr.geo_date = '0000-00-00 00:00:00'\";\r\n\r\n\t\t$geo_date_count = $wpdb->query( $geo_date_update );\r\n\r\n\t\tif ( $geo_date_count === false ) {\r\n\t\t\t$msg = __( 'Failed to initialize geo dates from post dates: ', 'GeoMashup' );\r\n\t\t\t$msg .= $wpdb->last_error;\r\n\t\t} else {\r\n\t\t\t$msg = sprintf( __( 'Initialized %d geo dates from corresponding post dates.', 'GeoMashup' ), $geo_date_count );\r\n\t\t}\r\n\r\n\t\tself::activation_log( $msg, true );\r\n\r\n\t\t$wpdb->query( $unconverted_select );\r\n\r\n\t\treturn ( empty( $wpdb->last_result ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Get a blank location.\r\n\t *\r\n\t * Used to return object fields too - use blank_object_location for that if desired.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @param string $format OBJECT or ARRAY_A\r\n\t * @return array|object Empty location.\r\n\t */\r\n\tpublic static function blank_location( $format = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $blank_location = null;\r\n\t\tif ( is_null( $blank_location ) ) {\r\n\t\t\t$wpdb->query(\"SELECT * FROM {$wpdb->prefix}geo_mashup_locations WHERE 1=2\" );\r\n\t\t\t$col_info = $wpdb->get_col_info();\r\n\t\t\t$blank_location = array();\r\n\t\t\tforeach( $col_info as $col_name ) {\r\n\t\t\t\t$blank_location[$col_name] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $format == OBJECT ) {\r\n\t\t\treturn (object) $blank_location;\r\n\t\t} else {\r\n\t\t\treturn $blank_location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get a blank object location.\r\n\t *\r\n\t * @since 1.4\r\n\t *\r\n\t * @param string $format OBJECT or ARRAY_A\r\n\t * @return array|object Empty object location.\r\n\t */\r\n\tpublic static function blank_object_location( $format = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\t\tstatic $blank_object_location = null;\r\n\t\tif ( is_null( $blank_object_location ) ) {\r\n\t\t\t$wpdb->query(\"SELECT * FROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\t\t\tJOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\r\n\t\t\t\t\tWHERE 1=2\" );\r\n\t\t\t$col_info = $wpdb->get_col_info();\r\n\t\t\t$blank_object_location = array();\r\n\t\t\tforeach( $col_info as $col_name ) {\r\n\t\t\t\t$blank_object_location[$col_name] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $format == OBJECT ) {\r\n\t\t\treturn (object) $blank_object_location;\r\n\t\t} else {\r\n\t\t\treturn $blank_object_location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get distinct values of one or more object location fields.\r\n\t *\r\n\t * Can be used to get a list of countries with locations, for example.\r\n\t *\r\n\t * @since 1.2\r\n\t * \r\n\t * @param string $names Comma separated table field names.\r\n\t * @param array $where Associtive array of conditional field names and values.\r\n\t * @return array WP_DB query results.\r\n\t */\r\n\tpublic static function get_distinct_located_values( $names, $where = null ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( is_string( $names ) ) {\r\n\t\t\t$names = preg_split( '/\\s*,\\s*/', $names );\r\n\t\t}\r\n\t\t$wheres = array( );\r\n\t\tforeach( $names as $name ) {\r\n\t\t\t$wheres[] = esc_sql( $name ) . ' IS NOT NULL';\r\n\t\t}\r\n\t\t$names = implode( ',', $names );\r\n\r\n\t\tif ( is_object( $where ) ) {\r\n\t\t\t$where = (array) $where;\r\n\t\t}\r\n\r\n\t\t$select_string = 'SELECT DISTINCT ' . esc_sql( $names ) . \"\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\tJOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.location_id = gml.id\";\r\n\r\n\t\tif ( is_array( $where ) && !empty( $where ) ) {\r\n\t\t\tforeach ( $where as $name => $value ) {\r\n\t\t\t\t$wheres[] = esc_sql( $name ) . ' = \\'' . esc_sql( $value ) .'\\'';\r\n\t\t\t}\r\n\t\t\t$select_string .= ' WHERE ' . implode( ' AND ', $wheres );\r\n\t\t}\r\n\t\t$select_string .= ' ORDER BY ' . esc_sql( $names );\r\n\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the location of a post.\r\n\t *\r\n\t * @since 1.2\r\n\t * @uses GeoMashupDB::get_object_location()\r\n\t * \r\n\t * @param id $post_id \r\n\t * @return object Post location.\r\n\t */\r\n\tpublic static function get_post_location( $post_id ) {\r\n\t\treturn self::get_object_location( 'post', $post_id );\r\n\t}\r\n\r\n\t/**\r\n\t * Format a query result as an object or array.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $obj To be formatted.\r\n\t * @param constant $output Format.\r\n\t * @return object|array Result.\r\n\t */\r\n\tprivate static function translate_object( $obj, $output = OBJECT ) {\r\n\t\tif ( !is_object( $obj ) ) {\r\n\t\t\treturn $obj;\r\n\t\t}\r\n\r\n\t\tif ( $output == OBJECT ) {\r\n\t\t} elseif ( $output == ARRAY_A ) {\r\n\t\t\t$obj = get_object_vars($obj);\r\n\t\t} elseif ( $output == ARRAY_N ) {\r\n\t\t\t$obj = array_values(get_object_vars($obj));\r\n\t\t}\r\n\t\treturn $obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the location of an object.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param int $object_id Object\r\n\t * @param string $output (optional) one of ARRAY_A | ARRAY_N | OBJECT constants.  Return an\r\n\t * \t\tassociative array (column => value, ...), a numerically indexed array (0 => value, ...)\r\n\t * \t\tor an object ( ->column = value ), respectively.\r\n\t * @return object|array Result or null if not found.\r\n\t */\r\n\tpublic static function get_object_location( $object_name, $object_id, $output = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$cache_id = $object_name . '-' . $object_id;\r\n\r\n\t\t$object_location = wp_cache_get( $cache_id, 'geo_mashup_object_locations' );\r\n\t\tif ( !$object_location ) {\r\n\t\t\t$object_store = self::object_storage( $object_name );\r\n\t\t\t$field_string = \"gmlr.object_id, gmlr.geo_date, o.{$object_store['label_column']} as label, gml.*\";\r\n\r\n\t\t\tif ( 'post' == $object_name )\r\n\t\t\t\t$field_string .= ', o.post_author';\r\n\r\n\t\t\t$select_string = \"SELECT {$field_string}\r\n\t\t\t\tFROM {$wpdb->prefix}geo_mashup_locations gml\r\n\t\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr \" .\r\n\t\t\t\t$wpdb->prepare( 'ON gmlr.object_name = %s AND gmlr.location_id = gml.id ', $object_name ) .\r\n\t\t\t\t\"INNER JOIN {$object_store['table']} o ON o.{$object_store['id_column']} = gmlr.object_id \" .\r\n\t\t\t\t$wpdb->prepare( 'WHERE gmlr.object_id = %d', $object_id ); \r\n\r\n\t\t\t$object_location = $wpdb->get_row( $select_string );\r\n\t\t\twp_cache_add( $cache_id, $object_location, 'geo_mashup_object_locations' );\r\n\t\t}\r\n\t\treturn self::translate_object( $object_location, $output );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get a location by ID.\r\n\t * \r\n\t * @since 1.4\r\n\t * \r\n\t * @param int $location_id\r\n\t * @param string $output (optional) one of ARRAY_A | ARRAY_N | OBJECT constants.  Return an \r\n\t * \t\tassociative array (column => value, ...), a numerically indexed array (0 => value, ...) \r\n\t * \t\tor an object ( ->column = value ), respectively.\r\n\t * @return object|array Result or null if not found.\r\n\t */\r\n\tpublic static function get_location( $location_id, $output = OBJECT ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$location = wp_cache_get( $location_id, 'geo_mashup_locations' );\r\n\t\tif ( !$location ) {\r\n\t\t\t$location = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM {$wpdb->prefix}geo_mashup_locations WHERE id = %d\", $location_id ) );\r\n\t\t\twp_cache_add( $location_id, $location, 'geo_mashup_locations' );\r\n\t\t}\r\n\t\treturn self::translate_object( $location, $output );\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations of posts.\r\n\t * \r\n\t * @since 1.2\r\n\t * @uses GeoMashupDB::get_object_locations()\r\n\t * \r\n\t * @param string $query_args Same as GeoMashupDB::get_object_locations()\r\n\t * @return array Array of matching rows.\r\n\t */\r\n\tpublic static function get_post_locations( $query_args = '' ) {\r\n\t\treturn self::get_object_locations( $query_args );\r\n\t}\r\n\r\n\t/**\r\n\t * Sanitize an array of query arguments.\r\n\t *\r\n\t * @param array $query_args\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic static function sanitize_query_args( $query_args ) {\r\n\t\tarray_walk_recursive($query_args, array( __CLASS__, 'sanitize_query_arg' ) );\r\n\t\treturn $query_args;\r\n\t}\r\n\r\n\t/**\r\n\t * Sanitize a single query argument.\r\n\t *\r\n\t * @param mixed $value May be modified.\r\n\t * @param string $name\r\n\t */\r\n\tpublic static function sanitize_query_arg( &$value, $name ) {\r\n\t\tswitch ($name) {\r\n\t\t\tcase 'minlat':\r\n\t\t\tcase 'maxlat':\r\n\t\t\tcase 'minlng':\r\n\t\t\tcase 'maxlng':\r\n\t\t\tcase 'near_lat':\r\n\t\t\tcase 'near_lng':\r\n\t\t\tcase 'radius_km':\r\n\t\t\tcase 'radius_mi':\r\n\t\t\t\t$value = (float) $value;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'map_cat':\r\n\t\t\tcase 'object_ids':\r\n\t\t\t\t$value = preg_replace( '/[^0-9,]', '', $value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'map_post_type':\r\n\t\t\tcase 'object_name':\r\n\t\t\t\t$value = sanitize_key( $value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'limit':\r\n\t\t\tcase 'map_offset':\r\n\t\t\t\t$value = (int) $value;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'suppress_filters':\r\n\t\t\t\t$value = (bool) $value;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t$value = sanitize_text_field( $value );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations of objects.\r\n\t *\r\n\t * <code>\r\n\t * $results = GeoMashupDB::get_object_locations( array( \r\n\t * \t'object_name' => 'user', \r\n\t * \t'minlat' => 30,\r\n\t * \t'maxlat' => 40, \r\n\t * \t'minlon' => -106, \r\n\t * \t'maxlat' => -103 ) \r\n\t * );\r\n\t * </code>\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $query_args Override default args.\r\n\t * @return array Array of matching rows.\r\n\t */\r\n\tpublic static function get_object_locations( $query_args = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$default_args = array( \r\n\t\t\t'minlat' => null, \r\n\t\t\t'maxlat' => null, \r\n\t\t\t'minlon' => null, \r\n\t\t\t'maxlon' => null,\r\n\t\t\t'radius_km' => null,\r\n\t\t\t'radius_mi' => null,\r\n\t\t\t'map_cat' => null,\r\n\t\t\t'tax_query' => null,\r\n\t\t\t'map_post_type' => 'any',\r\n\t\t\t'object_name' => 'post',\r\n\t\t\t'show_future' => 'false', \r\n\t\t\t'suppress_filters' => false,\r\n\t \t\t'limit' => 0,\r\n\t\t\t'map_offset' => 0,\r\n\t\t);\r\n\t\t$query_args = wp_parse_args( $query_args, $default_args );\r\n\t\t\r\n\t\t// Construct the query \r\n\t\t$object_name = $query_args['object_name'];\r\n\t\t$object_store = self::object_storage( $object_name );\r\n\t\tif ( empty( $object_store ) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Giving tables an alias was a mistake, now filters depend on them\r\n\t\t$field_string = \"gmlr.object_id, gmlr.geo_date, o.{$object_store['label_column']} as label, gml.*\";\r\n\t\t$table_string = \"{$wpdb->prefix}geo_mashup_locations gml \" . \r\n\t\t\t\"INNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr \" .\r\n\t\t\t$wpdb->prepare( 'ON gmlr.object_name = %s AND gmlr.location_id = gml.id ', $object_name ) .\r\n\t\t\t\"INNER JOIN {$object_store['table']} o ON o.{$object_store['id_column']} = gmlr.object_id\";\r\n\t\t$wheres = array( );\r\n\t\t$groupby = '';\r\n\t\t$having = '';\r\n\r\n\t\tif ( 'post' == $object_name ) {\r\n\t\t\t$field_string .= ', o.post_author';\r\n\t\t\tif ( $query_args['show_future'] == 'true' ) {\r\n\t\t\t\t$wheres[] = 'post_status in ( \\'publish\\',\\'future\\' )';\r\n\t\t\t} else if ( $query_args['show_future'] == 'only' ) {\r\n\t\t\t\t$wheres[] = 'post_status = \\'future\\'';\r\n\t\t\t} else {\r\n\t\t\t\t$wheres[] = 'post_status = \\'publish\\'';\r\n\t\t\t}\r\n\r\n\t\t} else if ( 'comment' == $object_name ) {\r\n\t\t\t$wheres[] = 'comment_approved = \\'1\\'';\r\n\t\t}\r\n\r\n\t\t$location_args = wp_array_slice_assoc( $query_args, array_keys( GM_Location_Query::get_defaults() ) );\r\n\t\t$location_query = new GM_Location_Query( $location_args );\r\n\r\n\t\t// Handle inclusion and exclusion of terms\r\n\t\tif ( ! empty( $query_args['tax_query'] ) and is_array( $query_args['tax_query'] ) )\r\n\t\t\t$tax_query = $query_args['tax_query'];\r\n\t\telse\r\n\t\t\t$tax_query = array();\r\n\r\n\t\tif ( ! empty( $query_args['map_cat'] ) ) {\r\n\r\n\t\t\t$cats = preg_split( '/[,\\s]+/', $query_args['map_cat'] );\r\n\r\n\t\t\t$escaped_include_ids = array();\r\n\t\t\t$escaped_exclude_ids = array();\r\n\r\n\t\t\tforeach( $cats as $cat ) {\r\n\r\n\t\t\t\tif ( is_numeric( $cat ) ) {\r\n\r\n\t\t\t\t\tif ( $cat < 0 ) {\r\n\t\t\t\t\t\t$escaped_exclude_ids[] = abs( $cat );\r\n\t\t\t\t\t\t$escaped_exclude_ids = array_merge( $escaped_exclude_ids, get_term_children( $cat, 'category' ) );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$escaped_include_ids[] = intval( $cat );\r\n\t\t\t\t\t\t$escaped_include_ids = array_merge( $escaped_include_ids, get_term_children( $cat, 'category' ) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Slugs might begin with a dash, so we only include them\r\n\t\t\t\t\t$term = get_term_by( 'slug', $cat, 'category' );\r\n\t\t\t\t\tif ( $term ) {\r\n\t\t\t\t\t\t$escaped_include_ids[] = $term->term_id;\r\n\t\t\t\t\t\t$escaped_include_ids = array_merge( $escaped_include_ids, get_term_children( $term->term_id, 'category' ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\r\n\t\t\tif ( ! empty( $escaped_include_ids ) ) {\r\n\t\t\t\t$tax_query[] = array(\r\n\t\t\t\t\t'taxonomy' => 'category',\r\n\t\t\t\t\t'terms' => $escaped_include_ids,\r\n\t\t\t\t\t'field' => 'term_id',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! empty( $escaped_exclude_ids ) ) {\r\n\t\t\t\t$tax_query[] = array(\r\n\t\t\t\t\t'taxonomy' => 'category',\r\n\t\t\t\t\t'terms' => $escaped_exclude_ids,\r\n\t\t\t\t\t'operator' => 'NOT IN',\r\n\t\t\t\t\t'field' => 'term_id',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t} // end if map_cat exists \r\n\r\n\t\tif ( !empty( $tax_query ) ) {\r\n\t\t\t$tax_clauses = get_tax_sql( $tax_query, 'o', $object_store['id_column'] );\r\n\t\t\t$table_string .= $tax_clauses['join'];\r\n\t\t\t$wheres[] = preg_replace( '/^ AND/', '', $tax_clauses['where'] );\r\n\t\t\t$groupby = 'GROUP BY gmlr.object_id';\r\n\t\t}\r\n\r\n\t\tif ( 'post' == $object_name ) {\r\n\t\t\t// Handle inclusion and exclusion of post types\r\n\t\t\tif ( 'any' == $query_args['map_post_type'] ) {\r\n\t\t\t\t$include_post_types = '';\r\n\t\t\t\t$searchable_post_types = GeoMashup::get_searchable_post_types();\r\n\r\n\t\t\t\tif ( ! empty( $searchable_post_types ) )\r\n\t\t\t\t\t$include_post_types .= \"o.post_type IN ('\" . join(\"', '\", array_map( 'esc_sql', $searchable_post_types ) ) . \"')\";\r\n\r\n\t\t\t\t$wheres[] = $include_post_types;\r\n\t\t\t} else {\r\n\t\t\t\tif ( !is_array( $query_args['map_post_type'] ) ) \r\n\t\t\t\t\t$query_args['map_post_type'] = preg_split( '/[,\\s]+/', $query_args['map_post_type'] );\r\n\t\t\t\t$wheres[] = \"o.post_type IN ('\" . join(\"', '\", $query_args['map_post_type']) . \"')\";\r\n\t\t\t}\r\n\t\t} \r\n\r\n\t\tif ( ! empty( $query_args['object_id'] ) ) {\r\n\t\t\t$wheres[] = 'gmlr.object_id = ' . esc_sql( $query_args['object_id'] );\r\n\t\t} else if ( ! empty( $query_args['object_ids'] ) ) {\r\n\t\t\t$wheres[] = 'gmlr.object_id IN ( ' . esc_sql( $query_args['object_ids'] ) .' )';\r\n\t\t}\r\n\r\n\t\tif ( ! empty( $query_args['exclude_object_ids'] ) ) \r\n\t\t\t$wheres[] = 'gmlr.object_id NOT IN ( ' . esc_sql( $query_args['exclude_object_ids'] ) . ' )';\r\n\r\n\t\tlist( $l_cols, $l_join, $l_where, $l_groupby ) = $location_query->get_sql( 'o', $object_store['id_column'] );\r\n\t\t$field_string .= $l_cols;\r\n\t\t$table_string .= $l_join;\r\n\t\tif ( empty( $groupby ) and !empty( $l_groupby ) )\r\n\t\t\t$groupby = 'GROUP BY ' . $l_groupby;\r\n\t\t$where = ( empty( $wheres ) ) ? '' :  'WHERE ' . implode( ' AND ', $wheres ) . $l_where;\r\n\t\t$sort = ( isset( $query_args['sort'] ) ) ? $query_args['sort'] : $object_store['sort'];\r\n\t\t$sort = ( empty( $sort ) ) ? '' : 'ORDER BY ' . esc_sql( $sort );\r\n\t\t$offset = absint( $query_args['map_offset'] );\r\n\t\t$limit = absint( $query_args['limit'] );\r\n\t\tif ( $limit or $offset )\r\n\t\t\t$limit = \" LIMIT {$offset},{$limit}\";\r\n\t\telse\r\n\t\t\t$limit = '';\r\n\r\n\t\tif ( ! $query_args['suppress_filters'] ) {\r\n\t\t\t$field_string = apply_filters( 'geo_mashup_locations_fields', $field_string, $query_args );\r\n\t\t\t$table_string = apply_filters( 'geo_mashup_locations_join', $table_string, $query_args );\r\n\t\t\t$where = apply_filters( 'geo_mashup_locations_where', $where, $query_args );\r\n\t\t\t$sort = apply_filters( 'geo_mashup_locations_orderby', $sort, $query_args );\r\n\t\t\t$groupby = apply_filters( 'geo_mashup_locations_groupby', $groupby, $query_args );\r\n\t\t\t$limit = apply_filters( 'geo_mashup_locations_limits', $limit, $query_args );\r\n\t\t}\r\n\t\t\r\n\t\t$query_string = \"SELECT $field_string FROM $table_string $where $groupby $having $sort $limit\";\r\n\r\n\t\t$wpdb->query( $query_string );\r\n\t\t\r\n\t\treturn $wpdb->last_result;\r\n\t}\r\n\r\n\t/**\r\n\t * Save an object location in the database.\r\n\t *\r\n\t * Object data is saved in the geo_mashup_location_relationships table, and \r\n\t * location data is saved in geo_mashup_locations.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses do_action() Calls 'geo_mashup_added_object_location' with the object name,\r\n\t *       object id, geo date, and location array\r\n\t * @uses do_action() Calls 'geo_mashup_updated_object_location' with the object name,\r\n\t *       object id, geo date, and location array\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param id $object_id ID of the object to save the location for.\r\n\t * @param id|array $location If an ID, the location is not modified. If an array of valid location fields,\r\n\t * \t\tthe location is added or updated. If empty, the object location is deleted.\r\n\t * @param bool $do_lookups Whether to try looking up missing location information, which can take extra time.\r\n\t * \t\tDefault is to use the saved option.\r\n\t * @param string $geo_date Optional geo date to associate with the object.\r\n\t * @return id|WP_Error The location ID now assiociated with the object.\r\n\t */\r\n\tpublic static function set_object_location( $object_name, $object_id, $location, $do_lookups = null, $geo_date = '' ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( is_numeric( $location ) ) {\r\n\t\t\t$location_id = $location;\r\n\t\t} \r\n\r\n\t\tif ( !isset( $location_id ) ) {\r\n\t\t\t$location_id = self::set_location( $location, $do_lookups );\r\n\t\t\tif ( is_wp_error( $location_id ) ) {\r\n\t\t\t\treturn $location_id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( !is_numeric( $location_id ) ) {\r\n\t\t\tself::delete_object_location( $object_name, $object_id );\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif ( empty( $geo_date ) ) {\r\n\t\t\t$geo_date = date( 'Y-m-d H:i:s' );\r\n\t\t} else {\r\n\t\t\t$geo_date = date( 'Y-m-d H:i:s', strtotime( $geo_date ) );\r\n\t\t}\r\n\r\n\t\t$relationship_table = \"{$wpdb->prefix}geo_mashup_location_relationships\"; \r\n\t\t$select_string = \"SELECT * FROM $relationship_table \" .\r\n\t\t\t$wpdb->prepare( 'WHERE object_name = %s AND object_id = %d', $object_name, $object_id );\r\n\r\n\t\t$db_location = $wpdb->get_row( $select_string, ARRAY_A );\r\n\r\n\t\t$set_id = null;\r\n\t\tif ( empty( $db_location ) ) {\r\n\t\t\tif ( $wpdb->insert( $relationship_table, compact( 'object_name', 'object_id', 'location_id', 'geo_date' ) ) ) {\r\n\t\t\t\t$set_id = $location_id;\r\n\t\t\t} else { \r\n\t\t\t\treturn new WP_Error( 'db_insert_error', $wpdb->last_error );\r\n\t\t\t}\r\n\t\t\tdo_action( 'geo_mashup_added_object_location', $object_name, $object_id, $geo_date, $location_id );\r\n\t\t} else {\r\n\t\t\t$wpdb->update( $relationship_table, compact( 'location_id', 'geo_date' ), compact( 'object_name', 'object_id' ) );\r\n\t\t\tif ( $wpdb->last_error ) \r\n\t\t\t\treturn new WP_Error( 'db_update_error', $wpdb->last_error );\r\n\t\t\t$set_id = $location_id;\r\n\t\t\tdo_action( 'geo_mashup_updated_object_location', $object_name, $object_id, $geo_date, $location_id );\r\n\t\t}\r\n\t\twp_cache_delete( $object_name . '-' . $object_id, 'geo_mashup_object_locations');\r\n\r\n\t\treturn $set_id;\r\n\t}\r\n\r\n\t/**\r\n\t * Save a location.\r\n\t *\r\n\t * This can create a new location or update an existing one. If a location exists within 5 decimal\r\n\t * places of the passed in coordinates, it will be updated. If the saved_name of a different location\r\n\t * is given, it will be removed from the other location and saved with this one. Blank fields will not\r\n\t * replace existing data.\r\n\t * \r\n\t * @since 1.2\r\n\t * @uses do_action() Calls 'geo_mashup_added_location' with the location array added\r\n\t * @uses do_action() Calls 'geo_mashup_updated_location' with the location array updated\r\n\t *\r\n\t * @param array $location Location to save, may be modified to match actual saved data.\r\n\t * @param bool $do_lookups Whether to try to look up address information before saving,\r\n\t * \t\tdefault is to use the saved option.\r\n\t * @return id|WP_Error The location ID saved, or a WordPress error.\r\n\t */\r\n\tpublic static function set_location( &$location, $do_lookups = null ) {\r\n\t\tglobal $wpdb, $geo_mashup_options;\r\n\r\n\t\tif ( is_null( $do_lookups ) ) {\r\n\t\t\t$do_lookups = ( $geo_mashup_options->get( 'overall', 'enable_reverse_geocoding' ) == 'true' );\r\n\t\t}\r\n\r\n\t\t$input_type = ARRAY_A;\r\n\t\tif ( is_object( $location ) ) {\r\n\t\t\t$input_type = OBJECT;\r\n\t\t\t$location = (array) $location;\r\n\t\t}\r\n\r\n\t\t// Check for existing location ID\r\n\t\t$location_table = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$select_string = \"SELECT id, saved_name FROM $location_table \";\r\n\r\n\t\t// If local has a different floating point format, change it temporarily\r\n\t\t$changed_locale = false;\r\n\t\tif ( (string) 1.1 != '1.1' ) {\r\n\t\t\t$original_locale = setlocale( constant( 'LC_NUMERIC' ), null );\r\n\t\t\tsetlocale( constant( 'LC_NUMERIC' ), 'en_US' );\r\n\t\t\t$changed_locale = true;\r\n\t\t}\r\n\r\n\t\tif ( isset( $location['id'] ) && is_numeric( $location['id'] ) ) {\r\n\r\n\t\t\t$select_string .= $wpdb->prepare( 'WHERE id = %d', $location['id'] );\r\n\r\n\t\t} else if ( isset( $location['lat'] ) and is_numeric( $location['lat'] ) and isset( $location['lng'] ) and is_numeric( $location['lng'] ) ) {\r\n\r\n\t\t\t// The database might round these, but let's be explicit and stymy evildoers too\r\n\t\t\t$location['lat'] = round( $location['lat'], 7 );\r\n\t\t\t$location['lng'] = round( $location['lng'], 7 );\r\n\r\n\t\t\t// MySql appears to only distinguish 5 decimal places, ~8 feet, in the index\r\n\t\t\t$delta = 0.00001;\r\n\t\t\t$select_string .= $wpdb->prepare( 'WHERE lat BETWEEN %f AND %f AND lng BETWEEN %f AND %f', \r\n\t\t\t\t$location['lat'] - $delta, $location['lat'] + $delta, $location['lng'] - $delta, $location['lng'] + $delta );\r\n\r\n\t\t} else {\r\n\t\t\tif ( $changed_locale )\r\n\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\treturn new WP_Error( 'invalid_location', __( 'A location must have an ID or coordinates to be saved.', 'GeoMashup' ) );\r\n\t\t}\r\n\r\n\t\t$db_location = $wpdb->get_row( $select_string, ARRAY_A );\r\n\r\n\t\t$found_saved_name = '';\r\n\t\tif ( ! empty( $db_location ) ) {\r\n\t\t\t// Use the existing ID\r\n\t\t\t$location['id'] = $db_location['id']; \r\n\t\t\t$found_saved_name = $db_location['saved_name'];\r\n\t\t}\r\n\r\n\t\t// Reverse geocode\r\n\t\tif ( $do_lookups ) {\r\n\t\t\tself::reverse_geocode_location( $location );\r\n\t\t}\r\n\r\n\t\t// Don't set blank entries (use the set_null pseudo field)\r\n\t\tforeach ( $location as $name => $value ) {\r\n\t\t\tif ( !is_numeric( $value ) && empty( $value ) ) {\r\n\t\t\t\tunset( $location[$name] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Replace any existing saved name\r\n\t\tif ( ! empty( $location['saved_name'] ) and $found_saved_name != $location['saved_name'] ) {\r\n\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $location_table SET saved_name = NULL WHERE saved_name = %s\", $location['saved_name'] ) );\r\n\t\t}\r\n\r\n\t\tself::truncate_location_fields( $location );\r\n\r\n\t\t$set_id = null;\r\n\r\n\t\tif ( empty( $location['id'] ) ) {\r\n\r\n\t\t\t// Create a new location\r\n\t\t\tif ( $wpdb->insert( $location_table, $location ) ) {\r\n\t\t\t\t$set_id = $wpdb->insert_id;\r\n\t\t\t} else {\r\n\t\t\t\tif ( $changed_locale )\r\n\t\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\t\treturn new WP_Error( 'db_insert_error', $wpdb->last_error );\r\n\t\t\t}\r\n\t\t\tdo_action( 'geo_mashup_added_location', $location );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Update existing location, except for coordinates\r\n\t\t\t$tmp_lat = $location['lat']; \r\n\t\t\t$tmp_lng = $location['lng']; \r\n\t\t\tunset( $location['lat'] );\r\n\t\t\tunset( $location['lng'] );\r\n\t\t\tif ( !empty ( $location ) ) {\r\n\r\n\t\t\t\tif ( isset( $location['set_null'] ) ) {\r\n\t\t\t\t\t// WP doesn't yet have a mechanism for setting NULLs, https://core.trac.wordpress.org/ticket/15158\r\n\t\t\t\t\t$null_fields = $location['set_null'];\r\n\t\t\t\t\tif ( !is_array( $null_fields ) ) \r\n\t\t\t\t\t\t$null_fields = explode( ',', $null_fields );\r\n\t\t\t\t\t$null_fields = array_map( create_function( '$field', 'return $field . \"=NULL\";' ), $null_fields );\r\n\t\t\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $location_table SET \" . implode( ',', $null_fields) . \" WHERE id=%d\", $db_location['id'] ) );\r\n\t\t\t\t\tunset( $location['set_null'] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$wpdb->update( $location_table, $location, array( 'id' => $db_location['id'] ) );\r\n\t\t\t\tif ( $wpdb->last_error ) {\r\n\t\t\t\t\tif ( $changed_locale )\r\n\t\t\t\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\t\t\t\t\treturn new WP_Error( 'db_update_error', $wpdb->last_error );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$set_id = $db_location['id'];\r\n\t\t\tdo_action( 'geo_mashup_updated_location', $location );\r\n\t\t\t$location['lat'] = $tmp_lat;\r\n\t\t\t$location['lng'] = $tmp_lng;\r\n\r\n\t\t}\r\n\r\n\t\tif ( $changed_locale )\r\n\t\t\tsetlocale( constant( 'LC_NUMERIC' ), $original_locale );\r\n\r\n\t\twp_cache_delete( $set_id, 'geo_mashup_locations' );\r\n\r\n\t\tif( OBJECT === $input_type )\r\n\t\t\t$location = (object) $location;\r\n\r\n\t\treturn $set_id;\r\n\t}\r\n\r\n\t/**\r\n\t * Cut location fields to maximum length.\r\n\t * @since 1.8.5\r\n\t * @param array $location\r\n\t */\r\n\tstatic private function truncate_location_fields( &$location ) {\r\n\t\tif ( isset( $location['saved_name'] ) )\r\n\t\t\t$location['saved_name'] = mb_substr( $location['saved_name'], 0, 100 );\r\n\t\tif ( isset( $location['country_code'] ) )\r\n\t\t\t$location['country_code'] = mb_substr( $location['country_code'], 0, 2 );\r\n\t\tif ( isset( $location['admin_code'] ) )\r\n\t\t\t$location['admin_code'] = mb_substr( $location['admin_code'], 0, 20 );\r\n\t\tif ( isset( $location['sub_admin_code'] ) )\r\n\t\t\t$location['sub_admin_code'] = mb_substr( $location['sub_admin_code'], 0, 80 );\r\n\t}\r\n\r\n\t/**\r\n\t * Delete an object location or locations.\r\n\t * \r\n\t * This removes the association of an object with a location, but does NOT\r\n\t * delete the location.\r\n\t * \r\n\t * @since 1.3\r\n\t * @uses do_action() Calls 'geo_mashup_deleted_object_location' with the object location\r\n\t * \t\tobject that was deleted.\r\n\t *\r\n\t * @param string $object_name 'post', 'user', a GeoMashupDB::object_storage() index.\r\n\t * @param id|array $object_ids Object ID or array of IDs to remove the locations of.\r\n\t * @return int|WP_Error Rows affected or WordPress error.\r\n\t */\r\n\tpublic static function delete_object_location( $object_name, $object_ids ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$object_ids = ( is_array( $object_ids ) ? $object_ids : array( $object_ids ) );\r\n\t\t$rows_affected = 0;\r\n\t\tforeach( $object_ids as $object_id ) {\r\n\t\t\t$object_location = self::get_object_location( $object_name, $object_id );\r\n\t\t\tif ( $object_location ) {\r\n\t\t\t\t$delete_string = \"DELETE FROM {$wpdb->prefix}geo_mashup_location_relationships \" .\r\n\t\t\t\t\t$wpdb->prepare( 'WHERE object_name = %s AND object_id = %d', $object_name, $object_id );\r\n\t\t\t\t$rows_affected += $wpdb->query( $delete_string );\r\n\t\t\t\tif ( $wpdb->last_error )\r\n\t\t\t\t\treturn new WP_Error( 'delete_object_location_error', $wpdb->last_error );\r\n\r\n\t\t\t\twp_cache_delete( $object_name . '-' . $object_id, 'geo_mashup_object_locations' );\r\n\r\n\t\t\t\tdo_action( 'geo_mashup_deleted_object_location', $object_location );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $rows_affected;\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a location or locations.\r\n\t *\r\n\t * @since 1.2\r\n\t * @uses do_action() Calls 'geo_mashup_deleted_location' with the location object deleted.\r\n\t * \r\n\t * @param id|array $ids Location ID or array of IDs to delete.\r\n\t * @return int|WP_Error Rows affected or Wordpress error.\r\n\t */\r\n\tpublic static function delete_location( $ids ) {\r\n\t\tglobal $wpdb;\r\n\t\t$ids = ( is_array( $ids ) ? $ids : array( $ids ) );\r\n\t\t$rows_affected = 0;\r\n\t\tforeach( $ids as $id ) {\r\n\t\t\t$location = self::get_location( $id );\r\n\t\t\tif ( $location ) {\r\n\t\t\t\t$rows_affected += $wpdb->query( $wpdb->prepare( \"DELETE FROM {$wpdb->prefix}geo_mashup_locations WHERE id = %d\", $id ) );\r\n\t\t\t\tif ( $wpdb->last_error )\r\n\t\t\t\t\treturn new WP_Error( 'delete_location_error', $wpdb->last_error );\r\n\t\t\t\twp_cache_delete( $id, 'geo_mashup_locations' );\r\n\t\t\t\tdo_action( 'geo_mashup_deleted_location', $location );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $rows_affected;\r\n\t}\r\n\r\n\t/**\r\n\t * Get locations with saved names.\r\n\t *\r\n\t * @since 1.2\r\n\t *\r\n\t * @return array|WP_Error Array of location rows or WP_Error.\r\n\t */\r\n\tpublic static function get_saved_locations() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$location_table = $wpdb->prefix . 'geo_mashup_locations';\r\n\t\t$wpdb->query( \"SELECT * FROM $location_table WHERE saved_name IS NOT NULL ORDER BY saved_name ASC\" );\r\n\t\tif ( $wpdb->last_error ) \r\n\t\t\treturn new WP_Error( 'saved_locations_error', $wpdb->last_error );\r\n\r\n\t\treturn $wpdb->last_result;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the number of located posts in a category.\r\n\t * \r\n\t * @since 1.2\r\n\t *\r\n\t * @param id $category_id \r\n\t * @return int\r\n\t */\r\n\tpublic static function category_located_post_count( $category_id ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$select_string = \"SELECT count(*) FROM {$wpdb->posts} p \r\n\t\t\tINNER JOIN {$wpdb->term_relationships} tr ON tr.object_id = p.ID \r\n\t\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON tt.term_taxonomy_id = tr.term_taxonomy_id\r\n\t\t\tINNER JOIN {$wpdb->prefix}geo_mashup_location_relationships gmlr ON gmlr.object_id = p.ID AND gmlr.object_name = 'post'\r\n\t\t\tWHERE tt.term_id = \" . esc_sql( $category_id ) .\"\r\n\t\t\tAND p.post_status='publish'\";\r\n\t\treturn $wpdb->get_var( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get categories that contain located objects.\r\n\t *\r\n\t * Not sufficient - probably want parent categories.\r\n\t *\r\n\t * @return array Located category id, name, slug, description, and parent id\r\n\t */\r\n\tprivate static function get_located_categories() {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$select_string = \"SELECT DISTINCT t.term_id, t.name, t.slug, tt.description, tt.parent\r\n\t\t\tFROM {$wpdb->prefix}geo_mashup_location_relationships gmlr\r\n\t\t\tINNER JOIN {$wpdb->term_relationships} tr ON tr.object_id = gmlr.object_id\r\n\t\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON tt.term_taxonomy_id = tr.term_taxonomy_id\r\n\t\t\tINNER JOIN {$wpdb->terms} t ON t.term_id = tt.term_id\r\n\t\t\tWHERE tt.taxonomy='category'\r\n\t\t\tORDER BY t.slug ASC\";\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get multiple comments.\r\n\t *\r\n\t * What is the WordPress way? Expect deprecation.\r\n\t * \r\n\t * @return array Comments.\r\n\t */\r\n\tpublic static function get_comment_in( $args ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t$default_args = array( 'comment__in' => '' );\r\n\t\t$args = wp_parse_args( $args, $default_args );\r\n\t\tif ( is_array( $args['comment__in'] ) ) {\r\n\t\t\t$comment_ids = implode( ',', $args['comment__in'] );\r\n\t\t} else {\r\n\t\t\t$comment_ids = ( isset( $args['comment__in'] ) ) ? $args['comment__in'] : '0';\r\n\t\t}\r\n\t\t$select_string = \"SELECT * FROM $wpdb->comments WHERE comment_ID IN (\" .\r\n\t\t\timplode( ',', wp_parse_id_list( $args['comment__in'] ) ) . ') ORDER BY comment_date_gmt DESC';\r\n\t\treturn $wpdb->get_results( $select_string );\r\n\t}\r\n\r\n\t/**\r\n\t * Get multiple users.\r\n\t *\r\n\t * Now just a wrapper for get_users().\r\n\t * \r\n\t * @return array Users.\r\n\t */\r\n\tpublic static function get_user_in( $args ) {\r\n\t\tglobal $wpdb;\r\n\r\n\t\tif ( isset( $args['user__in'] ) ) {\r\n\t\t\t$args['include'] = $args['user__in'];\r\n\t\t\tunset( $args['user__in'] );\r\n\t\t}\r\n\t\treturn get_users( $args );\r\n\t}\r\n\r\n\t/**\r\n\t * When a post is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_post {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_post( $id ) {\r\n\t\treturn self::delete_object_location( 'post', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a comment is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_comment {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_comment( $id ) {\r\n\t\treturn self::delete_object_location( 'comment', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a user is deleted, remove location relationships for it.\r\n\t *\r\n\t * delete_user {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function delete_user( $id ) {\r\n\t\treturn self::delete_object_location( 'user', $id );\r\n\t}\r\n\r\n\t/**\r\n\t * Geo Mashup action to echo post meta keys that match a jQuery suggest query.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic static function post_meta_key_suggest() {\r\n\t\tglobal $wpdb;\r\n\t\tif ( isset( $_GET['q'] ) ) {\r\n\t\t\t$limit = (int) apply_filters( 'postmeta_form_limit', 30 );\r\n\t\t\t$terms = explode( ',', $_GET['q'] );\r\n\t\t\t$stub = trim( array_pop( $terms ) );\r\n\t\t\t$like = esc_sql( $stub );\r\n\t\t\t$keys = $wpdb->get_col( \"\r\n\t\t\t\tSELECT meta_key\r\n\t\t\t\tFROM $wpdb->postmeta\r\n\t\t\t\tGROUP BY meta_key\r\n\t\t\t\tHAVING meta_key LIKE '$like%'\r\n\t\t\t\tORDER BY meta_key\r\n\t\t\t\tLIMIT $limit\" );\r\n\t\t\tforeach( $keys as $key ) {\r\n\t\t\t\techo \"$key\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\texit;\r\n\t}\r\n}\r\n", "<?php\r\n/**\r\n * Geo Mashup \"core\" implementation of location management user interfaces.\r\n *\r\n * Theoretically, everything done here could be done in a separate plugin.\r\n *\r\n * @package GeoMashup\r\n */\r\n\r\n/**\r\n * A base class for managing user interfaces for collecting and storing location.\r\n *\r\n * This could be extended to make the existing editor work for new objects in a separate plugin.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupUIManager {\r\n\t/**\r\n\t * Retrieve a single instaniated subclass by name.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $name The class name of the manager.\r\n\t * @return GeoMashupPostUIManager|GeoMashupUserUIManager|GeoMashupCommentUIManager The singleton object.\r\n\t */\r\n\tpublic static function get_instance( $name ) {\r\n\t\tstatic $instances = array();\r\n\r\n\t\tif ( ! isset( $instances[$name] ) ) {\r\n\t\t\t$instances[$name] = new $name();\r\n\t\t}\r\n\t\treturn $instances[$name];\r\n\t}\r\n\r\n\t/**\r\n\t * Queue UI styles to match the jQuery version.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function enqueue_jquery_styles() {\r\n\t\tGeoMashup::register_style( 'jquery-smoothness', 'css/jquery-ui.1.7.smoothness.css', false, GEO_MASHUP_VERSION, 'screen' );\r\n\t\twp_enqueue_style( 'jquery-smoothness' );\r\n\t}\r\n\r\n\t/**\r\n\t * Queue styles and scripts for the location editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function enqueue_form_client_items() {\r\n\t\tglobal $geo_mashup_options, $geo_mashup_custom;\r\n\r\n\t\tGeoMashup::register_style( 'geo-mashup-edit-form', 'css/location-editor.css', false, GEO_MASHUP_VERSION, 'screen' );\r\n\t\twp_enqueue_style( 'geo-mashup-edit-form' );\r\n\r\n\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn',\r\n\t\t\t\t'js/mxn/mxn.js',\r\n\t\t\t\tnull,\r\n\t\t\t\tGEO_MASHUP_VERSION ,\r\n\t\t\t\ttrue);\r\n\r\n\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn-core',\r\n\t\t\t\t'js/mxn/mxn.core.js',\r\n\t\t\t\tarray( 'mxn' ),\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\t$map_api = $geo_mashup_options->get( 'overall', 'map_api' );\r\n\t\t$copy_geodata = $geo_mashup_options->get( 'overall', 'copy_geodata' );\r\n\t\t$geonames_username = $geo_mashup_options->get( 'overall', 'geonames_username' );\r\n\t\t$ajax_nonce = wp_create_nonce('geo-mashup-ajax-edit');\r\n\t\t$ajax_url = admin_url( 'admin-ajax.php' );\r\n\t\t$geo_mashup_url_path = GEO_MASHUP_URL_PATH;\r\n\t\twp_localize_script( 'mxn-core', 'geo_mashup_location_editor_settings', compact( 'map_api', 'copy_geodata', 'ajax_url', 'geo_mashup_url_path', 'geonames_username' ) );\r\n\t\t$required_scripts = array( 'jquery');\r\n\t\tif ( 'googlev3' == $map_api ) {\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'google-maps-3',\r\n\t\t\t\t\t'//maps.google.com/maps/api/js?key=' . $geo_mashup_options->get( 'overall', 'googlev3_key' ) . '&amp;language=' . GeoMashup::get_language_code(),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'',\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-google-3',\r\n\t\t\t\t\t'js/mxn/mxn.googlev3.core.js',\r\n\t\t\t\t\tarray( 'mxn-core', 'google-maps-3' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-google-3-gm',\r\n\t\t\t\t\t'js/mxn/mxn.googlev3.geo-mashup.js',\r\n\t\t\t\t\tarray( 'mxn-google-3' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\t$required_scripts[] = 'mxn-google-3-gm';\r\n\t\t} else if ( 'openlayers' == $map_api ) {\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'openlayers',\r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js',\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'latest',\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'openstreetmap',\r\n\t\t\t\t\t'//www.openstreetmap.org/openlayers/OpenStreetMap.js',\r\n\t\t\t\t\t array( 'openlayers' ),\r\n\t\t\t\t\t'latest',\r\n\t\t\t\t\t true );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-openlayers',\r\n\t\t\t\t\t'js/mxn/mxn.openlayers.core.js',\r\n\t\t\t\t\tarray( 'mxn-core', 'openstreetmap' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-openlayers-gm',\r\n\t\t\t\t\t'js/mxn/mxn.openlayers.geo-mashup.js',\r\n\t\t\t\t\tarray( 'mxn-openlayers' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\t$required_scripts[] = 'mxn-openlayers-gm';\r\n\t\t} elseif ( 'leaflet' == $map_api ) {\r\n\r\n\t\t\twp_register_script(\r\n\t\t\t\t\t'leaflet',\r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js',\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'0.7',\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\twp_enqueue_style(\r\n\t\t\t\t\t'leaflet',\r\n\t\t\t\t\t'//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css',\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t'0.7' );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn-leaflet',\r\n\t\t\t\t'js/mxn/mxn.leaflet.core.js',\r\n\t\t\t\tarray( 'mxn-core', 'leaflet' ),\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'mxn-leaflet-kml',\r\n\t\t\t\t\t'js/leaflet/KML.js',\r\n\t\t\t\t\tarray( 'mxn-leaflet' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t'mxn-leaflet-gm',\r\n\t\t\t\t'js/mxn/mxn.leaflet.geo-mashup.js',\r\n\t\t\t\tarray( 'mxn-leaflet-kml' ),\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\t\t$required_scripts[] = 'mxn-leaflet-gm';\r\n\t\t}\r\n\r\n\t\tGeoMashup::register_script(\r\n\t\t\t\t'geo-mashup-location-editor',\r\n\t\t\t\t'js/location-editor.js',\r\n\t\t\t\t$required_scripts,\r\n\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\ttrue );\r\n\r\n\t\twp_enqueue_script( 'geo-mashup-location-editor' );\r\n\r\n\t\tGeoMashup::register_script(\r\n\t\t\t\t'jquery-ui-datepicker',\r\n\t\t\t\t'js/jquery-ui.1.7.3.datepicker.js',\r\n\t\t\t\tarray( 'jquery', 'jquery-ui-core'),\r\n\t\t\t\t'1.7.3',\r\n\t\t\t\ttrue );\r\n\r\n\t\twp_enqueue_script( 'jquery-ui-datepicker' );\r\n\r\n\t\tif ( isset( $geo_mashup_custom ) ) {\r\n\t\t\t$custom_url = $geo_mashup_custom->file_url( 'location-editor.js' );\r\n\t\t\tif ( ! empty( $custom_url ) ) {\r\n\t\t\t\twp_enqueue_script(\r\n\t\t\t\t\t'geo-mashup-location-editor-custom',\r\n\t\t\t\t\t$custom_url,\r\n\t\t\t\t\tarray( 'geo-mashup-location-editor' ),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\ttrue );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the appropriate action from posted data.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tprivate function get_submit_action() {\r\n\r\n\t\t$action = null;\r\n\r\n\t\tif ( isset( $_POST['geo_mashup_add_location'] ) or isset( $_POST['geo_mashup_update_location'] ) ) {\r\n\r\n\t\t\t// Clients without javascript may need server side geocoding\r\n\t\t\tif ( ! empty( $_POST['geo_mashup_search'] ) and isset( $_POST['geo_mashup_no_js'] ) and 'true' == $_POST['geo_mashup_no_js'] ) {\r\n\r\n\t\t\t\t$action = 'geocode';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t$action = 'save';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( isset( $_POST['geo_mashup_changed'] ) and 'true' == $_POST['geo_mashup_changed'] and ! empty( $_POST['geo_mashup_location'] ) ) {\r\n\r\n\t\t\t// The geo mashup submit button wasn't used, but a change was made and the post saved\r\n\t\t\t$action = 'save';\r\n\r\n\t\t} else if ( isset( $_POST['geo_mashup_delete_location'] ) ) {\r\n\r\n\t\t\t$action = 'delete';\r\n\r\n\t\t} else if ( ! empty( $_POST['geo_mashup_location_id'] ) and empty( $_POST['geo_mashup_location'] ) ) {\r\n\r\n\t\t\t// There was a location, but it was cleared before this save\r\n\t\t\t$action = 'delete';\r\n\r\n\t\t}\r\n\t\treturn $action;\r\n\t}\r\n\r\n\t/**\r\n\t * Save an object location from data posted by the location editor.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t * @uses GeoMashupDB::delete_location()\r\n\t *\r\n\t * @param string $object_name The name of the object being edited.\r\n\t * @param string $object_id The ID of the object being edited.\r\n\t * @return bool|WP_Error True or a WordPress error.\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id ) {\r\n\r\n\t\t// Check the nonce\r\n\t\tif ( empty( $_POST['geo_mashup_nonce'] ) || !wp_verify_nonce( $_POST['geo_mashup_nonce'], 'geo-mashup-edit' ) ) {\r\n\t\t\treturn new WP_Error( 'invalid_request', __( 'Object location not saved - invalid request.', 'GeoMashup' ) );\r\n\t\t}\r\n\r\n\t\t$action = $this->get_submit_action();\r\n\r\n\t\t$post_location = array();\r\n\t\t$search_text = $geo_date = '';\r\n\r\n\t\tif ( 'save' === $action || 'geocode' === $action ) {\r\n\r\n\t\t\t$date_string = sanitize_text_field( $_POST['geo_mashup_date'] ) . ' ' .\r\n\t\t\t               (int) $_POST['geo_mashup_hour'] . ':' .\r\n\t\t\t               (int) $_POST['geo_mashup_minute'] . ':00';\r\n\t\t\t$geo_date    = date( 'Y-m-d H:i:s', strtotime( $date_string ) );\r\n\r\n\t\t\t$post_location['saved_name'] = sanitize_text_field( wp_unslash( $_POST['geo_mashup_location_name'] ) );\r\n\r\n\t\t\t$search_text = sanitize_text_field( $_POST['geo_mashup_search'] );\r\n\t\t}\r\n\r\n\r\n\t\tif ( 'geocode' === $action && ! GeoMashupDB::geocode( $search_text, $post_location ) ) {\r\n\r\n\t\t\t$post_location = array();\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'save' === $action && ! empty( $_POST['geo_mashup_select'] ) ) {\r\n\r\n\t\t\t$selected_items = explode( '|', $_POST['geo_mashup_select'] );\r\n\t\t\t$post_location  = empty( $selected_items ) ? 0 : (int) $selected_items[0];\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'save' === $action && empty( $_POST['geo_mashup_select'] ) ) {\r\n\t\t\t$post_location['id'] = (int) $_POST['geo_mashup_location_id'];\r\n\t\t\tlist( $lat, $lng ) = explode( ',', $_POST['geo_mashup_location'] );\r\n\t\t\t$post_location['lat']            = (float) $lat;\r\n\t\t\t$post_location['lng']            = (float) $lng;\r\n\t\t\t$post_location['geoname']        = sanitize_text_field( $_POST['geo_mashup_geoname'] );\r\n\t\t\t$post_location['address']        = sanitize_text_field( wp_unslash( $_POST['geo_mashup_address'] ) );\r\n\t\t\t$post_location['postal_code']    = sanitize_text_field( $_POST['geo_mashup_postal_code'] );\r\n\t\t\t$post_location['country_code']   = $this->sanitize_country_code( $_POST['geo_mashup_country_code'] );\r\n\t\t\t$post_location['admin_code']     = sanitize_text_field( $_POST['geo_mashup_admin_code'] );\r\n\t\t\t$post_location['sub_admin_code'] = sanitize_text_field( $_POST['geo_mashup_sub_admin_code'] );\r\n\t\t\t$post_location['locality_name']  = sanitize_text_field( $_POST['geo_mashup_locality_name'] );\r\n\t\t\t$post_location['set_null']       = $this->sanitize_null_fields( $_POST['geo_mashup_null_fields'] );\r\n\t\t}\r\n\r\n\t\t$error = null;\r\n\r\n\t\tif ( ! empty( $post_location ) ) {\r\n\r\n\t\t\t$error = GeoMashupDB::set_object_location(\r\n\t\t\t\t$object_name,\r\n\t\t\t\t$object_id,\r\n\t\t\t\t$post_location,\r\n\t\t\t\ttrue,\r\n\t\t\t\t$geo_date\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'delete' === $action ) {\r\n\r\n\t\t\t$error = GeoMashupDB::delete_object_location( $object_name, $object_id );\r\n\r\n\t\t}\r\n\r\n\t\treturn is_wp_error( $error ) ? $error : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sanitize country codes to two uppercase alpha characters.\r\n\t *\r\n\t * @param string $code\r\n\t *\r\n\t * @return string\r\n\t */\r\n\tprivate function sanitize_country_code( $code ) {\r\n\t\treturn substr( preg_replace( '/[^A-Z]/', '', $code), 0, 2 );\r\n\t}\r\n\r\n\t/**\r\n\t * Sanitize null fields to null or a safe string.\r\n\t *\r\n\t * @param string $fields\r\n\t *\r\n\t * @return string\r\n\t */\r\n\tprivate function sanitize_null_fields( $fields ) {\r\n\t\treturn empty( $fields ) ? null : sanitize_text_field( $fields );\r\n\t}\r\n}\r\n\r\n/**\r\n * A manager for user location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupUserUIManager extends GeoMashupUIManager {\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses parent::get_instance()\r\n\t *\r\n     * @param string $name The class name, this class by default.\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance( $name = __CLASS__ ) {\r\n\t\treturn parent::get_instance( $name );\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t * @access private\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options\r\n\t * @global string $pagenow The WordPress-supplied requested filename.\r\n\t * @uses apply_filters geo_mashup_load_user_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options, $pagenow;\r\n\r\n\t\t// Enable this interface when the option is set and we're on a destination page\r\n\t\t$enabled = is_admin() &&\r\n\t\t\t$geo_mashup_options->get( 'overall', 'located_object_name', 'user' ) == 'true' &&\r\n\t\t\tpreg_match( '/(user-edit|profile).php/', $pagenow );\r\n\t\t$enabled = apply_filters( 'geo_mashup_load_user_editor', $enabled );\r\n\r\n\t\t// If enabled, register all the interface elements\r\n\t\tif ( $enabled ) {\r\n\r\n\t\t\t// Form generation\r\n\t\t\tadd_action( 'show_user_profile', array( &$this, 'print_form' ) );\r\n\t\t\tadd_action( 'edit_user_profile', array( &$this, 'print_form' ) );\r\n\t\t\t// MAYBEDO: add location to registration page?\r\n\r\n\t\t\t// Form processing\r\n\t\t\tadd_action( 'personal_options_update', array( &$this, 'save_user'));\r\n\t\t\tadd_action( 'edit_user_profile_update', array( &$this, 'save_user'));\r\n\r\n\t\t\t$this->enqueue_form_client_items();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the user location editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses edit-form.php\r\n\t */\r\n\tpublic function print_form() {\r\n\t\tglobal $user_id;\r\n\r\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/edit-form.php');\r\n\t\tif ( isset( $_GET['user_id'] ) ) {\r\n\t\t\t$object_id = (int) $_GET['user_id'];\r\n\t\t} else {\r\n\t\t\t$object_id = $user_id;\r\n\t\t}\r\n\t\techo '<h3>' . __( 'Location', 'GeoMashup' ) . '</h3>';\r\n\t\tgeo_mashup_edit_form( 'user', $object_id, get_class( $this ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Handle old non-strict method calls with only one argument.\r\n\t *\r\n\t * @param string $object_name\r\n\t * @param null|int $object_id\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id = null ) {\r\n\t\t// resolve old non-strict one argument calls\r\n\t\tif ( is_null( $object_id ) )\r\n\t\t\t$object_id = intval( $object_name );\r\n\r\n\t\t// We only know how to save posts\r\n\t\t$object_name = 'user';\r\n\t\treturn parent::save_posted_object_location( $object_name, $object_id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a user is saved, also save any posted location.\r\n\t *\r\n\t * save_user {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_user() {\r\n\t\tif ( empty( $_POST['user_id'] ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$user_id = (int) $_POST['user_id'];\r\n\r\n\t\tif ( !current_user_can( 'edit_user', $user_id ) ) {\r\n\t\t\treturn $user_id;\r\n\t\t}\r\n\r\n\t\treturn $this->save_posted_object_location( $user_id );\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupUserUIManager::get_instance();\r\n\r\n/**\r\n * A manager for post/page location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupPostUIManager extends GeoMashupUIManager {\r\n\t/**\r\n\t * Location found in geo_mashup_save_location shortcode.\r\n\t *\r\n\t * @since 1.3\r\n\t * @var array\r\n\t */\r\n\tprivate $inline_location;\r\n\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses parent::get_instance()\r\n\t *\r\n     * @param string $name The class name, this class by default.\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance( $name = __CLASS__ ) {\r\n\t\treturn parent::get_instance( 'GeoMashupPostUIManager' );\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant post editing requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options\r\n\t * @global string $pagenow The WordPress-supplied requested filename.\r\n\t * @uses apply_filters geo_mashup_load_location_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options, $pagenow;\r\n\r\n\t\t// Uploadable geo content type expansion always enabled\r\n\t\tadd_filter( 'upload_mimes', array( &$this, 'upload_mimes' ) );\r\n\r\n\t\t// Queue inline location handlers - these could be used in nearly any request\r\n\r\n\t\t// Pre-save filter checks saved content for inline location tags\r\n\t\tadd_filter( 'content_save_pre', array( &$this, 'content_save_pre') );\r\n\r\n\t\t// Save post handles both inline and form processing\r\n\t\tadd_action( 'save_post', array( &$this, 'save_post'), 10, 2 );\r\n\r\n\t\t// Browser upload processing\r\n\t\tadd_filter( 'wp_handle_upload', array( &$this, 'wp_handle_upload' ) );\r\n\r\n\t\t// Enable front or back end ajax edits\r\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_edit', array( 'GeoMashup', 'ajax_edit' ) );\r\n\t\tadd_action( 'wp_ajax_geo_mashup_edit', array( 'GeoMashup', 'ajax_edit' ) );\r\n\r\n\t\t// Form generation\r\n\t\tadd_action( 'admin_menu', array( &$this, 'admin_menu' ) );\r\n\r\n\t\t// Queue scripts later, when we can determine post type, front or back end\r\n\t\tadd_action( 'admin_enqueue_scripts', array( &$this, 'enqueue_scripts' ) );\r\n\t\tadd_action( 'wp_enqueue_scripts', array( &$this, 'enqueue_scripts' ) );\r\n\r\n\t\tif ( 'async-upload.php' === $pagenow ) {\r\n\r\n\t\t\t// Flash upload display\r\n\t\t\tadd_filter( 'media_meta', array( &$this, 'media_meta' ), 10, 2 );\r\n\r\n\t\t} else if ( 'upload.php' === $pagenow or 'media-upload.php' === $pagenow ) {\r\n\r\n\t\t\t// Browser upload display\r\n\t\t\tadd_action( 'admin_print_scripts', array( &$this, 'admin_print_scripts' ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Queue scripts if the post type is enabled.\r\n\t *\r\n\t * Monitor for checking post type: http://core.trac.wordpress.org/ticket/14886\r\n\t *\r\n\t * @since 1.4\r\n\t * @uses apply_filters geo_mashup_load_location_editor intended for enabling a front end interface\r\n\t *\r\n\t * @global array $geo_mashup_options\r\n\t * @global string $pagenow\r\n\t * @global object $post\r\n\t */\r\n\tpublic function enqueue_scripts() {\r\n\t\tglobal $geo_mashup_options, $pagenow, $post;\r\n\r\n\t\t// The location editor works only on posts\r\n\t\tif ( empty( $post ) )\r\n\t\t\treturn null;\r\n\r\n\t\t$load_location_editor = (\r\n\t\t\t\tis_admin() and\r\n\t\t\t\tpreg_match( '/(post|page)(-new|).php/', $pagenow ) and\r\n\t\t\t\tin_array( $post->post_type, $geo_mashup_options->get( 'overall', 'located_post_types' ) )\r\n\t\t\t\t);\r\n\t\t$load_location_editor = apply_filters( 'geo_mashup_load_location_editor', $load_location_editor );\r\n\r\n\t\t// If we're on a post editing page, queue up the form interface elements\r\n\t\tif ( $load_location_editor ) {\r\n\r\n\t\t\t$this->enqueue_form_client_items();\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a location meta box to the post editors.\r\n\t *\r\n\t * admin_menu {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by Wordpress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function admin_menu() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\t// Not adding a menu, but at this stage add_meta_box is defined, so we can add the location form\r\n\t\tforeach ( $geo_mashup_options->get( 'overall', 'located_post_types' ) as $post_type ) {\r\n\t\t\tadd_meta_box( 'geo_mashup_post_edit', __( 'Location', 'GeoMashup' ), array( &$this, 'print_form' ), $post_type, 'advanced' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the post editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses edit-form.php\r\n\t */\r\n\tpublic function print_form() {\r\n\t\tglobal $post_ID;\r\n\r\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/edit-form.php');\r\n\t\tgeo_mashup_edit_form( 'post', $post_ID, get_class( $this ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Handle old non-strict method calls with only one argument.\r\n\t *\r\n\t * @param string $object_name\r\n\t * @param null|int $object_id\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_posted_object_location( $object_name, $object_id = null ) {\r\n\t\t// resolve old non-strict one argument calls\r\n\t\tif ( is_null( $object_id ) )\r\n\t\t\t$object_id = intval( $object_name );\r\n\r\n\t\t// We only know how to save posts\r\n\t\t$object_name = 'post';\r\n\t\treturn parent::save_posted_object_location( $object_name, $object_id );\r\n\t}\r\n\r\n\t/**\r\n\t * When a post is saved, save any posted location for it.\r\n\t *\r\n\t * save_post {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t *\r\n\t * @param id $post_id\r\n\t * @param object $post\r\n\t * @return bool|WP_Error\r\n\t */\r\n\tpublic function save_post($post_id, $post) {\r\n\t\tif ( 'revision' == $post->post_type ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WP has already saved the post - allow location saving without added capability checks\r\n\r\n\t\tif ( !empty( $this->inline_location ) ) {\r\n\t\t\t$geo_date = '';\r\n\t\t\tif ( isset( $this->inline_location['geo_date'] ) ) {\r\n\t\t\t\t$geo_date = $this->inline_location['geo_date'];\r\n\t\t\t\tunset( $this->inline_location['geo_date'] );\r\n\t\t\t}\r\n\t\t\t$location_id = GeoMashupDB::set_object_location( 'post', $post_id, $this->inline_location, true, $geo_date );\r\n\t\t\tif ( is_wp_error( $location_id ) ) {\r\n\t\t\t\tupdate_post_meta( $post_id, 'geo_mashup_save_location_error', $location_id->get_error_message() );\r\n\t\t\t}\r\n\t\t\t$this->inline_location = null;\r\n\t\t}\r\n\r\n\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\r\n\t\treturn $this->save_posted_object_location( $post_id );\r\n\t}\r\n\r\n\t/**\r\n\t * Extract inline save location shortcodes from post content before it is saved.\r\n\t *\r\n\t * content_save_pre {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by Wordpress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function content_save_pre( $content ) {\r\n\t\t// Piggyback on the shortcode interface to find inline tags [geo_mashup_save_location ...] \r\n\t\tadd_shortcode( 'geo_mashup_save_location', 'is_null' );\r\n\t\t$pattern = get_shortcode_regex( );\r\n\t\treturn preg_replace_callback('/'.$pattern.'/s', array( &$this, 'replace_save_pre_shortcode' ), $content);\r\n\t}\r\n\r\n\t/**\r\n\t * Store the inline location from a save location shortcode before it is removed.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param array $shortcode_match\r\n\t * @return The matched content, or an empty string if it was a save location shortcode.\r\n\t */\r\n\tpublic function replace_save_pre_shortcode( $shortcode_match ) {\r\n\t\t$content = $shortcode_match[0];\r\n\t\t$tag_index = array_search( 'geo_mashup_save_location',  $shortcode_match );\r\n\t\tif ( $tag_index !== false ) {\r\n\t\t\t// There is an inline location - save the attributes\r\n\t\t\t$this->inline_location = shortcode_parse_atts( stripslashes( $shortcode_match[$tag_index+1] ) );\r\n\r\n\t\t\t// If lat and lng are missing, try to geocode based on address\r\n\t\t\t$success = false;\r\n\t\t\tif ( ( empty( $this->inline_location['lat'] ) or empty( $this->inline_location['lng'] ) ) and !empty( $this->inline_location['address'] ) ) {\r\n\t\t\t\t$query = $this->inline_location['address'];\r\n\t\t\t\t$this->inline_location = GeoMashupDB::blank_object_location( ARRAY_A );\r\n\t\t\t\t$success = GeoMashupDB::geocode( $query, $this->inline_location );\r\n\t\t\t\tif ( !$success ) {\r\n\t\t\t\t\t// Delay and try again\r\n\t\t\t\t\tsleep( 1 );\r\n\t\t\t\t\t$success = GeoMashupDB::geocode( $query, $this->inline_location );\r\n\t\t\t\t}\r\n\t\t\t} else if ( is_numeric ( $this->inline_location['lat'] ) and is_numeric( $this->inline_location['lng'] ) ) {\r\n\t\t\t\t// lat and lng were supplied\r\n\t\t\t\t$success = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ( $success ) {\r\n\t\t\t\t// Remove the tag\r\n\t\t\t\t$content = '';\r\n\t\t\t} else {\r\n\t\t\t\t$message = ( is_wp_error( GeoMashupDB::$geocode_error ) ? GeoMashupDB::$geocode_error->get_error_message() : __( 'Address not found - try making it less detailed', 'GeoMashup' ) );\r\n\t\t\t\t$content = str_replace( ']', ' geocoding_error=\"' . $message . '\"]', $content );\r\n\t\t\t\t$this->inline_location = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $content;\r\n\t}\r\n\r\n\t/**\r\n\t * Add AJAX uploaded KML to the location editor map.\r\n\t *\r\n\t * media_meta {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function media_meta( $content, $post ) {\r\n\t\t// Only chance to run some javascript after an ajax upload?\r\n\t\tif ( 'attachment' == $post->post_type ) {\r\n\t\t\t$url = wp_get_attachment_url( $post->ID );\r\n\t\t\tif ( '.km' == substr( $url, -4, 3 ) ) {\r\n\t\t\t\t$content .= '<script type=\"text/javascript\"> ' .\r\n\t\t\t\t\t'if (\\'GeoMashupLocationEditor\\' in parent) parent.GeoMashupLocationEditor.loadKml(\\''.$url.'\\');' .\r\n\t\t\t\t\t'</script>';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $content;\r\n\t}\r\n\r\n\t/**\r\n\t * Add Browser-uploaded KML to the location editor map.\r\n\t *\r\n\t * admin_print_scripts {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function admin_print_scripts( $not_used ) {\r\n\t\t// Load any uploaded KML into the search map - only works with browser uploader\r\n\r\n\t\t// See if wp_upload_handler found uploaded KML\r\n\t\t$kml_url = get_transient( 'gm_uploaded_kml_url' );\r\n\t\tif (strlen($kml_url) > 0) {\r\n\t\t\t// Load the KML in the location editor\r\n\t\t\techo '\r\n\t\t\t\t<script type=\"text/javascript\"> \r\n\t\t\t\t\tif (\\'GeoMashupLocationEditor\\' in parent) parent.GeoMashupLocationEditor.loadKml(\\'' . $kml_url . '\\');\r\n\t\t\t\t</script>';\r\n\t\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add geo mime types to allowable uploads.\r\n\t *\r\n\t * upload_mimes {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function upload_mimes( $mimes ) {\r\n\t\t$mimes['kml'] = 'application/vnd.google-earth.kml+xml';\r\n\t\t$mimes['kmz'] = 'application/vnd.google-earth.kmz';\r\n\t\t$mimes['gpx'] = 'application/octet-stream';\r\n\t\treturn $mimes;\r\n\t}\r\n\r\n\t/**\r\n\t * If an upload is KML, put the URL in an option to be loaded in the response\r\n\t *\r\n\t * wp_handle_upload {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function wp_handle_upload( $args ) {\r\n\t\tdelete_transient( 'gm_uploaded_kml_url' );\r\n\t\tif ( is_array( $args ) && isset( $args['file'] ) ) {\r\n\t\t\tif ( stripos( $args['file'], '.km' ) == strlen( $args['file'] ) - 4 ) {\r\n\t\t\t\tset_transient( 'gm_uploaded_kml_url', $args['url'] );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $args;\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupPostUIManager::get_instance();\r\n\r\n/**\r\n * A manager for comment location user interfaces.\r\n *\r\n * Singleton instantiated immediately.\r\n *\r\n * @package GeoMashup\r\n * @since 1.3\r\n * @access public\r\n */\r\nclass GeoMashupCommentUIManager {\r\n\t/**\r\n\t * Whether to put the comment form script in the footer.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tprivate $add_form_script = false;\r\n\r\n\t/**\r\n\t * Get the single instance of this class.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @return GeoMashupPostUIManager The instance.\r\n\t */\r\n\tpublic static function get_instance() {\r\n\t\tstatic $instance = null;\r\n\t\tif ( is_null( $instance ) ) {\r\n\t\t\t$instance = new GeoMashupCommentUIManager();\r\n\t\t}\r\n\t\treturn $instance;\r\n\t}\r\n\r\n\t/**\r\n\t * PHP5 Constructor\r\n\t *\r\n\t * @since 1.3\r\n\t */\r\n\tpublic function __construct() {\r\n\t\t// Global $geo_mashup_options is available, but a better pattern might\r\n\t\t// be to wait until init to be sure\r\n\t\tadd_action( 'init', array( &$this, 'init' ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize for use in relevant requests.\r\n\t *\r\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference action}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @global array $geo_mashup_options\r\n\t * @uses apply_filters geo_mashup_load_comment_editor Returns a boolean that loads the editor when true.\r\n\t */\r\n\tpublic function init() {\r\n\t\tglobal $geo_mashup_options;\r\n\r\n\t\t$load_comment_editor = ( !is_admin() && $geo_mashup_options->get( 'overall', 'located_object_name', 'comment' ) == 'true' );\r\n\t\t$load_comment_editor = apply_filters( 'geo_mashup_load_comment_editor', $load_comment_editor );\r\n\r\n\t\t// If enabled, register all the interface elements\r\n\t\tif ( $load_comment_editor ) {\r\n\r\n\t\t\t// Form generation\r\n\t\t\tadd_action( 'comment_form', array( &$this, 'print_form' ) );\r\n\r\n\t\t\t// Form script\r\n\t\t\tadd_action( 'wp_footer', array( &$this, 'wp_footer' ) );\r\n\r\n\t\t\t// Form processing\r\n\t\t\tadd_action( 'comment_post', array( &$this, 'save_comment'), 10, 2 );\r\n\r\n\t\t\twp_enqueue_script( 'geo-mashup-loader' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Print the comment location editor form.\r\n\t *\r\n\t * @since 1.3\r\n\t * @access public\r\n\t */\r\n\tpublic function print_form() {\r\n\t\t$this->add_form_script = true;\r\n\r\n\t\t// If there's a logged in user with a location, use that as a default.\r\n\t\t// The client-side location will override it if available\r\n\t\t$user = wp_get_current_user();\r\n\t\tif ( $user )\r\n\t\t\t$default_location = GeoMashupDB::get_object_location( 'user', $user->ID );\r\n\t\tif ( !$default_location )\r\n\t\t\t$default_location = GeoMashupDB::blank_object_location();\r\n\t\t$default_summary = ( empty( $default_location->locality_name ) ? '' : $default_location->locality_name . ', ' ) .\r\n\t\t\t\t( empty( $default_location->admin_code ) ? '' : $default_location->admin_code );\r\n\r\n\t\t// Print the form\r\n\t\tprintf( '<label id=\"geo-mashup-summary-label\" for=\"geo-mashup-summary-input\" style=\"display:none;\">%s</label>', __( 'Written from (location)', 'GeoMashup' ) );\r\n\t\tprintf( '<input id=\"geo-mashup-summary-input\" style=\"display:none;\" type=\"text\" size=\"25\" value=\"%s\" />', $default_summary );\r\n\t\tprintf( '<img id=\"geo-mashup-busy-icon\" style=\"display:none;\" src=\"%s\" alt=\"%s\" />', path_join( GEO_MASHUP_URL_PATH, 'images/busy_icon.gif' ), __( 'Loading...', 'GeoMashup' ) );\r\n\t\t$input_format = '<input id=\"geo-mashup-%s-input\" name=\"comment_location[%s]\" type=\"hidden\" value=\"%s\" />';\r\n\t\tprintf( $input_format, 'lat', 'lat', esc_attr( $default_location->lat ) );\r\n\t\tprintf( $input_format, 'lng', 'lng', esc_attr( $default_location->lng ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Print the form script in the footer if it's needed.\r\n\t *\r\n\t * @since 1.4\r\n\t */\r\n\tpublic function wp_footer() {\r\n\t\tglobal $geo_mashup_options;\r\n\t\tif ( $this->add_form_script ) {\r\n\t\t\tGeoMashup::register_script(\r\n\t\t\t\t\t'geo-mashup-comment-form',\r\n\t\t\t\t\t'js/comment-form.js',\r\n\t\t\t\t\tarray( 'jquery' ),\r\n\t\t\t\t\tGEO_MASHUP_VERSION,\r\n\t\t\t\t\ttrue );\r\n\r\n\t\t\twp_localize_script( 'geo-mashup-comment-form', 'geo_mashup_comment_form_settings', array( 'geonames_username' => $geo_mashup_options->get( 'overall', 'geonames_username' ) ) );\r\n\t\t\twp_print_scripts( 'geo-mashup-comment-form' );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a comment is saved, save any posted location with it.\r\n\t *\r\n\t * save_comment {@link http://codex.wordpress.org/Plugin_API/Filter_Reference filter}\r\n\t * called by WordPress.\r\n\t *\r\n\t * @since 1.3\r\n\t * @uses GeoMashupDB::set_object_location()\r\n\t */\r\n\tpublic function save_comment( $comment_id = 0, $approval = '' ) {\r\n\t\tif ( !$comment_id || 'spam' === $approval || empty( $_POST['comment_location'] ) || !is_array( $_POST['comment_location'] ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$location = array(\r\n\t\t\t'lat' => (float) $_POST['comment_location']['lat'],\r\n\t\t\t'lng' => (float) $_POST['comment_location']['lng']\r\n\t\t);\r\n\r\n\t\tGeoMashupDB::set_object_location( 'comment', $comment_id, $location );\r\n\t}\r\n}\r\n\r\n// Instantiate\r\nGeoMashupCommentUIManager::get_instance();\r\n", "<?php \n/*\nPlugin Name: Geo Mashup\nPlugin URI: https://wordpress.org/plugins/geo-mashup/\nDescription: Save location for posts and pages, or even users and comments. Display these locations on Google, Leaflet, and OSM maps. Make WordPress into your GeoCMS.\nVersion: 1.10.4\nAuthor: Dylan Kuhn\nText Domain: GeoMashup\nDomain Path: /lang\nAuthor URI: http://www.cyberhobo.net/\nMinimum WordPress Version Required: 3.0\nLicense: GPL2+\n*/\n\n/*  Copyright 2015  Dylan Kuhn  (email : cyberhobo@cyberhobo.net)\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2 or later, as\n    published by the Free Software Foundation.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n/**\n * The main Geo Mashup plugin file loaded by WordPress.\n *\n * @package GeoMashup\n */\n\nif ( !class_exists( 'GeoMashup' ) ) {\n/**\n * The Geo Mashup static class.\n *\n * Used primarily for namespace, with methods called using the scope operator,\n * like echo GeoMashup::map();\n *\n * @package GeoMashup\n * @since 1.0\n * @access public\n * @static\n */\nclass GeoMashup {\n\t/**\n\t * Whether to add the click-to-load map script.\n\t *\n\t * @since 1.4\n\t * @var bool\n\t */\n\tprivate static $add_loader_script = false;\n\n\t/**\n\t * The basename of the Geo Mashup Search plugin when deactivated.\n\t * \n\t * @since 1.5\n\t * @var string\n\t */\n\tprivate static $deactivate_geo_search_basename = '';\n\n\t/**\n\t * Freemius integration.\n\t *\n\t * @since 1.10\n\t * @var Freemius\n\t */\n\tprivate static $freemius;\n\n\t/**\n\t * Load Geo Mashup.\n\t * \n\t * Initializations that can be done before init(). \n\t *\n\t * @since 1.2\n\t */\n\tpublic static function load() {\n\t\tGeoMashup::load_constants();\n\t\tload_plugin_textdomain( 'GeoMashup', '', path_join( GEO_MASHUP_DIRECTORY, 'lang' ) );\n\n\t\tGeoMashup::load_dependencies();\n\t\tGeoMashup::load_hooks();\n\t}\n\n\t/**\n\t *\tTest to see if the current request is for the Geo Mashup options page.\n\t *\n\t * @since 1.4\n\t *\n\t * @return bool Whether this is a an options page request.\n\t */\n\tpublic static function is_options_page() {\n\t\t// We may need this before $pagenow is set, but maybe this method won't always work?\n\t\treturn ( is_admin() and isset($_GET['page']) and GEO_MASHUP_PLUGIN_NAME === $_GET['page'] );\n\t}\n\n\t/**\n\t * WordPress init action.\n\t *\n\t * init {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action},\n\t * called by WordPress.\n\t *\n\t * @since 1.2\n\t */\n\tpublic static function init() {\n\t\tif ( GEO_MASHUP_DB_VERSION != GeoMashupDB::installed_version() ) {\n\t\t\t// We're active but not installed - try once more to install\n\t\t\tGeoMashupDB::install();\n\t\t}\n\t\tGeoMashup::load_styles();\n\t\tGeoMashup::load_scripts();\n\t}\n\n\t/**\n\t * Load relevant dependencies.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_dependencies() {\n\t\tglobal $geo_mashup_options;\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-options.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/gm-location-query.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/post-query.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-db.php' );\n\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-ui-managers.php' );\n\n\t\tif ( ! defined( 'GEO_MASHUP_UNIT_TESTING' ) &&\n             ! defined( 'GEO_MASHUP_FREEMIUS_OPT_OUT') &&\n             is_admin() ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/freemius.php' );\n\t\t\tself::$freemius = new GeoMashupFreemius();\n\t\t\tself::$freemius->load();\n\t\t}\n\n\t\tif ( $geo_mashup_options->get( 'overall', 'enable_geo_search' ) == 'true' ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/geo-mashup-search.php' );\n\t\t}\n\n\t}\n\n\t/**\n\t * Load available integrations.\n\t *\n\t * @since 1.10.0\n\t */\n\tpublic static function load_integrations() {\n\n\t\tif ( defined( 'ICL_LANGUAGE_CODE' ) ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/wpml.php' );\n\t\t\tadd_action( 'wpml_loaded', array( 'GeoMashupWPML', 'load' ) );\n\t\t}\n\n\t\tif ( defined( 'SNAZZY_VERSION_NUMBER' ) ) {\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/snazzy-maps.php' );\n\t\t\tGeoMashupSnazzyMaps::load();\n\t\t}\n\t}\n\n\t/**\n\t * Load relevant hooks.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_hooks() {\n\t\tglobal $geo_mashup_options;\n\n\t\tadd_action( 'init', array( __CLASS__, 'init' ) );\n\t\tadd_action( 'wp_scheduled_delete', array( __CLASS__, 'action_wp_scheduled_delete' ) );\n\n\t\tadd_action( 'plugins_loaded', array( __CLASS__, 'dependent_init' ), -1 );\n\t\tadd_action( 'plugins_loaded', array( __CLASS__, 'load_integrations' ) );\n\n\t\tadd_action( 'wp_ajax_geo_mashup_query', array( __CLASS__, 'geo_query') );\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_query', array( __CLASS__, 'geo_query') );\n\t\tadd_action( 'wp_ajax_geo_mashup_kml_attachments', array( __CLASS__, 'ajax_kml_attachments') );\n\t\tadd_action( 'wp_ajax_nopriv_geo_mashup_kml_attachments', array( __CLASS__, 'ajax_kml_attachments') );\n\t\tadd_action( 'wp_ajax_geo_mashup_suggest_custom_keys', array( 'GeoMashupDB', 'post_meta_key_suggest' ) );\n\t\t\n\t\tregister_activation_hook( __FILE__, array( __CLASS__, 'activation_hook' ) );\n\n\t\tif (is_admin()) {\n\n\n\t\t\t// To add Geo Mashup settings page\n\t\t\tadd_action('admin_menu', array(__CLASS__, 'admin_menu'));\n\n\t\t\t// To make important announcements\n\t\t\tadd_action( 'admin_notices', array( __CLASS__, 'admin_notices' ) );\n\n\t\t\t// To add plugin listing links\n\t\t\tadd_filter( 'plugin_action_links', array( __CLASS__, 'plugin_action_links' ), 10, 2 );\n\t\t\tadd_filter( 'plugin_row_meta', array( __CLASS__, 'plugin_row_meta' ), 10, 2 );\n\n\t\t\t// Enqueue widget assets in admin\n\t\t\tadd_action( 'admin_enqueue_scripts', array( __CLASS__, 'widget_scripts'));\n\n\t\t} else {\n\n\t\t\t// This is a non-admin request\n\n\t\t\tif ($geo_mashup_options->get('overall','add_category_links') == 'true') {\n\t\t\t\t// To add map links to a category list - flaky, requires non-empty category description\n\t\t\t\tadd_filter('list_cats', array(__CLASS__, 'list_cats'), 10, 2);\n\t\t\t}\n\n\t\t\t// To output location meta tags in the page head\n\t\t\tadd_action('wp_head', array(__CLASS__, 'wp_head'));\n\n\t\t\t// To add footer output (like scripts)\n\t\t\tadd_action( 'wp_footer', array( __CLASS__, 'wp_footer' ) );\n\n\t\t\t// To allow shortcodes in the text widget\n\t\t\tif ( ! has_filter( 'widget_text', 'do_shortcode' ) ) {\n\t\t\t\tadd_filter( 'widget_text', 'do_shortcode', 11 );\n\t\t\t}\n\n\t\t\t// To add the GeoRSS namespace to feeds (not available for RSS 0.92)\n\t\t\tadd_action('rss2_ns', array(__CLASS__, 'rss_ns'));\n\t\t\tadd_action('atom_ns', array(__CLASS__, 'rss_ns'));\n\n\t\t\t// To add GeoRSS location to feeds\n\t\t\tadd_action('rss2_item', array(__CLASS__, 'rss_item'));\n\t\t\tadd_action('atom_entry', array(__CLASS__, 'rss_item'));\n\n\t\t\t// To add custom renderings\n\t\t\tadd_filter( 'query_vars', array( __CLASS__, 'query_vars' ) );\n\t\t\tadd_action( 'template_redirect', array( __CLASS__, 'template_redirect' ) );\n\n\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/shortcodes.php');\n\t\n\t\t}\n\t}\n\n\t/**\n\t * Define Geo Mashup constants. \n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_constants() {\n\t\tdefine('GEO_MASHUP_PLUGIN_NAME', plugin_basename(__FILE__));\n\t\tdefine('GEO_MASHUP_DIR_PATH', dirname( __FILE__ ));\n\t\tdefine('GEO_MASHUP_DIRECTORY', dirname( GEO_MASHUP_PLUGIN_NAME ) );\n\t\tdefine('GEO_MASHUP_URL_PATH', trim( plugin_dir_url( __FILE__ ), '/' ) );\n\t\tdefine('GEO_MASHUP_MAX_ZOOM', 20);\n\t\tdefine('GEO_MASHUP_VERSION', '1.10.4');\n\t\tdefine('GEO_MASHUP_DB_VERSION', '1.3');\n\t}\n\n\t/**\n\t * Load relevant scripts.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_scripts() {\n\t\tif ( self::is_options_page() ) {\n\t\t\twp_enqueue_script( 'jquery-ui-tabs' );\n\t\t\twp_enqueue_script( 'suggest' );\n\t\t\tif ( isset( $_POST['geo_mashup_run_tests'] ) ){\n\t\t\t\tself::register_script( 'qunit', 'js/qunit.js', array( 'jquery' ), GEO_MASHUP_VERSION, true );\n\t\t\t\tself::register_script( 'qunit-close-enough', 'js/qunit-close-enough.js', array( 'qunit' ), GEO_MASHUP_VERSION, true );\n\t\t\t\tself::register_script( 'geo-mashup-tests', 'js/qunit-tests.js', array( 'qunit-close-enough' ), GEO_MASHUP_VERSION, true );\n\t\t\t\twp_enqueue_script( 'geo-mashup-tests' );\n\t\t\t\tinclude_once( GEO_MASHUP_DIR_PATH . '/tests.php' );\n\t\t\t}\n\t\t}\n\t\tif (is_admin()){\n\t\t\tself::register_script( 'geo-mashup-widget','js/widget.js', array( 'jquery' ), GEO_MASHUP_VERSION, true );\n\t\t}\n\t}\n\n\t/**\n\t * Load relevant styles.\n\t * \n\t * @since 1.2\n\t */\n\tprivate static function load_styles() {\n\t\tif ( self::is_options_page() ) {\n\t\t\tself::register_style( 'jquery-smoothness', 'css/jquery-ui.1.7.smoothness.css', array(), GEO_MASHUP_VERSION, 'screen' );\n\t\t\twp_enqueue_style( 'jquery-smoothness' );\n\t\t\tif ( isset( $_POST['geo_mashup_run_tests'] ) ){\n\t\t\t\tself::register_style( 'qunit', 'css/qunit.css', array(), GEO_MASHUP_VERSION, 'screen' );\n\t\t\t\twp_enqueue_style( 'qunit' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * WordPress hook to perform activation tasks.\n\t * \n\t * @since 1.4\n\t */\n\tpublic static function activation_hook() {\n\t\tglobal $geo_mashup_options;\n\t\tGeoMashupDB::install();\n\t\tif ( '' == $geo_mashup_options->get( 'overall', 'version' ) and '' != $geo_mashup_options->get( 'overall', 'google_key' ) ) {\n\t\t\t// Upgrading from a pre-1.4 version - don't set the default provider to Google v3\n\t\t\t$geo_mashup_options->set_valid_options(\n\t\t\t\tarray(\n\t\t\t\t\t'overall' => array(\n\t\t\t\t\t\t'map_api' => 'google',\n\t\t\t\t\t\t'version' => GEO_MASHUP_VERSION\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$geo_mashup_options->save();\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to supply an init action for plugins that would like to use Geo Mashup APIs.\n\t * \n\t * @since 1.4\n\t * @uses do_action() geo_mashup_init Fired when Geo Mashup is loaded and ready.\n\t */\n\tpublic static function dependent_init() {\n\t\tglobal $geo_mashup_options;\n\n\t\tdo_action( 'geo_mashup_init' );\n\n\t\tif ( class_exists( 'GeoMashupSearch' ) and defined( 'GeoMashupSearch::VERSION' ) ) {\n\n\t\t\t// The old search plugin is active - enable native geo search and flag for deactivation\n\t\t\tself::$deactivate_geo_search_basename = GeoMashupSearch::get_instance()->basename;\n\t\t\t$geo_mashup_options->set_valid_options(\n\t\t\t\tarray(\n\t\t\t\t\t'overall' => array(\n\t\t\t\t\t\t'enable_geo_search' => 'true',\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$geo_mashup_options->save();\n\t\t}\n\n\n\t}\n\n\t/**\n\t * WordPress action to remove expired Geo Mashup transients.\n\t * \n\t * @since 1.4.6\n\t * @uses apply_filters() geo_mashup_disable_scheduled_delete A way to disable the scheduled delete.\n\t */\n\tpublic static function action_wp_scheduled_delete() {\n\t\tglobal $wpdb, $_wp_using_ext_object_cache;\n\n\t\t\n\t\tif ( $_wp_using_ext_object_cache || apply_filters( 'geo_mashup_disable_scheduled_delete', false ) || defined( 'GEO_MASHUP_DISABLE_SCHEDULED_DELETE' ) )\n\t\t\treturn;\n\n\t\t$time = time();\n\t\t$expired = $wpdb->get_col( \"SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_gm%' AND option_value < {$time};\" );\n\n\t\tforeach( $expired as $transient ) {\n\t\t\t$key = str_replace('_transient_timeout_', '', $transient);\n\t\t\tdelete_transient($key);\n\t\t}\n\t\t$wpdb->query( \"OPTIMIZE TABLE {$wpdb->options}\" );\n\t}\n\n\t/**\n\t * Register the Geo Mashup script appropriate for the request.\n\t *\n\t * @since 1.4\n\t * \n\t * @param string $handle Global tag for the script.\n\t * @param string $src Path to the script from the root directory of Geo Mashup.\n\t * @param array $deps Array of dependency handles.\n\t * @param string|bool $ver Script version.\n\t * @param bool $in_footer Whether the script can be loaded in the footer.\n\t */\n\tpublic static function register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {\n\t\t// Use the minified version if SCRIPT_DEBUG is not set and it exists\n\t\tif ( ( !defined( 'SCRIPT_DEBUG' ) or !SCRIPT_DEBUG ) and '.js' === substr( $src, -3 ) ) {\n\t\t\t$min_src = substr( $src, 0, -3 ) . '.min.js';\n\t\t\tif ( is_readable( GEO_MASHUP_DIR_PATH . '/' . $min_src ) ) {\n\t\t\t\t$src = $min_src;\n\t\t\t}\n\t\t}\n\t\twp_register_script(\n\t\t\t\t$handle, \n\t\t\t\tplugins_url( $src, __FILE__ ), \n\t\t\t\t$deps, \n\t\t\t\t$ver, \n\t\t\t\t$in_footer );\n\t}\n\n\t/**\n\t * Register the Geo Mashup style appropriate for the request.\n\t *\n\t * @since 1.4\n\t *\n\t * @param string $handle Global tag for the style.\n\t * @param string $src Path to the stylesheet from the root directory of Geo Mashup.\n\t * @param array $deps Array of dependency handles.\n\t * @param string|bool $ver Script version.\n\t * @param string $media Stylesheet media target.\n\t */\n\tpublic static function register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {\n\t\t// Use the minified version if SCRIPT_DEBUG is not set and it exists\n\t\tif ( ( !defined( 'SCRIPT_DEBUG' ) or !SCRIPT_DEBUG ) and '.css' === substr( $src, -4 ) ) {\n\t\t\t$min_src = substr( $src, 0, -4 ) . '.min.css';\n\t\t\tif ( is_readable( GEO_MASHUP_DIR_PATH . '/' . $min_src ) ) {\n\t\t\t\t$src = $min_src;\n\t\t\t}\n\t\t}\n\n\t\twp_register_style( $handle, plugins_url( $src, __FILE__ ), $deps, $ver, $media );\n\t}\n\n\t/**\n\t * WordPress action to add things like scripts to the footer.\n\t * \n\t * @since 1.4\n\t */\n\tpublic static function wp_footer() {\n\t\tif ( self::$add_loader_script ) {\n\t\t\tself::register_script( \n\t\t\t\t'geo-mashup-loader', \n\t\t\t\t'js/loader.js', \n\t\t\t\tarray(), \n\t\t\t\tGEO_MASHUP_VERSION, \n\t\t\t\ttrue );\n\t\t\t\t\n\t\t\twp_print_scripts( 'geo-mashup-loader' );\n\t\t}\n\t}\n\n\t/**\n\t * WordPress filter to add Geo Mashup query variables.\n\t *\n\t * @since 1.3\n\t * @param array $public_query_vars\n\t * @return array\n\t */\n\tpublic static function query_vars( $public_query_vars ) {\n\t\t$public_query_vars[] = 'geo_mashup_content';\n\t\treturn $public_query_vars;\n\t}\n\n\t/**\n\t *\tLocate a Geo Mashup template.\n\t * \n\t * Geo Mashup looks for templates given a certain base name. Given a base \n\t * name of 'info-window', it will return the first of:\n\t * \t'geo-mashup-info-window.php' in the active theme directory\n\t * \t'info-window.php' in the geo-mashup-custom plugin directory\n\t * \t'default-templates/info-window.php' in the geo-mashup plugin directory\n\t *\n\t * @since 1.4\n\t * \n\t * @param string $template_base The base name of the template.\n\t * @return string The file path of the template found.\n\t */\n\tpublic static function locate_template( $template_base ) {\n\t\tglobal $geo_mashup_custom;\n\t\t$template = locate_template( array(\"geo-mashup-$template_base.php\") );\n\t\tif ( empty( $template ) and isset( $geo_mashup_custom ) and $geo_mashup_custom->file_url( $template_base . '.php' ) ) {\n\t\t\t$template = path_join( $geo_mashup_custom->dir_path, $template_base . '.php' );\n\t\t}\n\t\tif ( empty( $template ) or !is_readable( $template ) ) {\n\t\t\t$template = path_join( GEO_MASHUP_DIR_PATH, \"default-templates/$template_base.php\" );\n\t\t}\n\t\tif ( empty( $template ) or !is_readable( $template ) ) {\n\t\t\t// If all else fails, just use the default info window template\n\t\t\t$template = path_join( GEO_MASHUP_DIR_PATH, 'default-templates/info-window.php' );\n\t\t}\n\t\treturn $template;\n\t}\n\n\t/**\n\t * WordPress action to deliver templated Geo Mashup content.\n\t *\n\t * @since 1.3\n\t *\n\t * @uses geo_query\n\t * @uses render_map\n\t */\n\tpublic static function template_redirect() {\n\t\t$geo_mashup_content = get_query_var( 'geo_mashup_content' );\n\t\tif ( ! empty( $geo_mashup_content ) ) {\n\n\t\t\t// The parameter's purpose is to get us here, we can remove it now\n\t\t\tunset( $_GET['geo_mashup_content'] );\n\n\t\t\t// Call the function corresponding to the content request\n\t\t\t// This provides some security, as only implemented methods will be executed\n\t\t\t$method = str_replace( '-', '_', $geo_mashup_content );\n\t\t\tcall_user_func( array( __CLASS__, $method ) );\n\t\t\texit();\n\t\t}\n\t}\n\n\t/**\n\t * Process an AJAX geo query.\n\t *\n\t * @since 1.3\n\t * @uses geo-query.php\n\t */\n\tpublic static function geo_query() {\n\t\trequire_once( 'geo-query.php' );\n\t\texit();\n\t}\n\n\t/**\n\t * Process an iframe map request.\n\t *\n\t * @since 1.3\n\t * @uses render-map.php\n\t */\n\tprivate static function render_map() {\n\t\trequire_once( 'render-map.php' );\n\t\tGeoMashupRenderMap::render_map();\n\t\texit();\n\t}\n\n\t/**\n\t * WordPress action to perform an ajax edit operation and echo results.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function ajax_edit() {\n\t\tcheck_ajax_referer( 'geo-mashup-edit', 'geo_mashup_nonce' );\n\t\tunset( $_GET['_wpnonce'] );\n\n\t\t$status = array( 'request' => 'ajax-edit', 'code' => 200 );\n\t\tif ( isset( $_POST['geo_mashup_object_id'] ) ) {\n\t\t\t$status['object_id'] = $_POST['geo_mashup_object_id'];\n\t\t} else {\n\t\t\t$status['code'] = 400;\n\t\t\t$status['message'] = __( 'No object id posted.', 'GeoMashup' );\n\t\t\t$status['object_id'] = '?';\n\t\t}\n\n\t\t/** @todo add an option for a user capability check here? */\n\n\t\tif ( 200 == $status['code'] and ! empty( $_POST['geo_mashup_ui_manager'] ) ) {\n\t\t\t$ui_manager = GeoMashupUIManager::get_instance( $_POST['geo_mashup_ui_manager'] );\n\t\t\t$result = $ui_manager->save_posted_object_location( $status['object_id'] );\n\t\t\tif ( is_wp_error( $result ) ) {\n\t\t\t\t$status['code'] = 500;\n\t\t\t\t$status['message'] = $result->get_error_message();\n\t\t\t}\n\t\t}\n\n\t\tif ( 200 == $status['code'] ) {\n\t\t\tif ( ! empty( $_REQUEST['geo_mashup_update_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location updated.', 'GeoMashup' );\n\t\t\t} else if ( ! empty( $_REQUEST['geo_mashup_delete_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location deleted.', 'GeoMashup' );\n\t\t\t} else if ( ! empty( $_REQUEST['geo_mashup_add_location'] ) ) {\n\t\t\t\t$status['message'] = __( 'Location added.', 'GeoMashup' );\n\t\t\t}\n\t\t} \n\n\t\techo json_encode( array( 'status' => $status ) );\n\t\texit();\n\t}\n\n\t/**\n\t * Toggle limiting of query_posts to located posts only, \n\t * with Geo Mashup query extensions.\n\t *\n\t * When enabled, only posts with locations will be returned from\n\t * WordPress query_posts() and related functions. Also adds Geo Mashup\n\t * public query variables.\n\t *\n\t * Caution - what if a future Geo Mashup incorporates multiple locations per object?\n\t *\n\t * @since 1.3\n\t *\n\t * @param bool $yes_or_no Whether to activate the join or not.\n\t */\n\tpublic static function join_post_queries( $yes_or_no ) {\n\t\tGeoMashupDB::join_post_queries( $yes_or_no );\n\t}\n\n\t/**\n\t * Helper to turn a string of key-value pairs into an associative array.\n\t *\n\t * @since 1.0\n\t *\n\t * @param string $glue1 Pair separator.\n\t * @param string $glue2 Key/value separator.\n\t * @param string $str String to explode. \n\t * @return array The associative array.\n\t */\n\tpublic static function explode_assoc($glue1, $glue2, $str) {\n\t\t$array2=explode($glue2, $str);\n\t\t$array3=array();\n\t\tforeach($array2 as  $val) {\n\t\t\t$pos=strpos($val,$glue1);\n\t\t\t$key=substr($val,0,$pos);\n\t\t\t$array3[$key] =substr($val,$pos+1,strlen($val));\n\t\t}\n\t\treturn $array3;\n\t}\n\n\t/**\n\t * Helper to turn an associative array into a string of key-value pairs.\n\t * \n\t * @since 1.0\n\t *\n\t * @param string $inner_glue Key/value separator.\n\t * @param string $outer_glue Pair separator.\n\t * @param array $array Array to implode.\n\t * @param mixed $skip_empty Whether to include empty values in output.\n\t * @param mixed $urlencoded Whether to URL encode the output.\n\t * @return string The imploded string.\n\t */\n\tpublic static function implode_assoc($inner_glue, $outer_glue, $array, $skip_empty=false, $urlencoded=false) {\n\t$output = array();\n\t\tforeach($array as $key=>$item) {\n\t\t\tif (!$skip_empty || isset($item)) {\n\t\t\t\tif ($urlencoded)\n\t\t\t\t\t$output[] = preg_replace('/\\s/', ' ', $key.$inner_glue.urlencode($item));\n\t\t\t\telse\n\t\t\t\t\t$output[] = preg_replace('/\\s/', ' ', $key.$inner_glue.$item);\n\t\t\t}\n\t\t}\n\t\treturn implode($outer_glue, $output);\n\t}\n\n\t/**\n\t * Guess the best language code for the current context.\n\t * \n\t * Takes some plugins and common practices into account.\n\t * \n\t * @since 1.4\n\t * \n\t * @return string Language code.\n\t */\n\tpublic static function get_language_code() {\n\t\tif ( isset( $_GET['lang'] ) ) {\n\t\t\t// A language override technique is to use this querystring parameter\n\t\t\t$language_code = $_GET['lang'];\n\t\t} else if ( function_exists( 'qtrans_getLanguage' ) ) {\n\t\t\t// qTranslate integration\n\t\t\t$language_code = qtrans_getLanguage();\n\t\t} else {\n\t\t\t$language_code = get_locale();\n\t\t}\n\t\treturn apply_filters( 'geo_mashup_get_language_code', $language_code );\n\t}\n\n\t/**\n\t * Get post types available for location searches.\n\t * \n\t * This includes post types included via the located_post_types option,\n\t * as well as post types registered with exclude_from_search set to \n\t * <em>false</em>.\n\t * \n\t * @since 1.4.5\n\t * \n\t * @return array Array of post type strings.\n\t */\n\tpublic static function get_searchable_post_types() {\n\t\tglobal $geo_mashup_options;\n\t\t$located_types = $geo_mashup_options->get( 'overall', 'located_post_types' );\n\t\t$searchable_types = array_keys( get_post_types( array('exclude_from_search' => false) ) );\n\t\treturn array_unique( array_merge( $located_types, $searchable_types ) );\n\t}\n\n\t/**\n\t * Get an array of URLs of KML or KMZ attachments for a post.\n\t * \n\t * @since 1.1\n\t *\n\t * @param int $post_id\n\t * @return array Array of URL strings.\n\t */\n\tpublic static function get_kml_attachment_urls($post_id) {\n\t\tif ( empty( $post_id ) ) {\n\t\t\treturn array();\n\t\t}\n\t\t$args = array(\n\t\t\t'post_type' => 'attachment',\n\t\t\t'numberposts' => -1,\n\t\t\t'post_status' => null,\n\t\t\t'post_mime_type' => array(\n\t\t\t\t'application/vnd.google-earth.kml+xml',\n\t\t\t\t'application/vnd.google-earth.kmz',\n\t\t\t\t'application/octet-stream'\n\t\t\t),\n\t\t\t'post_parent' => $post_id\n\t\t\t); \n\t\t$attachments = get_posts($args);\n\t\t$urls = array();\n\t\tif ($attachments) {\n\t\t\tforeach ($attachments as $attachment) {\n\t\t\t\t$url = wp_get_attachment_url( $attachment->ID ); \n\t\t\t\t// Backwards compatibility: include KML attachments with the incorrect octet-stream mime type\n\t\t\t\tif ( 'application/octet-stream' != $attachment->post_mime_type or 'kml' == substr( $url, -3 ) ) {\n\t\t\t\t\tarray_push( $urls, $url );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $urls;\n\t}\n\n\t/**\n\t * Echo a JSONP array of URLs of KML or KMZ attachments for posts.\n\t *\n\t * since 1.4\n\t */\n\tpublic static function ajax_kml_attachments() {\n\t\t$urls = array(); \n\t\tif ( !empty( $_REQUEST['post_ids'] ) ) {\n\t\t\t$post_ids = array_map( 'intval', explode( ',', $_REQUEST['post_ids'] ) );\n\t\t\tforeach( $post_ids as $post_id ) {\n\t\t\t\t$urls = array_merge( $urls, self::get_kml_attachment_urls( $post_id ) );\n\t\t\t}\n\t\t}\n\t\t$json = json_encode( $urls );\n\t\tif ( isset( $_REQUEST['callback'] ) ) {\n\t\t\t$json = esc_js( $_REQUEST['callback'] ) . '(' . $json . ')';\n\t\t}\n\t\techo $json;\n\t\texit();\n\t}\n\n\t/**\n\t * WordPress action to add relevant geo meta tags to the document head.\n\t *\n\t * wp_head {@link http://codex.wordpress.org/Plugin_API/Action_Reference#TemplateActions action},\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function wp_head() {\n\t\tglobal $wp_query;\n\n\t\tif (is_single())\n\t\t{\n\t\t\t$loc = GeoMashupDB::get_object_location( 'post', $wp_query->post->ID );\n\t\t\tif (!empty($loc)) {\n\t\t\t\t$title = esc_html(convert_chars(strip_tags(get_bloginfo('name')).\" - \".$wp_query->post->post_title));\n\t\t\t\techo '<meta name=\"ICBM\" content=\"' . esc_attr( $loc->lat . ', ' . $loc->lng ) . '\" />' . \"\\n\";\n\t\t\t\techo '<meta name=\"dcterms.title\" content=\"' . esc_attr( $title ) . '\" />' . \"\\n\";\n\t\t\t\techo '<meta name=\"geo.position\" content=\"' .  esc_attr( $loc->lat . ';' . $loc->lng ) . '\" />' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Query object locations and return JSON.\n\t *\n\t * Offers customization per object location via a filter, geo_mashup_locations_json_object.\n\t *\n\t * @since 1.2\n\t * @uses GeoMashupDB::get_object_locations()\n\t * @uses apply_filters() the_title Filter post titles.\n\t * @uses apply_filters() geo_mashup_locations_json_object Filter each location associative array before conversion to JSON.\n\t * @global array $geo_mashup_options\n\t *\n\t * @param string|array $query_args Query variables for GeoMashupDB::get_object_locations().\n\t * @param string $format (optional) 'JSON' (default) or ARRAY_A\n\t * @return string Queried object locations JSON ( { \"object\" : [...] } ).\n\t */\n\tpublic static function get_locations_json( $query_args, $format = 'JSON' ) {\n\t\t$default_args = array( 'object_name' => 'post' );\n\t\t$query_args = wp_parse_args( $query_args, $default_args );\n\t\t$json_objects = array();\n\t\t$objects = GeoMashupDB::get_object_locations( $query_args );\n\t\tif ( $objects ) {\n\t\t\tforeach ($objects as $object) {\n\t\t\t\t$obj = self::augment_map_object_location( $query_args['object_name'], $object );\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$json_objects[] = $obj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( ARRAY_A == $format ) \n\t\t\treturn array( 'objects' => $json_objects );\n\t\telse\n\t\t\treturn json_encode( array( 'objects' => $json_objects ) );\n\t}\n\n\t/**\n\t * Convert deprecated attribute names.\n\t *\n\t * @since 1.3\n\t * \n\t * @param array $atts Attributes to modify.\n\t * @return array\n\t */\n\tprivate static function convert_map_attributes( $atts ) {\n\t\t$attribute_conversions = array( \n\t\t\t'auto_open_info_window' => 'auto_info_open',\n\t\t\t'open_post_id' => 'open_object_id'\n\t\t);\n\t\tforeach ( $attribute_conversions as $old_key => $new_key ) {\n\t\t\tif ( isset( $atts[$old_key] ) ) {\n\t\t\t\tif ( ! isset( $atts[$new_key] ) ) {\n\t\t\t\t\t$atts[$new_key] = $atts[$old_key];\n\t\t\t\t}\n\t\t\t\tunset( $atts[$old_key] );\n\t\t\t}\n\t\t}\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * Augment an object location for display.\n\t *\n\t * Adds term data, object type, author, and label.\n\t * @since 1.5\n\t *\n\t * @param string $object_name The object type, e.g. 'post', 'user', etc.\n\t * @param object $object_location The object location data.\n\t * @return array The augmented object location data.\n\t */\n\tprivate static function augment_map_object_location( $object_name, $object_location ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$term_ids_by_taxonomy = array();\n\t\t$author_name = '';\n\t\tif ( 'post' == $object_name ) {\n\n\t\t\t// Filter the title\n\t\t\t$object_location->label = sanitize_text_field( apply_filters( 'the_title', $object_location->label, $object_location->object_id ) );\n\n\t\t\t// Add terms\n\t\t\tif ( defined( 'GEO_MASHUP_DISABLE_CATEGORIES' ) and GEO_MASHUP_DISABLE_CATEGORIES ) \n\t\t\t\t$include_taxonomies = array();\n\t\t\telse\n\t\t\t\t$include_taxonomies = $geo_mashup_options->get( 'overall', 'include_taxonomies' );\n\t\t\t\n\t\t\tforeach( $include_taxonomies as $include_taxonomy ) {\n\t\t\t\t$term_ids_by_taxonomy[$include_taxonomy] = array();\n\t\t\t\t// Not using wp_get_object_terms(), which doesn't allow for persistent caching\n\t\t\t\t$tax_terms = get_the_terms( $object_location->object_id, $include_taxonomy );\n\t\t\t\tif ( $tax_terms ) {\n\t\t\t\t\t// terms are sometimes indexed in order, sometimes by id, so wp_list_pluck() doesn't work\n\t\t\t\t\tforeach ( $tax_terms as $term ) {\n\t\t\t\t\t\t$term_ids_by_taxonomy[$include_taxonomy][] = $term->term_id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add post author name\n\t\t\tif ( defined( 'GEO_MASHUP_DISABLE_AUTHOR_NAME' ) and GEO_MASHUP_DISABLE_AUTHOR_NAME ) \n\t\t\t\t$author = null;\n\t\t\telse\n\t\t\t\t$author = get_userdata( $object_location->post_author );\n\n\t\t\tif ( empty( $author ) ) \n\t\t\t\t$author_name = '';\n\t\t\telse \n\t\t\t\t$author_name = $author->display_name;\n\t\t}\n\n\t\t$augmented_object = array(\n\t\t\t'object_name' => $object_name,\n\t\t\t'object_id' => $object_location->object_id,\n\t\t\t// We should be able to use real UTF-8 characters in titles\n\t\t\t// Helps with the spelling-out of entities in tooltips\n\t\t\t'title' => html_entity_decode( $object_location->label, ENT_COMPAT, 'UTF-8' ),\n\t\t\t'lat' => $object_location->lat,\n\t\t\t'lng' => $object_location->lng,\n\t\t\t'author_name' => $author_name,\n\t\t\t'terms' => $term_ids_by_taxonomy,\n\t\t);\n\n\t\t// Allow companion plugins to add data with legacy filter name\n\t\treturn apply_filters( 'geo_mashup_locations_json_object', $augmented_object, $object_location );\n\t}\n\n\t/**\n\t * Build the data for a javascript map.\n\t *\n\t * Parameters are used both to retrieve data and as options to\n\t * eventually pass to the javascript.\n\t *\n\t * @since 1.4\n\t * @uses GeoMashup::get_locations_json()\n\t *\n\t * @global array $geo_mashup_options\n\t * @global object $geo_mashup_custom\n\t * @param array $query Query parameters\n\t * @return array|WP_Error Map data ready to be rendered, or a message\n\t */\n\tpublic static function build_map_data( $query ) {\n\t\tglobal $geo_mashup_options, $geo_mashup_custom;\n\t\t$defaults = array(\n\t\t\t'map_api' => $geo_mashup_options->get( 'overall', 'map_api' )\n\t\t);\n\t\t$query = wp_parse_args( $query, $defaults );\n\t\t$object_id = isset( $query['object_id'] ) ? $query['object_id'] : 0;\n\t\tunset( $query['object_id'] );\n\n\t\t$map_data = $query + array(\n\t\t\t'ajaxurl' => admin_url( 'admin-ajax.php' ),\n\t\t\t'siteurl' => home_url( '/' ), // qTranslate doesn't work with get_option( 'home' )\n\t\t\t'url_path' => GEO_MASHUP_URL_PATH,\n\t\t\t'template_url_path' => get_stylesheet_directory_uri()\n\t\t);\n\t\tif ( isset( $geo_mashup_custom ) ) {\n\t\t\t$map_data['custom_url_path'] = $geo_mashup_custom->url_path;\n\t\t}\n\n\t\t$map_content = ( isset( $query['map_content'] ) ) ? $query['map_content'] : null;\n\t\t$object_name = ( isset( $query['object_name'] ) ) ? $query['object_name'] : 'post';\n\n\t\tif ( $map_content == 'single') {\n\n\t\t\t$object_location = GeoMashupDB::get_object_location( $object_name, $object_id );\n\t\t\tif ( !empty( $object_location ) ) {\n\t\t\t\t$augmented_location = self::augment_map_object_location( $object_name, $object_location );\n\t\t\t\t$map_data['object_data'] = array( 'objects' => array( $augmented_location ) );\n\t\t\t}\n\n\t\t\t$options = $geo_mashup_options->get( 'single_map' );\n\t\t\t$map_data = array_merge ( $options, $map_data );\n\n\t\t\tif ( 'post' == $object_name ) {\n\t\t\t\t$kml_urls = self::get_kml_attachment_urls( $object_id );\n\t\t\t\tif (count($kml_urls)>0) {\n\t\t\t\t\t$map_data['load_kml'] = array_pop( $kml_urls );\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else { // $map_content != 'single'\n\n\t\t\t$map_data['context_object_id'] = $object_id;\n\n\t\t\tif ( $map_content == 'contextual' ) {\n\n\t\t\t\t$options = $geo_mashup_options->get( 'context_map' );\n\t\t\t\t// If desired we could make these real options\n\t\t\t\t$options['auto_info_open'] = 'false';\n\n\t\t\t} else { // $map_content == 'global'\n\n\t\t\t\t$options = $geo_mashup_options->get( 'global_map' );\n\n\t\t\t\t// Term options handled during render\n\t\t\t\tunset( $options['term_options'] );\n\n\t\t\t\tif ( empty( $query['show_future'] ) )\n\t\t\t\t\t$query['show_future'] = $options['show_future'];\n\n\t\t\t\tif ( is_null( $map_content ) ) \n\t\t\t\t\t$options['map_content'] = 'global';\n\n\t\t\t}\n\n\t\t\t// Determine which taxonomies to include, if any\n\t\t\tif ( ( defined( 'GEO_MASHUP_DISABLE_CATEGORIES' ) and GEO_MASHUP_DISABLE_CATEGORIES ) )\n\t\t\t\t$options['include_taxonomies'] = array();\n\t\t\telse\n\t\t\t\t$options['include_taxonomies'] = $geo_mashup_options->get( 'overall', 'include_taxonomies' );\n\n\t\t\tif ( isset( $options['add_google_bar'] ) and 'true' == $options['add_google_bar'] ) {\n\t\t\t\t$options['adsense_code'] = $geo_mashup_options->get( 'overall', 'adsense_code' );\n\t\t\t}\n\n\t\t\t// We have a lot map control parameters that don't effect the locations query,\n\t\t\t// but only the relevant ones are used\n\t\t\t$map_data['object_data'] = self::get_locations_json( $query, ARRAY_A );\n\n\t\t\t// Incorporate parameters from the query and options\n\t\t\t$map_data = array_merge( $query, $map_data );\n\t\t\t$map_data = array_merge( $options, $map_data );\n\n\t\t} // $map_content != 'single'\n\n\t\tif ( empty( $map_data['object_data']['objects'] ) and !isset( $map_data['load_empty_map'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_map_data_error',\n\t\t\t\t__( 'Geo Mashup omitted a map with no located objects found.', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\t\tunset( $map_data['load_empty_map'] );\n\n\t\treturn $map_data;\n\t}\n\n\t/**\n\t * Make an URL with querystring added to the site's home URL.\n\t *\n\t * @since 1.4\n\t *\n\t * @static\n\t * @param array $query Associative array of querystring parameters.\n\t * @return string HTML-ready URL.\n\t */\n\tpublic static function build_home_url( $query = array() ) {\n\n\t\t// We want domain changes or language parameters from WPML\n\t\t// It won't provide them for any path but '/'\n\t\t$home_url = home_url( '/' );\n\t\t$home_url_parts = parse_url( $home_url );\n\n\t\t// Language plugins may also add query parameters to home_url(). We'll add to these.\n\t\t$home_url_query_parts = array();\n\t\tif ( !empty( $home_url_parts['query'] ) ) {\n\t\t\twp_parse_str( $home_url_parts['query'], $home_url_query_parts );\n\t\t\t$query = array_merge( $home_url_query_parts, $query );\n\t\t}\n\n\t\tif ( !empty( $query ) )\n\t\t\t$home_url = htmlspecialchars( add_query_arg( $query, $home_url ) );\n\n\t\treturn $home_url;\n\t}\n\n\t/**\n\t * Add a default 'lang' attribute if there is none and a language plugin can provide one.\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function maybe_add_language_attribute( $atts ) {\n\t\tif ( !empty( $atts['lang'] ) ) {\n\t\t\treturn $atts;\n\t\t}\n\t\tif ( function_exists( 'qtrans_getLanguage' ) ) {\n\t\t\t// qTranslate integration\n\t\t\t$atts['lang'] = qtrans_getLanguage();\n\t\t} else if ( defined( 'ICL_LANGUAGE_CODE' ) ) {\n\t\t\t// WPML integration\n\t\t\t$atts['lang'] = ICL_LANGUAGE_CODE;\n\t\t}\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * Find the ID and location of the container object if it exists\n\t * @since 1.9.0\n\t * @param string $object_name\n\t * @return int|null|string\n\t */\n\tprivate static function context_object_id( $object_name ) {\n\t\tglobal $wp_query, $in_comment_loop;\n\n\t\tif ( 'post' == $object_name and $wp_query->in_the_loop ) {\n\t\t\treturn $wp_query->post->ID;\n\t\t}\n\n\t\tif ( 'comment' == $object_name and $in_comment_loop ) {\n\t\t\treturn get_comment_ID();\n\t\t}\n\n\t\tif ( 'user' == $object_name and $wp_query->post ) {\n\t\t\treturn $wp_query->post->post_author;\n\t\t}\n\n\t\treturn null;\n\t}\n\t/**\n\t * If no object ID has been supplied, try to determine one contextually.\n\t * @since 1.9.0\n\t * @param array $atts May add object_id\n\t * @param string $object_name\n\t * @return string\n\t */\n\tprivate static function resolve_map_content( &$atts, $object_name ) {\n\t\t// Map content type isn't required, if empty we'll choose one\n\t\t$map_content = isset( $atts['map_content'] ) ? $atts['map_content'] : null;\n\n\t\t$context_object_id = self::context_object_id( $object_name );\n\n\t\t$context_location = null;\n\n\t\tif ( empty( $atts['object_id'] ) and ! empty( $context_object_id ) ) {\n\t\t\t// If we found a context object, we'll query for that by default\n\t\t\t$atts['object_id'] = $context_object_id;\n\t\t\t$context_location = GeoMashupDB::get_object_location( $object_name, $context_object_id );\n\t\t}\n\n\t\tif ( empty( $atts['object_id'] ) and 'single' == $map_content and 'post' == $object_name ) {\n\t\t\t// In secondary post loops we won't find a context object\n\t\t\t// but can at least allow explicit single maps\n\t\t\t$atts['object_id'] = get_the_ID();\n\t\t}\n\n\t\tif ( empty( $map_content ) and !empty( $atts['object_ids'] ) ) {\n\t\t\t$map_content = 'global';\n\t\t}\n\n\t\tif ( empty( $map_content ) ) {\n\n\t\t\tif ( empty( $context_object_id ) ) {\n\t\t\t\t$map_content = 'contextual';\n\t\t\t} else if ( empty( $context_location ) ) {\n\t\t\t\t// Not located, go global\n\t\t\t\t$map_content = 'global';\n\t\t\t} else {\n\t\t\t\t// Located, go single\n\t\t\t\t$map_content = 'single';\n\t\t\t}\n\n\t\t} else if ( $map_content instanceof WP_Query ) {\n\n\t\t\t// We've been given a post query, put its contents in a global map\n\t\t\t$atts['object_ids'] = implode( ',', wp_list_pluck( $map_content->posts, 'ID' ) );\n\t\t\t$map_content = 'global';\n\n\t\t}\n\n\t\treturn $map_content;\n\t}\n\n\t/**\n\t * Get a context object's ID according to name.\n\t * @since 1.9.0\n\t * @param string $object_name\n\t * @param object $context_object\n\t * @return int|null\n\t */\n\tprivate static function object_id_by_name( $object_name, $context_object ) {\n\t\tif ( 'post' == $object_name ) {\n\t\t\treturn $context_object->ID;\n\t\t}\n\t\tif ( 'user' == $object_name ) {\n\t\t\treturn $context_object->post_author;\n\t\t}\n\t\tif ( 'comment' == $object_name ) {\n\t\t\treturn $context_object->comment_ID;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, object_ids, and error_comment\n\t * @param string $object_name\n\t * @param array $click_to_load_options\n\t * @return array\n\t */\n\tprivate static function add_contextual_attributes( $atts, $object_name, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options, $wp_query;\n\n\t\t$atts['map_content'] = 'contextual';\n\t\t$atts += $geo_mashup_options->get( 'context_map', $click_to_load_options );\n\t\t$object_ids = array();\n\t\tif ( 'comment' == $object_name ) {\n\t\t\t$context_objects = $wp_query->comments;\n\t\t} else {\n\t\t\t$context_objects = $wp_query->posts;\n\t\t}\n\t\tif ( !is_array( $context_objects ) ) {\n\t\t\t$atts['error_comment'] = '<!-- ' . __( 'Geo Mashup found no objects to map in this context', 'GeoMashup' ) . '-->';\n\t\t\treturn $atts;\n\t\t}\n\t\tforeach ( $context_objects as $context_object ) {\n\t\t\t$object_ids[] = self::object_id_by_name( $object_name, $context_object );\n\t\t}\n\t\t$atts['object_ids'] = implode( ',', $object_ids );\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, error_comment\n\t * @param string $object_name\n\t * @param array $click_to_load_options\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_single_attributes( $atts, $object_name, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$atts['map_content'] = 'single';\n\t\t$atts += $geo_mashup_options->get( 'single_map', $click_to_load_options );\n\t\tif ( empty( $atts['object_id'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_single_attribute_error',\n\t\t\t\t__( 'Geo Mashup found no current object to map', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\n\t\t$single_location = GeoMashupDB::get_object_location( $object_name, $atts['object_id'] );\n\t\tif ( empty( $single_location ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_single_attribute_error',\n\t\t\t\t__( 'Geo Mashup omitted a map for an object with no location', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts Could set map_content, ignore_url, limit, and error_comment\n\t * @param array $click_to_load_options\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_global_attributes( $atts, $click_to_load_options ) {\n\t\tglobal $geo_mashup_options;\n\n\t\tif ( isset( $_GET['template'] ) and 'full-post' == $_GET['template'] ) {\n\t\t\t// Global maps tags in response to a full-post query can infinitely nest, prevent this\n\t\t\treturn new WP_Error(\n\t\t\t\t'geo_mashup_global_attribute_error',\n\t\t\t\t__( 'Geo Mashup map omitted to avoid nesting maps', 'GeoMashup' )\n\t\t\t);\n\t\t}\n\t\t$atts['map_content'] = 'global';\n\n\t\t// Global maps on a page will make use of query string arguments unless directed otherwise\n\t\t$ignore_url = false;\n\t\tif ( isset( $atts['ignore_url'] ) && 'true' == $atts['ignore_url'] ) {\n\t\t\t$ignore_url = true;\n\t\t\tunset( $atts['ignore_url'] );\n\t\t}\n\n\t\tif ( isset( $_SERVER['QUERY_STRING'] ) and !$ignore_url ) {\n\t\t\t$atts = wp_parse_args( $_SERVER['QUERY_STRING'], $atts );\n\t\t}\n\n\t\t$atts += $geo_mashup_options->get( 'global_map', $click_to_load_options );\n\n\t\t// Don't query more than max_posts\n\t\t$max_posts = $geo_mashup_options->get( 'global', 'max_posts' );\n\t\tif ( empty( $atts['limit'] ) and !empty( $max_posts ) ) {\n\t\t\t$atts['limit'] = $max_posts;\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @staticvar $map_number Used to index maps per request.\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function parse_map_attributes( $atts ) {\n\t\tstatic $map_number = 1;\n\n\t\t$atts = wp_parse_args( $atts );\n\n\t\tif ( !isset( $atts['name'] ) ) {\n\t\t\t$atts['name'] = 'gm-map-' . $map_number;\n\t\t\t$map_number++;\n\t\t}\n\n\t\t$atts = self::maybe_add_language_attribute( $atts );\n\n\t\treturn self::convert_map_attributes( $atts );\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array|WP_Error\n\t */\n\tprivate static function add_map_content_attributes( array $atts ) {\n\n\t\t// Default query is for posts\n\t\t$object_name = ( isset( $atts['object_name'] ) ) ? $atts['object_name'] : 'post';\n\n\t\t$map_content = self::resolve_map_content( $atts, $object_name );\n\n\t\t$click_to_load_options = array( 'click_to_load', 'click_to_load_text' );\n\n\t\tif ( 'contextual' == $map_content ) {\n\n\t\t\t$atts = self::add_contextual_attributes( $atts, $object_name, $click_to_load_options );\n\n\t\t} else if ( 'single' == $map_content ) {\n\n\t\t\t$atts = self::add_single_attributes( $atts, $object_name, $click_to_load_options );\n\n\t\t} else if ( 'global' == $map_content ) {\n\n\t\t\t$atts = self::add_global_attributes( $atts, $click_to_load_options );\n\n\t\t} else {\n\n\t\t\t$atts = new WP_Error(\n\t\t\t\t'geo_mashup_map_content_attributes',\n\t\t\t\t'Unrecognized value for map_content: \"'.$map_content.'\"'\n\t\t\t);\n\n\t\t}\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts limit may be added\n\t * @param array $map_data\n\t * @param string $click_to_load\n\t * @param string $click_to_load_text\n\t * @return mixed|string|void\n\t */\n\tprivate static function build_map_image( &$atts, $map_data, $click_to_load, $click_to_load_text ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t// Static maps have a limit of 50 markers: http://code.google.com/apis/maps/documentation/staticmaps/#Markers\n\t\t$atts['limit'] = empty( $atts['limit'] ) ? 50 : $atts['limit'];\n\n\t\tif ( empty( $map_data['object_data']['objects'] ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$key = $geo_mashup_options->get( 'overall', 'googlev3_key' );\n\t\t$dimensions = intval( $map_data['width'] ) . 'x' . intval( $map_data['height'] );\n\t\t$map_image = '<img src=\"http://maps.google.com/maps/api/staticmap?size=' . $dimensions . '&amp;key=' . $key;\n\t\tif ( count( $map_data['object_data']['objects'] ) == 1) {\n\t\t\t$map_image .= '&amp;center=' . $map_data['object_data']['objects'][0]['lat'] . ',' .\n\t\t\t\t$map_data['object_data']['objects'][0]['lng'];\n\t\t}\n\t\t$map_image .= '&amp;zoom=' . $map_data['zoom'] . '&amp;markers=size:small|color:red';\n\t\tforeach( $map_data['object_data']['objects'] as $location ) {\n\t\t\t// TODO: Try to use the correct color for the category? Draw category lines?\n\t\t\t$map_image .= '|' . $location['lat'] . ',' . $location['lng'];\n\t\t}\n\t\t$map_image .= '\" alt=\"geo_mashup_map\"';\n\t\tif ($click_to_load == 'true') {\n\t\t\t$map_image .= '\" title=\"'.$click_to_load_text.'\"';\n\t\t}\n\t\t$map_image .= ' />';\n\n\t\treturn apply_filters( 'geo_mashup_static_map', $map_image, $map_data, compact('click_to_load', 'click_to_load_text' ) );\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @param string $atts_md5\n\t * @return array\n\t */\n\tprivate static function src_args( $atts, $atts_md5 ) {\n\t\t$src_args = array(\n\t\t\t'geo_mashup_content' => 'render-map',\n\t\t\t'map_data_key' => $atts_md5,\n\t\t);\n\n\t\tif ( !empty( $atts['lang'] ) ) {\n\t\t\t$src_args['lang'] = $atts['lang'];\n\t\t}\n\n\t\treturn $src_args;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $atts\n\t * @return array\n\t */\n\tprivate static function maybe_compress_object_ids( array $atts ) {\n\t\tif ( !isset( $atts['object_ids'] ) or strlen( $atts['object_ids'] ) <= 1800 ) {\n\t\t\treturn $atts;\n\t\t}\n\n\t\tif ( !class_exists( 'GM_Int_list' ) ) {\n\t\t\tinclude GEO_MASHUP_DIR_PATH . '/gm-int-list.php';\n\t\t}\n\n\t\t$id_list = new GM_Int_List( $atts['object_ids'] );\n\t\t$atts['oids'] = $id_list->compressed();\n\t\tunset( $atts['object_ids'] );\n\n\t\treturn $atts;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $map_data\n\t * @param string $iframe_src\n\t * @param string $click_to_load_text\n\t * @param bool $static\n\t * @param string $map_image\n\t * @return string\n\t */\n\tprivate static function click_to_load_content( $map_data, $iframe_src, $click_to_load_text, $static, $map_image ) {\n\n\t\tif ( is_feed() ) {\n\t\t\treturn \"<a href=\\\"{$iframe_src}\\\">$click_to_load_text</a>\";\n\t\t}\n\n\t\t$width_style = self::dimension_style_value( $map_data['width'] );\n\t\t$height_style = self::dimension_style_value( $map_data['height'] );\n\n\t\tself::$add_loader_script = true;\n\n\t\t$style = \"height: {$height_style}; width: {$width_style}; background-color: #ddd;\".\n\t\t\t\"background-image: url(\".GEO_MASHUP_URL_PATH.\"/images/wp-gm-pale.png);\".\n\t\t\t\"background-repeat: no-repeat;background-position:center; cursor: pointer;\";\n\n\t\t$name = $map_data['name'];\n\n\t\t$content = \"<div class=\\\"gm-map\\\" style=\\\"$style\\\" \" .\n\t\t\t\"onclick=\\\"GeoMashupLoader.addMapFrame(this,'$iframe_src','{$height_style}','{$width_style}','{$name}')\\\">\";\n\n\t\tif ( $static ) {\n\t\t\t// TODO: test whether click to load really works with a static map\n\t\t\t$content .= $map_image . '</div>';\n\t\t} else {\n\t\t\t$content .= \"<p style=\\\"text-align:center;\\\">$click_to_load_text</p></div>\";\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * @since 1.9.0\n\t * @param array $map_data\n\t * @param string $iframe_src\n\t * @return string\n\t */\n\tprivate static function interactive_map_content( $map_data, $iframe_src ) {\n\n\t\t$div_styles = 'position: relative;';\n\t\tif ( empty( $map_data['shape'] ) ) {\n\t\t\t$div_styles .= sprintf(\n\t\t\t\t'height: %s; width: %s;',\n\t\t\t\tself::dimension_style_value( $map_data['height'] ),\n\t\t\t\tself::dimension_style_value( $map_data['width'] )\n\t\t\t);\n\t\t} else {\n\t\t\t$div_styles .= sprintf(\n\t\t\t\t'padding-bottom: %s; height: 0; width: 100%%;',\n\t\t\t\t$map_data['shape']\n\t\t\t);\n\t\t}\n\n\t\t$frame_styles = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; overflow: hidden;';\n\n\t\treturn sprintf(\n\t\t\t\"<div class=\\\"gm-map\\\" style=\\\"%s\\\"><iframe name=\\\"%s\\\" src=\\\"%s\\\" style=\\\"%s\\\"></iframe></div>\",\n\t\t\t$div_styles,\n\t\t\t$map_data['name'],\n\t\t\t$iframe_src,\n\t\t\t$frame_styles\n\t\t);\n\t}\n\n\t/**\n\t * Format a map dimension attribute as a CSS style value.\n\t * @since 1.9.0\n\t * @param string $dimension\n\t * @return string\n\t */\n\tprivate static function dimension_style_value( $dimension ) {\n\t\t$units = ( '%' === substr( $dimension, -1 ) ) ? '%' : 'px';\n\t\treturn intval( $dimension ) . $units;\n\t}\n\n\t/**\n\t * The map template tag.\n\t *\n\t * Returns HTML for a Google map. Must use with echo in a template: echo GeoMashup::map();.\n\t *\n\t * @since 1.0\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#map tag parameter documentation\n\t * @uses $_SERVER['QUERY_STRING'] The first global map on a page uses query string parameters like tag parameters.\n\t * @uses apply_filters() geo_mashup_static_map Modify a static map image generated by geo mashup.\n\t *\n\t * @param string|array $atts Template tag parameters.\n\t * @return string The HTML for the requested map.\n\t */\n\tpublic static function map( $atts = null ) {\n\n\t\t$atts = self::parse_map_attributes( $atts );\n\n\t\t$static = (bool)( !empty( $atts['static'] ) and 'true' == $atts['static'] );\n\t\tunset( $atts['static'] );\n\n\t\t$atts = self::add_map_content_attributes( $atts );\n\n\t\tif ( is_wp_error( $atts ) ) {\n\t\t\treturn '<!--' . $atts->get_error_message() . '-->';\n\t\t}\n\n\t\t$click_to_load = $atts['click_to_load'];\n\t\tunset( $atts['click_to_load'] );\n\n\t\t$click_to_load_text = $atts['click_to_load_text'];\n\t\tunset( $atts['click_to_load_text'] );\n\n\t\t$map_data = self::build_map_data( $atts );\n\n\t\tif ( is_wp_error( $map_data ) ) {\n\t\t\treturn '<!--' . $map_data->get_error_message() . '-->';\n\t\t}\n\n\t\t$map_image = $static ? self::build_map_image( $atts, $map_data, $click_to_load, $click_to_load_text ) : '';\n\n\t\t$atts_md5 =  md5( serialize( $atts ) );\n\t\tset_transient( 'gmm' . $atts_md5, $map_data, 20 );\n\n\t\t$src_args = self::src_args( $atts, $atts_md5 );\n\n\t\t$atts = self::maybe_compress_object_ids( $atts );\n\n\t\t$iframe_src = self::build_home_url( $src_args + $atts );\n\n\t\tif ($click_to_load == 'true') {\n\t\t\t$content = self::click_to_load_content( $map_data, $iframe_src, $click_to_load_text, $static, $map_image );\n\t\t} else if ( $static ) {\n\t\t\t$content = \"<div class=\\\"gm-map\\\">$map_image</div>\";\n\t\t} else {\n\t\t\t$content = self::interactive_map_content( $map_data, $iframe_src );\n\t\t}\n\n\t\treturn apply_filters( 'geo_mashup_map_content', $content, $map_data );\n\t}\n\n\t/**\n\t * Full post template tag.\n\t *\n\t * Returns a placeholder where a related map should display the full post content \n\t * of the currently selected marker.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#Full_Post\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function full_post($args = null) {\n\t\t$args = wp_parse_args($args);\n\t\t$for_map = 'gm';\n\t\tif ( !empty( $args['for_map'] ) ) {\n\t\t\t$for_map = $args['for_map'];\n\t\t}\n\t\t// It's nice if click-to-load works in the full post display\n\t\tself::$add_loader_script = true;\n\n\t\treturn '<div id=\"' . $for_map . '-post\"></div>';\n\t}\n\n\t/**\n\t * Category name template tag.\n\t *\n\t * If there is a map_cat parameter, return the name of that category.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#Category_Name\n\t * \n\t * @param string|array $option_args Template tag arguments.\n\t * @return string Category name.\n\t */\n\tpublic static function category_name($option_args = null) {\n\t\t$category_name = '';\n\t\tif (is_string($option_args)) {\n\t\t\t$option_args = wp_parse_args($option_args);\n\t\t}\n\t\tif (is_page() && isset($_SERVER['QUERY_STRING'])) {\n\t\t\t$option_args = $option_args + self::explode_assoc('=','&amp;',$_SERVER['QUERY_STRING']);\n\t\t}\n\t\tif (isset($option_args['map_cat'])) {\n\t\t\t$category_name = get_cat_name($option_args['map_cat']);\n\t\t}\n\t\treturn $category_name;\n\t}\n\n\t/**\n\t * Term legend template tag.\n\t * \n\t * Returns a placeholder where a related map should display a legend for the \n\t * terms of the displayed content.\n\t * \n\t * @since 1.5\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#term-legend\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function term_legend($args = null) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$id = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) \n\t\t\t$id = $args['for_map'];\n\n\t\tif ( !empty( $args['taxonomy'] ) ) \n\t\t\t$id .= '-' . esc_attr ( $args['taxonomy'] );\n\n\t\t$id .= '-legend';\n\n\t\t$classes = array();\n\n\t\tif ( !empty( $args['noninteractive'] ) && 'false' != $args['noninteractive'] )\n\t\t\t$classes[] = 'noninteractive';\n\n\t\tif ( !empty( $args['check_all'] ) && 'true' != $args['check_all'] )\n\t\t\t$classes[] = 'check-all-off';\n\n\t\tif ( !empty( $args['default_off'] ) && 'false' != $args['default_off'] )\n\t\t\t$classes[] = 'default-off';\n\n\t\tif ( !empty( $args['format'] ) ) \n\t\t\t$classes[] = 'format-' . esc_attr( $args['format'] );\n\t\t\n\t\tif ( isset( $args['titles'] ) ) {\n\t\t\tif ( $args['titles'] && 'false' != $args['titles'] )\n\t\t\t\t$classes[] = 'titles-on';\n\t\t\telse\n\t\t\t\t$classes[] = 'titles-off';\n\t\t}\n\n\t\treturn '<div id=\"' . $id . '\" class=\"' . implode( ' ', $classes ) . '\"></div>';\n\t}\n\n\t/**\n\t * Category (term) legend template tag.\n\t *\n\t * Returns a placeholder where a related map should display a legend for the \n\t * terms of the displayed content. Used to display only categories, now displays\n\t * all included terms.\n\t *\n\t * @since 1.1\n\t * @deprecated \n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#category-legend\n\t * \n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function category_legend($args = null) {\n\t\treturn self::term_legend( $args );\n\t}\n\n\t/**\n\t * If the option is set, add a map link to category lists.\n\t *\n\t * list_cats {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Category_Filters filter}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function list_cats($content, $category = null) {\n\t\tglobal $geo_mashup_options;\n\n\t\tif ( $category and 'category' == $category->taxonomy ) {\n\t\t\t$count = GeoMashupDB::category_located_post_count( $category->cat_ID );\n\t\t\t// Add map link only if there are geo-located posts to see\n\t\t\tif ($count) {\n\t\t\t\t// This feature doesn't work unless there is a category description\n\t\t\t\tif ( empty( $category->description ) ) {\n\t\t\t\t\treturn $content . $geo_mashup_options->get('overall', 'category_link_separator') . \n\t\t\t\t\t\t__( 'You must add a description to this category to use this Geo Mashup feature.', 'GeoMashup' );\n\t\t\t\t}\n\t\t\t\t$url = get_page_link($geo_mashup_options->get('overall', 'mashup_page'));\n\t\t\t\tif (strstr($url,'?')) {\n\t\t\t\t\t$url .= '&amp;';\n\t\t\t\t} else {\n\t\t\t\t\t$url .= '?';\n\t\t\t\t}\n\t\t\t\t$link = '<a href=\"'.$url.'map_cat='.$category->cat_ID.'&amp;zoom='.$geo_mashup_options->get('overall', 'category_zoom').\n\t\t\t\t\t'\" title=\"'.$geo_mashup_options->get('overall', 'category_link_text').'\">';\n\t\t\t\treturn $content.'</a>'.$geo_mashup_options->get('overall', 'category_link_separator').$link.\n\t\t\t\t\t$geo_mashup_options->get('overall', 'category_link_text');\n\t\t\t}\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * WordPress action to add the Geo Mashup Options settings admin page.\n\t *\n\t * admin_menu {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function admin_menu() {\n\t\tif (function_exists('add_options_page')) {\n\t\t\tadd_options_page(__('Geo Mashup Options','GeoMashup'), __('Geo Mashup','GeoMashup'), 'manage_options', __FILE__, array( __CLASS__, 'options_page'));\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to display important messages in the admin.\n\t * \n\t * admin_notices {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Advanced_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function admin_notices() {\n\t\tglobal $geo_mashup_options;\n\n\t\t$message = array();\n\t\tif ( !empty( self::$deactivate_geo_search_basename ) ) {\n\t\t\tdeactivate_plugins( GeoMashupSearch::get_instance()->basename );\n\t\t\t$message_format = __( 'Geo Mashup now includes search, deactivating the old %s plugin. It\\'s safe to delete it.', 'GeoMashup' );\n\t\t\t$message[] = sprintf( $message_format, self::$deactivate_geo_search_basename );\n\t\t}\n\n\t\tif ( ! self::is_options_page() ) {\n\t\t\t// We're not looking at the settings, but it may be important to do so\n\t\t\tif ( GEO_MASHUP_DB_VERSION != GeoMashupDB::installed_version() and current_user_can( 'manage_options' ) ) {\n\t\t\t\t$message_format = __( 'Geo Mashup needs to upgrade its database, visit the <a href=\"%s\">settings</a> to do it now.', 'GeoMashup' );\n\t\t\t\t$message[] = sprintf( $message_format, admin_url( 'options-general.php?page=' . GEO_MASHUP_PLUGIN_NAME ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $message ) ) {\n\t\t\techo '<div class=\"error fade\"><p>' . implode( '</p><p>', $message ) . '</p></div>';\n\t\t}\n\t}\n\n\t/**\n\t * WordPress action to add custom action links to the plugin listing.\n\t * \n\t * plugin_action_links {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Advanced_WordPress_Filters filter},\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function plugin_action_links( $links, $file ) {\n\t\tif ( GEO_MASHUP_PLUGIN_NAME == $file ) {\n\t\t\t$settings_link = '<a href=\"' . admin_url( 'options-general.php?page=' . GEO_MASHUP_PLUGIN_NAME ) .'\">' .\n\t\t\t\t__( 'Settings' ) . '</a>';\n\t\t\tarray_unshift( $links, $settings_link );\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t * WordPress action to add custom meta links to the plugin listing.\n\t * \n\t * plugin_row_meta {@link http://codex.wordpress.org/Plugin_API/Filter_Reference#Advanced_WordPress_Filters filter},\n\t * called by WordPress.\n\t *\n\t * @since 1.3\n\t */\n\tpublic static function plugin_row_meta( $links, $file ) {\n\t\tif ( GEO_MASHUP_PLUGIN_NAME == $file ) {\n\t\t\t$links[] = '<a href=\"https://github.com/cyberhobo/wordpress-geo-mashup/wiki/Getting-Started\">' .\n\t\t\t\t__( 'Documentation', 'GeoMashup' ) . '</a>';\n\t\t\t$links[] = '<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=11045324\">' .\n\t\t\t\t__( 'Donate', 'GeoMashup' ) . '</a>';\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t * WordPress action to produce the Geo Mashup Options admin page.\n\t *\n\t * Called by the WordPress admin.\n\t * \n\t * @since 1.0\n\t */\n\tpublic static function options_page() {\n\t\tinclude_once( path_join( GEO_MASHUP_DIR_PATH, 'options.php' ) );\n\t\tgeo_mashup_options_page();\n\t}\n\n\t/**\n\t * Get the location of the current loop object, if any.\n\t *\n\t * Does not work in non-global loops, such as are made with WP_Query.\n\t *\n\t * @since 1.3\n\t *\n\t * @param string $output ARRAY_A | ARRAY_N | OBJECT\n\t * @param string $object_name Kind of object we're looking for, 'post', 'user', 'comment'.\n\t * @return object|bool Location object or false if none.\n\t */\n\tpublic static function current_location( $output = OBJECT, $object_name = '' ) {\n\t\tglobal $in_comment_loop, $in_user_loop, $user;\n\n\t\t$location = false;\n\n\t\t// Find the context\n\t\tif ( $object_name == 'comment' ) {\n\t\t\t$object_id =  get_comment_ID();\n\t\t} else if ( $object_name == 'user' ) {\n\t\t\t$object_id = $user->ID;\n\t\t} else if ( $object_name == 'post' ) {\n\t\t\t$object_id = get_the_ID();\n\t\t} else if ( $in_comment_loop ) {\n\t\t\t$object_name = 'comment';\n\t\t\t$object_id = get_comment_ID();\n\t\t} else if ( $in_user_loop ) {\n\t\t\t$object_name = 'user';\n\t\t\t$object_id = $user->ID;\n\t\t} else if ( in_the_loop() ) {\n\t\t\t$object_name = 'post';\n\t\t\t$object_id = get_the_ID();\n\t\t} else {\n\t\t\t$object_name = $object_id = '';\n\t\t}\n\t\t\t\n\t\tif ( $object_name && $object_id )\n\t\t\t$location = GeoMashupDB::get_object_location( $object_name, $object_id, $output );\n\n\t\treturn $location;\n\t}\n\n\t/**\n\t * Look at global loops first, then try to guess a current location if needed.\n\t *\n\t * @uses current_location()\n\t *\n\t * @param string $output ARRAY_A | ARRAY_N | OBJECT\n\t * @param string $object_name Kind of object we're looking for, 'post', 'user', 'comment'.\n\t * @return object|bool Location object or false if none.\n\t */\n\tpublic static function current_location_guess( $output = OBJECT, $object_name = '' ) {\n\t\tglobal $post, $comment, $user;\n\n\t\t$location = self::current_location( $output, $object_name );\n\t\tif ( !$location ) {\n\t\t\tif ( $post and !in_array( $object_name, array( 'comment', 'user' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'post', $post->ID, $output );\n\t\t\tif ( !$location and $comment and !in_array( $object_name, array( 'post', 'user' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'comment', $comment->comment_ID, $output );\n\t\t\tif ( !$location and $user and !in_array( $object_name, array( 'post', 'comment' ) ) )\n\t\t\t\t$location = GeoMashupDB::get_object_location( 'user', $user->ID, $output );\n\t\t}\n\t\treturn $location;\n\t}\n\n\t/**\n\t * A template tag to insert location information.\n\t *\n\t * @since 1.3\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string The information requested, empty string if none.\n\t */\n\tpublic static function location_info( $args = '' ) {\n\t\t/** @var $fields string|array  */\n\t\t/** @var $separator string  */\n\t\t/** @var $format string  */\n\t\t/** @var $object_name string  */\n\t\t/** @var $object_id int  */\n\t\t$defaults = array(\n\t\t\t'fields' => 'address', \n\t\t\t'separator' => ',', \n\t\t\t'format' => '',\n\t\t\t'object_name' => null, \n\t\t\t'object_id' => null );\n\t\t$args = wp_parse_args( $args, $defaults );\n\t\textract( $args, EXTR_SKIP );\n\t\t$info = '';\n\n\t\tif ( $object_name && $object_id )\n\t\t\t$location = GeoMashupDB::get_object_location( $object_name, $object_id, ARRAY_A );\n\t\telse\n\t\t\t$location = self::current_location_guess( ARRAY_A, $object_name );\n\n\t\tif ( !empty( $location ) ) {\n\t\t\t$fields = preg_split( '/\\s*,\\s*/', $fields );\n\t\t\t$values = array();\n\t\t\tforeach( $fields as $field ) {\n\t\t\t\tif ( isset( $location[$field] ) ) {\n\t\t\t\t\tarray_push( $values, $location[$field] );\n\t\t\t\t} else {\n\t\t\t\t\tif ( 'country_name' == $field ) { \n\t\t\t\t\t\tarray_push( $values, GeoMashupDB::get_administrative_name( $location['country_code'] ) );\n\t\t\t\t\t} else if ( 'admin_name' == $field ) {\n\t\t\t\t\t\tarray_push( $values, GeoMashupDB::get_administrative_name( $location['country_code'], $location['admin_code'] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarray_push( $values, '' );\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}\n\t\t\tif ( empty( $format ) ) {\n\t\t\t\t$info = implode( $separator, $values );\n\t\t\t} else {\n\t\t\t\t$info = vsprintf( $format, $values );\n\t\t\t}\n\t\t}\n\t\treturn $info;\n\t}\t\n\n\t/**\n\t * A template tag to insert a link to a post on the mashup.\n\t * \n\t * @see show_on_map_link()\n\t */\n\tpublic static function post_link($option_args = '') {\n\t\treturn self::show_on_map_link($option_args);\n\t}\n\n\t/**\n\t * A template tag to return an URL for the current location on the \n\t * global map page. \n\t *\n\t * @since 1.3\n\t * @todo What would happen if the global map is not a post map?\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string The URL, empty if no current location is found.\n\t */\n\tpublic static function show_on_map_link_url( $args = null ) {\n\t\tglobal $geo_mashup_options;\n\n\t\t$defaults = array( 'zoom' => '' );\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t$args = array_filter( $args );\n\n\t\t$url = '';\n\t\t$location = self::current_location_guess();\n\n\t\tif ( $location ) {\n\t\t\t$url = get_page_link($geo_mashup_options->get('overall', 'mashup_page'));\n\n\t\t\tif ( !$url )\n\t\t\t\treturn '';\n\n\t\t\t$args['center_lat'] = $location->lat;\n\t\t\t$args['center_lng'] = $location->lng;\n\n\t\t\tif ( $geo_mashup_options->get( 'global_map', 'auto_info_open' ) == 'true' )\n\t\t\t\t$args['open_object_id'] = $location->object_id;\n\n\t\t\t$url = htmlentities( add_query_arg( $args, $url ) );\n\t\t}\n\t\treturn $url;\n\t}\n\n\t/**\n\t * A template tag to insert a link to the current location post on the \n\t * global map page. \n\t *\n\t * @since 1.3\n\t *\n\t * @param string|array $args Tag arguments.\n\t * @return string The link HTML, empty if no current location is found.\n\t */\n\tpublic static function show_on_map_link( $args = null ) {\n\t\t$defaults = array( 'text' => __( 'Show on map', 'GeoMashup' ),\n\t\t\t 'display' => false,\n\t\t\t 'zoom' => '',\n\t\t\t 'show_icon' => true );\n\t\t$options = wp_parse_args($args, $defaults);\n\t\t$link = '';\n\t\t$url = self::show_on_map_link_url( array_intersect_key( $options, array( 'zoom' => true ) ) );\n\t\tif ( $url ) {\n\t\t\t$icon = '';\n\t\t\tif ($options['show_icon'] && strcmp( $options['show_icon'], 'false' ) != 0) {\n\t\t\t\t$icon = '<img src=\"'.GEO_MASHUP_URL_PATH.\n\t\t\t\t\t'/images/geotag_16.png\" alt=\"'.__('Geotag Icon','GeoMashup').'\"/>';\n\t\t\t}\n\t\t\t$link = '<a class=\"gm-link\" href=\"'.$url.'\">'.\n\t\t\t\t$icon.' '.$options['text'].'</a>';\n\t\t\tif ($options['display']) {\n\t\t\t\techo $link;\n\t\t\t}\n\t\t}\n\t\treturn $link;\n\t}\n\n\t/** \n\t * Visible posts list template tag.\n\t *\n\t * Returns a placeholder where a related map should display a list\n\t * of the currently visible posts.\n\t *\n\t * @since 1.2\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#visible-posts-list\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function visible_posts_list($args = null) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$list_html = '';\n\n\t\t$for_map = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) {\n\t\t\t$for_map = $args['for_map'];\n\t\t}\t\n\t\tif ( !empty( $args['heading_text'] ) ) {\n\t\t\t$heading_div = '<div id=\"' . $for_map . '-visible-list-header\" style=\"display:none;\">';\n\t\t\t$heading_tags = '<h2>';\n\t\t\tif ( !empty( $args['heading_tags'] ) ) {\n\t\t\t\t$heading_tags = $args['heading_tags'];\n\t\t\t}\n\t\t\t$list_html .= balanceTags( $heading_div . $heading_tags . $args['heading_text'], true );\n\t\t}\n\t\t$list_html .= '<div id=\"' . $for_map . '-visible-list\"></div>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List located posts template tag.\n\t *\n\t * Returns an HTML list of all located posts.\n\t *\n\t * @since 1.1\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#list-located-posts\n\t *\n\t * @param string|array $option_args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\tpublic static function list_located_posts( $option_args = null ) {\n\t\t$option_args = wp_parse_args( $option_args );\n\t\t$option_args['object_name'] = 'post';\n\t\t$list_html = '<ul class=\"gm-index-posts\">';\n\t\t$locs = GeoMashupDB::get_object_locations( $option_args );\n\t\tif ($locs) {\n\t\t\tforeach ($locs as $loc) {\n\t\t\t\t$list_html .= '<li><a href=\"'.get_permalink($loc->object_id).'\">'.\n\t\t\t\t\t$loc->label.\"</a></li>\\n\";\n\t\t\t}\n\t\t}\n\t\t$list_html .= '</ul>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List located posts by area template tag.\n\t *\n\t * Returns an HTML list of all located posts by country and state. May try to look up \n\t * this information when absent.\n\t *\n\t * @since 1.2\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#list-located-posts-by-area\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\tpublic static function list_located_posts_by_area( $args ) {\n\t\tstatic $instance_count = 1;\n\t\t\n\t\t$args = wp_parse_args( $args );\n\n\t\tif ( $instance_count > 1 )\n\t\t\t$id_suffix = '-' . $instance_count;\n\t\telse\n\t\t\t$id_suffix = '';\n\n\t\t$list_html = '<div id=\"gm-area-list' . $id_suffix . '\" class=\"gm-area-list\">';\n\n\t\t$countries = GeoMashupDB::get_distinct_located_values( 'country_code', array( 'object_name' => 'post' ) );\n\t\t$country_count = count( $countries );\n\t\t$country_heading = '';\n\t\tforeach ( $countries as $country ) {\n\t\t\tif ( $country_count > 1 ) {\n\t\t\t\t$country_name = GeoMashupDB::get_administrative_name( $country->country_code ); \n\t\t\t\t$country_name = $country_name ? $country_name : $country->country_code;\n\t\t\t\t$country_heading = '<h3 id=\"' . $country->country_code . $id_suffix . '\">' . $country_name . '</h3>';\n\t\t\t}\n\n\t\t\t$states = GeoMashupDB::get_distinct_located_values( \n\t\t\t\t'admin_code', \n\t\t\t\tarray( 'country_code' => $country->country_code, 'object_name' => 'post' ) \n\t\t\t);\n\t\t\tif ( empty( $states ) ) {\n\t\t\t\t$states = array( (object) array( 'admin_code' => null ) );\n\t\t\t}\n\t\t\tforeach ($states as $state ) { \n\t\t\t\t$location_query = array( \n\t\t\t\t\t'object_name' => 'post',\n\t\t\t\t\t'country_code' => $country->country_code,\n\t\t\t\t\t'admin_code' => $state->admin_code,\n\t\t\t\t\t'sort' => 'post_title'\n\t\t\t\t);\n\t\t\t\t$post_locations = GeoMashupDB::get_object_locations( $location_query );\n\t\t\t\tif ( count( $post_locations ) > 0 ) {\n\t\t\t\t\tif ( ! empty( $country_heading ) ) {\n\t\t\t\t\t\t$list_html .= $country_heading;\n\t\t\t\t\t\t$country_heading = '';\n\t\t\t\t\t}\n\t\t\t\t\tif ( null != $states[0]->admin_code ) {\n\t\t\t\t\t\t$state_name = GeoMashupDB::get_administrative_name( $country->country_code, $state->admin_code );\n\t\t\t\t\t\t$state_name = $state_name ? $state_name : $state->admin_code;\n\t\t\t\t\t\t$list_html .= '<h4 id=\"' . $country->country_code . '-' . $state->admin_code . $id_suffix . '\">' . $state_name . '</h4>';\n\t\t\t\t\t}\n\t\t\t\t\t$list_html .= '<ul class=\"gm-index-posts\">';\n\t\t\t\t\tforeach ( $post_locations as $post_location ) { \n\t\t\t\t\t\t$list_html .= '<li><a href=\"' . \n\t\t\t\t\t\t\tget_permalink( $post_location->object_id ) .\n\t\t\t\t\t\t\t'\">' .\n\t\t\t\t\t\t\t$post_location->label .\n\t\t\t\t\t\t\t'</a>';\n\t\t\t\t\t\tif ( isset( $args['include_address'] ) && $args['include_address'] == 'true' ) {\n\t\t\t\t\t\t\t$list_html .= '<p>' . $post_location->address . '</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$list_html .= '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$list_html .= '</ul>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$list_html .= '</div>';\n\t\treturn $list_html;\n\t}\n\n\t/**\n\t * List nearby items.\n\t *\n\t * Returns an HTML list of objects near the current reference, the current post by default.\n\t *\n\t * @since 1.5\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#nearby-list\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string List HTML.\n\t */\n\t public static function nearby_list( $args = '' ) {\n\n\t\tif ( ! class_exists( 'GeoMashupSearch' ) )\n\t\t\treturn __( 'Enable the geo search widget in the Geo Mashup settings to power the nearby list!', 'GeoMashup' );\n\n\t\t$default_args = array(\n\t\t\t'template' => 'nearby-list',\n\t\t\t'object_name' => 'post',\n\t\t\t'radius' => '50',\n\t \t);\n\t\t$args = wp_parse_args( $args, $default_args );\n\t\t$template = $args['template'];\n\t\tunset( $args['template'] );\n\t\t\n\t\tif ( !isset( $args['near_lat'] ) and !isset( $args['location_text'] ) ) {\n\n\t\t\t// Look near an object\n\t\t\tif ( isset( $args['object_id'] ) ) {\n\n\t\t\t\t// We were given an ID\n\t\t\t\t$object_id = $args['object_id'];\n\t\t\t\tunset( $args['object_id'] );\n\n\t\t\t} else {\n\n\t\t\t\t// Use the current loop ID\n\t\t\t\t$object_id = get_the_ID();\n\n\t\t\t}\n\n\t\t\t// Use the reference object location\n\t\t\t$near_location = GeoMashupDB::get_object_location( $args['object_name'], $object_id );\n\t\t\tif ( $near_location ) {\n\t\t\t\t$args['near_lat'] = $near_location->lat;\n\t\t\t\t$args['near_lng'] = $near_location->lng;\n\t\t\t\tif ( empty( $args['exclude_object_ids'] ) )\n\t\t\t\t\t$args['exclude_object_ids'] = $object_id;\n\t\t\t\telse\n\t\t\t\t\t$args['exclude_object_ids'] .= ',' . $object_id;\n\t\t\t}\n\t\t}\n\n\t\t$geo_search = new GeoMashupSearch( $args );\n\t\tob_start();\n\t\t$geo_search->load_template( $template );\n\t\treturn ob_get_clean();\n\t }\n\n\t/**\n\t * Post coordinates template tag.\n\t *\n\t * Get the coordinates of the current post. \n\t *\n\t * @since 1.0\n\t * @link http://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#post-coordinates\n\t * @deprecated 1.3 Use GeoMashup::current_location()\n\t *\n\t * @param int $places Maximum number of decimal places to use.\n\t * @return array Array containing 'lat' and 'lng' keys.\n\t */\n\tpublic static function post_coordinates($places = 10) {\n\t\tglobal $post;\n\n\t\t$location = GeoMashupDB::get_object_location( 'post', $post->ID );\n\t\t$coordinates = array();\n\t\tif ( !empty( $location ) ) {\n\t\t\t$lat = $location->lat;\n\t\t\t$lng = $location->lng;\n\t\t\t$lat_dec_pos = strpos($lat,'.');\n\t\t\tif ($lat_dec_pos !== false) {\n\t\t\t\t$lat = substr($lat, 0, $lat_dec_pos+$places+1);\n\t\t\t}\n\t\t\t$lng_dec_pos = strpos($lng,'.');\n\t\t\tif ($lng_dec_pos !== false) {\n\t\t\t\t$lng = substr($lng, 0, $lng_dec_pos+$places+1);\n\t\t\t}\n\t\t\t$coordinates['lat'] = $lat;\n\t\t\t$coordinates['lng'] = $lng;\n\t\t}\n\t\treturn $coordinates;\n\t}\n\n\t/**\n\t * WordPress action to emit GeoRSS namespace.\n\t *\n\t * rss_ns {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Feed_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function rss_ns() {\n\t\techo 'xmlns:georss=\"http://www.georss.org/georss\" ';\n\t}\n\n\t/**\n\t * WordPress action to emit GeoRSS tags.\n\t *\n\t * rss_item {@link http://codex.wordpress.org/Plugin_API/Action_Reference#Feed_Actions action}\n\t * called by WordPress.\n\t *\n\t * @since 1.0\n\t */\n\tpublic static function rss_item() {\n\t\tglobal $wp_query;\n\n\t\t// Using Simple GeoRSS for now\n\t\t$location = GeoMashupDB::get_object_location( 'post', $wp_query->post->ID );\n\t\tif ( !empty( $location ) ) {\n\t\t\techo '<georss:point>' . esc_html( $location->lat . ' ' . $location->lng ) . '</georss:point>';\n\t\t}\n\t}\n\n\t/**\n\t * Tabbed category index template tag.\n\t *\n\t * Returns a placeholder where a related map should display a list\n\t * of map objects by category, organized into HTML suited for presentation \n\t * as tabs.\n\t *\n\t * @since 1.2\n\t * @link https://github.com/cyberhobo/wordpress-geo-mashup/wiki/Tag-Reference#tabbed-term-index\n\t * @deprecated Use GeoMashup::tabbed_term_index()\n\t *\n\t * @param string|array $args Template tag arguments.\n\t * @return string Placeholder HTML.\n\t */\n\tpublic static function tabbed_category_index( $args ) {\n\t\treturn self::tabbed_term_index( $args );\n\t}\n\n\t/**\n\t * Tabbed term index template tag.\n\t */\n\tpublic static function tabbed_term_index( $args ) {\n\t\t$args = wp_parse_args($args);\n\n\t\t$id = 'gm-map-1';\n\t\tif ( !empty( $args['for_map'] ) ) \n\t\t\t$id = $args['for_map'];\n\n\t\tif ( !empty( $args['taxonomy'] ) ) \n\t\t\t$id .= '-' . esc_attr ( $args['taxonomy'] );\n\n\t\t$id .= '-tabbed-index';\n\n\t\t$classes = array();\n\n\t\tif ( !empty( $args['show_inactive_tab_markers'] ) && 'false' != $args['show_inactive_tab_markers'] )\n\t\t\t$classes[] = 'show-inactive-tab-markers';\n\n\t\tif ( !empty( $args['start_tab_term'] ) ) \n\t\t\t$classes[] = 'start-tab-term-' . absint( $args['start_tab_term'] );\n\n\t\tif ( !empty( $args['tab_index_group_size'] ) ) \n\t\t\t$classes[] = 'tab-index-group-size-' . absint( $args['tab_index_group_size'] );\n\n\t\tif ( !empty( $args['disable_tab_auto_select'] ) && 'false' != $args['disable_tab_auto_select'] )\n\t\t\t$classes[] = 'disable-tab-auto-select';\n\n\t\treturn '<div id=\"' . $id . '\" class=\"' . implode( ' ', $classes ) . '\"></div>';\n\t}\n\t/**\n\t * Enqueue widget assets in admin.\n\t */\t\n\tpublic static function widget_scripts() {\n\t\twp_enqueue_script( 'geo-mashup-widget' );\n\t}\t\t\n} // class GeoMashup\nGeoMashup::load();\n} // class exists\n", "<?php\r\n/**\r\n * Respond to Geo Mashup AJAX requests for object locations.\r\n *\r\n * @since 1.0\r\n * @package GeoMashup\r\n */\r\n\r\nif ( ( isset( $_GET['output'] ) and 'json' == $_GET['output'] ) or empty( $_GET['object_ids'] ) ) {\r\n\tGeoMashupQuery::generate_location_json( );\r\n} else {\r\n\tGeoMashupQuery::generate_object_html( );\r\n}\r\n\r\n/**\r\n * Class for query handling namespace\r\n *\r\n * @since 1.2\r\n * @package GeoMashup\r\n * @access public\r\n * @static\r\n */\r\nclass GeoMashupQuery {\r\n\r\n\t/**\r\n\t * Strip content in square brackets.\r\n\t *\r\n\t * Shortcodes are not registered in the bare-bones query environments, \r\n\t * but we can strip all bracketed content.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $content Content to strip square brackets from\r\n\t * @return string Content minus square brackets\r\n\t */\r\n\tpublic static function strip_brackets( $content ) {\r\n\t\treturn preg_replace( '/\\[.*?\\]/', '', $content );\r\n\t}\r\n\r\n\t/**\r\n\t * Strip map shortcodes.\r\n\t * \r\n\t * @since 1.3\r\n\t *\r\n\t * @param string $content \r\n\t * @return string Content without map shortcodes.\r\n\t */\r\n\tpublic static function strip_map_shortcodes( $content ) {\r\n\t\treturn preg_replace( '/\\[geo_mashup_map.*?\\]/', '', $content );\r\n\t}\r\n\r\n\t/**\r\n\t * Use templates to output content for objects.\r\n\t * \r\n\t * @since 1.3\r\n\t */\r\n\tpublic static function generate_object_html( ) {\r\n\t\tglobal $comments, $users;\r\n\r\n\t\t$object_ids = $_GET['object_ids'];\r\n\t\tif ( !is_array( $object_ids ) ) {\r\n\t\t\t$object_ids = explode( ',', $object_ids );\r\n\t\t}\r\n\t\t$object_name = ( isset( $_GET['object_name'] ) ) ? $_GET['object_name'] : 'post';\r\n\t\t$template_base = ( isset( $_GET['template'] ) ) ? $_GET['template'] : '';\r\n\r\n\t\tswitch ( $object_name ) {\r\n\t\t\tcase 'post':\r\n\t\t\t\t$query_vars = array( \r\n\t\t\t\t\t'post__in' => $object_ids, \r\n\t\t\t\t\t'post_type' => GeoMashup::get_searchable_post_types(), \r\n\t\t\t\t\t'post_status' => 'publish,future' \r\n\t\t\t\t);\r\n\t\t\t\t// Don't filter this query through other plugins (e.g. event-calendar)\r\n\t\t\t\t$query_vars['suppress_filters'] = true;\r\n\t\t\t\t// No sticky posts please\r\n\t\t\t\tif ( function_exists( 'get_queried_object' ) )\r\n\t\t\t\t\t$query_vars['ignore_sticky_posts'] = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$query_vars['caller_get_posts'] = true; // Necessary only for WP 3.0 support\r\n\t\t\t\t// Don't limit the number of results\r\n\t\t\t\t$query_vars['posts_per_page'] = -1;\r\n\r\n\t\t\t\tquery_posts( $query_vars );\r\n\t\t\t\t\r\n\t\t\t\tif ( have_posts() ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'info-window' : $template_base;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'comment':\r\n\t\t\t\t$comments = GeoMashupDB::get_comment_in( array( 'comment__in' => $object_ids ) );\r\n\t\t\t\tif ( !empty( $comments ) ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'comment' : $template_base;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'user':\r\n\t\t\t\t$users = GeoMashupDB::get_user_in( array( 'user__in' => $object_ids ) );\r\n\t\t\t\tif (!empty( $users ) ) {\r\n\t\t\t\t\tstatus_header(200);\r\n\t\t\t\t}\r\n\t\t\t\t$template_base = ( empty( $template_base ) ) ? 'user' : $template_base;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tload_template( GeoMashup::locate_template( $template_base ) );\r\n\t}\r\n\r\n\t/** \r\n\t * Set the comment global. \r\n\t *\r\n\t * Not sure why WP 2.7 comment templating requires this for callbacks, but it does.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $comment The comment object to make global.\r\n\t */\r\n\tpublic static function set_the_comment( $comment ) {\r\n\t\t$GLOBALS['comment'] = $comment;\r\n\t}\r\n\r\n\t/** \r\n\t * Wrap access to comments global.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @return bool Whether there are any comments to be listed.\r\n\t */\r\n\tpublic static function have_comments( ) {\r\n\t\tglobal $comments;\r\n\r\n\t\treturn ( !empty( $comments ) );\r\n\t}\r\n\r\n\t/**\r\n\t * A wrapper for wp_list_comments when it exists,\r\n\t * otherwise a simple comment loop.\r\n\t *\r\n\t * @since 1.3\r\n\t * @see wp_list_comments()\r\n\t *\r\n\t * @param string|array $args Formatting options\r\n\t */\r\n\tpublic static function list_comments( $args = '' ) {\r\n\t\tglobal $comments, $in_comment_loop;\r\n\r\n\t\tif ( function_exists( 'wp_list_comments' ) ) {\r\n\t\t\twp_list_comments( $args, $comments );\r\n\t\t} else {\r\n\t\t\tif ( empty( $comments ) ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t$args = wp_parse_args( $args );\r\n\t\t\t$in_comment_loop = true;\r\n\t\t\tforeach( $comments as $comment) {\r\n\t\t\t\tif ( !empty( $args['callback'] ) ) {\r\n\t\t\t\t\tcall_user_func( $args['callback'], $comment, $args, 1 );\r\n\t\t\t\t} else {\r\n\t\t\t\t\techo '<p>' . esc_html( $comment->comment_author ) . ':<br/>' . esc_html( $comment->comment_content ) . '</p>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$in_comment_loop = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** \r\n\t * Set the user global. \r\n\t *\r\n\t * Probably only Geo Mashup using it here for a templated list of users.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param object $user The user object to make global.\r\n\t */\r\n\tpublic static function set_the_user( $user ) {\r\n\t\t$GLOBALS['user'] = $user;\r\n\t}\r\n\r\n\t/** \r\n\t * Wrap access to users global. \r\n\t *\r\n\t * Probably only Geo Mashup using it here for a templated list of users.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @returns bool Whether there are any users to be listed.\r\n\t */\r\n\tpublic static function have_users( ) {\r\n\t\tglobal $users;\r\n\r\n\t\treturn ( !empty( $users ) );\r\n\t}\r\n\r\n\t/**\r\n\t * A simple user loop that takes a callback option for formatting.\r\n\t *\r\n\t * @since 1.3\r\n\t *\r\n\t * @param string|array $args Formatting options\r\n\t */\r\n\tpublic static function list_users( $args = '' ) {\r\n\t\tglobal $users, $in_user_loop;\r\n\r\n\t\tif ( empty( $users ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$defaults = array( 'callback' => '' );\r\n\t\t$args = wp_parse_args( $args, $defaults );\r\n\t\t$in_user_loop = true;\r\n\t\tforeach( $users as $user) {\r\n\t\t\tif ( !empty( $args['callback'] ) ) {\r\n\t\t\t\tcall_user_func( $args['callback'], $user, $args );\r\n\t\t\t} else {\r\n\t\t\t\techo '<p>' . esc_html( $user->display_name ) .\r\n\t\t\t\t\t( empty( $user->user_url ) ? '' : ' - ' . $user->url ) . '</p>';\r\n\t\t\t}\r\n\t\t}\r\n\t\t$in_user_loop = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Run a query for object locations from GET parameters and print JSON results.\r\n\t * \r\n\t * @since 1.2\r\n\t */\r\n\tpublic static function generate_location_json( ) {\r\n\t\t/* TODO: Try to track modification?\r\n\t\tif ( !empty( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) ) {\r\n\t\t\t$http_time = strtotime( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );\r\n\t\t\t$mod_time = strtotime( $post->post_modified_gmt . ' GMT' );\r\n\t\t\tif ($mod_time <= $http_time) {\r\n\t\t\t\treturn status_header(304); // Not modified\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatus_header(200);\r\n\t\theader( 'Last-Modified: ' . mysql2date( 'D, d M Y H:i:s', $post->post_modified_gmt, false ) . ' GMT' );\r\n\t\theader( 'Content-type: text/xml; charset='.get_settings('blog_charset'), true);\r\n\t\theader( 'Cache-control: max-age=300, must-revalidate', true);\r\n\t\theader( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 300 ) . \" GMT\" );\r\n\t\theader( 'Pragma:' );\r\n\t\t */\r\n\t\tstatus_header(200);\r\n\t\theader('Content-type: application/json; charset='.get_option('blog_charset'), true);\r\n\t\theader('Cache-Control: no-cache;', true);\r\n\t\theader('Expires: -1;', true);\r\n\r\n\t\t$json = GeoMashup::get_locations_json( GeoMashupDB::sanitize_query_args( $_REQUEST ) );\r\n\t\tif ( isset( $_REQUEST['callback'] ) )\r\n\t\t\t$json = esc_js( $_REQUEST['callback'] ) . '(' . $json . ')';\r\n\t\techo $json;\r\n\t}\r\n}\r\n"], "filenames": ["geo-mashup-db.php", "geo-mashup-ui-managers.php", "geo-mashup.php", "geo-query.php"], "buggy_code_start_loc": [1479, 2, 718, 252], "buggy_code_end_loc": [1479, 949, 720, 255], "fixing_code_start_loc": [1480, 2, 718, 252], "fixing_code_end_loc": [1535, 982, 721, 255], "type": "CWE-20", "message": "The Geo Mashup plugin before 1.10.4 for WordPress has insufficient sanitization of post editor and other user input.", "other": {"cve": {"id": "CVE-2018-14071", "sourceIdentifier": "cve@mitre.org", "published": "2018-07-16T13:29:00.397", "lastModified": "2018-09-12T19:06:15.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Geo Mashup plugin before 1.10.4 for WordPress has insufficient sanitization of post editor and other user input."}, {"lang": "es", "value": "El plugin Geo Mashup en versiones anteriores a la 1.10.4 para WordPress tiene un saneamiento insuficiente de post editor y otras entradas del usuario."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:geo_mashup_project:geo_mashup:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.10.4", "matchCriteriaId": "BF48E8F7-B887-4AF7-AFE5-B276E65A7725"}]}]}], "references": [{"url": "https://github.com/cyberhobo/wordpress-geo-mashup/blob/master/readme.txt", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/cyberhobo/wordpress-geo-mashup/commit/838e2fe15a2328f5ae3dfc75d90e420509286f2f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/cyberhobo/wordpress-geo-mashup/issues/817", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cyberhobo/wordpress-geo-mashup/commit/838e2fe15a2328f5ae3dfc75d90e420509286f2f"}}