{"buggy_code": ["# detect-character-encoding\n\n[![npm](https://img.shields.io/npm/v/detect-character-encoding.svg)](https://www.npmjs.com/package/detect-character-encoding)\n[![Build status](https://img.shields.io/travis/sonicdoe/detect-character-encoding.svg)](https://travis-ci.org/sonicdoe/detect-character-encoding)\n\n> Detect character encoding using [ICU](http://site.icu-project.org)\n\n## Installation\n\n```console\n$ npm install detect-character-encoding\n```\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst detectCharacterEncoding = require('detect-character-encoding');\n\nconst fileBuffer = fs.readFileSync('file.txt');\nconst charsetMatch = detectCharacterEncoding(fileBuffer);\n\nconsole.log(charsetMatch);\n// {\n//   encoding: 'UTF-8',\n//   confidence: 60\n// }\n```\n\n## Supported operating systems\n\n- macOS High Sierra\n- Ubuntu 18.04, 16.04, and 14.04\n- Debian 9 and 8\n\ndetect-character-encoding does not support 32-bit operating systems.\n\n## Supported character sets\n\nAs listed in [ICU\u2019s user guide](http://userguide.icu-project.org/conversion/detection#TOC-Detected-Encodings):\n\n- UTF-8\n- UTF-16BE\n- UTF-16LE\n- UTF-32BE\n- UTF-32LE\n- Shift_JIS\n- ISO-2022-JP\n- ISO-2022-CN\n- ISO-2022-KR\n- GB18030\n- Big5\n- EUC-JP\n- EUC-KR\n- ISO-8859-1\n- ISO-8859-2\n- ISO-8859-5\n- ISO-8859-6\n- ISO-8859-7\n- ISO-8859-8\n- ISO-8859-9\n- windows-1250\n- windows-1251\n- windows-1252\n- windows-1253\n- windows-1254\n- windows-1255\n- windows-1256\n- KOI8-R\n- IBM420\n- IBM424\n\n## License\n\ndetect-character-encoding is licensed under the BSD 2-clause license but includes third-party software under different licenses. See [`LICENSE`](./LICENSE) for the full license text.\n", "#include <node.h>\n#include <nan.h>\n\n#include <unicode/ucsdet.h>\n\nNAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope scope;\n\n\tv8::Local<v8::Object> inputBuffer = info[0]->ToObject();\n\n\tUCharsetDetector *charsetDetector;\n\tconst UCharsetMatch *charsetMatch;\n\tUErrorCode errorCode = U_ZERO_ERROR;\n\n\tcharsetDetector = ucsdet_open(&errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tcharsetDetector,\n\t\tnode::Buffer::Data(inputBuffer),\n\t\tnode::Buffer::Length(inputBuffer),\n\t\t&errorCode\n\t);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector\u2019s text.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tcharsetMatch = ucsdet_detect(charsetDetector, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tconst char *charsetName = ucsdet_getName(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tint32_t confidence = ucsdet_getConfidence(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> obj = Nan::New<v8::Object>();\n\tobj->Set(Nan::New<v8::String>(\"encoding\").ToLocalChecked(), Nan::New<v8::String>(charsetName).ToLocalChecked());\n\tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\n\n\tinfo.GetReturnValue().Set(obj);\n\tucsdet_close(charsetDetector);\n}\n\nvoid Init(v8::Local<v8::Object> exports) {\n\texports->Set(Nan::New<v8::String>(\"detectCharacterEncoding\").ToLocalChecked(),\n\t\tNan::New<v8::FunctionTemplate>(DetectCharacterEncoding)->GetFunction());\n}\n\nNODE_MODULE(icuWrapper, Init);\n", "'use strict';\n\nconst assert = require('assert');\nconst fs = require('fs');\nconst path = require('path');\n\nconst detectCharacterEncoding = require('..');\n\nfunction getFixture(fixture) {\n\treturn fs.readFileSync(path.join(__dirname, 'fixtures', fixture));\n}\n\nit('should return the encoding', () => {\n\tassert.strictEqual(detectCharacterEncoding(getFixture('utf-8.txt')).encoding, 'UTF-8');\n});\n\nit('should return a confidence value', () => {\n\tassert(typeof detectCharacterEncoding(getFixture('utf-8.txt')).confidence === 'number');\n});\n\nit('should throw a TypeError if argument is not a buffer', () => {\n\tassert.throws(() => {\n\t\tdetectCharacterEncoding('string');\n\t}, TypeError);\n});\n"], "fixing_code": ["# detect-character-encoding\n\n[![npm](https://img.shields.io/npm/v/detect-character-encoding.svg)](https://www.npmjs.com/package/detect-character-encoding)\n[![Build status](https://img.shields.io/travis/sonicdoe/detect-character-encoding.svg)](https://travis-ci.org/sonicdoe/detect-character-encoding)\n\n> Detect character encoding using [ICU](http://site.icu-project.org)\n\n## Installation\n\n```console\n$ npm install detect-character-encoding\n```\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst detectCharacterEncoding = require('detect-character-encoding');\n\nconst fileBuffer = fs.readFileSync('file.txt');\nconst charsetMatch = detectCharacterEncoding(fileBuffer);\n\nconsole.log(charsetMatch);\n// {\n//   encoding: 'UTF-8',\n//   confidence: 60\n// }\n```\n\ndetect-character-encoding may return `null` if no charset matches.\n\n## Supported operating systems\n\n- macOS High Sierra\n- Ubuntu 18.04, 16.04, and 14.04\n- Debian 9 and 8\n\ndetect-character-encoding does not support 32-bit operating systems.\n\n## Supported character sets\n\nAs listed in [ICU\u2019s user guide](http://userguide.icu-project.org/conversion/detection#TOC-Detected-Encodings):\n\n- UTF-8\n- UTF-16BE\n- UTF-16LE\n- UTF-32BE\n- UTF-32LE\n- Shift_JIS\n- ISO-2022-JP\n- ISO-2022-CN\n- ISO-2022-KR\n- GB18030\n- Big5\n- EUC-JP\n- EUC-KR\n- ISO-8859-1\n- ISO-8859-2\n- ISO-8859-5\n- ISO-8859-6\n- ISO-8859-7\n- ISO-8859-8\n- ISO-8859-9\n- windows-1250\n- windows-1251\n- windows-1252\n- windows-1253\n- windows-1254\n- windows-1255\n- windows-1256\n- KOI8-R\n- IBM420\n- IBM424\n\n## License\n\ndetect-character-encoding is licensed under the BSD 2-clause license but includes third-party software under different licenses. See [`LICENSE`](./LICENSE) for the full license text.\n", "#include <node.h>\n#include <nan.h>\n\n#include <unicode/ucsdet.h>\n\nNAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope scope;\n\n\tv8::Local<v8::Object> inputBuffer = info[0]->ToObject();\n\n\tUCharsetDetector *charsetDetector;\n\tconst UCharsetMatch *charsetMatch;\n\tUErrorCode errorCode = U_ZERO_ERROR;\n\n\tcharsetDetector = ucsdet_open(&errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tcharsetDetector,\n\t\tnode::Buffer::Data(inputBuffer),\n\t\tnode::Buffer::Length(inputBuffer),\n\t\t&errorCode\n\t);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector\u2019s text.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tcharsetMatch = ucsdet_detect(charsetDetector, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tif(charsetMatch == NULL) {\n\t\tinfo.GetReturnValue().Set(Nan::Null());\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tconst char *charsetName = ucsdet_getName(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tint32_t confidence = ucsdet_getConfidence(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> obj = Nan::New<v8::Object>();\n\tobj->Set(Nan::New<v8::String>(\"encoding\").ToLocalChecked(), Nan::New<v8::String>(charsetName).ToLocalChecked());\n\tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\n\n\tinfo.GetReturnValue().Set(obj);\n\tucsdet_close(charsetDetector);\n}\n\nvoid Init(v8::Local<v8::Object> exports) {\n\texports->Set(Nan::New<v8::String>(\"detectCharacterEncoding\").ToLocalChecked(),\n\t\tNan::New<v8::FunctionTemplate>(DetectCharacterEncoding)->GetFunction());\n}\n\nNODE_MODULE(icuWrapper, Init);\n", "'use strict';\n\nconst assert = require('assert');\nconst fs = require('fs');\nconst path = require('path');\n\nconst detectCharacterEncoding = require('..');\n\nfunction getFixture(fixture) {\n\treturn fs.readFileSync(path.join(__dirname, 'fixtures', fixture));\n}\n\nit('should return the encoding', () => {\n\tassert.strictEqual(detectCharacterEncoding(getFixture('utf-8.txt')).encoding, 'UTF-8');\n});\n\nit('should return a confidence value', () => {\n\tassert(typeof detectCharacterEncoding(getFixture('utf-8.txt')).confidence === 'number');\n});\n\nit('should return null if no charset matches', () => {\n\tassert.strictEqual(detectCharacterEncoding(Buffer.from([0xAB])), null);\n});\n\nit('should throw a TypeError if argument is not a buffer', () => {\n\tassert.throws(() => {\n\t\tdetectCharacterEncoding('string');\n\t}, TypeError);\n});\n"], "filenames": ["README.md", "icuWrapper.cpp", "test/index.js"], "buggy_code_start_loc": [28, 42, 20], "buggy_code_end_loc": [28, 42, 20], "fixing_code_start_loc": [29, 43, 21], "fixing_code_end_loc": [31, 49, 25], "type": "CWE-755", "message": "detect-character-encoding is an open source character encoding inspection library. In detect-character-encoding v0.6.0 and earlier, data matching no charset causes the Node.js process to crash. The problem has been patched in [detect-character-encoding v0.7.0](https://github.com/sonicdoe/detect-character-encoding/releases/tag/v0.7.0). No workaround are available and all users should update to resolve this issue.", "other": {"cve": {"id": "CVE-2021-39157", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-24T19:15:32.127", "lastModified": "2021-09-01T01:03:54.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "detect-character-encoding is an open source character encoding inspection library. In detect-character-encoding v0.6.0 and earlier, data matching no charset causes the Node.js process to crash. The problem has been patched in [detect-character-encoding v0.7.0](https://github.com/sonicdoe/detect-character-encoding/releases/tag/v0.7.0). No workaround are available and all users should update to resolve this issue."}, {"lang": "es", "value": "detect-character-encoding, es una biblioteca de inspecci\u00f3n de codificaci\u00f3n de caracteres de c\u00f3digo abierto. En detect-character-encoding versiones v0.6.0 y anteriores, los datos que no coinciden con ning\u00fan conjunto de caracteres causan que el proceso Node.js se bloquee. El problema ha sido parcheado en [detect-character-encoding v0.7.0](https://github.com/sonicdoe/detect-character-encoding/releases/tag/v0.7.0). No se presentan soluciones disponibles y todos los usuarios deber\u00edan actualizar para resolver este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-755"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-755"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:detect-character-encoding_project:detect-character-encoding:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.7.0", "matchCriteriaId": "E74204E5-7337-49D3-BCC3-EEC4DE5ACD65"}]}]}], "references": [{"url": "https://github.com/sonicdoe/detect-character-encoding/commit/992a11007fff6cfd40b952150ab8d30410c4a20a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sonicdoe/detect-character-encoding/issues/15", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/sonicdoe/detect-character-encoding/security/advisories/GHSA-jqfh-8hw5-fqjr", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sonicdoe/detect-character-encoding/commit/992a11007fff6cfd40b952150ab8d30410c4a20a"}}